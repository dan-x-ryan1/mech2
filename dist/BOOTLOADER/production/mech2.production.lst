

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 14 15:39:14 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,inline
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,inline
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,inline
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,inline
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1,inline
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1
   138                           	psect	text119,global,reloc=2,class=CODE,delta=1,inline
   139                           	psect	text120,global,reloc=2,class=CODE,delta=1
   140                           	psect	text121,global,reloc=2,class=CODE,delta=1
   141                           	psect	text122,global,reloc=2,class=CODE,delta=1
   142                           	psect	text123,global,reloc=2,class=CODE,delta=1,group=1
   143                           	psect	text124,global,reloc=2,class=CODE,delta=1,group=1
   144                           	psect	text125,global,reloc=2,class=CODE,delta=1,group=1
   145                           	psect	text126,global,reloc=2,class=CODE,delta=1,group=1
   146                           	psect	text127,global,reloc=2,class=CODE,delta=1,group=1
   147                           	psect	text128,global,reloc=2,class=CODE,delta=1,group=1
   148                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=1
   149                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   150                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   151                           	psect	text132,global,reloc=2,class=CODE,delta=1,group=1
   152                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=1
   153                           	psect	text134,global,reloc=2,class=CODE,delta=1,group=1
   154                           	psect	text135,global,reloc=2,class=CODE,delta=1,group=1
   155                           	psect	text136,global,reloc=2,class=CODE,delta=1,group=1
   156                           	psect	text137,global,reloc=2,class=CODE,delta=1,group=1
   157                           	psect	text138,global,reloc=2,class=CODE,delta=1,group=1
   158                           	psect	text139,global,reloc=2,class=CODE,delta=1,group=1
   159                           	psect	text140,global,reloc=2,class=CODE,delta=1
   160                           	psect	text141,global,reloc=2,class=CODE,delta=1
   161                           	psect	text142,global,reloc=2,class=CODE,delta=1
   162                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=1
   163                           	psect	text144,global,reloc=2,class=CODE,delta=1,group=1
   164                           	psect	text145,global,reloc=2,class=CODE,delta=1
   165                           	psect	text146,global,reloc=2,class=CODE,delta=1
   166                           	psect	text147,global,reloc=2,class=CODE,delta=1
   167                           	psect	text148,global,reloc=2,class=CODE,delta=1
   168                           	psect	text149,global,reloc=2,class=CODE,delta=1
   169                           	psect	text150,global,reloc=2,class=CODE,delta=1
   170                           	psect	text151,global,reloc=2,class=CODE,delta=1
   171                           	psect	text152,global,reloc=2,class=CODE,delta=1
   172                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   173                           	psect	text154,global,reloc=2,class=CODE,delta=1
   174                           	psect	text155,global,reloc=2,class=CODE,delta=1
   175                           	psect	text156,global,reloc=2,class=CODE,delta=1
   176                           	psect	text157,global,reloc=2,class=CODE,delta=1
   177                           	psect	text158,global,reloc=2,class=CODE,delta=1
   178                           	psect	text159,global,reloc=2,class=CODE,delta=1
   179                           	psect	text160,global,reloc=2,class=CODE,delta=1
   180                           	psect	text161,global,reloc=2,class=CODE,delta=1,inline
   181                           	psect	text162,global,reloc=2,class=CODE,delta=1
   182                           	psect	text163,global,reloc=2,class=CODE,delta=1
   183                           	psect	text164,global,reloc=2,class=CODE,delta=1
   184                           	psect	text165,global,reloc=2,class=CODE,delta=1
   185                           	psect	text166,global,reloc=2,class=CODE,delta=1
   186                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   187                           	psect	text167,global,reloc=2,class=CODE,delta=1
   188                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   189                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   190  0000                     
   191                           ; Version 1.45
   192                           ; Generated 16/11/2017 GMT
   193                           ; 
   194                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   195                           ; All rights reserved.
   196                           ; 
   197                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   198                           ; 
   199                           ; Redistribution and use in source and binary forms, with or without modification, are
   200                           ; permitted provided that the following conditions are met:
   201                           ; 
   202                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   203                           ;        conditions and the following disclaimer.
   204                           ; 
   205                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   206                           ;        of conditions and the following disclaimer in the documentation and/or other
   207                           ;        materials provided with the distribution.
   208                           ; 
   209                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   210                           ;        software without specific prior written permission.
   211                           ; 
   212                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   213                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   214                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   215                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   216                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   217                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   218                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   219                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   220                           ; 
   221                           ; 
   222                           ; Code-generator required, PIC18F67J50 Definitions
   223                           ; 
   224                           ; SFR Addresses
   225  0000                     
   226                           	psect	idataCOMRAM
   227  016084                     __pidataCOMRAM:
   228                           	opt stack 0
   229                           
   230                           ;initializer for _gCursor
   231  016084  0006               	dw	6
   232  016086  0006               	dw	6
   233                           
   234                           ;initializer for _Low_Sensor
   235  016088  2710               	dw	10000
   236                           
   237                           ;initializer for _Bus_State
   238  01608A  01                 	db	1
   239                           
   240                           ;initializer for _change
   241  01608B  01                 	db	1
   242                           
   243                           ;initializer for _zero
   244  01608C  30                 	db	48
   245                           
   246                           ;initializer for _l
   247  01608D  80                 	db	128
   248                           
   249                           ;initializer for _w
   250  01608E  80                 	db	128
   251                           
   252                           	psect	idataBANK1
   253  015F4A                     __pidataBANK1:
   254                           	opt stack 0
   255                           
   256                           ;initializer for Console_Render@F6956
   257  015F4A  0006               	dw	6
   258  015F4C  0006               	dw	6
   259                           
   260                           ;initializer for _gLineSize
   261  015F4E  0080               	dw	128
   262  015F50  0007               	dw	7
   263                           
   264                           ;initializer for _gCharSize
   265  015F52  0005               	dw	5
   266  015F54  0007               	dw	7
   267                           
   268                           ;initializer for _countOff
   269  015F56  00F8               	dw	248
   270                           
   271                           ;initializer for _countOn
   272  015F58  007C               	dw	124
   273                           
   274                           ;initializer for _numReadings
   275  015F5A  0032               	dw	50
   276                           
   277                           ;initializer for _gForecolour
   278  015F5C  FFFF               	dw	65535
   279                           
   280                           ;initializer for _A
   281  015F5E  41                 	db	65
   282                           
   283                           ;initializer for _a
   284  015F5F  61                 	db	97
   285                           
   286                           	psect	mediumconst
   287  00FB56                     __pmediumconst:
   288                           	opt stack 0
   289  00FB56  00                 	db	0
   290  00FB57                     _InitList:
   291                           	opt stack 0
   292  00FB57  1100               	dw	4352
   293  00FB59  0080               	dw	128
   294  00FB5B  012C               	dw	300
   295  00FB5D  B100               	dw	45312
   296  00FB5F  0002               	dw	2
   297  00FB61  0035               	dw	53
   298  00FB63  0036               	dw	54
   299  00FB65  B200               	dw	45568
   300  00FB67  0002               	dw	2
   301  00FB69  0035               	dw	53
   302  00FB6B  0036               	dw	54
   303  00FB6D  B300               	dw	45824
   304  00FB6F  0002               	dw	2
   305  00FB71  0035               	dw	53
   306  00FB73  0036               	dw	54
   307  00FB75  0002               	dw	2
   308  00FB77  0035               	dw	53
   309  00FB79  0036               	dw	54
   310  00FB7B  B400               	dw	46080
   311  00FB7D  0000               	dw	0
   312  00FB7F  C000               	dw	49152
   313  00FB81  00A2               	dw	162
   314  00FB83  0002               	dw	2
   315  00FB85  0084               	dw	132
   316  00FB87  C100               	dw	49408
   317  00FB89  00C5               	dw	197
   318  00FB8B  C200               	dw	49664
   319  00FB8D  000D               	dw	13
   320  00FB8F  0000               	dw	0
   321  00FB91  C300               	dw	49920
   322  00FB93  008D               	dw	141
   323  00FB95  002A               	dw	42
   324  00FB97  C400               	dw	50176
   325  00FB99  008D               	dw	141
   326  00FB9B  00EE               	dw	238
   327  00FB9D  C500               	dw	50432
   328  00FB9F  000A               	dw	10
   329  00FBA1  3600               	dw	13824
   330  00FBA3  00C8               	dw	200
   331  00FBA5  E000               	dw	57344
   332  00FBA7  0012               	dw	18
   333  00FBA9  001C               	dw	28
   334  00FBAB  0010               	dw	16
   335  00FBAD  0018               	dw	24
   336  00FBAF  0033               	dw	51
   337  00FBB1  002C               	dw	44
   338  00FBB3  0025               	dw	37
   339  00FBB5  0028               	dw	40
   340  00FBB7  0028               	dw	40
   341  00FBB9  0027               	dw	39
   342  00FBBB  002F               	dw	47
   343  00FBBD  003C               	dw	60
   344  00FBBF  0000               	dw	0
   345  00FBC1  0003               	dw	3
   346  00FBC3  0003               	dw	3
   347  00FBC5  0010               	dw	16
   348  00FBC7  0080               	dw	128
   349  00FBC9  0078               	dw	120
   350  00FBCB  E100               	dw	57600
   351  00FBCD  0012               	dw	18
   352  00FBCF  001C               	dw	28
   353  00FBD1  0010               	dw	16
   354  00FBD3  0018               	dw	24
   355  00FBD5  002D               	dw	45
   356  00FBD7  0028               	dw	40
   357  00FBD9  0023               	dw	35
   358  00FBDB  0028               	dw	40
   359  00FBDD  0028               	dw	40
   360  00FBDF  0026               	dw	38
   361  00FBE1  002F               	dw	47
   362  00FBE3  003B               	dw	59
   363  00FBE5  0000               	dw	0
   364  00FBE7  0003               	dw	3
   365  00FBE9  0003               	dw	3
   366  00FBEB  0010               	dw	16
   367  00FBED  3A00               	dw	14848
   368  00FBEF  0005               	dw	5
   369  00FBF1  2A00               	dw	10752
   370  00FBF3  0000               	dw	0
   371  00FBF5  0002               	dw	2
   372  00FBF7  0000               	dw	0
   373  00FBF9  0081               	dw	129
   374  00FBFB  2B00               	dw	11008
   375  00FBFD  0000               	dw	0
   376  00FBFF  0003               	dw	3
   377  00FC01  0000               	dw	0
   378  00FC03  00A2               	dw	162
   379  00FC05  2900               	dw	10496
   380  00FC07  2C00               	dw	11264
   381  00FC09                     __end_of_InitList:
   382                           	opt stack 0
   383  00FC09                     Timer0_Init@PRESCALE:
   384                           	opt stack 0
   385  00FC09  0002               	dw	2
   386  00FC0B  0004               	dw	4
   387  00FC0D  0008               	dw	8
   388  00FC0F  0010               	dw	16
   389  00FC11  0020               	dw	32
   390  00FC13  0040               	dw	64
   391  00FC15  0080               	dw	128
   392  00FC17  0100               	dw	256
   393  00FC19                     __end_ofTimer0_Init@PRESCALE:
   394                           	opt stack 0
   395  00FC19                     PortProperty_Valid@F6830:
   396                           	opt stack 0
   397  00FC19  00                 	db	0
   398  00FC1A  01                 	db	1
   399  00FC1B  02                 	db	2
   400  00FC1C  00                 	db	0
   401  00FC1D  01                 	db	1
   402  00FC1E  00                 	db	0
   403  00FC1F  01                 	db	1
   404  00FC20  00                 	db	0
   405  00FC21  02                 	db	2
   406  00FC22  02                 	db	2
   407  00FC23  00                 	db	0
   408  00FC24  00                 	db	0
   409  00FC25  03                 	db	3
   410  00FC26  03                 	db	3
   411  00FC27  03                 	db	3
   412  00FC28  00                 	db	0
   413  00FC29                     __end_ofPortProperty_Valid@F6830:
   414                           	opt stack 0
   415  00FC29                     _dpowers:
   416                           	opt stack 0
   417  00FC29  0001               	dw	1
   418  00FC2B  000A               	dw	10
   419  00FC2D  0064               	dw	100
   420  00FC2F  03E8               	dw	1000
   421  00FC31  2710               	dw	10000
   422  00FC33                     __end_of_dpowers:
   423                           	opt stack 0
   424  00FC33                     _MASKS:
   425                           	opt stack 0
   426  00FC33  00                 	db	0
   427  00FC34  01                 	db	1
   428  00FC35  03                 	db	3
   429  00FC36  07                 	db	7
   430  00FC37  0F                 	db	15
   431  00FC38  1F                 	db	31
   432  00FC39  3F                 	db	63
   433  00FC3A  7F                 	db	127
   434  00FC3B  FF                 	db	255
   435  00FC3C                     __end_of_MASKS:
   436                           	opt stack 0
   437  00FC3C                     HMI_SetButton@F7213:
   438                           	opt stack 0
   439  00FC3C  00                 	db	0
   440  00FC3D  02                 	db	2
   441  00FC3E  01                 	db	1
   442  00FC3F  03                 	db	3
   443  00FC40                     __end_ofHMI_SetButton@F7213:
   444                           	opt stack 0
   445  00FC40                     Timer2_Init@PRESCALE:
   446                           	opt stack 0
   447  00FC40  01                 	db	1
   448  00FC41  04                 	db	4
   449  00FC42  10                 	db	16
   450  00FC43                     __end_ofTimer2_Init@PRESCALE:
   451                           	opt stack 0
   452  00FC43                     _Font5x7:
   453                           	opt stack 0
   454  00FC43  00                 	db	0
   455  00FC44  00                 	db	0
   456  00FC45  00                 	db	0
   457  00FC46  00                 	db	0
   458  00FC47  00                 	db	0
   459  00FC48  00                 	db	0
   460  00FC49  00                 	db	0
   461  00FC4A  5F                 	db	95
   462  00FC4B  00                 	db	0
   463  00FC4C  00                 	db	0
   464  00FC4D  00                 	db	0
   465  00FC4E  07                 	db	7
   466  00FC4F  00                 	db	0
   467  00FC50  07                 	db	7
   468  00FC51  00                 	db	0
   469  00FC52  14                 	db	20
   470  00FC53  7F                 	db	127
   471  00FC54  14                 	db	20
   472  00FC55  7F                 	db	127
   473  00FC56  14                 	db	20
   474  00FC57  24                 	db	36
   475  00FC58  2A                 	db	42
   476  00FC59  7F                 	db	127
   477  00FC5A  2A                 	db	42
   478  00FC5B  12                 	db	18
   479  00FC5C  23                 	db	35
   480  00FC5D  13                 	db	19
   481  00FC5E  08                 	db	8
   482  00FC5F  64                 	db	100
   483  00FC60  62                 	db	98
   484  00FC61  36                 	db	54
   485  00FC62  49                 	db	73
   486  00FC63  55                 	db	85
   487  00FC64  22                 	db	34
   488  00FC65  50                 	db	80
   489  00FC66  00                 	db	0
   490  00FC67  05                 	db	5
   491  00FC68  03                 	db	3
   492  00FC69  00                 	db	0
   493  00FC6A  00                 	db	0
   494  00FC6B  00                 	db	0
   495  00FC6C  1C                 	db	28
   496  00FC6D  22                 	db	34
   497  00FC6E  41                 	db	65
   498  00FC6F  00                 	db	0
   499  00FC70  00                 	db	0
   500  00FC71  41                 	db	65
   501  00FC72  22                 	db	34
   502  00FC73  1C                 	db	28
   503  00FC74  00                 	db	0
   504  00FC75  08                 	db	8
   505  00FC76  2A                 	db	42
   506  00FC77  1C                 	db	28
   507  00FC78  2A                 	db	42
   508  00FC79  08                 	db	8
   509  00FC7A  08                 	db	8
   510  00FC7B  08                 	db	8
   511  00FC7C  3E                 	db	62
   512  00FC7D  08                 	db	8
   513  00FC7E  08                 	db	8
   514  00FC7F  00                 	db	0
   515  00FC80  50                 	db	80
   516  00FC81  30                 	db	48
   517  00FC82  00                 	db	0
   518  00FC83  00                 	db	0
   519  00FC84  08                 	db	8
   520  00FC85  08                 	db	8
   521  00FC86  08                 	db	8
   522  00FC87  08                 	db	8
   523  00FC88  08                 	db	8
   524  00FC89  00                 	db	0
   525  00FC8A  60                 	db	96
   526  00FC8B  60                 	db	96
   527  00FC8C  00                 	db	0
   528  00FC8D  00                 	db	0
   529  00FC8E  20                 	db	32
   530  00FC8F  10                 	db	16
   531  00FC90  08                 	db	8
   532  00FC91  04                 	db	4
   533  00FC92  02                 	db	2
   534  00FC93  3E                 	db	62
   535  00FC94  51                 	db	81
   536  00FC95  49                 	db	73
   537  00FC96  45                 	db	69
   538  00FC97  3E                 	db	62
   539  00FC98  00                 	db	0
   540  00FC99  42                 	db	66
   541  00FC9A  7F                 	db	127
   542  00FC9B  40                 	db	64
   543  00FC9C  00                 	db	0
   544  00FC9D  42                 	db	66
   545  00FC9E  61                 	db	97
   546  00FC9F  51                 	db	81
   547  00FCA0  49                 	db	73
   548  00FCA1  46                 	db	70
   549  00FCA2  21                 	db	33
   550  00FCA3  41                 	db	65
   551  00FCA4  45                 	db	69
   552  00FCA5  4B                 	db	75
   553  00FCA6  31                 	db	49
   554  00FCA7  18                 	db	24
   555  00FCA8  14                 	db	20
   556  00FCA9  12                 	db	18
   557  00FCAA  7F                 	db	127
   558  00FCAB  10                 	db	16
   559  00FCAC  27                 	db	39
   560  00FCAD  45                 	db	69
   561  00FCAE  45                 	db	69
   562  00FCAF  45                 	db	69
   563  00FCB0  39                 	db	57
   564  00FCB1  3C                 	db	60
   565  00FCB2  4A                 	db	74
   566  00FCB3  49                 	db	73
   567  00FCB4  49                 	db	73
   568  00FCB5  30                 	db	48
   569  00FCB6  01                 	db	1
   570  00FCB7  71                 	db	113
   571  00FCB8  09                 	db	9
   572  00FCB9  05                 	db	5
   573  00FCBA  03                 	db	3
   574  00FCBB  36                 	db	54
   575  00FCBC  49                 	db	73
   576  00FCBD  49                 	db	73
   577  00FCBE  49                 	db	73
   578  00FCBF  36                 	db	54
   579  00FCC0  06                 	db	6
   580  00FCC1  49                 	db	73
   581  00FCC2  49                 	db	73
   582  00FCC3  29                 	db	41
   583  00FCC4  1E                 	db	30
   584  00FCC5  00                 	db	0
   585  00FCC6  36                 	db	54
   586  00FCC7  36                 	db	54
   587  00FCC8  00                 	db	0
   588  00FCC9  00                 	db	0
   589  00FCCA  00                 	db	0
   590  00FCCB  56                 	db	86
   591  00FCCC  36                 	db	54
   592  00FCCD  00                 	db	0
   593  00FCCE  00                 	db	0
   594  00FCCF  00                 	db	0
   595  00FCD0  08                 	db	8
   596  00FCD1  14                 	db	20
   597  00FCD2  22                 	db	34
   598  00FCD3  41                 	db	65
   599  00FCD4  14                 	db	20
   600  00FCD5  14                 	db	20
   601  00FCD6  14                 	db	20
   602  00FCD7  14                 	db	20
   603  00FCD8  14                 	db	20
   604  00FCD9  41                 	db	65
   605  00FCDA  22                 	db	34
   606  00FCDB  14                 	db	20
   607  00FCDC  08                 	db	8
   608  00FCDD  00                 	db	0
   609  00FCDE  02                 	db	2
   610  00FCDF  01                 	db	1
   611  00FCE0  51                 	db	81
   612  00FCE1  09                 	db	9
   613  00FCE2  06                 	db	6
   614  00FCE3  32                 	db	50
   615  00FCE4  49                 	db	73
   616  00FCE5  79                 	db	121
   617  00FCE6  41                 	db	65
   618  00FCE7  3E                 	db	62
   619  00FCE8  7E                 	db	126
   620  00FCE9  11                 	db	17
   621  00FCEA  11                 	db	17
   622  00FCEB  11                 	db	17
   623  00FCEC  7E                 	db	126
   624  00FCED  7F                 	db	127
   625  00FCEE  49                 	db	73
   626  00FCEF  49                 	db	73
   627  00FCF0  49                 	db	73
   628  00FCF1  36                 	db	54
   629  00FCF2  3E                 	db	62
   630  00FCF3  41                 	db	65
   631  00FCF4  41                 	db	65
   632  00FCF5  41                 	db	65
   633  00FCF6  22                 	db	34
   634  00FCF7  7F                 	db	127
   635  00FCF8  41                 	db	65
   636  00FCF9  41                 	db	65
   637  00FCFA  22                 	db	34
   638  00FCFB  1C                 	db	28
   639  00FCFC  7F                 	db	127
   640  00FCFD  49                 	db	73
   641  00FCFE  49                 	db	73
   642  00FCFF  49                 	db	73
   643  00FD00  41                 	db	65
   644  00FD01  7F                 	db	127
   645  00FD02  09                 	db	9
   646  00FD03  09                 	db	9
   647  00FD04  01                 	db	1
   648  00FD05  01                 	db	1
   649  00FD06  3E                 	db	62
   650  00FD07  41                 	db	65
   651  00FD08  41                 	db	65
   652  00FD09  51                 	db	81
   653  00FD0A  32                 	db	50
   654  00FD0B  7F                 	db	127
   655  00FD0C  08                 	db	8
   656  00FD0D  08                 	db	8
   657  00FD0E  08                 	db	8
   658  00FD0F  7F                 	db	127
   659  00FD10  00                 	db	0
   660  00FD11  41                 	db	65
   661  00FD12  7F                 	db	127
   662  00FD13  41                 	db	65
   663  00FD14  00                 	db	0
   664  00FD15  20                 	db	32
   665  00FD16  40                 	db	64
   666  00FD17  41                 	db	65
   667  00FD18  3F                 	db	63
   668  00FD19  01                 	db	1
   669  00FD1A  7F                 	db	127
   670  00FD1B  08                 	db	8
   671  00FD1C  14                 	db	20
   672  00FD1D  22                 	db	34
   673  00FD1E  41                 	db	65
   674  00FD1F  7F                 	db	127
   675  00FD20  40                 	db	64
   676  00FD21  40                 	db	64
   677  00FD22  40                 	db	64
   678  00FD23  40                 	db	64
   679  00FD24  7F                 	db	127
   680  00FD25  02                 	db	2
   681  00FD26  04                 	db	4
   682  00FD27  02                 	db	2
   683  00FD28  7F                 	db	127
   684  00FD29  7F                 	db	127
   685  00FD2A  04                 	db	4
   686  00FD2B  08                 	db	8
   687  00FD2C  10                 	db	16
   688  00FD2D  7F                 	db	127
   689  00FD2E  3E                 	db	62
   690  00FD2F  41                 	db	65
   691  00FD30  41                 	db	65
   692  00FD31  41                 	db	65
   693  00FD32  3E                 	db	62
   694  00FD33  7F                 	db	127
   695  00FD34  09                 	db	9
   696  00FD35  09                 	db	9
   697  00FD36  09                 	db	9
   698  00FD37  06                 	db	6
   699  00FD38  3E                 	db	62
   700  00FD39  41                 	db	65
   701  00FD3A  51                 	db	81
   702  00FD3B  21                 	db	33
   703  00FD3C  5E                 	db	94
   704  00FD3D  7F                 	db	127
   705  00FD3E  09                 	db	9
   706  00FD3F  19                 	db	25
   707  00FD40  29                 	db	41
   708  00FD41  46                 	db	70
   709  00FD42  46                 	db	70
   710  00FD43  49                 	db	73
   711  00FD44  49                 	db	73
   712  00FD45  49                 	db	73
   713  00FD46  31                 	db	49
   714  00FD47  01                 	db	1
   715  00FD48  01                 	db	1
   716  00FD49  7F                 	db	127
   717  00FD4A  01                 	db	1
   718  00FD4B  01                 	db	1
   719  00FD4C  3F                 	db	63
   720  00FD4D  40                 	db	64
   721  00FD4E  40                 	db	64
   722  00FD4F  40                 	db	64
   723  00FD50  3F                 	db	63
   724  00FD51  1F                 	db	31
   725  00FD52  20                 	db	32
   726  00FD53  40                 	db	64
   727  00FD54  20                 	db	32
   728  00FD55  1F                 	db	31
   729  00FD56  7F                 	db	127
   730  00FD57  20                 	db	32
   731  00FD58  18                 	db	24
   732  00FD59  20                 	db	32
   733  00FD5A  7F                 	db	127
   734  00FD5B  63                 	db	99
   735  00FD5C  14                 	db	20
   736  00FD5D  08                 	db	8
   737  00FD5E  14                 	db	20
   738  00FD5F  63                 	db	99
   739  00FD60  03                 	db	3
   740  00FD61  04                 	db	4
   741  00FD62  78                 	db	120
   742  00FD63  04                 	db	4
   743  00FD64  03                 	db	3
   744  00FD65  61                 	db	97
   745  00FD66  51                 	db	81
   746  00FD67  49                 	db	73
   747  00FD68  45                 	db	69
   748  00FD69  43                 	db	67
   749  00FD6A  00                 	db	0
   750  00FD6B  00                 	db	0
   751  00FD6C  7F                 	db	127
   752  00FD6D  41                 	db	65
   753  00FD6E  41                 	db	65
   754  00FD6F  02                 	db	2
   755  00FD70  04                 	db	4
   756  00FD71  08                 	db	8
   757  00FD72  10                 	db	16
   758  00FD73  20                 	db	32
   759  00FD74  41                 	db	65
   760  00FD75  41                 	db	65
   761  00FD76  7F                 	db	127
   762  00FD77  00                 	db	0
   763  00FD78  00                 	db	0
   764  00FD79  04                 	db	4
   765  00FD7A  02                 	db	2
   766  00FD7B  01                 	db	1
   767  00FD7C  02                 	db	2
   768  00FD7D  04                 	db	4
   769  00FD7E  40                 	db	64
   770  00FD7F  40                 	db	64
   771  00FD80  40                 	db	64
   772  00FD81  40                 	db	64
   773  00FD82  40                 	db	64
   774  00FD83  00                 	db	0
   775  00FD84  01                 	db	1
   776  00FD85  02                 	db	2
   777  00FD86  04                 	db	4
   778  00FD87  00                 	db	0
   779  00FD88  20                 	db	32
   780  00FD89  54                 	db	84
   781  00FD8A  54                 	db	84
   782  00FD8B  54                 	db	84
   783  00FD8C  78                 	db	120
   784  00FD8D  7F                 	db	127
   785  00FD8E  48                 	db	72
   786  00FD8F  44                 	db	68
   787  00FD90  44                 	db	68
   788  00FD91  38                 	db	56
   789  00FD92  38                 	db	56
   790  00FD93  44                 	db	68
   791  00FD94  44                 	db	68
   792  00FD95  44                 	db	68
   793  00FD96  20                 	db	32
   794  00FD97  38                 	db	56
   795  00FD98  44                 	db	68
   796  00FD99  44                 	db	68
   797  00FD9A  48                 	db	72
   798  00FD9B  7F                 	db	127
   799  00FD9C  38                 	db	56
   800  00FD9D  54                 	db	84
   801  00FD9E  54                 	db	84
   802  00FD9F  54                 	db	84
   803  00FDA0  18                 	db	24
   804  00FDA1  08                 	db	8
   805  00FDA2  7E                 	db	126
   806  00FDA3  09                 	db	9
   807  00FDA4  01                 	db	1
   808  00FDA5  02                 	db	2
   809  00FDA6  08                 	db	8
   810  00FDA7  14                 	db	20
   811  00FDA8  54                 	db	84
   812  00FDA9  54                 	db	84
   813  00FDAA  3C                 	db	60
   814  00FDAB  7F                 	db	127
   815  00FDAC  08                 	db	8
   816  00FDAD  04                 	db	4
   817  00FDAE  04                 	db	4
   818  00FDAF  78                 	db	120
   819  00FDB0  00                 	db	0
   820  00FDB1  44                 	db	68
   821  00FDB2  7D                 	db	125
   822  00FDB3  40                 	db	64
   823  00FDB4  00                 	db	0
   824  00FDB5  20                 	db	32
   825  00FDB6  40                 	db	64
   826  00FDB7  44                 	db	68
   827  00FDB8  3D                 	db	61
   828  00FDB9  00                 	db	0
   829  00FDBA  00                 	db	0
   830  00FDBB  7F                 	db	127
   831  00FDBC  10                 	db	16
   832  00FDBD  28                 	db	40
   833  00FDBE  44                 	db	68
   834  00FDBF  00                 	db	0
   835  00FDC0  41                 	db	65
   836  00FDC1  7F                 	db	127
   837  00FDC2  40                 	db	64
   838  00FDC3  00                 	db	0
   839  00FDC4  7C                 	db	124
   840  00FDC5  04                 	db	4
   841  00FDC6  18                 	db	24
   842  00FDC7  04                 	db	4
   843  00FDC8  78                 	db	120
   844  00FDC9  7C                 	db	124
   845  00FDCA  08                 	db	8
   846  00FDCB  04                 	db	4
   847  00FDCC  04                 	db	4
   848  00FDCD  78                 	db	120
   849  00FDCE  38                 	db	56
   850  00FDCF  44                 	db	68
   851  00FDD0  44                 	db	68
   852  00FDD1  44                 	db	68
   853  00FDD2  38                 	db	56
   854  00FDD3  7C                 	db	124
   855  00FDD4  14                 	db	20
   856  00FDD5  14                 	db	20
   857  00FDD6  14                 	db	20
   858  00FDD7  08                 	db	8
   859  00FDD8  08                 	db	8
   860  00FDD9  14                 	db	20
   861  00FDDA  14                 	db	20
   862  00FDDB  18                 	db	24
   863  00FDDC  7C                 	db	124
   864  00FDDD  7C                 	db	124
   865  00FDDE  08                 	db	8
   866  00FDDF  04                 	db	4
   867  00FDE0  04                 	db	4
   868  00FDE1  08                 	db	8
   869  00FDE2  48                 	db	72
   870  00FDE3  54                 	db	84
   871  00FDE4  54                 	db	84
   872  00FDE5  54                 	db	84
   873  00FDE6  20                 	db	32
   874  00FDE7  04                 	db	4
   875  00FDE8  3F                 	db	63
   876  00FDE9  44                 	db	68
   877  00FDEA  40                 	db	64
   878  00FDEB  20                 	db	32
   879  00FDEC  3C                 	db	60
   880  00FDED  40                 	db	64
   881  00FDEE  40                 	db	64
   882  00FDEF  20                 	db	32
   883  00FDF0  7C                 	db	124
   884  00FDF1  1C                 	db	28
   885  00FDF2  20                 	db	32
   886  00FDF3  40                 	db	64
   887  00FDF4  20                 	db	32
   888  00FDF5  1C                 	db	28
   889  00FDF6  3C                 	db	60
   890  00FDF7  40                 	db	64
   891  00FDF8  30                 	db	48
   892  00FDF9  40                 	db	64
   893  00FDFA  3C                 	db	60
   894  00FDFB  44                 	db	68
   895  00FDFC  28                 	db	40
   896  00FDFD  10                 	db	16
   897  00FDFE  28                 	db	40
   898  00FDFF  44                 	db	68
   899  00FE00  0C                 	db	12
   900  00FE01  50                 	db	80
   901  00FE02  50                 	db	80
   902  00FE03  50                 	db	80
   903  00FE04  3C                 	db	60
   904  00FE05  44                 	db	68
   905  00FE06  64                 	db	100
   906  00FE07  54                 	db	84
   907  00FE08  4C                 	db	76
   908  00FE09  44                 	db	68
   909  00FE0A  00                 	db	0
   910  00FE0B  08                 	db	8
   911  00FE0C  36                 	db	54
   912  00FE0D  41                 	db	65
   913  00FE0E  00                 	db	0
   914  00FE0F  00                 	db	0
   915  00FE10  00                 	db	0
   916  00FE11  7F                 	db	127
   917  00FE12  00                 	db	0
   918  00FE13  00                 	db	0
   919  00FE14  00                 	db	0
   920  00FE15  41                 	db	65
   921  00FE16  36                 	db	54
   922  00FE17  08                 	db	8
   923  00FE18  00                 	db	0
   924  00FE19  08                 	db	8
   925  00FE1A  08                 	db	8
   926  00FE1B  2A                 	db	42
   927  00FE1C  1C                 	db	28
   928  00FE1D  08                 	db	8
   929  00FE1E  08                 	db	8
   930  00FE1F  1C                 	db	28
   931  00FE20  2A                 	db	42
   932  00FE21  08                 	db	8
   933  00FE22  08                 	db	8
   934  00FE23                     __end_of_Font5x7:
   935                           	opt stack 0
   936  00FE23                     exp@coeff:
   937                           	opt stack 0
   938  00FE23  0000               	dw	0
   939  00FE25  3F80               	dw	16256
   940  00FE27  7218               	dw	29208
   941  00FE29  3F31               	dw	16177
   942  00FE2B  FDF0               	dw	65008
   943  00FE2D  3E75               	dw	15989
   944  00FE2F  5847               	dw	22599
   945  00FE31  3D63               	dw	15715
   946  00FE33  9558               	dw	38232
   947  00FE35  3C1D               	dw	15389
   948  00FE37  C482               	dw	50306
   949  00FE39  3AAE               	dw	15022
   950  00FE3B  78A8               	dw	30888
   951  00FE3D  3921               	dw	14625
   952  00FE3F  93EF               	dw	37871
   953  00FE41  3780               	dw	14208
   954  00FE43  92A0               	dw	37536
   955  00FE45  35A7               	dw	13735
   956  00FE47  5646               	dw	22086
   957  00FE49  3415               	dw	13333
   958  00FE4B                     __end_ofexp@coeff:
   959                           	opt stack 0
   960  00FE4B                     log@coeff:
   961                           	opt stack 0
   962  00FE4B  0000               	dw	0
   963  00FE4D  0000               	dw	0
   964  00FE4F  FFC4               	dw	65476
   965  00FE51  3F7F               	dw	16255
   966  00FE53  EF80               	dw	61312
   967  00FE55  BEFF               	dw	48895
   968  00FE57  E190               	dw	57744
   969  00FE59  3EA9               	dw	16041
   970  00FE5B  82EC               	dw	33516
   971  00FE5D  BE76               	dw	48758
   972  00FE5F  AD82               	dw	44418
   973  00FE61  3E2B               	dw	15915
   974  00FE63  3C0E               	dw	15374
   975  00FE65  BDC3               	dw	48579
   976  00FE67  D187               	dw	53639
   977  00FE69  3D13               	dw	15635
   978  00FE6B  7841               	dw	30785
   979  00FE6D  BBD3               	dw	48083
   980  00FE6F                     __end_oflog@coeff:
   981                           	opt stack 0
   982  00FE6F                     _PortG_Property:
   983                           	opt stack 0
   984  00FE6F  FC00               	dw	64512
   985  00FE71                     __end_of_PortG_Property:
   986                           	opt stack 0
   987  00FE71                     _PortF_Property:
   988                           	opt stack 0
   989  00FE71  0FFF               	dw	4095
   990  00FE73                     __end_of_PortF_Property:
   991                           	opt stack 0
   992  00FE73                     _PortE_Property:
   993                           	opt stack 0
   994  00FE73  0000               	dw	0
   995  00FE75                     __end_of_PortE_Property:
   996                           	opt stack 0
   997  00FE75                     _PortD_Property:
   998                           	opt stack 0
   999  00FE75  FFFF               	dw	65535
  1000  00FE77                     __end_of_PortD_Property:
  1001                           	opt stack 0
  1002  00FE77                     _PortC_Property:
  1003                           	opt stack 0
  1004  00FE77  FFF0               	dw	65520
  1005  00FE79                     __end_of_PortC_Property:
  1006                           	opt stack 0
  1007  00FE79                     _PortB_Property:
  1008                           	opt stack 0
  1009  00FE79  FF00               	dw	65280
  1010  00FE7B                     __end_of_PortB_Property:
  1011                           	opt stack 0
  1012  00FE7B                     _PortA_Property:
  1013                           	opt stack 0
  1014  00FE7B  00FF               	dw	255
  1015  00FE7D                     __end_of_PortA_Property:
  1016                           	opt stack 0
  1017  0000                     _ADRES	set	4035
  1018  0000                     _TMR0	set	4054
  1019  0000                     _RCREG1	set	4015
  1020  0000                     _TXREG1	set	4014
  1021  0000                     _SPBRG1	set	4016
  1022  0000                     _TXSTA1bits	set	4013
  1023  0000                     _BAUDCON1bits	set	3966
  1024  0000                     _RCSTA1	set	4012
  1025  0000                     _TXSTA1	set	4013
  1026  0000                     _TRISCbits	set	3988
  1027  0000                     _ADCON0	set	4034
  1028  0000                     _ADCON1	set	4033
  1029  0000                     _PR2	set	4043
  1030  0000                     _T2CONbits	set	4042
  1031  0000                     _T0CONbits	set	4053
  1032  0000                     _RCONbits	set	4048
  1033  0000                     _OSCTUNEbits	set	3995
  1034  0000                     _PIR3	set	4004
  1035  0000                     _PIR2	set	4001
  1036  0000                     _PIR1	set	3998
  1037  0000                     _INTCONbits	set	4082
  1038  0000                     _SSP2CON2bits	set	3947
  1039  0000                     _SSP1CON2bits	set	4037
  1040  0000                     _SSP1ADD	set	4040
  1041  0000                     _ANCON0	set	4033
  1042  0000                     _ADRESL	set	4035
  1043  0000                     _ADRESH	set	4036
  1044  0000                     _ADCON1bits	set	4033
  1045  0000                     _ADCON0bits	set	4034
  1046  0000                     _SSP2CON1bits	set	3948
  1047  0000                     _SSP1CON1bits	set	4038
  1048  0000                     _SSP2STATbits	set	3949
  1049  0000                     _SSP1STATbits	set	4039
  1050  0000                     _PIE3bits	set	4003
  1051  0000                     _PIE1bits	set	3997
  1052  0000                     _PIR3bits	set	4004
  1053  0000                     _PIR1bits	set	3998
  1054  0000                     _IPR3bits	set	4005
  1055  0000                     _IPR1bits	set	3999
  1056  0000                     _PORTFbits	set	3973
  1057  0000                     _SSP2CON2	set	3947
  1058  0000                     _SSP1CON2	set	4037
  1059  0000                     _SSP2BUF	set	3951
  1060  0000                     _SSP2CON1	set	3948
  1061  0000                     _SSP2STAT	set	3949
  1062  0000                     _SSP1BUF	set	4041
  1063  0000                     _SSP1CON1	set	4038
  1064  0000                     _SSP1STAT	set	4039
  1065  0000                     _LATG	set	3983
  1066  0000                     _LATF	set	3982
  1067  0000                     _LATE	set	3981
  1068  0000                     _LATD	set	3980
  1069  0000                     _LATC	set	3979
  1070  0000                     _LATB	set	3978
  1071  0000                     _LATA	set	3977
  1072  0000                     _TRISG	set	3992
  1073  0000                     _TRISF	set	3991
  1074  0000                     _TRISE	set	3990
  1075  0000                     _TRISD	set	3989
  1076  0000                     _TRISC	set	3988
  1077  0000                     _TRISB	set	3987
  1078  0000                     _TRISA	set	3986
  1079  0000                     _PORTG	set	3974
  1080  0000                     _PORTF	set	3973
  1081  0000                     _PORTE	set	3972
  1082  0000                     _PORTD	set	3971
  1083  0000                     _PORTC	set	3970
  1084  0000                     _PORTB	set	3969
  1085  0000                     _PORTA	set	3968
  1086  0000                     _RA3	set	31747
  1087  0000                     _RA2	set	31746
  1088  0000                     _RD7	set	31775
  1089  0000                     _RD5	set	31773
  1090  0000                     _TRISD7	set	31919
  1091  0000                     _TRISD5	set	31917
  1092  0000                     _TRISA3	set	31891
  1093  0000                     _TRISA2	set	31890
  1094  0000                     _GODONE	set	32273
  1095  0000                     _ADON	set	32272
  1096  00FE7D                     STR_33:
  1097  00FE7D  50                 	db	80	;'P'
  1098  00FE7E  72                 	db	114	;'r'
  1099  00FE7F  65                 	db	101	;'e'
  1100  00FE80  73                 	db	115	;'s'
  1101  00FE81  73                 	db	115	;'s'
  1102  00FE82  20                 	db	32
  1103  00FE83  64                 	db	100	;'d'
  1104  00FE84  6F                 	db	111	;'o'
  1105  00FE85  77                 	db	119	;'w'
  1106  00FE86  6E                 	db	110	;'n'
  1107  00FE87  20                 	db	32
  1108  00FE88  66                 	db	102	;'f'
  1109  00FE89  6F                 	db	111	;'o'
  1110  00FE8A  72                 	db	114	;'r'
  1111  00FE8B  0A                 	db	10
  1112  00FE8C  73                 	db	115	;'s'
  1113  00FE8D  71                 	db	113	;'q'
  1114  00FE8E  75                 	db	117	;'u'
  1115  00FE8F  61                 	db	97	;'a'
  1116  00FE90  72                 	db	114	;'r'
  1117  00FE91  65                 	db	101	;'e'
  1118  00FE92  20                 	db	32
  1119  00FE93  64                 	db	100	;'d'
  1120  00FE94  72                 	db	114	;'r'
  1121  00FE95  69                 	db	105	;'i'
  1122  00FE96  76                 	db	118	;'v'
  1123  00FE97  65                 	db	101	;'e'
  1124  00FE98  2C                 	db	44
  1125  00FE99  0A                 	db	10
  1126  00FE9A  00                 	db	0
  1127  00FE9B                     STR_34:
  1128  00FE9B  50                 	db	80	;'P'
  1129  00FE9C  72                 	db	114	;'r'
  1130  00FE9D  65                 	db	101	;'e'
  1131  00FE9E  73                 	db	115	;'s'
  1132  00FE9F  73                 	db	115	;'s'
  1133  00FEA0  20                 	db	32
  1134  00FEA1  75                 	db	117	;'u'
  1135  00FEA2  70                 	db	112	;'p'
  1136  00FEA3  20                 	db	32
  1137  00FEA4  66                 	db	102	;'f'
  1138  00FEA5  6F                 	db	111	;'o'
  1139  00FEA6  72                 	db	114	;'r'
  1140  00FEA7  20                 	db	32
  1141  00FEA8  49                 	db	73	;'I'
  1142  00FEA9  52                 	db	82	;'R'
  1143  00FEAA  20                 	db	32
  1144  00FEAB  73                 	db	115	;'s'
  1145  00FEAC  63                 	db	99	;'c'
  1146  00FEAD  61                 	db	97	;'a'
  1147  00FEAE  6E                 	db	110	;'n'
  1148  00FEAF  20                 	db	32
  1149  00FEB0  6D                 	db	109	;'m'
  1150  00FEB1  6F                 	db	111	;'o'
  1151  00FEB2  64                 	db	100	;'d'
  1152  00FEB3  65                 	db	101	;'e'
  1153  00FEB4  2C                 	db	44
  1154  00FEB5  0A                 	db	10
  1155  00FEB6  00                 	db	0
  1156  00FEB7                     STR_32:
  1157  00FEB7  50                 	db	80	;'P'
  1158  00FEB8  72                 	db	114	;'r'
  1159  00FEB9  65                 	db	101	;'e'
  1160  00FEBA  73                 	db	115	;'s'
  1161  00FEBB  73                 	db	115	;'s'
  1162  00FEBC  20                 	db	32
  1163  00FEBD  72                 	db	114	;'r'
  1164  00FEBE  69                 	db	105	;'i'
  1165  00FEBF  67                 	db	103	;'g'
  1166  00FEC0  68                 	db	104	;'h'
  1167  00FEC1  74                 	db	116	;'t'
  1168  00FEC2  20                 	db	32
  1169  00FEC3  66                 	db	102	;'f'
  1170  00FEC4  6F                 	db	111	;'o'
  1171  00FEC5  72                 	db	114	;'r'
  1172  00FEC6  20                 	db	32
  1173  00FEC7  35                 	db	53	;'5'
  1174  00FEC8  6D                 	db	109	;'m'
  1175  00FEC9  0A                 	db	10
  1176  00FECA  20                 	db	32
  1177  00FECB  64                 	db	100	;'d'
  1178  00FECC  72                 	db	114	;'r'
  1179  00FECD  69                 	db	105	;'i'
  1180  00FECE  76                 	db	118	;'v'
  1181  00FECF  65                 	db	101	;'e'
  1182  00FED0  2C                 	db	44
  1183  00FED1  0A                 	db	10
  1184  00FED2  00                 	db	0
  1185  00FED3                     STR_62:
  1186  00FED3  54                 	db	84	;'T'
  1187  00FED4  68                 	db	104	;'h'
  1188  00FED5  65                 	db	101	;'e'
  1189  00FED6  20                 	db	32
  1190  00FED7  74                 	db	116	;'t'
  1191  00FED8  61                 	db	97	;'a'
  1192  00FED9  72                 	db	114	;'r'
  1193  00FEDA  67                 	db	103	;'g'
  1194  00FEDB  65                 	db	101	;'e'
  1195  00FEDC  74                 	db	116	;'t'
  1196  00FEDD  20                 	db	32
  1197  00FEDE  64                 	db	100	;'d'
  1198  00FEDF  69                 	db	105	;'i'
  1199  00FEE0  73                 	db	115	;'s'
  1200  00FEE1  74                 	db	116	;'t'
  1201  00FEE2  61                 	db	97	;'a'
  1202  00FEE3  6E                 	db	110	;'n'
  1203  00FEE4  63                 	db	99	;'c'
  1204  00FEE5  65                 	db	101	;'e'
  1205  00FEE6  20                 	db	32
  1206  00FEE7  69                 	db	105	;'i'
  1207  00FEE8  73                 	db	115	;'s'
  1208  00FEE9  3A                 	db	58	;':'
  1209  00FEEA  20                 	db	32
  1210  00FEEB  25                 	db	37
  1211  00FEEC  64                 	db	100	;'d'
  1212  00FEED  0A                 	db	10
  1213  00FEEE  00                 	db	0
  1214  00FEEF                     STR_35:
  1215  00FEEF  50                 	db	80	;'P'
  1216  00FEF0  72                 	db	114	;'r'
  1217  00FEF1  65                 	db	101	;'e'
  1218  00FEF2  73                 	db	115	;'s'
  1219  00FEF3  73                 	db	115	;'s'
  1220  00FEF4  20                 	db	32
  1221  00FEF5  6C                 	db	108	;'l'
  1222  00FEF6  65                 	db	101	;'e'
  1223  00FEF7  66                 	db	102	;'f'
  1224  00FEF8  74                 	db	116	;'t'
  1225  00FEF9  20                 	db	32
  1226  00FEFA  66                 	db	102	;'f'
  1227  00FEFB  6F                 	db	111	;'o'
  1228  00FEFC  72                 	db	114	;'r'
  1229  00FEFD  20                 	db	32
  1230  00FEFE  77                 	db	119	;'w'
  1231  00FEFF  61                 	db	97	;'a'
  1232  00FF00  6C                 	db	108	;'l'
  1233  00FF01  6C                 	db	108	;'l'
  1234  00FF02  20                 	db	32
  1235  00FF03  66                 	db	102	;'f'
  1236  00FF04  6F                 	db	111	;'o'
  1237  00FF05  6C                 	db	108	;'l'
  1238  00FF06  6C                 	db	108	;'l'
  1239  00FF07  6F                 	db	111	;'o'
  1240  00FF08  77                 	db	119	;'w'
  1241  00FF09  0A                 	db	10
  1242  00FF0A  00                 	db	0
  1243  00FF0B                     STR_13:
  1244  00FF0B  0A                 	db	10
  1245  00FF0C  54                 	db	84	;'T'
  1246  00FF0D  68                 	db	104	;'h'
  1247  00FF0E  65                 	db	101	;'e'
  1248  00FF0F  20                 	db	32
  1249  00FF10  43                 	db	67	;'C'
  1250  00FF11  6C                 	db	108	;'l'
  1251  00FF12  6F                 	db	111	;'o'
  1252  00FF13  73                 	db	115	;'s'
  1253  00FF14  65                 	db	101	;'e'
  1254  00FF15  73                 	db	115	;'s'
  1255  00FF16  20                 	db	32
  1256  00FF17  6F                 	db	111	;'o'
  1257  00FF18  62                 	db	98	;'b'
  1258  00FF19  6A                 	db	106	;'j'
  1259  00FF1A  65                 	db	101	;'e'
  1260  00FF1B  63                 	db	99	;'c'
  1261  00FF1C  74                 	db	116	;'t'
  1262  00FF1D  20                 	db	32
  1263  00FF1E  28                 	db	40
  1264  00FF1F  6D                 	db	109	;'m'
  1265  00FF20  6D                 	db	109	;'m'
  1266  00FF21  29                 	db	41
  1267  00FF22  3A                 	db	58	;':'
  1268  00FF23  20                 	db	32
  1269  00FF24  25                 	db	37
  1270  00FF25  64                 	db	100	;'d'
  1271  00FF26  00                 	db	0
  1272  00FF27                     STR_51:
  1273  00FF27  53                 	db	83	;'S'
  1274  00FF28  51                 	db	81	;'Q'
  1275  00FF29  55                 	db	85	;'U'
  1276  00FF2A  41                 	db	65	;'A'
  1277  00FF2B  52                 	db	82	;'R'
  1278  00FF2C  45                 	db	69	;'E'
  1279  00FF2D  20                 	db	32
  1280  00FF2E  44                 	db	68	;'D'
  1281  00FF2F  52                 	db	82	;'R'
  1282  00FF30  49                 	db	73	;'I'
  1283  00FF31  56                 	db	86	;'V'
  1284  00FF32  45                 	db	69	;'E'
  1285  00FF33  20                 	db	32
  1286  00FF34  4D                 	db	77	;'M'
  1287  00FF35  4F                 	db	79	;'O'
  1288  00FF36  44                 	db	68	;'D'
  1289  00FF37  45                 	db	69	;'E'
  1290  00FF38  20                 	db	32
  1291  00FF39  33                 	db	51	;'3'
  1292  00FF3A  21                 	db	33
  1293  00FF3B  20                 	db	32
  1294  00FF3C  0A                 	db	10
  1295  00FF3D  00                 	db	0
  1296  00FF3E                     STR_41:
  1297  00FF3E  54                 	db	84	;'T'
  1298  00FF3F  72                 	db	114	;'r'
  1299  00FF40  61                 	db	97	;'a'
  1300  00FF41  76                 	db	118	;'v'
  1301  00FF42  65                 	db	101	;'e'
  1302  00FF43  6C                 	db	108	;'l'
  1303  00FF44  65                 	db	101	;'e'
  1304  00FF45  64                 	db	100	;'d'
  1305  00FF46  20                 	db	32
  1306  00FF47  44                 	db	68	;'D'
  1307  00FF48  69                 	db	105	;'i'
  1308  00FF49  73                 	db	115	;'s'
  1309  00FF4A  74                 	db	116	;'t'
  1310  00FF4B  61                 	db	97	;'a'
  1311  00FF4C  6E                 	db	110	;'n'
  1312  00FF4D  63                 	db	99	;'c'
  1313  00FF4E  65                 	db	101	;'e'
  1314  00FF4F  3A                 	db	58	;':'
  1315  00FF50  0A                 	db	10
  1316  00FF51  25                 	db	37
  1317  00FF52  64                 	db	100	;'d'
  1318  00FF53  00                 	db	0
  1319  00FF54                     STR_29:
  1320  00FF54  0A                 	db	10
  1321  00FF55  53                 	db	83	;'S'
  1322  00FF56  74                 	db	116	;'t'
  1323  00FF57  65                 	db	101	;'e'
  1324  00FF58  70                 	db	112	;'p'
  1325  00FF59  73                 	db	115	;'s'
  1326  00FF5A  20                 	db	32
  1327  00FF5B  54                 	db	84	;'T'
  1328  00FF5C  72                 	db	114	;'r'
  1329  00FF5D  61                 	db	97	;'a'
  1330  00FF5E  76                 	db	118	;'v'
  1331  00FF5F  65                 	db	101	;'e'
  1332  00FF60  6C                 	db	108	;'l'
  1333  00FF61  6C                 	db	108	;'l'
  1334  00FF62  65                 	db	101	;'e'
  1335  00FF63  64                 	db	100	;'d'
  1336  00FF64  3A                 	db	58	;':'
  1337  00FF65  20                 	db	32
  1338  00FF66  25                 	db	37
  1339  00FF67  64                 	db	100	;'d'
  1340  00FF68  00                 	db	0
  1341  00FF69                     STR_12:
  1342  00FF69  53                 	db	83	;'S'
  1343  00FF6A  74                 	db	116	;'t'
  1344  00FF6B  65                 	db	101	;'e'
  1345  00FF6C  70                 	db	112	;'p'
  1346  00FF6D  70                 	db	112	;'p'
  1347  00FF6E  65                 	db	101	;'e'
  1348  00FF6F  64                 	db	100	;'d'
  1349  00FF70  20                 	db	32
  1350  00FF71  33                 	db	51	;'3'
  1351  00FF72  36                 	db	54	;'6'
  1352  00FF73  30                 	db	48	;'0'
  1353  00FF74  20                 	db	32
  1354  00FF75  64                 	db	100	;'d'
  1355  00FF76  65                 	db	101	;'e'
  1356  00FF77  67                 	db	103	;'g'
  1357  00FF78  72                 	db	114	;'r'
  1358  00FF79  65                 	db	101	;'e'
  1359  00FF7A  65                 	db	101	;'e'
  1360  00FF7B  73                 	db	115	;'s'
  1361  00FF7C  00                 	db	0
  1362  00FF7D                     STR_2:
  1363  00FF7D  20                 	db	32
  1364  00FF7E  20                 	db	32
  1365  00FF7F  20                 	db	32
  1366  00FF80  20                 	db	32
  1367  00FF81  20                 	db	32
  1368  00FF82  20                 	db	32
  1369  00FF83  20                 	db	32
  1370  00FF84  20                 	db	32
  1371  00FF85  20                 	db	32
  1372  00FF86  20                 	db	32
  1373  00FF87  20                 	db	32
  1374  00FF88  20                 	db	32
  1375  00FF89  20                 	db	32
  1376  00FF8A  20                 	db	32
  1377  00FF8B  20                 	db	32
  1378  00FF8C  20                 	db	32
  1379  00FF8D  20                 	db	32
  1380  00FF8E  0A                 	db	10
  1381  00FF8F  00                 	db	0
  1382  00FF90                     STR_17:
  1383  00FF90  53                 	db	83	;'S'
  1384  00FF91  65                 	db	101	;'e'
  1385  00FF92  6E                 	db	110	;'n'
  1386  00FF93  73                 	db	115	;'s'
  1387  00FF94  6F                 	db	111	;'o'
  1388  00FF95  72                 	db	114	;'r'
  1389  00FF96  20                 	db	32
  1390  00FF97  4D                 	db	77	;'M'
  1391  00FF98  6F                 	db	111	;'o'
  1392  00FF99  76                 	db	118	;'v'
  1393  00FF9A  69                 	db	105	;'i'
  1394  00FF9B  6E                 	db	110	;'n'
  1395  00FF9C  67                 	db	103	;'g'
  1396  00FF9D  21                 	db	33
  1397  00FF9E  20                 	db	32
  1398  00FF9F  20                 	db	32
  1399  00FFA0  20                 	db	32
  1400  00FFA1  0A                 	db	10
  1401  00FFA2  00                 	db	0
  1402  00FFA3                     STR_14:
  1403  00FFA3  0A                 	db	10
  1404  00FFA4  47                 	db	71	;'G'
  1405  00FFA5  6F                 	db	111	;'o'
  1406  00FFA6  69                 	db	105	;'i'
  1407  00FFA7  6E                 	db	110	;'n'
  1408  00FFA8  67                 	db	103	;'g'
  1409  00FFA9  20                 	db	32
  1410  00FFAA  62                 	db	98	;'b'
  1411  00FFAB  61                 	db	97	;'a'
  1412  00FFAC  63                 	db	99	;'c'
  1413  00FFAD  6B                 	db	107	;'k'
  1414  00FFAE  20                 	db	32
  1415  00FFAF  74                 	db	116	;'t'
  1416  00FFB0  6F                 	db	111	;'o'
  1417  00FFB1  3A                 	db	58	;':'
  1418  00FFB2  20                 	db	32
  1419  00FFB3  25                 	db	37
  1420  00FFB4  64                 	db	100	;'d'
  1421  00FFB5  00                 	db	0
  1422  00FFB6                     STR_3:
  1423  00FFB6  53                 	db	83	;'S'
  1424  00FFB7  65                 	db	101	;'e'
  1425  00FFB8  6E                 	db	110	;'n'
  1426  00FFB9  73                 	db	115	;'s'
  1427  00FFBA  6F                 	db	111	;'o'
  1428  00FFBB  72                 	db	114	;'r'
  1429  00FFBC  20                 	db	32
  1430  00FFBD  4D                 	db	77	;'M'
  1431  00FFBE  6F                 	db	111	;'o'
  1432  00FFBF  76                 	db	118	;'v'
  1433  00FFC0  69                 	db	105	;'i'
  1434  00FFC1  6E                 	db	110	;'n'
  1435  00FFC2  67                 	db	103	;'g'
  1436  00FFC3  21                 	db	33
  1437  00FFC4  0A                 	db	10
  1438  00FFC5  00                 	db	0
  1439  00FFC6                     STR_63:
  1440  00FFC6  41                 	db	65	;'A'
  1441  00FFC7  44                 	db	68	;'D'
  1442  00FFC8  43                 	db	67	;'C'
  1443  00FFC9  20                 	db	32
  1444  00FFCA  41                 	db	65	;'A'
  1445  00FFCB  56                 	db	86	;'V'
  1446  00FFCC  45                 	db	69	;'E'
  1447  00FFCD  52                 	db	82	;'R'
  1448  00FFCE  41                 	db	65	;'A'
  1449  00FFCF  47                 	db	71	;'G'
  1450  00FFD0  45                 	db	69	;'E'
  1451  00FFD1  20                 	db	32
  1452  00FFD2  25                 	db	37
  1453  00FFD3  64                 	db	100	;'d'
  1454  00FFD4  0A                 	db	10
  1455  00FFD5  00                 	db	0
  1456  00FFD6                     STR_31:
  1457  00FFD6  52                 	db	82	;'R'
  1458  00FFD7  6F                 	db	111	;'o'
  1459  00FFD8  62                 	db	98	;'b'
  1460  00FFD9  6F                 	db	111	;'o'
  1461  00FFDA  74                 	db	116	;'t'
  1462  00FFDB  20                 	db	32
  1463  00FFDC  52                 	db	82	;'R'
  1464  00FFDD  65                 	db	101	;'e'
  1465  00FFDE  61                 	db	97	;'a'
  1466  00FFDF  64                 	db	100	;'d'
  1467  00FFE0  79                 	db	121	;'y'
  1468  00FFE1  21                 	db	33
  1469  00FFE2  20                 	db	32
  1470  00FFE3  0A                 	db	10
  1471  00FFE4  00                 	db	0
  1472  00FFE5                     STR_72:
  1473  00FFE5  42                 	db	66	;'B'
  1474  00FFE6  65                 	db	101	;'e'
  1475  00FFE7  73                 	db	115	;'s'
  1476  00FFE8  6E                 	db	110	;'n'
  1477  00FFE9  65                 	db	101	;'e'
  1478  00FFEA  6F                 	db	111	;'o'
  1479  00FFEB  72                 	db	114	;'r'
  1480  00FFEC  3A                 	db	58	;':'
  1481  00FFED  20                 	db	32
  1482  00FFEE  25                 	db	37
  1483  00FFEF  64                 	db	100	;'d'
  1484  00FFF0  00                 	db	0
  1485  00FFF1                     STR_52:
  1486  00FFF1  54                 	db	84	;'T'
  1487  00FFF2  6F                 	db	111	;'o'
  1488  00FFF3  74                 	db	116	;'t'
  1489  00FFF4  61                 	db	97	;'a'
  1490  00FFF5  6C                 	db	108	;'l'
  1491  00FFF6  3A                 	db	58	;':'
  1492  00FFF7  20                 	db	32
  1493  00FFF8  25                 	db	37
  1494  00FFF9  64                 	db	100	;'d'
  1495  00FFFA  0A                 	db	10
  1496  00FFFB  00                 	db	0
  1497  00FFFC                     STR_1:
  1498  00FFFC  25                 	db	37
  1499  00FFFD  63                 	db	99	;'c'
  1500  00FFFE  00                 	db	0
  1501  0000                     
  1502                           ; #config settings
  1503  00FFFF  00                 	db	0	; dummy byte at the end
  1504  0000                     
  1505                           	psect	cinit
  1506  0145DA                     __pcinit:
  1507                           	opt stack 0
  1508  0145DA                     start_initialization:
  1509                           	opt stack 0
  1510  0145DA                     __initialization:
  1511                           	opt stack 0
  1512                           
  1513                           ; Initialize objects allocated to BANK1 (22 bytes)
  1514                           ; load TBLPTR registers with __pidataBANK1
  1515  0145DA  0E4A               	movlw	low __pidataBANK1
  1516  0145DC  6EF6               	movwf	tblptrl,c
  1517  0145DE  0E5F               	movlw	high __pidataBANK1
  1518  0145E0  6EF7               	movwf	tblptrh,c
  1519  0145E2  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1520  0145E4  6EF8               	movwf	tblptru,c
  1521  0145E6  EE01  F0E1         	lfsr	0,__pdataBANK1
  1522  0145EA  EE10 F016          	lfsr	1,22
  1523  0145EE                     copy_data0:
  1524  0145EE  0009               	tblrd		*+
  1525  0145F0  CFF5 FFEE          	movff	tablat,postinc0
  1526  0145F4  50E5               	movf	postdec1,w,c
  1527  0145F6  50E1               	movf	fsr1l,w,c
  1528  0145F8  E1FA               	bnz	copy_data0
  1529                           
  1530                           ; Initialize objects allocated to COMRAM (11 bytes)
  1531                           ; load TBLPTR registers with __pidataCOMRAM
  1532  0145FA  0E84               	movlw	low __pidataCOMRAM
  1533  0145FC  6EF6               	movwf	tblptrl,c
  1534  0145FE  0E60               	movlw	high __pidataCOMRAM
  1535  014600  6EF7               	movwf	tblptrh,c
  1536  014602  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1537  014604  6EF8               	movwf	tblptru,c
  1538  014606  EE00  F046         	lfsr	0,__pdataCOMRAM
  1539  01460A  EE10 F00B          	lfsr	1,11
  1540  01460E                     copy_data1:
  1541  01460E  0009               	tblrd		*+
  1542  014610  CFF5 FFEE          	movff	tablat,postinc0
  1543  014614  50E5               	movf	postdec1,w,c
  1544  014616  50E1               	movf	fsr1l,w,c
  1545  014618  E1FA               	bnz	copy_data1
  1546                           
  1547                           ; Clear objects allocated to BIGRAM (300 bytes)
  1548  01461A  EE03  F018         	lfsr	0,__pbssBIGRAM
  1549  01461E  EE11 F02C          	lfsr	1,300
  1550  014622                     clear_0:
  1551  014622  6AEE               	clrf	postinc0,c
  1552  014624  50E5               	movf	postdec1,w,c
  1553  014626  50E1               	movf	fsr1l,w,c
  1554  014628  E1FC               	bnz	clear_0
  1555  01462A  50E2               	movf	fsr1h,w,c
  1556  01462C  E1FA               	bnz	clear_0
  1557                           
  1558                           ; Clear objects allocated to BANK2 (251 bytes)
  1559  01462E  EE02  F000         	lfsr	0,__pbssBANK2
  1560  014632  0EFB               	movlw	251
  1561  014634                     clear_1:
  1562  014634  6AEE               	clrf	postinc0,c
  1563  014636  06E8               	decf	wreg,f,c
  1564  014638  E1FD               	bnz	clear_1
  1565                           
  1566                           ; Clear objects allocated to BANK1 (225 bytes)
  1567  01463A  EE01  F000         	lfsr	0,__pbssBANK1
  1568  01463E  0EE1               	movlw	225
  1569  014640                     clear_2:
  1570  014640  6AEE               	clrf	postinc0,c
  1571  014642  06E8               	decf	wreg,f,c
  1572  014644  E1FD               	bnz	clear_2
  1573                           
  1574                           ; Clear objects allocated to BANK0 (16 bytes)
  1575  014646  EE00  F0E6         	lfsr	0,__pbssBANK0
  1576  01464A  0E10               	movlw	16
  1577  01464C                     clear_3:
  1578  01464C  6AEE               	clrf	postinc0,c
  1579  01464E  06E8               	decf	wreg,f,c
  1580  014650  E1FD               	bnz	clear_3
  1581                           
  1582                           ; Clear objects allocated to COMRAM (29 bytes)
  1583  014652  EE00  F029         	lfsr	0,__pbssCOMRAM
  1584  014656  0E1D               	movlw	29
  1585  014658                     clear_4:
  1586  014658  6AEE               	clrf	postinc0,c
  1587  01465A  06E8               	decf	wreg,f,c
  1588  01465C  E1FD               	bnz	clear_4
  1589  01465E                     end_of_initialization:
  1590                           	opt stack 0
  1591  01465E                     __end_of__initialization:
  1592                           	opt stack 0
  1593  01465E  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1594  014660  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1595  014662  0100               	movlb	0
  1596  014664  EF00  F080         	goto	_main	;jump to C main() function
  1597                           tblptru	equ	0xFF8
  1598                           tblptrh	equ	0xFF7
  1599                           tblptrl	equ	0xFF6
  1600                           tablat	equ	0xFF5
  1601                           postinc0	equ	0xFEE
  1602                           wreg	equ	0xFE8
  1603                           postdec1	equ	0xFE5
  1604                           fsr1h	equ	0xFE2
  1605                           fsr1l	equ	0xFE1
  1606                           
  1607                           	psect	bssCOMRAM
  1608  000029                     __pbssCOMRAM:
  1609                           	opt stack 0
  1610  000029                     _readIndex:
  1611                           	opt stack 0
  1612  000029                     	ds	2
  1613  00002B                     _Close_Pos:
  1614                           	opt stack 0
  1615  00002B                     	ds	2
  1616  00002D                     _Motor_Count:
  1617                           	opt stack 0
  1618  00002D                     	ds	2
  1619  00002F                     _T_VAR:
  1620                           	opt stack 0
  1621  00002F                     	ds	2
  1622  000031                     _mode:
  1623                           	opt stack 0
  1624  000031                     	ds	2
  1625  000033                     _COUNTER:
  1626                           	opt stack 0
  1627  000033                     	ds	2
  1628  000035                     _gBackcolour:
  1629                           	opt stack 0
  1630  000035                     	ds	2
  1631  000037                     _Current_Dist2:
  1632                           	opt stack 0
  1633  000037                     	ds	1
  1634  000038                     Event_TestButton@j:
  1635                           	opt stack 0
  1636  000038                     	ds	1
  1637  000039                     Timer2_Init@PRE:
  1638                           	opt stack 0
  1639  000039                     	ds	1
  1640  00003A                     Timer0_Init@PRE:
  1641                           	opt stack 0
  1642  00003A                     	ds	1
  1643  00003B                     _INDEX:
  1644                           	opt stack 0
  1645  00003B                     	ds	1
  1646  00003C                     rand@screw:
  1647                           	opt stack 0
  1648  00003C                     	ds	1
  1649  00003D                     OutSeg@a:
  1650                           	opt stack 0
  1651  00003D                     	ds	1
  1652  00003E                     OutSeg@segset:
  1653                           	opt stack 0
  1654  00003E                     	ds	1
  1655  00003F                     OutSeg@cur:
  1656                           	opt stack 0
  1657  00003F                     	ds	1
  1658  000040                     _I2C1T:
  1659                           	opt stack 0
  1660  000040                     	ds	6
  1661                           tblptru	equ	0xFF8
  1662                           tblptrh	equ	0xFF7
  1663                           tblptrl	equ	0xFF6
  1664                           tablat	equ	0xFF5
  1665                           postinc0	equ	0xFEE
  1666                           wreg	equ	0xFE8
  1667                           postdec1	equ	0xFE5
  1668                           fsr1h	equ	0xFE2
  1669                           fsr1l	equ	0xFE1
  1670                           
  1671                           	psect	dataCOMRAM
  1672  000046                     __pdataCOMRAM:
  1673                           	opt stack 0
  1674  000046                     _gCursor:
  1675                           	opt stack 0
  1676  000046                     	ds	4
  1677  00004A                     _Low_Sensor:
  1678                           	opt stack 0
  1679  00004A                     	ds	2
  1680  00004C                     _Bus_State:
  1681                           	opt stack 0
  1682  00004C                     	ds	1
  1683  00004D                     _change:
  1684                           	opt stack 0
  1685  00004D                     	ds	1
  1686  00004E                     	ds	1
  1687  00004F                     _l:
  1688                           	opt stack 0
  1689  00004F                     	ds	1
  1690  000050                     _w:
  1691                           	opt stack 0
  1692  000050                     	ds	1
  1693                           tblptru	equ	0xFF8
  1694                           tblptrh	equ	0xFF7
  1695                           tblptrl	equ	0xFF6
  1696                           tablat	equ	0xFF5
  1697                           postinc0	equ	0xFEE
  1698                           wreg	equ	0xFE8
  1699                           postdec1	equ	0xFE5
  1700                           fsr1h	equ	0xFE2
  1701                           fsr1l	equ	0xFE1
  1702                           
  1703                           	psect	bssBANK0
  1704  0000E6                     __pbssBANK0:
  1705                           	opt stack 0
  1706  0000E6                     _lQueue:
  1707                           	opt stack 0
  1708  0000E6                     	ds	3
  1709  0000E9                     _average:
  1710                           	opt stack 0
  1711  0000E9                     	ds	2
  1712  0000EB                     _pShiftVal:
  1713                           	opt stack 0
  1714  0000EB                     	ds	2
  1715  0000ED                     _lMotor:
  1716                           	opt stack 0
  1717  0000ED                     	ds	2
  1718  0000EF                     _lCurrent:
  1719                           	opt stack 0
  1720  0000EF                     	ds	2
  1721  0000F1                     _BumpSensor:
  1722                           	opt stack 0
  1723  0000F1                     	ds	1
  1724  0000F2                     Timer2_Init@INDEX:
  1725                           	opt stack 0
  1726  0000F2                     	ds	1
  1727  0000F3                     _lBufferY:
  1728                           	opt stack 0
  1729  0000F3                     	ds	1
  1730  0000F4                     _lBufferX:
  1731                           	opt stack 0
  1732  0000F4                     	ds	1
  1733  0000F5                     _clearall:
  1734                           	opt stack 0
  1735  0000F5                     	ds	1
  1736                           tblptru	equ	0xFF8
  1737                           tblptrh	equ	0xFF7
  1738                           tblptrl	equ	0xFF6
  1739                           tablat	equ	0xFF5
  1740                           postinc0	equ	0xFEE
  1741                           wreg	equ	0xFE8
  1742                           postdec1	equ	0xFE5
  1743                           fsr1h	equ	0xFE2
  1744                           fsr1l	equ	0xFE1
  1745                           
  1746                           	psect	bssBANK1
  1747  000100                     __pbssBANK1:
  1748                           	opt stack 0
  1749  000100                     Timer2_Init@DIV:
  1750                           	opt stack 0
  1751  000100                     	ds	4
  1752  000104                     Timer0_Init@DIV:
  1753                           	opt stack 0
  1754  000104                     	ds	4
  1755  000108                     _gISR:
  1756                           	opt stack 0
  1757  000108                     	ds	3
  1758  00010B                     _lStepFunction:
  1759                           	opt stack 0
  1760  00010B                     	ds	3
  1761  00010E                     _I2C2_More:
  1762                           	opt stack 0
  1763  00010E                     	ds	3
  1764  000111                     _I2C1_More:
  1765                           	opt stack 0
  1766  000111                     	ds	3
  1767  000114                     _I2C2_Done:
  1768                           	opt stack 0
  1769  000114                     	ds	3
  1770  000117                     _I2C1_Done:
  1771                           	opt stack 0
  1772  000117                     	ds	3
  1773  00011A                     _errno:
  1774                           	opt stack 0
  1775  00011A                     	ds	2
  1776  00011C                     _test:
  1777                           	opt stack 0
  1778  00011C                     	ds	2
  1779  00011E                     _timercount:
  1780                           	opt stack 0
  1781  00011E                     	ds	2
  1782  000120                     _x:
  1783                           	opt stack 0
  1784  000120                     	ds	2
  1785  000122                     _total:
  1786                           	opt stack 0
  1787  000122                     	ds	2
  1788  000124                     _thisReading:
  1789                           	opt stack 0
  1790  000124                     	ds	2
  1791  000126                     _Sensor_Observe_Fin:
  1792                           	opt stack 0
  1793  000126                     	ds	2
  1794  000128                     _CW_Count:
  1795                           	opt stack 0
  1796  000128                     	ds	2
  1797  00012A                     _CCW_Count:
  1798                           	opt stack 0
  1799  00012A                     	ds	2
  1800  00012C                     _count:
  1801                           	opt stack 0
  1802  00012C                     	ds	2
  1803  00012E                     _ADC_Reading:
  1804                           	opt stack 0
  1805  00012E                     	ds	2
  1806  000130                     _BumpState:
  1807                           	opt stack 0
  1808  000130                     	ds	2
  1809  000132                     _mod:
  1810                           	opt stack 0
  1811  000132                     	ds	2
  1812  000134                     _Square_Dist:
  1813                           	opt stack 0
  1814  000134                     	ds	2
  1815  000136                     _Current_Dist:
  1816                           	opt stack 0
  1817  000136                     	ds	2
  1818  000138                     _val:
  1819                           	opt stack 0
  1820  000138                     	ds	2
  1821  00013A                     HMI_GRender@a:
  1822                           	opt stack 0
  1823  00013A                     	ds	2
  1824  00013C                     SPI_Send9@dat:
  1825                           	opt stack 0
  1826  00013C                     	ds	2
  1827  00013E                     _Cliff_Left:
  1828                           	opt stack 0
  1829  00013E                     	ds	1
  1830  00013F                     _Cliff_Right:
  1831                           	opt stack 0
  1832  00013F                     	ds	1
  1833  000140                     _Cliff_FLeft:
  1834                           	opt stack 0
  1835  000140                     	ds	1
  1836  000141                     _Cliff_FRight:
  1837                           	opt stack 0
  1838  000141                     	ds	1
  1839  000142                     _Vitual_Wall_Sensor:
  1840                           	opt stack 0
  1841  000142                     	ds	1
  1842  000143                     _Current_Dist1:
  1843                           	opt stack 0
  1844  000143                     	ds	1
  1845  000144                     _u:
  1846                           	opt stack 0
  1847  000144                     	ds	1
  1848  000145                     _j:
  1849                           	opt stack 0
  1850  000145                     	ds	1
  1851  000146                     _i:
  1852                           	opt stack 0
  1853  000146                     	ds	1
  1854  000147                     _ADC_Initialised:
  1855                           	opt stack 0
  1856  000147                     	ds	1
  1857  000148                     _HMIBoard:
  1858                           	opt stack 0
  1859  000148                     	ds	58
  1860  000182                     _SPI2:
  1861                           	opt stack 0
  1862  000182                     	ds	11
  1863  00018D                     _PortE:
  1864                           	opt stack 0
  1865  00018D                     	ds	10
  1866  000197                     _PortD:
  1867                           	opt stack 0
  1868  000197                     	ds	10
  1869  0001A1                     _PortB:
  1870                           	opt stack 0
  1871  0001A1                     	ds	10
  1872  0001AB                     _PortC:
  1873                           	opt stack 0
  1874  0001AB                     	ds	10
  1875  0001B5                     _PortF:
  1876                           	opt stack 0
  1877  0001B5                     	ds	10
  1878  0001BF                     _I2C2T:
  1879                           	opt stack 0
  1880  0001BF                     	ds	6
  1881  0001C5                     _ADC_AN3:
  1882                           	opt stack 0
  1883  0001C5                     	ds	5
  1884  0001CA                     _ADC_AN2:
  1885                           	opt stack 0
  1886  0001CA                     	ds	5
  1887  0001CF                     _ADC_AN1:
  1888                           	opt stack 0
  1889  0001CF                     	ds	5
  1890  0001D4                     _ADC_AN0:
  1891                           	opt stack 0
  1892  0001D4                     	ds	5
  1893  0001D9                     LCD_DrawRectangle@p4:
  1894                           	opt stack 0
  1895  0001D9                     	ds	4
  1896  0001DD                     LCD_DrawRectangle@p2:
  1897                           	opt stack 0
  1898  0001DD                     	ds	4
  1899                           tblptru	equ	0xFF8
  1900                           tblptrh	equ	0xFF7
  1901                           tblptrl	equ	0xFF6
  1902                           tablat	equ	0xFF5
  1903                           postinc0	equ	0xFEE
  1904                           wreg	equ	0xFE8
  1905                           postdec1	equ	0xFE5
  1906                           fsr1h	equ	0xFE2
  1907                           fsr1l	equ	0xFE1
  1908                           
  1909                           	psect	dataBANK1
  1910  0001E1                     __pdataBANK1:
  1911                           	opt stack 0
  1912  0001E1                     Console_Render@F6956:
  1913                           	opt stack 0
  1914  0001E1                     	ds	4
  1915  0001E5                     _gLineSize:
  1916                           	opt stack 0
  1917  0001E5                     	ds	4
  1918  0001E9                     _gCharSize:
  1919                           	opt stack 0
  1920  0001E9                     	ds	4
  1921  0001ED                     _countOff:
  1922                           	opt stack 0
  1923  0001ED                     	ds	2
  1924  0001EF                     _countOn:
  1925                           	opt stack 0
  1926  0001EF                     	ds	2
  1927  0001F1                     _numReadings:
  1928                           	opt stack 0
  1929  0001F1                     	ds	2
  1930  0001F3                     _gForecolour:
  1931                           	opt stack 0
  1932  0001F3                     	ds	2
  1933  0001F5                     	ds	1
  1934  0001F6                     	ds	1
  1935                           tblptru	equ	0xFF8
  1936                           tblptrh	equ	0xFF7
  1937                           tblptrl	equ	0xFF6
  1938                           tablat	equ	0xFF5
  1939                           postinc0	equ	0xFEE
  1940                           wreg	equ	0xFE8
  1941                           postdec1	equ	0xFE5
  1942                           fsr1h	equ	0xFE2
  1943                           fsr1l	equ	0xFE1
  1944                           
  1945                           	psect	bssBANK2
  1946  000200                     __pbssBANK2:
  1947                           	opt stack 0
  1948  000200                     _readings:
  1949                           	opt stack 0
  1950  000200                     	ds	100
  1951  000264                     _lCBuffer:
  1952                           	opt stack 0
  1953  000264                     	ds	30
  1954  000282                     Console_MakeField@Fill:
  1955                           	opt stack 0
  1956  000282                     	ds	70
  1957  0002C8                     _SPI1:
  1958                           	opt stack 0
  1959  0002C8                     	ds	11
  1960  0002D3                     _DIPSwitch:
  1961                           	opt stack 0
  1962  0002D3                     	ds	10
  1963  0002DD                     _TestButton:
  1964                           	opt stack 0
  1965  0002DD                     	ds	10
  1966  0002E7                     _PortG:
  1967                           	opt stack 0
  1968  0002E7                     	ds	10
  1969  0002F1                     _PortA:
  1970                           	opt stack 0
  1971  0002F1                     	ds	10
  1972                           tblptru	equ	0xFF8
  1973                           tblptrh	equ	0xFF7
  1974                           tblptrl	equ	0xFF6
  1975                           tablat	equ	0xFF5
  1976                           postinc0	equ	0xFEE
  1977                           wreg	equ	0xFE8
  1978                           postdec1	equ	0xFE5
  1979                           fsr1h	equ	0xFE2
  1980                           fsr1l	equ	0xFE1
  1981                           
  1982                           	psect	bssBIGRAM
  1983  000318                     __pbssBIGRAM:
  1984                           	opt stack 0
  1985  000318                     _lBuffer:
  1986                           	opt stack 0
  1987  000318                     	ds	300
  1988                           tblptru	equ	0xFF8
  1989                           tblptrh	equ	0xFF7
  1990                           tblptrl	equ	0xFF6
  1991                           tablat	equ	0xFF5
  1992                           postinc0	equ	0xFEE
  1993                           wreg	equ	0xFE8
  1994                           postdec1	equ	0xFE5
  1995                           fsr1h	equ	0xFE2
  1996                           fsr1l	equ	0xFE1
  1997                           
  1998                           	psect	cstackBANK3
  1999  000300                     __pcstackBANK3:
  2000                           	opt stack 0
  2001  000300                     _ADCAverage$15665:
  2002                           	opt stack 0
  2003                           
  2004                           ; 4 bytes @ 0x0
  2005  000300                     	ds	4
  2006  000304                     _ADCAverage$15666:
  2007                           	opt stack 0
  2008                           
  2009                           ; 4 bytes @ 0x4
  2010  000304                     	ds	4
  2011  000308                     _ADCAverage$15667:
  2012                           	opt stack 0
  2013                           
  2014                           ; 4 bytes @ 0x8
  2015  000308                     	ds	4
  2016  00030C                     _ADCAverage$15668:
  2017                           	opt stack 0
  2018                           
  2019                           ; 4 bytes @ 0xC
  2020  00030C                     	ds	4
  2021  000310                     _ADCAverage$15669:
  2022                           	opt stack 0
  2023                           
  2024                           ; 4 bytes @ 0x10
  2025  000310                     	ds	4
  2026  000314                     _ADCAverage$15670:
  2027                           	opt stack 0
  2028                           
  2029                           ; 4 bytes @ 0x14
  2030  000314                     	ds	4
  2031                           tblptru	equ	0xFF8
  2032                           tblptrh	equ	0xFF7
  2033                           tblptrl	equ	0xFF6
  2034                           tablat	equ	0xFF5
  2035                           postinc0	equ	0xFEE
  2036                           wreg	equ	0xFE8
  2037                           postdec1	equ	0xFE5
  2038                           fsr1h	equ	0xFE2
  2039                           fsr1l	equ	0xFE1
  2040                           
  2041                           	psect	cstackBANK0
  2042  000060                     __pcstackBANK0:
  2043                           	opt stack 0
  2044  000060                     ??_Console_ClearCursor:
  2045  000060                     ??_Console_Init:
  2046  000060                     ??_Console_NewLine:
  2047  000060                     ??_Console_FormFeed:
  2048  000060                     ??_HMI_SetButton:
  2049  000060                     ??_InitADC:
  2050  000060                     ?_GetPortProperties:
  2051                           	opt stack 0
  2052  000060                     ?_GetPortPORT:
  2053                           	opt stack 0
  2054  000060                     ?_GetPortTRIS:
  2055                           	opt stack 0
  2056  000060                     ?_FunctReadADC:
  2057                           	opt stack 0
  2058  000060                     ?___wmul:
  2059                           	opt stack 0
  2060  000060                     ?___awdiv:
  2061                           	opt stack 0
  2062  000060                     ?___lwdiv:
  2063                           	opt stack 0
  2064  000060                     ?___fldiv:
  2065                           	opt stack 0
  2066  000060                     ?_frexp:
  2067                           	opt stack 0
  2068  000060                     ?___lldiv:
  2069                           	opt stack 0
  2070  000060                     ?___xxtofl:
  2071                           	opt stack 0
  2072  000060                     Mode_Set@pMode:
  2073                           	opt stack 0
  2074  000060                     ToSegment@pCHR:
  2075                           	opt stack 0
  2076  000060                     HMI_SetBar@pValue:
  2077                           	opt stack 0
  2078  000060                     eusartSend@sendChar:
  2079                           	opt stack 0
  2080  000060                     Port_GetPin@pInput:
  2081                           	opt stack 0
  2082  000060                     Port_GetQuad@pInput:
  2083                           	opt stack 0
  2084  000060                     SPI_DisableISR@pInput:
  2085                           	opt stack 0
  2086  000060                     SPI_DCS@pInput:
  2087                           	opt stack 0
  2088  000060                     SPI_Send@pInput:
  2089                           	opt stack 0
  2090  000060                     Byte_SetBit@pInput:
  2091                           	opt stack 0
  2092  000060                     Byte_GetBit@pInput:
  2093                           	opt stack 0
  2094  000060                     Byte_SetZone@pInput:
  2095                           	opt stack 0
  2096  000060                     Byte_GetZone@pInput:
  2097                           	opt stack 0
  2098  000060                     Byte_SetByte@pInput:
  2099                           	opt stack 0
  2100  000060                     delay_ms@ms:
  2101                           	opt stack 0
  2102  000060                     delay_us@us:
  2103                           	opt stack 0
  2104  000060                     reverse@input:
  2105                           	opt stack 0
  2106  000060                     FunctReadADC@channel:
  2107                           	opt stack 0
  2108  000060                     ___wmul@multiplier:
  2109                           	opt stack 0
  2110  000060                     ___awdiv@dividend:
  2111                           	opt stack 0
  2112  000060                     ___lwdiv@dividend:
  2113                           	opt stack 0
  2114  000060                     MXK_Queue@pCallback:
  2115                           	opt stack 0
  2116  000060                     ___flge@ff1:
  2117                           	opt stack 0
  2118  000060                     ___lldiv@dividend:
  2119                           	opt stack 0
  2120  000060                     ___fldiv@b:
  2121                           	opt stack 0
  2122  000060                     ___xxtofl@val:
  2123                           	opt stack 0
  2124  000060                     frexp@value:
  2125                           	opt stack 0
  2126                           
  2127                           ; 4 bytes @ 0x0
  2128  000060                     	ds	1
  2129  000061                     ?_UpdateDistance:
  2130                           	opt stack 0
  2131  000061                     HMI_SetSegments@pString:
  2132                           	opt stack 0
  2133  000061                     Drive@Speed:
  2134                           	opt stack 0
  2135  000061                     Turn@Angle:
  2136                           	opt stack 0
  2137  000061                     BangBang@RSpeedH:
  2138                           	opt stack 0
  2139                           
  2140                           ; 2 bytes @ 0x1
  2141  000061                     	ds	1
  2142  000062                     GetPortProperties@pInput:
  2143                           	opt stack 0
  2144  000062                     GetPortPORT@pInput:
  2145                           	opt stack 0
  2146  000062                     GetPortTRIS@pInput:
  2147                           	opt stack 0
  2148  000062                     Port_GetPin@pPin:
  2149                           	opt stack 0
  2150  000062                     Port_GetQuad@pQuad:
  2151                           	opt stack 0
  2152  000062                     SPI_Send@pData:
  2153                           	opt stack 0
  2154  000062                     Byte_SetBit@pBit:
  2155                           	opt stack 0
  2156  000062                     Byte_GetBit@pBit:
  2157                           	opt stack 0
  2158  000062                     Byte_SetZone@pMax:
  2159                           	opt stack 0
  2160  000062                     Byte_GetZone@pMax:
  2161                           	opt stack 0
  2162  000062                     Byte_SetByte@pValue:
  2163                           	opt stack 0
  2164  000062                     Console_Init@x:
  2165                           	opt stack 0
  2166  000062                     Console_FormFeed@x:
  2167                           	opt stack 0
  2168  000062                     reverse@length:
  2169                           	opt stack 0
  2170  000062                     ___wmul@multiplicand:
  2171                           	opt stack 0
  2172  000062                     ___awdiv@divisor:
  2173                           	opt stack 0
  2174  000062                     ___lwdiv@divisor:
  2175                           	opt stack 0
  2176  000062                     delay_ms@u:
  2177                           	opt stack 0
  2178  000062                     delay_us@u:
  2179                           	opt stack 0
  2180  000062                     HMI_SetButton@reindex:
  2181                           	opt stack 0
  2182                           
  2183                           ; 4 bytes @ 0x2
  2184  000062                     	ds	1
  2185  000063                     ??_Port_GetPin:
  2186  000063                     ??_Port_GetQuad:
  2187  000063                     ??_Byte_GetBit:
  2188  000063                     LCD_Write@mode:
  2189                           	opt stack 0
  2190  000063                     Byte_SetBit@pValue:
  2191                           	opt stack 0
  2192  000063                     Byte_SetZone@pChunk:
  2193                           	opt stack 0
  2194  000063                     Byte_GetZone@pChunk:
  2195                           	opt stack 0
  2196  000063                     Console_Init@y:
  2197                           	opt stack 0
  2198  000063                     Console_FormFeed@y:
  2199                           	opt stack 0
  2200  000063                     OutSeg@pSegment:
  2201                           	opt stack 0
  2202  000063                     Drive@Rad:
  2203                           	opt stack 0
  2204  000063                     Turn@Speed:
  2205                           	opt stack 0
  2206  000063                     BangBang@RSpeedL:
  2207                           	opt stack 0
  2208                           
  2209                           ; 2 bytes @ 0x3
  2210  000063                     	ds	1
  2211  000064                     ??_Byte_SetBit:
  2212  000064                     ??_Console_IncrementCursor:
  2213  000064                     ??_OutSeg:
  2214  000064                     ??___xxtofl:
  2215  000064                     LCD_Write@value:
  2216                           	opt stack 0
  2217  000064                     Byte_GetBit@Output:
  2218                           	opt stack 0
  2219  000064                     Byte_SetZone@pChunkSize:
  2220                           	opt stack 0
  2221  000064                     Byte_GetZone@pChunkSize:
  2222                           	opt stack 0
  2223  000064                     reverse@tempVar:
  2224                           	opt stack 0
  2225  000064                     ___awdiv@counter:
  2226                           	opt stack 0
  2227  000064                     ___lwdiv@counter:
  2228                           	opt stack 0
  2229  000064                     HMI_SetSegments@in:
  2230                           	opt stack 0
  2231  000064                     ___wmul@product:
  2232                           	opt stack 0
  2233  000064                     frexp@eptr:
  2234                           	opt stack 0
  2235  000064                     ___flge@ff2:
  2236                           	opt stack 0
  2237  000064                     ___lldiv@divisor:
  2238                           	opt stack 0
  2239  000064                     ___fldiv@a:
  2240                           	opt stack 0
  2241                           
  2242                           ; 4 bytes @ 0x4
  2243  000064                     	ds	1
  2244  000065                     ??_Byte_GetZone:
  2245  000065                     ?_Console_MakeField:
  2246                           	opt stack 0
  2247  000065                     Set_Addr_Window@ys:
  2248                           	opt stack 0
  2249  000065                     Set_Rotation@m:
  2250                           	opt stack 0
  2251  000065                     Port_GetPin@Output:
  2252                           	opt stack 0
  2253  000065                     Port_GetQuad@Output:
  2254                           	opt stack 0
  2255  000065                     Byte_SetZone@pValue:
  2256                           	opt stack 0
  2257  000065                     ___awdiv@sign:
  2258                           	opt stack 0
  2259  000065                     LCD_Word_Write@value:
  2260                           	opt stack 0
  2261  000065                     reverse@iterator:
  2262                           	opt stack 0
  2263  000065                     Turn@Dir:
  2264                           	opt stack 0
  2265  000065                     BangBang@LSpeedH:
  2266                           	opt stack 0
  2267  000065                     ___lwdiv@quotient:
  2268                           	opt stack 0
  2269                           
  2270                           ; 2 bytes @ 0x5
  2271  000065                     	ds	1
  2272  000066                     ??_frexp:
  2273  000066                     ??_Byte_SetZone:
  2274  000066                     Set_Addr_Window@xe:
  2275                           	opt stack 0
  2276  000066                     Set_Rotation@rotation:
  2277                           	opt stack 0
  2278  000066                     Byte_GetZone@MASK:
  2279                           	opt stack 0
  2280  000066                     OutSeg@pInput:
  2281                           	opt stack 0
  2282  000066                     HMI_SetButton@pValue:
  2283                           	opt stack 0
  2284  000066                     MXK_BlockSwitchTo@CUR:
  2285                           	opt stack 0
  2286  000066                     MXK_SwitchTo@CUR:
  2287                           	opt stack 0
  2288  000066                     ___awdiv@quotient:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0x6
  2292  000066                     	ds	1
  2293  000067                     ??_Console_MakeField:
  2294  000067                     ?___lwmod:
  2295                           	opt stack 0
  2296  000067                     Set_Addr_Window@ye:
  2297                           	opt stack 0
  2298  000067                     Byte_GetZone@Offset:
  2299                           	opt stack 0
  2300  000067                     OutSeg@out:
  2301                           	opt stack 0
  2302  000067                     HMI_SetButton@v:
  2303                           	opt stack 0
  2304  000067                     MXK_BlockSwitchTo@pModule:
  2305                           	opt stack 0
  2306  000067                     MXK_SwitchTo@pModule:
  2307                           	opt stack 0
  2308  000067                     Turn@C_Angle:
  2309                           	opt stack 0
  2310  000067                     BangBang@LSpeedL:
  2311                           	opt stack 0
  2312  000067                     ___lwmod@dividend:
  2313                           	opt stack 0
  2314                           
  2315                           ; 2 bytes @ 0x7
  2316  000067                     	ds	1
  2317  000068                     ??___fldiv:
  2318  000068                     ??_Console_Tab:
  2319  000068                     ??___flge:
  2320  000068                     Set_Addr_Window@xs:
  2321                           	opt stack 0
  2322  000068                     Byte_GetZone@Output:
  2323                           	opt stack 0
  2324  000068                     ___xxtofl@sign:
  2325                           	opt stack 0
  2326  000068                     HMI_Render@a:
  2327                           	opt stack 0
  2328  000068                     ___lldiv@quotient:
  2329                           	opt stack 0
  2330                           
  2331                           ; 4 bytes @ 0x8
  2332  000068                     	ds	1
  2333  000069                     Byte_SetZone@Offset:
  2334                           	opt stack 0
  2335  000069                     ___xxtofl@exp:
  2336                           	opt stack 0
  2337  000069                     LCD_Fill@pColour:
  2338                           	opt stack 0
  2339  000069                     LCD_FillRectangle@pColour:
  2340                           	opt stack 0
  2341  000069                     Byte_GetPair@pInput:
  2342                           	opt stack 0
  2343  000069                     Console_MakeField@Index:
  2344                           	opt stack 0
  2345  000069                     Turn@Rad:
  2346                           	opt stack 0
  2347  000069                     ___lwmod@divisor:
  2348                           	opt stack 0
  2349                           
  2350                           ; 2 bytes @ 0x9
  2351  000069                     	ds	1
  2352  00006A                     Byte_SetZone@MASK:
  2353                           	opt stack 0
  2354  00006A                     ___xxtofl@arg:
  2355                           	opt stack 0
  2356                           
  2357                           ; 4 bytes @ 0xA
  2358  00006A                     	ds	1
  2359  00006B                     LCD_Fill@i:
  2360                           	opt stack 0
  2361  00006B                     Byte_GetPair@pPair:
  2362                           	opt stack 0
  2363  00006B                     Console_MakeField@pInput:
  2364                           	opt stack 0
  2365  00006B                     ___lwmod@counter:
  2366                           	opt stack 0
  2367  00006B                     Byte_SetPair@pInput:
  2368                           	opt stack 0
  2369  00006B                     Byte_SetQuad@pInput:
  2370                           	opt stack 0
  2371  00006B                     LCD_FillRectangle@pPoint:
  2372                           	opt stack 0
  2373                           
  2374                           ; 4 bytes @ 0xB
  2375  00006B                     	ds	1
  2376  00006C                     LCD_Fill@j:
  2377                           	opt stack 0
  2378  00006C                     ___lldiv@counter:
  2379                           	opt stack 0
  2380  00006C                     ___fldiv@sign:
  2381                           	opt stack 0
  2382  00006C                     Word_GetPair@pInput:
  2383                           	opt stack 0
  2384  00006C                     itos@input:
  2385                           	opt stack 0
  2386  00006C                     Console_MakeField@Column:
  2387                           	opt stack 0
  2388                           
  2389                           ; 2 bytes @ 0xC
  2390  00006C                     	ds	1
  2391  00006D                     Byte_SetPair@pPair:
  2392                           	opt stack 0
  2393  00006D                     Byte_SetQuad@pQuad:
  2394                           	opt stack 0
  2395  00006D                     Console_Tab@t:
  2396                           	opt stack 0
  2397  00006D                     Timer2_Init@pFrequency:
  2398                           	opt stack 0
  2399  00006D                     ___fldiv@rem:
  2400                           	opt stack 0
  2401                           
  2402                           ; 4 bytes @ 0xD
  2403  00006D                     	ds	1
  2404  00006E                     ?___flmul:
  2405                           	opt stack 0
  2406  00006E                     Byte_SetPair@pValue:
  2407                           	opt stack 0
  2408  00006E                     Byte_SetQuad@pValue:
  2409                           	opt stack 0
  2410  00006E                     Word_GetPair@pPair:
  2411                           	opt stack 0
  2412  00006E                     Console_Tab@i:
  2413                           	opt stack 0
  2414  00006E                     itos@destination:
  2415                           	opt stack 0
  2416  00006E                     _Console_MakeField$10974:
  2417                           	opt stack 0
  2418  00006E                     ___flmul@b:
  2419                           	opt stack 0
  2420                           
  2421                           ; 4 bytes @ 0xE
  2422  00006E                     	ds	1
  2423  00006F                     Console_Tab@c:
  2424                           	opt stack 0
  2425  00006F                     Port_SetPin@pInput:
  2426                           	opt stack 0
  2427  00006F                     Port_Set@pInput:
  2428                           	opt stack 0
  2429  00006F                     SPI_MinSpeed@pInput:
  2430                           	opt stack 0
  2431  00006F                     SPI_MaxSpeed@pInput:
  2432                           	opt stack 0
  2433  00006F                     Word_SetPair@pInput:
  2434                           	opt stack 0
  2435  00006F                     PortProperty_Valid@pInput:
  2436                           	opt stack 0
  2437  00006F                     LCD_FillRectangle@pSize:
  2438                           	opt stack 0
  2439                           
  2440                           ; 4 bytes @ 0xF
  2441  00006F                     	ds	1
  2442  000070                     ??_Console_PrintChar:
  2443  000070                     Console_MakeField@x:
  2444                           	opt stack 0
  2445  000070                     itos@Data:
  2446                           	opt stack 0
  2447                           
  2448                           ; 2 bytes @ 0x10
  2449  000070                     	ds	1
  2450  000071                     ??_Timer2_Init:
  2451  000071                     Port_SetPin@pPin:
  2452                           	opt stack 0
  2453  000071                     Port_Set@pValue:
  2454                           	opt stack 0
  2455  000071                     Word_SetPair@pPair:
  2456                           	opt stack 0
  2457  000071                     PortProperty_Valid@pPinDrive:
  2458                           	opt stack 0
  2459  000071                     Console_MakeField@y:
  2460                           	opt stack 0
  2461  000071                     ___fldiv@new_exp:
  2462                           	opt stack 0
  2463                           
  2464                           ; 2 bytes @ 0x11
  2465  000071                     	ds	1
  2466  000072                     ??_Port_Set:
  2467  000072                     Port_SetPin@pValue:
  2468                           	opt stack 0
  2469  000072                     Word_SetPair@pValue:
  2470                           	opt stack 0
  2471  000072                     PortProperty_Valid@pPin:
  2472                           	opt stack 0
  2473  000072                     LCD_DrawField@pField:
  2474                           	opt stack 0
  2475  000072                     itos@Length:
  2476                           	opt stack 0
  2477  000072                     Timer2_Init@RDIV:
  2478                           	opt stack 0
  2479  000072                     ___flmul@a:
  2480                           	opt stack 0
  2481                           
  2482                           ; 4 bytes @ 0x12
  2483  000072                     	ds	1
  2484  000073                     ??_PortProperty_Valid:
  2485  000073                     ??_LCD_FillRectangle:
  2486  000073                     Port_SetPin@Type:
  2487                           	opt stack 0
  2488  000073                     Console_PrintChar@pInput:
  2489                           	opt stack 0
  2490  000073                     ___fldiv@grs:
  2491                           	opt stack 0
  2492                           
  2493                           ; 4 bytes @ 0x13
  2494  000073                     	ds	1
  2495  000074                     LED_Set@pValue:
  2496                           	opt stack 0
  2497  000074                     putch@c:
  2498                           	opt stack 0
  2499  000074                     Port_TogglePin@pInput:
  2500                           	opt stack 0
  2501  000074                     itos@Out:
  2502                           	opt stack 0
  2503  000074                     LCD_DrawField@pPoint:
  2504                           	opt stack 0
  2505                           
  2506                           ; 4 bytes @ 0x14
  2507  000074                     	ds	1
  2508  000075                     ?_printf:
  2509                           	opt stack 0
  2510  000075                     LCD_FillRectangle@i:
  2511                           	opt stack 0
  2512  000075                     LED_Set@pLED:
  2513                           	opt stack 0
  2514  000075                     printf@f:
  2515                           	opt stack 0
  2516  000075                     PortProperty_Valid@Errors:
  2517                           	opt stack 0
  2518                           
  2519                           ; 16 bytes @ 0x15
  2520  000075                     	ds	1
  2521  000076                     ??___flmul:
  2522  000076                     LCD_FillRectangle@j:
  2523                           	opt stack 0
  2524  000076                     Port_TogglePin@pPin:
  2525                           	opt stack 0
  2526  000076                     HMI_SetNumber@pInput:
  2527                           	opt stack 0
  2528  000076                     Timer2_Init@pCPUClock:
  2529                           	opt stack 0
  2530                           
  2531                           ; 4 bytes @ 0x16
  2532  000076                     	ds	1
  2533  000077                     Port_TogglePin@Value:
  2534                           	opt stack 0
  2535  000077                     ___fldiv@bexp:
  2536                           	opt stack 0
  2537                           
  2538                           ; 1 bytes @ 0x17
  2539  000077                     	ds	1
  2540  000078                     LED_Toggle@pLED:
  2541                           	opt stack 0
  2542  000078                     ___fldiv@aexp:
  2543                           	opt stack 0
  2544  000078                     LCD_DrawField@pSize:
  2545                           	opt stack 0
  2546                           
  2547                           ; 4 bytes @ 0x18
  2548  000078                     	ds	1
  2549  000079                     ??_printf:
  2550  000079                     Event_DIPSwitch@pState:
  2551                           	opt stack 0
  2552  000079                     Event_TestButton@pState:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x19
  2556  000079                     	ds	1
  2557  00007A                     Event_DIPSwitch@Bar:
  2558                           	opt stack 0
  2559  00007A                     printf@flag:
  2560                           	opt stack 0
  2561  00007A                     ___flmul@sign:
  2562                           	opt stack 0
  2563  00007A                     Timer2_Init@DIVIDE:
  2564                           	opt stack 0
  2565                           
  2566                           ; 4 bytes @ 0x1A
  2567  00007A                     	ds	1
  2568  00007B                     printf@prec:
  2569                           	opt stack 0
  2570  00007B                     ___flmul@aexp:
  2571                           	opt stack 0
  2572  00007B                     Button_Poll@pButton:
  2573                           	opt stack 0
  2574                           
  2575                           ; 2 bytes @ 0x1B
  2576  00007B                     	ds	1
  2577  00007C                     ??_LCD_DrawField:
  2578  00007C                     printf@ap:
  2579                           	opt stack 0
  2580  00007C                     ___flmul@grs:
  2581                           	opt stack 0
  2582                           
  2583                           ; 4 bytes @ 0x1C
  2584  00007C                     	ds	1
  2585  00007D                     Button_Poll@pIncrement:
  2586                           	opt stack 0
  2587                           
  2588                           ; 1 bytes @ 0x1D
  2589  00007D                     	ds	1
  2590  00007E                     ??_Button_Poll:
  2591  00007E                     LCD_DrawField@count:
  2592                           	opt stack 0
  2593  00007E                     printf@val:
  2594                           	opt stack 0
  2595                           
  2596                           ; 2 bytes @ 0x1E
  2597  00007E                     	ds	2
  2598  000080                     LCD_DrawField@xmax:
  2599                           	opt stack 0
  2600  000080                     printf@c:
  2601                           	opt stack 0
  2602  000080                     ___flmul@bexp:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x20
  2606  000080                     	ds	1
  2607  000081                     LCD_DrawField@ymax:
  2608                           	opt stack 0
  2609  000081                     ___flmul@prod:
  2610                           	opt stack 0
  2611                           
  2612                           ; 4 bytes @ 0x21
  2613  000081                     	ds	1
  2614  000082                     LCD_DrawField@i:
  2615                           	opt stack 0
  2616  000082                     Port_Set@TypeRequired:
  2617                           	opt stack 0
  2618                           
  2619                           ; 2 bytes @ 0x22
  2620  000082                     	ds	1
  2621  000083                     ??_Console_Render:
  2622  000083                     Button_Poll@Pin:
  2623                           	opt stack 0
  2624                           
  2625                           ; 1 bytes @ 0x23
  2626  000083                     	ds	1
  2627  000084                     Port_Set@TypeActual:
  2628                           	opt stack 0
  2629                           
  2630                           ; 2 bytes @ 0x24
  2631  000084                     	ds	1
  2632  000085                     PortProperty_Valid@Pair:
  2633                           	opt stack 0
  2634  000085                     Console_Render@temp:
  2635                           	opt stack 0
  2636  000085                     ___flmul@temp:
  2637                           	opt stack 0
  2638                           
  2639                           ; 2 bytes @ 0x25
  2640  000085                     	ds	1
  2641  000086                     Port_Set@Type:
  2642                           	opt stack 0
  2643  000086                     Port_CheckPairType@pInput:
  2644                           	opt stack 0
  2645  000086                     Port_SetPinType@pInput:
  2646                           	opt stack 0
  2647  000086                     Console_Render@lCursor:
  2648                           	opt stack 0
  2649                           
  2650                           ; 4 bytes @ 0x26
  2651  000086                     	ds	1
  2652  000087                     ?___flneg:
  2653                           	opt stack 0
  2654  000087                     ___flneg@f1:
  2655                           	opt stack 0
  2656                           
  2657                           ; 4 bytes @ 0x27
  2658  000087                     	ds	1
  2659  000088                     Port_CheckPairType@pPair:
  2660                           	opt stack 0
  2661  000088                     Port_SetPinType@pPin:
  2662                           	opt stack 0
  2663                           
  2664                           ; 1 bytes @ 0x28
  2665  000088                     	ds	1
  2666  000089                     Port_CheckPairType@pDrive:
  2667                           	opt stack 0
  2668  000089                     Port_SetPinType@pType:
  2669                           	opt stack 0
  2670                           
  2671                           ; 1 bytes @ 0x29
  2672  000089                     	ds	1
  2673  00008A                     Port_CheckPairType@Pin1:
  2674                           	opt stack 0
  2675  00008A                     Port_SetPinType@Output:
  2676                           	opt stack 0
  2677  00008A                     Console_Render@x:
  2678                           	opt stack 0
  2679                           
  2680                           ; 1 bytes @ 0x2A
  2681  00008A                     	ds	1
  2682  00008B                     ?___fladd:
  2683                           	opt stack 0
  2684  00008B                     Port_CheckPairType@Pin2:
  2685                           	opt stack 0
  2686  00008B                     Console_Render@y:
  2687                           	opt stack 0
  2688  00008B                     Port_SetPinType@Props:
  2689                           	opt stack 0
  2690  00008B                     ___fladd@b:
  2691                           	opt stack 0
  2692                           
  2693                           ; 4 bytes @ 0x2B
  2694  00008B                     	ds	1
  2695  00008C                     Port_CheckPairType@Output:
  2696                           	opt stack 0
  2697                           
  2698                           ; 1 bytes @ 0x2C
  2699  00008C                     	ds	1
  2700  00008D                     LED_Init@pLED:
  2701                           	opt stack 0
  2702  00008D                     Port_CheckPairType@Props:
  2703                           	opt stack 0
  2704  00008D                     SPI_Init@pClock:
  2705                           	opt stack 0
  2706                           
  2707                           ; 4 bytes @ 0x2D
  2708  00008D                     	ds	2
  2709  00008F                     Port_CheckQuadType@pInput:
  2710                           	opt stack 0
  2711  00008F                     ___fladd@a:
  2712                           	opt stack 0
  2713                           
  2714                           ; 4 bytes @ 0x2F
  2715  00008F                     	ds	2
  2716  000091                     Port_CheckQuadType@pQuad:
  2717                           	opt stack 0
  2718  000091                     SPI_Init@pChannel:
  2719                           	opt stack 0
  2720                           
  2721                           ; 1 bytes @ 0x31
  2722  000091                     	ds	1
  2723  000092                     Port_CheckQuadType@pDrive:
  2724                           	opt stack 0
  2725  000092                     SPI_Init@pMode:
  2726                           	opt stack 0
  2727                           
  2728                           ; 1 bytes @ 0x32
  2729  000092                     	ds	1
  2730  000093                     ??___fladd:
  2731  000093                     Port_CheckQuadType@Pair1:
  2732                           	opt stack 0
  2733  000093                     SPI_Init@pInput:
  2734                           	opt stack 0
  2735                           
  2736                           ; 2 bytes @ 0x33
  2737  000093                     	ds	1
  2738  000094                     Port_CheckQuadType@Pair2:
  2739                           	opt stack 0
  2740                           
  2741                           ; 1 bytes @ 0x34
  2742  000094                     	ds	1
  2743  000095                     ??_LCD_Init:
  2744  000095                     Port_CheckQuadType@Output:
  2745                           	opt stack 0
  2746                           
  2747                           ; 1 bytes @ 0x35
  2748  000095                     	ds	1
  2749  000096                     Port_CheckPortType@pInput:
  2750                           	opt stack 0
  2751  000096                     Port_SetQuadType@pInput:
  2752                           	opt stack 0
  2753                           
  2754                           ; 2 bytes @ 0x36
  2755  000096                     	ds	1
  2756  000097                     LCD_Init@i:
  2757                           	opt stack 0
  2758                           
  2759                           ; 2 bytes @ 0x37
  2760  000097                     	ds	1
  2761  000098                     Port_CheckPortType@pDrive:
  2762                           	opt stack 0
  2763  000098                     Port_SetQuadType@pQuad:
  2764                           	opt stack 0
  2765                           
  2766                           ; 1 bytes @ 0x38
  2767  000098                     	ds	1
  2768  000099                     Port_CheckPortType@Output:
  2769                           	opt stack 0
  2770  000099                     Port_SetQuadType@pType:
  2771                           	opt stack 0
  2772                           
  2773                           ; 1 bytes @ 0x39
  2774  000099                     	ds	1
  2775  00009A                     Port_SetQuadType@Output:
  2776                           	opt stack 0
  2777  00009A                     Port_SetType@pInput:
  2778                           	opt stack 0
  2779                           
  2780                           ; 2 bytes @ 0x3A
  2781  00009A                     	ds	1
  2782  00009B                     ___fladd@signs:
  2783                           	opt stack 0
  2784  00009B                     Button_Init@pInput:
  2785                           	opt stack 0
  2786                           
  2787                           ; 2 bytes @ 0x3B
  2788  00009B                     	ds	1
  2789  00009C                     Port_SetType@pType:
  2790                           	opt stack 0
  2791  00009C                     ___fladd@aexp:
  2792                           	opt stack 0
  2793                           
  2794                           ; 1 bytes @ 0x3C
  2795  00009C                     	ds	1
  2796  00009D                     ??_Port_SetType:
  2797  00009D                     ___fladd@bexp:
  2798                           	opt stack 0
  2799  00009D                     Button_Init@pThreshold:
  2800                           	opt stack 0
  2801                           
  2802                           ; 2 bytes @ 0x3D
  2803  00009D                     	ds	1
  2804  00009E                     ___fladd@grs:
  2805                           	opt stack 0
  2806                           
  2807                           ; 1 bytes @ 0x3E
  2808  00009E                     	ds	1
  2809  00009F                     ?___flsub:
  2810                           	opt stack 0
  2811  00009F                     ?_eval_poly:
  2812                           	opt stack 0
  2813  00009F                     ?___fltol:
  2814                           	opt stack 0
  2815  00009F                     Port_SetType@Output:
  2816                           	opt stack 0
  2817  00009F                     Button_Init@pInitIO:
  2818                           	opt stack 0
  2819  00009F                     ___fltol@f1:
  2820                           	opt stack 0
  2821  00009F                     ___flsub@b:
  2822                           	opt stack 0
  2823  00009F                     eval_poly@x:
  2824                           	opt stack 0
  2825                           
  2826                           ; 4 bytes @ 0x3F
  2827  00009F                     	ds	1
  2828  0000A0                     Port_Init@pInput:
  2829                           	opt stack 0
  2830                           
  2831                           ; 2 bytes @ 0x40
  2832  0000A0                     	ds	2
  2833  0000A2                     Port_Init@pPort:
  2834                           	opt stack 0
  2835  0000A2                     Button_Init@pGetState:
  2836                           	opt stack 0
  2837                           
  2838                           ; 3 bytes @ 0x42
  2839  0000A2                     	ds	1
  2840  0000A3                     ??_Port_Init:
  2841  0000A3                     ??___fltol:
  2842  0000A3                     eval_poly@d:
  2843                           	opt stack 0
  2844  0000A3                     ___flsub@a:
  2845                           	opt stack 0
  2846                           
  2847                           ; 4 bytes @ 0x43
  2848  0000A3                     	ds	2
  2849  0000A5                     Port_Init@i:
  2850                           	opt stack 0
  2851  0000A5                     eval_poly@n:
  2852                           	opt stack 0
  2853  0000A5                     Button_Init@pFunction:
  2854                           	opt stack 0
  2855                           
  2856                           ; 3 bytes @ 0x45
  2857  0000A5                     	ds	1
  2858  0000A6                     
  2859                           ; 1 bytes @ 0x46
  2860  0000A6                     	ds	1
  2861  0000A7                     ??_eval_poly:
  2862  0000A7                     ___fltol@sign1:
  2863                           	opt stack 0
  2864                           
  2865                           ; 1 bytes @ 0x47
  2866  0000A7                     	ds	1
  2867  0000A8                     ___fltol@exp1:
  2868                           	opt stack 0
  2869  0000A8                     HMI_Init@in:
  2870                           	opt stack 0
  2871                           
  2872                           ; 2 bytes @ 0x48
  2873  0000A8                     	ds	1
  2874  0000A9                     ?_floor:
  2875                           	opt stack 0
  2876  0000A9                     floor@x:
  2877                           	opt stack 0
  2878                           
  2879                           ; 4 bytes @ 0x49
  2880  0000A9                     	ds	2
  2881  0000AB                     eval_poly@res:
  2882                           	opt stack 0
  2883                           
  2884                           ; 4 bytes @ 0x4B
  2885  0000AB                     	ds	2
  2886  0000AD                     floor@i:
  2887                           	opt stack 0
  2888                           
  2889                           ; 4 bytes @ 0x4D
  2890  0000AD                     	ds	2
  2891  0000AF                     ?_log:
  2892                           	opt stack 0
  2893  0000AF                     ?_ldexp:
  2894                           	opt stack 0
  2895  0000AF                     ldexp@value:
  2896                           	opt stack 0
  2897  0000AF                     log@x:
  2898                           	opt stack 0
  2899                           
  2900                           ; 4 bytes @ 0x4F
  2901  0000AF                     	ds	2
  2902  0000B1                     floor@expon:
  2903                           	opt stack 0
  2904                           
  2905                           ; 2 bytes @ 0x51
  2906  0000B1                     	ds	2
  2907  0000B3                     ldexp@newexp:
  2908                           	opt stack 0
  2909  0000B3                     log@exponent:
  2910                           	opt stack 0
  2911                           
  2912                           ; 2 bytes @ 0x53
  2913  0000B3                     	ds	2
  2914  0000B5                     ??_ldexp:
  2915                           
  2916                           ; 1 bytes @ 0x55
  2917  0000B5                     	ds	2
  2918  0000B7                     ?_exp:
  2919                           	opt stack 0
  2920  0000B7                     exp@x:
  2921                           	opt stack 0
  2922                           
  2923                           ; 4 bytes @ 0x57
  2924  0000B7                     	ds	4
  2925  0000BB                     _exp$15673:
  2926                           	opt stack 0
  2927                           
  2928                           ; 4 bytes @ 0x5B
  2929  0000BB                     	ds	4
  2930  0000BF                     exp@exponent:
  2931                           	opt stack 0
  2932                           
  2933                           ; 2 bytes @ 0x5F
  2934  0000BF                     	ds	2
  2935  0000C1                     exp@sign:
  2936                           	opt stack 0
  2937                           
  2938                           ; 1 bytes @ 0x61
  2939  0000C1                     	ds	1
  2940  0000C2                     ?_pow:
  2941                           	opt stack 0
  2942  0000C2                     pow@x:
  2943                           	opt stack 0
  2944                           
  2945                           ; 4 bytes @ 0x62
  2946  0000C2                     	ds	4
  2947  0000C6                     pow@y:
  2948                           	opt stack 0
  2949                           
  2950                           ; 4 bytes @ 0x66
  2951  0000C6                     	ds	4
  2952  0000CA                     _pow$15671:
  2953                           	opt stack 0
  2954                           
  2955                           ; 4 bytes @ 0x6A
  2956  0000CA                     	ds	4
  2957  0000CE                     _pow$15672:
  2958                           	opt stack 0
  2959                           
  2960                           ; 4 bytes @ 0x6E
  2961  0000CE                     	ds	4
  2962  0000D2                     pow@sign:
  2963                           	opt stack 0
  2964                           
  2965                           ; 1 bytes @ 0x72
  2966  0000D2                     	ds	1
  2967  0000D3                     pow@yi:
  2968                           	opt stack 0
  2969                           
  2970                           ; 4 bytes @ 0x73
  2971  0000D3                     	ds	4
  2972  0000D7                     ??_ADCAverage:
  2973                           
  2974                           ; 1 bytes @ 0x77
  2975  0000D7                     	ds	2
  2976  0000D9                     ??_Sensor_Observe2:
  2977  0000D9                     ??_Sensor_Observe:
  2978  0000D9                     
  2979                           ; 1 bytes @ 0x79
  2980  0000D9                     	ds	2
  2981  0000DB                     ??_main:
  2982                           
  2983                           ; 1 bytes @ 0x7B
  2984  0000DB                     	ds	5
  2985  0000E0                     main@down:
  2986                           	opt stack 0
  2987                           
  2988                           ; 1 bytes @ 0x80
  2989  0000E0                     	ds	1
  2990  0000E1                     main@right:
  2991                           	opt stack 0
  2992                           
  2993                           ; 1 bytes @ 0x81
  2994  0000E1                     	ds	1
  2995  0000E2                     main@left:
  2996                           	opt stack 0
  2997                           
  2998                           ; 1 bytes @ 0x82
  2999  0000E2                     	ds	1
  3000  0000E3                     main@up:
  3001                           	opt stack 0
  3002                           
  3003                           ; 1 bytes @ 0x83
  3004  0000E3                     	ds	1
  3005  0000E4                     main@Target_Distance:
  3006                           	opt stack 0
  3007                           
  3008                           ; 2 bytes @ 0x84
  3009  0000E4                     	ds	2
  3010                           tblptru	equ	0xFF8
  3011                           tblptrh	equ	0xFF7
  3012                           tblptrl	equ	0xFF6
  3013                           tablat	equ	0xFF5
  3014                           postinc0	equ	0xFEE
  3015                           wreg	equ	0xFE8
  3016                           postdec1	equ	0xFE5
  3017                           fsr1h	equ	0xFE2
  3018                           fsr1l	equ	0xFE1
  3019                           
  3020                           	psect	cstackCOMRAM
  3021  000001                     __pcstackCOMRAM:
  3022                           	opt stack 0
  3023  000001                     i2Byte_SetBit@pInput:
  3024                           	opt stack 0
  3025  000001                     i2Byte_GetZone@pInput:
  3026                           	opt stack 0
  3027  000001                     i2delay_us@us:
  3028                           	opt stack 0
  3029  000001                     i2MXK_Queue@pCallback:
  3030                           	opt stack 0
  3031                           
  3032                           ; 3 bytes @ 0x0
  3033  000001                     	ds	2
  3034  000003                     i2Byte_SetBit@pBit:
  3035                           	opt stack 0
  3036  000003                     i2Byte_GetZone@pMax:
  3037                           	opt stack 0
  3038  000003                     i2delay_us@u:
  3039                           	opt stack 0
  3040                           
  3041                           ; 4 bytes @ 0x2
  3042  000003                     	ds	1
  3043  000004                     i2Byte_SetBit@pValue:
  3044                           	opt stack 0
  3045  000004                     i2Byte_GetZone@pChunk:
  3046                           	opt stack 0
  3047                           
  3048                           ; 1 bytes @ 0x3
  3049  000004                     	ds	1
  3050  000005                     ??i2_Byte_SetBit:
  3051  000005                     i2Byte_GetZone@pChunkSize:
  3052                           	opt stack 0
  3053                           
  3054                           ; 1 bytes @ 0x4
  3055  000005                     	ds	1
  3056  000006                     ??i2_Byte_GetZone:
  3057                           
  3058                           ; 1 bytes @ 0x5
  3059  000006                     	ds	1
  3060  000007                     i2Byte_GetZone@MASK:
  3061                           	opt stack 0
  3062  000007                     i2MXK_SwitchTo@CUR:
  3063                           	opt stack 0
  3064                           
  3065                           ; 1 bytes @ 0x6
  3066  000007                     	ds	1
  3067  000008                     i2Byte_GetZone@Offset:
  3068                           	opt stack 0
  3069  000008                     i2MXK_SwitchTo@pModule:
  3070                           	opt stack 0
  3071                           
  3072                           ; 1 bytes @ 0x7
  3073  000008                     	ds	1
  3074  000009                     i2Byte_GetZone@Output:
  3075                           	opt stack 0
  3076                           
  3077                           ; 1 bytes @ 0x8
  3078  000009                     	ds	1
  3079  00000A                     i2Byte_GetPair@pInput:
  3080                           	opt stack 0
  3081                           
  3082                           ; 2 bytes @ 0x9
  3083  00000A                     	ds	2
  3084  00000C                     i2Byte_GetPair@pPair:
  3085                           	opt stack 0
  3086                           
  3087                           ; 1 bytes @ 0xB
  3088  00000C                     	ds	1
  3089  00000D                     i2Word_GetPair@pInput:
  3090                           	opt stack 0
  3091                           
  3092                           ; 2 bytes @ 0xC
  3093  00000D                     	ds	2
  3094  00000F                     i2Word_GetPair@pPair:
  3095                           	opt stack 0
  3096                           
  3097                           ; 1 bytes @ 0xE
  3098  00000F                     	ds	1
  3099  000010                     i2Port_SetPin@pInput:
  3100                           	opt stack 0
  3101                           
  3102                           ; 2 bytes @ 0xF
  3103  000010                     	ds	2
  3104  000012                     i2Port_SetPin@pPin:
  3105                           	opt stack 0
  3106                           
  3107                           ; 1 bytes @ 0x11
  3108  000012                     	ds	1
  3109  000013                     i2Port_SetPin@pValue:
  3110                           	opt stack 0
  3111                           
  3112                           ; 1 bytes @ 0x12
  3113  000013                     	ds	1
  3114  000014                     i2Port_SetPin@Type:
  3115                           	opt stack 0
  3116                           
  3117                           ; 1 bytes @ 0x13
  3118  000014                     	ds	1
  3119  000015                     
  3120                           ; 1 bytes @ 0x14
  3121  000015                     	ds	2
  3122  000017                     ??_ISR_Function:
  3123                           
  3124                           ; 1 bytes @ 0x16
  3125  000017                     	ds	18
  3126                           tblptru	equ	0xFF8
  3127                           tblptrh	equ	0xFF7
  3128                           tblptrl	equ	0xFF6
  3129                           tablat	equ	0xFF5
  3130                           postinc0	equ	0xFEE
  3131                           wreg	equ	0xFE8
  3132                           postdec1	equ	0xFE5
  3133                           fsr1h	equ	0xFE2
  3134                           fsr1l	equ	0xFE1
  3135                           
  3136 ;;
  3137 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  3138 ;;
  3139 ;; *************** function _main *****************
  3140 ;; Defined at:
  3141 ;;		line 444 in file "main.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;		None
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  Target_Dista    2  132[BANK0 ] int 
  3146 ;;  up              1  131[BANK0 ] unsigned char 
  3147 ;;  left            1  130[BANK0 ] unsigned char 
  3148 ;;  right           1  129[BANK0 ] unsigned char 
  3149 ;;  down            1  128[BANK0 ] unsigned char 
  3150 ;; Return value:  Size  Location     Type
  3151 ;;                  1    wreg      void 
  3152 ;; Registers used:
  3153 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 0/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;Total ram usage:       11 bytes
  3164 ;; Hardware stack levels required when called:   17
  3165 ;; This function calls:
  3166 ;;		_ADCAverage
  3167 ;;		_BangBang
  3168 ;;		_Closest_Object
  3169 ;;		_Closest_Object2
  3170 ;;		_Console_Init
  3171 ;;		_Console_Render
  3172 ;;		_Drive
  3173 ;;		_FunctInitButton
  3174 ;;		_Get_Sensor_State
  3175 ;;		_HMI_DIPSwitch
  3176 ;;		_HMI_DownSwitch
  3177 ;;		_HMI_Init
  3178 ;;		_HMI_LeftSwitch
  3179 ;;		_HMI_Poll
  3180 ;;		_HMI_Render
  3181 ;;		_HMI_RightSwitch
  3182 ;;		_HMI_SetNumber
  3183 ;;		_HMI_UpSwitch
  3184 ;;		_ISR_Enable
  3185 ;;		_InitADC
  3186 ;;		_InitSerialCommunication
  3187 ;;		_Init_Timer0
  3188 ;;		_LCD_Init
  3189 ;;		_LEDToggle
  3190 ;;		_LED_Init
  3191 ;;		_LED_Set
  3192 ;;		_MXK_BlockSwitchTo
  3193 ;;		_MXK_DIPSwitch
  3194 ;;		_MXK_Dequeue
  3195 ;;		_MXK_Init
  3196 ;;		_MXK_Release
  3197 ;;		_MXK_TestButton
  3198 ;;		_Reset_variables
  3199 ;;		_Robot_Init
  3200 ;;		_Robot_Stop
  3201 ;;		_Sensor_Observe
  3202 ;;		_Sensor_Observe2
  3203 ;;		_Turn
  3204 ;;		_UpdateDistance
  3205 ;;		_delay_ms
  3206 ;;		_printf
  3207 ;; This function is called by:
  3208 ;;		Startup code after reset
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           	psect	text0
  3213  010000                     __ptext0:
  3214                           	opt stack 0
  3215  010000                     _main:
  3216                           	opt stack 14
  3217                           
  3218                           ;main.c: 446: MXK_Init();
  3219                           
  3220                           ;incstack = 0
  3221  010000  EC9C  F099         	call	_MXK_Init	;wreg free
  3222                           
  3223                           ;main.c: 447: Init_Timer0();
  3224  010004  EC75  F0AF         	call	_Init_Timer0	;wreg free
  3225                           
  3226                           ;main.c: 448: InitSerialCommunication();
  3227  010008  ECF2  F0AE         	call	_InitSerialCommunication	;wreg free
  3228                           
  3229                           ;main.c: 449: Robot_Init();
  3230  01000C  ECB0  F0AF         	call	_Robot_Init	;wreg free
  3231                           
  3232                           ;main.c: 450: ISR_Enable();
  3233  010010  EC48  F0B0         	call	_ISR_Enable	;wreg free
  3234                           
  3235                           ;main.c: 451: FunctInitButton();
  3236  010014  EC3B  F0A6         	call	_FunctInitButton	;wreg free
  3237                           
  3238                           ;main.c: 452: InitADC();
  3239  010018  EC7B  F0AA         	call	_InitADC	;wreg free
  3240                           
  3241                           ;main.c: 453: LED_Init(eLED2);
  3242  01001C  0E01               	movlw	1
  3243  01001E  ECE2  F0A8         	call	_LED_Init
  3244                           
  3245                           ;main.c: 455: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3246  010022  0E01               	movlw	1
  3247  010024  ECF6  F0AC         	call	_MXK_BlockSwitchTo
  3248  010028  0900               	iorlw	0
  3249  01002A  B4D8               	btfsc	status,2,c
  3250  01002C  D00C               	goto	l2242
  3251                           
  3252                           ;main.c: 456: HMI_Init();
  3253  01002E  EC1D  F094         	call	_HMI_Init	;wreg free
  3254                           
  3255                           ;main.c: 457: LCD_Init();
  3256  010032  EC55  F098         	call	_LCD_Init	;wreg free
  3257                           
  3258                           ;main.c: 458: Console_Init();
  3259  010036  EC54  F0A7         	call	_Console_Init	;wreg free
  3260                           
  3261                           ;main.c: 459: if (MXK_Release())
  3262  01003A  EC51  F0AF         	call	_MXK_Release	;wreg free
  3263  01003E  0900               	iorlw	0
  3264  010040  A4D8               	btfss	status,2,c
  3265                           
  3266                           ;main.c: 460: MXK_Dequeue();
  3267  010042  EC62  F0AD         	call	_MXK_Dequeue	;wreg free
  3268  010046                     l2242:
  3269                           
  3270                           ;main.c: 465: LEDToggle();
  3271                           
  3272                           ;main.c: 461: }
  3273                           ;main.c: 463: for(;;) {
  3274  010046  EC43  F0AC         	call	_LEDToggle	;wreg free
  3275                           
  3276                           ;main.c: 466: ADCAverage();
  3277  01004A  ECE5  F088         	call	_ADCAverage	;wreg free
  3278                           
  3279                           ;main.c: 468: HMI_SetNumber(average);
  3280  01004E  C0E9  F076         	movff	_average,HMI_SetNumber@pInput
  3281  010052  C0EA  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  3282  010056  EC9F  F0AE         	call	_HMI_SetNumber	;wreg free
  3283                           
  3284                           ;main.c: 469: HMI_Render();
  3285  01005A  EC12  F0AD         	call	_HMI_Render	;wreg free
  3286                           
  3287                           ;main.c: 470: HMI_Poll();
  3288  01005E  EC25  F0A8         	call	_HMI_Poll	;wreg free
  3289                           
  3290                           ;main.c: 472: bool down = HMIBoard.mDown.mGetState();
  3291  010062  EE21  F075         	lfsr	2,_HMIBoard+45
  3292  010066  D801               	call	u14308
  3293  010068  D00A               	goto	u14309
  3294  01006A                     u14308:
  3295  01006A  0005               	push	
  3296  01006C  6EFA               	movwf	pclath,c
  3297  01006E  50DE               	movf	postinc2,w,c
  3298  010070  6EFD               	movwf	tosl,c
  3299  010072  50DE               	movf	postinc2,w,c
  3300  010074  6EFE               	movwf	tosh,c
  3301  010076  50DE               	movf	postinc2,w,c
  3302  010078  6EFF               	movwf	tosu,c
  3303  01007A  50FA               	movf	pclath,w,c
  3304  01007C  0012               	return		;indir
  3305  01007E                     u14309:
  3306  01007E  0100               	movlb	0	; () banked
  3307  010080  6FE0               	movwf	main@down& (0+255),b
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;main.c: 473: bool right = HMIBoard.mRight.mGetState();
  3311  010082  EE21  F057         	lfsr	2,_HMIBoard+15
  3312  010086  D801               	call	u14318
  3313  010088  D00A               	goto	u14319
  3314  01008A                     u14318:
  3315  01008A  0005               	push	
  3316  01008C  6EFA               	movwf	pclath,c
  3317  01008E  50DE               	movf	postinc2,w,c
  3318  010090  6EFD               	movwf	tosl,c
  3319  010092  50DE               	movf	postinc2,w,c
  3320  010094  6EFE               	movwf	tosh,c
  3321  010096  50DE               	movf	postinc2,w,c
  3322  010098  6EFF               	movwf	tosu,c
  3323  01009A  50FA               	movf	pclath,w,c
  3324  01009C  0012               	return		;indir
  3325  01009E                     u14319:
  3326  01009E  0100               	movlb	0	; () banked
  3327  0100A0  6FE1               	movwf	main@right& (0+255),b
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;main.c: 474: bool up = HMIBoard.mUp.mGetState();
  3331  0100A2  EE21  F06B         	lfsr	2,_HMIBoard+35
  3332  0100A6  D801               	call	u14328
  3333  0100A8  D00A               	goto	u14329
  3334  0100AA                     u14328:
  3335  0100AA  0005               	push	
  3336  0100AC  6EFA               	movwf	pclath,c
  3337  0100AE  50DE               	movf	postinc2,w,c
  3338  0100B0  6EFD               	movwf	tosl,c
  3339  0100B2  50DE               	movf	postinc2,w,c
  3340  0100B4  6EFE               	movwf	tosh,c
  3341  0100B6  50DE               	movf	postinc2,w,c
  3342  0100B8  6EFF               	movwf	tosu,c
  3343  0100BA  50FA               	movf	pclath,w,c
  3344  0100BC  0012               	return		;indir
  3345  0100BE                     u14329:
  3346  0100BE  0100               	movlb	0	; () banked
  3347  0100C0  6FE3               	movwf	main@up& (0+255),b
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;main.c: 475: bool left = HMIBoard.mLeft.mGetState();
  3351  0100C2  EE21  F061         	lfsr	2,_HMIBoard+25
  3352  0100C6  D801               	call	u14338
  3353  0100C8  D00A               	goto	u14339
  3354  0100CA                     u14338:
  3355  0100CA  0005               	push	
  3356  0100CC  6EFA               	movwf	pclath,c
  3357  0100CE  50DE               	movf	postinc2,w,c
  3358  0100D0  6EFD               	movwf	tosl,c
  3359  0100D2  50DE               	movf	postinc2,w,c
  3360  0100D4  6EFE               	movwf	tosh,c
  3361  0100D6  50DE               	movf	postinc2,w,c
  3362  0100D8  6EFF               	movwf	tosu,c
  3363  0100DA  50FA               	movf	pclath,w,c
  3364  0100DC  0012               	return		;indir
  3365  0100DE                     u14339:
  3366  0100DE  0100               	movlb	0	; () banked
  3367  0100E0  6FE2               	movwf	main@left& (0+255),b
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;main.c: 477: if (down) {
  3371  0100E2  51E0               	movf	main@down& (0+255),w,b
  3372  0100E4  B4D8               	btfsc	status,2,c
  3373  0100E6  D004               	goto	l2244
  3374                           
  3375                           ; BSR set to: 0
  3376                           ;main.c: 478: mode = 3;
  3377  0100E8  0E00               	movlw	0
  3378  0100EA  6E32               	movwf	_mode+1,c
  3379  0100EC  0E03               	movlw	3
  3380  0100EE  6E31               	movwf	_mode,c
  3381  0100F0                     l2244:
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;main.c: 479: }
  3385                           ;main.c: 480: if (right) {
  3386  0100F0  51E1               	movf	main@right& (0+255),w,b
  3387  0100F2  B4D8               	btfsc	status,2,c
  3388  0100F4  D004               	goto	l2245
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;main.c: 481: mode = 1;
  3392  0100F6  0E00               	movlw	0
  3393  0100F8  6E32               	movwf	_mode+1,c
  3394  0100FA  0E01               	movlw	1
  3395  0100FC  6E31               	movwf	_mode,c
  3396  0100FE                     l2245:
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;main.c: 482: }
  3400                           ;main.c: 483: if (up) {
  3401  0100FE  51E3               	movf	main@up& (0+255),w,b
  3402  010100  B4D8               	btfsc	status,2,c
  3403  010102  D004               	goto	l2246
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;main.c: 484: mode = 2;
  3407  010104  0E00               	movlw	0
  3408  010106  6E32               	movwf	_mode+1,c
  3409  010108  0E02               	movlw	2
  3410  01010A  6E31               	movwf	_mode,c
  3411  01010C                     l2246:
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;main.c: 485: }
  3415                           ;main.c: 486: if (left) {
  3416  01010C  51E2               	movf	main@left& (0+255),w,b
  3417  01010E  B4D8               	btfsc	status,2,c
  3418  010110  D004               	goto	l2247
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;main.c: 487: mode = 4;
  3422  010112  0E00               	movlw	0
  3423  010114  6E32               	movwf	_mode+1,c
  3424  010116  0E04               	movlw	4
  3425  010118  6E31               	movwf	_mode,c
  3426  01011A                     l2247:
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;main.c: 488: }
  3430                           ;main.c: 493: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3431                           
  3432                           ; BSR set to: 0
  3433  01011A  0E01               	movlw	1
  3434  01011C  ECF6  F0AC         	call	_MXK_BlockSwitchTo
  3435  010120  0900               	iorlw	0
  3436  010122  B4D8               	btfsc	status,2,c
  3437  010124  D790               	goto	l2242
  3438                           
  3439                           ;main.c: 495: if (mode == 0) {
  3440  010126  5031               	movf	_mode,w,c
  3441  010128  1032               	iorwf	_mode+1,w,c
  3442  01012A  A4D8               	btfss	status,2,c
  3443  01012C  D057               	goto	l2249
  3444                           
  3445                           ;main.c: 496: LED_Set(eLED2, 0);
  3446  01012E  0E00               	movlw	0
  3447  010130  0100               	movlb	0	; () banked
  3448  010132  6F74               	movwf	LED_Set@pValue& (0+255),b
  3449  010134  0E01               	movlw	1
  3450  010136  EC11  F0AB         	call	_LED_Set
  3451                           
  3452                           ;main.c: 497: Robot_Stop();
  3453  01013A  ECB2  F0AE         	call	_Robot_Stop	;wreg free
  3454                           
  3455                           ;main.c: 498: Reset_variables();
  3456  01013E  EC55  F0AA         	call	_Reset_variables	;wreg free
  3457                           
  3458                           ;main.c: 500: printf("%c", (char)35);
  3459  010142  0EFC               	movlw	low STR_1
  3460  010144  0100               	movlb	0	; () banked
  3461  010146  6F75               	movwf	printf@f& (0+255),b
  3462  010148  0EFF               	movlw	high STR_1
  3463  01014A  6F76               	movwf	(printf@f+1)& (0+255),b
  3464  01014C  0E00               	movlw	0
  3465  01014E  6F78               	movwf	(?_printf+3)& (0+255),b
  3466  010150  0E23               	movlw	35
  3467  010152  6F77               	movwf	(?_printf+2)& (0+255),b
  3468  010154  EC4F  F096         	call	_printf	;wreg free
  3469                           
  3470                           ;main.c: 501: printf("Robot Ready! \n");
  3471  010158  0ED6               	movlw	low STR_31
  3472  01015A  0100               	movlb	0	; () banked
  3473  01015C  6F75               	movwf	printf@f& (0+255),b
  3474  01015E  0EFF               	movlw	high STR_31
  3475  010160  6F76               	movwf	(printf@f+1)& (0+255),b
  3476  010162  EC4F  F096         	call	_printf	;wreg free
  3477                           
  3478                           ;main.c: 502: printf("Press right for 5m\n drive,\n");
  3479  010166  0EB7               	movlw	low STR_32
  3480  010168  0100               	movlb	0	; () banked
  3481  01016A  6F75               	movwf	printf@f& (0+255),b
  3482  01016C  0EFE               	movlw	high STR_32
  3483  01016E  6F76               	movwf	(printf@f+1)& (0+255),b
  3484  010170  EC4F  F096         	call	_printf	;wreg free
  3485                           
  3486                           ;main.c: 503: printf("Press down for\nsquare drive,\n");
  3487  010174  0E7D               	movlw	low STR_33
  3488  010176  0100               	movlb	0	; () banked
  3489  010178  6F75               	movwf	printf@f& (0+255),b
  3490  01017A  0EFE               	movlw	high STR_33
  3491  01017C  6F76               	movwf	(printf@f+1)& (0+255),b
  3492  01017E  EC4F  F096         	call	_printf	;wreg free
  3493                           
  3494                           ;main.c: 504: printf("Press up for IR scan mode,\n");
  3495  010182  0E9B               	movlw	low STR_34
  3496  010184  0100               	movlb	0	; () banked
  3497  010186  6F75               	movwf	printf@f& (0+255),b
  3498  010188  0EFE               	movlw	high STR_34
  3499  01018A  6F76               	movwf	(printf@f+1)& (0+255),b
  3500  01018C  EC4F  F096         	call	_printf	;wreg free
  3501                           
  3502                           ;main.c: 505: printf("Press left for wall follow\n");
  3503  010190  0EEF               	movlw	low STR_35
  3504  010192  0100               	movlb	0	; () banked
  3505  010194  6F75               	movwf	printf@f& (0+255),b
  3506  010196  0EFE               	movlw	high STR_35
  3507  010198  6F76               	movwf	(printf@f+1)& (0+255),b
  3508  01019A  EC4F  F096         	call	_printf	;wreg free
  3509                           
  3510                           ;main.c: 507: printf("                 \n");
  3511  01019E  0E7D               	movlw	low STR_2
  3512  0101A0  0100               	movlb	0	; () banked
  3513  0101A2  6F75               	movwf	printf@f& (0+255),b
  3514  0101A4  0EFF               	movlw	high STR_2
  3515  0101A6  6F76               	movwf	(printf@f+1)& (0+255),b
  3516  0101A8  EC4F  F096         	call	_printf	;wreg free
  3517                           
  3518                           ;main.c: 508: printf("                 \n");
  3519  0101AC  0E7D               	movlw	low STR_2
  3520  0101AE  0100               	movlb	0	; () banked
  3521  0101B0  6F75               	movwf	printf@f& (0+255),b
  3522  0101B2  0EFF               	movlw	high STR_2
  3523  0101B4  6F76               	movwf	(printf@f+1)& (0+255),b
  3524  0101B6  EC4F  F096         	call	_printf	;wreg free
  3525                           
  3526                           ;main.c: 509: printf("                 \n");
  3527  0101BA  0E7D               	movlw	low STR_2
  3528  0101BC  0100               	movlb	0	; () banked
  3529  0101BE  6F75               	movwf	printf@f& (0+255),b
  3530  0101C0  0EFF               	movlw	high STR_2
  3531  0101C2  6F76               	movwf	(printf@f+1)& (0+255),b
  3532  0101C4  EC4F  F096         	call	_printf	;wreg free
  3533                           
  3534                           ;main.c: 510: printf("                 \n");
  3535  0101C8  0E7D               	movlw	low STR_2
  3536  0101CA  0100               	movlb	0	; () banked
  3537  0101CC  6F75               	movwf	printf@f& (0+255),b
  3538  0101CE  0EFF               	movlw	high STR_2
  3539  0101D0  6F76               	movwf	(printf@f+1)& (0+255),b
  3540  0101D2  EC4F  F096         	call	_printf	;wreg free
  3541                           
  3542                           ;main.c: 511: Console_Render();
  3543  0101D6  EC73  F092         	call	_Console_Render	;wreg free
  3544                           
  3545                           ;main.c: 512: }
  3546  0101DA  D2D3               	goto	l2260
  3547  0101DC                     l2249:
  3548                           
  3549                           ;main.c: 513: else if (mode == 1) {
  3550  0101DC  0431               	decf	_mode,w,c
  3551  0101DE  1032               	iorwf	_mode+1,w,c
  3552  0101E0  A4D8               	btfss	status,2,c
  3553  0101E2  D06E               	goto	l2251
  3554                           
  3555                           ;main.c: 514: LED_Set(eLED2, 1);
  3556  0101E4  0E01               	movlw	1
  3557  0101E6  0100               	movlb	0	; () banked
  3558  0101E8  6F74               	movwf	LED_Set@pValue& (0+255),b
  3559  0101EA  0E01               	movlw	1
  3560  0101EC  EC11  F0AB         	call	_LED_Set
  3561                           
  3562                           ;main.c: 515: Drive(-200);
  3563  0101F0  0EFF               	movlw	255
  3564  0101F2  0100               	movlb	0	; () banked
  3565  0101F4  6F62               	movwf	(Drive@Speed+1)& (0+255),b
  3566  0101F6  0E38               	movlw	56
  3567  0101F8  6F61               	movwf	Drive@Speed& (0+255),b
  3568  0101FA  ECC2  F0AB         	call	_Drive	;wreg free
  3569                           
  3570                           ;main.c: 516: T_VAR += UpdateDistance();
  3571  0101FE  EC48  F0AD         	call	_UpdateDistance	;wreg free
  3572  010202  0100               	movlb	0	; () banked
  3573  010204  5161               	movf	?_UpdateDistance& (0+255),w,b
  3574  010206  262F               	addwf	_T_VAR,f,c
  3575  010208  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
  3576  01020A  2230               	addwfc	_T_VAR+1,f,c
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;main.c: 517: printf("%c", (char)35);
  3580  01020C  0EFC               	movlw	low STR_1
  3581  01020E  6F75               	movwf	printf@f& (0+255),b
  3582  010210  0EFF               	movlw	high STR_1
  3583  010212  6F76               	movwf	(printf@f+1)& (0+255),b
  3584  010214  0E00               	movlw	0
  3585  010216  6F78               	movwf	(?_printf+3)& (0+255),b
  3586  010218  0E23               	movlw	35
  3587  01021A  6F77               	movwf	(?_printf+2)& (0+255),b
  3588  01021C  EC4F  F096         	call	_printf	;wreg free
  3589                           
  3590                           ;main.c: 518: printf("Traveled Distance:\n%d", T_VAR);
  3591  010220  0E3E               	movlw	low STR_41
  3592  010222  0100               	movlb	0	; () banked
  3593  010224  6F75               	movwf	printf@f& (0+255),b
  3594  010226  0EFF               	movlw	high STR_41
  3595  010228  6F76               	movwf	(printf@f+1)& (0+255),b
  3596  01022A  C02F  F077         	movff	_T_VAR,?_printf+2
  3597  01022E  C030  F078         	movff	_T_VAR+1,?_printf+3
  3598  010232  EC4F  F096         	call	_printf	;wreg free
  3599                           
  3600                           ;main.c: 519: printf("                 \n");
  3601  010236  0E7D               	movlw	low STR_2
  3602  010238  0100               	movlb	0	; () banked
  3603  01023A  6F75               	movwf	printf@f& (0+255),b
  3604  01023C  0EFF               	movlw	high STR_2
  3605  01023E  6F76               	movwf	(printf@f+1)& (0+255),b
  3606  010240  EC4F  F096         	call	_printf	;wreg free
  3607                           
  3608                           ;main.c: 520: printf("                 \n");
  3609  010244  0E7D               	movlw	low STR_2
  3610  010246  0100               	movlb	0	; () banked
  3611  010248  6F75               	movwf	printf@f& (0+255),b
  3612  01024A  0EFF               	movlw	high STR_2
  3613  01024C  6F76               	movwf	(printf@f+1)& (0+255),b
  3614  01024E  EC4F  F096         	call	_printf	;wreg free
  3615                           
  3616                           ;main.c: 521: printf("                 \n");
  3617  010252  0E7D               	movlw	low STR_2
  3618  010254  0100               	movlb	0	; () banked
  3619  010256  6F75               	movwf	printf@f& (0+255),b
  3620  010258  0EFF               	movlw	high STR_2
  3621  01025A  6F76               	movwf	(printf@f+1)& (0+255),b
  3622  01025C  EC4F  F096         	call	_printf	;wreg free
  3623                           
  3624                           ;main.c: 522: printf("                 \n");
  3625  010260  0E7D               	movlw	low STR_2
  3626  010262  0100               	movlb	0	; () banked
  3627  010264  6F75               	movwf	printf@f& (0+255),b
  3628  010266  0EFF               	movlw	high STR_2
  3629  010268  6F76               	movwf	(printf@f+1)& (0+255),b
  3630  01026A  EC4F  F096         	call	_printf	;wreg free
  3631                           
  3632                           ;main.c: 523: printf("                 \n");
  3633  01026E  0E7D               	movlw	low STR_2
  3634  010270  0100               	movlb	0	; () banked
  3635  010272  6F75               	movwf	printf@f& (0+255),b
  3636  010274  0EFF               	movlw	high STR_2
  3637  010276  6F76               	movwf	(printf@f+1)& (0+255),b
  3638  010278  EC4F  F096         	call	_printf	;wreg free
  3639                           
  3640                           ;main.c: 524: printf("                 \n");
  3641  01027C  0E7D               	movlw	low STR_2
  3642  01027E  0100               	movlb	0	; () banked
  3643  010280  6F75               	movwf	printf@f& (0+255),b
  3644  010282  0EFF               	movlw	high STR_2
  3645  010284  6F76               	movwf	(printf@f+1)& (0+255),b
  3646  010286  EC4F  F096         	call	_printf	;wreg free
  3647                           
  3648                           ;main.c: 525: printf("                 \n");
  3649  01028A  0E7D               	movlw	low STR_2
  3650  01028C  0100               	movlb	0	; () banked
  3651  01028E  6F75               	movwf	printf@f& (0+255),b
  3652  010290  0EFF               	movlw	high STR_2
  3653  010292  6F76               	movwf	(printf@f+1)& (0+255),b
  3654  010294  EC4F  F096         	call	_printf	;wreg free
  3655                           
  3656                           ;main.c: 526: printf("                 \n");
  3657  010298  0E7D               	movlw	low STR_2
  3658  01029A  0100               	movlb	0	; () banked
  3659  01029C  6F75               	movwf	printf@f& (0+255),b
  3660  01029E  0EFF               	movlw	high STR_2
  3661  0102A0  6F76               	movwf	(printf@f+1)& (0+255),b
  3662  0102A2  EC4F  F096         	call	_printf	;wreg free
  3663                           
  3664                           ;main.c: 527: Console_Render();
  3665  0102A6  EC73  F092         	call	_Console_Render	;wreg free
  3666                           
  3667                           ;main.c: 528: if (T_VAR >= 5000) {
  3668  0102AA  BE30               	btfsc	_T_VAR+1,7,c
  3669  0102AC  D26A               	goto	l2260
  3670  0102AE  0E88               	movlw	136
  3671  0102B0  5C2F               	subwf	_T_VAR,w,c
  3672  0102B2  0E13               	movlw	19
  3673  0102B4  5830               	subwfb	_T_VAR+1,w,c
  3674  0102B6  A0D8               	btfss	status,0,c
  3675  0102B8  D264               	goto	l2260
  3676                           
  3677                           ;main.c: 529: Robot_Stop();
  3678  0102BA  ECB2  F0AE         	call	_Robot_Stop	;wreg free
  3679  0102BE  D25D               	goto	u14590
  3680  0102C0                     l2251:
  3681                           
  3682                           ;main.c: 533: else if (mode == 2) {
  3683  0102C0  0E02               	movlw	2
  3684  0102C2  1831               	xorwf	_mode,w,c
  3685  0102C4  1032               	iorwf	_mode+1,w,c
  3686  0102C6  A4D8               	btfss	status,2,c
  3687  0102C8  D012               	goto	l2254
  3688                           
  3689                           ;main.c: 534: LED_Set(eLED2, 1);
  3690  0102CA  0E01               	movlw	1
  3691  0102CC  0100               	movlb	0	; () banked
  3692  0102CE  6F74               	movwf	LED_Set@pValue& (0+255),b
  3693  0102D0  0E01               	movlw	1
  3694  0102D2  EC11  F0AB         	call	_LED_Set
  3695                           
  3696                           ;main.c: 535: Sensor_Observe();
  3697  0102D6  ECFF  F09C         	call	_Sensor_Observe	;wreg free
  3698                           
  3699                           ;main.c: 537: Closest_Object();
  3700  0102DA  EC73  F0A0         	call	_Closest_Object	;wreg free
  3701                           
  3702                           ;main.c: 538: delay_ms(2000);
  3703  0102DE  0E07               	movlw	7
  3704  0102E0  0100               	movlb	0	; () banked
  3705  0102E2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  3706  0102E4  0ED0               	movlw	208
  3707  0102E6  6F60               	movwf	delay_ms@ms& (0+255),b
  3708  0102E8  ECB4  F0A8         	call	_delay_ms	;wreg free
  3709  0102EC  D246               	goto	u14590
  3710  0102EE                     l2254:
  3711                           
  3712                           ;main.c: 541: else if (mode == 3) {
  3713  0102EE  0E03               	movlw	3
  3714  0102F0  1831               	xorwf	_mode,w,c
  3715  0102F2  1032               	iorwf	_mode+1,w,c
  3716  0102F4  A4D8               	btfss	status,2,c
  3717  0102F6  D0A5               	goto	l2256
  3718                           
  3719                           ;main.c: 542: Drive(100);
  3720  0102F8  0E00               	movlw	0
  3721  0102FA  0100               	movlb	0	; () banked
  3722  0102FC  6F62               	movwf	(Drive@Speed+1)& (0+255),b
  3723  0102FE  0E64               	movlw	100
  3724  010300  6F61               	movwf	Drive@Speed& (0+255),b
  3725  010302  ECC2  F0AB         	call	_Drive	;wreg free
  3726                           
  3727                           ;main.c: 543: LED_Set(eLED2, 1);
  3728  010306  0E01               	movlw	1
  3729  010308  0100               	movlb	0	; () banked
  3730  01030A  6F74               	movwf	LED_Set@pValue& (0+255),b
  3731  01030C  0E01               	movlw	1
  3732  01030E  EC11  F0AB         	call	_LED_Set
  3733                           
  3734                           ;main.c: 544: T_VAR += UpdateDistance();
  3735  010312  EC48  F0AD         	call	_UpdateDistance	;wreg free
  3736  010316  0100               	movlb	0	; () banked
  3737  010318  5161               	movf	?_UpdateDistance& (0+255),w,b
  3738  01031A  262F               	addwf	_T_VAR,f,c
  3739  01031C  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
  3740  01031E  2230               	addwfc	_T_VAR+1,f,c
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;main.c: 546: Square_Dist = T_VAR + mod;
  3744  010320  0101               	movlb	1	; () banked
  3745  010322  5132               	movf	_mod& (0+255),w,b
  3746  010324  242F               	addwf	_T_VAR,w,c
  3747  010326  6F34               	movwf	_Square_Dist& (0+255),b
  3748  010328  5133               	movf	(_mod+1)& (0+255),w,b
  3749  01032A  2030               	addwfc	_T_VAR+1,w,c
  3750  01032C  6F35               	movwf	(_Square_Dist+1)& (0+255),b
  3751                           
  3752                           ; BSR set to: 1
  3753                           ;main.c: 547: printf("%c", (char)35);
  3754  01032E  0EFC               	movlw	low STR_1
  3755  010330  0100               	movlb	0	; () banked
  3756  010332  6F75               	movwf	printf@f& (0+255),b
  3757  010334  0EFF               	movlw	high STR_1
  3758  010336  6F76               	movwf	(printf@f+1)& (0+255),b
  3759  010338  0E00               	movlw	0
  3760  01033A  6F78               	movwf	(?_printf+3)& (0+255),b
  3761  01033C  0E23               	movlw	35
  3762  01033E  6F77               	movwf	(?_printf+2)& (0+255),b
  3763  010340  EC4F  F096         	call	_printf	;wreg free
  3764                           
  3765                           ;main.c: 548: printf("SQUARE DRIVE MODE 3! \n");
  3766  010344  0E27               	movlw	low STR_51
  3767  010346  0100               	movlb	0	; () banked
  3768  010348  6F75               	movwf	printf@f& (0+255),b
  3769  01034A  0EFF               	movlw	high STR_51
  3770  01034C  6F76               	movwf	(printf@f+1)& (0+255),b
  3771  01034E  EC4F  F096         	call	_printf	;wreg free
  3772                           
  3773                           ;main.c: 549: printf("Total: %d\n", Square_Dist);
  3774  010352  0EF1               	movlw	low STR_52
  3775  010354  0100               	movlb	0	; () banked
  3776  010356  6F75               	movwf	printf@f& (0+255),b
  3777  010358  0EFF               	movlw	high STR_52
  3778  01035A  6F76               	movwf	(printf@f+1)& (0+255),b
  3779  01035C  C134  F077         	movff	_Square_Dist,?_printf+2
  3780  010360  C135  F078         	movff	_Square_Dist+1,?_printf+3
  3781  010364  EC4F  F096         	call	_printf	;wreg free
  3782                           
  3783                           ;main.c: 550: printf("                 \n");
  3784  010368  0E7D               	movlw	low STR_2
  3785  01036A  0100               	movlb	0	; () banked
  3786  01036C  6F75               	movwf	printf@f& (0+255),b
  3787  01036E  0EFF               	movlw	high STR_2
  3788  010370  6F76               	movwf	(printf@f+1)& (0+255),b
  3789  010372  EC4F  F096         	call	_printf	;wreg free
  3790                           
  3791                           ;main.c: 551: printf("                 \n");
  3792  010376  0E7D               	movlw	low STR_2
  3793  010378  0100               	movlb	0	; () banked
  3794  01037A  6F75               	movwf	printf@f& (0+255),b
  3795  01037C  0EFF               	movlw	high STR_2
  3796  01037E  6F76               	movwf	(printf@f+1)& (0+255),b
  3797  010380  EC4F  F096         	call	_printf	;wreg free
  3798                           
  3799                           ;main.c: 552: printf("                 \n");
  3800  010384  0E7D               	movlw	low STR_2
  3801  010386  0100               	movlb	0	; () banked
  3802  010388  6F75               	movwf	printf@f& (0+255),b
  3803  01038A  0EFF               	movlw	high STR_2
  3804  01038C  6F76               	movwf	(printf@f+1)& (0+255),b
  3805  01038E  EC4F  F096         	call	_printf	;wreg free
  3806                           
  3807                           ;main.c: 553: printf("                 \n");
  3808  010392  0E7D               	movlw	low STR_2
  3809  010394  0100               	movlb	0	; () banked
  3810  010396  6F75               	movwf	printf@f& (0+255),b
  3811  010398  0EFF               	movlw	high STR_2
  3812  01039A  6F76               	movwf	(printf@f+1)& (0+255),b
  3813  01039C  EC4F  F096         	call	_printf	;wreg free
  3814                           
  3815                           ;main.c: 554: printf("                 \n");
  3816  0103A0  0E7D               	movlw	low STR_2
  3817  0103A2  0100               	movlb	0	; () banked
  3818  0103A4  6F75               	movwf	printf@f& (0+255),b
  3819  0103A6  0EFF               	movlw	high STR_2
  3820  0103A8  6F76               	movwf	(printf@f+1)& (0+255),b
  3821  0103AA  EC4F  F096         	call	_printf	;wreg free
  3822                           
  3823                           ;main.c: 555: printf("                 \n");
  3824  0103AE  0E7D               	movlw	low STR_2
  3825  0103B0  0100               	movlb	0	; () banked
  3826  0103B2  6F75               	movwf	printf@f& (0+255),b
  3827  0103B4  0EFF               	movlw	high STR_2
  3828  0103B6  6F76               	movwf	(printf@f+1)& (0+255),b
  3829  0103B8  EC4F  F096         	call	_printf	;wreg free
  3830                           
  3831                           ;main.c: 556: printf("                 \n");
  3832  0103BC  0E7D               	movlw	low STR_2
  3833  0103BE  0100               	movlb	0	; () banked
  3834  0103C0  6F75               	movwf	printf@f& (0+255),b
  3835  0103C2  0EFF               	movlw	high STR_2
  3836  0103C4  6F76               	movwf	(printf@f+1)& (0+255),b
  3837  0103C6  EC4F  F096         	call	_printf	;wreg free
  3838                           
  3839                           ;main.c: 557: printf("                 \n");
  3840  0103CA  0E7D               	movlw	low STR_2
  3841  0103CC  0100               	movlb	0	; () banked
  3842  0103CE  6F75               	movwf	printf@f& (0+255),b
  3843  0103D0  0EFF               	movlw	high STR_2
  3844  0103D2  6F76               	movwf	(printf@f+1)& (0+255),b
  3845  0103D4  EC4F  F096         	call	_printf	;wreg free
  3846                           
  3847                           ;main.c: 558: Console_Render();
  3848  0103D8  EC73  F092         	call	_Console_Render	;wreg free
  3849                           
  3850                           ;main.c: 560: if (T_VAR >= 1000) {
  3851  0103DC  BE30               	btfsc	_T_VAR+1,7,c
  3852  0103DE  D01E               	goto	l2257
  3853  0103E0  0EE8               	movlw	232
  3854  0103E2  5C2F               	subwf	_T_VAR,w,c
  3855  0103E4  0E03               	movlw	3
  3856  0103E6  5830               	subwfb	_T_VAR+1,w,c
  3857  0103E8  A0D8               	btfss	status,0,c
  3858  0103EA  D018               	goto	l2257
  3859                           
  3860                           ;main.c: 561: Turn(82, 100, 0);
  3861  0103EC  0E00               	movlw	0
  3862  0103EE  0100               	movlb	0	; () banked
  3863  0103F0  6F62               	movwf	(Turn@Angle+1)& (0+255),b
  3864  0103F2  0E52               	movlw	82
  3865  0103F4  6F61               	movwf	Turn@Angle& (0+255),b
  3866  0103F6  0E00               	movlw	0
  3867  0103F8  6F64               	movwf	(Turn@Speed+1)& (0+255),b
  3868  0103FA  0E64               	movlw	100
  3869  0103FC  6F63               	movwf	Turn@Speed& (0+255),b
  3870  0103FE  0E00               	movlw	0
  3871  010400  6F66               	movwf	(Turn@Dir+1)& (0+255),b
  3872  010402  0E00               	movlw	0
  3873  010404  6F65               	movwf	Turn@Dir& (0+255),b
  3874  010406  EC00  F0A6         	call	_Turn	;wreg free
  3875                           
  3876                           ;main.c: 562: T_VAR = 0;
  3877  01040A  0E00               	movlw	0
  3878  01040C  6E30               	movwf	_T_VAR+1,c
  3879  01040E  0E00               	movlw	0
  3880  010410  6E2F               	movwf	_T_VAR,c
  3881                           
  3882                           ;main.c: 563: mod += 1000;
  3883  010412  0101               	movlb	1	; () banked
  3884  010414  0EE8               	movlw	232
  3885  010416  2732               	addwf	_mod& (0+255),f,b
  3886  010418  0E03               	movlw	3
  3887  01041A  2333               	addwfc	(_mod+1)& (0+255),f,b
  3888  01041C                     l2257:
  3889                           
  3890                           ;main.c: 564: }
  3891                           ;main.c: 566: if (Square_Dist >= 4000) {
  3892                           
  3893                           ; BSR set to: 1
  3894  01041C  0101               	movlb	1	; () banked
  3895  01041E  BF35               	btfsc	(_Square_Dist+1)& (0+255),7,b
  3896  010420  D1B0               	goto	l2260
  3897  010422  0EA0               	movlw	160
  3898  010424  5D34               	subwf	_Square_Dist& (0+255),w,b
  3899  010426  0E0F               	movlw	15
  3900  010428  5935               	subwfb	(_Square_Dist+1)& (0+255),w,b
  3901  01042A  A0D8               	btfss	status,0,c
  3902  01042C  D1AA               	goto	l2260
  3903                           
  3904                           ; BSR set to: 1
  3905                           ;main.c: 568: Robot_Stop();
  3906  01042E  ECB2  F0AE         	call	_Robot_Stop	;wreg free
  3907                           
  3908                           ;main.c: 569: delay_ms(500);
  3909  010432  0E01               	movlw	1
  3910  010434  0100               	movlb	0	; () banked
  3911  010436  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  3912  010438  0EF4               	movlw	244
  3913  01043A  6F60               	movwf	delay_ms@ms& (0+255),b
  3914  01043C  ECB4  F0A8         	call	_delay_ms	;wreg free
  3915  010440  D19C               	goto	u14590
  3916  010442                     l2256:
  3917  010442  0E04               	movlw	4
  3918  010444  1831               	xorwf	_mode,w,c
  3919  010446  1032               	iorwf	_mode+1,w,c
  3920  010448  A4D8               	btfss	status,2,c
  3921  01044A  D19B               	goto	l2260
  3922                           
  3923                           ;main.c: 574: Sensor_Observe2();
  3924  01044C  EC62  F09B         	call	_Sensor_Observe2	;wreg free
  3925                           
  3926                           ;main.c: 575: Closest_Object2();
  3927  010450  ECC3  F0A5         	call	_Closest_Object2	;wreg free
  3928                           
  3929                           ;main.c: 577: int Target_Distance = Low_Sensor;
  3930  010454  C04A  F0E4         	movff	_Low_Sensor,main@Target_Distance
  3931  010458  C04B  F0E5         	movff	_Low_Sensor+1,main@Target_Distance+1
  3932                           
  3933                           ;main.c: 578: LED_Set(eLED2, 1);
  3934  01045C  0E01               	movlw	1
  3935  01045E  0100               	movlb	0	; () banked
  3936  010460  6F74               	movwf	LED_Set@pValue& (0+255),b
  3937  010462  0E01               	movlw	1
  3938  010464  EC11  F0AB         	call	_LED_Set
  3939                           
  3940                           ;main.c: 579: Get_Sensor_State();
  3941  010468  EC81  F0AF         	call	_Get_Sensor_State	;wreg free
  3942                           
  3943                           ;main.c: 580: if (test > 0) {
  3944  01046C  0101               	movlb	1	; () banked
  3945  01046E  BF1D               	btfsc	(_test+1)& (0+255),7,b
  3946  010470  D180               	goto	l2273
  3947  010472  511D               	movf	(_test+1)& (0+255),w,b
  3948  010474  E103               	bnz	u14470
  3949  010476  051C               	decf	_test& (0+255),w,b
  3950  010478  A0D8               	btfss	status,0,c
  3951  01047A  D17B               	goto	l2273
  3952  01047C                     u14470:
  3953                           
  3954                           ; BSR set to: 1
  3955                           ;main.c: 581: mode = 0;
  3956  01047C  0E00               	movlw	0
  3957  01047E  6E32               	movwf	_mode+1,c
  3958  010480  0E00               	movlw	0
  3959  010482  6E31               	movwf	_mode,c
  3960                           
  3961                           ; BSR set to: 1
  3962                           ;main.c: 582: }
  3963                           ;main.c: 584: while (BumpSensor == 0) {
  3964  010484  D176               	goto	l2273
  3965  010486                     
  3966                           ;main.c: 585: ADCAverage();
  3967                           
  3968                           ; BSR set to: 1
  3969  010486  ECE5  F088         	call	_ADCAverage	;wreg free
  3970                           
  3971                           ;main.c: 586: printf("%c", (char)35);
  3972  01048A  0EFC               	movlw	low STR_1
  3973  01048C  0100               	movlb	0	; () banked
  3974  01048E  6F75               	movwf	printf@f& (0+255),b
  3975  010490  0EFF               	movlw	high STR_1
  3976  010492  6F76               	movwf	(printf@f+1)& (0+255),b
  3977  010494  0E00               	movlw	0
  3978  010496  6F78               	movwf	(?_printf+3)& (0+255),b
  3979  010498  0E23               	movlw	35
  3980  01049A  6F77               	movwf	(?_printf+2)& (0+255),b
  3981  01049C  EC4F  F096         	call	_printf	;wreg free
  3982                           
  3983                           ;main.c: 587: printf("The target distance is: %d\n", Target_Distance);
  3984  0104A0  0ED3               	movlw	low STR_62
  3985  0104A2  0100               	movlb	0	; () banked
  3986  0104A4  6F75               	movwf	printf@f& (0+255),b
  3987  0104A6  0EFE               	movlw	high STR_62
  3988  0104A8  6F76               	movwf	(printf@f+1)& (0+255),b
  3989  0104AA  C0E4  F077         	movff	main@Target_Distance,?_printf+2
  3990  0104AE  C0E5  F078         	movff	main@Target_Distance+1,?_printf+3
  3991  0104B2  EC4F  F096         	call	_printf	;wreg free
  3992                           
  3993                           ;main.c: 588: printf("ADC AVERAGE %d\n", average);
  3994  0104B6  0EC6               	movlw	low STR_63
  3995  0104B8  0100               	movlb	0	; () banked
  3996  0104BA  6F75               	movwf	printf@f& (0+255),b
  3997  0104BC  0EFF               	movlw	high STR_63
  3998  0104BE  6F76               	movwf	(printf@f+1)& (0+255),b
  3999  0104C0  C0E9  F077         	movff	_average,?_printf+2
  4000  0104C4  C0EA  F078         	movff	_average+1,?_printf+3
  4001  0104C8  EC4F  F096         	call	_printf	;wreg free
  4002                           
  4003                           ;main.c: 589: printf("                 \n");
  4004  0104CC  0E7D               	movlw	low STR_2
  4005  0104CE  0100               	movlb	0	; () banked
  4006  0104D0  6F75               	movwf	printf@f& (0+255),b
  4007  0104D2  0EFF               	movlw	high STR_2
  4008  0104D4  6F76               	movwf	(printf@f+1)& (0+255),b
  4009  0104D6  EC4F  F096         	call	_printf	;wreg free
  4010                           
  4011                           ;main.c: 590: printf("                 \n");
  4012  0104DA  0E7D               	movlw	low STR_2
  4013  0104DC  0100               	movlb	0	; () banked
  4014  0104DE  6F75               	movwf	printf@f& (0+255),b
  4015  0104E0  0EFF               	movlw	high STR_2
  4016  0104E2  6F76               	movwf	(printf@f+1)& (0+255),b
  4017  0104E4  EC4F  F096         	call	_printf	;wreg free
  4018                           
  4019                           ;main.c: 591: printf("                 \n");
  4020  0104E8  0E7D               	movlw	low STR_2
  4021  0104EA  0100               	movlb	0	; () banked
  4022  0104EC  6F75               	movwf	printf@f& (0+255),b
  4023  0104EE  0EFF               	movlw	high STR_2
  4024  0104F0  6F76               	movwf	(printf@f+1)& (0+255),b
  4025  0104F2  EC4F  F096         	call	_printf	;wreg free
  4026                           
  4027                           ;main.c: 592: printf("                 \n");
  4028  0104F6  0E7D               	movlw	low STR_2
  4029  0104F8  0100               	movlb	0	; () banked
  4030  0104FA  6F75               	movwf	printf@f& (0+255),b
  4031  0104FC  0EFF               	movlw	high STR_2
  4032  0104FE  6F76               	movwf	(printf@f+1)& (0+255),b
  4033  010500  EC4F  F096         	call	_printf	;wreg free
  4034                           
  4035                           ;main.c: 593: printf("                 \n");
  4036  010504  0E7D               	movlw	low STR_2
  4037  010506  0100               	movlb	0	; () banked
  4038  010508  6F75               	movwf	printf@f& (0+255),b
  4039  01050A  0EFF               	movlw	high STR_2
  4040  01050C  6F76               	movwf	(printf@f+1)& (0+255),b
  4041  01050E  EC4F  F096         	call	_printf	;wreg free
  4042                           
  4043                           ;main.c: 594: printf("                 \n");
  4044  010512  0E7D               	movlw	low STR_2
  4045  010514  0100               	movlb	0	; () banked
  4046  010516  6F75               	movwf	printf@f& (0+255),b
  4047  010518  0EFF               	movlw	high STR_2
  4048  01051A  6F76               	movwf	(printf@f+1)& (0+255),b
  4049  01051C  EC4F  F096         	call	_printf	;wreg free
  4050                           
  4051                           ;main.c: 595: printf("                 \n");
  4052  010520  0E7D               	movlw	low STR_2
  4053  010522  0100               	movlb	0	; () banked
  4054  010524  6F75               	movwf	printf@f& (0+255),b
  4055  010526  0EFF               	movlw	high STR_2
  4056  010528  6F76               	movwf	(printf@f+1)& (0+255),b
  4057  01052A  EC4F  F096         	call	_printf	;wreg free
  4058                           
  4059                           ;main.c: 596: printf("                 \n");
  4060  01052E  0E7D               	movlw	low STR_2
  4061  010530  0100               	movlb	0	; () banked
  4062  010532  6F75               	movwf	printf@f& (0+255),b
  4063  010534  0EFF               	movlw	high STR_2
  4064  010536  6F76               	movwf	(printf@f+1)& (0+255),b
  4065  010538  EC4F  F096         	call	_printf	;wreg free
  4066                           
  4067                           ;main.c: 597: Console_Render();
  4068  01053C  EC73  F092         	call	_Console_Render	;wreg free
  4069                           
  4070                           ;main.c: 598: HMI_SetNumber(average);
  4071  010540  C0E9  F076         	movff	_average,HMI_SetNumber@pInput
  4072  010544  C0EA  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  4073  010548  EC9F  F0AE         	call	_HMI_SetNumber	;wreg free
  4074                           
  4075                           ;main.c: 600: HMI_Render();
  4076  01054C  EC12  F0AD         	call	_HMI_Render	;wreg free
  4077                           
  4078                           ;main.c: 602: HMI_Poll();
  4079  010550  EC25  F0A8         	call	_HMI_Poll	;wreg free
  4080                           
  4081                           ;main.c: 603: if (Target_Distance <= average + 2 || Target_Distance >= average - 2) {
  4082  010554  0E02               	movlw	2
  4083  010556  0100               	movlb	0	; () banked
  4084  010558  25E9               	addwf	_average& (0+255),w,b
  4085  01055A  6FDB               	movwf	??_main& (0+255),b
  4086  01055C  0E00               	movlw	0
  4087  01055E  21EA               	addwfc	(_average+1)& (0+255),w,b
  4088  010560  6FDC               	movwf	(??_main+1)& (0+255),b
  4089  010562  51E4               	movf	main@Target_Distance& (0+255),w,b
  4090  010564  5DDB               	subwf	??_main& (0+255),w,b
  4091  010566  51DC               	movf	(??_main+1)& (0+255),w,b
  4092  010568  0A80               	xorlw	128
  4093  01056A  6FDD               	movwf	(??_main+2)& (0+255),b
  4094  01056C  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4095  01056E  0A80               	xorlw	128
  4096  010570  59DD               	subwfb	(??_main+2)& (0+255),w,b
  4097  010572  B0D8               	btfsc	status,0,c
  4098  010574  D016               	goto	u14490
  4099                           
  4100                           ; BSR set to: 0
  4101  010576  0EFE               	movlw	254
  4102  010578  6FDB               	movwf	??_main& (0+255),b
  4103  01057A  0EFF               	movlw	255
  4104  01057C  6FDC               	movwf	(??_main+1)& (0+255),b
  4105  01057E  C0E9  F0DD         	movff	_average,??_main+2
  4106  010582  C0EA  F0DE         	movff	_average+1,??_main+3
  4107  010586  51DB               	movf	??_main& (0+255),w,b
  4108  010588  27DD               	addwf	(??_main+2)& (0+255),f,b
  4109  01058A  51DC               	movf	(??_main+1)& (0+255),w,b
  4110  01058C  23DE               	addwfc	(??_main+3)& (0+255),f,b
  4111  01058E  51DD               	movf	(??_main+2)& (0+255),w,b
  4112  010590  5DE4               	subwf	main@Target_Distance& (0+255),w,b
  4113  010592  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4114  010594  0A80               	xorlw	128
  4115  010596  6FDF               	movwf	(??_main+4)& (0+255),b
  4116  010598  51DE               	movf	(??_main+3)& (0+255),w,b
  4117  01059A  0A80               	xorlw	128
  4118  01059C  59DF               	subwfb	(??_main+4)& (0+255),w,b
  4119  01059E  A0D8               	btfss	status,0,c
  4120  0105A0  D012               	goto	l2264
  4121  0105A2                     u14490:
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;main.c: 604: BangBang(50, 50, 50, 50);
  4125                           
  4126                           ; BSR set to: 0
  4127  0105A2  0E00               	movlw	0
  4128  0105A4  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4129  0105A6  0E32               	movlw	50
  4130  0105A8  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4131  0105AA  0E00               	movlw	0
  4132  0105AC  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4133  0105AE  0E32               	movlw	50
  4134  0105B0  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4135  0105B2  0E00               	movlw	0
  4136  0105B4  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4137  0105B6  0E32               	movlw	50
  4138  0105B8  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4139  0105BA  0E00               	movlw	0
  4140  0105BC  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4141  0105BE  0E32               	movlw	50
  4142  0105C0  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4143  0105C2  EC64  F0AE         	call	_BangBang	;wreg free
  4144  0105C6                     l2264:
  4145                           
  4146                           ;main.c: 605: }
  4147                           ;main.c: 606: if (Target_Distance > average + 2) {
  4148  0105C6  0E02               	movlw	2
  4149  0105C8  0100               	movlb	0	; () banked
  4150  0105CA  25E9               	addwf	_average& (0+255),w,b
  4151  0105CC  6FDB               	movwf	??_main& (0+255),b
  4152  0105CE  0E00               	movlw	0
  4153  0105D0  21EA               	addwfc	(_average+1)& (0+255),w,b
  4154  0105D2  6FDC               	movwf	(??_main+1)& (0+255),b
  4155  0105D4  51E4               	movf	main@Target_Distance& (0+255),w,b
  4156  0105D6  5DDB               	subwf	??_main& (0+255),w,b
  4157  0105D8  51DC               	movf	(??_main+1)& (0+255),w,b
  4158  0105DA  0A80               	xorlw	128
  4159  0105DC  6FDD               	movwf	(??_main+2)& (0+255),b
  4160  0105DE  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4161  0105E0  0A80               	xorlw	128
  4162  0105E2  59DD               	subwfb	(??_main+2)& (0+255),w,b
  4163  0105E4  B0D8               	btfsc	status,0,c
  4164  0105E6  D012               	goto	l2267
  4165                           
  4166                           ; BSR set to: 0
  4167                           ;main.c: 607: BangBang(50, 50, 40, 40);
  4168  0105E8  0E00               	movlw	0
  4169  0105EA  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4170  0105EC  0E32               	movlw	50
  4171  0105EE  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4172  0105F0  0E00               	movlw	0
  4173  0105F2  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4174  0105F4  0E32               	movlw	50
  4175  0105F6  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4176  0105F8  0E00               	movlw	0
  4177  0105FA  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4178  0105FC  0E28               	movlw	40
  4179  0105FE  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4180  010600  0E00               	movlw	0
  4181  010602  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4182  010604  0E28               	movlw	40
  4183  010606  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4184  010608  EC64  F0AE         	call	_BangBang	;wreg free
  4185  01060C                     l2267:
  4186                           
  4187                           ;main.c: 608: }
  4188                           ;main.c: 610: if (Target_Distance < average - 2) {
  4189  01060C  0EFE               	movlw	254
  4190  01060E  0100               	movlb	0	; () banked
  4191  010610  6FDB               	movwf	??_main& (0+255),b
  4192  010612  0EFF               	movlw	255
  4193  010614  6FDC               	movwf	(??_main+1)& (0+255),b
  4194  010616  C0E9  F0DD         	movff	_average,??_main+2
  4195  01061A  C0EA  F0DE         	movff	_average+1,??_main+3
  4196  01061E  51DB               	movf	??_main& (0+255),w,b
  4197  010620  27DD               	addwf	(??_main+2)& (0+255),f,b
  4198  010622  51DC               	movf	(??_main+1)& (0+255),w,b
  4199  010624  23DE               	addwfc	(??_main+3)& (0+255),f,b
  4200  010626  51DD               	movf	(??_main+2)& (0+255),w,b
  4201  010628  5DE4               	subwf	main@Target_Distance& (0+255),w,b
  4202  01062A  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4203  01062C  0A80               	xorlw	128
  4204  01062E  6FDF               	movwf	(??_main+4)& (0+255),b
  4205  010630  51DE               	movf	(??_main+3)& (0+255),w,b
  4206  010632  0A80               	xorlw	128
  4207  010634  59DF               	subwfb	(??_main+4)& (0+255),w,b
  4208  010636  B0D8               	btfsc	status,0,c
  4209  010638  D012               	goto	l2268
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;main.c: 611: BangBang(40, 40, 50, 50);
  4213  01063A  0E00               	movlw	0
  4214  01063C  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4215  01063E  0E28               	movlw	40
  4216  010640  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4217  010642  0E00               	movlw	0
  4218  010644  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4219  010646  0E28               	movlw	40
  4220  010648  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4221  01064A  0E00               	movlw	0
  4222  01064C  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4223  01064E  0E32               	movlw	50
  4224  010650  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4225  010652  0E00               	movlw	0
  4226  010654  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4227  010656  0E32               	movlw	50
  4228  010658  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4229  01065A  EC64  F0AE         	call	_BangBang	;wreg free
  4230  01065E                     l2268:
  4231                           
  4232                           ;main.c: 612: }
  4233                           ;main.c: 614: if (Target_Distance > average + 5) {
  4234  01065E  0E05               	movlw	5
  4235  010660  0100               	movlb	0	; () banked
  4236  010662  25E9               	addwf	_average& (0+255),w,b
  4237  010664  6FDB               	movwf	??_main& (0+255),b
  4238  010666  0E00               	movlw	0
  4239  010668  21EA               	addwfc	(_average+1)& (0+255),w,b
  4240  01066A  6FDC               	movwf	(??_main+1)& (0+255),b
  4241  01066C  51E4               	movf	main@Target_Distance& (0+255),w,b
  4242  01066E  5DDB               	subwf	??_main& (0+255),w,b
  4243  010670  51DC               	movf	(??_main+1)& (0+255),w,b
  4244  010672  0A80               	xorlw	128
  4245  010674  6FDD               	movwf	(??_main+2)& (0+255),b
  4246  010676  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4247  010678  0A80               	xorlw	128
  4248  01067A  59DD               	subwfb	(??_main+2)& (0+255),w,b
  4249  01067C  B0D8               	btfsc	status,0,c
  4250  01067E  D012               	goto	l2269
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;main.c: 615: BangBang(50, 50, 30, 30);
  4254  010680  0E00               	movlw	0
  4255  010682  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4256  010684  0E32               	movlw	50
  4257  010686  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4258  010688  0E00               	movlw	0
  4259  01068A  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4260  01068C  0E32               	movlw	50
  4261  01068E  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4262  010690  0E00               	movlw	0
  4263  010692  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4264  010694  0E1E               	movlw	30
  4265  010696  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4266  010698  0E00               	movlw	0
  4267  01069A  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4268  01069C  0E1E               	movlw	30
  4269  01069E  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4270  0106A0  EC64  F0AE         	call	_BangBang	;wreg free
  4271  0106A4                     l2269:
  4272                           
  4273                           ;main.c: 616: }
  4274                           ;main.c: 618: if (Target_Distance < average - 5) {
  4275  0106A4  0EFB               	movlw	251
  4276  0106A6  0100               	movlb	0	; () banked
  4277  0106A8  6FDB               	movwf	??_main& (0+255),b
  4278  0106AA  0EFF               	movlw	255
  4279  0106AC  6FDC               	movwf	(??_main+1)& (0+255),b
  4280  0106AE  C0E9  F0DD         	movff	_average,??_main+2
  4281  0106B2  C0EA  F0DE         	movff	_average+1,??_main+3
  4282  0106B6  51DB               	movf	??_main& (0+255),w,b
  4283  0106B8  27DD               	addwf	(??_main+2)& (0+255),f,b
  4284  0106BA  51DC               	movf	(??_main+1)& (0+255),w,b
  4285  0106BC  23DE               	addwfc	(??_main+3)& (0+255),f,b
  4286  0106BE  51DD               	movf	(??_main+2)& (0+255),w,b
  4287  0106C0  5DE4               	subwf	main@Target_Distance& (0+255),w,b
  4288  0106C2  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4289  0106C4  0A80               	xorlw	128
  4290  0106C6  6FDF               	movwf	(??_main+4)& (0+255),b
  4291  0106C8  51DE               	movf	(??_main+3)& (0+255),w,b
  4292  0106CA  0A80               	xorlw	128
  4293  0106CC  59DF               	subwfb	(??_main+4)& (0+255),w,b
  4294  0106CE  B0D8               	btfsc	status,0,c
  4295  0106D0  D012               	goto	l2270
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;main.c: 619: BangBang(30, 30, 50, 50);
  4299  0106D2  0E00               	movlw	0
  4300  0106D4  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4301  0106D6  0E1E               	movlw	30
  4302  0106D8  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4303  0106DA  0E00               	movlw	0
  4304  0106DC  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4305  0106DE  0E1E               	movlw	30
  4306  0106E0  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4307  0106E2  0E00               	movlw	0
  4308  0106E4  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4309  0106E6  0E32               	movlw	50
  4310  0106E8  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4311  0106EA  0E00               	movlw	0
  4312  0106EC  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4313  0106EE  0E32               	movlw	50
  4314  0106F0  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4315  0106F2  EC64  F0AE         	call	_BangBang	;wreg free
  4316  0106F6                     l2270:
  4317                           
  4318                           ;main.c: 620: }
  4319                           ;main.c: 622: Get_Sensor_State();
  4320  0106F6  EC81  F0AF         	call	_Get_Sensor_State	;wreg free
  4321                           
  4322                           ;main.c: 623: printf("Besneor: %d", BumpSensor);
  4323  0106FA  0EE5               	movlw	low STR_72
  4324  0106FC  0100               	movlb	0	; () banked
  4325  0106FE  6F75               	movwf	printf@f& (0+255),b
  4326  010700  0EFF               	movlw	high STR_72
  4327  010702  6F76               	movwf	(printf@f+1)& (0+255),b
  4328  010704  C0F1  F077         	movff	_BumpSensor,?_printf+2
  4329  010708  6B78               	clrf	(?_printf+3)& (0+255),b
  4330  01070A  EC4F  F096         	call	_printf	;wreg free
  4331                           
  4332                           ;main.c: 624: if (BumpSensor > 0) {
  4333  01070E  0100               	movlb	0	; () banked
  4334  010710  51F1               	movf	_BumpSensor& (0+255),w,b
  4335  010712  B4D8               	btfsc	status,2,c
  4336  010714  D005               	goto	l2271
  4337                           
  4338                           ; BSR set to: 0
  4339                           ;main.c: 625: Target_Distance = 0;
  4340  010716  0E00               	movlw	0
  4341  010718  6FE5               	movwf	(main@Target_Distance+1)& (0+255),b
  4342  01071A  0E00               	movlw	0
  4343  01071C  6FE4               	movwf	main@Target_Distance& (0+255),b
  4344                           
  4345                           ;main.c: 626: break;
  4346  01071E  D02D               	goto	u14590
  4347  010720                     l2271:
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;main.c: 627: }
  4351                           ;main.c: 629: if (HMIBoard.mUp.mGetState()) {
  4352                           
  4353                           ; BSR set to: 0
  4354  010720  EE21  F06B         	lfsr	2,_HMIBoard+35
  4355  010724  D801               	call	u14558
  4356  010726  D00A               	goto	u14559
  4357  010728                     u14558:
  4358  010728  0005               	push	
  4359  01072A  6EFA               	movwf	pclath,c
  4360  01072C  50DE               	movf	postinc2,w,c
  4361  01072E  6EFD               	movwf	tosl,c
  4362  010730  50DE               	movf	postinc2,w,c
  4363  010732  6EFE               	movwf	tosh,c
  4364  010734  50DE               	movf	postinc2,w,c
  4365  010736  6EFF               	movwf	tosu,c
  4366  010738  50FA               	movf	pclath,w,c
  4367  01073A  0012               	return		;indir
  4368  01073C                     u14559:
  4369  01073C  0900               	iorlw	0
  4370  01073E  B4D8               	btfsc	status,2,c
  4371  010740  D018               	goto	l2273
  4372                           
  4373                           ;main.c: 630: up = HMIBoard.mUp.mGetState();
  4374  010742  EE21  F06B         	lfsr	2,_HMIBoard+35
  4375  010746  D801               	call	u14578
  4376  010748  D00A               	goto	u14579
  4377  01074A                     u14578:
  4378  01074A  0005               	push	
  4379  01074C  6EFA               	movwf	pclath,c
  4380  01074E  50DE               	movf	postinc2,w,c
  4381  010750  6EFD               	movwf	tosl,c
  4382  010752  50DE               	movf	postinc2,w,c
  4383  010754  6EFE               	movwf	tosh,c
  4384  010756  50DE               	movf	postinc2,w,c
  4385  010758  6EFF               	movwf	tosu,c
  4386  01075A  50FA               	movf	pclath,w,c
  4387  01075C  0012               	return		;indir
  4388  01075E                     u14579:
  4389  01075E  0100               	movlb	0	; () banked
  4390  010760  6FE3               	movwf	main@up& (0+255),b
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;main.c: 631: if (up) {
  4394  010762  51E3               	movf	main@up& (0+255),w,b
  4395  010764  B4D8               	btfsc	status,2,c
  4396  010766  D009               	goto	u14590
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;main.c: 632: mode = 0;
  4400  010768  0E00               	movlw	0
  4401  01076A  6E32               	movwf	_mode+1,c
  4402  01076C  0E00               	movlw	0
  4403  01076E  6E31               	movwf	_mode,c
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;main.c: 633: }
  4407                           ;main.c: 634: break;
  4408  010770  D004               	goto	u14590
  4409  010772                     l2273:
  4410                           
  4411                           ; BSR set to: 0
  4412                           
  4413                           ; BSR set to: 0
  4414  010772  0100               	movlb	0	; () banked
  4415  010774  51F1               	movf	_BumpSensor& (0+255),w,b
  4416  010776  B4D8               	btfsc	status,2,c
  4417  010778  D686               	goto	l2263
  4418  01077A                     u14590:
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;main.c: 635: }
  4422                           ;main.c: 636: }
  4423                           ;main.c: 637: mode = 0;
  4424                           
  4425                           ; BSR set to: 0
  4426  01077A  0E00               	movlw	0
  4427  01077C  6E32               	movwf	_mode+1,c
  4428  01077E  0E00               	movlw	0
  4429  010780  6E31               	movwf	_mode,c
  4430  010782                     l2260:
  4431                           
  4432                           ;main.c: 638: }
  4433                           ;main.c: 639: Console_Render();
  4434                           
  4435                           ; BSR set to: 0
  4436                           
  4437                           ; BSR set to: 0
  4438                           
  4439                           ; BSR set to: 0
  4440                           
  4441                           ; BSR set to: 0
  4442                           
  4443                           ; BSR set to: 0
  4444  010782  EC73  F092         	call	_Console_Render	;wreg free
  4445                           
  4446                           ;main.c: 640: if (MXK_Release())
  4447  010786  EC51  F0AF         	call	_MXK_Release	;wreg free
  4448  01078A  0900               	iorlw	0
  4449  01078C  B4D8               	btfsc	status,2,c
  4450  01078E  D45B               	goto	l2242
  4451                           
  4452                           ;main.c: 641: MXK_Dequeue();
  4453  010790  EC62  F0AD         	call	_MXK_Dequeue	;wreg free
  4454                           
  4455                           ;main.c: 642: }
  4456                           ;main.c: 643: }
  4457  010794  D458               	goto	l2242
  4458  010796                     __end_of_main:
  4459                           	opt stack 0
  4460                           tosu	equ	0xFFF
  4461                           tosh	equ	0xFFE
  4462                           tosl	equ	0xFFD
  4463                           pclath	equ	0xFFA
  4464                           tblptru	equ	0xFF8
  4465                           tblptrh	equ	0xFF7
  4466                           tblptrl	equ	0xFF6
  4467                           tablat	equ	0xFF5
  4468                           postinc0	equ	0xFEE
  4469                           wreg	equ	0xFE8
  4470                           postdec1	equ	0xFE5
  4471                           fsr1h	equ	0xFE2
  4472                           fsr1l	equ	0xFE1
  4473                           postinc2	equ	0xFDE
  4474                           status	equ	0xFD8
  4475                           
  4476 ;; *************** function _Turn *****************
  4477 ;; Defined at:
  4478 ;;		line 205 in file "main.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  Angle           2    1[BANK0 ] int 
  4481 ;;  Speed           2    3[BANK0 ] int 
  4482 ;;  Dir             2    5[BANK0 ] int 
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;  Rad             2    9[BANK0 ] int 
  4485 ;;  C_Angle         2    7[BANK0 ] int 
  4486 ;; Return value:  Size  Location     Type
  4487 ;;                  2    1[BANK0 ] int 
  4488 ;; Registers used:
  4489 ;;		wreg, status,2, status,0, cstack
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 0/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4495 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;Total ram usage:       10 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:    9
  4502 ;; This function calls:
  4503 ;;		_Robot_Stop
  4504 ;;		_eusartRec
  4505 ;;		_eusartSend
  4506 ;; This function is called by:
  4507 ;;		_main
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           	psect	text1
  4512  014C00                     __ptext1:
  4513                           	opt stack 0
  4514  014C00                     _Turn:
  4515                           	opt stack 21
  4516                           
  4517                           ;main.c: 206: int Rad = 1;
  4518                           
  4519                           ;incstack = 0
  4520  014C00  0E00               	movlw	0
  4521  014C02  0100               	movlb	0	; () banked
  4522  014C04  6F6A               	movwf	(Turn@Rad+1)& (0+255),b
  4523  014C06  0E01               	movlw	1
  4524  014C08  6F69               	movwf	Turn@Rad& (0+255),b
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;main.c: 207: if (Dir == 0){
  4528  014C0A  5165               	movf	Turn@Dir& (0+255),w,b
  4529  014C0C  1166               	iorwf	(Turn@Dir+1)& (0+255),w,b
  4530  014C0E  A4D8               	btfss	status,2,c
  4531  014C10  D004               	goto	l2167
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;main.c: 208: Rad = 65535;
  4535  014C12  6969               	setf	Turn@Rad& (0+255),b
  4536  014C14  696A               	setf	(Turn@Rad+1)& (0+255),b
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;main.c: 209: Angle = ~Angle;
  4540  014C16  1F61               	comf	Turn@Angle& (0+255),f,b
  4541  014C18  1F62               	comf	(Turn@Angle+1)& (0+255),f,b
  4542  014C1A                     l2167:
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;main.c: 210: }
  4546                           ;main.c: 212: eusartSend(137);
  4547                           
  4548                           ; BSR set to: 0
  4549  014C1A  0E89               	movlw	137
  4550  014C1C  EC28  F0B0         	call	_eusartSend
  4551                           
  4552                           ;main.c: 213: eusartSend((((Speed)>>8) & 255));
  4553  014C20  0100               	movlb	0	; () banked
  4554  014C22  5164               	movf	(Turn@Speed+1)& (0+255),w,b
  4555  014C24  EC28  F0B0         	call	_eusartSend
  4556                           
  4557                           ;main.c: 214: eusartSend(((Speed) & 255));
  4558  014C28  0100               	movlb	0	; () banked
  4559  014C2A  5163               	movf	Turn@Speed& (0+255),w,b
  4560  014C2C  EC28  F0B0         	call	_eusartSend
  4561                           
  4562                           ;main.c: 215: eusartSend((((Rad)>>8) & 255));
  4563  014C30  0100               	movlb	0	; () banked
  4564  014C32  516A               	movf	(Turn@Rad+1)& (0+255),w,b
  4565  014C34  EC28  F0B0         	call	_eusartSend
  4566                           
  4567                           ;main.c: 216: eusartSend(((Rad) & 255));
  4568  014C38  0100               	movlb	0	; () banked
  4569  014C3A  5169               	movf	Turn@Rad& (0+255),w,b
  4570  014C3C  EC28  F0B0         	call	_eusartSend
  4571                           
  4572                           ;main.c: 217: int C_Angle = 0;
  4573  014C40  0E00               	movlw	0
  4574  014C42  0100               	movlb	0	; () banked
  4575  014C44  6F68               	movwf	(Turn@C_Angle+1)& (0+255),b
  4576  014C46  0E00               	movlw	0
  4577  014C48  6F67               	movwf	Turn@C_Angle& (0+255),b
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;main.c: 218: eusartSend(157);
  4581  014C4A  0E9D               	movlw	157
  4582  014C4C  EC28  F0B0         	call	_eusartSend
  4583                           
  4584                           ;main.c: 219: eusartSend((((Angle)>>8) & 255));
  4585  014C50  0100               	movlb	0	; () banked
  4586  014C52  5162               	movf	(Turn@Angle+1)& (0+255),w,b
  4587  014C54  EC28  F0B0         	call	_eusartSend
  4588                           
  4589                           ;main.c: 220: eusartSend(((Angle) & 255));
  4590  014C58  0100               	movlb	0	; () banked
  4591  014C5A  5161               	movf	Turn@Angle& (0+255),w,b
  4592  014C5C  EC28  F0B0         	call	_eusartSend
  4593                           
  4594                           ;main.c: 222: Robot_Stop();
  4595  014C60  ECB2  F0AE         	call	_Robot_Stop	;wreg free
  4596                           
  4597                           ;main.c: 224: eusartSend(142);
  4598  014C64  0E8E               	movlw	142
  4599  014C66  EC28  F0B0         	call	_eusartSend
  4600                           
  4601                           ;main.c: 225: eusartSend(7);
  4602  014C6A  0E07               	movlw	7
  4603  014C6C  EC28  F0B0         	call	_eusartSend
  4604                           
  4605                           ;main.c: 226: eusartRec();
  4606  014C70  EC56  F0B0         	call	_eusartRec	;wreg free
  4607  014C74  0012               	return		;funcret
  4608  014C76                     __end_of_Turn:
  4609                           	opt stack 0
  4610                           tosu	equ	0xFFF
  4611                           tosh	equ	0xFFE
  4612                           tosl	equ	0xFFD
  4613                           pclath	equ	0xFFA
  4614                           tblptru	equ	0xFF8
  4615                           tblptrh	equ	0xFF7
  4616                           tblptrl	equ	0xFF6
  4617                           tablat	equ	0xFF5
  4618                           postinc0	equ	0xFEE
  4619                           wreg	equ	0xFE8
  4620                           postdec1	equ	0xFE5
  4621                           fsr1h	equ	0xFE2
  4622                           fsr1l	equ	0xFE1
  4623                           postinc2	equ	0xFDE
  4624                           status	equ	0xFD8
  4625                           
  4626 ;; *************** function _Sensor_Observe2 *****************
  4627 ;; Defined at:
  4628 ;;		line 329 in file "main.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;		None
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;		None
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;Total ram usage:        2 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:   13
  4649 ;; This function calls:
  4650 ;;		_ADCAverage
  4651 ;;		_Console_Render
  4652 ;;		_SteppingCCW
  4653 ;;		_printf
  4654 ;; This function is called by:
  4655 ;;		_main
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           	psect	text2
  4660  0136C4                     __ptext2:
  4661                           	opt stack 0
  4662  0136C4                     _Sensor_Observe2:
  4663                           	opt stack 17
  4664                           
  4665                           ;main.c: 330: printf("%c", (char)35);
  4666                           
  4667                           ;incstack = 0
  4668  0136C4  0EFC               	movlw	low STR_1
  4669  0136C6  0100               	movlb	0	; () banked
  4670  0136C8  6F75               	movwf	printf@f& (0+255),b
  4671  0136CA  0EFF               	movlw	high STR_1
  4672  0136CC  6F76               	movwf	(printf@f+1)& (0+255),b
  4673  0136CE  0E00               	movlw	0
  4674  0136D0  6F78               	movwf	(?_printf+3)& (0+255),b
  4675  0136D2  0E23               	movlw	35
  4676  0136D4  6F77               	movwf	(?_printf+2)& (0+255),b
  4677  0136D6  EC4F  F096         	call	_printf	;wreg free
  4678                           
  4679                           ;main.c: 331: printf("                 \n");
  4680  0136DA  0E7D               	movlw	low STR_2
  4681  0136DC  0100               	movlb	0	; () banked
  4682  0136DE  6F75               	movwf	printf@f& (0+255),b
  4683  0136E0  0EFF               	movlw	high STR_2
  4684  0136E2  6F76               	movwf	(printf@f+1)& (0+255),b
  4685  0136E4  EC4F  F096         	call	_printf	;wreg free
  4686                           
  4687                           ;main.c: 332: printf("Sensor Moving!\n");
  4688  0136E8  0EB6               	movlw	low STR_3
  4689  0136EA  0100               	movlb	0	; () banked
  4690  0136EC  6F75               	movwf	printf@f& (0+255),b
  4691  0136EE  0EFF               	movlw	high STR_3
  4692  0136F0  6F76               	movwf	(printf@f+1)& (0+255),b
  4693  0136F2  EC4F  F096         	call	_printf	;wreg free
  4694                           
  4695                           ;main.c: 333: printf("                 \n");
  4696  0136F6  0E7D               	movlw	low STR_2
  4697  0136F8  0100               	movlb	0	; () banked
  4698  0136FA  6F75               	movwf	printf@f& (0+255),b
  4699  0136FC  0EFF               	movlw	high STR_2
  4700  0136FE  6F76               	movwf	(printf@f+1)& (0+255),b
  4701  013700  EC4F  F096         	call	_printf	;wreg free
  4702                           
  4703                           ;main.c: 334: printf("                 \n");
  4704  013704  0E7D               	movlw	low STR_2
  4705  013706  0100               	movlb	0	; () banked
  4706  013708  6F75               	movwf	printf@f& (0+255),b
  4707  01370A  0EFF               	movlw	high STR_2
  4708  01370C  6F76               	movwf	(printf@f+1)& (0+255),b
  4709  01370E  EC4F  F096         	call	_printf	;wreg free
  4710                           
  4711                           ;main.c: 335: printf("                 \n");
  4712  013712  0E7D               	movlw	low STR_2
  4713  013714  0100               	movlb	0	; () banked
  4714  013716  6F75               	movwf	printf@f& (0+255),b
  4715  013718  0EFF               	movlw	high STR_2
  4716  01371A  6F76               	movwf	(printf@f+1)& (0+255),b
  4717  01371C  EC4F  F096         	call	_printf	;wreg free
  4718                           
  4719                           ;main.c: 336: printf("                 \n");
  4720  013720  0E7D               	movlw	low STR_2
  4721  013722  0100               	movlb	0	; () banked
  4722  013724  6F75               	movwf	printf@f& (0+255),b
  4723  013726  0EFF               	movlw	high STR_2
  4724  013728  6F76               	movwf	(printf@f+1)& (0+255),b
  4725  01372A  EC4F  F096         	call	_printf	;wreg free
  4726                           
  4727                           ;main.c: 337: printf("                 \n");
  4728  01372E  0E7D               	movlw	low STR_2
  4729  013730  0100               	movlb	0	; () banked
  4730  013732  6F75               	movwf	printf@f& (0+255),b
  4731  013734  0EFF               	movlw	high STR_2
  4732  013736  6F76               	movwf	(printf@f+1)& (0+255),b
  4733  013738  EC4F  F096         	call	_printf	;wreg free
  4734                           
  4735                           ;main.c: 338: printf("                 \n");
  4736  01373C  0E7D               	movlw	low STR_2
  4737  01373E  0100               	movlb	0	; () banked
  4738  013740  6F75               	movwf	printf@f& (0+255),b
  4739  013742  0EFF               	movlw	high STR_2
  4740  013744  6F76               	movwf	(printf@f+1)& (0+255),b
  4741  013746  EC4F  F096         	call	_printf	;wreg free
  4742                           
  4743                           ;main.c: 339: printf("                 \n");
  4744  01374A  0E7D               	movlw	low STR_2
  4745  01374C  0100               	movlb	0	; () banked
  4746  01374E  6F75               	movwf	printf@f& (0+255),b
  4747  013750  0EFF               	movlw	high STR_2
  4748  013752  6F76               	movwf	(printf@f+1)& (0+255),b
  4749  013754  EC4F  F096         	call	_printf	;wreg free
  4750                           
  4751                           ;main.c: 340: Console_Render();
  4752  013758  EC73  F092         	call	_Console_Render	;wreg free
  4753                           
  4754                           ;main.c: 341: while (Motor_Count <= 512) {
  4755  01375C  D019               	goto	l2210
  4756  01375E                     
  4757                           ;main.c: 342: Motor_Count++;
  4758  01375E  4A2D               	infsnz	_Motor_Count,f,c
  4759  013760  2A2E               	incf	_Motor_Count+1,f,c
  4760                           
  4761                           ;main.c: 343: ADCAverage();
  4762  013762  ECE5  F088         	call	_ADCAverage	;wreg free
  4763                           
  4764                           ;main.c: 344: if (Low_Sensor > average) {
  4765  013766  504A               	movf	_Low_Sensor,w,c
  4766  013768  0100               	movlb	0	; () banked
  4767  01376A  5DE9               	subwf	_average& (0+255),w,b
  4768  01376C  51EA               	movf	(_average+1)& (0+255),w,b
  4769  01376E  0A80               	xorlw	128
  4770  013770  6FD9               	movwf	??_Sensor_Observe2& (0+255),b
  4771  013772  504B               	movf	_Low_Sensor+1,w,c
  4772  013774  0A80               	xorlw	128
  4773  013776  59D9               	subwfb	??_Sensor_Observe2& (0+255),w,b
  4774  013778  B0D8               	btfsc	status,0,c
  4775  01377A  D008               	goto	l2212
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;main.c: 345: Low_Sensor = average;
  4779  01377C  C0E9  F04A         	movff	_average,_Low_Sensor
  4780  013780  C0EA  F04B         	movff	_average+1,_Low_Sensor+1
  4781                           
  4782                           ;main.c: 346: Close_Pos = Motor_Count;
  4783  013784  C02D  F02B         	movff	_Motor_Count,_Close_Pos
  4784  013788  C02E  F02C         	movff	_Motor_Count+1,_Close_Pos+1
  4785  01378C                     l2212:
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;main.c: 347: }
  4789                           ;main.c: 348: SteppingCCW();
  4790                           
  4791                           ; BSR set to: 0
  4792  01378C  ECEC  F0AA         	call	_SteppingCCW	;wreg free
  4793  013790                     l2210:
  4794  013790  BE2E               	btfsc	_Motor_Count+1,7,c
  4795  013792  D7E5               	goto	l2211
  4796  013794  042D               	decf	_Motor_Count,w,c
  4797  013796  0E02               	movlw	2
  4798  013798  582E               	subwfb	_Motor_Count+1,w,c
  4799  01379A  A0D8               	btfss	status,0,c
  4800  01379C  D7E0               	goto	l2211
  4801                           
  4802                           ;main.c: 349: }
  4803                           ;main.c: 351: Console_Render();
  4804  01379E  EC73  F092         	call	_Console_Render	;wreg free
  4805                           
  4806                           ;main.c: 352: RD5 = 0;
  4807  0137A2  9A83               	bcf	3971,5,c	;volatile
  4808                           
  4809                           ;main.c: 353: RD7 = 0;
  4810  0137A4  9E83               	bcf	3971,7,c	;volatile
  4811                           
  4812                           ;main.c: 354: RA2 = 0;
  4813  0137A6  9480               	bcf	3968,2,c	;volatile
  4814                           
  4815                           ;main.c: 355: RA3 = 0;
  4816  0137A8  9680               	bcf	3968,3,c	;volatile
  4817                           
  4818                           ;main.c: 356: Sensor_Observe_Fin = 1;
  4819  0137AA  0E00               	movlw	0
  4820  0137AC  0101               	movlb	1	; () banked
  4821  0137AE  6F27               	movwf	(_Sensor_Observe_Fin+1)& (0+255),b
  4822  0137B0  0E01               	movlw	1
  4823  0137B2  6F26               	movwf	_Sensor_Observe_Fin& (0+255),b
  4824                           
  4825                           ; BSR set to: 1
  4826                           ;main.c: 358: CW_Count = 512 - Close_Pos;
  4827  0137B4  C02B  F0D9         	movff	_Close_Pos,??_Sensor_Observe2
  4828  0137B8  C02C  F0DA         	movff	_Close_Pos+1,??_Sensor_Observe2+1
  4829  0137BC  0100               	movlb	0	; () banked
  4830  0137BE  1FD9               	comf	??_Sensor_Observe2& (0+255),f,b
  4831  0137C0  1FDA               	comf	(??_Sensor_Observe2+1)& (0+255),f,b
  4832  0137C2  4BD9               	infsnz	??_Sensor_Observe2& (0+255),f,b
  4833  0137C4  2BDA               	incf	(??_Sensor_Observe2+1)& (0+255),f,b
  4834  0137C6  0E00               	movlw	0
  4835  0137C8  25D9               	addwf	??_Sensor_Observe2& (0+255),w,b
  4836  0137CA  0101               	movlb	1	; () banked
  4837  0137CC  6F28               	movwf	_CW_Count& (0+255),b
  4838  0137CE  0E02               	movlw	2
  4839  0137D0  0100               	movlb	0	; () banked
  4840  0137D2  21DA               	addwfc	(??_Sensor_Observe2+1)& (0+255),w,b
  4841  0137D4  0101               	movlb	1	; () banked
  4842  0137D6  6F29               	movwf	(_CW_Count+1)& (0+255),b
  4843  0137D8  0012               	return	
  4844  0137DA                     __end_of_Sensor_Observe2:
  4845                           	opt stack 0
  4846                           tosu	equ	0xFFF
  4847                           tosh	equ	0xFFE
  4848                           tosl	equ	0xFFD
  4849                           pclath	equ	0xFFA
  4850                           tblptru	equ	0xFF8
  4851                           tblptrh	equ	0xFF7
  4852                           tblptrl	equ	0xFF6
  4853                           tablat	equ	0xFF5
  4854                           postinc0	equ	0xFEE
  4855                           wreg	equ	0xFE8
  4856                           postdec1	equ	0xFE5
  4857                           fsr1h	equ	0xFE2
  4858                           fsr1l	equ	0xFE1
  4859                           postinc2	equ	0xFDE
  4860                           status	equ	0xFD8
  4861                           
  4862 ;; *************** function _Sensor_Observe *****************
  4863 ;; Defined at:
  4864 ;;		line 380 in file "main.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;		None
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;		None
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  1    wreg      void 
  4871 ;; Registers used:
  4872 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4881 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;Total ram usage:        2 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:   13
  4885 ;; This function calls:
  4886 ;;		_ADCAverage
  4887 ;;		_Console_Render
  4888 ;;		_SteppingCW
  4889 ;;		_printf
  4890 ;; This function is called by:
  4891 ;;		_main
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           	psect	text3
  4896  0139FE                     __ptext3:
  4897                           	opt stack 0
  4898  0139FE                     _Sensor_Observe:
  4899                           	opt stack 17
  4900                           
  4901                           ;main.c: 381: printf("%c", (char)35);
  4902                           
  4903                           ; BSR set to: 1
  4904                           ;incstack = 0
  4905  0139FE  0EFC               	movlw	low STR_1
  4906  013A00  0100               	movlb	0	; () banked
  4907  013A02  6F75               	movwf	printf@f& (0+255),b
  4908  013A04  0EFF               	movlw	high STR_1
  4909  013A06  6F76               	movwf	(printf@f+1)& (0+255),b
  4910  013A08  0E00               	movlw	0
  4911  013A0A  6F78               	movwf	(?_printf+3)& (0+255),b
  4912  013A0C  0E23               	movlw	35
  4913  013A0E  6F77               	movwf	(?_printf+2)& (0+255),b
  4914  013A10  EC4F  F096         	call	_printf	;wreg free
  4915                           
  4916                           ;main.c: 382: printf("                 \n");
  4917  013A14  0E7D               	movlw	low STR_2
  4918  013A16  0100               	movlb	0	; () banked
  4919  013A18  6F75               	movwf	printf@f& (0+255),b
  4920  013A1A  0EFF               	movlw	high STR_2
  4921  013A1C  6F76               	movwf	(printf@f+1)& (0+255),b
  4922  013A1E  EC4F  F096         	call	_printf	;wreg free
  4923                           
  4924                           ;main.c: 383: printf("Sensor Moving!   \n");
  4925  013A22  0E90               	movlw	low STR_17
  4926  013A24  0100               	movlb	0	; () banked
  4927  013A26  6F75               	movwf	printf@f& (0+255),b
  4928  013A28  0EFF               	movlw	high STR_17
  4929  013A2A  6F76               	movwf	(printf@f+1)& (0+255),b
  4930  013A2C  EC4F  F096         	call	_printf	;wreg free
  4931                           
  4932                           ;main.c: 384: printf("                 \n");
  4933  013A30  0E7D               	movlw	low STR_2
  4934  013A32  0100               	movlb	0	; () banked
  4935  013A34  6F75               	movwf	printf@f& (0+255),b
  4936  013A36  0EFF               	movlw	high STR_2
  4937  013A38  6F76               	movwf	(printf@f+1)& (0+255),b
  4938  013A3A  EC4F  F096         	call	_printf	;wreg free
  4939                           
  4940                           ;main.c: 385: printf("                 \n");
  4941  013A3E  0E7D               	movlw	low STR_2
  4942  013A40  0100               	movlb	0	; () banked
  4943  013A42  6F75               	movwf	printf@f& (0+255),b
  4944  013A44  0EFF               	movlw	high STR_2
  4945  013A46  6F76               	movwf	(printf@f+1)& (0+255),b
  4946  013A48  EC4F  F096         	call	_printf	;wreg free
  4947                           
  4948                           ;main.c: 386: printf("                 \n");
  4949  013A4C  0E7D               	movlw	low STR_2
  4950  013A4E  0100               	movlb	0	; () banked
  4951  013A50  6F75               	movwf	printf@f& (0+255),b
  4952  013A52  0EFF               	movlw	high STR_2
  4953  013A54  6F76               	movwf	(printf@f+1)& (0+255),b
  4954  013A56  EC4F  F096         	call	_printf	;wreg free
  4955                           
  4956                           ;main.c: 387: printf("                 \n");
  4957  013A5A  0E7D               	movlw	low STR_2
  4958  013A5C  0100               	movlb	0	; () banked
  4959  013A5E  6F75               	movwf	printf@f& (0+255),b
  4960  013A60  0EFF               	movlw	high STR_2
  4961  013A62  6F76               	movwf	(printf@f+1)& (0+255),b
  4962  013A64  EC4F  F096         	call	_printf	;wreg free
  4963                           
  4964                           ;main.c: 388: printf("                 \n");
  4965  013A68  0E7D               	movlw	low STR_2
  4966  013A6A  0100               	movlb	0	; () banked
  4967  013A6C  6F75               	movwf	printf@f& (0+255),b
  4968  013A6E  0EFF               	movlw	high STR_2
  4969  013A70  6F76               	movwf	(printf@f+1)& (0+255),b
  4970  013A72  EC4F  F096         	call	_printf	;wreg free
  4971                           
  4972                           ;main.c: 389: printf("                 \n");
  4973  013A76  0E7D               	movlw	low STR_2
  4974  013A78  0100               	movlb	0	; () banked
  4975  013A7A  6F75               	movwf	printf@f& (0+255),b
  4976  013A7C  0EFF               	movlw	high STR_2
  4977  013A7E  6F76               	movwf	(printf@f+1)& (0+255),b
  4978  013A80  EC4F  F096         	call	_printf	;wreg free
  4979                           
  4980                           ;main.c: 390: Console_Render();
  4981  013A84  EC73  F092         	call	_Console_Render	;wreg free
  4982                           
  4983                           ;main.c: 391: while (Motor_Count <= 512) {
  4984  013A88  D019               	goto	l2223
  4985  013A8A                     
  4986                           ;main.c: 392: Motor_Count++;
  4987  013A8A  4A2D               	infsnz	_Motor_Count,f,c
  4988  013A8C  2A2E               	incf	_Motor_Count+1,f,c
  4989                           
  4990                           ;main.c: 393: ADCAverage();
  4991  013A8E  ECE5  F088         	call	_ADCAverage	;wreg free
  4992                           
  4993                           ;main.c: 394: if (Low_Sensor > average) {
  4994  013A92  504A               	movf	_Low_Sensor,w,c
  4995  013A94  0100               	movlb	0	; () banked
  4996  013A96  5DE9               	subwf	_average& (0+255),w,b
  4997  013A98  51EA               	movf	(_average+1)& (0+255),w,b
  4998  013A9A  0A80               	xorlw	128
  4999  013A9C  6FD9               	movwf	??_Sensor_Observe& (0+255),b
  5000  013A9E  504B               	movf	_Low_Sensor+1,w,c
  5001  013AA0  0A80               	xorlw	128
  5002  013AA2  59D9               	subwfb	??_Sensor_Observe& (0+255),w,b
  5003  013AA4  B0D8               	btfsc	status,0,c
  5004  013AA6  D008               	goto	l2225
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;main.c: 395: Low_Sensor = average;
  5008  013AA8  C0E9  F04A         	movff	_average,_Low_Sensor
  5009  013AAC  C0EA  F04B         	movff	_average+1,_Low_Sensor+1
  5010                           
  5011                           ;main.c: 396: Close_Pos = Motor_Count;
  5012  013AB0  C02D  F02B         	movff	_Motor_Count,_Close_Pos
  5013  013AB4  C02E  F02C         	movff	_Motor_Count+1,_Close_Pos+1
  5014  013AB8                     l2225:
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;main.c: 397: }
  5018                           ;main.c: 398: SteppingCW();
  5019                           
  5020                           ; BSR set to: 0
  5021  013AB8  ECC7  F0AA         	call	_SteppingCW	;wreg free
  5022  013ABC                     l2223:
  5023  013ABC  BE2E               	btfsc	_Motor_Count+1,7,c
  5024  013ABE  D7E5               	goto	l2224
  5025  013AC0  042D               	decf	_Motor_Count,w,c
  5026  013AC2  0E02               	movlw	2
  5027  013AC4  582E               	subwfb	_Motor_Count+1,w,c
  5028  013AC6  A0D8               	btfss	status,0,c
  5029  013AC8  D7E0               	goto	l2224
  5030                           
  5031                           ;main.c: 399: }
  5032                           ;main.c: 400: RD5 = 0;
  5033  013ACA  9A83               	bcf	3971,5,c	;volatile
  5034                           
  5035                           ;main.c: 401: RD7 = 0;
  5036  013ACC  9E83               	bcf	3971,7,c	;volatile
  5037                           
  5038                           ;main.c: 402: RA2 = 0;
  5039  013ACE  9480               	bcf	3968,2,c	;volatile
  5040                           
  5041                           ;main.c: 403: RA3 = 0;
  5042  013AD0  9680               	bcf	3968,3,c	;volatile
  5043                           
  5044                           ;main.c: 404: Sensor_Observe_Fin = 1;
  5045  013AD2  0E00               	movlw	0
  5046  013AD4  0101               	movlb	1	; () banked
  5047  013AD6  6F27               	movwf	(_Sensor_Observe_Fin+1)& (0+255),b
  5048  013AD8  0E01               	movlw	1
  5049  013ADA  6F26               	movwf	_Sensor_Observe_Fin& (0+255),b
  5050                           
  5051                           ; BSR set to: 1
  5052                           ;main.c: 406: CCW_Count = 512 - Close_Pos;
  5053  013ADC  C02B  F0D9         	movff	_Close_Pos,??_Sensor_Observe
  5054  013AE0  C02C  F0DA         	movff	_Close_Pos+1,??_Sensor_Observe+1
  5055  013AE4  0100               	movlb	0	; () banked
  5056  013AE6  1FD9               	comf	??_Sensor_Observe& (0+255),f,b
  5057  013AE8  1FDA               	comf	(??_Sensor_Observe+1)& (0+255),f,b
  5058  013AEA  4BD9               	infsnz	??_Sensor_Observe& (0+255),f,b
  5059  013AEC  2BDA               	incf	(??_Sensor_Observe+1)& (0+255),f,b
  5060  013AEE  0E00               	movlw	0
  5061  013AF0  25D9               	addwf	??_Sensor_Observe& (0+255),w,b
  5062  013AF2  0101               	movlb	1	; () banked
  5063  013AF4  6F2A               	movwf	_CCW_Count& (0+255),b
  5064  013AF6  0E02               	movlw	2
  5065  013AF8  0100               	movlb	0	; () banked
  5066  013AFA  21DA               	addwfc	(??_Sensor_Observe+1)& (0+255),w,b
  5067  013AFC  0101               	movlb	1	; () banked
  5068  013AFE  6F2B               	movwf	(_CCW_Count+1)& (0+255),b
  5069  013B00  0012               	return	
  5070  013B02                     __end_of_Sensor_Observe:
  5071                           	opt stack 0
  5072                           tosu	equ	0xFFF
  5073                           tosh	equ	0xFFE
  5074                           tosl	equ	0xFFD
  5075                           pclath	equ	0xFFA
  5076                           tblptru	equ	0xFF8
  5077                           tblptrh	equ	0xFF7
  5078                           tblptrl	equ	0xFF6
  5079                           tablat	equ	0xFF5
  5080                           postinc0	equ	0xFEE
  5081                           wreg	equ	0xFE8
  5082                           postdec1	equ	0xFE5
  5083                           fsr1h	equ	0xFE2
  5084                           fsr1l	equ	0xFE1
  5085                           postinc2	equ	0xFDE
  5086                           status	equ	0xFD8
  5087                           
  5088 ;; *************** function _Robot_Init *****************
  5089 ;; Defined at:
  5090 ;;		line 239 in file "main.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;		None
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;		None
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  1    wreg      void 
  5097 ;; Registers used:
  5098 ;;		wreg, status,2, status,0, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;Total ram usage:        0 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    9
  5111 ;; This function calls:
  5112 ;;		_Robot_Stop
  5113 ;;		_UpdateDistance
  5114 ;;		_eusartSend
  5115 ;; This function is called by:
  5116 ;;		_main
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           	psect	text4
  5121  015F60                     __ptext4:
  5122                           	opt stack 0
  5123  015F60                     _Robot_Init:
  5124                           	opt stack 21
  5125                           
  5126                           ;main.c: 240: eusartSend(128);
  5127                           
  5128                           ; BSR set to: 1
  5129                           ;incstack = 0
  5130  015F60  0E80               	movlw	128
  5131  015F62  EC28  F0B0         	call	_eusartSend
  5132                           
  5133                           ;main.c: 241: eusartSend(132);
  5134  015F66  0E84               	movlw	132
  5135  015F68  EC28  F0B0         	call	_eusartSend
  5136                           
  5137                           ;main.c: 242: Robot_Stop();
  5138  015F6C  ECB2  F0AE         	call	_Robot_Stop	;wreg free
  5139                           
  5140                           ;main.c: 243: UpdateDistance();
  5141  015F70  EC48  F0AD         	call	_UpdateDistance	;wreg free
  5142  015F74  0012               	return		;funcret
  5143  015F76                     __end_of_Robot_Init:
  5144                           	opt stack 0
  5145                           tosu	equ	0xFFF
  5146                           tosh	equ	0xFFE
  5147                           tosl	equ	0xFFD
  5148                           pclath	equ	0xFFA
  5149                           tblptru	equ	0xFF8
  5150                           tblptrh	equ	0xFF7
  5151                           tblptrl	equ	0xFF6
  5152                           tablat	equ	0xFF5
  5153                           postinc0	equ	0xFEE
  5154                           wreg	equ	0xFE8
  5155                           postdec1	equ	0xFE5
  5156                           fsr1h	equ	0xFE2
  5157                           fsr1l	equ	0xFE1
  5158                           postinc2	equ	0xFDE
  5159                           status	equ	0xFD8
  5160                           
  5161 ;; *************** function _UpdateDistance *****************
  5162 ;; Defined at:
  5163 ;;		line 176 in file "main.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;		None
  5166 ;; Auto vars:     Size  Location     Type
  5167 ;;		None
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  2    1[BANK0 ] int 
  5170 ;; Registers used:
  5171 ;;		wreg, status,2, status,0, cstack
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5177 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5180 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;Total ram usage:        2 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; Hardware stack levels required when called:    8
  5184 ;; This function calls:
  5185 ;;		_eusartRec
  5186 ;;		_eusartSend
  5187 ;; This function is called by:
  5188 ;;		_Robot_Init
  5189 ;;		_main
  5190 ;; This function uses a non-reentrant model
  5191 ;;
  5192                           
  5193                           	psect	text5
  5194  015A90                     __ptext5:
  5195                           	opt stack 0
  5196  015A90                     _UpdateDistance:
  5197                           	opt stack 22
  5198                           
  5199                           ;main.c: 177: eusartSend(142);
  5200                           
  5201                           ;incstack = 0
  5202  015A90  0E8E               	movlw	142
  5203  015A92  EC28  F0B0         	call	_eusartSend
  5204                           
  5205                           ;main.c: 178: eusartSend(19);
  5206  015A96  0E13               	movlw	19
  5207  015A98  EC28  F0B0         	call	_eusartSend
  5208                           
  5209                           ;main.c: 179: Current_Dist1 = eusartRec();
  5210  015A9C  EC56  F0B0         	call	_eusartRec	;wreg free
  5211  015AA0  0101               	movlb	1	; () banked
  5212  015AA2  6F43               	movwf	_Current_Dist1& (0+255),b
  5213                           
  5214                           ; BSR set to: 1
  5215                           ;main.c: 180: Current_Dist2 = eusartRec();
  5216  015AA4  EC56  F0B0         	call	_eusartRec	;wreg free
  5217  015AA8  6E37               	movwf	_Current_Dist2,c
  5218                           
  5219                           ;main.c: 182: Current_Dist = Current_Dist2;
  5220  015AAA  C037  F136         	movff	_Current_Dist2,_Current_Dist
  5221  015AAE  0101               	movlb	1	; () banked
  5222  015AB0  6B37               	clrf	(_Current_Dist+1)& (0+255),b
  5223                           
  5224                           ; BSR set to: 1
  5225                           ;main.c: 184: if (Current_Dist < 0){
  5226  015AB2  AF37               	btfss	(_Current_Dist+1)& (0+255),7,b
  5227  015AB4  D002               	goto	l2159
  5228                           
  5229                           ; BSR set to: 1
  5230                           ;main.c: 185: Current_Dist = ~Current_Dist;
  5231  015AB6  1F36               	comf	_Current_Dist& (0+255),f,b
  5232  015AB8  1F37               	comf	(_Current_Dist+1)& (0+255),f,b
  5233  015ABA                     l2159:
  5234                           
  5235                           ; BSR set to: 1
  5236                           ;main.c: 186: }
  5237                           ;main.c: 188: return Current_Dist;
  5238                           
  5239                           ; BSR set to: 1
  5240  015ABA  C136  F061         	movff	_Current_Dist,?_UpdateDistance
  5241  015ABE  C137  F062         	movff	_Current_Dist+1,?_UpdateDistance+1
  5242  015AC2  0012               	return	
  5243  015AC4                     __end_of_UpdateDistance:
  5244                           	opt stack 0
  5245                           tosu	equ	0xFFF
  5246                           tosh	equ	0xFFE
  5247                           tosl	equ	0xFFD
  5248                           pclath	equ	0xFFA
  5249                           tblptru	equ	0xFF8
  5250                           tblptrh	equ	0xFF7
  5251                           tblptrl	equ	0xFF6
  5252                           tablat	equ	0xFF5
  5253                           postinc0	equ	0xFEE
  5254                           wreg	equ	0xFE8
  5255                           postdec1	equ	0xFE5
  5256                           fsr1h	equ	0xFE2
  5257                           fsr1l	equ	0xFE1
  5258                           postinc2	equ	0xFDE
  5259                           status	equ	0xFD8
  5260                           
  5261 ;; *************** function _Robot_Stop *****************
  5262 ;; Defined at:
  5263 ;;		line 157 in file "main.c"
  5264 ;; Parameters:    Size  Location     Type
  5265 ;;		None
  5266 ;; Auto vars:     Size  Location     Type
  5267 ;;		None
  5268 ;; Return value:  Size  Location     Type
  5269 ;;                  1    wreg      void 
  5270 ;; Registers used:
  5271 ;;		wreg, cstack
  5272 ;; Tracked objects:
  5273 ;;		On entry : 0/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5281 ;;Total ram usage:        0 bytes
  5282 ;; Hardware stack levels used:    1
  5283 ;; Hardware stack levels required when called:    8
  5284 ;; This function calls:
  5285 ;;		_eusartSend
  5286 ;; This function is called by:
  5287 ;;		_Turn
  5288 ;;		_Robot_Init
  5289 ;;		_main
  5290 ;; This function uses a non-reentrant model
  5291 ;;
  5292                           
  5293                           	psect	text6
  5294  015D64                     __ptext6:
  5295                           	opt stack 0
  5296  015D64                     _Robot_Stop:
  5297                           	opt stack 21
  5298                           
  5299                           ;main.c: 158: eusartSend(137);
  5300                           
  5301                           ; BSR set to: 1
  5302                           ;incstack = 0
  5303  015D64  0E89               	movlw	137
  5304  015D66  EC28  F0B0         	call	_eusartSend
  5305                           
  5306                           ;main.c: 159: eusartSend(0);
  5307  015D6A  0E00               	movlw	0
  5308  015D6C  EC28  F0B0         	call	_eusartSend
  5309                           
  5310                           ;main.c: 160: eusartSend(0);
  5311  015D70  0E00               	movlw	0
  5312  015D72  EC28  F0B0         	call	_eusartSend
  5313                           
  5314                           ;main.c: 161: eusartSend(0);
  5315  015D76  0E00               	movlw	0
  5316  015D78  EC28  F0B0         	call	_eusartSend
  5317                           
  5318                           ;main.c: 162: eusartSend(0);
  5319  015D7C  0E00               	movlw	0
  5320  015D7E  EC28  F0B0         	call	_eusartSend
  5321  015D82  0012               	return		;funcret
  5322  015D84                     __end_of_Robot_Stop:
  5323                           	opt stack 0
  5324                           tosu	equ	0xFFF
  5325                           tosh	equ	0xFFE
  5326                           tosl	equ	0xFFD
  5327                           pclath	equ	0xFFA
  5328                           tblptru	equ	0xFF8
  5329                           tblptrh	equ	0xFF7
  5330                           tblptrl	equ	0xFF6
  5331                           tablat	equ	0xFF5
  5332                           postinc0	equ	0xFEE
  5333                           wreg	equ	0xFE8
  5334                           postdec1	equ	0xFE5
  5335                           fsr1h	equ	0xFE2
  5336                           fsr1l	equ	0xFE1
  5337                           postinc2	equ	0xFDE
  5338                           status	equ	0xFD8
  5339                           
  5340 ;; *************** function _Reset_variables *****************
  5341 ;; Defined at:
  5342 ;;		line 430 in file "main.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;		None
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;		None
  5347 ;; Return value:  Size  Location     Type
  5348 ;;                  1    wreg      void 
  5349 ;; Registers used:
  5350 ;;		wreg, status,2
  5351 ;; Tracked objects:
  5352 ;;		On entry : 0/0
  5353 ;;		On exit  : 0/0
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5360 ;;Total ram usage:        0 bytes
  5361 ;; Hardware stack levels used:    1
  5362 ;; Hardware stack levels required when called:    7
  5363 ;; This function calls:
  5364 ;;		Nothing
  5365 ;; This function is called by:
  5366 ;;		_main
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370                           	psect	text7
  5371  0154AA                     __ptext7:
  5372                           	opt stack 0
  5373  0154AA                     _Reset_variables:
  5374                           	opt stack 23
  5375                           
  5376                           ;main.c: 431: Square_Dist = 0;
  5377                           
  5378                           ;incstack = 0
  5379  0154AA  0E00               	movlw	0
  5380  0154AC  0101               	movlb	1	; () banked
  5381  0154AE  6F35               	movwf	(_Square_Dist+1)& (0+255),b
  5382  0154B0  0E00               	movlw	0
  5383  0154B2  6F34               	movwf	_Square_Dist& (0+255),b
  5384                           
  5385                           ;main.c: 432: Sensor_Observe_Fin = 0;
  5386  0154B4  0E00               	movlw	0
  5387  0154B6  6F27               	movwf	(_Sensor_Observe_Fin+1)& (0+255),b
  5388  0154B8  0E00               	movlw	0
  5389  0154BA  6F26               	movwf	_Sensor_Observe_Fin& (0+255),b
  5390                           
  5391                           ;main.c: 433: Motor_Count = 0;
  5392  0154BC  0E00               	movlw	0
  5393  0154BE  6E2E               	movwf	_Motor_Count+1,c
  5394  0154C0  0E00               	movlw	0
  5395  0154C2  6E2D               	movwf	_Motor_Count,c
  5396                           
  5397                           ;main.c: 434: Low_Sensor = 10000;
  5398  0154C4  0E27               	movlw	39
  5399  0154C6  6E4B               	movwf	_Low_Sensor+1,c
  5400  0154C8  0E10               	movlw	16
  5401  0154CA  6E4A               	movwf	_Low_Sensor,c
  5402                           
  5403                           ;main.c: 435: ADC_Reading = 0;
  5404  0154CC  0E00               	movlw	0
  5405  0154CE  6F2F               	movwf	(_ADC_Reading+1)& (0+255),b
  5406  0154D0  0E00               	movlw	0
  5407  0154D2  6F2E               	movwf	_ADC_Reading& (0+255),b
  5408                           
  5409                           ;main.c: 436: Close_Pos = 0;
  5410  0154D4  0E00               	movlw	0
  5411  0154D6  6E2C               	movwf	_Close_Pos+1,c
  5412  0154D8  0E00               	movlw	0
  5413  0154DA  6E2B               	movwf	_Close_Pos,c
  5414                           
  5415                           ;main.c: 437: count = 0;
  5416  0154DC  0E00               	movlw	0
  5417  0154DE  6F2D               	movwf	(_count+1)& (0+255),b
  5418  0154E0  0E00               	movlw	0
  5419  0154E2  6F2C               	movwf	_count& (0+255),b
  5420                           
  5421                           ;main.c: 438: T_VAR = 0;
  5422  0154E4  0E00               	movlw	0
  5423  0154E6  6E30               	movwf	_T_VAR+1,c
  5424  0154E8  0E00               	movlw	0
  5425  0154EA  6E2F               	movwf	_T_VAR,c
  5426                           
  5427                           ;main.c: 439: mod = 0;
  5428  0154EC  0E00               	movlw	0
  5429  0154EE  6F33               	movwf	(_mod+1)& (0+255),b
  5430  0154F0  0E00               	movlw	0
  5431  0154F2  6F32               	movwf	_mod& (0+255),b
  5432  0154F4  0012               	return	
  5433  0154F6                     __end_of_Reset_variables:
  5434                           	opt stack 0
  5435                           tosu	equ	0xFFF
  5436                           tosh	equ	0xFFE
  5437                           tosl	equ	0xFFD
  5438                           pclath	equ	0xFFA
  5439                           tblptru	equ	0xFF8
  5440                           tblptrh	equ	0xFF7
  5441                           tblptrl	equ	0xFF6
  5442                           tablat	equ	0xFF5
  5443                           postinc0	equ	0xFEE
  5444                           wreg	equ	0xFE8
  5445                           postdec1	equ	0xFE5
  5446                           fsr1h	equ	0xFE2
  5447                           fsr1l	equ	0xFE1
  5448                           postinc2	equ	0xFDE
  5449                           status	equ	0xFD8
  5450                           
  5451 ;; *************** function _MXK_Init *****************
  5452 ;; Defined at:
  5453 ;;		line 33 in file "Library/MXK.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;		None
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;		None
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  1    wreg      void 
  5460 ;; Registers used:
  5461 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5471 ;;Total ram usage:        0 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:   16
  5474 ;; This function calls:
  5475 ;;		_LED_Init
  5476 ;;		_Port_Init
  5477 ;;		_Port_SetPin
  5478 ;;		_Port_SetPinType
  5479 ;;		_Port_SetQuadType
  5480 ;;		_Port_SetType
  5481 ;;		_delay_ms
  5482 ;; This function is called by:
  5483 ;;		_main
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           	psect	text8
  5488  013338                     __ptext8:
  5489                           	opt stack 0
  5490  013338                     _MXK_Init:
  5491                           	opt stack 14
  5492                           
  5493                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  5494                           
  5495                           ; BSR set to: 1
  5496                           ;incstack = 0
  5497  013338  0E01               	movlw	1
  5498  01333A  6E4C               	movwf	_Bus_State,c
  5499                           
  5500                           ;MXK.c: 36: lQueue = (Function)0;
  5501  01333C  0E00               	movlw	0
  5502  01333E  0100               	movlb	0	; () banked
  5503  013340  6FE6               	movwf	_lQueue& (0+255),b	;volatile
  5504  013342  0E00               	movlw	0
  5505  013344  6FE7               	movwf	(_lQueue+1)& (0+255),b	;volatile
  5506  013346  0E00               	movlw	0
  5507  013348  6FE8               	movwf	(_lQueue+2)& (0+255),b	;volatile
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  5511  01334A  0EF1               	movlw	low _PortA
  5512  01334C  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5513  01334E  0E02               	movlw	high _PortA
  5514  013350  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5515  013352  0E00               	movlw	0
  5516  013354  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5517  013356  ECDB  F094         	call	_Port_Init	;wreg free
  5518                           
  5519                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  5520  01335A  0EA1               	movlw	low _PortB
  5521  01335C  0100               	movlb	0	; () banked
  5522  01335E  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5523  013360  0E01               	movlw	high _PortB
  5524  013362  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5525  013364  0E01               	movlw	1
  5526  013366  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5527  013368  ECDB  F094         	call	_Port_Init	;wreg free
  5528                           
  5529                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  5530  01336C  0EAB               	movlw	low _PortC
  5531  01336E  0100               	movlb	0	; () banked
  5532  013370  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5533  013372  0E01               	movlw	high _PortC
  5534  013374  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5535  013376  0E02               	movlw	2
  5536  013378  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5537  01337A  ECDB  F094         	call	_Port_Init	;wreg free
  5538                           
  5539                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  5540  01337E  0E97               	movlw	low _PortD
  5541  013380  0100               	movlb	0	; () banked
  5542  013382  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5543  013384  0E01               	movlw	high _PortD
  5544  013386  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5545  013388  0E03               	movlw	3
  5546  01338A  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5547  01338C  ECDB  F094         	call	_Port_Init	;wreg free
  5548                           
  5549                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  5550  013390  0E8D               	movlw	low _PortE
  5551  013392  0100               	movlb	0	; () banked
  5552  013394  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5553  013396  0E01               	movlw	high _PortE
  5554  013398  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5555  01339A  0E04               	movlw	4
  5556  01339C  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5557  01339E  ECDB  F094         	call	_Port_Init	;wreg free
  5558                           
  5559                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  5560  0133A2  0EB5               	movlw	low _PortF
  5561  0133A4  0100               	movlb	0	; () banked
  5562  0133A6  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5563  0133A8  0E01               	movlw	high _PortF
  5564  0133AA  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5565  0133AC  0E05               	movlw	5
  5566  0133AE  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5567  0133B0  ECDB  F094         	call	_Port_Init	;wreg free
  5568                           
  5569                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  5570  0133B4  0EE7               	movlw	low _PortG
  5571  0133B6  0100               	movlb	0	; () banked
  5572  0133B8  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5573  0133BA  0E02               	movlw	high _PortG
  5574  0133BC  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5575  0133BE  0E06               	movlw	6
  5576  0133C0  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5577  0133C2  ECDB  F094         	call	_Port_Init	;wreg free
  5578                           
  5579                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  5580  0133C6  0EB5               	movlw	low _PortF
  5581  0133C8  0100               	movlb	0	; () banked
  5582  0133CA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  5583  0133CC  0E01               	movlw	high _PortF
  5584  0133CE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5585  0133D0  0E05               	movlw	5
  5586  0133D2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  5587  0133D4  0E00               	movlw	0
  5588  0133D6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5589  0133D8  EC4E  F093         	call	_Port_SetPinType	;wreg free
  5590                           
  5591                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  5592  0133DC  0EA1               	movlw	low _PortB
  5593  0133DE  0100               	movlb	0	; () banked
  5594  0133E0  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
  5595  0133E2  0E01               	movlw	high _PortB
  5596  0133E4  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  5597  0133E6  0E00               	movlw	0
  5598  0133E8  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
  5599  0133EA  0E00               	movlw	0
  5600  0133EC  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
  5601  0133EE  EC98  F08F         	call	_Port_SetQuadType	;wreg free
  5602                           
  5603                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  5604  0133F2  0EB5               	movlw	low _PortF
  5605  0133F4  0100               	movlb	0	; () banked
  5606  0133F6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  5607  0133F8  0E01               	movlw	high _PortF
  5608  0133FA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5609  0133FC  0E06               	movlw	6
  5610  0133FE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  5611  013400  0E03               	movlw	3
  5612  013402  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5613  013404  EC4E  F093         	call	_Port_SetPinType	;wreg free
  5614                           
  5615                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  5616  013408  0EE7               	movlw	low _PortG
  5617  01340A  0100               	movlb	0	; () banked
  5618  01340C  6F9A               	movwf	Port_SetType@pInput& (0+255),b
  5619  01340E  0E02               	movlw	high _PortG
  5620  013410  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
  5621  013412  0E03               	movlw	3
  5622  013414  6F9C               	movwf	Port_SetType@pType& (0+255),b
  5623  013416  EC8C  F091         	call	_Port_SetType	;wreg free
  5624                           
  5625                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  5626  01341A  0EE7               	movlw	low _PortG
  5627  01341C  0100               	movlb	0	; () banked
  5628  01341E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  5629  013420  0E02               	movlw	high _PortG
  5630  013422  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5631  013424  0E04               	movlw	4
  5632  013426  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  5633  013428  0E00               	movlw	0
  5634  01342A  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  5635  01342C  ECC1  F09F         	call	_Port_SetPin	;wreg free
  5636                           
  5637                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  5638  013430  0EB5               	movlw	low _PortF
  5639  013432  0100               	movlb	0	; () banked
  5640  013434  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  5641  013436  0E01               	movlw	high _PortF
  5642  013438  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5643  01343A  0E06               	movlw	6
  5644  01343C  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  5645  01343E  0E01               	movlw	1
  5646  013440  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  5647  013442  ECC1  F09F         	call	_Port_SetPin	;wreg free
  5648                           
  5649                           ;MXK.c: 55: LED_Init(eLED1);
  5650  013446  0E00               	movlw	0
  5651  013448  ECE2  F0A8         	call	_LED_Init
  5652                           
  5653                           ;MXK.c: 56: LED_Init(eLED2);
  5654  01344C  0E01               	movlw	1
  5655  01344E  ECE2  F0A8         	call	_LED_Init
  5656                           
  5657                           ;MXK.c: 58: PIR1 = 0;
  5658  013452  0E00               	movlw	0
  5659  013454  6E9E               	movwf	3998,c	;volatile
  5660                           
  5661                           ;MXK.c: 59: PIR2 = 0;
  5662  013456  0E00               	movlw	0
  5663  013458  6EA1               	movwf	4001,c	;volatile
  5664                           
  5665                           ;MXK.c: 60: PIR3 = 0;
  5666  01345A  0E00               	movlw	0
  5667  01345C  6EA4               	movwf	4004,c	;volatile
  5668                           
  5669                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  5670  01345E  8E9B               	bsf	3995,7,c	;volatile
  5671                           
  5672                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  5673  013460  8C9B               	bsf	3995,6,c	;volatile
  5674                           
  5675                           ;MXK.c: 66: delay_ms(100);
  5676  013462  0E00               	movlw	0
  5677  013464  0100               	movlb	0	; () banked
  5678  013466  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  5679  013468  0E64               	movlw	100
  5680  01346A  6F60               	movwf	delay_ms@ms& (0+255),b
  5681  01346C  ECB4  F0A8         	call	_delay_ms	;wreg free
  5682                           
  5683                           ;MXK.c: 68: RCONbits.IPEN = 1;
  5684  013470  8ED0               	bsf	4048,7,c	;volatile
  5685  013472  0012               	return		;funcret
  5686  013474                     __end_of_MXK_Init:
  5687                           	opt stack 0
  5688                           tosu	equ	0xFFF
  5689                           tosh	equ	0xFFE
  5690                           tosl	equ	0xFFD
  5691                           pclath	equ	0xFFA
  5692                           tblptru	equ	0xFF8
  5693                           tblptrh	equ	0xFF7
  5694                           tblptrl	equ	0xFF6
  5695                           tablat	equ	0xFF5
  5696                           postinc0	equ	0xFEE
  5697                           wreg	equ	0xFE8
  5698                           postdec1	equ	0xFE5
  5699                           fsr1h	equ	0xFE2
  5700                           fsr1l	equ	0xFE1
  5701                           postinc2	equ	0xFDE
  5702                           status	equ	0xFD8
  5703                           
  5704 ;; *************** function _Port_Init *****************
  5705 ;; Defined at:
  5706 ;;		line 150 in file "Library/Port.c"
  5707 ;; Parameters:    Size  Location     Type
  5708 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  5709 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5710 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5711 ;;  pPort           1   66[BANK0 ] enum E6786
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  i               1   69[BANK0 ] unsigned char 
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  1    wreg      void 
  5716 ;; Registers used:
  5717 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5723 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5724 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5725 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;Total ram usage:        6 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:   15
  5730 ;; This function calls:
  5731 ;;		_GetPortPORT
  5732 ;;		_GetPortProperties
  5733 ;;		_GetPortTRIS
  5734 ;;		_Port_Set
  5735 ;;		_Port_SetPinType
  5736 ;;		_Port_SetType
  5737 ;;		_Word_GetPair
  5738 ;; This function is called by:
  5739 ;;		_MXK_Init
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           	psect	text9
  5744  0129B6                     __ptext9:
  5745                           	opt stack 0
  5746  0129B6                     _Port_Init:
  5747                           	opt stack 14
  5748                           
  5749                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  5750                           
  5751                           ;incstack = 0
  5752  0129B6  0100               	movlb	0	; () banked
  5753  0129B8  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5754  0129BA  ECBF  F0A3         	call	_GetPortProperties
  5755  0129BE  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  5756  0129C2  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5757  0129C6  0100               	movlb	0	; () banked
  5758  0129C8  C060  FFDE         	movff	?_GetPortProperties,postinc2
  5759  0129CC  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
  5760                           
  5761                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  5762  0129D0  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5763  0129D2  EC03  F0A4         	call	_GetPortPORT
  5764  0129D6  0100               	movlb	0	; () banked
  5765  0129D8  EE20 F006          	lfsr	2,6
  5766  0129DC  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5767  0129DE  26D9               	addwf	fsr2l,f,c
  5768  0129E0  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5769  0129E2  22DA               	addwfc	fsr2h,f,c
  5770  0129E4  C060  FFDE         	movff	?_GetPortPORT,postinc2
  5771  0129E8  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  5772                           
  5773                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  5774  0129EC  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5775  0129EE  EC03  F0A4         	call	_GetPortPORT
  5776  0129F2  0100               	movlb	0	; () banked
  5777  0129F4  EE20 F004          	lfsr	2,4
  5778  0129F8  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5779  0129FA  26D9               	addwf	fsr2l,f,c
  5780  0129FC  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5781  0129FE  22DA               	addwfc	fsr2h,f,c
  5782  012A00  C060  FFDE         	movff	?_GetPortPORT,postinc2
  5783  012A04  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  5784                           
  5785                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  5786  012A08  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5787  012A0A  EC7B  F0A3         	call	_GetPortTRIS
  5788  012A0E  0100               	movlb	0	; () banked
  5789  012A10  EE20 F002          	lfsr	2,2
  5790  012A14  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5791  012A16  26D9               	addwf	fsr2l,f,c
  5792  012A18  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5793  012A1A  22DA               	addwfc	fsr2h,f,c
  5794  012A1C  C060  FFDE         	movff	?_GetPortTRIS,postinc2
  5795  012A20  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  5799  012A24  EE20 F004          	lfsr	2,4
  5800  012A28  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5801  012A2A  26D9               	addwf	fsr2l,f,c
  5802  012A2C  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5803  012A2E  22DA               	addwfc	fsr2h,f,c
  5804  012A30  CFDE F0A3          	movff	postinc2,??_Port_Init
  5805  012A34  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  5806  012A38  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  5807  012A3C  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  5808  012A40  0E00               	movlw	0
  5809  012A42  6EDF               	movwf	indf2,c
  5810                           
  5811                           ; BSR set to: 0
  5812                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  5813  012A44  EE20 F002          	lfsr	2,2
  5814  012A48  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5815  012A4A  26D9               	addwf	fsr2l,f,c
  5816  012A4C  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5817  012A4E  22DA               	addwfc	fsr2h,f,c
  5818  012A50  CFDE F0A3          	movff	postinc2,??_Port_Init
  5819  012A54  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  5820  012A58  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  5821  012A5C  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  5822  012A60  0EFF               	movlw	255
  5823  012A62  6EDF               	movwf	indf2,c
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  5827  012A64  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
  5828  012A68  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  5829  012A6C  0E00               	movlw	0
  5830  012A6E  6F9C               	movwf	Port_SetType@pType& (0+255),b
  5831  012A70  EC8C  F091         	call	_Port_SetType	;wreg free
  5832                           
  5833                           ;Port.c: 166: UINT8 i;
  5834                           ;Port.c: 167: for (i=0; i<8; i++)
  5835  012A74  0E00               	movlw	0
  5836  012A76  0100               	movlb	0	; () banked
  5837  012A78  6FA5               	movwf	Port_Init@i& (0+255),b
  5838  012A7A                     l14843:
  5839                           
  5840                           ; BSR set to: 0
  5841  012A7A  0E07               	movlw	7
  5842  012A7C  65A5               	cpfsgt	Port_Init@i& (0+255),b
  5843  012A7E  D031               	goto	l403
  5844  012A80  D04B               	goto	u12080
  5845  012A82                     
  5846                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  5847                           
  5848                           ; BSR set to: 0
  5849  012A82  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5850  012A86  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5851  012A8A  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5852  012A8E  0E03               	movlw	3
  5853  012A90  0100               	movlb	0	; () banked
  5854  012A92  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5855  012A94  EC4E  F093         	call	_Port_SetPinType	;wreg free
  5856                           
  5857                           ;Port.c: 173: break;
  5858  012A98  D03C               	goto	l405
  5859  012A9A                     
  5860                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  5861  012A9A  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5862  012A9E  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5863  012AA2  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5864  012AA6  0E02               	movlw	2
  5865  012AA8  0100               	movlb	0	; () banked
  5866  012AAA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5867  012AAC  EC4E  F093         	call	_Port_SetPinType	;wreg free
  5868                           
  5869                           ;Port.c: 176: break;
  5870  012AB0  D030               	goto	l405
  5871  012AB2                     
  5872                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  5873  012AB2  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5874  012AB6  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5875  012ABA  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5876  012ABE  0E01               	movlw	1
  5877  012AC0  0100               	movlb	0	; () banked
  5878  012AC2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5879  012AC4  EC4E  F093         	call	_Port_SetPinType	;wreg free
  5880                           
  5881                           ;Port.c: 179: break;
  5882  012AC8  D024               	goto	l405
  5883  012ACA                     
  5884                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  5885  012ACA  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5886  012ACE  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5887  012AD2  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5888  012AD6  0E00               	movlw	0
  5889  012AD8  0100               	movlb	0	; () banked
  5890  012ADA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5891  012ADC  EC4E  F093         	call	_Port_SetPinType	;wreg free
  5892                           
  5893                           ;Port.c: 183: }
  5894                           
  5895                           ;Port.c: 182: break;
  5896  012AE0  D018               	goto	l405
  5897  012AE2                     l403:
  5898  012AE2  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  5899  012AE6  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5900  012AEA  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
  5901  012AEE  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
  5902  012AF2  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
  5903  012AF6  EC96  F0AD         	call	_Word_GetPair	;wreg free
  5904                           
  5905                           ; Switch size 1, requested type "space"
  5906                           ; Number of cases is 4, Range of values is 0 to 3
  5907                           ; switch strategies available:
  5908                           ; Name         Instructions Cycles
  5909                           ; simple_byte           13     7 (average)
  5910                           ;	Chosen strategy is simple_byte
  5911  012AFA  0A00               	xorlw	0	; case 0
  5912  012AFC  B4D8               	btfsc	status,2,c
  5913  012AFE  D7C1               	goto	l404
  5914  012B00  0A01               	xorlw	1	; case 1
  5915  012B02  B4D8               	btfsc	status,2,c
  5916  012B04  D7D6               	goto	l407
  5917  012B06  0A03               	xorlw	3	; case 2
  5918  012B08  B4D8               	btfsc	status,2,c
  5919  012B0A  D7C7               	goto	l406
  5920  012B0C  0A01               	xorlw	1	; case 3
  5921  012B0E  B4D8               	btfsc	status,2,c
  5922  012B10  D7DC               	goto	l408
  5923  012B12                     l405:
  5924  012B12  0100               	movlb	0	; () banked
  5925  012B14  2BA5               	incf	Port_Init@i& (0+255),f,b
  5926  012B16  D7B1               	goto	l14843
  5927  012B18                     u12080:
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;Port.c: 184: }
  5931                           ;Port.c: 185: Port_Set(pInput, 0x00);
  5932                           
  5933                           ; BSR set to: 0
  5934  012B18  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
  5935  012B1C  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  5936  012B20  0E00               	movlw	0
  5937  012B22  6F71               	movwf	Port_Set@pValue& (0+255),b
  5938  012B24  ECC7  F08B         	call	_Port_Set	;wreg free
  5939  012B28  0012               	return		;funcret
  5940  012B2A                     __end_of_Port_Init:
  5941                           	opt stack 0
  5942                           tosu	equ	0xFFF
  5943                           tosh	equ	0xFFE
  5944                           tosl	equ	0xFFD
  5945                           pclath	equ	0xFFA
  5946                           tblptru	equ	0xFF8
  5947                           tblptrh	equ	0xFF7
  5948                           tblptrl	equ	0xFF6
  5949                           tablat	equ	0xFF5
  5950                           postinc0	equ	0xFEE
  5951                           wreg	equ	0xFE8
  5952                           postdec1	equ	0xFE5
  5953                           fsr1h	equ	0xFE2
  5954                           fsr1l	equ	0xFE1
  5955                           indf2	equ	0xFDF
  5956                           postinc2	equ	0xFDE
  5957                           postdec2	equ	0xFDD
  5958                           fsr2h	equ	0xFDA
  5959                           fsr2l	equ	0xFD9
  5960                           status	equ	0xFD8
  5961                           
  5962 ;; *************** function _Port_SetType *****************
  5963 ;; Defined at:
  5964 ;;		line 513 in file "Library/Port.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  5967 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5968 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5969 ;;  pType           1   60[BANK0 ] enum E6795
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;  Output          1   63[BANK0 ] enum E6475
  5972 ;; Return value:  Size  Location     Type
  5973 ;;                  1    wreg      enum E6475
  5974 ;; Registers used:
  5975 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5976 ;; Tracked objects:
  5977 ;;		On entry : 0/0
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5981 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;Total ram usage:        6 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:   14
  5988 ;; This function calls:
  5989 ;;		_Port_CheckPortType
  5990 ;;		_Word_SetPair
  5991 ;; This function is called by:
  5992 ;;		_Port_Init
  5993 ;;		_MXK_Init
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text10
  5998  012318                     __ptext10:
  5999                           	opt stack 0
  6000  012318                     _Port_SetType:
  6001                           	opt stack 15
  6002                           
  6003                           ;Port.c: 515: ePinError Output = ePinErrorState;
  6004                           
  6005                           ;incstack = 0
  6006  012318  0E05               	movlw	5
  6007  01231A  0100               	movlb	0	; () banked
  6008  01231C  6F9F               	movwf	Port_SetType@Output& (0+255),b
  6009                           
  6010                           ;Port.c: 517: switch (pType)
  6011  01231E  D06E               	goto	l509
  6012  012320                     
  6013                           ; BSR set to: 0
  6014                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  6015                           
  6016                           ; BSR set to: 0
  6017  012320  EE20 F002          	lfsr	2,2
  6018  012324  519A               	movf	Port_SetType@pInput& (0+255),w,b
  6019  012326  26D9               	addwf	fsr2l,f,c
  6020  012328  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6021  01232A  22DA               	addwfc	fsr2h,f,c
  6022  01232C  CFDE F09D          	movff	postinc2,??_Port_SetType
  6023  012330  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  6024  012334  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  6025  012338  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  6026  01233C  0EFF               	movlw	255
  6027  01233E  D05C               	goto	L3
  6028  012340                     
  6029                           ; BSR set to: 0
  6030                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  6031                           
  6032                           ; BSR set to: 0
  6033  012340  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6034  012344  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6035  012348  0E01               	movlw	1
  6036  01234A  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6037  01234C  ECE3  F0AB         	call	_Port_CheckPortType	;wreg free
  6038  012350  0100               	movlb	0	; () banked
  6039  012352  6F9F               	movwf	Port_SetType@Output& (0+255),b
  6040  012354  519F               	movf	Port_SetType@Output& (0+255),w,b
  6041  012356  A4D8               	btfss	status,2,c
  6042  012358  0012               	return	
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;Port.c: 527: {
  6046                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  6047  01235A  EE20 F002          	lfsr	2,2
  6048  01235E  519A               	movf	Port_SetType@pInput& (0+255),w,b
  6049  012360  26D9               	addwf	fsr2l,f,c
  6050  012362  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6051  012364  22DA               	addwfc	fsr2h,f,c
  6052  012366  CFDE F09D          	movff	postinc2,??_Port_SetType
  6053  01236A  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  6054  01236E  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  6055  012372  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  6056  012376  0E00               	movlw	0
  6057  012378  6EDF               	movwf	indf2,c
  6058                           
  6059                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  6060  01237A  EE20 F004          	lfsr	2,4
  6061  01237E  D02F               	goto	L17
  6062  012380                     
  6063                           ; BSR set to: 0
  6064                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  6065                           
  6066                           ; BSR set to: 0
  6067  012380  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6068  012384  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6069  012388  0E02               	movlw	2
  6070  01238A  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6071  01238C  ECE3  F0AB         	call	_Port_CheckPortType	;wreg free
  6072  012390  0100               	movlb	0	; () banked
  6073  012392  6F9F               	movwf	Port_SetType@Output& (0+255),b
  6074  012394  519F               	movf	Port_SetType@Output& (0+255),w,b
  6075  012396  A4D8               	btfss	status,2,c
  6076  012398  0012               	return	
  6077                           
  6078                           ; BSR set to: 0
  6079                           ;Port.c: 538: {
  6080                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  6081  01239A  EE20 F002          	lfsr	2,2
  6082  01239E  519A               	movf	Port_SetType@pInput& (0+255),w,b
  6083  0123A0  26D9               	addwf	fsr2l,f,c
  6084  0123A2  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6085  0123A4  22DA               	addwfc	fsr2h,f,c
  6086  0123A6  CFDE F09D          	movff	postinc2,??_Port_SetType
  6087  0123AA  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  6088  0123AE  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  6089  0123B2  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  6090  0123B6  0EFF               	movlw	255
  6091  0123B8  6EDF               	movwf	indf2,c
  6092                           
  6093                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  6094  0123BA  EE20 F004          	lfsr	2,4
  6095  0123BE  D7B2               	goto	L4
  6096  0123C0                     
  6097                           ; BSR set to: 0
  6098                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  6099                           
  6100                           ; BSR set to: 0
  6101  0123C0  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6102  0123C4  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6103  0123C8  0E00               	movlw	0
  6104  0123CA  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6105  0123CC  ECE3  F0AB         	call	_Port_CheckPortType	;wreg free
  6106  0123D0  0100               	movlb	0	; () banked
  6107  0123D2  6F9F               	movwf	Port_SetType@Output& (0+255),b
  6108  0123D4  519F               	movf	Port_SetType@Output& (0+255),w,b
  6109  0123D6  A4D8               	btfss	status,2,c
  6110  0123D8  0012               	return	
  6111                           
  6112                           ; BSR set to: 0
  6113                           ;Port.c: 549: {
  6114                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  6115  0123DA  EE20 F002          	lfsr	2,2
  6116  0123DE                     L17:
  6117  0123DE  519A               	movf	Port_SetType@pInput& (0+255),w,b
  6118  0123E0  26D9               	addwf	fsr2l,f,c
  6119  0123E2  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6120  0123E4  22DA               	addwfc	fsr2h,f,c
  6121  0123E6  CFDE F09D          	movff	postinc2,??_Port_SetType
  6122  0123EA  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  6123  0123EE  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  6124  0123F2  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  6125  0123F6  0E00               	movlw	0
  6126  0123F8                     L3:
  6127  0123F8  6EDF               	movwf	indf2,c
  6128                           
  6129                           ;Port.c: 552: }
  6130  0123FA  D00D               	goto	l511
  6131  0123FC                     l509:
  6132                           
  6133                           ; BSR set to: 0
  6134                           
  6135                           ; BSR set to: 0
  6136  0123FC  519C               	movf	Port_SetType@pType& (0+255),w,b
  6137                           
  6138                           ; Switch size 1, requested type "space"
  6139                           ; Number of cases is 4, Range of values is 0 to 3
  6140                           ; switch strategies available:
  6141                           ; Name         Instructions Cycles
  6142                           ; simple_byte           13     7 (average)
  6143                           ;	Chosen strategy is simple_byte
  6144  0123FE  0A00               	xorlw	0	; case 0
  6145  012400  B4D8               	btfsc	status,2,c
  6146  012402  D78E               	goto	l510
  6147  012404  0A01               	xorlw	1	; case 1
  6148  012406  B4D8               	btfsc	status,2,c
  6149  012408  D79B               	goto	l512
  6150  01240A  0A03               	xorlw	3	; case 2
  6151  01240C  B4D8               	btfsc	status,2,c
  6152  01240E  D7B8               	goto	l516
  6153  012410  0A01               	xorlw	1	; case 3
  6154  012412  B4D8               	btfsc	status,2,c
  6155  012414  D7D5               	goto	l519
  6156  012416                     l511:
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  6160                           
  6161                           ; BSR set to: 0
  6162  012416  0E08               	movlw	8
  6163  012418  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6164  01241A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6165  01241C  0E00               	movlw	0
  6166  01241E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6167  012420  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6168  012422  0E00               	movlw	0
  6169  012424  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6170  012426  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6171  01242A  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6172                           
  6173                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  6174  01242E  0E08               	movlw	8
  6175  012430  0100               	movlb	0	; () banked
  6176  012432  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6177  012434  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6178  012436  0E00               	movlw	0
  6179  012438  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6180  01243A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6181  01243C  0E01               	movlw	1
  6182  01243E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6183  012440  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6184  012444  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6185                           
  6186                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  6187  012448  0E08               	movlw	8
  6188  01244A  0100               	movlb	0	; () banked
  6189  01244C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6190  01244E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6191  012450  0E00               	movlw	0
  6192  012452  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6193  012454  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6194  012456  0E02               	movlw	2
  6195  012458  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6196  01245A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6197  01245E  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6198                           
  6199                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  6200  012462  0E08               	movlw	8
  6201  012464  0100               	movlb	0	; () banked
  6202  012466  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6203  012468  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6204  01246A  0E00               	movlw	0
  6205  01246C  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6206  01246E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6207  012470  0E03               	movlw	3
  6208  012472  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6209  012474  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6210  012478  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6211                           
  6212                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  6213  01247C  0E08               	movlw	8
  6214  01247E  0100               	movlb	0	; () banked
  6215  012480  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6216  012482  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6217  012484  0E00               	movlw	0
  6218  012486  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6219  012488  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6220  01248A  0E04               	movlw	4
  6221  01248C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6222  01248E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6223  012492  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6224                           
  6225                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  6226  012496  0E08               	movlw	8
  6227  012498  0100               	movlb	0	; () banked
  6228  01249A  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6229  01249C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6230  01249E  0E00               	movlw	0
  6231  0124A0  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6232  0124A2  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6233  0124A4  0E05               	movlw	5
  6234  0124A6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6235  0124A8  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6236  0124AC  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6237                           
  6238                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  6239  0124B0  0E08               	movlw	8
  6240  0124B2  0100               	movlb	0	; () banked
  6241  0124B4  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6242  0124B6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6243  0124B8  0E00               	movlw	0
  6244  0124BA  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6245  0124BC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6246  0124BE  0E06               	movlw	6
  6247  0124C0  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6248  0124C2  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6249  0124C6  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6250                           
  6251                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  6252  0124CA  0E08               	movlw	8
  6253  0124CC  0100               	movlb	0	; () banked
  6254  0124CE  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6255  0124D0  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6256  0124D2  0E00               	movlw	0
  6257  0124D4  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6258  0124D6  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6259  0124D8  0E07               	movlw	7
  6260  0124DA  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6261  0124DC  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6262  0124E0  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6263  0124E4  0012               	return	
  6264  0124E6                     __end_of_Port_SetType:
  6265                           	opt stack 0
  6266                           tosu	equ	0xFFF
  6267                           tosh	equ	0xFFE
  6268                           tosl	equ	0xFFD
  6269                           pclath	equ	0xFFA
  6270                           tblptru	equ	0xFF8
  6271                           tblptrh	equ	0xFF7
  6272                           tblptrl	equ	0xFF6
  6273                           tablat	equ	0xFF5
  6274                           postinc0	equ	0xFEE
  6275                           wreg	equ	0xFE8
  6276                           postdec1	equ	0xFE5
  6277                           fsr1h	equ	0xFE2
  6278                           fsr1l	equ	0xFE1
  6279                           indf2	equ	0xFDF
  6280                           postinc2	equ	0xFDE
  6281                           postdec2	equ	0xFDD
  6282                           fsr2h	equ	0xFDA
  6283                           fsr2l	equ	0xFD9
  6284                           status	equ	0xFD8
  6285                           
  6286 ;; *************** function _Port_CheckPortType *****************
  6287 ;; Defined at:
  6288 ;;		line 138 in file "Library/Port.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  6291 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6292 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6293 ;;  pDrive          1   56[BANK0 ] enum E6469
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;  Output          1   57[BANK0 ] enum E6475
  6296 ;; Return value:  Size  Location     Type
  6297 ;;                  1    wreg      enum E6475
  6298 ;; Registers used:
  6299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6300 ;; Tracked objects:
  6301 ;;		On entry : 0/0
  6302 ;;		On exit  : 0/0
  6303 ;;		Unchanged: 0/0
  6304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6305 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;Total ram usage:        4 bytes
  6310 ;; Hardware stack levels used:    1
  6311 ;; Hardware stack levels required when called:   13
  6312 ;; This function calls:
  6313 ;;		_Port_CheckQuadType
  6314 ;; This function is called by:
  6315 ;;		_Port_SetType
  6316 ;; This function uses a non-reentrant model
  6317 ;;
  6318                           
  6319                           	psect	text11
  6320  0157C6                     __ptext11:
  6321                           	opt stack 0
  6322  0157C6                     _Port_CheckPortType:
  6323                           	opt stack 15
  6324                           
  6325                           ;Port.c: 140: ePinError Output = ePinErrorState;
  6326                           
  6327                           ;incstack = 0
  6328  0157C6  0E05               	movlw	5
  6329  0157C8  0100               	movlb	0	; () banked
  6330  0157CA  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  6334  0157CC  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6335  0157D0  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6336  0157D4  0E00               	movlw	0
  6337  0157D6  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6338  0157D8  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6339  0157DC  EC05  F0AA         	call	_Port_CheckQuadType	;wreg free
  6340  0157E0  0100               	movlb	0	; () banked
  6341  0157E2  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6342  0157E4  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  6343  0157E6  A4D8               	btfss	status,2,c
  6344  0157E8  D00C               	goto	l397
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  6348  0157EA  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6349  0157EE  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6350  0157F2  0E01               	movlw	1
  6351  0157F4  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6352  0157F6  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6353  0157FA  EC05  F0AA         	call	_Port_CheckQuadType	;wreg free
  6354  0157FE  0100               	movlb	0	; () banked
  6355  015800  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6356  015802                     l397:
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;Port.c: 146: return Output;
  6360                           
  6361                           ; BSR set to: 0
  6362  015802  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  6363  015804  0012               	return	
  6364  015806                     __end_of_Port_CheckPortType:
  6365                           	opt stack 0
  6366                           tosu	equ	0xFFF
  6367                           tosh	equ	0xFFE
  6368                           tosl	equ	0xFFD
  6369                           pclath	equ	0xFFA
  6370                           tblptru	equ	0xFF8
  6371                           tblptrh	equ	0xFF7
  6372                           tblptrl	equ	0xFF6
  6373                           tablat	equ	0xFF5
  6374                           postinc0	equ	0xFEE
  6375                           wreg	equ	0xFE8
  6376                           postdec1	equ	0xFE5
  6377                           fsr1h	equ	0xFE2
  6378                           fsr1l	equ	0xFE1
  6379                           indf2	equ	0xFDF
  6380                           postinc2	equ	0xFDE
  6381                           postdec2	equ	0xFDD
  6382                           fsr2h	equ	0xFDA
  6383                           fsr2l	equ	0xFD9
  6384                           status	equ	0xFD8
  6385                           
  6386 ;; *************** function _Port_Set *****************
  6387 ;; Defined at:
  6388 ;;		line 570 in file "Library/Port.c"
  6389 ;; Parameters:    Size  Location     Type
  6390 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  6391 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6392 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6393 ;;  pValue          1   17[BANK0 ] unsigned char 
  6394 ;; Auto vars:     Size  Location     Type
  6395 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  6396 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  6397 ;;  Type            1   38[BANK0 ] enum E6795
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  1    wreg      void 
  6400 ;; Registers used:
  6401 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6407 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6408 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6409 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;Total ram usage:       24 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:   10
  6414 ;; This function calls:
  6415 ;;		_Byte_SetByte
  6416 ;;		_Word_GetPair
  6417 ;; This function is called by:
  6418 ;;		_Port_Init
  6419 ;;		_Port_Toggle
  6420 ;; This function uses a non-reentrant model
  6421 ;;
  6422                           
  6423                           	psect	text12
  6424  01178E                     __ptext12:
  6425                           	opt stack 0
  6426  01178E                     _Port_Set:
  6427                           	opt stack 18
  6428                           
  6429                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  6430                           
  6431                           ; BSR set to: 0
  6432                           ;incstack = 0
  6433  01178E  0E08               	movlw	8
  6434  011790  0100               	movlb	0	; () banked
  6435  011792  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6436  011794  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6437  011796  0E00               	movlw	0
  6438  011798  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6439  01179A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6440  01179C  0E00               	movlw	0
  6441  01179E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6442  0117A0  EC96  F0AD         	call	_Word_GetPair	;wreg free
  6443  0117A4  0100               	movlb	0	; () banked
  6444  0117A6  6F86               	movwf	Port_Set@Type& (0+255),b
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  6448  0117A8  5186               	movf	Port_Set@Type& (0+255),w,b
  6449  0117AA  6F72               	movwf	??_Port_Set& (0+255),b
  6450  0117AC  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6451  0117AE  0E0E               	movlw	14
  6452  0117B0                     u11615:
  6453  0117B0  90D8               	bcf	status,0,c
  6454  0117B2  3772               	rlcf	??_Port_Set& (0+255),f,b
  6455  0117B4  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6456  0117B6  2EE8               	decfsz	wreg,f,c
  6457  0117B8  D7FB               	goto	u11615
  6458  0117BA  5186               	movf	Port_Set@Type& (0+255),w,b
  6459  0117BC  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  6460  0117BE  6B75               	clrf	(??_Port_Set+3)& (0+255),b
  6461  0117C0  0E0C               	movlw	12
  6462  0117C2                     u11625:
  6463  0117C2  90D8               	bcf	status,0,c
  6464  0117C4  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
  6465  0117C6  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
  6466  0117C8  2EE8               	decfsz	wreg,f,c
  6467  0117CA  D7FB               	goto	u11625
  6468  0117CC  5186               	movf	Port_Set@Type& (0+255),w,b
  6469  0117CE  6F76               	movwf	(??_Port_Set+4)& (0+255),b
  6470  0117D0  6B77               	clrf	(??_Port_Set+5)& (0+255),b
  6471  0117D2  0E0A               	movlw	10
  6472  0117D4                     u11635:
  6473  0117D4  90D8               	bcf	status,0,c
  6474  0117D6  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
  6475  0117D8  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
  6476  0117DA  2EE8               	decfsz	wreg,f,c
  6477  0117DC  D7FB               	goto	u11635
  6478  0117DE  5186               	movf	Port_Set@Type& (0+255),w,b
  6479  0117E0  6F79               	movwf	(??_Port_Set+7)& (0+255),b
  6480  0117E2  6B78               	clrf	(??_Port_Set+6)& (0+255),b
  6481  0117E4  5186               	movf	Port_Set@Type& (0+255),w,b
  6482  0117E6  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
  6483  0117E8  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
  6484  0117EA  0E06               	movlw	6
  6485  0117EC                     u11645:
  6486  0117EC  90D8               	bcf	status,0,c
  6487  0117EE  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
  6488  0117F0  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
  6489  0117F2  2EE8               	decfsz	wreg,f,c
  6490  0117F4  D7FB               	goto	u11645
  6491  0117F6  5186               	movf	Port_Set@Type& (0+255),w,b
  6492  0117F8  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
  6493  0117FA  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
  6494  0117FC  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
  6495  0117FE  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
  6496  011800  0EF0               	movlw	240
  6497  011802  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
  6498  011804  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  6499  011806  0B0F               	andlw	15
  6500  011808  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
  6501  01180A  0EF0               	movlw	240
  6502  01180C  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
  6503  01180E  5186               	movf	Port_Set@Type& (0+255),w,b
  6504  011810  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
  6505  011812  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
  6506  011814  90D8               	bcf	status,0,c
  6507  011816  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6508  011818  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6509  01181A  90D8               	bcf	status,0,c
  6510  01181C  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6511  01181E  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6512  011820  5186               	movf	Port_Set@Type& (0+255),w,b
  6513  011822  6F80               	movwf	(??_Port_Set+14)& (0+255),b
  6514  011824  6B81               	clrf	(??_Port_Set+15)& (0+255),b
  6515  011826  517E               	movf	(??_Port_Set+12)& (0+255),w,b
  6516  011828  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6517  01182A  517F               	movf	(??_Port_Set+13)& (0+255),w,b
  6518  01182C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6519  01182E  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  6520  011830  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6521  011832  517D               	movf	(??_Port_Set+11)& (0+255),w,b
  6522  011834  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6523  011836  517A               	movf	(??_Port_Set+8)& (0+255),w,b
  6524  011838  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6525  01183A  517B               	movf	(??_Port_Set+9)& (0+255),w,b
  6526  01183C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6527  01183E  5178               	movf	(??_Port_Set+6)& (0+255),w,b
  6528  011840  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6529  011842  5179               	movf	(??_Port_Set+7)& (0+255),w,b
  6530  011844  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6531  011846  5176               	movf	(??_Port_Set+4)& (0+255),w,b
  6532  011848  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6533  01184A  5177               	movf	(??_Port_Set+5)& (0+255),w,b
  6534  01184C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6535  01184E  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  6536  011850  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6537  011852  5175               	movf	(??_Port_Set+3)& (0+255),w,b
  6538  011854  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6539  011856  5172               	movf	??_Port_Set& (0+255),w,b
  6540  011858  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
  6541  01185A  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
  6542  01185C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6543  01185E  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
  6544  011860  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;Port.c: 574: UINT16 TypeActual = Type;
  6548  011862  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
  6549  011866  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  6550                           
  6551                           ; BSR set to: 0
  6552                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  6553  011868  0E08               	movlw	8
  6554  01186A  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6555  01186C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6556  01186E  0E00               	movlw	0
  6557  011870  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6558  011872  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6559  011874  0E01               	movlw	1
  6560  011876  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6561  011878  EC96  F0AD         	call	_Word_GetPair	;wreg free
  6562  01187C  0100               	movlb	0	; () banked
  6563  01187E  6F72               	movwf	??_Port_Set& (0+255),b
  6564  011880  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6565  011882  90D8               	bcf	status,0,c
  6566  011884  3772               	rlcf	??_Port_Set& (0+255),f,b
  6567  011886  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6568  011888  90D8               	bcf	status,0,c
  6569  01188A  3772               	rlcf	??_Port_Set& (0+255),f,b
  6570  01188C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6571  01188E  5172               	movf	??_Port_Set& (0+255),w,b
  6572  011890  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6573  011892  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6574  011894  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6575                           
  6576                           ; BSR set to: 0
  6577                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  6578  011896  0E08               	movlw	8
  6579  011898  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6580  01189A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6581  01189C  0E00               	movlw	0
  6582  01189E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6583  0118A0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6584  0118A2  0E02               	movlw	2
  6585  0118A4  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6586  0118A6  EC96  F0AD         	call	_Word_GetPair	;wreg free
  6587  0118AA  0100               	movlb	0	; () banked
  6588  0118AC  6F72               	movwf	??_Port_Set& (0+255),b
  6589  0118AE  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6590  0118B0  3B72               	swapf	??_Port_Set& (0+255),f,b
  6591  0118B2  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
  6592  0118B4  0EF0               	movlw	240
  6593  0118B6  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
  6594  0118B8  5172               	movf	??_Port_Set& (0+255),w,b
  6595  0118BA  0B0F               	andlw	15
  6596  0118BC  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
  6597  0118BE  0EF0               	movlw	240
  6598  0118C0  1772               	andwf	??_Port_Set& (0+255),f,b
  6599  0118C2  5172               	movf	??_Port_Set& (0+255),w,b
  6600  0118C4  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6601  0118C6  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6602  0118C8  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6603                           
  6604                           ; BSR set to: 0
  6605                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  6606  0118CA  0E08               	movlw	8
  6607  0118CC  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6608  0118CE  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6609  0118D0  0E00               	movlw	0
  6610  0118D2  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6611  0118D4  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6612  0118D6  0E03               	movlw	3
  6613  0118D8  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6614  0118DA  EC96  F0AD         	call	_Word_GetPair	;wreg free
  6615  0118DE  0100               	movlb	0	; () banked
  6616  0118E0  6F72               	movwf	??_Port_Set& (0+255),b
  6617  0118E2  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6618  0118E4  0E06               	movlw	6
  6619  0118E6                     u11655:
  6620  0118E6  90D8               	bcf	status,0,c
  6621  0118E8  3772               	rlcf	??_Port_Set& (0+255),f,b
  6622  0118EA  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6623  0118EC  2EE8               	decfsz	wreg,f,c
  6624  0118EE  D7FB               	goto	u11655
  6625  0118F0  5172               	movf	??_Port_Set& (0+255),w,b
  6626  0118F2  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6627  0118F4  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6628  0118F6  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  6632  0118F8  0E08               	movlw	8
  6633  0118FA  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6634  0118FC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6635  0118FE  0E00               	movlw	0
  6636  011900  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6637  011902  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6638  011904  0E04               	movlw	4
  6639  011906  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6640  011908  EC96  F0AD         	call	_Word_GetPair	;wreg free
  6641  01190C  0100               	movlb	0	; () banked
  6642  01190E  6F72               	movwf	??_Port_Set& (0+255),b
  6643  011910  5172               	movf	??_Port_Set& (0+255),w,b
  6644  011912  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  6645  011914  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6646  011916  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6647  011918  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6648  01191A  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  6649  01191C  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  6653  01191E  0E08               	movlw	8
  6654  011920  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6655  011922  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6656  011924  0E00               	movlw	0
  6657  011926  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6658  011928  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6659  01192A  0E05               	movlw	5
  6660  01192C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6661  01192E  EC96  F0AD         	call	_Word_GetPair	;wreg free
  6662  011932  0100               	movlb	0	; () banked
  6663  011934  6F72               	movwf	??_Port_Set& (0+255),b
  6664  011936  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6665  011938  0E0A               	movlw	10
  6666  01193A                     u11665:
  6667  01193A  90D8               	bcf	status,0,c
  6668  01193C  3772               	rlcf	??_Port_Set& (0+255),f,b
  6669  01193E  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6670  011940  2EE8               	decfsz	wreg,f,c
  6671  011942  D7FB               	goto	u11665
  6672  011944  5172               	movf	??_Port_Set& (0+255),w,b
  6673  011946  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6674  011948  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6675  01194A  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6676                           
  6677                           ; BSR set to: 0
  6678                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  6679  01194C  0E08               	movlw	8
  6680  01194E  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6681  011950  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6682  011952  0E00               	movlw	0
  6683  011954  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6684  011956  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6685  011958  0E06               	movlw	6
  6686  01195A  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6687  01195C  EC96  F0AD         	call	_Word_GetPair	;wreg free
  6688  011960  0100               	movlb	0	; () banked
  6689  011962  6F72               	movwf	??_Port_Set& (0+255),b
  6690  011964  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6691  011966  0E0C               	movlw	12
  6692  011968                     u11675:
  6693  011968  90D8               	bcf	status,0,c
  6694  01196A  3772               	rlcf	??_Port_Set& (0+255),f,b
  6695  01196C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6696  01196E  2EE8               	decfsz	wreg,f,c
  6697  011970  D7FB               	goto	u11675
  6698  011972  5172               	movf	??_Port_Set& (0+255),w,b
  6699  011974  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6700  011976  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6701  011978  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6702                           
  6703                           ; BSR set to: 0
  6704                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  6705  01197A  0E08               	movlw	8
  6706  01197C  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6707  01197E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6708  011980  0E00               	movlw	0
  6709  011982  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6710  011984  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6711  011986  0E07               	movlw	7
  6712  011988  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6713  01198A  EC96  F0AD         	call	_Word_GetPair	;wreg free
  6714  01198E  0100               	movlb	0	; () banked
  6715  011990  6F72               	movwf	??_Port_Set& (0+255),b
  6716  011992  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6717  011994  0E0E               	movlw	14
  6718  011996                     u11685:
  6719  011996  90D8               	bcf	status,0,c
  6720  011998  3772               	rlcf	??_Port_Set& (0+255),f,b
  6721  01199A  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6722  01199C  2EE8               	decfsz	wreg,f,c
  6723  01199E  D7FB               	goto	u11685
  6724  0119A0  5172               	movf	??_Port_Set& (0+255),w,b
  6725  0119A2  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6726  0119A4  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6727  0119A6  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6728                           
  6729                           ;Port.c: 584: if (TypeRequired == TypeActual)
  6730  0119A8  5184               	movf	Port_Set@TypeActual& (0+255),w,b
  6731  0119AA  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  6732  0119AC  E144               	bnz	l528
  6733  0119AE  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  6734  0119B0  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  6735  0119B2  A4D8               	btfss	status,2,c
  6736  0119B4  0012               	return	
  6737  0119B6  D030               	goto	l526
  6738  0119B8                     
  6739                           ; BSR set to: 0
  6740                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  6741                           
  6742                           ; BSR set to: 0
  6743  0119B8  EE20 F002          	lfsr	2,2
  6744  0119BC  516F               	movf	Port_Set@pInput& (0+255),w,b
  6745  0119BE  26D9               	addwf	fsr2l,f,c
  6746  0119C0  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6747  0119C2  22DA               	addwfc	fsr2h,f,c
  6748  0119C4  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6749  0119C8  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6750  0119CC  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6751  0119D0  EC13  F0B0         	call	_Byte_SetByte	;wreg free
  6752                           
  6753                           ;Port.c: 594: break;
  6754  0119D4  0012               	return	
  6755  0119D6                     
  6756                           ;Port.c: 597: pValue = ~pValue;
  6757  0119D6  0100               	movlb	0	; () banked
  6758  0119D8  1F71               	comf	Port_Set@pValue& (0+255),f,b
  6759                           
  6760                           ; BSR set to: 0
  6761                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  6762  0119DA  EE20 F002          	lfsr	2,2
  6763  0119DE  516F               	movf	Port_Set@pInput& (0+255),w,b
  6764  0119E0  26D9               	addwf	fsr2l,f,c
  6765  0119E2  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6766  0119E4  22DA               	addwfc	fsr2h,f,c
  6767  0119E6  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6768  0119EA  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6769  0119EE  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6770  0119F2  EC13  F0B0         	call	_Byte_SetByte	;wreg free
  6771                           
  6772                           ;Port.c: 599: break;
  6773  0119F6  0012               	return	
  6774  0119F8                     
  6775                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  6776  0119F8  0100               	movlb	0	; () banked
  6777  0119FA  EE20 F004          	lfsr	2,4
  6778  0119FE  516F               	movf	Port_Set@pInput& (0+255),w,b
  6779  011A00  26D9               	addwf	fsr2l,f,c
  6780  011A02  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6781  011A04  22DA               	addwfc	fsr2h,f,c
  6782  011A06  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6783  011A0A  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6784  011A0E  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6785  011A12  EC13  F0B0         	call	_Byte_SetByte	;wreg free
  6786                           
  6787                           ;Port.c: 606: }
  6788                           
  6789                           ;Port.c: 605: break;
  6790                           
  6791                           ;Port.c: 604: default:
  6792                           
  6793                           ;Port.c: 603: break;
  6794  011A16  0012               	return	
  6795  011A18                     l526:
  6796  011A18  0100               	movlb	0	; () banked
  6797  011A1A  5186               	movf	Port_Set@Type& (0+255),w,b
  6798                           
  6799                           ; Switch size 1, requested type "space"
  6800                           ; Number of cases is 4, Range of values is 0 to 3
  6801                           ; switch strategies available:
  6802                           ; Name         Instructions Cycles
  6803                           ; simple_byte           13     7 (average)
  6804                           ;	Chosen strategy is simple_byte
  6805  011A1C  0A00               	xorlw	0	; case 0
  6806  011A1E  B4D8               	btfsc	status,2,c
  6807  011A20  0012               	return	
  6808  011A22  0A01               	xorlw	1	; case 1
  6809  011A24  B4D8               	btfsc	status,2,c
  6810  011A26  D7C8               	goto	l529
  6811  011A28  0A03               	xorlw	3	; case 2
  6812  011A2A  B4D8               	btfsc	status,2,c
  6813  011A2C  D7D4               	goto	l531
  6814  011A2E  0A01               	xorlw	1	; case 3
  6815  011A30  A4D8               	btfss	status,2,c
  6816                           
  6817                           ; BSR set to: 0
  6818                           
  6819                           ; BSR set to: 0
  6820                           ;Port.c: 607: }
  6821  011A32  0012               	return	
  6822  011A34  D7E1               	goto	l532
  6823  011A36                     l528:
  6824  011A36  0012               	return		;funcret
  6825  011A38                     __end_of_Port_Set:
  6826                           	opt stack 0
  6827                           tosu	equ	0xFFF
  6828                           tosh	equ	0xFFE
  6829                           tosl	equ	0xFFD
  6830                           pclath	equ	0xFFA
  6831                           tblptru	equ	0xFF8
  6832                           tblptrh	equ	0xFF7
  6833                           tblptrl	equ	0xFF6
  6834                           tablat	equ	0xFF5
  6835                           postinc0	equ	0xFEE
  6836                           wreg	equ	0xFE8
  6837                           postdec1	equ	0xFE5
  6838                           fsr1h	equ	0xFE2
  6839                           fsr1l	equ	0xFE1
  6840                           indf2	equ	0xFDF
  6841                           postinc2	equ	0xFDE
  6842                           postdec2	equ	0xFDD
  6843                           fsr2h	equ	0xFDA
  6844                           fsr2l	equ	0xFD9
  6845                           status	equ	0xFD8
  6846                           
  6847 ;; *************** function _Byte_SetByte *****************
  6848 ;; Defined at:
  6849 ;;		line 110 in file "Library/Types.c"
  6850 ;; Parameters:    Size  Location     Type
  6851 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  6852 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  6853 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  6854 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  6855 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  6856 ;;		 -> NULL(0), 
  6857 ;;  pValue          1    2[BANK0 ] unsigned char 
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;		None
  6860 ;; Return value:  Size  Location     Type
  6861 ;;                  1    wreg      void 
  6862 ;; Registers used:
  6863 ;;		fsr2l, fsr2h
  6864 ;; Tracked objects:
  6865 ;;		On entry : 0/0
  6866 ;;		On exit  : 0/0
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6869 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6873 ;;Total ram usage:        3 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; Hardware stack levels required when called:    7
  6876 ;; This function calls:
  6877 ;;		Nothing
  6878 ;; This function is called by:
  6879 ;;		_Port_Set
  6880 ;;		_I2C_Init
  6881 ;; This function uses a non-reentrant model
  6882 ;;
  6883                           
  6884                           	psect	text13
  6885  016026                     __ptext13:
  6886                           	opt stack 0
  6887  016026                     _Byte_SetByte:
  6888                           	opt stack 20
  6889                           
  6890                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  6891                           
  6892                           ;incstack = 0
  6893  016026  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  6894  01602A  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  6895  01602E  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
  6896  016032  0012               	return		;funcret
  6897  016034                     __end_of_Byte_SetByte:
  6898                           	opt stack 0
  6899                           tosu	equ	0xFFF
  6900                           tosh	equ	0xFFE
  6901                           tosl	equ	0xFFD
  6902                           pclath	equ	0xFFA
  6903                           tblptru	equ	0xFF8
  6904                           tblptrh	equ	0xFF7
  6905                           tblptrl	equ	0xFF6
  6906                           tablat	equ	0xFF5
  6907                           postinc0	equ	0xFEE
  6908                           wreg	equ	0xFE8
  6909                           postdec1	equ	0xFE5
  6910                           fsr1h	equ	0xFE2
  6911                           fsr1l	equ	0xFE1
  6912                           indf2	equ	0xFDF
  6913                           postinc2	equ	0xFDE
  6914                           postdec2	equ	0xFDD
  6915                           fsr2h	equ	0xFDA
  6916                           fsr2l	equ	0xFD9
  6917                           status	equ	0xFD8
  6918                           
  6919 ;; *************** function _GetPortTRIS *****************
  6920 ;; Defined at:
  6921 ;;		line 67 in file "Library/Port.c"
  6922 ;; Parameters:    Size  Location     Type
  6923 ;;  pInput          1    wreg     enum E6786
  6924 ;; Auto vars:     Size  Location     Type
  6925 ;;  pInput          1    2[BANK0 ] enum E6786
  6926 ;; Return value:  Size  Location     Type
  6927 ;;                  2    0[BANK0 ] PTR struct Byte
  6928 ;; Registers used:
  6929 ;;		wreg, status,2, status,0
  6930 ;; Tracked objects:
  6931 ;;		On entry : 0/0
  6932 ;;		On exit  : 0/0
  6933 ;;		Unchanged: 0/0
  6934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6935 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6936 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6938 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6939 ;;Total ram usage:        3 bytes
  6940 ;; Hardware stack levels used:    1
  6941 ;; Hardware stack levels required when called:    7
  6942 ;; This function calls:
  6943 ;;		Nothing
  6944 ;; This function is called by:
  6945 ;;		_Port_Init
  6946 ;; This function uses a non-reentrant model
  6947 ;;
  6948                           
  6949                           	psect	text14
  6950  0146F6                     __ptext14:
  6951                           	opt stack 0
  6952  0146F6                     _GetPortTRIS:
  6953                           	opt stack 21
  6954                           
  6955                           ;incstack = 0
  6956                           ;GetPortTRIS@pInput stored from wreg
  6957  0146F6  0100               	movlb	0	; () banked
  6958  0146F8  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
  6959                           
  6960                           ;Port.c: 69: switch (pInput)
  6961  0146FA  D029               	goto	l363
  6962  0146FC                     
  6963                           ;Port.c: 72: return (BytePtr)&TRISA;
  6964  0146FC  0E92               	movlw	146
  6965  0146FE  0100               	movlb	0	; () banked
  6966  014700  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6967  014702  0E0F               	movlw	15
  6968  014704  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6969                           
  6970                           ; BSR set to: 0
  6971  014706  0012               	return	
  6972  014708                     
  6973                           ; BSR set to: 0
  6974                           ;Port.c: 74: return (BytePtr)&TRISB;
  6975                           
  6976                           ; BSR set to: 0
  6977  014708  0E93               	movlw	147
  6978  01470A  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6979  01470C  0E0F               	movlw	15
  6980  01470E  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6981                           
  6982                           ; BSR set to: 0
  6983  014710  0012               	return	
  6984  014712                     
  6985                           ; BSR set to: 0
  6986                           ;Port.c: 76: return (BytePtr)&TRISC;
  6987                           
  6988                           ; BSR set to: 0
  6989  014712  0E94               	movlw	148
  6990  014714  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6991  014716  0E0F               	movlw	15
  6992  014718  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6993                           
  6994                           ; BSR set to: 0
  6995  01471A  0012               	return	
  6996  01471C                     
  6997                           ; BSR set to: 0
  6998                           ;Port.c: 78: return (BytePtr)&TRISD;
  6999                           
  7000                           ; BSR set to: 0
  7001  01471C  0E95               	movlw	149
  7002  01471E  6F60               	movwf	?_GetPortTRIS& (0+255),b
  7003  014720  0E0F               	movlw	15
  7004  014722  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7005                           
  7006                           ; BSR set to: 0
  7007  014724  0012               	return	
  7008  014726                     
  7009                           ; BSR set to: 0
  7010                           ;Port.c: 80: return (BytePtr)&TRISE;
  7011                           
  7012                           ; BSR set to: 0
  7013  014726  0E96               	movlw	150
  7014  014728  6F60               	movwf	?_GetPortTRIS& (0+255),b
  7015  01472A  0E0F               	movlw	15
  7016  01472C  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7017                           
  7018                           ; BSR set to: 0
  7019  01472E  0012               	return	
  7020  014730                     
  7021                           ; BSR set to: 0
  7022                           ;Port.c: 82: return (BytePtr)&TRISF;
  7023                           
  7024                           ; BSR set to: 0
  7025  014730  0E97               	movlw	151
  7026  014732  6F60               	movwf	?_GetPortTRIS& (0+255),b
  7027  014734  0E0F               	movlw	15
  7028  014736  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7029                           
  7030                           ; BSR set to: 0
  7031  014738  0012               	return	
  7032  01473A                     
  7033                           ; BSR set to: 0
  7034                           ;Port.c: 84: return (BytePtr)&TRISG;
  7035                           
  7036                           ; BSR set to: 0
  7037  01473A  0E98               	movlw	152
  7038  01473C  6F60               	movwf	?_GetPortTRIS& (0+255),b
  7039  01473E  0E0F               	movlw	15
  7040  014740  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7041                           
  7042                           ; BSR set to: 0
  7043  014742  0012               	return	
  7044  014744                     
  7045                           ; BSR set to: 0
  7046                           ;Port.c: 86: return (void*)0;
  7047                           
  7048                           ; BSR set to: 0
  7049  014744  0E00               	movlw	0
  7050  014746  6F60               	movwf	?_GetPortTRIS& (0+255),b
  7051  014748  0E00               	movlw	0
  7052  01474A  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;Port.c: 87: }
  7056                           
  7057                           ; BSR set to: 0
  7058  01474C  0012               	return	
  7059  01474E                     l363:
  7060                           
  7061                           ; BSR set to: 0
  7062  01474E  0100               	movlb	0	; () banked
  7063  014750  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
  7064                           
  7065                           ; Switch size 1, requested type "space"
  7066                           ; Number of cases is 7, Range of values is 0 to 6
  7067                           ; switch strategies available:
  7068                           ; Name         Instructions Cycles
  7069                           ; simple_byte           22    12 (average)
  7070                           ;	Chosen strategy is simple_byte
  7071  014752  0A00               	xorlw	0	; case 0
  7072  014754  B4D8               	btfsc	status,2,c
  7073  014756  D7D2               	goto	l364
  7074  014758  0A01               	xorlw	1	; case 1
  7075  01475A  B4D8               	btfsc	status,2,c
  7076  01475C  D7D5               	goto	l366
  7077  01475E  0A03               	xorlw	3	; case 2
  7078  014760  B4D8               	btfsc	status,2,c
  7079  014762  D7D7               	goto	l367
  7080  014764  0A01               	xorlw	1	; case 3
  7081  014766  B4D8               	btfsc	status,2,c
  7082  014768  D7D9               	goto	l368
  7083  01476A  0A07               	xorlw	7	; case 4
  7084  01476C  B4D8               	btfsc	status,2,c
  7085  01476E  D7DB               	goto	l369
  7086  014770  0A01               	xorlw	1	; case 5
  7087  014772  B4D8               	btfsc	status,2,c
  7088  014774  D7DD               	goto	l370
  7089  014776  0A03               	xorlw	3	; case 6
  7090  014778  B4D8               	btfsc	status,2,c
  7091  01477A  D7DF               	goto	l371
  7092  01477C  D7E3               	goto	l372
  7093  01477E                     __end_of_GetPortTRIS:
  7094                           	opt stack 0
  7095                           tosu	equ	0xFFF
  7096                           tosh	equ	0xFFE
  7097                           tosl	equ	0xFFD
  7098                           pclath	equ	0xFFA
  7099                           tblptru	equ	0xFF8
  7100                           tblptrh	equ	0xFF7
  7101                           tblptrl	equ	0xFF6
  7102                           tablat	equ	0xFF5
  7103                           postinc0	equ	0xFEE
  7104                           wreg	equ	0xFE8
  7105                           postdec1	equ	0xFE5
  7106                           fsr1h	equ	0xFE2
  7107                           fsr1l	equ	0xFE1
  7108                           indf2	equ	0xFDF
  7109                           postinc2	equ	0xFDE
  7110                           postdec2	equ	0xFDD
  7111                           fsr2h	equ	0xFDA
  7112                           fsr2l	equ	0xFD9
  7113                           status	equ	0xFD8
  7114                           
  7115 ;; *************** function _GetPortProperties *****************
  7116 ;; Defined at:
  7117 ;;		line 21 in file "Library/Port.c"
  7118 ;; Parameters:    Size  Location     Type
  7119 ;;  pInput          1    wreg     enum E6786
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;  pInput          1    2[BANK0 ] enum E6786
  7122 ;; Return value:  Size  Location     Type
  7123 ;;                  2    0[BANK0 ] PTR struct PortProperty
  7124 ;; Registers used:
  7125 ;;		wreg, status,2, status,0
  7126 ;; Tracked objects:
  7127 ;;		On entry : 0/0
  7128 ;;		On exit  : 0/0
  7129 ;;		Unchanged: 0/0
  7130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7131 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;Total ram usage:        3 bytes
  7136 ;; Hardware stack levels used:    1
  7137 ;; Hardware stack levels required when called:    7
  7138 ;; This function calls:
  7139 ;;		Nothing
  7140 ;; This function is called by:
  7141 ;;		_Port_Init
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           	psect	text15
  7146  01477E                     __ptext15:
  7147                           	opt stack 0
  7148  01477E                     _GetPortProperties:
  7149                           	opt stack 21
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;incstack = 0
  7153                           ;GetPortProperties@pInput stored from wreg
  7154  01477E  0100               	movlb	0	; () banked
  7155  014780  6F62               	movwf	GetPortProperties@pInput& (0+255),b
  7156                           
  7157                           ;Port.c: 23: switch (pInput)
  7158  014782  D029               	goto	l337
  7159  014784                     
  7160                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  7161  014784  0E7B               	movlw	low _PortA_Property
  7162  014786  0100               	movlb	0	; () banked
  7163  014788  6F60               	movwf	?_GetPortProperties& (0+255),b
  7164  01478A  0EFE               	movlw	high _PortA_Property
  7165  01478C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7166                           
  7167                           ; BSR set to: 0
  7168  01478E  0012               	return	
  7169  014790                     
  7170                           ; BSR set to: 0
  7171                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  7172                           
  7173                           ; BSR set to: 0
  7174  014790  0E79               	movlw	low _PortB_Property
  7175  014792  6F60               	movwf	?_GetPortProperties& (0+255),b
  7176  014794  0EFE               	movlw	high _PortB_Property
  7177  014796  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7178                           
  7179                           ; BSR set to: 0
  7180  014798  0012               	return	
  7181  01479A                     
  7182                           ; BSR set to: 0
  7183                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  7184                           
  7185                           ; BSR set to: 0
  7186  01479A  0E77               	movlw	low _PortC_Property
  7187  01479C  6F60               	movwf	?_GetPortProperties& (0+255),b
  7188  01479E  0EFE               	movlw	high _PortC_Property
  7189  0147A0  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7190                           
  7191                           ; BSR set to: 0
  7192  0147A2  0012               	return	
  7193  0147A4                     
  7194                           ; BSR set to: 0
  7195                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  7196                           
  7197                           ; BSR set to: 0
  7198  0147A4  0E75               	movlw	low _PortD_Property
  7199  0147A6  6F60               	movwf	?_GetPortProperties& (0+255),b
  7200  0147A8  0EFE               	movlw	high _PortD_Property
  7201  0147AA  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7202                           
  7203                           ; BSR set to: 0
  7204  0147AC  0012               	return	
  7205  0147AE                     
  7206                           ; BSR set to: 0
  7207                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  7208                           
  7209                           ; BSR set to: 0
  7210  0147AE  0E73               	movlw	low _PortE_Property
  7211  0147B0  6F60               	movwf	?_GetPortProperties& (0+255),b
  7212  0147B2  0EFE               	movlw	high _PortE_Property
  7213  0147B4  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7214                           
  7215                           ; BSR set to: 0
  7216  0147B6  0012               	return	
  7217  0147B8                     
  7218                           ; BSR set to: 0
  7219                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  7220                           
  7221                           ; BSR set to: 0
  7222  0147B8  0E71               	movlw	low _PortF_Property
  7223  0147BA  6F60               	movwf	?_GetPortProperties& (0+255),b
  7224  0147BC  0EFE               	movlw	high _PortF_Property
  7225  0147BE  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7226                           
  7227                           ; BSR set to: 0
  7228  0147C0  0012               	return	
  7229  0147C2                     
  7230                           ; BSR set to: 0
  7231                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  7232                           
  7233                           ; BSR set to: 0
  7234  0147C2  0E6F               	movlw	low _PortG_Property
  7235  0147C4  6F60               	movwf	?_GetPortProperties& (0+255),b
  7236  0147C6  0EFE               	movlw	high _PortG_Property
  7237  0147C8  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7238                           
  7239                           ; BSR set to: 0
  7240  0147CA  0012               	return	
  7241  0147CC                     
  7242                           ; BSR set to: 0
  7243                           ;Port.c: 40: return (void*)0;
  7244                           
  7245                           ; BSR set to: 0
  7246  0147CC  0E00               	movlw	0
  7247  0147CE  6F60               	movwf	?_GetPortProperties& (0+255),b
  7248  0147D0  0E00               	movlw	0
  7249  0147D2  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;Port.c: 41: }
  7253                           
  7254                           ; BSR set to: 0
  7255  0147D4  0012               	return	
  7256  0147D6                     l337:
  7257                           
  7258                           ; BSR set to: 0
  7259  0147D6  0100               	movlb	0	; () banked
  7260  0147D8  5162               	movf	GetPortProperties@pInput& (0+255),w,b
  7261                           
  7262                           ; Switch size 1, requested type "space"
  7263                           ; Number of cases is 7, Range of values is 0 to 6
  7264                           ; switch strategies available:
  7265                           ; Name         Instructions Cycles
  7266                           ; simple_byte           22    12 (average)
  7267                           ;	Chosen strategy is simple_byte
  7268  0147DA  0A00               	xorlw	0	; case 0
  7269  0147DC  B4D8               	btfsc	status,2,c
  7270  0147DE  D7D2               	goto	l338
  7271  0147E0  0A01               	xorlw	1	; case 1
  7272  0147E2  B4D8               	btfsc	status,2,c
  7273  0147E4  D7D5               	goto	l340
  7274  0147E6  0A03               	xorlw	3	; case 2
  7275  0147E8  B4D8               	btfsc	status,2,c
  7276  0147EA  D7D7               	goto	l341
  7277  0147EC  0A01               	xorlw	1	; case 3
  7278  0147EE  B4D8               	btfsc	status,2,c
  7279  0147F0  D7D9               	goto	l342
  7280  0147F2  0A07               	xorlw	7	; case 4
  7281  0147F4  B4D8               	btfsc	status,2,c
  7282  0147F6  D7DB               	goto	l343
  7283  0147F8  0A01               	xorlw	1	; case 5
  7284  0147FA  B4D8               	btfsc	status,2,c
  7285  0147FC  D7DD               	goto	l344
  7286  0147FE  0A03               	xorlw	3	; case 6
  7287  014800  B4D8               	btfsc	status,2,c
  7288  014802  D7DF               	goto	l345
  7289  014804  D7E3               	goto	l346
  7290  014806                     __end_of_GetPortProperties:
  7291                           	opt stack 0
  7292                           tosu	equ	0xFFF
  7293                           tosh	equ	0xFFE
  7294                           tosl	equ	0xFFD
  7295                           pclath	equ	0xFFA
  7296                           tblptru	equ	0xFF8
  7297                           tblptrh	equ	0xFF7
  7298                           tblptrl	equ	0xFF6
  7299                           tablat	equ	0xFF5
  7300                           postinc0	equ	0xFEE
  7301                           wreg	equ	0xFE8
  7302                           postdec1	equ	0xFE5
  7303                           fsr1h	equ	0xFE2
  7304                           fsr1l	equ	0xFE1
  7305                           indf2	equ	0xFDF
  7306                           postinc2	equ	0xFDE
  7307                           postdec2	equ	0xFDD
  7308                           fsr2h	equ	0xFDA
  7309                           fsr2l	equ	0xFD9
  7310                           status	equ	0xFD8
  7311                           
  7312 ;; *************** function _GetPortPORT *****************
  7313 ;; Defined at:
  7314 ;;		line 44 in file "Library/Port.c"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;  pInput          1    wreg     enum E6786
  7317 ;; Auto vars:     Size  Location     Type
  7318 ;;  pInput          1    2[BANK0 ] enum E6786
  7319 ;; Return value:  Size  Location     Type
  7320 ;;                  2    0[BANK0 ] PTR struct Byte
  7321 ;; Registers used:
  7322 ;;		wreg, status,2, status,0
  7323 ;; Tracked objects:
  7324 ;;		On entry : 0/0
  7325 ;;		On exit  : 0/0
  7326 ;;		Unchanged: 0/0
  7327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7328 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7329 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7331 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7332 ;;Total ram usage:        3 bytes
  7333 ;; Hardware stack levels used:    1
  7334 ;; Hardware stack levels required when called:    7
  7335 ;; This function calls:
  7336 ;;		Nothing
  7337 ;; This function is called by:
  7338 ;;		_Port_Init
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           	psect	text16
  7343  014806                     __ptext16:
  7344                           	opt stack 0
  7345  014806                     _GetPortPORT:
  7346                           	opt stack 21
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;incstack = 0
  7350                           ;GetPortPORT@pInput stored from wreg
  7351  014806  0100               	movlb	0	; () banked
  7352  014808  6F62               	movwf	GetPortPORT@pInput& (0+255),b
  7353                           
  7354                           ;Port.c: 46: switch (pInput)
  7355  01480A  D029               	goto	l350
  7356  01480C                     
  7357                           ;Port.c: 49: return (BytePtr)&PORTA;
  7358  01480C  0E80               	movlw	128
  7359  01480E  0100               	movlb	0	; () banked
  7360  014810  6F60               	movwf	?_GetPortPORT& (0+255),b
  7361  014812  0E0F               	movlw	15
  7362  014814  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7363                           
  7364                           ; BSR set to: 0
  7365  014816  0012               	return	
  7366  014818                     
  7367                           ; BSR set to: 0
  7368                           ;Port.c: 51: return (BytePtr)&PORTB;
  7369                           
  7370                           ; BSR set to: 0
  7371  014818  0E81               	movlw	129
  7372  01481A  6F60               	movwf	?_GetPortPORT& (0+255),b
  7373  01481C  0E0F               	movlw	15
  7374  01481E  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7375                           
  7376                           ; BSR set to: 0
  7377  014820  0012               	return	
  7378  014822                     
  7379                           ; BSR set to: 0
  7380                           ;Port.c: 53: return (BytePtr)&PORTC;
  7381                           
  7382                           ; BSR set to: 0
  7383  014822  0E82               	movlw	130
  7384  014824  6F60               	movwf	?_GetPortPORT& (0+255),b
  7385  014826  0E0F               	movlw	15
  7386  014828  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7387                           
  7388                           ; BSR set to: 0
  7389  01482A  0012               	return	
  7390  01482C                     
  7391                           ; BSR set to: 0
  7392                           ;Port.c: 55: return (BytePtr)&PORTD;
  7393                           
  7394                           ; BSR set to: 0
  7395  01482C  0E83               	movlw	131
  7396  01482E  6F60               	movwf	?_GetPortPORT& (0+255),b
  7397  014830  0E0F               	movlw	15
  7398  014832  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7399                           
  7400                           ; BSR set to: 0
  7401  014834  0012               	return	
  7402  014836                     
  7403                           ; BSR set to: 0
  7404                           ;Port.c: 57: return (BytePtr)&PORTE;
  7405                           
  7406                           ; BSR set to: 0
  7407  014836  0E84               	movlw	132
  7408  014838  6F60               	movwf	?_GetPortPORT& (0+255),b
  7409  01483A  0E0F               	movlw	15
  7410  01483C  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7411                           
  7412                           ; BSR set to: 0
  7413  01483E  0012               	return	
  7414  014840                     
  7415                           ; BSR set to: 0
  7416                           ;Port.c: 59: return (BytePtr)&PORTF;
  7417                           
  7418                           ; BSR set to: 0
  7419  014840  0E85               	movlw	133
  7420  014842  6F60               	movwf	?_GetPortPORT& (0+255),b
  7421  014844  0E0F               	movlw	15
  7422  014846  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7423                           
  7424                           ; BSR set to: 0
  7425  014848  0012               	return	
  7426  01484A                     
  7427                           ; BSR set to: 0
  7428                           ;Port.c: 61: return (BytePtr)&PORTG;
  7429                           
  7430                           ; BSR set to: 0
  7431  01484A  0E86               	movlw	134
  7432  01484C  6F60               	movwf	?_GetPortPORT& (0+255),b
  7433  01484E  0E0F               	movlw	15
  7434  014850  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7435                           
  7436                           ; BSR set to: 0
  7437  014852  0012               	return	
  7438  014854                     
  7439                           ; BSR set to: 0
  7440                           ;Port.c: 63: return (void*)0;
  7441                           
  7442                           ; BSR set to: 0
  7443  014854  0E00               	movlw	0
  7444  014856  6F60               	movwf	?_GetPortPORT& (0+255),b
  7445  014858  0E00               	movlw	0
  7446  01485A  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7447                           
  7448                           ; BSR set to: 0
  7449                           ;Port.c: 64: }
  7450                           
  7451                           ; BSR set to: 0
  7452  01485C  0012               	return	
  7453  01485E                     l350:
  7454                           
  7455                           ; BSR set to: 0
  7456  01485E  0100               	movlb	0	; () banked
  7457  014860  5162               	movf	GetPortPORT@pInput& (0+255),w,b
  7458                           
  7459                           ; Switch size 1, requested type "space"
  7460                           ; Number of cases is 7, Range of values is 0 to 6
  7461                           ; switch strategies available:
  7462                           ; Name         Instructions Cycles
  7463                           ; simple_byte           22    12 (average)
  7464                           ;	Chosen strategy is simple_byte
  7465  014862  0A00               	xorlw	0	; case 0
  7466  014864  B4D8               	btfsc	status,2,c
  7467  014866  D7D2               	goto	l351
  7468  014868  0A01               	xorlw	1	; case 1
  7469  01486A  B4D8               	btfsc	status,2,c
  7470  01486C  D7D5               	goto	l353
  7471  01486E  0A03               	xorlw	3	; case 2
  7472  014870  B4D8               	btfsc	status,2,c
  7473  014872  D7D7               	goto	l354
  7474  014874  0A01               	xorlw	1	; case 3
  7475  014876  B4D8               	btfsc	status,2,c
  7476  014878  D7D9               	goto	l355
  7477  01487A  0A07               	xorlw	7	; case 4
  7478  01487C  B4D8               	btfsc	status,2,c
  7479  01487E  D7DB               	goto	l356
  7480  014880  0A01               	xorlw	1	; case 5
  7481  014882  B4D8               	btfsc	status,2,c
  7482  014884  D7DD               	goto	l357
  7483  014886  0A03               	xorlw	3	; case 6
  7484  014888  B4D8               	btfsc	status,2,c
  7485  01488A  D7DF               	goto	l358
  7486  01488C  D7E3               	goto	l359
  7487  01488E                     __end_of_GetPortPORT:
  7488                           	opt stack 0
  7489                           tosu	equ	0xFFF
  7490                           tosh	equ	0xFFE
  7491                           tosl	equ	0xFFD
  7492                           pclath	equ	0xFFA
  7493                           tblptru	equ	0xFF8
  7494                           tblptrh	equ	0xFF7
  7495                           tblptrl	equ	0xFF6
  7496                           tablat	equ	0xFF5
  7497                           postinc0	equ	0xFEE
  7498                           wreg	equ	0xFE8
  7499                           postdec1	equ	0xFE5
  7500                           fsr1h	equ	0xFE2
  7501                           fsr1l	equ	0xFE1
  7502                           indf2	equ	0xFDF
  7503                           postinc2	equ	0xFDE
  7504                           postdec2	equ	0xFDD
  7505                           fsr2h	equ	0xFDA
  7506                           fsr2l	equ	0xFD9
  7507                           status	equ	0xFD8
  7508                           
  7509 ;; *************** function _LED_Init *****************
  7510 ;; Defined at:
  7511 ;;		line 15 in file "Library/LED.c"
  7512 ;; Parameters:    Size  Location     Type
  7513 ;;  pLED            1    wreg     enum E6739
  7514 ;; Auto vars:     Size  Location     Type
  7515 ;;  pLED            1   45[BANK0 ] enum E6739
  7516 ;; Return value:  Size  Location     Type
  7517 ;;                  1    wreg      void 
  7518 ;; Registers used:
  7519 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7520 ;; Tracked objects:
  7521 ;;		On entry : 0/0
  7522 ;;		On exit  : 0/0
  7523 ;;		Unchanged: 0/0
  7524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7526 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7528 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7529 ;;Total ram usage:        1 bytes
  7530 ;; Hardware stack levels used:    1
  7531 ;; Hardware stack levels required when called:   12
  7532 ;; This function calls:
  7533 ;;		_LED_Set
  7534 ;;		_Port_SetPinType
  7535 ;; This function is called by:
  7536 ;;		_MXK_Init
  7537 ;;		_main
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           	psect	text17
  7542  0151C4                     __ptext17:
  7543                           	opt stack 0
  7544  0151C4                     _LED_Init:
  7545                           	opt stack 17
  7546                           
  7547                           ; BSR set to: 0
  7548                           ;incstack = 0
  7549                           ;LED_Init@pLED stored from wreg
  7550  0151C4  0100               	movlb	0	; () banked
  7551  0151C6  6F8D               	movwf	LED_Init@pLED& (0+255),b
  7552                           
  7553                           ;LED.c: 17: switch (pLED)
  7554  0151C8  D018               	goto	l220
  7555  0151CA                     
  7556                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  7557  0151CA  0EAB               	movlw	low _PortC
  7558  0151CC  0100               	movlb	0	; () banked
  7559  0151CE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7560  0151D0  0E01               	movlw	high _PortC
  7561  0151D2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7562  0151D4  0E00               	movlw	0
  7563  0151D6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7564  0151D8  0E03               	movlw	3
  7565  0151DA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7566  0151DC  EC4E  F093         	call	_Port_SetPinType	;wreg free
  7567                           
  7568                           ;LED.c: 21: break;
  7569  0151E0  D014               	goto	l222
  7570  0151E2                     
  7571                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  7572  0151E2  0EAB               	movlw	low _PortC
  7573  0151E4  0100               	movlb	0	; () banked
  7574  0151E6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7575  0151E8  0E01               	movlw	high _PortC
  7576  0151EA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7577  0151EC  0E01               	movlw	1
  7578  0151EE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7579  0151F0  0E03               	movlw	3
  7580  0151F2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7581  0151F4  EC4E  F093         	call	_Port_SetPinType	;wreg free
  7582                           
  7583                           ;LED.c: 25: }
  7584                           
  7585                           ;LED.c: 24: break;
  7586  0151F8  D008               	goto	l222
  7587  0151FA                     l220:
  7588  0151FA  0100               	movlb	0	; () banked
  7589  0151FC  518D               	movf	LED_Init@pLED& (0+255),w,b
  7590                           
  7591                           ; Switch size 1, requested type "space"
  7592                           ; Number of cases is 2, Range of values is 0 to 1
  7593                           ; switch strategies available:
  7594                           ; Name         Instructions Cycles
  7595                           ; simple_byte            7     4 (average)
  7596                           ;	Chosen strategy is simple_byte
  7597  0151FE  0A00               	xorlw	0	; case 0
  7598  015200  B4D8               	btfsc	status,2,c
  7599  015202  D7E3               	goto	l221
  7600  015204  0A01               	xorlw	1	; case 1
  7601  015206  B4D8               	btfsc	status,2,c
  7602  015208  D7EC               	goto	l223
  7603  01520A                     l222:
  7604                           
  7605                           ;LED.c: 26: LED_Set(pLED, 0);
  7606                           
  7607                           ; BSR set to: 0
  7608  01520A  0E00               	movlw	0
  7609  01520C  0100               	movlb	0	; () banked
  7610  01520E  6F74               	movwf	LED_Set@pValue& (0+255),b
  7611  015210  518D               	movf	LED_Init@pLED& (0+255),w,b
  7612  015212  EC11  F0AB         	call	_LED_Set
  7613  015216  0012               	return		;funcret
  7614  015218                     __end_of_LED_Init:
  7615                           	opt stack 0
  7616                           tosu	equ	0xFFF
  7617                           tosh	equ	0xFFE
  7618                           tosl	equ	0xFFD
  7619                           pclath	equ	0xFFA
  7620                           tblptru	equ	0xFF8
  7621                           tblptrh	equ	0xFF7
  7622                           tblptrl	equ	0xFF6
  7623                           tablat	equ	0xFF5
  7624                           postinc0	equ	0xFEE
  7625                           wreg	equ	0xFE8
  7626                           postdec1	equ	0xFE5
  7627                           fsr1h	equ	0xFE2
  7628                           fsr1l	equ	0xFE1
  7629                           indf2	equ	0xFDF
  7630                           postinc2	equ	0xFDE
  7631                           postdec2	equ	0xFDD
  7632                           fsr2h	equ	0xFDA
  7633                           fsr2l	equ	0xFD9
  7634                           status	equ	0xFD8
  7635                           
  7636 ;; *************** function _LED_Set *****************
  7637 ;; Defined at:
  7638 ;;		line 33 in file "Library/LED.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;  pLED            1    wreg     enum E6739
  7641 ;;  pValue          1   20[BANK0 ] unsigned char 
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;  pLED            1   21[BANK0 ] enum E6739
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  1    wreg      void 
  7646 ;; Registers used:
  7647 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7653 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7656 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;Total ram usage:        2 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:   11
  7660 ;; This function calls:
  7661 ;;		_Port_SetPin
  7662 ;; This function is called by:
  7663 ;;		_LED_Init
  7664 ;;		_main
  7665 ;;		_SYSTEM_Initialize
  7666 ;; This function uses a non-reentrant model
  7667 ;;
  7668                           
  7669                           	psect	text18
  7670  015622                     __ptext18:
  7671                           	opt stack 0
  7672  015622                     _LED_Set:
  7673                           	opt stack 17
  7674                           
  7675                           ;incstack = 0
  7676                           ;LED_Set@pLED stored from wreg
  7677  015622  0100               	movlb	0	; () banked
  7678  015624  6F75               	movwf	LED_Set@pLED& (0+255),b
  7679                           
  7680                           ;LED.c: 35: switch (pLED)
  7681  015626  D018               	goto	l227
  7682  015628                     
  7683                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  7684  015628  0EAB               	movlw	low _PortC
  7685  01562A  0100               	movlb	0	; () banked
  7686  01562C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7687  01562E  0E01               	movlw	high _PortC
  7688  015630  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7689  015632  0E00               	movlw	0
  7690  015634  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7691  015636  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  7692  01563A  ECC1  F09F         	call	_Port_SetPin	;wreg free
  7693                           
  7694                           ;LED.c: 39: break;
  7695  01563E  0012               	return	
  7696  015640                     
  7697                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  7698  015640  0EAB               	movlw	low _PortC
  7699  015642  0100               	movlb	0	; () banked
  7700  015644  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7701  015646  0E01               	movlw	high _PortC
  7702  015648  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7703  01564A  0E01               	movlw	1
  7704  01564C  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7705  01564E  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  7706  015652  ECC1  F09F         	call	_Port_SetPin	;wreg free
  7707                           
  7708                           ;LED.c: 43: }
  7709                           
  7710                           ;LED.c: 42: break;
  7711  015656  0012               	return	
  7712  015658                     l227:
  7713  015658  0100               	movlb	0	; () banked
  7714  01565A  5175               	movf	LED_Set@pLED& (0+255),w,b
  7715                           
  7716                           ; Switch size 1, requested type "space"
  7717                           ; Number of cases is 2, Range of values is 0 to 1
  7718                           ; switch strategies available:
  7719                           ; Name         Instructions Cycles
  7720                           ; simple_byte            7     4 (average)
  7721                           ;	Chosen strategy is simple_byte
  7722  01565C  0A00               	xorlw	0	; case 0
  7723  01565E  B4D8               	btfsc	status,2,c
  7724  015660  D7E3               	goto	l228
  7725  015662  0A01               	xorlw	1	; case 1
  7726  015664  A4D8               	btfss	status,2,c
  7727  015666  0012               	return	
  7728  015668  D7EB               	goto	l230
  7729  01566A                     __end_of_LED_Set:
  7730                           	opt stack 0
  7731                           tosu	equ	0xFFF
  7732                           tosh	equ	0xFFE
  7733                           tosl	equ	0xFFD
  7734                           pclath	equ	0xFFA
  7735                           tblptru	equ	0xFF8
  7736                           tblptrh	equ	0xFF7
  7737                           tblptrl	equ	0xFF6
  7738                           tablat	equ	0xFF5
  7739                           postinc0	equ	0xFEE
  7740                           wreg	equ	0xFE8
  7741                           postdec1	equ	0xFE5
  7742                           fsr1h	equ	0xFE2
  7743                           fsr1l	equ	0xFE1
  7744                           indf2	equ	0xFDF
  7745                           postinc2	equ	0xFDE
  7746                           postdec2	equ	0xFDD
  7747                           fsr2h	equ	0xFDA
  7748                           fsr2l	equ	0xFD9
  7749                           status	equ	0xFD8
  7750                           
  7751 ;; *************** function _MXK_Dequeue *****************
  7752 ;; Defined at:
  7753 ;;		line 153 in file "Library/MXK.c"
  7754 ;; Parameters:    Size  Location     Type
  7755 ;;		None
  7756 ;; Auto vars:     Size  Location     Type
  7757 ;;		None
  7758 ;; Return value:  Size  Location     Type
  7759 ;;                  1    wreg      void 
  7760 ;; Registers used:
  7761 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7762 ;; Tracked objects:
  7763 ;;		On entry : 0/0
  7764 ;;		On exit  : 0/0
  7765 ;;		Unchanged: 0/0
  7766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7771 ;;Total ram usage:        0 bytes
  7772 ;; Hardware stack levels used:    1
  7773 ;; Hardware stack levels required when called:   12
  7774 ;; This function calls:
  7775 ;;		Absolute function
  7776 ;;		_Motor_Step
  7777 ;; This function is called by:
  7778 ;;		_main
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           	psect	text19
  7783  015AC4                     __ptext19:
  7784                           	opt stack 0
  7785  015AC4                     _MXK_Dequeue:
  7786                           	opt stack 18
  7787                           
  7788                           ;MXK.c: 155: if (lQueue)
  7789                           
  7790                           ;incstack = 0
  7791  015AC4  0100               	movlb	0	; () banked
  7792  015AC6  51E6               	movf	_lQueue& (0+255),w,b	;volatile
  7793  015AC8  11E7               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  7794  015ACA  11E8               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  7795  015ACC  B4D8               	btfsc	status,2,c
  7796  015ACE  D00C               	goto	u14259
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;MXK.c: 156: lQueue();
  7800  015AD0  D801               	call	u14258
  7801  015AD2  D00A               	goto	u14259
  7802  015AD4                     u14258:
  7803  015AD4  0005               	push	
  7804  015AD6  6EFA               	movwf	pclath,c
  7805  015AD8  51E6               	movf	_lQueue& (0+255),w,b	;volatile
  7806  015ADA  6EFD               	movwf	tosl,c
  7807  015ADC  51E7               	movf	(_lQueue+1)& (0+255),w,b	;volatile
  7808  015ADE  6EFE               	movwf	tosh,c
  7809  015AE0  51E8               	movf	(_lQueue+2)& (0+255),w,b	;volatile
  7810  015AE2  6EFF               	movwf	tosu,c
  7811  015AE4  50FA               	movf	pclath,w,c
  7812  015AE6  0012               	return		;indir
  7813  015AE8                     u14259:
  7814                           
  7815                           ;MXK.c: 157: lQueue = 0;
  7816  015AE8  0E00               	movlw	0
  7817  015AEA  0100               	movlb	0	; () banked
  7818  015AEC  6FE6               	movwf	_lQueue& (0+255),b	;volatile
  7819  015AEE  0E00               	movlw	0
  7820  015AF0  6FE7               	movwf	(_lQueue+1)& (0+255),b	;volatile
  7821  015AF2  0E00               	movlw	0
  7822  015AF4  6FE8               	movwf	(_lQueue+2)& (0+255),b	;volatile
  7823                           
  7824                           ; BSR set to: 0
  7825  015AF6  0012               	return		;funcret
  7826  015AF8                     __end_of_MXK_Dequeue:
  7827                           	opt stack 0
  7828                           tosu	equ	0xFFF
  7829                           tosh	equ	0xFFE
  7830                           tosl	equ	0xFFD
  7831                           pclath	equ	0xFFA
  7832                           tblptru	equ	0xFF8
  7833                           tblptrh	equ	0xFF7
  7834                           tblptrl	equ	0xFF6
  7835                           tablat	equ	0xFF5
  7836                           postinc0	equ	0xFEE
  7837                           wreg	equ	0xFE8
  7838                           postdec1	equ	0xFE5
  7839                           fsr1h	equ	0xFE2
  7840                           fsr1l	equ	0xFE1
  7841                           indf2	equ	0xFDF
  7842                           postinc2	equ	0xFDE
  7843                           postdec2	equ	0xFDD
  7844                           fsr2h	equ	0xFDA
  7845                           fsr2l	equ	0xFD9
  7846                           status	equ	0xFD8
  7847                           
  7848 ;; *************** function _Motor_Step *****************
  7849 ;; Defined at:
  7850 ;;		line 75 in file "Library/Motor.c"
  7851 ;; Parameters:    Size  Location     Type
  7852 ;;		None
  7853 ;; Auto vars:     Size  Location     Type
  7854 ;;		None
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  1    wreg      void 
  7857 ;; Registers used:
  7858 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7866 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7867 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7868 ;;Total ram usage:        2 bytes
  7869 ;; Hardware stack levels used:    1
  7870 ;; Hardware stack levels required when called:   11
  7871 ;; This function calls:
  7872 ;;		_MXK_Queue
  7873 ;;		_MXK_Release
  7874 ;;		_MXK_SwitchTo
  7875 ;;		_Port_SetPin
  7876 ;;		_Timer0_Restart
  7877 ;;		_Timer0_Stop
  7878 ;; This function is called by:
  7879 ;;		_Motor_Init
  7880 ;;		_Timer0_ISR
  7881 ;;		_MXK_Dequeue
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           	psect	text20
  7886  0138F0                     __ptext20:
  7887                           	opt stack 0
  7888  0138F0                     _Motor_Step:
  7889                           	opt stack 0
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;Skip over the trampoline to the duplicate function for level 2
  7893  0138F0  B251               	btfsc	btemp,1,c
  7894  0138F2  EF01  F09E         	goto	i2_Motor_Step
  7895  0138F6                     _Motor_Step$intlevel0:
  7896                           	opt stack 18
  7897                           
  7898                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
  7899                           
  7900                           ;incstack = 0
  7901  0138F6  0100               	movlb	0	; () banked
  7902  0138F8  EE20 F004          	lfsr	2,4
  7903  0138FC  51ED               	movf	_lMotor& (0+255),w,b
  7904  0138FE  26D9               	addwf	fsr2l,f,c
  7905  013900  51EE               	movf	(_lMotor+1)& (0+255),w,b
  7906  013902  22DA               	addwfc	fsr2h,f,c
  7907  013904  50DF               	movf	indf2,w,c
  7908  013906  EC9F  F0AC         	call	_MXK_SwitchTo
  7909  01390A  0900               	iorlw	0
  7910  01390C  B4D8               	btfsc	status,2,c
  7911  01390E  D06E               	goto	l1627
  7912                           
  7913                           ;Motor.c: 78: {
  7914                           ;Motor.c: 79: if (lMotor->mDelta != 0)
  7915  013910  C0ED  FFD9         	movff	_lMotor,fsr2l
  7916  013914  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7917  013918  50DE               	movf	postinc2,w,c
  7918  01391A  10DE               	iorwf	postinc2,w,c
  7919  01391C  B4D8               	btfsc	status,2,c
  7920  01391E  D061               	goto	l1628
  7921                           
  7922                           ;Motor.c: 80: {
  7923                           ;Motor.c: 82: if (lMotor->mDelta > 0)
  7924  013920  C0ED  FFD9         	movff	_lMotor,fsr2l
  7925  013924  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7926  013928  0E01               	movlw	1
  7927  01392A  BEDB               	btfsc	plusw2,7,c
  7928  01392C  D023               	goto	l1629
  7929  01392E  0E01               	movlw	1
  7930  013930  50DB               	movf	plusw2,w,c
  7931  013932  E103               	bnz	u12190
  7932  013934  04DE               	decf	postinc2,w,c
  7933  013936  A0D8               	btfss	status,0,c
  7934  013938  D01D               	goto	l1629
  7935  01393A                     u12190:
  7936                           
  7937                           ;Motor.c: 83: {
  7938                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
  7939  01393A  C0ED  FFD9         	movff	_lMotor,fsr2l
  7940  01393E  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7941  013942  28DE               	incf	postinc2,w,c
  7942  013944  E104               	bnz	u12200
  7943  013946  0E7F               	movlw	127
  7944  013948  18DE               	xorwf	postinc2,w,c
  7945  01394A  B4D8               	btfsc	status,2,c
  7946  01394C  D007               	goto	l1630
  7947  01394E                     u12200:
  7948                           
  7949                           ;Motor.c: 85: lMotor->mDelta --;
  7950  01394E  C0ED  FFD9         	movff	_lMotor,fsr2l
  7951  013952  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7952  013956  06DE               	decf	postinc2,f,c
  7953  013958  0E00               	movlw	0
  7954  01395A  5ADD               	subwfb	postdec2,f,c
  7955  01395C                     l1630:
  7956                           
  7957                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
  7958  01395C  0E8D               	movlw	low _PortE
  7959  01395E  0100               	movlb	0	; () banked
  7960  013960  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7961  013962  0E01               	movlw	high _PortE
  7962  013964  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7963  013966  0E00               	movlw	0
  7964  013968  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7965  01396A  0E01               	movlw	1
  7966  01396C  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7967  01396E  ECC1  F09F         	call	_Port_SetPin	;wreg free
  7968                           
  7969                           ;Motor.c: 88: }
  7970  013972  D01C               	goto	l1631
  7971  013974                     l1629:
  7972                           
  7973                           ;Motor.c: 89: else
  7974                           ;Motor.c: 90: {
  7975                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
  7976  013974  C0ED  FFD9         	movff	_lMotor,fsr2l
  7977  013978  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7978  01397C  04DE               	decf	postinc2,w,c
  7979  01397E  E104               	bnz	u12210
  7980  013980  0E80               	movlw	128
  7981  013982  18DE               	xorwf	postinc2,w,c
  7982  013984  B4D8               	btfsc	status,2,c
  7983  013986  D007               	goto	l1632
  7984  013988                     u12210:
  7985                           
  7986                           ;Motor.c: 92: lMotor->mDelta ++;
  7987  013988  C0ED  FFD9         	movff	_lMotor,fsr2l
  7988  01398C  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7989  013990  2ADE               	incf	postinc2,f,c
  7990  013992  0E00               	movlw	0
  7991  013994  22DD               	addwfc	postdec2,f,c
  7992  013996                     l1632:
  7993                           
  7994                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
  7995  013996  0E8D               	movlw	low _PortE
  7996  013998  0100               	movlb	0	; () banked
  7997  01399A  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7998  01399C  0E01               	movlw	high _PortE
  7999  01399E  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8000  0139A0  0E00               	movlw	0
  8001  0139A2  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  8002  0139A4  0E00               	movlw	0
  8003  0139A6  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  8004  0139A8  ECC1  F09F         	call	_Port_SetPin	;wreg free
  8005  0139AC                     l1631:
  8006                           
  8007                           ;Motor.c: 95: }
  8008                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
  8009  0139AC  0E8D               	movlw	low _PortE
  8010  0139AE  0100               	movlb	0	; () banked
  8011  0139B0  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  8012  0139B2  0E01               	movlw	high _PortE
  8013  0139B4  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8014  0139B6  0E01               	movlw	1
  8015  0139B8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  8016  0139BA  0E01               	movlw	1
  8017  0139BC  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  8018  0139BE  ECC1  F09F         	call	_Port_SetPin	;wreg free
  8019                           
  8020                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
  8021  0139C2  0E8D               	movlw	low _PortE
  8022  0139C4  0100               	movlb	0	; () banked
  8023  0139C6  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  8024  0139C8  0E01               	movlw	high _PortE
  8025  0139CA  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8026  0139CC  0E01               	movlw	1
  8027  0139CE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  8028  0139D0  0E00               	movlw	0
  8029  0139D2  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  8030  0139D4  ECC1  F09F         	call	_Port_SetPin	;wreg free
  8031                           
  8032                           ;Motor.c: 101: MXK_Release();
  8033  0139D8  EC51  F0AF         	call	_MXK_Release	;wreg free
  8034                           
  8035                           ;Motor.c: 102: Timer0_Restart();
  8036  0139DC  EC36  F0B0         	call	_Timer0_Restart	;wreg free
  8037                           
  8038                           ;Motor.c: 103: return;
  8039  0139E0  0012               	return	
  8040  0139E2                     l1628:
  8041                           
  8042                           ;Motor.c: 104: }
  8043                           ;Motor.c: 105: MXK_Release();
  8044  0139E2  EC51  F0AF         	call	_MXK_Release	;wreg free
  8045                           
  8046                           ;Motor.c: 106: Timer0_Stop();
  8047  0139E6  EC6A  F0B0         	call	_Timer0_Stop	;wreg free
  8048                           
  8049                           ;Motor.c: 107: return;
  8050  0139EA  0012               	return	
  8051  0139EC                     l1627:
  8052                           
  8053                           ;Motor.c: 108: }
  8054                           ;Motor.c: 111: MXK_Queue(lStepFunction);
  8055  0139EC  C10B  F060         	movff	_lStepFunction,MXK_Queue@pCallback
  8056  0139F0  C10C  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
  8057  0139F4  C10D  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
  8058  0139F8  EC1A  F0B0         	call	_MXK_Queue	;wreg free
  8059  0139FC  0012               	return		;funcret
  8060  0139FE                     __end_of_Motor_Step:
  8061                           	opt stack 0
  8062                           tosu	equ	0xFFF
  8063                           tosh	equ	0xFFE
  8064                           tosl	equ	0xFFD
  8065                           pclath	equ	0xFFA
  8066                           tblptru	equ	0xFF8
  8067                           tblptrh	equ	0xFF7
  8068                           tblptrl	equ	0xFF6
  8069                           tablat	equ	0xFF5
  8070                           postinc0	equ	0xFEE
  8071                           wreg	equ	0xFE8
  8072                           postdec1	equ	0xFE5
  8073                           fsr1h	equ	0xFE2
  8074                           fsr1l	equ	0xFE1
  8075                           indf2	equ	0xFDF
  8076                           postinc2	equ	0xFDE
  8077                           postdec2	equ	0xFDD
  8078                           plusw2	equ	0xFDB
  8079                           fsr2h	equ	0xFDA
  8080                           fsr2l	equ	0xFD9
  8081                           status	equ	0xFD8
  8082                           
  8083 ;; *************** function _Timer0_Stop *****************
  8084 ;; Defined at:
  8085 ;;		line 89 in file "Library/Timer0.c"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;		None
  8088 ;; Auto vars:     Size  Location     Type
  8089 ;;		None
  8090 ;; Return value:  Size  Location     Type
  8091 ;;                  1    wreg      void 
  8092 ;; Registers used:
  8093 ;;		None
  8094 ;; Tracked objects:
  8095 ;;		On entry : 0/0
  8096 ;;		On exit  : 0/0
  8097 ;;		Unchanged: 0/0
  8098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8103 ;;Total ram usage:        0 bytes
  8104 ;; Hardware stack levels used:    1
  8105 ;; Hardware stack levels required when called:    7
  8106 ;; This function calls:
  8107 ;;		Nothing
  8108 ;; This function is called by:
  8109 ;;		_Motor_Step
  8110 ;; This function uses a non-reentrant model
  8111 ;;
  8112                           
  8113                           	psect	text21
  8114  0160D4                     __ptext21:
  8115                           	opt stack 0
  8116  0160D4                     _Timer0_Stop:
  8117                           	opt stack 21
  8118                           
  8119                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
  8120                           
  8121                           ;incstack = 0
  8122  0160D4  9AF2               	bcf	intcon,5,c	;volatile
  8123                           
  8124                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
  8125  0160D6  94F2               	bcf	intcon,2,c	;volatile
  8126  0160D8  0012               	return		;funcret
  8127  0160DA                     __end_of_Timer0_Stop:
  8128                           	opt stack 0
  8129                           tosu	equ	0xFFF
  8130                           tosh	equ	0xFFE
  8131                           tosl	equ	0xFFD
  8132                           pclath	equ	0xFFA
  8133                           tblptru	equ	0xFF8
  8134                           tblptrh	equ	0xFF7
  8135                           tblptrl	equ	0xFF6
  8136                           tablat	equ	0xFF5
  8137                           intcon	equ	0xFF2
  8138                           postinc0	equ	0xFEE
  8139                           wreg	equ	0xFE8
  8140                           postdec1	equ	0xFE5
  8141                           fsr1h	equ	0xFE2
  8142                           fsr1l	equ	0xFE1
  8143                           indf2	equ	0xFDF
  8144                           postinc2	equ	0xFDE
  8145                           postdec2	equ	0xFDD
  8146                           plusw2	equ	0xFDB
  8147                           fsr2h	equ	0xFDA
  8148                           fsr2l	equ	0xFD9
  8149                           status	equ	0xFD8
  8150                           
  8151 ;; *************** function _Timer0_Restart *****************
  8152 ;; Defined at:
  8153 ;;		line 83 in file "Library/Timer0.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;		None
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;		None
  8158 ;; Return value:  Size  Location     Type
  8159 ;;                  1    wreg      void 
  8160 ;; Registers used:
  8161 ;;		None
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8171 ;;Total ram usage:        0 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; Hardware stack levels required when called:    7
  8174 ;; This function calls:
  8175 ;;		Nothing
  8176 ;; This function is called by:
  8177 ;;		_Motor_Step
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           	psect	text22
  8182  01606C                     __ptext22:
  8183                           	opt stack 0
  8184  01606C                     _Timer0_Restart:
  8185                           	opt stack 21
  8186                           
  8187                           ;Timer0.c: 85: TMR0 = COUNTER;
  8188                           
  8189                           ;incstack = 0
  8190  01606C  C033  FFD6         	movff	_COUNTER,4054	;volatile
  8191  016070  C034  FFD7         	movff	_COUNTER+1,4055	;volatile
  8192                           
  8193                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
  8194  016074  8AF2               	bsf	intcon,5,c	;volatile
  8195  016076  0012               	return		;funcret
  8196  016078                     __end_of_Timer0_Restart:
  8197                           	opt stack 0
  8198                           tosu	equ	0xFFF
  8199                           tosh	equ	0xFFE
  8200                           tosl	equ	0xFFD
  8201                           pclath	equ	0xFFA
  8202                           tblptru	equ	0xFF8
  8203                           tblptrh	equ	0xFF7
  8204                           tblptrl	equ	0xFF6
  8205                           tablat	equ	0xFF5
  8206                           intcon	equ	0xFF2
  8207                           postinc0	equ	0xFEE
  8208                           wreg	equ	0xFE8
  8209                           postdec1	equ	0xFE5
  8210                           fsr1h	equ	0xFE2
  8211                           fsr1l	equ	0xFE1
  8212                           indf2	equ	0xFDF
  8213                           postinc2	equ	0xFDE
  8214                           postdec2	equ	0xFDD
  8215                           plusw2	equ	0xFDB
  8216                           fsr2h	equ	0xFDA
  8217                           fsr2l	equ	0xFD9
  8218                           status	equ	0xFD8
  8219                           
  8220 ;; *************** function _MXK_SwitchTo *****************
  8221 ;; Defined at:
  8222 ;;		line 105 in file "Library/MXK.c"
  8223 ;; Parameters:    Size  Location     Type
  8224 ;;  pModule         1    wreg     enum E6927
  8225 ;; Auto vars:     Size  Location     Type
  8226 ;;  pModule         1    7[BANK0 ] enum E6927
  8227 ;;  CUR             1    6[BANK0 ] unsigned char 
  8228 ;; Return value:  Size  Location     Type
  8229 ;;                  1    wreg      unsigned char 
  8230 ;; Registers used:
  8231 ;;		wreg, status,2, status,0, cstack
  8232 ;; Tracked objects:
  8233 ;;		On entry : 0/0
  8234 ;;		On exit  : 0/0
  8235 ;;		Unchanged: 0/0
  8236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8238 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8241 ;;Total ram usage:        2 bytes
  8242 ;; Hardware stack levels used:    1
  8243 ;; Hardware stack levels required when called:    8
  8244 ;; This function calls:
  8245 ;;		_delay_us
  8246 ;; This function is called by:
  8247 ;;		_Motor_Step
  8248 ;; This function uses a non-reentrant model
  8249 ;;
  8250                           
  8251                           	psect	text23
  8252  01593E                     __ptext23:
  8253                           	opt stack 0
  8254  01593E                     _MXK_SwitchTo:
  8255                           	opt stack 20
  8256                           
  8257                           ;incstack = 0
  8258                           ;MXK_SwitchTo@pModule stored from wreg
  8259  01593E  0100               	movlb	0	; () banked
  8260  015940  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
  8261                           
  8262                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
  8263  015942  5086               	movf	3974,w,c	;volatile
  8264  015944  0B0F               	andlw	15
  8265  015946  0100               	movlb	0	; () banked
  8266  015948  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
  8270  01594A  504C               	movf	_Bus_State,w,c
  8271  01594C  A4D8               	btfss	status,2,c
  8272  01594E  D002               	goto	l1730
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;MXK.c: 110: return 0;
  8276  015950  0E00               	movlw	0
  8277                           
  8278                           ; BSR set to: 0
  8279  015952  0012               	return	
  8280  015954                     l1730:
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;MXK.c: 112: Bus_State = eMXK_Busy;
  8284                           
  8285                           ; BSR set to: 0
  8286  015954  0E00               	movlw	0
  8287  015956  6E4C               	movwf	_Bus_State,c
  8288                           
  8289                           ; BSR set to: 0
  8290                           ;MXK.c: 114: if (CUR != pModule)
  8291  015958  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8292  01595A  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
  8293  01595C  B4D8               	btfsc	status,2,c
  8294  01595E  D00A               	goto	l1732
  8295                           
  8296                           ; BSR set to: 0
  8297                           ;MXK.c: 115: {
  8298                           ;MXK.c: 116: PORTG &= ~(0xF);
  8299  015960  0EF0               	movlw	240
  8300  015962  1686               	andwf	3974,f,c	;volatile
  8301                           
  8302                           ;MXK.c: 117: PORTG |= pModule;
  8303  015964  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8304  015966  1286               	iorwf	3974,f,c	;volatile
  8305                           
  8306                           ; BSR set to: 0
  8307                           ;MXK.c: 120: delay_us(10);
  8308  015968  0E00               	movlw	0
  8309  01596A  6F61               	movwf	(delay_us@us+1)& (0+255),b
  8310  01596C  0E0A               	movlw	10
  8311  01596E  6F60               	movwf	delay_us@us& (0+255),b
  8312  015970  EC7D  F0AB         	call	_delay_us	;wreg free
  8313  015974                     l1732:
  8314                           
  8315                           ;MXK.c: 121: }
  8316                           ;MXK.c: 122: return 1;
  8317  015974  0E01               	movlw	1
  8318  015976  0012               	return	
  8319  015978                     __end_of_MXK_SwitchTo:
  8320                           	opt stack 0
  8321                           tosu	equ	0xFFF
  8322                           tosh	equ	0xFFE
  8323                           tosl	equ	0xFFD
  8324                           pclath	equ	0xFFA
  8325                           tblptru	equ	0xFF8
  8326                           tblptrh	equ	0xFF7
  8327                           tblptrl	equ	0xFF6
  8328                           tablat	equ	0xFF5
  8329                           intcon	equ	0xFF2
  8330                           postinc0	equ	0xFEE
  8331                           wreg	equ	0xFE8
  8332                           postdec1	equ	0xFE5
  8333                           fsr1h	equ	0xFE2
  8334                           fsr1l	equ	0xFE1
  8335                           indf2	equ	0xFDF
  8336                           postinc2	equ	0xFDE
  8337                           postdec2	equ	0xFDD
  8338                           plusw2	equ	0xFDB
  8339                           fsr2h	equ	0xFDA
  8340                           fsr2l	equ	0xFD9
  8341                           status	equ	0xFD8
  8342                           
  8343 ;; *************** function _MXK_Release *****************
  8344 ;; Defined at:
  8345 ;;		line 130 in file "Library/MXK.c"
  8346 ;; Parameters:    Size  Location     Type
  8347 ;;		None
  8348 ;; Auto vars:     Size  Location     Type
  8349 ;;		None
  8350 ;; Return value:  Size  Location     Type
  8351 ;;                  1    wreg      unsigned char 
  8352 ;; Registers used:
  8353 ;;		wreg, status,2, status,0
  8354 ;; Tracked objects:
  8355 ;;		On entry : 0/0
  8356 ;;		On exit  : 0/0
  8357 ;;		Unchanged: 0/0
  8358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8363 ;;Total ram usage:        0 bytes
  8364 ;; Hardware stack levels used:    1
  8365 ;; Hardware stack levels required when called:    7
  8366 ;; This function calls:
  8367 ;;		Nothing
  8368 ;; This function is called by:
  8369 ;;		_Motor_Step
  8370 ;;		_main
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374                           	psect	text24
  8375  015EA2                     __ptext24:
  8376                           	opt stack 0
  8377  015EA2                     _MXK_Release:
  8378                           	opt stack 23
  8379                           
  8380                           ;MXK.c: 132: Bus_State = eMXK_Idle;
  8381                           
  8382                           ;incstack = 0
  8383  015EA2  0E01               	movlw	1
  8384  015EA4  6E4C               	movwf	_Bus_State,c
  8385                           
  8386                           ;MXK.c: 134: if (lQueue != 0)
  8387  015EA6  0100               	movlb	0	; () banked
  8388  015EA8  51E6               	movf	_lQueue& (0+255),w,b	;volatile
  8389  015EAA  11E7               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  8390  015EAC  11E8               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  8391  015EAE  B4D8               	btfsc	status,2,c
  8392  015EB0  D002               	goto	l1735
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;MXK.c: 135: return 1;
  8396  015EB2  0E01               	movlw	1
  8397                           
  8398                           ; BSR set to: 0
  8399  015EB4  0012               	return	
  8400  015EB6                     l1735:
  8401                           
  8402                           ; BSR set to: 0
  8403                           ;MXK.c: 137: return 0;
  8404                           
  8405                           ; BSR set to: 0
  8406  015EB6  0E00               	movlw	0
  8407  015EB8  0012               	return	
  8408  015EBA                     __end_of_MXK_Release:
  8409                           	opt stack 0
  8410                           tosu	equ	0xFFF
  8411                           tosh	equ	0xFFE
  8412                           tosl	equ	0xFFD
  8413                           pclath	equ	0xFFA
  8414                           tblptru	equ	0xFF8
  8415                           tblptrh	equ	0xFF7
  8416                           tblptrl	equ	0xFF6
  8417                           tablat	equ	0xFF5
  8418                           intcon	equ	0xFF2
  8419                           postinc0	equ	0xFEE
  8420                           wreg	equ	0xFE8
  8421                           postdec1	equ	0xFE5
  8422                           fsr1h	equ	0xFE2
  8423                           fsr1l	equ	0xFE1
  8424                           indf2	equ	0xFDF
  8425                           postinc2	equ	0xFDE
  8426                           postdec2	equ	0xFDD
  8427                           plusw2	equ	0xFDB
  8428                           fsr2h	equ	0xFDA
  8429                           fsr2l	equ	0xFD9
  8430                           status	equ	0xFD8
  8431                           
  8432 ;; *************** function _MXK_Queue *****************
  8433 ;; Defined at:
  8434 ;;		line 144 in file "Library/MXK.c"
  8435 ;; Parameters:    Size  Location     Type
  8436 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
  8437 ;;		 -> Absolute function(1), Motor_Step(1), 
  8438 ;; Auto vars:     Size  Location     Type
  8439 ;;		None
  8440 ;; Return value:  Size  Location     Type
  8441 ;;                  1    wreg      void 
  8442 ;; Registers used:
  8443 ;;		wreg, status,2, status,0
  8444 ;; Tracked objects:
  8445 ;;		On entry : 0/0
  8446 ;;		On exit  : 0/0
  8447 ;;		Unchanged: 0/0
  8448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8449 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8452 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8453 ;;Total ram usage:        3 bytes
  8454 ;; Hardware stack levels used:    1
  8455 ;; Hardware stack levels required when called:    7
  8456 ;; This function calls:
  8457 ;;		Nothing
  8458 ;; This function is called by:
  8459 ;;		_Motor_Step
  8460 ;; This function uses a non-reentrant model
  8461 ;;
  8462                           
  8463                           	psect	text25
  8464  016034                     __ptext25:
  8465                           	opt stack 0
  8466  016034                     _MXK_Queue:
  8467                           	opt stack 21
  8468                           
  8469                           ;MXK.c: 146: lQueue = pCallback;
  8470                           
  8471                           ; BSR set to: 0
  8472                           ;incstack = 0
  8473  016034  C060  F0E6         	movff	MXK_Queue@pCallback,_lQueue	;volatile
  8474  016038  C061  F0E7         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
  8475  01603C  C062  F0E8         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
  8476  016040  0012               	return		;funcret
  8477  016042                     __end_of_MXK_Queue:
  8478                           	opt stack 0
  8479                           tosu	equ	0xFFF
  8480                           tosh	equ	0xFFE
  8481                           tosl	equ	0xFFD
  8482                           pclath	equ	0xFFA
  8483                           tblptru	equ	0xFF8
  8484                           tblptrh	equ	0xFF7
  8485                           tblptrl	equ	0xFF6
  8486                           tablat	equ	0xFF5
  8487                           intcon	equ	0xFF2
  8488                           postinc0	equ	0xFEE
  8489                           wreg	equ	0xFE8
  8490                           postdec1	equ	0xFE5
  8491                           fsr1h	equ	0xFE2
  8492                           fsr1l	equ	0xFE1
  8493                           indf2	equ	0xFDF
  8494                           postinc2	equ	0xFDE
  8495                           postdec2	equ	0xFDD
  8496                           plusw2	equ	0xFDB
  8497                           fsr2h	equ	0xFDA
  8498                           fsr2l	equ	0xFD9
  8499                           status	equ	0xFD8
  8500                           
  8501 ;; *************** function _MXK_BlockSwitchTo *****************
  8502 ;; Defined at:
  8503 ;;		line 82 in file "Library/MXK.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  pModule         1    wreg     enum E6927
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;  pModule         1    7[BANK0 ] enum E6927
  8508 ;;  CUR             1    6[BANK0 ] unsigned char 
  8509 ;; Return value:  Size  Location     Type
  8510 ;;                  1    wreg      unsigned char 
  8511 ;; Registers used:
  8512 ;;		wreg, status,2, status,0, cstack
  8513 ;; Tracked objects:
  8514 ;;		On entry : 0/0
  8515 ;;		On exit  : 0/0
  8516 ;;		Unchanged: 0/0
  8517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8519 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8521 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8522 ;;Total ram usage:        2 bytes
  8523 ;; Hardware stack levels used:    1
  8524 ;; Hardware stack levels required when called:    8
  8525 ;; This function calls:
  8526 ;;		_delay_us
  8527 ;; This function is called by:
  8528 ;;		_main
  8529 ;; This function uses a non-reentrant model
  8530 ;;
  8531                           
  8532                           	psect	text26
  8533  0159EC                     __ptext26:
  8534                           	opt stack 0
  8535  0159EC                     _MXK_BlockSwitchTo:
  8536                           	opt stack 22
  8537                           
  8538                           ;incstack = 0
  8539                           ;MXK_BlockSwitchTo@pModule stored from wreg
  8540  0159EC  0100               	movlb	0	; () banked
  8541  0159EE  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
  8542                           
  8543                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
  8544  0159F0  5086               	movf	3974,w,c	;volatile
  8545  0159F2  0B0F               	andlw	15
  8546  0159F4  0100               	movlb	0	; () banked
  8547  0159F6  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
  8548  0159F8                     
  8549                           ; BSR set to: 0
  8550                           
  8551                           ; BSR set to: 0
  8552  0159F8  504C               	movf	_Bus_State,w,c
  8553  0159FA  B4D8               	btfsc	status,2,c
  8554  0159FC  D7FD               	goto	l1724
  8555                           
  8556                           ;MXK.c: 88: Bus_State = eMXK_Busy;
  8557  0159FE  0E00               	movlw	0
  8558  015A00  6E4C               	movwf	_Bus_State,c
  8559                           
  8560                           ;MXK.c: 90: if (CUR != pModule)
  8561  015A02  0100               	movlb	0	; () banked
  8562  015A04  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8563  015A06  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
  8564  015A08  B4D8               	btfsc	status,2,c
  8565  015A0A  D00A               	goto	l1726
  8566                           
  8567                           ; BSR set to: 0
  8568                           ;MXK.c: 91: {
  8569                           ;MXK.c: 92: PORTG &= ~(0xF);
  8570  015A0C  0EF0               	movlw	240
  8571  015A0E  1686               	andwf	3974,f,c	;volatile
  8572                           
  8573                           ;MXK.c: 93: PORTG |= pModule;
  8574  015A10  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8575  015A12  1286               	iorwf	3974,f,c	;volatile
  8576                           
  8577                           ; BSR set to: 0
  8578                           ;MXK.c: 96: delay_us(10);
  8579  015A14  0E00               	movlw	0
  8580  015A16  6F61               	movwf	(delay_us@us+1)& (0+255),b
  8581  015A18  0E0A               	movlw	10
  8582  015A1A  6F60               	movwf	delay_us@us& (0+255),b
  8583  015A1C  EC7D  F0AB         	call	_delay_us	;wreg free
  8584  015A20                     l1726:
  8585                           
  8586                           ;MXK.c: 97: }
  8587                           ;MXK.c: 98: return 1;
  8588  015A20  0E01               	movlw	1
  8589  015A22  0012               	return	
  8590  015A24                     __end_of_MXK_BlockSwitchTo:
  8591                           	opt stack 0
  8592                           tosu	equ	0xFFF
  8593                           tosh	equ	0xFFE
  8594                           tosl	equ	0xFFD
  8595                           pclath	equ	0xFFA
  8596                           tblptru	equ	0xFF8
  8597                           tblptrh	equ	0xFF7
  8598                           tblptrl	equ	0xFF6
  8599                           tablat	equ	0xFF5
  8600                           intcon	equ	0xFF2
  8601                           postinc0	equ	0xFEE
  8602                           wreg	equ	0xFE8
  8603                           postdec1	equ	0xFE5
  8604                           fsr1h	equ	0xFE2
  8605                           fsr1l	equ	0xFE1
  8606                           indf2	equ	0xFDF
  8607                           postinc2	equ	0xFDE
  8608                           postdec2	equ	0xFDD
  8609                           plusw2	equ	0xFDB
  8610                           fsr2h	equ	0xFDA
  8611                           fsr2l	equ	0xFD9
  8612                           status	equ	0xFD8
  8613                           
  8614 ;; *************** function _delay_us *****************
  8615 ;; Defined at:
  8616 ;;		line 255 in file "Library/Types.c"
  8617 ;; Parameters:    Size  Location     Type
  8618 ;;  us              2    0[BANK0 ] unsigned short 
  8619 ;; Auto vars:     Size  Location     Type
  8620 ;;  u               4    2[BANK0 ] unsigned long 
  8621 ;; Return value:  Size  Location     Type
  8622 ;;                  1    wreg      void 
  8623 ;; Registers used:
  8624 ;;		wreg, status,2, status,0
  8625 ;; Tracked objects:
  8626 ;;		On entry : 0/0
  8627 ;;		On exit  : 0/0
  8628 ;;		Unchanged: 0/0
  8629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8630 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8631 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8633 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8634 ;;Total ram usage:        6 bytes
  8635 ;; Hardware stack levels used:    1
  8636 ;; Hardware stack levels required when called:    7
  8637 ;; This function calls:
  8638 ;;		Nothing
  8639 ;; This function is called by:
  8640 ;;		_MXK_BlockSwitchTo
  8641 ;;		_MXK_SwitchTo
  8642 ;; This function uses a non-reentrant model
  8643 ;;
  8644                           
  8645                           	psect	text27
  8646  0156FA                     __ptext27:
  8647                           	opt stack 0
  8648  0156FA                     _delay_us:
  8649                           	opt stack 20
  8650                           
  8651                           ;Types.c: 256: unsigned long u;
  8652                           ;Types.c: 257: while (us--) {
  8653                           
  8654                           ;incstack = 0
  8655  0156FA  D018               	goto	u11330
  8656  0156FC                     l13993:
  8657                           
  8658                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
  8659  0156FC  0E00               	movlw	0
  8660  0156FE  0100               	movlb	0	; () banked
  8661  015700  6F62               	movwf	delay_us@u& (0+255),b
  8662  015702  0E00               	movlw	0
  8663  015704  6F63               	movwf	(delay_us@u+1)& (0+255),b
  8664  015706  0E00               	movlw	0
  8665  015708  6F64               	movwf	(delay_us@u+2)& (0+255),b
  8666  01570A  0E00               	movlw	0
  8667  01570C  6F65               	movwf	(delay_us@u+3)& (0+255),b
  8668  01570E                     l13995:
  8669                           
  8670                           ; BSR set to: 0
  8671  01570E  5162               	movf	delay_us@u& (0+255),w,b
  8672  015710  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
  8673  015712  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
  8674  015714  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
  8675  015716  A4D8               	btfss	status,2,c
  8676  015718  D009               	goto	u11330
  8677                           
  8678                           ; BSR set to: 0
  8679                           
  8680                           ; BSR set to: 0
  8681  01571A  F000               	nop		; ;# 
  8682  01571C  0E01               	movlw	1
  8683  01571E  0100               	movlb	0	; () banked
  8684  015720  2762               	addwf	delay_us@u& (0+255),f,b
  8685  015722  0E00               	movlw	0
  8686  015724  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
  8687  015726  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
  8688  015728  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
  8689  01572A  D7F1               	goto	l13995
  8690  01572C                     u11330:
  8691                           
  8692                           ; BSR set to: 0
  8693                           
  8694                           ; BSR set to: 0
  8695  01572C  0100               	movlb	0	; () banked
  8696  01572E  0760               	decf	delay_us@us& (0+255),f,b
  8697  015730  A0D8               	btfss	status,0,c
  8698  015732  0761               	decf	(delay_us@us+1)& (0+255),f,b
  8699  015734  2960               	incf	delay_us@us& (0+255),w,b
  8700  015736  E1E2               	bnz	l13993
  8701  015738  2961               	incf	(delay_us@us+1)& (0+255),w,b
  8702  01573A  B4D8               	btfsc	status,2,c
  8703  01573C  0012               	return	
  8704  01573E  D7DE               	goto	l832
  8705  015740                     __end_of_delay_us:
  8706                           	opt stack 0
  8707                           tosu	equ	0xFFF
  8708                           tosh	equ	0xFFE
  8709                           tosl	equ	0xFFD
  8710                           pclath	equ	0xFFA
  8711                           tblptru	equ	0xFF8
  8712                           tblptrh	equ	0xFF7
  8713                           tblptrl	equ	0xFF6
  8714                           tablat	equ	0xFF5
  8715                           intcon	equ	0xFF2
  8716                           postinc0	equ	0xFEE
  8717                           wreg	equ	0xFE8
  8718                           postdec1	equ	0xFE5
  8719                           fsr1h	equ	0xFE2
  8720                           fsr1l	equ	0xFE1
  8721                           indf2	equ	0xFDF
  8722                           postinc2	equ	0xFDE
  8723                           postdec2	equ	0xFDD
  8724                           plusw2	equ	0xFDB
  8725                           fsr2h	equ	0xFDA
  8726                           fsr2l	equ	0xFD9
  8727                           status	equ	0xFD8
  8728                           
  8729 ;; *************** function _LEDToggle *****************
  8730 ;; Defined at:
  8731 ;;		line 260 in file "main.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;		None
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;		None
  8736 ;; Return value:  Size  Location     Type
  8737 ;;                  1    wreg      void 
  8738 ;; Registers used:
  8739 ;;		wreg, status,2, status,0, cstack
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8749 ;;Total ram usage:        0 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:    9
  8752 ;; This function calls:
  8753 ;;		_LEDOff
  8754 ;;		_LEDOn
  8755 ;; This function is called by:
  8756 ;;		_main
  8757 ;; This function uses a non-reentrant model
  8758 ;;
  8759                           
  8760                           	psect	text28
  8761  015886                     __ptext28:
  8762                           	opt stack 0
  8763  015886                     _LEDToggle:
  8764                           	opt stack 21
  8765                           
  8766                           ;main.c: 262: if (INTCONbits.TMR0IF == 1) {
  8767                           
  8768                           ; BSR set to: 0
  8769                           ;incstack = 0
  8770  015886  A4F2               	btfss	intcon,2,c	;volatile
  8771  015888  0012               	return	
  8772                           
  8773                           ;main.c: 263: INTCONbits.TMR0IF = 0;
  8774  01588A  94F2               	bcf	intcon,2,c	;volatile
  8775                           
  8776                           ;main.c: 264: timercount++;
  8777  01588C  0101               	movlb	1	; () banked
  8778  01588E  4B1E               	infsnz	_timercount& (0+255),f,b
  8779  015890  2B1F               	incf	(_timercount+1)& (0+255),f,b
  8780                           
  8781                           ; BSR set to: 1
  8782                           ;main.c: 265: if (timercount == countOn) {
  8783  015892  51EF               	movf	_countOn& (0+255),w,b
  8784  015894  191E               	xorwf	_timercount& (0+255),w,b
  8785  015896  E105               	bnz	l15499
  8786  015898  51F0               	movf	(_countOn+1)& (0+255),w,b
  8787  01589A  191F               	xorwf	(_timercount+1)& (0+255),w,b
  8788  01589C  B4D8               	btfsc	status,2,c
  8789                           
  8790                           ; BSR set to: 1
  8791                           ;main.c: 266: LEDOn();
  8792  01589E  EC1D  F0AF         	call	_LEDOn	;wreg free
  8793  0158A2                     l15499:
  8794                           
  8795                           ;main.c: 267: }
  8796                           ;main.c: 268: if (timercount == countOff) {
  8797  0158A2  0101               	movlb	1	; () banked
  8798  0158A4  51ED               	movf	_countOff& (0+255),w,b
  8799  0158A6  191E               	xorwf	_timercount& (0+255),w,b
  8800  0158A8  E10C               	bnz	l2186
  8801  0158AA  51EE               	movf	(_countOff+1)& (0+255),w,b
  8802  0158AC  191F               	xorwf	(_timercount+1)& (0+255),w,b
  8803  0158AE  A4D8               	btfss	status,2,c
  8804  0158B0  0012               	return	
  8805                           
  8806                           ; BSR set to: 1
  8807                           ;main.c: 269: LEDOff();
  8808  0158B2  EC2A  F0AF         	call	_LEDOff	;wreg free
  8809                           
  8810                           ;main.c: 270: timercount = 0;
  8811  0158B6  0E00               	movlw	0
  8812  0158B8  0101               	movlb	1	; () banked
  8813  0158BA  6F1F               	movwf	(_timercount+1)& (0+255),b
  8814  0158BC  0E00               	movlw	0
  8815  0158BE  6F1E               	movwf	_timercount& (0+255),b
  8816                           
  8817                           ; BSR set to: 1
  8818  0158C0  0012               	return	
  8819  0158C2                     l2186:
  8820  0158C2  0012               	return		;funcret
  8821  0158C4                     __end_of_LEDToggle:
  8822                           	opt stack 0
  8823                           tosu	equ	0xFFF
  8824                           tosh	equ	0xFFE
  8825                           tosl	equ	0xFFD
  8826                           pclath	equ	0xFFA
  8827                           tblptru	equ	0xFF8
  8828                           tblptrh	equ	0xFF7
  8829                           tblptrl	equ	0xFF6
  8830                           tablat	equ	0xFF5
  8831                           intcon	equ	0xFF2
  8832                           postinc0	equ	0xFEE
  8833                           wreg	equ	0xFE8
  8834                           postdec1	equ	0xFE5
  8835                           fsr1h	equ	0xFE2
  8836                           fsr1l	equ	0xFE1
  8837                           indf2	equ	0xFDF
  8838                           postinc2	equ	0xFDE
  8839                           postdec2	equ	0xFDD
  8840                           plusw2	equ	0xFDB
  8841                           fsr2h	equ	0xFDA
  8842                           fsr2l	equ	0xFD9
  8843                           status	equ	0xFD8
  8844                           
  8845 ;; *************** function _LEDOn *****************
  8846 ;; Defined at:
  8847 ;;		line 246 in file "main.c"
  8848 ;; Parameters:    Size  Location     Type
  8849 ;;		None
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;		None
  8852 ;; Return value:  Size  Location     Type
  8853 ;;                  1    wreg      void 
  8854 ;; Registers used:
  8855 ;;		wreg, cstack
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/0
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8865 ;;Total ram usage:        0 bytes
  8866 ;; Hardware stack levels used:    1
  8867 ;; Hardware stack levels required when called:    8
  8868 ;; This function calls:
  8869 ;;		_eusartSend
  8870 ;; This function is called by:
  8871 ;;		_LEDToggle
  8872 ;; This function uses a non-reentrant model
  8873 ;;
  8874                           
  8875                           	psect	text29
  8876  015E3A                     __ptext29:
  8877                           	opt stack 0
  8878  015E3A                     _LEDOn:
  8879                           	opt stack 21
  8880                           
  8881                           ;main.c: 247: eusartSend(139);
  8882                           
  8883                           ;incstack = 0
  8884  015E3A  0E8B               	movlw	139
  8885  015E3C  EC28  F0B0         	call	_eusartSend
  8886                           
  8887                           ;main.c: 248: eusartSend(10);
  8888  015E40  0E0A               	movlw	10
  8889  015E42  EC28  F0B0         	call	_eusartSend
  8890                           
  8891                           ;main.c: 249: eusartSend(255);
  8892  015E46  0EFF               	movlw	255
  8893  015E48  EC28  F0B0         	call	_eusartSend
  8894                           
  8895                           ;main.c: 250: eusartSend(255);
  8896  015E4C  0EFF               	movlw	255
  8897  015E4E  EC28  F0B0         	call	_eusartSend
  8898  015E52  0012               	return		;funcret
  8899  015E54                     __end_of_LEDOn:
  8900                           	opt stack 0
  8901                           tosu	equ	0xFFF
  8902                           tosh	equ	0xFFE
  8903                           tosl	equ	0xFFD
  8904                           pclath	equ	0xFFA
  8905                           tblptru	equ	0xFF8
  8906                           tblptrh	equ	0xFF7
  8907                           tblptrl	equ	0xFF6
  8908                           tablat	equ	0xFF5
  8909                           intcon	equ	0xFF2
  8910                           postinc0	equ	0xFEE
  8911                           wreg	equ	0xFE8
  8912                           postdec1	equ	0xFE5
  8913                           fsr1h	equ	0xFE2
  8914                           fsr1l	equ	0xFE1
  8915                           indf2	equ	0xFDF
  8916                           postinc2	equ	0xFDE
  8917                           postdec2	equ	0xFDD
  8918                           plusw2	equ	0xFDB
  8919                           fsr2h	equ	0xFDA
  8920                           fsr2l	equ	0xFD9
  8921                           status	equ	0xFD8
  8922                           
  8923 ;; *************** function _LEDOff *****************
  8924 ;; Defined at:
  8925 ;;		line 253 in file "main.c"
  8926 ;; Parameters:    Size  Location     Type
  8927 ;;		None
  8928 ;; Auto vars:     Size  Location     Type
  8929 ;;		None
  8930 ;; Return value:  Size  Location     Type
  8931 ;;                  1    wreg      void 
  8932 ;; Registers used:
  8933 ;;		wreg, cstack
  8934 ;; Tracked objects:
  8935 ;;		On entry : 0/0
  8936 ;;		On exit  : 0/0
  8937 ;;		Unchanged: 0/0
  8938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8943 ;;Total ram usage:        0 bytes
  8944 ;; Hardware stack levels used:    1
  8945 ;; Hardware stack levels required when called:    8
  8946 ;; This function calls:
  8947 ;;		_eusartSend
  8948 ;; This function is called by:
  8949 ;;		_LEDToggle
  8950 ;; This function uses a non-reentrant model
  8951 ;;
  8952                           
  8953                           	psect	text30
  8954  015E54                     __ptext30:
  8955                           	opt stack 0
  8956  015E54                     _LEDOff:
  8957                           	opt stack 21
  8958                           
  8959                           ;main.c: 254: eusartSend(139);
  8960                           
  8961                           ;incstack = 0
  8962  015E54  0E8B               	movlw	139
  8963  015E56  EC28  F0B0         	call	_eusartSend
  8964                           
  8965                           ;main.c: 255: eusartSend(10);
  8966  015E5A  0E0A               	movlw	10
  8967  015E5C  EC28  F0B0         	call	_eusartSend
  8968                           
  8969                           ;main.c: 256: eusartSend(0);
  8970  015E60  0E00               	movlw	0
  8971  015E62  EC28  F0B0         	call	_eusartSend
  8972                           
  8973                           ;main.c: 257: eusartSend(0);
  8974  015E66  0E00               	movlw	0
  8975  015E68  EC28  F0B0         	call	_eusartSend
  8976  015E6C  0012               	return		;funcret
  8977  015E6E                     __end_of_LEDOff:
  8978                           	opt stack 0
  8979                           tosu	equ	0xFFF
  8980                           tosh	equ	0xFFE
  8981                           tosl	equ	0xFFD
  8982                           pclath	equ	0xFFA
  8983                           tblptru	equ	0xFF8
  8984                           tblptrh	equ	0xFF7
  8985                           tblptrl	equ	0xFF6
  8986                           tablat	equ	0xFF5
  8987                           intcon	equ	0xFF2
  8988                           postinc0	equ	0xFEE
  8989                           wreg	equ	0xFE8
  8990                           postdec1	equ	0xFE5
  8991                           fsr1h	equ	0xFE2
  8992                           fsr1l	equ	0xFE1
  8993                           indf2	equ	0xFDF
  8994                           postinc2	equ	0xFDE
  8995                           postdec2	equ	0xFDD
  8996                           plusw2	equ	0xFDB
  8997                           fsr2h	equ	0xFDA
  8998                           fsr2l	equ	0xFD9
  8999                           status	equ	0xFD8
  9000                           
  9001 ;; *************** function _LCD_Init *****************
  9002 ;; Defined at:
  9003 ;;		line 172 in file "Library/LCD.c"
  9004 ;; Parameters:    Size  Location     Type
  9005 ;;		None
  9006 ;; Auto vars:     Size  Location     Type
  9007 ;;  i               2   55[BANK0 ] unsigned short 
  9008 ;; Return value:  Size  Location     Type
  9009 ;;                  1    wreg      void 
  9010 ;; Registers used:
  9011 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9012 ;; Tracked objects:
  9013 ;;		On entry : 0/0
  9014 ;;		On exit  : 0/0
  9015 ;;		Unchanged: 0/0
  9016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9018 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9019 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;Total ram usage:        4 bytes
  9022 ;; Hardware stack levels used:    1
  9023 ;; Hardware stack levels required when called:   15
  9024 ;; This function calls:
  9025 ;;		_Configure_GPIOs
  9026 ;;		_LCD_Fill
  9027 ;;		_LCD_Write
  9028 ;;		_Set_Rotation
  9029 ;;		_delay_ms
  9030 ;; This function is called by:
  9031 ;;		_main
  9032 ;; This function uses a non-reentrant model
  9033 ;;
  9034                           
  9035                           	psect	text31
  9036  0130AA                     __ptext31:
  9037                           	opt stack 0
  9038  0130AA                     _LCD_Init:
  9039                           	opt stack 15
  9040                           
  9041                           ;LCD.c: 174: UINT16 i;
  9042                           ;LCD.c: 175: Configure_GPIOs();
  9043                           
  9044                           ;incstack = 0
  9045  0130AA  EC85  F0A8         	call	_Configure_GPIOs	;wreg free
  9046                           
  9047                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  9048  0130AE  0E00               	movlw	0
  9049  0130B0  0100               	movlb	0	; () banked
  9050  0130B2  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
  9051  0130B4  0E00               	movlw	0
  9052  0130B6  6F97               	movwf	LCD_Init@i& (0+255),b
  9053                           
  9054                           ; BSR set to: 0
  9055  0130B8  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  9056  0130BA  E17D               	bnz	u12360
  9057  0130BC  0E59               	movlw	89
  9058  0130BE  5D97               	subwf	LCD_Init@i& (0+255),w,b
  9059  0130C0  B0D8               	btfsc	status,0,c
  9060  0130C2  D079               	goto	u12360
  9061                           
  9062                           ; BSR set to: 0
  9063                           ;LCD.c: 178: {
  9064                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  9065                           
  9066                           ; BSR set to: 0
  9067                           
  9068                           ; BSR set to: 0
  9069  0130C4  90D8               	bcf	status,0,c
  9070  0130C6  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9071  0130C8  6EF6               	movwf	tblptrl,c
  9072  0130CA  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9073  0130CC  6EF7               	movwf	tblptrh,c
  9074  0130CE  0E57               	movlw	low _InitList
  9075  0130D0  26F6               	addwf	tblptrl,f,c
  9076  0130D2  0EFB               	movlw	high _InitList
  9077  0130D4  22F7               	addwfc	tblptrh,f,c
  9078  0130D6                     	if	1	;There are 3 active tblptr bytes
  9079  0130D6  6AF8               	clrf	tblptru,c
  9080  0130D8  0E00               	movlw	low (__mediumconst shr (0+16))
  9081  0130DA  22F8               	addwfc	tblptru,f,c
  9082  0130DC                     	endif
  9083  0130DC  0009               	tblrd		*+
  9084  0130DE  0E80               	movlw	128
  9085  0130E0  18F5               	xorwf	tablat,w,c
  9086  0130E2  0009               	tblrd		*+
  9087  0130E4  10F5               	iorwf	tablat,w,c
  9088  0130E6  A4D8               	btfss	status,2,c
  9089  0130E8  D01D               	goto	l87
  9090                           
  9091                           ; BSR set to: 0
  9092  0130EA  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  9093  0130EC  E11B               	bnz	l15107
  9094  0130EE  0E58               	movlw	88
  9095  0130F0  5D97               	subwf	LCD_Init@i& (0+255),w,b
  9096  0130F2  B0D8               	btfsc	status,0,c
  9097  0130F4  D017               	goto	l87
  9098                           
  9099                           ; BSR set to: 0
  9100                           ;LCD.c: 180: delay_ms(InitList[++i]);
  9101  0130F6  4B97               	infsnz	LCD_Init@i& (0+255),f,b
  9102  0130F8  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
  9103  0130FA  90D8               	bcf	status,0,c
  9104  0130FC  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9105  0130FE  6EF6               	movwf	tblptrl,c
  9106  013100  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9107  013102  6EF7               	movwf	tblptrh,c
  9108  013104  0E57               	movlw	low _InitList
  9109  013106  26F6               	addwf	tblptrl,f,c
  9110  013108  0EFB               	movlw	high _InitList
  9111  01310A  22F7               	addwfc	tblptrh,f,c
  9112  01310C                     	if	1	;There are 3 active tblptr bytes
  9113  01310C  6AF8               	clrf	tblptru,c
  9114  01310E  0E00               	movlw	low (__mediumconst shr (0+16))
  9115  013110  22F8               	addwfc	tblptru,f,c
  9116  013112                     	endif
  9117  013112  0009               	tblrd		*+
  9118  013114  CFF5 F060          	movff	tablat,delay_ms@ms
  9119  013118  000A               	tblrd		*-
  9120  01311A  CFF5 F061          	movff	tablat,delay_ms@ms+1
  9121  01311E  ECB4  F0A8         	call	_delay_ms	;wreg free
  9122  013122  D043               	goto	l90
  9123  013124                     l87:
  9124  013124                     l15107:
  9125                           
  9126                           ;LCD.c: 181: else
  9127                           ;LCD.c: 182: {
  9128                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  9129  013124  90D8               	bcf	status,0,c
  9130  013126  0100               	movlb	0	; () banked
  9131  013128  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9132  01312A  6EF6               	movwf	tblptrl,c
  9133  01312C  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9134  01312E  6EF7               	movwf	tblptrh,c
  9135  013130  0E57               	movlw	low _InitList
  9136  013132  26F6               	addwf	tblptrl,f,c
  9137  013134  0EFB               	movlw	high _InitList
  9138  013136  22F7               	addwfc	tblptrh,f,c
  9139  013138                     	if	1	;There are 3 active tblptr bytes
  9140  013138  6AF8               	clrf	tblptru,c
  9141  01313A  0E00               	movlw	low (__mediumconst shr (0+16))
  9142  01313C  22F8               	addwfc	tblptru,f,c
  9143  01313E                     	endif
  9144  01313E  0009               	tblrd		*+
  9145  013140  0E00               	movlw	0
  9146  013142  5EF5               	subwf	tablat,f,c
  9147  013144  0009               	tblrd		*+
  9148  013146  0E01               	movlw	1
  9149  013148  5AF5               	subwfb	tablat,f,c
  9150  01314A  A0D8               	btfss	status,0,c
  9151  01314C  D01B               	goto	l89
  9152                           
  9153                           ; BSR set to: 0
  9154  01314E  0E00               	movlw	0
  9155  013150  6F63               	movwf	LCD_Write@mode& (0+255),b
  9156  013152  90D8               	bcf	status,0,c
  9157  013154  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9158  013156  6EF6               	movwf	tblptrl,c
  9159  013158  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9160  01315A  6EF7               	movwf	tblptrh,c
  9161  01315C  0E57               	movlw	low _InitList
  9162  01315E  26F6               	addwf	tblptrl,f,c
  9163  013160  0EFB               	movlw	high _InitList
  9164  013162  22F7               	addwfc	tblptrh,f,c
  9165  013164                     	if	1	;There are 3 active tblptr bytes
  9166  013164  6AF8               	clrf	tblptru,c
  9167  013166  0E00               	movlw	low (__mediumconst shr (0+16))
  9168  013168  22F8               	addwfc	tblptru,f,c
  9169  01316A                     	endif
  9170  01316A  0009               	tblrd		*+
  9171  01316C  CFF5 F095          	movff	tablat,??_LCD_Init
  9172  013170  0009               	tblrd		*+
  9173  013172  CFF5 F096          	movff	tablat,??_LCD_Init+1
  9174  013176  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
  9175  01317A  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
  9176  01317C  5195               	movf	??_LCD_Init& (0+255),w,b
  9177  01317E  ECE2  F0AE         	call	_LCD_Write
  9178  013182  D013               	goto	l90
  9179  013184                     l89:
  9180                           
  9181                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
  9182  013184  0E01               	movlw	1
  9183  013186  0100               	movlb	0	; () banked
  9184  013188  6F63               	movwf	LCD_Write@mode& (0+255),b
  9185  01318A  90D8               	bcf	status,0,c
  9186  01318C  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9187  01318E  6EF6               	movwf	tblptrl,c
  9188  013190  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9189  013192  6EF7               	movwf	tblptrh,c
  9190  013194  0E57               	movlw	low _InitList
  9191  013196  26F6               	addwf	tblptrl,f,c
  9192  013198  0EFB               	movlw	high _InitList
  9193  01319A  22F7               	addwfc	tblptrh,f,c
  9194  01319C                     	if	1	;There are 3 active tblptr bytes
  9195  01319C  6AF8               	clrf	tblptru,c
  9196  01319E  0E00               	movlw	low (__mediumconst shr (0+16))
  9197  0131A0  22F8               	addwfc	tblptru,f,c
  9198  0131A2                     	endif
  9199  0131A2  0008               	tblrd		*
  9200  0131A4  50F5               	movf	tablat,w,c
  9201  0131A6  ECE2  F0AE         	call	_LCD_Write
  9202  0131AA                     l90:
  9203  0131AA  0100               	movlb	0	; () banked
  9204  0131AC  4B97               	infsnz	LCD_Init@i& (0+255),f,b
  9205  0131AE  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
  9206                           
  9207                           ; BSR set to: 0
  9208  0131B0  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  9209  0131B2  E101               	bnz	l15117
  9210  0131B4  D783               	goto	L5
  9211  0131B6                     u12360:
  9212  0131B6                     l15117:
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;LCD.c: 185: }
  9216                           ;LCD.c: 186: }
  9217                           ;LCD.c: 187: delay_ms(100);
  9218  0131B6  0E00               	movlw	0
  9219  0131B8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9220  0131BA  0E64               	movlw	100
  9221  0131BC  6F60               	movwf	delay_ms@ms& (0+255),b
  9222  0131BE  ECB4  F0A8         	call	_delay_ms	;wreg free
  9223                           
  9224                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
  9225  0131C2  0E00               	movlw	0
  9226  0131C4  0100               	movlb	0	; () banked
  9227  0131C6  6F63               	movwf	LCD_Write@mode& (0+255),b
  9228  0131C8  0E29               	movlw	41
  9229  0131CA  ECE2  F0AE         	call	_LCD_Write
  9230                           
  9231                           ;LCD.c: 189: Set_Rotation(1);
  9232  0131CE  0E01               	movlw	1
  9233  0131D0  ECA4  F0A2         	call	_Set_Rotation
  9234                           
  9235                           ;LCD.c: 191: delay_ms(100);
  9236  0131D4  0E00               	movlw	0
  9237  0131D6  0100               	movlb	0	; () banked
  9238  0131D8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9239  0131DA  0E64               	movlw	100
  9240  0131DC  6F60               	movwf	delay_ms@ms& (0+255),b
  9241  0131DE  ECB4  F0A8         	call	_delay_ms	;wreg free
  9242                           
  9243                           ;LCD.c: 192: LCD_Fill(0x0000);
  9244  0131E2  0E00               	movlw	0
  9245  0131E4  0100               	movlb	0	; () banked
  9246  0131E6  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
  9247  0131E8  0E00               	movlw	0
  9248  0131EA  6F69               	movwf	LCD_Fill@pColour& (0+255),b
  9249  0131EC  EC35  F0AB         	call	_LCD_Fill	;wreg free
  9250  0131F0  0012               	return		;funcret
  9251  0131F2                     __end_of_LCD_Init:
  9252                           	opt stack 0
  9253                           tosu	equ	0xFFF
  9254                           tosh	equ	0xFFE
  9255                           tosl	equ	0xFFD
  9256                           pclath	equ	0xFFA
  9257                           tblptru	equ	0xFF8
  9258                           tblptrh	equ	0xFF7
  9259                           tblptrl	equ	0xFF6
  9260                           tablat	equ	0xFF5
  9261                           intcon	equ	0xFF2
  9262                           postinc0	equ	0xFEE
  9263                           wreg	equ	0xFE8
  9264                           postdec1	equ	0xFE5
  9265                           fsr1h	equ	0xFE2
  9266                           fsr1l	equ	0xFE1
  9267                           indf2	equ	0xFDF
  9268                           postinc2	equ	0xFDE
  9269                           postdec2	equ	0xFDD
  9270                           plusw2	equ	0xFDB
  9271                           fsr2h	equ	0xFDA
  9272                           fsr2l	equ	0xFD9
  9273                           status	equ	0xFD8
  9274                           
  9275 ;; *************** function _Set_Rotation *****************
  9276 ;; Defined at:
  9277 ;;		line 248 in file "Library/LCD.c"
  9278 ;; Parameters:    Size  Location     Type
  9279 ;;  m               1    wreg     unsigned char 
  9280 ;; Auto vars:     Size  Location     Type
  9281 ;;  m               1    5[BANK0 ] unsigned char 
  9282 ;;  rotation        1    6[BANK0 ] unsigned char 
  9283 ;; Return value:  Size  Location     Type
  9284 ;;                  1    wreg      void 
  9285 ;; Registers used:
  9286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9287 ;; Tracked objects:
  9288 ;;		On entry : 0/0
  9289 ;;		On exit  : 0/0
  9290 ;;		Unchanged: 0/0
  9291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9293 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9295 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9296 ;;Total ram usage:        2 bytes
  9297 ;; Hardware stack levels used:    1
  9298 ;; Hardware stack levels required when called:    9
  9299 ;; This function calls:
  9300 ;;		_LCD_Write
  9301 ;; This function is called by:
  9302 ;;		_LCD_Init
  9303 ;; This function uses a non-reentrant model
  9304 ;;
  9305                           
  9306                           	psect	text32
  9307  014548                     __ptext32:
  9308                           	opt stack 0
  9309  014548                     _Set_Rotation:
  9310                           	opt stack 20
  9311                           
  9312                           ;incstack = 0
  9313                           ;Set_Rotation@m stored from wreg
  9314  014548  0100               	movlb	0	; () banked
  9315  01454A  6F65               	movwf	Set_Rotation@m& (0+255),b
  9316                           
  9317                           ;LCD.c: 250: UINT8 rotation = 0x00;
  9318  01454C  0E00               	movlw	0
  9319  01454E  0100               	movlb	0	; () banked
  9320  014550  6F66               	movwf	Set_Rotation@rotation& (0+255),b
  9321                           
  9322                           ; BSR set to: 0
  9323                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
  9324  014552  0E00               	movlw	0
  9325  014554  6F63               	movwf	LCD_Write@mode& (0+255),b
  9326  014556  0E36               	movlw	54
  9327  014558  ECE2  F0AE         	call	_LCD_Write
  9328                           
  9329                           ;LCD.c: 253: rotation = (m % 4);
  9330  01455C  0100               	movlb	0	; () banked
  9331  01455E  5165               	movf	Set_Rotation@m& (0+255),w,b
  9332  014560  0B03               	andlw	3
  9333  014562  6F66               	movwf	Set_Rotation@rotation& (0+255),b
  9334                           
  9335                           ;LCD.c: 255: switch(rotation)
  9336  014564  D02B               	goto	l117
  9337  014566                     
  9338                           ; BSR set to: 0
  9339                           ;LCD.c: 258: {
  9340                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
  9341                           
  9342                           ; BSR set to: 0
  9343  014566  0E01               	movlw	1
  9344  014568  6F63               	movwf	LCD_Write@mode& (0+255),b
  9345  01456A  0EC8               	movlw	200
  9346  01456C  ECE2  F0AE         	call	_LCD_Write
  9347                           
  9348                           ;LCD.c: 260: w = 128;
  9349  014570  0E80               	movlw	128
  9350  014572  6E50               	movwf	_w,c
  9351                           
  9352                           ;LCD.c: 261: l = 128;
  9353  014574  0E80               	movlw	128
  9354  014576  6E4F               	movwf	_l,c
  9355                           
  9356                           ;LCD.c: 262: break;
  9357  014578  0012               	return	
  9358  01457A                     
  9359                           ;LCD.c: 265: {
  9360                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
  9361  01457A  0E01               	movlw	1
  9362  01457C  0100               	movlb	0	; () banked
  9363  01457E  6F63               	movwf	LCD_Write@mode& (0+255),b
  9364  014580  0EA8               	movlw	168
  9365  014582  ECE2  F0AE         	call	_LCD_Write
  9366                           
  9367                           ;LCD.c: 267: w = 128;
  9368  014586  0E80               	movlw	128
  9369  014588  6E50               	movwf	_w,c
  9370                           
  9371                           ;LCD.c: 268: l = 128;
  9372  01458A  0E80               	movlw	128
  9373  01458C  6E4F               	movwf	_l,c
  9374                           
  9375                           ;LCD.c: 269: break;
  9376  01458E  0012               	return	
  9377  014590                     
  9378                           ;LCD.c: 272: {
  9379                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
  9380  014590  0E01               	movlw	1
  9381  014592  0100               	movlb	0	; () banked
  9382  014594  6F63               	movwf	LCD_Write@mode& (0+255),b
  9383  014596  0E08               	movlw	8
  9384  014598  ECE2  F0AE         	call	_LCD_Write
  9385                           
  9386                           ;LCD.c: 274: w = 128;
  9387  01459C  0E80               	movlw	128
  9388  01459E  6E50               	movwf	_w,c
  9389                           
  9390                           ;LCD.c: 275: l = 128;
  9391  0145A0  0E80               	movlw	128
  9392  0145A2  6E4F               	movwf	_l,c
  9393                           
  9394                           ;LCD.c: 276: break;
  9395  0145A4  0012               	return	
  9396  0145A6                     
  9397                           ;LCD.c: 279: {
  9398                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
  9399  0145A6  0E01               	movlw	1
  9400  0145A8  0100               	movlb	0	; () banked
  9401  0145AA  6F63               	movwf	LCD_Write@mode& (0+255),b
  9402  0145AC  0E68               	movlw	104
  9403  0145AE  ECE2  F0AE         	call	_LCD_Write
  9404                           
  9405                           ;LCD.c: 281: w = 128;
  9406  0145B2  0E80               	movlw	128
  9407  0145B4  6E50               	movwf	_w,c
  9408                           
  9409                           ;LCD.c: 282: l = 128;
  9410  0145B6  0E80               	movlw	128
  9411  0145B8  6E4F               	movwf	_l,c
  9412                           
  9413                           ;LCD.c: 284: }
  9414                           ;LCD.c: 285: }
  9415                           
  9416                           ;LCD.c: 283: break;
  9417  0145BA  0012               	return	
  9418  0145BC                     l117:
  9419  0145BC  0100               	movlb	0	; () banked
  9420  0145BE  5166               	movf	Set_Rotation@rotation& (0+255),w,b
  9421                           
  9422                           ; Switch size 1, requested type "space"
  9423                           ; Number of cases is 4, Range of values is 0 to 3
  9424                           ; switch strategies available:
  9425                           ; Name         Instructions Cycles
  9426                           ; simple_byte           13     7 (average)
  9427                           ;	Chosen strategy is simple_byte
  9428  0145C0  0A00               	xorlw	0	; case 0
  9429  0145C2  B4D8               	btfsc	status,2,c
  9430  0145C4  D7D0               	goto	l118
  9431  0145C6  0A01               	xorlw	1	; case 1
  9432  0145C8  B4D8               	btfsc	status,2,c
  9433  0145CA  D7D7               	goto	l120
  9434  0145CC  0A03               	xorlw	3	; case 2
  9435  0145CE  B4D8               	btfsc	status,2,c
  9436  0145D0  D7DF               	goto	l121
  9437  0145D2  0A01               	xorlw	1	; case 3
  9438  0145D4  A4D8               	btfss	status,2,c
  9439  0145D6  0012               	return	
  9440  0145D8  D7E6               	goto	l122
  9441  0145DA                     __end_of_Set_Rotation:
  9442                           	opt stack 0
  9443                           tosu	equ	0xFFF
  9444                           tosh	equ	0xFFE
  9445                           tosl	equ	0xFFD
  9446                           pclath	equ	0xFFA
  9447                           tblptru	equ	0xFF8
  9448                           tblptrh	equ	0xFF7
  9449                           tblptrl	equ	0xFF6
  9450                           tablat	equ	0xFF5
  9451                           intcon	equ	0xFF2
  9452                           postinc0	equ	0xFEE
  9453                           wreg	equ	0xFE8
  9454                           postdec1	equ	0xFE5
  9455                           fsr1h	equ	0xFE2
  9456                           fsr1l	equ	0xFE1
  9457                           indf2	equ	0xFDF
  9458                           postinc2	equ	0xFDE
  9459                           postdec2	equ	0xFDD
  9460                           plusw2	equ	0xFDB
  9461                           fsr2h	equ	0xFDA
  9462                           fsr2l	equ	0xFD9
  9463                           status	equ	0xFD8
  9464                           
  9465 ;; *************** function _LCD_Fill *****************
  9466 ;; Defined at:
  9467 ;;		line 287 in file "Library/LCD.c"
  9468 ;; Parameters:    Size  Location     Type
  9469 ;;  pColour         2    9[BANK0 ] unsigned short 
  9470 ;; Auto vars:     Size  Location     Type
  9471 ;;  j               1   12[BANK0 ] unsigned char 
  9472 ;;  i               1   11[BANK0 ] unsigned char 
  9473 ;; Return value:  Size  Location     Type
  9474 ;;                  1    wreg      void 
  9475 ;; Registers used:
  9476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9477 ;; Tracked objects:
  9478 ;;		On entry : 0/0
  9479 ;;		On exit  : 0/0
  9480 ;;		Unchanged: 0/0
  9481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9482 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9483 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9485 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9486 ;;Total ram usage:        4 bytes
  9487 ;; Hardware stack levels used:    1
  9488 ;; Hardware stack levels required when called:   10
  9489 ;; This function calls:
  9490 ;;		_LCD_Word_Write
  9491 ;;		_Set_Addr_Window
  9492 ;; This function is called by:
  9493 ;;		_LCD_Init
  9494 ;; This function uses a non-reentrant model
  9495 ;;
  9496                           
  9497                           	psect	text33
  9498  01566A                     __ptext33:
  9499                           	opt stack 0
  9500  01566A                     _LCD_Fill:
  9501                           	opt stack 19
  9502                           
  9503                           ;LCD.c: 296: UINT8 i = 0x00;
  9504                           
  9505                           ;incstack = 0
  9506  01566A  0E00               	movlw	0
  9507  01566C  0100               	movlb	0	; () banked
  9508  01566E  6F6B               	movwf	LCD_Fill@i& (0+255),b
  9509                           
  9510                           ;LCD.c: 297: UINT8 j = 0x00;
  9511  015670  0E00               	movlw	0
  9512  015672  6F6C               	movwf	LCD_Fill@j& (0+255),b
  9513                           
  9514                           ; BSR set to: 0
  9515                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
  9516  015674  0E00               	movlw	0
  9517  015676  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
  9518  015678  0450               	decf	_w,w,c
  9519  01567A  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  9520  01567C  044F               	decf	_l,w,c
  9521  01567E  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  9522  015680  0E00               	movlw	0
  9523  015682  EC0D  F0A2         	call	_Set_Addr_Window
  9524                           
  9525                           ;LCD.c: 299: for (j = l; j > 0; j--)
  9526  015686  C04F  F06C         	movff	_l,LCD_Fill@j
  9527  01568A  0100               	movlb	0	; () banked
  9528  01568C  516C               	movf	LCD_Fill@j& (0+255),w,b
  9529  01568E  B4D8               	btfsc	status,2,c
  9530  015690  0012               	return	
  9531                           
  9532                           ; BSR set to: 0
  9533                           ;LCD.c: 300: for (i = w; i > 0; i--)
  9534                           
  9535                           ; BSR set to: 0
  9536  015692  C050  F06B         	movff	_w,LCD_Fill@i
  9537  015696                     l14805:
  9538                           
  9539                           ; BSR set to: 0
  9540  015696  516B               	movf	LCD_Fill@i& (0+255),w,b
  9541  015698  B4D8               	btfsc	status,2,c
  9542  01569A  D009               	goto	u12050
  9543                           
  9544                           ; BSR set to: 0
  9545                           ;LCD.c: 301: LCD_Word_Write(pColour);
  9546                           
  9547                           ; BSR set to: 0
  9548                           
  9549                           ; BSR set to: 0
  9550  01569C  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
  9551  0156A0  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
  9552  0156A4  EC37  F0AF         	call	_LCD_Word_Write	;wreg free
  9553  0156A8  0100               	movlb	0	; () banked
  9554  0156AA  076B               	decf	LCD_Fill@i& (0+255),f,b
  9555  0156AC  D7F4               	goto	l14805
  9556  0156AE                     u12050:
  9557                           
  9558                           ; BSR set to: 0
  9559                           
  9560                           ; BSR set to: 0
  9561  0156AE  076C               	decf	LCD_Fill@j& (0+255),f,b
  9562  0156B0  D7ED               	goto	L6
  9563  0156B2                     __end_of_LCD_Fill:
  9564                           	opt stack 0
  9565                           tosu	equ	0xFFF
  9566                           tosh	equ	0xFFE
  9567                           tosl	equ	0xFFD
  9568                           pclath	equ	0xFFA
  9569                           tblptru	equ	0xFF8
  9570                           tblptrh	equ	0xFF7
  9571                           tblptrl	equ	0xFF6
  9572                           tablat	equ	0xFF5
  9573                           intcon	equ	0xFF2
  9574                           postinc0	equ	0xFEE
  9575                           wreg	equ	0xFE8
  9576                           postdec1	equ	0xFE5
  9577                           fsr1h	equ	0xFE2
  9578                           fsr1l	equ	0xFE1
  9579                           indf2	equ	0xFDF
  9580                           postinc2	equ	0xFDE
  9581                           postdec2	equ	0xFDD
  9582                           plusw2	equ	0xFDB
  9583                           fsr2h	equ	0xFDA
  9584                           fsr2l	equ	0xFD9
  9585                           status	equ	0xFD8
  9586                           
  9587 ;; *************** function _Configure_GPIOs *****************
  9588 ;; Defined at:
  9589 ;;		line 46 in file "Library/LCD.c"
  9590 ;; Parameters:    Size  Location     Type
  9591 ;;		None
  9592 ;; Auto vars:     Size  Location     Type
  9593 ;;		None
  9594 ;; Return value:  Size  Location     Type
  9595 ;;                  1    wreg      void 
  9596 ;; Registers used:
  9597 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9598 ;; Tracked objects:
  9599 ;;		On entry : 0/0
  9600 ;;		On exit  : 0/0
  9601 ;;		Unchanged: 0/0
  9602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9607 ;;Total ram usage:        0 bytes
  9608 ;; Hardware stack levels used:    1
  9609 ;; Hardware stack levels required when called:   14
  9610 ;; This function calls:
  9611 ;;		_LCD_Reset
  9612 ;;		_Port_SetPinType
  9613 ;;		_SPI_Init
  9614 ;;		_SPI_MaxSpeed
  9615 ;; This function is called by:
  9616 ;;		_LCD_Init
  9617 ;; This function uses a non-reentrant model
  9618 ;;
  9619                           
  9620                           	psect	text34
  9621  01510A                     __ptext34:
  9622                           	opt stack 0
  9623  01510A                     _Configure_GPIOs:
  9624                           	opt stack 15
  9625                           
  9626                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
  9627                           
  9628                           ; BSR set to: 0
  9629                           ;incstack = 0
  9630  01510A  0EB5               	movlw	low _PortF
  9631  01510C  0100               	movlb	0	; () banked
  9632  01510E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9633  015110  0E01               	movlw	high _PortF
  9634  015112  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9635  015114  0E07               	movlw	7
  9636  015116  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9637  015118  0E03               	movlw	3
  9638  01511A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9639  01511C  EC4E  F093         	call	_Port_SetPinType	;wreg free
  9640                           
  9641                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
  9642  015120  0EB5               	movlw	low _PortF
  9643  015122  0100               	movlb	0	; () banked
  9644  015124  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9645  015126  0E01               	movlw	high _PortF
  9646  015128  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9647  01512A  0E06               	movlw	6
  9648  01512C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9649  01512E  0E03               	movlw	3
  9650  015130  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9651  015132  EC4E  F093         	call	_Port_SetPinType	;wreg free
  9652                           
  9653                           ;LCD.c: 55: LCD_Reset();
  9654  015136  ECDD  F0A9         	call	_LCD_Reset	;wreg free
  9655                           
  9656                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
  9657  01513A  0EC0               	movlw	192
  9658  01513C  0100               	movlb	0	; () banked
  9659  01513E  6F8D               	movwf	SPI_Init@pClock& (0+255),b
  9660  015140  0EC6               	movlw	198
  9661  015142  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
  9662  015144  0E2D               	movlw	45
  9663  015146  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
  9664  015148  0E00               	movlw	0
  9665  01514A  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
  9666  01514C  0E01               	movlw	1
  9667  01514E  6F91               	movwf	SPI_Init@pChannel& (0+255),b
  9668  015150  0E01               	movlw	1
  9669  015152  6F92               	movwf	SPI_Init@pMode& (0+255),b
  9670  015154  ECCB  F083         	call	_SPI_Init	;wreg free
  9671                           
  9672                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
  9673  015158  0E82               	movlw	low _SPI2
  9674  01515A  0100               	movlb	0	; () banked
  9675  01515C  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
  9676  01515E  0E01               	movlw	high _SPI2
  9677  015160  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
  9678  015162  EC89  F0A7         	call	_SPI_MaxSpeed	;wreg free
  9679  015166  0012               	return		;funcret
  9680  015168                     __end_of_Configure_GPIOs:
  9681                           	opt stack 0
  9682                           tosu	equ	0xFFF
  9683                           tosh	equ	0xFFE
  9684                           tosl	equ	0xFFD
  9685                           pclath	equ	0xFFA
  9686                           tblptru	equ	0xFF8
  9687                           tblptrh	equ	0xFF7
  9688                           tblptrl	equ	0xFF6
  9689                           tablat	equ	0xFF5
  9690                           intcon	equ	0xFF2
  9691                           postinc0	equ	0xFEE
  9692                           wreg	equ	0xFE8
  9693                           postdec1	equ	0xFE5
  9694                           fsr1h	equ	0xFE2
  9695                           fsr1l	equ	0xFE1
  9696                           indf2	equ	0xFDF
  9697                           postinc2	equ	0xFDE
  9698                           postdec2	equ	0xFDD
  9699                           plusw2	equ	0xFDB
  9700                           fsr2h	equ	0xFDA
  9701                           fsr2l	equ	0xFD9
  9702                           status	equ	0xFD8
  9703                           
  9704 ;; *************** function _SPI_MaxSpeed *****************
  9705 ;; Defined at:
  9706 ;;		line 201 in file "Library/SPI.c"
  9707 ;; Parameters:    Size  Location     Type
  9708 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  9709 ;;		 -> SPI2(11), 
  9710 ;; Auto vars:     Size  Location     Type
  9711 ;;		None
  9712 ;; Return value:  Size  Location     Type
  9713 ;;                  1    wreg      void 
  9714 ;; Registers used:
  9715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9716 ;; Tracked objects:
  9717 ;;		On entry : 0/0
  9718 ;;		On exit  : 0/0
  9719 ;;		Unchanged: 0/0
  9720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9721 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9724 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9725 ;;Total ram usage:        2 bytes
  9726 ;; Hardware stack levels used:    1
  9727 ;; Hardware stack levels required when called:    9
  9728 ;; This function calls:
  9729 ;;		_Byte_SetBit
  9730 ;;		_Byte_SetQuad
  9731 ;; This function is called by:
  9732 ;;		_Configure_GPIOs
  9733 ;; This function uses a non-reentrant model
  9734 ;;
  9735                           
  9736                           	psect	text35
  9737  014F12                     __ptext35:
  9738                           	opt stack 0
  9739  014F12                     _SPI_MaxSpeed:
  9740                           	opt stack 19
  9741                           
  9742                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  9743                           
  9744                           ;incstack = 0
  9745  014F12  0100               	movlb	0	; () banked
  9746  014F14  EE20 F006          	lfsr	2,6
  9747  014F18  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9748  014F1A  26D9               	addwf	fsr2l,f,c
  9749  014F1C  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9750  014F1E  22DA               	addwfc	fsr2h,f,c
  9751  014F20  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
  9752  014F24  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
  9753  014F28  0E05               	movlw	5
  9754  014F2A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
  9755  014F2C  0E00               	movlw	0
  9756  014F2E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
  9757  014F30  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
  9758                           
  9759                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
  9760  014F34  0100               	movlb	0	; () banked
  9761  014F36  EE20 F006          	lfsr	2,6
  9762  014F3A  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9763  014F3C  26D9               	addwf	fsr2l,f,c
  9764  014F3E  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9765  014F40  22DA               	addwfc	fsr2h,f,c
  9766  014F42  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
  9767  014F46  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
  9768  014F4A  0E00               	movlw	0
  9769  014F4C  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
  9770  014F4E  0E00               	movlw	0
  9771  014F50  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
  9772  014F52  ECD2  F0AE         	call	_Byte_SetQuad	;wreg free
  9773                           
  9774                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  9775  014F56  0100               	movlb	0	; () banked
  9776  014F58  EE20 F006          	lfsr	2,6
  9777  014F5C  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9778  014F5E  26D9               	addwf	fsr2l,f,c
  9779  014F60  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9780  014F62  22DA               	addwfc	fsr2h,f,c
  9781  014F64  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
  9782  014F68  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
  9783  014F6C  0E05               	movlw	5
  9784  014F6E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
  9785  014F70  0E01               	movlw	1
  9786  014F72  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
  9787  014F74  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
  9788  014F78  0012               	return		;funcret
  9789  014F7A                     __end_of_SPI_MaxSpeed:
  9790                           	opt stack 0
  9791                           tosu	equ	0xFFF
  9792                           tosh	equ	0xFFE
  9793                           tosl	equ	0xFFD
  9794                           pclath	equ	0xFFA
  9795                           tblptru	equ	0xFF8
  9796                           tblptrh	equ	0xFF7
  9797                           tblptrl	equ	0xFF6
  9798                           tablat	equ	0xFF5
  9799                           intcon	equ	0xFF2
  9800                           postinc0	equ	0xFEE
  9801                           wreg	equ	0xFE8
  9802                           postdec1	equ	0xFE5
  9803                           fsr1h	equ	0xFE2
  9804                           fsr1l	equ	0xFE1
  9805                           indf2	equ	0xFDF
  9806                           postinc2	equ	0xFDE
  9807                           postdec2	equ	0xFDD
  9808                           plusw2	equ	0xFDB
  9809                           fsr2h	equ	0xFDA
  9810                           fsr2l	equ	0xFD9
  9811                           status	equ	0xFD8
  9812                           
  9813 ;; *************** function _LCD_Reset *****************
  9814 ;; Defined at:
  9815 ;;		line 95 in file "Library/LCD.c"
  9816 ;; Parameters:    Size  Location     Type
  9817 ;;		None
  9818 ;; Auto vars:     Size  Location     Type
  9819 ;;		None
  9820 ;; Return value:  Size  Location     Type
  9821 ;;                  1    wreg      void 
  9822 ;; Registers used:
  9823 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9824 ;; Tracked objects:
  9825 ;;		On entry : 0/0
  9826 ;;		On exit  : 0/0
  9827 ;;		Unchanged: 0/0
  9828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9833 ;;Total ram usage:        0 bytes
  9834 ;; Hardware stack levels used:    1
  9835 ;; Hardware stack levels required when called:   13
  9836 ;; This function calls:
  9837 ;;		_LED_Toggle
  9838 ;;		_Reset_High
  9839 ;;		_Reset_Low
  9840 ;;		_delay_ms
  9841 ;; This function is called by:
  9842 ;;		_Configure_GPIOs
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           	psect	text36
  9847  0153BA                     __ptext36:
  9848                           	opt stack 0
  9849  0153BA                     _LCD_Reset:
  9850                           	opt stack 15
  9851                           
  9852                           ;LCD.c: 97: Reset_High();
  9853                           
  9854                           ;incstack = 0
  9855  0153BA  EC69  F0AF         	call	_Reset_High	;wreg free
  9856                           
  9857                           ;LCD.c: 98: LED_Toggle(eLED2);
  9858  0153BE  0E01               	movlw	1
  9859  0153C0  EC03  F0AC         	call	_LED_Toggle
  9860                           
  9861                           ;LCD.c: 99: delay_ms(0x80);
  9862  0153C4  0E00               	movlw	0
  9863  0153C6  0100               	movlb	0	; () banked
  9864  0153C8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9865  0153CA  0E80               	movlw	128
  9866  0153CC  6F60               	movwf	delay_ms@ms& (0+255),b
  9867  0153CE  ECB4  F0A8         	call	_delay_ms	;wreg free
  9868                           
  9869                           ;LCD.c: 100: LED_Toggle(eLED2);
  9870  0153D2  0E01               	movlw	1
  9871  0153D4  EC03  F0AC         	call	_LED_Toggle
  9872                           
  9873                           ;LCD.c: 101: Reset_Low();
  9874  0153D8  EC5D  F0AF         	call	_Reset_Low	;wreg free
  9875                           
  9876                           ;LCD.c: 102: delay_ms(0x80);
  9877  0153DC  0E00               	movlw	0
  9878  0153DE  0100               	movlb	0	; () banked
  9879  0153E0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9880  0153E2  0E80               	movlw	128
  9881  0153E4  6F60               	movwf	delay_ms@ms& (0+255),b
  9882  0153E6  ECB4  F0A8         	call	_delay_ms	;wreg free
  9883                           
  9884                           ;LCD.c: 103: LED_Toggle(eLED2);
  9885  0153EA  0E01               	movlw	1
  9886  0153EC  EC03  F0AC         	call	_LED_Toggle
  9887                           
  9888                           ;LCD.c: 104: Reset_High();
  9889  0153F0  EC69  F0AF         	call	_Reset_High	;wreg free
  9890                           
  9891                           ;LCD.c: 105: delay_ms(0x80);
  9892  0153F4  0E00               	movlw	0
  9893  0153F6  0100               	movlb	0	; () banked
  9894  0153F8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9895  0153FA  0E80               	movlw	128
  9896  0153FC  6F60               	movwf	delay_ms@ms& (0+255),b
  9897  0153FE  ECB4  F0A8         	call	_delay_ms	;wreg free
  9898                           
  9899                           ;LCD.c: 106: LED_Toggle(eLED2);
  9900  015402  0E01               	movlw	1
  9901  015404  EC03  F0AC         	call	_LED_Toggle
  9902  015408  0012               	return		;funcret
  9903  01540A                     __end_of_LCD_Reset:
  9904                           	opt stack 0
  9905                           tosu	equ	0xFFF
  9906                           tosh	equ	0xFFE
  9907                           tosl	equ	0xFFD
  9908                           pclath	equ	0xFFA
  9909                           tblptru	equ	0xFF8
  9910                           tblptrh	equ	0xFF7
  9911                           tblptrl	equ	0xFF6
  9912                           tablat	equ	0xFF5
  9913                           intcon	equ	0xFF2
  9914                           postinc0	equ	0xFEE
  9915                           wreg	equ	0xFE8
  9916                           postdec1	equ	0xFE5
  9917                           fsr1h	equ	0xFE2
  9918                           fsr1l	equ	0xFE1
  9919                           indf2	equ	0xFDF
  9920                           postinc2	equ	0xFDE
  9921                           postdec2	equ	0xFDD
  9922                           plusw2	equ	0xFDB
  9923                           fsr2h	equ	0xFDA
  9924                           fsr2l	equ	0xFD9
  9925                           status	equ	0xFD8
  9926                           
  9927 ;; *************** function _Reset_Low *****************
  9928 ;; Defined at:
  9929 ;;		line 32 in file "Library/LCD.c"
  9930 ;; Parameters:    Size  Location     Type
  9931 ;;		None
  9932 ;; Auto vars:     Size  Location     Type
  9933 ;;		None
  9934 ;; Return value:  Size  Location     Type
  9935 ;;                  1    wreg      void 
  9936 ;; Registers used:
  9937 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9938 ;; Tracked objects:
  9939 ;;		On entry : 0/0
  9940 ;;		On exit  : 0/0
  9941 ;;		Unchanged: 0/0
  9942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9947 ;;Total ram usage:        0 bytes
  9948 ;; Hardware stack levels used:    1
  9949 ;; Hardware stack levels required when called:   11
  9950 ;; This function calls:
  9951 ;;		_Port_SetPin
  9952 ;; This function is called by:
  9953 ;;		_LCD_Reset
  9954 ;; This function uses a non-reentrant model
  9955 ;;
  9956                           
  9957                           	psect	text37
  9958  015EBA                     __ptext37:
  9959                           	opt stack 0
  9960  015EBA                     _Reset_Low:
  9961                           	opt stack 16
  9962                           
  9963                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
  9964                           
  9965                           ;incstack = 0
  9966  015EBA  0EB5               	movlw	low _PortF
  9967  015EBC  0100               	movlb	0	; () banked
  9968  015EBE  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9969  015EC0  0E01               	movlw	high _PortF
  9970  015EC2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9971  015EC4  0E06               	movlw	6
  9972  015EC6  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9973  015EC8  0E01               	movlw	1
  9974  015ECA  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9975  015ECC  ECC1  F09F         	call	_Port_SetPin	;wreg free
  9976  015ED0  0012               	return		;funcret
  9977  015ED2                     __end_of_Reset_Low:
  9978                           	opt stack 0
  9979                           tosu	equ	0xFFF
  9980                           tosh	equ	0xFFE
  9981                           tosl	equ	0xFFD
  9982                           pclath	equ	0xFFA
  9983                           tblptru	equ	0xFF8
  9984                           tblptrh	equ	0xFF7
  9985                           tblptrl	equ	0xFF6
  9986                           tablat	equ	0xFF5
  9987                           intcon	equ	0xFF2
  9988                           postinc0	equ	0xFEE
  9989                           wreg	equ	0xFE8
  9990                           postdec1	equ	0xFE5
  9991                           fsr1h	equ	0xFE2
  9992                           fsr1l	equ	0xFE1
  9993                           indf2	equ	0xFDF
  9994                           postinc2	equ	0xFDE
  9995                           postdec2	equ	0xFDD
  9996                           plusw2	equ	0xFDB
  9997                           fsr2h	equ	0xFDA
  9998                           fsr2l	equ	0xFD9
  9999                           status	equ	0xFD8
 10000                           
 10001 ;; *************** function _Reset_High *****************
 10002 ;; Defined at:
 10003 ;;		line 36 in file "Library/LCD.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;		None
 10006 ;; Auto vars:     Size  Location     Type
 10007 ;;		None
 10008 ;; Return value:  Size  Location     Type
 10009 ;;                  1    wreg      void 
 10010 ;; Registers used:
 10011 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10012 ;; Tracked objects:
 10013 ;;		On entry : 0/0
 10014 ;;		On exit  : 0/0
 10015 ;;		Unchanged: 0/0
 10016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10021 ;;Total ram usage:        0 bytes
 10022 ;; Hardware stack levels used:    1
 10023 ;; Hardware stack levels required when called:   11
 10024 ;; This function calls:
 10025 ;;		_Port_SetPin
 10026 ;; This function is called by:
 10027 ;;		_LCD_Reset
 10028 ;; This function uses a non-reentrant model
 10029 ;;
 10030                           
 10031                           	psect	text38
 10032  015ED2                     __ptext38:
 10033                           	opt stack 0
 10034  015ED2                     _Reset_High:
 10035                           	opt stack 16
 10036                           
 10037                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 10038                           
 10039                           ;incstack = 0
 10040  015ED2  0EB5               	movlw	low _PortF
 10041  015ED4  0100               	movlb	0	; () banked
 10042  015ED6  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10043  015ED8  0E01               	movlw	high _PortF
 10044  015EDA  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10045  015EDC  0E06               	movlw	6
 10046  015EDE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10047  015EE0  0E00               	movlw	0
 10048  015EE2  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10049  015EE4  ECC1  F09F         	call	_Port_SetPin	;wreg free
 10050  015EE8  0012               	return		;funcret
 10051  015EEA                     __end_of_Reset_High:
 10052                           	opt stack 0
 10053                           tosu	equ	0xFFF
 10054                           tosh	equ	0xFFE
 10055                           tosl	equ	0xFFD
 10056                           pclath	equ	0xFFA
 10057                           tblptru	equ	0xFF8
 10058                           tblptrh	equ	0xFF7
 10059                           tblptrl	equ	0xFF6
 10060                           tablat	equ	0xFF5
 10061                           intcon	equ	0xFF2
 10062                           postinc0	equ	0xFEE
 10063                           wreg	equ	0xFE8
 10064                           postdec1	equ	0xFE5
 10065                           fsr1h	equ	0xFE2
 10066                           fsr1l	equ	0xFE1
 10067                           indf2	equ	0xFDF
 10068                           postinc2	equ	0xFDE
 10069                           postdec2	equ	0xFDD
 10070                           plusw2	equ	0xFDB
 10071                           fsr2h	equ	0xFDA
 10072                           fsr2l	equ	0xFD9
 10073                           status	equ	0xFD8
 10074                           
 10075 ;; *************** function _Init_Timer0 *****************
 10076 ;; Defined at:
 10077 ;;		line 72 in file "main.c"
 10078 ;; Parameters:    Size  Location     Type
 10079 ;;		None
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;		None
 10082 ;; Return value:  Size  Location     Type
 10083 ;;                  2  2114[None  ] int 
 10084 ;; Registers used:
 10085 ;;		None
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10095 ;;Total ram usage:        0 bytes
 10096 ;; Hardware stack levels used:    1
 10097 ;; Hardware stack levels required when called:    7
 10098 ;; This function calls:
 10099 ;;		Nothing
 10100 ;; This function is called by:
 10101 ;;		_main
 10102 ;; This function uses a non-reentrant model
 10103 ;;
 10104                           
 10105                           	psect	text39
 10106  015EEA                     __ptext39:
 10107                           	opt stack 0
 10108  015EEA                     _Init_Timer0:
 10109                           	opt stack 23
 10110                           
 10111                           ;main.c: 73: T0CONbits.TMR0ON = 1;
 10112                           
 10113                           ;incstack = 0
 10114  015EEA  8ED5               	bsf	4053,7,c	;volatile
 10115                           
 10116                           ;main.c: 74: T0CONbits.T08BIT = 1;
 10117  015EEC  8CD5               	bsf	4053,6,c	;volatile
 10118                           
 10119                           ;main.c: 75: T0CONbits.T0CS = 0;
 10120  015EEE  9AD5               	bcf	4053,5,c	;volatile
 10121                           
 10122                           ;main.c: 76: T0CONbits.T0SE = 0;
 10123  015EF0  98D5               	bcf	4053,4,c	;volatile
 10124                           
 10125                           ;main.c: 77: T0CONbits.PSA = 0;
 10126  015EF2  96D5               	bcf	4053,3,c	;volatile
 10127                           
 10128                           ;main.c: 78: T0CONbits.T0PS2 = 1;
 10129  015EF4  84D5               	bsf	4053,2,c	;volatile
 10130                           
 10131                           ;main.c: 79: T0CONbits.T0PS1 = 1;
 10132  015EF6  82D5               	bsf	4053,1,c	;volatile
 10133                           
 10134                           ;main.c: 80: T0CONbits.T0PS0 = 1;
 10135  015EF8  80D5               	bsf	4053,0,c	;volatile
 10136                           
 10137                           ;main.c: 81: INTCONbits.TMR0IE = 1;
 10138  015EFA  8AF2               	bsf	intcon,5,c	;volatile
 10139                           
 10140                           ;main.c: 82: INTCONbits.PEIE = 1;
 10141  015EFC  8CF2               	bsf	intcon,6,c	;volatile
 10142                           
 10143                           ;main.c: 83: INTCONbits.GIE = 1;
 10144  015EFE  8EF2               	bsf	intcon,7,c	;volatile
 10145  015F00  0012               	return		;funcret
 10146  015F02                     __end_of_Init_Timer0:
 10147                           	opt stack 0
 10148                           tosu	equ	0xFFF
 10149                           tosh	equ	0xFFE
 10150                           tosl	equ	0xFFD
 10151                           pclath	equ	0xFFA
 10152                           tblptru	equ	0xFF8
 10153                           tblptrh	equ	0xFF7
 10154                           tblptrl	equ	0xFF6
 10155                           tablat	equ	0xFF5
 10156                           intcon	equ	0xFF2
 10157                           postinc0	equ	0xFEE
 10158                           wreg	equ	0xFE8
 10159                           postdec1	equ	0xFE5
 10160                           fsr1h	equ	0xFE2
 10161                           fsr1l	equ	0xFE1
 10162                           indf2	equ	0xFDF
 10163                           postinc2	equ	0xFDE
 10164                           postdec2	equ	0xFDD
 10165                           plusw2	equ	0xFDB
 10166                           fsr2h	equ	0xFDA
 10167                           fsr2l	equ	0xFD9
 10168                           status	equ	0xFD8
 10169                           
 10170 ;; *************** function _InitSerialCommunication *****************
 10171 ;; Defined at:
 10172 ;;		line 131 in file "main.c"
 10173 ;; Parameters:    Size  Location     Type
 10174 ;;		None
 10175 ;; Auto vars:     Size  Location     Type
 10176 ;;		None
 10177 ;; Return value:  Size  Location     Type
 10178 ;;                  1    wreg      void 
 10179 ;; Registers used:
 10180 ;;		wreg, status,2
 10181 ;; Tracked objects:
 10182 ;;		On entry : 0/0
 10183 ;;		On exit  : 0/0
 10184 ;;		Unchanged: 0/0
 10185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10190 ;;Total ram usage:        0 bytes
 10191 ;; Hardware stack levels used:    1
 10192 ;; Hardware stack levels required when called:    7
 10193 ;; This function calls:
 10194 ;;		Nothing
 10195 ;; This function is called by:
 10196 ;;		_main
 10197 ;; This function uses a non-reentrant model
 10198 ;;
 10199                           
 10200                           	psect	text40
 10201  015DE4                     __ptext40:
 10202                           	opt stack 0
 10203  015DE4                     _InitSerialCommunication:
 10204                           	opt stack 23
 10205                           
 10206                           ;main.c: 133: TRISCbits.TRISC6 = 0;
 10207                           
 10208                           ;incstack = 0
 10209  015DE4  9C94               	bcf	3988,6,c	;volatile
 10210                           
 10211                           ;main.c: 134: TRISCbits.TRISC7 = 1;
 10212  015DE6  8E94               	bsf	3988,7,c	;volatile
 10213                           
 10214                           ;main.c: 135: TXSTA1 = 0b00100100;
 10215  015DE8  0E24               	movlw	36
 10216  015DEA  6EAD               	movwf	4013,c	;volatile
 10217                           
 10218                           ;main.c: 136: RCSTA1 = 0b10010000;
 10219  015DEC  0E90               	movlw	144
 10220  015DEE  6EAC               	movwf	4012,c	;volatile
 10221                           
 10222                           ;main.c: 137: BAUDCON1bits.DTRXP = 0;
 10223  015DF0  9A7E               	bcf	3966,5,c	;volatile
 10224                           
 10225                           ;main.c: 138: BAUDCON1bits.SCKP = 0;
 10226  015DF2  987E               	bcf	3966,4,c	;volatile
 10227                           
 10228                           ;main.c: 139: BAUDCON1bits.WUE = 0;
 10229  015DF4  927E               	bcf	3966,1,c	;volatile
 10230                           
 10231                           ;main.c: 140: BAUDCON1bits.ABDEN = 0;
 10232  015DF6  907E               	bcf	3966,0,c	;volatile
 10233                           
 10234                           ;main.c: 142: TXSTA1bits.BRGH = 1;
 10235  015DF8  84AD               	bsf	4013,2,c	;volatile
 10236                           
 10237                           ;main.c: 143: BAUDCON1bits.BRG16 = 0;
 10238  015DFA  967E               	bcf	3966,3,c	;volatile
 10239                           
 10240                           ;main.c: 144: SPBRG1 = 51;
 10241  015DFC  0E33               	movlw	51
 10242  015DFE  6EB0               	movwf	4016,c	;volatile
 10243  015E00  0012               	return		;funcret
 10244  015E02                     __end_of_InitSerialCommunication:
 10245                           	opt stack 0
 10246                           tosu	equ	0xFFF
 10247                           tosh	equ	0xFFE
 10248                           tosl	equ	0xFFD
 10249                           pclath	equ	0xFFA
 10250                           tblptru	equ	0xFF8
 10251                           tblptrh	equ	0xFF7
 10252                           tblptrl	equ	0xFF6
 10253                           tablat	equ	0xFF5
 10254                           intcon	equ	0xFF2
 10255                           postinc0	equ	0xFEE
 10256                           wreg	equ	0xFE8
 10257                           postdec1	equ	0xFE5
 10258                           fsr1h	equ	0xFE2
 10259                           fsr1l	equ	0xFE1
 10260                           indf2	equ	0xFDF
 10261                           postinc2	equ	0xFDE
 10262                           postdec2	equ	0xFDD
 10263                           plusw2	equ	0xFDB
 10264                           fsr2h	equ	0xFDA
 10265                           fsr2l	equ	0xFD9
 10266                           status	equ	0xFD8
 10267                           
 10268 ;; *************** function _InitADC *****************
 10269 ;; Defined at:
 10270 ;;		line 86 in file "main.c"
 10271 ;; Parameters:    Size  Location     Type
 10272 ;;		None
 10273 ;; Auto vars:     Size  Location     Type
 10274 ;;		None
 10275 ;; Return value:  Size  Location     Type
 10276 ;;                  1    wreg      void 
 10277 ;; Registers used:
 10278 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10279 ;; Tracked objects:
 10280 ;;		On entry : 0/0
 10281 ;;		On exit  : 0/0
 10282 ;;		Unchanged: 0/0
 10283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10286 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10287 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10288 ;;Total ram usage:        1 bytes
 10289 ;; Hardware stack levels used:    1
 10290 ;; Hardware stack levels required when called:    7
 10291 ;; This function calls:
 10292 ;;		Nothing
 10293 ;; This function is called by:
 10294 ;;		_main
 10295 ;; This function uses a non-reentrant model
 10296 ;;
 10297                           
 10298                           	psect	text41
 10299  0154F6                     __ptext41:
 10300                           	opt stack 0
 10301  0154F6                     _InitADC:
 10302                           	opt stack 23
 10303                           
 10304                           ;main.c: 88: ADCON1 = 0b10101101;
 10305                           
 10306                           ;incstack = 0
 10307  0154F6  0EAD               	movlw	173
 10308  0154F8  6EC1               	movwf	4033,c	;volatile
 10309                           
 10310                           ;main.c: 89: for (thisReading = 0; thisReading < numReadings; thisReading++) {
 10311  0154FA  0E00               	movlw	0
 10312  0154FC  0101               	movlb	1	; () banked
 10313  0154FE  6F25               	movwf	(_thisReading+1)& (0+255),b
 10314  015500  0E00               	movlw	0
 10315  015502  6F24               	movwf	_thisReading& (0+255),b
 10316  015504  D010               	goto	l2118
 10317  015506                     
 10318                           ;main.c: 90: readings[thisReading] = 0;
 10319                           
 10320                           ; BSR set to: 1
 10321  015506  90D8               	bcf	status,0,c
 10322  015508  0101               	movlb	1	; () banked
 10323  01550A  3524               	rlcf	_thisReading& (0+255),w,b
 10324  01550C  6ED9               	movwf	fsr2l,c
 10325  01550E  3525               	rlcf	(_thisReading+1)& (0+255),w,b
 10326  015510  6EDA               	movwf	fsr2h,c
 10327  015512  0E00               	movlw	low _readings
 10328  015514  26D9               	addwf	fsr2l,f,c
 10329  015516  0E02               	movlw	high _readings
 10330  015518  22DA               	addwfc	fsr2h,f,c
 10331  01551A  0E00               	movlw	0
 10332  01551C  6EDE               	movwf	postinc2,c
 10333  01551E  0E00               	movlw	0
 10334  015520  6EDD               	movwf	postdec2,c
 10335                           
 10336                           ; BSR set to: 1
 10337  015522  4B24               	infsnz	_thisReading& (0+255),f,b
 10338  015524  2B25               	incf	(_thisReading+1)& (0+255),f,b
 10339  015526                     l2118:
 10340                           
 10341                           ; BSR set to: 1
 10342                           
 10343                           ; BSR set to: 1
 10344  015526  51F1               	movf	_numReadings& (0+255),w,b
 10345  015528  5D24               	subwf	_thisReading& (0+255),w,b
 10346  01552A  5125               	movf	(_thisReading+1)& (0+255),w,b
 10347  01552C  0A80               	xorlw	128
 10348  01552E  0100               	movlb	0	; () banked
 10349  015530  6F60               	movwf	??_InitADC& (0+255),b
 10350  015532  0101               	movlb	1	; () banked
 10351  015534  51F2               	movf	(_numReadings+1)& (0+255),w,b
 10352  015536  0A80               	xorlw	128
 10353  015538  0100               	movlb	0	; () banked
 10354  01553A  5960               	subwfb	??_InitADC& (0+255),w,b
 10355  01553C  B0D8               	btfsc	status,0,c
 10356  01553E  0012               	return	
 10357  015540  D7E2               	goto	l2119
 10358  015542                     __end_of_InitADC:
 10359                           	opt stack 0
 10360                           tosu	equ	0xFFF
 10361                           tosh	equ	0xFFE
 10362                           tosl	equ	0xFFD
 10363                           pclath	equ	0xFFA
 10364                           tblptru	equ	0xFF8
 10365                           tblptrh	equ	0xFF7
 10366                           tblptrl	equ	0xFF6
 10367                           tablat	equ	0xFF5
 10368                           intcon	equ	0xFF2
 10369                           postinc0	equ	0xFEE
 10370                           wreg	equ	0xFE8
 10371                           postdec1	equ	0xFE5
 10372                           fsr1h	equ	0xFE2
 10373                           fsr1l	equ	0xFE1
 10374                           indf2	equ	0xFDF
 10375                           postinc2	equ	0xFDE
 10376                           postdec2	equ	0xFDD
 10377                           plusw2	equ	0xFDB
 10378                           fsr2h	equ	0xFDA
 10379                           fsr2l	equ	0xFD9
 10380                           status	equ	0xFD8
 10381                           
 10382 ;; *************** function _ISR_Enable *****************
 10383 ;; Defined at:
 10384 ;;		line 27 in file "Library/ISR.c"
 10385 ;; Parameters:    Size  Location     Type
 10386 ;;		None
 10387 ;; Auto vars:     Size  Location     Type
 10388 ;;		None
 10389 ;; Return value:  Size  Location     Type
 10390 ;;                  1    wreg      void 
 10391 ;; Registers used:
 10392 ;;		None
 10393 ;; Tracked objects:
 10394 ;;		On entry : 0/0
 10395 ;;		On exit  : 0/0
 10396 ;;		Unchanged: 0/0
 10397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10402 ;;Total ram usage:        0 bytes
 10403 ;; Hardware stack levels used:    1
 10404 ;; Hardware stack levels required when called:    7
 10405 ;; This function calls:
 10406 ;;		Nothing
 10407 ;; This function is called by:
 10408 ;;		_main
 10409 ;; This function uses a non-reentrant model
 10410 ;;
 10411                           
 10412                           	psect	text42
 10413  016090                     __ptext42:
 10414                           	opt stack 0
 10415  016090                     _ISR_Enable:
 10416                           	opt stack 23
 10417                           
 10418                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 10419                           
 10420                           ; BSR set to: 0
 10421                           ;incstack = 0
 10422  016090  8CF2               	bsf	intcon,6,c	;volatile
 10423                           
 10424                           ;ISR.c: 30: INTCONbits.GIE = 1;
 10425  016092  8EF2               	bsf	intcon,7,c	;volatile
 10426                           
 10427                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 10428  016094  88F2               	bsf	intcon,4,c	;volatile
 10429                           
 10430                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 10431  016096  92F2               	bcf	intcon,1,c	;volatile
 10432  016098  0012               	return		;funcret
 10433  01609A                     __end_of_ISR_Enable:
 10434                           	opt stack 0
 10435                           tosu	equ	0xFFF
 10436                           tosh	equ	0xFFE
 10437                           tosl	equ	0xFFD
 10438                           pclath	equ	0xFFA
 10439                           tblptru	equ	0xFF8
 10440                           tblptrh	equ	0xFF7
 10441                           tblptrl	equ	0xFF6
 10442                           tablat	equ	0xFF5
 10443                           intcon	equ	0xFF2
 10444                           postinc0	equ	0xFEE
 10445                           wreg	equ	0xFE8
 10446                           postdec1	equ	0xFE5
 10447                           fsr1h	equ	0xFE2
 10448                           fsr1l	equ	0xFE1
 10449                           indf2	equ	0xFDF
 10450                           postinc2	equ	0xFDE
 10451                           postdec2	equ	0xFDD
 10452                           plusw2	equ	0xFDB
 10453                           fsr2h	equ	0xFDA
 10454                           fsr2l	equ	0xFD9
 10455                           status	equ	0xFD8
 10456                           
 10457 ;; *************** function _HMI_Poll *****************
 10458 ;; Defined at:
 10459 ;;		line 252 in file "HMI.c"
 10460 ;; Parameters:    Size  Location     Type
 10461 ;;		None
 10462 ;; Auto vars:     Size  Location     Type
 10463 ;;		None
 10464 ;; Return value:  Size  Location     Type
 10465 ;;                  1    wreg      void 
 10466 ;; Registers used:
 10467 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10468 ;; Tracked objects:
 10469 ;;		On entry : 0/0
 10470 ;;		On exit  : 0/0
 10471 ;;		Unchanged: 0/0
 10472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10477 ;;Total ram usage:        0 bytes
 10478 ;; Hardware stack levels used:    1
 10479 ;; Hardware stack levels required when called:   15
 10480 ;; This function calls:
 10481 ;;		_Button_Poll
 10482 ;; This function is called by:
 10483 ;;		_main
 10484 ;; This function uses a non-reentrant model
 10485 ;;
 10486                           
 10487                           	psect	text43
 10488  01504A                     __ptext43:
 10489                           	opt stack 0
 10490  01504A                     _HMI_Poll:
 10491                           	opt stack 15
 10492                           
 10493                           ;HMI.c: 254: TRISE = 0xFC;
 10494                           
 10495                           ;incstack = 0
 10496  01504A  0EFC               	movlw	252
 10497  01504C  6E96               	movwf	3990,c	;volatile
 10498                           
 10499                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 10500  01504E  0E78               	movlw	low (_HMIBoard+48)
 10501  015050  0100               	movlb	0	; () banked
 10502  015052  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10503  015054  0E01               	movlw	high (_HMIBoard+48)
 10504  015056  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10505  015058  0E01               	movlw	1
 10506  01505A  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10507  01505C  EC3A  F09A         	call	_Button_Poll	;wreg free
 10508                           
 10509                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 10510  015060  0E5A               	movlw	low (_HMIBoard+18)
 10511  015062  0100               	movlb	0	; () banked
 10512  015064  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10513  015066  0E01               	movlw	high (_HMIBoard+18)
 10514  015068  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10515  01506A  0E01               	movlw	1
 10516  01506C  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10517  01506E  EC3A  F09A         	call	_Button_Poll	;wreg free
 10518                           
 10519                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 10520  015072  0E50               	movlw	low (_HMIBoard+8)
 10521  015074  0100               	movlb	0	; () banked
 10522  015076  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10523  015078  0E01               	movlw	high (_HMIBoard+8)
 10524  01507A  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10525  01507C  0E01               	movlw	1
 10526  01507E  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10527  015080  EC3A  F09A         	call	_Button_Poll	;wreg free
 10528                           
 10529                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 10530  015084  0E64               	movlw	low (_HMIBoard+28)
 10531  015086  0100               	movlb	0	; () banked
 10532  015088  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10533  01508A  0E01               	movlw	high (_HMIBoard+28)
 10534  01508C  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10535  01508E  0E01               	movlw	1
 10536  015090  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10537  015092  EC3A  F09A         	call	_Button_Poll	;wreg free
 10538                           
 10539                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 10540  015096  0E6E               	movlw	low (_HMIBoard+38)
 10541  015098  0100               	movlb	0	; () banked
 10542  01509A  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10543  01509C  0E01               	movlw	high (_HMIBoard+38)
 10544  01509E  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10545  0150A0  0E01               	movlw	1
 10546  0150A2  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10547  0150A4  EC3A  F09A         	call	_Button_Poll	;wreg free
 10548  0150A8  0012               	return		;funcret
 10549  0150AA                     __end_of_HMI_Poll:
 10550                           	opt stack 0
 10551                           tosu	equ	0xFFF
 10552                           tosh	equ	0xFFE
 10553                           tosl	equ	0xFFD
 10554                           pclath	equ	0xFFA
 10555                           tblptru	equ	0xFF8
 10556                           tblptrh	equ	0xFF7
 10557                           tblptrl	equ	0xFF6
 10558                           tablat	equ	0xFF5
 10559                           intcon	equ	0xFF2
 10560                           postinc0	equ	0xFEE
 10561                           wreg	equ	0xFE8
 10562                           postdec1	equ	0xFE5
 10563                           fsr1h	equ	0xFE2
 10564                           fsr1l	equ	0xFE1
 10565                           indf2	equ	0xFDF
 10566                           postinc2	equ	0xFDE
 10567                           postdec2	equ	0xFDD
 10568                           plusw2	equ	0xFDB
 10569                           fsr2h	equ	0xFDA
 10570                           fsr2l	equ	0xFD9
 10571                           status	equ	0xFD8
 10572                           
 10573 ;; *************** function _Button_Poll *****************
 10574 ;; Defined at:
 10575 ;;		line 57 in file "Library/Button.c"
 10576 ;; Parameters:    Size  Location     Type
 10577 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 10578 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 10579 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 10580 ;; Auto vars:     Size  Location     Type
 10581 ;;  Pin             1   35[BANK0 ] unsigned char 
 10582 ;; Return value:  Size  Location     Type
 10583 ;;                  1    wreg      unsigned char 
 10584 ;; Registers used:
 10585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10586 ;; Tracked objects:
 10587 ;;		On entry : 0/0
 10588 ;;		On exit  : 0/0
 10589 ;;		Unchanged: 0/0
 10590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10591 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10592 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10593 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10594 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10595 ;;Total ram usage:        9 bytes
 10596 ;; Hardware stack levels used:    1
 10597 ;; Hardware stack levels required when called:   14
 10598 ;; This function calls:
 10599 ;;		_Event_DIPSwitch
 10600 ;;		_Event_NULL
 10601 ;;		_Event_TestButton
 10602 ;;		_HMI_DIPSwitch
 10603 ;;		_HMI_DownSwitch
 10604 ;;		_HMI_LeftSwitch
 10605 ;;		_HMI_RightSwitch
 10606 ;;		_HMI_UpSwitch
 10607 ;;		_MXK_DIPSwitch
 10608 ;;		_MXK_TestButton
 10609 ;; This function is called by:
 10610 ;;		_HMI_Poll
 10611 ;;		_MXK_Poll
 10612 ;; This function uses a non-reentrant model
 10613 ;;
 10614                           
 10615                           	psect	text44
 10616  013474                     __ptext44:
 10617                           	opt stack 0
 10618  013474                     _Button_Poll:
 10619                           	opt stack 15
 10620                           
 10621                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 10622                           
 10623                           ;incstack = 0
 10624  013474  0100               	movlb	0	; () banked
 10625  013476  EE20 F007          	lfsr	2,7
 10626  01347A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10627  01347C  26D9               	addwf	fsr2l,f,c
 10628  01347E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10629  013480  22DA               	addwfc	fsr2h,f,c
 10630  013482  D801               	call	u11978
 10631  013484  D00A               	goto	u11979
 10632  013486                     u11978:
 10633  013486  0005               	push	
 10634  013488  6EFA               	movwf	pclath,c
 10635  01348A  50DE               	movf	postinc2,w,c
 10636  01348C  6EFD               	movwf	tosl,c
 10637  01348E  50DE               	movf	postinc2,w,c
 10638  013490  6EFE               	movwf	tosh,c
 10639  013492  50DE               	movf	postinc2,w,c
 10640  013494  6EFF               	movwf	tosu,c
 10641  013496  50FA               	movf	pclath,w,c
 10642  013498  0012               	return		;indir
 10643  01349A                     u11979:
 10644  01349A  0100               	movlb	0	; () banked
 10645  01349C  6F83               	movwf	Button_Poll@Pin& (0+255),b
 10646                           
 10647                           ; BSR set to: 0
 10648                           ;Button.c: 61: if (pButton->mState == Pin)
 10649  01349E  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 10650  0134A2  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10651  0134A6  5183               	movf	Button_Poll@Pin& (0+255),w,b
 10652  0134A8  18DE               	xorwf	postinc2,w,c
 10653  0134AA  A4D8               	btfss	status,2,c
 10654  0134AC  D01C               	goto	l11
 10655                           
 10656                           ; BSR set to: 0
 10657                           ;Button.c: 62: {
 10658                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 10659  0134AE  EE20 F001          	lfsr	2,1
 10660  0134B2  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10661  0134B4  26D9               	addwf	fsr2l,f,c
 10662  0134B6  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10663  0134B8  22DA               	addwfc	fsr2h,f,c
 10664  0134BA  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10665  0134BC  5CDE               	subwf	postinc2,w,c
 10666  0134BE  B0D8               	btfsc	status,0,c
 10667  0134C0  D009               	goto	l12
 10668                           
 10669                           ; BSR set to: 0
 10670                           ;Button.c: 66: pButton->mCount = 0;
 10671  0134C2  EE20 F001          	lfsr	2,1
 10672  0134C6  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10673  0134C8  26D9               	addwf	fsr2l,f,c
 10674  0134CA  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10675  0134CC  22DA               	addwfc	fsr2h,f,c
 10676  0134CE  0E00               	movlw	0
 10677  0134D0  6EDF               	movwf	indf2,c
 10678  0134D2  0012               	return	
 10679  0134D4                     l12:
 10680                           
 10681                           ; BSR set to: 0
 10682                           ;Button.c: 67: else
 10683                           ;Button.c: 68: pButton->mCount -= pIncrement;
 10684                           
 10685                           ; BSR set to: 0
 10686  0134D4  EE20 F001          	lfsr	2,1
 10687  0134D8  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10688  0134DA  26D9               	addwf	fsr2l,f,c
 10689  0134DC  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10690  0134DE  22DA               	addwfc	fsr2h,f,c
 10691  0134E0  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10692  0134E2  5EDF               	subwf	indf2,f,c
 10693                           
 10694                           ; BSR set to: 0
 10695                           ;Button.c: 69: }
 10696  0134E4  0012               	return	
 10697  0134E6                     l11:
 10698                           
 10699                           ; BSR set to: 0
 10700                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 10701                           
 10702                           ; BSR set to: 0
 10703  0134E6  EE20 F001          	lfsr	2,1
 10704  0134EA  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10705  0134EC  26D9               	addwf	fsr2l,f,c
 10706  0134EE  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10707  0134F0  22DA               	addwfc	fsr2h,f,c
 10708  0134F2  50DF               	movf	indf2,w,c
 10709  0134F4  6F7E               	movwf	??_Button_Poll& (0+255),b
 10710  0134F6  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 10711  0134F8  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10712  0134FA  277E               	addwf	??_Button_Poll& (0+255),f,b
 10713  0134FC  0E00               	movlw	0
 10714  0134FE  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 10715  013500  EE20 F001          	lfsr	2,1
 10716  013504  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10717  013506  26D9               	addwf	fsr2l,f,c
 10718  013508  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10719  01350A  22DA               	addwfc	fsr2h,f,c
 10720  01350C  50DF               	movf	indf2,w,c
 10721  01350E  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 10722  013510  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 10723  013512  517E               	movf	??_Button_Poll& (0+255),w,b
 10724  013514  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10725  013516  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 10726  013518  0A80               	xorlw	128
 10727  01351A  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 10728  01351C  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 10729  01351E  0A80               	xorlw	128
 10730  013520  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 10731  013522  B0D8               	btfsc	status,0,c
 10732  013524  0012               	return	
 10733                           
 10734                           ; BSR set to: 0
 10735                           ;Button.c: 73: {
 10736                           ;Button.c: 75: pButton->mCount += pIncrement;
 10737  013526  EE20 F001          	lfsr	2,1
 10738  01352A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10739  01352C  26D9               	addwf	fsr2l,f,c
 10740  01352E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10741  013530  22DA               	addwfc	fsr2h,f,c
 10742  013532  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10743  013534  26DF               	addwf	indf2,f,c
 10744                           
 10745                           ; BSR set to: 0
 10746                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 10747  013536  EE20 F002          	lfsr	2,2
 10748  01353A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10749  01353C  26D9               	addwf	fsr2l,f,c
 10750  01353E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10751  013540  22DA               	addwfc	fsr2h,f,c
 10752  013542  EE10 F001          	lfsr	1,1
 10753  013546  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10754  013548  26E1               	addwf	fsr1l,f,c
 10755  01354A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10756  01354C  22E2               	addwfc	fsr1h,f,c
 10757  01354E  50E7               	movf	indf1,w,c
 10758  013550  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 10759  013552  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 10760  013554  50DE               	movf	postinc2,w,c
 10761  013556  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10762  013558  50DE               	movf	postinc2,w,c
 10763  01355A  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 10764  01355C  A0D8               	btfss	status,0,c
 10765  01355E  0012               	return	
 10766                           
 10767                           ; BSR set to: 0
 10768                           ;Button.c: 77: {
 10769                           ;Button.c: 79: pButton->mState = Pin;
 10770  013560  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 10771  013564  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10772  013568  C083  FFDF         	movff	Button_Poll@Pin,indf2
 10773                           
 10774                           ; BSR set to: 0
 10775                           ;Button.c: 80: pButton->mCount = 0;
 10776  01356C  EE20 F001          	lfsr	2,1
 10777  013570  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10778  013572  26D9               	addwf	fsr2l,f,c
 10779  013574  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10780  013576  22DA               	addwfc	fsr2h,f,c
 10781  013578  0E00               	movlw	0
 10782  01357A  6EDF               	movwf	indf2,c
 10783                           
 10784                           ; BSR set to: 0
 10785                           ;Button.c: 83: pButton->mFunction(Pin);
 10786  01357C  EE20 F004          	lfsr	2,4
 10787  013580  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10788  013582  26D9               	addwf	fsr2l,f,c
 10789  013584  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10790  013586  22DA               	addwfc	fsr2h,f,c
 10791  013588  D801               	call	u12028
 10792  01358A  0012               	return	
 10793  01358C                     u12028:
 10794  01358C  0005               	push	
 10795  01358E  6EFA               	movwf	pclath,c
 10796  013590  50DE               	movf	postinc2,w,c
 10797  013592  6EFD               	movwf	tosl,c
 10798  013594  50DE               	movf	postinc2,w,c
 10799  013596  6EFE               	movwf	tosh,c
 10800  013598  50DE               	movf	postinc2,w,c
 10801  01359A  6EFF               	movwf	tosu,c
 10802  01359C  50FA               	movf	pclath,w,c
 10803  01359E  5183               	movf	Button_Poll@Pin& (0+255),w,b
 10804  0135A0  0012               	return		;indir
 10805  0135A2                     __end_of_Button_Poll:
 10806                           	opt stack 0
 10807                           tosu	equ	0xFFF
 10808                           tosh	equ	0xFFE
 10809                           tosl	equ	0xFFD
 10810                           pclath	equ	0xFFA
 10811                           tblptru	equ	0xFF8
 10812                           tblptrh	equ	0xFF7
 10813                           tblptrl	equ	0xFF6
 10814                           tablat	equ	0xFF5
 10815                           intcon	equ	0xFF2
 10816                           postinc0	equ	0xFEE
 10817                           wreg	equ	0xFE8
 10818                           indf1	equ	0xFE7
 10819                           postdec1	equ	0xFE5
 10820                           fsr1h	equ	0xFE2
 10821                           fsr1l	equ	0xFE1
 10822                           indf2	equ	0xFDF
 10823                           postinc2	equ	0xFDE
 10824                           postdec2	equ	0xFDD
 10825                           plusw2	equ	0xFDB
 10826                           fsr2h	equ	0xFDA
 10827                           fsr2l	equ	0xFD9
 10828                           status	equ	0xFD8
 10829                           
 10830 ;; *************** function _MXK_DIPSwitch *****************
 10831 ;; Defined at:
 10832 ;;		line 24 in file "Library/MXK.c"
 10833 ;; Parameters:    Size  Location     Type
 10834 ;;		None
 10835 ;; Auto vars:     Size  Location     Type
 10836 ;;		None
 10837 ;; Return value:  Size  Location     Type
 10838 ;;                  1    wreg      unsigned char 
 10839 ;; Registers used:
 10840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10841 ;; Tracked objects:
 10842 ;;		On entry : 0/0
 10843 ;;		On exit  : 0/0
 10844 ;;		Unchanged: 0/0
 10845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10850 ;;Total ram usage:        0 bytes
 10851 ;; Hardware stack levels used:    1
 10852 ;; Hardware stack levels required when called:    8
 10853 ;; This function calls:
 10854 ;;		_Port_GetQuad
 10855 ;; This function is called by:
 10856 ;;		_FunctInitButton
 10857 ;;		_Button_Poll
 10858 ;;		_main
 10859 ;; This function uses a non-reentrant model
 10860 ;;
 10861                           
 10862                           	psect	text45
 10863  015F76                     __ptext45:
 10864                           	opt stack 0
 10865  015F76                     _MXK_DIPSwitch:
 10866                           	opt stack 22
 10867                           
 10868                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 10869                           
 10870                           ;incstack = 0
 10871  015F76  0E97               	movlw	low _PortD
 10872  015F78  0100               	movlb	0	; () banked
 10873  015F7A  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 10874  015F7C  0E01               	movlw	high _PortD
 10875  015F7E  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 10876  015F80  0E00               	movlw	0
 10877  015F82  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 10878  015F84  EC62  F0AC         	call	_Port_GetQuad
 10879  015F88  0012               	return	
 10880  015F8A                     __end_of_MXK_DIPSwitch:
 10881                           	opt stack 0
 10882                           tosu	equ	0xFFF
 10883                           tosh	equ	0xFFE
 10884                           tosl	equ	0xFFD
 10885                           pclath	equ	0xFFA
 10886                           tblptru	equ	0xFF8
 10887                           tblptrh	equ	0xFF7
 10888                           tblptrl	equ	0xFF6
 10889                           tablat	equ	0xFF5
 10890                           intcon	equ	0xFF2
 10891                           postinc0	equ	0xFEE
 10892                           wreg	equ	0xFE8
 10893                           indf1	equ	0xFE7
 10894                           postdec1	equ	0xFE5
 10895                           fsr1h	equ	0xFE2
 10896                           fsr1l	equ	0xFE1
 10897                           indf2	equ	0xFDF
 10898                           postinc2	equ	0xFDE
 10899                           postdec2	equ	0xFDD
 10900                           plusw2	equ	0xFDB
 10901                           fsr2h	equ	0xFDA
 10902                           fsr2l	equ	0xFD9
 10903                           status	equ	0xFD8
 10904                           
 10905 ;; *************** function _HMI_DIPSwitch *****************
 10906 ;; Defined at:
 10907 ;;		line 47 in file "HMI.c"
 10908 ;; Parameters:    Size  Location     Type
 10909 ;;		None
 10910 ;; Auto vars:     Size  Location     Type
 10911 ;;		None
 10912 ;; Return value:  Size  Location     Type
 10913 ;;                  1    wreg      unsigned char 
 10914 ;; Registers used:
 10915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10916 ;; Tracked objects:
 10917 ;;		On entry : 0/0
 10918 ;;		On exit  : 0/0
 10919 ;;		Unchanged: 0/0
 10920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10925 ;;Total ram usage:        0 bytes
 10926 ;; Hardware stack levels used:    1
 10927 ;; Hardware stack levels required when called:    8
 10928 ;; This function calls:
 10929 ;;		_Port_GetQuad
 10930 ;; This function is called by:
 10931 ;;		_HMI_Init
 10932 ;;		_Button_Poll
 10933 ;;		_main
 10934 ;; This function uses a non-reentrant model
 10935 ;;
 10936                           
 10937                           	psect	text46
 10938  015F8A                     __ptext46:
 10939                           	opt stack 0
 10940  015F8A                     _HMI_DIPSwitch:
 10941                           	opt stack 20
 10942                           
 10943                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 10944                           
 10945                           ;incstack = 0
 10946  015F8A  0E8D               	movlw	low _PortE
 10947  015F8C  0100               	movlb	0	; () banked
 10948  015F8E  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 10949  015F90  0E01               	movlw	high _PortE
 10950  015F92  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 10951  015F94  0E00               	movlw	0
 10952  015F96  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 10953  015F98  EC62  F0AC         	call	_Port_GetQuad	;wreg free
 10954  015F9C  0012               	return	
 10955  015F9E                     __end_of_HMI_DIPSwitch:
 10956                           	opt stack 0
 10957                           tosu	equ	0xFFF
 10958                           tosh	equ	0xFFE
 10959                           tosl	equ	0xFFD
 10960                           pclath	equ	0xFFA
 10961                           tblptru	equ	0xFF8
 10962                           tblptrh	equ	0xFF7
 10963                           tblptrl	equ	0xFF6
 10964                           tablat	equ	0xFF5
 10965                           intcon	equ	0xFF2
 10966                           postinc0	equ	0xFEE
 10967                           wreg	equ	0xFE8
 10968                           indf1	equ	0xFE7
 10969                           postdec1	equ	0xFE5
 10970                           fsr1h	equ	0xFE2
 10971                           fsr1l	equ	0xFE1
 10972                           indf2	equ	0xFDF
 10973                           postinc2	equ	0xFDE
 10974                           postdec2	equ	0xFDD
 10975                           plusw2	equ	0xFDB
 10976                           fsr2h	equ	0xFDA
 10977                           fsr2l	equ	0xFD9
 10978                           status	equ	0xFD8
 10979                           
 10980 ;; *************** function _HMI_DownSwitch *****************
 10981 ;; Defined at:
 10982 ;;		line 42 in file "HMI.c"
 10983 ;; Parameters:    Size  Location     Type
 10984 ;;		None
 10985 ;; Auto vars:     Size  Location     Type
 10986 ;;		None
 10987 ;; Return value:  Size  Location     Type
 10988 ;;                  1    wreg      unsigned char 
 10989 ;; Registers used:
 10990 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10991 ;; Tracked objects:
 10992 ;;		On entry : 0/0
 10993 ;;		On exit  : 0/0
 10994 ;;		Unchanged: 0/0
 10995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11000 ;;Total ram usage:        0 bytes
 11001 ;; Hardware stack levels used:    1
 11002 ;; Hardware stack levels required when called:    8
 11003 ;; This function calls:
 11004 ;;		_Port_GetPin
 11005 ;; This function is called by:
 11006 ;;		_HMI_Init
 11007 ;;		_Button_Poll
 11008 ;;		_main
 11009 ;; This function uses a non-reentrant model
 11010 ;;
 11011                           
 11012                           	psect	text47
 11013  015F9E                     __ptext47:
 11014                           	opt stack 0
 11015  015F9E                     _HMI_DownSwitch:
 11016                           	opt stack 20
 11017                           
 11018                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 11019                           
 11020                           ;incstack = 0
 11021  015F9E  0E8D               	movlw	low _PortE
 11022  015FA0  0100               	movlb	0	; () banked
 11023  015FA2  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11024  015FA4  0E01               	movlw	high _PortE
 11025  015FA6  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11026  015FA8  0E06               	movlw	6
 11027  015FAA  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11028  015FAC  ECBC  F0AC         	call	_Port_GetPin	;wreg free
 11029  015FB0  0012               	return	
 11030  015FB2                     __end_of_HMI_DownSwitch:
 11031                           	opt stack 0
 11032                           tosu	equ	0xFFF
 11033                           tosh	equ	0xFFE
 11034                           tosl	equ	0xFFD
 11035                           pclath	equ	0xFFA
 11036                           tblptru	equ	0xFF8
 11037                           tblptrh	equ	0xFF7
 11038                           tblptrl	equ	0xFF6
 11039                           tablat	equ	0xFF5
 11040                           intcon	equ	0xFF2
 11041                           postinc0	equ	0xFEE
 11042                           wreg	equ	0xFE8
 11043                           indf1	equ	0xFE7
 11044                           postdec1	equ	0xFE5
 11045                           fsr1h	equ	0xFE2
 11046                           fsr1l	equ	0xFE1
 11047                           indf2	equ	0xFDF
 11048                           postinc2	equ	0xFDE
 11049                           postdec2	equ	0xFDD
 11050                           plusw2	equ	0xFDB
 11051                           fsr2h	equ	0xFDA
 11052                           fsr2l	equ	0xFD9
 11053                           status	equ	0xFD8
 11054                           
 11055 ;; *************** function _HMI_UpSwitch *****************
 11056 ;; Defined at:
 11057 ;;		line 37 in file "HMI.c"
 11058 ;; Parameters:    Size  Location     Type
 11059 ;;		None
 11060 ;; Auto vars:     Size  Location     Type
 11061 ;;		None
 11062 ;; Return value:  Size  Location     Type
 11063 ;;                  1    wreg      unsigned char 
 11064 ;; Registers used:
 11065 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11066 ;; Tracked objects:
 11067 ;;		On entry : 0/0
 11068 ;;		On exit  : 0/0
 11069 ;;		Unchanged: 0/0
 11070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11075 ;;Total ram usage:        0 bytes
 11076 ;; Hardware stack levels used:    1
 11077 ;; Hardware stack levels required when called:    8
 11078 ;; This function calls:
 11079 ;;		_Port_GetPin
 11080 ;; This function is called by:
 11081 ;;		_HMI_Init
 11082 ;;		_Button_Poll
 11083 ;;		_main
 11084 ;; This function uses a non-reentrant model
 11085 ;;
 11086                           
 11087                           	psect	text48
 11088  015FB2                     __ptext48:
 11089                           	opt stack 0
 11090  015FB2                     _HMI_UpSwitch:
 11091                           	opt stack 22
 11092                           
 11093                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 11094                           
 11095                           ;incstack = 0
 11096  015FB2  0E8D               	movlw	low _PortE
 11097  015FB4  0100               	movlb	0	; () banked
 11098  015FB6  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11099  015FB8  0E01               	movlw	high _PortE
 11100  015FBA  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11101  015FBC  0E07               	movlw	7
 11102  015FBE  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11103  015FC0  ECBC  F0AC         	call	_Port_GetPin	;wreg free
 11104  015FC4  0012               	return	
 11105  015FC6                     __end_of_HMI_UpSwitch:
 11106                           	opt stack 0
 11107                           tosu	equ	0xFFF
 11108                           tosh	equ	0xFFE
 11109                           tosl	equ	0xFFD
 11110                           pclath	equ	0xFFA
 11111                           tblptru	equ	0xFF8
 11112                           tblptrh	equ	0xFF7
 11113                           tblptrl	equ	0xFF6
 11114                           tablat	equ	0xFF5
 11115                           intcon	equ	0xFF2
 11116                           postinc0	equ	0xFEE
 11117                           wreg	equ	0xFE8
 11118                           indf1	equ	0xFE7
 11119                           postdec1	equ	0xFE5
 11120                           fsr1h	equ	0xFE2
 11121                           fsr1l	equ	0xFE1
 11122                           indf2	equ	0xFDF
 11123                           postinc2	equ	0xFDE
 11124                           postdec2	equ	0xFDD
 11125                           plusw2	equ	0xFDB
 11126                           fsr2h	equ	0xFDA
 11127                           fsr2l	equ	0xFD9
 11128                           status	equ	0xFD8
 11129                           
 11130 ;; *************** function _HMI_RightSwitch *****************
 11131 ;; Defined at:
 11132 ;;		line 32 in file "HMI.c"
 11133 ;; Parameters:    Size  Location     Type
 11134 ;;		None
 11135 ;; Auto vars:     Size  Location     Type
 11136 ;;		None
 11137 ;; Return value:  Size  Location     Type
 11138 ;;                  1    wreg      unsigned char 
 11139 ;; Registers used:
 11140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11141 ;; Tracked objects:
 11142 ;;		On entry : 0/0
 11143 ;;		On exit  : 0/0
 11144 ;;		Unchanged: 0/0
 11145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11150 ;;Total ram usage:        0 bytes
 11151 ;; Hardware stack levels used:    1
 11152 ;; Hardware stack levels required when called:    8
 11153 ;; This function calls:
 11154 ;;		_Port_GetPin
 11155 ;; This function is called by:
 11156 ;;		_HMI_Init
 11157 ;;		_Button_Poll
 11158 ;;		_main
 11159 ;; This function uses a non-reentrant model
 11160 ;;
 11161                           
 11162                           	psect	text49
 11163  015FC6                     __ptext49:
 11164                           	opt stack 0
 11165  015FC6                     _HMI_RightSwitch:
 11166                           	opt stack 22
 11167                           
 11168                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 11169                           
 11170                           ;incstack = 0
 11171  015FC6  0E8D               	movlw	low _PortE
 11172  015FC8  0100               	movlb	0	; () banked
 11173  015FCA  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11174  015FCC  0E01               	movlw	high _PortE
 11175  015FCE  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11176  015FD0  0E04               	movlw	4
 11177  015FD2  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11178  015FD4  ECBC  F0AC         	call	_Port_GetPin	;wreg free
 11179  015FD8  0012               	return	
 11180  015FDA                     __end_of_HMI_RightSwitch:
 11181                           	opt stack 0
 11182                           tosu	equ	0xFFF
 11183                           tosh	equ	0xFFE
 11184                           tosl	equ	0xFFD
 11185                           pclath	equ	0xFFA
 11186                           tblptru	equ	0xFF8
 11187                           tblptrh	equ	0xFF7
 11188                           tblptrl	equ	0xFF6
 11189                           tablat	equ	0xFF5
 11190                           intcon	equ	0xFF2
 11191                           postinc0	equ	0xFEE
 11192                           wreg	equ	0xFE8
 11193                           indf1	equ	0xFE7
 11194                           postdec1	equ	0xFE5
 11195                           fsr1h	equ	0xFE2
 11196                           fsr1l	equ	0xFE1
 11197                           indf2	equ	0xFDF
 11198                           postinc2	equ	0xFDE
 11199                           postdec2	equ	0xFDD
 11200                           plusw2	equ	0xFDB
 11201                           fsr2h	equ	0xFDA
 11202                           fsr2l	equ	0xFD9
 11203                           status	equ	0xFD8
 11204                           
 11205 ;; *************** function _HMI_LeftSwitch *****************
 11206 ;; Defined at:
 11207 ;;		line 27 in file "HMI.c"
 11208 ;; Parameters:    Size  Location     Type
 11209 ;;		None
 11210 ;; Auto vars:     Size  Location     Type
 11211 ;;		None
 11212 ;; Return value:  Size  Location     Type
 11213 ;;                  1    wreg      unsigned char 
 11214 ;; Registers used:
 11215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11216 ;; Tracked objects:
 11217 ;;		On entry : 0/0
 11218 ;;		On exit  : 0/0
 11219 ;;		Unchanged: 0/0
 11220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11225 ;;Total ram usage:        0 bytes
 11226 ;; Hardware stack levels used:    1
 11227 ;; Hardware stack levels required when called:    8
 11228 ;; This function calls:
 11229 ;;		_Port_GetPin
 11230 ;; This function is called by:
 11231 ;;		_HMI_Init
 11232 ;;		_Button_Poll
 11233 ;;		_main
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           	psect	text50
 11238  015FDA                     __ptext50:
 11239                           	opt stack 0
 11240  015FDA                     _HMI_LeftSwitch:
 11241                           	opt stack 20
 11242                           
 11243                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 11244                           
 11245                           ;incstack = 0
 11246  015FDA  0E8D               	movlw	low _PortE
 11247  015FDC  0100               	movlb	0	; () banked
 11248  015FDE  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11249  015FE0  0E01               	movlw	high _PortE
 11250  015FE2  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11251  015FE4  0E05               	movlw	5
 11252  015FE6  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11253  015FE8  ECBC  F0AC         	call	_Port_GetPin	;wreg free
 11254  015FEC  0012               	return	
 11255  015FEE                     __end_of_HMI_LeftSwitch:
 11256                           	opt stack 0
 11257                           tosu	equ	0xFFF
 11258                           tosh	equ	0xFFE
 11259                           tosl	equ	0xFFD
 11260                           pclath	equ	0xFFA
 11261                           tblptru	equ	0xFF8
 11262                           tblptrh	equ	0xFF7
 11263                           tblptrl	equ	0xFF6
 11264                           tablat	equ	0xFF5
 11265                           intcon	equ	0xFF2
 11266                           postinc0	equ	0xFEE
 11267                           wreg	equ	0xFE8
 11268                           indf1	equ	0xFE7
 11269                           postdec1	equ	0xFE5
 11270                           fsr1h	equ	0xFE2
 11271                           fsr1l	equ	0xFE1
 11272                           indf2	equ	0xFDF
 11273                           postinc2	equ	0xFDE
 11274                           postdec2	equ	0xFDD
 11275                           plusw2	equ	0xFDB
 11276                           fsr2h	equ	0xFDA
 11277                           fsr2l	equ	0xFD9
 11278                           status	equ	0xFD8
 11279                           
 11280 ;; *************** function _MXK_TestButton *****************
 11281 ;; Defined at:
 11282 ;;		line 14 in file "Library/MXK.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;		None
 11285 ;; Auto vars:     Size  Location     Type
 11286 ;;		None
 11287 ;; Return value:  Size  Location     Type
 11288 ;;                  1    wreg      unsigned char 
 11289 ;; Registers used:
 11290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11291 ;; Tracked objects:
 11292 ;;		On entry : 0/0
 11293 ;;		On exit  : 0/0
 11294 ;;		Unchanged: 0/0
 11295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11300 ;;Total ram usage:        0 bytes
 11301 ;; Hardware stack levels used:    1
 11302 ;; Hardware stack levels required when called:    8
 11303 ;; This function calls:
 11304 ;;		_Port_GetPin
 11305 ;; This function is called by:
 11306 ;;		_FunctInitButton
 11307 ;;		_Button_Poll
 11308 ;;		_main
 11309 ;; This function uses a non-reentrant model
 11310 ;;
 11311                           
 11312                           	psect	text51
 11313  015FEE                     __ptext51:
 11314                           	opt stack 0
 11315  015FEE                     _MXK_TestButton:
 11316                           	opt stack 22
 11317                           
 11318                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 11319                           
 11320                           ;incstack = 0
 11321  015FEE  0EA1               	movlw	low _PortB
 11322  015FF0  0100               	movlb	0	; () banked
 11323  015FF2  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11324  015FF4  0E01               	movlw	high _PortB
 11325  015FF6  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11326  015FF8  0E04               	movlw	4
 11327  015FFA  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11328  015FFC  ECBC  F0AC         	call	_Port_GetPin	;wreg free
 11329  016000  0012               	return	
 11330  016002                     __end_of_MXK_TestButton:
 11331                           	opt stack 0
 11332                           tosu	equ	0xFFF
 11333                           tosh	equ	0xFFE
 11334                           tosl	equ	0xFFD
 11335                           pclath	equ	0xFFA
 11336                           tblptru	equ	0xFF8
 11337                           tblptrh	equ	0xFF7
 11338                           tblptrl	equ	0xFF6
 11339                           tablat	equ	0xFF5
 11340                           intcon	equ	0xFF2
 11341                           postinc0	equ	0xFEE
 11342                           wreg	equ	0xFE8
 11343                           indf1	equ	0xFE7
 11344                           postdec1	equ	0xFE5
 11345                           fsr1h	equ	0xFE2
 11346                           fsr1l	equ	0xFE1
 11347                           indf2	equ	0xFDF
 11348                           postinc2	equ	0xFDE
 11349                           postdec2	equ	0xFDD
 11350                           plusw2	equ	0xFDB
 11351                           fsr2h	equ	0xFDA
 11352                           fsr2l	equ	0xFD9
 11353                           status	equ	0xFD8
 11354                           
 11355 ;; *************** function _Port_GetQuad *****************
 11356 ;; Defined at:
 11357 ;;		line 498 in file "Library/Port.c"
 11358 ;; Parameters:    Size  Location     Type
 11359 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 11360 ;;		 -> PortE(10), PortD(10), 
 11361 ;;  pQuad           1    2[BANK0 ] enum E6776
 11362 ;; Auto vars:     Size  Location     Type
 11363 ;;  Output          1    5[BANK0 ] unsigned char 
 11364 ;; Return value:  Size  Location     Type
 11365 ;;                  1    wreg      unsigned char 
 11366 ;; Registers used:
 11367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11368 ;; Tracked objects:
 11369 ;;		On entry : 0/0
 11370 ;;		On exit  : 0/0
 11371 ;;		Unchanged: 0/0
 11372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11373 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11375 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11376 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11377 ;;Total ram usage:        6 bytes
 11378 ;; Hardware stack levels used:    1
 11379 ;; Hardware stack levels required when called:    7
 11380 ;; This function calls:
 11381 ;;		Nothing
 11382 ;; This function is called by:
 11383 ;;		_HMI_DIPSwitch
 11384 ;;		_MXK_DIPSwitch
 11385 ;;		_Port_ToggleQuad
 11386 ;; This function uses a non-reentrant model
 11387 ;;
 11388                           
 11389                           	psect	text52
 11390  0158C4                     __ptext52:
 11391                           	opt stack 0
 11392  0158C4                     _Port_GetQuad:
 11393                           	opt stack 22
 11394                           
 11395                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 11396                           
 11397                           ;incstack = 0
 11398  0158C4  0100               	movlb	0	; () banked
 11399  0158C6  EE20 F006          	lfsr	2,6
 11400  0158CA  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 11401  0158CC  26D9               	addwf	fsr2l,f,c
 11402  0158CE  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 11403  0158D0  22DA               	addwfc	fsr2h,f,c
 11404  0158D2  CFDE F063          	movff	postinc2,??_Port_GetQuad
 11405  0158D6  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 11406  0158DA  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 11407  0158DE  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 11408  0158E2  50DF               	movf	indf2,w,c
 11409  0158E4  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 11410                           
 11411                           ; BSR set to: 0
 11412                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 11413  0158E6  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 11414  0158E8  0D04               	mullw	4
 11415  0158EA  28F3               	incf	prodl,w,c
 11416  0158EC  6F63               	movwf	??_Port_GetQuad& (0+255),b
 11417  0158EE  D002               	goto	u11260
 11418  0158F0                     u11265:
 11419  0158F0  90D8               	bcf	status,0,c
 11420  0158F2  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 11421  0158F4                     u11260:
 11422  0158F4  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 11423  0158F6  D7FC               	goto	u11265
 11424                           
 11425                           ;Port.c: 502: Output &= 0xF;
 11426  0158F8  0E0F               	movlw	15
 11427  0158FA  0100               	movlb	0	; () banked
 11428  0158FC  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 11429                           
 11430                           ; BSR set to: 0
 11431                           ;Port.c: 503: return Output;
 11432  0158FE  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 11433  015900  0012               	return	
 11434  015902                     __end_of_Port_GetQuad:
 11435                           	opt stack 0
 11436                           tosu	equ	0xFFF
 11437                           tosh	equ	0xFFE
 11438                           tosl	equ	0xFFD
 11439                           pclath	equ	0xFFA
 11440                           tblptru	equ	0xFF8
 11441                           tblptrh	equ	0xFF7
 11442                           tblptrl	equ	0xFF6
 11443                           tablat	equ	0xFF5
 11444                           prodl	equ	0xFF3
 11445                           intcon	equ	0xFF2
 11446                           postinc0	equ	0xFEE
 11447                           wreg	equ	0xFE8
 11448                           indf1	equ	0xFE7
 11449                           postdec1	equ	0xFE5
 11450                           fsr1h	equ	0xFE2
 11451                           fsr1l	equ	0xFE1
 11452                           indf2	equ	0xFDF
 11453                           postinc2	equ	0xFDE
 11454                           postdec2	equ	0xFDD
 11455                           plusw2	equ	0xFDB
 11456                           fsr2h	equ	0xFDA
 11457                           fsr2l	equ	0xFD9
 11458                           status	equ	0xFD8
 11459                           
 11460 ;; *************** function _Event_DIPSwitch *****************
 11461 ;; Defined at:
 11462 ;;		line 22 in file "Events.c"
 11463 ;; Parameters:    Size  Location     Type
 11464 ;;  pState          1    wreg     unsigned char 
 11465 ;; Auto vars:     Size  Location     Type
 11466 ;;  pState          1   25[BANK0 ] unsigned char 
 11467 ;;  Bar             1   26[BANK0 ] unsigned char 
 11468 ;; Return value:  Size  Location     Type
 11469 ;;                  1    wreg      void 
 11470 ;; Registers used:
 11471 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11472 ;; Tracked objects:
 11473 ;;		On entry : 0/0
 11474 ;;		On exit  : 0/0
 11475 ;;		Unchanged: 0/0
 11476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11478 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11480 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11481 ;;Total ram usage:        2 bytes
 11482 ;; Hardware stack levels used:    1
 11483 ;; Hardware stack levels required when called:   13
 11484 ;; This function calls:
 11485 ;;		_HMI_GetBar
 11486 ;;		_HMI_SetBar
 11487 ;;		_LED_Toggle
 11488 ;; This function is called by:
 11489 ;;		_FunctInitButton
 11490 ;;		_Button_Poll
 11491 ;; This function uses a non-reentrant model
 11492 ;;
 11493                           
 11494                           	psect	text53
 11495  015D18                     __ptext53:
 11496                           	opt stack 0
 11497  015D18                     _Event_DIPSwitch:
 11498                           	opt stack 15
 11499                           
 11500                           ; BSR set to: 0
 11501                           ;incstack = 0
 11502                           ;Event_DIPSwitch@pState stored from wreg
 11503  015D18  0100               	movlb	0	; () banked
 11504  015D1A  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 11505                           
 11506                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 11507  015D1C  EC6D  F0B0         	call	_HMI_GetBar	;wreg free
 11508  015D20  0100               	movlb	0	; () banked
 11509  015D22  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 11510                           
 11511                           ; BSR set to: 0
 11512                           ;Events.c: 25: Bar &= 0x0F;
 11513  015D24  0E0F               	movlw	15
 11514  015D26  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 11515                           
 11516                           ; BSR set to: 0
 11517                           ;Events.c: 26: pState <<= 4;
 11518  015D28  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 11519  015D2A  0EF0               	movlw	240
 11520  015D2C  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 11521                           
 11522                           ; BSR set to: 0
 11523                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 11524  015D2E  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 11525  015D30  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 11526  015D32  EC4D  F0B0         	call	_HMI_SetBar
 11527                           
 11528                           ;Events.c: 32: LED_Toggle(eLED1);
 11529  015D36  0E00               	movlw	0
 11530  015D38  EC03  F0AC         	call	_LED_Toggle
 11531  015D3C  0012               	return		;funcret
 11532  015D3E                     __end_of_Event_DIPSwitch:
 11533                           	opt stack 0
 11534                           tosu	equ	0xFFF
 11535                           tosh	equ	0xFFE
 11536                           tosl	equ	0xFFD
 11537                           pclath	equ	0xFFA
 11538                           tblptru	equ	0xFF8
 11539                           tblptrh	equ	0xFF7
 11540                           tblptrl	equ	0xFF6
 11541                           tablat	equ	0xFF5
 11542                           prodl	equ	0xFF3
 11543                           intcon	equ	0xFF2
 11544                           postinc0	equ	0xFEE
 11545                           wreg	equ	0xFE8
 11546                           indf1	equ	0xFE7
 11547                           postdec1	equ	0xFE5
 11548                           fsr1h	equ	0xFE2
 11549                           fsr1l	equ	0xFE1
 11550                           indf2	equ	0xFDF
 11551                           postinc2	equ	0xFDE
 11552                           postdec2	equ	0xFDD
 11553                           plusw2	equ	0xFDB
 11554                           fsr2h	equ	0xFDA
 11555                           fsr2l	equ	0xFD9
 11556                           status	equ	0xFD8
 11557                           
 11558 ;; *************** function _Event_NULL *****************
 11559 ;; Defined at:
 11560 ;;		line 9 in file "Events.c"
 11561 ;; Parameters:    Size  Location     Type
 11562 ;;  pState          1    wreg     unsigned char 
 11563 ;; Auto vars:     Size  Location     Type
 11564 ;;  pState          1    0[COMRAM] unsigned char 
 11565 ;; Return value:  Size  Location     Type
 11566 ;;                  1    wreg      void 
 11567 ;; Registers used:
 11568 ;;		wreg
 11569 ;; Tracked objects:
 11570 ;;		On entry : 0/0
 11571 ;;		On exit  : 0/0
 11572 ;;		Unchanged: 0/0
 11573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11578 ;;Total ram usage:        0 bytes
 11579 ;; Hardware stack levels used:    1
 11580 ;; Hardware stack levels required when called:    7
 11581 ;; This function calls:
 11582 ;;		Nothing
 11583 ;; This function is called by:
 11584 ;;		_HMI_Init
 11585 ;;		_Button_Poll
 11586 ;; This function uses a non-reentrant model
 11587 ;;
 11588                           
 11589                           	psect	text54
 11590  001404                     __ptext54:
 11591                           	opt stack 0
 11592  001404                     _Event_NULL:
 11593                           	opt stack 21
 11594                           
 11595                           ;incstack = 0
 11596  001404  0012               	return		;funcret
 11597  001406                     __end_of_Event_NULL:
 11598                           	opt stack 0
 11599                           tosu	equ	0xFFF
 11600                           tosh	equ	0xFFE
 11601                           tosl	equ	0xFFD
 11602                           pclath	equ	0xFFA
 11603                           tblptru	equ	0xFF8
 11604                           tblptrh	equ	0xFF7
 11605                           tblptrl	equ	0xFF6
 11606                           tablat	equ	0xFF5
 11607                           prodl	equ	0xFF3
 11608                           intcon	equ	0xFF2
 11609                           postinc0	equ	0xFEE
 11610                           wreg	equ	0xFE8
 11611                           indf1	equ	0xFE7
 11612                           postdec1	equ	0xFE5
 11613                           fsr1h	equ	0xFE2
 11614                           fsr1l	equ	0xFE1
 11615                           indf2	equ	0xFDF
 11616                           postinc2	equ	0xFDE
 11617                           postdec2	equ	0xFDD
 11618                           plusw2	equ	0xFDB
 11619                           fsr2h	equ	0xFDA
 11620                           fsr2l	equ	0xFD9
 11621                           status	equ	0xFD8
 11622                           
 11623 ;; *************** function _Event_TestButton *****************
 11624 ;; Defined at:
 11625 ;;		line 52 in file "Events.c"
 11626 ;; Parameters:    Size  Location     Type
 11627 ;;  pState          1    wreg     unsigned char 
 11628 ;; Auto vars:     Size  Location     Type
 11629 ;;  pState          1   25[BANK0 ] unsigned char 
 11630 ;; Return value:  Size  Location     Type
 11631 ;;                  1    wreg      void 
 11632 ;; Registers used:
 11633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11634 ;; Tracked objects:
 11635 ;;		On entry : 0/0
 11636 ;;		On exit  : 0/0
 11637 ;;		Unchanged: 0/0
 11638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11642 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11643 ;;Total ram usage:        1 bytes
 11644 ;; Hardware stack levels used:    1
 11645 ;; Hardware stack levels required when called:   13
 11646 ;; This function calls:
 11647 ;;		_HMI_SetButton
 11648 ;;		_HMI_SetNumber
 11649 ;;		_LED_Toggle
 11650 ;; This function is called by:
 11651 ;;		_FunctInitButton
 11652 ;;		_Button_Poll
 11653 ;; This function uses a non-reentrant model
 11654 ;;
 11655                           
 11656                           	psect	text55
 11657  015AF8                     __ptext55:
 11658                           	opt stack 0
 11659  015AF8                     _Event_TestButton:
 11660                           	opt stack 15
 11661                           
 11662                           ;incstack = 0
 11663                           ;Event_TestButton@pState stored from wreg
 11664  015AF8  0100               	movlb	0	; () banked
 11665  015AFA  6F79               	movwf	Event_TestButton@pState& (0+255),b
 11666                           
 11667                           ;Events.c: 56: static UINT8 j = 0;
 11668                           ;Events.c: 60: if (pState == 0)
 11669  015AFC  0100               	movlb	0	; () banked
 11670  015AFE  5179               	movf	Event_TestButton@pState& (0+255),w,b
 11671  015B00  A4D8               	btfss	status,2,c
 11672  015B02  D010               	goto	l1873
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;Events.c: 61: {
 11676                           ;Events.c: 62: j++;
 11677  015B04  2A38               	incf	Event_TestButton@j,f,c
 11678                           
 11679                           ; BSR set to: 0
 11680                           ;Events.c: 63: val += j;
 11681  015B06  5038               	movf	Event_TestButton@j,w,c
 11682  015B08  0101               	movlb	1	; () banked
 11683  015B0A  2738               	addwf	_val& (0+255),f,b
 11684  015B0C  0E00               	movlw	0
 11685  015B0E  2339               	addwfc	(_val+1)& (0+255),f,b
 11686                           
 11687                           ; BSR set to: 1
 11688                           ;Events.c: 64: HMI_SetNumber( val );
 11689  015B10  C138  F076         	movff	_val,HMI_SetNumber@pInput
 11690  015B14  C139  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 11691  015B18  EC9F  F0AE         	call	_HMI_SetNumber	;wreg free
 11692                           
 11693                           ;Events.c: 67: HMI_SetButton( j & 3 );
 11694  015B1C  5038               	movf	Event_TestButton@j,w,c
 11695  015B1E  0B03               	andlw	3
 11696  015B20  EC49  F0A5         	call	_HMI_SetButton
 11697  015B24                     l1873:
 11698                           
 11699                           ;Events.c: 68: }
 11700                           ;Events.c: 72: LED_Toggle(eLED1);
 11701  015B24  0E00               	movlw	0
 11702  015B26  EC03  F0AC         	call	_LED_Toggle
 11703  015B2A  0012               	return		;funcret
 11704  015B2C                     __end_of_Event_TestButton:
 11705                           	opt stack 0
 11706                           tosu	equ	0xFFF
 11707                           tosh	equ	0xFFE
 11708                           tosl	equ	0xFFD
 11709                           pclath	equ	0xFFA
 11710                           tblptru	equ	0xFF8
 11711                           tblptrh	equ	0xFF7
 11712                           tblptrl	equ	0xFF6
 11713                           tablat	equ	0xFF5
 11714                           prodl	equ	0xFF3
 11715                           intcon	equ	0xFF2
 11716                           postinc0	equ	0xFEE
 11717                           wreg	equ	0xFE8
 11718                           indf1	equ	0xFE7
 11719                           postdec1	equ	0xFE5
 11720                           fsr1h	equ	0xFE2
 11721                           fsr1l	equ	0xFE1
 11722                           indf2	equ	0xFDF
 11723                           postinc2	equ	0xFDE
 11724                           postdec2	equ	0xFDD
 11725                           plusw2	equ	0xFDB
 11726                           fsr2h	equ	0xFDA
 11727                           fsr2l	equ	0xFD9
 11728                           status	equ	0xFD8
 11729                           
 11730 ;; *************** function _HMI_SetButton *****************
 11731 ;; Defined at:
 11732 ;;		line 186 in file "HMI.c"
 11733 ;; Parameters:    Size  Location     Type
 11734 ;;  pValue          1    wreg     unsigned char 
 11735 ;; Auto vars:     Size  Location     Type
 11736 ;;  pValue          1    6[BANK0 ] unsigned char 
 11737 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 11738 ;;  v               1    7[BANK0 ] unsigned char 
 11739 ;; Return value:  Size  Location     Type
 11740 ;;                  1    wreg      void 
 11741 ;; Registers used:
 11742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11743 ;; Tracked objects:
 11744 ;;		On entry : 0/0
 11745 ;;		On exit  : 0/0
 11746 ;;		Unchanged: 0/0
 11747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11749 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11750 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11751 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11752 ;;Total ram usage:        8 bytes
 11753 ;; Hardware stack levels used:    1
 11754 ;; Hardware stack levels required when called:    7
 11755 ;; This function calls:
 11756 ;;		Nothing
 11757 ;; This function is called by:
 11758 ;;		_Event_TestButton
 11759 ;; This function uses a non-reentrant model
 11760 ;;
 11761                           
 11762                           	psect	text56
 11763  014A92                     __ptext56:
 11764                           	opt stack 0
 11765  014A92                     _HMI_SetButton:
 11766                           	opt stack 20
 11767                           
 11768                           ;incstack = 0
 11769                           ;HMI_SetButton@pValue stored from wreg
 11770  014A92  0100               	movlb	0	; () banked
 11771  014A94  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 11772                           
 11773                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 11774  014A96  0E3C               	movlw	low HMI_SetButton@F7213
 11775  014A98  6EF6               	movwf	tblptrl,c
 11776  014A9A                     	if	1	;There is more than 1 active tblptr byte
 11777  014A9A  0EFC               	movlw	high HMI_SetButton@F7213
 11778  014A9C  6EF7               	movwf	tblptrh,c
 11779  014A9E                     	endif
 11780  014A9E                     	if	1	;There are 3 active tblptr bytes
 11781  014A9E  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 11782  014AA0  6EF8               	movwf	tblptru,c
 11783  014AA2                     	endif
 11784  014AA2  0009               	tblrd		*+
 11785  014AA4  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 11786  014AA8  0009               	tblrd		*+
 11787  014AAA  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 11788  014AAE  0009               	tblrd		*+
 11789  014AB0  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 11790  014AB4  000A               	tblrd		*-
 11791  014AB6  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 11792                           
 11793                           ;HMI.c: 189: UINT8 v = 0b00010001;
 11794  014ABA  0E11               	movlw	17
 11795  014ABC  0100               	movlb	0	; () banked
 11796  014ABE  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11797                           
 11798                           ; BSR set to: 0
 11799                           ;HMI.c: 190: pValue &= 3;
 11800  014AC0  0E03               	movlw	3
 11801  014AC2  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 11802                           
 11803                           ; BSR set to: 0
 11804                           ;HMI.c: 191: v = v << reindex[pValue];
 11805  014AC4  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 11806  014AC6  0D01               	mullw	1
 11807  014AC8  0E62               	movlw	low HMI_SetButton@reindex
 11808  014ACA  24F3               	addwf	prodl,w,c
 11809  014ACC  6ED9               	movwf	fsr2l,c
 11810  014ACE  0E00               	movlw	high HMI_SetButton@reindex
 11811  014AD0  20F4               	addwfc	prodh,w,c
 11812  014AD2  6EDA               	movwf	fsr2h,c
 11813  014AD4  50DF               	movf	indf2,w,c
 11814  014AD6  6F60               	movwf	??_HMI_SetButton& (0+255),b
 11815  014AD8  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 11816  014ADC  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 11817  014ADE  D002               	goto	u11424
 11818  014AE0                     u11425:
 11819  014AE0  90D8               	bcf	status,0,c
 11820  014AE2  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 11821  014AE4                     u11424:
 11822  014AE4  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 11823  014AE6  D7FC               	goto	u11425
 11824  014AE8  0100               	movlb	0	; () banked
 11825  014AEA  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 11826  014AEC  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;HMI.c: 192: v = v >> 4;
 11830  014AEE  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 11831  014AF0  0B0F               	andlw	15
 11832  014AF2  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11833                           
 11834                           ; BSR set to: 0
 11835                           ;HMI.c: 193: v = v & 0x0F;
 11836  014AF4  5167               	movf	HMI_SetButton@v& (0+255),w,b
 11837  014AF6  0B0F               	andlw	15
 11838  014AF8  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;HMI.c: 194: HMIBoard.pButton = v;
 11842  014AFA  0101               	movlb	1	; () banked
 11843  014AFC  514E               	movf	(_HMIBoard+6)& (0+255),w,b
 11844  014AFE  0100               	movlb	0	; () banked
 11845  014B00  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11846  014B02  0BF0               	andlw	-16
 11847  014B04  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11848  014B06  0101               	movlb	1	; () banked
 11849  014B08  6F4E               	movwf	(_HMIBoard+6)& (0+255),b
 11850                           
 11851                           ; BSR set to: 1
 11852  014B0A  0012               	return		;funcret
 11853  014B0C                     __end_of_HMI_SetButton:
 11854                           	opt stack 0
 11855                           tosu	equ	0xFFF
 11856                           tosh	equ	0xFFE
 11857                           tosl	equ	0xFFD
 11858                           pclath	equ	0xFFA
 11859                           tblptru	equ	0xFF8
 11860                           tblptrh	equ	0xFF7
 11861                           tblptrl	equ	0xFF6
 11862                           tablat	equ	0xFF5
 11863                           prodh	equ	0xFF4
 11864                           prodl	equ	0xFF3
 11865                           intcon	equ	0xFF2
 11866                           postinc0	equ	0xFEE
 11867                           wreg	equ	0xFE8
 11868                           indf1	equ	0xFE7
 11869                           postdec1	equ	0xFE5
 11870                           fsr1h	equ	0xFE2
 11871                           fsr1l	equ	0xFE1
 11872                           indf2	equ	0xFDF
 11873                           postinc2	equ	0xFDE
 11874                           postdec2	equ	0xFDD
 11875                           plusw2	equ	0xFDB
 11876                           fsr2h	equ	0xFDA
 11877                           fsr2l	equ	0xFD9
 11878                           status	equ	0xFD8
 11879                           
 11880 ;; *************** function _LED_Toggle *****************
 11881 ;; Defined at:
 11882 ;;		line 50 in file "Library/LED.c"
 11883 ;; Parameters:    Size  Location     Type
 11884 ;;  pLED            1    wreg     enum E6739
 11885 ;; Auto vars:     Size  Location     Type
 11886 ;;  pLED            1   24[BANK0 ] enum E6739
 11887 ;; Return value:  Size  Location     Type
 11888 ;;                  1    wreg      void 
 11889 ;; Registers used:
 11890 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11891 ;; Tracked objects:
 11892 ;;		On entry : 0/0
 11893 ;;		On exit  : 0/0
 11894 ;;		Unchanged: 0/0
 11895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11899 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11900 ;;Total ram usage:        1 bytes
 11901 ;; Hardware stack levels used:    1
 11902 ;; Hardware stack levels required when called:   12
 11903 ;; This function calls:
 11904 ;;		_Port_TogglePin
 11905 ;; This function is called by:
 11906 ;;		_LCD_Reset
 11907 ;;		_Event_DIPSwitch
 11908 ;;		_Event_TestButton
 11909 ;;		_Event_ADCSequenceComplete
 11910 ;;		_Event_HMI_DIPSwitch
 11911 ;;		_Event_HMI_LeftButton
 11912 ;;		_Event_HMI_RightButton
 11913 ;;		_Event_HMI_UpButton
 11914 ;;		_Event_HMI_DownButton
 11915 ;; This function uses a non-reentrant model
 11916 ;;
 11917                           
 11918                           	psect	text57
 11919  015806                     __ptext57:
 11920                           	opt stack 0
 11921  015806                     _LED_Toggle:
 11922                           	opt stack 15
 11923                           
 11924                           ; BSR set to: 1
 11925                           ;incstack = 0
 11926                           ;LED_Toggle@pLED stored from wreg
 11927  015806  0100               	movlb	0	; () banked
 11928  015808  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 11929                           
 11930                           ;LED.c: 52: switch (pLED)
 11931  01580A  D014               	goto	l234
 11932  01580C                     
 11933                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 11934  01580C  0EAB               	movlw	low _PortC
 11935  01580E  0100               	movlb	0	; () banked
 11936  015810  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 11937  015812  0E01               	movlw	high _PortC
 11938  015814  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 11939  015816  0E00               	movlw	0
 11940  015818  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 11941  01581A  EC0F  F0AE         	call	_Port_TogglePin	;wreg free
 11942                           
 11943                           ;LED.c: 56: break;
 11944  01581E  0012               	return	
 11945  015820                     
 11946                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 11947  015820  0EAB               	movlw	low _PortC
 11948  015822  0100               	movlb	0	; () banked
 11949  015824  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 11950  015826  0E01               	movlw	high _PortC
 11951  015828  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 11952  01582A  0E01               	movlw	1
 11953  01582C  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 11954  01582E  EC0F  F0AE         	call	_Port_TogglePin	;wreg free
 11955                           
 11956                           ;LED.c: 60: }
 11957                           
 11958                           ;LED.c: 59: break;
 11959  015832  0012               	return	
 11960  015834                     l234:
 11961  015834  0100               	movlb	0	; () banked
 11962  015836  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 11963                           
 11964                           ; Switch size 1, requested type "space"
 11965                           ; Number of cases is 2, Range of values is 0 to 1
 11966                           ; switch strategies available:
 11967                           ; Name         Instructions Cycles
 11968                           ; simple_byte            7     4 (average)
 11969                           ;	Chosen strategy is simple_byte
 11970  015838  0A00               	xorlw	0	; case 0
 11971  01583A  B4D8               	btfsc	status,2,c
 11972  01583C  D7E7               	goto	l235
 11973  01583E  0A01               	xorlw	1	; case 1
 11974  015840  A4D8               	btfss	status,2,c
 11975  015842  0012               	return	
 11976  015844  D7ED               	goto	l237
 11977  015846                     __end_of_LED_Toggle:
 11978                           	opt stack 0
 11979                           tosu	equ	0xFFF
 11980                           tosh	equ	0xFFE
 11981                           tosl	equ	0xFFD
 11982                           pclath	equ	0xFFA
 11983                           tblptru	equ	0xFF8
 11984                           tblptrh	equ	0xFF7
 11985                           tblptrl	equ	0xFF6
 11986                           tablat	equ	0xFF5
 11987                           prodh	equ	0xFF4
 11988                           prodl	equ	0xFF3
 11989                           intcon	equ	0xFF2
 11990                           postinc0	equ	0xFEE
 11991                           wreg	equ	0xFE8
 11992                           indf1	equ	0xFE7
 11993                           postdec1	equ	0xFE5
 11994                           fsr1h	equ	0xFE2
 11995                           fsr1l	equ	0xFE1
 11996                           indf2	equ	0xFDF
 11997                           postinc2	equ	0xFDE
 11998                           postdec2	equ	0xFDD
 11999                           plusw2	equ	0xFDB
 12000                           fsr2h	equ	0xFDA
 12001                           fsr2l	equ	0xFD9
 12002                           status	equ	0xFD8
 12003                           
 12004 ;; *************** function _Port_TogglePin *****************
 12005 ;; Defined at:
 12006 ;;		line 278 in file "Library/Port.c"
 12007 ;; Parameters:    Size  Location     Type
 12008 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 12009 ;;		 -> PortC(10), 
 12010 ;;  pPin            1   22[BANK0 ] enum E6750
 12011 ;; Auto vars:     Size  Location     Type
 12012 ;;  Value           1   23[BANK0 ] unsigned char 
 12013 ;; Return value:  Size  Location     Type
 12014 ;;                  1    wreg      void 
 12015 ;; Registers used:
 12016 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12017 ;; Tracked objects:
 12018 ;;		On entry : 0/0
 12019 ;;		On exit  : 0/0
 12020 ;;		Unchanged: 0/0
 12021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12022 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12025 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12026 ;;Total ram usage:        4 bytes
 12027 ;; Hardware stack levels used:    1
 12028 ;; Hardware stack levels required when called:   11
 12029 ;; This function calls:
 12030 ;;		_Port_GetPin
 12031 ;;		_Port_SetPin
 12032 ;; This function is called by:
 12033 ;;		_LED_Toggle
 12034 ;; This function uses a non-reentrant model
 12035 ;;
 12036                           
 12037                           	psect	text58
 12038  015C1E                     __ptext58:
 12039                           	opt stack 0
 12040  015C1E                     _Port_TogglePin:
 12041                           	opt stack 15
 12042                           
 12043                           ;Port.c: 280: UINT8 Value;
 12044                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 12045                           
 12046                           ;incstack = 0
 12047  015C1E  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 12048  015C22  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 12049  015C26  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 12050  015C2A  ECBC  F0AC         	call	_Port_GetPin	;wreg free
 12051  015C2E  0100               	movlb	0	; () banked
 12052  015C30  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 12053                           
 12054                           ; BSR set to: 0
 12055                           ;Port.c: 282: Value ^= 0x01;
 12056  015C32  0E01               	movlw	1
 12057  015C34  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 12058                           
 12059                           ; BSR set to: 0
 12060                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 12061  015C36  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 12062  015C3A  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 12063  015C3E  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 12064  015C42  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 12065  015C46  ECC1  F09F         	call	_Port_SetPin	;wreg free
 12066  015C4A  0012               	return		;funcret
 12067  015C4C                     __end_of_Port_TogglePin:
 12068                           	opt stack 0
 12069                           tosu	equ	0xFFF
 12070                           tosh	equ	0xFFE
 12071                           tosl	equ	0xFFD
 12072                           pclath	equ	0xFFA
 12073                           tblptru	equ	0xFF8
 12074                           tblptrh	equ	0xFF7
 12075                           tblptrl	equ	0xFF6
 12076                           tablat	equ	0xFF5
 12077                           prodh	equ	0xFF4
 12078                           prodl	equ	0xFF3
 12079                           intcon	equ	0xFF2
 12080                           postinc0	equ	0xFEE
 12081                           wreg	equ	0xFE8
 12082                           indf1	equ	0xFE7
 12083                           postdec1	equ	0xFE5
 12084                           fsr1h	equ	0xFE2
 12085                           fsr1l	equ	0xFE1
 12086                           indf2	equ	0xFDF
 12087                           postinc2	equ	0xFDE
 12088                           postdec2	equ	0xFDD
 12089                           plusw2	equ	0xFDB
 12090                           fsr2h	equ	0xFDA
 12091                           fsr2l	equ	0xFD9
 12092                           status	equ	0xFD8
 12093                           
 12094 ;; *************** function _Port_SetPin *****************
 12095 ;; Defined at:
 12096 ;;		line 247 in file "Library/Port.c"
 12097 ;; Parameters:    Size  Location     Type
 12098 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 12099 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 12100 ;;  pPin            1   17[BANK0 ] enum E6750
 12101 ;;  pValue          1   18[BANK0 ] unsigned char 
 12102 ;; Auto vars:     Size  Location     Type
 12103 ;;  Type            1   19[BANK0 ] enum E6795
 12104 ;; Return value:  Size  Location     Type
 12105 ;;                  1    wreg      void 
 12106 ;; Registers used:
 12107 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12108 ;; Tracked objects:
 12109 ;;		On entry : 0/0
 12110 ;;		On exit  : 0/0
 12111 ;;		Unchanged: 0/0
 12112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12113 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12116 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12117 ;;Total ram usage:        5 bytes
 12118 ;; Hardware stack levels used:    1
 12119 ;; Hardware stack levels required when called:   10
 12120 ;; This function calls:
 12121 ;;		_Byte_SetBit
 12122 ;;		_Word_GetPair
 12123 ;; This function is called by:
 12124 ;;		_Reset_Low
 12125 ;;		_Reset_High
 12126 ;;		_LED_Set
 12127 ;;		_Port_TogglePin
 12128 ;;		_Motor_Step
 12129 ;;		_MXK_Init
 12130 ;;		_Motor_Init
 12131 ;; This function uses a non-reentrant model
 12132 ;;
 12133                           
 12134                           	psect	text59
 12135  013F82                     __ptext59:
 12136                           	opt stack 0
 12137  013F82                     _Port_SetPin:
 12138                           	opt stack 19
 12139                           
 12140                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 12141                           
 12142                           ;incstack = 0
 12143  013F82  0E08               	movlw	8
 12144  013F84  0100               	movlb	0	; () banked
 12145  013F86  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 12146  013F88  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 12147  013F8A  0E00               	movlw	0
 12148  013F8C  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 12149  013F8E  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12150  013F90  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 12151  013F94  EC96  F0AD         	call	_Word_GetPair	;wreg free
 12152  013F98  0100               	movlb	0	; () banked
 12153  013F9A  6F73               	movwf	Port_SetPin@Type& (0+255),b
 12154                           
 12155                           ;Port.c: 250: switch (Type)
 12156  013F9C  D03D               	goto	l427
 12157  013F9E                     
 12158                           ; BSR set to: 0
 12159                           ;Port.c: 256: pValue &= 1;
 12160                           
 12161                           ; BSR set to: 0
 12162  013F9E  0E01               	movlw	1
 12163  013FA0  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 12164                           
 12165                           ; BSR set to: 0
 12166                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 12167  013FA2  EE20 F002          	lfsr	2,2
 12168  013FA6  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 12169  013FA8  26D9               	addwf	fsr2l,f,c
 12170  013FAA  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12171  013FAC  22DA               	addwfc	fsr2h,f,c
 12172  013FAE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12173  013FB2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12174  013FB6  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12175  013FBA  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12176  013FBE  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 12177                           
 12178                           ;Port.c: 258: break;
 12179  013FC2  0012               	return	
 12180  013FC4                     
 12181                           ;Port.c: 261: pValue &= 1;
 12182  013FC4  0E01               	movlw	1
 12183  013FC6  0100               	movlb	0	; () banked
 12184  013FC8  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 12185                           
 12186                           ;Port.c: 262: pValue ^= 1;
 12187  013FCA  0E01               	movlw	1
 12188  013FCC  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 12189                           
 12190                           ; BSR set to: 0
 12191                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 12192  013FCE  EE20 F002          	lfsr	2,2
 12193  013FD2  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 12194  013FD4  26D9               	addwf	fsr2l,f,c
 12195  013FD6  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12196  013FD8  22DA               	addwfc	fsr2h,f,c
 12197  013FDA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12198  013FDE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12199  013FE2  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12200  013FE6  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12201  013FEA  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 12202                           
 12203                           ;Port.c: 264: break;
 12204  013FEE  0012               	return	
 12205  013FF0                     
 12206                           ;Port.c: 266: pValue &= 1;
 12207  013FF0  0E01               	movlw	1
 12208  013FF2  0100               	movlb	0	; () banked
 12209  013FF4  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 12210                           
 12211                           ; BSR set to: 0
 12212                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 12213  013FF6  EE20 F004          	lfsr	2,4
 12214  013FFA  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 12215  013FFC  26D9               	addwf	fsr2l,f,c
 12216  013FFE  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12217  014000  22DA               	addwfc	fsr2h,f,c
 12218  014002  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12219  014006  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12220  01400A  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12221  01400E  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12222  014012  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 12223                           
 12224                           ;Port.c: 269: }
 12225                           
 12226                           ;Port.c: 268: break;
 12227  014016  0012               	return	
 12228  014018                     l427:
 12229  014018  0100               	movlb	0	; () banked
 12230  01401A  5173               	movf	Port_SetPin@Type& (0+255),w,b
 12231                           
 12232                           ; Switch size 1, requested type "space"
 12233                           ; Number of cases is 4, Range of values is 0 to 3
 12234                           ; switch strategies available:
 12235                           ; Name         Instructions Cycles
 12236                           ; simple_byte           13     7 (average)
 12237                           ;	Chosen strategy is simple_byte
 12238  01401C  0A00               	xorlw	0	; case 0
 12239  01401E  B4D8               	btfsc	status,2,c
 12240  014020  0012               	return	
 12241  014022  0A01               	xorlw	1	; case 1
 12242  014024  B4D8               	btfsc	status,2,c
 12243  014026  D7BB               	goto	l430
 12244  014028  0A03               	xorlw	3	; case 2
 12245  01402A  B4D8               	btfsc	status,2,c
 12246  01402C  D7CB               	goto	l432
 12247  01402E  0A01               	xorlw	1	; case 3
 12248  014030  A4D8               	btfss	status,2,c
 12249  014032  0012               	return	
 12250  014034  D7DD               	goto	l433
 12251  014036                     __end_of_Port_SetPin:
 12252                           	opt stack 0
 12253                           tosu	equ	0xFFF
 12254                           tosh	equ	0xFFE
 12255                           tosl	equ	0xFFD
 12256                           pclath	equ	0xFFA
 12257                           tblptru	equ	0xFF8
 12258                           tblptrh	equ	0xFF7
 12259                           tblptrl	equ	0xFF6
 12260                           tablat	equ	0xFF5
 12261                           prodh	equ	0xFF4
 12262                           prodl	equ	0xFF3
 12263                           intcon	equ	0xFF2
 12264                           postinc0	equ	0xFEE
 12265                           wreg	equ	0xFE8
 12266                           indf1	equ	0xFE7
 12267                           postdec1	equ	0xFE5
 12268                           fsr1h	equ	0xFE2
 12269                           fsr1l	equ	0xFE1
 12270                           indf2	equ	0xFDF
 12271                           postinc2	equ	0xFDE
 12272                           postdec2	equ	0xFDD
 12273                           plusw2	equ	0xFDB
 12274                           fsr2h	equ	0xFDA
 12275                           fsr2l	equ	0xFD9
 12276                           status	equ	0xFD8
 12277                           
 12278 ;; *************** function _Port_GetPin *****************
 12279 ;; Defined at:
 12280 ;;		line 271 in file "Library/Port.c"
 12281 ;; Parameters:    Size  Location     Type
 12282 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 12283 ;;		 -> PortB(10), PortE(10), PortC(10), 
 12284 ;;  pPin            1    2[BANK0 ] enum E6750
 12285 ;; Auto vars:     Size  Location     Type
 12286 ;;  Output          1    5[BANK0 ] unsigned char 
 12287 ;; Return value:  Size  Location     Type
 12288 ;;                  1    wreg      unsigned char 
 12289 ;; Registers used:
 12290 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12291 ;; Tracked objects:
 12292 ;;		On entry : 0/0
 12293 ;;		On exit  : 0/0
 12294 ;;		Unchanged: 0/0
 12295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12296 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12298 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12299 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12300 ;;Total ram usage:        6 bytes
 12301 ;; Hardware stack levels used:    1
 12302 ;; Hardware stack levels required when called:    7
 12303 ;; This function calls:
 12304 ;;		Nothing
 12305 ;; This function is called by:
 12306 ;;		_Port_TogglePin
 12307 ;;		_HMI_LeftSwitch
 12308 ;;		_HMI_RightSwitch
 12309 ;;		_HMI_UpSwitch
 12310 ;;		_HMI_DownSwitch
 12311 ;;		_MXK_TestButton
 12312 ;; This function uses a non-reentrant model
 12313 ;;
 12314                           
 12315                           	psect	text60
 12316  015978                     __ptext60:
 12317                           	opt stack 0
 12318  015978                     _Port_GetPin:
 12319                           	opt stack 22
 12320                           
 12321                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 12322                           
 12323                           ;incstack = 0
 12324  015978  0100               	movlb	0	; () banked
 12325  01597A  EE20 F006          	lfsr	2,6
 12326  01597E  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 12327  015980  26D9               	addwf	fsr2l,f,c
 12328  015982  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 12329  015984  22DA               	addwfc	fsr2h,f,c
 12330  015986  CFDE F063          	movff	postinc2,??_Port_GetPin
 12331  01598A  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 12332  01598E  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 12333  015992  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 12334  015996  50DF               	movf	indf2,w,c
 12335  015998  6F65               	movwf	Port_GetPin@Output& (0+255),b
 12336                           
 12337                           ; BSR set to: 0
 12338                           ;Port.c: 274: Output >>= (UINT8)pPin;
 12339  01599A  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 12340  01599C  6F63               	movwf	??_Port_GetPin& (0+255),b
 12341  01599E  D002               	goto	u9690
 12342  0159A0                     u9695:
 12343  0159A0  90D8               	bcf	status,0,c
 12344  0159A2  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 12345  0159A4                     u9690:
 12346  0159A4  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 12347  0159A6  D7FC               	goto	u9695
 12348                           
 12349                           ;Port.c: 275: Output &= 1;
 12350  0159A8  0E01               	movlw	1
 12351  0159AA  0100               	movlb	0	; () banked
 12352  0159AC  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 12353                           
 12354                           ; BSR set to: 0
 12355                           ;Port.c: 276: return Output;
 12356  0159AE  5165               	movf	Port_GetPin@Output& (0+255),w,b
 12357  0159B0  0012               	return	
 12358  0159B2                     __end_of_Port_GetPin:
 12359                           	opt stack 0
 12360                           tosu	equ	0xFFF
 12361                           tosh	equ	0xFFE
 12362                           tosl	equ	0xFFD
 12363                           pclath	equ	0xFFA
 12364                           tblptru	equ	0xFF8
 12365                           tblptrh	equ	0xFF7
 12366                           tblptrl	equ	0xFF6
 12367                           tablat	equ	0xFF5
 12368                           prodh	equ	0xFF4
 12369                           prodl	equ	0xFF3
 12370                           intcon	equ	0xFF2
 12371                           postinc0	equ	0xFEE
 12372                           wreg	equ	0xFE8
 12373                           indf1	equ	0xFE7
 12374                           postdec1	equ	0xFE5
 12375                           fsr1h	equ	0xFE2
 12376                           fsr1l	equ	0xFE1
 12377                           indf2	equ	0xFDF
 12378                           postinc2	equ	0xFDE
 12379                           postdec2	equ	0xFDD
 12380                           plusw2	equ	0xFDB
 12381                           fsr2h	equ	0xFDA
 12382                           fsr2l	equ	0xFD9
 12383                           status	equ	0xFD8
 12384                           
 12385 ;; *************** function _HMI_SetBar *****************
 12386 ;; Defined at:
 12387 ;;		line 205 in file "HMI.c"
 12388 ;; Parameters:    Size  Location     Type
 12389 ;;  pValue          1    wreg     unsigned char 
 12390 ;; Auto vars:     Size  Location     Type
 12391 ;;  pValue          1    0[BANK0 ] unsigned char 
 12392 ;; Return value:  Size  Location     Type
 12393 ;;                  1    wreg      void 
 12394 ;; Registers used:
 12395 ;;		wreg
 12396 ;; Tracked objects:
 12397 ;;		On entry : 0/0
 12398 ;;		On exit  : 0/0
 12399 ;;		Unchanged: 0/0
 12400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12402 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12404 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12405 ;;Total ram usage:        1 bytes
 12406 ;; Hardware stack levels used:    1
 12407 ;; Hardware stack levels required when called:    7
 12408 ;; This function calls:
 12409 ;;		Nothing
 12410 ;; This function is called by:
 12411 ;;		_Event_DIPSwitch
 12412 ;;		_Event_HMI_DIPSwitch
 12413 ;;		_Event_HMI_LeftButton
 12414 ;;		_Event_HMI_RightButton
 12415 ;; This function uses a non-reentrant model
 12416 ;;
 12417                           
 12418                           	psect	text61
 12419  01609A                     __ptext61:
 12420                           	opt stack 0
 12421  01609A                     _HMI_SetBar:
 12422                           	opt stack 20
 12423                           
 12424                           ; BSR set to: 0
 12425                           ;incstack = 0
 12426                           ;HMI_SetBar@pValue stored from wreg
 12427  01609A  0100               	movlb	0	; () banked
 12428  01609C  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 12429                           
 12430                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 12431  01609E  C060  F14F         	movff	HMI_SetBar@pValue,_HMIBoard+7
 12432  0160A2  0012               	return		;funcret
 12433  0160A4                     __end_of_HMI_SetBar:
 12434                           	opt stack 0
 12435                           tosu	equ	0xFFF
 12436                           tosh	equ	0xFFE
 12437                           tosl	equ	0xFFD
 12438                           pclath	equ	0xFFA
 12439                           tblptru	equ	0xFF8
 12440                           tblptrh	equ	0xFF7
 12441                           tblptrl	equ	0xFF6
 12442                           tablat	equ	0xFF5
 12443                           prodh	equ	0xFF4
 12444                           prodl	equ	0xFF3
 12445                           intcon	equ	0xFF2
 12446                           postinc0	equ	0xFEE
 12447                           wreg	equ	0xFE8
 12448                           indf1	equ	0xFE7
 12449                           postdec1	equ	0xFE5
 12450                           fsr1h	equ	0xFE2
 12451                           fsr1l	equ	0xFE1
 12452                           indf2	equ	0xFDF
 12453                           postinc2	equ	0xFDE
 12454                           postdec2	equ	0xFDD
 12455                           plusw2	equ	0xFDB
 12456                           fsr2h	equ	0xFDA
 12457                           fsr2l	equ	0xFD9
 12458                           status	equ	0xFD8
 12459                           
 12460 ;; *************** function _HMI_GetBar *****************
 12461 ;; Defined at:
 12462 ;;		line 209 in file "HMI.c"
 12463 ;; Parameters:    Size  Location     Type
 12464 ;;		None
 12465 ;; Auto vars:     Size  Location     Type
 12466 ;;		None
 12467 ;; Return value:  Size  Location     Type
 12468 ;;                  1    wreg      unsigned char 
 12469 ;; Registers used:
 12470 ;;		wreg, status,2
 12471 ;; Tracked objects:
 12472 ;;		On entry : 0/0
 12473 ;;		On exit  : 0/0
 12474 ;;		Unchanged: 0/0
 12475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12480 ;;Total ram usage:        0 bytes
 12481 ;; Hardware stack levels used:    1
 12482 ;; Hardware stack levels required when called:    7
 12483 ;; This function calls:
 12484 ;;		Nothing
 12485 ;; This function is called by:
 12486 ;;		_Event_DIPSwitch
 12487 ;;		_Event_HMI_DIPSwitch
 12488 ;; This function uses a non-reentrant model
 12489 ;;
 12490                           
 12491                           	psect	text62
 12492  0160DA                     __ptext62:
 12493                           	opt stack 0
 12494  0160DA                     _HMI_GetBar:
 12495                           	opt stack 20
 12496                           
 12497                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 12498                           
 12499                           ;incstack = 0
 12500  0160DA  0101               	movlb	1	; () banked
 12501  0160DC  514F               	movf	(_HMIBoard+7)& (0+255),w,b
 12502  0160DE  0012               	return	
 12503  0160E0                     __end_of_HMI_GetBar:
 12504                           	opt stack 0
 12505                           tosu	equ	0xFFF
 12506                           tosh	equ	0xFFE
 12507                           tosl	equ	0xFFD
 12508                           pclath	equ	0xFFA
 12509                           tblptru	equ	0xFF8
 12510                           tblptrh	equ	0xFF7
 12511                           tblptrl	equ	0xFF6
 12512                           tablat	equ	0xFF5
 12513                           prodh	equ	0xFF4
 12514                           prodl	equ	0xFF3
 12515                           intcon	equ	0xFF2
 12516                           postinc0	equ	0xFEE
 12517                           wreg	equ	0xFE8
 12518                           indf1	equ	0xFE7
 12519                           postdec1	equ	0xFE5
 12520                           fsr1h	equ	0xFE2
 12521                           fsr1l	equ	0xFE1
 12522                           indf2	equ	0xFDF
 12523                           postinc2	equ	0xFDE
 12524                           postdec2	equ	0xFDD
 12525                           plusw2	equ	0xFDB
 12526                           fsr2h	equ	0xFDA
 12527                           fsr2l	equ	0xFD9
 12528                           status	equ	0xFD8
 12529                           
 12530 ;; *************** function _HMI_Init *****************
 12531 ;; Defined at:
 12532 ;;		line 104 in file "HMI.c"
 12533 ;; Parameters:    Size  Location     Type
 12534 ;;		None
 12535 ;; Auto vars:     Size  Location     Type
 12536 ;;  in              2   72[BANK0 ] unsigned short 
 12537 ;; Return value:  Size  Location     Type
 12538 ;;                  1    wreg      void 
 12539 ;; Registers used:
 12540 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12541 ;; Tracked objects:
 12542 ;;		On entry : 0/0
 12543 ;;		On exit  : 0/0
 12544 ;;		Unchanged: 0/0
 12545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12547 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12549 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12550 ;;Total ram usage:        2 bytes
 12551 ;; Hardware stack levels used:    1
 12552 ;; Hardware stack levels required when called:   16
 12553 ;; This function calls:
 12554 ;;		_Button_Init
 12555 ;;		_SPI_Init
 12556 ;;		_SPI_MinSpeed
 12557 ;; This function is called by:
 12558 ;;		_main
 12559 ;; This function uses a non-reentrant model
 12560 ;;
 12561                           
 12562                           	psect	text63
 12563  01283A                     __ptext63:
 12564                           	opt stack 0
 12565  01283A                     _HMI_Init:
 12566                           	opt stack 14
 12567                           
 12568                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 12569                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 12570                           
 12571                           ; BSR set to: 1
 12572                           ;incstack = 0
 12573  01283A  0E78               	movlw	low (_HMIBoard+48)
 12574  01283C  0100               	movlb	0	; () banked
 12575  01283E  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12576  012840  0E01               	movlw	high (_HMIBoard+48)
 12577  012842  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12578  012844  0E00               	movlw	0
 12579  012846  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12580  012848  0E02               	movlw	2
 12581  01284A  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12582  01284C  0EE0               	movlw	low _HMI_InitButtons
 12583  01284E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12584  012850  0E60               	movlw	high _HMI_InitButtons
 12585  012852  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12586  012854  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12587  012856  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12588  012858  0E8A               	movlw	low _HMI_DIPSwitch
 12589  01285A  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12590  01285C  0E5F               	movlw	high _HMI_DIPSwitch
 12591  01285E  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12592  012860  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 12593  012862  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12594  012864  0E04               	movlw	low _Event_NULL
 12595  012866  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12596  012868  0E14               	movlw	high _Event_NULL
 12597  01286A  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12598  01286C  0E00               	movlw	low (_Event_NULL shr (0+16))
 12599  01286E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12600  012870  EC1B  F0A0         	call	_Button_Init	;wreg free
 12601                           
 12602                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 12603                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 12604  012874  0E5A               	movlw	low (_HMIBoard+18)
 12605  012876  0100               	movlb	0	; () banked
 12606  012878  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12607  01287A  0E01               	movlw	high (_HMIBoard+18)
 12608  01287C  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12609  01287E  0E00               	movlw	0
 12610  012880  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12611  012882  0E02               	movlw	2
 12612  012884  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12613  012886  0EE0               	movlw	low _HMI_InitButtons
 12614  012888  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12615  01288A  0E60               	movlw	high _HMI_InitButtons
 12616  01288C  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12617  01288E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12618  012890  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12619  012892  0EDA               	movlw	low _HMI_LeftSwitch
 12620  012894  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12621  012896  0E5F               	movlw	high _HMI_LeftSwitch
 12622  012898  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12623  01289A  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 12624  01289C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12625  01289E  0E04               	movlw	low _Event_NULL
 12626  0128A0  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12627  0128A2  0E14               	movlw	high _Event_NULL
 12628  0128A4  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12629  0128A6  0E00               	movlw	low (_Event_NULL shr (0+16))
 12630  0128A8  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12631  0128AA  EC1B  F0A0         	call	_Button_Init	;wreg free
 12632                           
 12633                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 12634                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 12635  0128AE  0E50               	movlw	low (_HMIBoard+8)
 12636  0128B0  0100               	movlb	0	; () banked
 12637  0128B2  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12638  0128B4  0E01               	movlw	high (_HMIBoard+8)
 12639  0128B6  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12640  0128B8  0E00               	movlw	0
 12641  0128BA  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12642  0128BC  0E02               	movlw	2
 12643  0128BE  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12644  0128C0  0EE0               	movlw	low _HMI_InitButtons
 12645  0128C2  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12646  0128C4  0E60               	movlw	high _HMI_InitButtons
 12647  0128C6  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12648  0128C8  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12649  0128CA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12650  0128CC  0EC6               	movlw	low _HMI_RightSwitch
 12651  0128CE  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12652  0128D0  0E5F               	movlw	high _HMI_RightSwitch
 12653  0128D2  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12654  0128D4  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 12655  0128D6  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12656  0128D8  0E04               	movlw	low _Event_NULL
 12657  0128DA  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12658  0128DC  0E14               	movlw	high _Event_NULL
 12659  0128DE  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12660  0128E0  0E00               	movlw	low (_Event_NULL shr (0+16))
 12661  0128E2  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12662  0128E4  EC1B  F0A0         	call	_Button_Init	;wreg free
 12663                           
 12664                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 12665                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 12666  0128E8  0E64               	movlw	low (_HMIBoard+28)
 12667  0128EA  0100               	movlb	0	; () banked
 12668  0128EC  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12669  0128EE  0E01               	movlw	high (_HMIBoard+28)
 12670  0128F0  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12671  0128F2  0E00               	movlw	0
 12672  0128F4  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12673  0128F6  0E02               	movlw	2
 12674  0128F8  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12675  0128FA  0EE0               	movlw	low _HMI_InitButtons
 12676  0128FC  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12677  0128FE  0E60               	movlw	high _HMI_InitButtons
 12678  012900  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12679  012902  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12680  012904  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12681  012906  0EB2               	movlw	low _HMI_UpSwitch
 12682  012908  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12683  01290A  0E5F               	movlw	high _HMI_UpSwitch
 12684  01290C  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12685  01290E  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 12686  012910  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12687  012912  0E04               	movlw	low _Event_NULL
 12688  012914  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12689  012916  0E14               	movlw	high _Event_NULL
 12690  012918  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12691  01291A  0E00               	movlw	low (_Event_NULL shr (0+16))
 12692  01291C  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12693  01291E  EC1B  F0A0         	call	_Button_Init	;wreg free
 12694                           
 12695                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 12696                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 12697  012922  0E6E               	movlw	low (_HMIBoard+38)
 12698  012924  0100               	movlb	0	; () banked
 12699  012926  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12700  012928  0E01               	movlw	high (_HMIBoard+38)
 12701  01292A  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12702  01292C  0E00               	movlw	0
 12703  01292E  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12704  012930  0E02               	movlw	2
 12705  012932  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12706  012934  0EE0               	movlw	low _HMI_InitButtons
 12707  012936  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12708  012938  0E60               	movlw	high _HMI_InitButtons
 12709  01293A  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12710  01293C  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12711  01293E  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12712  012940  0E9E               	movlw	low _HMI_DownSwitch
 12713  012942  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12714  012944  0E5F               	movlw	high _HMI_DownSwitch
 12715  012946  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12716  012948  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 12717  01294A  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12718  01294C  0E04               	movlw	low _Event_NULL
 12719  01294E  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12720  012950  0E14               	movlw	high _Event_NULL
 12721  012952  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12722  012954  0E00               	movlw	low (_Event_NULL shr (0+16))
 12723  012956  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12724  012958  EC1B  F0A0         	call	_Button_Init	;wreg free
 12725                           
 12726                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 12727  01295C  0EA0               	movlw	160
 12728  01295E  0100               	movlb	0	; () banked
 12729  012960  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 12730  012962  0E86               	movlw	134
 12731  012964  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 12732  012966  0E01               	movlw	1
 12733  012968  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 12734  01296A  0E00               	movlw	0
 12735  01296C  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 12736  01296E  0E00               	movlw	0
 12737  012970  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 12738  012972  0E02               	movlw	2
 12739  012974  6F92               	movwf	SPI_Init@pMode& (0+255),b
 12740  012976  ECCB  F083         	call	_SPI_Init	;wreg free
 12741                           
 12742                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 12743  01297A  0EC8               	movlw	low _SPI1
 12744  01297C  0100               	movlb	0	; () banked
 12745  01297E  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 12746  012980  0E02               	movlw	high _SPI1
 12747  012982  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 12748  012984  ECBD  F0A7         	call	_SPI_MinSpeed	;wreg free
 12749                           
 12750                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 12751  012988  0E00               	movlw	0
 12752  01298A  0100               	movlb	0	; () banked
 12753  01298C  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 12754  01298E  0E00               	movlw	0
 12755  012990  6FA8               	movwf	HMI_Init@in& (0+255),b
 12756  012992                     l15291:
 12757                           
 12758                           ; BSR set to: 0
 12759  012992  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 12760  012994  E10F               	bnz	l1153
 12761  012996  0E08               	movlw	8
 12762  012998  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 12763  01299A  B0D8               	btfsc	status,0,c
 12764  01299C  0012               	return	
 12765                           
 12766                           ; BSR set to: 0
 12767                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 12768                           
 12769                           ; BSR set to: 0
 12770                           
 12771                           ; BSR set to: 0
 12772  01299E  0E48               	movlw	low _HMIBoard
 12773  0129A0  25A8               	addwf	HMI_Init@in& (0+255),w,b
 12774  0129A2  6ED9               	movwf	fsr2l,c
 12775  0129A4  0E01               	movlw	high _HMIBoard
 12776  0129A6  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 12777  0129A8  6EDA               	movwf	fsr2h,c
 12778  0129AA  0E00               	movlw	0
 12779  0129AC  6EDF               	movwf	indf2,c
 12780                           
 12781                           ; BSR set to: 0
 12782  0129AE  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 12783  0129B0  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 12784  0129B2  D7EF               	goto	l15291
 12785  0129B4                     l1153:
 12786                           
 12787                           ; BSR set to: 0
 12788  0129B4  0012               	return		;funcret
 12789  0129B6                     __end_of_HMI_Init:
 12790                           	opt stack 0
 12791                           tosu	equ	0xFFF
 12792                           tosh	equ	0xFFE
 12793                           tosl	equ	0xFFD
 12794                           pclath	equ	0xFFA
 12795                           tblptru	equ	0xFF8
 12796                           tblptrh	equ	0xFF7
 12797                           tblptrl	equ	0xFF6
 12798                           tablat	equ	0xFF5
 12799                           prodh	equ	0xFF4
 12800                           prodl	equ	0xFF3
 12801                           intcon	equ	0xFF2
 12802                           postinc0	equ	0xFEE
 12803                           wreg	equ	0xFE8
 12804                           indf1	equ	0xFE7
 12805                           postdec1	equ	0xFE5
 12806                           fsr1h	equ	0xFE2
 12807                           fsr1l	equ	0xFE1
 12808                           indf2	equ	0xFDF
 12809                           postinc2	equ	0xFDE
 12810                           postdec2	equ	0xFDD
 12811                           plusw2	equ	0xFDB
 12812                           fsr2h	equ	0xFDA
 12813                           fsr2l	equ	0xFD9
 12814                           status	equ	0xFD8
 12815                           
 12816 ;; *************** function _SPI_MinSpeed *****************
 12817 ;; Defined at:
 12818 ;;		line 190 in file "Library/SPI.c"
 12819 ;; Parameters:    Size  Location     Type
 12820 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 12821 ;;		 -> SPI1(11), 
 12822 ;; Auto vars:     Size  Location     Type
 12823 ;;		None
 12824 ;; Return value:  Size  Location     Type
 12825 ;;                  1    wreg      void 
 12826 ;; Registers used:
 12827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12828 ;; Tracked objects:
 12829 ;;		On entry : 0/0
 12830 ;;		On exit  : 0/0
 12831 ;;		Unchanged: 0/0
 12832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12833 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12836 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12837 ;;Total ram usage:        2 bytes
 12838 ;; Hardware stack levels used:    1
 12839 ;; Hardware stack levels required when called:    9
 12840 ;; This function calls:
 12841 ;;		_Byte_SetBit
 12842 ;;		_Byte_SetQuad
 12843 ;; This function is called by:
 12844 ;;		_HMI_Init
 12845 ;; This function uses a non-reentrant model
 12846 ;;
 12847                           
 12848                           	psect	text64
 12849  014F7A                     __ptext64:
 12850                           	opt stack 0
 12851  014F7A                     _SPI_MinSpeed:
 12852                           	opt stack 20
 12853                           
 12854                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 12855                           
 12856                           ; BSR set to: 0
 12857                           ;incstack = 0
 12858  014F7A  0100               	movlb	0	; () banked
 12859  014F7C  EE20 F006          	lfsr	2,6
 12860  014F80  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12861  014F82  26D9               	addwf	fsr2l,f,c
 12862  014F84  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12863  014F86  22DA               	addwfc	fsr2h,f,c
 12864  014F88  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12865  014F8C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12866  014F90  0E05               	movlw	5
 12867  014F92  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12868  014F94  0E00               	movlw	0
 12869  014F96  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12870  014F98  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 12871                           
 12872                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 12873  014F9C  0100               	movlb	0	; () banked
 12874  014F9E  EE20 F006          	lfsr	2,6
 12875  014FA2  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12876  014FA4  26D9               	addwf	fsr2l,f,c
 12877  014FA6  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12878  014FA8  22DA               	addwfc	fsr2h,f,c
 12879  014FAA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 12880  014FAE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 12881  014FB2  0E00               	movlw	0
 12882  014FB4  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 12883  014FB6  0E02               	movlw	2
 12884  014FB8  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 12885  014FBA  ECD2  F0AE         	call	_Byte_SetQuad	;wreg free
 12886                           
 12887                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 12888  014FBE  0100               	movlb	0	; () banked
 12889  014FC0  EE20 F006          	lfsr	2,6
 12890  014FC4  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12891  014FC6  26D9               	addwf	fsr2l,f,c
 12892  014FC8  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12893  014FCA  22DA               	addwfc	fsr2h,f,c
 12894  014FCC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12895  014FD0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12896  014FD4  0E05               	movlw	5
 12897  014FD6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12898  014FD8  0E01               	movlw	1
 12899  014FDA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12900  014FDC  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 12901  014FE0  0012               	return		;funcret
 12902  014FE2                     __end_of_SPI_MinSpeed:
 12903                           	opt stack 0
 12904                           tosu	equ	0xFFF
 12905                           tosh	equ	0xFFE
 12906                           tosl	equ	0xFFD
 12907                           pclath	equ	0xFFA
 12908                           tblptru	equ	0xFF8
 12909                           tblptrh	equ	0xFF7
 12910                           tblptrl	equ	0xFF6
 12911                           tablat	equ	0xFF5
 12912                           prodh	equ	0xFF4
 12913                           prodl	equ	0xFF3
 12914                           intcon	equ	0xFF2
 12915                           postinc0	equ	0xFEE
 12916                           wreg	equ	0xFE8
 12917                           indf1	equ	0xFE7
 12918                           postdec1	equ	0xFE5
 12919                           fsr1h	equ	0xFE2
 12920                           fsr1l	equ	0xFE1
 12921                           indf2	equ	0xFDF
 12922                           postinc2	equ	0xFDE
 12923                           postdec2	equ	0xFDD
 12924                           plusw2	equ	0xFDB
 12925                           fsr2h	equ	0xFDA
 12926                           fsr2l	equ	0xFD9
 12927                           status	equ	0xFD8
 12928                           
 12929 ;; *************** function _SPI_Init *****************
 12930 ;; Defined at:
 12931 ;;		line 12 in file "Library/SPI.c"
 12932 ;; Parameters:    Size  Location     Type
 12933 ;;  pClock          4   45[BANK0 ] unsigned long 
 12934 ;;  pChannel        1   49[BANK0 ] enum E6744
 12935 ;;  pMode           1   50[BANK0 ] enum E6748
 12936 ;; Auto vars:     Size  Location     Type
 12937 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 12938 ;;		 -> SPI1(11), SPI2(11), 
 12939 ;; Return value:  Size  Location     Type
 12940 ;;                  1    wreg      void 
 12941 ;; Registers used:
 12942 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12943 ;; Tracked objects:
 12944 ;;		On entry : 0/0
 12945 ;;		On exit  : 0/0
 12946 ;;		Unchanged: 0/0
 12947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12948 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12949 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12951 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12952 ;;Total ram usage:        8 bytes
 12953 ;; Hardware stack levels used:    1
 12954 ;; Hardware stack levels required when called:   12
 12955 ;; This function calls:
 12956 ;;		_Byte_SetBit
 12957 ;;		_Byte_SetQuad
 12958 ;;		_Port_SetPinType
 12959 ;;		_SPI_DCS
 12960 ;;		_SPI_DisableISR
 12961 ;;		_Timer2_Init
 12962 ;; This function is called by:
 12963 ;;		_Configure_GPIOs
 12964 ;;		_HMI_Init
 12965 ;; This function uses a non-reentrant model
 12966 ;;
 12967                           
 12968                           	psect	text65
 12969  010796                     __ptext65:
 12970                           	opt stack 0
 12971  010796                     _SPI_Init:
 12972                           	opt stack 16
 12973                           
 12974                           ;SPI.c: 14: SPIPtr pInput;
 12975                           ;SPI.c: 16: switch (pChannel)
 12976                           
 12977                           ;incstack = 0
 12978  010796  D00A               	goto	l597
 12979  010798                     
 12980                           ;SPI.c: 19: pInput = &SPI1;
 12981  010798  0EC8               	movlw	low _SPI1
 12982  01079A  0100               	movlb	0	; () banked
 12983  01079C  6F93               	movwf	SPI_Init@pInput& (0+255),b
 12984  01079E  0E02               	movlw	high _SPI1
 12985  0107A0  D003               	goto	L7
 12986  0107A2                     
 12987                           ; BSR set to: 0
 12988                           ;SPI.c: 22: pInput = &SPI2;
 12989                           
 12990                           ; BSR set to: 0
 12991  0107A2  0E82               	movlw	low _SPI2
 12992  0107A4  6F93               	movwf	SPI_Init@pInput& (0+255),b
 12993  0107A6  0E01               	movlw	high _SPI2
 12994  0107A8                     L7:
 12995  0107A8  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 12996                           
 12997                           ; BSR set to: 0
 12998                           ;SPI.c: 24: };
 12999                           
 13000                           ;SPI.c: 23: break;
 13001  0107AA  D008               	goto	l599
 13002  0107AC                     l597:
 13003                           
 13004                           ; BSR set to: 0
 13005  0107AC  0100               	movlb	0	; () banked
 13006  0107AE  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 13007                           
 13008                           ; Switch size 1, requested type "space"
 13009                           ; Number of cases is 2, Range of values is 0 to 1
 13010                           ; switch strategies available:
 13011                           ; Name         Instructions Cycles
 13012                           ; simple_byte            7     4 (average)
 13013                           ;	Chosen strategy is simple_byte
 13014  0107B0  0A00               	xorlw	0	; case 0
 13015  0107B2  B4D8               	btfsc	status,2,c
 13016  0107B4  D7F1               	goto	l598
 13017  0107B6  0A01               	xorlw	1	; case 1
 13018  0107B8  B4D8               	btfsc	status,2,c
 13019  0107BA  D7F3               	goto	l600
 13020  0107BC                     l599:
 13021                           
 13022                           ; BSR set to: 0
 13023                           ;SPI.c: 26: pInput->mChannel = pChannel;
 13024                           
 13025                           ; BSR set to: 0
 13026  0107BC  EE20 F002          	lfsr	2,2
 13027  0107C0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13028  0107C2  26D9               	addwf	fsr2l,f,c
 13029  0107C4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13030  0107C6  22DA               	addwfc	fsr2h,f,c
 13031  0107C8  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 13032                           
 13033                           ;SPI.c: 35: switch (pChannel)
 13034  0107CC  D093               	goto	l601
 13035  0107CE                     
 13036                           ; BSR set to: 0
 13037                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 13038                           
 13039                           ; BSR set to: 0
 13040  0107CE  0EAB               	movlw	low _PortC
 13041  0107D0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13042  0107D2  0E01               	movlw	high _PortC
 13043  0107D4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13044  0107D6  0E02               	movlw	2
 13045  0107D8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13046  0107DA  0E03               	movlw	3
 13047  0107DC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13048  0107DE  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13049                           
 13050                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 13051  0107E2  0EAB               	movlw	low _PortC
 13052  0107E4  0100               	movlb	0	; () banked
 13053  0107E6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13054  0107E8  0E01               	movlw	high _PortC
 13055  0107EA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13056  0107EC  0E03               	movlw	3
 13057  0107EE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13058  0107F0  0E03               	movlw	3
 13059  0107F2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13060  0107F4  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13061                           
 13062                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 13063  0107F8  0EAB               	movlw	low _PortC
 13064  0107FA  0100               	movlb	0	; () banked
 13065  0107FC  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13066  0107FE  0E01               	movlw	high _PortC
 13067  010800  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13068  010802  0E05               	movlw	5
 13069  010804  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13070  010806  0E03               	movlw	3
 13071  010808  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13072  01080A  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13073                           
 13074                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 13075  01080E  0EAB               	movlw	low _PortC
 13076  010810  0100               	movlb	0	; () banked
 13077  010812  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13078  010814  0E01               	movlw	high _PortC
 13079  010816  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13080  010818  0E04               	movlw	4
 13081  01081A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13082  01081C  0E00               	movlw	0
 13083  01081E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13084  010820  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13085                           
 13086                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 13087  010824  0100               	movlb	0	; () banked
 13088  010826  EE20 F003          	lfsr	2,3
 13089  01082A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13090  01082C  26D9               	addwf	fsr2l,f,c
 13091  01082E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13092  010830  22DA               	addwfc	fsr2h,f,c
 13093  010832  0EC7               	movlw	199
 13094  010834  6EDE               	movwf	postinc2,c
 13095  010836  0E0F               	movlw	15
 13096  010838  6EDD               	movwf	postdec2,c
 13097                           
 13098                           ; BSR set to: 0
 13099                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 13100  01083A  EE20 F006          	lfsr	2,6
 13101  01083E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13102  010840  26D9               	addwf	fsr2l,f,c
 13103  010842  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13104  010844  22DA               	addwfc	fsr2h,f,c
 13105  010846  0EC6               	movlw	198
 13106  010848  6EDE               	movwf	postinc2,c
 13107  01084A  0E0F               	movlw	15
 13108  01084C  6EDD               	movwf	postdec2,c
 13109                           
 13110                           ; BSR set to: 0
 13111                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 13112  01084E  EE20 F009          	lfsr	2,9
 13113  010852  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13114  010854  26D9               	addwf	fsr2l,f,c
 13115  010856  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13116  010858  22DA               	addwfc	fsr2h,f,c
 13117  01085A  0EC9               	movlw	201
 13118  01085C  D047               	goto	L8
 13119  01085E                     
 13120                           ; BSR set to: 0
 13121                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 13122                           
 13123                           ; BSR set to: 0
 13124  01085E  0E97               	movlw	low _PortD
 13125  010860  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13126  010862  0E01               	movlw	high _PortD
 13127  010864  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13128  010866  0E07               	movlw	7
 13129  010868  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13130  01086A  0E03               	movlw	3
 13131  01086C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13132  01086E  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13133                           
 13134                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 13135  010872  0E97               	movlw	low _PortD
 13136  010874  0100               	movlb	0	; () banked
 13137  010876  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13138  010878  0E01               	movlw	high _PortD
 13139  01087A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13140  01087C  0E06               	movlw	6
 13141  01087E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13142  010880  0E03               	movlw	3
 13143  010882  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13144  010884  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13145                           
 13146                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 13147  010888  0E97               	movlw	low _PortD
 13148  01088A  0100               	movlb	0	; () banked
 13149  01088C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13150  01088E  0E01               	movlw	high _PortD
 13151  010890  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13152  010892  0E04               	movlw	4
 13153  010894  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13154  010896  0E03               	movlw	3
 13155  010898  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13156  01089A  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13157                           
 13158                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 13159  01089E  0E97               	movlw	low _PortD
 13160  0108A0  0100               	movlb	0	; () banked
 13161  0108A2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13162  0108A4  0E01               	movlw	high _PortD
 13163  0108A6  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13164  0108A8  0E05               	movlw	5
 13165  0108AA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13166  0108AC  0E00               	movlw	0
 13167  0108AE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13168  0108B0  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13169                           
 13170                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 13171  0108B4  0100               	movlb	0	; () banked
 13172  0108B6  EE20 F003          	lfsr	2,3
 13173  0108BA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13174  0108BC  26D9               	addwf	fsr2l,f,c
 13175  0108BE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13176  0108C0  22DA               	addwfc	fsr2h,f,c
 13177  0108C2  0E6D               	movlw	109
 13178  0108C4  6EDE               	movwf	postinc2,c
 13179  0108C6  0E0F               	movlw	15
 13180  0108C8  6EDD               	movwf	postdec2,c
 13181                           
 13182                           ; BSR set to: 0
 13183                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 13184  0108CA  EE20 F006          	lfsr	2,6
 13185  0108CE  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13186  0108D0  26D9               	addwf	fsr2l,f,c
 13187  0108D2  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13188  0108D4  22DA               	addwfc	fsr2h,f,c
 13189  0108D6  0E6C               	movlw	108
 13190  0108D8  6EDE               	movwf	postinc2,c
 13191  0108DA  0E0F               	movlw	15
 13192  0108DC  6EDD               	movwf	postdec2,c
 13193                           
 13194                           ; BSR set to: 0
 13195                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 13196  0108DE  EE20 F009          	lfsr	2,9
 13197  0108E2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13198  0108E4  26D9               	addwf	fsr2l,f,c
 13199  0108E6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13200  0108E8  22DA               	addwfc	fsr2h,f,c
 13201  0108EA  0E6F               	movlw	111
 13202  0108EC                     L8:
 13203  0108EC  6EDE               	movwf	postinc2,c
 13204  0108EE  0E0F               	movlw	15
 13205  0108F0  6EDD               	movwf	postdec2,c
 13206                           
 13207                           ;SPI.c: 68: break;
 13208  0108F2  D008               	goto	l603
 13209  0108F4                     l601:
 13210                           
 13211                           ; BSR set to: 0
 13212                           
 13213                           ; BSR set to: 0
 13214  0108F4  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 13215                           
 13216                           ; Switch size 1, requested type "space"
 13217                           ; Number of cases is 2, Range of values is 0 to 1
 13218                           ; switch strategies available:
 13219                           ; Name         Instructions Cycles
 13220                           ; simple_byte            7     4 (average)
 13221                           ;	Chosen strategy is simple_byte
 13222  0108F6  0A00               	xorlw	0	; case 0
 13223  0108F8  B4D8               	btfsc	status,2,c
 13224  0108FA  D769               	goto	l602
 13225  0108FC  0A01               	xorlw	1	; case 1
 13226  0108FE  A4D8               	btfss	status,2,c
 13227  010900  0012               	return	
 13228  010902  D7AD               	goto	l604
 13229  010904                     l603:
 13230                           
 13231                           ; BSR set to: 0
 13232                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 13233                           
 13234                           ; BSR set to: 0
 13235  010904  EE20 F006          	lfsr	2,6
 13236  010908  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13237  01090A  26D9               	addwf	fsr2l,f,c
 13238  01090C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13239  01090E  22DA               	addwfc	fsr2h,f,c
 13240  010910  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13241  010914  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13242  010918  0E05               	movlw	5
 13243  01091A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13244  01091C  0E00               	movlw	0
 13245  01091E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13246  010920  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13247                           
 13248                           ;SPI.c: 77: switch(pMode)
 13249  010924  D08C               	goto	l607
 13250  010926                     
 13251                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 13252  010926  0100               	movlb	0	; () banked
 13253  010928  EE20 F006          	lfsr	2,6
 13254  01092C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13255  01092E  26D9               	addwf	fsr2l,f,c
 13256  010930  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13257  010932  22DA               	addwfc	fsr2h,f,c
 13258  010934  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13259  010938  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13260  01093C  0E04               	movlw	4
 13261  01093E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13262  010940  0E00               	movlw	0
 13263  010942  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13264  010944  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13265                           
 13266                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 13267  010948  0100               	movlb	0	; () banked
 13268  01094A  EE20 F003          	lfsr	2,3
 13269  01094E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13270  010950  26D9               	addwf	fsr2l,f,c
 13271  010952  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13272  010954  22DA               	addwfc	fsr2h,f,c
 13273  010956  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13274  01095A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13275  01095E  0E06               	movlw	6
 13276  010960  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13277  010962  0E00               	movlw	0
 13278  010964  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13279  010966  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13280                           
 13281                           ;SPI.c: 82: break;
 13282  01096A  D078               	goto	l609
 13283  01096C                     
 13284                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 13285  01096C  0100               	movlb	0	; () banked
 13286  01096E  EE20 F006          	lfsr	2,6
 13287  010972  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13288  010974  26D9               	addwf	fsr2l,f,c
 13289  010976  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13290  010978  22DA               	addwfc	fsr2h,f,c
 13291  01097A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13292  01097E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13293  010982  0E04               	movlw	4
 13294  010984  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13295  010986  0E00               	movlw	0
 13296  010988  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13297  01098A  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13298                           
 13299                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 13300  01098E  0100               	movlb	0	; () banked
 13301  010990  EE20 F003          	lfsr	2,3
 13302  010994  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13303  010996  26D9               	addwf	fsr2l,f,c
 13304  010998  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13305  01099A  22DA               	addwfc	fsr2h,f,c
 13306  01099C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13307  0109A0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13308  0109A4  0E06               	movlw	6
 13309  0109A6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13310  0109A8  0E01               	movlw	1
 13311  0109AA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13312  0109AC  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13313                           
 13314                           ;SPI.c: 86: break;
 13315  0109B0  D055               	goto	l609
 13316  0109B2                     
 13317                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 13318  0109B2  0100               	movlb	0	; () banked
 13319  0109B4  EE20 F006          	lfsr	2,6
 13320  0109B8  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13321  0109BA  26D9               	addwf	fsr2l,f,c
 13322  0109BC  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13323  0109BE  22DA               	addwfc	fsr2h,f,c
 13324  0109C0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13325  0109C4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13326  0109C8  0E04               	movlw	4
 13327  0109CA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13328  0109CC  0E01               	movlw	1
 13329  0109CE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13330  0109D0  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13331                           
 13332                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 13333  0109D4  0100               	movlb	0	; () banked
 13334  0109D6  EE20 F003          	lfsr	2,3
 13335  0109DA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13336  0109DC  26D9               	addwf	fsr2l,f,c
 13337  0109DE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13338  0109E0  22DA               	addwfc	fsr2h,f,c
 13339  0109E2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13340  0109E6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13341  0109EA  0E06               	movlw	6
 13342  0109EC  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13343  0109EE  0E00               	movlw	0
 13344  0109F0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13345  0109F2  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13346                           
 13347                           ;SPI.c: 90: break;
 13348  0109F6  D032               	goto	l609
 13349  0109F8                     
 13350                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 13351  0109F8  0100               	movlb	0	; () banked
 13352  0109FA  EE20 F006          	lfsr	2,6
 13353  0109FE  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13354  010A00  26D9               	addwf	fsr2l,f,c
 13355  010A02  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13356  010A04  22DA               	addwfc	fsr2h,f,c
 13357  010A06  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13358  010A0A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13359  010A0E  0E04               	movlw	4
 13360  010A10  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13361  010A12  0E01               	movlw	1
 13362  010A14  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13363  010A16  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13364                           
 13365                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 13366  010A1A  0100               	movlb	0	; () banked
 13367  010A1C  EE20 F003          	lfsr	2,3
 13368  010A20  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13369  010A22  26D9               	addwf	fsr2l,f,c
 13370  010A24  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13371  010A26  22DA               	addwfc	fsr2h,f,c
 13372  010A28  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13373  010A2C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13374  010A30  0E06               	movlw	6
 13375  010A32  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13376  010A34  0E01               	movlw	1
 13377  010A36  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13378  010A38  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13379                           
 13380                           ;SPI.c: 94: break;
 13381  010A3C  D00F               	goto	l609
 13382  010A3E                     l607:
 13383  010A3E  0100               	movlb	0	; () banked
 13384  010A40  5192               	movf	SPI_Init@pMode& (0+255),w,b
 13385                           
 13386                           ; Switch size 1, requested type "space"
 13387                           ; Number of cases is 4, Range of values is 0 to 3
 13388                           ; switch strategies available:
 13389                           ; Name         Instructions Cycles
 13390                           ; simple_byte           13     7 (average)
 13391                           ;	Chosen strategy is simple_byte
 13392  010A42  0A00               	xorlw	0	; case 0
 13393  010A44  B4D8               	btfsc	status,2,c
 13394  010A46  D76F               	goto	l608
 13395  010A48  0A01               	xorlw	1	; case 1
 13396  010A4A  B4D8               	btfsc	status,2,c
 13397  010A4C  D78F               	goto	l610
 13398  010A4E  0A03               	xorlw	3	; case 2
 13399  010A50  B4D8               	btfsc	status,2,c
 13400  010A52  D7AF               	goto	l611
 13401  010A54  0A01               	xorlw	1	; case 3
 13402  010A56  A4D8               	btfss	status,2,c
 13403  010A58  0012               	return	
 13404  010A5A  D7CE               	goto	l612
 13405  010A5C                     l609:
 13406                           
 13407                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 13408                           
 13409                           ; BSR set to: 0
 13410  010A5C  0100               	movlb	0	; () banked
 13411  010A5E  EE20 F006          	lfsr	2,6
 13412  010A62  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13413  010A64  26D9               	addwf	fsr2l,f,c
 13414  010A66  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13415  010A68  22DA               	addwfc	fsr2h,f,c
 13416  010A6A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13417  010A6E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13418  010A72  0E07               	movlw	7
 13419  010A74  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13420  010A76  0E00               	movlw	0
 13421  010A78  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13422  010A7A  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13423                           
 13424                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 13425  010A7E  0100               	movlb	0	; () banked
 13426  010A80  EE20 F006          	lfsr	2,6
 13427  010A84  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13428  010A86  26D9               	addwf	fsr2l,f,c
 13429  010A88  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13430  010A8A  22DA               	addwfc	fsr2h,f,c
 13431  010A8C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13432  010A90  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13433  010A94  0E06               	movlw	6
 13434  010A96  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13435  010A98  0E00               	movlw	0
 13436  010A9A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13437  010A9C  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13438                           
 13439                           ;SPI.c: 106: Timer2_Init(pClock);
 13440  010AA0  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 13441  010AA4  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 13442  010AA8  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 13443  010AAC  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 13444  010AB0  ECF9  F098         	call	_Timer2_Init	;wreg free
 13445                           
 13446                           ;SPI.c: 112: SPI_DisableISR(pInput);
 13447  010AB4  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 13448  010AB8  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 13449  010ABC  EC3C  F0AE         	call	_SPI_DisableISR	;wreg free
 13450                           
 13451                           ;SPI.c: 116: switch (pChannel)
 13452  010AC0  D004               	goto	l614
 13453  010AC2                     l615:
 13454                           
 13455                           ; BSR set to: 0
 13456  010AC2  869F               	bsf	3999,3,c	;volatile
 13457  010AC4  D00B               	goto	l616
 13458  010AC6                     l617:
 13459                           
 13460                           ; BSR set to: 0
 13461  010AC6  8EA5               	bsf	4005,7,c	;volatile
 13462  010AC8  D009               	goto	l616
 13463  010ACA                     l614:
 13464                           
 13465                           ; BSR set to: 0
 13466  010ACA  0100               	movlb	0	; () banked
 13467  010ACC  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 13468                           
 13469                           ; Switch size 1, requested type "space"
 13470                           ; Number of cases is 2, Range of values is 0 to 1
 13471                           ; switch strategies available:
 13472                           ; Name         Instructions Cycles
 13473                           ; simple_byte            7     4 (average)
 13474                           ;	Chosen strategy is simple_byte
 13475  010ACE  0A00               	xorlw	0	; case 0
 13476  010AD0  B4D8               	btfsc	status,2,c
 13477  010AD2  D7F7               	goto	l615
 13478  010AD4  0A01               	xorlw	1	; case 1
 13479  010AD6  A4D8               	btfss	status,2,c
 13480  010AD8  0012               	return	
 13481  010ADA  D7F5               	goto	l617
 13482  010ADC                     l616:
 13483                           
 13484                           ; BSR set to: 0
 13485                           ;SPI.c: 124: SPI_DCS(pInput);
 13486                           
 13487                           ; BSR set to: 0
 13488  010ADC  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 13489  010AE0  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 13490  010AE4  ECAF  F0AD         	call	_SPI_DCS	;wreg free
 13491                           
 13492                           ;SPI.c: 126: pInput->mBusy = 0;
 13493  010AE8  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 13494  010AEC  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 13495  010AF0  0E00               	movlw	0
 13496  010AF2  6EDF               	movwf	indf2,c
 13497                           
 13498                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 13499  010AF4  0100               	movlb	0	; () banked
 13500  010AF6  EE20 F006          	lfsr	2,6
 13501  010AFA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13502  010AFC  26D9               	addwf	fsr2l,f,c
 13503  010AFE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13504  010B00  22DA               	addwfc	fsr2h,f,c
 13505  010B02  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 13506  010B06  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 13507  010B0A  0E00               	movlw	0
 13508  010B0C  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 13509  010B0E  0E03               	movlw	3
 13510  010B10  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 13511  010B12  ECD2  F0AE         	call	_Byte_SetQuad	;wreg free
 13512                           
 13513                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 13514  010B16  0100               	movlb	0	; () banked
 13515  010B18  EE20 F006          	lfsr	2,6
 13516  010B1C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13517  010B1E  26D9               	addwf	fsr2l,f,c
 13518  010B20  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13519  010B22  22DA               	addwfc	fsr2h,f,c
 13520  010B24  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13521  010B28  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13522  010B2C  0E05               	movlw	5
 13523  010B2E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13524  010B30  0E01               	movlw	1
 13525  010B32  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13526  010B34  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13527  010B38  0012               	return		;funcret
 13528  010B3A                     __end_of_SPI_Init:
 13529                           	opt stack 0
 13530                           tosu	equ	0xFFF
 13531                           tosh	equ	0xFFE
 13532                           tosl	equ	0xFFD
 13533                           pclath	equ	0xFFA
 13534                           tblptru	equ	0xFF8
 13535                           tblptrh	equ	0xFF7
 13536                           tblptrl	equ	0xFF6
 13537                           tablat	equ	0xFF5
 13538                           prodh	equ	0xFF4
 13539                           prodl	equ	0xFF3
 13540                           intcon	equ	0xFF2
 13541                           postinc0	equ	0xFEE
 13542                           wreg	equ	0xFE8
 13543                           indf1	equ	0xFE7
 13544                           postdec1	equ	0xFE5
 13545                           fsr1h	equ	0xFE2
 13546                           fsr1l	equ	0xFE1
 13547                           indf2	equ	0xFDF
 13548                           postinc2	equ	0xFDE
 13549                           postdec2	equ	0xFDD
 13550                           plusw2	equ	0xFDB
 13551                           fsr2h	equ	0xFDA
 13552                           fsr2l	equ	0xFD9
 13553                           status	equ	0xFD8
 13554                           
 13555 ;; *************** function _Timer2_Init *****************
 13556 ;; Defined at:
 13557 ;;		line 10 in file "Library/Timer2.c"
 13558 ;; Parameters:    Size  Location     Type
 13559 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 13560 ;; Auto vars:     Size  Location     Type
 13561 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 13562 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 13563 ;;  RDIV            4   18[BANK0 ] unsigned long 
 13564 ;; Return value:  Size  Location     Type
 13565 ;;                  1    wreg      void 
 13566 ;; Registers used:
 13567 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13568 ;; Tracked objects:
 13569 ;;		On entry : 0/0
 13570 ;;		On exit  : 0/0
 13571 ;;		Unchanged: 0/0
 13572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13573 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13574 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13575 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13576 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13577 ;;Total ram usage:       17 bytes
 13578 ;; Hardware stack levels used:    1
 13579 ;; Hardware stack levels required when called:    8
 13580 ;; This function calls:
 13581 ;;		_Timer2_Clear
 13582 ;;		___lldiv
 13583 ;; This function is called by:
 13584 ;;		_SPI_Init
 13585 ;; This function uses a non-reentrant model
 13586 ;;
 13587                           
 13588                           	psect	text66
 13589  0131F2                     __ptext66:
 13590                           	opt stack 0
 13591  0131F2                     _Timer2_Init:
 13592                           	opt stack 19
 13593                           
 13594                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 13595                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 13596                           ;Timer2.c: 14: static UINT8 PRE = 0;
 13597                           ;Timer2.c: 15: static UINT32 DIV = 0;
 13598                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 13599                           
 13600                           ;incstack = 0
 13601  0131F2  0E00               	movlw	0
 13602  0131F4  0100               	movlb	0	; () banked
 13603  0131F6  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 13604  0131F8  0E6C               	movlw	108
 13605  0131FA  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 13606  0131FC  0EDC               	movlw	220
 13607  0131FE  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 13608  013200  0E02               	movlw	2
 13609  013202  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 13610                           
 13611                           ; BSR set to: 0
 13612                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 13613                           ;Timer2.c: 20: pFrequency *= 2;
 13614  013204  90D8               	bcf	status,0,c
 13615  013206  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 13616  013208  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 13617  01320A  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 13618  01320C  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 13619                           
 13620                           ; BSR set to: 0
 13621                           ;Timer2.c: 23: pCPUClock /= 4;
 13622  01320E  0E02               	movlw	2
 13623  013210  6F71               	movwf	??_Timer2_Init& (0+255),b
 13624  013212                     u11275:
 13625  013212  90D8               	bcf	status,0,c
 13626  013214  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 13627  013216  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 13628  013218  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 13629  01321A  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 13630  01321C  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 13631  01321E  D7F9               	goto	u11275
 13632                           
 13633                           ; BSR set to: 0
 13634                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 13635  013220  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 13636  013224  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 13637  013228  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 13638  01322C  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 13639  013230  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 13640  013234  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 13641  013238  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 13642  01323C  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 13643  013240  EC8A  F0A4         	call	___lldiv	;wreg free
 13644  013244  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 13645  013248  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 13646  01324C  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 13647  013250  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 13648                           
 13649                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 13650  013254  D00E               	goto	l1828
 13651  013256                     l13945:
 13652                           
 13653                           ;Timer2.c: 28: {
 13654                           ;Timer2.c: 29: RDIV = 0;
 13655  013256  0E00               	movlw	0
 13656  013258  0100               	movlb	0	; () banked
 13657  01325A  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 13658  01325C  0E00               	movlw	0
 13659  01325E  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 13660  013260  0E00               	movlw	0
 13661  013262  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 13662  013264  0E00               	movlw	0
 13663  013266  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 13664                           
 13665                           ; BSR set to: 0
 13666                           ;Timer2.c: 30: INDEX ++;
 13667  013268  2BF2               	incf	Timer2_Init@INDEX& (0+255),f,b
 13668                           
 13669                           ; BSR set to: 0
 13670                           ;Timer2.c: 31: if (INDEX >= 3)
 13671  01326A  0E02               	movlw	2
 13672  01326C  65F2               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 13673  01326E  D001               	goto	l1828
 13674  013270  D023               	goto	u11290
 13675  013272                     l1828:
 13676                           
 13677                           ; BSR set to: 0
 13678                           
 13679                           ; BSR set to: 0
 13680  013272  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 13681  013276  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 13682  01327A  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 13683  01327E  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 13684  013282  0100               	movlb	0	; () banked
 13685  013284  51F2               	movf	Timer2_Init@INDEX& (0+255),w,b
 13686  013286  0D01               	mullw	1
 13687  013288  0E40               	movlw	low Timer2_Init@PRESCALE
 13688  01328A  24F3               	addwf	prodl,w,c
 13689  01328C  6EF6               	movwf	tblptrl,c
 13690  01328E  0EFC               	movlw	high Timer2_Init@PRESCALE
 13691  013290  20F4               	addwfc	prodh,w,c
 13692  013292  6EF7               	movwf	tblptrh,c
 13693  013294                     	if	1	;There are 3 active tblptr bytes
 13694  013294  6AF8               	clrf	tblptru,c
 13695  013296  0E00               	movlw	low (__mediumconst shr (0+16))
 13696  013298  22F8               	addwfc	tblptru,f,c
 13697  01329A                     	endif
 13698  01329A  0008               	tblrd		*
 13699  01329C  50F5               	movf	tablat,w,c
 13700  01329E  6F64               	movwf	___lldiv@divisor& (0+255),b
 13701  0132A0  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13702  0132A2  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13703  0132A4  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13704  0132A6  EC8A  F0A4         	call	___lldiv	;wreg free
 13705  0132AA  0100               	movlb	0	; () banked
 13706  0132AC  5163               	movf	(?___lldiv+3)& (0+255),w,b
 13707  0132AE  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 13708  0132B0  E1D2               	bnz	l13945
 13709  0132B2  0561               	decf	(?___lldiv+1)& (0+255),w,b
 13710  0132B4  B0D8               	btfsc	status,0,c
 13711  0132B6  D7CF               	goto	l1827
 13712  0132B8                     u11290:
 13713                           
 13714                           ; BSR set to: 0
 13715                           ;Timer2.c: 33: }
 13716                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 13717                           
 13718                           ; BSR set to: 0
 13719  0132B8  50CA               	movf	4042,w,c	;volatile
 13720  0132BA  19F2               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 13721  0132BC  0BFC               	andlw	-4
 13722  0132BE  19F2               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 13723  0132C0  6ECA               	movwf	4042,c	;volatile
 13724                           
 13725                           ; BSR set to: 0
 13726                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 13727  0132C2  84CA               	bsf	4042,2,c	;volatile
 13728                           
 13729                           ; BSR set to: 0
 13730                           ;Timer2.c: 44: Timer2_Clear();
 13731  0132C4  EC52  F0B0         	call	_Timer2_Clear	;wreg free
 13732                           
 13733                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 13734  0132C8  0100               	movlb	0	; () banked
 13735  0132CA  51F2               	movf	Timer2_Init@INDEX& (0+255),w,b
 13736  0132CC  0D01               	mullw	1
 13737  0132CE  0E40               	movlw	low Timer2_Init@PRESCALE
 13738  0132D0  24F3               	addwf	prodl,w,c
 13739  0132D2  6EF6               	movwf	tblptrl,c
 13740  0132D4  0EFC               	movlw	high Timer2_Init@PRESCALE
 13741  0132D6  20F4               	addwfc	prodh,w,c
 13742  0132D8  6EF7               	movwf	tblptrh,c
 13743  0132DA                     	if	1	;There are 3 active tblptr bytes
 13744  0132DA  6AF8               	clrf	tblptru,c
 13745  0132DC  0E00               	movlw	low (__mediumconst shr (0+16))
 13746  0132DE  22F8               	addwfc	tblptru,f,c
 13747  0132E0                     	endif
 13748  0132E0  0008               	tblrd		*
 13749  0132E2  CFF5 F039          	movff	tablat,Timer2_Init@PRE
 13750                           
 13751                           ; BSR set to: 0
 13752                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 13753  0132E6  0EFF               	movlw	255
 13754  0132E8  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 13755  0132EA  0101               	movlb	1	; () banked
 13756  0132EC  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 13757  0132EE  0EFF               	movlw	255
 13758  0132F0  0100               	movlb	0	; () banked
 13759  0132F2  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 13760  0132F4  0101               	movlb	1	; () banked
 13761  0132F6  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 13762  0132F8  0EFF               	movlw	255
 13763  0132FA  0100               	movlb	0	; () banked
 13764  0132FC  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 13765  0132FE  0101               	movlb	1	; () banked
 13766  013300  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 13767  013302  0EFF               	movlw	255
 13768  013304  0100               	movlb	0	; () banked
 13769  013306  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 13770  013308  0101               	movlb	1	; () banked
 13771  01330A  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 13772                           
 13773                           ; BSR set to: 1
 13774                           ;Timer2.c: 48: INDEX = DIV/PRE;
 13775  01330C  C100  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 13776  013310  C101  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 13777  013314  C102  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 13778  013318  C103  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 13779  01331C  5039               	movf	Timer2_Init@PRE,w,c
 13780  01331E  0100               	movlb	0	; () banked
 13781  013320  6F64               	movwf	___lldiv@divisor& (0+255),b
 13782  013322  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13783  013324  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13784  013326  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13785  013328  EC8A  F0A4         	call	___lldiv	;wreg free
 13786  01332C  0100               	movlb	0	; () banked
 13787  01332E  5160               	movf	?___lldiv& (0+255),w,b
 13788  013330  6FF2               	movwf	Timer2_Init@INDEX& (0+255),b
 13789                           
 13790                           ; BSR set to: 0
 13791                           ;Timer2.c: 49: PR2 = INDEX;
 13792  013332  C0F2  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 13793                           
 13794                           ; BSR set to: 0
 13795  013336  0012               	return		;funcret
 13796  013338                     __end_of_Timer2_Init:
 13797                           	opt stack 0
 13798                           tosu	equ	0xFFF
 13799                           tosh	equ	0xFFE
 13800                           tosl	equ	0xFFD
 13801                           pclath	equ	0xFFA
 13802                           tblptru	equ	0xFF8
 13803                           tblptrh	equ	0xFF7
 13804                           tblptrl	equ	0xFF6
 13805                           tablat	equ	0xFF5
 13806                           prodh	equ	0xFF4
 13807                           prodl	equ	0xFF3
 13808                           intcon	equ	0xFF2
 13809                           postinc0	equ	0xFEE
 13810                           wreg	equ	0xFE8
 13811                           indf1	equ	0xFE7
 13812                           postdec1	equ	0xFE5
 13813                           fsr1h	equ	0xFE2
 13814                           fsr1l	equ	0xFE1
 13815                           indf2	equ	0xFDF
 13816                           postinc2	equ	0xFDE
 13817                           postdec2	equ	0xFDD
 13818                           plusw2	equ	0xFDB
 13819                           fsr2h	equ	0xFDA
 13820                           fsr2l	equ	0xFD9
 13821                           status	equ	0xFD8
 13822                           
 13823 ;; *************** function ___lldiv *****************
 13824 ;; Defined at:
 13825 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 13826 ;; Parameters:    Size  Location     Type
 13827 ;;  dividend        4    0[BANK0 ] unsigned long 
 13828 ;;  divisor         4    4[BANK0 ] unsigned long 
 13829 ;; Auto vars:     Size  Location     Type
 13830 ;;  quotient        4    8[BANK0 ] unsigned long 
 13831 ;;  counter         1   12[BANK0 ] unsigned char 
 13832 ;; Return value:  Size  Location     Type
 13833 ;;                  4    0[BANK0 ] unsigned long 
 13834 ;; Registers used:
 13835 ;;		wreg, status,2, status,0
 13836 ;; Tracked objects:
 13837 ;;		On entry : 0/0
 13838 ;;		On exit  : 0/0
 13839 ;;		Unchanged: 0/0
 13840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13841 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13842 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13844 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13845 ;;Total ram usage:       13 bytes
 13846 ;; Hardware stack levels used:    1
 13847 ;; Hardware stack levels required when called:    7
 13848 ;; This function calls:
 13849 ;;		Nothing
 13850 ;; This function is called by:
 13851 ;;		_Timer2_Init
 13852 ;;		_rand_between
 13853 ;;		_I2C_Init
 13854 ;;		_Timer0_Init
 13855 ;; This function uses a non-reentrant model
 13856 ;;
 13857                           
 13858                           	psect	text67
 13859  014914                     __ptext67:
 13860                           	opt stack 0
 13861  014914                     ___lldiv:
 13862                           	opt stack 19
 13863                           
 13864                           ; BSR set to: 0
 13865                           ;incstack = 0
 13866  014914  0E00               	movlw	0
 13867  014916  0100               	movlb	0	; () banked
 13868  014918  6F68               	movwf	___lldiv@quotient& (0+255),b
 13869  01491A  0E00               	movlw	0
 13870  01491C  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 13871  01491E  0E00               	movlw	0
 13872  014920  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 13873  014922  0E00               	movlw	0
 13874  014924  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 13875                           
 13876                           ; BSR set to: 0
 13877  014926  5164               	movf	___lldiv@divisor& (0+255),w,b
 13878  014928  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 13879  01492A  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 13880  01492C  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 13881  01492E  B4D8               	btfsc	status,2,c
 13882  014930  D02A               	goto	l2664
 13883                           
 13884                           ; BSR set to: 0
 13885  014932  0E01               	movlw	1
 13886  014934  6F6C               	movwf	___lldiv@counter& (0+255),b
 13887  014936  D006               	goto	l2659
 13888  014938                     
 13889                           ; BSR set to: 0
 13890                           
 13891                           ; BSR set to: 0
 13892  014938  90D8               	bcf	status,0,c
 13893  01493A  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 13894  01493C  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 13895  01493E  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 13896  014940  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 13897  014942  2B6C               	incf	___lldiv@counter& (0+255),f,b
 13898  014944                     l2659:
 13899                           
 13900                           ; BSR set to: 0
 13901                           
 13902                           ; BSR set to: 0
 13903  014944  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 13904  014946  D7F8               	goto	l2660
 13905  014948                     u11040:
 13906                           
 13907                           ; BSR set to: 0
 13908                           
 13909                           ; BSR set to: 0
 13910                           
 13911                           ; BSR set to: 0
 13912  014948  90D8               	bcf	status,0,c
 13913  01494A  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 13914  01494C  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 13915  01494E  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 13916  014950  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 13917                           
 13918                           ; BSR set to: 0
 13919  014952  5164               	movf	___lldiv@divisor& (0+255),w,b
 13920  014954  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 13921  014956  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 13922  014958  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 13923  01495A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 13924  01495C  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 13925  01495E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 13926  014960  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 13927  014962  A0D8               	btfss	status,0,c
 13928  014964  D009               	goto	l2663
 13929                           
 13930                           ; BSR set to: 0
 13931  014966  5164               	movf	___lldiv@divisor& (0+255),w,b
 13932  014968  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 13933  01496A  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 13934  01496C  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 13935  01496E  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 13936  014970  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 13937  014972  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 13938  014974  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 13939                           
 13940                           ; BSR set to: 0
 13941  014976  8168               	bsf	___lldiv@quotient& (0+255),0,b
 13942  014978                     l2663:
 13943                           
 13944                           ; BSR set to: 0
 13945                           
 13946                           ; BSR set to: 0
 13947  014978  90D8               	bcf	status,0,c
 13948  01497A  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 13949  01497C  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 13950  01497E  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 13951  014980  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 13952                           
 13953                           ; BSR set to: 0
 13954  014982  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 13955  014984  D7E1               	goto	u11040
 13956  014986                     l2664:
 13957                           
 13958                           ; BSR set to: 0
 13959                           
 13960                           ; BSR set to: 0
 13961  014986  C068  F060         	movff	___lldiv@quotient,?___lldiv
 13962  01498A  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 13963  01498E  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 13964  014992  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 13965                           
 13966                           ; BSR set to: 0
 13967  014996  0012               	return		;funcret
 13968  014998                     __end_of___lldiv:
 13969                           	opt stack 0
 13970                           tosu	equ	0xFFF
 13971                           tosh	equ	0xFFE
 13972                           tosl	equ	0xFFD
 13973                           pclath	equ	0xFFA
 13974                           tblptru	equ	0xFF8
 13975                           tblptrh	equ	0xFF7
 13976                           tblptrl	equ	0xFF6
 13977                           tablat	equ	0xFF5
 13978                           prodh	equ	0xFF4
 13979                           prodl	equ	0xFF3
 13980                           intcon	equ	0xFF2
 13981                           postinc0	equ	0xFEE
 13982                           wreg	equ	0xFE8
 13983                           indf1	equ	0xFE7
 13984                           postdec1	equ	0xFE5
 13985                           fsr1h	equ	0xFE2
 13986                           fsr1l	equ	0xFE1
 13987                           indf2	equ	0xFDF
 13988                           postinc2	equ	0xFDE
 13989                           postdec2	equ	0xFDD
 13990                           plusw2	equ	0xFDB
 13991                           fsr2h	equ	0xFDA
 13992                           fsr2l	equ	0xFD9
 13993                           status	equ	0xFD8
 13994                           
 13995 ;; *************** function _Timer2_Clear *****************
 13996 ;; Defined at:
 13997 ;;		line 3 in file "Library/Timer2.c"
 13998 ;; Parameters:    Size  Location     Type
 13999 ;;		None
 14000 ;; Auto vars:     Size  Location     Type
 14001 ;;		None
 14002 ;; Return value:  Size  Location     Type
 14003 ;;                  1    wreg      void 
 14004 ;; Registers used:
 14005 ;;		None
 14006 ;; Tracked objects:
 14007 ;;		On entry : 0/0
 14008 ;;		On exit  : 0/0
 14009 ;;		Unchanged: 0/0
 14010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14015 ;;Total ram usage:        0 bytes
 14016 ;; Hardware stack levels used:    1
 14017 ;; Hardware stack levels required when called:    7
 14018 ;; This function calls:
 14019 ;;		Nothing
 14020 ;; This function is called by:
 14021 ;;		_Timer2_Init
 14022 ;; This function uses a non-reentrant model
 14023 ;;
 14024                           
 14025                           	psect	text68
 14026  0160A4                     __ptext68:
 14027                           	opt stack 0
 14028  0160A4                     _Timer2_Clear:
 14029                           	opt stack 19
 14030                           
 14031                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 14032                           
 14033                           ; BSR set to: 0
 14034                           ;incstack = 0
 14035  0160A4  929E               	bcf	3998,1,c	;volatile
 14036                           
 14037                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 14038  0160A6  929D               	bcf	3997,1,c	;volatile
 14039                           
 14040                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 14041  0160A8  929F               	bcf	3999,1,c	;volatile
 14042  0160AA  0012               	return		;funcret
 14043  0160AC                     __end_of_Timer2_Clear:
 14044                           	opt stack 0
 14045                           tosu	equ	0xFFF
 14046                           tosh	equ	0xFFE
 14047                           tosl	equ	0xFFD
 14048                           pclath	equ	0xFFA
 14049                           tblptru	equ	0xFF8
 14050                           tblptrh	equ	0xFF7
 14051                           tblptrl	equ	0xFF6
 14052                           tablat	equ	0xFF5
 14053                           prodh	equ	0xFF4
 14054                           prodl	equ	0xFF3
 14055                           intcon	equ	0xFF2
 14056                           postinc0	equ	0xFEE
 14057                           wreg	equ	0xFE8
 14058                           indf1	equ	0xFE7
 14059                           postdec1	equ	0xFE5
 14060                           fsr1h	equ	0xFE2
 14061                           fsr1l	equ	0xFE1
 14062                           indf2	equ	0xFDF
 14063                           postinc2	equ	0xFDE
 14064                           postdec2	equ	0xFDD
 14065                           plusw2	equ	0xFDB
 14066                           fsr2h	equ	0xFDA
 14067                           fsr2l	equ	0xFD9
 14068                           status	equ	0xFD8
 14069                           
 14070 ;; *************** function _SPI_DisableISR *****************
 14071 ;; Defined at:
 14072 ;;		line 181 in file "Library/SPI.c"
 14073 ;; Parameters:    Size  Location     Type
 14074 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 14075 ;;		 -> SPI1(11), SPI2(11), 
 14076 ;; Auto vars:     Size  Location     Type
 14077 ;;		None
 14078 ;; Return value:  Size  Location     Type
 14079 ;;                  1    wreg      void 
 14080 ;; Registers used:
 14081 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14082 ;; Tracked objects:
 14083 ;;		On entry : 0/0
 14084 ;;		On exit  : 0/0
 14085 ;;		Unchanged: 0/0
 14086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14087 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14090 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14091 ;;Total ram usage:        2 bytes
 14092 ;; Hardware stack levels used:    1
 14093 ;; Hardware stack levels required when called:    7
 14094 ;; This function calls:
 14095 ;;		Nothing
 14096 ;; This function is called by:
 14097 ;;		_SPI_Init
 14098 ;; This function uses a non-reentrant model
 14099 ;;
 14100                           
 14101                           	psect	text69
 14102  015C78                     __ptext69:
 14103                           	opt stack 0
 14104  015C78                     _SPI_DisableISR:
 14105                           	opt stack 20
 14106                           
 14107                           ;SPI.c: 183: switch (pInput->mChannel)
 14108                           
 14109                           ;incstack = 0
 14110  015C78  D004               	goto	l654
 14111  015C7A                     l655:
 14112                           
 14113                           ; BSR set to: 0
 14114  015C7A  969D               	bcf	3997,3,c	;volatile
 14115  015C7C  0012               	return	
 14116  015C7E                     l657:
 14117                           
 14118                           ; BSR set to: 0
 14119  015C7E  9EA3               	bcf	4003,7,c	;volatile
 14120                           
 14121                           ; BSR set to: 0
 14122                           ;SPI.c: 188: };
 14123                           
 14124                           ; BSR set to: 0
 14125                           
 14126                           ;SPI.c: 187: default: return;
 14127  015C80  0012               	return	
 14128  015C82                     l654:
 14129                           
 14130                           ; BSR set to: 0
 14131  015C82  0100               	movlb	0	; () banked
 14132  015C84  EE20 F002          	lfsr	2,2
 14133  015C88  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 14134  015C8A  26D9               	addwf	fsr2l,f,c
 14135  015C8C  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 14136  015C8E  22DA               	addwfc	fsr2h,f,c
 14137  015C90  50DF               	movf	indf2,w,c
 14138                           
 14139                           ; Switch size 1, requested type "space"
 14140                           ; Number of cases is 2, Range of values is 0 to 1
 14141                           ; switch strategies available:
 14142                           ; Name         Instructions Cycles
 14143                           ; simple_byte            7     4 (average)
 14144                           ;	Chosen strategy is simple_byte
 14145  015C92  0A00               	xorlw	0	; case 0
 14146  015C94  B4D8               	btfsc	status,2,c
 14147  015C96  D7F1               	goto	l655
 14148  015C98  0A01               	xorlw	1	; case 1
 14149  015C9A  A4D8               	btfss	status,2,c
 14150  015C9C  0012               	return	
 14151  015C9E  D7EF               	goto	l657
 14152  015CA0                     __end_of_SPI_DisableISR:
 14153                           	opt stack 0
 14154                           tosu	equ	0xFFF
 14155                           tosh	equ	0xFFE
 14156                           tosl	equ	0xFFD
 14157                           pclath	equ	0xFFA
 14158                           tblptru	equ	0xFF8
 14159                           tblptrh	equ	0xFF7
 14160                           tblptrl	equ	0xFF6
 14161                           tablat	equ	0xFF5
 14162                           prodh	equ	0xFF4
 14163                           prodl	equ	0xFF3
 14164                           intcon	equ	0xFF2
 14165                           postinc0	equ	0xFEE
 14166                           wreg	equ	0xFE8
 14167                           indf1	equ	0xFE7
 14168                           postdec1	equ	0xFE5
 14169                           fsr1h	equ	0xFE2
 14170                           fsr1l	equ	0xFE1
 14171                           indf2	equ	0xFDF
 14172                           postinc2	equ	0xFDE
 14173                           postdec2	equ	0xFDD
 14174                           plusw2	equ	0xFDB
 14175                           fsr2h	equ	0xFDA
 14176                           fsr2l	equ	0xFD9
 14177                           status	equ	0xFD8
 14178                           
 14179 ;; *************** function _SPI_DCS *****************
 14180 ;; Defined at:
 14181 ;;		line 219 in file "Library/SPI.c"
 14182 ;; Parameters:    Size  Location     Type
 14183 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 14184 ;;		 -> SPI1(11), SPI2(11), 
 14185 ;; Auto vars:     Size  Location     Type
 14186 ;;		None
 14187 ;; Return value:  Size  Location     Type
 14188 ;;                  1    wreg      void 
 14189 ;; Registers used:
 14190 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14191 ;; Tracked objects:
 14192 ;;		On entry : 0/0
 14193 ;;		On exit  : 0/0
 14194 ;;		Unchanged: 0/0
 14195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14196 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14199 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14200 ;;Total ram usage:        2 bytes
 14201 ;; Hardware stack levels used:    1
 14202 ;; Hardware stack levels required when called:    7
 14203 ;; This function calls:
 14204 ;;		Nothing
 14205 ;; This function is called by:
 14206 ;;		_SPI_Init
 14207 ;; This function uses a non-reentrant model
 14208 ;;
 14209                           
 14210                           	psect	text70
 14211  015B5E                     __ptext70:
 14212                           	opt stack 0
 14213  015B5E                     _SPI_DCS:
 14214                           	opt stack 20
 14215                           
 14216                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 14217                           
 14218                           ; BSR set to: 0
 14219                           ;incstack = 0
 14220  015B5E  0100               	movlb	0	; () banked
 14221  015B60  EE20 F002          	lfsr	2,2
 14222  015B64  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 14223  015B66  26D9               	addwf	fsr2l,f,c
 14224  015B68  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 14225  015B6A  22DA               	addwfc	fsr2h,f,c
 14226  015B6C  50DF               	movf	indf2,w,c
 14227  015B6E  A4D8               	btfss	status,2,c
 14228  015B70  D007               	goto	l673
 14229                           
 14230                           ; BSR set to: 0
 14231                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 14232  015B72  C1AF  FFD9         	movff	_PortC+4,fsr2l
 14233  015B76  C1B0  FFDA         	movff	_PortC+5,fsr2h
 14234  015B7A  0101               	movlb	1	; () banked
 14235  015B7C  84DF               	bsf	indf2,2,c
 14236  015B7E  0012               	return	
 14237  015B80                     l673:
 14238                           
 14239                           ;SPI.c: 223: else
 14240                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 14241                           
 14242                           ; BSR set to: 1
 14243  015B80  C19B  FFD9         	movff	_PortD+4,fsr2l
 14244  015B84  C19C  FFDA         	movff	_PortD+5,fsr2h
 14245  015B88  0101               	movlb	1	; () banked
 14246  015B8A  8EDF               	bsf	indf2,7,c
 14247  015B8C  0012               	return	
 14248  015B8E                     __end_of_SPI_DCS:
 14249                           	opt stack 0
 14250                           tosu	equ	0xFFF
 14251                           tosh	equ	0xFFE
 14252                           tosl	equ	0xFFD
 14253                           pclath	equ	0xFFA
 14254                           tblptru	equ	0xFF8
 14255                           tblptrh	equ	0xFF7
 14256                           tblptrl	equ	0xFF6
 14257                           tablat	equ	0xFF5
 14258                           prodh	equ	0xFF4
 14259                           prodl	equ	0xFF3
 14260                           intcon	equ	0xFF2
 14261                           postinc0	equ	0xFEE
 14262                           wreg	equ	0xFE8
 14263                           indf1	equ	0xFE7
 14264                           postdec1	equ	0xFE5
 14265                           fsr1h	equ	0xFE2
 14266                           fsr1l	equ	0xFE1
 14267                           indf2	equ	0xFDF
 14268                           postinc2	equ	0xFDE
 14269                           postdec2	equ	0xFDD
 14270                           plusw2	equ	0xFDB
 14271                           fsr2h	equ	0xFDA
 14272                           fsr2l	equ	0xFD9
 14273                           status	equ	0xFD8
 14274                           
 14275 ;; *************** function _Get_Sensor_State *****************
 14276 ;; Defined at:
 14277 ;;		line 164 in file "main.c"
 14278 ;; Parameters:    Size  Location     Type
 14279 ;;		None
 14280 ;; Auto vars:     Size  Location     Type
 14281 ;;		None
 14282 ;; Return value:  Size  Location     Type
 14283 ;;                  1    wreg      void 
 14284 ;; Registers used:
 14285 ;;		wreg, status,2, status,0, cstack
 14286 ;; Tracked objects:
 14287 ;;		On entry : 0/0
 14288 ;;		On exit  : 0/0
 14289 ;;		Unchanged: 0/0
 14290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14295 ;;Total ram usage:        0 bytes
 14296 ;; Hardware stack levels used:    1
 14297 ;; Hardware stack levels required when called:    8
 14298 ;; This function calls:
 14299 ;;		_eusartRec
 14300 ;;		_eusartSend
 14301 ;; This function is called by:
 14302 ;;		_main
 14303 ;; This function uses a non-reentrant model
 14304 ;;
 14305                           
 14306                           	psect	text71
 14307  015F02                     __ptext71:
 14308                           	opt stack 0
 14309  015F02                     _Get_Sensor_State:
 14310                           	opt stack 22
 14311                           
 14312                           ;main.c: 165: eusartSend(142);
 14313                           
 14314                           ; BSR set to: 1
 14315                           ;incstack = 0
 14316  015F02  0E8E               	movlw	142
 14317  015F04  EC28  F0B0         	call	_eusartSend
 14318                           
 14319                           ;main.c: 166: eusartSend(7);
 14320  015F08  0E07               	movlw	7
 14321  015F0A  EC28  F0B0         	call	_eusartSend
 14322                           
 14323                           ;main.c: 167: BumpSensor = (eusartRec() & 0b00000011);
 14324  015F0E  EC56  F0B0         	call	_eusartRec	;wreg free
 14325  015F12  0B03               	andlw	3
 14326  015F14  0100               	movlb	0	; () banked
 14327  015F16  6FF1               	movwf	_BumpSensor& (0+255),b
 14328                           
 14329                           ; BSR set to: 0
 14330  015F18  0012               	return		;funcret
 14331  015F1A                     __end_of_Get_Sensor_State:
 14332                           	opt stack 0
 14333                           tosu	equ	0xFFF
 14334                           tosh	equ	0xFFE
 14335                           tosl	equ	0xFFD
 14336                           pclath	equ	0xFFA
 14337                           tblptru	equ	0xFF8
 14338                           tblptrh	equ	0xFF7
 14339                           tblptrl	equ	0xFF6
 14340                           tablat	equ	0xFF5
 14341                           prodh	equ	0xFF4
 14342                           prodl	equ	0xFF3
 14343                           intcon	equ	0xFF2
 14344                           postinc0	equ	0xFEE
 14345                           wreg	equ	0xFE8
 14346                           indf1	equ	0xFE7
 14347                           postdec1	equ	0xFE5
 14348                           fsr1h	equ	0xFE2
 14349                           fsr1l	equ	0xFE1
 14350                           indf2	equ	0xFDF
 14351                           postinc2	equ	0xFDE
 14352                           postdec2	equ	0xFDD
 14353                           plusw2	equ	0xFDB
 14354                           fsr2h	equ	0xFDA
 14355                           fsr2l	equ	0xFD9
 14356                           status	equ	0xFD8
 14357                           
 14358 ;; *************** function _eusartRec *****************
 14359 ;; Defined at:
 14360 ;;		line 152 in file "main.c"
 14361 ;; Parameters:    Size  Location     Type
 14362 ;;		None
 14363 ;; Auto vars:     Size  Location     Type
 14364 ;;		None
 14365 ;; Return value:  Size  Location     Type
 14366 ;;                  1    wreg      unsigned char 
 14367 ;; Registers used:
 14368 ;;		wreg, status,2
 14369 ;; Tracked objects:
 14370 ;;		On entry : 0/0
 14371 ;;		On exit  : 0/0
 14372 ;;		Unchanged: 0/0
 14373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14378 ;;Total ram usage:        0 bytes
 14379 ;; Hardware stack levels used:    1
 14380 ;; Hardware stack levels required when called:    7
 14381 ;; This function calls:
 14382 ;;		Nothing
 14383 ;; This function is called by:
 14384 ;;		_Get_Sensor_State
 14385 ;;		_UpdateDistance
 14386 ;;		_Turn
 14387 ;;		_Get_VirtualWall_State
 14388 ;; This function uses a non-reentrant model
 14389 ;;
 14390                           
 14391                           	psect	text72
 14392  0160AC                     __ptext72:
 14393                           	opt stack 0
 14394  0160AC                     _eusartRec:
 14395                           	opt stack 22
 14396                           
 14397                           ;main.c: 153: while (!PIR1bits.RC1IF) {}
 14398                           
 14399                           ; BSR set to: 0
 14400                           ;incstack = 0
 14401  0160AC  AA9E               	btfss	3998,5,c	;volatile
 14402  0160AE  D7FE               	goto	_eusartRec
 14403                           
 14404                           ;main.c: 154: return RCREG1;
 14405  0160B0  50AF               	movf	4015,w,c	;volatile
 14406  0160B2  0012               	return	
 14407  0160B4                     __end_of_eusartRec:
 14408                           	opt stack 0
 14409                           tosu	equ	0xFFF
 14410                           tosh	equ	0xFFE
 14411                           tosl	equ	0xFFD
 14412                           pclath	equ	0xFFA
 14413                           tblptru	equ	0xFF8
 14414                           tblptrh	equ	0xFF7
 14415                           tblptrl	equ	0xFF6
 14416                           tablat	equ	0xFF5
 14417                           prodh	equ	0xFF4
 14418                           prodl	equ	0xFF3
 14419                           intcon	equ	0xFF2
 14420                           postinc0	equ	0xFEE
 14421                           wreg	equ	0xFE8
 14422                           indf1	equ	0xFE7
 14423                           postdec1	equ	0xFE5
 14424                           fsr1h	equ	0xFE2
 14425                           fsr1l	equ	0xFE1
 14426                           indf2	equ	0xFDF
 14427                           postinc2	equ	0xFDE
 14428                           postdec2	equ	0xFDD
 14429                           plusw2	equ	0xFDB
 14430                           fsr2h	equ	0xFDA
 14431                           fsr2l	equ	0xFD9
 14432                           status	equ	0xFD8
 14433                           
 14434 ;; *************** function _FunctInitButton *****************
 14435 ;; Defined at:
 14436 ;;		line 16 in file "Functions.c"
 14437 ;; Parameters:    Size  Location     Type
 14438 ;;		None
 14439 ;; Auto vars:     Size  Location     Type
 14440 ;;		None
 14441 ;; Return value:  Size  Location     Type
 14442 ;;                  1    wreg      void 
 14443 ;; Registers used:
 14444 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14445 ;; Tracked objects:
 14446 ;;		On entry : 0/0
 14447 ;;		On exit  : 0/0
 14448 ;;		Unchanged: 0/0
 14449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14454 ;;Total ram usage:        0 bytes
 14455 ;; Hardware stack levels used:    1
 14456 ;; Hardware stack levels required when called:   16
 14457 ;; This function calls:
 14458 ;;		_Button_Init
 14459 ;; This function is called by:
 14460 ;;		_main
 14461 ;; This function uses a non-reentrant model
 14462 ;;
 14463                           
 14464                           	psect	text73
 14465  014C76                     __ptext73:
 14466                           	opt stack 0
 14467  014C76                     _FunctInitButton:
 14468                           	opt stack 14
 14469                           
 14470                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 14471                           
 14472                           ;incstack = 0
 14473  014C76  0EDD               	movlw	low _TestButton
 14474  014C78  0100               	movlb	0	; () banked
 14475  014C7A  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14476  014C7C  0E02               	movlw	high _TestButton
 14477  014C7E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14478  014C80  0E00               	movlw	0
 14479  014C82  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14480  014C84  0E02               	movlw	2
 14481  014C86  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14482  014C88  0E32               	movlw	low _MXK_InitTestButton
 14483  014C8A  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14484  014C8C  0E5F               	movlw	high _MXK_InitTestButton
 14485  014C8E  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14486  014C90  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 14487  014C92  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14488  014C94  0EEE               	movlw	low _MXK_TestButton
 14489  014C96  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14490  014C98  0E5F               	movlw	high _MXK_TestButton
 14491  014C9A  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14492  014C9C  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 14493  014C9E  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14494  014CA0  0EF8               	movlw	low _Event_TestButton
 14495  014CA2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14496  014CA4  0E5A               	movlw	high _Event_TestButton
 14497  014CA6  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14498  014CA8  0E01               	movlw	low (_Event_TestButton shr (0+16))
 14499  014CAA  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14500  014CAC  EC1B  F0A0         	call	_Button_Init	;wreg free
 14501                           
 14502                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 14503  014CB0  0ED3               	movlw	low _DIPSwitch
 14504  014CB2  0100               	movlb	0	; () banked
 14505  014CB4  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14506  014CB6  0E02               	movlw	high _DIPSwitch
 14507  014CB8  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14508  014CBA  0E00               	movlw	0
 14509  014CBC  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14510  014CBE  0E02               	movlw	2
 14511  014CC0  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14512  014CC2  0E1A               	movlw	low _MXK_InitDIPSwitch
 14513  014CC4  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14514  014CC6  0E5F               	movlw	high _MXK_InitDIPSwitch
 14515  014CC8  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14516  014CCA  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 14517  014CCC  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14518  014CCE  0E76               	movlw	low _MXK_DIPSwitch
 14519  014CD0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14520  014CD2  0E5F               	movlw	high _MXK_DIPSwitch
 14521  014CD4  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14522  014CD6  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 14523  014CD8  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14524  014CDA  0E18               	movlw	low _Event_DIPSwitch
 14525  014CDC  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14526  014CDE  0E5D               	movlw	high _Event_DIPSwitch
 14527  014CE0  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14528  014CE2  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 14529  014CE4  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14530  014CE6  EC1B  F0A0         	call	_Button_Init	;wreg free
 14531  014CEA  0012               	return		;funcret
 14532  014CEC                     __end_of_FunctInitButton:
 14533                           	opt stack 0
 14534                           tosu	equ	0xFFF
 14535                           tosh	equ	0xFFE
 14536                           tosl	equ	0xFFD
 14537                           pclath	equ	0xFFA
 14538                           tblptru	equ	0xFF8
 14539                           tblptrh	equ	0xFF7
 14540                           tblptrl	equ	0xFF6
 14541                           tablat	equ	0xFF5
 14542                           prodh	equ	0xFF4
 14543                           prodl	equ	0xFF3
 14544                           intcon	equ	0xFF2
 14545                           postinc0	equ	0xFEE
 14546                           wreg	equ	0xFE8
 14547                           indf1	equ	0xFE7
 14548                           postdec1	equ	0xFE5
 14549                           fsr1h	equ	0xFE2
 14550                           fsr1l	equ	0xFE1
 14551                           indf2	equ	0xFDF
 14552                           postinc2	equ	0xFDE
 14553                           postdec2	equ	0xFDD
 14554                           plusw2	equ	0xFDB
 14555                           fsr2h	equ	0xFDA
 14556                           fsr2l	equ	0xFD9
 14557                           status	equ	0xFD8
 14558                           
 14559 ;; *************** function _Button_Init *****************
 14560 ;; Defined at:
 14561 ;;		line 18 in file "Library/Button.c"
 14562 ;; Parameters:    Size  Location     Type
 14563 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 14564 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 14565 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 14566 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 14567 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 14568 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 14569 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 14570 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 14571 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 14572 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 14573 ;; Auto vars:     Size  Location     Type
 14574 ;;		None
 14575 ;; Return value:  Size  Location     Type
 14576 ;;                  1    wreg      void 
 14577 ;; Registers used:
 14578 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14579 ;; Tracked objects:
 14580 ;;		On entry : 0/0
 14581 ;;		On exit  : 0/0
 14582 ;;		Unchanged: 0/0
 14583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14584 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14587 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14588 ;;Total ram usage:       13 bytes
 14589 ;; Hardware stack levels used:    1
 14590 ;; Hardware stack levels required when called:   15
 14591 ;; This function calls:
 14592 ;;		_HMI_InitButtons
 14593 ;;		_MXK_InitDIPSwitch
 14594 ;;		_MXK_InitTestButton
 14595 ;; This function is called by:
 14596 ;;		_HMI_Init
 14597 ;;		_FunctInitButton
 14598 ;; This function uses a non-reentrant model
 14599 ;;
 14600                           
 14601                           	psect	text74
 14602  014036                     __ptext74:
 14603                           	opt stack 0
 14604  014036                     _Button_Init:
 14605                           	opt stack 14
 14606                           
 14607                           ;Button.c: 21: if(pInput==(void*)0)
 14608                           
 14609                           ;incstack = 0
 14610  014036  0100               	movlb	0	; () banked
 14611  014038  519B               	movf	Button_Init@pInput& (0+255),w,b
 14612  01403A  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 14613  01403C  B4D8               	btfsc	status,2,c
 14614  01403E  0012               	return	
 14615                           
 14616                           ; BSR set to: 0
 14617                           ;Button.c: 23: if(pInitIO==(void*)0)
 14618                           
 14619                           ; BSR set to: 0
 14620                           
 14621                           ; BSR set to: 0
 14622                           ;Button.c: 22: return;
 14623  014040  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 14624  014042  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 14625  014044  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 14626  014046  B4D8               	btfsc	status,2,c
 14627  014048  0012               	return	
 14628                           
 14629                           ; BSR set to: 0
 14630                           ;Button.c: 25: if(pGetState==(void*)0)
 14631                           
 14632                           ; BSR set to: 0
 14633                           
 14634                           ; BSR set to: 0
 14635                           ;Button.c: 24: return;
 14636  01404A  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 14637  01404C  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 14638  01404E  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 14639  014050  B4D8               	btfsc	status,2,c
 14640  014052  0012               	return	
 14641                           
 14642                           ; BSR set to: 0
 14643                           ;Button.c: 27: if(pFunction==(void*)0)
 14644                           
 14645                           ; BSR set to: 0
 14646                           
 14647                           ; BSR set to: 0
 14648                           ;Button.c: 26: return;
 14649  014054  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 14650  014056  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 14651  014058  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 14652  01405A  B4D8               	btfsc	status,2,c
 14653  01405C  0012               	return	
 14654                           
 14655                           ; BSR set to: 0
 14656                           ;Button.c: 30: if(pThreshold == 0)
 14657                           
 14658                           ; BSR set to: 0
 14659                           
 14660                           ; BSR set to: 0
 14661                           ;Button.c: 28: return;
 14662  01405E  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 14663  014060  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 14664  014062  A4D8               	btfss	status,2,c
 14665  014064  D004               	goto	l8
 14666                           
 14667                           ; BSR set to: 0
 14668                           ;Button.c: 31: pThreshold = 1;
 14669  014066  0E00               	movlw	0
 14670  014068  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14671  01406A  0E01               	movlw	1
 14672  01406C  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14673  01406E                     l8:
 14674                           
 14675                           ; BSR set to: 0
 14676                           ;Button.c: 34: pInput->mState = 0;
 14677                           
 14678                           ; BSR set to: 0
 14679  01406E  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 14680  014072  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 14681  014076  0E00               	movlw	0
 14682  014078  6EDF               	movwf	indf2,c
 14683                           
 14684                           ; BSR set to: 0
 14685                           ;Button.c: 35: pInput->mCount = 0;
 14686  01407A  EE20 F001          	lfsr	2,1
 14687  01407E  519B               	movf	Button_Init@pInput& (0+255),w,b
 14688  014080  26D9               	addwf	fsr2l,f,c
 14689  014082  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14690  014084  22DA               	addwfc	fsr2h,f,c
 14691  014086  0E00               	movlw	0
 14692  014088  6EDF               	movwf	indf2,c
 14693                           
 14694                           ; BSR set to: 0
 14695                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 14696  01408A  EE20 F002          	lfsr	2,2
 14697  01408E  519B               	movf	Button_Init@pInput& (0+255),w,b
 14698  014090  26D9               	addwf	fsr2l,f,c
 14699  014092  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14700  014094  22DA               	addwfc	fsr2h,f,c
 14701  014096  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 14702  01409A  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 14703                           
 14704                           ; BSR set to: 0
 14705                           ;Button.c: 37: pInput->mFunction = pFunction;
 14706  01409E  EE20 F004          	lfsr	2,4
 14707  0140A2  519B               	movf	Button_Init@pInput& (0+255),w,b
 14708  0140A4  26D9               	addwf	fsr2l,f,c
 14709  0140A6  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14710  0140A8  22DA               	addwfc	fsr2h,f,c
 14711  0140AA  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 14712  0140AE  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 14713  0140B2  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 14714                           
 14715                           ; BSR set to: 0
 14716                           ;Button.c: 38: pInput->mGetState = pGetState;
 14717  0140B6  EE20 F007          	lfsr	2,7
 14718  0140BA  519B               	movf	Button_Init@pInput& (0+255),w,b
 14719  0140BC  26D9               	addwf	fsr2l,f,c
 14720  0140BE  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14721  0140C0  22DA               	addwfc	fsr2h,f,c
 14722  0140C2  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 14723  0140C6  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 14724  0140CA  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 14725                           
 14726                           ; BSR set to: 0
 14727                           ;Button.c: 41: pInitIO();
 14728  0140CE  D801               	call	u11968
 14729  0140D0  0012               	return	
 14730  0140D2                     u11968:
 14731  0140D2  0005               	push	
 14732  0140D4  6EFA               	movwf	pclath,c
 14733  0140D6  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 14734  0140D8  6EFD               	movwf	tosl,c
 14735  0140DA  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 14736  0140DC  6EFE               	movwf	tosh,c
 14737  0140DE  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 14738  0140E0  6EFF               	movwf	tosu,c
 14739  0140E2  50FA               	movf	pclath,w,c
 14740  0140E4  0012               	return		;indir
 14741  0140E6                     __end_of_Button_Init:
 14742                           	opt stack 0
 14743                           tosu	equ	0xFFF
 14744                           tosh	equ	0xFFE
 14745                           tosl	equ	0xFFD
 14746                           pclath	equ	0xFFA
 14747                           tblptru	equ	0xFF8
 14748                           tblptrh	equ	0xFF7
 14749                           tblptrl	equ	0xFF6
 14750                           tablat	equ	0xFF5
 14751                           prodh	equ	0xFF4
 14752                           prodl	equ	0xFF3
 14753                           intcon	equ	0xFF2
 14754                           postinc0	equ	0xFEE
 14755                           wreg	equ	0xFE8
 14756                           indf1	equ	0xFE7
 14757                           postdec1	equ	0xFE5
 14758                           fsr1h	equ	0xFE2
 14759                           fsr1l	equ	0xFE1
 14760                           indf2	equ	0xFDF
 14761                           postinc2	equ	0xFDE
 14762                           postdec2	equ	0xFDD
 14763                           plusw2	equ	0xFDB
 14764                           fsr2h	equ	0xFDA
 14765                           fsr2l	equ	0xFD9
 14766                           status	equ	0xFD8
 14767                           
 14768 ;; *************** function _MXK_InitDIPSwitch *****************
 14769 ;; Defined at:
 14770 ;;		line 20 in file "Library/MXK.c"
 14771 ;; Parameters:    Size  Location     Type
 14772 ;;		None
 14773 ;; Auto vars:     Size  Location     Type
 14774 ;;		None
 14775 ;; Return value:  Size  Location     Type
 14776 ;;                  1    wreg      void 
 14777 ;; Registers used:
 14778 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14779 ;; Tracked objects:
 14780 ;;		On entry : 0/0
 14781 ;;		On exit  : 0/0
 14782 ;;		Unchanged: 0/0
 14783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14788 ;;Total ram usage:        0 bytes
 14789 ;; Hardware stack levels used:    1
 14790 ;; Hardware stack levels required when called:   14
 14791 ;; This function calls:
 14792 ;;		_Port_SetQuadType
 14793 ;; This function is called by:
 14794 ;;		_FunctInitButton
 14795 ;;		_Button_Init
 14796 ;; This function uses a non-reentrant model
 14797 ;;
 14798                           
 14799                           	psect	text75
 14800  015F1A                     __ptext75:
 14801                           	opt stack 0
 14802  015F1A                     _MXK_InitDIPSwitch:
 14803                           	opt stack 14
 14804                           
 14805                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 14806                           
 14807                           ;incstack = 0
 14808  015F1A  0E97               	movlw	low _PortD
 14809  015F1C  0100               	movlb	0	; () banked
 14810  015F1E  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 14811  015F20  0E01               	movlw	high _PortD
 14812  015F22  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 14813  015F24  0E00               	movlw	0
 14814  015F26  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 14815  015F28  0E00               	movlw	0
 14816  015F2A  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 14817  015F2C  EC98  F08F         	call	_Port_SetQuadType	;wreg free
 14818  015F30  0012               	return		;funcret
 14819  015F32                     __end_of_MXK_InitDIPSwitch:
 14820                           	opt stack 0
 14821                           tosu	equ	0xFFF
 14822                           tosh	equ	0xFFE
 14823                           tosl	equ	0xFFD
 14824                           pclath	equ	0xFFA
 14825                           tblptru	equ	0xFF8
 14826                           tblptrh	equ	0xFF7
 14827                           tblptrl	equ	0xFF6
 14828                           tablat	equ	0xFF5
 14829                           prodh	equ	0xFF4
 14830                           prodl	equ	0xFF3
 14831                           intcon	equ	0xFF2
 14832                           postinc0	equ	0xFEE
 14833                           wreg	equ	0xFE8
 14834                           indf1	equ	0xFE7
 14835                           postdec1	equ	0xFE5
 14836                           fsr1h	equ	0xFE2
 14837                           fsr1l	equ	0xFE1
 14838                           indf2	equ	0xFDF
 14839                           postinc2	equ	0xFDE
 14840                           postdec2	equ	0xFDD
 14841                           plusw2	equ	0xFDB
 14842                           fsr2h	equ	0xFDA
 14843                           fsr2l	equ	0xFD9
 14844                           status	equ	0xFD8
 14845                           
 14846 ;; *************** function _HMI_InitButtons *****************
 14847 ;; Defined at:
 14848 ;;		line 21 in file "HMI.c"
 14849 ;; Parameters:    Size  Location     Type
 14850 ;;		None
 14851 ;; Auto vars:     Size  Location     Type
 14852 ;;		None
 14853 ;; Return value:  Size  Location     Type
 14854 ;;                  1    wreg      void 
 14855 ;; Registers used:
 14856 ;;		wreg, status,2
 14857 ;; Tracked objects:
 14858 ;;		On entry : 0/0
 14859 ;;		On exit  : 0/0
 14860 ;;		Unchanged: 0/0
 14861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14866 ;;Total ram usage:        0 bytes
 14867 ;; Hardware stack levels used:    1
 14868 ;; Hardware stack levels required when called:    7
 14869 ;; This function calls:
 14870 ;;		Nothing
 14871 ;; This function is called by:
 14872 ;;		_HMI_Init
 14873 ;;		_Button_Init
 14874 ;; This function uses a non-reentrant model
 14875 ;;
 14876                           
 14877                           	psect	text76
 14878  0160E0                     __ptext76:
 14879                           	opt stack 0
 14880  0160E0                     _HMI_InitButtons:
 14881                           	opt stack 21
 14882                           
 14883                           ;HMI.c: 23: TRISE = 0xFC;
 14884                           
 14885                           ;incstack = 0
 14886  0160E0  0EFC               	movlw	252
 14887  0160E2  6E96               	movwf	3990,c	;volatile
 14888  0160E4  0012               	return		;funcret
 14889  0160E6                     __end_of_HMI_InitButtons:
 14890                           	opt stack 0
 14891                           tosu	equ	0xFFF
 14892                           tosh	equ	0xFFE
 14893                           tosl	equ	0xFFD
 14894                           pclath	equ	0xFFA
 14895                           tblptru	equ	0xFF8
 14896                           tblptrh	equ	0xFF7
 14897                           tblptrl	equ	0xFF6
 14898                           tablat	equ	0xFF5
 14899                           prodh	equ	0xFF4
 14900                           prodl	equ	0xFF3
 14901                           intcon	equ	0xFF2
 14902                           postinc0	equ	0xFEE
 14903                           wreg	equ	0xFE8
 14904                           indf1	equ	0xFE7
 14905                           postdec1	equ	0xFE5
 14906                           fsr1h	equ	0xFE2
 14907                           fsr1l	equ	0xFE1
 14908                           indf2	equ	0xFDF
 14909                           postinc2	equ	0xFDE
 14910                           postdec2	equ	0xFDD
 14911                           plusw2	equ	0xFDB
 14912                           fsr2h	equ	0xFDA
 14913                           fsr2l	equ	0xFD9
 14914                           status	equ	0xFD8
 14915                           
 14916 ;; *************** function _MXK_InitTestButton *****************
 14917 ;; Defined at:
 14918 ;;		line 10 in file "Library/MXK.c"
 14919 ;; Parameters:    Size  Location     Type
 14920 ;;		None
 14921 ;; Auto vars:     Size  Location     Type
 14922 ;;		None
 14923 ;; Return value:  Size  Location     Type
 14924 ;;                  1    wreg      void 
 14925 ;; Registers used:
 14926 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14927 ;; Tracked objects:
 14928 ;;		On entry : 0/0
 14929 ;;		On exit  : 0/0
 14930 ;;		Unchanged: 0/0
 14931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14936 ;;Total ram usage:        0 bytes
 14937 ;; Hardware stack levels used:    1
 14938 ;; Hardware stack levels required when called:   12
 14939 ;; This function calls:
 14940 ;;		_Port_SetPinType
 14941 ;; This function is called by:
 14942 ;;		_FunctInitButton
 14943 ;;		_Button_Init
 14944 ;; This function uses a non-reentrant model
 14945 ;;
 14946                           
 14947                           	psect	text77
 14948  015F32                     __ptext77:
 14949                           	opt stack 0
 14950  015F32                     _MXK_InitTestButton:
 14951                           	opt stack 16
 14952                           
 14953                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 14954                           
 14955                           ;incstack = 0
 14956  015F32  0EA1               	movlw	low _PortB
 14957  015F34  0100               	movlb	0	; () banked
 14958  015F36  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14959  015F38  0E01               	movlw	high _PortB
 14960  015F3A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14961  015F3C  0E04               	movlw	4
 14962  015F3E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14963  015F40  0E00               	movlw	0
 14964  015F42  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14965  015F44  EC4E  F093         	call	_Port_SetPinType	;wreg free
 14966  015F48  0012               	return		;funcret
 14967  015F4A                     __end_of_MXK_InitTestButton:
 14968                           	opt stack 0
 14969                           tosu	equ	0xFFF
 14970                           tosh	equ	0xFFE
 14971                           tosl	equ	0xFFD
 14972                           pclath	equ	0xFFA
 14973                           tblptru	equ	0xFF8
 14974                           tblptrh	equ	0xFF7
 14975                           tblptrl	equ	0xFF6
 14976                           tablat	equ	0xFF5
 14977                           prodh	equ	0xFF4
 14978                           prodl	equ	0xFF3
 14979                           intcon	equ	0xFF2
 14980                           postinc0	equ	0xFEE
 14981                           wreg	equ	0xFE8
 14982                           indf1	equ	0xFE7
 14983                           postdec1	equ	0xFE5
 14984                           fsr1h	equ	0xFE2
 14985                           fsr1l	equ	0xFE1
 14986                           indf2	equ	0xFDF
 14987                           postinc2	equ	0xFDE
 14988                           postdec2	equ	0xFDD
 14989                           plusw2	equ	0xFDB
 14990                           fsr2h	equ	0xFDA
 14991                           fsr2l	equ	0xFD9
 14992                           status	equ	0xFD8
 14993                           
 14994 ;; *************** function _Port_SetPinType *****************
 14995 ;; Defined at:
 14996 ;;		line 189 in file "Library/Port.c"
 14997 ;; Parameters:    Size  Location     Type
 14998 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 14999 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15000 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15001 ;;  pPin            1   40[BANK0 ] enum E6750
 15002 ;;  pType           1   41[BANK0 ] enum E6795
 15003 ;; Auto vars:     Size  Location     Type
 15004 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 15005 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 15006 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 15007 ;;  Output          1   42[BANK0 ] enum E6475
 15008 ;; Return value:  Size  Location     Type
 15009 ;;                  1    wreg      enum E6475
 15010 ;; Registers used:
 15011 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15012 ;; Tracked objects:
 15013 ;;		On entry : 0/0
 15014 ;;		On exit  : 0/0
 15015 ;;		Unchanged: 0/0
 15016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15017 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15018 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15020 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15021 ;;Total ram usage:        7 bytes
 15022 ;; Hardware stack levels used:    1
 15023 ;; Hardware stack levels required when called:   11
 15024 ;; This function calls:
 15025 ;;		_Byte_SetBit
 15026 ;;		_PortProperty_Valid
 15027 ;;		_Word_SetPair
 15028 ;; This function is called by:
 15029 ;;		_Configure_GPIOs
 15030 ;;		_LED_Init
 15031 ;;		_Port_Init
 15032 ;;		_SPI_Init
 15033 ;;		_MXK_InitTestButton
 15034 ;;		_MXK_Init
 15035 ;;		_I2C_Init
 15036 ;;		_Motor_Init
 15037 ;; This function uses a non-reentrant model
 15038 ;;
 15039                           
 15040                           	psect	text78
 15041  01269C                     __ptext78:
 15042                           	opt stack 0
 15043  01269C                     _Port_SetPinType:
 15044                           	opt stack 18
 15045                           
 15046                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 15047                           
 15048                           ;incstack = 0
 15049  01269C  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 15050  0126A0  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 15051  0126A4  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 15052  0126A8  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 15053                           
 15054                           ;Port.c: 192: ePinError Output = ePinErrorState;
 15055  0126AC  0E05               	movlw	5
 15056  0126AE  0100               	movlb	0	; () banked
 15057  0126B0  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15058                           
 15059                           ;Port.c: 193: switch (pType)
 15060  0126B2  D0A7               	goto	l412
 15061  0126B4                     
 15062                           ; BSR set to: 0
 15063                           ;Port.c: 197: {
 15064                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 15065                           
 15066                           ; BSR set to: 0
 15067  0126B4  EE20 F002          	lfsr	2,2
 15068  0126B8  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15069  0126BA  26D9               	addwf	fsr2l,f,c
 15070  0126BC  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15071  0126BE  22DA               	addwfc	fsr2h,f,c
 15072  0126C0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15073  0126C4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15074  0126C8  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15075  0126CC  0E01               	movlw	1
 15076  0126CE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15077  0126D0  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 15078                           
 15079                           ;Port.c: 203: break;
 15080  0126D4  D0A4               	goto	l414
 15081  0126D6                     
 15082                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 15083  0126D6  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15084  0126DA  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15085  0126DE  0E01               	movlw	1
 15086  0126E0  0100               	movlb	0	; () banked
 15087  0126E2  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15088  0126E4  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15089  0126E8  ECF1  F0A7         	call	_PortProperty_Valid	;wreg free
 15090  0126EC  0100               	movlb	0	; () banked
 15091  0126EE  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15092  0126F0  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 15093  0126F2  A4D8               	btfss	status,2,c
 15094  0126F4  0012               	return	
 15095                           
 15096                           ; BSR set to: 0
 15097                           ;Port.c: 208: {
 15098                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 15099  0126F6  EE20 F002          	lfsr	2,2
 15100  0126FA  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15101  0126FC  26D9               	addwf	fsr2l,f,c
 15102  0126FE  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15103  012700  22DA               	addwfc	fsr2h,f,c
 15104  012702  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15105  012706  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15106  01270A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15107  01270E  0E00               	movlw	0
 15108  012710  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15109  012712  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 15110                           
 15111                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 15112  012716  0100               	movlb	0	; () banked
 15113  012718  EE20 F004          	lfsr	2,4
 15114  01271C  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15115  01271E  26D9               	addwf	fsr2l,f,c
 15116  012720  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15117  012722  22DA               	addwfc	fsr2h,f,c
 15118  012724  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15119  012728  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15120  01272C  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15121  012730  0E00               	movlw	0
 15122  012732  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15123  012734  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 15124                           
 15125                           ;Port.c: 214: break;
 15126  012738  D072               	goto	l414
 15127  01273A                     
 15128                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 15129                           
 15130                           ;Port.c: 218: case eTypeOutputOpenSource:
 15131  01273A  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15132  01273E  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15133  012742  0E02               	movlw	2
 15134  012744  0100               	movlb	0	; () banked
 15135  012746  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15136  012748  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15137  01274C  ECF1  F0A7         	call	_PortProperty_Valid	;wreg free
 15138  012750  0100               	movlb	0	; () banked
 15139  012752  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15140  012754  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 15141  012756  A4D8               	btfss	status,2,c
 15142  012758  0012               	return	
 15143                           
 15144                           ; BSR set to: 0
 15145                           ;Port.c: 220: {
 15146                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 15147  01275A  EE20 F002          	lfsr	2,2
 15148  01275E  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15149  012760  26D9               	addwf	fsr2l,f,c
 15150  012762  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15151  012764  22DA               	addwfc	fsr2h,f,c
 15152  012766  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15153  01276A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15154  01276E  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15155  012772  0E01               	movlw	1
 15156  012774  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15157  012776  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 15158                           
 15159                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 15160  01277A  0100               	movlb	0	; () banked
 15161  01277C  EE20 F004          	lfsr	2,4
 15162  012780  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15163  012782  26D9               	addwf	fsr2l,f,c
 15164  012784  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15165  012786  22DA               	addwfc	fsr2h,f,c
 15166  012788  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15167  01278C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15168  012790  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15169  012794  0E01               	movlw	1
 15170  012796  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15171  012798  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 15172                           
 15173                           ;Port.c: 226: break;
 15174  01279C  D040               	goto	l414
 15175  01279E                     
 15176                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 15177                           
 15178                           ;Port.c: 230: case eTypeOutputPushPull:
 15179  01279E  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15180  0127A2  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15181  0127A6  0E00               	movlw	0
 15182  0127A8  0100               	movlb	0	; () banked
 15183  0127AA  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15184  0127AC  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15185  0127B0  ECF1  F0A7         	call	_PortProperty_Valid	;wreg free
 15186  0127B4  0100               	movlb	0	; () banked
 15187  0127B6  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15188  0127B8  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 15189  0127BA  A4D8               	btfss	status,2,c
 15190  0127BC  0012               	return	
 15191                           
 15192                           ; BSR set to: 0
 15193                           ;Port.c: 232: {
 15194                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 15195  0127BE  EE20 F002          	lfsr	2,2
 15196  0127C2  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15197  0127C4  26D9               	addwf	fsr2l,f,c
 15198  0127C6  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15199  0127C8  22DA               	addwfc	fsr2h,f,c
 15200  0127CA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15201  0127CE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15202  0127D2  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15203  0127D6  0E00               	movlw	0
 15204  0127D8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15205  0127DA  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 15206                           
 15207                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 15208  0127DE  0100               	movlb	0	; () banked
 15209  0127E0  EE20 F004          	lfsr	2,4
 15210  0127E4  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15211  0127E6  26D9               	addwf	fsr2l,f,c
 15212  0127E8  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15213  0127EA  22DA               	addwfc	fsr2h,f,c
 15214  0127EC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15215  0127F0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15216  0127F4  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15217  0127F8  0E00               	movlw	0
 15218  0127FA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15219  0127FC  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 15220                           
 15221                           ;Port.c: 239: }
 15222                           
 15223                           ;Port.c: 238: break;
 15224  012800  D00E               	goto	l414
 15225  012802                     l412:
 15226  012802  0100               	movlb	0	; () banked
 15227  012804  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 15228                           
 15229                           ; Switch size 1, requested type "space"
 15230                           ; Number of cases is 4, Range of values is 0 to 3
 15231                           ; switch strategies available:
 15232                           ; Name         Instructions Cycles
 15233                           ; simple_byte           13     7 (average)
 15234                           ;	Chosen strategy is simple_byte
 15235  012806  0A00               	xorlw	0	; case 0
 15236  012808  B4D8               	btfsc	status,2,c
 15237  01280A  D754               	goto	l413
 15238  01280C  0A01               	xorlw	1	; case 1
 15239  01280E  B4D8               	btfsc	status,2,c
 15240  012810  D762               	goto	l415
 15241  012812  0A03               	xorlw	3	; case 2
 15242  012814  B4D8               	btfsc	status,2,c
 15243  012816  D791               	goto	l417
 15244  012818  0A01               	xorlw	1	; case 3
 15245  01281A  B4D8               	btfsc	status,2,c
 15246  01281C  D7C0               	goto	l421
 15247  01281E                     l414:
 15248                           
 15249                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 15250                           
 15251                           ; BSR set to: 0
 15252  01281E  0E08               	movlw	8
 15253  012820  0100               	movlb	0	; () banked
 15254  012822  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 15255  012824  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15256  012826  0E00               	movlw	0
 15257  012828  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 15258  01282A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15259  01282C  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 15260  012830  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 15261  012834  ECD9  F0AC         	call	_Word_SetPair	;wreg free
 15262  012838  0012               	return	
 15263  01283A                     __end_of_Port_SetPinType:
 15264                           	opt stack 0
 15265                           tosu	equ	0xFFF
 15266                           tosh	equ	0xFFE
 15267                           tosl	equ	0xFFD
 15268                           pclath	equ	0xFFA
 15269                           tblptru	equ	0xFF8
 15270                           tblptrh	equ	0xFF7
 15271                           tblptrl	equ	0xFF6
 15272                           tablat	equ	0xFF5
 15273                           prodh	equ	0xFF4
 15274                           prodl	equ	0xFF3
 15275                           intcon	equ	0xFF2
 15276                           postinc0	equ	0xFEE
 15277                           wreg	equ	0xFE8
 15278                           indf1	equ	0xFE7
 15279                           postdec1	equ	0xFE5
 15280                           fsr1h	equ	0xFE2
 15281                           fsr1l	equ	0xFE1
 15282                           indf2	equ	0xFDF
 15283                           postinc2	equ	0xFDE
 15284                           postdec2	equ	0xFDD
 15285                           plusw2	equ	0xFDB
 15286                           fsr2h	equ	0xFDA
 15287                           fsr2l	equ	0xFD9
 15288                           status	equ	0xFD8
 15289                           
 15290 ;; *************** function _Byte_SetBit *****************
 15291 ;; Defined at:
 15292 ;;		line 32 in file "Library/Types.c"
 15293 ;; Parameters:    Size  Location     Type
 15294 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15295 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 15296 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 15297 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15298 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15299 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15300 ;;		 -> NULL(0), 
 15301 ;;  pBit            1    2[BANK0 ] unsigned char 
 15302 ;;  pValue          1    3[BANK0 ] unsigned char 
 15303 ;; Auto vars:     Size  Location     Type
 15304 ;;		None
 15305 ;; Return value:  Size  Location     Type
 15306 ;;                  1    wreg      void 
 15307 ;; Registers used:
 15308 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15309 ;; Tracked objects:
 15310 ;;		On entry : 0/0
 15311 ;;		On exit  : 0/0
 15312 ;;		Unchanged: 0/0
 15313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15314 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15316 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15317 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15318 ;;Total ram usage:        7 bytes
 15319 ;; Hardware stack levels used:    1
 15320 ;; Hardware stack levels required when called:    7
 15321 ;; This function calls:
 15322 ;;		Nothing
 15323 ;; This function is called by:
 15324 ;;		_Port_SetPinType
 15325 ;;		_Port_SetPin
 15326 ;;		_SPI_Init
 15327 ;;		_SPI_MinSpeed
 15328 ;;		_SPI_MaxSpeed
 15329 ;;		_Word_SetBit
 15330 ;;		_I2C_Init
 15331 ;; This function uses a non-reentrant model
 15332 ;;
 15333                           
 15334                           	psect	text79
 15335  015368                     __ptext79:
 15336                           	opt stack 0
 15337  015368                     _Byte_SetBit:
 15338                           	opt stack 21
 15339                           
 15340                           ;Types.c: 34: pValue &= 1;
 15341                           
 15342                           ;incstack = 0
 15343  015368  0E01               	movlw	1
 15344  01536A  0100               	movlb	0	; () banked
 15345  01536C  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 15346                           
 15347                           ; BSR set to: 0
 15348                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 15349  01536E  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 15350  015372  0E01               	movlw	1
 15351  015374  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 15352  015376  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 15353  015378  D002               	goto	u9544
 15354  01537A                     u9545:
 15355  01537A  90D8               	bcf	status,0,c
 15356  01537C  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 15357  01537E                     u9544:
 15358  01537E  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 15359  015380  D7FC               	goto	u9545
 15360  015382  0100               	movlb	0	; () banked
 15361  015384  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 15362  015386  0AFF               	xorlw	255
 15363  015388  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 15364  01538A  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 15365  01538E  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 15366  015392  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 15367  015394  16DF               	andwf	indf2,f,c
 15368                           
 15369                           ; BSR set to: 0
 15370                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 15371  015396  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 15372  01539A  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 15373  01539E  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 15374  0153A0  D002               	goto	u9554
 15375  0153A2                     u9555:
 15376  0153A2  90D8               	bcf	status,0,c
 15377  0153A4  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 15378  0153A6                     u9554:
 15379  0153A6  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 15380  0153A8  D7FC               	goto	u9555
 15381  0153AA  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 15382  0153AE  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 15383  0153B2  0100               	movlb	0	; () banked
 15384  0153B4  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 15385  0153B6  12DF               	iorwf	indf2,f,c
 15386                           
 15387                           ; BSR set to: 0
 15388  0153B8  0012               	return		;funcret
 15389  0153BA                     __end_of_Byte_SetBit:
 15390                           	opt stack 0
 15391                           tosu	equ	0xFFF
 15392                           tosh	equ	0xFFE
 15393                           tosl	equ	0xFFD
 15394                           pclath	equ	0xFFA
 15395                           tblptru	equ	0xFF8
 15396                           tblptrh	equ	0xFF7
 15397                           tblptrl	equ	0xFF6
 15398                           tablat	equ	0xFF5
 15399                           prodh	equ	0xFF4
 15400                           prodl	equ	0xFF3
 15401                           intcon	equ	0xFF2
 15402                           postinc0	equ	0xFEE
 15403                           wreg	equ	0xFE8
 15404                           indf1	equ	0xFE7
 15405                           postdec1	equ	0xFE5
 15406                           fsr1h	equ	0xFE2
 15407                           fsr1l	equ	0xFE1
 15408                           indf2	equ	0xFDF
 15409                           postinc2	equ	0xFDE
 15410                           postdec2	equ	0xFDD
 15411                           plusw2	equ	0xFDB
 15412                           fsr2h	equ	0xFDA
 15413                           fsr2l	equ	0xFD9
 15414                           status	equ	0xFD8
 15415                           
 15416 ;; *************** function _Port_SetQuadType *****************
 15417 ;; Defined at:
 15418 ;;		line 399 in file "Library/Port.c"
 15419 ;; Parameters:    Size  Location     Type
 15420 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 15421 ;;		 -> PortB(10), PortD(10), 
 15422 ;;  pQuad           1   56[BANK0 ] enum E6776
 15423 ;;  pType           1   57[BANK0 ] enum E6795
 15424 ;; Auto vars:     Size  Location     Type
 15425 ;;  Output          1   58[BANK0 ] enum E6475
 15426 ;; Return value:  Size  Location     Type
 15427 ;;                  1    wreg      enum E6475
 15428 ;; Registers used:
 15429 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15430 ;; Tracked objects:
 15431 ;;		On entry : 0/0
 15432 ;;		On exit  : 0/0
 15433 ;;		Unchanged: 0/0
 15434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15435 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15438 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15439 ;;Total ram usage:        5 bytes
 15440 ;; Hardware stack levels used:    1
 15441 ;; Hardware stack levels required when called:   13
 15442 ;; This function calls:
 15443 ;;		_Byte_SetQuad
 15444 ;;		_Port_CheckQuadType
 15445 ;;		_Word_SetPair
 15446 ;; This function is called by:
 15447 ;;		_MXK_InitDIPSwitch
 15448 ;;		_MXK_Init
 15449 ;; This function uses a non-reentrant model
 15450 ;;
 15451                           
 15452                           	psect	text80
 15453  011F30                     __ptext80:
 15454                           	opt stack 0
 15455  011F30                     _Port_SetQuadType:
 15456                           	opt stack 16
 15457                           
 15458                           ;Port.c: 401: ePinError Output = ePinErrorState;
 15459                           
 15460                           ; BSR set to: 0
 15461                           ;incstack = 0
 15462  011F30  0E05               	movlw	5
 15463  011F32  0100               	movlb	0	; () banked
 15464  011F34  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15465                           
 15466                           ;Port.c: 403: switch (pType)
 15467  011F36  D0B8               	goto	l476
 15468  011F38                     
 15469                           ; BSR set to: 0
 15470                           ;Port.c: 407: {
 15471                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 15472                           
 15473                           ; BSR set to: 0
 15474  011F38  EE20 F002          	lfsr	2,2
 15475  011F3C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15476  011F3E  26D9               	addwf	fsr2l,f,c
 15477  011F40  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15478  011F42  22DA               	addwfc	fsr2h,f,c
 15479  011F44  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15480  011F48  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15481  011F4C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15482  011F50  0E0F               	movlw	15
 15483  011F52  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15484  011F54  ECD2  F0AE         	call	_Byte_SetQuad	;wreg free
 15485                           
 15486                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15487  011F58  0100               	movlb	0	; () banked
 15488  011F5A  EE20 F004          	lfsr	2,4
 15489  011F5E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15490  011F60  26D9               	addwf	fsr2l,f,c
 15491  011F62  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15492  011F64  22DA               	addwfc	fsr2h,f,c
 15493  011F66  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15494  011F6A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15495  011F6E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15496  011F72  0E00               	movlw	0
 15497  011F74  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15498  011F76  ECD2  F0AE         	call	_Byte_SetQuad	;wreg free
 15499                           
 15500                           ;Port.c: 413: }
 15501                           ;Port.c: 415: break;
 15502  011F7A  D0A4               	goto	l478
 15503  011F7C                     
 15504                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15505  011F7C  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15506  011F80  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15507  011F84  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15508  011F88  0E03               	movlw	3
 15509  011F8A  0100               	movlb	0	; () banked
 15510  011F8C  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15511  011F8E  EC05  F0AA         	call	_Port_CheckQuadType	;wreg free
 15512  011F92  0100               	movlb	0	; () banked
 15513  011F94  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15514  011F96  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 15515  011F98  A4D8               	btfss	status,2,c
 15516  011F9A  0012               	return	
 15517                           
 15518                           ; BSR set to: 0
 15519                           ;Port.c: 418: {
 15520                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 15521  011F9C  EE20 F002          	lfsr	2,2
 15522  011FA0  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15523  011FA2  26D9               	addwf	fsr2l,f,c
 15524  011FA4  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15525  011FA6  22DA               	addwfc	fsr2h,f,c
 15526  011FA8  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15527  011FAC  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15528  011FB0  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15529  011FB4  0E00               	movlw	0
 15530  011FB6  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15531  011FB8  ECD2  F0AE         	call	_Byte_SetQuad	;wreg free
 15532                           
 15533                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15534  011FBC  0100               	movlb	0	; () banked
 15535  011FBE  EE20 F004          	lfsr	2,4
 15536  011FC2  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15537  011FC4  26D9               	addwf	fsr2l,f,c
 15538  011FC6  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15539  011FC8  22DA               	addwfc	fsr2h,f,c
 15540  011FCA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15541  011FCE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15542  011FD2  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15543  011FD6  0E00               	movlw	0
 15544  011FD8  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15545  011FDA  ECD2  F0AE         	call	_Byte_SetQuad	;wreg free
 15546                           
 15547                           ;Port.c: 424: }
 15548  011FDE  D072               	goto	l478
 15549  011FE0                     
 15550                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15551  011FE0  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15552  011FE4  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15553  011FE8  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15554  011FEC  0E03               	movlw	3
 15555  011FEE  0100               	movlb	0	; () banked
 15556  011FF0  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15557  011FF2  EC05  F0AA         	call	_Port_CheckQuadType	;wreg free
 15558  011FF6  0100               	movlb	0	; () banked
 15559  011FF8  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15560  011FFA  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 15561  011FFC  A4D8               	btfss	status,2,c
 15562  011FFE  0012               	return	
 15563                           
 15564                           ; BSR set to: 0
 15565                           ;Port.c: 429: {
 15566                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 15567  012000  EE20 F002          	lfsr	2,2
 15568  012004  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15569  012006  26D9               	addwf	fsr2l,f,c
 15570  012008  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15571  01200A  22DA               	addwfc	fsr2h,f,c
 15572  01200C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15573  012010  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15574  012014  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15575  012018  0E0F               	movlw	15
 15576  01201A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15577  01201C  ECD2  F0AE         	call	_Byte_SetQuad	;wreg free
 15578                           
 15579                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 15580  012020  0100               	movlb	0	; () banked
 15581  012022  EE20 F004          	lfsr	2,4
 15582  012026  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15583  012028  26D9               	addwf	fsr2l,f,c
 15584  01202A  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15585  01202C  22DA               	addwfc	fsr2h,f,c
 15586  01202E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15587  012032  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15588  012036  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15589  01203A  0E0F               	movlw	15
 15590  01203C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15591  01203E  ECD2  F0AE         	call	_Byte_SetQuad	;wreg free
 15592                           
 15593                           ;Port.c: 435: }
 15594  012042  D040               	goto	l478
 15595  012044                     
 15596                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15597  012044  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15598  012048  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15599  01204C  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15600  012050  0E03               	movlw	3
 15601  012052  0100               	movlb	0	; () banked
 15602  012054  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15603  012056  EC05  F0AA         	call	_Port_CheckQuadType	;wreg free
 15604  01205A  0100               	movlb	0	; () banked
 15605  01205C  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15606  01205E  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 15607  012060  A4D8               	btfss	status,2,c
 15608  012062  0012               	return	
 15609                           
 15610                           ; BSR set to: 0
 15611                           ;Port.c: 440: {
 15612                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 15613  012064  EE20 F002          	lfsr	2,2
 15614  012068  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15615  01206A  26D9               	addwf	fsr2l,f,c
 15616  01206C  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15617  01206E  22DA               	addwfc	fsr2h,f,c
 15618  012070  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15619  012074  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15620  012078  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15621  01207C  0E00               	movlw	0
 15622  01207E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15623  012080  ECD2  F0AE         	call	_Byte_SetQuad	;wreg free
 15624                           
 15625                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15626  012084  0100               	movlb	0	; () banked
 15627  012086  EE20 F004          	lfsr	2,4
 15628  01208A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15629  01208C  26D9               	addwf	fsr2l,f,c
 15630  01208E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15631  012090  22DA               	addwfc	fsr2h,f,c
 15632  012092  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15633  012096  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15634  01209A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15635  01209E  0E00               	movlw	0
 15636  0120A0  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15637  0120A2  ECD2  F0AE         	call	_Byte_SetQuad	;wreg free
 15638                           
 15639                           ;Port.c: 446: }
 15640  0120A6  D00E               	goto	l478
 15641  0120A8                     l476:
 15642  0120A8  0100               	movlb	0	; () banked
 15643  0120AA  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 15644                           
 15645                           ; Switch size 1, requested type "space"
 15646                           ; Number of cases is 4, Range of values is 0 to 3
 15647                           ; switch strategies available:
 15648                           ; Name         Instructions Cycles
 15649                           ; simple_byte           13     7 (average)
 15650                           ;	Chosen strategy is simple_byte
 15651  0120AC  0A00               	xorlw	0	; case 0
 15652  0120AE  B4D8               	btfsc	status,2,c
 15653  0120B0  D743               	goto	l477
 15654  0120B2  0A01               	xorlw	1	; case 1
 15655  0120B4  B4D8               	btfsc	status,2,c
 15656  0120B6  D762               	goto	l479
 15657  0120B8  0A03               	xorlw	3	; case 2
 15658  0120BA  B4D8               	btfsc	status,2,c
 15659  0120BC  D791               	goto	l483
 15660  0120BE  0A01               	xorlw	1	; case 3
 15661  0120C0  B4D8               	btfsc	status,2,c
 15662  0120C2  D7C0               	goto	l486
 15663  0120C4                     l478:
 15664                           
 15665                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 15666                           
 15667                           ; BSR set to: 0
 15668  0120C4  0E08               	movlw	8
 15669  0120C6  0100               	movlb	0	; () banked
 15670  0120C8  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15671  0120CA  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15672  0120CC  0E00               	movlw	0
 15673  0120CE  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15674  0120D0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15675  0120D2  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15676  0120D4  0D04               	mullw	4
 15677  0120D6  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 15678  0120DA  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15679  0120DE  ECD9  F0AC         	call	_Word_SetPair	;wreg free
 15680                           
 15681                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 15682  0120E2  0E08               	movlw	8
 15683  0120E4  0100               	movlb	0	; () banked
 15684  0120E6  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15685  0120E8  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15686  0120EA  0E00               	movlw	0
 15687  0120EC  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15688  0120EE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15689  0120F0  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15690  0120F2  0D04               	mullw	4
 15691  0120F4  28F3               	incf	prodl,w,c
 15692  0120F6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 15693  0120F8  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15694  0120FC  ECD9  F0AC         	call	_Word_SetPair	;wreg free
 15695                           
 15696                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 15697  012100  0E08               	movlw	8
 15698  012102  0100               	movlb	0	; () banked
 15699  012104  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15700  012106  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15701  012108  0E00               	movlw	0
 15702  01210A  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15703  01210C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15704  01210E  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15705  012110  0D04               	mullw	4
 15706  012112  50F3               	movf	prodl,w,c
 15707  012114  0F02               	addlw	2
 15708  012116  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 15709  012118  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15710  01211C  ECD9  F0AC         	call	_Word_SetPair	;wreg free
 15711                           
 15712                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 15713  012120  0E08               	movlw	8
 15714  012122  0100               	movlb	0	; () banked
 15715  012124  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15716  012126  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15717  012128  0E00               	movlw	0
 15718  01212A  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15719  01212C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15720  01212E  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15721  012130  0D04               	mullw	4
 15722  012132  50F3               	movf	prodl,w,c
 15723  012134  0F03               	addlw	3
 15724  012136  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 15725  012138  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15726  01213C  ECD9  F0AC         	call	_Word_SetPair	;wreg free
 15727  012140  0012               	return	
 15728  012142                     __end_of_Port_SetQuadType:
 15729                           	opt stack 0
 15730                           tosu	equ	0xFFF
 15731                           tosh	equ	0xFFE
 15732                           tosl	equ	0xFFD
 15733                           pclath	equ	0xFFA
 15734                           tblptru	equ	0xFF8
 15735                           tblptrh	equ	0xFF7
 15736                           tblptrl	equ	0xFF6
 15737                           tablat	equ	0xFF5
 15738                           prodh	equ	0xFF4
 15739                           prodl	equ	0xFF3
 15740                           intcon	equ	0xFF2
 15741                           postinc0	equ	0xFEE
 15742                           wreg	equ	0xFE8
 15743                           indf1	equ	0xFE7
 15744                           postdec1	equ	0xFE5
 15745                           fsr1h	equ	0xFE2
 15746                           fsr1l	equ	0xFE1
 15747                           indf2	equ	0xFDF
 15748                           postinc2	equ	0xFDE
 15749                           postdec2	equ	0xFDD
 15750                           plusw2	equ	0xFDB
 15751                           fsr2h	equ	0xFDA
 15752                           fsr2l	equ	0xFD9
 15753                           status	equ	0xFD8
 15754                           
 15755 ;; *************** function _Word_SetPair *****************
 15756 ;; Defined at:
 15757 ;;		line 149 in file "Library/Types.c"
 15758 ;; Parameters:    Size  Location     Type
 15759 ;;  pInput          2   15[BANK0 ] PTR struct Word
 15760 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15761 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15762 ;;  pPair           1   17[BANK0 ] unsigned char 
 15763 ;;  pValue          1   18[BANK0 ] unsigned char 
 15764 ;; Auto vars:     Size  Location     Type
 15765 ;;		None
 15766 ;; Return value:  Size  Location     Type
 15767 ;;                  1    wreg      void 
 15768 ;; Registers used:
 15769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15770 ;; Tracked objects:
 15771 ;;		On entry : 0/0
 15772 ;;		On exit  : 0/0
 15773 ;;		Unchanged: 0/0
 15774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15775 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15778 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15779 ;;Total ram usage:        4 bytes
 15780 ;; Hardware stack levels used:    1
 15781 ;; Hardware stack levels required when called:    9
 15782 ;; This function calls:
 15783 ;;		_Byte_SetPair
 15784 ;; This function is called by:
 15785 ;;		_Port_SetPinType
 15786 ;;		_Port_SetQuadType
 15787 ;;		_Port_SetType
 15788 ;;		_Port_SetPairType
 15789 ;;		_PortProperty_Init
 15790 ;; This function uses a non-reentrant model
 15791 ;;
 15792                           
 15793                           	psect	text81
 15794  0159B2                     __ptext81:
 15795                           	opt stack 0
 15796  0159B2                     _Word_SetPair:
 15797                           	opt stack 19
 15798                           
 15799                           ;Types.c: 151: if (pPair >= 4)
 15800                           
 15801                           ;incstack = 0
 15802  0159B2  0E03               	movlw	3
 15803  0159B4  0100               	movlb	0	; () banked
 15804  0159B6  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 15805  0159B8  D00E               	goto	l776
 15806                           
 15807                           ; BSR set to: 0
 15808                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 15809  0159BA  0E01               	movlw	1
 15810  0159BC  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 15811  0159BE  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 15812  0159C0  0E00               	movlw	0
 15813  0159C2  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 15814  0159C4  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 15815  0159C6  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 15816  0159C8  0FFC               	addlw	252
 15817  0159CA  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 15818  0159CC  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 15819  0159D0  ECC2  F0AE         	call	_Byte_SetPair	;wreg free
 15820  0159D4  0012               	return	
 15821  0159D6                     l776:
 15822                           
 15823                           ;Types.c: 153: else
 15824                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 15825  0159D6  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 15826  0159DA  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 15827  0159DE  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 15828  0159E2  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 15829  0159E6  ECC2  F0AE         	call	_Byte_SetPair	;wreg free
 15830  0159EA  0012               	return	
 15831  0159EC                     __end_of_Word_SetPair:
 15832                           	opt stack 0
 15833                           tosu	equ	0xFFF
 15834                           tosh	equ	0xFFE
 15835                           tosl	equ	0xFFD
 15836                           pclath	equ	0xFFA
 15837                           tblptru	equ	0xFF8
 15838                           tblptrh	equ	0xFF7
 15839                           tblptrl	equ	0xFF6
 15840                           tablat	equ	0xFF5
 15841                           prodh	equ	0xFF4
 15842                           prodl	equ	0xFF3
 15843                           intcon	equ	0xFF2
 15844                           postinc0	equ	0xFEE
 15845                           wreg	equ	0xFE8
 15846                           indf1	equ	0xFE7
 15847                           postdec1	equ	0xFE5
 15848                           fsr1h	equ	0xFE2
 15849                           fsr1l	equ	0xFE1
 15850                           indf2	equ	0xFDF
 15851                           postinc2	equ	0xFDE
 15852                           postdec2	equ	0xFDD
 15853                           plusw2	equ	0xFDB
 15854                           fsr2h	equ	0xFDA
 15855                           fsr2l	equ	0xFD9
 15856                           status	equ	0xFD8
 15857                           
 15858 ;; *************** function _Byte_SetPair *****************
 15859 ;; Defined at:
 15860 ;;		line 83 in file "Library/Types.c"
 15861 ;; Parameters:    Size  Location     Type
 15862 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 15863 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 15864 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 15865 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 15866 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 15867 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 15868 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 15869 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 15870 ;;		 -> NULL(0), 
 15871 ;;  pPair           1   13[BANK0 ] unsigned char 
 15872 ;;  pValue          1   14[BANK0 ] unsigned char 
 15873 ;; Auto vars:     Size  Location     Type
 15874 ;;		None
 15875 ;; Return value:  Size  Location     Type
 15876 ;;                  1    wreg      void 
 15877 ;; Registers used:
 15878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15879 ;; Tracked objects:
 15880 ;;		On entry : 0/0
 15881 ;;		On exit  : 0/0
 15882 ;;		Unchanged: 0/0
 15883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15884 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15887 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15888 ;;Total ram usage:        4 bytes
 15889 ;; Hardware stack levels used:    1
 15890 ;; Hardware stack levels required when called:    8
 15891 ;; This function calls:
 15892 ;;		_Byte_SetZone
 15893 ;; This function is called by:
 15894 ;;		_Word_SetPair
 15895 ;;		_Port_SetPairType
 15896 ;;		_Port_SetPair
 15897 ;; This function uses a non-reentrant model
 15898 ;;
 15899                           
 15900                           	psect	text82
 15901  015D84                     __ptext82:
 15902                           	opt stack 0
 15903  015D84                     _Byte_SetPair:
 15904                           	opt stack 19
 15905                           
 15906                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 15907                           
 15908                           ;incstack = 0
 15909  015D84  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 15910  015D88  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 15911  015D8C  0E04               	movlw	4
 15912  015D8E  0100               	movlb	0	; () banked
 15913  015D90  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 15914  015D92  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 15915  015D96  0E02               	movlw	2
 15916  015D98  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 15917  015D9A  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 15918  015D9E  EC34  F0A3         	call	_Byte_SetZone	;wreg free
 15919  015DA2  0012               	return		;funcret
 15920  015DA4                     __end_of_Byte_SetPair:
 15921                           	opt stack 0
 15922                           tosu	equ	0xFFF
 15923                           tosh	equ	0xFFE
 15924                           tosl	equ	0xFFD
 15925                           pclath	equ	0xFFA
 15926                           tblptru	equ	0xFF8
 15927                           tblptrh	equ	0xFF7
 15928                           tblptrl	equ	0xFF6
 15929                           tablat	equ	0xFF5
 15930                           prodh	equ	0xFF4
 15931                           prodl	equ	0xFF3
 15932                           intcon	equ	0xFF2
 15933                           postinc0	equ	0xFEE
 15934                           wreg	equ	0xFE8
 15935                           indf1	equ	0xFE7
 15936                           postdec1	equ	0xFE5
 15937                           fsr1h	equ	0xFE2
 15938                           fsr1l	equ	0xFE1
 15939                           indf2	equ	0xFDF
 15940                           postinc2	equ	0xFDE
 15941                           postdec2	equ	0xFDD
 15942                           plusw2	equ	0xFDB
 15943                           fsr2h	equ	0xFDA
 15944                           fsr2l	equ	0xFD9
 15945                           status	equ	0xFD8
 15946                           
 15947 ;; *************** function _Port_CheckQuadType *****************
 15948 ;; Defined at:
 15949 ;;		line 126 in file "Library/Port.c"
 15950 ;; Parameters:    Size  Location     Type
 15951 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 15952 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15953 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15954 ;;  pQuad           1   49[BANK0 ] enum E6776
 15955 ;;  pDrive          1   50[BANK0 ] enum E6469
 15956 ;; Auto vars:     Size  Location     Type
 15957 ;;  Output          1   53[BANK0 ] enum E6475
 15958 ;;  Pair2           1   52[BANK0 ] enum E6760
 15959 ;;  Pair1           1   51[BANK0 ] enum E6760
 15960 ;; Return value:  Size  Location     Type
 15961 ;;                  1    wreg      enum E6475
 15962 ;; Registers used:
 15963 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15964 ;; Tracked objects:
 15965 ;;		On entry : 0/0
 15966 ;;		On exit  : 0/0
 15967 ;;		Unchanged: 0/0
 15968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15969 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15970 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15972 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15973 ;;Total ram usage:        7 bytes
 15974 ;; Hardware stack levels used:    1
 15975 ;; Hardware stack levels required when called:   12
 15976 ;; This function calls:
 15977 ;;		_Port_CheckPairType
 15978 ;; This function is called by:
 15979 ;;		_Port_CheckPortType
 15980 ;;		_Port_SetQuadType
 15981 ;; This function uses a non-reentrant model
 15982 ;;
 15983                           
 15984                           	psect	text83
 15985  01540A                     __ptext83:
 15986                           	opt stack 0
 15987  01540A                     _Port_CheckQuadType:
 15988                           	opt stack 15
 15989                           
 15990                           ;Port.c: 128: ePinError Output = ePinErrorState;
 15991                           
 15992                           ;incstack = 0
 15993  01540A  0E05               	movlw	5
 15994  01540C  0100               	movlb	0	; () banked
 15995  01540E  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 15996                           
 15997                           ; BSR set to: 0
 15998                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 15999  015410  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 16000  015412  0D02               	mullw	2
 16001  015414  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 16002                           
 16003                           ; BSR set to: 0
 16004                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 16005  015418  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 16006  01541A  0D02               	mullw	2
 16007  01541C  28F3               	incf	prodl,w,c
 16008  01541E  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 16009                           
 16010                           ; BSR set to: 0
 16011                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 16012  015420  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 16013  015424  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 16014  015428  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 16015  01542C  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 16016  015430  EC55  F0A8         	call	_Port_CheckPairType	;wreg free
 16017  015434  0100               	movlb	0	; () banked
 16018  015436  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 16019  015438  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 16020  01543A  A4D8               	btfss	status,2,c
 16021  01543C  D00C               	goto	l393
 16022                           
 16023                           ; BSR set to: 0
 16024                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 16025  01543E  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 16026  015442  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 16027  015446  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 16028  01544A  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 16029  01544E  EC55  F0A8         	call	_Port_CheckPairType	;wreg free
 16030  015452  0100               	movlb	0	; () banked
 16031  015454  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 16032  015456                     l393:
 16033                           
 16034                           ; BSR set to: 0
 16035                           ;Port.c: 136: return Output;
 16036                           
 16037                           ; BSR set to: 0
 16038  015456  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 16039  015458  0012               	return	
 16040  01545A                     __end_of_Port_CheckQuadType:
 16041                           	opt stack 0
 16042                           tosu	equ	0xFFF
 16043                           tosh	equ	0xFFE
 16044                           tosl	equ	0xFFD
 16045                           pclath	equ	0xFFA
 16046                           tblptru	equ	0xFF8
 16047                           tblptrh	equ	0xFF7
 16048                           tblptrl	equ	0xFF6
 16049                           tablat	equ	0xFF5
 16050                           prodh	equ	0xFF4
 16051                           prodl	equ	0xFF3
 16052                           intcon	equ	0xFF2
 16053                           postinc0	equ	0xFEE
 16054                           wreg	equ	0xFE8
 16055                           indf1	equ	0xFE7
 16056                           postdec1	equ	0xFE5
 16057                           fsr1h	equ	0xFE2
 16058                           fsr1l	equ	0xFE1
 16059                           indf2	equ	0xFDF
 16060                           postinc2	equ	0xFDE
 16061                           postdec2	equ	0xFDD
 16062                           plusw2	equ	0xFDB
 16063                           fsr2h	equ	0xFDA
 16064                           fsr2l	equ	0xFD9
 16065                           status	equ	0xFD8
 16066                           
 16067 ;; *************** function _Port_CheckPairType *****************
 16068 ;; Defined at:
 16069 ;;		line 112 in file "Library/Port.c"
 16070 ;; Parameters:    Size  Location     Type
 16071 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 16072 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16073 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16074 ;;  pPair           1   40[BANK0 ] enum E6760
 16075 ;;  pDrive          1   41[BANK0 ] enum E6469
 16076 ;; Auto vars:     Size  Location     Type
 16077 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 16078 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16079 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16080 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16081 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16082 ;;  Output          1   44[BANK0 ] enum E6475
 16083 ;;  Pin2            1   43[BANK0 ] enum E6750
 16084 ;;  Pin1            1   42[BANK0 ] enum E6750
 16085 ;; Return value:  Size  Location     Type
 16086 ;;                  1    wreg      enum E6475
 16087 ;; Registers used:
 16088 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16089 ;; Tracked objects:
 16090 ;;		On entry : 0/0
 16091 ;;		On exit  : 0/0
 16092 ;;		Unchanged: 0/0
 16093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16094 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16095 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16097 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16098 ;;Total ram usage:        9 bytes
 16099 ;; Hardware stack levels used:    1
 16100 ;; Hardware stack levels required when called:   11
 16101 ;; This function calls:
 16102 ;;		_PortProperty_Valid
 16103 ;; This function is called by:
 16104 ;;		_Port_CheckQuadType
 16105 ;;		_Port_SetPairType
 16106 ;; This function uses a non-reentrant model
 16107 ;;
 16108                           
 16109                           	psect	text84
 16110  0150AA                     __ptext84:
 16111                           	opt stack 0
 16112  0150AA                     _Port_CheckPairType:
 16113                           	opt stack 15
 16114                           
 16115                           ;Port.c: 114: ePinError Output = ePinErrorState;
 16116                           
 16117                           ; BSR set to: 0
 16118                           ;incstack = 0
 16119  0150AA  0E05               	movlw	5
 16120  0150AC  0100               	movlb	0	; () banked
 16121  0150AE  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 16122                           
 16123                           ; BSR set to: 0
 16124                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 16125  0150B0  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 16126  0150B4  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 16127  0150B8  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 16128  0150BC  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 16129                           
 16130                           ; BSR set to: 0
 16131                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 16132  0150C0  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 16133  0150C2  0D02               	mullw	2
 16134  0150C4  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 16135                           
 16136                           ; BSR set to: 0
 16137                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 16138  0150C8  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 16139  0150CA  0D02               	mullw	2
 16140  0150CC  28F3               	incf	prodl,w,c
 16141  0150CE  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 16142                           
 16143                           ; BSR set to: 0
 16144                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 16145  0150D0  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 16146  0150D4  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 16147  0150D8  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 16148  0150DC  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 16149  0150E0  ECF1  F0A7         	call	_PortProperty_Valid	;wreg free
 16150  0150E4  0100               	movlb	0	; () banked
 16151  0150E6  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 16152  0150E8  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 16153  0150EA  A4D8               	btfss	status,2,c
 16154  0150EC  D00C               	goto	l389
 16155                           
 16156                           ; BSR set to: 0
 16157                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 16158  0150EE  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 16159  0150F2  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 16160  0150F6  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 16161  0150FA  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 16162  0150FE  ECF1  F0A7         	call	_PortProperty_Valid	;wreg free
 16163  015102  0100               	movlb	0	; () banked
 16164  015104  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 16165  015106                     l389:
 16166                           
 16167                           ; BSR set to: 0
 16168                           ;Port.c: 124: return Output;
 16169                           
 16170                           ; BSR set to: 0
 16171  015106  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 16172  015108  0012               	return	
 16173  01510A                     __end_of_Port_CheckPairType:
 16174                           	opt stack 0
 16175                           tosu	equ	0xFFF
 16176                           tosh	equ	0xFFE
 16177                           tosl	equ	0xFFD
 16178                           pclath	equ	0xFFA
 16179                           tblptru	equ	0xFF8
 16180                           tblptrh	equ	0xFF7
 16181                           tblptrl	equ	0xFF6
 16182                           tablat	equ	0xFF5
 16183                           prodh	equ	0xFF4
 16184                           prodl	equ	0xFF3
 16185                           intcon	equ	0xFF2
 16186                           postinc0	equ	0xFEE
 16187                           wreg	equ	0xFE8
 16188                           indf1	equ	0xFE7
 16189                           postdec1	equ	0xFE5
 16190                           fsr1h	equ	0xFE2
 16191                           fsr1l	equ	0xFE1
 16192                           indf2	equ	0xFDF
 16193                           postinc2	equ	0xFDE
 16194                           postdec2	equ	0xFDD
 16195                           plusw2	equ	0xFDB
 16196                           fsr2h	equ	0xFDA
 16197                           fsr2l	equ	0xFD9
 16198                           status	equ	0xFD8
 16199                           
 16200 ;; *************** function _PortProperty_Valid *****************
 16201 ;; Defined at:
 16202 ;;		line 220 in file "Library/Types.c"
 16203 ;; Parameters:    Size  Location     Type
 16204 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 16205 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16206 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16207 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16208 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16209 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 16210 ;;  pPin            1   18[BANK0 ] unsigned char 
 16211 ;; Auto vars:     Size  Location     Type
 16212 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 16213 ;;  Pair            1   37[BANK0 ] enum E6469
 16214 ;; Return value:  Size  Location     Type
 16215 ;;                  1    wreg      enum E6475
 16216 ;; Registers used:
 16217 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16218 ;; Tracked objects:
 16219 ;;		On entry : 0/0
 16220 ;;		On exit  : 0/0
 16221 ;;		Unchanged: 0/0
 16222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16223 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16224 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16225 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16226 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16227 ;;Total ram usage:       23 bytes
 16228 ;; Hardware stack levels used:    1
 16229 ;; Hardware stack levels required when called:   10
 16230 ;; This function calls:
 16231 ;;		_Word_GetPair
 16232 ;; This function is called by:
 16233 ;;		_Port_CheckPairType
 16234 ;;		_Port_SetPinType
 16235 ;; This function uses a non-reentrant model
 16236 ;;
 16237                           
 16238                           	psect	text85
 16239  014FE2                     __ptext85:
 16240                           	opt stack 0
 16241  014FE2                     _PortProperty_Valid:
 16242                           	opt stack 15
 16243                           
 16244                           ;Types.c: 222: ePinDrive Pair;
 16245                           ;Types.c: 223: const ePinError Errors[4][4] =
 16246                           ;Types.c: 224: {
 16247                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 16248                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 16249                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 16250                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 16251                           ;Types.c: 230: };
 16252                           
 16253                           ; BSR set to: 0
 16254                           ;incstack = 0
 16255  014FE2  0E19               	movlw	low PortProperty_Valid@F6830
 16256  014FE4  6EF6               	movwf	tblptrl,c
 16257  014FE6                     	if	1	;There is more than 1 active tblptr byte
 16258  014FE6  0EFC               	movlw	high PortProperty_Valid@F6830
 16259  014FE8  6EF7               	movwf	tblptrh,c
 16260  014FEA                     	endif
 16261  014FEA                     	if	1	;There are 3 active tblptr bytes
 16262  014FEA  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 16263  014FEC  6EF8               	movwf	tblptru,c
 16264  014FEE                     	endif
 16265  014FEE  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 16266  014FF2  0E0F               	movlw	15
 16267  014FF4                     u9510:
 16268  014FF4  0009               	tblrd		*+
 16269  014FF6  CFF5 FFDE          	movff	tablat,postinc2
 16270  014FFA  06E8               	decf	wreg,f,c
 16271  014FFC  E2FB               	bc	u9510
 16272                           
 16273                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 16274  014FFE  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 16275  015002  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 16276  015006  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 16277  01500A  EC96  F0AD         	call	_Word_GetPair	;wreg free
 16278  01500E  0100               	movlb	0	; () banked
 16279  015010  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 16280                           
 16281                           ; BSR set to: 0
 16282                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 16283  015012  0E04               	movlw	4
 16284  015014  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 16285  015016  D017               	goto	l819
 16286                           
 16287                           ; BSR set to: 0
 16288  015018  0E04               	movlw	4
 16289  01501A  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 16290  01501C  D014               	goto	l819
 16291                           
 16292                           ; BSR set to: 0
 16293                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 16294  01501E  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 16295  015020  0D04               	mullw	4
 16296  015022  0E75               	movlw	low PortProperty_Valid@Errors
 16297  015024  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 16298  015026  0E00               	movlw	high PortProperty_Valid@Errors
 16299  015028  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 16300  01502A  50F3               	movf	prodl,w,c
 16301  01502C  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 16302  01502E  50F4               	movf	prodh,w,c
 16303  015030  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 16304  015032  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 16305  015034  0D01               	mullw	1
 16306  015036  50F3               	movf	prodl,w,c
 16307  015038  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 16308  01503A  6ED9               	movwf	fsr2l,c
 16309  01503C  50F4               	movf	prodh,w,c
 16310  01503E  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 16311  015040  6EDA               	movwf	fsr2h,c
 16312  015042  50DF               	movf	indf2,w,c
 16313                           
 16314                           ; BSR set to: 0
 16315  015044  0012               	return	
 16316  015046                     l819:
 16317                           
 16318                           ; BSR set to: 0
 16319                           ;Types.c: 237: return ePinErrorState;
 16320                           
 16321                           ; BSR set to: 0
 16322  015046  0E05               	movlw	5
 16323  015048  0012               	return	
 16324  01504A                     __end_of_PortProperty_Valid:
 16325                           	opt stack 0
 16326                           tosu	equ	0xFFF
 16327                           tosh	equ	0xFFE
 16328                           tosl	equ	0xFFD
 16329                           pclath	equ	0xFFA
 16330                           tblptru	equ	0xFF8
 16331                           tblptrh	equ	0xFF7
 16332                           tblptrl	equ	0xFF6
 16333                           tablat	equ	0xFF5
 16334                           prodh	equ	0xFF4
 16335                           prodl	equ	0xFF3
 16336                           intcon	equ	0xFF2
 16337                           postinc0	equ	0xFEE
 16338                           wreg	equ	0xFE8
 16339                           indf1	equ	0xFE7
 16340                           postdec1	equ	0xFE5
 16341                           fsr1h	equ	0xFE2
 16342                           fsr1l	equ	0xFE1
 16343                           indf2	equ	0xFDF
 16344                           postinc2	equ	0xFDE
 16345                           postdec2	equ	0xFDD
 16346                           plusw2	equ	0xFDB
 16347                           fsr2h	equ	0xFDA
 16348                           fsr2l	equ	0xFD9
 16349                           status	equ	0xFD8
 16350                           
 16351 ;; *************** function _Word_GetPair *****************
 16352 ;; Defined at:
 16353 ;;		line 156 in file "Library/Types.c"
 16354 ;; Parameters:    Size  Location     Type
 16355 ;;  pInput          2   12[BANK0 ] PTR struct Word
 16356 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16357 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16358 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16359 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16360 ;;  pPair           1   14[BANK0 ] unsigned char 
 16361 ;; Auto vars:     Size  Location     Type
 16362 ;;		None
 16363 ;; Return value:  Size  Location     Type
 16364 ;;                  1    wreg      unsigned char 
 16365 ;; Registers used:
 16366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16367 ;; Tracked objects:
 16368 ;;		On entry : 0/0
 16369 ;;		On exit  : 0/0
 16370 ;;		Unchanged: 0/0
 16371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16372 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16375 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16376 ;;Total ram usage:        3 bytes
 16377 ;; Hardware stack levels used:    1
 16378 ;; Hardware stack levels required when called:    9
 16379 ;; This function calls:
 16380 ;;		_Byte_GetPair
 16381 ;; This function is called by:
 16382 ;;		_Port_Init
 16383 ;;		_Port_SetPin
 16384 ;;		_Port_Set
 16385 ;;		_PortProperty_Valid
 16386 ;;		_Port_SetPair
 16387 ;;		_Port_SetQuad
 16388 ;; This function uses a non-reentrant model
 16389 ;;
 16390                           
 16391                           	psect	text86
 16392  015B2C                     __ptext86:
 16393                           	opt stack 0
 16394  015B2C                     _Word_GetPair:
 16395                           	opt stack 15
 16396                           
 16397                           ;Types.c: 158: if (pPair >= 4)
 16398                           
 16399                           ; BSR set to: 0
 16400                           ;incstack = 0
 16401  015B2C  0E03               	movlw	3
 16402  015B2E  0100               	movlb	0	; () banked
 16403  015B30  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 16404  015B32  D00C               	goto	l781
 16405                           
 16406                           ; BSR set to: 0
 16407                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 16408  015B34  0E01               	movlw	1
 16409  015B36  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 16410  015B38  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 16411  015B3A  0E00               	movlw	0
 16412  015B3C  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 16413  015B3E  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 16414  015B40  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 16415  015B42  0FFC               	addlw	252
 16416  015B44  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 16417  015B46  EC01  F0AF         	call	_Byte_GetPair	;wreg free
 16418  015B4A  0012               	return	
 16419  015B4C                     l781:
 16420                           
 16421                           ;Types.c: 160: else
 16422                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 16423  015B4C  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 16424  015B50  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 16425  015B54  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 16426  015B58  EC01  F0AF         	call	_Byte_GetPair	;wreg free
 16427  015B5C  0012               	return	
 16428  015B5E                     __end_of_Word_GetPair:
 16429                           	opt stack 0
 16430                           tosu	equ	0xFFF
 16431                           tosh	equ	0xFFE
 16432                           tosl	equ	0xFFD
 16433                           pclath	equ	0xFFA
 16434                           tblptru	equ	0xFF8
 16435                           tblptrh	equ	0xFF7
 16436                           tblptrl	equ	0xFF6
 16437                           tablat	equ	0xFF5
 16438                           prodh	equ	0xFF4
 16439                           prodl	equ	0xFF3
 16440                           intcon	equ	0xFF2
 16441                           postinc0	equ	0xFEE
 16442                           wreg	equ	0xFE8
 16443                           indf1	equ	0xFE7
 16444                           postdec1	equ	0xFE5
 16445                           fsr1h	equ	0xFE2
 16446                           fsr1l	equ	0xFE1
 16447                           indf2	equ	0xFDF
 16448                           postinc2	equ	0xFDE
 16449                           postdec2	equ	0xFDD
 16450                           plusw2	equ	0xFDB
 16451                           fsr2h	equ	0xFDA
 16452                           fsr2l	equ	0xFD9
 16453                           status	equ	0xFD8
 16454                           
 16455 ;; *************** function _Byte_GetPair *****************
 16456 ;; Defined at:
 16457 ;;		line 87 in file "Library/Types.c"
 16458 ;; Parameters:    Size  Location     Type
 16459 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 16460 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16461 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16462 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16463 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16464 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16465 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16466 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16467 ;;		 -> NULL(0), 
 16468 ;;  pPair           1   11[BANK0 ] unsigned char 
 16469 ;; Auto vars:     Size  Location     Type
 16470 ;;		None
 16471 ;; Return value:  Size  Location     Type
 16472 ;;                  1    wreg      unsigned char 
 16473 ;; Registers used:
 16474 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16475 ;; Tracked objects:
 16476 ;;		On entry : 0/0
 16477 ;;		On exit  : 0/0
 16478 ;;		Unchanged: 0/0
 16479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16480 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16483 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16484 ;;Total ram usage:        3 bytes
 16485 ;; Hardware stack levels used:    1
 16486 ;; Hardware stack levels required when called:    8
 16487 ;; This function calls:
 16488 ;;		_Byte_GetZone
 16489 ;; This function is called by:
 16490 ;;		_Word_GetPair
 16491 ;; This function uses a non-reentrant model
 16492 ;;
 16493                           
 16494                           	psect	text87
 16495  015E02                     __ptext87:
 16496                           	opt stack 0
 16497  015E02                     _Byte_GetPair:
 16498                           	opt stack 15
 16499                           
 16500                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 16501                           
 16502                           ;incstack = 0
 16503  015E02  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 16504  015E06  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 16505  015E0A  0E04               	movlw	4
 16506  015E0C  0100               	movlb	0	; () banked
 16507  015E0E  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 16508  015E10  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 16509  015E14  0E02               	movlw	2
 16510  015E16  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 16511  015E18  EC86  F0A5         	call	_Byte_GetZone	;wreg free
 16512  015E1C  0012               	return	
 16513  015E1E                     __end_of_Byte_GetPair:
 16514                           	opt stack 0
 16515                           tosu	equ	0xFFF
 16516                           tosh	equ	0xFFE
 16517                           tosl	equ	0xFFD
 16518                           pclath	equ	0xFFA
 16519                           tblptru	equ	0xFF8
 16520                           tblptrh	equ	0xFF7
 16521                           tblptrl	equ	0xFF6
 16522                           tablat	equ	0xFF5
 16523                           prodh	equ	0xFF4
 16524                           prodl	equ	0xFF3
 16525                           intcon	equ	0xFF2
 16526                           postinc0	equ	0xFEE
 16527                           wreg	equ	0xFE8
 16528                           indf1	equ	0xFE7
 16529                           postdec1	equ	0xFE5
 16530                           fsr1h	equ	0xFE2
 16531                           fsr1l	equ	0xFE1
 16532                           indf2	equ	0xFDF
 16533                           postinc2	equ	0xFDE
 16534                           postdec2	equ	0xFDD
 16535                           plusw2	equ	0xFDB
 16536                           fsr2h	equ	0xFDA
 16537                           fsr2l	equ	0xFD9
 16538                           status	equ	0xFD8
 16539                           
 16540 ;; *************** function _Byte_GetZone *****************
 16541 ;; Defined at:
 16542 ;;		line 64 in file "Library/Types.c"
 16543 ;; Parameters:    Size  Location     Type
 16544 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16545 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16546 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16547 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16548 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16549 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16550 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16551 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16552 ;;		 -> NULL(0), 
 16553 ;;  pMax            1    2[BANK0 ] unsigned char 
 16554 ;;  pChunk          1    3[BANK0 ] unsigned char 
 16555 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 16556 ;; Auto vars:     Size  Location     Type
 16557 ;;  Output          1    8[BANK0 ] unsigned char 
 16558 ;;  Offset          1    7[BANK0 ] unsigned char 
 16559 ;;  MASK            1    6[BANK0 ] unsigned char 
 16560 ;; Return value:  Size  Location     Type
 16561 ;;                  1    wreg      unsigned char 
 16562 ;; Registers used:
 16563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16564 ;; Tracked objects:
 16565 ;;		On entry : 0/0
 16566 ;;		On exit  : 0/0
 16567 ;;		Unchanged: 0/0
 16568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16569 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16570 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16572 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16573 ;;Total ram usage:        9 bytes
 16574 ;; Hardware stack levels used:    1
 16575 ;; Hardware stack levels required when called:    7
 16576 ;; This function calls:
 16577 ;;		Nothing
 16578 ;; This function is called by:
 16579 ;;		_Byte_GetPair
 16580 ;;		_Byte_GetTriple
 16581 ;;		_Byte_GetQuad
 16582 ;; This function uses a non-reentrant model
 16583 ;;
 16584                           
 16585                           	psect	text88
 16586  014B0C                     __ptext88:
 16587                           	opt stack 0
 16588  014B0C                     _Byte_GetZone:
 16589                           	opt stack 15
 16590                           
 16591                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 16592                           
 16593                           ;incstack = 0
 16594  014B0C  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 16595  014B10  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 16596  014B14  0E00               	movlw	low (__mediumconst shr (0+16))
 16597  014B16  6EF8               	movwf	tblptru,c
 16598  014B18  0E0F               	movlw	(high __ramtop+-1)
 16599  014B1A  64F7               	cpfsgt	tblptrh,c
 16600  014B1C  D003               	bra	u9477
 16601  014B1E  0008               	tblrd		*
 16602  014B20  50F5               	movf	tablat,w,c
 16603  014B22  D005               	bra	u9470
 16604  014B24                     u9477:
 16605  014B24  CFF6 FFE9          	movff	tblptrl,fsr0l
 16606  014B28  CFF7 FFEA          	movff	tblptrh,fsr0h
 16607  014B2C  50EF               	movf	indf0,w,c
 16608  014B2E                     u9470:
 16609  014B2E  0100               	movlb	0	; () banked
 16610  014B30  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 16611                           
 16612                           ; BSR set to: 0
 16613                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 16614  014B32  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 16615  014B34  0D01               	mullw	1
 16616  014B36  0E33               	movlw	low _MASKS
 16617  014B38  24F3               	addwf	prodl,w,c
 16618  014B3A  6EF6               	movwf	tblptrl,c
 16619  014B3C  0EFC               	movlw	high _MASKS
 16620  014B3E  20F4               	addwfc	prodh,w,c
 16621  014B40  6EF7               	movwf	tblptrh,c
 16622  014B42                     	if	1	;There are 3 active tblptr bytes
 16623  014B42  6AF8               	clrf	tblptru,c
 16624  014B44  0E00               	movlw	low (__mediumconst shr (0+16))
 16625  014B46  22F8               	addwfc	tblptru,f,c
 16626  014B48                     	endif
 16627  014B48  0008               	tblrd		*
 16628  014B4A  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 16629                           
 16630                           ; BSR set to: 0
 16631                           ;Types.c: 68: UINT8 Offset = 0;
 16632  014B4E  0E00               	movlw	0
 16633  014B50  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 16634                           
 16635                           ;Types.c: 70: while (pChunk >= pMax)
 16636  014B52  D003               	goto	l732
 16637  014B54                     
 16638                           ; BSR set to: 0
 16639                           ;Types.c: 71: {
 16640                           ;Types.c: 72: pChunk -= pMax;
 16641                           
 16642                           ; BSR set to: 0
 16643  014B54  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 16644  014B56  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 16645                           
 16646                           ; BSR set to: 0
 16647                           ;Types.c: 73: Offset += 1;
 16648  014B58  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 16649  014B5A                     l732:
 16650                           
 16651                           ; BSR set to: 0
 16652                           
 16653                           ; BSR set to: 0
 16654  014B5A  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 16655  014B5C  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 16656  014B5E  B0D8               	btfsc	status,0,c
 16657  014B60  D7F9               	goto	l733
 16658                           
 16659                           ; BSR set to: 0
 16660                           ;Types.c: 74: }
 16661                           ;Types.c: 75: pChunk *= pChunkSize;
 16662                           
 16663                           ; BSR set to: 0
 16664  014B62  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 16665  014B64  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 16666  014B66  50F3               	movf	prodl,w,c
 16667  014B68  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 16668                           
 16669                           ; BSR set to: 0
 16670                           ;Types.c: 76: pChunk += Offset;
 16671  014B6A  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 16672  014B6C  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 16673                           
 16674                           ; BSR set to: 0
 16675                           ;Types.c: 78: Output >>= pChunk;
 16676  014B6E  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 16677  014B70  6F65               	movwf	??_Byte_GetZone& (0+255),b
 16678  014B72  D002               	goto	u9490
 16679  014B74                     u9495:
 16680  014B74  90D8               	bcf	status,0,c
 16681  014B76  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 16682  014B78                     u9490:
 16683  014B78  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 16684  014B7A  D7FC               	goto	u9495
 16685                           
 16686                           ;Types.c: 79: Output &= MASK;
 16687  014B7C  0100               	movlb	0	; () banked
 16688  014B7E  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 16689  014B80  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 16690                           
 16691                           ; BSR set to: 0
 16692                           ;Types.c: 80: return Output;
 16693  014B82  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 16694  014B84  0012               	return	
 16695  014B86                     __end_of_Byte_GetZone:
 16696                           	opt stack 0
 16697                           tosu	equ	0xFFF
 16698                           tosh	equ	0xFFE
 16699                           tosl	equ	0xFFD
 16700                           pclath	equ	0xFFA
 16701                           tblptru	equ	0xFF8
 16702                           tblptrh	equ	0xFF7
 16703                           tblptrl	equ	0xFF6
 16704                           tablat	equ	0xFF5
 16705                           prodh	equ	0xFF4
 16706                           prodl	equ	0xFF3
 16707                           intcon	equ	0xFF2
 16708                           indf0	equ	0xFEF
 16709                           postinc0	equ	0xFEE
 16710                           fsr0h	equ	0xFEA
 16711                           fsr0l	equ	0xFE9
 16712                           wreg	equ	0xFE8
 16713                           indf1	equ	0xFE7
 16714                           postdec1	equ	0xFE5
 16715                           fsr1h	equ	0xFE2
 16716                           fsr1l	equ	0xFE1
 16717                           indf2	equ	0xFDF
 16718                           postinc2	equ	0xFDE
 16719                           postdec2	equ	0xFDD
 16720                           plusw2	equ	0xFDB
 16721                           fsr2h	equ	0xFDA
 16722                           fsr2l	equ	0xFD9
 16723                           status	equ	0xFD8
 16724                           
 16725 ;; *************** function _Byte_SetQuad *****************
 16726 ;; Defined at:
 16727 ;;		line 101 in file "Library/Types.c"
 16728 ;; Parameters:    Size  Location     Type
 16729 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 16730 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 16731 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16732 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16733 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16734 ;;		 -> NULL(0), 
 16735 ;;  pQuad           1   13[BANK0 ] unsigned char 
 16736 ;;  pValue          1   14[BANK0 ] unsigned char 
 16737 ;; Auto vars:     Size  Location     Type
 16738 ;;		None
 16739 ;; Return value:  Size  Location     Type
 16740 ;;                  1    wreg      void 
 16741 ;; Registers used:
 16742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16743 ;; Tracked objects:
 16744 ;;		On entry : 0/0
 16745 ;;		On exit  : 0/0
 16746 ;;		Unchanged: 0/0
 16747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16748 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16751 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16752 ;;Total ram usage:        4 bytes
 16753 ;; Hardware stack levels used:    1
 16754 ;; Hardware stack levels required when called:    8
 16755 ;; This function calls:
 16756 ;;		_Byte_SetZone
 16757 ;; This function is called by:
 16758 ;;		_Port_SetQuadType
 16759 ;;		_SPI_Init
 16760 ;;		_SPI_MinSpeed
 16761 ;;		_SPI_MaxSpeed
 16762 ;;		_Port_SetQuad
 16763 ;;		_Word_SetQuad
 16764 ;;		_I2C_Init
 16765 ;; This function uses a non-reentrant model
 16766 ;;
 16767                           
 16768                           	psect	text89
 16769  015DA4                     __ptext89:
 16770                           	opt stack 0
 16771  015DA4                     _Byte_SetQuad:
 16772                           	opt stack 20
 16773                           
 16774                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 16775                           
 16776                           ; BSR set to: 0
 16777                           ;incstack = 0
 16778  015DA4  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 16779  015DA8  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 16780  015DAC  0E02               	movlw	2
 16781  015DAE  0100               	movlb	0	; () banked
 16782  015DB0  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 16783  015DB2  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 16784  015DB6  0E04               	movlw	4
 16785  015DB8  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 16786  015DBA  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 16787  015DBE  EC34  F0A3         	call	_Byte_SetZone	;wreg free
 16788  015DC2  0012               	return		;funcret
 16789  015DC4                     __end_of_Byte_SetQuad:
 16790                           	opt stack 0
 16791                           tosu	equ	0xFFF
 16792                           tosh	equ	0xFFE
 16793                           tosl	equ	0xFFD
 16794                           pclath	equ	0xFFA
 16795                           tblptru	equ	0xFF8
 16796                           tblptrh	equ	0xFF7
 16797                           tblptrl	equ	0xFF6
 16798                           tablat	equ	0xFF5
 16799                           prodh	equ	0xFF4
 16800                           prodl	equ	0xFF3
 16801                           intcon	equ	0xFF2
 16802                           indf0	equ	0xFEF
 16803                           postinc0	equ	0xFEE
 16804                           fsr0h	equ	0xFEA
 16805                           fsr0l	equ	0xFE9
 16806                           wreg	equ	0xFE8
 16807                           indf1	equ	0xFE7
 16808                           postdec1	equ	0xFE5
 16809                           fsr1h	equ	0xFE2
 16810                           fsr1l	equ	0xFE1
 16811                           indf2	equ	0xFDF
 16812                           postinc2	equ	0xFDE
 16813                           postdec2	equ	0xFDD
 16814                           plusw2	equ	0xFDB
 16815                           fsr2h	equ	0xFDA
 16816                           fsr2l	equ	0xFD9
 16817                           status	equ	0xFD8
 16818                           
 16819 ;; *************** function _Byte_SetZone *****************
 16820 ;; Defined at:
 16821 ;;		line 47 in file "Library/Types.c"
 16822 ;; Parameters:    Size  Location     Type
 16823 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16824 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 16825 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 16826 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 16827 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 16828 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16829 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16830 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16831 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16832 ;;  pMax            1    2[BANK0 ] unsigned char 
 16833 ;;  pChunk          1    3[BANK0 ] unsigned char 
 16834 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 16835 ;;  pValue          1    5[BANK0 ] unsigned char 
 16836 ;; Auto vars:     Size  Location     Type
 16837 ;;  MASK            1   10[BANK0 ] unsigned char 
 16838 ;;  Offset          1    9[BANK0 ] unsigned char 
 16839 ;; Return value:  Size  Location     Type
 16840 ;;                  1    wreg      void 
 16841 ;; Registers used:
 16842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16843 ;; Tracked objects:
 16844 ;;		On entry : 0/0
 16845 ;;		On exit  : 0/0
 16846 ;;		Unchanged: 0/0
 16847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16848 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16849 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16850 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16851 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16852 ;;Total ram usage:       11 bytes
 16853 ;; Hardware stack levels used:    1
 16854 ;; Hardware stack levels required when called:    7
 16855 ;; This function calls:
 16856 ;;		Nothing
 16857 ;; This function is called by:
 16858 ;;		_Byte_SetPair
 16859 ;;		_Byte_SetQuad
 16860 ;;		_Byte_SetTriple
 16861 ;; This function uses a non-reentrant model
 16862 ;;
 16863                           
 16864                           	psect	text90
 16865  014668                     __ptext90:
 16866                           	opt stack 0
 16867  014668                     _Byte_SetZone:
 16868                           	opt stack 19
 16869                           
 16870                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 16871                           
 16872                           ;incstack = 0
 16873  014668  0100               	movlb	0	; () banked
 16874  01466A  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 16875  01466C  0D01               	mullw	1
 16876  01466E  0E33               	movlw	low _MASKS
 16877  014670  24F3               	addwf	prodl,w,c
 16878  014672  6EF6               	movwf	tblptrl,c
 16879  014674  0EFC               	movlw	high _MASKS
 16880  014676  20F4               	addwfc	prodh,w,c
 16881  014678  6EF7               	movwf	tblptrh,c
 16882  01467A                     	if	1	;There are 3 active tblptr bytes
 16883  01467A  6AF8               	clrf	tblptru,c
 16884  01467C  0E00               	movlw	low (__mediumconst shr (0+16))
 16885  01467E  22F8               	addwfc	tblptru,f,c
 16886  014680                     	endif
 16887  014680  0008               	tblrd		*
 16888  014682  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 16889                           
 16890                           ; BSR set to: 0
 16891                           ;Types.c: 50: UINT8 Offset = 0;
 16892  014686  0E00               	movlw	0
 16893  014688  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 16894                           
 16895                           ;Types.c: 52: while (pChunk >= pMax)
 16896  01468A  D003               	goto	l726
 16897  01468C                     
 16898                           ; BSR set to: 0
 16899                           ;Types.c: 53: {
 16900                           ;Types.c: 54: pChunk -= pMax;
 16901                           
 16902                           ; BSR set to: 0
 16903  01468C  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 16904  01468E  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 16905                           
 16906                           ; BSR set to: 0
 16907                           ;Types.c: 55: Offset += 1;
 16908  014690  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 16909  014692                     l726:
 16910                           
 16911                           ; BSR set to: 0
 16912                           
 16913                           ; BSR set to: 0
 16914  014692  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 16915  014694  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 16916  014696  B0D8               	btfsc	status,0,c
 16917  014698  D7F9               	goto	l727
 16918                           
 16919                           ; BSR set to: 0
 16920                           ;Types.c: 56: }
 16921                           ;Types.c: 57: pChunk *= pChunkSize;
 16922                           
 16923                           ; BSR set to: 0
 16924  01469A  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 16925  01469C  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 16926  01469E  50F3               	movf	prodl,w,c
 16927  0146A0  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 16928                           
 16929                           ; BSR set to: 0
 16930                           ;Types.c: 58: pChunk += Offset;
 16931  0146A2  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 16932  0146A4  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 16933                           
 16934                           ; BSR set to: 0
 16935                           ;Types.c: 60: pValue &= MASK;
 16936  0146A6  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 16937  0146A8  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 16938                           
 16939                           ; BSR set to: 0
 16940                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 16941  0146AA  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 16942  0146AE  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 16943  0146B2  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 16944  0146B4  D002               	goto	u9574
 16945  0146B6                     u9575:
 16946  0146B6  90D8               	bcf	status,0,c
 16947  0146B8  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 16948  0146BA                     u9574:
 16949  0146BA  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 16950  0146BC  D7FC               	goto	u9575
 16951  0146BE  0100               	movlb	0	; () banked
 16952  0146C0  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 16953  0146C2  0AFF               	xorlw	255
 16954  0146C4  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 16955  0146C6  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 16956  0146CA  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 16957  0146CE  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 16958  0146D0  16DF               	andwf	indf2,f,c
 16959                           
 16960                           ; BSR set to: 0
 16961                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 16962  0146D2  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 16963  0146D6  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 16964  0146DA  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 16965  0146DC  D002               	goto	u9584
 16966  0146DE                     u9585:
 16967  0146DE  90D8               	bcf	status,0,c
 16968  0146E0  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 16969  0146E2                     u9584:
 16970  0146E2  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 16971  0146E4  D7FC               	goto	u9585
 16972  0146E6  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 16973  0146EA  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 16974  0146EE  0100               	movlb	0	; () banked
 16975  0146F0  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 16976  0146F2  12DF               	iorwf	indf2,f,c
 16977                           
 16978                           ; BSR set to: 0
 16979  0146F4  0012               	return		;funcret
 16980  0146F6                     __end_of_Byte_SetZone:
 16981                           	opt stack 0
 16982                           tosu	equ	0xFFF
 16983                           tosh	equ	0xFFE
 16984                           tosl	equ	0xFFD
 16985                           pclath	equ	0xFFA
 16986                           tblptru	equ	0xFF8
 16987                           tblptrh	equ	0xFF7
 16988                           tblptrl	equ	0xFF6
 16989                           tablat	equ	0xFF5
 16990                           prodh	equ	0xFF4
 16991                           prodl	equ	0xFF3
 16992                           intcon	equ	0xFF2
 16993                           indf0	equ	0xFEF
 16994                           postinc0	equ	0xFEE
 16995                           fsr0h	equ	0xFEA
 16996                           fsr0l	equ	0xFE9
 16997                           wreg	equ	0xFE8
 16998                           indf1	equ	0xFE7
 16999                           postdec1	equ	0xFE5
 17000                           fsr1h	equ	0xFE2
 17001                           fsr1l	equ	0xFE1
 17002                           indf2	equ	0xFDF
 17003                           postinc2	equ	0xFDE
 17004                           postdec2	equ	0xFDD
 17005                           plusw2	equ	0xFDB
 17006                           fsr2h	equ	0xFDA
 17007                           fsr2l	equ	0xFD9
 17008                           status	equ	0xFD8
 17009                           
 17010 ;; *************** function _Drive *****************
 17011 ;; Defined at:
 17012 ;;		line 192 in file "main.c"
 17013 ;; Parameters:    Size  Location     Type
 17014 ;;  Speed           2    1[BANK0 ] int 
 17015 ;; Auto vars:     Size  Location     Type
 17016 ;;  Rad             2    3[BANK0 ] int 
 17017 ;; Return value:  Size  Location     Type
 17018 ;;                  1    wreg      void 
 17019 ;; Registers used:
 17020 ;;		wreg, status,2, status,0, cstack
 17021 ;; Tracked objects:
 17022 ;;		On entry : 0/0
 17023 ;;		On exit  : 0/0
 17024 ;;		Unchanged: 0/0
 17025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17026 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17027 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17029 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17030 ;;Total ram usage:        4 bytes
 17031 ;; Hardware stack levels used:    1
 17032 ;; Hardware stack levels required when called:    8
 17033 ;; This function calls:
 17034 ;;		_eusartSend
 17035 ;; This function is called by:
 17036 ;;		_main
 17037 ;; This function uses a non-reentrant model
 17038 ;;
 17039                           
 17040                           	psect	text91
 17041  015784                     __ptext91:
 17042                           	opt stack 0
 17043  015784                     _Drive:
 17044                           	opt stack 22
 17045                           
 17046                           ;main.c: 193: if (Speed < 0){
 17047                           
 17048                           ; BSR set to: 0
 17049                           ;incstack = 0
 17050  015784  0100               	movlb	0	; () banked
 17051  015786  AF62               	btfss	(Drive@Speed+1)& (0+255),7,b
 17052  015788  D006               	goto	l2163
 17053                           
 17054                           ; BSR set to: 0
 17055                           ;main.c: 194: Speed = -1*Speed;
 17056  01578A  6D61               	negf	Drive@Speed& (0+255),b
 17057  01578C  1F62               	comf	(Drive@Speed+1)& (0+255),f,b
 17058  01578E  B0D8               	btfsc	status,0,c
 17059  015790  2B62               	incf	(Drive@Speed+1)& (0+255),f,b
 17060                           
 17061                           ;main.c: 195: Speed = ~Speed;
 17062  015792  1F61               	comf	Drive@Speed& (0+255),f,b
 17063  015794  1F62               	comf	(Drive@Speed+1)& (0+255),f,b
 17064  015796                     l2163:
 17065                           
 17066                           ; BSR set to: 0
 17067                           ;main.c: 196: }
 17068                           ;main.c: 197: int Rad = 32768;
 17069                           
 17070                           ; BSR set to: 0
 17071  015796  0E80               	movlw	128
 17072  015798  6F64               	movwf	(Drive@Rad+1)& (0+255),b
 17073  01579A  0E00               	movlw	0
 17074  01579C  6F63               	movwf	Drive@Rad& (0+255),b
 17075                           
 17076                           ; BSR set to: 0
 17077                           ;main.c: 198: eusartSend(137);
 17078  01579E  0E89               	movlw	137
 17079  0157A0  EC28  F0B0         	call	_eusartSend
 17080                           
 17081                           ;main.c: 199: eusartSend((((Speed)>>8) & 255));
 17082  0157A4  0100               	movlb	0	; () banked
 17083  0157A6  5162               	movf	(Drive@Speed+1)& (0+255),w,b
 17084  0157A8  EC28  F0B0         	call	_eusartSend
 17085                           
 17086                           ;main.c: 200: eusartSend(((Speed) & 255));
 17087  0157AC  0100               	movlb	0	; () banked
 17088  0157AE  5161               	movf	Drive@Speed& (0+255),w,b
 17089  0157B0  EC28  F0B0         	call	_eusartSend
 17090                           
 17091                           ;main.c: 201: eusartSend((((Rad)>>8) & 255));
 17092  0157B4  0100               	movlb	0	; () banked
 17093  0157B6  5164               	movf	(Drive@Rad+1)& (0+255),w,b
 17094  0157B8  EC28  F0B0         	call	_eusartSend
 17095                           
 17096                           ;main.c: 202: eusartSend(((Rad) & 255));
 17097  0157BC  0100               	movlb	0	; () banked
 17098  0157BE  5163               	movf	Drive@Rad& (0+255),w,b
 17099  0157C0  EC28  F0B0         	call	_eusartSend
 17100  0157C4  0012               	return		;funcret
 17101  0157C6                     __end_of_Drive:
 17102                           	opt stack 0
 17103                           tosu	equ	0xFFF
 17104                           tosh	equ	0xFFE
 17105                           tosl	equ	0xFFD
 17106                           pclath	equ	0xFFA
 17107                           tblptru	equ	0xFF8
 17108                           tblptrh	equ	0xFF7
 17109                           tblptrl	equ	0xFF6
 17110                           tablat	equ	0xFF5
 17111                           prodh	equ	0xFF4
 17112                           prodl	equ	0xFF3
 17113                           intcon	equ	0xFF2
 17114                           indf0	equ	0xFEF
 17115                           postinc0	equ	0xFEE
 17116                           fsr0h	equ	0xFEA
 17117                           fsr0l	equ	0xFE9
 17118                           wreg	equ	0xFE8
 17119                           indf1	equ	0xFE7
 17120                           postdec1	equ	0xFE5
 17121                           fsr1h	equ	0xFE2
 17122                           fsr1l	equ	0xFE1
 17123                           indf2	equ	0xFDF
 17124                           postinc2	equ	0xFDE
 17125                           postdec2	equ	0xFDD
 17126                           plusw2	equ	0xFDB
 17127                           fsr2h	equ	0xFDA
 17128                           fsr2l	equ	0xFD9
 17129                           status	equ	0xFD8
 17130                           
 17131 ;; *************** function _Console_Init *****************
 17132 ;; Defined at:
 17133 ;;		line 157 in file "Library/Console.c"
 17134 ;; Parameters:    Size  Location     Type
 17135 ;;		None
 17136 ;; Auto vars:     Size  Location     Type
 17137 ;;  y               1    3[BANK0 ] unsigned char 
 17138 ;;  x               1    2[BANK0 ] unsigned char 
 17139 ;; Return value:  Size  Location     Type
 17140 ;;                  1    wreg      void 
 17141 ;; Registers used:
 17142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17143 ;; Tracked objects:
 17144 ;;		On entry : 0/0
 17145 ;;		On exit  : 0/0
 17146 ;;		Unchanged: 0/0
 17147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17149 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17150 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17151 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17152 ;;Total ram usage:        4 bytes
 17153 ;; Hardware stack levels used:    1
 17154 ;; Hardware stack levels required when called:    7
 17155 ;; This function calls:
 17156 ;;		Nothing
 17157 ;; This function is called by:
 17158 ;;		_main
 17159 ;; This function uses a non-reentrant model
 17160 ;;
 17161                           
 17162                           	psect	text92
 17163  014EA8                     __ptext92:
 17164                           	opt stack 0
 17165  014EA8                     _Console_Init:
 17166                           	opt stack 23
 17167                           
 17168                           ;Console.c: 160: lBufferX = 0;
 17169                           
 17170                           ;incstack = 0
 17171  014EA8  0E00               	movlw	0
 17172  014EAA  0100               	movlb	0	; () banked
 17173  014EAC  6FF4               	movwf	_lBufferX& (0+255),b
 17174                           
 17175                           ;Console.c: 161: lBufferY = 0;
 17176  014EAE  0E00               	movlw	0
 17177  014EB0  6FF3               	movwf	_lBufferY& (0+255),b
 17178                           
 17179                           ;Console.c: 163: UINT8 x, y;
 17180                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 17181  014EB2  0E00               	movlw	0
 17182  014EB4  6F62               	movwf	Console_Init@x& (0+255),b
 17183  014EB6                     l15263:
 17184                           
 17185                           ; BSR set to: 0
 17186  014EB6  0E13               	movlw	19
 17187  014EB8  6562               	cpfsgt	Console_Init@x& (0+255),b
 17188  014EBA  D001               	goto	l976
 17189  014EBC  0012               	return	
 17190  014EBE                     l976:
 17191                           
 17192                           ; BSR set to: 0
 17193                           ;Console.c: 165: {
 17194                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 17195                           
 17196                           ; BSR set to: 0
 17197  014EBE  0E00               	movlw	0
 17198  014EC0  6F63               	movwf	Console_Init@y& (0+255),b
 17199  014EC2                     l15269:
 17200                           
 17201                           ; BSR set to: 0
 17202  014EC2  0E0E               	movlw	14
 17203  014EC4  6563               	cpfsgt	Console_Init@y& (0+255),b
 17204  014EC6  D001               	goto	l978
 17205  014EC8  D022               	goto	u12580
 17206  014ECA                     l978:
 17207                           
 17208                           ; BSR set to: 0
 17209                           ;Console.c: 167: {
 17210                           ;Console.c: 168: lBuffer[y][x] = '\0';
 17211                           
 17212                           ; BSR set to: 0
 17213  014ECA  5163               	movf	Console_Init@y& (0+255),w,b
 17214  014ECC  0D14               	mullw	20
 17215  014ECE  0E18               	movlw	low _lBuffer
 17216  014ED0  6F60               	movwf	??_Console_Init& (0+255),b
 17217  014ED2  0E03               	movlw	high _lBuffer
 17218  014ED4  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 17219  014ED6  50F3               	movf	prodl,w,c
 17220  014ED8  2760               	addwf	??_Console_Init& (0+255),f,b
 17221  014EDA  50F4               	movf	prodh,w,c
 17222  014EDC  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 17223  014EDE  5162               	movf	Console_Init@x& (0+255),w,b
 17224  014EE0  0D01               	mullw	1
 17225  014EE2  50F3               	movf	prodl,w,c
 17226  014EE4  2560               	addwf	??_Console_Init& (0+255),w,b
 17227  014EE6  6ED9               	movwf	fsr2l,c
 17228  014EE8  50F4               	movf	prodh,w,c
 17229  014EEA  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 17230  014EEC  6EDA               	movwf	fsr2h,c
 17231  014EEE  0E00               	movlw	0
 17232  014EF0  6EDF               	movwf	indf2,c
 17233                           
 17234                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 17235  014EF2  5163               	movf	Console_Init@y& (0+255),w,b
 17236  014EF4  0D02               	mullw	2
 17237  014EF6  0E64               	movlw	low _lCBuffer
 17238  014EF8  24F3               	addwf	prodl,w,c
 17239  014EFA  6ED9               	movwf	fsr2l,c
 17240  014EFC  0E02               	movlw	high _lCBuffer
 17241  014EFE  20F4               	addwfc	prodh,w,c
 17242  014F00  6EDA               	movwf	fsr2h,c
 17243  014F02  0EFF               	movlw	255
 17244  014F04  6EDE               	movwf	postinc2,c
 17245  014F06  0EFF               	movlw	255
 17246  014F08  6EDD               	movwf	postdec2,c
 17247                           
 17248                           ; BSR set to: 0
 17249  014F0A  2B63               	incf	Console_Init@y& (0+255),f,b
 17250  014F0C  D7DA               	goto	l15269
 17251  014F0E                     u12580:
 17252                           
 17253                           ; BSR set to: 0
 17254                           
 17255                           ; BSR set to: 0
 17256  014F0E  2B62               	incf	Console_Init@x& (0+255),f,b
 17257  014F10  D7D2               	goto	l15263
 17258  014F12                     __end_of_Console_Init:
 17259                           	opt stack 0
 17260                           tosu	equ	0xFFF
 17261                           tosh	equ	0xFFE
 17262                           tosl	equ	0xFFD
 17263                           pclath	equ	0xFFA
 17264                           tblptru	equ	0xFF8
 17265                           tblptrh	equ	0xFF7
 17266                           tblptrl	equ	0xFF6
 17267                           tablat	equ	0xFF5
 17268                           prodh	equ	0xFF4
 17269                           prodl	equ	0xFF3
 17270                           intcon	equ	0xFF2
 17271                           indf0	equ	0xFEF
 17272                           postinc0	equ	0xFEE
 17273                           fsr0h	equ	0xFEA
 17274                           fsr0l	equ	0xFE9
 17275                           wreg	equ	0xFE8
 17276                           indf1	equ	0xFE7
 17277                           postdec1	equ	0xFE5
 17278                           fsr1h	equ	0xFE2
 17279                           fsr1l	equ	0xFE1
 17280                           indf2	equ	0xFDF
 17281                           postinc2	equ	0xFDE
 17282                           postdec2	equ	0xFDD
 17283                           plusw2	equ	0xFDB
 17284                           fsr2h	equ	0xFDA
 17285                           fsr2l	equ	0xFD9
 17286                           status	equ	0xFD8
 17287                           
 17288 ;; *************** function _Closest_Object2 *****************
 17289 ;; Defined at:
 17290 ;;		line 362 in file "main.c"
 17291 ;; Parameters:    Size  Location     Type
 17292 ;;		None
 17293 ;; Auto vars:     Size  Location     Type
 17294 ;;		None
 17295 ;; Return value:  Size  Location     Type
 17296 ;;                  1    wreg      void 
 17297 ;; Registers used:
 17298 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17299 ;; Tracked objects:
 17300 ;;		On entry : 0/0
 17301 ;;		On exit  : 0/0
 17302 ;;		Unchanged: 0/0
 17303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17308 ;;Total ram usage:        0 bytes
 17309 ;; Hardware stack levels used:    1
 17310 ;; Hardware stack levels required when called:   13
 17311 ;; This function calls:
 17312 ;;		_ADCAverage
 17313 ;;		_Console_Render
 17314 ;;		_SteppingCW
 17315 ;;		_printf
 17316 ;; This function is called by:
 17317 ;;		_main
 17318 ;; This function uses a non-reentrant model
 17319 ;;
 17320                           
 17321                           	psect	text93
 17322  014B86                     __ptext93:
 17323                           	opt stack 0
 17324  014B86                     _Closest_Object2:
 17325                           	opt stack 17
 17326                           
 17327                           ;main.c: 363: while (!CW_Count <= 0) {
 17328                           
 17329                           ; BSR set to: 0
 17330                           ;incstack = 0
 17331  014B86  D032               	goto	l2217
 17332  014B88                     
 17333                           ;main.c: 364: CW_Count--;
 17334  014B88  0101               	movlb	1	; () banked
 17335  014B8A  0728               	decf	_CW_Count& (0+255),f,b
 17336  014B8C  A0D8               	btfss	status,0,c
 17337  014B8E  0729               	decf	(_CW_Count+1)& (0+255),f,b
 17338                           
 17339                           ; BSR set to: 1
 17340                           ;main.c: 365: printf("%c", (char)35);
 17341  014B90  0EFC               	movlw	low STR_1
 17342  014B92  0100               	movlb	0	; () banked
 17343  014B94  6F75               	movwf	printf@f& (0+255),b
 17344  014B96  0EFF               	movlw	high STR_1
 17345  014B98  6F76               	movwf	(printf@f+1)& (0+255),b
 17346  014B9A  0E00               	movlw	0
 17347  014B9C  6F78               	movwf	(?_printf+3)& (0+255),b
 17348  014B9E  0E23               	movlw	35
 17349  014BA0  6F77               	movwf	(?_printf+2)& (0+255),b
 17350  014BA2  EC4F  F096         	call	_printf	;wreg free
 17351                           
 17352                           ;main.c: 366: printf("Stepped 360 degrees");
 17353  014BA6  0E69               	movlw	low STR_12
 17354  014BA8  0100               	movlb	0	; () banked
 17355  014BAA  6F75               	movwf	printf@f& (0+255),b
 17356  014BAC  0EFF               	movlw	high STR_12
 17357  014BAE  6F76               	movwf	(printf@f+1)& (0+255),b
 17358  014BB0  EC4F  F096         	call	_printf	;wreg free
 17359                           
 17360                           ;main.c: 367: printf("\nThe Closes object (mm): %d", Low_Sensor);
 17361  014BB4  0E0B               	movlw	low STR_13
 17362  014BB6  0100               	movlb	0	; () banked
 17363  014BB8  6F75               	movwf	printf@f& (0+255),b
 17364  014BBA  0EFF               	movlw	high STR_13
 17365  014BBC  6F76               	movwf	(printf@f+1)& (0+255),b
 17366  014BBE  C04A  F077         	movff	_Low_Sensor,?_printf+2
 17367  014BC2  C04B  F078         	movff	_Low_Sensor+1,?_printf+3
 17368  014BC6  EC4F  F096         	call	_printf	;wreg free
 17369                           
 17370                           ;main.c: 368: printf("\nGoing back to: %d", Close_Pos);
 17371  014BCA  0EA3               	movlw	low STR_14
 17372  014BCC  0100               	movlb	0	; () banked
 17373  014BCE  6F75               	movwf	printf@f& (0+255),b
 17374  014BD0  0EFF               	movlw	high STR_14
 17375  014BD2  6F76               	movwf	(printf@f+1)& (0+255),b
 17376  014BD4  C02B  F077         	movff	_Close_Pos,?_printf+2
 17377  014BD8  C02C  F078         	movff	_Close_Pos+1,?_printf+3
 17378  014BDC  EC4F  F096         	call	_printf	;wreg free
 17379                           
 17380                           ;main.c: 369: Console_Render();
 17381  014BE0  EC73  F092         	call	_Console_Render	;wreg free
 17382                           
 17383                           ;main.c: 370: ADCAverage();
 17384  014BE4  ECE5  F088         	call	_ADCAverage	;wreg free
 17385                           
 17386                           ;main.c: 371: SteppingCW();
 17387  014BE8  ECC7  F0AA         	call	_SteppingCW	;wreg free
 17388  014BEC                     l2217:
 17389  014BEC  0101               	movlb	1	; () banked
 17390  014BEE  5128               	movf	_CW_Count& (0+255),w,b
 17391  014BF0  1129               	iorwf	(_CW_Count+1)& (0+255),w,b
 17392  014BF2  A4D8               	btfss	status,2,c
 17393  014BF4  D7C9               	goto	l2218
 17394                           
 17395                           ; BSR set to: 1
 17396                           ;main.c: 372: }
 17397                           ;main.c: 373: RD5 = 0;
 17398  014BF6  9A83               	bcf	3971,5,c	;volatile
 17399                           
 17400                           ;main.c: 374: RD7 = 0;
 17401  014BF8  9E83               	bcf	3971,7,c	;volatile
 17402                           
 17403                           ;main.c: 375: RA2 = 0;
 17404  014BFA  9480               	bcf	3968,2,c	;volatile
 17405                           
 17406                           ;main.c: 376: RA3 = 0;
 17407  014BFC  9680               	bcf	3968,3,c	;volatile
 17408                           
 17409                           ; BSR set to: 1
 17410                           
 17411                           ;main.c: 377: return;
 17412  014BFE  0012               	return		;funcret
 17413  014C00                     __end_of_Closest_Object2:
 17414                           	opt stack 0
 17415                           tosu	equ	0xFFF
 17416                           tosh	equ	0xFFE
 17417                           tosl	equ	0xFFD
 17418                           pclath	equ	0xFFA
 17419                           tblptru	equ	0xFF8
 17420                           tblptrh	equ	0xFF7
 17421                           tblptrl	equ	0xFF6
 17422                           tablat	equ	0xFF5
 17423                           prodh	equ	0xFF4
 17424                           prodl	equ	0xFF3
 17425                           intcon	equ	0xFF2
 17426                           indf0	equ	0xFEF
 17427                           postinc0	equ	0xFEE
 17428                           fsr0h	equ	0xFEA
 17429                           fsr0l	equ	0xFE9
 17430                           wreg	equ	0xFE8
 17431                           indf1	equ	0xFE7
 17432                           postdec1	equ	0xFE5
 17433                           fsr1h	equ	0xFE2
 17434                           fsr1l	equ	0xFE1
 17435                           indf2	equ	0xFDF
 17436                           postinc2	equ	0xFDE
 17437                           postdec2	equ	0xFDD
 17438                           plusw2	equ	0xFDB
 17439                           fsr2h	equ	0xFDA
 17440                           fsr2l	equ	0xFD9
 17441                           status	equ	0xFD8
 17442                           
 17443 ;; *************** function _SteppingCW *****************
 17444 ;; Defined at:
 17445 ;;		line 297 in file "main.c"
 17446 ;; Parameters:    Size  Location     Type
 17447 ;;		None
 17448 ;; Auto vars:     Size  Location     Type
 17449 ;;		None
 17450 ;; Return value:  Size  Location     Type
 17451 ;;                  2  2194[None  ] int 
 17452 ;; Registers used:
 17453 ;;		wreg, status,2, status,0, cstack
 17454 ;; Tracked objects:
 17455 ;;		On entry : 0/0
 17456 ;;		On exit  : 0/0
 17457 ;;		Unchanged: 0/0
 17458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17463 ;;Total ram usage:        0 bytes
 17464 ;; Hardware stack levels used:    1
 17465 ;; Hardware stack levels required when called:    9
 17466 ;; This function calls:
 17467 ;;		_STP1
 17468 ;;		_STP2
 17469 ;;		_STP3
 17470 ;;		_STP4
 17471 ;;		_delay_ms
 17472 ;; This function is called by:
 17473 ;;		_Closest_Object2
 17474 ;;		_Sensor_Observe
 17475 ;; This function uses a non-reentrant model
 17476 ;;
 17477                           
 17478                           	psect	text94
 17479  01558E                     __ptext94:
 17480                           	opt stack 0
 17481  01558E                     _SteppingCW:
 17482                           	opt stack 20
 17483                           
 17484                           ;main.c: 298: STP1();
 17485                           
 17486                           ; BSR set to: 1
 17487                           ;incstack = 0
 17488  01558E  EC66  F0B0         	call	_STP1	;wreg free
 17489                           
 17490                           ;main.c: 299: delay_ms(2);
 17491  015592  0E00               	movlw	0
 17492  015594  0100               	movlb	0	; () banked
 17493  015596  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17494  015598  0E02               	movlw	2
 17495  01559A  6F60               	movwf	delay_ms@ms& (0+255),b
 17496  01559C  ECB4  F0A8         	call	_delay_ms	;wreg free
 17497                           
 17498                           ;main.c: 300: STP2();
 17499  0155A0  EC62  F0B0         	call	_STP2	;wreg free
 17500                           
 17501                           ;main.c: 301: delay_ms(2);
 17502  0155A4  0E00               	movlw	0
 17503  0155A6  0100               	movlb	0	; () banked
 17504  0155A8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17505  0155AA  0E02               	movlw	2
 17506  0155AC  6F60               	movwf	delay_ms@ms& (0+255),b
 17507  0155AE  ECB4  F0A8         	call	_delay_ms	;wreg free
 17508                           
 17509                           ;main.c: 302: STP3();
 17510  0155B2  EC5E  F0B0         	call	_STP3	;wreg free
 17511                           
 17512                           ;main.c: 303: delay_ms(2);
 17513  0155B6  0E00               	movlw	0
 17514  0155B8  0100               	movlb	0	; () banked
 17515  0155BA  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17516  0155BC  0E02               	movlw	2
 17517  0155BE  6F60               	movwf	delay_ms@ms& (0+255),b
 17518  0155C0  ECB4  F0A8         	call	_delay_ms	;wreg free
 17519                           
 17520                           ;main.c: 304: STP4();
 17521  0155C4  EC5A  F0B0         	call	_STP4	;wreg free
 17522                           
 17523                           ;main.c: 305: delay_ms(2);
 17524  0155C8  0E00               	movlw	0
 17525  0155CA  0100               	movlb	0	; () banked
 17526  0155CC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17527  0155CE  0E02               	movlw	2
 17528  0155D0  6F60               	movwf	delay_ms@ms& (0+255),b
 17529  0155D2  ECB4  F0A8         	call	_delay_ms	;wreg free
 17530  0155D6  0012               	return		;funcret
 17531  0155D8                     __end_of_SteppingCW:
 17532                           	opt stack 0
 17533                           tosu	equ	0xFFF
 17534                           tosh	equ	0xFFE
 17535                           tosl	equ	0xFFD
 17536                           pclath	equ	0xFFA
 17537                           tblptru	equ	0xFF8
 17538                           tblptrh	equ	0xFF7
 17539                           tblptrl	equ	0xFF6
 17540                           tablat	equ	0xFF5
 17541                           prodh	equ	0xFF4
 17542                           prodl	equ	0xFF3
 17543                           intcon	equ	0xFF2
 17544                           indf0	equ	0xFEF
 17545                           postinc0	equ	0xFEE
 17546                           fsr0h	equ	0xFEA
 17547                           fsr0l	equ	0xFE9
 17548                           wreg	equ	0xFE8
 17549                           indf1	equ	0xFE7
 17550                           postdec1	equ	0xFE5
 17551                           fsr1h	equ	0xFE2
 17552                           fsr1l	equ	0xFE1
 17553                           indf2	equ	0xFDF
 17554                           postinc2	equ	0xFDE
 17555                           postdec2	equ	0xFDD
 17556                           plusw2	equ	0xFDB
 17557                           fsr2h	equ	0xFDA
 17558                           fsr2l	equ	0xFD9
 17559                           status	equ	0xFD8
 17560                           
 17561 ;; *************** function _Closest_Object *****************
 17562 ;; Defined at:
 17563 ;;		line 410 in file "main.c"
 17564 ;; Parameters:    Size  Location     Type
 17565 ;;		None
 17566 ;; Auto vars:     Size  Location     Type
 17567 ;;		None
 17568 ;; Return value:  Size  Location     Type
 17569 ;;                  1    wreg      void 
 17570 ;; Registers used:
 17571 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17572 ;; Tracked objects:
 17573 ;;		On entry : 0/0
 17574 ;;		On exit  : 0/0
 17575 ;;		Unchanged: 0/0
 17576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17581 ;;Total ram usage:        0 bytes
 17582 ;; Hardware stack levels used:    1
 17583 ;; Hardware stack levels required when called:   13
 17584 ;; This function calls:
 17585 ;;		_ADCAverage
 17586 ;;		_Console_Render
 17587 ;;		_SteppingCCW
 17588 ;;		_printf
 17589 ;; This function is called by:
 17590 ;;		_main
 17591 ;; This function uses a non-reentrant model
 17592 ;;
 17593                           
 17594                           	psect	text95
 17595  0140E6                     __ptext95:
 17596                           	opt stack 0
 17597  0140E6                     _Closest_Object:
 17598                           	opt stack 17
 17599                           
 17600                           ;main.c: 411: printf("%c", (char)35);
 17601                           
 17602                           ;incstack = 0
 17603  0140E6  0EFC               	movlw	low STR_1
 17604  0140E8  0100               	movlb	0	; () banked
 17605  0140EA  6F75               	movwf	printf@f& (0+255),b
 17606  0140EC  0EFF               	movlw	high STR_1
 17607  0140EE  6F76               	movwf	(printf@f+1)& (0+255),b
 17608  0140F0  0E00               	movlw	0
 17609  0140F2  6F78               	movwf	(?_printf+3)& (0+255),b
 17610  0140F4  0E23               	movlw	35
 17611  0140F6  6F77               	movwf	(?_printf+2)& (0+255),b
 17612  0140F8  EC4F  F096         	call	_printf	;wreg free
 17613                           
 17614                           ;main.c: 412: printf("Stepped 360 degrees");
 17615  0140FC  0E69               	movlw	low STR_12
 17616  0140FE  0100               	movlb	0	; () banked
 17617  014100  6F75               	movwf	printf@f& (0+255),b
 17618  014102  0EFF               	movlw	high STR_12
 17619  014104  6F76               	movwf	(printf@f+1)& (0+255),b
 17620  014106  EC4F  F096         	call	_printf	;wreg free
 17621                           
 17622                           ;main.c: 413: printf("\nThe Closes object (mm): %d", Low_Sensor);
 17623  01410A  0E0B               	movlw	low STR_13
 17624  01410C  0100               	movlb	0	; () banked
 17625  01410E  6F75               	movwf	printf@f& (0+255),b
 17626  014110  0EFF               	movlw	high STR_13
 17627  014112  6F76               	movwf	(printf@f+1)& (0+255),b
 17628  014114  C04A  F077         	movff	_Low_Sensor,?_printf+2
 17629  014118  C04B  F078         	movff	_Low_Sensor+1,?_printf+3
 17630  01411C  EC4F  F096         	call	_printf	;wreg free
 17631                           
 17632                           ;main.c: 414: printf("\nGoing back to: %d", Close_Pos);
 17633  014120  0EA3               	movlw	low STR_14
 17634  014122  0100               	movlb	0	; () banked
 17635  014124  6F75               	movwf	printf@f& (0+255),b
 17636  014126  0EFF               	movlw	high STR_14
 17637  014128  6F76               	movwf	(printf@f+1)& (0+255),b
 17638  01412A  C02B  F077         	movff	_Close_Pos,?_printf+2
 17639  01412E  C02C  F078         	movff	_Close_Pos+1,?_printf+3
 17640  014132  EC4F  F096         	call	_printf	;wreg free
 17641                           
 17642                           ;main.c: 415: Console_Render();
 17643  014136  EC73  F092         	call	_Console_Render	;wreg free
 17644                           
 17645                           ;main.c: 416: while (!CCW_Count <= 0) {
 17646  01413A  D020               	goto	l2230
 17647  01413C                     
 17648                           ;main.c: 417: CCW_Count--;
 17649  01413C  0101               	movlb	1	; () banked
 17650  01413E  072A               	decf	_CCW_Count& (0+255),f,b
 17651  014140  A0D8               	btfss	status,0,c
 17652  014142  072B               	decf	(_CCW_Count+1)& (0+255),f,b
 17653                           
 17654                           ; BSR set to: 1
 17655                           ;main.c: 418: printf("%c", (char)35);
 17656  014144  0EFC               	movlw	low STR_1
 17657  014146  0100               	movlb	0	; () banked
 17658  014148  6F75               	movwf	printf@f& (0+255),b
 17659  01414A  0EFF               	movlw	high STR_1
 17660  01414C  6F76               	movwf	(printf@f+1)& (0+255),b
 17661  01414E  0E00               	movlw	0
 17662  014150  6F78               	movwf	(?_printf+3)& (0+255),b
 17663  014152  0E23               	movlw	35
 17664  014154  6F77               	movwf	(?_printf+2)& (0+255),b
 17665  014156  EC4F  F096         	call	_printf	;wreg free
 17666                           
 17667                           ;main.c: 419: printf("\nSteps Travelled: %d", CCW_Count);
 17668  01415A  0E54               	movlw	low STR_29
 17669  01415C  0100               	movlb	0	; () banked
 17670  01415E  6F75               	movwf	printf@f& (0+255),b
 17671  014160  0EFF               	movlw	high STR_29
 17672  014162  6F76               	movwf	(printf@f+1)& (0+255),b
 17673  014164  C12A  F077         	movff	_CCW_Count,?_printf+2
 17674  014168  C12B  F078         	movff	_CCW_Count+1,?_printf+3
 17675  01416C  EC4F  F096         	call	_printf	;wreg free
 17676                           
 17677                           ;main.c: 420: Console_Render();
 17678  014170  EC73  F092         	call	_Console_Render	;wreg free
 17679                           
 17680                           ;main.c: 421: ADCAverage();
 17681  014174  ECE5  F088         	call	_ADCAverage	;wreg free
 17682                           
 17683                           ;main.c: 422: SteppingCCW();
 17684  014178  ECEC  F0AA         	call	_SteppingCCW	;wreg free
 17685  01417C                     l2230:
 17686  01417C  0101               	movlb	1	; () banked
 17687  01417E  512A               	movf	_CCW_Count& (0+255),w,b
 17688  014180  112B               	iorwf	(_CCW_Count+1)& (0+255),w,b
 17689  014182  A4D8               	btfss	status,2,c
 17690  014184  D7DB               	goto	l2231
 17691                           
 17692                           ; BSR set to: 1
 17693                           ;main.c: 423: }
 17694                           ;main.c: 424: RD5 = 0;
 17695  014186  9A83               	bcf	3971,5,c	;volatile
 17696                           
 17697                           ;main.c: 425: RD7 = 0;
 17698  014188  9E83               	bcf	3971,7,c	;volatile
 17699                           
 17700                           ;main.c: 426: RA2 = 0;
 17701  01418A  9480               	bcf	3968,2,c	;volatile
 17702                           
 17703                           ;main.c: 427: RA3 = 0;
 17704  01418C  9680               	bcf	3968,3,c	;volatile
 17705                           
 17706                           ; BSR set to: 1
 17707  01418E  0012               	return		;funcret
 17708  014190                     __end_of_Closest_Object:
 17709                           	opt stack 0
 17710                           tosu	equ	0xFFF
 17711                           tosh	equ	0xFFE
 17712                           tosl	equ	0xFFD
 17713                           pclath	equ	0xFFA
 17714                           tblptru	equ	0xFF8
 17715                           tblptrh	equ	0xFF7
 17716                           tblptrl	equ	0xFF6
 17717                           tablat	equ	0xFF5
 17718                           prodh	equ	0xFF4
 17719                           prodl	equ	0xFF3
 17720                           intcon	equ	0xFF2
 17721                           indf0	equ	0xFEF
 17722                           postinc0	equ	0xFEE
 17723                           fsr0h	equ	0xFEA
 17724                           fsr0l	equ	0xFE9
 17725                           wreg	equ	0xFE8
 17726                           indf1	equ	0xFE7
 17727                           postdec1	equ	0xFE5
 17728                           fsr1h	equ	0xFE2
 17729                           fsr1l	equ	0xFE1
 17730                           indf2	equ	0xFDF
 17731                           postinc2	equ	0xFDE
 17732                           postdec2	equ	0xFDD
 17733                           plusw2	equ	0xFDB
 17734                           fsr2h	equ	0xFDA
 17735                           fsr2l	equ	0xFD9
 17736                           status	equ	0xFD8
 17737                           
 17738 ;; *************** function _printf *****************
 17739 ;; Defined at:
 17740 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 17741 ;; Parameters:    Size  Location     Type
 17742 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 17743 ;;		 -> STR_72(12), STR_71(19), STR_70(19), STR_69(19), 
 17744 ;;		 -> STR_68(19), STR_67(19), STR_66(19), STR_65(19), 
 17745 ;;		 -> STR_64(19), STR_63(16), STR_62(28), STR_61(3), 
 17746 ;;		 -> STR_60(19), STR_59(19), STR_58(19), STR_57(19), 
 17747 ;;		 -> STR_56(19), STR_55(19), STR_54(19), STR_53(19), 
 17748 ;;		 -> STR_52(11), STR_51(23), STR_50(3), STR_49(19), 
 17749 ;;		 -> STR_48(19), STR_47(19), STR_46(19), STR_45(19), 
 17750 ;;		 -> STR_44(19), STR_43(19), STR_42(19), STR_41(22), 
 17751 ;;		 -> STR_40(3), STR_39(19), STR_38(19), STR_37(19), 
 17752 ;;		 -> STR_36(19), STR_35(28), STR_34(28), STR_33(30), 
 17753 ;;		 -> STR_32(28), STR_31(15), STR_30(3), STR_29(21), 
 17754 ;;		 -> STR_28(3), STR_27(19), STR_26(28), STR_25(20), 
 17755 ;;		 -> STR_24(3), STR_23(19), STR_22(19), STR_21(19), 
 17756 ;;		 -> STR_20(19), STR_19(19), STR_18(19), STR_17(19), 
 17757 ;;		 -> STR_16(19), STR_15(3), STR_14(19), STR_13(28), 
 17758 ;;		 -> STR_12(20), STR_11(3), STR_10(19), STR_9(19), 
 17759 ;;		 -> STR_8(19), STR_7(19), STR_6(19), STR_5(19), 
 17760 ;;		 -> STR_4(19), STR_3(16), STR_2(19), STR_1(3), 
 17761 ;; Auto vars:     Size  Location     Type
 17762 ;;  tmpval          4    0        struct .
 17763 ;;  cp              3    0        PTR const unsigned char 
 17764 ;;  val             2   30[BANK0 ] unsigned int 
 17765 ;;  ap              2   28[BANK0 ] PTR void [1]
 17766 ;;		 -> ?_printf(2), 
 17767 ;;  len             2    0        unsigned int 
 17768 ;;  c               1   32[BANK0 ] char 
 17769 ;;  prec            1   27[BANK0 ] char 
 17770 ;;  flag            1   26[BANK0 ] unsigned char 
 17771 ;; Return value:  Size  Location     Type
 17772 ;;                  2   21[BANK0 ] int 
 17773 ;; Registers used:
 17774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17775 ;; Tracked objects:
 17776 ;;		On entry : 0/0
 17777 ;;		On exit  : 0/0
 17778 ;;		Unchanged: 0/0
 17779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17780 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17781 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17782 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17783 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17784 ;;Total ram usage:       12 bytes
 17785 ;; Hardware stack levels used:    1
 17786 ;; Hardware stack levels required when called:   12
 17787 ;; This function calls:
 17788 ;;		___lwdiv
 17789 ;;		___lwmod
 17790 ;;		_putch
 17791 ;; This function is called by:
 17792 ;;		_Sensor_Observe2
 17793 ;;		_Closest_Object2
 17794 ;;		_Sensor_Observe
 17795 ;;		_Closest_Object
 17796 ;;		_main
 17797 ;; This function uses a non-reentrant model
 17798 ;;
 17799                           
 17800                           	psect	text96
 17801  012C9E                     __ptext96:
 17802                           	opt stack 0
 17803  012C9E                     _printf:
 17804                           	opt stack 18
 17805                           
 17806                           ;doprnt.c: 466: va_list ap;
 17807                           ;doprnt.c: 499: signed char c;
 17808                           ;doprnt.c: 506: signed char prec;
 17809                           ;doprnt.c: 508: unsigned char flag;
 17810                           ;doprnt.c: 523: union {
 17811                           ;doprnt.c: 524: unsigned long vd;
 17812                           ;doprnt.c: 525: double integ;
 17813                           ;doprnt.c: 526: } tmpval;
 17814                           ;doprnt.c: 528: unsigned int val;
 17815                           ;doprnt.c: 529: unsigned len;
 17816                           ;doprnt.c: 530: const char * cp;
 17817                           ;doprnt.c: 533: *ap = __va_start();
 17818                           
 17819                           ; BSR set to: 1
 17820                           ;incstack = 0
 17821  012C9E  0E77               	movlw	low (?_printf+2)
 17822  012CA0  0100               	movlb	0	; () banked
 17823  012CA2  6F7C               	movwf	printf@ap& (0+255),b
 17824  012CA4  0E00               	movlw	high (?_printf+2)
 17825  012CA6  6F7D               	movwf	(printf@ap+1)& (0+255),b
 17826                           
 17827                           ;doprnt.c: 536: while(c = *f++) {
 17828  012CA8  D09E               	goto	u12300
 17829  012CAA                     
 17830                           ; BSR set to: 0
 17831                           ;doprnt.c: 538: if(c != '%')
 17832                           
 17833                           ; BSR set to: 0
 17834  012CAA  0E25               	movlw	37
 17835  012CAC  1980               	xorwf	printf@c& (0+255),w,b
 17836  012CAE  B4D8               	btfsc	status,2,c
 17837  012CB0  D004               	goto	l2290
 17838                           
 17839                           ; BSR set to: 0
 17840                           ;doprnt.c: 540: {
 17841                           ;doprnt.c: 541: (putch(c) );
 17842  012CB2  5180               	movf	printf@c& (0+255),w,b
 17843  012CB4  EC21  F0B0         	call	_putch
 17844                           
 17845                           ;doprnt.c: 542: continue;
 17846  012CB8  D096               	goto	u12300
 17847  012CBA                     l2290:
 17848                           
 17849                           ;doprnt.c: 543: }
 17850                           ;doprnt.c: 548: flag = 0;
 17851  012CBA  0E00               	movlw	0
 17852  012CBC  0100               	movlb	0	; () banked
 17853  012CBE  6F7A               	movwf	printf@flag& (0+255),b
 17854                           
 17855                           ;doprnt.c: 635: switch(c = *f++) {
 17856  012CC0  D00E               	goto	l2291
 17857  012CC2                     
 17858                           ; BSR set to: 0
 17859                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 17860                           
 17861                           ; BSR set to: 0
 17862  012CC2  C07C  FFD9         	movff	printf@ap,fsr2l
 17863  012CC6  C07D  FFDA         	movff	printf@ap+1,fsr2h
 17864  012CCA  50DF               	movf	indf2,w,c
 17865  012CCC  6F80               	movwf	printf@c& (0+255),b
 17866                           
 17867                           ; BSR set to: 0
 17868  012CCE  0E02               	movlw	2
 17869  012CD0  277C               	addwf	printf@ap& (0+255),f,b
 17870  012CD2  0E00               	movlw	0
 17871  012CD4  237D               	addwfc	(printf@ap+1)& (0+255),f,b
 17872  012CD6                     
 17873                           ; BSR set to: 0
 17874                           ;doprnt.c: 809: (putch(c) );
 17875                           
 17876                           ; BSR set to: 0
 17877  012CD6  5180               	movf	printf@c& (0+255),w,b
 17878  012CD8  EC21  F0B0         	call	_putch
 17879                           
 17880                           ;doprnt.c: 810: continue;
 17881  012CDC  D084               	goto	u12300
 17882  012CDE                     l2291:
 17883  012CDE  C075  FFF6         	movff	printf@f,tblptrl
 17884  012CE2  C076  FFF7         	movff	printf@f+1,tblptrh
 17885  012CE6  0100               	movlb	0	; () banked
 17886  012CE8  4B75               	infsnz	printf@f& (0+255),f,b
 17887  012CEA  2B76               	incf	(printf@f+1)& (0+255),f,b
 17888  012CEC                     	if	0	;tblptru may be non-zero
 17889  012CEC                     	endif
 17890  012CEC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 17891  012CEC  0E00               	movlw	low (__mediumconst shr (0+16))
 17892  012CEE  6EF8               	movwf	tblptru,c
 17893  012CF0                     	endif
 17894  012CF0  0008               	tblrd		*
 17895  012CF2  CFF5 F080          	movff	tablat,printf@c
 17896  012CF6  5180               	movf	printf@c& (0+255),w,b
 17897                           
 17898                           ; Switch size 1, requested type "space"
 17899                           ; Number of cases is 4, Range of values is 0 to 105
 17900                           ; switch strategies available:
 17901                           ; Name         Instructions Cycles
 17902                           ; simple_byte           13     7 (average)
 17903                           ;	Chosen strategy is simple_byte
 17904  012CF8  0A00               	xorlw	0	; case 0
 17905  012CFA  B4D8               	btfsc	status,2,c
 17906  012CFC  0012               	return	
 17907  012CFE  0A63               	xorlw	99	; case 99
 17908  012D00  B4D8               	btfsc	status,2,c
 17909  012D02  D7DF               	goto	l2297
 17910  012D04  0A07               	xorlw	7	; case 100
 17911  012D06  B4D8               	btfsc	status,2,c
 17912  012D08  D003               	goto	l2296
 17913  012D0A  0A0D               	xorlw	13	; case 105
 17914  012D0C  A4D8               	btfss	status,2,c
 17915  012D0E  D7E3               	goto	l2298
 17916  012D10                     l2296:
 17917                           
 17918                           ;doprnt.c: 1253: {
 17919                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17920                           
 17921                           ; BSR set to: 0
 17922  012D10  C07C  FFD9         	movff	printf@ap,fsr2l
 17923  012D14  C07D  FFDA         	movff	printf@ap+1,fsr2h
 17924  012D18  CFDE F07E          	movff	postinc2,printf@val
 17925  012D1C  CFDD F07F          	movff	postdec2,printf@val+1
 17926  012D20  0E02               	movlw	2
 17927  012D22  0100               	movlb	0	; () banked
 17928  012D24  277C               	addwf	printf@ap& (0+255),f,b
 17929  012D26  0E00               	movlw	0
 17930  012D28  237D               	addwfc	(printf@ap+1)& (0+255),f,b
 17931                           
 17932                           ; BSR set to: 0
 17933                           ;doprnt.c: 1261: if((int)val < 0) {
 17934  012D2A  AF7F               	btfss	(printf@val+1)& (0+255),7,b
 17935  012D2C  D006               	goto	l2299
 17936                           
 17937                           ; BSR set to: 0
 17938                           ;doprnt.c: 1262: flag |= 0x03;
 17939  012D2E  0E03               	movlw	3
 17940  012D30  137A               	iorwf	printf@flag& (0+255),f,b
 17941                           
 17942                           ; BSR set to: 0
 17943                           ;doprnt.c: 1263: val = -val;
 17944  012D32  6D7E               	negf	printf@val& (0+255),b
 17945  012D34  1F7F               	comf	(printf@val+1)& (0+255),f,b
 17946  012D36  B0D8               	btfsc	status,0,c
 17947  012D38  2B7F               	incf	(printf@val+1)& (0+255),f,b
 17948  012D3A                     l2299:
 17949                           
 17950                           ; BSR set to: 0
 17951                           ;doprnt.c: 1264: }
 17952                           ;doprnt.c: 1266: }
 17953                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17954                           
 17955                           ; BSR set to: 0
 17956  012D3A  0E01               	movlw	1
 17957  012D3C  6F80               	movwf	printf@c& (0+255),b
 17958  012D3E                     l15067:
 17959                           
 17960                           ; BSR set to: 0
 17961  012D3E  0E05               	movlw	5
 17962  012D40  1980               	xorwf	printf@c& (0+255),w,b
 17963  012D42  B4D8               	btfsc	status,2,c
 17964  012D44  D015               	goto	u12280
 17965                           
 17966                           ; BSR set to: 0
 17967                           ;doprnt.c: 1306: if(val < dpowers[c])
 17968                           
 17969                           ; BSR set to: 0
 17970                           
 17971                           ; BSR set to: 0
 17972  012D46  5180               	movf	printf@c& (0+255),w,b
 17973  012D48  0D02               	mullw	2
 17974  012D4A  0E29               	movlw	low _dpowers
 17975  012D4C  24F3               	addwf	prodl,w,c
 17976  012D4E  6EF6               	movwf	tblptrl,c
 17977  012D50  0EFC               	movlw	high _dpowers
 17978  012D52  20F4               	addwfc	prodh,w,c
 17979  012D54  6EF7               	movwf	tblptrh,c
 17980  012D56                     	if	1	;There are 3 active tblptr bytes
 17981  012D56  6AF8               	clrf	tblptru,c
 17982  012D58  0E00               	movlw	low (__mediumconst shr (0+16))
 17983  012D5A  22F8               	addwfc	tblptru,f,c
 17984  012D5C                     	endif
 17985  012D5C  0009               	tblrd		*+
 17986  012D5E  50F5               	movf	tablat,w,c
 17987  012D60  5D7E               	subwf	printf@val& (0+255),w,b
 17988  012D62  0009               	tblrd		*+
 17989  012D64  50F5               	movf	tablat,w,c
 17990  012D66  597F               	subwfb	(printf@val+1)& (0+255),w,b
 17991  012D68  A0D8               	btfss	status,0,c
 17992  012D6A  D002               	goto	u12280
 17993                           
 17994                           ; BSR set to: 0
 17995                           
 17996                           ; BSR set to: 0
 17997                           
 17998                           ; BSR set to: 0
 17999                           ;doprnt.c: 1307: break;
 18000  012D6C  2B80               	incf	printf@c& (0+255),f,b
 18001  012D6E  D7E7               	goto	l15067
 18002  012D70                     u12280:
 18003                           
 18004                           ; BSR set to: 0
 18005                           ;doprnt.c: 1422: {
 18006                           ;doprnt.c: 1438: if(flag & 0x03)
 18007                           
 18008                           ; BSR set to: 0
 18009  012D70  C07A  F079         	movff	printf@flag,??_printf
 18010  012D74  0E03               	movlw	3
 18011  012D76  1779               	andwf	??_printf& (0+255),f,b
 18012  012D78  B4D8               	btfsc	status,2,c
 18013  012D7A  D003               	goto	l2303
 18014                           
 18015                           ; BSR set to: 0
 18016                           ;doprnt.c: 1439: (putch('-') );
 18017  012D7C  0E2D               	movlw	45
 18018  012D7E  EC21  F0B0         	call	_putch
 18019  012D82                     l2303:
 18020                           
 18021                           ;doprnt.c: 1469: }
 18022                           ;doprnt.c: 1472: prec = c;
 18023  012D82  C080  F07B         	movff	printf@c,printf@prec
 18024                           
 18025                           ;doprnt.c: 1474: while(prec--) {
 18026  012D86  D02A               	goto	l2304
 18027  012D88                     
 18028                           ;doprnt.c: 1478: {
 18029                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18030  012D88  0100               	movlb	0	; () banked
 18031  012D8A  517B               	movf	printf@prec& (0+255),w,b
 18032  012D8C  0D02               	mullw	2
 18033  012D8E  0E29               	movlw	low _dpowers
 18034  012D90  24F3               	addwf	prodl,w,c
 18035  012D92  6EF6               	movwf	tblptrl,c
 18036  012D94  0EFC               	movlw	high _dpowers
 18037  012D96  20F4               	addwfc	prodh,w,c
 18038  012D98  6EF7               	movwf	tblptrh,c
 18039  012D9A                     	if	1	;There are 3 active tblptr bytes
 18040  012D9A  6AF8               	clrf	tblptru,c
 18041  012D9C  0E00               	movlw	low (__mediumconst shr (0+16))
 18042  012D9E  22F8               	addwfc	tblptru,f,c
 18043  012DA0                     	endif
 18044  012DA0  0009               	tblrd		*+
 18045  012DA2  CFF5 F062          	movff	tablat,___lwdiv@divisor
 18046  012DA6  000A               	tblrd		*-
 18047  012DA8  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
 18048  012DAC  C07E  F060         	movff	printf@val,___lwdiv@dividend
 18049  012DB0  C07F  F061         	movff	printf@val+1,___lwdiv@dividend+1
 18050  012DB4  EC8A  F0A9         	call	___lwdiv	;wreg free
 18051  012DB8  C060  F067         	movff	?___lwdiv,___lwmod@dividend
 18052  012DBC  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
 18053  012DC0  0E00               	movlw	0
 18054  012DC2  0100               	movlb	0	; () banked
 18055  012DC4  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18056  012DC6  0E0A               	movlw	10
 18057  012DC8  6F69               	movwf	___lwmod@divisor& (0+255),b
 18058  012DCA  ECA0  F0AB         	call	___lwmod	;wreg free
 18059  012DCE  0100               	movlb	0	; () banked
 18060  012DD0  5167               	movf	?___lwmod& (0+255),w,b
 18061  012DD2  0F30               	addlw	48
 18062  012DD4  6F80               	movwf	printf@c& (0+255),b
 18063                           
 18064                           ; BSR set to: 0
 18065                           ;doprnt.c: 1523: }
 18066                           ;doprnt.c: 1524: (putch(c) );
 18067  012DD6  5180               	movf	printf@c& (0+255),w,b
 18068  012DD8  EC21  F0B0         	call	_putch
 18069  012DDC                     l2304:
 18070  012DDC  0100               	movlb	0	; () banked
 18071  012DDE  077B               	decf	printf@prec& (0+255),f,b
 18072  012DE0  297B               	incf	printf@prec& (0+255),w,b
 18073  012DE2  A4D8               	btfss	status,2,c
 18074  012DE4  D7D1               	goto	l2305
 18075  012DE6                     u12300:
 18076                           
 18077                           ; BSR set to: 0
 18078                           
 18079                           ; BSR set to: 0
 18080  012DE6  C075  FFF6         	movff	printf@f,tblptrl
 18081  012DEA  C076  FFF7         	movff	printf@f+1,tblptrh
 18082  012DEE  0100               	movlb	0	; () banked
 18083  012DF0  4B75               	infsnz	printf@f& (0+255),f,b
 18084  012DF2  2B76               	incf	(printf@f+1)& (0+255),f,b
 18085  012DF4                     	if	0	;tblptru may be non-zero
 18086  012DF4                     	endif
 18087  012DF4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 18088  012DF4  0E00               	movlw	low (__mediumconst shr (0+16))
 18089  012DF6  6EF8               	movwf	tblptru,c
 18090  012DF8                     	endif
 18091  012DF8  0008               	tblrd		*
 18092  012DFA  CFF5 F080          	movff	tablat,printf@c
 18093  012DFE  5180               	movf	printf@c& (0+255),w,b
 18094  012E00  B4D8               	btfsc	status,2,c
 18095  012E02  0012               	return	
 18096  012E04  D752               	goto	l2289
 18097  012E06                     __end_of_printf:
 18098                           	opt stack 0
 18099                           tosu	equ	0xFFF
 18100                           tosh	equ	0xFFE
 18101                           tosl	equ	0xFFD
 18102                           pclath	equ	0xFFA
 18103                           tblptru	equ	0xFF8
 18104                           tblptrh	equ	0xFF7
 18105                           tblptrl	equ	0xFF6
 18106                           tablat	equ	0xFF5
 18107                           prodh	equ	0xFF4
 18108                           prodl	equ	0xFF3
 18109                           intcon	equ	0xFF2
 18110                           indf0	equ	0xFEF
 18111                           postinc0	equ	0xFEE
 18112                           fsr0h	equ	0xFEA
 18113                           fsr0l	equ	0xFE9
 18114                           wreg	equ	0xFE8
 18115                           indf1	equ	0xFE7
 18116                           postdec1	equ	0xFE5
 18117                           fsr1h	equ	0xFE2
 18118                           fsr1l	equ	0xFE1
 18119                           indf2	equ	0xFDF
 18120                           postinc2	equ	0xFDE
 18121                           postdec2	equ	0xFDD
 18122                           plusw2	equ	0xFDB
 18123                           fsr2h	equ	0xFDA
 18124                           fsr2l	equ	0xFD9
 18125                           status	equ	0xFD8
 18126                           
 18127 ;; *************** function _putch *****************
 18128 ;; Defined at:
 18129 ;;		line 454 in file "Library/Console.c"
 18130 ;; Parameters:    Size  Location     Type
 18131 ;;  c               1    wreg     unsigned char 
 18132 ;; Auto vars:     Size  Location     Type
 18133 ;;  c               1   20[BANK0 ] unsigned char 
 18134 ;; Return value:  Size  Location     Type
 18135 ;;                  1    wreg      void 
 18136 ;; Registers used:
 18137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18138 ;; Tracked objects:
 18139 ;;		On entry : 0/0
 18140 ;;		On exit  : 0/0
 18141 ;;		Unchanged: 0/0
 18142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18144 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18146 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18147 ;;Total ram usage:        1 bytes
 18148 ;; Hardware stack levels used:    1
 18149 ;; Hardware stack levels required when called:   11
 18150 ;; This function calls:
 18151 ;;		_Console_PrintChar
 18152 ;; This function is called by:
 18153 ;;		_printf
 18154 ;; This function uses a non-reentrant model
 18155 ;;
 18156                           
 18157                           	psect	text97
 18158  016042                     __ptext97:
 18159                           	opt stack 0
 18160  016042                     _putch:
 18161                           	opt stack 18
 18162                           
 18163                           ; BSR set to: 0
 18164                           ;incstack = 0
 18165                           ;putch@c stored from wreg
 18166  016042  0100               	movlb	0	; () banked
 18167  016044  6F74               	movwf	putch@c& (0+255),b
 18168                           
 18169                           ;Console.c: 456: Console_PrintChar(c);
 18170  016046  0100               	movlb	0	; () banked
 18171  016048  5174               	movf	putch@c& (0+255),w,b
 18172  01604A  ECAD  F097         	call	_Console_PrintChar
 18173  01604E  0012               	return		;funcret
 18174  016050                     __end_of_putch:
 18175                           	opt stack 0
 18176                           tosu	equ	0xFFF
 18177                           tosh	equ	0xFFE
 18178                           tosl	equ	0xFFD
 18179                           pclath	equ	0xFFA
 18180                           tblptru	equ	0xFF8
 18181                           tblptrh	equ	0xFF7
 18182                           tblptrl	equ	0xFF6
 18183                           tablat	equ	0xFF5
 18184                           prodh	equ	0xFF4
 18185                           prodl	equ	0xFF3
 18186                           intcon	equ	0xFF2
 18187                           indf0	equ	0xFEF
 18188                           postinc0	equ	0xFEE
 18189                           fsr0h	equ	0xFEA
 18190                           fsr0l	equ	0xFE9
 18191                           wreg	equ	0xFE8
 18192                           indf1	equ	0xFE7
 18193                           postdec1	equ	0xFE5
 18194                           fsr1h	equ	0xFE2
 18195                           fsr1l	equ	0xFE1
 18196                           indf2	equ	0xFDF
 18197                           postinc2	equ	0xFDE
 18198                           postdec2	equ	0xFDD
 18199                           plusw2	equ	0xFDB
 18200                           fsr2h	equ	0xFDA
 18201                           fsr2l	equ	0xFD9
 18202                           status	equ	0xFD8
 18203                           
 18204 ;; *************** function _Console_PrintChar *****************
 18205 ;; Defined at:
 18206 ;;		line 322 in file "Library/Console.c"
 18207 ;; Parameters:    Size  Location     Type
 18208 ;;  pInput          1    wreg     unsigned char 
 18209 ;; Auto vars:     Size  Location     Type
 18210 ;;  pInput          1   19[BANK0 ] unsigned char 
 18211 ;; Return value:  Size  Location     Type
 18212 ;;                  1    wreg      void 
 18213 ;; Registers used:
 18214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18215 ;; Tracked objects:
 18216 ;;		On entry : 0/0
 18217 ;;		On exit  : 0/0
 18218 ;;		Unchanged: 0/0
 18219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18221 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18222 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18223 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18224 ;;Total ram usage:        4 bytes
 18225 ;; Hardware stack levels used:    1
 18226 ;; Hardware stack levels required when called:   10
 18227 ;; This function calls:
 18228 ;;		_Console_Backspace
 18229 ;;		_Console_FormFeed
 18230 ;;		_Console_IncrementCursor
 18231 ;;		_Console_NewLine
 18232 ;;		_Console_ResetCursor
 18233 ;;		_Console_Tab
 18234 ;; This function is called by:
 18235 ;;		_putch
 18236 ;;		_Console_PrintString
 18237 ;; This function uses a non-reentrant model
 18238 ;;
 18239                           
 18240                           	psect	text98
 18241  012F5A                     __ptext98:
 18242                           	opt stack 0
 18243  012F5A                     _Console_PrintChar:
 18244                           	opt stack 18
 18245                           
 18246                           ;incstack = 0
 18247                           ;Console_PrintChar@pInput stored from wreg
 18248  012F5A  0100               	movlb	0	; () banked
 18249  012F5C  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
 18250                           
 18251                           ;Console.c: 324: switch(pInput)
 18252  012F5E  D08A               	goto	l1036
 18253  012F60                     
 18254                           ;Console.c: 327: case '\n':
 18255                           ;Console.c: 328: Console_NewLine();
 18256  012F60  EC0B  F0A5         	call	_Console_NewLine	;wreg free
 18257                           
 18258                           ;Console.c: 329: return;
 18259  012F64  0012               	return	
 18260  012F66                     
 18261                           ;Console.c: 331: Console_Backspace();
 18262  012F66  EC2D  F0AA         	call	_Console_Backspace	;wreg free
 18263                           
 18264                           ;Console.c: 332: return;
 18265  012F6A  0012               	return	
 18266  012F6C                     
 18267                           ;Console.c: 334: Console_FormFeed();
 18268  012F6C  ECE8  F0A6         	call	_Console_FormFeed	;wreg free
 18269                           
 18270                           ;Console.c: 335: return;
 18271  012F70  0012               	return	
 18272  012F72                     
 18273                           ;Console.c: 337: Console_Tab();
 18274  012F72  EC5A  F0A2         	call	_Console_Tab	;wreg free
 18275                           
 18276                           ;Console.c: 338: return;
 18277  012F76  0012               	return	
 18278  012F78                     
 18279                           ;Console.c: 340: Console_IncrementCursor();
 18280  012F78  EC0C  F0A9         	call	_Console_IncrementCursor	;wreg free
 18281                           
 18282                           ;Console.c: 341: return;
 18283  012F7C  0012               	return	
 18284  012F7E                     
 18285                           ;Console.c: 343: Console_ResetCursor();
 18286  012F7E  EC0F  F0AF         	call	_Console_ResetCursor	;wreg free
 18287                           
 18288                           ;Console.c: 344: return;
 18289  012F82  0012               	return	
 18290  012F84                     
 18291                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 18292                           
 18293                           ;Console.c: 349: default:
 18294  012F84  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 18295  012F88  0E7F               	movlw	127
 18296  012F8A  0100               	movlb	0	; () banked
 18297  012F8C  1770               	andwf	??_Console_PrintChar& (0+255),f,b
 18298  012F8E  51F3               	movf	_lBufferY& (0+255),w,b
 18299  012F90  0D14               	mullw	20
 18300  012F92  0E18               	movlw	low _lBuffer
 18301  012F94  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18302  012F96  0E03               	movlw	high _lBuffer
 18303  012F98  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
 18304  012F9A  50F3               	movf	prodl,w,c
 18305  012F9C  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 18306  012F9E  50F4               	movf	prodh,w,c
 18307  012FA0  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 18308  012FA2  51F4               	movf	_lBufferX& (0+255),w,b
 18309  012FA4  0D01               	mullw	1
 18310  012FA6  50F3               	movf	prodl,w,c
 18311  012FA8  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 18312  012FAA  6ED9               	movwf	fsr2l,c
 18313  012FAC  50F4               	movf	prodh,w,c
 18314  012FAE  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 18315  012FB0  6EDA               	movwf	fsr2h,c
 18316  012FB2  50DF               	movf	indf2,w,c
 18317  012FB4  0B7F               	andlw	127
 18318  012FB6  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
 18319  012FB8  B4D8               	btfsc	status,2,c
 18320  012FBA  D023               	goto	l1047
 18321                           
 18322                           ; BSR set to: 0
 18323                           ;Console.c: 351: {
 18324                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 18325  012FBC  0E01               	movlw	1
 18326  012FBE  6E4D               	movwf	_change,c
 18327                           
 18328                           ; BSR set to: 0
 18329  012FC0  51F3               	movf	_lBufferY& (0+255),w,b
 18330  012FC2  0D14               	mullw	20
 18331  012FC4  0E18               	movlw	low _lBuffer
 18332  012FC6  6F70               	movwf	??_Console_PrintChar& (0+255),b
 18333  012FC8  0E03               	movlw	high _lBuffer
 18334  012FCA  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18335  012FCC  50F3               	movf	prodl,w,c
 18336  012FCE  2770               	addwf	??_Console_PrintChar& (0+255),f,b
 18337  012FD0  50F4               	movf	prodh,w,c
 18338  012FD2  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 18339  012FD4  51F4               	movf	_lBufferX& (0+255),w,b
 18340  012FD6  0D01               	mullw	1
 18341  012FD8  50F3               	movf	prodl,w,c
 18342  012FDA  2570               	addwf	??_Console_PrintChar& (0+255),w,b
 18343  012FDC  6ED9               	movwf	fsr2l,c
 18344  012FDE  50F4               	movf	prodh,w,c
 18345  012FE0  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 18346  012FE2  6EDA               	movwf	fsr2h,c
 18347  012FE4  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 18348  012FE6  0980               	iorlw	128
 18349  012FE8  6EDF               	movwf	indf2,c
 18350                           
 18351                           ; BSR set to: 0
 18352                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
 18353  012FEA  51F3               	movf	_lBufferY& (0+255),w,b
 18354  012FEC  0D02               	mullw	2
 18355  012FEE  0E64               	movlw	low _lCBuffer
 18356  012FF0  24F3               	addwf	prodl,w,c
 18357  012FF2  6ED9               	movwf	fsr2l,c
 18358  012FF4  0E02               	movlw	high _lCBuffer
 18359  012FF6  20F4               	addwfc	prodh,w,c
 18360  012FF8  6EDA               	movwf	fsr2h,c
 18361  012FFA  C1F3  FFDE         	movff	_gForecolour,postinc2
 18362  012FFE  C1F4  FFDD         	movff	_gForecolour+1,postdec2
 18363  013002                     l1047:
 18364                           
 18365                           ; BSR set to: 0
 18366                           ;Console.c: 354: }
 18367                           ;Console.c: 368: if(Console_IncrementCursor())
 18368                           
 18369                           ; BSR set to: 0
 18370  013002  EC0C  F0A9         	call	_Console_IncrementCursor	;wreg free
 18371  013006  0900               	iorlw	0
 18372  013008  B4D8               	btfsc	status,2,c
 18373  01300A  0012               	return	
 18374                           
 18375                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 18376  01300C  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 18377  013010  0E7F               	movlw	127
 18378  013012  0100               	movlb	0	; () banked
 18379  013014  1770               	andwf	??_Console_PrintChar& (0+255),f,b
 18380  013016  51F3               	movf	_lBufferY& (0+255),w,b
 18381  013018  0D14               	mullw	20
 18382  01301A  0E18               	movlw	low _lBuffer
 18383  01301C  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18384  01301E  0E03               	movlw	high _lBuffer
 18385  013020  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
 18386  013022  50F3               	movf	prodl,w,c
 18387  013024  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 18388  013026  50F4               	movf	prodh,w,c
 18389  013028  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 18390  01302A  51F4               	movf	_lBufferX& (0+255),w,b
 18391  01302C  0D01               	mullw	1
 18392  01302E  50F3               	movf	prodl,w,c
 18393  013030  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 18394  013032  6ED9               	movwf	fsr2l,c
 18395  013034  50F4               	movf	prodh,w,c
 18396  013036  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 18397  013038  6EDA               	movwf	fsr2h,c
 18398  01303A  50DF               	movf	indf2,w,c
 18399  01303C  0B7F               	andlw	127
 18400  01303E  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
 18401  013040  B4D8               	btfsc	status,2,c
 18402  013042  0012               	return	
 18403                           
 18404                           ; BSR set to: 0
 18405                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 18406  013044  0E01               	movlw	1
 18407  013046  6E4D               	movwf	_change,c
 18408                           
 18409                           ; BSR set to: 0
 18410  013048  51F3               	movf	_lBufferY& (0+255),w,b
 18411  01304A  0D14               	mullw	20
 18412  01304C  0E18               	movlw	low _lBuffer
 18413  01304E  6F70               	movwf	??_Console_PrintChar& (0+255),b
 18414  013050  0E03               	movlw	high _lBuffer
 18415  013052  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18416  013054  50F3               	movf	prodl,w,c
 18417  013056  2770               	addwf	??_Console_PrintChar& (0+255),f,b
 18418  013058  50F4               	movf	prodh,w,c
 18419  01305A  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 18420  01305C  51F4               	movf	_lBufferX& (0+255),w,b
 18421  01305E  0D01               	mullw	1
 18422  013060  50F3               	movf	prodl,w,c
 18423  013062  2570               	addwf	??_Console_PrintChar& (0+255),w,b
 18424  013064  6ED9               	movwf	fsr2l,c
 18425  013066  50F4               	movf	prodh,w,c
 18426  013068  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 18427  01306A  6EDA               	movwf	fsr2h,c
 18428  01306C  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 18429  01306E  0980               	iorlw	128
 18430  013070  6EDF               	movwf	indf2,c
 18431                           
 18432                           ; BSR set to: 0
 18433                           ;Console.c: 372: };
 18434                           
 18435                           ; BSR set to: 0
 18436                           ;Console.c: 371: return;
 18437                           
 18438                           ; BSR set to: 0
 18439                           
 18440                           ; BSR set to: 0
 18441  013072  0012               	return	
 18442  013074                     l1036:
 18443                           
 18444                           ; BSR set to: 0
 18445  013074  0100               	movlb	0	; () banked
 18446  013076  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 18447                           
 18448                           ; Switch size 1, requested type "space"
 18449                           ; Number of cases is 8, Range of values is 7 to 35
 18450                           ; switch strategies available:
 18451                           ; Name         Instructions Cycles
 18452                           ; simple_byte           25    13 (average)
 18453                           ;	Chosen strategy is simple_byte
 18454  013078  0A07               	xorlw	7	; case 7
 18455  01307A  B4D8               	btfsc	status,2,c
 18456  01307C  D77D               	goto	l1043
 18457  01307E  0A0F               	xorlw	15	; case 8
 18458  013080  B4D8               	btfsc	status,2,c
 18459  013082  D771               	goto	l1040
 18460  013084  0A01               	xorlw	1	; case 9
 18461  013086  B4D8               	btfsc	status,2,c
 18462  013088  D774               	goto	l1042
 18463  01308A  0A03               	xorlw	3	; case 10
 18464  01308C  B4D8               	btfsc	status,2,c
 18465  01308E  D768               	goto	l1037
 18466  013090  0A06               	xorlw	6	; case 12
 18467  013092  B4D8               	btfsc	status,2,c
 18468  013094  D76B               	goto	l1041
 18469  013096  0A01               	xorlw	1	; case 13
 18470  013098  B4D8               	btfsc	status,2,c
 18471  01309A  D762               	goto	l1037
 18472  01309C  0A2D               	xorlw	45	; case 32
 18473  01309E  B4D8               	btfsc	status,2,c
 18474  0130A0  D771               	goto	l1045
 18475  0130A2  0A03               	xorlw	3	; case 35
 18476  0130A4  B4D8               	btfsc	status,2,c
 18477  0130A6  D76B               	goto	l1044
 18478  0130A8  D76D               	goto	l1045
 18479  0130AA                     __end_of_Console_PrintChar:
 18480                           	opt stack 0
 18481                           tosu	equ	0xFFF
 18482                           tosh	equ	0xFFE
 18483                           tosl	equ	0xFFD
 18484                           pclath	equ	0xFFA
 18485                           tblptru	equ	0xFF8
 18486                           tblptrh	equ	0xFF7
 18487                           tblptrl	equ	0xFF6
 18488                           tablat	equ	0xFF5
 18489                           prodh	equ	0xFF4
 18490                           prodl	equ	0xFF3
 18491                           intcon	equ	0xFF2
 18492                           indf0	equ	0xFEF
 18493                           postinc0	equ	0xFEE
 18494                           fsr0h	equ	0xFEA
 18495                           fsr0l	equ	0xFE9
 18496                           wreg	equ	0xFE8
 18497                           indf1	equ	0xFE7
 18498                           postdec1	equ	0xFE5
 18499                           fsr1h	equ	0xFE2
 18500                           fsr1l	equ	0xFE1
 18501                           indf2	equ	0xFDF
 18502                           postinc2	equ	0xFDE
 18503                           postdec2	equ	0xFDD
 18504                           plusw2	equ	0xFDB
 18505                           fsr2h	equ	0xFDA
 18506                           fsr2l	equ	0xFD9
 18507                           status	equ	0xFD8
 18508                           
 18509 ;; *************** function _Console_Tab *****************
 18510 ;; Defined at:
 18511 ;;		line 260 in file "Library/Console.c"
 18512 ;; Parameters:    Size  Location     Type
 18513 ;;		None
 18514 ;; Auto vars:     Size  Location     Type
 18515 ;;  c               1   15[BANK0 ] unsigned char 
 18516 ;;  i               1   14[BANK0 ] unsigned char 
 18517 ;;  t               1   13[BANK0 ] unsigned char 
 18518 ;; Return value:  Size  Location     Type
 18519 ;;                  1    wreg      void 
 18520 ;; Registers used:
 18521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18522 ;; Tracked objects:
 18523 ;;		On entry : 0/0
 18524 ;;		On exit  : 0/0
 18525 ;;		Unchanged: 0/0
 18526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18528 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18529 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18530 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18531 ;;Total ram usage:        8 bytes
 18532 ;; Hardware stack levels used:    1
 18533 ;; Hardware stack levels required when called:    9
 18534 ;; This function calls:
 18535 ;;		_Console_ClearCursor
 18536 ;;		_Console_IncrementCursor
 18537 ;;		___awdiv
 18538 ;; This function is called by:
 18539 ;;		_Console_PrintChar
 18540 ;; This function uses a non-reentrant model
 18541 ;;
 18542                           
 18543                           	psect	text99
 18544  0144B4                     __ptext99:
 18545                           	opt stack 0
 18546  0144B4                     _Console_Tab:
 18547                           	opt stack 18
 18548                           
 18549                           ;Console.c: 262: UINT8 i = 0;
 18550                           
 18551                           ;incstack = 0
 18552  0144B4  0E00               	movlw	0
 18553  0144B6  0100               	movlb	0	; () banked
 18554  0144B8  6F6E               	movwf	Console_Tab@i& (0+255),b
 18555                           
 18556                           ; BSR set to: 0
 18557                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
 18558  0144BA  0EFA               	movlw	250
 18559  0144BC  2446               	addwf	_gCursor,w,c
 18560  0144BE  6F60               	movwf	___awdiv@dividend& (0+255),b
 18561  0144C0  0EFF               	movlw	255
 18562  0144C2  2047               	addwfc	_gCursor+1,w,c
 18563  0144C4  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
 18564  0144C6  0E00               	movlw	0
 18565  0144C8  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 18566  0144CA  0E06               	movlw	6
 18567  0144CC  6F62               	movwf	___awdiv@divisor& (0+255),b
 18568  0144CE  EC47  F0A4         	call	___awdiv	;wreg free
 18569  0144D2  0100               	movlb	0	; () banked
 18570  0144D4  5160               	movf	?___awdiv& (0+255),w,b
 18571  0144D6  6F6F               	movwf	Console_Tab@c& (0+255),b
 18572                           
 18573                           ; BSR set to: 0
 18574                           ;Console.c: 264: UINT8 t = c/4;
 18575  0144D8  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
 18576  0144DC  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
 18577  0144DE  0E00               	movlw	0
 18578  0144E0  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 18579  0144E2  0E04               	movlw	4
 18580  0144E4  6F62               	movwf	___awdiv@divisor& (0+255),b
 18581  0144E6  EC47  F0A4         	call	___awdiv	;wreg free
 18582  0144EA  0100               	movlb	0	; () banked
 18583  0144EC  5160               	movf	?___awdiv& (0+255),w,b
 18584  0144EE  6F6D               	movwf	Console_Tab@t& (0+255),b
 18585                           
 18586                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
 18587  0144F0  0E00               	movlw	0
 18588  0144F2  6F6E               	movwf	Console_Tab@i& (0+255),b
 18589  0144F4  D006               	goto	l1009
 18590  0144F6                     
 18591                           ; BSR set to: 0
 18592                           ;Console.c: 266: {
 18593                           ;Console.c: 267: Console_ClearCursor();
 18594                           
 18595                           ; BSR set to: 0
 18596  0144F6  ECC7  F0AD         	call	_Console_ClearCursor	;wreg free
 18597                           
 18598                           ;Console.c: 268: Console_IncrementCursor();
 18599  0144FA  EC0C  F0A9         	call	_Console_IncrementCursor	;wreg free
 18600  0144FE  0100               	movlb	0	; () banked
 18601  014500  2B6E               	incf	Console_Tab@i& (0+255),f,b
 18602  014502                     l1009:
 18603                           
 18604                           ; BSR set to: 0
 18605                           
 18606                           ; BSR set to: 0
 18607  014502  516D               	movf	Console_Tab@t& (0+255),w,b
 18608  014504  0D04               	mullw	4
 18609  014506  1EF3               	comf	prodl,f,c
 18610  014508  1EF4               	comf	prodh,f,c
 18611  01450A  4AF3               	infsnz	prodl,f,c
 18612  01450C  2AF4               	incf	prodh,f,c
 18613  01450E  516F               	movf	Console_Tab@c& (0+255),w,b
 18614  014510  6F68               	movwf	??_Console_Tab& (0+255),b
 18615  014512  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
 18616  014514  50F3               	movf	prodl,w,c
 18617  014516  2768               	addwf	??_Console_Tab& (0+255),f,b
 18618  014518  50F4               	movf	prodh,w,c
 18619  01451A  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 18620  01451C  1F68               	comf	??_Console_Tab& (0+255),f,b
 18621  01451E  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
 18622  014520  4B68               	infsnz	??_Console_Tab& (0+255),f,b
 18623  014522  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
 18624  014524  0E04               	movlw	4
 18625  014526  2768               	addwf	??_Console_Tab& (0+255),f,b
 18626  014528  0E00               	movlw	0
 18627  01452A  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 18628  01452C  516E               	movf	Console_Tab@i& (0+255),w,b
 18629  01452E  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
 18630  014530  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
 18631  014532  5168               	movf	??_Console_Tab& (0+255),w,b
 18632  014534  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
 18633  014536  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
 18634  014538  0A80               	xorlw	128
 18635  01453A  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
 18636  01453C  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
 18637  01453E  0A80               	xorlw	128
 18638  014540  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
 18639  014542  B0D8               	btfsc	status,0,c
 18640  014544  0012               	return	
 18641  014546  D7D7               	goto	l1010
 18642  014548                     __end_of_Console_Tab:
 18643                           	opt stack 0
 18644                           tosu	equ	0xFFF
 18645                           tosh	equ	0xFFE
 18646                           tosl	equ	0xFFD
 18647                           pclath	equ	0xFFA
 18648                           tblptru	equ	0xFF8
 18649                           tblptrh	equ	0xFF7
 18650                           tblptrl	equ	0xFF6
 18651                           tablat	equ	0xFF5
 18652                           prodh	equ	0xFF4
 18653                           prodl	equ	0xFF3
 18654                           intcon	equ	0xFF2
 18655                           indf0	equ	0xFEF
 18656                           postinc0	equ	0xFEE
 18657                           fsr0h	equ	0xFEA
 18658                           fsr0l	equ	0xFE9
 18659                           wreg	equ	0xFE8
 18660                           indf1	equ	0xFE7
 18661                           postdec1	equ	0xFE5
 18662                           fsr1h	equ	0xFE2
 18663                           fsr1l	equ	0xFE1
 18664                           indf2	equ	0xFDF
 18665                           postinc2	equ	0xFDE
 18666                           postdec2	equ	0xFDD
 18667                           plusw2	equ	0xFDB
 18668                           fsr2h	equ	0xFDA
 18669                           fsr2l	equ	0xFD9
 18670                           status	equ	0xFD8
 18671                           
 18672 ;; *************** function _Console_IncrementCursor *****************
 18673 ;; Defined at:
 18674 ;;		line 243 in file "Library/Console.c"
 18675 ;; Parameters:    Size  Location     Type
 18676 ;;		None
 18677 ;; Auto vars:     Size  Location     Type
 18678 ;;		None
 18679 ;; Return value:  Size  Location     Type
 18680 ;;                  1    wreg      unsigned char 
 18681 ;; Registers used:
 18682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18683 ;; Tracked objects:
 18684 ;;		On entry : 0/0
 18685 ;;		On exit  : 0/0
 18686 ;;		Unchanged: 0/0
 18687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18690 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18691 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18692 ;;Total ram usage:        2 bytes
 18693 ;; Hardware stack levels used:    1
 18694 ;; Hardware stack levels required when called:    8
 18695 ;; This function calls:
 18696 ;;		_Console_FormFeed
 18697 ;;		_Console_NewLine
 18698 ;; This function is called by:
 18699 ;;		_Console_Tab
 18700 ;;		_Console_PrintChar
 18701 ;; This function uses a non-reentrant model
 18702 ;;
 18703                           
 18704                           	psect	text100
 18705  015218                     __ptext100:
 18706                           	opt stack 0
 18707  015218                     _Console_IncrementCursor:
 18708                           	opt stack 18
 18709                           
 18710                           ;Console.c: 246: lBufferX += 1;
 18711                           
 18712                           ; BSR set to: 0
 18713                           ;incstack = 0
 18714  015218  0100               	movlb	0	; () banked
 18715  01521A  2BF4               	incf	_lBufferX& (0+255),f,b
 18716                           
 18717                           ; BSR set to: 0
 18718                           ;Console.c: 248: gCursor.x += 6;
 18719  01521C  0E06               	movlw	6
 18720  01521E  2646               	addwf	_gCursor,f,c
 18721  015220  0E00               	movlw	0
 18722  015222  2247               	addwfc	_gCursor+1,f,c
 18723                           
 18724                           ; BSR set to: 0
 18725                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
 18726  015224  0E06               	movlw	6
 18727  015226  2446               	addwf	_gCursor,w,c
 18728  015228  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 18729  01522A  0E00               	movlw	0
 18730  01522C  2047               	addwfc	_gCursor+1,w,c
 18731  01522E  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 18732  015230  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 18733  015232  D007               	goto	l1004
 18734  015234  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 18735  015236  E103               	bnz	u9710
 18736  015238  0E80               	movlw	128
 18737  01523A  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 18738  01523C  B0D8               	btfsc	status,0,c
 18739  01523E                     u9710:
 18740                           
 18741                           ; BSR set to: 0
 18742                           ;Console.c: 250: Console_NewLine();
 18743  01523E  EC0B  F0A5         	call	_Console_NewLine	;wreg free
 18744  015242                     l1004:
 18745                           
 18746                           ;Console.c: 251: if (gCursor.y + 8>= 128)
 18747  015242  0E08               	movlw	8
 18748  015244  2448               	addwf	_gCursor+2,w,c
 18749  015246  0100               	movlb	0	; () banked
 18750  015248  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 18751  01524A  0E00               	movlw	0
 18752  01524C  2049               	addwfc	_gCursor+3,w,c
 18753  01524E  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 18754  015250  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 18755  015252  D00A               	goto	l1005
 18756  015254  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 18757  015256  E104               	bnz	u9720
 18758  015258  0E80               	movlw	128
 18759  01525A  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 18760  01525C  A0D8               	btfss	status,0,c
 18761  01525E  D004               	goto	l1005
 18762  015260                     u9720:
 18763                           
 18764                           ; BSR set to: 0
 18765                           ;Console.c: 252: {
 18766                           ;Console.c: 253: Console_FormFeed();
 18767  015260  ECE8  F0A6         	call	_Console_FormFeed	;wreg free
 18768                           
 18769                           ;Console.c: 254: return 1;
 18770  015264  0E01               	movlw	1
 18771  015266  0012               	return	
 18772  015268                     l1005:
 18773                           
 18774                           ;Console.c: 255: }
 18775                           ;Console.c: 257: return 0;
 18776  015268  0E00               	movlw	0
 18777  01526A  0012               	return	
 18778  01526C                     __end_of_Console_IncrementCursor:
 18779                           	opt stack 0
 18780                           tosu	equ	0xFFF
 18781                           tosh	equ	0xFFE
 18782                           tosl	equ	0xFFD
 18783                           pclath	equ	0xFFA
 18784                           tblptru	equ	0xFF8
 18785                           tblptrh	equ	0xFF7
 18786                           tblptrl	equ	0xFF6
 18787                           tablat	equ	0xFF5
 18788                           prodh	equ	0xFF4
 18789                           prodl	equ	0xFF3
 18790                           intcon	equ	0xFF2
 18791                           indf0	equ	0xFEF
 18792                           postinc0	equ	0xFEE
 18793                           fsr0h	equ	0xFEA
 18794                           fsr0l	equ	0xFE9
 18795                           wreg	equ	0xFE8
 18796                           indf1	equ	0xFE7
 18797                           postdec1	equ	0xFE5
 18798                           fsr1h	equ	0xFE2
 18799                           fsr1l	equ	0xFE1
 18800                           indf2	equ	0xFDF
 18801                           postinc2	equ	0xFDE
 18802                           postdec2	equ	0xFDD
 18803                           plusw2	equ	0xFDB
 18804                           fsr2h	equ	0xFDA
 18805                           fsr2l	equ	0xFD9
 18806                           status	equ	0xFD8
 18807                           
 18808 ;; *************** function _Console_NewLine *****************
 18809 ;; Defined at:
 18810 ;;		line 175 in file "Library/Console.c"
 18811 ;; Parameters:    Size  Location     Type
 18812 ;;		None
 18813 ;; Auto vars:     Size  Location     Type
 18814 ;;		None
 18815 ;; Return value:  Size  Location     Type
 18816 ;;                  1    wreg      void 
 18817 ;; Registers used:
 18818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18819 ;; Tracked objects:
 18820 ;;		On entry : 0/0
 18821 ;;		On exit  : 0/0
 18822 ;;		Unchanged: 0/0
 18823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18826 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18827 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18828 ;;Total ram usage:        2 bytes
 18829 ;; Hardware stack levels used:    1
 18830 ;; Hardware stack levels required when called:    7
 18831 ;; This function calls:
 18832 ;;		Nothing
 18833 ;; This function is called by:
 18834 ;;		_Console_IncrementCursor
 18835 ;;		_Console_PrintChar
 18836 ;; This function uses a non-reentrant model
 18837 ;;
 18838                           
 18839                           	psect	text101
 18840  014A16                     __ptext101:
 18841                           	opt stack 0
 18842  014A16                     _Console_NewLine:
 18843                           	opt stack 18
 18844                           
 18845                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
 18846                           
 18847                           ;incstack = 0
 18848  014A16  D02D               	goto	l983
 18849  014A18                     
 18850                           ;Console.c: 179: {
 18851                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
 18852  014A18  0100               	movlb	0	; () banked
 18853  014A1A  51F3               	movf	_lBufferY& (0+255),w,b
 18854  014A1C  0D14               	mullw	20
 18855  014A1E  0E18               	movlw	low _lBuffer
 18856  014A20  6F60               	movwf	??_Console_NewLine& (0+255),b
 18857  014A22  0E03               	movlw	high _lBuffer
 18858  014A24  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 18859  014A26  50F3               	movf	prodl,w,c
 18860  014A28  2760               	addwf	??_Console_NewLine& (0+255),f,b
 18861  014A2A  50F4               	movf	prodh,w,c
 18862  014A2C  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 18863  014A2E  51F4               	movf	_lBufferX& (0+255),w,b
 18864  014A30  0D01               	mullw	1
 18865  014A32  50F3               	movf	prodl,w,c
 18866  014A34  2560               	addwf	??_Console_NewLine& (0+255),w,b
 18867  014A36  6ED9               	movwf	fsr2l,c
 18868  014A38  50F4               	movf	prodh,w,c
 18869  014A3A  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 18870  014A3C  6EDA               	movwf	fsr2h,c
 18871  014A3E  50DF               	movf	indf2,w,c
 18872  014A40  B4D8               	btfsc	status,2,c
 18873  014A42  D016               	goto	l985
 18874                           
 18875                           ; BSR set to: 0
 18876                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
 18877  014A44  0E01               	movlw	1
 18878  014A46  6E4D               	movwf	_change,c
 18879                           
 18880                           ; BSR set to: 0
 18881  014A48  51F3               	movf	_lBufferY& (0+255),w,b
 18882  014A4A  0D14               	mullw	20
 18883  014A4C  0E18               	movlw	low _lBuffer
 18884  014A4E  6F60               	movwf	??_Console_NewLine& (0+255),b
 18885  014A50  0E03               	movlw	high _lBuffer
 18886  014A52  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 18887  014A54  50F3               	movf	prodl,w,c
 18888  014A56  2760               	addwf	??_Console_NewLine& (0+255),f,b
 18889  014A58  50F4               	movf	prodh,w,c
 18890  014A5A  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 18891  014A5C  51F4               	movf	_lBufferX& (0+255),w,b
 18892  014A5E  0D01               	mullw	1
 18893  014A60  50F3               	movf	prodl,w,c
 18894  014A62  2560               	addwf	??_Console_NewLine& (0+255),w,b
 18895  014A64  6ED9               	movwf	fsr2l,c
 18896  014A66  50F4               	movf	prodh,w,c
 18897  014A68  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 18898  014A6A  6EDA               	movwf	fsr2h,c
 18899  014A6C  0E80               	movlw	128
 18900  014A6E  6EDF               	movwf	indf2,c
 18901  014A70                     l985:
 18902                           
 18903                           ; BSR set to: 0
 18904                           ;Console.c: 182: lBufferX ++;
 18905                           
 18906                           ; BSR set to: 0
 18907  014A70  2BF4               	incf	_lBufferX& (0+255),f,b
 18908  014A72                     l983:
 18909                           
 18910                           ; BSR set to: 0
 18911  014A72  0E13               	movlw	19
 18912  014A74  0100               	movlb	0	; () banked
 18913  014A76  65F4               	cpfsgt	_lBufferX& (0+255),b
 18914  014A78  D7CF               	goto	l984
 18915                           
 18916                           ; BSR set to: 0
 18917                           ;Console.c: 183: }
 18918                           ;Console.c: 185: lBufferX = 0;
 18919                           
 18920                           ; BSR set to: 0
 18921  014A7A  0E00               	movlw	0
 18922  014A7C  6FF4               	movwf	_lBufferX& (0+255),b
 18923                           
 18924                           ; BSR set to: 0
 18925                           ;Console.c: 186: lBufferY ++;
 18926  014A7E  2BF3               	incf	_lBufferY& (0+255),f,b
 18927                           
 18928                           ; BSR set to: 0
 18929                           ;Console.c: 188: gCursor.y += 8;
 18930  014A80  0E08               	movlw	8
 18931  014A82  2648               	addwf	_gCursor+2,f,c
 18932  014A84  0E00               	movlw	0
 18933  014A86  2249               	addwfc	_gCursor+3,f,c
 18934                           
 18935                           ; BSR set to: 0
 18936                           ;Console.c: 189: gCursor.x = 6;
 18937  014A88  0E00               	movlw	0
 18938  014A8A  6E47               	movwf	_gCursor+1,c
 18939  014A8C  0E06               	movlw	6
 18940  014A8E  6E46               	movwf	_gCursor,c
 18941                           
 18942                           ; BSR set to: 0
 18943  014A90  0012               	return		;funcret
 18944  014A92                     __end_of_Console_NewLine:
 18945                           	opt stack 0
 18946                           tosu	equ	0xFFF
 18947                           tosh	equ	0xFFE
 18948                           tosl	equ	0xFFD
 18949                           pclath	equ	0xFFA
 18950                           tblptru	equ	0xFF8
 18951                           tblptrh	equ	0xFF7
 18952                           tblptrl	equ	0xFF6
 18953                           tablat	equ	0xFF5
 18954                           prodh	equ	0xFF4
 18955                           prodl	equ	0xFF3
 18956                           intcon	equ	0xFF2
 18957                           indf0	equ	0xFEF
 18958                           postinc0	equ	0xFEE
 18959                           fsr0h	equ	0xFEA
 18960                           fsr0l	equ	0xFE9
 18961                           wreg	equ	0xFE8
 18962                           indf1	equ	0xFE7
 18963                           postdec1	equ	0xFE5
 18964                           fsr1h	equ	0xFE2
 18965                           fsr1l	equ	0xFE1
 18966                           indf2	equ	0xFDF
 18967                           postinc2	equ	0xFDE
 18968                           postdec2	equ	0xFDD
 18969                           plusw2	equ	0xFDB
 18970                           fsr2h	equ	0xFDA
 18971                           fsr2l	equ	0xFD9
 18972                           status	equ	0xFD8
 18973                           
 18974 ;; *************** function _Console_FormFeed *****************
 18975 ;; Defined at:
 18976 ;;		line 192 in file "Library/Console.c"
 18977 ;; Parameters:    Size  Location     Type
 18978 ;;		None
 18979 ;; Auto vars:     Size  Location     Type
 18980 ;;  y               1    3[BANK0 ] unsigned char 
 18981 ;;  x               1    2[BANK0 ] unsigned char 
 18982 ;; Return value:  Size  Location     Type
 18983 ;;                  1    wreg      void 
 18984 ;; Registers used:
 18985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18986 ;; Tracked objects:
 18987 ;;		On entry : 0/0
 18988 ;;		On exit  : 0/0
 18989 ;;		Unchanged: 0/0
 18990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18992 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18993 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18994 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18995 ;;Total ram usage:        4 bytes
 18996 ;; Hardware stack levels used:    1
 18997 ;; Hardware stack levels required when called:    7
 18998 ;; This function calls:
 18999 ;;		Nothing
 19000 ;; This function is called by:
 19001 ;;		_Console_IncrementCursor
 19002 ;;		_Console_PrintChar
 19003 ;; This function uses a non-reentrant model
 19004 ;;
 19005                           
 19006                           	psect	text102
 19007  014DD0                     __ptext102:
 19008                           	opt stack 0
 19009  014DD0                     _Console_FormFeed:
 19010                           	opt stack 18
 19011                           
 19012                           ;Console.c: 195: lBufferX = 0;
 19013                           
 19014                           ; BSR set to: 0
 19015                           ;incstack = 0
 19016  014DD0  0E00               	movlw	0
 19017  014DD2  0100               	movlb	0	; () banked
 19018  014DD4  6FF4               	movwf	_lBufferX& (0+255),b
 19019                           
 19020                           ;Console.c: 196: lBufferY = 0;
 19021  014DD6  0E00               	movlw	0
 19022  014DD8  6FF3               	movwf	_lBufferY& (0+255),b
 19023                           
 19024                           ;Console.c: 197: UINT8 x, y;
 19025                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
 19026  014DDA  0E00               	movlw	0
 19027  014DDC  6F63               	movwf	Console_FormFeed@y& (0+255),b
 19028  014DDE                     l12513:
 19029                           
 19030                           ; BSR set to: 0
 19031  014DDE  0E0E               	movlw	14
 19032  014DE0  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
 19033  014DE2  D001               	goto	l990
 19034  014DE4  D020               	goto	u9640
 19035  014DE6                     l990:
 19036                           
 19037                           ; BSR set to: 0
 19038                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
 19039                           
 19040                           ; BSR set to: 0
 19041  014DE6  0E00               	movlw	0
 19042  014DE8  6F62               	movwf	Console_FormFeed@x& (0+255),b
 19043  014DEA                     l12519:
 19044                           
 19045                           ; BSR set to: 0
 19046  014DEA  0E13               	movlw	19
 19047  014DEC  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
 19048  014DEE  D001               	goto	l992
 19049  014DF0  D018               	goto	u9630
 19050  014DF2                     l992:
 19051                           
 19052                           ; BSR set to: 0
 19053                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
 19054                           
 19055                           ; BSR set to: 0
 19056  014DF2  0E01               	movlw	1
 19057  014DF4  6E4D               	movwf	_change,c
 19058                           
 19059                           ; BSR set to: 0
 19060  014DF6  5163               	movf	Console_FormFeed@y& (0+255),w,b
 19061  014DF8  0D14               	mullw	20
 19062  014DFA  0E18               	movlw	low _lBuffer
 19063  014DFC  6F60               	movwf	??_Console_FormFeed& (0+255),b
 19064  014DFE  0E03               	movlw	high _lBuffer
 19065  014E00  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
 19066  014E02  50F3               	movf	prodl,w,c
 19067  014E04  2760               	addwf	??_Console_FormFeed& (0+255),f,b
 19068  014E06  50F4               	movf	prodh,w,c
 19069  014E08  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
 19070  014E0A  5162               	movf	Console_FormFeed@x& (0+255),w,b
 19071  014E0C  0D01               	mullw	1
 19072  014E0E  50F3               	movf	prodl,w,c
 19073  014E10  2560               	addwf	??_Console_FormFeed& (0+255),w,b
 19074  014E12  6ED9               	movwf	fsr2l,c
 19075  014E14  50F4               	movf	prodh,w,c
 19076  014E16  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
 19077  014E18  6EDA               	movwf	fsr2h,c
 19078  014E1A  0E80               	movlw	128
 19079  014E1C  6EDF               	movwf	indf2,c
 19080                           
 19081                           ; BSR set to: 0
 19082  014E1E  2B62               	incf	Console_FormFeed@x& (0+255),f,b
 19083  014E20  D7E4               	goto	l12519
 19084  014E22                     u9630:
 19085                           
 19086                           ; BSR set to: 0
 19087                           
 19088                           ; BSR set to: 0
 19089  014E22  2B63               	incf	Console_FormFeed@y& (0+255),f,b
 19090  014E24  D7DC               	goto	l12513
 19091  014E26                     u9640:
 19092                           
 19093                           ; BSR set to: 0
 19094                           ;Console.c: 204: clearall = 1;
 19095                           
 19096                           ; BSR set to: 0
 19097  014E26  0E01               	movlw	1
 19098  014E28  6FF5               	movwf	_clearall& (0+255),b
 19099                           
 19100                           ;Console.c: 205: gCursor.x = 6;
 19101  014E2A  0E00               	movlw	0
 19102  014E2C  6E47               	movwf	_gCursor+1,c
 19103  014E2E  0E06               	movlw	6
 19104  014E30  6E46               	movwf	_gCursor,c
 19105                           
 19106                           ;Console.c: 206: gCursor.y = 6;
 19107  014E32  0E00               	movlw	0
 19108  014E34  6E49               	movwf	_gCursor+3,c
 19109  014E36  0E06               	movlw	6
 19110  014E38  6E48               	movwf	_gCursor+2,c
 19111                           
 19112                           ; BSR set to: 0
 19113  014E3A  0012               	return		;funcret
 19114  014E3C                     __end_of_Console_FormFeed:
 19115                           	opt stack 0
 19116                           tosu	equ	0xFFF
 19117                           tosh	equ	0xFFE
 19118                           tosl	equ	0xFFD
 19119                           pclath	equ	0xFFA
 19120                           tblptru	equ	0xFF8
 19121                           tblptrh	equ	0xFF7
 19122                           tblptrl	equ	0xFF6
 19123                           tablat	equ	0xFF5
 19124                           prodh	equ	0xFF4
 19125                           prodl	equ	0xFF3
 19126                           intcon	equ	0xFF2
 19127                           indf0	equ	0xFEF
 19128                           postinc0	equ	0xFEE
 19129                           fsr0h	equ	0xFEA
 19130                           fsr0l	equ	0xFE9
 19131                           wreg	equ	0xFE8
 19132                           indf1	equ	0xFE7
 19133                           postdec1	equ	0xFE5
 19134                           fsr1h	equ	0xFE2
 19135                           fsr1l	equ	0xFE1
 19136                           indf2	equ	0xFDF
 19137                           postinc2	equ	0xFDE
 19138                           postdec2	equ	0xFDD
 19139                           plusw2	equ	0xFDB
 19140                           fsr2h	equ	0xFDA
 19141                           fsr2l	equ	0xFD9
 19142                           status	equ	0xFD8
 19143                           
 19144 ;; *************** function _Console_ResetCursor *****************
 19145 ;; Defined at:
 19146 ;;		line 297 in file "Library/Console.c"
 19147 ;; Parameters:    Size  Location     Type
 19148 ;;		None
 19149 ;; Auto vars:     Size  Location     Type
 19150 ;;		None
 19151 ;; Return value:  Size  Location     Type
 19152 ;;                  1    wreg      void 
 19153 ;; Registers used:
 19154 ;;		wreg, status,2
 19155 ;; Tracked objects:
 19156 ;;		On entry : 0/0
 19157 ;;		On exit  : 0/0
 19158 ;;		Unchanged: 0/0
 19159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19164 ;;Total ram usage:        0 bytes
 19165 ;; Hardware stack levels used:    1
 19166 ;; Hardware stack levels required when called:    7
 19167 ;; This function calls:
 19168 ;;		Nothing
 19169 ;; This function is called by:
 19170 ;;		_Console_PrintChar
 19171 ;; This function uses a non-reentrant model
 19172 ;;
 19173                           
 19174                           	psect	text103
 19175  015E1E                     __ptext103:
 19176                           	opt stack 0
 19177  015E1E                     _Console_ResetCursor:
 19178                           	opt stack 20
 19179                           
 19180                           ;Console.c: 299: gCursor.x = 6;
 19181                           
 19182                           ; BSR set to: 0
 19183                           ;incstack = 0
 19184  015E1E  0E00               	movlw	0
 19185  015E20  6E47               	movwf	_gCursor+1,c
 19186  015E22  0E06               	movlw	6
 19187  015E24  6E46               	movwf	_gCursor,c
 19188                           
 19189                           ;Console.c: 300: gCursor.y = 6;
 19190  015E26  0E00               	movlw	0
 19191  015E28  6E49               	movwf	_gCursor+3,c
 19192  015E2A  0E06               	movlw	6
 19193  015E2C  6E48               	movwf	_gCursor+2,c
 19194                           
 19195                           ;Console.c: 303: lBufferX = 0;
 19196  015E2E  0E00               	movlw	0
 19197  015E30  0100               	movlb	0	; () banked
 19198  015E32  6FF4               	movwf	_lBufferX& (0+255),b
 19199                           
 19200                           ;Console.c: 304: lBufferY = 0;
 19201  015E34  0E00               	movlw	0
 19202  015E36  6FF3               	movwf	_lBufferY& (0+255),b
 19203                           
 19204                           ; BSR set to: 0
 19205  015E38  0012               	return		;funcret
 19206  015E3A                     __end_of_Console_ResetCursor:
 19207                           	opt stack 0
 19208                           tosu	equ	0xFFF
 19209                           tosh	equ	0xFFE
 19210                           tosl	equ	0xFFD
 19211                           pclath	equ	0xFFA
 19212                           tblptru	equ	0xFF8
 19213                           tblptrh	equ	0xFF7
 19214                           tblptrl	equ	0xFF6
 19215                           tablat	equ	0xFF5
 19216                           prodh	equ	0xFF4
 19217                           prodl	equ	0xFF3
 19218                           intcon	equ	0xFF2
 19219                           indf0	equ	0xFEF
 19220                           postinc0	equ	0xFEE
 19221                           fsr0h	equ	0xFEA
 19222                           fsr0l	equ	0xFE9
 19223                           wreg	equ	0xFE8
 19224                           indf1	equ	0xFE7
 19225                           postdec1	equ	0xFE5
 19226                           fsr1h	equ	0xFE2
 19227                           fsr1l	equ	0xFE1
 19228                           indf2	equ	0xFDF
 19229                           postinc2	equ	0xFDE
 19230                           postdec2	equ	0xFDD
 19231                           plusw2	equ	0xFDB
 19232                           fsr2h	equ	0xFDA
 19233                           fsr2l	equ	0xFD9
 19234                           status	equ	0xFD8
 19235                           
 19236 ;; *************** function _Console_Backspace *****************
 19237 ;; Defined at:
 19238 ;;		line 209 in file "Library/Console.c"
 19239 ;; Parameters:    Size  Location     Type
 19240 ;;		None
 19241 ;; Auto vars:     Size  Location     Type
 19242 ;;		None
 19243 ;; Return value:  Size  Location     Type
 19244 ;;                  1    wreg      void 
 19245 ;; Registers used:
 19246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19247 ;; Tracked objects:
 19248 ;;		On entry : 0/0
 19249 ;;		On exit  : 0/0
 19250 ;;		Unchanged: 0/0
 19251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19256 ;;Total ram usage:        0 bytes
 19257 ;; Hardware stack levels used:    1
 19258 ;; Hardware stack levels required when called:    8
 19259 ;; This function calls:
 19260 ;;		_Console_ClearCursor
 19261 ;; This function is called by:
 19262 ;;		_Console_PrintChar
 19263 ;; This function uses a non-reentrant model
 19264 ;;
 19265                           
 19266                           	psect	text104
 19267  01545A                     __ptext104:
 19268                           	opt stack 0
 19269  01545A                     _Console_Backspace:
 19270                           	opt stack 19
 19271                           
 19272                           ;Console.c: 211: if (lBufferX > 0)
 19273                           
 19274                           ; BSR set to: 0
 19275                           ;incstack = 0
 19276  01545A  0100               	movlb	0	; () banked
 19277  01545C  51F4               	movf	_lBufferX& (0+255),w,b
 19278  01545E  B4D8               	btfsc	status,2,c
 19279  015460  D006               	goto	l997
 19280                           
 19281                           ; BSR set to: 0
 19282                           ;Console.c: 212: {
 19283                           ;Console.c: 213: gCursor.x -= 6;
 19284  015462  0EFA               	movlw	250
 19285  015464  2646               	addwf	_gCursor,f,c
 19286  015466  0EFF               	movlw	255
 19287  015468  2247               	addwfc	_gCursor+1,f,c
 19288                           
 19289                           ; BSR set to: 0
 19290                           ;Console.c: 216: lBufferX --;
 19291  01546A  07F4               	decf	_lBufferX& (0+255),f,b
 19292                           
 19293                           ;Console.c: 218: }
 19294  01546C  D01B               	goto	l1000
 19295  01546E                     l997:
 19296                           
 19297                           ; BSR set to: 0
 19298                           ;Console.c: 219: else if (lBufferY > 0)
 19299                           
 19300                           ; BSR set to: 0
 19301  01546E  51F3               	movf	_lBufferY& (0+255),w,b
 19302  015470  B4D8               	btfsc	status,2,c
 19303  015472  D00C               	goto	l999
 19304                           
 19305                           ; BSR set to: 0
 19306                           ;Console.c: 220: {
 19307                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
 19308  015474  0E00               	movlw	0
 19309  015476  6E47               	movwf	_gCursor+1,c
 19310  015478  0E72               	movlw	114
 19311  01547A  6E46               	movwf	_gCursor,c
 19312                           
 19313                           ; BSR set to: 0
 19314                           ;Console.c: 222: gCursor.y -= 8;
 19315  01547C  0EF8               	movlw	248
 19316  01547E  2648               	addwf	_gCursor+2,f,c
 19317  015480  0EFF               	movlw	255
 19318  015482  2249               	addwfc	_gCursor+3,f,c
 19319                           
 19320                           ; BSR set to: 0
 19321                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
 19322  015484  0E13               	movlw	19
 19323  015486  6FF4               	movwf	_lBufferX& (0+255),b
 19324                           
 19325                           ; BSR set to: 0
 19326                           ;Console.c: 226: lBufferY --;
 19327  015488  07F3               	decf	_lBufferY& (0+255),f,b
 19328                           
 19329                           ;Console.c: 228: }
 19330  01548A  D00C               	goto	l1000
 19331  01548C                     l999:
 19332                           
 19333                           ; BSR set to: 0
 19334                           ;Console.c: 229: else
 19335                           ;Console.c: 230: {
 19336                           ;Console.c: 231: gCursor.x = 6;
 19337                           
 19338                           ; BSR set to: 0
 19339  01548C  0E00               	movlw	0
 19340  01548E  6E47               	movwf	_gCursor+1,c
 19341  015490  0E06               	movlw	6
 19342  015492  6E46               	movwf	_gCursor,c
 19343                           
 19344                           ;Console.c: 232: gCursor.y = 6;
 19345  015494  0E00               	movlw	0
 19346  015496  6E49               	movwf	_gCursor+3,c
 19347  015498  0E06               	movlw	6
 19348  01549A  6E48               	movwf	_gCursor+2,c
 19349                           
 19350                           ;Console.c: 235: lBufferX = 0;
 19351  01549C  0E00               	movlw	0
 19352  01549E  6FF4               	movwf	_lBufferX& (0+255),b
 19353                           
 19354                           ;Console.c: 236: lBufferY = 0;
 19355  0154A0  0E00               	movlw	0
 19356  0154A2  6FF3               	movwf	_lBufferY& (0+255),b
 19357  0154A4                     l1000:
 19358                           
 19359                           ; BSR set to: 0
 19360                           ;Console.c: 238: }
 19361                           ;Console.c: 240: Console_ClearCursor();
 19362                           
 19363                           ; BSR set to: 0
 19364                           
 19365                           ; BSR set to: 0
 19366  0154A4  ECC7  F0AD         	call	_Console_ClearCursor	;wreg free
 19367  0154A8  0012               	return		;funcret
 19368  0154AA                     __end_of_Console_Backspace:
 19369                           	opt stack 0
 19370                           tosu	equ	0xFFF
 19371                           tosh	equ	0xFFE
 19372                           tosl	equ	0xFFD
 19373                           pclath	equ	0xFFA
 19374                           tblptru	equ	0xFF8
 19375                           tblptrh	equ	0xFF7
 19376                           tblptrl	equ	0xFF6
 19377                           tablat	equ	0xFF5
 19378                           prodh	equ	0xFF4
 19379                           prodl	equ	0xFF3
 19380                           intcon	equ	0xFF2
 19381                           indf0	equ	0xFEF
 19382                           postinc0	equ	0xFEE
 19383                           fsr0h	equ	0xFEA
 19384                           fsr0l	equ	0xFE9
 19385                           wreg	equ	0xFE8
 19386                           indf1	equ	0xFE7
 19387                           postdec1	equ	0xFE5
 19388                           fsr1h	equ	0xFE2
 19389                           fsr1l	equ	0xFE1
 19390                           indf2	equ	0xFDF
 19391                           postinc2	equ	0xFDE
 19392                           postdec2	equ	0xFDD
 19393                           plusw2	equ	0xFDB
 19394                           fsr2h	equ	0xFDA
 19395                           fsr2l	equ	0xFD9
 19396                           status	equ	0xFD8
 19397                           
 19398 ;; *************** function _Console_ClearCursor *****************
 19399 ;; Defined at:
 19400 ;;		line 308 in file "Library/Console.c"
 19401 ;; Parameters:    Size  Location     Type
 19402 ;;		None
 19403 ;; Auto vars:     Size  Location     Type
 19404 ;;		None
 19405 ;; Return value:  Size  Location     Type
 19406 ;;                  1    wreg      void 
 19407 ;; Registers used:
 19408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19409 ;; Tracked objects:
 19410 ;;		On entry : 0/0
 19411 ;;		On exit  : 0/0
 19412 ;;		Unchanged: 0/0
 19413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19416 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19417 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19418 ;;Total ram usage:        2 bytes
 19419 ;; Hardware stack levels used:    1
 19420 ;; Hardware stack levels required when called:    7
 19421 ;; This function calls:
 19422 ;;		Nothing
 19423 ;; This function is called by:
 19424 ;;		_Console_Backspace
 19425 ;;		_Console_Tab
 19426 ;; This function uses a non-reentrant model
 19427 ;;
 19428                           
 19429                           	psect	text105
 19430  015B8E                     __ptext105:
 19431                           	opt stack 0
 19432  015B8E                     _Console_ClearCursor:
 19433                           	opt stack 19
 19434                           
 19435                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
 19436                           
 19437                           ;incstack = 0
 19438  015B8E  0E01               	movlw	1
 19439  015B90  6E4D               	movwf	_change,c
 19440  015B92  0100               	movlb	0	; () banked
 19441  015B94  51F3               	movf	_lBufferY& (0+255),w,b
 19442  015B96  0D14               	mullw	20
 19443  015B98  0E18               	movlw	low _lBuffer
 19444  015B9A  6F60               	movwf	??_Console_ClearCursor& (0+255),b
 19445  015B9C  0E03               	movlw	high _lBuffer
 19446  015B9E  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
 19447  015BA0  50F3               	movf	prodl,w,c
 19448  015BA2  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
 19449  015BA4  50F4               	movf	prodh,w,c
 19450  015BA6  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
 19451  015BA8  51F4               	movf	_lBufferX& (0+255),w,b
 19452  015BAA  0D01               	mullw	1
 19453  015BAC  50F3               	movf	prodl,w,c
 19454  015BAE  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
 19455  015BB0  6ED9               	movwf	fsr2l,c
 19456  015BB2  50F4               	movf	prodh,w,c
 19457  015BB4  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
 19458  015BB6  6EDA               	movwf	fsr2h,c
 19459  015BB8  0E80               	movlw	128
 19460  015BBA  6EDF               	movwf	indf2,c
 19461                           
 19462                           ; BSR set to: 0
 19463  015BBC  0012               	return		;funcret
 19464  015BBE                     __end_of_Console_ClearCursor:
 19465                           	opt stack 0
 19466                           tosu	equ	0xFFF
 19467                           tosh	equ	0xFFE
 19468                           tosl	equ	0xFFD
 19469                           pclath	equ	0xFFA
 19470                           tblptru	equ	0xFF8
 19471                           tblptrh	equ	0xFF7
 19472                           tblptrl	equ	0xFF6
 19473                           tablat	equ	0xFF5
 19474                           prodh	equ	0xFF4
 19475                           prodl	equ	0xFF3
 19476                           intcon	equ	0xFF2
 19477                           indf0	equ	0xFEF
 19478                           postinc0	equ	0xFEE
 19479                           fsr0h	equ	0xFEA
 19480                           fsr0l	equ	0xFE9
 19481                           wreg	equ	0xFE8
 19482                           indf1	equ	0xFE7
 19483                           postdec1	equ	0xFE5
 19484                           fsr1h	equ	0xFE2
 19485                           fsr1l	equ	0xFE1
 19486                           indf2	equ	0xFDF
 19487                           postinc2	equ	0xFDE
 19488                           postdec2	equ	0xFDD
 19489                           plusw2	equ	0xFDB
 19490                           fsr2h	equ	0xFDA
 19491                           fsr2l	equ	0xFD9
 19492                           status	equ	0xFD8
 19493                           
 19494 ;; *************** function _SteppingCCW *****************
 19495 ;; Defined at:
 19496 ;;		line 286 in file "main.c"
 19497 ;; Parameters:    Size  Location     Type
 19498 ;;		None
 19499 ;; Auto vars:     Size  Location     Type
 19500 ;;		None
 19501 ;; Return value:  Size  Location     Type
 19502 ;;                  2  2191[None  ] int 
 19503 ;; Registers used:
 19504 ;;		wreg, status,2, status,0, cstack
 19505 ;; Tracked objects:
 19506 ;;		On entry : 0/0
 19507 ;;		On exit  : 0/0
 19508 ;;		Unchanged: 0/0
 19509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19514 ;;Total ram usage:        0 bytes
 19515 ;; Hardware stack levels used:    1
 19516 ;; Hardware stack levels required when called:    9
 19517 ;; This function calls:
 19518 ;;		_STP1
 19519 ;;		_STP2
 19520 ;;		_STP3
 19521 ;;		_STP4
 19522 ;;		_delay_ms
 19523 ;; This function is called by:
 19524 ;;		_Sensor_Observe2
 19525 ;;		_Closest_Object
 19526 ;; This function uses a non-reentrant model
 19527 ;;
 19528                           
 19529                           	psect	text106
 19530  0155D8                     __ptext106:
 19531                           	opt stack 0
 19532  0155D8                     _SteppingCCW:
 19533                           	opt stack 20
 19534                           
 19535                           ;main.c: 287: STP4();
 19536                           
 19537                           ; BSR set to: 0
 19538                           ;incstack = 0
 19539  0155D8  EC5A  F0B0         	call	_STP4	;wreg free
 19540                           
 19541                           ;main.c: 288: delay_ms(2);
 19542  0155DC  0E00               	movlw	0
 19543  0155DE  0100               	movlb	0	; () banked
 19544  0155E0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19545  0155E2  0E02               	movlw	2
 19546  0155E4  6F60               	movwf	delay_ms@ms& (0+255),b
 19547  0155E6  ECB4  F0A8         	call	_delay_ms	;wreg free
 19548                           
 19549                           ;main.c: 289: STP3();
 19550  0155EA  EC5E  F0B0         	call	_STP3	;wreg free
 19551                           
 19552                           ;main.c: 290: delay_ms(2);
 19553  0155EE  0E00               	movlw	0
 19554  0155F0  0100               	movlb	0	; () banked
 19555  0155F2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19556  0155F4  0E02               	movlw	2
 19557  0155F6  6F60               	movwf	delay_ms@ms& (0+255),b
 19558  0155F8  ECB4  F0A8         	call	_delay_ms	;wreg free
 19559                           
 19560                           ;main.c: 291: STP2();
 19561  0155FC  EC62  F0B0         	call	_STP2	;wreg free
 19562                           
 19563                           ;main.c: 292: delay_ms(2);
 19564  015600  0E00               	movlw	0
 19565  015602  0100               	movlb	0	; () banked
 19566  015604  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19567  015606  0E02               	movlw	2
 19568  015608  6F60               	movwf	delay_ms@ms& (0+255),b
 19569  01560A  ECB4  F0A8         	call	_delay_ms	;wreg free
 19570                           
 19571                           ;main.c: 293: STP1();
 19572  01560E  EC66  F0B0         	call	_STP1	;wreg free
 19573                           
 19574                           ;main.c: 294: delay_ms(2);
 19575  015612  0E00               	movlw	0
 19576  015614  0100               	movlb	0	; () banked
 19577  015616  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19578  015618  0E02               	movlw	2
 19579  01561A  6F60               	movwf	delay_ms@ms& (0+255),b
 19580  01561C  ECB4  F0A8         	call	_delay_ms	;wreg free
 19581  015620  0012               	return		;funcret
 19582  015622                     __end_of_SteppingCCW:
 19583                           	opt stack 0
 19584                           tosu	equ	0xFFF
 19585                           tosh	equ	0xFFE
 19586                           tosl	equ	0xFFD
 19587                           pclath	equ	0xFFA
 19588                           tblptru	equ	0xFF8
 19589                           tblptrh	equ	0xFF7
 19590                           tblptrl	equ	0xFF6
 19591                           tablat	equ	0xFF5
 19592                           prodh	equ	0xFF4
 19593                           prodl	equ	0xFF3
 19594                           intcon	equ	0xFF2
 19595                           indf0	equ	0xFEF
 19596                           postinc0	equ	0xFEE
 19597                           fsr0h	equ	0xFEA
 19598                           fsr0l	equ	0xFE9
 19599                           wreg	equ	0xFE8
 19600                           indf1	equ	0xFE7
 19601                           postdec1	equ	0xFE5
 19602                           fsr1h	equ	0xFE2
 19603                           fsr1l	equ	0xFE1
 19604                           indf2	equ	0xFDF
 19605                           postinc2	equ	0xFDE
 19606                           postdec2	equ	0xFDD
 19607                           plusw2	equ	0xFDB
 19608                           fsr2h	equ	0xFDA
 19609                           fsr2l	equ	0xFD9
 19610                           status	equ	0xFD8
 19611                           
 19612 ;; *************** function _delay_ms *****************
 19613 ;; Defined at:
 19614 ;;		line 240 in file "Library/Types.c"
 19615 ;; Parameters:    Size  Location     Type
 19616 ;;  ms              2    0[BANK0 ] unsigned short 
 19617 ;; Auto vars:     Size  Location     Type
 19618 ;;  u               4    2[BANK0 ] volatile unsigned long 
 19619 ;; Return value:  Size  Location     Type
 19620 ;;                  1    wreg      void 
 19621 ;; Registers used:
 19622 ;;		wreg, status,2, status,0
 19623 ;; Tracked objects:
 19624 ;;		On entry : 0/0
 19625 ;;		On exit  : 0/0
 19626 ;;		Unchanged: 0/0
 19627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19628 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19629 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19631 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19632 ;;Total ram usage:        6 bytes
 19633 ;; Hardware stack levels used:    1
 19634 ;; Hardware stack levels required when called:    7
 19635 ;; This function calls:
 19636 ;;		Nothing
 19637 ;; This function is called by:
 19638 ;;		_LCD_Reset
 19639 ;;		_LCD_Init
 19640 ;;		_MXK_Init
 19641 ;;		_SteppingCCW
 19642 ;;		_SteppingCW
 19643 ;;		_main
 19644 ;; This function uses a non-reentrant model
 19645 ;;
 19646                           
 19647                           	psect	text107
 19648  015168                     __ptext107:
 19649                           	opt stack 0
 19650  015168                     _delay_ms:
 19651                           	opt stack 23
 19652                           
 19653                           ;Types.c: 242: volatile unsigned long u;
 19654                           ;Types.c: 243: while (ms--)
 19655                           
 19656                           ;incstack = 0
 19657  015168  D01B               	goto	u11200
 19658  01516A                     l13853:
 19659                           
 19660                           ;Types.c: 244: {
 19661                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 19662  01516A  0E00               	movlw	0
 19663  01516C  0100               	movlb	0	; () banked
 19664  01516E  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 19665  015170  0E00               	movlw	0
 19666  015172  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19667  015174  0E00               	movlw	0
 19668  015176  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19669  015178  0E00               	movlw	0
 19670  01517A  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19671  01517C                     l13855:
 19672                           
 19673                           ; BSR set to: 0
 19674  01517C  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 19675  01517E  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 19676  015180  E10F               	bnz	l13861
 19677  015182  0EB0               	movlw	176
 19678  015184  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 19679  015186  0E04               	movlw	4
 19680  015188  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 19681  01518A  B0D8               	btfsc	status,0,c
 19682  01518C  D009               	goto	u11200
 19683                           
 19684                           ; BSR set to: 0
 19685                           
 19686                           ; BSR set to: 0
 19687  01518E  F000               	nop		; ;# 
 19688  015190  0E01               	movlw	1
 19689  015192  0100               	movlb	0	; () banked
 19690  015194  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 19691  015196  0E00               	movlw	0
 19692  015198  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 19693  01519A  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 19694  01519C  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 19695  01519E  D7EE               	goto	l13855
 19696  0151A0                     u11200:
 19697  0151A0                     l13861:
 19698  0151A0  0100               	movlb	0	; () banked
 19699  0151A2  0760               	decf	delay_ms@ms& (0+255),f,b
 19700  0151A4  A0D8               	btfss	status,0,c
 19701  0151A6  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 19702  0151A8  2960               	incf	delay_ms@ms& (0+255),w,b
 19703  0151AA  E1DF               	bnz	l13853
 19704  0151AC  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 19705  0151AE  A4D8               	btfss	status,2,c
 19706  0151B0  D7DC               	goto	l824
 19707                           
 19708                           ; BSR set to: 0
 19709                           ;Types.c: 251: }
 19710                           ;Types.c: 252: }
 19711                           ;Types.c: 253: u = 0x8008;
 19712                           
 19713                           ; BSR set to: 0
 19714  0151B2  0E08               	movlw	8
 19715  0151B4  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 19716  0151B6  0E80               	movlw	128
 19717  0151B8  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19718  0151BA  0E00               	movlw	0
 19719  0151BC  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19720  0151BE  0E00               	movlw	0
 19721  0151C0  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19722                           
 19723                           ; BSR set to: 0
 19724  0151C2  0012               	return		;funcret
 19725  0151C4                     __end_of_delay_ms:
 19726                           	opt stack 0
 19727                           tosu	equ	0xFFF
 19728                           tosh	equ	0xFFE
 19729                           tosl	equ	0xFFD
 19730                           pclath	equ	0xFFA
 19731                           tblptru	equ	0xFF8
 19732                           tblptrh	equ	0xFF7
 19733                           tblptrl	equ	0xFF6
 19734                           tablat	equ	0xFF5
 19735                           prodh	equ	0xFF4
 19736                           prodl	equ	0xFF3
 19737                           intcon	equ	0xFF2
 19738                           indf0	equ	0xFEF
 19739                           postinc0	equ	0xFEE
 19740                           fsr0h	equ	0xFEA
 19741                           fsr0l	equ	0xFE9
 19742                           wreg	equ	0xFE8
 19743                           indf1	equ	0xFE7
 19744                           postdec1	equ	0xFE5
 19745                           fsr1h	equ	0xFE2
 19746                           fsr1l	equ	0xFE1
 19747                           indf2	equ	0xFDF
 19748                           postinc2	equ	0xFDE
 19749                           postdec2	equ	0xFDD
 19750                           plusw2	equ	0xFDB
 19751                           fsr2h	equ	0xFDA
 19752                           fsr2l	equ	0xFD9
 19753                           status	equ	0xFD8
 19754                           
 19755 ;; *************** function _STP4 *****************
 19756 ;; Defined at:
 19757 ;;		line 324 in file "main.c"
 19758 ;; Parameters:    Size  Location     Type
 19759 ;;		None
 19760 ;; Auto vars:     Size  Location     Type
 19761 ;;		None
 19762 ;; Return value:  Size  Location     Type
 19763 ;;                  2  2008[None  ] int 
 19764 ;; Registers used:
 19765 ;;		cstack
 19766 ;; Tracked objects:
 19767 ;;		On entry : 0/0
 19768 ;;		On exit  : 0/0
 19769 ;;		Unchanged: 0/0
 19770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19775 ;;Total ram usage:        0 bytes
 19776 ;; Hardware stack levels used:    1
 19777 ;; Hardware stack levels required when called:    8
 19778 ;; This function calls:
 19779 ;;		_Coil_Setup
 19780 ;; This function is called by:
 19781 ;;		_SteppingCCW
 19782 ;;		_SteppingCW
 19783 ;; This function uses a non-reentrant model
 19784 ;;
 19785                           
 19786                           	psect	text108
 19787  0160B4                     __ptext108:
 19788                           	opt stack 0
 19789  0160B4                     _STP4:
 19790                           	opt stack 20
 19791                           
 19792                           ;main.c: 325: Coil_Setup();
 19793                           
 19794                           ; BSR set to: 0
 19795                           ;incstack = 0
 19796  0160B4  EC01  F0B0         	call	_Coil_Setup	;wreg free
 19797                           
 19798                           ;main.c: 326: RD7 = 1;
 19799  0160B8  8E83               	bsf	3971,7,c	;volatile
 19800  0160BA  0012               	return		;funcret
 19801  0160BC                     __end_of_STP4:
 19802                           	opt stack 0
 19803                           tosu	equ	0xFFF
 19804                           tosh	equ	0xFFE
 19805                           tosl	equ	0xFFD
 19806                           pclath	equ	0xFFA
 19807                           tblptru	equ	0xFF8
 19808                           tblptrh	equ	0xFF7
 19809                           tblptrl	equ	0xFF6
 19810                           tablat	equ	0xFF5
 19811                           prodh	equ	0xFF4
 19812                           prodl	equ	0xFF3
 19813                           intcon	equ	0xFF2
 19814                           indf0	equ	0xFEF
 19815                           postinc0	equ	0xFEE
 19816                           fsr0h	equ	0xFEA
 19817                           fsr0l	equ	0xFE9
 19818                           wreg	equ	0xFE8
 19819                           indf1	equ	0xFE7
 19820                           postdec1	equ	0xFE5
 19821                           fsr1h	equ	0xFE2
 19822                           fsr1l	equ	0xFE1
 19823                           indf2	equ	0xFDF
 19824                           postinc2	equ	0xFDE
 19825                           postdec2	equ	0xFDD
 19826                           plusw2	equ	0xFDB
 19827                           fsr2h	equ	0xFDA
 19828                           fsr2l	equ	0xFD9
 19829                           status	equ	0xFD8
 19830                           
 19831 ;; *************** function _STP3 *****************
 19832 ;; Defined at:
 19833 ;;		line 319 in file "main.c"
 19834 ;; Parameters:    Size  Location     Type
 19835 ;;		None
 19836 ;; Auto vars:     Size  Location     Type
 19837 ;;		None
 19838 ;; Return value:  Size  Location     Type
 19839 ;;                  2  2012[None  ] int 
 19840 ;; Registers used:
 19841 ;;		cstack
 19842 ;; Tracked objects:
 19843 ;;		On entry : 0/0
 19844 ;;		On exit  : 0/0
 19845 ;;		Unchanged: 0/0
 19846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19851 ;;Total ram usage:        0 bytes
 19852 ;; Hardware stack levels used:    1
 19853 ;; Hardware stack levels required when called:    8
 19854 ;; This function calls:
 19855 ;;		_Coil_Setup
 19856 ;; This function is called by:
 19857 ;;		_SteppingCCW
 19858 ;;		_SteppingCW
 19859 ;; This function uses a non-reentrant model
 19860 ;;
 19861                           
 19862                           	psect	text109
 19863  0160BC                     __ptext109:
 19864                           	opt stack 0
 19865  0160BC                     _STP3:
 19866                           	opt stack 20
 19867                           
 19868                           ;main.c: 320: Coil_Setup();
 19869                           
 19870                           ;incstack = 0
 19871  0160BC  EC01  F0B0         	call	_Coil_Setup	;wreg free
 19872                           
 19873                           ;main.c: 321: RD5 = 1;
 19874  0160C0  8A83               	bsf	3971,5,c	;volatile
 19875  0160C2  0012               	return		;funcret
 19876  0160C4                     __end_of_STP3:
 19877                           	opt stack 0
 19878                           tosu	equ	0xFFF
 19879                           tosh	equ	0xFFE
 19880                           tosl	equ	0xFFD
 19881                           pclath	equ	0xFFA
 19882                           tblptru	equ	0xFF8
 19883                           tblptrh	equ	0xFF7
 19884                           tblptrl	equ	0xFF6
 19885                           tablat	equ	0xFF5
 19886                           prodh	equ	0xFF4
 19887                           prodl	equ	0xFF3
 19888                           intcon	equ	0xFF2
 19889                           indf0	equ	0xFEF
 19890                           postinc0	equ	0xFEE
 19891                           fsr0h	equ	0xFEA
 19892                           fsr0l	equ	0xFE9
 19893                           wreg	equ	0xFE8
 19894                           indf1	equ	0xFE7
 19895                           postdec1	equ	0xFE5
 19896                           fsr1h	equ	0xFE2
 19897                           fsr1l	equ	0xFE1
 19898                           indf2	equ	0xFDF
 19899                           postinc2	equ	0xFDE
 19900                           postdec2	equ	0xFDD
 19901                           plusw2	equ	0xFDB
 19902                           fsr2h	equ	0xFDA
 19903                           fsr2l	equ	0xFD9
 19904                           status	equ	0xFD8
 19905                           
 19906 ;; *************** function _STP2 *****************
 19907 ;; Defined at:
 19908 ;;		line 314 in file "main.c"
 19909 ;; Parameters:    Size  Location     Type
 19910 ;;		None
 19911 ;; Auto vars:     Size  Location     Type
 19912 ;;		None
 19913 ;; Return value:  Size  Location     Type
 19914 ;;                  2  2014[None  ] int 
 19915 ;; Registers used:
 19916 ;;		cstack
 19917 ;; Tracked objects:
 19918 ;;		On entry : 0/0
 19919 ;;		On exit  : 0/0
 19920 ;;		Unchanged: 0/0
 19921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19926 ;;Total ram usage:        0 bytes
 19927 ;; Hardware stack levels used:    1
 19928 ;; Hardware stack levels required when called:    8
 19929 ;; This function calls:
 19930 ;;		_Coil_Setup
 19931 ;; This function is called by:
 19932 ;;		_SteppingCCW
 19933 ;;		_SteppingCW
 19934 ;; This function uses a non-reentrant model
 19935 ;;
 19936                           
 19937                           	psect	text110
 19938  0160C4                     __ptext110:
 19939                           	opt stack 0
 19940  0160C4                     _STP2:
 19941                           	opt stack 20
 19942                           
 19943                           ;main.c: 315: Coil_Setup();
 19944                           
 19945                           ;incstack = 0
 19946  0160C4  EC01  F0B0         	call	_Coil_Setup	;wreg free
 19947                           
 19948                           ;main.c: 316: RA3 = 1;
 19949  0160C8  8680               	bsf	3968,3,c	;volatile
 19950  0160CA  0012               	return		;funcret
 19951  0160CC                     __end_of_STP2:
 19952                           	opt stack 0
 19953                           tosu	equ	0xFFF
 19954                           tosh	equ	0xFFE
 19955                           tosl	equ	0xFFD
 19956                           pclath	equ	0xFFA
 19957                           tblptru	equ	0xFF8
 19958                           tblptrh	equ	0xFF7
 19959                           tblptrl	equ	0xFF6
 19960                           tablat	equ	0xFF5
 19961                           prodh	equ	0xFF4
 19962                           prodl	equ	0xFF3
 19963                           intcon	equ	0xFF2
 19964                           indf0	equ	0xFEF
 19965                           postinc0	equ	0xFEE
 19966                           fsr0h	equ	0xFEA
 19967                           fsr0l	equ	0xFE9
 19968                           wreg	equ	0xFE8
 19969                           indf1	equ	0xFE7
 19970                           postdec1	equ	0xFE5
 19971                           fsr1h	equ	0xFE2
 19972                           fsr1l	equ	0xFE1
 19973                           indf2	equ	0xFDF
 19974                           postinc2	equ	0xFDE
 19975                           postdec2	equ	0xFDD
 19976                           plusw2	equ	0xFDB
 19977                           fsr2h	equ	0xFDA
 19978                           fsr2l	equ	0xFD9
 19979                           status	equ	0xFD8
 19980                           
 19981 ;; *************** function _STP1 *****************
 19982 ;; Defined at:
 19983 ;;		line 309 in file "main.c"
 19984 ;; Parameters:    Size  Location     Type
 19985 ;;		None
 19986 ;; Auto vars:     Size  Location     Type
 19987 ;;		None
 19988 ;; Return value:  Size  Location     Type
 19989 ;;                  2  2016[None  ] int 
 19990 ;; Registers used:
 19991 ;;		cstack
 19992 ;; Tracked objects:
 19993 ;;		On entry : 0/0
 19994 ;;		On exit  : 0/0
 19995 ;;		Unchanged: 0/0
 19996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20001 ;;Total ram usage:        0 bytes
 20002 ;; Hardware stack levels used:    1
 20003 ;; Hardware stack levels required when called:    8
 20004 ;; This function calls:
 20005 ;;		_Coil_Setup
 20006 ;; This function is called by:
 20007 ;;		_SteppingCCW
 20008 ;;		_SteppingCW
 20009 ;; This function uses a non-reentrant model
 20010 ;;
 20011                           
 20012                           	psect	text111
 20013  0160CC                     __ptext111:
 20014                           	opt stack 0
 20015  0160CC                     _STP1:
 20016                           	opt stack 20
 20017                           
 20018                           ;main.c: 310: Coil_Setup();
 20019                           
 20020                           ;incstack = 0
 20021  0160CC  EC01  F0B0         	call	_Coil_Setup	;wreg free
 20022                           
 20023                           ;main.c: 311: RA2 = 1;
 20024  0160D0  8480               	bsf	3968,2,c	;volatile
 20025  0160D2  0012               	return		;funcret
 20026  0160D4                     __end_of_STP1:
 20027                           	opt stack 0
 20028                           tosu	equ	0xFFF
 20029                           tosh	equ	0xFFE
 20030                           tosl	equ	0xFFD
 20031                           pclath	equ	0xFFA
 20032                           tblptru	equ	0xFF8
 20033                           tblptrh	equ	0xFF7
 20034                           tblptrl	equ	0xFF6
 20035                           tablat	equ	0xFF5
 20036                           prodh	equ	0xFF4
 20037                           prodl	equ	0xFF3
 20038                           intcon	equ	0xFF2
 20039                           indf0	equ	0xFEF
 20040                           postinc0	equ	0xFEE
 20041                           fsr0h	equ	0xFEA
 20042                           fsr0l	equ	0xFE9
 20043                           wreg	equ	0xFE8
 20044                           indf1	equ	0xFE7
 20045                           postdec1	equ	0xFE5
 20046                           fsr1h	equ	0xFE2
 20047                           fsr1l	equ	0xFE1
 20048                           indf2	equ	0xFDF
 20049                           postinc2	equ	0xFDE
 20050                           postdec2	equ	0xFDD
 20051                           plusw2	equ	0xFDB
 20052                           fsr2h	equ	0xFDA
 20053                           fsr2l	equ	0xFD9
 20054                           status	equ	0xFD8
 20055                           
 20056 ;; *************** function _Coil_Setup *****************
 20057 ;; Defined at:
 20058 ;;		line 275 in file "main.c"
 20059 ;; Parameters:    Size  Location     Type
 20060 ;;		None
 20061 ;; Auto vars:     Size  Location     Type
 20062 ;;		None
 20063 ;; Return value:  Size  Location     Type
 20064 ;;                  1    wreg      void 
 20065 ;; Registers used:
 20066 ;;		None
 20067 ;; Tracked objects:
 20068 ;;		On entry : 0/0
 20069 ;;		On exit  : 0/0
 20070 ;;		Unchanged: 0/0
 20071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20076 ;;Total ram usage:        0 bytes
 20077 ;; Hardware stack levels used:    1
 20078 ;; Hardware stack levels required when called:    7
 20079 ;; This function calls:
 20080 ;;		Nothing
 20081 ;; This function is called by:
 20082 ;;		_STP1
 20083 ;;		_STP2
 20084 ;;		_STP3
 20085 ;;		_STP4
 20086 ;; This function uses a non-reentrant model
 20087 ;;
 20088                           
 20089                           	psect	text112
 20090  016002                     __ptext112:
 20091                           	opt stack 0
 20092  016002                     _Coil_Setup:
 20093                           	opt stack 20
 20094                           
 20095                           ;main.c: 276: TRISA2 = 0;
 20096                           
 20097                           ;incstack = 0
 20098  016002  9492               	bcf	3986,2,c	;volatile
 20099                           
 20100                           ;main.c: 277: TRISA3 = 0;
 20101  016004  9692               	bcf	3986,3,c	;volatile
 20102                           
 20103                           ;main.c: 278: TRISD5 = 0;
 20104  016006  9A95               	bcf	3989,5,c	;volatile
 20105                           
 20106                           ;main.c: 279: TRISD7 = 0;
 20107  016008  9E95               	bcf	3989,7,c	;volatile
 20108                           
 20109                           ;main.c: 280: RD5 = 0;
 20110  01600A  9A83               	bcf	3971,5,c	;volatile
 20111                           
 20112                           ;main.c: 281: RD7 = 0;
 20113  01600C  9E83               	bcf	3971,7,c	;volatile
 20114                           
 20115                           ;main.c: 282: RA2 = 0;
 20116  01600E  9480               	bcf	3968,2,c	;volatile
 20117                           
 20118                           ;main.c: 283: RA3 = 0;
 20119  016010  9680               	bcf	3968,3,c	;volatile
 20120  016012  0012               	return		;funcret
 20121  016014                     __end_of_Coil_Setup:
 20122                           	opt stack 0
 20123                           tosu	equ	0xFFF
 20124                           tosh	equ	0xFFE
 20125                           tosl	equ	0xFFD
 20126                           pclath	equ	0xFFA
 20127                           tblptru	equ	0xFF8
 20128                           tblptrh	equ	0xFF7
 20129                           tblptrl	equ	0xFF6
 20130                           tablat	equ	0xFF5
 20131                           prodh	equ	0xFF4
 20132                           prodl	equ	0xFF3
 20133                           intcon	equ	0xFF2
 20134                           indf0	equ	0xFEF
 20135                           postinc0	equ	0xFEE
 20136                           fsr0h	equ	0xFEA
 20137                           fsr0l	equ	0xFE9
 20138                           wreg	equ	0xFE8
 20139                           indf1	equ	0xFE7
 20140                           postdec1	equ	0xFE5
 20141                           fsr1h	equ	0xFE2
 20142                           fsr1l	equ	0xFE1
 20143                           indf2	equ	0xFDF
 20144                           postinc2	equ	0xFDE
 20145                           postdec2	equ	0xFDD
 20146                           plusw2	equ	0xFDB
 20147                           fsr2h	equ	0xFDA
 20148                           fsr2l	equ	0xFD9
 20149                           status	equ	0xFD8
 20150                           
 20151 ;; *************** function _Console_Render *****************
 20152 ;; Defined at:
 20153 ;;		line 377 in file "Library/Console.c"
 20154 ;; Parameters:    Size  Location     Type
 20155 ;;		None
 20156 ;; Auto vars:     Size  Location     Type
 20157 ;;  lCursor         4   38[BANK0 ] struct Point
 20158 ;;  y               1   43[BANK0 ] unsigned char 
 20159 ;;  x               1   42[BANK0 ] unsigned char 
 20160 ;;  temp            1   37[BANK0 ] unsigned char 
 20161 ;;  Temp            2    0        unsigned short 
 20162 ;; Return value:  Size  Location     Type
 20163 ;;                  1    wreg      void 
 20164 ;; Registers used:
 20165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20166 ;; Tracked objects:
 20167 ;;		On entry : 0/0
 20168 ;;		On exit  : 0/0
 20169 ;;		Unchanged: 0/0
 20170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20172 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20173 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20174 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20175 ;;Total ram usage:        9 bytes
 20176 ;; Hardware stack levels used:    1
 20177 ;; Hardware stack levels required when called:   11
 20178 ;; This function calls:
 20179 ;;		_Console_MakeField
 20180 ;;		_LCD_DrawField
 20181 ;;		_LCD_FillRectangle
 20182 ;; This function is called by:
 20183 ;;		_Sensor_Observe2
 20184 ;;		_Closest_Object2
 20185 ;;		_Sensor_Observe
 20186 ;;		_Closest_Object
 20187 ;;		_main
 20188 ;; This function uses a non-reentrant model
 20189 ;;
 20190                           
 20191                           	psect	text113
 20192  0124E6                     __ptext113:
 20193                           	opt stack 0
 20194  0124E6                     _Console_Render:
 20195                           	opt stack 18
 20196                           
 20197                           ;Console.c: 379: Colour Temp;
 20198                           ;Console.c: 380: if (change)
 20199                           
 20200                           ;incstack = 0
 20201  0124E6  504D               	movf	_change,w,c
 20202  0124E8  B4D8               	btfsc	status,2,c
 20203  0124EA  0012               	return	
 20204                           
 20205                           ;Console.c: 381: {
 20206                           ;Console.c: 382: UINT8 x, y, temp;
 20207                           ;Console.c: 383: Point lCursor = {6,6};
 20208  0124EC  C1E1  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 20209  0124F0  C1E2  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 20210  0124F4  C1E3  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 20211  0124F8  C1E4  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 20212                           
 20213                           ;Console.c: 385: if (clearall)
 20214  0124FC  0100               	movlb	0	; () banked
 20215  0124FE  51F5               	movf	_clearall& (0+255),w,b
 20216  012500  B4D8               	btfsc	status,2,c
 20217  012502  D004               	goto	l1056
 20218                           
 20219                           ; BSR set to: 0
 20220                           ;Console.c: 386: {
 20221                           ;Console.c: 389: temp = lBufferY;
 20222  012504  C0F3  F085         	movff	_lBufferY,Console_Render@temp
 20223                           
 20224                           ; BSR set to: 0
 20225                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 20226  012508  0E0F               	movlw	15
 20227  01250A  6FF3               	movwf	_lBufferY& (0+255),b
 20228  01250C                     l1056:
 20229                           
 20230                           ; BSR set to: 0
 20231                           ;Console.c: 391: }
 20232                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 20233  01250C  0E00               	movlw	0
 20234  01250E  6F8B               	movwf	Console_Render@y& (0+255),b
 20235  012510  D0B9               	goto	l1057
 20236  012512                     
 20237                           ; BSR set to: 0
 20238                           ;Console.c: 394: {
 20239                           ;Console.c: 395: gForecolour = lCBuffer[y];
 20240                           
 20241                           ; BSR set to: 0
 20242  012512  518B               	movf	Console_Render@y& (0+255),w,b
 20243  012514  0D02               	mullw	2
 20244  012516  0E64               	movlw	low _lCBuffer
 20245  012518  24F3               	addwf	prodl,w,c
 20246  01251A  6ED9               	movwf	fsr2l,c
 20247  01251C  0E02               	movlw	high _lCBuffer
 20248  01251E  20F4               	addwfc	prodh,w,c
 20249  012520  6EDA               	movwf	fsr2h,c
 20250  012522  CFDE F1F3          	movff	postinc2,_gForecolour
 20251  012526  CFDD F1F4          	movff	postdec2,_gForecolour+1
 20252                           
 20253                           ; BSR set to: 0
 20254                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 20255  01252A  0E00               	movlw	0
 20256  01252C  6F8A               	movwf	Console_Render@x& (0+255),b
 20257  01252E                     l14885:
 20258                           
 20259                           ; BSR set to: 0
 20260  01252E  0E13               	movlw	19
 20261  012530  658A               	cpfsgt	Console_Render@x& (0+255),b
 20262  012532  D001               	goto	l1059
 20263  012534  D09E               	goto	u12140
 20264  012536                     l1059:
 20265                           
 20266                           ; BSR set to: 0
 20267                           ;Console.c: 397: {
 20268                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 20269                           
 20270                           ; BSR set to: 0
 20271  012536  518B               	movf	Console_Render@y& (0+255),w,b
 20272  012538  0D14               	mullw	20
 20273  01253A  0E18               	movlw	low _lBuffer
 20274  01253C  6F83               	movwf	??_Console_Render& (0+255),b
 20275  01253E  0E03               	movlw	high _lBuffer
 20276  012540  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20277  012542  50F3               	movf	prodl,w,c
 20278  012544  2783               	addwf	??_Console_Render& (0+255),f,b
 20279  012546  50F4               	movf	prodh,w,c
 20280  012548  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20281  01254A  518A               	movf	Console_Render@x& (0+255),w,b
 20282  01254C  0D01               	mullw	1
 20283  01254E  50F3               	movf	prodl,w,c
 20284  012550  2583               	addwf	??_Console_Render& (0+255),w,b
 20285  012552  6ED9               	movwf	fsr2l,c
 20286  012554  50F4               	movf	prodh,w,c
 20287  012556  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20288  012558  6EDA               	movwf	fsr2h,c
 20289  01255A  AEDF               	btfss	indf2,7,c
 20290  01255C  D083               	goto	l1063
 20291                           
 20292                           ; BSR set to: 0
 20293                           ;Console.c: 399: {
 20294                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 20295  01255E  518B               	movf	Console_Render@y& (0+255),w,b
 20296  012560  0D14               	mullw	20
 20297  012562  0E18               	movlw	low _lBuffer
 20298  012564  6F83               	movwf	??_Console_Render& (0+255),b
 20299  012566  0E03               	movlw	high _lBuffer
 20300  012568  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20301  01256A  50F3               	movf	prodl,w,c
 20302  01256C  2783               	addwf	??_Console_Render& (0+255),f,b
 20303  01256E  50F4               	movf	prodh,w,c
 20304  012570  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20305  012572  518A               	movf	Console_Render@x& (0+255),w,b
 20306  012574  0D01               	mullw	1
 20307  012576  50F3               	movf	prodl,w,c
 20308  012578  2583               	addwf	??_Console_Render& (0+255),w,b
 20309  01257A  6ED9               	movwf	fsr2l,c
 20310  01257C  50F4               	movf	prodh,w,c
 20311  01257E  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20312  012580  6EDA               	movwf	fsr2h,c
 20313  012582  0E7F               	movlw	127
 20314  012584  16DF               	andwf	indf2,f,c
 20315                           
 20316                           ;Console.c: 401: if (lBuffer[y][x])
 20317  012586  518B               	movf	Console_Render@y& (0+255),w,b
 20318  012588  0D14               	mullw	20
 20319  01258A  0E18               	movlw	low _lBuffer
 20320  01258C  6F83               	movwf	??_Console_Render& (0+255),b
 20321  01258E  0E03               	movlw	high _lBuffer
 20322  012590  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20323  012592  50F3               	movf	prodl,w,c
 20324  012594  2783               	addwf	??_Console_Render& (0+255),f,b
 20325  012596  50F4               	movf	prodh,w,c
 20326  012598  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20327  01259A  518A               	movf	Console_Render@x& (0+255),w,b
 20328  01259C  0D01               	mullw	1
 20329  01259E  50F3               	movf	prodl,w,c
 20330  0125A0  2583               	addwf	??_Console_Render& (0+255),w,b
 20331  0125A2  6ED9               	movwf	fsr2l,c
 20332  0125A4  50F4               	movf	prodh,w,c
 20333  0125A6  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20334  0125A8  6EDA               	movwf	fsr2h,c
 20335  0125AA  50DF               	movf	indf2,w,c
 20336  0125AC  B4D8               	btfsc	status,2,c
 20337  0125AE  D043               	goto	l1062
 20338                           
 20339                           ; BSR set to: 0
 20340                           ;Console.c: 402: {
 20341                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 20342  0125B0  C035  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 20343  0125B4  C036  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 20344  0125B8  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20345  0125BC  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20346  0125C0  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20347  0125C4  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20348  0125C8  C1E9  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 20349  0125CC  C1EA  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20350  0125D0  C1EB  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20351  0125D4  C1EC  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20352  0125D8  EC36  F0A9         	call	_LCD_FillRectangle	;wreg free
 20353                           
 20354                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 20355  0125DC  0100               	movlb	0	; () banked
 20356  0125DE  518B               	movf	Console_Render@y& (0+255),w,b
 20357  0125E0  0D14               	mullw	20
 20358  0125E2  0E18               	movlw	low _lBuffer
 20359  0125E4  6F83               	movwf	??_Console_Render& (0+255),b
 20360  0125E6  0E03               	movlw	high _lBuffer
 20361  0125E8  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20362  0125EA  50F3               	movf	prodl,w,c
 20363  0125EC  2783               	addwf	??_Console_Render& (0+255),f,b
 20364  0125EE  50F4               	movf	prodh,w,c
 20365  0125F0  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20366  0125F2  518A               	movf	Console_Render@x& (0+255),w,b
 20367  0125F4  0D01               	mullw	1
 20368  0125F6  50F3               	movf	prodl,w,c
 20369  0125F8  2583               	addwf	??_Console_Render& (0+255),w,b
 20370  0125FA  6ED9               	movwf	fsr2l,c
 20371  0125FC  50F4               	movf	prodh,w,c
 20372  0125FE  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20373  012600  6EDA               	movwf	fsr2h,c
 20374  012602  50DF               	movf	indf2,w,c
 20375  012604  EC1D  F0A1         	call	_Console_MakeField
 20376  012608  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 20377  01260C  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 20378  012610  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 20379  012614  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 20380  012618  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 20381  01261C  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 20382  012620  C1E9  F078         	movff	_gCharSize,LCD_DrawField@pSize
 20383  012624  C1EA  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 20384  012628  C1EB  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 20385  01262C  C1EC  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 20386  012630  ECCC  F0A4         	call	_LCD_DrawField	;wreg free
 20387                           
 20388                           ;Console.c: 405: }
 20389  012634  D017               	goto	l1063
 20390  012636                     l1062:
 20391                           
 20392                           ;Console.c: 406: else
 20393                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 20394  012636  0E00               	movlw	0
 20395  012638  0100               	movlb	0	; () banked
 20396  01263A  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 20397  01263C  0E00               	movlw	0
 20398  01263E  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 20399  012640  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20400  012644  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20401  012648  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20402  01264C  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20403  012650  C1E9  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 20404  012654  C1EA  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20405  012658  C1EB  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20406  01265C  C1EC  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20407  012660  EC36  F0A9         	call	_LCD_FillRectangle	;wreg free
 20408  012664                     l1063:
 20409                           
 20410                           ;Console.c: 408: }
 20411                           ;Console.c: 409: lCursor.x += (5 + 1);
 20412  012664  0E06               	movlw	6
 20413  012666  0100               	movlb	0	; () banked
 20414  012668  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 20415  01266A  0E00               	movlw	0
 20416  01266C  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 20417                           
 20418                           ; BSR set to: 0
 20419  01266E  2B8A               	incf	Console_Render@x& (0+255),f,b
 20420  012670  D75E               	goto	l14885
 20421  012672                     u12140:
 20422                           
 20423                           ; BSR set to: 0
 20424                           ;Console.c: 410: }
 20425                           ;Console.c: 411: lCursor.y += (7 + 1);
 20426                           
 20427                           ; BSR set to: 0
 20428  012672  0E08               	movlw	8
 20429  012674  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 20430  012676  0E00               	movlw	0
 20431  012678  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 20432                           
 20433                           ; BSR set to: 0
 20434                           ;Console.c: 412: lCursor.x = 6;
 20435  01267A  0E00               	movlw	0
 20436  01267C  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 20437  01267E  0E06               	movlw	6
 20438  012680  6F86               	movwf	Console_Render@lCursor& (0+255),b
 20439                           
 20440                           ; BSR set to: 0
 20441  012682  2B8B               	incf	Console_Render@y& (0+255),f,b
 20442  012684                     l1057:
 20443                           
 20444                           ; BSR set to: 0
 20445                           
 20446                           ; BSR set to: 0
 20447  012684  518B               	movf	Console_Render@y& (0+255),w,b
 20448  012686  5DF3               	subwf	_lBufferY& (0+255),w,b
 20449  012688  B0D8               	btfsc	status,0,c
 20450  01268A  D743               	goto	l1058
 20451                           
 20452                           ; BSR set to: 0
 20453                           ;Console.c: 413: }
 20454                           ;Console.c: 415: if (clearall)
 20455                           
 20456                           ; BSR set to: 0
 20457  01268C  51F5               	movf	_clearall& (0+255),w,b
 20458  01268E  B4D8               	btfsc	status,2,c
 20459  012690  0012               	return	
 20460                           
 20461                           ; BSR set to: 0
 20462                           ;Console.c: 416: {
 20463                           ;Console.c: 417: clearall = 0;
 20464  012692  0E00               	movlw	0
 20465  012694  6FF5               	movwf	_clearall& (0+255),b
 20466                           
 20467                           ; BSR set to: 0
 20468                           ;Console.c: 418: lBufferY = temp;
 20469  012696  C085  F0F3         	movff	Console_Render@temp,_lBufferY
 20470                           
 20471                           ; BSR set to: 0
 20472  01269A  0012               	return	
 20473  01269C                     __end_of_Console_Render:
 20474                           	opt stack 0
 20475                           tosu	equ	0xFFF
 20476                           tosh	equ	0xFFE
 20477                           tosl	equ	0xFFD
 20478                           pclath	equ	0xFFA
 20479                           tblptru	equ	0xFF8
 20480                           tblptrh	equ	0xFF7
 20481                           tblptrl	equ	0xFF6
 20482                           tablat	equ	0xFF5
 20483                           prodh	equ	0xFF4
 20484                           prodl	equ	0xFF3
 20485                           intcon	equ	0xFF2
 20486                           indf0	equ	0xFEF
 20487                           postinc0	equ	0xFEE
 20488                           fsr0h	equ	0xFEA
 20489                           fsr0l	equ	0xFE9
 20490                           wreg	equ	0xFE8
 20491                           indf1	equ	0xFE7
 20492                           postdec1	equ	0xFE5
 20493                           fsr1h	equ	0xFE2
 20494                           fsr1l	equ	0xFE1
 20495                           indf2	equ	0xFDF
 20496                           postinc2	equ	0xFDE
 20497                           postdec2	equ	0xFDD
 20498                           plusw2	equ	0xFDB
 20499                           fsr2h	equ	0xFDA
 20500                           fsr2l	equ	0xFD9
 20501                           status	equ	0xFD8
 20502                           
 20503 ;; *************** function _LCD_FillRectangle *****************
 20504 ;; Defined at:
 20505 ;;		line 318 in file "Library/LCD.c"
 20506 ;; Parameters:    Size  Location     Type
 20507 ;;  pColour         2    9[BANK0 ] unsigned short 
 20508 ;;  pPoint          4   11[BANK0 ] struct Point
 20509 ;;  pSize           4   15[BANK0 ] struct Point
 20510 ;; Auto vars:     Size  Location     Type
 20511 ;;  j               1   22[BANK0 ] unsigned char 
 20512 ;;  i               1   21[BANK0 ] unsigned char 
 20513 ;; Return value:  Size  Location     Type
 20514 ;;                  1    wreg      void 
 20515 ;; Registers used:
 20516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20517 ;; Tracked objects:
 20518 ;;		On entry : 0/0
 20519 ;;		On exit  : 0/0
 20520 ;;		Unchanged: 0/0
 20521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20522 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20523 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20524 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20525 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20526 ;;Total ram usage:       14 bytes
 20527 ;; Hardware stack levels used:    1
 20528 ;; Hardware stack levels required when called:   10
 20529 ;; This function calls:
 20530 ;;		_LCD_Word_Write
 20531 ;;		_Set_Addr_Window
 20532 ;; This function is called by:
 20533 ;;		_Console_Render
 20534 ;;		_Console_ClearLine
 20535 ;; This function uses a non-reentrant model
 20536 ;;
 20537                           
 20538                           	psect	text114
 20539  01526C                     __ptext114:
 20540                           	opt stack 0
 20541  01526C                     _LCD_FillRectangle:
 20542                           	opt stack 18
 20543                           
 20544                           ;LCD.c: 320: UINT8 i = 0x00;
 20545                           
 20546                           ;incstack = 0
 20547  01526C  0E00               	movlw	0
 20548  01526E  0100               	movlb	0	; () banked
 20549  015270  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 20550                           
 20551                           ;LCD.c: 321: UINT8 j = 0x00;
 20552  015272  0E00               	movlw	0
 20553  015274  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 20554                           
 20555                           ; BSR set to: 0
 20556                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 20557  015276  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 20558  01527A  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 20559  01527C  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 20560  01527E  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 20561  015280  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 20562  015282  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 20563  015284  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 20564  015286  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 20565  015288  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 20566  01528A  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 20567  01528C  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 20568  01528E  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 20569  015290  EC0D  F0A2         	call	_Set_Addr_Window
 20570                           
 20571                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 20572  015294  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 20573  015298  0100               	movlb	0	; () banked
 20574  01529A  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 20575  01529C  B4D8               	btfsc	status,2,c
 20576  01529E  0012               	return	
 20577                           
 20578                           ; BSR set to: 0
 20579                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 20580                           
 20581                           ; BSR set to: 0
 20582  0152A0  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 20583  0152A4                     l14263:
 20584                           
 20585                           ; BSR set to: 0
 20586  0152A4  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 20587  0152A6  B4D8               	btfsc	status,2,c
 20588  0152A8  D009               	goto	u11550
 20589                           
 20590                           ; BSR set to: 0
 20591                           ;LCD.c: 333: LCD_Word_Write(pColour);
 20592                           
 20593                           ; BSR set to: 0
 20594                           
 20595                           ; BSR set to: 0
 20596  0152AA  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 20597  0152AE  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 20598  0152B2  EC37  F0AF         	call	_LCD_Word_Write	;wreg free
 20599  0152B6  0100               	movlb	0	; () banked
 20600  0152B8  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 20601  0152BA  D7F4               	goto	l14263
 20602  0152BC                     u11550:
 20603                           
 20604                           ; BSR set to: 0
 20605                           
 20606                           ; BSR set to: 0
 20607  0152BC  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 20608  0152BE  D7ED               	goto	L9
 20609  0152C0                     __end_of_LCD_FillRectangle:
 20610                           	opt stack 0
 20611                           tosu	equ	0xFFF
 20612                           tosh	equ	0xFFE
 20613                           tosl	equ	0xFFD
 20614                           pclath	equ	0xFFA
 20615                           tblptru	equ	0xFF8
 20616                           tblptrh	equ	0xFF7
 20617                           tblptrl	equ	0xFF6
 20618                           tablat	equ	0xFF5
 20619                           prodh	equ	0xFF4
 20620                           prodl	equ	0xFF3
 20621                           intcon	equ	0xFF2
 20622                           indf0	equ	0xFEF
 20623                           postinc0	equ	0xFEE
 20624                           fsr0h	equ	0xFEA
 20625                           fsr0l	equ	0xFE9
 20626                           wreg	equ	0xFE8
 20627                           indf1	equ	0xFE7
 20628                           postdec1	equ	0xFE5
 20629                           fsr1h	equ	0xFE2
 20630                           fsr1l	equ	0xFE1
 20631                           indf2	equ	0xFDF
 20632                           postinc2	equ	0xFDE
 20633                           postdec2	equ	0xFDD
 20634                           plusw2	equ	0xFDB
 20635                           fsr2h	equ	0xFDA
 20636                           fsr2l	equ	0xFD9
 20637                           status	equ	0xFD8
 20638                           
 20639 ;; *************** function _LCD_DrawField *****************
 20640 ;; Defined at:
 20641 ;;		line 393 in file "Library/LCD.c"
 20642 ;; Parameters:    Size  Location     Type
 20643 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 20644 ;;		 -> Console_MakeField@Fill(70), 
 20645 ;;  pPoint          4   20[BANK0 ] struct Point
 20646 ;;  pSize           4   24[BANK0 ] struct Point
 20647 ;; Auto vars:     Size  Location     Type
 20648 ;;  count           2   30[BANK0 ] unsigned short 
 20649 ;;  i               1   34[BANK0 ] unsigned char 
 20650 ;;  ymax            1   33[BANK0 ] unsigned char 
 20651 ;;  xmax            1   32[BANK0 ] unsigned char 
 20652 ;; Return value:  Size  Location     Type
 20653 ;;                  1    wreg      void 
 20654 ;; Registers used:
 20655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20656 ;; Tracked objects:
 20657 ;;		On entry : 0/0
 20658 ;;		On exit  : 0/0
 20659 ;;		Unchanged: 0/0
 20660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20661 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20662 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20663 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20664 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20665 ;;Total ram usage:       17 bytes
 20666 ;; Hardware stack levels used:    1
 20667 ;; Hardware stack levels required when called:   10
 20668 ;; This function calls:
 20669 ;;		_LCD_Word_Write
 20670 ;;		_Set_Addr_Window
 20671 ;;		___wmul
 20672 ;; This function is called by:
 20673 ;;		_Console_Render
 20674 ;; This function uses a non-reentrant model
 20675 ;;
 20676                           
 20677                           	psect	text115
 20678  014998                     __ptext115:
 20679                           	opt stack 0
 20680  014998                     _LCD_DrawField:
 20681                           	opt stack 18
 20682                           
 20683                           ;LCD.c: 396: UINT8 i = 0x00;
 20684                           
 20685                           ; BSR set to: 0
 20686                           ;incstack = 0
 20687  014998  0E00               	movlw	0
 20688  01499A  0100               	movlb	0	; () banked
 20689  01499C  6F82               	movwf	LCD_DrawField@i& (0+255),b
 20690                           
 20691                           ; BSR set to: 0
 20692                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 20693  01499E  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 20694  0149A0  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 20695  0149A2  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 20696                           
 20697                           ; BSR set to: 0
 20698                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 20699  0149A4  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 20700  0149A6  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 20701  0149A8  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 20702                           
 20703                           ; BSR set to: 0
 20704                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 20705  0149AA  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 20706  0149AE  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 20707  0149B2  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 20708  0149B6  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 20709  0149BA  EC50  F0AE         	call	___wmul	;wreg free
 20710  0149BE  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 20711  0149C2  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 20712                           
 20713                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 20714  0149C6  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 20715  0149CA  0100               	movlb	0	; () banked
 20716  0149CC  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 20717  0149CE  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 20718  0149D0  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 20719  0149D2  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 20720  0149D4  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 20721  0149D6  EC0D  F0A2         	call	_Set_Addr_Window
 20722                           
 20723                           ;LCD.c: 403: for(i = 0; i < count; i++)
 20724  0149DA  0E00               	movlw	0
 20725  0149DC  0100               	movlb	0	; () banked
 20726  0149DE  6F82               	movwf	LCD_DrawField@i& (0+255),b
 20727  0149E0  D010               	goto	l183
 20728  0149E2                     
 20729                           ; BSR set to: 0
 20730                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 20731                           
 20732                           ; BSR set to: 0
 20733  0149E2  5182               	movf	LCD_DrawField@i& (0+255),w,b
 20734  0149E4  0D02               	mullw	2
 20735  0149E6  50F3               	movf	prodl,w,c
 20736  0149E8  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 20737  0149EA  6ED9               	movwf	fsr2l,c
 20738  0149EC  50F4               	movf	prodh,w,c
 20739  0149EE  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 20740  0149F0  6EDA               	movwf	fsr2h,c
 20741  0149F2  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 20742  0149F6  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 20743  0149FA  EC37  F0AF         	call	_LCD_Word_Write	;wreg free
 20744  0149FE  0100               	movlb	0	; () banked
 20745  014A00  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 20746  014A02                     l183:
 20747                           
 20748                           ; BSR set to: 0
 20749                           
 20750                           ; BSR set to: 0
 20751  014A02  5182               	movf	LCD_DrawField@i& (0+255),w,b
 20752  014A04  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 20753  014A06  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 20754  014A08  517E               	movf	LCD_DrawField@count& (0+255),w,b
 20755  014A0A  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 20756  014A0C  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 20757  014A0E  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 20758  014A10  B0D8               	btfsc	status,0,c
 20759  014A12  0012               	return	
 20760  014A14  D7E6               	goto	l184
 20761  014A16                     __end_of_LCD_DrawField:
 20762                           	opt stack 0
 20763                           tosu	equ	0xFFF
 20764                           tosh	equ	0xFFE
 20765                           tosl	equ	0xFFD
 20766                           pclath	equ	0xFFA
 20767                           tblptru	equ	0xFF8
 20768                           tblptrh	equ	0xFF7
 20769                           tblptrl	equ	0xFF6
 20770                           tablat	equ	0xFF5
 20771                           prodh	equ	0xFF4
 20772                           prodl	equ	0xFF3
 20773                           intcon	equ	0xFF2
 20774                           indf0	equ	0xFEF
 20775                           postinc0	equ	0xFEE
 20776                           fsr0h	equ	0xFEA
 20777                           fsr0l	equ	0xFE9
 20778                           wreg	equ	0xFE8
 20779                           indf1	equ	0xFE7
 20780                           postdec1	equ	0xFE5
 20781                           fsr1h	equ	0xFE2
 20782                           fsr1l	equ	0xFE1
 20783                           indf2	equ	0xFDF
 20784                           postinc2	equ	0xFDE
 20785                           postdec2	equ	0xFDD
 20786                           plusw2	equ	0xFDB
 20787                           fsr2h	equ	0xFDA
 20788                           fsr2l	equ	0xFD9
 20789                           status	equ	0xFD8
 20790                           
 20791 ;; *************** function _Set_Addr_Window *****************
 20792 ;; Defined at:
 20793 ;;		line 214 in file "Library/LCD.c"
 20794 ;; Parameters:    Size  Location     Type
 20795 ;;  xs              1    wreg     unsigned char 
 20796 ;;  ys              1    5[BANK0 ] unsigned char 
 20797 ;;  xe              1    6[BANK0 ] unsigned char 
 20798 ;;  ye              1    7[BANK0 ] unsigned char 
 20799 ;; Auto vars:     Size  Location     Type
 20800 ;;  xs              1    8[BANK0 ] unsigned char 
 20801 ;; Return value:  Size  Location     Type
 20802 ;;                  1    wreg      void 
 20803 ;; Registers used:
 20804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20805 ;; Tracked objects:
 20806 ;;		On entry : 0/0
 20807 ;;		On exit  : 0/0
 20808 ;;		Unchanged: 0/0
 20809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20810 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20813 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20814 ;;Total ram usage:        4 bytes
 20815 ;; Hardware stack levels used:    1
 20816 ;; Hardware stack levels required when called:    9
 20817 ;; This function calls:
 20818 ;;		_LCD_Write
 20819 ;; This function is called by:
 20820 ;;		_LCD_Fill
 20821 ;;		_LCD_FillRectangle
 20822 ;;		_LCD_DrawField
 20823 ;;		_RAM_Address_Set
 20824 ;;		_LCD_DrawPixel
 20825 ;; This function uses a non-reentrant model
 20826 ;;
 20827                           
 20828                           	psect	text116
 20829  01441A                     __ptext116:
 20830                           	opt stack 0
 20831  01441A                     _Set_Addr_Window:
 20832                           	opt stack 18
 20833                           
 20834                           ; BSR set to: 0
 20835                           ;incstack = 0
 20836                           ;Set_Addr_Window@xs stored from wreg
 20837  01441A  0100               	movlb	0	; () banked
 20838  01441C  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 20839                           
 20840                           ;LCD.c: 216: ys+=2;
 20841  01441E  0E02               	movlw	2
 20842  014420  0100               	movlb	0	; () banked
 20843  014422  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 20844                           
 20845                           ;LCD.c: 217: ye+=2;
 20846  014424  0E02               	movlw	2
 20847  014426  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 20848                           
 20849                           ;LCD.c: 218: xs+=3;
 20850  014428  0E03               	movlw	3
 20851  01442A  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 20852                           
 20853                           ;LCD.c: 219: xe+=3;
 20854  01442C  0E03               	movlw	3
 20855  01442E  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 20856                           
 20857                           ; BSR set to: 0
 20858                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 20859  014430  0E00               	movlw	0
 20860  014432  6F63               	movwf	LCD_Write@mode& (0+255),b
 20861  014434  0E2A               	movlw	42
 20862  014436  ECE2  F0AE         	call	_LCD_Write
 20863                           
 20864                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 20865  01443A  0E01               	movlw	1
 20866  01443C  0100               	movlb	0	; () banked
 20867  01443E  6F63               	movwf	LCD_Write@mode& (0+255),b
 20868  014440  0E00               	movlw	0
 20869  014442  ECE2  F0AE         	call	_LCD_Write
 20870                           
 20871                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 20872  014446  0E01               	movlw	1
 20873  014448  0100               	movlb	0	; () banked
 20874  01444A  6F63               	movwf	LCD_Write@mode& (0+255),b
 20875  01444C  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 20876  01444E  ECE2  F0AE         	call	_LCD_Write
 20877                           
 20878                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 20879  014452  0E01               	movlw	1
 20880  014454  0100               	movlb	0	; () banked
 20881  014456  6F63               	movwf	LCD_Write@mode& (0+255),b
 20882  014458  0E00               	movlw	0
 20883  01445A  ECE2  F0AE         	call	_LCD_Write
 20884                           
 20885                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 20886  01445E  0E01               	movlw	1
 20887  014460  0100               	movlb	0	; () banked
 20888  014462  6F63               	movwf	LCD_Write@mode& (0+255),b
 20889  014464  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 20890  014466  ECE2  F0AE         	call	_LCD_Write
 20891                           
 20892                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 20893  01446A  0E00               	movlw	0
 20894  01446C  0100               	movlb	0	; () banked
 20895  01446E  6F63               	movwf	LCD_Write@mode& (0+255),b
 20896  014470  0E2B               	movlw	43
 20897  014472  ECE2  F0AE         	call	_LCD_Write
 20898                           
 20899                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 20900  014476  0E01               	movlw	1
 20901  014478  0100               	movlb	0	; () banked
 20902  01447A  6F63               	movwf	LCD_Write@mode& (0+255),b
 20903  01447C  0E00               	movlw	0
 20904  01447E  ECE2  F0AE         	call	_LCD_Write
 20905                           
 20906                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 20907  014482  0E01               	movlw	1
 20908  014484  0100               	movlb	0	; () banked
 20909  014486  6F63               	movwf	LCD_Write@mode& (0+255),b
 20910  014488  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 20911  01448A  ECE2  F0AE         	call	_LCD_Write
 20912                           
 20913                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 20914  01448E  0E01               	movlw	1
 20915  014490  0100               	movlb	0	; () banked
 20916  014492  6F63               	movwf	LCD_Write@mode& (0+255),b
 20917  014494  0E00               	movlw	0
 20918  014496  ECE2  F0AE         	call	_LCD_Write
 20919                           
 20920                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 20921  01449A  0E01               	movlw	1
 20922  01449C  0100               	movlb	0	; () banked
 20923  01449E  6F63               	movwf	LCD_Write@mode& (0+255),b
 20924  0144A0  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 20925  0144A2  ECE2  F0AE         	call	_LCD_Write
 20926                           
 20927                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 20928  0144A6  0E00               	movlw	0
 20929  0144A8  0100               	movlb	0	; () banked
 20930  0144AA  6F63               	movwf	LCD_Write@mode& (0+255),b
 20931  0144AC  0E2C               	movlw	44
 20932  0144AE  ECE2  F0AE         	call	_LCD_Write
 20933  0144B2  0012               	return		;funcret
 20934  0144B4                     __end_of_Set_Addr_Window:
 20935                           	opt stack 0
 20936                           tosu	equ	0xFFF
 20937                           tosh	equ	0xFFE
 20938                           tosl	equ	0xFFD
 20939                           pclath	equ	0xFFA
 20940                           tblptru	equ	0xFF8
 20941                           tblptrh	equ	0xFF7
 20942                           tblptrl	equ	0xFF6
 20943                           tablat	equ	0xFF5
 20944                           prodh	equ	0xFF4
 20945                           prodl	equ	0xFF3
 20946                           intcon	equ	0xFF2
 20947                           indf0	equ	0xFEF
 20948                           postinc0	equ	0xFEE
 20949                           fsr0h	equ	0xFEA
 20950                           fsr0l	equ	0xFE9
 20951                           wreg	equ	0xFE8
 20952                           indf1	equ	0xFE7
 20953                           postdec1	equ	0xFE5
 20954                           fsr1h	equ	0xFE2
 20955                           fsr1l	equ	0xFE1
 20956                           indf2	equ	0xFDF
 20957                           postinc2	equ	0xFDE
 20958                           postdec2	equ	0xFDD
 20959                           plusw2	equ	0xFDB
 20960                           fsr2h	equ	0xFDA
 20961                           fsr2l	equ	0xFD9
 20962                           status	equ	0xFD8
 20963                           
 20964 ;; *************** function _LCD_Word_Write *****************
 20965 ;; Defined at:
 20966 ;;		line 198 in file "Library/LCD.c"
 20967 ;; Parameters:    Size  Location     Type
 20968 ;;  value           2    5[BANK0 ] unsigned short 
 20969 ;; Auto vars:     Size  Location     Type
 20970 ;;		None
 20971 ;; Return value:  Size  Location     Type
 20972 ;;                  1    wreg      void 
 20973 ;; Registers used:
 20974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20975 ;; Tracked objects:
 20976 ;;		On entry : 0/0
 20977 ;;		On exit  : 0/0
 20978 ;;		Unchanged: 0/0
 20979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20980 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20983 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20984 ;;Total ram usage:        2 bytes
 20985 ;; Hardware stack levels used:    1
 20986 ;; Hardware stack levels required when called:    9
 20987 ;; This function calls:
 20988 ;;		_LCD_Write
 20989 ;; This function is called by:
 20990 ;;		_LCD_Fill
 20991 ;;		_LCD_FillRectangle
 20992 ;;		_LCD_DrawField
 20993 ;;		_LCD_DrawPixel
 20994 ;; This function uses a non-reentrant model
 20995 ;;
 20996                           
 20997                           	psect	text117
 20998  015E6E                     __ptext117:
 20999                           	opt stack 0
 21000  015E6E                     _LCD_Word_Write:
 21001                           	opt stack 18
 21002                           
 21003                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 21004                           
 21005                           ;incstack = 0
 21006  015E6E  0E01               	movlw	1
 21007  015E70  0100               	movlb	0	; () banked
 21008  015E72  6F63               	movwf	LCD_Write@mode& (0+255),b
 21009  015E74  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 21010  015E76  ECE2  F0AE         	call	_LCD_Write
 21011                           
 21012                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 21013  015E7A  0E01               	movlw	1
 21014  015E7C  0100               	movlb	0	; () banked
 21015  015E7E  6F63               	movwf	LCD_Write@mode& (0+255),b
 21016  015E80  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 21017  015E82  ECE2  F0AE         	call	_LCD_Write
 21018  015E86  0012               	return		;funcret
 21019  015E88                     __end_of_LCD_Word_Write:
 21020                           	opt stack 0
 21021                           tosu	equ	0xFFF
 21022                           tosh	equ	0xFFE
 21023                           tosl	equ	0xFFD
 21024                           pclath	equ	0xFFA
 21025                           tblptru	equ	0xFF8
 21026                           tblptrh	equ	0xFF7
 21027                           tblptrl	equ	0xFF6
 21028                           tablat	equ	0xFF5
 21029                           prodh	equ	0xFF4
 21030                           prodl	equ	0xFF3
 21031                           intcon	equ	0xFF2
 21032                           indf0	equ	0xFEF
 21033                           postinc0	equ	0xFEE
 21034                           fsr0h	equ	0xFEA
 21035                           fsr0l	equ	0xFE9
 21036                           wreg	equ	0xFE8
 21037                           indf1	equ	0xFE7
 21038                           postdec1	equ	0xFE5
 21039                           fsr1h	equ	0xFE2
 21040                           fsr1l	equ	0xFE1
 21041                           indf2	equ	0xFDF
 21042                           postinc2	equ	0xFDE
 21043                           postdec2	equ	0xFDD
 21044                           plusw2	equ	0xFDB
 21045                           fsr2h	equ	0xFDA
 21046                           fsr2l	equ	0xFD9
 21047                           status	equ	0xFD8
 21048                           
 21049 ;; *************** function _LCD_Write *****************
 21050 ;; Defined at:
 21051 ;;		line 67 in file "Library/LCD.c"
 21052 ;; Parameters:    Size  Location     Type
 21053 ;;  value           1    wreg     unsigned char 
 21054 ;;  mode            1    3[BANK0 ] enum E6761
 21055 ;; Auto vars:     Size  Location     Type
 21056 ;;  value           1    4[BANK0 ] unsigned char 
 21057 ;; Return value:  Size  Location     Type
 21058 ;;                  1    wreg      void 
 21059 ;; Registers used:
 21060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21061 ;; Tracked objects:
 21062 ;;		On entry : 0/0
 21063 ;;		On exit  : 0/0
 21064 ;;		Unchanged: 0/0
 21065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21066 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21069 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21070 ;;Total ram usage:        2 bytes
 21071 ;; Hardware stack levels used:    1
 21072 ;; Hardware stack levels required when called:    8
 21073 ;; This function calls:
 21074 ;;		_Mode_Set
 21075 ;;		_SPI_Send
 21076 ;; This function is called by:
 21077 ;;		_LCD_Init
 21078 ;;		_LCD_Word_Write
 21079 ;;		_Set_Addr_Window
 21080 ;;		_Set_Rotation
 21081 ;;		_LCD_WriteCMD
 21082 ;;		_LCD_WriteData
 21083 ;;		_LCD_Data_Write
 21084 ;;		_LCD_Data_Write_4k
 21085 ;;		_Invert_Display
 21086 ;; This function uses a non-reentrant model
 21087 ;;
 21088                           
 21089                           	psect	text118
 21090  015DC4                     __ptext118:
 21091                           	opt stack 0
 21092  015DC4                     _LCD_Write:
 21093                           	opt stack 18
 21094                           
 21095                           ;incstack = 0
 21096                           ;LCD_Write@value stored from wreg
 21097  015DC4  0100               	movlb	0	; () banked
 21098  015DC6  6F64               	movwf	LCD_Write@value& (0+255),b
 21099                           
 21100                           ;LCD.c: 89: Mode_Set(mode);
 21101  015DC8  0100               	movlb	0	; () banked
 21102  015DCA  5163               	movf	LCD_Write@mode& (0+255),w,b
 21103  015DCC  EC0A  F0B0         	call	_Mode_Set
 21104                           
 21105                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 21106  015DD0  0E82               	movlw	low _SPI2
 21107  015DD2  0100               	movlb	0	; () banked
 21108  015DD4  6F60               	movwf	SPI_Send@pInput& (0+255),b
 21109  015DD6  0E01               	movlw	high _SPI2
 21110  015DD8  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 21111  015DDA  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 21112  015DDE  EC1E  F0A7         	call	_SPI_Send	;wreg free
 21113  015DE2  0012               	return		;funcret
 21114  015DE4                     __end_of_LCD_Write:
 21115                           	opt stack 0
 21116                           tosu	equ	0xFFF
 21117                           tosh	equ	0xFFE
 21118                           tosl	equ	0xFFD
 21119                           pclath	equ	0xFFA
 21120                           tblptru	equ	0xFF8
 21121                           tblptrh	equ	0xFF7
 21122                           tblptrl	equ	0xFF6
 21123                           tablat	equ	0xFF5
 21124                           prodh	equ	0xFF4
 21125                           prodl	equ	0xFF3
 21126                           intcon	equ	0xFF2
 21127                           indf0	equ	0xFEF
 21128                           postinc0	equ	0xFEE
 21129                           fsr0h	equ	0xFEA
 21130                           fsr0l	equ	0xFE9
 21131                           wreg	equ	0xFE8
 21132                           indf1	equ	0xFE7
 21133                           postdec1	equ	0xFE5
 21134                           fsr1h	equ	0xFE2
 21135                           fsr1l	equ	0xFE1
 21136                           indf2	equ	0xFDF
 21137                           postinc2	equ	0xFDE
 21138                           postdec2	equ	0xFDD
 21139                           plusw2	equ	0xFDB
 21140                           fsr2h	equ	0xFDA
 21141                           fsr2l	equ	0xFD9
 21142                           status	equ	0xFD8
 21143                           
 21144 ;; *************** function _Mode_Set *****************
 21145 ;; Defined at:
 21146 ;;		line 40 in file "Library/LCD.c"
 21147 ;; Parameters:    Size  Location     Type
 21148 ;;  pMode           1    wreg     enum E6761
 21149 ;; Auto vars:     Size  Location     Type
 21150 ;;  pMode           1    0[BANK0 ] enum E6761
 21151 ;; Return value:  Size  Location     Type
 21152 ;;                  1    wreg      void 
 21153 ;; Registers used:
 21154 ;;		wreg
 21155 ;; Tracked objects:
 21156 ;;		On entry : 0/0
 21157 ;;		On exit  : 0/0
 21158 ;;		Unchanged: 0/0
 21159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21163 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21164 ;;Total ram usage:        1 bytes
 21165 ;; Hardware stack levels used:    1
 21166 ;; Hardware stack levels required when called:    7
 21167 ;; This function calls:
 21168 ;;		Nothing
 21169 ;; This function is called by:
 21170 ;;		_LCD_Write
 21171 ;; This function uses a non-reentrant model
 21172 ;;
 21173                           
 21174                           	psect	text119
 21175  016014                     __ptext119:
 21176                           	opt stack 0
 21177  016014                     _Mode_Set:
 21178                           	opt stack 18
 21179                           
 21180                           ;incstack = 0
 21181                           ;Mode_Set@pMode stored from wreg
 21182  016014  0100               	movlb	0	; () banked
 21183  016016  6F60               	movwf	Mode_Set@pMode& (0+255),b
 21184                           
 21185                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 21186  016018  0100               	movlb	0	; () banked
 21187  01601A  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 21188  01601C  D002               	bra	u9655
 21189  01601E  9E85               	bcf	3973,7,c	;volatile
 21190  016020  D001               	bra	u9656
 21191  016022                     u9655:
 21192  016022  8E85               	bsf	3973,7,c	;volatile
 21193  016024                     u9656:
 21194  016024  0012               	return		;funcret
 21195  016026                     __end_of_Mode_Set:
 21196                           	opt stack 0
 21197                           tosu	equ	0xFFF
 21198                           tosh	equ	0xFFE
 21199                           tosl	equ	0xFFD
 21200                           pclath	equ	0xFFA
 21201                           tblptru	equ	0xFF8
 21202                           tblptrh	equ	0xFF7
 21203                           tblptrl	equ	0xFF6
 21204                           tablat	equ	0xFF5
 21205                           prodh	equ	0xFF4
 21206                           prodl	equ	0xFF3
 21207                           intcon	equ	0xFF2
 21208                           indf0	equ	0xFEF
 21209                           postinc0	equ	0xFEE
 21210                           fsr0h	equ	0xFEA
 21211                           fsr0l	equ	0xFE9
 21212                           wreg	equ	0xFE8
 21213                           indf1	equ	0xFE7
 21214                           postdec1	equ	0xFE5
 21215                           fsr1h	equ	0xFE2
 21216                           fsr1l	equ	0xFE1
 21217                           indf2	equ	0xFDF
 21218                           postinc2	equ	0xFDE
 21219                           postdec2	equ	0xFDD
 21220                           plusw2	equ	0xFDB
 21221                           fsr2h	equ	0xFDA
 21222                           fsr2l	equ	0xFD9
 21223                           status	equ	0xFD8
 21224                           
 21225 ;; *************** function _Console_MakeField *****************
 21226 ;; Defined at:
 21227 ;;		line 435 in file "Library/Console.c"
 21228 ;; Parameters:    Size  Location     Type
 21229 ;;  pInput          1    wreg     unsigned char 
 21230 ;; Auto vars:     Size  Location     Type
 21231 ;;  pInput          1   11[BANK0 ] unsigned char 
 21232 ;;  y               1   17[BANK0 ] unsigned char 
 21233 ;;  x               1   16[BANK0 ] unsigned char 
 21234 ;;  Column          2   12[BANK0 ] PTR struct Byte
 21235 ;;		 -> Font5x7(480), 
 21236 ;;  Index           2    9[BANK0 ] unsigned short 
 21237 ;; Return value:  Size  Location     Type
 21238 ;;                  2    5[BANK0 ] PTR unsigned short 
 21239 ;; Registers used:
 21240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21241 ;; Tracked objects:
 21242 ;;		On entry : 0/0
 21243 ;;		On exit  : 0/0
 21244 ;;		Unchanged: 0/0
 21245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21246 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21247 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21248 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21249 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21250 ;;Total ram usage:       13 bytes
 21251 ;; Hardware stack levels used:    1
 21252 ;; Hardware stack levels required when called:    8
 21253 ;; This function calls:
 21254 ;;		_Byte_GetBit
 21255 ;; This function is called by:
 21256 ;;		_Console_Render
 21257 ;; This function uses a non-reentrant model
 21258 ;;
 21259                           
 21260                           	psect	text120
 21261  01423A                     __ptext120:
 21262                           	opt stack 0
 21263  01423A                     _Console_MakeField:
 21264                           	opt stack 20
 21265                           
 21266                           ;incstack = 0
 21267                           ;Console_MakeField@pInput stored from wreg
 21268  01423A  0100               	movlb	0	; () banked
 21269  01423C  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 21270                           
 21271                           ;Console.c: 437: static Colour Fill[7][5];
 21272                           ;Console.c: 438: pInput -= 32;
 21273  01423E  0E20               	movlw	32
 21274  014240  0100               	movlb	0	; () banked
 21275  014242  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 21276                           
 21277                           ; BSR set to: 0
 21278                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 21279  014244  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 21280  014246  0D05               	mullw	5
 21281  014248  CFF3 F069          	movff	prodl,Console_MakeField@Index
 21282  01424C  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 21283                           
 21284                           ; BSR set to: 0
 21285                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 21286  014250  0E43               	movlw	low _Font5x7
 21287  014252  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 21288  014254  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 21289  014256  0EFC               	movlw	high _Font5x7
 21290  014258  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 21291  01425A  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 21292                           
 21293                           ; BSR set to: 0
 21294                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 21295  01425C  0E00               	movlw	0
 21296  01425E  6F70               	movwf	Console_MakeField@x& (0+255),b
 21297  014260                     l14485:
 21298                           
 21299                           ; BSR set to: 0
 21300  014260  0E04               	movlw	4
 21301  014262  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 21302  014264  D001               	goto	l1077
 21303  014266  D037               	goto	u11740
 21304  014268                     l1077:
 21305                           
 21306                           ; BSR set to: 0
 21307                           ;Console.c: 444: {
 21308                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 21309                           
 21310                           ; BSR set to: 0
 21311  014268  0E00               	movlw	0
 21312  01426A  6F71               	movwf	Console_MakeField@y& (0+255),b
 21313  01426C                     l14491:
 21314                           
 21315                           ; BSR set to: 0
 21316  01426C  0E06               	movlw	6
 21317  01426E  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 21318  014270  D001               	goto	l1079
 21319  014272  D02D               	goto	u11730
 21320  014274                     l1079:
 21321                           
 21322                           ; BSR set to: 0
 21323                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 21324                           
 21325                           ; BSR set to: 0
 21326  014274  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 21327  014278  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 21328  01427C  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 21329  014280  EC26  F0AE         	call	_Byte_GetBit	;wreg free
 21330  014284  0900               	iorlw	0
 21331  014286  A4D8               	btfss	status,2,c
 21332  014288  D005               	goto	l1082
 21333  01428A  C035  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 21334  01428E  C036  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 21335  014292  D004               	goto	l1084
 21336  014294                     l1082:
 21337  014294  C1F3  F06E         	movff	_gForecolour,_Console_MakeField$10974
 21338  014298  C1F4  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 21339  01429C                     l1084:
 21340  01429C  0100               	movlb	0	; () banked
 21341  01429E  5171               	movf	Console_MakeField@y& (0+255),w,b
 21342  0142A0  0D0A               	mullw	10
 21343  0142A2  0E82               	movlw	low Console_MakeField@Fill
 21344  0142A4  6F67               	movwf	??_Console_MakeField& (0+255),b
 21345  0142A6  0E02               	movlw	high Console_MakeField@Fill
 21346  0142A8  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 21347  0142AA  50F3               	movf	prodl,w,c
 21348  0142AC  2767               	addwf	??_Console_MakeField& (0+255),f,b
 21349  0142AE  50F4               	movf	prodh,w,c
 21350  0142B0  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 21351  0142B2  5170               	movf	Console_MakeField@x& (0+255),w,b
 21352  0142B4  0D02               	mullw	2
 21353  0142B6  50F3               	movf	prodl,w,c
 21354  0142B8  2567               	addwf	??_Console_MakeField& (0+255),w,b
 21355  0142BA  6ED9               	movwf	fsr2l,c
 21356  0142BC  50F4               	movf	prodh,w,c
 21357  0142BE  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 21358  0142C0  6EDA               	movwf	fsr2h,c
 21359  0142C2  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 21360  0142C6  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 21361                           
 21362                           ; BSR set to: 0
 21363  0142CA  2B71               	incf	Console_MakeField@y& (0+255),f,b
 21364  0142CC  D7CF               	goto	l14491
 21365  0142CE                     u11730:
 21366                           
 21367                           ; BSR set to: 0
 21368                           ;Console.c: 447: Column += 1;
 21369                           
 21370                           ; BSR set to: 0
 21371  0142CE  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 21372  0142D0  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 21373  0142D2  2B70               	incf	Console_MakeField@x& (0+255),f,b
 21374  0142D4  D7C5               	goto	l14485
 21375  0142D6                     u11740:
 21376                           
 21377                           ; BSR set to: 0
 21378                           ;Console.c: 448: }
 21379                           ;Console.c: 449: return (ColourPtr)Fill;
 21380                           
 21381                           ; BSR set to: 0
 21382  0142D6  0E82               	movlw	low Console_MakeField@Fill
 21383  0142D8  6F65               	movwf	?_Console_MakeField& (0+255),b
 21384  0142DA  0E02               	movlw	high Console_MakeField@Fill
 21385  0142DC  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 21386  0142DE  0012               	return	
 21387  0142E0                     __end_of_Console_MakeField:
 21388                           	opt stack 0
 21389                           tosu	equ	0xFFF
 21390                           tosh	equ	0xFFE
 21391                           tosl	equ	0xFFD
 21392                           pclath	equ	0xFFA
 21393                           tblptru	equ	0xFF8
 21394                           tblptrh	equ	0xFF7
 21395                           tblptrl	equ	0xFF6
 21396                           tablat	equ	0xFF5
 21397                           prodh	equ	0xFF4
 21398                           prodl	equ	0xFF3
 21399                           intcon	equ	0xFF2
 21400                           indf0	equ	0xFEF
 21401                           postinc0	equ	0xFEE
 21402                           fsr0h	equ	0xFEA
 21403                           fsr0l	equ	0xFE9
 21404                           wreg	equ	0xFE8
 21405                           indf1	equ	0xFE7
 21406                           postdec1	equ	0xFE5
 21407                           fsr1h	equ	0xFE2
 21408                           fsr1l	equ	0xFE1
 21409                           indf2	equ	0xFDF
 21410                           postinc2	equ	0xFDE
 21411                           postdec2	equ	0xFDD
 21412                           plusw2	equ	0xFDB
 21413                           fsr2h	equ	0xFDA
 21414                           fsr2l	equ	0xFD9
 21415                           status	equ	0xFD8
 21416                           
 21417 ;; *************** function _Byte_GetBit *****************
 21418 ;; Defined at:
 21419 ;;		line 38 in file "Library/Types.c"
 21420 ;; Parameters:    Size  Location     Type
 21421 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 21422 ;;		 -> Font5x7(480), 
 21423 ;;  pBit            1    2[BANK0 ] unsigned char 
 21424 ;; Auto vars:     Size  Location     Type
 21425 ;;  Output          1    4[BANK0 ] unsigned char 
 21426 ;; Return value:  Size  Location     Type
 21427 ;;                  1    wreg      unsigned char 
 21428 ;; Registers used:
 21429 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 21430 ;; Tracked objects:
 21431 ;;		On entry : 0/0
 21432 ;;		On exit  : 0/0
 21433 ;;		Unchanged: 0/0
 21434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21435 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21438 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21439 ;;Total ram usage:        5 bytes
 21440 ;; Hardware stack levels used:    1
 21441 ;; Hardware stack levels required when called:    7
 21442 ;; This function calls:
 21443 ;;		Nothing
 21444 ;; This function is called by:
 21445 ;;		_Console_MakeField
 21446 ;;		_Word_GetBit
 21447 ;; This function uses a non-reentrant model
 21448 ;;
 21449                           
 21450                           	psect	text121
 21451  015C4C                     __ptext121:
 21452                           	opt stack 0
 21453  015C4C                     _Byte_GetBit:
 21454                           	opt stack 20
 21455                           
 21456                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 21457                           
 21458                           ; BSR set to: 0
 21459                           ;incstack = 0
 21460  015C4C  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 21461  015C50  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 21462  015C54                     	if	0	;tblptru may be non-zero
 21463  015C54                     	endif
 21464  015C54                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 21465  015C54  0E00               	movlw	low (__mediumconst shr (0+16))
 21466  015C56  6EF8               	movwf	tblptru,c
 21467  015C58                     	endif
 21468  015C58  0008               	tblrd		*
 21469  015C5A  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 21470                           
 21471                           ;Types.c: 42: Output >>= pBit;
 21472  015C5E  0100               	movlb	0	; () banked
 21473  015C60  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 21474  015C62  6F63               	movwf	??_Byte_GetBit& (0+255),b
 21475  015C64  D002               	goto	u11310
 21476  015C66                     u11315:
 21477  015C66  90D8               	bcf	status,0,c
 21478  015C68  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 21479  015C6A                     u11310:
 21480  015C6A  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 21481  015C6C  D7FC               	goto	u11315
 21482                           
 21483                           ;Types.c: 43: Output &= 1;
 21484  015C6E  0E01               	movlw	1
 21485  015C70  0100               	movlb	0	; () banked
 21486  015C72  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 21487                           
 21488                           ; BSR set to: 0
 21489                           ;Types.c: 44: return Output;
 21490  015C74  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 21491  015C76  0012               	return	
 21492  015C78                     __end_of_Byte_GetBit:
 21493                           	opt stack 0
 21494                           tosu	equ	0xFFF
 21495                           tosh	equ	0xFFE
 21496                           tosl	equ	0xFFD
 21497                           pclath	equ	0xFFA
 21498                           tblptru	equ	0xFF8
 21499                           tblptrh	equ	0xFF7
 21500                           tblptrl	equ	0xFF6
 21501                           tablat	equ	0xFF5
 21502                           prodh	equ	0xFF4
 21503                           prodl	equ	0xFF3
 21504                           intcon	equ	0xFF2
 21505                           indf0	equ	0xFEF
 21506                           postinc0	equ	0xFEE
 21507                           fsr0h	equ	0xFEA
 21508                           fsr0l	equ	0xFE9
 21509                           wreg	equ	0xFE8
 21510                           indf1	equ	0xFE7
 21511                           postdec1	equ	0xFE5
 21512                           fsr1h	equ	0xFE2
 21513                           fsr1l	equ	0xFE1
 21514                           indf2	equ	0xFDF
 21515                           postinc2	equ	0xFDE
 21516                           postdec2	equ	0xFDD
 21517                           plusw2	equ	0xFDB
 21518                           fsr2h	equ	0xFDA
 21519                           fsr2l	equ	0xFD9
 21520                           status	equ	0xFD8
 21521                           
 21522 ;; *************** function _ADCAverage *****************
 21523 ;; Defined at:
 21524 ;;		line 106 in file "main.c"
 21525 ;; Parameters:    Size  Location     Type
 21526 ;;		None
 21527 ;; Auto vars:     Size  Location     Type
 21528 ;;		None
 21529 ;; Return value:  Size  Location     Type
 21530 ;;                  2  2130[None  ] int 
 21531 ;; Registers used:
 21532 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21533 ;; Tracked objects:
 21534 ;;		On entry : 0/0
 21535 ;;		On exit  : 0/0
 21536 ;;		Unchanged: 0/0
 21537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21539 ;;      Locals:         0       0       0       0      24       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21540 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21541 ;;      Totals:         0       2       0       0      24       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21542 ;;Total ram usage:       26 bytes
 21543 ;; Hardware stack levels used:    1
 21544 ;; Hardware stack levels required when called:   11
 21545 ;; This function calls:
 21546 ;;		_FunctReadADC
 21547 ;;		_HMI_Render
 21548 ;;		_HMI_SetNumber
 21549 ;;		___awdiv
 21550 ;;		___fladd
 21551 ;;		___flmul
 21552 ;;		___flneg
 21553 ;;		___fltol
 21554 ;;		___wmul
 21555 ;;		___xxtofl
 21556 ;;		_pow
 21557 ;; This function is called by:
 21558 ;;		_Sensor_Observe2
 21559 ;;		_Closest_Object2
 21560 ;;		_Sensor_Observe
 21561 ;;		_Closest_Object
 21562 ;;		_main
 21563 ;; This function uses a non-reentrant model
 21564 ;;
 21565                           
 21566                           	psect	text122
 21567  0111CA                     __ptext122:
 21568                           	opt stack 0
 21569  0111CA                     _ADCAverage:
 21570                           	opt stack 18
 21571                           
 21572                           ;main.c: 108: total = total - readings[readIndex];
 21573                           
 21574                           ; BSR set to: 0
 21575                           ;incstack = 0
 21576  0111CA  90D8               	bcf	status,0,c
 21577  0111CC  3429               	rlcf	_readIndex,w,c
 21578  0111CE  6ED9               	movwf	fsr2l,c
 21579  0111D0  342A               	rlcf	_readIndex+1,w,c
 21580  0111D2  6EDA               	movwf	fsr2h,c
 21581  0111D4  0E00               	movlw	low _readings
 21582  0111D6  26D9               	addwf	fsr2l,f,c
 21583  0111D8  0E02               	movlw	high _readings
 21584  0111DA  22DA               	addwfc	fsr2h,f,c
 21585  0111DC  CFDE F0D7          	movff	postinc2,??_ADCAverage
 21586  0111E0  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 21587  0111E4  0100               	movlb	0	; () banked
 21588  0111E6  1FD7               	comf	??_ADCAverage& (0+255),f,b
 21589  0111E8  1FD8               	comf	(??_ADCAverage+1)& (0+255),f,b
 21590  0111EA  4BD7               	infsnz	??_ADCAverage& (0+255),f,b
 21591  0111EC  2BD8               	incf	(??_ADCAverage+1)& (0+255),f,b
 21592  0111EE  0101               	movlb	1	; () banked
 21593  0111F0  5122               	movf	_total& (0+255),w,b
 21594  0111F2  0100               	movlb	0	; () banked
 21595  0111F4  25D7               	addwf	??_ADCAverage& (0+255),w,b
 21596  0111F6  0101               	movlb	1	; () banked
 21597  0111F8  6F22               	movwf	_total& (0+255),b
 21598  0111FA  5123               	movf	(_total+1)& (0+255),w,b
 21599  0111FC  0100               	movlb	0	; () banked
 21600  0111FE  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 21601  011200  0101               	movlb	1	; () banked
 21602  011202  6F23               	movwf	(_total+1)& (0+255),b
 21603                           
 21604                           ; BSR set to: 1
 21605                           ;main.c: 110: readings[readIndex] = (FunctReadADC(0));
 21606  011204  0E00               	movlw	0
 21607  011206  0100               	movlb	0	; () banked
 21608  011208  6F61               	movwf	(FunctReadADC@channel+1)& (0+255),b
 21609  01120A  0E00               	movlw	0
 21610  01120C  6F60               	movwf	FunctReadADC@channel& (0+255),b
 21611  01120E  EC81  F0AC         	call	_FunctReadADC	;wreg free
 21612  011212  90D8               	bcf	status,0,c
 21613  011214  3429               	rlcf	_readIndex,w,c
 21614  011216  6ED9               	movwf	fsr2l,c
 21615  011218  342A               	rlcf	_readIndex+1,w,c
 21616  01121A  6EDA               	movwf	fsr2h,c
 21617  01121C  0E00               	movlw	low _readings
 21618  01121E  26D9               	addwf	fsr2l,f,c
 21619  011220  0E02               	movlw	high _readings
 21620  011222  22DA               	addwfc	fsr2h,f,c
 21621  011224  0100               	movlb	0	; () banked
 21622  011226  C060  FFDE         	movff	?_FunctReadADC,postinc2
 21623  01122A  C061  FFDD         	movff	?_FunctReadADC+1,postdec2
 21624                           
 21625                           ; BSR set to: 0
 21626                           ;main.c: 112: total = total + readings[readIndex];
 21627  01122E  90D8               	bcf	status,0,c
 21628  011230  3429               	rlcf	_readIndex,w,c
 21629  011232  6ED9               	movwf	fsr2l,c
 21630  011234  342A               	rlcf	_readIndex+1,w,c
 21631  011236  6EDA               	movwf	fsr2h,c
 21632  011238  0E00               	movlw	low _readings
 21633  01123A  26D9               	addwf	fsr2l,f,c
 21634  01123C  0E02               	movlw	high _readings
 21635  01123E  22DA               	addwfc	fsr2h,f,c
 21636  011240  CFDE F0D7          	movff	postinc2,??_ADCAverage
 21637  011244  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 21638  011248  0101               	movlb	1	; () banked
 21639  01124A  5122               	movf	_total& (0+255),w,b
 21640  01124C  0100               	movlb	0	; () banked
 21641  01124E  25D7               	addwf	??_ADCAverage& (0+255),w,b
 21642  011250  0101               	movlb	1	; () banked
 21643  011252  6F22               	movwf	_total& (0+255),b
 21644  011254  5123               	movf	(_total+1)& (0+255),w,b
 21645  011256  0100               	movlb	0	; () banked
 21646  011258  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 21647  01125A  0101               	movlb	1	; () banked
 21648  01125C  6F23               	movwf	(_total+1)& (0+255),b
 21649                           
 21650                           ; BSR set to: 1
 21651                           ;main.c: 114: readIndex++;
 21652  01125E  4A29               	infsnz	_readIndex,f,c
 21653  011260  2A2A               	incf	_readIndex+1,f,c
 21654                           
 21655                           ; BSR set to: 1
 21656                           ;main.c: 116: if (readIndex >= numReadings) {
 21657  011262  51F1               	movf	_numReadings& (0+255),w,b
 21658  011264  5C29               	subwf	_readIndex,w,c
 21659  011266  502A               	movf	_readIndex+1,w,c
 21660  011268  0A80               	xorlw	128
 21661  01126A  0100               	movlb	0	; () banked
 21662  01126C  6FD7               	movwf	??_ADCAverage& (0+255),b
 21663  01126E  0101               	movlb	1	; () banked
 21664  011270  51F2               	movf	(_numReadings+1)& (0+255),w,b
 21665  011272  0A80               	xorlw	128
 21666  011274  0100               	movlb	0	; () banked
 21667  011276  59D7               	subwfb	??_ADCAverage& (0+255),w,b
 21668  011278  A0D8               	btfss	status,0,c
 21669  01127A  D004               	goto	l2131
 21670                           
 21671                           ; BSR set to: 0
 21672                           ;main.c: 118: readIndex = 0;
 21673  01127C  0E00               	movlw	0
 21674  01127E  6E2A               	movwf	_readIndex+1,c
 21675  011280  0E00               	movlw	0
 21676  011282  6E29               	movwf	_readIndex,c
 21677  011284                     l2131:
 21678                           
 21679                           ; BSR set to: 0
 21680                           ;main.c: 119: }
 21681                           ;main.c: 121: average = total / numReadings;
 21682                           
 21683                           ; BSR set to: 0
 21684  011284  C122  F060         	movff	_total,___awdiv@dividend
 21685  011288  C123  F061         	movff	_total+1,___awdiv@dividend+1
 21686  01128C  C1F1  F062         	movff	_numReadings,___awdiv@divisor
 21687  011290  C1F2  F063         	movff	_numReadings+1,___awdiv@divisor+1
 21688  011294  EC47  F0A4         	call	___awdiv	;wreg free
 21689  011298  C060  F0E9         	movff	?___awdiv,_average
 21690  01129C  C061  F0EA         	movff	?___awdiv+1,_average+1
 21691                           
 21692                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21693  0112A0  C0E9  F060         	movff	_average,___xxtofl@val
 21694  0112A4  C0EA  F061         	movff	_average+1,___xxtofl@val+1
 21695  0112A8  0100               	movlb	0	; () banked
 21696  0112AA  0E00               	movlw	0
 21697  0112AC  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 21698  0112AE  0EFF               	movlw	-1
 21699  0112B0  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 21700  0112B2  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 21701  0112B4  0E01               	movlw	1
 21702  0112B6  EC03  F097         	call	___xxtofl
 21703  0112BA  C060  F300         	movff	?___xxtofl,_ADCAverage$15665
 21704  0112BE  C061  F301         	movff	?___xxtofl+1,_ADCAverage$15665+1
 21705  0112C2  C062  F302         	movff	?___xxtofl+2,_ADCAverage$15665+2
 21706  0112C6  C063  F303         	movff	?___xxtofl+3,_ADCAverage$15665+3
 21707                           
 21708                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21709  0112CA  0E00               	movlw	0
 21710  0112CC  0100               	movlb	0	; () banked
 21711  0112CE  6FC6               	movwf	pow@y& (0+255),b
 21712  0112D0  0E00               	movlw	0
 21713  0112D2  6FC7               	movwf	(pow@y+1)& (0+255),b
 21714  0112D4  0E00               	movlw	0
 21715  0112D6  6FC8               	movwf	(pow@y+2)& (0+255),b
 21716  0112D8  0E40               	movlw	64
 21717  0112DA  6FC9               	movwf	(pow@y+3)& (0+255),b
 21718  0112DC  C300  F0C2         	movff	_ADCAverage$15665,pow@x
 21719  0112E0  C301  F0C3         	movff	_ADCAverage$15665+1,pow@x+1
 21720  0112E4  C302  F0C4         	movff	_ADCAverage$15665+2,pow@x+2
 21721  0112E8  C303  F0C5         	movff	_ADCAverage$15665+3,pow@x+3
 21722  0112EC  ECA1  F090         	call	_pow	;wreg free
 21723  0112F0  C0C2  F304         	movff	?_pow,_ADCAverage$15666
 21724  0112F4  C0C3  F305         	movff	?_pow+1,_ADCAverage$15666+1
 21725  0112F8  C0C4  F306         	movff	?_pow+2,_ADCAverage$15666+2
 21726  0112FC  C0C5  F307         	movff	?_pow+3,_ADCAverage$15666+3
 21727                           
 21728                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21729  011300  C0E9  F060         	movff	_average,___xxtofl@val
 21730  011304  C0EA  F061         	movff	_average+1,___xxtofl@val+1
 21731  011308  0100               	movlb	0	; () banked
 21732  01130A  0E00               	movlw	0
 21733  01130C  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 21734  01130E  0EFF               	movlw	-1
 21735  011310  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 21736  011312  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 21737  011314  0E01               	movlw	1
 21738  011316  EC03  F097         	call	___xxtofl
 21739  01131A  C060  F308         	movff	?___xxtofl,_ADCAverage$15667
 21740  01131E  C061  F309         	movff	?___xxtofl+1,_ADCAverage$15667+1
 21741  011322  C062  F30A         	movff	?___xxtofl+2,_ADCAverage$15667+2
 21742  011326  C063  F30B         	movff	?___xxtofl+3,_ADCAverage$15667+3
 21743                           
 21744                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21745  01132A  0E00               	movlw	0
 21746  01132C  0100               	movlb	0	; () banked
 21747  01132E  6FC6               	movwf	pow@y& (0+255),b
 21748  011330  0E00               	movlw	0
 21749  011332  6FC7               	movwf	(pow@y+1)& (0+255),b
 21750  011334  0E40               	movlw	64
 21751  011336  6FC8               	movwf	(pow@y+2)& (0+255),b
 21752  011338  0E40               	movlw	64
 21753  01133A  6FC9               	movwf	(pow@y+3)& (0+255),b
 21754  01133C  C308  F0C2         	movff	_ADCAverage$15667,pow@x
 21755  011340  C309  F0C3         	movff	_ADCAverage$15667+1,pow@x+1
 21756  011344  C30A  F0C4         	movff	_ADCAverage$15667+2,pow@x+2
 21757  011348  C30B  F0C5         	movff	_ADCAverage$15667+3,pow@x+3
 21758  01134C  ECA1  F090         	call	_pow	;wreg free
 21759  011350  C0C2  F30C         	movff	?_pow,_ADCAverage$15668
 21760  011354  C0C3  F30D         	movff	?_pow+1,_ADCAverage$15668+1
 21761  011358  C0C4  F30E         	movff	?_pow+2,_ADCAverage$15668+2
 21762  01135C  C0C5  F30F         	movff	?_pow+3,_ADCAverage$15668+3
 21763                           
 21764                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21765  011360  0EA6               	movlw	166
 21766  011362  0100               	movlb	0	; () banked
 21767  011364  6F72               	movwf	___flmul@a& (0+255),b
 21768  011366  0E9B               	movlw	155
 21769  011368  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21770  01136A  0EC4               	movlw	196
 21771  01136C  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21772  01136E  0E3A               	movlw	58
 21773  011370  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21774  011372  C304  F06E         	movff	_ADCAverage$15666,___flmul@b
 21775  011376  C305  F06F         	movff	_ADCAverage$15666+1,___flmul@b+1
 21776  01137A  C306  F070         	movff	_ADCAverage$15666+2,___flmul@b+2
 21777  01137E  C307  F071         	movff	_ADCAverage$15666+3,___flmul@b+3
 21778  011382  EC9D  F085         	call	___flmul	;wreg free
 21779  011386  C06E  F08F         	movff	?___flmul,___fladd@a
 21780  01138A  C06F  F090         	movff	?___flmul+1,___fladd@a+1
 21781  01138E  C070  F091         	movff	?___flmul+2,___fladd@a+2
 21782  011392  C071  F092         	movff	?___flmul+3,___fladd@a+3
 21783  011396  0E87               	movlw	135
 21784  011398  0100               	movlb	0	; () banked
 21785  01139A  6F72               	movwf	___flmul@a& (0+255),b
 21786  01139C  0E97               	movlw	151
 21787  01139E  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21788  0113A0  0E71               	movlw	113
 21789  0113A2  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21790  0113A4  0EB5               	movlw	181
 21791  0113A6  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21792  0113A8  C30C  F06E         	movff	_ADCAverage$15668,___flmul@b
 21793  0113AC  C30D  F06F         	movff	_ADCAverage$15668+1,___flmul@b+1
 21794  0113B0  C30E  F070         	movff	_ADCAverage$15668+2,___flmul@b+2
 21795  0113B4  C30F  F071         	movff	_ADCAverage$15668+3,___flmul@b+3
 21796  0113B8  EC9D  F085         	call	___flmul	;wreg free
 21797  0113BC  C06E  F08B         	movff	?___flmul,___fladd@b
 21798  0113C0  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 21799  0113C4  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 21800  0113C8  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 21801  0113CC  EC46  F087         	call	___fladd	;wreg free
 21802  0113D0  C08B  F310         	movff	?___fladd,_ADCAverage$15669
 21803  0113D4  C08C  F311         	movff	?___fladd+1,_ADCAverage$15669+1
 21804  0113D8  C08D  F312         	movff	?___fladd+2,_ADCAverage$15669+2
 21805  0113DC  C08E  F313         	movff	?___fladd+3,_ADCAverage$15669+3
 21806                           
 21807                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21808  0113E0  0E8C               	movlw	140
 21809  0113E2  0100               	movlb	0	; () banked
 21810  0113E4  6F72               	movwf	___flmul@a& (0+255),b
 21811  0113E6  0EB9               	movlw	185
 21812  0113E8  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21813  0113EA  0E6B               	movlw	107
 21814  0113EC  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21815  0113EE  0E3F               	movlw	63
 21816  0113F0  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21817  0113F2  C0E9  F060         	movff	_average,___xxtofl@val
 21818  0113F6  C0EA  F061         	movff	_average+1,___xxtofl@val+1
 21819  0113FA  0E00               	movlw	0
 21820  0113FC  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 21821  0113FE  0EFF               	movlw	-1
 21822  011400  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 21823  011402  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 21824  011404  0E01               	movlw	1
 21825  011406  EC03  F097         	call	___xxtofl
 21826  01140A  C060  F06E         	movff	?___xxtofl,___flmul@b
 21827  01140E  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 21828  011412  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 21829  011416  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 21830  01141A  EC9D  F085         	call	___flmul	;wreg free
 21831  01141E  C06E  F087         	movff	?___flmul,___flneg@f1
 21832  011422  C06F  F088         	movff	?___flmul+1,___flneg@f1+1
 21833  011426  C070  F089         	movff	?___flmul+2,___flneg@f1+2
 21834  01142A  C071  F08A         	movff	?___flmul+3,___flneg@f1+3
 21835  01142E  ECDF  F0AD         	call	___flneg	;wreg free
 21836  011432  C087  F08F         	movff	?___flneg,___fladd@a
 21837  011436  C088  F090         	movff	?___flneg+1,___fladd@a+1
 21838  01143A  C089  F091         	movff	?___flneg+2,___fladd@a+2
 21839  01143E  C08A  F092         	movff	?___flneg+3,___fladd@a+3
 21840  011442  C310  F08B         	movff	_ADCAverage$15669,___fladd@b
 21841  011446  C311  F08C         	movff	_ADCAverage$15669+1,___fladd@b+1
 21842  01144A  C312  F08D         	movff	_ADCAverage$15669+2,___fladd@b+2
 21843  01144E  C313  F08E         	movff	_ADCAverage$15669+3,___fladd@b+3
 21844  011452  EC46  F087         	call	___fladd	;wreg free
 21845  011456  C08B  F314         	movff	?___fladd,_ADCAverage$15670
 21846  01145A  C08C  F315         	movff	?___fladd+1,_ADCAverage$15670+1
 21847  01145E  C08D  F316         	movff	?___fladd+2,_ADCAverage$15670+2
 21848  011462  C08E  F317         	movff	?___fladd+3,_ADCAverage$15670+3
 21849                           
 21850                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21851  011466  0E7B               	movlw	123
 21852  011468  0100               	movlb	0	; () banked
 21853  01146A  6F8F               	movwf	___fladd@a& (0+255),b
 21854  01146C  0E54               	movlw	84
 21855  01146E  6F90               	movwf	(___fladd@a+1)& (0+255),b
 21856  011470  0E63               	movlw	99
 21857  011472  6F91               	movwf	(___fladd@a+2)& (0+255),b
 21858  011474  0E43               	movlw	67
 21859  011476  6F92               	movwf	(___fladd@a+3)& (0+255),b
 21860  011478  C314  F08B         	movff	_ADCAverage$15670,___fladd@b
 21861  01147C  C315  F08C         	movff	_ADCAverage$15670+1,___fladd@b+1
 21862  011480  C316  F08D         	movff	_ADCAverage$15670+2,___fladd@b+2
 21863  011484  C317  F08E         	movff	_ADCAverage$15670+3,___fladd@b+3
 21864  011488  EC46  F087         	call	___fladd	;wreg free
 21865  01148C  C08B  F09F         	movff	?___fladd,___fltol@f1
 21866  011490  C08C  F0A0         	movff	?___fladd+1,___fltol@f1+1
 21867  011494  C08D  F0A1         	movff	?___fladd+2,___fltol@f1+2
 21868  011498  C08E  F0A2         	movff	?___fladd+3,___fltol@f1+3
 21869  01149C  ECF3  F09E         	call	___fltol	;wreg free
 21870  0114A0  C09F  F0E9         	movff	?___fltol,_average
 21871  0114A4  C0A0  F0EA         	movff	?___fltol+1,_average+1
 21872                           
 21873                           ;main.c: 124: average *= 10;
 21874  0114A8  C0E9  F060         	movff	_average,___wmul@multiplier
 21875  0114AC  C0EA  F061         	movff	_average+1,___wmul@multiplier+1
 21876  0114B0  0E00               	movlw	0
 21877  0114B2  0100               	movlb	0	; () banked
 21878  0114B4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21879  0114B6  0E0A               	movlw	10
 21880  0114B8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21881  0114BA  EC50  F0AE         	call	___wmul	;wreg free
 21882  0114BE  C060  F0E9         	movff	?___wmul,_average
 21883  0114C2  C061  F0EA         	movff	?___wmul+1,_average+1
 21884                           
 21885                           ;main.c: 126: HMI_SetNumber(average);
 21886  0114C6  C0E9  F076         	movff	_average,HMI_SetNumber@pInput
 21887  0114CA  C0EA  F077         	movff	_average+1,HMI_SetNumber@pInput+1
 21888  0114CE  EC9F  F0AE         	call	_HMI_SetNumber	;wreg free
 21889                           
 21890                           ;main.c: 127: HMI_Render();
 21891  0114D2  EC12  F0AD         	call	_HMI_Render	;wreg free
 21892  0114D6  0012               	return	
 21893  0114D8                     __end_of_ADCAverage:
 21894                           	opt stack 0
 21895                           tosu	equ	0xFFF
 21896                           tosh	equ	0xFFE
 21897                           tosl	equ	0xFFD
 21898                           pclath	equ	0xFFA
 21899                           tblptru	equ	0xFF8
 21900                           tblptrh	equ	0xFF7
 21901                           tblptrl	equ	0xFF6
 21902                           tablat	equ	0xFF5
 21903                           prodh	equ	0xFF4
 21904                           prodl	equ	0xFF3
 21905                           intcon	equ	0xFF2
 21906                           indf0	equ	0xFEF
 21907                           postinc0	equ	0xFEE
 21908                           fsr0h	equ	0xFEA
 21909                           fsr0l	equ	0xFE9
 21910                           wreg	equ	0xFE8
 21911                           indf1	equ	0xFE7
 21912                           postdec1	equ	0xFE5
 21913                           fsr1h	equ	0xFE2
 21914                           fsr1l	equ	0xFE1
 21915                           indf2	equ	0xFDF
 21916                           postinc2	equ	0xFDE
 21917                           postdec2	equ	0xFDD
 21918                           plusw2	equ	0xFDB
 21919                           fsr2h	equ	0xFDA
 21920                           fsr2l	equ	0xFD9
 21921                           status	equ	0xFD8
 21922                           
 21923 ;; *************** function _pow *****************
 21924 ;; Defined at:
 21925 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 21926 ;; Parameters:    Size  Location     Type
 21927 ;;  x               4   98[BANK0 ] int 
 21928 ;;  y               4  102[BANK0 ] int 
 21929 ;; Auto vars:     Size  Location     Type
 21930 ;;  yi              4  115[BANK0 ] unsigned long 
 21931 ;;  sign            1  114[BANK0 ] unsigned char 
 21932 ;; Return value:  Size  Location     Type
 21933 ;;                  4   98[BANK0 ] unsigned char 
 21934 ;; Registers used:
 21935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21936 ;; Tracked objects:
 21937 ;;		On entry : 0/0
 21938 ;;		On exit  : 0/0
 21939 ;;		Unchanged: 0/0
 21940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21941 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21942 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21944 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21945 ;;Total ram usage:       21 bytes
 21946 ;; Hardware stack levels used:    1
 21947 ;; Hardware stack levels required when called:   10
 21948 ;; This function calls:
 21949 ;;		___flge
 21950 ;;		___flmul
 21951 ;;		___flneg
 21952 ;;		___fltol
 21953 ;;		___xxtofl
 21954 ;;		_exp
 21955 ;;		_log
 21956 ;; This function is called by:
 21957 ;;		_ADCAverage
 21958 ;; This function uses a non-reentrant model
 21959 ;;
 21960                           
 21961                           	psect	text123
 21962  012142                     __ptext123:
 21963                           	opt stack 0
 21964  012142                     _pow:
 21965                           	opt stack 18
 21966                           
 21967                           ;incstack = 0
 21968  012142  0E00               	movlw	0
 21969  012144  0100               	movlb	0	; () banked
 21970  012146  6FD2               	movwf	pow@sign& (0+255),b
 21971                           
 21972                           ; BSR set to: 0
 21973  012148  51C2               	movf	pow@x& (0+255),w,b
 21974  01214A  11C3               	iorwf	(pow@x+1)& (0+255),w,b
 21975  01214C  11C4               	iorwf	(pow@x+2)& (0+255),w,b
 21976  01214E  11C5               	iorwf	(pow@x+3)& (0+255),w,b
 21977  012150  A4D8               	btfss	status,2,c
 21978  012152  D024               	goto	l2742
 21979                           
 21980                           ; BSR set to: 0
 21981  012154  0E00               	movlw	0
 21982  012156  6F60               	movwf	___flge@ff1& (0+255),b
 21983  012158  0E00               	movlw	0
 21984  01215A  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 21985  01215C  0E00               	movlw	0
 21986  01215E  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 21987  012160  0E00               	movlw	0
 21988  012162  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 21989  012164  C0C6  F064         	movff	pow@y,___flge@ff2
 21990  012168  C0C7  F065         	movff	pow@y+1,___flge@ff2+1
 21991  01216C  C0C8  F066         	movff	pow@y+2,___flge@ff2+2
 21992  012170  C0C9  F067         	movff	pow@y+3,___flge@ff2+3
 21993  012174  ECD1  F09A         	call	___flge	;wreg free
 21994  012178  0100               	movlb	0	; () banked
 21995  01217A  A0D8               	btfss	status,0,c
 21996  01217C  D005               	goto	l2743
 21997                           
 21998                           ; BSR set to: 0
 21999  01217E  0E00               	movlw	0
 22000  012180  0101               	movlb	1	; () banked
 22001  012182  6F1B               	movwf	(_errno+1)& (0+255),b
 22002  012184  0E21               	movlw	33
 22003  012186  6F1A               	movwf	_errno& (0+255),b
 22004  012188                     l2743:
 22005  012188  0E00               	movlw	0
 22006  01218A  0100               	movlb	0	; () banked
 22007  01218C  6FC2               	movwf	?_pow& (0+255),b
 22008  01218E  0E00               	movlw	0
 22009  012190  6FC3               	movwf	(?_pow+1)& (0+255),b
 22010  012192  0E00               	movlw	0
 22011  012194  6FC4               	movwf	(?_pow+2)& (0+255),b
 22012  012196  0E00               	movlw	0
 22013  012198  6FC5               	movwf	(?_pow+3)& (0+255),b
 22014                           
 22015                           ; BSR set to: 0
 22016  01219A  0012               	return	
 22017  01219C                     l2742:
 22018                           
 22019                           ; BSR set to: 0
 22020                           
 22021                           ; BSR set to: 0
 22022  01219C  51C6               	movf	pow@y& (0+255),w,b
 22023  01219E  11C7               	iorwf	(pow@y+1)& (0+255),w,b
 22024  0121A0  11C8               	iorwf	(pow@y+2)& (0+255),w,b
 22025  0121A2  11C9               	iorwf	(pow@y+3)& (0+255),w,b
 22026  0121A4  A4D8               	btfss	status,2,c
 22027  0121A6  D009               	goto	l2745
 22028                           
 22029                           ; BSR set to: 0
 22030  0121A8  0E00               	movlw	0
 22031  0121AA  6FC2               	movwf	?_pow& (0+255),b
 22032  0121AC  0E00               	movlw	0
 22033  0121AE  6FC3               	movwf	(?_pow+1)& (0+255),b
 22034  0121B0  0E80               	movlw	128
 22035  0121B2  6FC4               	movwf	(?_pow+2)& (0+255),b
 22036  0121B4  0E3F               	movlw	63
 22037  0121B6  6FC5               	movwf	(?_pow+3)& (0+255),b
 22038                           
 22039                           ; BSR set to: 0
 22040  0121B8  0012               	return	
 22041  0121BA                     l2745:
 22042                           
 22043                           ; BSR set to: 0
 22044                           
 22045                           ; BSR set to: 0
 22046  0121BA  AFC5               	btfss	(pow@x+3)& (0+255),7,b
 22047  0121BC  D04F               	goto	l2746
 22048                           
 22049                           ; BSR set to: 0
 22050  0121BE  C0C6  F09F         	movff	pow@y,___fltol@f1
 22051  0121C2  C0C7  F0A0         	movff	pow@y+1,___fltol@f1+1
 22052  0121C6  C0C8  F0A1         	movff	pow@y+2,___fltol@f1+2
 22053  0121CA  C0C9  F0A2         	movff	pow@y+3,___fltol@f1+3
 22054  0121CE  ECF3  F09E         	call	___fltol	;wreg free
 22055  0121D2  C09F  F0D3         	movff	?___fltol,pow@yi
 22056  0121D6  C0A0  F0D4         	movff	?___fltol+1,pow@yi+1
 22057  0121DA  C0A1  F0D5         	movff	?___fltol+2,pow@yi+2
 22058  0121DE  C0A2  F0D6         	movff	?___fltol+3,pow@yi+3
 22059  0121E2  C0D3  F060         	movff	pow@yi,___xxtofl@val
 22060  0121E6  C0D4  F061         	movff	pow@yi+1,___xxtofl@val+1
 22061  0121EA  C0D5  F062         	movff	pow@yi+2,___xxtofl@val+2
 22062  0121EE  C0D6  F063         	movff	pow@yi+3,___xxtofl@val+3
 22063  0121F2  0E00               	movlw	0
 22064  0121F4  EC03  F097         	call	___xxtofl
 22065  0121F8  0100               	movlb	0	; () banked
 22066  0121FA  51C6               	movf	pow@y& (0+255),w,b
 22067  0121FC  1960               	xorwf	?___xxtofl& (0+255),w,b
 22068  0121FE  E10A               	bnz	u11870
 22069  012200  51C7               	movf	(pow@y+1)& (0+255),w,b
 22070  012202  1961               	xorwf	(?___xxtofl+1)& (0+255),w,b
 22071  012204  E107               	bnz	u11870
 22072  012206  51C8               	movf	(pow@y+2)& (0+255),w,b
 22073  012208  1962               	xorwf	(?___xxtofl+2)& (0+255),w,b
 22074  01220A  E104               	bnz	u11870
 22075  01220C  51C9               	movf	(pow@y+3)& (0+255),w,b
 22076  01220E  1963               	xorwf	(?___xxtofl+3)& (0+255),w,b
 22077  012210  B4D8               	btfsc	status,2,c
 22078  012212  D00F               	goto	l2747
 22079  012214                     u11870:
 22080                           
 22081                           ; BSR set to: 0
 22082  012214  0E00               	movlw	0
 22083  012216  0101               	movlb	1	; () banked
 22084  012218  6F1B               	movwf	(_errno+1)& (0+255),b
 22085  01221A  0E21               	movlw	33
 22086  01221C  6F1A               	movwf	_errno& (0+255),b
 22087  01221E  0E00               	movlw	0
 22088  012220  0100               	movlb	0	; () banked
 22089  012222  6FC2               	movwf	?_pow& (0+255),b
 22090  012224  0E00               	movlw	0
 22091  012226  6FC3               	movwf	(?_pow+1)& (0+255),b
 22092  012228  0E00               	movlw	0
 22093  01222A  6FC4               	movwf	(?_pow+2)& (0+255),b
 22094  01222C  0E00               	movlw	0
 22095  01222E  6FC5               	movwf	(?_pow+3)& (0+255),b
 22096                           
 22097                           ; BSR set to: 0
 22098  012230  0012               	return	
 22099  012232                     l2747:
 22100                           
 22101                           ; BSR set to: 0
 22102                           
 22103                           ; BSR set to: 0
 22104  012232  51D3               	movf	pow@yi& (0+255),w,b
 22105  012234  0B01               	andlw	1
 22106  012236  6FD2               	movwf	pow@sign& (0+255),b
 22107                           
 22108                           ; BSR set to: 0
 22109  012238  C0C2  F087         	movff	pow@x,___flneg@f1
 22110  01223C  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 22111  012240  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 22112  012244  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 22113  012248  ECDF  F0AD         	call	___flneg	;wreg free
 22114  01224C  C087  F0C2         	movff	?___flneg,pow@x
 22115  012250  C088  F0C3         	movff	?___flneg+1,pow@x+1
 22116  012254  C089  F0C4         	movff	?___flneg+2,pow@x+2
 22117  012258  C08A  F0C5         	movff	?___flneg+3,pow@x+3
 22118  01225C                     l2746:
 22119  01225C  C0C2  F0AF         	movff	pow@x,log@x
 22120  012260  C0C3  F0B0         	movff	pow@x+1,log@x+1
 22121  012264  C0C4  F0B1         	movff	pow@x+2,log@x+2
 22122  012268  C0C5  F0B2         	movff	pow@x+3,log@x+3
 22123  01226C  EC95  F095         	call	_log	;wreg free
 22124  012270  C0AF  F0CA         	movff	?_log,_pow$15671
 22125  012274  C0B0  F0CB         	movff	?_log+1,_pow$15671+1
 22126  012278  C0B1  F0CC         	movff	?_log+2,_pow$15671+2
 22127  01227C  C0B2  F0CD         	movff	?_log+3,_pow$15671+3
 22128  012280  C0CA  F06E         	movff	_pow$15671,___flmul@b
 22129  012284  C0CB  F06F         	movff	_pow$15671+1,___flmul@b+1
 22130  012288  C0CC  F070         	movff	_pow$15671+2,___flmul@b+2
 22131  01228C  C0CD  F071         	movff	_pow$15671+3,___flmul@b+3
 22132  012290  C0C6  F072         	movff	pow@y,___flmul@a
 22133  012294  C0C7  F073         	movff	pow@y+1,___flmul@a+1
 22134  012298  C0C8  F074         	movff	pow@y+2,___flmul@a+2
 22135  01229C  C0C9  F075         	movff	pow@y+3,___flmul@a+3
 22136  0122A0  EC9D  F085         	call	___flmul	;wreg free
 22137  0122A4  C06E  F0CE         	movff	?___flmul,_pow$15672
 22138  0122A8  C06F  F0CF         	movff	?___flmul+1,_pow$15672+1
 22139  0122AC  C070  F0D0         	movff	?___flmul+2,_pow$15672+2
 22140  0122B0  C071  F0D1         	movff	?___flmul+3,_pow$15672+3
 22141  0122B4  C0CE  F0B7         	movff	_pow$15672,exp@x
 22142  0122B8  C0CF  F0B8         	movff	_pow$15672+1,exp@x+1
 22143  0122BC  C0D0  F0B9         	movff	_pow$15672+2,exp@x+2
 22144  0122C0  C0D1  F0BA         	movff	_pow$15672+3,exp@x+3
 22145  0122C4  EC5E  F08E         	call	_exp	;wreg free
 22146  0122C8  C0B7  F0C2         	movff	?_exp,pow@x
 22147  0122CC  C0B8  F0C3         	movff	?_exp+1,pow@x+1
 22148  0122D0  C0B9  F0C4         	movff	?_exp+2,pow@x+2
 22149  0122D4  C0BA  F0C5         	movff	?_exp+3,pow@x+3
 22150  0122D8  0100               	movlb	0	; () banked
 22151  0122DA  51D2               	movf	pow@sign& (0+255),w,b
 22152  0122DC  B4D8               	btfsc	status,2,c
 22153  0122DE  D013               	goto	l2748
 22154                           
 22155                           ; BSR set to: 0
 22156  0122E0  C0C2  F087         	movff	pow@x,___flneg@f1
 22157  0122E4  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 22158  0122E8  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 22159  0122EC  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 22160  0122F0  ECDF  F0AD         	call	___flneg	;wreg free
 22161  0122F4  C087  F0C2         	movff	?___flneg,?_pow
 22162  0122F8  C088  F0C3         	movff	?___flneg+1,?_pow+1
 22163  0122FC  C089  F0C4         	movff	?___flneg+2,?_pow+2
 22164  012300  C08A  F0C5         	movff	?___flneg+3,?_pow+3
 22165  012304  0012               	return	
 22166  012306                     l2748:
 22167                           
 22168                           ; BSR set to: 0
 22169  012306  C0C2  F0C2         	movff	pow@x,?_pow
 22170  01230A  C0C3  F0C3         	movff	pow@x+1,?_pow+1
 22171  01230E  C0C4  F0C4         	movff	pow@x+2,?_pow+2
 22172  012312  C0C5  F0C5         	movff	pow@x+3,?_pow+3
 22173  012316  0012               	return		;funcret
 22174  012318                     __end_of_pow:
 22175                           	opt stack 0
 22176                           tosu	equ	0xFFF
 22177                           tosh	equ	0xFFE
 22178                           tosl	equ	0xFFD
 22179                           pclath	equ	0xFFA
 22180                           tblptru	equ	0xFF8
 22181                           tblptrh	equ	0xFF7
 22182                           tblptrl	equ	0xFF6
 22183                           tablat	equ	0xFF5
 22184                           prodh	equ	0xFF4
 22185                           prodl	equ	0xFF3
 22186                           intcon	equ	0xFF2
 22187                           indf0	equ	0xFEF
 22188                           postinc0	equ	0xFEE
 22189                           fsr0h	equ	0xFEA
 22190                           fsr0l	equ	0xFE9
 22191                           wreg	equ	0xFE8
 22192                           indf1	equ	0xFE7
 22193                           postdec1	equ	0xFE5
 22194                           fsr1h	equ	0xFE2
 22195                           fsr1l	equ	0xFE1
 22196                           indf2	equ	0xFDF
 22197                           postinc2	equ	0xFDE
 22198                           postdec2	equ	0xFDD
 22199                           plusw2	equ	0xFDB
 22200                           fsr2h	equ	0xFDA
 22201                           fsr2l	equ	0xFD9
 22202                           status	equ	0xFD8
 22203                           
 22204 ;; *************** function _log *****************
 22205 ;; Defined at:
 22206 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 22207 ;; Parameters:    Size  Location     Type
 22208 ;;  x               4   79[BANK0 ] unsigned char 
 22209 ;; Auto vars:     Size  Location     Type
 22210 ;;  exponent        2   83[BANK0 ] int 
 22211 ;; Return value:  Size  Location     Type
 22212 ;;                  4   79[BANK0 ] int 
 22213 ;; Registers used:
 22214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22215 ;; Tracked objects:
 22216 ;;		On entry : 0/0
 22217 ;;		On exit  : 0/0
 22218 ;;		Unchanged: 0/0
 22219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22220 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22221 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22223 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22224 ;;Total ram usage:        6 bytes
 22225 ;; Hardware stack levels used:    1
 22226 ;; Hardware stack levels required when called:    9
 22227 ;; This function calls:
 22228 ;;		___fladd
 22229 ;;		___flmul
 22230 ;;		___xxtofl
 22231 ;;		_eval_poly
 22232 ;;		_frexp
 22233 ;; This function is called by:
 22234 ;;		_pow
 22235 ;; This function uses a non-reentrant model
 22236 ;;
 22237                           
 22238                           	psect	text124
 22239  012B2A                     __ptext124:
 22240                           	opt stack 0
 22241  012B2A                     _log:
 22242                           	opt stack 18
 22243                           
 22244                           ;incstack = 0
 22245  012B2A  0100               	movlb	0	; () banked
 22246  012B2C  AFB2               	btfss	(log@x+3)& (0+255),7,b
 22247  012B2E  D00F               	goto	l2944
 22248                           
 22249                           ; BSR set to: 0
 22250  012B30  0E00               	movlw	0
 22251  012B32  0101               	movlb	1	; () banked
 22252  012B34  6F1B               	movwf	(_errno+1)& (0+255),b
 22253  012B36  0E21               	movlw	33
 22254  012B38  6F1A               	movwf	_errno& (0+255),b
 22255  012B3A  0E00               	movlw	0
 22256  012B3C  0100               	movlb	0	; () banked
 22257  012B3E  6FAF               	movwf	?_log& (0+255),b
 22258  012B40  0E00               	movlw	0
 22259  012B42  6FB0               	movwf	(?_log+1)& (0+255),b
 22260  012B44  0E00               	movlw	0
 22261  012B46  6FB1               	movwf	(?_log+2)& (0+255),b
 22262  012B48  0E00               	movlw	0
 22263  012B4A  6FB2               	movwf	(?_log+3)& (0+255),b
 22264                           
 22265                           ; BSR set to: 0
 22266  012B4C  0012               	return	
 22267  012B4E                     l2944:
 22268                           
 22269                           ; BSR set to: 0
 22270                           
 22271                           ; BSR set to: 0
 22272  012B4E  51AF               	movf	log@x& (0+255),w,b
 22273  012B50  11B0               	iorwf	(log@x+1)& (0+255),w,b
 22274  012B52  11B1               	iorwf	(log@x+2)& (0+255),w,b
 22275  012B54  11B2               	iorwf	(log@x+3)& (0+255),w,b
 22276  012B56  A4D8               	btfss	status,2,c
 22277  012B58  D00F               	goto	l2946
 22278                           
 22279                           ; BSR set to: 0
 22280  012B5A  0E00               	movlw	0
 22281  012B5C  0101               	movlb	1	; () banked
 22282  012B5E  6F1B               	movwf	(_errno+1)& (0+255),b
 22283  012B60  0E22               	movlw	34
 22284  012B62  6F1A               	movwf	_errno& (0+255),b
 22285  012B64  0E00               	movlw	0
 22286  012B66  0100               	movlb	0	; () banked
 22287  012B68  6FAF               	movwf	?_log& (0+255),b
 22288  012B6A  0E00               	movlw	0
 22289  012B6C  6FB0               	movwf	(?_log+1)& (0+255),b
 22290  012B6E  0E00               	movlw	0
 22291  012B70  6FB1               	movwf	(?_log+2)& (0+255),b
 22292  012B72  0E00               	movlw	0
 22293  012B74  6FB2               	movwf	(?_log+3)& (0+255),b
 22294                           
 22295                           ; BSR set to: 0
 22296  012B76  0012               	return	
 22297  012B78                     l2946:
 22298                           
 22299                           ; BSR set to: 0
 22300                           
 22301                           ; BSR set to: 0
 22302  012B78  0E00               	movlw	0
 22303  012B7A  6F72               	movwf	___flmul@a& (0+255),b
 22304  012B7C  0E00               	movlw	0
 22305  012B7E  6F73               	movwf	(___flmul@a+1)& (0+255),b
 22306  012B80  0E00               	movlw	0
 22307  012B82  6F74               	movwf	(___flmul@a+2)& (0+255),b
 22308  012B84  0E40               	movlw	64
 22309  012B86  6F75               	movwf	(___flmul@a+3)& (0+255),b
 22310  012B88  0EB3               	movlw	low log@exponent
 22311  012B8A  6F64               	movwf	frexp@eptr& (0+255),b
 22312  012B8C  0E00               	movlw	high log@exponent
 22313  012B8E  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 22314  012B90  C0AF  F060         	movff	log@x,frexp@value
 22315  012B94  C0B0  F061         	movff	log@x+1,frexp@value+1
 22316  012B98  C0B1  F062         	movff	log@x+2,frexp@value+2
 22317  012B9C  C0B2  F063         	movff	log@x+3,frexp@value+3
 22318  012BA0  EC70  F0A1         	call	_frexp	;wreg free
 22319  012BA4  C060  F06E         	movff	?_frexp,___flmul@b
 22320  012BA8  C061  F06F         	movff	?_frexp+1,___flmul@b+1
 22321  012BAC  C062  F070         	movff	?_frexp+2,___flmul@b+2
 22322  012BB0  C063  F071         	movff	?_frexp+3,___flmul@b+3
 22323  012BB4  EC9D  F085         	call	___flmul	;wreg free
 22324  012BB8  C06E  F08B         	movff	?___flmul,___fladd@b
 22325  012BBC  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 22326  012BC0  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 22327  012BC4  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 22328  012BC8  0E00               	movlw	0
 22329  012BCA  0100               	movlb	0	; () banked
 22330  012BCC  6F8F               	movwf	___fladd@a& (0+255),b
 22331  012BCE  0E00               	movlw	0
 22332  012BD0  6F90               	movwf	(___fladd@a+1)& (0+255),b
 22333  012BD2  0E80               	movlw	128
 22334  012BD4  6F91               	movwf	(___fladd@a+2)& (0+255),b
 22335  012BD6  0EBF               	movlw	191
 22336  012BD8  6F92               	movwf	(___fladd@a+3)& (0+255),b
 22337  012BDA  EC46  F087         	call	___fladd	;wreg free
 22338  012BDE  C08B  F0AF         	movff	?___fladd,log@x
 22339  012BE2  C08C  F0B0         	movff	?___fladd+1,log@x+1
 22340  012BE6  C08D  F0B1         	movff	?___fladd+2,log@x+2
 22341  012BEA  C08E  F0B2         	movff	?___fladd+3,log@x+3
 22342  012BEE  0100               	movlb	0	; () banked
 22343  012BF0  07B3               	decf	log@exponent& (0+255),f,b
 22344  012BF2  A0D8               	btfss	status,0,c
 22345  012BF4  07B4               	decf	(log@exponent+1)& (0+255),f,b
 22346                           
 22347                           ; BSR set to: 0
 22348  012BF6  C0AF  F09F         	movff	log@x,eval_poly@x
 22349  012BFA  C0B0  F0A0         	movff	log@x+1,eval_poly@x+1
 22350  012BFE  C0B1  F0A1         	movff	log@x+2,eval_poly@x+2
 22351  012C02  C0B2  F0A2         	movff	log@x+3,eval_poly@x+3
 22352  012C06  0E4B               	movlw	low log@coeff
 22353  012C08  6FA3               	movwf	eval_poly@d& (0+255),b
 22354  012C0A  0EFE               	movlw	high log@coeff
 22355  012C0C  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 22356  012C0E  0E00               	movlw	0
 22357  012C10  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 22358  012C12  0E08               	movlw	8
 22359  012C14  6FA5               	movwf	eval_poly@n& (0+255),b
 22360  012C16  EC81  F09D         	call	_eval_poly	;wreg free
 22361  012C1A  C09F  F0AF         	movff	?_eval_poly,log@x
 22362  012C1E  C0A0  F0B0         	movff	?_eval_poly+1,log@x+1
 22363  012C22  C0A1  F0B1         	movff	?_eval_poly+2,log@x+2
 22364  012C26  C0A2  F0B2         	movff	?_eval_poly+3,log@x+3
 22365  012C2A  0E18               	movlw	24
 22366  012C2C  0100               	movlb	0	; () banked
 22367  012C2E  6F72               	movwf	___flmul@a& (0+255),b
 22368  012C30  0E72               	movlw	114
 22369  012C32  6F73               	movwf	(___flmul@a+1)& (0+255),b
 22370  012C34  0E31               	movlw	49
 22371  012C36  6F74               	movwf	(___flmul@a+2)& (0+255),b
 22372  012C38  0E3F               	movlw	63
 22373  012C3A  6F75               	movwf	(___flmul@a+3)& (0+255),b
 22374  012C3C  C0B3  F060         	movff	log@exponent,___xxtofl@val
 22375  012C40  C0B4  F061         	movff	log@exponent+1,___xxtofl@val+1
 22376  012C44  0E00               	movlw	0
 22377  012C46  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 22378  012C48  0EFF               	movlw	-1
 22379  012C4A  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 22380  012C4C  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 22381  012C4E  0E01               	movlw	1
 22382  012C50  EC03  F097         	call	___xxtofl
 22383  012C54  C060  F06E         	movff	?___xxtofl,___flmul@b
 22384  012C58  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 22385  012C5C  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 22386  012C60  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 22387  012C64  EC9D  F085         	call	___flmul	;wreg free
 22388  012C68  C06E  F08B         	movff	?___flmul,___fladd@b
 22389  012C6C  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 22390  012C70  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 22391  012C74  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 22392  012C78  C0AF  F08F         	movff	log@x,___fladd@a
 22393  012C7C  C0B0  F090         	movff	log@x+1,___fladd@a+1
 22394  012C80  C0B1  F091         	movff	log@x+2,___fladd@a+2
 22395  012C84  C0B2  F092         	movff	log@x+3,___fladd@a+3
 22396  012C88  EC46  F087         	call	___fladd	;wreg free
 22397  012C8C  C08B  F0AF         	movff	?___fladd,?_log
 22398  012C90  C08C  F0B0         	movff	?___fladd+1,?_log+1
 22399  012C94  C08D  F0B1         	movff	?___fladd+2,?_log+2
 22400  012C98  C08E  F0B2         	movff	?___fladd+3,?_log+3
 22401  012C9C  0012               	return	
 22402  012C9E                     __end_of_log:
 22403                           	opt stack 0
 22404                           tosu	equ	0xFFF
 22405                           tosh	equ	0xFFE
 22406                           tosl	equ	0xFFD
 22407                           pclath	equ	0xFFA
 22408                           tblptru	equ	0xFF8
 22409                           tblptrh	equ	0xFF7
 22410                           tblptrl	equ	0xFF6
 22411                           tablat	equ	0xFF5
 22412                           prodh	equ	0xFF4
 22413                           prodl	equ	0xFF3
 22414                           intcon	equ	0xFF2
 22415                           indf0	equ	0xFEF
 22416                           postinc0	equ	0xFEE
 22417                           fsr0h	equ	0xFEA
 22418                           fsr0l	equ	0xFE9
 22419                           wreg	equ	0xFE8
 22420                           indf1	equ	0xFE7
 22421                           postdec1	equ	0xFE5
 22422                           fsr1h	equ	0xFE2
 22423                           fsr1l	equ	0xFE1
 22424                           indf2	equ	0xFDF
 22425                           postinc2	equ	0xFDE
 22426                           postdec2	equ	0xFDD
 22427                           plusw2	equ	0xFDB
 22428                           fsr2h	equ	0xFDA
 22429                           fsr2l	equ	0xFD9
 22430                           status	equ	0xFD8
 22431                           
 22432 ;; *************** function _exp *****************
 22433 ;; Defined at:
 22434 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 22435 ;; Parameters:    Size  Location     Type
 22436 ;;  x               4   87[BANK0 ] int 
 22437 ;; Auto vars:     Size  Location     Type
 22438 ;;  exponent        2   95[BANK0 ] int 
 22439 ;;  sign            1   97[BANK0 ] unsigned char 
 22440 ;; Return value:  Size  Location     Type
 22441 ;;                  4   87[BANK0 ] unsigned char 
 22442 ;; Registers used:
 22443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22444 ;; Tracked objects:
 22445 ;;		On entry : 0/0
 22446 ;;		On exit  : 0/0
 22447 ;;		Unchanged: 0/0
 22448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22449 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22450 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22452 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22453 ;;Total ram usage:       11 bytes
 22454 ;; Hardware stack levels used:    1
 22455 ;; Hardware stack levels required when called:    9
 22456 ;; This function calls:
 22457 ;;		___fldiv
 22458 ;;		___flge
 22459 ;;		___flmul
 22460 ;;		___flneg
 22461 ;;		___flsub
 22462 ;;		___fltol
 22463 ;;		___xxtofl
 22464 ;;		_eval_poly
 22465 ;;		_floor
 22466 ;;		_ldexp
 22467 ;; This function is called by:
 22468 ;;		_pow
 22469 ;; This function uses a non-reentrant model
 22470 ;;
 22471                           
 22472                           	psect	text125
 22473  011CBC                     __ptext125:
 22474                           	opt stack 0
 22475  011CBC                     _exp:
 22476                           	opt stack 18
 22477                           
 22478                           ;incstack = 0
 22479  011CBC  0100               	movlb	0	; () banked
 22480  011CBE  51B7               	movf	exp@x& (0+255),w,b
 22481  011CC0  11B8               	iorwf	(exp@x+1)& (0+255),w,b
 22482  011CC2  11B9               	iorwf	(exp@x+2)& (0+255),w,b
 22483  011CC4  11BA               	iorwf	(exp@x+3)& (0+255),w,b
 22484  011CC6  A4D8               	btfss	status,2,c
 22485  011CC8  D009               	goto	l2902
 22486                           
 22487                           ; BSR set to: 0
 22488  011CCA  0E00               	movlw	0
 22489  011CCC  6FB7               	movwf	?_exp& (0+255),b
 22490  011CCE  0E00               	movlw	0
 22491  011CD0  6FB8               	movwf	(?_exp+1)& (0+255),b
 22492  011CD2  0E80               	movlw	128
 22493  011CD4  6FB9               	movwf	(?_exp+2)& (0+255),b
 22494  011CD6  0E3F               	movlw	63
 22495  011CD8  6FBA               	movwf	(?_exp+3)& (0+255),b
 22496                           
 22497                           ; BSR set to: 0
 22498  011CDA  0012               	return	
 22499  011CDC                     l2902:
 22500                           
 22501                           ; BSR set to: 0
 22502                           
 22503                           ; BSR set to: 0
 22504  011CDC  0E18               	movlw	24
 22505  011CDE  6F60               	movwf	___flge@ff1& (0+255),b
 22506  011CE0  0E72               	movlw	114
 22507  011CE2  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 22508  011CE4  0E31               	movlw	49
 22509  011CE6  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 22510  011CE8  0E44               	movlw	68
 22511  011CEA  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 22512  011CEC  C0B7  F064         	movff	exp@x,___flge@ff2
 22513  011CF0  C0B8  F065         	movff	exp@x+1,___flge@ff2+1
 22514  011CF4  C0B9  F066         	movff	exp@x+2,___flge@ff2+2
 22515  011CF8  C0BA  F067         	movff	exp@x+3,___flge@ff2+3
 22516  011CFC  ECD1  F09A         	call	___flge	;wreg free
 22517  011D00  0100               	movlb	0	; () banked
 22518  011D02  B0D8               	btfsc	status,0,c
 22519  011D04  D00F               	goto	l2904
 22520                           
 22521                           ; BSR set to: 0
 22522  011D06  0E00               	movlw	0
 22523  011D08  0101               	movlb	1	; () banked
 22524  011D0A  6F1B               	movwf	(_errno+1)& (0+255),b
 22525  011D0C  0E22               	movlw	34
 22526  011D0E  6F1A               	movwf	_errno& (0+255),b
 22527  011D10  0EFF               	movlw	255
 22528  011D12  0100               	movlb	0	; () banked
 22529  011D14  6FB7               	movwf	?_exp& (0+255),b
 22530  011D16  0EFF               	movlw	255
 22531  011D18  6FB8               	movwf	(?_exp+1)& (0+255),b
 22532  011D1A  0E7F               	movlw	127
 22533  011D1C  6FB9               	movwf	(?_exp+2)& (0+255),b
 22534  011D1E  0E7F               	movlw	127
 22535  011D20  6FBA               	movwf	(?_exp+3)& (0+255),b
 22536                           
 22537                           ; BSR set to: 0
 22538  011D22  0012               	return	
 22539  011D24                     l2904:
 22540                           
 22541                           ; BSR set to: 0
 22542                           
 22543                           ; BSR set to: 0
 22544  011D24  C0B7  F060         	movff	exp@x,___flge@ff1
 22545  011D28  C0B8  F061         	movff	exp@x+1,___flge@ff1+1
 22546  011D2C  C0B9  F062         	movff	exp@x+2,___flge@ff1+2
 22547  011D30  C0BA  F063         	movff	exp@x+3,___flge@ff1+3
 22548  011D34  0E87               	movlw	135
 22549  011D36  6F64               	movwf	___flge@ff2& (0+255),b
 22550  011D38  0E48               	movlw	72
 22551  011D3A  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 22552  011D3C  0E3A               	movlw	58
 22553  011D3E  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 22554  011D40  0EC4               	movlw	196
 22555  011D42  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 22556  011D44  ECD1  F09A         	call	___flge	;wreg free
 22557  011D48  0100               	movlb	0	; () banked
 22558  011D4A  B0D8               	btfsc	status,0,c
 22559  011D4C  D00F               	goto	l2905
 22560                           
 22561                           ; BSR set to: 0
 22562  011D4E  0E00               	movlw	0
 22563  011D50  0101               	movlb	1	; () banked
 22564  011D52  6F1B               	movwf	(_errno+1)& (0+255),b
 22565  011D54  0E22               	movlw	34
 22566  011D56  6F1A               	movwf	_errno& (0+255),b
 22567  011D58  0E00               	movlw	0
 22568  011D5A  0100               	movlb	0	; () banked
 22569  011D5C  6FB7               	movwf	?_exp& (0+255),b
 22570  011D5E  0E00               	movlw	0
 22571  011D60  6FB8               	movwf	(?_exp+1)& (0+255),b
 22572  011D62  0E00               	movlw	0
 22573  011D64  6FB9               	movwf	(?_exp+2)& (0+255),b
 22574  011D66  0E00               	movlw	0
 22575  011D68  6FBA               	movwf	(?_exp+3)& (0+255),b
 22576                           
 22577                           ; BSR set to: 0
 22578  011D6A  0012               	return	
 22579  011D6C                     l2905:
 22580                           
 22581                           ; BSR set to: 0
 22582                           
 22583                           ; BSR set to: 0
 22584  011D6C  AFBA               	btfss	(exp@x+3)& (0+255),7,b
 22585  011D6E  D002               	goto	u11480
 22586  011D70  0E01               	movlw	1
 22587  011D72  D001               	goto	u11490
 22588  011D74                     u11480:
 22589  011D74  0E00               	movlw	0
 22590  011D76                     u11490:
 22591  011D76  6FC1               	movwf	exp@sign& (0+255),b
 22592                           
 22593                           ; BSR set to: 0
 22594  011D78  51C1               	movf	exp@sign& (0+255),w,b
 22595  011D7A  B4D8               	btfsc	status,2,c
 22596  011D7C  D012               	goto	l2906
 22597                           
 22598                           ; BSR set to: 0
 22599  011D7E  C0B7  F087         	movff	exp@x,___flneg@f1
 22600  011D82  C0B8  F088         	movff	exp@x+1,___flneg@f1+1
 22601  011D86  C0B9  F089         	movff	exp@x+2,___flneg@f1+2
 22602  011D8A  C0BA  F08A         	movff	exp@x+3,___flneg@f1+3
 22603  011D8E  ECDF  F0AD         	call	___flneg	;wreg free
 22604  011D92  C087  F0B7         	movff	?___flneg,exp@x
 22605  011D96  C088  F0B8         	movff	?___flneg+1,exp@x+1
 22606  011D9A  C089  F0B9         	movff	?___flneg+2,exp@x+2
 22607  011D9E  C08A  F0BA         	movff	?___flneg+3,exp@x+3
 22608  011DA2                     l2906:
 22609  011DA2  C0B7  F06E         	movff	exp@x,___flmul@b
 22610  011DA6  C0B8  F06F         	movff	exp@x+1,___flmul@b+1
 22611  011DAA  C0B9  F070         	movff	exp@x+2,___flmul@b+2
 22612  011DAE  C0BA  F071         	movff	exp@x+3,___flmul@b+3
 22613  011DB2  0E3B               	movlw	59
 22614  011DB4  0100               	movlb	0	; () banked
 22615  011DB6  6F72               	movwf	___flmul@a& (0+255),b
 22616  011DB8  0EAA               	movlw	170
 22617  011DBA  6F73               	movwf	(___flmul@a+1)& (0+255),b
 22618  011DBC  0EB8               	movlw	184
 22619  011DBE  6F74               	movwf	(___flmul@a+2)& (0+255),b
 22620  011DC0  0E3F               	movlw	63
 22621  011DC2  6F75               	movwf	(___flmul@a+3)& (0+255),b
 22622  011DC4  EC9D  F085         	call	___flmul	;wreg free
 22623  011DC8  C06E  F0B7         	movff	?___flmul,exp@x
 22624  011DCC  C06F  F0B8         	movff	?___flmul+1,exp@x+1
 22625  011DD0  C070  F0B9         	movff	?___flmul+2,exp@x+2
 22626  011DD4  C071  F0BA         	movff	?___flmul+3,exp@x+3
 22627  011DD8  C0B7  F0A9         	movff	exp@x,floor@x
 22628  011DDC  C0B8  F0AA         	movff	exp@x+1,floor@x+1
 22629  011DE0  C0B9  F0AB         	movff	exp@x+2,floor@x+2
 22630  011DE4  C0BA  F0AC         	movff	exp@x+3,floor@x+3
 22631  011DE8  ECED  F09B         	call	_floor	;wreg free
 22632  011DEC  C0A9  F0BB         	movff	?_floor,_exp$15673
 22633  011DF0  C0AA  F0BC         	movff	?_floor+1,_exp$15673+1
 22634  011DF4  C0AB  F0BD         	movff	?_floor+2,_exp$15673+2
 22635  011DF8  C0AC  F0BE         	movff	?_floor+3,_exp$15673+3
 22636  011DFC  C0BB  F09F         	movff	_exp$15673,___fltol@f1
 22637  011E00  C0BC  F0A0         	movff	_exp$15673+1,___fltol@f1+1
 22638  011E04  C0BD  F0A1         	movff	_exp$15673+2,___fltol@f1+2
 22639  011E08  C0BE  F0A2         	movff	_exp$15673+3,___fltol@f1+3
 22640  011E0C  ECF3  F09E         	call	___fltol	;wreg free
 22641  011E10  C09F  F0BF         	movff	?___fltol,exp@exponent
 22642  011E14  C0A0  F0C0         	movff	?___fltol+1,exp@exponent+1
 22643  011E18  C0B7  F09F         	movff	exp@x,___flsub@b
 22644  011E1C  C0B8  F0A0         	movff	exp@x+1,___flsub@b+1
 22645  011E20  C0B9  F0A1         	movff	exp@x+2,___flsub@b+2
 22646  011E24  C0BA  F0A2         	movff	exp@x+3,___flsub@b+3
 22647  011E28  C0BF  F060         	movff	exp@exponent,___xxtofl@val
 22648  011E2C  C0C0  F061         	movff	exp@exponent+1,___xxtofl@val+1
 22649  011E30  0100               	movlb	0	; () banked
 22650  011E32  0E00               	movlw	0
 22651  011E34  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 22652  011E36  0EFF               	movlw	-1
 22653  011E38  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 22654  011E3A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 22655  011E3C  0E01               	movlw	1
 22656  011E3E  EC03  F097         	call	___xxtofl
 22657  011E42  C060  F0A3         	movff	?___xxtofl,___flsub@a
 22658  011E46  C061  F0A4         	movff	?___xxtofl+1,___flsub@a+1
 22659  011E4A  C062  F0A5         	movff	?___xxtofl+2,___flsub@a+2
 22660  011E4E  C063  F0A6         	movff	?___xxtofl+3,___flsub@a+3
 22661  011E52  EC59  F0AB         	call	___flsub	;wreg free
 22662  011E56  C09F  F0B7         	movff	?___flsub,exp@x
 22663  011E5A  C0A0  F0B8         	movff	?___flsub+1,exp@x+1
 22664  011E5E  C0A1  F0B9         	movff	?___flsub+2,exp@x+2
 22665  011E62  C0A2  F0BA         	movff	?___flsub+3,exp@x+3
 22666  011E66  C0B7  F09F         	movff	exp@x,eval_poly@x
 22667  011E6A  C0B8  F0A0         	movff	exp@x+1,eval_poly@x+1
 22668  011E6E  C0B9  F0A1         	movff	exp@x+2,eval_poly@x+2
 22669  011E72  C0BA  F0A2         	movff	exp@x+3,eval_poly@x+3
 22670  011E76  0E23               	movlw	low exp@coeff
 22671  011E78  0100               	movlb	0	; () banked
 22672  011E7A  6FA3               	movwf	eval_poly@d& (0+255),b
 22673  011E7C  0EFE               	movlw	high exp@coeff
 22674  011E7E  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 22675  011E80  0E00               	movlw	0
 22676  011E82  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 22677  011E84  0E09               	movlw	9
 22678  011E86  6FA5               	movwf	eval_poly@n& (0+255),b
 22679  011E88  EC81  F09D         	call	_eval_poly	;wreg free
 22680  011E8C  C09F  F0AF         	movff	?_eval_poly,ldexp@value
 22681  011E90  C0A0  F0B0         	movff	?_eval_poly+1,ldexp@value+1
 22682  011E94  C0A1  F0B1         	movff	?_eval_poly+2,ldexp@value+2
 22683  011E98  C0A2  F0B2         	movff	?_eval_poly+3,ldexp@value+3
 22684  011E9C  C0BF  F0B3         	movff	exp@exponent,ldexp@newexp
 22685  011EA0  C0C0  F0B4         	movff	exp@exponent+1,ldexp@newexp+1
 22686  011EA4  EC81  F09E         	call	_ldexp	;wreg free
 22687  011EA8  C0AF  F0B7         	movff	?_ldexp,exp@x
 22688  011EAC  C0B0  F0B8         	movff	?_ldexp+1,exp@x+1
 22689  011EB0  C0B1  F0B9         	movff	?_ldexp+2,exp@x+2
 22690  011EB4  C0B2  F0BA         	movff	?_ldexp+3,exp@x+3
 22691  011EB8  0100               	movlb	0	; () banked
 22692  011EBA  51C1               	movf	exp@sign& (0+255),w,b
 22693  011EBC  B4D8               	btfsc	status,2,c
 22694  011EBE  D02F               	goto	l2907
 22695                           
 22696                           ; BSR set to: 0
 22697  011EC0  29B7               	incf	exp@x& (0+255),w,b
 22698  011EC2  E112               	bnz	l14165
 22699  011EC4  29B8               	incf	(exp@x+1)& (0+255),w,b
 22700  011EC6  E110               	bnz	l14165
 22701  011EC8  0E7F               	movlw	127
 22702  011ECA  19B9               	xorwf	(exp@x+2)& (0+255),w,b
 22703  011ECC  E10D               	bnz	l14165
 22704  011ECE  0E7F               	movlw	127
 22705  011ED0  19BA               	xorwf	(exp@x+3)& (0+255),w,b
 22706  011ED2  A4D8               	btfss	status,2,c
 22707  011ED4  D009               	goto	l2908
 22708                           
 22709                           ; BSR set to: 0
 22710  011ED6  0E00               	movlw	0
 22711  011ED8  6FB7               	movwf	?_exp& (0+255),b
 22712  011EDA  0E00               	movlw	0
 22713  011EDC  6FB8               	movwf	(?_exp+1)& (0+255),b
 22714  011EDE  0E00               	movlw	0
 22715  011EE0  6FB9               	movwf	(?_exp+2)& (0+255),b
 22716  011EE2  0E00               	movlw	0
 22717  011EE4  6FBA               	movwf	(?_exp+3)& (0+255),b
 22718                           
 22719                           ; BSR set to: 0
 22720  011EE6  0012               	return	
 22721  011EE8                     l2908:
 22722  011EE8                     l14165:
 22723                           
 22724                           ; BSR set to: 0
 22725  011EE8  0E00               	movlw	0
 22726  011EEA  6F60               	movwf	___fldiv@b& (0+255),b
 22727  011EEC  0E00               	movlw	0
 22728  011EEE  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 22729  011EF0  0E80               	movlw	128
 22730  011EF2  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 22731  011EF4  0E3F               	movlw	63
 22732  011EF6  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 22733  011EF8  C0B7  F064         	movff	exp@x,___fldiv@a
 22734  011EFC  C0B8  F065         	movff	exp@x+1,___fldiv@a+1
 22735  011F00  C0B9  F066         	movff	exp@x+2,___fldiv@a+2
 22736  011F04  C0BA  F067         	movff	exp@x+3,___fldiv@a+3
 22737  011F08  EC6C  F08A         	call	___fldiv	;wreg free
 22738  011F0C  C060  F0B7         	movff	?___fldiv,?_exp
 22739  011F10  C061  F0B8         	movff	?___fldiv+1,?_exp+1
 22740  011F14  C062  F0B9         	movff	?___fldiv+2,?_exp+2
 22741  011F18  C063  F0BA         	movff	?___fldiv+3,?_exp+3
 22742  011F1C  0012               	return	
 22743  011F1E                     l2907:
 22744                           
 22745                           ; BSR set to: 0
 22746  011F1E  C0B7  F0B7         	movff	exp@x,?_exp
 22747  011F22  C0B8  F0B8         	movff	exp@x+1,?_exp+1
 22748  011F26  C0B9  F0B9         	movff	exp@x+2,?_exp+2
 22749  011F2A  C0BA  F0BA         	movff	exp@x+3,?_exp+3
 22750  011F2E  0012               	return		;funcret
 22751  011F30                     __end_of_exp:
 22752                           	opt stack 0
 22753                           tosu	equ	0xFFF
 22754                           tosh	equ	0xFFE
 22755                           tosl	equ	0xFFD
 22756                           pclath	equ	0xFFA
 22757                           tblptru	equ	0xFF8
 22758                           tblptrh	equ	0xFF7
 22759                           tblptrl	equ	0xFF6
 22760                           tablat	equ	0xFF5
 22761                           prodh	equ	0xFF4
 22762                           prodl	equ	0xFF3
 22763                           intcon	equ	0xFF2
 22764                           indf0	equ	0xFEF
 22765                           postinc0	equ	0xFEE
 22766                           fsr0h	equ	0xFEA
 22767                           fsr0l	equ	0xFE9
 22768                           wreg	equ	0xFE8
 22769                           indf1	equ	0xFE7
 22770                           postdec1	equ	0xFE5
 22771                           fsr1h	equ	0xFE2
 22772                           fsr1l	equ	0xFE1
 22773                           indf2	equ	0xFDF
 22774                           postinc2	equ	0xFDE
 22775                           postdec2	equ	0xFDD
 22776                           plusw2	equ	0xFDB
 22777                           fsr2h	equ	0xFDA
 22778                           fsr2l	equ	0xFD9
 22779                           status	equ	0xFD8
 22780                           
 22781 ;; *************** function _ldexp *****************
 22782 ;; Defined at:
 22783 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 22784 ;; Parameters:    Size  Location     Type
 22785 ;;  value           4   79[BANK0 ] unsigned char 
 22786 ;;  newexp          2   83[BANK0 ] int 
 22787 ;; Auto vars:     Size  Location     Type
 22788 ;;		None
 22789 ;; Return value:  Size  Location     Type
 22790 ;;                  4   79[BANK0 ] int 
 22791 ;; Registers used:
 22792 ;;		wreg, status,2, status,0
 22793 ;; Tracked objects:
 22794 ;;		On entry : 0/0
 22795 ;;		On exit  : 0/0
 22796 ;;		Unchanged: 0/0
 22797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22798 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22800 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22801 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22802 ;;Total ram usage:        8 bytes
 22803 ;; Hardware stack levels used:    1
 22804 ;; Hardware stack levels required when called:    7
 22805 ;; This function calls:
 22806 ;;		Nothing
 22807 ;; This function is called by:
 22808 ;;		_exp
 22809 ;; This function uses a non-reentrant model
 22810 ;;
 22811                           
 22812                           	psect	text126
 22813  013D02                     __ptext126:
 22814                           	opt stack 0
 22815  013D02                     _ldexp:
 22816                           	opt stack 19
 22817                           
 22818                           ;incstack = 0
 22819  013D02  0100               	movlb	0	; () banked
 22820  013D04  51AF               	movf	ldexp@value& (0+255),w,b
 22821  013D06  11B0               	iorwf	(ldexp@value+1)& (0+255),w,b
 22822  013D08  11B1               	iorwf	(ldexp@value+2)& (0+255),w,b
 22823  013D0A  11B2               	iorwf	(ldexp@value+3)& (0+255),w,b
 22824  013D0C  A4D8               	btfss	status,2,c
 22825  013D0E  D009               	goto	l2926
 22826                           
 22827                           ; BSR set to: 0
 22828  013D10  0E00               	movlw	0
 22829  013D12  6FAF               	movwf	?_ldexp& (0+255),b
 22830  013D14  0E00               	movlw	0
 22831  013D16  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22832  013D18  0E00               	movlw	0
 22833  013D1A  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22834  013D1C  0E00               	movlw	0
 22835  013D1E  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 22836                           
 22837                           ; BSR set to: 0
 22838  013D20  0012               	return	
 22839  013D22                     l2926:
 22840                           
 22841                           ; BSR set to: 0
 22842                           
 22843                           ; BSR set to: 0
 22844  013D22  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 22845  013D24  0B7F               	andlw	127
 22846  013D26  6FB5               	movwf	??_ldexp& (0+255),b
 22847  013D28  6BB6               	clrf	(??_ldexp+1)& (0+255),b
 22848  013D2A  90D8               	bcf	status,0,c
 22849  013D2C  37B5               	rlcf	??_ldexp& (0+255),f,b
 22850  013D2E  37B6               	rlcf	(??_ldexp+1)& (0+255),f,b
 22851  013D30  51B5               	movf	??_ldexp& (0+255),w,b
 22852  013D32  27B3               	addwf	ldexp@newexp& (0+255),f,b
 22853  013D34  51B6               	movf	(??_ldexp+1)& (0+255),w,b
 22854  013D36  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 22855  013D38  AFB1               	btfss	(ldexp@value+2)& (0+255),7,b
 22856  013D3A  D003               	goto	u11120
 22857  013D3C  6BB5               	clrf	??_ldexp& (0+255),b
 22858  013D3E  2BB5               	incf	??_ldexp& (0+255),f,b
 22859  013D40  D002               	goto	u11128
 22860  013D42                     u11120:
 22861  013D42  0100               	movlb	0	; () banked
 22862  013D44  6BB5               	clrf	??_ldexp& (0+255),b
 22863  013D46                     u11128:
 22864  013D46  51B5               	movf	??_ldexp& (0+255),w,b
 22865  013D48  27B3               	addwf	ldexp@newexp& (0+255),f,b
 22866  013D4A  0E00               	movlw	0
 22867  013D4C  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 22868  013D4E  AFB4               	btfss	(ldexp@newexp+1)& (0+255),7,b
 22869  013D50  D00F               	goto	l2928
 22870                           
 22871                           ; BSR set to: 0
 22872  013D52  0E00               	movlw	0
 22873  013D54  0101               	movlb	1	; () banked
 22874  013D56  6F1B               	movwf	(_errno+1)& (0+255),b
 22875  013D58  0E22               	movlw	34
 22876  013D5A  6F1A               	movwf	_errno& (0+255),b
 22877  013D5C  0E00               	movlw	0
 22878  013D5E  0100               	movlb	0	; () banked
 22879  013D60  6FAF               	movwf	?_ldexp& (0+255),b
 22880  013D62  0E00               	movlw	0
 22881  013D64  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22882  013D66  0E00               	movlw	0
 22883  013D68  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22884  013D6A  0E00               	movlw	0
 22885  013D6C                     L10:
 22886  013D6C  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 22887                           
 22888                           ; BSR set to: 0
 22889  013D6E  0012               	return	
 22890  013D70                     l2928:
 22891                           
 22892                           ; BSR set to: 0
 22893                           
 22894                           ; BSR set to: 0
 22895  013D70  BFB4               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 22896  013D72  D01B               	goto	l2930
 22897  013D74  05B4               	decf	(ldexp@newexp+1)& (0+255),w,b
 22898  013D76  A0D8               	btfss	status,0,c
 22899  013D78  D018               	goto	l2930
 22900                           
 22901                           ; BSR set to: 0
 22902  013D7A  0E00               	movlw	0
 22903  013D7C  0101               	movlb	1	; () banked
 22904  013D7E  6F1B               	movwf	(_errno+1)& (0+255),b
 22905  013D80  0E22               	movlw	34
 22906  013D82  6F1A               	movwf	_errno& (0+255),b
 22907                           
 22908                           ; BSR set to: 1
 22909  013D84  0100               	movlb	0	; () banked
 22910  013D86  AFB2               	btfss	(ldexp@value+3)& (0+255),7,b
 22911  013D88  D008               	goto	l2931
 22912                           
 22913                           ; BSR set to: 0
 22914  013D8A  0EFF               	movlw	255
 22915  013D8C  6FAF               	movwf	?_ldexp& (0+255),b
 22916  013D8E  0EFF               	movlw	255
 22917  013D90  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22918  013D92  0E7F               	movlw	127
 22919  013D94  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22920  013D96  0EFF               	movlw	255
 22921  013D98  D7E9               	goto	L10
 22922  013D9A                     l2931:
 22923                           
 22924                           ; BSR set to: 0
 22925                           
 22926                           ; BSR set to: 0
 22927  013D9A  0EFF               	movlw	255
 22928  013D9C  6FAF               	movwf	?_ldexp& (0+255),b
 22929  013D9E  0EFF               	movlw	255
 22930  013DA0  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22931  013DA2  0E7F               	movlw	127
 22932  013DA4  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22933  013DA6  0E7F               	movlw	127
 22934  013DA8  D7E1               	goto	L10
 22935  013DAA                     l2930:
 22936                           
 22937                           ; BSR set to: 0
 22938                           
 22939                           ; BSR set to: 0
 22940  013DAA  35B4               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 22941  013DAC  31B4               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 22942  013DAE  6FB6               	movwf	(??_ldexp+1)& (0+255),b
 22943  013DB0  31B3               	rrcf	ldexp@newexp& (0+255),w,b
 22944  013DB2  6FB5               	movwf	??_ldexp& (0+255),b
 22945  013DB4  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 22946  013DB6  19B5               	xorwf	??_ldexp& (0+255),w,b
 22947  013DB8  0B80               	andlw	-128
 22948  013DBA  19B5               	xorwf	??_ldexp& (0+255),w,b
 22949  013DBC  6FB2               	movwf	(ldexp@value+3)& (0+255),b
 22950  013DBE  C0B3  F0B5         	movff	ldexp@newexp,??_ldexp
 22951  013DC2  0E01               	movlw	1
 22952  013DC4  17B5               	andwf	??_ldexp& (0+255),f,b
 22953  013DC6  33B5               	rrcf	??_ldexp& (0+255),f,b
 22954  013DC8  33B5               	rrcf	??_ldexp& (0+255),f,b
 22955  013DCA  51B1               	movf	(ldexp@value+2)& (0+255),w,b
 22956  013DCC  19B5               	xorwf	??_ldexp& (0+255),w,b
 22957  013DCE  0B7F               	andlw	-129
 22958  013DD0  19B5               	xorwf	??_ldexp& (0+255),w,b
 22959  013DD2  6FB1               	movwf	(ldexp@value+2)& (0+255),b
 22960                           
 22961                           ; BSR set to: 0
 22962                           
 22963                           ; BSR set to: 0
 22964                           
 22965                           ; BSR set to: 0
 22966  013DD4  C0AF  F0AF         	movff	ldexp@value,?_ldexp
 22967  013DD8  C0B0  F0B0         	movff	ldexp@value+1,?_ldexp+1
 22968  013DDC  C0B1  F0B1         	movff	ldexp@value+2,?_ldexp+2
 22969  013DE0  C0B2  F0B2         	movff	ldexp@value+3,?_ldexp+3
 22970  013DE4  0012               	return	
 22971  013DE6                     __end_of_ldexp:
 22972                           	opt stack 0
 22973                           tosu	equ	0xFFF
 22974                           tosh	equ	0xFFE
 22975                           tosl	equ	0xFFD
 22976                           pclath	equ	0xFFA
 22977                           tblptru	equ	0xFF8
 22978                           tblptrh	equ	0xFF7
 22979                           tblptrl	equ	0xFF6
 22980                           tablat	equ	0xFF5
 22981                           prodh	equ	0xFF4
 22982                           prodl	equ	0xFF3
 22983                           intcon	equ	0xFF2
 22984                           indf0	equ	0xFEF
 22985                           postinc0	equ	0xFEE
 22986                           fsr0h	equ	0xFEA
 22987                           fsr0l	equ	0xFE9
 22988                           wreg	equ	0xFE8
 22989                           indf1	equ	0xFE7
 22990                           postdec1	equ	0xFE5
 22991                           fsr1h	equ	0xFE2
 22992                           fsr1l	equ	0xFE1
 22993                           indf2	equ	0xFDF
 22994                           postinc2	equ	0xFDE
 22995                           postdec2	equ	0xFDD
 22996                           plusw2	equ	0xFDB
 22997                           fsr2h	equ	0xFDA
 22998                           fsr2l	equ	0xFD9
 22999                           status	equ	0xFD8
 23000                           
 23001 ;; *************** function _floor *****************
 23002 ;; Defined at:
 23003 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 23004 ;; Parameters:    Size  Location     Type
 23005 ;;  x               4   73[BANK0 ] int 
 23006 ;; Auto vars:     Size  Location     Type
 23007 ;;  i               4   77[BANK0 ] int 
 23008 ;;  expon           2   81[BANK0 ] int 
 23009 ;; Return value:  Size  Location     Type
 23010 ;;                  4   73[BANK0 ] int 
 23011 ;; Registers used:
 23012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23013 ;; Tracked objects:
 23014 ;;		On entry : 0/0
 23015 ;;		On exit  : 0/0
 23016 ;;		Unchanged: 0/0
 23017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23018 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23019 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23021 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23022 ;;Total ram usage:       10 bytes
 23023 ;; Hardware stack levels used:    1
 23024 ;; Hardware stack levels required when called:    8
 23025 ;; This function calls:
 23026 ;;		___fladd
 23027 ;;		___flge
 23028 ;;		___fltol
 23029 ;;		___xxtofl
 23030 ;;		_frexp
 23031 ;; This function is called by:
 23032 ;;		_exp
 23033 ;; This function uses a non-reentrant model
 23034 ;;
 23035                           
 23036                           	psect	text127
 23037  0137DA                     __ptext127:
 23038                           	opt stack 0
 23039  0137DA                     _floor:
 23040                           	opt stack 18
 23041                           
 23042                           ; BSR set to: 0
 23043                           ;incstack = 0
 23044  0137DA  C0A9  F060         	movff	floor@x,frexp@value
 23045  0137DE  C0AA  F061         	movff	floor@x+1,frexp@value+1
 23046  0137E2  C0AB  F062         	movff	floor@x+2,frexp@value+2
 23047  0137E6  C0AC  F063         	movff	floor@x+3,frexp@value+3
 23048  0137EA  0EB1               	movlw	low floor@expon
 23049  0137EC  0100               	movlb	0	; () banked
 23050  0137EE  6F64               	movwf	frexp@eptr& (0+255),b
 23051  0137F0  0E00               	movlw	high floor@expon
 23052  0137F2  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 23053  0137F4  EC70  F0A1         	call	_frexp	;wreg free
 23054  0137F8  0100               	movlb	0	; () banked
 23055  0137FA  AFB2               	btfss	(floor@expon+1)& (0+255),7,b
 23056  0137FC  D014               	goto	l2913
 23057                           
 23058                           ; BSR set to: 0
 23059  0137FE  AFAC               	btfss	(floor@x+3)& (0+255),7,b
 23060  013800  D009               	goto	l2914
 23061                           
 23062                           ; BSR set to: 0
 23063  013802  0E00               	movlw	0
 23064  013804  6FA9               	movwf	?_floor& (0+255),b
 23065  013806  0E00               	movlw	0
 23066  013808  6FAA               	movwf	(?_floor+1)& (0+255),b
 23067  01380A  0E80               	movlw	128
 23068  01380C  6FAB               	movwf	(?_floor+2)& (0+255),b
 23069  01380E  0EBF               	movlw	191
 23070  013810  6FAC               	movwf	(?_floor+3)& (0+255),b
 23071                           
 23072                           ; BSR set to: 0
 23073  013812  0012               	return	
 23074  013814                     l2914:
 23075                           
 23076                           ; BSR set to: 0
 23077                           
 23078                           ; BSR set to: 0
 23079  013814  0E00               	movlw	0
 23080  013816  6FA9               	movwf	?_floor& (0+255),b
 23081  013818  0E00               	movlw	0
 23082  01381A  6FAA               	movwf	(?_floor+1)& (0+255),b
 23083  01381C  0E00               	movlw	0
 23084  01381E  6FAB               	movwf	(?_floor+2)& (0+255),b
 23085  013820  0E00               	movlw	0
 23086  013822  6FAC               	movwf	(?_floor+3)& (0+255),b
 23087                           
 23088                           ; BSR set to: 0
 23089  013824  0012               	return	
 23090  013826                     l2913:
 23091                           
 23092                           ; BSR set to: 0
 23093                           
 23094                           ; BSR set to: 0
 23095  013826  51B2               	movf	(floor@expon+1)& (0+255),w,b
 23096  013828  E104               	bnz	u11080
 23097  01382A  0E1D               	movlw	29
 23098  01382C  5DB1               	subwf	floor@expon& (0+255),w,b
 23099  01382E  A0D8               	btfss	status,0,c
 23100  013830  D009               	goto	l2916
 23101  013832                     u11080:
 23102                           
 23103                           ; BSR set to: 0
 23104  013832  C0A9  F0A9         	movff	floor@x,?_floor
 23105  013836  C0AA  F0AA         	movff	floor@x+1,?_floor+1
 23106  01383A  C0AB  F0AB         	movff	floor@x+2,?_floor+2
 23107  01383E  C0AC  F0AC         	movff	floor@x+3,?_floor+3
 23108  013842  0012               	return	
 23109  013844                     l2916:
 23110                           
 23111                           ; BSR set to: 0
 23112                           
 23113                           ; BSR set to: 0
 23114  013844  C0A9  F09F         	movff	floor@x,___fltol@f1
 23115  013848  C0AA  F0A0         	movff	floor@x+1,___fltol@f1+1
 23116  01384C  C0AB  F0A1         	movff	floor@x+2,___fltol@f1+2
 23117  013850  C0AC  F0A2         	movff	floor@x+3,___fltol@f1+3
 23118  013854  ECF3  F09E         	call	___fltol	;wreg free
 23119  013858  C09F  F060         	movff	?___fltol,___xxtofl@val
 23120  01385C  C0A0  F061         	movff	?___fltol+1,___xxtofl@val+1
 23121  013860  C0A1  F062         	movff	?___fltol+2,___xxtofl@val+2
 23122  013864  C0A2  F063         	movff	?___fltol+3,___xxtofl@val+3
 23123  013868  0E01               	movlw	1
 23124  01386A  EC03  F097         	call	___xxtofl
 23125  01386E  C060  F0AD         	movff	?___xxtofl,floor@i
 23126  013872  C061  F0AE         	movff	?___xxtofl+1,floor@i+1
 23127  013876  C062  F0AF         	movff	?___xxtofl+2,floor@i+2
 23128  01387A  C063  F0B0         	movff	?___xxtofl+3,floor@i+3
 23129  01387E  C0A9  F060         	movff	floor@x,___flge@ff1
 23130  013882  C0AA  F061         	movff	floor@x+1,___flge@ff1+1
 23131  013886  C0AB  F062         	movff	floor@x+2,___flge@ff1+2
 23132  01388A  C0AC  F063         	movff	floor@x+3,___flge@ff1+3
 23133  01388E  C0AD  F064         	movff	floor@i,___flge@ff2
 23134  013892  C0AE  F065         	movff	floor@i+1,___flge@ff2+1
 23135  013896  C0AF  F066         	movff	floor@i+2,___flge@ff2+2
 23136  01389A  C0B0  F067         	movff	floor@i+3,___flge@ff2+3
 23137  01389E  ECD1  F09A         	call	___flge	;wreg free
 23138  0138A2  0100               	movlb	0	; () banked
 23139  0138A4  B0D8               	btfsc	status,0,c
 23140  0138A6  D01B               	goto	l2917
 23141                           
 23142                           ; BSR set to: 0
 23143  0138A8  C0AD  F08B         	movff	floor@i,___fladd@b
 23144  0138AC  C0AE  F08C         	movff	floor@i+1,___fladd@b+1
 23145  0138B0  C0AF  F08D         	movff	floor@i+2,___fladd@b+2
 23146  0138B4  C0B0  F08E         	movff	floor@i+3,___fladd@b+3
 23147  0138B8  0E00               	movlw	0
 23148  0138BA  6F8F               	movwf	___fladd@a& (0+255),b
 23149  0138BC  0E00               	movlw	0
 23150  0138BE  6F90               	movwf	(___fladd@a+1)& (0+255),b
 23151  0138C0  0E80               	movlw	128
 23152  0138C2  6F91               	movwf	(___fladd@a+2)& (0+255),b
 23153  0138C4  0EBF               	movlw	191
 23154  0138C6  6F92               	movwf	(___fladd@a+3)& (0+255),b
 23155  0138C8  EC46  F087         	call	___fladd	;wreg free
 23156  0138CC  C08B  F0A9         	movff	?___fladd,?_floor
 23157  0138D0  C08C  F0AA         	movff	?___fladd+1,?_floor+1
 23158  0138D4  C08D  F0AB         	movff	?___fladd+2,?_floor+2
 23159  0138D8  C08E  F0AC         	movff	?___fladd+3,?_floor+3
 23160  0138DC  0012               	return	
 23161  0138DE                     l2917:
 23162                           
 23163                           ; BSR set to: 0
 23164  0138DE  C0AD  F0A9         	movff	floor@i,?_floor
 23165  0138E2  C0AE  F0AA         	movff	floor@i+1,?_floor+1
 23166  0138E6  C0AF  F0AB         	movff	floor@i+2,?_floor+2
 23167  0138EA  C0B0  F0AC         	movff	floor@i+3,?_floor+3
 23168  0138EE  0012               	return		;funcret
 23169  0138F0                     __end_of_floor:
 23170                           	opt stack 0
 23171                           tosu	equ	0xFFF
 23172                           tosh	equ	0xFFE
 23173                           tosl	equ	0xFFD
 23174                           pclath	equ	0xFFA
 23175                           tblptru	equ	0xFF8
 23176                           tblptrh	equ	0xFF7
 23177                           tblptrl	equ	0xFF6
 23178                           tablat	equ	0xFF5
 23179                           prodh	equ	0xFF4
 23180                           prodl	equ	0xFF3
 23181                           intcon	equ	0xFF2
 23182                           indf0	equ	0xFEF
 23183                           postinc0	equ	0xFEE
 23184                           fsr0h	equ	0xFEA
 23185                           fsr0l	equ	0xFE9
 23186                           wreg	equ	0xFE8
 23187                           indf1	equ	0xFE7
 23188                           postdec1	equ	0xFE5
 23189                           fsr1h	equ	0xFE2
 23190                           fsr1l	equ	0xFE1
 23191                           indf2	equ	0xFDF
 23192                           postinc2	equ	0xFDE
 23193                           postdec2	equ	0xFDD
 23194                           plusw2	equ	0xFDB
 23195                           fsr2h	equ	0xFDA
 23196                           fsr2l	equ	0xFD9
 23197                           status	equ	0xFD8
 23198                           
 23199 ;; *************** function _frexp *****************
 23200 ;; Defined at:
 23201 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 23202 ;; Parameters:    Size  Location     Type
 23203 ;;  value           4    0[BANK0 ] int 
 23204 ;;  eptr            2    4[BANK0 ] PTR int 
 23205 ;;		 -> log@exponent(2), floor@expon(2), 
 23206 ;; Auto vars:     Size  Location     Type
 23207 ;;		None
 23208 ;; Return value:  Size  Location     Type
 23209 ;;                  4    0[BANK0 ] PTR int 
 23210 ;; Registers used:
 23211 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23212 ;; Tracked objects:
 23213 ;;		On entry : 0/0
 23214 ;;		On exit  : 0/0
 23215 ;;		Unchanged: 0/0
 23216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23217 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23219 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23220 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23221 ;;Total ram usage:        8 bytes
 23222 ;; Hardware stack levels used:    1
 23223 ;; Hardware stack levels required when called:    7
 23224 ;; This function calls:
 23225 ;;		Nothing
 23226 ;; This function is called by:
 23227 ;;		_floor
 23228 ;;		_log
 23229 ;; This function uses a non-reentrant model
 23230 ;;
 23231                           
 23232                           	psect	text128
 23233  0142E0                     __ptext128:
 23234                           	opt stack 0
 23235  0142E0                     _frexp:
 23236                           	opt stack 19
 23237                           
 23238                           ;incstack = 0
 23239  0142E0  0100               	movlb	0	; () banked
 23240  0142E2  5160               	movf	frexp@value& (0+255),w,b
 23241  0142E4  1161               	iorwf	(frexp@value+1)& (0+255),w,b
 23242  0142E6  1162               	iorwf	(frexp@value+2)& (0+255),w,b
 23243  0142E8  1163               	iorwf	(frexp@value+3)& (0+255),w,b
 23244  0142EA  A4D8               	btfss	status,2,c
 23245  0142EC  D011               	goto	l2922
 23246                           
 23247                           ; BSR set to: 0
 23248  0142EE  C064  FFD9         	movff	frexp@eptr,fsr2l
 23249  0142F2  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23250  0142F6  0E00               	movlw	0
 23251  0142F8  6EDE               	movwf	postinc2,c
 23252  0142FA  0E00               	movlw	0
 23253  0142FC  6EDD               	movwf	postdec2,c
 23254                           
 23255                           ; BSR set to: 0
 23256  0142FE  0E00               	movlw	0
 23257  014300  6F60               	movwf	?_frexp& (0+255),b
 23258  014302  0E00               	movlw	0
 23259  014304  6F61               	movwf	(?_frexp+1)& (0+255),b
 23260  014306  0E00               	movlw	0
 23261  014308  6F62               	movwf	(?_frexp+2)& (0+255),b
 23262  01430A  0E00               	movlw	0
 23263  01430C  6F63               	movwf	(?_frexp+3)& (0+255),b
 23264                           
 23265                           ; BSR set to: 0
 23266  01430E  0012               	return	
 23267  014310                     l2922:
 23268                           
 23269                           ; BSR set to: 0
 23270                           
 23271                           ; BSR set to: 0
 23272  014310  5163               	movf	(frexp@value+3)& (0+255),w,b
 23273  014312  0B7F               	andlw	127
 23274  014314  6F66               	movwf	??_frexp& (0+255),b
 23275  014316  6B67               	clrf	(??_frexp+1)& (0+255),b
 23276  014318  90D8               	bcf	status,0,c
 23277  01431A  3766               	rlcf	??_frexp& (0+255),f,b
 23278  01431C  3767               	rlcf	(??_frexp+1)& (0+255),f,b
 23279  01431E  C064  FFD9         	movff	frexp@eptr,fsr2l
 23280  014322  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23281  014326  C066  FFDE         	movff	??_frexp,postinc2
 23282  01432A  C067  FFDD         	movff	??_frexp+1,postdec2
 23283  01432E  AF62               	btfss	(frexp@value+2)& (0+255),7,b
 23284  014330  D003               	goto	u10660
 23285  014332  6B66               	clrf	??_frexp& (0+255),b
 23286  014334  2B66               	incf	??_frexp& (0+255),f,b
 23287  014336  D002               	goto	u10668
 23288  014338                     u10660:
 23289  014338  0100               	movlb	0	; () banked
 23290  01433A  6B66               	clrf	??_frexp& (0+255),b
 23291  01433C                     u10668:
 23292  01433C  5166               	movf	??_frexp& (0+255),w,b
 23293  01433E  C064  FFD9         	movff	frexp@eptr,fsr2l
 23294  014342  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23295  014346  12DE               	iorwf	postinc2,f,c
 23296  014348  0E00               	movlw	0
 23297  01434A  12DD               	iorwf	postdec2,f,c
 23298                           
 23299                           ; BSR set to: 0
 23300  01434C  C064  FFD9         	movff	frexp@eptr,fsr2l
 23301  014350  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23302  014354  0E82               	movlw	130
 23303  014356  26DE               	addwf	postinc2,f,c
 23304  014358  0EFF               	movlw	255
 23305  01435A  22DD               	addwfc	postdec2,f,c
 23306                           
 23307                           ; BSR set to: 0
 23308  01435C  8163               	bsf	(frexp@value+3)& (0+255),0,b
 23309  01435E  8363               	bsf	(frexp@value+3)& (0+255),1,b
 23310  014360  8563               	bsf	(frexp@value+3)& (0+255),2,b
 23311  014362  8763               	bsf	(frexp@value+3)& (0+255),3,b
 23312  014364  8963               	bsf	(frexp@value+3)& (0+255),4,b
 23313  014366  8B63               	bsf	(frexp@value+3)& (0+255),5,b
 23314  014368  9D63               	bcf	(frexp@value+3)& (0+255),6,b
 23315                           
 23316                           ; BSR set to: 0
 23317  01436A  9F62               	bcf	(frexp@value+2)& (0+255),7,b
 23318                           
 23319                           ; BSR set to: 0
 23320  01436C  C060  F060         	movff	frexp@value,?_frexp
 23321  014370  C061  F061         	movff	frexp@value+1,?_frexp+1
 23322  014374  C062  F062         	movff	frexp@value+2,?_frexp+2
 23323  014378  C063  F063         	movff	frexp@value+3,?_frexp+3
 23324  01437C  0012               	return	
 23325  01437E                     __end_of_frexp:
 23326                           	opt stack 0
 23327                           tosu	equ	0xFFF
 23328                           tosh	equ	0xFFE
 23329                           tosl	equ	0xFFD
 23330                           pclath	equ	0xFFA
 23331                           tblptru	equ	0xFF8
 23332                           tblptrh	equ	0xFF7
 23333                           tblptrl	equ	0xFF6
 23334                           tablat	equ	0xFF5
 23335                           prodh	equ	0xFF4
 23336                           prodl	equ	0xFF3
 23337                           intcon	equ	0xFF2
 23338                           indf0	equ	0xFEF
 23339                           postinc0	equ	0xFEE
 23340                           fsr0h	equ	0xFEA
 23341                           fsr0l	equ	0xFE9
 23342                           wreg	equ	0xFE8
 23343                           indf1	equ	0xFE7
 23344                           postdec1	equ	0xFE5
 23345                           fsr1h	equ	0xFE2
 23346                           fsr1l	equ	0xFE1
 23347                           indf2	equ	0xFDF
 23348                           postinc2	equ	0xFDE
 23349                           postdec2	equ	0xFDD
 23350                           plusw2	equ	0xFDB
 23351                           fsr2h	equ	0xFDA
 23352                           fsr2l	equ	0xFD9
 23353                           status	equ	0xFD8
 23354                           
 23355 ;; *************** function ___xxtofl *****************
 23356 ;; Defined at:
 23357 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
 23358 ;; Parameters:    Size  Location     Type
 23359 ;;  sign            1    wreg     unsigned char 
 23360 ;;  val             4    0[BANK0 ] long 
 23361 ;; Auto vars:     Size  Location     Type
 23362 ;;  sign            1    8[BANK0 ] unsigned char 
 23363 ;;  arg             4   10[BANK0 ] unsigned long 
 23364 ;;  exp             1    9[BANK0 ] unsigned char 
 23365 ;; Return value:  Size  Location     Type
 23366 ;;                  4    0[BANK0 ] unsigned char 
 23367 ;; Registers used:
 23368 ;;		wreg, status,2, status,0
 23369 ;; Tracked objects:
 23370 ;;		On entry : 0/0
 23371 ;;		On exit  : 0/0
 23372 ;;		Unchanged: 0/0
 23373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23374 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23375 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23376 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23377 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23378 ;;Total ram usage:       14 bytes
 23379 ;; Hardware stack levels used:    1
 23380 ;; Hardware stack levels required when called:    7
 23381 ;; This function calls:
 23382 ;;		Nothing
 23383 ;; This function is called by:
 23384 ;;		_ADCAverage
 23385 ;;		_pow
 23386 ;;		_exp
 23387 ;;		_floor
 23388 ;;		_log
 23389 ;;		_ADC_Voltage
 23390 ;; This function uses a non-reentrant model
 23391 ;;
 23392                           
 23393                           	psect	text129
 23394  012E06                     __ptext129:
 23395                           	opt stack 0
 23396  012E06                     ___xxtofl:
 23397                           	opt stack 19
 23398                           
 23399                           ; BSR set to: 0
 23400                           ;incstack = 0
 23401                           ;___xxtofl@sign stored from wreg
 23402  012E06  0100               	movlb	0	; () banked
 23403  012E08  6F68               	movwf	___xxtofl@sign& (0+255),b
 23404  012E0A  0100               	movlb	0	; () banked
 23405  012E0C  5168               	movf	___xxtofl@sign& (0+255),w,b
 23406  012E0E  A4D8               	btfss	status,2,c
 23407                           
 23408                           ; BSR set to: 0
 23409  012E10  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 23410  012E12  D01A               	goto	l2871
 23411                           
 23412                           ; BSR set to: 0
 23413  012E14  C060  F064         	movff	___xxtofl@val,??___xxtofl
 23414  012E18  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 23415  012E1C  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 23416  012E20  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 23417  012E24  1F64               	comf	??___xxtofl& (0+255),f,b
 23418  012E26  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 23419  012E28  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 23420  012E2A  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 23421  012E2C  2B64               	incf	??___xxtofl& (0+255),f,b
 23422  012E2E  0E00               	movlw	0
 23423  012E30  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 23424  012E32  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 23425  012E34  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 23426  012E36  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 23427  012E3A  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 23428  012E3E  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 23429  012E42  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 23430  012E46  D008               	goto	l2872
 23431  012E48                     l2871:
 23432                           
 23433                           ; BSR set to: 0
 23434  012E48  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 23435  012E4C  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 23436  012E50  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 23437  012E54  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 23438  012E58                     l2872:
 23439                           
 23440                           ; BSR set to: 0
 23441                           
 23442                           ; BSR set to: 0
 23443  012E58  5160               	movf	___xxtofl@val& (0+255),w,b
 23444  012E5A  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 23445  012E5C  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 23446  012E5E  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 23447  012E60  A4D8               	btfss	status,2,c
 23448  012E62  D009               	goto	l2873
 23449                           
 23450                           ; BSR set to: 0
 23451  012E64  0E00               	movlw	0
 23452  012E66  6F60               	movwf	?___xxtofl& (0+255),b
 23453  012E68  0E00               	movlw	0
 23454  012E6A  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 23455  012E6C  0E00               	movlw	0
 23456  012E6E  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 23457  012E70  0E00               	movlw	0
 23458  012E72  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 23459                           
 23460                           ; BSR set to: 0
 23461  012E74  0012               	return	
 23462  012E76                     l2873:
 23463                           
 23464                           ; BSR set to: 0
 23465                           
 23466                           ; BSR set to: 0
 23467  012E76  0E96               	movlw	150
 23468  012E78  6F69               	movwf	___xxtofl@exp& (0+255),b
 23469  012E7A  D006               	goto	l2875
 23470  012E7C                     
 23471                           ; BSR set to: 0
 23472                           
 23473                           ; BSR set to: 0
 23474  012E7C  2B69               	incf	___xxtofl@exp& (0+255),f,b
 23475  012E7E  90D8               	bcf	status,0,c
 23476  012E80  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 23477  012E82  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 23478  012E84  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 23479  012E86  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 23480  012E88                     l2875:
 23481                           
 23482                           ; BSR set to: 0
 23483                           
 23484                           ; BSR set to: 0
 23485  012E88  0E00               	movlw	0
 23486  012E8A  156A               	andwf	___xxtofl@arg& (0+255),w,b
 23487  012E8C  6F64               	movwf	??___xxtofl& (0+255),b
 23488  012E8E  0E00               	movlw	0
 23489  012E90  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 23490  012E92  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 23491  012E94  0E00               	movlw	0
 23492  012E96  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 23493  012E98  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 23494  012E9A  0EFE               	movlw	254
 23495  012E9C  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 23496  012E9E  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 23497  012EA0  5164               	movf	??___xxtofl& (0+255),w,b
 23498  012EA2  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 23499  012EA4  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 23500  012EA6  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 23501  012EA8  B4D8               	btfsc	status,2,c
 23502  012EAA  D00D               	goto	l2878
 23503  012EAC  D7E7               	goto	l2876
 23504  012EAE                     
 23505                           ; BSR set to: 0
 23506                           
 23507                           ; BSR set to: 0
 23508  012EAE  2B69               	incf	___xxtofl@exp& (0+255),f,b
 23509                           
 23510                           ; BSR set to: 0
 23511  012EB0  0E01               	movlw	1
 23512  012EB2  276A               	addwf	___xxtofl@arg& (0+255),f,b
 23513  012EB4  0E00               	movlw	0
 23514  012EB6  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 23515  012EB8  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 23516  012EBA  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 23517                           
 23518                           ; BSR set to: 0
 23519  012EBC  90D8               	bcf	status,0,c
 23520  012EBE  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 23521  012EC0  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 23522  012EC2  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 23523  012EC4  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 23524  012EC6                     l2878:
 23525                           
 23526                           ; BSR set to: 0
 23527  012EC6  0E00               	movlw	0
 23528  012EC8  156A               	andwf	___xxtofl@arg& (0+255),w,b
 23529  012ECA  6F64               	movwf	??___xxtofl& (0+255),b
 23530  012ECC  0E00               	movlw	0
 23531  012ECE  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 23532  012ED0  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 23533  012ED2  0E00               	movlw	0
 23534  012ED4  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 23535  012ED6  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 23536  012ED8  0EFF               	movlw	255
 23537  012EDA  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 23538  012EDC  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 23539  012EDE  5164               	movf	??___xxtofl& (0+255),w,b
 23540  012EE0  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 23541  012EE2  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 23542  012EE4  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 23543  012EE6  B4D8               	btfsc	status,2,c
 23544  012EE8  D007               	goto	l2881
 23545  012EEA  D7E1               	goto	l2879
 23546  012EEC                     
 23547                           ; BSR set to: 0
 23548                           
 23549                           ; BSR set to: 0
 23550  012EEC  0769               	decf	___xxtofl@exp& (0+255),f,b
 23551  012EEE  90D8               	bcf	status,0,c
 23552  012EF0  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 23553  012EF2  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 23554  012EF4  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 23555  012EF6  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 23556  012EF8                     l2881:
 23557                           
 23558                           ; BSR set to: 0
 23559                           
 23560                           ; BSR set to: 0
 23561  012EF8  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 23562  012EFA  D003               	goto	u10610
 23563                           
 23564                           ; BSR set to: 0
 23565  012EFC  0E02               	movlw	2
 23566  012EFE  6169               	cpfslt	___xxtofl@exp& (0+255),b
 23567  012F00  D7F5               	goto	l2882
 23568  012F02                     u10610:
 23569                           
 23570                           ; BSR set to: 0
 23571                           
 23572                           ; BSR set to: 0
 23573  012F02  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 23574  012F04  D008               	goto	l2886
 23575                           
 23576                           ; BSR set to: 0
 23577  012F06  0EFF               	movlw	255
 23578  012F08  176A               	andwf	___xxtofl@arg& (0+255),f,b
 23579  012F0A  0EFF               	movlw	255
 23580  012F0C  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 23581  012F0E  0E7F               	movlw	127
 23582  012F10  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 23583  012F12  0EFF               	movlw	255
 23584  012F14  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 23585  012F16                     l2886:
 23586                           
 23587                           ; BSR set to: 0
 23588  012F16  90D8               	bcf	status,0,c
 23589  012F18  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 23590  012F1A  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 23591  012F1E  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 23592  012F20  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 23593  012F22  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 23594  012F24  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 23595  012F28  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 23596  012F2A  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 23597  012F2C  6B64               	clrf	??___xxtofl& (0+255),b
 23598  012F2E  5164               	movf	??___xxtofl& (0+255),w,b
 23599  012F30  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 23600  012F32  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 23601  012F34  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 23602  012F36  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 23603  012F38  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 23604  012F3A  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 23605  012F3C  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 23606                           
 23607                           ; BSR set to: 0
 23608  012F3E  5168               	movf	___xxtofl@sign& (0+255),w,b
 23609  012F40  A4D8               	btfss	status,2,c
 23610                           
 23611                           ; BSR set to: 0
 23612  012F42  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 23613  012F44  D001               	goto	l2887
 23614                           
 23615                           ; BSR set to: 0
 23616  012F46  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 23617  012F48                     l2887:
 23618                           
 23619                           ; BSR set to: 0
 23620                           
 23621                           ; BSR set to: 0
 23622  012F48  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 23623  012F4C  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 23624  012F50  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 23625  012F54  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 23626  012F58  0012               	return	
 23627  012F5A                     __end_of___xxtofl:
 23628                           	opt stack 0
 23629                           tosu	equ	0xFFF
 23630                           tosh	equ	0xFFE
 23631                           tosl	equ	0xFFD
 23632                           pclath	equ	0xFFA
 23633                           tblptru	equ	0xFF8
 23634                           tblptrh	equ	0xFF7
 23635                           tblptrl	equ	0xFF6
 23636                           tablat	equ	0xFF5
 23637                           prodh	equ	0xFF4
 23638                           prodl	equ	0xFF3
 23639                           intcon	equ	0xFF2
 23640                           indf0	equ	0xFEF
 23641                           postinc0	equ	0xFEE
 23642                           fsr0h	equ	0xFEA
 23643                           fsr0l	equ	0xFE9
 23644                           wreg	equ	0xFE8
 23645                           indf1	equ	0xFE7
 23646                           postdec1	equ	0xFE5
 23647                           fsr1h	equ	0xFE2
 23648                           fsr1l	equ	0xFE1
 23649                           indf2	equ	0xFDF
 23650                           postinc2	equ	0xFDE
 23651                           postdec2	equ	0xFDD
 23652                           plusw2	equ	0xFDB
 23653                           fsr2h	equ	0xFDA
 23654                           fsr2l	equ	0xFD9
 23655                           status	equ	0xFD8
 23656                           
 23657 ;; *************** function ___fltol *****************
 23658 ;; Defined at:
 23659 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
 23660 ;; Parameters:    Size  Location     Type
 23661 ;;  f1              4   63[BANK0 ] unsigned char 
 23662 ;; Auto vars:     Size  Location     Type
 23663 ;;  exp1            1   72[BANK0 ] unsigned char 
 23664 ;;  sign1           1   71[BANK0 ] unsigned char 
 23665 ;; Return value:  Size  Location     Type
 23666 ;;                  4   63[BANK0 ] long 
 23667 ;; Registers used:
 23668 ;;		wreg, status,2, status,0
 23669 ;; Tracked objects:
 23670 ;;		On entry : 0/0
 23671 ;;		On exit  : 0/0
 23672 ;;		Unchanged: 0/0
 23673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23674 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23675 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23676 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23677 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23678 ;;Total ram usage:       10 bytes
 23679 ;; Hardware stack levels used:    1
 23680 ;; Hardware stack levels required when called:    7
 23681 ;; This function calls:
 23682 ;;		Nothing
 23683 ;; This function is called by:
 23684 ;;		_ADCAverage
 23685 ;;		_pow
 23686 ;;		_exp
 23687 ;;		_floor
 23688 ;; This function uses a non-reentrant model
 23689 ;;
 23690                           
 23691                           	psect	text130
 23692  013DE6                     __ptext130:
 23693                           	opt stack 0
 23694  013DE6                     ___fltol:
 23695                           	opt stack 18
 23696                           
 23697                           ; BSR set to: 0
 23698                           ;incstack = 0
 23699  013DE6  0100               	movlb	0	; () banked
 23700  013DE8  35A1               	rlcf	(___fltol@f1+2)& (0+255),w,b
 23701  013DEA  35A2               	rlcf	(___fltol@f1+3)& (0+255),w,b
 23702  013DEC  6FA8               	movwf	___fltol@exp1& (0+255),b
 23703  013DEE  51A8               	movf	___fltol@exp1& (0+255),w,b
 23704  013DF0  A4D8               	btfss	status,2,c
 23705  013DF2  D009               	goto	l2538
 23706                           
 23707                           ; BSR set to: 0
 23708  013DF4  0E00               	movlw	0
 23709  013DF6  6F9F               	movwf	?___fltol& (0+255),b
 23710  013DF8  0E00               	movlw	0
 23711  013DFA  6FA0               	movwf	(?___fltol+1)& (0+255),b
 23712  013DFC  0E00               	movlw	0
 23713  013DFE  6FA1               	movwf	(?___fltol+2)& (0+255),b
 23714  013E00  0E00               	movlw	0
 23715  013E02  6FA2               	movwf	(?___fltol+3)& (0+255),b
 23716                           
 23717                           ; BSR set to: 0
 23718  013E04  0012               	return	
 23719  013E06                     l2538:
 23720                           
 23721                           ; BSR set to: 0
 23722                           
 23723                           ; BSR set to: 0
 23724  013E06  C09F  F0A3         	movff	___fltol@f1,??___fltol
 23725  013E0A  C0A0  F0A4         	movff	___fltol@f1+1,??___fltol+1
 23726  013E0E  C0A1  F0A5         	movff	___fltol@f1+2,??___fltol+2
 23727  013E12  C0A2  F0A6         	movff	___fltol@f1+3,??___fltol+3
 23728  013E16  0E20               	movlw	32
 23729  013E18  D005               	goto	u10430
 23730  013E1A                     u10435:
 23731  013E1A  90D8               	bcf	status,0,c
 23732  013E1C  33A6               	rrcf	(??___fltol+3)& (0+255),f,b
 23733  013E1E  33A5               	rrcf	(??___fltol+2)& (0+255),f,b
 23734  013E20  33A4               	rrcf	(??___fltol+1)& (0+255),f,b
 23735  013E22  33A3               	rrcf	??___fltol& (0+255),f,b
 23736  013E24                     u10430:
 23737  013E24  2EE8               	decfsz	wreg,f,c
 23738  013E26  D7F9               	goto	u10435
 23739  013E28  51A3               	movf	??___fltol& (0+255),w,b
 23740  013E2A  6FA7               	movwf	___fltol@sign1& (0+255),b
 23741                           
 23742                           ; BSR set to: 0
 23743  013E2C  8FA1               	bsf	(___fltol@f1+2)& (0+255),7,b
 23744                           
 23745                           ; BSR set to: 0
 23746  013E2E  0EFF               	movlw	255
 23747  013E30  179F               	andwf	___fltol@f1& (0+255),f,b
 23748  013E32  0EFF               	movlw	255
 23749  013E34  17A0               	andwf	(___fltol@f1+1)& (0+255),f,b
 23750  013E36  0EFF               	movlw	255
 23751  013E38  17A1               	andwf	(___fltol@f1+2)& (0+255),f,b
 23752  013E3A  0E00               	movlw	0
 23753  013E3C  17A2               	andwf	(___fltol@f1+3)& (0+255),f,b
 23754                           
 23755                           ; BSR set to: 0
 23756  013E3E  0E96               	movlw	150
 23757  013E40  5FA8               	subwf	___fltol@exp1& (0+255),f,b
 23758                           
 23759                           ; BSR set to: 0
 23760  013E42  AFA8               	btfss	___fltol@exp1& (0+255),7,b
 23761  013E44  D016               	goto	l2540
 23762                           
 23763                           ; BSR set to: 0
 23764  013E46  51A8               	movf	___fltol@exp1& (0+255),w,b
 23765  013E48  0A80               	xorlw	128
 23766  013E4A  0F97               	addlw	151
 23767  013E4C  B0D8               	btfsc	status,0,c
 23768  013E4E  D009               	goto	l2541
 23769                           
 23770                           ; BSR set to: 0
 23771  013E50  0E00               	movlw	0
 23772  013E52  6F9F               	movwf	?___fltol& (0+255),b
 23773  013E54  0E00               	movlw	0
 23774  013E56  6FA0               	movwf	(?___fltol+1)& (0+255),b
 23775  013E58  0E00               	movlw	0
 23776  013E5A  6FA1               	movwf	(?___fltol+2)& (0+255),b
 23777  013E5C  0E00               	movlw	0
 23778  013E5E  6FA2               	movwf	(?___fltol+3)& (0+255),b
 23779                           
 23780                           ; BSR set to: 0
 23781  013E60  0012               	return	
 23782  013E62                     l2541:
 23783                           
 23784                           ; BSR set to: 0
 23785                           
 23786                           ; BSR set to: 0
 23787                           
 23788                           ; BSR set to: 0
 23789  013E62  90D8               	bcf	status,0,c
 23790  013E64  33A2               	rrcf	(___fltol@f1+3)& (0+255),f,b
 23791  013E66  33A1               	rrcf	(___fltol@f1+2)& (0+255),f,b
 23792  013E68  33A0               	rrcf	(___fltol@f1+1)& (0+255),f,b
 23793  013E6A  339F               	rrcf	___fltol@f1& (0+255),f,b
 23794                           
 23795                           ; BSR set to: 0
 23796  013E6C  3FA8               	incfsz	___fltol@exp1& (0+255),f,b
 23797  013E6E  D7F9               	goto	l2541
 23798                           
 23799                           ; BSR set to: 0
 23800  013E70  D015               	goto	u10470
 23801  013E72                     l2540:
 23802                           
 23803                           ; BSR set to: 0
 23804                           
 23805                           ; BSR set to: 0
 23806  013E72  0E1F               	movlw	31
 23807  013E74  65A8               	cpfsgt	___fltol@exp1& (0+255),b
 23808  013E76  D00F               	goto	l2546
 23809                           
 23810                           ; BSR set to: 0
 23811  013E78  0E00               	movlw	0
 23812  013E7A  6F9F               	movwf	?___fltol& (0+255),b
 23813  013E7C  0E00               	movlw	0
 23814  013E7E  6FA0               	movwf	(?___fltol+1)& (0+255),b
 23815  013E80  0E00               	movlw	0
 23816  013E82  6FA1               	movwf	(?___fltol+2)& (0+255),b
 23817  013E84  0E00               	movlw	0
 23818  013E86  6FA2               	movwf	(?___fltol+3)& (0+255),b
 23819                           
 23820                           ; BSR set to: 0
 23821  013E88  0012               	return	
 23822  013E8A                     
 23823                           ; BSR set to: 0
 23824                           
 23825                           ; BSR set to: 0
 23826  013E8A  90D8               	bcf	status,0,c
 23827  013E8C  379F               	rlcf	___fltol@f1& (0+255),f,b
 23828  013E8E  37A0               	rlcf	(___fltol@f1+1)& (0+255),f,b
 23829  013E90  37A1               	rlcf	(___fltol@f1+2)& (0+255),f,b
 23830  013E92  37A2               	rlcf	(___fltol@f1+3)& (0+255),f,b
 23831  013E94  07A8               	decf	___fltol@exp1& (0+255),f,b
 23832  013E96                     l2546:
 23833                           
 23834                           ; BSR set to: 0
 23835                           
 23836                           ; BSR set to: 0
 23837  013E96  51A8               	movf	___fltol@exp1& (0+255),w,b
 23838  013E98  A4D8               	btfss	status,2,c
 23839  013E9A  D7F7               	goto	l2547
 23840  013E9C                     u10470:
 23841                           
 23842                           ; BSR set to: 0
 23843                           
 23844                           ; BSR set to: 0
 23845                           
 23846                           ; BSR set to: 0
 23847  013E9C  51A7               	movf	___fltol@sign1& (0+255),w,b
 23848  013E9E  B4D8               	btfsc	status,2,c
 23849  013EA0  D008               	goto	l2549
 23850                           
 23851                           ; BSR set to: 0
 23852  013EA2  1FA2               	comf	(___fltol@f1+3)& (0+255),f,b
 23853  013EA4  1FA1               	comf	(___fltol@f1+2)& (0+255),f,b
 23854  013EA6  1FA0               	comf	(___fltol@f1+1)& (0+255),f,b
 23855  013EA8  6D9F               	negf	___fltol@f1& (0+255),b
 23856  013EAA  0E00               	movlw	0
 23857  013EAC  23A0               	addwfc	(___fltol@f1+1)& (0+255),f,b
 23858  013EAE  23A1               	addwfc	(___fltol@f1+2)& (0+255),f,b
 23859  013EB0  23A2               	addwfc	(___fltol@f1+3)& (0+255),f,b
 23860  013EB2                     l2549:
 23861                           
 23862                           ; BSR set to: 0
 23863                           
 23864                           ; BSR set to: 0
 23865  013EB2  C09F  F09F         	movff	___fltol@f1,?___fltol
 23866  013EB6  C0A0  F0A0         	movff	___fltol@f1+1,?___fltol+1
 23867  013EBA  C0A1  F0A1         	movff	___fltol@f1+2,?___fltol+2
 23868  013EBE  C0A2  F0A2         	movff	___fltol@f1+3,?___fltol+3
 23869  013EC2  0012               	return	
 23870  013EC4                     __end_of___fltol:
 23871                           	opt stack 0
 23872                           tosu	equ	0xFFF
 23873                           tosh	equ	0xFFE
 23874                           tosl	equ	0xFFD
 23875                           pclath	equ	0xFFA
 23876                           tblptru	equ	0xFF8
 23877                           tblptrh	equ	0xFF7
 23878                           tblptrl	equ	0xFF6
 23879                           tablat	equ	0xFF5
 23880                           prodh	equ	0xFF4
 23881                           prodl	equ	0xFF3
 23882                           intcon	equ	0xFF2
 23883                           indf0	equ	0xFEF
 23884                           postinc0	equ	0xFEE
 23885                           fsr0h	equ	0xFEA
 23886                           fsr0l	equ	0xFE9
 23887                           wreg	equ	0xFE8
 23888                           indf1	equ	0xFE7
 23889                           postdec1	equ	0xFE5
 23890                           fsr1h	equ	0xFE2
 23891                           fsr1l	equ	0xFE1
 23892                           indf2	equ	0xFDF
 23893                           postinc2	equ	0xFDE
 23894                           postdec2	equ	0xFDD
 23895                           plusw2	equ	0xFDB
 23896                           fsr2h	equ	0xFDA
 23897                           fsr2l	equ	0xFD9
 23898                           status	equ	0xFD8
 23899                           
 23900 ;; *************** function ___flge *****************
 23901 ;; Defined at:
 23902 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flge.c"
 23903 ;; Parameters:    Size  Location     Type
 23904 ;;  ff1             4    0[BANK0 ] long 
 23905 ;;  ff2             4    4[BANK0 ] long 
 23906 ;; Auto vars:     Size  Location     Type
 23907 ;;		None
 23908 ;; Return value:  Size  Location     Type
 23909 ;;		None               void
 23910 ;; Registers used:
 23911 ;;		wreg, status,2, status,0
 23912 ;; Tracked objects:
 23913 ;;		On entry : 0/0
 23914 ;;		On exit  : 0/0
 23915 ;;		Unchanged: 0/0
 23916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23917 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23919 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23920 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23921 ;;Total ram usage:       12 bytes
 23922 ;; Hardware stack levels used:    1
 23923 ;; Hardware stack levels required when called:    7
 23924 ;; This function calls:
 23925 ;;		Nothing
 23926 ;; This function is called by:
 23927 ;;		_pow
 23928 ;;		_exp
 23929 ;;		_floor
 23930 ;; This function uses a non-reentrant model
 23931 ;;
 23932                           
 23933                           	psect	text131
 23934  0135A2                     __ptext131:
 23935                           	opt stack 0
 23936  0135A2                     ___flge:
 23937                           	opt stack 18
 23938                           
 23939                           ; BSR set to: 0
 23940                           ;incstack = 0
 23941  0135A2  0E00               	movlw	0
 23942  0135A4  0100               	movlb	0	; () banked
 23943  0135A6  1560               	andwf	___flge@ff1& (0+255),w,b
 23944  0135A8  6F68               	movwf	??___flge& (0+255),b
 23945  0135AA  0E00               	movlw	0
 23946  0135AC  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 23947  0135AE  6F69               	movwf	(??___flge+1)& (0+255),b
 23948  0135B0  0E80               	movlw	128
 23949  0135B2  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 23950  0135B4  6F6A               	movwf	(??___flge+2)& (0+255),b
 23951  0135B6  0E7F               	movlw	127
 23952  0135B8  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 23953  0135BA  6F6B               	movwf	(??___flge+3)& (0+255),b
 23954  0135BC  5168               	movf	??___flge& (0+255),w,b
 23955  0135BE  1169               	iorwf	(??___flge+1)& (0+255),w,b
 23956  0135C0  116A               	iorwf	(??___flge+2)& (0+255),w,b
 23957  0135C2  116B               	iorwf	(??___flge+3)& (0+255),w,b
 23958  0135C4  A4D8               	btfss	status,2,c
 23959  0135C6  D008               	goto	l2508
 23960                           
 23961                           ; BSR set to: 0
 23962  0135C8  0E00               	movlw	0
 23963  0135CA  6F60               	movwf	___flge@ff1& (0+255),b
 23964  0135CC  0E00               	movlw	0
 23965  0135CE  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 23966  0135D0  0E00               	movlw	0
 23967  0135D2  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 23968  0135D4  0E00               	movlw	0
 23969  0135D6  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 23970  0135D8                     l2508:
 23971                           
 23972                           ; BSR set to: 0
 23973                           
 23974                           ; BSR set to: 0
 23975  0135D8  0E00               	movlw	0
 23976  0135DA  1564               	andwf	___flge@ff2& (0+255),w,b
 23977  0135DC  6F68               	movwf	??___flge& (0+255),b
 23978  0135DE  0E00               	movlw	0
 23979  0135E0  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 23980  0135E2  6F69               	movwf	(??___flge+1)& (0+255),b
 23981  0135E4  0E80               	movlw	128
 23982  0135E6  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 23983  0135E8  6F6A               	movwf	(??___flge+2)& (0+255),b
 23984  0135EA  0E7F               	movlw	127
 23985  0135EC  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 23986  0135EE  6F6B               	movwf	(??___flge+3)& (0+255),b
 23987  0135F0  5168               	movf	??___flge& (0+255),w,b
 23988  0135F2  1169               	iorwf	(??___flge+1)& (0+255),w,b
 23989  0135F4  116A               	iorwf	(??___flge+2)& (0+255),w,b
 23990  0135F6  116B               	iorwf	(??___flge+3)& (0+255),w,b
 23991  0135F8  A4D8               	btfss	status,2,c
 23992  0135FA  D008               	goto	l2509
 23993                           
 23994                           ; BSR set to: 0
 23995  0135FC  0E00               	movlw	0
 23996  0135FE  6F64               	movwf	___flge@ff2& (0+255),b
 23997  013600  0E00               	movlw	0
 23998  013602  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 23999  013604  0E00               	movlw	0
 24000  013606  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 24001  013608  0E00               	movlw	0
 24002  01360A  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 24003  01360C                     l2509:
 24004                           
 24005                           ; BSR set to: 0
 24006                           
 24007                           ; BSR set to: 0
 24008  01360C  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 24009  01360E  D01D               	goto	l2510
 24010                           
 24011                           ; BSR set to: 0
 24012  013610  C060  F068         	movff	___flge@ff1,??___flge
 24013  013614  C061  F069         	movff	___flge@ff1+1,??___flge+1
 24014  013618  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 24015  01361C  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 24016  013620  1F68               	comf	??___flge& (0+255),f,b
 24017  013622  1F69               	comf	(??___flge+1)& (0+255),f,b
 24018  013624  1F6A               	comf	(??___flge+2)& (0+255),f,b
 24019  013626  1F6B               	comf	(??___flge+3)& (0+255),f,b
 24020  013628  2B68               	incf	??___flge& (0+255),f,b
 24021  01362A  0E00               	movlw	0
 24022  01362C  2369               	addwfc	(??___flge+1)& (0+255),f,b
 24023  01362E  236A               	addwfc	(??___flge+2)& (0+255),f,b
 24024  013630  236B               	addwfc	(??___flge+3)& (0+255),f,b
 24025  013632  0E00               	movlw	0
 24026  013634  2568               	addwf	??___flge& (0+255),w,b
 24027  013636  6F60               	movwf	___flge@ff1& (0+255),b
 24028  013638  0E00               	movlw	0
 24029  01363A  2169               	addwfc	(??___flge+1)& (0+255),w,b
 24030  01363C  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 24031  01363E  0E00               	movlw	0
 24032  013640  216A               	addwfc	(??___flge+2)& (0+255),w,b
 24033  013642  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 24034  013644  0E80               	movlw	128
 24035  013646  216B               	addwfc	(??___flge+3)& (0+255),w,b
 24036  013648  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 24037  01364A                     l2510:
 24038                           
 24039                           ; BSR set to: 0
 24040                           
 24041                           ; BSR set to: 0
 24042  01364A  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 24043  01364C  D01D               	goto	l2511
 24044                           
 24045                           ; BSR set to: 0
 24046  01364E  C064  F068         	movff	___flge@ff2,??___flge
 24047  013652  C065  F069         	movff	___flge@ff2+1,??___flge+1
 24048  013656  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 24049  01365A  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 24050  01365E  1F68               	comf	??___flge& (0+255),f,b
 24051  013660  1F69               	comf	(??___flge+1)& (0+255),f,b
 24052  013662  1F6A               	comf	(??___flge+2)& (0+255),f,b
 24053  013664  1F6B               	comf	(??___flge+3)& (0+255),f,b
 24054  013666  2B68               	incf	??___flge& (0+255),f,b
 24055  013668  0E00               	movlw	0
 24056  01366A  2369               	addwfc	(??___flge+1)& (0+255),f,b
 24057  01366C  236A               	addwfc	(??___flge+2)& (0+255),f,b
 24058  01366E  236B               	addwfc	(??___flge+3)& (0+255),f,b
 24059  013670  0E00               	movlw	0
 24060  013672  2568               	addwf	??___flge& (0+255),w,b
 24061  013674  6F64               	movwf	___flge@ff2& (0+255),b
 24062  013676  0E00               	movlw	0
 24063  013678  2169               	addwfc	(??___flge+1)& (0+255),w,b
 24064  01367A  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 24065  01367C  0E00               	movlw	0
 24066  01367E  216A               	addwfc	(??___flge+2)& (0+255),w,b
 24067  013680  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 24068  013682  0E80               	movlw	128
 24069  013684  216B               	addwfc	(??___flge+3)& (0+255),w,b
 24070  013686  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 24071  013688                     l2511:
 24072                           
 24073                           ; BSR set to: 0
 24074  013688  0E00               	movlw	0
 24075  01368A  1B60               	xorwf	___flge@ff1& (0+255),f,b
 24076  01368C  0E00               	movlw	0
 24077  01368E  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 24078  013690  0E00               	movlw	0
 24079  013692  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 24080  013694  0E80               	movlw	128
 24081  013696  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 24082  013698  0E00               	movlw	0
 24083  01369A  1B64               	xorwf	___flge@ff2& (0+255),f,b
 24084  01369C  0E00               	movlw	0
 24085  01369E  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 24086  0136A0  0E00               	movlw	0
 24087  0136A2  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 24088  0136A4  0E80               	movlw	128
 24089  0136A6  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 24090  0136A8  5164               	movf	___flge@ff2& (0+255),w,b
 24091  0136AA  5D60               	subwf	___flge@ff1& (0+255),w,b
 24092  0136AC  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 24093  0136AE  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 24094  0136B0  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 24095  0136B2  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 24096  0136B4  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 24097  0136B6  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 24098  0136B8  B0D8               	btfsc	status,0,c
 24099  0136BA  D002               	goto	l12405
 24100                           
 24101                           ; BSR set to: 0
 24102  0136BC  90D8               	bcf	status,0,c
 24103  0136BE  0012               	return	
 24104  0136C0                     l12405:
 24105                           
 24106                           ; BSR set to: 0
 24107                           
 24108                           ; BSR set to: 0
 24109  0136C0  80D8               	bsf	status,0,c
 24110                           
 24111                           ; BSR set to: 0
 24112  0136C2  0012               	return	
 24113  0136C4                     __end_of___flge:
 24114                           	opt stack 0
 24115                           tosu	equ	0xFFF
 24116                           tosh	equ	0xFFE
 24117                           tosl	equ	0xFFD
 24118                           pclath	equ	0xFFA
 24119                           tblptru	equ	0xFF8
 24120                           tblptrh	equ	0xFF7
 24121                           tblptrl	equ	0xFF6
 24122                           tablat	equ	0xFF5
 24123                           prodh	equ	0xFF4
 24124                           prodl	equ	0xFF3
 24125                           intcon	equ	0xFF2
 24126                           indf0	equ	0xFEF
 24127                           postinc0	equ	0xFEE
 24128                           fsr0h	equ	0xFEA
 24129                           fsr0l	equ	0xFE9
 24130                           wreg	equ	0xFE8
 24131                           indf1	equ	0xFE7
 24132                           postdec1	equ	0xFE5
 24133                           fsr1h	equ	0xFE2
 24134                           fsr1l	equ	0xFE1
 24135                           indf2	equ	0xFDF
 24136                           postinc2	equ	0xFDE
 24137                           postdec2	equ	0xFDD
 24138                           plusw2	equ	0xFDB
 24139                           fsr2h	equ	0xFDA
 24140                           fsr2l	equ	0xFD9
 24141                           status	equ	0xFD8
 24142                           
 24143 ;; *************** function _eval_poly *****************
 24144 ;; Defined at:
 24145 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 24146 ;; Parameters:    Size  Location     Type
 24147 ;;  x               4   63[BANK0 ] long 
 24148 ;;  d               2   67[BANK0 ] PTR const 
 24149 ;;		 -> log@coeff(36), exp@coeff(40), 
 24150 ;;  n               2   69[BANK0 ] int 
 24151 ;; Auto vars:     Size  Location     Type
 24152 ;;  res             4   75[BANK0 ] int 
 24153 ;; Return value:  Size  Location     Type
 24154 ;;                  4   63[BANK0 ] int 
 24155 ;; Registers used:
 24156 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24157 ;; Tracked objects:
 24158 ;;		On entry : 0/0
 24159 ;;		On exit  : 0/0
 24160 ;;		Unchanged: 0/0
 24161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24162 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24163 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24164 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24165 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24166 ;;Total ram usage:       16 bytes
 24167 ;; Hardware stack levels used:    1
 24168 ;; Hardware stack levels required when called:    8
 24169 ;; This function calls:
 24170 ;;		___fladd
 24171 ;;		___flmul
 24172 ;; This function is called by:
 24173 ;;		_exp
 24174 ;;		_log
 24175 ;; This function uses a non-reentrant model
 24176 ;;
 24177                           
 24178                           	psect	text132
 24179  013B02                     __ptext132:
 24180                           	opt stack 0
 24181  013B02                     _eval_poly:
 24182                           	opt stack 18
 24183                           
 24184                           ; BSR set to: 0
 24185                           ;incstack = 0
 24186  013B02  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 24187  013B06  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 24188  013B0A  0100               	movlb	0	; () banked
 24189  013B0C  90D8               	bcf	status,0,c
 24190  013B0E  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24191  013B10  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24192  013B12  90D8               	bcf	status,0,c
 24193  013B14  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24194  013B16  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24195  013B18  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 24196  013B1C  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 24197  013B20  51A7               	movf	??_eval_poly& (0+255),w,b
 24198  013B22  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 24199  013B24  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 24200  013B26  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 24201  013B28  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 24202  013B2C  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 24203  013B30                     	if	0	;tblptru may be non-zero
 24204  013B30                     	endif
 24205  013B30                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 24206  013B30  0E00               	movlw	low (__mediumconst shr (0+16))
 24207  013B32  6EF8               	movwf	tblptru,c
 24208  013B34                     	endif
 24209  013B34  0009               	tblrd		*+
 24210  013B36  CFF5 F0AB          	movff	tablat,eval_poly@res
 24211  013B3A  0009               	tblrd		*+
 24212  013B3C  CFF5 F0AC          	movff	tablat,eval_poly@res+1
 24213  013B40  0009               	tblrd		*+
 24214  013B42  CFF5 F0AD          	movff	tablat,eval_poly@res+2
 24215  013B46  000A               	tblrd		*-
 24216  013B48  CFF5 F0AE          	movff	tablat,eval_poly@res+3
 24217  013B4C  D04C               	goto	l2952
 24218  013B4E                     
 24219                           ; BSR set to: 0
 24220                           
 24221                           ; BSR set to: 0
 24222  013B4E  C0AB  F072         	movff	eval_poly@res,___flmul@a
 24223  013B52  C0AC  F073         	movff	eval_poly@res+1,___flmul@a+1
 24224  013B56  C0AD  F074         	movff	eval_poly@res+2,___flmul@a+2
 24225  013B5A  C0AE  F075         	movff	eval_poly@res+3,___flmul@a+3
 24226  013B5E  C09F  F06E         	movff	eval_poly@x,___flmul@b
 24227  013B62  C0A0  F06F         	movff	eval_poly@x+1,___flmul@b+1
 24228  013B66  C0A1  F070         	movff	eval_poly@x+2,___flmul@b+2
 24229  013B6A  C0A2  F071         	movff	eval_poly@x+3,___flmul@b+3
 24230  013B6E  EC9D  F085         	call	___flmul	;wreg free
 24231  013B72  C06E  F08B         	movff	?___flmul,___fladd@b
 24232  013B76  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 24233  013B7A  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 24234  013B7E  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 24235  013B82  0100               	movlb	0	; () banked
 24236  013B84  07A5               	decf	eval_poly@n& (0+255),f,b
 24237  013B86  A0D8               	btfss	status,0,c
 24238  013B88  07A6               	decf	(eval_poly@n+1)& (0+255),f,b
 24239  013B8A  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 24240  013B8E  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 24241  013B92  90D8               	bcf	status,0,c
 24242  013B94  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24243  013B96  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24244  013B98  90D8               	bcf	status,0,c
 24245  013B9A  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24246  013B9C  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24247  013B9E  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 24248  013BA2  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 24249  013BA6  51A7               	movf	??_eval_poly& (0+255),w,b
 24250  013BA8  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 24251  013BAA  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 24252  013BAC  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 24253  013BAE  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 24254  013BB2  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 24255  013BB6                     	if	0	;tblptru may be non-zero
 24256  013BB6                     	endif
 24257  013BB6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 24258  013BB6  0E00               	movlw	low (__mediumconst shr (0+16))
 24259  013BB8  6EF8               	movwf	tblptru,c
 24260  013BBA                     	endif
 24261  013BBA  0009               	tblrd		*+
 24262  013BBC  CFF5 F08F          	movff	tablat,___fladd@a
 24263  013BC0  0009               	tblrd		*+
 24264  013BC2  CFF5 F090          	movff	tablat,___fladd@a+1
 24265  013BC6  0009               	tblrd		*+
 24266  013BC8  CFF5 F091          	movff	tablat,___fladd@a+2
 24267  013BCC  000A               	tblrd		*-
 24268  013BCE  CFF5 F092          	movff	tablat,___fladd@a+3
 24269  013BD2  EC46  F087         	call	___fladd	;wreg free
 24270  013BD6  C08B  F0AB         	movff	?___fladd,eval_poly@res
 24271  013BDA  C08C  F0AC         	movff	?___fladd+1,eval_poly@res+1
 24272  013BDE  C08D  F0AD         	movff	?___fladd+2,eval_poly@res+2
 24273  013BE2  C08E  F0AE         	movff	?___fladd+3,eval_poly@res+3
 24274  013BE6                     l2952:
 24275  013BE6  0100               	movlb	0	; () banked
 24276  013BE8  51A5               	movf	eval_poly@n& (0+255),w,b
 24277  013BEA  11A6               	iorwf	(eval_poly@n+1)& (0+255),w,b
 24278  013BEC  A4D8               	btfss	status,2,c
 24279  013BEE  D7AF               	goto	l2953
 24280                           
 24281                           ; BSR set to: 0
 24282  013BF0  C0AB  F09F         	movff	eval_poly@res,?_eval_poly
 24283  013BF4  C0AC  F0A0         	movff	eval_poly@res+1,?_eval_poly+1
 24284  013BF8  C0AD  F0A1         	movff	eval_poly@res+2,?_eval_poly+2
 24285  013BFC  C0AE  F0A2         	movff	eval_poly@res+3,?_eval_poly+3
 24286                           
 24287                           ; BSR set to: 0
 24288  013C00  0012               	return		;funcret
 24289  013C02                     __end_of_eval_poly:
 24290                           	opt stack 0
 24291                           tosu	equ	0xFFF
 24292                           tosh	equ	0xFFE
 24293                           tosl	equ	0xFFD
 24294                           pclath	equ	0xFFA
 24295                           tblptru	equ	0xFF8
 24296                           tblptrh	equ	0xFF7
 24297                           tblptrl	equ	0xFF6
 24298                           tablat	equ	0xFF5
 24299                           prodh	equ	0xFF4
 24300                           prodl	equ	0xFF3
 24301                           intcon	equ	0xFF2
 24302                           indf0	equ	0xFEF
 24303                           postinc0	equ	0xFEE
 24304                           fsr0h	equ	0xFEA
 24305                           fsr0l	equ	0xFE9
 24306                           wreg	equ	0xFE8
 24307                           indf1	equ	0xFE7
 24308                           postdec1	equ	0xFE5
 24309                           fsr1h	equ	0xFE2
 24310                           fsr1l	equ	0xFE1
 24311                           indf2	equ	0xFDF
 24312                           postinc2	equ	0xFDE
 24313                           postdec2	equ	0xFDD
 24314                           plusw2	equ	0xFDB
 24315                           fsr2h	equ	0xFDA
 24316                           fsr2l	equ	0xFD9
 24317                           status	equ	0xFD8
 24318                           
 24319 ;; *************** function ___flmul *****************
 24320 ;; Defined at:
 24321 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
 24322 ;; Parameters:    Size  Location     Type
 24323 ;;  b               4   14[BANK0 ] int 
 24324 ;;  a               4   18[BANK0 ] int 
 24325 ;; Auto vars:     Size  Location     Type
 24326 ;;  prod            4   33[BANK0 ] struct .
 24327 ;;  grs             4   28[BANK0 ] unsigned long 
 24328 ;;  temp            2   37[BANK0 ] struct .
 24329 ;;  bexp            1   32[BANK0 ] unsigned char 
 24330 ;;  aexp            1   27[BANK0 ] unsigned char 
 24331 ;;  sign            1   26[BANK0 ] unsigned char 
 24332 ;; Return value:  Size  Location     Type
 24333 ;;                  4   14[BANK0 ] unsigned char 
 24334 ;; Registers used:
 24335 ;;		wreg, status,2, status,0, prodl, prodh
 24336 ;; Tracked objects:
 24337 ;;		On entry : 0/0
 24338 ;;		On exit  : 0/0
 24339 ;;		Unchanged: 0/0
 24340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24341 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24342 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24343 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24344 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24345 ;;Total ram usage:       25 bytes
 24346 ;; Hardware stack levels used:    1
 24347 ;; Hardware stack levels required when called:    7
 24348 ;; This function calls:
 24349 ;;		Nothing
 24350 ;; This function is called by:
 24351 ;;		_ADCAverage
 24352 ;;		_pow
 24353 ;;		_exp
 24354 ;;		_log
 24355 ;;		_eval_poly
 24356 ;;		_ADC_Voltage
 24357 ;; This function uses a non-reentrant model
 24358 ;;
 24359                           
 24360                           	psect	text133
 24361  010B3A                     __ptext133:
 24362                           	opt stack 0
 24363  010B3A                     ___flmul:
 24364                           	opt stack 18
 24365                           
 24366                           ; BSR set to: 0
 24367                           ;incstack = 0
 24368  010B3A  0100               	movlb	0	; () banked
 24369  010B3C  5171               	movf	(___flmul@b+3)& (0+255),w,b
 24370  010B3E  0B80               	andlw	128
 24371  010B40  6F7A               	movwf	___flmul@sign& (0+255),b
 24372  010B42  5171               	movf	(___flmul@b+3)& (0+255),w,b
 24373  010B44  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 24374  010B46  6F80               	movwf	___flmul@bexp& (0+255),b
 24375                           
 24376                           ; BSR set to: 0
 24377  010B48  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 24378                           
 24379                           ; BSR set to: 0
 24380  010B4A  8180               	bsf	___flmul@bexp& (0+255),0,b
 24381                           
 24382                           ; BSR set to: 0
 24383                           
 24384                           ; BSR set to: 0
 24385  010B4C  5180               	movf	___flmul@bexp& (0+255),w,b
 24386  010B4E  B4D8               	btfsc	status,2,c
 24387  010B50  D00D               	goto	l2843
 24388                           
 24389                           ; BSR set to: 0
 24390  010B52  2980               	incf	___flmul@bexp& (0+255),w,b
 24391  010B54  A4D8               	btfss	status,2,c
 24392  010B56  D008               	goto	l2844
 24393                           
 24394                           ; BSR set to: 0
 24395  010B58  0E00               	movlw	0
 24396  010B5A  6F6E               	movwf	___flmul@b& (0+255),b
 24397  010B5C  0E00               	movlw	0
 24398  010B5E  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 24399  010B60  0E00               	movlw	0
 24400  010B62  6F70               	movwf	(___flmul@b+2)& (0+255),b
 24401  010B64  0E00               	movlw	0
 24402  010B66  6F71               	movwf	(___flmul@b+3)& (0+255),b
 24403  010B68                     l2844:
 24404                           
 24405                           ; BSR set to: 0
 24406                           
 24407                           ; BSR set to: 0
 24408  010B68  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 24409  010B6A  D008               	goto	l2845
 24410  010B6C                     l2843:
 24411                           
 24412                           ; BSR set to: 0
 24413                           
 24414                           ; BSR set to: 0
 24415  010B6C  0E00               	movlw	0
 24416  010B6E  6F6E               	movwf	___flmul@b& (0+255),b
 24417  010B70  0E00               	movlw	0
 24418  010B72  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 24419  010B74  0E00               	movlw	0
 24420  010B76  6F70               	movwf	(___flmul@b+2)& (0+255),b
 24421  010B78  0E00               	movlw	0
 24422  010B7A  6F71               	movwf	(___flmul@b+3)& (0+255),b
 24423  010B7C                     l2845:
 24424                           
 24425                           ; BSR set to: 0
 24426                           
 24427                           ; BSR set to: 0
 24428  010B7C  5175               	movf	(___flmul@a+3)& (0+255),w,b
 24429  010B7E  0B80               	andlw	128
 24430  010B80  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 24431                           
 24432                           ; BSR set to: 0
 24433  010B82  5175               	movf	(___flmul@a+3)& (0+255),w,b
 24434  010B84  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 24435  010B86  6F7B               	movwf	___flmul@aexp& (0+255),b
 24436                           
 24437                           ; BSR set to: 0
 24438  010B88  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 24439                           
 24440                           ; BSR set to: 0
 24441  010B8A  817B               	bsf	___flmul@aexp& (0+255),0,b
 24442                           
 24443                           ; BSR set to: 0
 24444                           
 24445                           ; BSR set to: 0
 24446  010B8C  517B               	movf	___flmul@aexp& (0+255),w,b
 24447  010B8E  B4D8               	btfsc	status,2,c
 24448  010B90  D00D               	goto	l2847
 24449                           
 24450                           ; BSR set to: 0
 24451  010B92  297B               	incf	___flmul@aexp& (0+255),w,b
 24452  010B94  A4D8               	btfss	status,2,c
 24453  010B96  D008               	goto	l2848
 24454                           
 24455                           ; BSR set to: 0
 24456  010B98  0E00               	movlw	0
 24457  010B9A  6F72               	movwf	___flmul@a& (0+255),b
 24458  010B9C  0E00               	movlw	0
 24459  010B9E  6F73               	movwf	(___flmul@a+1)& (0+255),b
 24460  010BA0  0E00               	movlw	0
 24461  010BA2  6F74               	movwf	(___flmul@a+2)& (0+255),b
 24462  010BA4  0E00               	movlw	0
 24463  010BA6  6F75               	movwf	(___flmul@a+3)& (0+255),b
 24464  010BA8                     l2848:
 24465                           
 24466                           ; BSR set to: 0
 24467                           
 24468                           ; BSR set to: 0
 24469  010BA8  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 24470  010BAA  D008               	goto	l2849
 24471  010BAC                     l2847:
 24472                           
 24473                           ; BSR set to: 0
 24474                           
 24475                           ; BSR set to: 0
 24476  010BAC  0E00               	movlw	0
 24477  010BAE  6F72               	movwf	___flmul@a& (0+255),b
 24478  010BB0  0E00               	movlw	0
 24479  010BB2  6F73               	movwf	(___flmul@a+1)& (0+255),b
 24480  010BB4  0E00               	movlw	0
 24481  010BB6  6F74               	movwf	(___flmul@a+2)& (0+255),b
 24482  010BB8  0E00               	movlw	0
 24483  010BBA  6F75               	movwf	(___flmul@a+3)& (0+255),b
 24484  010BBC                     l2849:
 24485                           
 24486                           ; BSR set to: 0
 24487  010BBC  517B               	movf	___flmul@aexp& (0+255),w,b
 24488  010BBE  B4D8               	btfsc	status,2,c
 24489  010BC0  D003               	goto	u10190
 24490                           
 24491                           ; BSR set to: 0
 24492  010BC2  5180               	movf	___flmul@bexp& (0+255),w,b
 24493  010BC4  A4D8               	btfss	status,2,c
 24494  010BC6  D009               	goto	l2850
 24495  010BC8                     u10190:
 24496                           
 24497                           ; BSR set to: 0
 24498                           
 24499                           ; BSR set to: 0
 24500  010BC8  0E00               	movlw	0
 24501  010BCA  6F6E               	movwf	?___flmul& (0+255),b
 24502  010BCC  0E00               	movlw	0
 24503  010BCE  6F6F               	movwf	(?___flmul+1)& (0+255),b
 24504  010BD0  0E00               	movlw	0
 24505  010BD2  6F70               	movwf	(?___flmul+2)& (0+255),b
 24506  010BD4  0E00               	movlw	0
 24507  010BD6  6F71               	movwf	(?___flmul+3)& (0+255),b
 24508                           
 24509                           ; BSR set to: 0
 24510  010BD8  0012               	return	
 24511  010BDA                     l2850:
 24512                           
 24513                           ; BSR set to: 0
 24514                           
 24515                           ; BSR set to: 0
 24516  010BDA  5174               	movf	(___flmul@a+2)& (0+255),w,b
 24517  010BDC  036E               	mulwf	___flmul@b& (0+255),b
 24518  010BDE  CFF3 F085          	movff	prodl,___flmul@temp
 24519  010BE2  CFF4 F086          	movff	prodh,___flmul@temp+1
 24520                           
 24521                           ; BSR set to: 0
 24522  010BE6  5185               	movf	___flmul@temp& (0+255),w,b
 24523  010BE8  6F7C               	movwf	___flmul@grs& (0+255),b
 24524  010BEA  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 24525  010BEC  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 24526  010BEE  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 24527                           
 24528                           ; BSR set to: 0
 24529  010BF0  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24530  010BF2  6F81               	movwf	___flmul@prod& (0+255),b
 24531  010BF4  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 24532  010BF6  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 24533  010BF8  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 24534  010BFA  5173               	movf	(___flmul@a+1)& (0+255),w,b
 24535  010BFC  036F               	mulwf	(___flmul@b+1)& (0+255),b
 24536  010BFE  CFF3 F085          	movff	prodl,___flmul@temp
 24537  010C02  CFF4 F086          	movff	prodh,___flmul@temp+1
 24538                           
 24539                           ; BSR set to: 0
 24540  010C06  5185               	movf	___flmul@temp& (0+255),w,b
 24541  010C08  277C               	addwf	___flmul@grs& (0+255),f,b
 24542  010C0A  0E00               	movlw	0
 24543  010C0C  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24544  010C0E  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24545  010C10  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24546                           
 24547                           ; BSR set to: 0
 24548  010C12  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24549  010C14  2781               	addwf	___flmul@prod& (0+255),f,b
 24550  010C16  0E00               	movlw	0
 24551  010C18  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24552  010C1A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24553  010C1C  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24554  010C1E  5172               	movf	___flmul@a& (0+255),w,b
 24555  010C20  0370               	mulwf	(___flmul@b+2)& (0+255),b
 24556  010C22  CFF3 F085          	movff	prodl,___flmul@temp
 24557  010C26  CFF4 F086          	movff	prodh,___flmul@temp+1
 24558                           
 24559                           ; BSR set to: 0
 24560  010C2A  5185               	movf	___flmul@temp& (0+255),w,b
 24561  010C2C  277C               	addwf	___flmul@grs& (0+255),f,b
 24562  010C2E  0E00               	movlw	0
 24563  010C30  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24564  010C32  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24565  010C34  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24566                           
 24567                           ; BSR set to: 0
 24568  010C36  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24569  010C38  2781               	addwf	___flmul@prod& (0+255),f,b
 24570  010C3A  0E00               	movlw	0
 24571  010C3C  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24572  010C3E  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24573  010C40  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24574                           
 24575                           ; BSR set to: 0
 24576  010C42  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 24577  010C46  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 24578  010C4A  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 24579  010C4E  6B7C               	clrf	___flmul@grs& (0+255),b
 24580                           
 24581                           ; BSR set to: 0
 24582  010C50  5172               	movf	___flmul@a& (0+255),w,b
 24583  010C52  036F               	mulwf	(___flmul@b+1)& (0+255),b
 24584  010C54  CFF3 F085          	movff	prodl,___flmul@temp
 24585  010C58  CFF4 F086          	movff	prodh,___flmul@temp+1
 24586                           
 24587                           ; BSR set to: 0
 24588  010C5C  5185               	movf	___flmul@temp& (0+255),w,b
 24589  010C5E  277C               	addwf	___flmul@grs& (0+255),f,b
 24590  010C60  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24591  010C62  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24592  010C64  0E00               	movlw	0
 24593  010C66  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24594  010C68  0E00               	movlw	0
 24595  010C6A  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24596                           
 24597                           ; BSR set to: 0
 24598  010C6C  5173               	movf	(___flmul@a+1)& (0+255),w,b
 24599  010C6E  036E               	mulwf	___flmul@b& (0+255),b
 24600  010C70  CFF3 F085          	movff	prodl,___flmul@temp
 24601  010C74  CFF4 F086          	movff	prodh,___flmul@temp+1
 24602                           
 24603                           ; BSR set to: 0
 24604  010C78  5185               	movf	___flmul@temp& (0+255),w,b
 24605  010C7A  277C               	addwf	___flmul@grs& (0+255),f,b
 24606  010C7C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24607  010C7E  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24608  010C80  0E00               	movlw	0
 24609  010C82  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24610  010C84  0E00               	movlw	0
 24611  010C86  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24612                           
 24613                           ; BSR set to: 0
 24614  010C88  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 24615  010C8C  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 24616  010C90  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 24617  010C94  6B7C               	clrf	___flmul@grs& (0+255),b
 24618  010C96  5172               	movf	___flmul@a& (0+255),w,b
 24619  010C98  036E               	mulwf	___flmul@b& (0+255),b
 24620  010C9A  CFF3 F085          	movff	prodl,___flmul@temp
 24621  010C9E  CFF4 F086          	movff	prodh,___flmul@temp+1
 24622                           
 24623                           ; BSR set to: 0
 24624  010CA2  5185               	movf	___flmul@temp& (0+255),w,b
 24625  010CA4  277C               	addwf	___flmul@grs& (0+255),f,b
 24626  010CA6  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24627  010CA8  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24628  010CAA  0E00               	movlw	0
 24629  010CAC  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24630  010CAE  0E00               	movlw	0
 24631  010CB0  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24632                           
 24633                           ; BSR set to: 0
 24634  010CB2  5174               	movf	(___flmul@a+2)& (0+255),w,b
 24635  010CB4  036F               	mulwf	(___flmul@b+1)& (0+255),b
 24636  010CB6  CFF3 F085          	movff	prodl,___flmul@temp
 24637  010CBA  CFF4 F086          	movff	prodh,___flmul@temp+1
 24638  010CBE  5185               	movf	___flmul@temp& (0+255),w,b
 24639  010CC0  2781               	addwf	___flmul@prod& (0+255),f,b
 24640  010CC2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24641  010CC4  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24642  010CC6  0E00               	movlw	0
 24643  010CC8  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24644  010CCA  0E00               	movlw	0
 24645  010CCC  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24646                           
 24647                           ; BSR set to: 0
 24648  010CCE  5173               	movf	(___flmul@a+1)& (0+255),w,b
 24649  010CD0  0370               	mulwf	(___flmul@b+2)& (0+255),b
 24650  010CD2  CFF3 F085          	movff	prodl,___flmul@temp
 24651  010CD6  CFF4 F086          	movff	prodh,___flmul@temp+1
 24652                           
 24653                           ; BSR set to: 0
 24654  010CDA  5185               	movf	___flmul@temp& (0+255),w,b
 24655  010CDC  2781               	addwf	___flmul@prod& (0+255),f,b
 24656  010CDE  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24657  010CE0  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24658  010CE2  0E00               	movlw	0
 24659  010CE4  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24660  010CE6  0E00               	movlw	0
 24661  010CE8  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24662  010CEA  5174               	movf	(___flmul@a+2)& (0+255),w,b
 24663  010CEC  0370               	mulwf	(___flmul@b+2)& (0+255),b
 24664  010CEE  CFF3 F085          	movff	prodl,___flmul@temp
 24665  010CF2  CFF4 F086          	movff	prodh,___flmul@temp+1
 24666                           
 24667                           ; BSR set to: 0
 24668  010CF6  5185               	movf	___flmul@temp& (0+255),w,b
 24669  010CF8  6F76               	movwf	??___flmul& (0+255),b
 24670  010CFA  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24671  010CFC  6F77               	movwf	(??___flmul+1)& (0+255),b
 24672  010CFE  6B78               	clrf	(??___flmul+2)& (0+255),b
 24673  010D00  6B79               	clrf	(??___flmul+3)& (0+255),b
 24674  010D02  C078  F079         	movff	??___flmul+2,??___flmul+3
 24675  010D06  C077  F078         	movff	??___flmul+1,??___flmul+2
 24676  010D0A  C076  F077         	movff	??___flmul,??___flmul+1
 24677  010D0E  6B76               	clrf	??___flmul& (0+255),b
 24678  010D10  5176               	movf	??___flmul& (0+255),w,b
 24679  010D12  2781               	addwf	___flmul@prod& (0+255),f,b
 24680  010D14  5177               	movf	(??___flmul+1)& (0+255),w,b
 24681  010D16  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24682  010D18  5178               	movf	(??___flmul+2)& (0+255),w,b
 24683  010D1A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24684  010D1C  5179               	movf	(??___flmul+3)& (0+255),w,b
 24685  010D1E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24686                           
 24687                           ; BSR set to: 0
 24688  010D20  C07C  F076         	movff	___flmul@grs,??___flmul
 24689  010D24  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 24690  010D28  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 24691  010D2C  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 24692  010D30  0E19               	movlw	25
 24693  010D32  D005               	goto	u10200
 24694  010D34                     u10205:
 24695  010D34  90D8               	bcf	status,0,c
 24696  010D36  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 24697  010D38  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 24698  010D3A  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 24699  010D3C  3376               	rrcf	??___flmul& (0+255),f,b
 24700  010D3E                     u10200:
 24701  010D3E  2EE8               	decfsz	wreg,f,c
 24702  010D40  D7F9               	goto	u10205
 24703  010D42  5176               	movf	??___flmul& (0+255),w,b
 24704  010D44  2781               	addwf	___flmul@prod& (0+255),f,b
 24705  010D46  5177               	movf	(??___flmul+1)& (0+255),w,b
 24706  010D48  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24707  010D4A  5178               	movf	(??___flmul+2)& (0+255),w,b
 24708  010D4C  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24709  010D4E  5179               	movf	(??___flmul+3)& (0+255),w,b
 24710  010D50  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24711                           
 24712                           ; BSR set to: 0
 24713  010D52  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 24714  010D56  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 24715  010D5A  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 24716  010D5E  6B7C               	clrf	___flmul@grs& (0+255),b
 24717                           
 24718                           ; BSR set to: 0
 24719  010D60  517B               	movf	___flmul@aexp& (0+255),w,b
 24720  010D62  C080  F076         	movff	___flmul@bexp,??___flmul
 24721  010D66  6B77               	clrf	(??___flmul+1)& (0+255),b
 24722  010D68  2776               	addwf	??___flmul& (0+255),f,b
 24723  010D6A  0E00               	movlw	0
 24724  010D6C  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 24725  010D6E  0E82               	movlw	130
 24726  010D70  2576               	addwf	??___flmul& (0+255),w,b
 24727  010D72  6F85               	movwf	___flmul@temp& (0+255),b
 24728  010D74  0EFF               	movlw	255
 24729  010D76  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 24730  010D78  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 24731  010D7A  D00F               	goto	l2854
 24732  010D7C                     
 24733                           ; BSR set to: 0
 24734                           
 24735                           ; BSR set to: 0
 24736  010D7C  90D8               	bcf	status,0,c
 24737  010D7E  3781               	rlcf	___flmul@prod& (0+255),f,b
 24738  010D80  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 24739  010D82  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 24740  010D84  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 24741                           
 24742                           ; BSR set to: 0
 24743  010D86  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 24744                           
 24745                           ; BSR set to: 0
 24746  010D88  8181               	bsf	___flmul@prod& (0+255),0,b
 24747                           
 24748                           ; BSR set to: 0
 24749  010D8A  90D8               	bcf	status,0,c
 24750  010D8C  377C               	rlcf	___flmul@grs& (0+255),f,b
 24751  010D8E  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 24752  010D90  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 24753  010D92  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 24754  010D94  0785               	decf	___flmul@temp& (0+255),f,b
 24755  010D96  A0D8               	btfss	status,0,c
 24756  010D98  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 24757  010D9A                     l2854:
 24758                           
 24759                           ; BSR set to: 0
 24760                           
 24761                           ; BSR set to: 0
 24762  010D9A  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 24763  010D9C  D7EF               	goto	l2855
 24764                           
 24765                           ; BSR set to: 0
 24766                           
 24767                           ; BSR set to: 0
 24768  010D9E  0E00               	movlw	0
 24769  010DA0  6F7B               	movwf	___flmul@aexp& (0+255),b
 24770                           
 24771                           ; BSR set to: 0
 24772  010DA2  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 24773  010DA4  D016               	goto	l2861
 24774                           
 24775                           ; BSR set to: 0
 24776  010DA6  0EFF               	movlw	255
 24777  010DA8  157C               	andwf	___flmul@grs& (0+255),w,b
 24778  010DAA  6F76               	movwf	??___flmul& (0+255),b
 24779  010DAC  0EFF               	movlw	255
 24780  010DAE  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 24781  010DB0  6F77               	movwf	(??___flmul+1)& (0+255),b
 24782  010DB2  0EFF               	movlw	255
 24783  010DB4  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 24784  010DB6  6F78               	movwf	(??___flmul+2)& (0+255),b
 24785  010DB8  0E7F               	movlw	127
 24786  010DBA  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 24787  010DBC  6F79               	movwf	(??___flmul+3)& (0+255),b
 24788  010DBE  5176               	movf	??___flmul& (0+255),w,b
 24789  010DC0  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 24790  010DC2  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 24791  010DC4  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 24792  010DC6  A4D8               	btfss	status,2,c
 24793  010DC8  D002               	goto	u10250
 24794                           
 24795                           ; BSR set to: 0
 24796                           
 24797                           ; BSR set to: 0
 24798  010DCA  A181               	btfss	___flmul@prod& (0+255),0,b
 24799  010DCC  D002               	goto	l2861
 24800  010DCE                     u10250:
 24801                           
 24802                           ; BSR set to: 0
 24803  010DCE  0E01               	movlw	1
 24804  010DD0  6F7B               	movwf	___flmul@aexp& (0+255),b
 24805  010DD2                     l2861:
 24806                           
 24807                           ; BSR set to: 0
 24808                           
 24809                           ; BSR set to: 0
 24810                           
 24811                           ; BSR set to: 0
 24812  010DD2  517B               	movf	___flmul@aexp& (0+255),w,b
 24813  010DD4  B4D8               	btfsc	status,2,c
 24814  010DD6  D01F               	goto	l2863
 24815                           
 24816                           ; BSR set to: 0
 24817  010DD8  0E01               	movlw	1
 24818  010DDA  2781               	addwf	___flmul@prod& (0+255),f,b
 24819  010DDC  0E00               	movlw	0
 24820  010DDE  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24821  010DE0  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24822  010DE2  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24823                           
 24824                           ; BSR set to: 0
 24825  010DE4  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 24826  010DE6  D017               	goto	l2863
 24827                           
 24828                           ; BSR set to: 0
 24829  010DE8  C081  F076         	movff	___flmul@prod,??___flmul
 24830  010DEC  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 24831  010DF0  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 24832  010DF4  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 24833  010DF8  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 24834  010DFA  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 24835  010DFC  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 24836  010DFE  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 24837  010E00  3376               	rrcf	??___flmul& (0+255),f,b
 24838  010E02  C076  F081         	movff	??___flmul,___flmul@prod
 24839  010E06  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 24840  010E0A  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 24841  010E0E  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 24842                           
 24843                           ; BSR set to: 0
 24844  010E12  4B85               	infsnz	___flmul@temp& (0+255),f,b
 24845  010E14  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 24846  010E16                     l2863:
 24847                           
 24848                           ; BSR set to: 0
 24849                           
 24850                           ; BSR set to: 0
 24851                           
 24852                           ; BSR set to: 0
 24853  010E16  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 24854  010E18  D00D               	goto	l2864
 24855  010E1A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24856  010E1C  E103               	bnz	u10280
 24857  010E1E  2985               	incf	___flmul@temp& (0+255),w,b
 24858  010E20  A0D8               	btfss	status,0,c
 24859  010E22  D008               	goto	l2864
 24860  010E24                     u10280:
 24861                           
 24862                           ; BSR set to: 0
 24863  010E24  0E00               	movlw	0
 24864  010E26  6F81               	movwf	___flmul@prod& (0+255),b
 24865  010E28  0E00               	movlw	0
 24866  010E2A  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 24867  010E2C  0E80               	movlw	128
 24868  010E2E  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 24869  010E30  0E7F               	movlw	127
 24870  010E32  D020               	goto	L11
 24871  010E34                     l2864:
 24872                           
 24873                           ; BSR set to: 0
 24874                           
 24875                           ; BSR set to: 0
 24876  010E34  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 24877  010E36  D005               	goto	u10290
 24878  010E38  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24879  010E3A  E10E               	bnz	l2866
 24880  010E3C  0585               	decf	___flmul@temp& (0+255),w,b
 24881  010E3E  B0D8               	btfsc	status,0,c
 24882  010E40  D00B               	goto	l2866
 24883  010E42                     u10290:
 24884                           
 24885                           ; BSR set to: 0
 24886  010E42  0E00               	movlw	0
 24887  010E44  6F81               	movwf	___flmul@prod& (0+255),b
 24888  010E46  0E00               	movlw	0
 24889  010E48  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 24890  010E4A  0E00               	movlw	0
 24891  010E4C  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 24892  010E4E  0E00               	movlw	0
 24893  010E50  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 24894  010E52  0E00               	movlw	0
 24895  010E54  6F7A               	movwf	___flmul@sign& (0+255),b
 24896  010E56  D00F               	goto	l2867
 24897  010E58                     l2866:
 24898                           
 24899                           ; BSR set to: 0
 24900  010E58  C085  F080         	movff	___flmul@temp,___flmul@bexp
 24901                           
 24902                           ; BSR set to: 0
 24903  010E5C  0EFF               	movlw	255
 24904  010E5E  1781               	andwf	___flmul@prod& (0+255),f,b
 24905  010E60  0EFF               	movlw	255
 24906  010E62  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 24907  010E64  0E7F               	movlw	127
 24908  010E66  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 24909  010E68  0E00               	movlw	0
 24910  010E6A  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 24911                           
 24912                           ; BSR set to: 0
 24913  010E6C  B180               	btfsc	___flmul@bexp& (0+255),0,b
 24914                           
 24915                           ; BSR set to: 0
 24916  010E6E  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 24917                           
 24918                           ; BSR set to: 0
 24919                           
 24920                           ; BSR set to: 0
 24921  010E70  90D8               	bcf	status,0,c
 24922  010E72  3180               	rrcf	___flmul@bexp& (0+255),w,b
 24923  010E74                     L11:
 24924  010E74  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 24925  010E76                     l2867:
 24926                           
 24927                           ; BSR set to: 0
 24928                           
 24929                           ; BSR set to: 0
 24930                           
 24931                           ; BSR set to: 0
 24932  010E76  517A               	movf	___flmul@sign& (0+255),w,b
 24933  010E78  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 24934                           
 24935                           ; BSR set to: 0
 24936  010E7A  C081  F06E         	movff	___flmul@prod,?___flmul
 24937  010E7E  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 24938  010E82  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 24939  010E86  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 24940  010E8A  0012               	return	
 24941  010E8C                     __end_of___flmul:
 24942                           	opt stack 0
 24943                           tosu	equ	0xFFF
 24944                           tosh	equ	0xFFE
 24945                           tosl	equ	0xFFD
 24946                           pclath	equ	0xFFA
 24947                           tblptru	equ	0xFF8
 24948                           tblptrh	equ	0xFF7
 24949                           tblptrl	equ	0xFF6
 24950                           tablat	equ	0xFF5
 24951                           prodh	equ	0xFF4
 24952                           prodl	equ	0xFF3
 24953                           intcon	equ	0xFF2
 24954                           indf0	equ	0xFEF
 24955                           postinc0	equ	0xFEE
 24956                           fsr0h	equ	0xFEA
 24957                           fsr0l	equ	0xFE9
 24958                           wreg	equ	0xFE8
 24959                           indf1	equ	0xFE7
 24960                           postdec1	equ	0xFE5
 24961                           fsr1h	equ	0xFE2
 24962                           fsr1l	equ	0xFE1
 24963                           indf2	equ	0xFDF
 24964                           postinc2	equ	0xFDE
 24965                           postdec2	equ	0xFDD
 24966                           plusw2	equ	0xFDB
 24967                           fsr2h	equ	0xFDA
 24968                           fsr2l	equ	0xFD9
 24969                           status	equ	0xFD8
 24970                           
 24971 ;; *************** function ___flsub *****************
 24972 ;; Defined at:
 24973 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
 24974 ;; Parameters:    Size  Location     Type
 24975 ;;  b               4   63[BANK0 ] unsigned char 
 24976 ;;  a               4   67[BANK0 ] unsigned char 
 24977 ;; Auto vars:     Size  Location     Type
 24978 ;;		None
 24979 ;; Return value:  Size  Location     Type
 24980 ;;                  4   63[BANK0 ] unsigned char 
 24981 ;; Registers used:
 24982 ;;		wreg, status,2, status,0, cstack
 24983 ;; Tracked objects:
 24984 ;;		On entry : 0/0
 24985 ;;		On exit  : 0/0
 24986 ;;		Unchanged: 0/0
 24987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24988 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24991 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24992 ;;Total ram usage:        8 bytes
 24993 ;; Hardware stack levels used:    1
 24994 ;; Hardware stack levels required when called:    8
 24995 ;; This function calls:
 24996 ;;		___fladd
 24997 ;; This function is called by:
 24998 ;;		_exp
 24999 ;; This function uses a non-reentrant model
 25000 ;;
 25001                           
 25002                           	psect	text134
 25003  0156B2                     __ptext134:
 25004                           	opt stack 0
 25005  0156B2                     ___flsub:
 25006                           	opt stack 18
 25007                           
 25008                           ; BSR set to: 0
 25009                           ;incstack = 0
 25010  0156B2  0E00               	movlw	0
 25011  0156B4  0100               	movlb	0	; () banked
 25012  0156B6  1BA3               	xorwf	___flsub@a& (0+255),f,b
 25013  0156B8  0E00               	movlw	0
 25014  0156BA  1BA4               	xorwf	(___flsub@a+1)& (0+255),f,b
 25015  0156BC  0E00               	movlw	0
 25016  0156BE  1BA5               	xorwf	(___flsub@a+2)& (0+255),f,b
 25017  0156C0  0E80               	movlw	128
 25018  0156C2  1BA6               	xorwf	(___flsub@a+3)& (0+255),f,b
 25019                           
 25020                           ; BSR set to: 0
 25021  0156C4  C09F  F08B         	movff	___flsub@b,___fladd@b
 25022  0156C8  C0A0  F08C         	movff	___flsub@b+1,___fladd@b+1
 25023  0156CC  C0A1  F08D         	movff	___flsub@b+2,___fladd@b+2
 25024  0156D0  C0A2  F08E         	movff	___flsub@b+3,___fladd@b+3
 25025  0156D4  C0A3  F08F         	movff	___flsub@a,___fladd@a
 25026  0156D8  C0A4  F090         	movff	___flsub@a+1,___fladd@a+1
 25027  0156DC  C0A5  F091         	movff	___flsub@a+2,___fladd@a+2
 25028  0156E0  C0A6  F092         	movff	___flsub@a+3,___fladd@a+3
 25029  0156E4  EC46  F087         	call	___fladd	;wreg free
 25030  0156E8  C08B  F09F         	movff	?___fladd,?___flsub
 25031  0156EC  C08C  F0A0         	movff	?___fladd+1,?___flsub+1
 25032  0156F0  C08D  F0A1         	movff	?___fladd+2,?___flsub+2
 25033  0156F4  C08E  F0A2         	movff	?___fladd+3,?___flsub+3
 25034  0156F8  0012               	return	
 25035  0156FA                     __end_of___flsub:
 25036                           	opt stack 0
 25037                           tosu	equ	0xFFF
 25038                           tosh	equ	0xFFE
 25039                           tosl	equ	0xFFD
 25040                           pclath	equ	0xFFA
 25041                           tblptru	equ	0xFF8
 25042                           tblptrh	equ	0xFF7
 25043                           tblptrl	equ	0xFF6
 25044                           tablat	equ	0xFF5
 25045                           prodh	equ	0xFF4
 25046                           prodl	equ	0xFF3
 25047                           intcon	equ	0xFF2
 25048                           indf0	equ	0xFEF
 25049                           postinc0	equ	0xFEE
 25050                           fsr0h	equ	0xFEA
 25051                           fsr0l	equ	0xFE9
 25052                           wreg	equ	0xFE8
 25053                           indf1	equ	0xFE7
 25054                           postdec1	equ	0xFE5
 25055                           fsr1h	equ	0xFE2
 25056                           fsr1l	equ	0xFE1
 25057                           indf2	equ	0xFDF
 25058                           postinc2	equ	0xFDE
 25059                           postdec2	equ	0xFDD
 25060                           plusw2	equ	0xFDB
 25061                           fsr2h	equ	0xFDA
 25062                           fsr2l	equ	0xFD9
 25063                           status	equ	0xFD8
 25064                           
 25065 ;; *************** function ___fladd *****************
 25066 ;; Defined at:
 25067 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
 25068 ;; Parameters:    Size  Location     Type
 25069 ;;  b               4   43[BANK0 ] unsigned char 
 25070 ;;  a               4   47[BANK0 ] unsigned char 
 25071 ;; Auto vars:     Size  Location     Type
 25072 ;;  grs             1   62[BANK0 ] unsigned char 
 25073 ;;  bexp            1   61[BANK0 ] unsigned char 
 25074 ;;  aexp            1   60[BANK0 ] unsigned char 
 25075 ;;  signs           1   59[BANK0 ] unsigned char 
 25076 ;; Return value:  Size  Location     Type
 25077 ;;                  4   43[BANK0 ] unsigned char 
 25078 ;; Registers used:
 25079 ;;		wreg, status,2, status,0
 25080 ;; Tracked objects:
 25081 ;;		On entry : 0/0
 25082 ;;		On exit  : 0/0
 25083 ;;		Unchanged: 0/0
 25084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25085 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25086 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25087 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25088 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25089 ;;Total ram usage:       20 bytes
 25090 ;; Hardware stack levels used:    1
 25091 ;; Hardware stack levels required when called:    7
 25092 ;; This function calls:
 25093 ;;		Nothing
 25094 ;; This function is called by:
 25095 ;;		_ADCAverage
 25096 ;;		___flsub
 25097 ;;		_floor
 25098 ;;		_log
 25099 ;;		_eval_poly
 25100 ;; This function uses a non-reentrant model
 25101 ;;
 25102                           
 25103                           	psect	text135
 25104  010E8C                     __ptext135:
 25105                           	opt stack 0
 25106  010E8C                     ___fladd:
 25107                           	opt stack 18
 25108                           
 25109                           ;incstack = 0
 25110  010E8C  0100               	movlb	0	; () banked
 25111  010E8E  518E               	movf	(___fladd@b+3)& (0+255),w,b
 25112  010E90  0B80               	andlw	128
 25113  010E92  6F9B               	movwf	___fladd@signs& (0+255),b
 25114  010E94  518E               	movf	(___fladd@b+3)& (0+255),w,b
 25115  010E96  258E               	addwf	(___fladd@b+3)& (0+255),w,b
 25116  010E98  6F9D               	movwf	___fladd@bexp& (0+255),b
 25117                           
 25118                           ; BSR set to: 0
 25119  010E9A  BF8D               	btfsc	(___fladd@b+2)& (0+255),7,b
 25120                           
 25121                           ; BSR set to: 0
 25122  010E9C  819D               	bsf	___fladd@bexp& (0+255),0,b
 25123                           
 25124                           ; BSR set to: 0
 25125                           
 25126                           ; BSR set to: 0
 25127  010E9E  519D               	movf	___fladd@bexp& (0+255),w,b
 25128  010EA0  B4D8               	btfsc	status,2,c
 25129  010EA2  D00D               	goto	l2752
 25130                           
 25131                           ; BSR set to: 0
 25132  010EA4  299D               	incf	___fladd@bexp& (0+255),w,b
 25133  010EA6  A4D8               	btfss	status,2,c
 25134  010EA8  D008               	goto	l2753
 25135                           
 25136                           ; BSR set to: 0
 25137  010EAA  0E00               	movlw	0
 25138  010EAC  6F8B               	movwf	___fladd@b& (0+255),b
 25139  010EAE  0E00               	movlw	0
 25140  010EB0  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25141  010EB2  0E00               	movlw	0
 25142  010EB4  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25143  010EB6  0E00               	movlw	0
 25144  010EB8  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25145  010EBA                     l2753:
 25146                           
 25147                           ; BSR set to: 0
 25148                           
 25149                           ; BSR set to: 0
 25150  010EBA  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 25151  010EBC  D006               	goto	L12
 25152  010EBE                     l2752:
 25153                           
 25154                           ; BSR set to: 0
 25155                           
 25156                           ; BSR set to: 0
 25157  010EBE  0E00               	movlw	0
 25158  010EC0  6F8B               	movwf	___fladd@b& (0+255),b
 25159  010EC2  0E00               	movlw	0
 25160  010EC4  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25161  010EC6  0E00               	movlw	0
 25162  010EC8  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25163  010ECA                     L12:
 25164  010ECA  0E00               	movlw	0
 25165  010ECC  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25166                           
 25167                           ; BSR set to: 0
 25168                           
 25169                           ; BSR set to: 0
 25170  010ECE  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25171  010ED0  0B80               	andlw	128
 25172  010ED2  6F9C               	movwf	___fladd@aexp& (0+255),b
 25173                           
 25174                           ; BSR set to: 0
 25175  010ED4  519B               	movf	___fladd@signs& (0+255),w,b
 25176  010ED6  199C               	xorwf	___fladd@aexp& (0+255),w,b
 25177  010ED8  A4D8               	btfss	status,2,c
 25178                           
 25179                           ; BSR set to: 0
 25180  010EDA  8D9B               	bsf	___fladd@signs& (0+255),6,b
 25181                           
 25182                           ; BSR set to: 0
 25183                           
 25184                           ; BSR set to: 0
 25185  010EDC  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25186  010EDE  2592               	addwf	(___fladd@a+3)& (0+255),w,b
 25187  010EE0  6F9C               	movwf	___fladd@aexp& (0+255),b
 25188                           
 25189                           ; BSR set to: 0
 25190  010EE2  BF91               	btfsc	(___fladd@a+2)& (0+255),7,b
 25191                           
 25192                           ; BSR set to: 0
 25193  010EE4  819C               	bsf	___fladd@aexp& (0+255),0,b
 25194                           
 25195                           ; BSR set to: 0
 25196                           
 25197                           ; BSR set to: 0
 25198  010EE6  519C               	movf	___fladd@aexp& (0+255),w,b
 25199  010EE8  B4D8               	btfsc	status,2,c
 25200  010EEA  D00D               	goto	l2757
 25201                           
 25202                           ; BSR set to: 0
 25203  010EEC  299C               	incf	___fladd@aexp& (0+255),w,b
 25204  010EEE  A4D8               	btfss	status,2,c
 25205  010EF0  D008               	goto	l2758
 25206                           
 25207                           ; BSR set to: 0
 25208  010EF2  0E00               	movlw	0
 25209  010EF4  6F8F               	movwf	___fladd@a& (0+255),b
 25210  010EF6  0E00               	movlw	0
 25211  010EF8  6F90               	movwf	(___fladd@a+1)& (0+255),b
 25212  010EFA  0E00               	movlw	0
 25213  010EFC  6F91               	movwf	(___fladd@a+2)& (0+255),b
 25214  010EFE  0E00               	movlw	0
 25215  010F00  6F92               	movwf	(___fladd@a+3)& (0+255),b
 25216  010F02                     l2758:
 25217                           
 25218                           ; BSR set to: 0
 25219                           
 25220                           ; BSR set to: 0
 25221  010F02  8F91               	bsf	(___fladd@a+2)& (0+255),7,b
 25222  010F04  D006               	goto	L13
 25223  010F06                     l2757:
 25224                           
 25225                           ; BSR set to: 0
 25226                           
 25227                           ; BSR set to: 0
 25228  010F06  0E00               	movlw	0
 25229  010F08  6F8F               	movwf	___fladd@a& (0+255),b
 25230  010F0A  0E00               	movlw	0
 25231  010F0C  6F90               	movwf	(___fladd@a+1)& (0+255),b
 25232  010F0E  0E00               	movlw	0
 25233  010F10  6F91               	movwf	(___fladd@a+2)& (0+255),b
 25234  010F12                     L13:
 25235  010F12  0E00               	movlw	0
 25236  010F14  6F92               	movwf	(___fladd@a+3)& (0+255),b
 25237                           
 25238                           ; BSR set to: 0
 25239                           
 25240                           ; BSR set to: 0
 25241  010F16  519D               	movf	___fladd@bexp& (0+255),w,b
 25242  010F18  5D9C               	subwf	___fladd@aexp& (0+255),w,b
 25243  010F1A  B0D8               	btfsc	status,0,c
 25244  010F1C  D022               	goto	l2760
 25245                           
 25246                           ; BSR set to: 0
 25247  010F1E  AD9B               	btfss	___fladd@signs& (0+255),6,b
 25248  010F20  D002               	goto	l2761
 25249                           
 25250                           ; BSR set to: 0
 25251  010F22  0E80               	movlw	128
 25252  010F24  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 25253  010F26                     l2761:
 25254                           
 25255                           ; BSR set to: 0
 25256                           
 25257                           ; BSR set to: 0
 25258  010F26  C09D  F09E         	movff	___fladd@bexp,___fladd@grs
 25259                           
 25260                           ; BSR set to: 0
 25261  010F2A  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 25262                           
 25263                           ; BSR set to: 0
 25264  010F2E  C09E  F09C         	movff	___fladd@grs,___fladd@aexp
 25265                           
 25266                           ; BSR set to: 0
 25267  010F32  C08B  F09E         	movff	___fladd@b,___fladd@grs
 25268                           
 25269                           ; BSR set to: 0
 25270  010F36  C08F  F08B         	movff	___fladd@a,___fladd@b
 25271                           
 25272                           ; BSR set to: 0
 25273  010F3A  C09E  F08F         	movff	___fladd@grs,___fladd@a
 25274                           
 25275                           ; BSR set to: 0
 25276  010F3E  C08C  F09E         	movff	___fladd@b+1,___fladd@grs
 25277                           
 25278                           ; BSR set to: 0
 25279  010F42  C090  F08C         	movff	___fladd@a+1,___fladd@b+1
 25280                           
 25281                           ; BSR set to: 0
 25282  010F46  C09E  F090         	movff	___fladd@grs,___fladd@a+1
 25283                           
 25284                           ; BSR set to: 0
 25285  010F4A  C08D  F09E         	movff	___fladd@b+2,___fladd@grs
 25286                           
 25287                           ; BSR set to: 0
 25288  010F4E  C091  F08D         	movff	___fladd@a+2,___fladd@b+2
 25289                           
 25290                           ; BSR set to: 0
 25291  010F52  C09E  F091         	movff	___fladd@grs,___fladd@a+2
 25292                           
 25293                           ; BSR set to: 0
 25294  010F56  C08E  F09E         	movff	___fladd@b+3,___fladd@grs
 25295                           
 25296                           ; BSR set to: 0
 25297  010F5A  C092  F08E         	movff	___fladd@a+3,___fladd@b+3
 25298                           
 25299                           ; BSR set to: 0
 25300  010F5E  C09E  F092         	movff	___fladd@grs,___fladd@a+3
 25301  010F62                     l2760:
 25302                           
 25303                           ; BSR set to: 0
 25304                           
 25305                           ; BSR set to: 0
 25306  010F62  0E00               	movlw	0
 25307  010F64  6F9E               	movwf	___fladd@grs& (0+255),b
 25308                           
 25309                           ; BSR set to: 0
 25310  010F66  519D               	movf	___fladd@bexp& (0+255),w,b
 25311  010F68  6F93               	movwf	??___fladd& (0+255),b
 25312  010F6A  6B94               	clrf	(??___fladd+1)& (0+255),b
 25313  010F6C  1F93               	comf	??___fladd& (0+255),f,b
 25314  010F6E  1F94               	comf	(??___fladd+1)& (0+255),f,b
 25315  010F70  4B93               	infsnz	??___fladd& (0+255),f,b
 25316  010F72  2B94               	incf	(??___fladd+1)& (0+255),f,b
 25317  010F74  519C               	movf	___fladd@aexp& (0+255),w,b
 25318  010F76  6F95               	movwf	(??___fladd+2)& (0+255),b
 25319  010F78  6B96               	clrf	(??___fladd+3)& (0+255),b
 25320  010F7A  5193               	movf	??___fladd& (0+255),w,b
 25321  010F7C  2795               	addwf	(??___fladd+2)& (0+255),f,b
 25322  010F7E  5194               	movf	(??___fladd+1)& (0+255),w,b
 25323  010F80  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 25324  010F82  BF96               	btfsc	(??___fladd+3)& (0+255),7,b
 25325  010F84  D02C               	goto	l2764
 25326  010F86  5196               	movf	(??___fladd+3)& (0+255),w,b
 25327  010F88  E104               	bnz	u9820
 25328  010F8A  0E1A               	movlw	26
 25329  010F8C  5D95               	subwf	(??___fladd+2)& (0+255),w,b
 25330  010F8E  A0D8               	btfss	status,0,c
 25331  010F90  D026               	goto	l2764
 25332  010F92                     u9820:
 25333                           
 25334                           ; BSR set to: 0
 25335  010F92  518B               	movf	___fladd@b& (0+255),w,b
 25336  010F94  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 25337  010F96  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 25338  010F98  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 25339  010F9A  B4D8               	btfsc	status,2,c
 25340  010F9C  D002               	goto	u9830
 25341  010F9E  0E01               	movlw	1
 25342  010FA0  D001               	goto	u9840
 25343  010FA2                     u9830:
 25344  010FA2  0E00               	movlw	0
 25345  010FA4                     u9840:
 25346  010FA4  6F9E               	movwf	___fladd@grs& (0+255),b
 25347                           
 25348                           ; BSR set to: 0
 25349  010FA6  0E00               	movlw	0
 25350  010FA8  6F8B               	movwf	___fladd@b& (0+255),b
 25351  010FAA  0E00               	movlw	0
 25352  010FAC  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25353  010FAE  0E00               	movlw	0
 25354  010FB0  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25355  010FB2  0E00               	movlw	0
 25356  010FB4  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25357                           
 25358                           ; BSR set to: 0
 25359  010FB6  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 25360  010FBA  D015               	goto	u9870
 25361  010FBC                     l2765:
 25362                           
 25363                           ; BSR set to: 0
 25364  010FBC  A19E               	btfss	___fladd@grs& (0+255),0,b
 25365  010FBE  D005               	goto	l2766
 25366                           
 25367                           ; BSR set to: 0
 25368  010FC0  90D8               	bcf	status,0,c
 25369  010FC2  319E               	rrcf	___fladd@grs& (0+255),w,b
 25370  010FC4  0901               	iorlw	1
 25371  010FC6  6F9E               	movwf	___fladd@grs& (0+255),b
 25372  010FC8  D002               	goto	l2767
 25373  010FCA                     l2766:
 25374                           
 25375                           ; BSR set to: 0
 25376                           
 25377                           ; BSR set to: 0
 25378  010FCA  90D8               	bcf	status,0,c
 25379  010FCC  339E               	rrcf	___fladd@grs& (0+255),f,b
 25380  010FCE                     l2767:
 25381                           
 25382                           ; BSR set to: 0
 25383                           
 25384                           ; BSR set to: 0
 25385  010FCE  B18B               	btfsc	___fladd@b& (0+255),0,b
 25386                           
 25387                           ; BSR set to: 0
 25388  010FD0  8F9E               	bsf	___fladd@grs& (0+255),7,b
 25389                           
 25390                           ; BSR set to: 0
 25391                           
 25392                           ; BSR set to: 0
 25393  010FD2  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 25394  010FD4  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 25395  010FD6  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 25396  010FD8  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 25397  010FDA  338B               	rrcf	___fladd@b& (0+255),f,b
 25398                           
 25399                           ; BSR set to: 0
 25400  010FDC  2B9D               	incf	___fladd@bexp& (0+255),f,b
 25401  010FDE                     l2764:
 25402                           
 25403                           ; BSR set to: 0
 25404  010FDE  519C               	movf	___fladd@aexp& (0+255),w,b
 25405  010FE0  5D9D               	subwf	___fladd@bexp& (0+255),w,b
 25406  010FE2  A0D8               	btfss	status,0,c
 25407  010FE4  D7EB               	goto	l2765
 25408  010FE6                     u9870:
 25409                           
 25410                           ; BSR set to: 0
 25411                           
 25412                           ; BSR set to: 0
 25413  010FE6  BD9B               	btfsc	___fladd@signs& (0+255),6,b
 25414  010FE8  D029               	goto	l2770
 25415                           
 25416                           ; BSR set to: 0
 25417  010FEA  519D               	movf	___fladd@bexp& (0+255),w,b
 25418  010FEC  A4D8               	btfss	status,2,c
 25419  010FEE  D009               	goto	l2771
 25420                           
 25421                           ; BSR set to: 0
 25422  010FF0  0E00               	movlw	0
 25423  010FF2  6F8B               	movwf	?___fladd& (0+255),b
 25424  010FF4  0E00               	movlw	0
 25425  010FF6  6F8C               	movwf	(?___fladd+1)& (0+255),b
 25426  010FF8  0E00               	movlw	0
 25427  010FFA  6F8D               	movwf	(?___fladd+2)& (0+255),b
 25428  010FFC  0E00               	movlw	0
 25429  010FFE  6F8E               	movwf	(?___fladd+3)& (0+255),b
 25430                           
 25431                           ; BSR set to: 0
 25432  011000  0012               	return	
 25433  011002                     l2771:
 25434                           
 25435                           ; BSR set to: 0
 25436                           
 25437                           ; BSR set to: 0
 25438  011002  518F               	movf	___fladd@a& (0+255),w,b
 25439  011004  278B               	addwf	___fladd@b& (0+255),f,b
 25440  011006  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25441  011008  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 25442  01100A  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25443  01100C  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 25444  01100E  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25445  011010  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 25446                           
 25447                           ; BSR set to: 0
 25448  011012  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 25449  011014  D083               	goto	u10000
 25450                           
 25451                           ; BSR set to: 0
 25452  011016  A19E               	btfss	___fladd@grs& (0+255),0,b
 25453  011018  D006               	goto	l2774
 25454                           
 25455                           ; BSR set to: 0
 25456  01101A  90D8               	bcf	status,0,c
 25457  01101C  339E               	rrcf	___fladd@grs& (0+255),f,b
 25458  01101E  519E               	movf	___fladd@grs& (0+255),w,b
 25459  011020  0901               	iorlw	1
 25460  011022  6F9E               	movwf	___fladd@grs& (0+255),b
 25461  011024  D002               	goto	l2775
 25462  011026                     l2774:
 25463                           
 25464                           ; BSR set to: 0
 25465                           
 25466                           ; BSR set to: 0
 25467  011026  90D8               	bcf	status,0,c
 25468  011028  339E               	rrcf	___fladd@grs& (0+255),f,b
 25469  01102A                     l2775:
 25470                           
 25471                           ; BSR set to: 0
 25472                           
 25473                           ; BSR set to: 0
 25474  01102A  B18B               	btfsc	___fladd@b& (0+255),0,b
 25475                           
 25476                           ; BSR set to: 0
 25477  01102C  8F9E               	bsf	___fladd@grs& (0+255),7,b
 25478                           
 25479                           ; BSR set to: 0
 25480                           
 25481                           ; BSR set to: 0
 25482  01102E  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 25483  011030  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 25484  011032  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 25485  011034  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 25486  011036  338B               	rrcf	___fladd@b& (0+255),f,b
 25487                           
 25488                           ; BSR set to: 0
 25489  011038  2B9D               	incf	___fladd@bexp& (0+255),f,b
 25490                           
 25491                           ; BSR set to: 0
 25492  01103A  D070               	goto	u10000
 25493  01103C                     l2770:
 25494                           
 25495                           ; BSR set to: 0
 25496                           
 25497                           ; BSR set to: 0
 25498  01103C  518F               	movf	___fladd@a& (0+255),w,b
 25499  01103E  5D8B               	subwf	___fladd@b& (0+255),w,b
 25500  011040  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25501  011042  598C               	subwfb	(___fladd@b+1)& (0+255),w,b
 25502  011044  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25503  011046  598D               	subwfb	(___fladd@b+2)& (0+255),w,b
 25504  011048  518E               	movf	(___fladd@b+3)& (0+255),w,b
 25505  01104A  0A80               	xorlw	128
 25506  01104C  6F93               	movwf	??___fladd& (0+255),b
 25507  01104E  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25508  011050  0A80               	xorlw	128
 25509  011052  5993               	subwfb	??___fladd& (0+255),w,b
 25510  011054  B0D8               	btfsc	status,0,c
 25511  011056  D036               	goto	l2778
 25512                           
 25513                           ; BSR set to: 0
 25514  011058  C08B  F093         	movff	___fladd@b,??___fladd
 25515  01105C  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 25516  011060  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 25517  011064  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 25518  011068  1F93               	comf	??___fladd& (0+255),f,b
 25519  01106A  1F94               	comf	(??___fladd+1)& (0+255),f,b
 25520  01106C  1F95               	comf	(??___fladd+2)& (0+255),f,b
 25521  01106E  1F96               	comf	(??___fladd+3)& (0+255),f,b
 25522  011070  2B93               	incf	??___fladd& (0+255),f,b
 25523  011072  0E00               	movlw	0
 25524  011074  2394               	addwfc	(??___fladd+1)& (0+255),f,b
 25525  011076  2395               	addwfc	(??___fladd+2)& (0+255),f,b
 25526  011078  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 25527  01107A  518F               	movf	___fladd@a& (0+255),w,b
 25528  01107C  2593               	addwf	??___fladd& (0+255),w,b
 25529  01107E  6F97               	movwf	(??___fladd+4)& (0+255),b
 25530  011080  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25531  011082  2194               	addwfc	(??___fladd+1)& (0+255),w,b
 25532  011084  6F98               	movwf	(??___fladd+5)& (0+255),b
 25533  011086  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25534  011088  2195               	addwfc	(??___fladd+2)& (0+255),w,b
 25535  01108A  6F99               	movwf	(??___fladd+6)& (0+255),b
 25536  01108C  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25537  01108E  2196               	addwfc	(??___fladd+3)& (0+255),w,b
 25538  011090  6F9A               	movwf	(??___fladd+7)& (0+255),b
 25539  011092  0EFF               	movlw	255
 25540  011094  2597               	addwf	(??___fladd+4)& (0+255),w,b
 25541  011096  6F8B               	movwf	___fladd@b& (0+255),b
 25542  011098  0EFF               	movlw	255
 25543  01109A  2198               	addwfc	(??___fladd+5)& (0+255),w,b
 25544  01109C  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25545  01109E  0EFF               	movlw	255
 25546  0110A0  2199               	addwfc	(??___fladd+6)& (0+255),w,b
 25547  0110A2  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25548  0110A4  0EFF               	movlw	255
 25549  0110A6  219A               	addwfc	(??___fladd+7)& (0+255),w,b
 25550  0110A8  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25551  0110AA  0E80               	movlw	128
 25552  0110AC  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 25553                           
 25554                           ; BSR set to: 0
 25555  0110AE  6D9E               	negf	___fladd@grs& (0+255),b
 25556                           
 25557                           ; BSR set to: 0
 25558  0110B0  519E               	movf	___fladd@grs& (0+255),w,b
 25559  0110B2  A4D8               	btfss	status,2,c
 25560  0110B4  D00F               	goto	l2780
 25561                           
 25562                           ; BSR set to: 0
 25563  0110B6  0E01               	movlw	1
 25564  0110B8  278B               	addwf	___fladd@b& (0+255),f,b
 25565  0110BA  0E00               	movlw	0
 25566  0110BC  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 25567  0110BE  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 25568  0110C0  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 25569                           
 25570                           ; BSR set to: 0
 25571  0110C2  D008               	goto	l2780
 25572  0110C4                     l2778:
 25573                           
 25574                           ; BSR set to: 0
 25575                           
 25576                           ; BSR set to: 0
 25577  0110C4  518F               	movf	___fladd@a& (0+255),w,b
 25578  0110C6  5F8B               	subwf	___fladd@b& (0+255),f,b
 25579  0110C8  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25580  0110CA  5B8C               	subwfb	(___fladd@b+1)& (0+255),f,b
 25581  0110CC  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25582  0110CE  5B8D               	subwfb	(___fladd@b+2)& (0+255),f,b
 25583  0110D0  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25584  0110D2  5B8E               	subwfb	(___fladd@b+3)& (0+255),f,b
 25585  0110D4                     l2780:
 25586                           
 25587                           ; BSR set to: 0
 25588  0110D4  518B               	movf	___fladd@b& (0+255),w,b
 25589  0110D6  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 25590  0110D8  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 25591  0110DA  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 25592  0110DC  A4D8               	btfss	status,2,c
 25593  0110DE  D01C               	goto	l2787
 25594                           
 25595                           ; BSR set to: 0
 25596  0110E0  519E               	movf	___fladd@grs& (0+255),w,b
 25597  0110E2  A4D8               	btfss	status,2,c
 25598  0110E4  D019               	goto	l2787
 25599                           
 25600                           ; BSR set to: 0
 25601  0110E6  0E00               	movlw	0
 25602  0110E8  6F8B               	movwf	?___fladd& (0+255),b
 25603  0110EA  0E00               	movlw	0
 25604  0110EC  6F8C               	movwf	(?___fladd+1)& (0+255),b
 25605  0110EE  0E00               	movlw	0
 25606  0110F0  6F8D               	movwf	(?___fladd+2)& (0+255),b
 25607  0110F2  0E00               	movlw	0
 25608  0110F4  6F8E               	movwf	(?___fladd+3)& (0+255),b
 25609                           
 25610                           ; BSR set to: 0
 25611  0110F6  0012               	return	
 25612  0110F8                     
 25613                           ; BSR set to: 0
 25614                           
 25615                           ; BSR set to: 0
 25616  0110F8  90D8               	bcf	status,0,c
 25617  0110FA  378B               	rlcf	___fladd@b& (0+255),f,b
 25618  0110FC  378C               	rlcf	(___fladd@b+1)& (0+255),f,b
 25619  0110FE  378D               	rlcf	(___fladd@b+2)& (0+255),f,b
 25620  011100  378E               	rlcf	(___fladd@b+3)& (0+255),f,b
 25621                           
 25622                           ; BSR set to: 0
 25623  011102  BF9E               	btfsc	___fladd@grs& (0+255),7,b
 25624                           
 25625                           ; BSR set to: 0
 25626  011104  818B               	bsf	___fladd@b& (0+255),0,b
 25627                           
 25628                           ; BSR set to: 0
 25629                           
 25630                           ; BSR set to: 0
 25631  011106  A19E               	btfss	___fladd@grs& (0+255),0,b
 25632  011108  D002               	goto	l2785
 25633                           
 25634                           ; BSR set to: 0
 25635  01110A  80D8               	bsf	status,0,c
 25636  01110C  D001               	goto	L14
 25637  01110E                     l2785:
 25638                           
 25639                           ; BSR set to: 0
 25640                           
 25641                           ; BSR set to: 0
 25642  01110E  90D8               	bcf	status,0,c
 25643  011110                     L14:
 25644  011110  379E               	rlcf	___fladd@grs& (0+255),f,b
 25645                           
 25646                           ; BSR set to: 0
 25647                           
 25648                           ; BSR set to: 0
 25649  011112  519D               	movf	___fladd@bexp& (0+255),w,b
 25650  011114  A4D8               	btfss	status,2,c
 25651                           
 25652                           ; BSR set to: 0
 25653  011116  079D               	decf	___fladd@bexp& (0+255),f,b
 25654  011118                     l2787:
 25655                           
 25656                           ; BSR set to: 0
 25657                           
 25658                           ; BSR set to: 0
 25659                           
 25660                           ; BSR set to: 0
 25661  011118  AF8D               	btfss	(___fladd@b+2)& (0+255),7,b
 25662  01111A  D7EE               	goto	l2783
 25663  01111C                     u10000:
 25664                           
 25665                           ; BSR set to: 0
 25666                           
 25667                           ; BSR set to: 0
 25668                           
 25669                           ; BSR set to: 0
 25670  01111C  0E00               	movlw	0
 25671  01111E  6F9C               	movwf	___fladd@aexp& (0+255),b
 25672                           
 25673                           ; BSR set to: 0
 25674  011120  AF9E               	btfss	___fladd@grs& (0+255),7,b
 25675  011122  D00A               	goto	l2792
 25676                           
 25677                           ; BSR set to: 0
 25678  011124  C09E  F093         	movff	___fladd@grs,??___fladd
 25679  011128  0E7F               	movlw	127
 25680  01112A  1793               	andwf	??___fladd& (0+255),f,b
 25681  01112C  A4D8               	btfss	status,2,c
 25682  01112E  D002               	goto	u10030
 25683                           
 25684                           ; BSR set to: 0
 25685                           
 25686                           ; BSR set to: 0
 25687  011130  A18B               	btfss	___fladd@b& (0+255),0,b
 25688  011132  D002               	goto	l2792
 25689  011134                     u10030:
 25690                           
 25691                           ; BSR set to: 0
 25692  011134  0E01               	movlw	1
 25693  011136  6F9C               	movwf	___fladd@aexp& (0+255),b
 25694  011138                     l2792:
 25695                           
 25696                           ; BSR set to: 0
 25697                           
 25698                           ; BSR set to: 0
 25699                           
 25700                           ; BSR set to: 0
 25701  011138  519C               	movf	___fladd@aexp& (0+255),w,b
 25702  01113A  B4D8               	btfsc	status,2,c
 25703  01113C  D020               	goto	l2795
 25704                           
 25705                           ; BSR set to: 0
 25706  01113E  0E01               	movlw	1
 25707  011140  278B               	addwf	___fladd@b& (0+255),f,b
 25708  011142  0E00               	movlw	0
 25709  011144  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 25710  011146  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 25711  011148  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 25712                           
 25713                           ; BSR set to: 0
 25714  01114A  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 25715  01114C  D018               	goto	l2795
 25716                           
 25717                           ; BSR set to: 0
 25718  01114E  C08B  F093         	movff	___fladd@b,??___fladd
 25719  011152  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 25720  011156  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 25721  01115A  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 25722  01115E  3596               	rlcf	(??___fladd+3)& (0+255),w,b
 25723  011160  3396               	rrcf	(??___fladd+3)& (0+255),f,b
 25724  011162  3395               	rrcf	(??___fladd+2)& (0+255),f,b
 25725  011164  3394               	rrcf	(??___fladd+1)& (0+255),f,b
 25726  011166  3393               	rrcf	??___fladd& (0+255),f,b
 25727  011168  C093  F08B         	movff	??___fladd,___fladd@b
 25728  01116C  C094  F08C         	movff	??___fladd+1,___fladd@b+1
 25729  011170  C095  F08D         	movff	??___fladd+2,___fladd@b+2
 25730  011174  C096  F08E         	movff	??___fladd+3,___fladd@b+3
 25731  011178  299D               	incf	___fladd@bexp& (0+255),w,b
 25732  01117A  A4D8               	btfss	status,2,c
 25733                           
 25734                           ; BSR set to: 0
 25735  01117C  2B9D               	incf	___fladd@bexp& (0+255),f,b
 25736  01117E                     l2795:
 25737                           
 25738                           ; BSR set to: 0
 25739                           
 25740                           ; BSR set to: 0
 25741                           
 25742                           ; BSR set to: 0
 25743                           
 25744                           ; BSR set to: 0
 25745  01117E  299D               	incf	___fladd@bexp& (0+255),w,b
 25746  011180  B4D8               	btfsc	status,2,c
 25747  011182  D003               	goto	u10080
 25748                           
 25749                           ; BSR set to: 0
 25750  011184  519D               	movf	___fladd@bexp& (0+255),w,b
 25751  011186  A4D8               	btfss	status,2,c
 25752  011188  D00D               	goto	l2799
 25753  01118A                     u10080:
 25754                           
 25755                           ; BSR set to: 0
 25756                           
 25757                           ; BSR set to: 0
 25758  01118A  0E00               	movlw	0
 25759  01118C  6F8B               	movwf	___fladd@b& (0+255),b
 25760  01118E  0E00               	movlw	0
 25761  011190  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25762  011192  0E00               	movlw	0
 25763  011194  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25764  011196  0E00               	movlw	0
 25765  011198  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25766  01119A  519D               	movf	___fladd@bexp& (0+255),w,b
 25767  01119C  A4D8               	btfss	status,2,c
 25768  01119E  D002               	goto	l2799
 25769                           
 25770                           ; BSR set to: 0
 25771  0111A0  0E00               	movlw	0
 25772  0111A2  6F9B               	movwf	___fladd@signs& (0+255),b
 25773  0111A4                     l2799:
 25774                           
 25775                           ; BSR set to: 0
 25776                           
 25777                           ; BSR set to: 0
 25778                           
 25779                           ; BSR set to: 0
 25780  0111A4  A19D               	btfss	___fladd@bexp& (0+255),0,b
 25781  0111A6  D002               	goto	l2800
 25782                           
 25783                           ; BSR set to: 0
 25784  0111A8  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 25785  0111AA  D001               	goto	l2801
 25786  0111AC                     l2800:
 25787                           
 25788                           ; BSR set to: 0
 25789                           
 25790                           ; BSR set to: 0
 25791  0111AC  9F8D               	bcf	(___fladd@b+2)& (0+255),7,b
 25792  0111AE                     l2801:
 25793                           
 25794                           ; BSR set to: 0
 25795                           
 25796                           ; BSR set to: 0
 25797  0111AE  90D8               	bcf	status,0,c
 25798  0111B0  319D               	rrcf	___fladd@bexp& (0+255),w,b
 25799  0111B2  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25800                           
 25801                           ; BSR set to: 0
 25802  0111B4  BF9B               	btfsc	___fladd@signs& (0+255),7,b
 25803                           
 25804                           ; BSR set to: 0
 25805  0111B6  8F8E               	bsf	(___fladd@b+3)& (0+255),7,b
 25806                           
 25807                           ; BSR set to: 0
 25808                           
 25809                           ; BSR set to: 0
 25810  0111B8  C08B  F08B         	movff	___fladd@b,?___fladd
 25811  0111BC  C08C  F08C         	movff	___fladd@b+1,?___fladd+1
 25812  0111C0  C08D  F08D         	movff	___fladd@b+2,?___fladd+2
 25813  0111C4  C08E  F08E         	movff	___fladd@b+3,?___fladd+3
 25814  0111C8  0012               	return	
 25815  0111CA                     __end_of___fladd:
 25816                           	opt stack 0
 25817                           tosu	equ	0xFFF
 25818                           tosh	equ	0xFFE
 25819                           tosl	equ	0xFFD
 25820                           pclath	equ	0xFFA
 25821                           tblptru	equ	0xFF8
 25822                           tblptrh	equ	0xFF7
 25823                           tblptrl	equ	0xFF6
 25824                           tablat	equ	0xFF5
 25825                           prodh	equ	0xFF4
 25826                           prodl	equ	0xFF3
 25827                           intcon	equ	0xFF2
 25828                           indf0	equ	0xFEF
 25829                           postinc0	equ	0xFEE
 25830                           fsr0h	equ	0xFEA
 25831                           fsr0l	equ	0xFE9
 25832                           wreg	equ	0xFE8
 25833                           indf1	equ	0xFE7
 25834                           postdec1	equ	0xFE5
 25835                           fsr1h	equ	0xFE2
 25836                           fsr1l	equ	0xFE1
 25837                           indf2	equ	0xFDF
 25838                           postinc2	equ	0xFDE
 25839                           postdec2	equ	0xFDD
 25840                           plusw2	equ	0xFDB
 25841                           fsr2h	equ	0xFDA
 25842                           fsr2l	equ	0xFD9
 25843                           status	equ	0xFD8
 25844                           
 25845 ;; *************** function ___flneg *****************
 25846 ;; Defined at:
 25847 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
 25848 ;; Parameters:    Size  Location     Type
 25849 ;;  f1              4   39[BANK0 ] unsigned char 
 25850 ;; Auto vars:     Size  Location     Type
 25851 ;;		None
 25852 ;; Return value:  Size  Location     Type
 25853 ;;                  4   39[BANK0 ] unsigned char 
 25854 ;; Registers used:
 25855 ;;		wreg, status,2, status,0
 25856 ;; Tracked objects:
 25857 ;;		On entry : 0/0
 25858 ;;		On exit  : 0/0
 25859 ;;		Unchanged: 0/0
 25860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25861 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25864 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25865 ;;Total ram usage:        4 bytes
 25866 ;; Hardware stack levels used:    1
 25867 ;; Hardware stack levels required when called:    7
 25868 ;; This function calls:
 25869 ;;		Nothing
 25870 ;; This function is called by:
 25871 ;;		_ADCAverage
 25872 ;;		_pow
 25873 ;;		_exp
 25874 ;; This function uses a non-reentrant model
 25875 ;;
 25876                           
 25877                           	psect	text136
 25878  015BBE                     __ptext136:
 25879                           	opt stack 0
 25880  015BBE                     ___flneg:
 25881                           	opt stack 19
 25882                           
 25883                           ; BSR set to: 0
 25884                           ;incstack = 0
 25885  015BBE  0100               	movlb	0	; () banked
 25886  015BC0  5187               	movf	___flneg@f1& (0+255),w,b
 25887  015BC2  1188               	iorwf	(___flneg@f1+1)& (0+255),w,b
 25888  015BC4  1189               	iorwf	(___flneg@f1+2)& (0+255),w,b
 25889  015BC6  118A               	iorwf	(___flneg@f1+3)& (0+255),w,b
 25890  015BC8  B4D8               	btfsc	status,2,c
 25891  015BCA  D008               	goto	l2515
 25892                           
 25893                           ; BSR set to: 0
 25894  015BCC  0E00               	movlw	0
 25895  015BCE  1B87               	xorwf	___flneg@f1& (0+255),f,b
 25896  015BD0  0E00               	movlw	0
 25897  015BD2  1B88               	xorwf	(___flneg@f1+1)& (0+255),f,b
 25898  015BD4  0E00               	movlw	0
 25899  015BD6  1B89               	xorwf	(___flneg@f1+2)& (0+255),f,b
 25900  015BD8  0E80               	movlw	128
 25901  015BDA  1B8A               	xorwf	(___flneg@f1+3)& (0+255),f,b
 25902  015BDC                     l2515:
 25903                           
 25904                           ; BSR set to: 0
 25905                           
 25906                           ; BSR set to: 0
 25907  015BDC  C087  F087         	movff	___flneg@f1,?___flneg
 25908  015BE0  C088  F088         	movff	___flneg@f1+1,?___flneg+1
 25909  015BE4  C089  F089         	movff	___flneg@f1+2,?___flneg+2
 25910  015BE8  C08A  F08A         	movff	___flneg@f1+3,?___flneg+3
 25911  015BEC  0012               	return	
 25912  015BEE                     __end_of___flneg:
 25913                           	opt stack 0
 25914                           tosu	equ	0xFFF
 25915                           tosh	equ	0xFFE
 25916                           tosl	equ	0xFFD
 25917                           pclath	equ	0xFFA
 25918                           tblptru	equ	0xFF8
 25919                           tblptrh	equ	0xFF7
 25920                           tblptrl	equ	0xFF6
 25921                           tablat	equ	0xFF5
 25922                           prodh	equ	0xFF4
 25923                           prodl	equ	0xFF3
 25924                           intcon	equ	0xFF2
 25925                           indf0	equ	0xFEF
 25926                           postinc0	equ	0xFEE
 25927                           fsr0h	equ	0xFEA
 25928                           fsr0l	equ	0xFE9
 25929                           wreg	equ	0xFE8
 25930                           indf1	equ	0xFE7
 25931                           postdec1	equ	0xFE5
 25932                           fsr1h	equ	0xFE2
 25933                           fsr1l	equ	0xFE1
 25934                           indf2	equ	0xFDF
 25935                           postinc2	equ	0xFDE
 25936                           postdec2	equ	0xFDD
 25937                           plusw2	equ	0xFDB
 25938                           fsr2h	equ	0xFDA
 25939                           fsr2l	equ	0xFD9
 25940                           status	equ	0xFD8
 25941                           
 25942 ;; *************** function ___fldiv *****************
 25943 ;; Defined at:
 25944 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
 25945 ;; Parameters:    Size  Location     Type
 25946 ;;  b               4    0[BANK0 ] unsigned char 
 25947 ;;  a               4    4[BANK0 ] unsigned char 
 25948 ;; Auto vars:     Size  Location     Type
 25949 ;;  grs             4   19[BANK0 ] unsigned long 
 25950 ;;  rem             4   13[BANK0 ] unsigned long 
 25951 ;;  new_exp         2   17[BANK0 ] int 
 25952 ;;  aexp            1   24[BANK0 ] unsigned char 
 25953 ;;  bexp            1   23[BANK0 ] unsigned char 
 25954 ;;  sign            1   12[BANK0 ] unsigned char 
 25955 ;; Return value:  Size  Location     Type
 25956 ;;                  4    0[BANK0 ] unsigned char 
 25957 ;; Registers used:
 25958 ;;		wreg, status,2, status,0
 25959 ;; Tracked objects:
 25960 ;;		On entry : 0/0
 25961 ;;		On exit  : 0/0
 25962 ;;		Unchanged: 0/0
 25963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25964 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25965 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25966 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25967 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25968 ;;Total ram usage:       25 bytes
 25969 ;; Hardware stack levels used:    1
 25970 ;; Hardware stack levels required when called:    7
 25971 ;; This function calls:
 25972 ;;		Nothing
 25973 ;; This function is called by:
 25974 ;;		_exp
 25975 ;;		_ADC_Voltage
 25976 ;; This function uses a non-reentrant model
 25977 ;;
 25978                           
 25979                           	psect	text137
 25980  0114D8                     __ptext137:
 25981                           	opt stack 0
 25982  0114D8                     ___fldiv:
 25983                           	opt stack 19
 25984                           
 25985                           ; BSR set to: 0
 25986                           ;incstack = 0
 25987  0114D8  0100               	movlb	0	; () banked
 25988  0114DA  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 25989  0114DC  0B80               	andlw	128
 25990  0114DE  6F6C               	movwf	___fldiv@sign& (0+255),b
 25991  0114E0  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 25992  0114E2  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 25993  0114E4  6F77               	movwf	___fldiv@bexp& (0+255),b
 25994                           
 25995                           ; BSR set to: 0
 25996  0114E6  BF62               	btfsc	(___fldiv@b+2)& (0+255),7,b
 25997                           
 25998                           ; BSR set to: 0
 25999  0114E8  8177               	bsf	___fldiv@bexp& (0+255),0,b
 26000                           
 26001                           ; BSR set to: 0
 26002                           
 26003                           ; BSR set to: 0
 26004  0114EA  5177               	movf	___fldiv@bexp& (0+255),w,b
 26005  0114EC  B4D8               	btfsc	status,2,c
 26006  0114EE  D00D               	goto	l2809
 26007                           
 26008                           ; BSR set to: 0
 26009  0114F0  2977               	incf	___fldiv@bexp& (0+255),w,b
 26010  0114F2  A4D8               	btfss	status,2,c
 26011  0114F4  D008               	goto	l2810
 26012                           
 26013                           ; BSR set to: 0
 26014  0114F6  0E00               	movlw	0
 26015  0114F8  6F60               	movwf	___fldiv@b& (0+255),b
 26016  0114FA  0E00               	movlw	0
 26017  0114FC  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26018  0114FE  0E00               	movlw	0
 26019  011500  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26020  011502  0E00               	movlw	0
 26021  011504  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26022  011506                     l2810:
 26023                           
 26024                           ; BSR set to: 0
 26025                           
 26026                           ; BSR set to: 0
 26027  011506  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 26028  011508  D006               	goto	L15
 26029  01150A                     l2809:
 26030                           
 26031                           ; BSR set to: 0
 26032                           
 26033                           ; BSR set to: 0
 26034  01150A  0E00               	movlw	0
 26035  01150C  6F60               	movwf	___fldiv@b& (0+255),b
 26036  01150E  0E00               	movlw	0
 26037  011510  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26038  011512  0E00               	movlw	0
 26039  011514  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26040  011516                     L15:
 26041  011516  0E00               	movlw	0
 26042  011518  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26043                           
 26044                           ; BSR set to: 0
 26045                           
 26046                           ; BSR set to: 0
 26047  01151A  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26048  01151C  0B80               	andlw	128
 26049  01151E  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 26050                           
 26051                           ; BSR set to: 0
 26052  011520  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26053  011522  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 26054  011524  6F78               	movwf	___fldiv@aexp& (0+255),b
 26055                           
 26056                           ; BSR set to: 0
 26057  011526  BF66               	btfsc	(___fldiv@a+2)& (0+255),7,b
 26058                           
 26059                           ; BSR set to: 0
 26060  011528  8178               	bsf	___fldiv@aexp& (0+255),0,b
 26061                           
 26062                           ; BSR set to: 0
 26063                           
 26064                           ; BSR set to: 0
 26065  01152A  5178               	movf	___fldiv@aexp& (0+255),w,b
 26066  01152C  B4D8               	btfsc	status,2,c
 26067  01152E  D00D               	goto	l2813
 26068                           
 26069                           ; BSR set to: 0
 26070  011530  2978               	incf	___fldiv@aexp& (0+255),w,b
 26071  011532  A4D8               	btfss	status,2,c
 26072  011534  D008               	goto	l2814
 26073                           
 26074                           ; BSR set to: 0
 26075  011536  0E00               	movlw	0
 26076  011538  6F64               	movwf	___fldiv@a& (0+255),b
 26077  01153A  0E00               	movlw	0
 26078  01153C  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 26079  01153E  0E00               	movlw	0
 26080  011540  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 26081  011542  0E00               	movlw	0
 26082  011544  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 26083  011546                     l2814:
 26084                           
 26085                           ; BSR set to: 0
 26086                           
 26087                           ; BSR set to: 0
 26088  011546  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 26089  011548  D006               	goto	L16
 26090  01154A                     l2813:
 26091                           
 26092                           ; BSR set to: 0
 26093                           
 26094                           ; BSR set to: 0
 26095  01154A  0E00               	movlw	0
 26096  01154C  6F64               	movwf	___fldiv@a& (0+255),b
 26097  01154E  0E00               	movlw	0
 26098  011550  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 26099  011552  0E00               	movlw	0
 26100  011554  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 26101  011556                     L16:
 26102  011556  0E00               	movlw	0
 26103  011558  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 26104                           
 26105                           ; BSR set to: 0
 26106                           
 26107                           ; BSR set to: 0
 26108  01155A  5164               	movf	___fldiv@a& (0+255),w,b
 26109  01155C  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 26110  01155E  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 26111  011560  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 26112  011562  A4D8               	btfss	status,2,c
 26113  011564  D015               	goto	l2816
 26114                           
 26115                           ; BSR set to: 0
 26116  011566  0E00               	movlw	0
 26117  011568  6F60               	movwf	___fldiv@b& (0+255),b
 26118  01156A  0E00               	movlw	0
 26119  01156C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26120  01156E  0E00               	movlw	0
 26121  011570  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26122  011572  0E00               	movlw	0
 26123  011574  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26124                           
 26125                           ; BSR set to: 0
 26126  011576  0E80               	movlw	128
 26127  011578  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 26128  01157A  0E7F               	movlw	127
 26129  01157C  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 26130                           
 26131                           ; BSR set to: 0
 26132  01157E  C060  F060         	movff	___fldiv@b,?___fldiv
 26133  011582  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 26134  011586  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 26135  01158A  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 26136                           
 26137                           ; BSR set to: 0
 26138  01158E  0012               	return	
 26139  011590                     l2816:
 26140                           
 26141                           ; BSR set to: 0
 26142                           
 26143                           ; BSR set to: 0
 26144  011590  5177               	movf	___fldiv@bexp& (0+255),w,b
 26145  011592  A4D8               	btfss	status,2,c
 26146  011594  D011               	goto	l2818
 26147                           
 26148                           ; BSR set to: 0
 26149  011596  0E00               	movlw	0
 26150  011598  6F60               	movwf	___fldiv@b& (0+255),b
 26151  01159A  0E00               	movlw	0
 26152  01159C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26153  01159E  0E00               	movlw	0
 26154  0115A0  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26155  0115A2  0E00               	movlw	0
 26156  0115A4  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26157                           
 26158                           ; BSR set to: 0
 26159  0115A6  C060  F060         	movff	___fldiv@b,?___fldiv
 26160  0115AA  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 26161  0115AE  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 26162  0115B2  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 26163                           
 26164                           ; BSR set to: 0
 26165  0115B6  0012               	return	
 26166  0115B8                     l2818:
 26167                           
 26168                           ; BSR set to: 0
 26169                           
 26170                           ; BSR set to: 0
 26171  0115B8  5178               	movf	___fldiv@aexp& (0+255),w,b
 26172  0115BA  6F68               	movwf	??___fldiv& (0+255),b
 26173  0115BC  6B69               	clrf	(??___fldiv+1)& (0+255),b
 26174  0115BE  1F68               	comf	??___fldiv& (0+255),f,b
 26175  0115C0  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 26176  0115C2  4B68               	infsnz	??___fldiv& (0+255),f,b
 26177  0115C4  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 26178  0115C6  5177               	movf	___fldiv@bexp& (0+255),w,b
 26179  0115C8  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 26180  0115CA  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 26181  0115CC  5168               	movf	??___fldiv& (0+255),w,b
 26182  0115CE  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 26183  0115D0  5169               	movf	(??___fldiv+1)& (0+255),w,b
 26184  0115D2  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 26185  0115D4  0E7F               	movlw	127
 26186  0115D6  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 26187  0115D8  6F71               	movwf	___fldiv@new_exp& (0+255),b
 26188  0115DA  0E00               	movlw	0
 26189  0115DC  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 26190  0115DE  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 26191                           
 26192                           ; BSR set to: 0
 26193  0115E0  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 26194  0115E4  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 26195  0115E8  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 26196  0115EC  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 26197                           
 26198                           ; BSR set to: 0
 26199  0115F0  0E00               	movlw	0
 26200  0115F2  6F60               	movwf	___fldiv@b& (0+255),b
 26201  0115F4  0E00               	movlw	0
 26202  0115F6  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26203  0115F8  0E00               	movlw	0
 26204  0115FA  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26205  0115FC  0E00               	movlw	0
 26206  0115FE  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26207                           
 26208                           ; BSR set to: 0
 26209  011600  0E00               	movlw	0
 26210  011602  6F73               	movwf	___fldiv@grs& (0+255),b
 26211  011604  0E00               	movlw	0
 26212  011606  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 26213  011608  0E00               	movlw	0
 26214  01160A  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 26215  01160C  0E00               	movlw	0
 26216  01160E  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 26217                           
 26218                           ; BSR set to: 0
 26219  011610  0E00               	movlw	0
 26220  011612  6F78               	movwf	___fldiv@aexp& (0+255),b
 26221  011614  D028               	goto	l2819
 26222  011616                     
 26223                           ; BSR set to: 0
 26224                           
 26225                           ; BSR set to: 0
 26226  011616  5178               	movf	___fldiv@aexp& (0+255),w,b
 26227  011618  B4D8               	btfsc	status,2,c
 26228  01161A  D011               	goto	l2821
 26229                           
 26230                           ; BSR set to: 0
 26231  01161C  90D8               	bcf	status,0,c
 26232  01161E  376D               	rlcf	___fldiv@rem& (0+255),f,b
 26233  011620  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 26234  011622  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 26235  011624  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 26236  011626  90D8               	bcf	status,0,c
 26237  011628  3760               	rlcf	___fldiv@b& (0+255),f,b
 26238  01162A  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 26239  01162C  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 26240  01162E  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 26241                           
 26242                           ; BSR set to: 0
 26243  011630  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 26244                           
 26245                           ; BSR set to: 0
 26246  011632  8160               	bsf	___fldiv@b& (0+255),0,b
 26247                           
 26248                           ; BSR set to: 0
 26249  011634  90D8               	bcf	status,0,c
 26250  011636  3773               	rlcf	___fldiv@grs& (0+255),f,b
 26251  011638  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 26252  01163A  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 26253  01163C  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 26254  01163E                     l2821:
 26255                           
 26256                           ; BSR set to: 0
 26257                           
 26258                           ; BSR set to: 0
 26259  01163E  5164               	movf	___fldiv@a& (0+255),w,b
 26260  011640  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 26261  011642  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 26262  011644  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 26263  011646  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 26264  011648  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 26265  01164A  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26266  01164C  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 26267  01164E  A0D8               	btfss	status,0,c
 26268  011650  D009               	goto	l2823
 26269                           
 26270                           ; BSR set to: 0
 26271  011652  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 26272                           
 26273                           ; BSR set to: 0
 26274  011654  5164               	movf	___fldiv@a& (0+255),w,b
 26275  011656  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 26276  011658  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 26277  01165A  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 26278  01165C  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 26279  01165E  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 26280  011660  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26281  011662  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 26282  011664                     l2823:
 26283                           
 26284                           ; BSR set to: 0
 26285                           
 26286                           ; BSR set to: 0
 26287  011664  2B78               	incf	___fldiv@aexp& (0+255),f,b
 26288  011666                     l2819:
 26289                           
 26290                           ; BSR set to: 0
 26291  011666  0E19               	movlw	25
 26292  011668  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 26293  01166A  D7D5               	goto	l2820
 26294                           
 26295                           ; BSR set to: 0
 26296                           
 26297                           ; BSR set to: 0
 26298  01166C  516D               	movf	___fldiv@rem& (0+255),w,b
 26299  01166E  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 26300  011670  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 26301  011672  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 26302  011674  B4D8               	btfsc	status,2,c
 26303  011676  D011               	goto	l2826
 26304                           
 26305                           ; BSR set to: 0
 26306  011678  8173               	bsf	___fldiv@grs& (0+255),0,b
 26307                           
 26308                           ; BSR set to: 0
 26309  01167A  D00F               	goto	l2826
 26310  01167C                     
 26311                           ; BSR set to: 0
 26312                           
 26313                           ; BSR set to: 0
 26314  01167C  90D8               	bcf	status,0,c
 26315  01167E  3760               	rlcf	___fldiv@b& (0+255),f,b
 26316  011680  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 26317  011682  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 26318  011684  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 26319                           
 26320                           ; BSR set to: 0
 26321  011686  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 26322                           
 26323                           ; BSR set to: 0
 26324  011688  8160               	bsf	___fldiv@b& (0+255),0,b
 26325                           
 26326                           ; BSR set to: 0
 26327  01168A  90D8               	bcf	status,0,c
 26328  01168C  3773               	rlcf	___fldiv@grs& (0+255),f,b
 26329  01168E  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 26330  011690  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 26331  011692  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 26332  011694  0771               	decf	___fldiv@new_exp& (0+255),f,b
 26333  011696  A0D8               	btfss	status,0,c
 26334  011698  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 26335  01169A                     l2826:
 26336                           
 26337                           ; BSR set to: 0
 26338                           
 26339                           ; BSR set to: 0
 26340  01169A  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 26341  01169C  D7EF               	goto	l2827
 26342                           
 26343                           ; BSR set to: 0
 26344                           
 26345                           ; BSR set to: 0
 26346  01169E  0E00               	movlw	0
 26347  0116A0  6F78               	movwf	___fldiv@aexp& (0+255),b
 26348                           
 26349                           ; BSR set to: 0
 26350  0116A2  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 26351  0116A4  D016               	goto	l2833
 26352                           
 26353                           ; BSR set to: 0
 26354  0116A6  0EFF               	movlw	255
 26355  0116A8  1573               	andwf	___fldiv@grs& (0+255),w,b
 26356  0116AA  6F68               	movwf	??___fldiv& (0+255),b
 26357  0116AC  0EFF               	movlw	255
 26358  0116AE  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 26359  0116B0  6F69               	movwf	(??___fldiv+1)& (0+255),b
 26360  0116B2  0EFF               	movlw	255
 26361  0116B4  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 26362  0116B6  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 26363  0116B8  0E7F               	movlw	127
 26364  0116BA  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 26365  0116BC  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 26366  0116BE  5168               	movf	??___fldiv& (0+255),w,b
 26367  0116C0  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 26368  0116C2  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 26369  0116C4  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 26370  0116C6  A4D8               	btfss	status,2,c
 26371  0116C8  D002               	goto	u10960
 26372                           
 26373                           ; BSR set to: 0
 26374                           
 26375                           ; BSR set to: 0
 26376  0116CA  A160               	btfss	___fldiv@b& (0+255),0,b
 26377  0116CC  D002               	goto	l2833
 26378  0116CE                     u10960:
 26379                           
 26380                           ; BSR set to: 0
 26381  0116CE  0E01               	movlw	1
 26382  0116D0  6F78               	movwf	___fldiv@aexp& (0+255),b
 26383  0116D2                     l2833:
 26384                           
 26385                           ; BSR set to: 0
 26386                           
 26387                           ; BSR set to: 0
 26388                           
 26389                           ; BSR set to: 0
 26390  0116D2  5178               	movf	___fldiv@aexp& (0+255),w,b
 26391  0116D4  B4D8               	btfsc	status,2,c
 26392  0116D6  D01F               	goto	l2835
 26393                           
 26394                           ; BSR set to: 0
 26395  0116D8  0E01               	movlw	1
 26396  0116DA  2760               	addwf	___fldiv@b& (0+255),f,b
 26397  0116DC  0E00               	movlw	0
 26398  0116DE  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 26399  0116E0  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 26400  0116E2  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 26401                           
 26402                           ; BSR set to: 0
 26403  0116E4  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 26404  0116E6  D017               	goto	l2835
 26405                           
 26406                           ; BSR set to: 0
 26407  0116E8  C060  F068         	movff	___fldiv@b,??___fldiv
 26408  0116EC  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 26409  0116F0  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 26410  0116F4  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 26411  0116F8  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 26412  0116FA  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 26413  0116FC  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 26414  0116FE  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 26415  011700  3368               	rrcf	??___fldiv& (0+255),f,b
 26416  011702  C068  F060         	movff	??___fldiv,___fldiv@b
 26417  011706  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 26418  01170A  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 26419  01170E  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 26420                           
 26421                           ; BSR set to: 0
 26422  011712  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 26423  011714  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 26424  011716                     l2835:
 26425                           
 26426                           ; BSR set to: 0
 26427                           
 26428                           ; BSR set to: 0
 26429                           
 26430                           ; BSR set to: 0
 26431  011716  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 26432  011718  D010               	goto	l2836
 26433  01171A  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 26434  01171C  E103               	bnz	u10990
 26435  01171E  2971               	incf	___fldiv@new_exp& (0+255),w,b
 26436  011720  A0D8               	btfss	status,0,c
 26437  011722  D00B               	goto	l2836
 26438  011724                     u10990:
 26439                           
 26440                           ; BSR set to: 0
 26441  011724  0E00               	movlw	0
 26442  011726  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 26443  011728  6971               	setf	___fldiv@new_exp& (0+255),b
 26444  01172A  0E00               	movlw	0
 26445  01172C  6F60               	movwf	___fldiv@b& (0+255),b
 26446  01172E  0E00               	movlw	0
 26447  011730  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26448  011732  0E00               	movlw	0
 26449  011734  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26450  011736  0E00               	movlw	0
 26451  011738  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26452  01173A                     l2836:
 26453                           
 26454                           ; BSR set to: 0
 26455                           
 26456                           ; BSR set to: 0
 26457  01173A  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 26458  01173C  D005               	goto	u11000
 26459  01173E  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 26460  011740  E111               	bnz	l13689
 26461  011742  0571               	decf	___fldiv@new_exp& (0+255),w,b
 26462  011744  B0D8               	btfsc	status,0,c
 26463  011746  D00E               	goto	l2837
 26464  011748                     u11000:
 26465                           
 26466                           ; BSR set to: 0
 26467  011748  0E00               	movlw	0
 26468  01174A  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 26469  01174C  0E00               	movlw	0
 26470  01174E  6F71               	movwf	___fldiv@new_exp& (0+255),b
 26471  011750  0E00               	movlw	0
 26472  011752  6F60               	movwf	___fldiv@b& (0+255),b
 26473  011754  0E00               	movlw	0
 26474  011756  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26475  011758  0E00               	movlw	0
 26476  01175A  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26477  01175C  0E00               	movlw	0
 26478  01175E  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26479  011760  0E00               	movlw	0
 26480  011762  6F6C               	movwf	___fldiv@sign& (0+255),b
 26481  011764                     l2837:
 26482  011764                     l13689:
 26483                           
 26484                           ; BSR set to: 0
 26485  011764  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 26486                           
 26487                           ; BSR set to: 0
 26488  011768  A177               	btfss	___fldiv@bexp& (0+255),0,b
 26489  01176A  D002               	goto	l2838
 26490                           
 26491                           ; BSR set to: 0
 26492  01176C  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 26493  01176E  D001               	goto	l2839
 26494  011770                     l2838:
 26495                           
 26496                           ; BSR set to: 0
 26497                           
 26498                           ; BSR set to: 0
 26499  011770  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 26500  011772                     l2839:
 26501                           
 26502                           ; BSR set to: 0
 26503                           
 26504                           ; BSR set to: 0
 26505  011772  90D8               	bcf	status,0,c
 26506  011774  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 26507  011776  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26508                           
 26509                           ; BSR set to: 0
 26510  011778  516C               	movf	___fldiv@sign& (0+255),w,b
 26511  01177A  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 26512                           
 26513                           ; BSR set to: 0
 26514  01177C  C060  F060         	movff	___fldiv@b,?___fldiv
 26515  011780  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 26516  011784  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 26517  011788  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 26518  01178C  0012               	return	
 26519  01178E                     __end_of___fldiv:
 26520                           	opt stack 0
 26521                           tosu	equ	0xFFF
 26522                           tosh	equ	0xFFE
 26523                           tosl	equ	0xFFD
 26524                           pclath	equ	0xFFA
 26525                           tblptru	equ	0xFF8
 26526                           tblptrh	equ	0xFF7
 26527                           tblptrl	equ	0xFF6
 26528                           tablat	equ	0xFF5
 26529                           prodh	equ	0xFF4
 26530                           prodl	equ	0xFF3
 26531                           intcon	equ	0xFF2
 26532                           indf0	equ	0xFEF
 26533                           postinc0	equ	0xFEE
 26534                           fsr0h	equ	0xFEA
 26535                           fsr0l	equ	0xFE9
 26536                           wreg	equ	0xFE8
 26537                           indf1	equ	0xFE7
 26538                           postdec1	equ	0xFE5
 26539                           fsr1h	equ	0xFE2
 26540                           fsr1l	equ	0xFE1
 26541                           indf2	equ	0xFDF
 26542                           postinc2	equ	0xFDE
 26543                           postdec2	equ	0xFDD
 26544                           plusw2	equ	0xFDB
 26545                           fsr2h	equ	0xFDA
 26546                           fsr2l	equ	0xFD9
 26547                           status	equ	0xFD8
 26548                           
 26549 ;; *************** function ___wmul *****************
 26550 ;; Defined at:
 26551 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 26552 ;; Parameters:    Size  Location     Type
 26553 ;;  multiplier      2    0[BANK0 ] unsigned int 
 26554 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 26555 ;; Auto vars:     Size  Location     Type
 26556 ;;  product         2    4[BANK0 ] unsigned int 
 26557 ;; Return value:  Size  Location     Type
 26558 ;;                  2    0[BANK0 ] unsigned int 
 26559 ;; Registers used:
 26560 ;;		wreg, status,2, status,0, prodl, prodh
 26561 ;; Tracked objects:
 26562 ;;		On entry : 0/0
 26563 ;;		On exit  : 0/0
 26564 ;;		Unchanged: 0/0
 26565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26566 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26567 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26569 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26570 ;;Total ram usage:        6 bytes
 26571 ;; Hardware stack levels used:    1
 26572 ;; Hardware stack levels required when called:    7
 26573 ;; This function calls:
 26574 ;;		Nothing
 26575 ;; This function is called by:
 26576 ;;		_LCD_DrawField
 26577 ;;		_ADCAverage
 26578 ;; This function uses a non-reentrant model
 26579 ;;
 26580                           
 26581                           	psect	text138
 26582  015CA0                     __ptext138:
 26583                           	opt stack 0
 26584  015CA0                     ___wmul:
 26585                           	opt stack 20
 26586                           
 26587                           ; BSR set to: 0
 26588                           ;incstack = 0
 26589  015CA0  0100               	movlb	0	; () banked
 26590  015CA2  5160               	movf	___wmul@multiplier& (0+255),w,b
 26591  015CA4  0362               	mulwf	___wmul@multiplicand& (0+255),b
 26592  015CA6  CFF3 F064          	movff	prodl,___wmul@product
 26593  015CAA  CFF4 F065          	movff	prodh,___wmul@product+1
 26594  015CAE  5160               	movf	___wmul@multiplier& (0+255),w,b
 26595  015CB0  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 26596  015CB2  50F3               	movf	prodl,w,c
 26597  015CB4  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 26598  015CB6  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 26599  015CB8  0362               	mulwf	___wmul@multiplicand& (0+255),b
 26600  015CBA  50F3               	movf	prodl,w,c
 26601  015CBC  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 26602                           
 26603                           ; BSR set to: 0
 26604  015CBE  C064  F060         	movff	___wmul@product,?___wmul
 26605  015CC2  C065  F061         	movff	___wmul@product+1,?___wmul+1
 26606  015CC6  0012               	return	
 26607  015CC8                     __end_of___wmul:
 26608                           	opt stack 0
 26609                           tosu	equ	0xFFF
 26610                           tosh	equ	0xFFE
 26611                           tosl	equ	0xFFD
 26612                           pclath	equ	0xFFA
 26613                           tblptru	equ	0xFF8
 26614                           tblptrh	equ	0xFF7
 26615                           tblptrl	equ	0xFF6
 26616                           tablat	equ	0xFF5
 26617                           prodh	equ	0xFF4
 26618                           prodl	equ	0xFF3
 26619                           intcon	equ	0xFF2
 26620                           indf0	equ	0xFEF
 26621                           postinc0	equ	0xFEE
 26622                           fsr0h	equ	0xFEA
 26623                           fsr0l	equ	0xFE9
 26624                           wreg	equ	0xFE8
 26625                           indf1	equ	0xFE7
 26626                           postdec1	equ	0xFE5
 26627                           fsr1h	equ	0xFE2
 26628                           fsr1l	equ	0xFE1
 26629                           indf2	equ	0xFDF
 26630                           postinc2	equ	0xFDE
 26631                           postdec2	equ	0xFDD
 26632                           plusw2	equ	0xFDB
 26633                           fsr2h	equ	0xFDA
 26634                           fsr2l	equ	0xFD9
 26635                           status	equ	0xFD8
 26636                           
 26637 ;; *************** function ___awdiv *****************
 26638 ;; Defined at:
 26639 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 26640 ;; Parameters:    Size  Location     Type
 26641 ;;  dividend        2    0[BANK0 ] int 
 26642 ;;  divisor         2    2[BANK0 ] int 
 26643 ;; Auto vars:     Size  Location     Type
 26644 ;;  quotient        2    6[BANK0 ] int 
 26645 ;;  sign            1    5[BANK0 ] unsigned char 
 26646 ;;  counter         1    4[BANK0 ] unsigned char 
 26647 ;; Return value:  Size  Location     Type
 26648 ;;                  2    0[BANK0 ] int 
 26649 ;; Registers used:
 26650 ;;		wreg, status,2, status,0
 26651 ;; Tracked objects:
 26652 ;;		On entry : 0/0
 26653 ;;		On exit  : 0/0
 26654 ;;		Unchanged: 0/0
 26655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26656 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26657 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26659 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26660 ;;Total ram usage:        8 bytes
 26661 ;; Hardware stack levels used:    1
 26662 ;; Hardware stack levels required when called:    7
 26663 ;; This function calls:
 26664 ;;		Nothing
 26665 ;; This function is called by:
 26666 ;;		_Console_Tab
 26667 ;;		_ADCAverage
 26668 ;; This function uses a non-reentrant model
 26669 ;;
 26670                           
 26671                           	psect	text139
 26672  01488E                     __ptext139:
 26673                           	opt stack 0
 26674  01488E                     ___awdiv:
 26675                           	opt stack 19
 26676                           
 26677                           ; BSR set to: 0
 26678                           ;incstack = 0
 26679  01488E  0E00               	movlw	0
 26680  014890  0100               	movlb	0	; () banked
 26681  014892  6F65               	movwf	___awdiv@sign& (0+255),b
 26682                           
 26683                           ; BSR set to: 0
 26684  014894  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 26685  014896  D006               	goto	l2476
 26686                           
 26687                           ; BSR set to: 0
 26688  014898  6D62               	negf	___awdiv@divisor& (0+255),b
 26689  01489A  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
 26690  01489C  B0D8               	btfsc	status,0,c
 26691  01489E  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
 26692                           
 26693                           ; BSR set to: 0
 26694  0148A0  0E01               	movlw	1
 26695  0148A2  6F65               	movwf	___awdiv@sign& (0+255),b
 26696  0148A4                     l2476:
 26697                           
 26698                           ; BSR set to: 0
 26699                           
 26700                           ; BSR set to: 0
 26701  0148A4  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 26702  0148A6  D006               	goto	l2477
 26703                           
 26704                           ; BSR set to: 0
 26705  0148A8  6D60               	negf	___awdiv@dividend& (0+255),b
 26706  0148AA  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
 26707  0148AC  B0D8               	btfsc	status,0,c
 26708  0148AE  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
 26709                           
 26710                           ; BSR set to: 0
 26711  0148B0  0E01               	movlw	1
 26712  0148B2  1B65               	xorwf	___awdiv@sign& (0+255),f,b
 26713  0148B4                     l2477:
 26714                           
 26715                           ; BSR set to: 0
 26716                           
 26717                           ; BSR set to: 0
 26718  0148B4  0E00               	movlw	0
 26719  0148B6  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
 26720  0148B8  0E00               	movlw	0
 26721  0148BA  6F66               	movwf	___awdiv@quotient& (0+255),b
 26722                           
 26723                           ; BSR set to: 0
 26724  0148BC  5162               	movf	___awdiv@divisor& (0+255),w,b
 26725  0148BE  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 26726  0148C0  B4D8               	btfsc	status,2,c
 26727  0148C2  D01C               	goto	l2484
 26728                           
 26729                           ; BSR set to: 0
 26730  0148C4  0E01               	movlw	1
 26731  0148C6  6F64               	movwf	___awdiv@counter& (0+255),b
 26732  0148C8  D004               	goto	l2479
 26733  0148CA                     
 26734                           ; BSR set to: 0
 26735                           
 26736                           ; BSR set to: 0
 26737  0148CA  90D8               	bcf	status,0,c
 26738  0148CC  3762               	rlcf	___awdiv@divisor& (0+255),f,b
 26739  0148CE  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 26740  0148D0  2B64               	incf	___awdiv@counter& (0+255),f,b
 26741  0148D2                     l2479:
 26742                           
 26743                           ; BSR set to: 0
 26744                           
 26745                           ; BSR set to: 0
 26746  0148D2  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 26747  0148D4  D7FA               	goto	l2480
 26748  0148D6                     u10340:
 26749                           
 26750                           ; BSR set to: 0
 26751                           
 26752                           ; BSR set to: 0
 26753                           
 26754                           ; BSR set to: 0
 26755  0148D6  90D8               	bcf	status,0,c
 26756  0148D8  3766               	rlcf	___awdiv@quotient& (0+255),f,b
 26757  0148DA  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 26758                           
 26759                           ; BSR set to: 0
 26760  0148DC  5162               	movf	___awdiv@divisor& (0+255),w,b
 26761  0148DE  5D60               	subwf	___awdiv@dividend& (0+255),w,b
 26762  0148E0  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 26763  0148E2  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 26764  0148E4  A0D8               	btfss	status,0,c
 26765  0148E6  D005               	goto	l2483
 26766                           
 26767                           ; BSR set to: 0
 26768  0148E8  5162               	movf	___awdiv@divisor& (0+255),w,b
 26769  0148EA  5F60               	subwf	___awdiv@dividend& (0+255),f,b
 26770  0148EC  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 26771  0148EE  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 26772                           
 26773                           ; BSR set to: 0
 26774  0148F0  8166               	bsf	___awdiv@quotient& (0+255),0,b
 26775  0148F2                     l2483:
 26776                           
 26777                           ; BSR set to: 0
 26778                           
 26779                           ; BSR set to: 0
 26780  0148F2  90D8               	bcf	status,0,c
 26781  0148F4  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 26782  0148F6  3362               	rrcf	___awdiv@divisor& (0+255),f,b
 26783                           
 26784                           ; BSR set to: 0
 26785  0148F8  2F64               	decfsz	___awdiv@counter& (0+255),f,b
 26786  0148FA  D7ED               	goto	u10340
 26787  0148FC                     l2484:
 26788                           
 26789                           ; BSR set to: 0
 26790                           
 26791                           ; BSR set to: 0
 26792                           
 26793                           ; BSR set to: 0
 26794  0148FC  5165               	movf	___awdiv@sign& (0+255),w,b
 26795  0148FE  B4D8               	btfsc	status,2,c
 26796  014900  D004               	goto	l2485
 26797                           
 26798                           ; BSR set to: 0
 26799  014902  6D66               	negf	___awdiv@quotient& (0+255),b
 26800  014904  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
 26801  014906  B0D8               	btfsc	status,0,c
 26802  014908  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
 26803  01490A                     l2485:
 26804                           
 26805                           ; BSR set to: 0
 26806                           
 26807                           ; BSR set to: 0
 26808  01490A  C066  F060         	movff	___awdiv@quotient,?___awdiv
 26809  01490E  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
 26810  014912  0012               	return	
 26811  014914                     __end_of___awdiv:
 26812                           	opt stack 0
 26813                           tosu	equ	0xFFF
 26814                           tosh	equ	0xFFE
 26815                           tosl	equ	0xFFD
 26816                           pclath	equ	0xFFA
 26817                           tblptru	equ	0xFF8
 26818                           tblptrh	equ	0xFF7
 26819                           tblptrl	equ	0xFF6
 26820                           tablat	equ	0xFF5
 26821                           prodh	equ	0xFF4
 26822                           prodl	equ	0xFF3
 26823                           intcon	equ	0xFF2
 26824                           indf0	equ	0xFEF
 26825                           postinc0	equ	0xFEE
 26826                           fsr0h	equ	0xFEA
 26827                           fsr0l	equ	0xFE9
 26828                           wreg	equ	0xFE8
 26829                           indf1	equ	0xFE7
 26830                           postdec1	equ	0xFE5
 26831                           fsr1h	equ	0xFE2
 26832                           fsr1l	equ	0xFE1
 26833                           indf2	equ	0xFDF
 26834                           postinc2	equ	0xFDE
 26835                           postdec2	equ	0xFDD
 26836                           plusw2	equ	0xFDB
 26837                           fsr2h	equ	0xFDA
 26838                           fsr2l	equ	0xFD9
 26839                           status	equ	0xFD8
 26840                           
 26841 ;; *************** function _HMI_SetNumber *****************
 26842 ;; Defined at:
 26843 ;;		line 221 in file "HMI.c"
 26844 ;; Parameters:    Size  Location     Type
 26845 ;;  pInput          2   22[BANK0 ] int 
 26846 ;; Auto vars:     Size  Location     Type
 26847 ;;		None
 26848 ;; Return value:  Size  Location     Type
 26849 ;;                  1    wreg      void 
 26850 ;; Registers used:
 26851 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26852 ;; Tracked objects:
 26853 ;;		On entry : 0/0
 26854 ;;		On exit  : 0/0
 26855 ;;		Unchanged: 0/0
 26856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26857 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26860 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26861 ;;Total ram usage:        2 bytes
 26862 ;; Hardware stack levels used:    1
 26863 ;; Hardware stack levels required when called:    9
 26864 ;; This function calls:
 26865 ;;		_HMI_SetSegments
 26866 ;;		_itos
 26867 ;; This function is called by:
 26868 ;;		_Event_TestButton
 26869 ;;		_ADCAverage
 26870 ;;		_main
 26871 ;;		_Event_HMI_UpButton
 26872 ;;		_Event_HMI_DownButton
 26873 ;; This function uses a non-reentrant model
 26874 ;;
 26875                           
 26876                           	psect	text140
 26877  015D3E                     __ptext140:
 26878                           	opt stack 0
 26879  015D3E                     _HMI_SetNumber:
 26880                           	opt stack 19
 26881                           
 26882                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 26883                           
 26884                           ; BSR set to: 0
 26885                           ;incstack = 0
 26886  015D3E  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 26887  015D42  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 26888  015D46  0E48               	movlw	low _HMIBoard
 26889  015D48  0100               	movlb	0	; () banked
 26890  015D4A  6F6E               	movwf	itos@destination& (0+255),b
 26891  015D4C  0E01               	movlw	high _HMIBoard
 26892  015D4E  6F6F               	movwf	(itos@destination+1)& (0+255),b
 26893  015D50  EC62  F09F         	call	_itos	;wreg free
 26894                           
 26895                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 26896  015D54  0E48               	movlw	low _HMIBoard
 26897  015D56  0100               	movlb	0	; () banked
 26898  015D58  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 26899  015D5A  0E01               	movlw	high _HMIBoard
 26900  015D5C  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 26901  015D5E  ECBF  F0A1         	call	_HMI_SetSegments	;wreg free
 26902  015D62  0012               	return		;funcret
 26903  015D64                     __end_of_HMI_SetNumber:
 26904                           	opt stack 0
 26905                           tosu	equ	0xFFF
 26906                           tosh	equ	0xFFE
 26907                           tosl	equ	0xFFD
 26908                           pclath	equ	0xFFA
 26909                           tblptru	equ	0xFF8
 26910                           tblptrh	equ	0xFF7
 26911                           tblptrl	equ	0xFF6
 26912                           tablat	equ	0xFF5
 26913                           prodh	equ	0xFF4
 26914                           prodl	equ	0xFF3
 26915                           intcon	equ	0xFF2
 26916                           indf0	equ	0xFEF
 26917                           postinc0	equ	0xFEE
 26918                           fsr0h	equ	0xFEA
 26919                           fsr0l	equ	0xFE9
 26920                           wreg	equ	0xFE8
 26921                           indf1	equ	0xFE7
 26922                           postdec1	equ	0xFE5
 26923                           fsr1h	equ	0xFE2
 26924                           fsr1l	equ	0xFE1
 26925                           indf2	equ	0xFDF
 26926                           postinc2	equ	0xFDE
 26927                           postdec2	equ	0xFDD
 26928                           plusw2	equ	0xFDB
 26929                           fsr2h	equ	0xFDA
 26930                           fsr2l	equ	0xFD9
 26931                           status	equ	0xFD8
 26932                           
 26933 ;; *************** function _itos *****************
 26934 ;; Defined at:
 26935 ;;		line 369 in file "Library/Types.c"
 26936 ;; Parameters:    Size  Location     Type
 26937 ;;  input           2   12[BANK0 ] unsigned short 
 26938 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 26939 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26940 ;; Auto vars:     Size  Location     Type
 26941 ;;  Out             2   20[BANK0 ] unsigned short 
 26942 ;;  Length          2   18[BANK0 ] unsigned short 
 26943 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 26944 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26945 ;; Return value:  Size  Location     Type
 26946 ;;                  1    wreg      void 
 26947 ;; Registers used:
 26948 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26949 ;; Tracked objects:
 26950 ;;		On entry : 0/0
 26951 ;;		On exit  : 0/0
 26952 ;;		Unchanged: 0/0
 26953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26954 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26955 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26957 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26958 ;;Total ram usage:       10 bytes
 26959 ;; Hardware stack levels used:    1
 26960 ;; Hardware stack levels required when called:    8
 26961 ;; This function calls:
 26962 ;;		___lwdiv
 26963 ;;		___lwmod
 26964 ;;		_reverse
 26965 ;; This function is called by:
 26966 ;;		_HMI_SetNumber
 26967 ;; This function uses a non-reentrant model
 26968 ;;
 26969                           
 26970                           	psect	text141
 26971  013EC4                     __ptext141:
 26972                           	opt stack 0
 26973  013EC4                     _itos:
 26974                           	opt stack 19
 26975                           
 26976                           ;Types.c: 371: UINT16 Out = input;
 26977                           
 26978                           ;incstack = 0
 26979  013EC4  C06C  F074         	movff	itos@input,itos@Out
 26980  013EC8  C06D  F075         	movff	itos@input+1,itos@Out+1
 26981                           
 26982                           ;Types.c: 372: UINT16 Length = 0;
 26983  013ECC  0E00               	movlw	0
 26984  013ECE  0100               	movlb	0	; () banked
 26985  013ED0  6F73               	movwf	(itos@Length+1)& (0+255),b
 26986  013ED2  0E00               	movlw	0
 26987  013ED4  6F72               	movwf	itos@Length& (0+255),b
 26988                           
 26989                           ; BSR set to: 0
 26990                           ;Types.c: 373: char *Data = destination;
 26991  013ED6  C06E  F070         	movff	itos@destination,itos@Data
 26992  013EDA  C06F  F071         	movff	itos@destination+1,itos@Data+1
 26993                           
 26994                           ; BSR set to: 0
 26995                           ;Types.c: 374: if(Out == 0)
 26996  013EDE  5174               	movf	itos@Out& (0+255),w,b
 26997  013EE0  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 26998  013EE2  A4D8               	btfss	status,2,c
 26999  013EE4  D030               	goto	l929
 27000                           
 27001                           ; BSR set to: 0
 27002                           ;Types.c: 375: {
 27003                           ;Types.c: 376: Data[0] = (UINT16)'0';
 27004  013EE6  C070  FFD9         	movff	itos@Data,fsr2l
 27005  013EEA  C071  FFDA         	movff	itos@Data+1,fsr2h
 27006  013EEE  0E30               	movlw	48
 27007  013EF0  6EDF               	movwf	indf2,c
 27008                           
 27009                           ; BSR set to: 0
 27010                           ;Types.c: 377: Length = 1;
 27011  013EF2  0E00               	movlw	0
 27012  013EF4  6F73               	movwf	(itos@Length+1)& (0+255),b
 27013  013EF6  0E01               	movlw	1
 27014  013EF8  6F72               	movwf	itos@Length& (0+255),b
 27015                           
 27016                           ;Types.c: 378: }
 27017  013EFA  D039               	goto	l928
 27018  013EFC                     
 27019                           ; BSR set to: 0
 27020                           ;Types.c: 382: {
 27021                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 27022                           
 27023                           ; BSR set to: 0
 27024  013EFC  C074  F067         	movff	itos@Out,___lwmod@dividend
 27025  013F00  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 27026  013F04  0E00               	movlw	0
 27027  013F06  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 27028  013F08  0E0A               	movlw	10
 27029  013F0A  6F69               	movwf	___lwmod@divisor& (0+255),b
 27030  013F0C  ECA0  F0AB         	call	___lwmod	;wreg free
 27031  013F10  0100               	movlb	0	; () banked
 27032  013F12  5167               	movf	?___lwmod& (0+255),w,b
 27033  013F14  0F30               	addlw	48
 27034  013F16  C070  FFD9         	movff	itos@Data,fsr2l
 27035  013F1A  C071  FFDA         	movff	itos@Data+1,fsr2h
 27036  013F1E  6EDF               	movwf	indf2,c
 27037                           
 27038                           ; BSR set to: 0
 27039                           ;Types.c: 384: Out /= 10;
 27040  013F20  C074  F060         	movff	itos@Out,___lwdiv@dividend
 27041  013F24  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 27042  013F28  0E00               	movlw	0
 27043  013F2A  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 27044  013F2C  0E0A               	movlw	10
 27045  013F2E  6F62               	movwf	___lwdiv@divisor& (0+255),b
 27046  013F30  EC8A  F0A9         	call	___lwdiv	;wreg free
 27047  013F34  C060  F074         	movff	?___lwdiv,itos@Out
 27048  013F38  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 27049                           
 27050                           ;Types.c: 385: Length ++;
 27051  013F3C  0100               	movlb	0	; () banked
 27052  013F3E  4B72               	infsnz	itos@Length& (0+255),f,b
 27053  013F40  2B73               	incf	(itos@Length+1)& (0+255),f,b
 27054                           
 27055                           ; BSR set to: 0
 27056                           ;Types.c: 386: Data++;
 27057  013F42  4B70               	infsnz	itos@Data& (0+255),f,b
 27058  013F44  2B71               	incf	(itos@Data+1)& (0+255),f,b
 27059  013F46                     l929:
 27060                           
 27061                           ; BSR set to: 0
 27062                           
 27063                           ; BSR set to: 0
 27064  013F46  5174               	movf	itos@Out& (0+255),w,b
 27065  013F48  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 27066  013F4A  B4D8               	btfsc	status,2,c
 27067  013F4C  D006               	goto	u10710
 27068                           
 27069                           ; BSR set to: 0
 27070  013F4E  5173               	movf	(itos@Length+1)& (0+255),w,b
 27071  013F50  E104               	bnz	l13503
 27072  013F52  0E06               	movlw	6
 27073  013F54  5D72               	subwf	itos@Length& (0+255),w,b
 27074  013F56  A0D8               	btfss	status,0,c
 27075  013F58  D7D1               	goto	l930
 27076  013F5A                     u10710:
 27077  013F5A                     l13503:
 27078                           
 27079                           ; BSR set to: 0
 27080                           ;Types.c: 387: }
 27081                           ;Types.c: 388: reverse(destination, Length);
 27082  013F5A  C06E  F060         	movff	itos@destination,reverse@input
 27083  013F5E  C06F  F061         	movff	itos@destination+1,reverse@input+1
 27084  013F62  C072  F062         	movff	itos@Length,reverse@length
 27085  013F66  C073  F063         	movff	itos@Length+1,reverse@length+1
 27086  013F6A  EC60  F0A9         	call	_reverse	;wreg free
 27087  013F6E                     l928:
 27088                           
 27089                           ;Types.c: 389: }
 27090                           ;Types.c: 390: destination[Length] = '\0';
 27091  013F6E  0100               	movlb	0	; () banked
 27092  013F70  5172               	movf	itos@Length& (0+255),w,b
 27093  013F72  256E               	addwf	itos@destination& (0+255),w,b
 27094  013F74  6ED9               	movwf	fsr2l,c
 27095  013F76  5173               	movf	(itos@Length+1)& (0+255),w,b
 27096  013F78  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 27097  013F7A  6EDA               	movwf	fsr2h,c
 27098  013F7C  0E00               	movlw	0
 27099  013F7E  6EDF               	movwf	indf2,c
 27100                           
 27101                           ; BSR set to: 0
 27102  013F80  0012               	return		;funcret
 27103  013F82                     __end_of_itos:
 27104                           	opt stack 0
 27105                           tosu	equ	0xFFF
 27106                           tosh	equ	0xFFE
 27107                           tosl	equ	0xFFD
 27108                           pclath	equ	0xFFA
 27109                           tblptru	equ	0xFF8
 27110                           tblptrh	equ	0xFF7
 27111                           tblptrl	equ	0xFF6
 27112                           tablat	equ	0xFF5
 27113                           prodh	equ	0xFF4
 27114                           prodl	equ	0xFF3
 27115                           intcon	equ	0xFF2
 27116                           indf0	equ	0xFEF
 27117                           postinc0	equ	0xFEE
 27118                           fsr0h	equ	0xFEA
 27119                           fsr0l	equ	0xFE9
 27120                           wreg	equ	0xFE8
 27121                           indf1	equ	0xFE7
 27122                           postdec1	equ	0xFE5
 27123                           fsr1h	equ	0xFE2
 27124                           fsr1l	equ	0xFE1
 27125                           indf2	equ	0xFDF
 27126                           postinc2	equ	0xFDE
 27127                           postdec2	equ	0xFDD
 27128                           plusw2	equ	0xFDB
 27129                           fsr2h	equ	0xFDA
 27130                           fsr2l	equ	0xFD9
 27131                           status	equ	0xFD8
 27132                           
 27133 ;; *************** function _reverse *****************
 27134 ;; Defined at:
 27135 ;;		line 357 in file "Library/Types.c"
 27136 ;; Parameters:    Size  Location     Type
 27137 ;;  input           2    0[BANK0 ] PTR unsigned char 
 27138 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27139 ;;  length          2    2[BANK0 ] unsigned short 
 27140 ;; Auto vars:     Size  Location     Type
 27141 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 27142 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27143 ;;  tempVar         1    4[BANK0 ] unsigned char 
 27144 ;; Return value:  Size  Location     Type
 27145 ;;                  1    wreg      void 
 27146 ;; Registers used:
 27147 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27148 ;; Tracked objects:
 27149 ;;		On entry : 0/0
 27150 ;;		On exit  : 0/0
 27151 ;;		Unchanged: 0/0
 27152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27153 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27154 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27156 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27157 ;;Total ram usage:        7 bytes
 27158 ;; Hardware stack levels used:    1
 27159 ;; Hardware stack levels required when called:    7
 27160 ;; This function calls:
 27161 ;;		Nothing
 27162 ;; This function is called by:
 27163 ;;		_itos
 27164 ;; This function uses a non-reentrant model
 27165 ;;
 27166                           
 27167                           	psect	text142
 27168  0152C0                     __ptext142:
 27169                           	opt stack 0
 27170  0152C0                     _reverse:
 27171                           	opt stack 19
 27172                           
 27173                           ;Types.c: 359: char tempVar,
 27174                           ;Types.c: 360: *iterator = input + length;
 27175                           
 27176                           ; BSR set to: 0
 27177                           ;incstack = 0
 27178  0152C0  0100               	movlb	0	; () banked
 27179  0152C2  5162               	movf	reverse@length& (0+255),w,b
 27180  0152C4  2560               	addwf	reverse@input& (0+255),w,b
 27181  0152C6  6F65               	movwf	reverse@iterator& (0+255),b
 27182  0152C8  5163               	movf	(reverse@length+1)& (0+255),w,b
 27183  0152CA  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 27184  0152CC  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 27185                           
 27186                           ;Types.c: 362: while ( --iterator > input )
 27187  0152CE  D018               	goto	l921
 27188  0152D0                     
 27189                           ; BSR set to: 0
 27190                           ;Types.c: 363: {
 27191                           ;Types.c: 364: tempVar = *input;
 27192                           
 27193                           ; BSR set to: 0
 27194  0152D0  C060  FFD9         	movff	reverse@input,fsr2l
 27195  0152D4  C061  FFDA         	movff	reverse@input+1,fsr2h
 27196  0152D8  50DF               	movf	indf2,w,c
 27197  0152DA  6F64               	movwf	reverse@tempVar& (0+255),b
 27198                           
 27199                           ; BSR set to: 0
 27200                           ;Types.c: 365: *input++=*iterator;
 27201  0152DC  C065  FFD9         	movff	reverse@iterator,fsr2l
 27202  0152E0  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 27203  0152E4  C060  FFE1         	movff	reverse@input,fsr1l
 27204  0152E8  C061  FFE2         	movff	reverse@input+1,fsr1h
 27205  0152EC  CFDF FFE7          	movff	indf2,indf1
 27206                           
 27207                           ; BSR set to: 0
 27208  0152F0  4B60               	infsnz	reverse@input& (0+255),f,b
 27209  0152F2  2B61               	incf	(reverse@input+1)& (0+255),f,b
 27210                           
 27211                           ; BSR set to: 0
 27212                           ;Types.c: 366: *iterator=tempVar;
 27213  0152F4  C065  FFD9         	movff	reverse@iterator,fsr2l
 27214  0152F8  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 27215  0152FC  C064  FFDF         	movff	reverse@tempVar,indf2
 27216  015300                     l921:
 27217                           
 27218                           ; BSR set to: 0
 27219                           
 27220                           ; BSR set to: 0
 27221  015300  0765               	decf	reverse@iterator& (0+255),f,b
 27222  015302  A0D8               	btfss	status,0,c
 27223  015304  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 27224  015306  5165               	movf	reverse@iterator& (0+255),w,b
 27225  015308  5D60               	subwf	reverse@input& (0+255),w,b
 27226  01530A  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 27227  01530C  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 27228  01530E  B0D8               	btfsc	status,0,c
 27229  015310  0012               	return	
 27230  015312  D7DE               	goto	l922
 27231  015314                     __end_of_reverse:
 27232                           	opt stack 0
 27233                           tosu	equ	0xFFF
 27234                           tosh	equ	0xFFE
 27235                           tosl	equ	0xFFD
 27236                           pclath	equ	0xFFA
 27237                           tblptru	equ	0xFF8
 27238                           tblptrh	equ	0xFF7
 27239                           tblptrl	equ	0xFF6
 27240                           tablat	equ	0xFF5
 27241                           prodh	equ	0xFF4
 27242                           prodl	equ	0xFF3
 27243                           intcon	equ	0xFF2
 27244                           indf0	equ	0xFEF
 27245                           postinc0	equ	0xFEE
 27246                           fsr0h	equ	0xFEA
 27247                           fsr0l	equ	0xFE9
 27248                           wreg	equ	0xFE8
 27249                           indf1	equ	0xFE7
 27250                           postdec1	equ	0xFE5
 27251                           fsr1h	equ	0xFE2
 27252                           fsr1l	equ	0xFE1
 27253                           indf2	equ	0xFDF
 27254                           postinc2	equ	0xFDE
 27255                           postdec2	equ	0xFDD
 27256                           plusw2	equ	0xFDB
 27257                           fsr2h	equ	0xFDA
 27258                           fsr2l	equ	0xFD9
 27259                           status	equ	0xFD8
 27260                           
 27261 ;; *************** function ___lwmod *****************
 27262 ;; Defined at:
 27263 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 27264 ;; Parameters:    Size  Location     Type
 27265 ;;  dividend        2    7[BANK0 ] unsigned int 
 27266 ;;  divisor         2    9[BANK0 ] unsigned int 
 27267 ;; Auto vars:     Size  Location     Type
 27268 ;;  counter         1   11[BANK0 ] unsigned char 
 27269 ;; Return value:  Size  Location     Type
 27270 ;;                  2    7[BANK0 ] unsigned int 
 27271 ;; Registers used:
 27272 ;;		wreg, status,2, status,0
 27273 ;; Tracked objects:
 27274 ;;		On entry : 0/0
 27275 ;;		On exit  : 0/0
 27276 ;;		Unchanged: 0/0
 27277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27278 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27281 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27282 ;;Total ram usage:        5 bytes
 27283 ;; Hardware stack levels used:    1
 27284 ;; Hardware stack levels required when called:    7
 27285 ;; This function calls:
 27286 ;;		Nothing
 27287 ;; This function is called by:
 27288 ;;		_itos
 27289 ;;		_printf
 27290 ;; This function uses a non-reentrant model
 27291 ;;
 27292                           
 27293                           	psect	text143
 27294  015740                     __ptext143:
 27295                           	opt stack 0
 27296  015740                     ___lwmod:
 27297                           	opt stack 22
 27298                           
 27299                           ; BSR set to: 0
 27300                           ;incstack = 0
 27301  015740  0100               	movlb	0	; () banked
 27302  015742  5169               	movf	___lwmod@divisor& (0+255),w,b
 27303  015744  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27304  015746  B4D8               	btfsc	status,2,c
 27305  015748  D018               	goto	l2727
 27306                           
 27307                           ; BSR set to: 0
 27308  01574A  0E01               	movlw	1
 27309  01574C  6F6B               	movwf	___lwmod@counter& (0+255),b
 27310  01574E  D004               	goto	l2722
 27311  015750                     
 27312                           ; BSR set to: 0
 27313                           
 27314                           ; BSR set to: 0
 27315  015750  90D8               	bcf	status,0,c
 27316  015752  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 27317  015754  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27318  015756  2B6B               	incf	___lwmod@counter& (0+255),f,b
 27319  015758                     l2722:
 27320                           
 27321                           ; BSR set to: 0
 27322                           
 27323                           ; BSR set to: 0
 27324  015758  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27325  01575A  D7FA               	goto	l2723
 27326  01575C                     u10530:
 27327                           
 27328                           ; BSR set to: 0
 27329                           
 27330                           ; BSR set to: 0
 27331                           
 27332                           ; BSR set to: 0
 27333  01575C  5169               	movf	___lwmod@divisor& (0+255),w,b
 27334  01575E  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 27335  015760  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27336  015762  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27337  015764  A0D8               	btfss	status,0,c
 27338  015766  D004               	goto	l2726
 27339                           
 27340                           ; BSR set to: 0
 27341  015768  5169               	movf	___lwmod@divisor& (0+255),w,b
 27342  01576A  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 27343  01576C  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27344  01576E  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27345  015770                     l2726:
 27346                           
 27347                           ; BSR set to: 0
 27348                           
 27349                           ; BSR set to: 0
 27350  015770  90D8               	bcf	status,0,c
 27351  015772  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27352  015774  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 27353                           
 27354                           ; BSR set to: 0
 27355  015776  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 27356  015778  D7F1               	goto	u10530
 27357  01577A                     l2727:
 27358                           
 27359                           ; BSR set to: 0
 27360                           
 27361                           ; BSR set to: 0
 27362  01577A  C067  F067         	movff	___lwmod@dividend,?___lwmod
 27363  01577E  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 27364                           
 27365                           ; BSR set to: 0
 27366  015782  0012               	return		;funcret
 27367  015784                     __end_of___lwmod:
 27368                           	opt stack 0
 27369                           tosu	equ	0xFFF
 27370                           tosh	equ	0xFFE
 27371                           tosl	equ	0xFFD
 27372                           pclath	equ	0xFFA
 27373                           tblptru	equ	0xFF8
 27374                           tblptrh	equ	0xFF7
 27375                           tblptrl	equ	0xFF6
 27376                           tablat	equ	0xFF5
 27377                           prodh	equ	0xFF4
 27378                           prodl	equ	0xFF3
 27379                           intcon	equ	0xFF2
 27380                           indf0	equ	0xFEF
 27381                           postinc0	equ	0xFEE
 27382                           fsr0h	equ	0xFEA
 27383                           fsr0l	equ	0xFE9
 27384                           wreg	equ	0xFE8
 27385                           indf1	equ	0xFE7
 27386                           postdec1	equ	0xFE5
 27387                           fsr1h	equ	0xFE2
 27388                           fsr1l	equ	0xFE1
 27389                           indf2	equ	0xFDF
 27390                           postinc2	equ	0xFDE
 27391                           postdec2	equ	0xFDD
 27392                           plusw2	equ	0xFDB
 27393                           fsr2h	equ	0xFDA
 27394                           fsr2l	equ	0xFD9
 27395                           status	equ	0xFD8
 27396                           
 27397 ;; *************** function ___lwdiv *****************
 27398 ;; Defined at:
 27399 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 27400 ;; Parameters:    Size  Location     Type
 27401 ;;  dividend        2    0[BANK0 ] unsigned int 
 27402 ;;  divisor         2    2[BANK0 ] unsigned int 
 27403 ;; Auto vars:     Size  Location     Type
 27404 ;;  quotient        2    5[BANK0 ] unsigned int 
 27405 ;;  counter         1    4[BANK0 ] unsigned char 
 27406 ;; Return value:  Size  Location     Type
 27407 ;;                  2    0[BANK0 ] unsigned int 
 27408 ;; Registers used:
 27409 ;;		wreg, status,2, status,0
 27410 ;; Tracked objects:
 27411 ;;		On entry : 0/0
 27412 ;;		On exit  : 0/0
 27413 ;;		Unchanged: 0/0
 27414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27415 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27416 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27418 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27419 ;;Total ram usage:        7 bytes
 27420 ;; Hardware stack levels used:    1
 27421 ;; Hardware stack levels required when called:    7
 27422 ;; This function calls:
 27423 ;;		Nothing
 27424 ;; This function is called by:
 27425 ;;		_itos
 27426 ;;		_printf
 27427 ;; This function uses a non-reentrant model
 27428 ;;
 27429                           
 27430                           	psect	text144
 27431  015314                     __ptext144:
 27432                           	opt stack 0
 27433  015314                     ___lwdiv:
 27434                           	opt stack 22
 27435                           
 27436                           ; BSR set to: 0
 27437                           ;incstack = 0
 27438  015314  0E00               	movlw	0
 27439  015316  0100               	movlb	0	; () banked
 27440  015318  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 27441  01531A  0E00               	movlw	0
 27442  01531C  6F65               	movwf	___lwdiv@quotient& (0+255),b
 27443                           
 27444                           ; BSR set to: 0
 27445  01531E  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27446  015320  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 27447  015322  B4D8               	btfsc	status,2,c
 27448  015324  D01C               	goto	l2717
 27449                           
 27450                           ; BSR set to: 0
 27451  015326  0E01               	movlw	1
 27452  015328  6F64               	movwf	___lwdiv@counter& (0+255),b
 27453  01532A  D004               	goto	l2712
 27454  01532C                     
 27455                           ; BSR set to: 0
 27456                           
 27457                           ; BSR set to: 0
 27458  01532C  90D8               	bcf	status,0,c
 27459  01532E  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 27460  015330  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 27461  015332  2B64               	incf	___lwdiv@counter& (0+255),f,b
 27462  015334                     l2712:
 27463                           
 27464                           ; BSR set to: 0
 27465                           
 27466                           ; BSR set to: 0
 27467  015334  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 27468  015336  D7FA               	goto	l2713
 27469  015338                     u10500:
 27470                           
 27471                           ; BSR set to: 0
 27472                           
 27473                           ; BSR set to: 0
 27474                           
 27475                           ; BSR set to: 0
 27476  015338  90D8               	bcf	status,0,c
 27477  01533A  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 27478  01533C  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 27479                           
 27480                           ; BSR set to: 0
 27481  01533E  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27482  015340  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 27483  015342  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27484  015344  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 27485  015346  A0D8               	btfss	status,0,c
 27486  015348  D005               	goto	l2716
 27487                           
 27488                           ; BSR set to: 0
 27489  01534A  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27490  01534C  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 27491  01534E  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27492  015350  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 27493                           
 27494                           ; BSR set to: 0
 27495  015352  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 27496  015354                     l2716:
 27497                           
 27498                           ; BSR set to: 0
 27499                           
 27500                           ; BSR set to: 0
 27501  015354  90D8               	bcf	status,0,c
 27502  015356  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 27503  015358  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 27504                           
 27505                           ; BSR set to: 0
 27506  01535A  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 27507  01535C  D7ED               	goto	u10500
 27508  01535E                     l2717:
 27509                           
 27510                           ; BSR set to: 0
 27511                           
 27512                           ; BSR set to: 0
 27513  01535E  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 27514  015362  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 27515                           
 27516                           ; BSR set to: 0
 27517  015366  0012               	return		;funcret
 27518  015368                     __end_of___lwdiv:
 27519                           	opt stack 0
 27520                           tosu	equ	0xFFF
 27521                           tosh	equ	0xFFE
 27522                           tosl	equ	0xFFD
 27523                           pclath	equ	0xFFA
 27524                           tblptru	equ	0xFF8
 27525                           tblptrh	equ	0xFF7
 27526                           tblptrl	equ	0xFF6
 27527                           tablat	equ	0xFF5
 27528                           prodh	equ	0xFF4
 27529                           prodl	equ	0xFF3
 27530                           intcon	equ	0xFF2
 27531                           indf0	equ	0xFEF
 27532                           postinc0	equ	0xFEE
 27533                           fsr0h	equ	0xFEA
 27534                           fsr0l	equ	0xFE9
 27535                           wreg	equ	0xFE8
 27536                           indf1	equ	0xFE7
 27537                           postdec1	equ	0xFE5
 27538                           fsr1h	equ	0xFE2
 27539                           fsr1l	equ	0xFE1
 27540                           indf2	equ	0xFDF
 27541                           postinc2	equ	0xFDE
 27542                           postdec2	equ	0xFDD
 27543                           plusw2	equ	0xFDB
 27544                           fsr2h	equ	0xFDA
 27545                           fsr2l	equ	0xFD9
 27546                           status	equ	0xFD8
 27547                           
 27548 ;; *************** function _HMI_SetSegments *****************
 27549 ;; Defined at:
 27550 ;;		line 226 in file "HMI.c"
 27551 ;; Parameters:    Size  Location     Type
 27552 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 27553 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27554 ;; Auto vars:     Size  Location     Type
 27555 ;;  in              2    4[BANK0 ] unsigned short 
 27556 ;; Return value:  Size  Location     Type
 27557 ;;                  1    wreg      void 
 27558 ;; Registers used:
 27559 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27560 ;; Tracked objects:
 27561 ;;		On entry : 0/0
 27562 ;;		On exit  : 0/0
 27563 ;;		Unchanged: 0/0
 27564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27565 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27566 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27567 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27568 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27569 ;;Total ram usage:        5 bytes
 27570 ;; Hardware stack levels used:    1
 27571 ;; Hardware stack levels required when called:    8
 27572 ;; This function calls:
 27573 ;;		_ToSegment
 27574 ;; This function is called by:
 27575 ;;		_HMI_SetNumber
 27576 ;; This function uses a non-reentrant model
 27577 ;;
 27578                           
 27579                           	psect	text145
 27580  01437E                     __ptext145:
 27581                           	opt stack 0
 27582  01437E                     _HMI_SetSegments:
 27583                           	opt stack 19
 27584                           
 27585                           ;HMI.c: 228: UINT16 in=0;
 27586                           
 27587                           ; BSR set to: 0
 27588                           ;incstack = 0
 27589  01437E  0E00               	movlw	0
 27590  014380  0100               	movlb	0	; () banked
 27591  014382  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 27592  014384  0E00               	movlw	0
 27593  014386  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 27594                           
 27595                           ;HMI.c: 229: while(*pString)
 27596  014388  D02E               	goto	l1202
 27597  01438A                     
 27598                           ; BSR set to: 0
 27599                           ;HMI.c: 230: {
 27600                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 27601                           
 27602                           ; BSR set to: 0
 27603  01438A  0E48               	movlw	low _HMIBoard
 27604  01438C  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27605  01438E  6ED9               	movwf	fsr2l,c
 27606  014390  0E01               	movlw	high _HMIBoard
 27607  014392  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27608  014394  6EDA               	movwf	fsr2h,c
 27609  014396  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 27610  01439A  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 27611  01439E  50E7               	movf	indf1,w,c
 27612  0143A0  EC1C  F08D         	call	_ToSegment
 27613  0143A4  6EDF               	movwf	indf2,c
 27614                           
 27615                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 27616  0143A6  0E48               	movlw	low _HMIBoard
 27617  0143A8  0100               	movlb	0	; () banked
 27618  0143AA  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27619  0143AC  6ED9               	movwf	fsr2l,c
 27620  0143AE  0E01               	movlw	high _HMIBoard
 27621  0143B0  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27622  0143B2  6EDA               	movwf	fsr2h,c
 27623  0143B4  0E80               	movlw	128
 27624  0143B6  18DE               	xorwf	postinc2,w,c
 27625  0143B8  A4D8               	btfss	status,2,c
 27626  0143BA  D00B               	goto	l1201
 27627                           
 27628                           ; BSR set to: 0
 27629                           ;HMI.c: 234: {
 27630                           ;HMI.c: 235: in--;
 27631  0143BC  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 27632  0143BE  A0D8               	btfss	status,0,c
 27633  0143C0  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 27634                           
 27635                           ; BSR set to: 0
 27636                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 27637  0143C2  0E48               	movlw	low _HMIBoard
 27638  0143C4  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27639  0143C6  6ED9               	movwf	fsr2l,c
 27640  0143C8  0E01               	movlw	high _HMIBoard
 27641  0143CA  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27642  0143CC  6EDA               	movwf	fsr2h,c
 27643  0143CE  0E00               	movlw	0
 27644  0143D0  8EDB               	bsf	plusw2,7,c
 27645  0143D2                     l1201:
 27646                           
 27647                           ; BSR set to: 0
 27648                           ;HMI.c: 237: }
 27649                           ;HMI.c: 239: pString++;
 27650                           
 27651                           ; BSR set to: 0
 27652  0143D2  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 27653  0143D4  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 27654                           
 27655                           ; BSR set to: 0
 27656                           ;HMI.c: 240: in++;
 27657  0143D6  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27658  0143D8  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27659                           
 27660                           ; BSR set to: 0
 27661                           ;HMI.c: 241: if (in>=6)
 27662  0143DA  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27663  0143DC  E116               	bnz	l13565
 27664  0143DE  0E06               	movlw	6
 27665  0143E0  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27666  0143E2  B0D8               	btfsc	status,0,c
 27667  0143E4  D012               	goto	l1204
 27668  0143E6                     l1202:
 27669                           
 27670                           ; BSR set to: 0
 27671                           
 27672                           ; BSR set to: 0
 27673                           
 27674                           ; BSR set to: 0
 27675  0143E6  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 27676  0143EA  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 27677  0143EE  50DF               	movf	indf2,w,c
 27678  0143F0  B4D8               	btfsc	status,2,c
 27679  0143F2  D00B               	goto	l1204
 27680  0143F4  D7CA               	goto	l1200
 27681  0143F6                     
 27682                           ; BSR set to: 0
 27683                           ;HMI.c: 245: {
 27684                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 27685                           
 27686                           ; BSR set to: 0
 27687  0143F6  0E48               	movlw	low _HMIBoard
 27688  0143F8  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27689  0143FA  6ED9               	movwf	fsr2l,c
 27690  0143FC  0E01               	movlw	high _HMIBoard
 27691  0143FE  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27692  014400  6EDA               	movwf	fsr2h,c
 27693  014402  0E00               	movlw	0
 27694  014404  6EDF               	movwf	indf2,c
 27695                           
 27696                           ; BSR set to: 0
 27697                           ;HMI.c: 247: in++;
 27698  014406  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27699  014408  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27700  01440A                     l1204:
 27701  01440A                     l13565:
 27702                           
 27703                           ; BSR set to: 0
 27704  01440A  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27705  01440C  E105               	bnz	l1207
 27706  01440E  0E06               	movlw	6
 27707  014410  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27708  014412  B0D8               	btfsc	status,0,c
 27709  014414  0012               	return	
 27710  014416  D7EF               	goto	l1205
 27711  014418                     l1207:
 27712                           
 27713                           ; BSR set to: 0
 27714  014418  0012               	return		;funcret
 27715  01441A                     __end_of_HMI_SetSegments:
 27716                           	opt stack 0
 27717                           tosu	equ	0xFFF
 27718                           tosh	equ	0xFFE
 27719                           tosl	equ	0xFFD
 27720                           pclath	equ	0xFFA
 27721                           tblptru	equ	0xFF8
 27722                           tblptrh	equ	0xFF7
 27723                           tblptrl	equ	0xFF6
 27724                           tablat	equ	0xFF5
 27725                           prodh	equ	0xFF4
 27726                           prodl	equ	0xFF3
 27727                           intcon	equ	0xFF2
 27728                           indf0	equ	0xFEF
 27729                           postinc0	equ	0xFEE
 27730                           fsr0h	equ	0xFEA
 27731                           fsr0l	equ	0xFE9
 27732                           wreg	equ	0xFE8
 27733                           indf1	equ	0xFE7
 27734                           postdec1	equ	0xFE5
 27735                           fsr1h	equ	0xFE2
 27736                           fsr1l	equ	0xFE1
 27737                           indf2	equ	0xFDF
 27738                           postinc2	equ	0xFDE
 27739                           postdec2	equ	0xFDD
 27740                           plusw2	equ	0xFDB
 27741                           fsr2h	equ	0xFDA
 27742                           fsr2l	equ	0xFD9
 27743                           status	equ	0xFD8
 27744                           
 27745 ;; *************** function _ToSegment *****************
 27746 ;; Defined at:
 27747 ;;		line 284 in file "Library/Types.c"
 27748 ;; Parameters:    Size  Location     Type
 27749 ;;  pCHR            1    wreg     unsigned char 
 27750 ;; Auto vars:     Size  Location     Type
 27751 ;;  pCHR            1    0[BANK0 ] unsigned char 
 27752 ;; Return value:  Size  Location     Type
 27753 ;;                  1    wreg      unsigned char 
 27754 ;; Registers used:
 27755 ;;		wreg, status,2, status,0
 27756 ;; Tracked objects:
 27757 ;;		On entry : 0/0
 27758 ;;		On exit  : 0/0
 27759 ;;		Unchanged: 0/0
 27760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27762 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27764 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27765 ;;Total ram usage:        1 bytes
 27766 ;; Hardware stack levels used:    1
 27767 ;; Hardware stack levels required when called:    7
 27768 ;; This function calls:
 27769 ;;		Nothing
 27770 ;; This function is called by:
 27771 ;;		_HMI_SetSegments
 27772 ;; This function uses a non-reentrant model
 27773 ;;
 27774                           
 27775                           	psect	text146
 27776  011A38                     __ptext146:
 27777                           	opt stack 0
 27778  011A38                     _ToSegment:
 27779                           	opt stack 19
 27780                           
 27781                           ; BSR set to: 0
 27782                           ;incstack = 0
 27783                           ;ToSegment@pCHR stored from wreg
 27784  011A38  0100               	movlb	0	; () banked
 27785  011A3A  6F60               	movwf	ToSegment@pCHR& (0+255),b
 27786                           
 27787                           ;Types.c: 286: switch(pCHR)
 27788  011A3C  D07E               	goto	l853
 27789  011A3E  0E3F               	movlw	63
 27790  011A40  0012               	return	
 27791  011A42  0E06               	movlw	6
 27792  011A44  0012               	return	
 27793  011A46  0E5B               	movlw	91
 27794  011A48  0012               	return	
 27795  011A4A  0E4F               	movlw	79
 27796  011A4C  0012               	return	
 27797  011A4E  0E66               	movlw	102
 27798  011A50  0012               	return	
 27799  011A52  0E6D               	movlw	109
 27800  011A54  0012               	return	
 27801  011A56  0E7D               	movlw	125
 27802  011A58  0012               	return	
 27803  011A5A  0E07               	movlw	7
 27804  011A5C  0012               	return	
 27805  011A5E  0E7F               	movlw	127
 27806  011A60  0012               	return	
 27807  011A62  0E6F               	movlw	111
 27808  011A64  0012               	return	
 27809  011A66  0E5F               	movlw	95
 27810  011A68  0012               	return	
 27811  011A6A  0E7C               	movlw	124
 27812  011A6C  0012               	return	
 27813  011A6E  0E58               	movlw	88
 27814  011A70  0012               	return	
 27815  011A72  0E5E               	movlw	94
 27816  011A74  0012               	return	
 27817  011A76  0E7B               	movlw	123
 27818  011A78  0012               	return	
 27819  011A7A  0E71               	movlw	113
 27820  011A7C  0012               	return	
 27821  011A7E  0E6F               	movlw	111
 27822  011A80  0012               	return	
 27823  011A82  0E74               	movlw	116
 27824  011A84  0012               	return	
 27825  011A86  0E04               	movlw	4
 27826  011A88  0012               	return	
 27827  011A8A  0E0E               	movlw	14
 27828  011A8C  0012               	return	
 27829  011A8E  0E7A               	movlw	122
 27830  011A90  0012               	return	
 27831  011A92  0E06               	movlw	6
 27832  011A94  0012               	return	
 27833  011A96  0E14               	movlw	20
 27834  011A98  0012               	return	
 27835  011A9A  0E54               	movlw	84
 27836  011A9C  0012               	return	
 27837  011A9E  0E5C               	movlw	92
 27838  011AA0  0012               	return	
 27839  011AA2  0E73               	movlw	115
 27840  011AA4  0012               	return	
 27841  011AA6  0E67               	movlw	103
 27842  011AA8  0012               	return	
 27843  011AAA  0E50               	movlw	80
 27844  011AAC  0012               	return	
 27845  011AAE  0E6D               	movlw	109
 27846  011AB0  0012               	return	
 27847  011AB2  0E78               	movlw	120
 27848  011AB4  0012               	return	
 27849  011AB6  0E1C               	movlw	28
 27850  011AB8  0012               	return	
 27851  011ABA  0E62               	movlw	98
 27852  011ABC  0012               	return	
 27853  011ABE  0E2A               	movlw	42
 27854  011AC0  0012               	return	
 27855  011AC2  0E64               	movlw	100
 27856  011AC4  0012               	return	
 27857  011AC6  0E6E               	movlw	110
 27858  011AC8  0012               	return	
 27859  011ACA  0E5B               	movlw	91
 27860  011ACC  0012               	return	
 27861  011ACE  0E77               	movlw	119
 27862  011AD0  0012               	return	
 27863  011AD2  0E7F               	movlw	127
 27864  011AD4  0012               	return	
 27865  011AD6  0E39               	movlw	57
 27866  011AD8  0012               	return	
 27867  011ADA  0E3F               	movlw	63
 27868  011ADC  0012               	return	
 27869  011ADE  0E79               	movlw	121
 27870  011AE0  0012               	return	
 27871  011AE2  0E71               	movlw	113
 27872  011AE4  0012               	return	
 27873  011AE6  0E3D               	movlw	61
 27874  011AE8  0012               	return	
 27875  011AEA  0E76               	movlw	118
 27876  011AEC  0012               	return	
 27877  011AEE  0E06               	movlw	6
 27878  011AF0  0012               	return	
 27879  011AF2  0E1E               	movlw	30
 27880  011AF4  0012               	return	
 27881  011AF6  0E57               	movlw	87
 27882  011AF8  0012               	return	
 27883  011AFA  0E38               	movlw	56
 27884  011AFC  0012               	return	
 27885  011AFE  0E76               	movlw	118
 27886  011B00  0012               	return	
 27887  011B02  0E76               	movlw	118
 27888  011B04  0012               	return	
 27889  011B06  0E3F               	movlw	63
 27890  011B08  0012               	return	
 27891  011B0A  0E73               	movlw	115
 27892  011B0C  0012               	return	
 27893  011B0E  0E3F               	movlw	63
 27894  011B10  0012               	return	
 27895  011B12  0E77               	movlw	119
 27896  011B14  0012               	return	
 27897  011B16  0E6D               	movlw	109
 27898  011B18  0012               	return	
 27899  011B1A  0E31               	movlw	49
 27900  011B1C  0012               	return	
 27901  011B1E  0E3E               	movlw	62
 27902  011B20  0012               	return	
 27903  011B22  0E3E               	movlw	62
 27904  011B24  0012               	return	
 27905  011B26  0E7E               	movlw	126
 27906  011B28  0012               	return	
 27907  011B2A  0E76               	movlw	118
 27908  011B2C  0012               	return	
 27909  011B2E  0E66               	movlw	102
 27910  011B30  0012               	return	
 27911  011B32  0E5B               	movlw	91
 27912  011B34  0012               	return	
 27913  011B36  0E80               	movlw	128
 27914  011B38  0012               	return	
 27915  011B3A                     l853:
 27916  011B3A  0100               	movlb	0	; () banked
 27917  011B3C  5160               	movf	ToSegment@pCHR& (0+255),w,b
 27918                           
 27919                           ; Switch size 1, requested type "space"
 27920                           ; Number of cases is 63, Range of values is 46 to 122
 27921                           ; switch strategies available:
 27922                           ; Name         Instructions Cycles
 27923                           ; simple_byte          190    96 (average)
 27924                           ;	Chosen strategy is simple_byte
 27925  011B3E  0A2E               	xorlw	46	; case 46
 27926  011B40  B4D8               	btfsc	status,2,c
 27927  011B42  D7F9               	goto	l917
 27928  011B44  0A1E               	xorlw	30	; case 48
 27929  011B46  B4D8               	btfsc	status,2,c
 27930  011B48  D77A               	goto	l854
 27931  011B4A  0A01               	xorlw	1	; case 49
 27932  011B4C  B4D8               	btfsc	status,2,c
 27933  011B4E  D779               	goto	l856
 27934  011B50  0A03               	xorlw	3	; case 50
 27935  011B52  B4D8               	btfsc	status,2,c
 27936  011B54  D778               	goto	l857
 27937  011B56  0A01               	xorlw	1	; case 51
 27938  011B58  B4D8               	btfsc	status,2,c
 27939  011B5A  D777               	goto	l858
 27940  011B5C  0A07               	xorlw	7	; case 52
 27941  011B5E  B4D8               	btfsc	status,2,c
 27942  011B60  D776               	goto	l859
 27943  011B62  0A01               	xorlw	1	; case 53
 27944  011B64  B4D8               	btfsc	status,2,c
 27945  011B66  D775               	goto	l860
 27946  011B68  0A03               	xorlw	3	; case 54
 27947  011B6A  B4D8               	btfsc	status,2,c
 27948  011B6C  D774               	goto	l861
 27949  011B6E  0A01               	xorlw	1	; case 55
 27950  011B70  B4D8               	btfsc	status,2,c
 27951  011B72  D773               	goto	l862
 27952  011B74  0A0F               	xorlw	15	; case 56
 27953  011B76  B4D8               	btfsc	status,2,c
 27954  011B78  D772               	goto	l863
 27955  011B7A  0A01               	xorlw	1	; case 57
 27956  011B7C  B4D8               	btfsc	status,2,c
 27957  011B7E  D771               	goto	l864
 27958  011B80  0A78               	xorlw	120	; case 65
 27959  011B82  B4D8               	btfsc	status,2,c
 27960  011B84  D7A4               	goto	l891
 27961  011B86  0A03               	xorlw	3	; case 66
 27962  011B88  B4D8               	btfsc	status,2,c
 27963  011B8A  D7A3               	goto	l892
 27964  011B8C  0A01               	xorlw	1	; case 67
 27965  011B8E  B4D8               	btfsc	status,2,c
 27966  011B90  D7A2               	goto	l893
 27967  011B92  0A07               	xorlw	7	; case 68
 27968  011B94  B4D8               	btfsc	status,2,c
 27969  011B96  D7A1               	goto	l894
 27970  011B98  0A01               	xorlw	1	; case 69
 27971  011B9A  B4D8               	btfsc	status,2,c
 27972  011B9C  D7A0               	goto	l895
 27973  011B9E  0A03               	xorlw	3	; case 70
 27974  011BA0  B4D8               	btfsc	status,2,c
 27975  011BA2  D79F               	goto	l896
 27976  011BA4  0A01               	xorlw	1	; case 71
 27977  011BA6  B4D8               	btfsc	status,2,c
 27978  011BA8  D79E               	goto	l897
 27979  011BAA  0A0F               	xorlw	15	; case 72
 27980  011BAC  B4D8               	btfsc	status,2,c
 27981  011BAE  D79D               	goto	l898
 27982  011BB0  0A01               	xorlw	1	; case 73
 27983  011BB2  B4D8               	btfsc	status,2,c
 27984  011BB4  D79C               	goto	l899
 27985  011BB6  0A03               	xorlw	3	; case 74
 27986  011BB8  B4D8               	btfsc	status,2,c
 27987  011BBA  D79B               	goto	l900
 27988  011BBC  0A01               	xorlw	1	; case 75
 27989  011BBE  B4D8               	btfsc	status,2,c
 27990  011BC0  D79A               	goto	l901
 27991  011BC2  0A07               	xorlw	7	; case 76
 27992  011BC4  B4D8               	btfsc	status,2,c
 27993  011BC6  D799               	goto	l902
 27994  011BC8  0A01               	xorlw	1	; case 77
 27995  011BCA  B4D8               	btfsc	status,2,c
 27996  011BCC  D798               	goto	l903
 27997  011BCE  0A03               	xorlw	3	; case 78
 27998  011BD0  B4D8               	btfsc	status,2,c
 27999  011BD2  D797               	goto	l904
 28000  011BD4  0A01               	xorlw	1	; case 79
 28001  011BD6  B4D8               	btfsc	status,2,c
 28002  011BD8  D796               	goto	l905
 28003  011BDA  0A1F               	xorlw	31	; case 80
 28004  011BDC  B4D8               	btfsc	status,2,c
 28005  011BDE  D795               	goto	l906
 28006  011BE0  0A01               	xorlw	1	; case 81
 28007  011BE2  B4D8               	btfsc	status,2,c
 28008  011BE4  D794               	goto	l907
 28009  011BE6  0A03               	xorlw	3	; case 82
 28010  011BE8  B4D8               	btfsc	status,2,c
 28011  011BEA  D793               	goto	l908
 28012  011BEC  0A01               	xorlw	1	; case 83
 28013  011BEE  B4D8               	btfsc	status,2,c
 28014  011BF0  D792               	goto	l909
 28015  011BF2  0A07               	xorlw	7	; case 84
 28016  011BF4  B4D8               	btfsc	status,2,c
 28017  011BF6  D791               	goto	l910
 28018  011BF8  0A01               	xorlw	1	; case 85
 28019  011BFA  B4D8               	btfsc	status,2,c
 28020  011BFC  D790               	goto	l911
 28021  011BFE  0A03               	xorlw	3	; case 86
 28022  011C00  B4D8               	btfsc	status,2,c
 28023  011C02  D78F               	goto	l912
 28024  011C04  0A01               	xorlw	1	; case 87
 28025  011C06  B4D8               	btfsc	status,2,c
 28026  011C08  D78E               	goto	l913
 28027  011C0A  0A0F               	xorlw	15	; case 88
 28028  011C0C  B4D8               	btfsc	status,2,c
 28029  011C0E  D78D               	goto	l914
 28030  011C10  0A01               	xorlw	1	; case 89
 28031  011C12  B4D8               	btfsc	status,2,c
 28032  011C14  D78C               	goto	l915
 28033  011C16  0A03               	xorlw	3	; case 90
 28034  011C18  B4D8               	btfsc	status,2,c
 28035  011C1A  D78B               	goto	l916
 28036  011C1C  0A3B               	xorlw	59	; case 97
 28037  011C1E  B4D8               	btfsc	status,2,c
 28038  011C20  D722               	goto	l865
 28039  011C22  0A03               	xorlw	3	; case 98
 28040  011C24  B4D8               	btfsc	status,2,c
 28041  011C26  D721               	goto	l866
 28042  011C28  0A01               	xorlw	1	; case 99
 28043  011C2A  B4D8               	btfsc	status,2,c
 28044  011C2C  D720               	goto	l867
 28045  011C2E  0A07               	xorlw	7	; case 100
 28046  011C30  B4D8               	btfsc	status,2,c
 28047  011C32  D71F               	goto	l868
 28048  011C34  0A01               	xorlw	1	; case 101
 28049  011C36  B4D8               	btfsc	status,2,c
 28050  011C38  D71E               	goto	l869
 28051  011C3A  0A03               	xorlw	3	; case 102
 28052  011C3C  B4D8               	btfsc	status,2,c
 28053  011C3E  D71D               	goto	l870
 28054  011C40  0A01               	xorlw	1	; case 103
 28055  011C42  B4D8               	btfsc	status,2,c
 28056  011C44  D71C               	goto	l871
 28057  011C46  0A0F               	xorlw	15	; case 104
 28058  011C48  B4D8               	btfsc	status,2,c
 28059  011C4A  D71B               	goto	l872
 28060  011C4C  0A01               	xorlw	1	; case 105
 28061  011C4E  B4D8               	btfsc	status,2,c
 28062  011C50  D71A               	goto	l873
 28063  011C52  0A03               	xorlw	3	; case 106
 28064  011C54  B4D8               	btfsc	status,2,c
 28065  011C56  D719               	goto	l874
 28066  011C58  0A01               	xorlw	1	; case 107
 28067  011C5A  B4D8               	btfsc	status,2,c
 28068  011C5C  D718               	goto	l875
 28069  011C5E  0A07               	xorlw	7	; case 108
 28070  011C60  B4D8               	btfsc	status,2,c
 28071  011C62  D717               	goto	l876
 28072  011C64  0A01               	xorlw	1	; case 109
 28073  011C66  B4D8               	btfsc	status,2,c
 28074  011C68  D716               	goto	l877
 28075  011C6A  0A03               	xorlw	3	; case 110
 28076  011C6C  B4D8               	btfsc	status,2,c
 28077  011C6E  D715               	goto	l878
 28078  011C70  0A01               	xorlw	1	; case 111
 28079  011C72  B4D8               	btfsc	status,2,c
 28080  011C74  D714               	goto	l879
 28081  011C76  0A1F               	xorlw	31	; case 112
 28082  011C78  B4D8               	btfsc	status,2,c
 28083  011C7A  D713               	goto	l880
 28084  011C7C  0A01               	xorlw	1	; case 113
 28085  011C7E  B4D8               	btfsc	status,2,c
 28086  011C80  D712               	goto	l881
 28087  011C82  0A03               	xorlw	3	; case 114
 28088  011C84  B4D8               	btfsc	status,2,c
 28089  011C86  D711               	goto	l882
 28090  011C88  0A01               	xorlw	1	; case 115
 28091  011C8A  B4D8               	btfsc	status,2,c
 28092  011C8C  D710               	goto	l883
 28093  011C8E  0A07               	xorlw	7	; case 116
 28094  011C90  B4D8               	btfsc	status,2,c
 28095  011C92  D70F               	goto	l884
 28096  011C94  0A01               	xorlw	1	; case 117
 28097  011C96  B4D8               	btfsc	status,2,c
 28098  011C98  D70E               	goto	l885
 28099  011C9A  0A03               	xorlw	3	; case 118
 28100  011C9C  B4D8               	btfsc	status,2,c
 28101  011C9E  D70D               	goto	l886
 28102  011CA0  0A01               	xorlw	1	; case 119
 28103  011CA2  B4D8               	btfsc	status,2,c
 28104  011CA4  D70C               	goto	l887
 28105  011CA6  0A0F               	xorlw	15	; case 120
 28106  011CA8  B4D8               	btfsc	status,2,c
 28107  011CAA  D70B               	goto	l888
 28108  011CAC  0A01               	xorlw	1	; case 121
 28109  011CAE  B4D8               	btfsc	status,2,c
 28110  011CB0  D70A               	goto	l889
 28111  011CB2  0A03               	xorlw	3	; case 122
 28112  011CB4  B4D8               	btfsc	status,2,c
 28113  011CB6  D709               	goto	l890
 28114                           
 28115                           ;Types.c: 354: return 0;
 28116                           
 28117                           ; BSR set to: 0
 28118  011CB8  0E00               	movlw	0
 28119  011CBA  0012               	return	
 28120  011CBC                     __end_of_ToSegment:
 28121                           	opt stack 0
 28122                           tosu	equ	0xFFF
 28123                           tosh	equ	0xFFE
 28124                           tosl	equ	0xFFD
 28125                           pclath	equ	0xFFA
 28126                           tblptru	equ	0xFF8
 28127                           tblptrh	equ	0xFF7
 28128                           tblptrl	equ	0xFF6
 28129                           tablat	equ	0xFF5
 28130                           prodh	equ	0xFF4
 28131                           prodl	equ	0xFF3
 28132                           intcon	equ	0xFF2
 28133                           indf0	equ	0xFEF
 28134                           postinc0	equ	0xFEE
 28135                           fsr0h	equ	0xFEA
 28136                           fsr0l	equ	0xFE9
 28137                           wreg	equ	0xFE8
 28138                           indf1	equ	0xFE7
 28139                           postdec1	equ	0xFE5
 28140                           fsr1h	equ	0xFE2
 28141                           fsr1l	equ	0xFE1
 28142                           indf2	equ	0xFDF
 28143                           postinc2	equ	0xFDE
 28144                           postdec2	equ	0xFDD
 28145                           plusw2	equ	0xFDB
 28146                           fsr2h	equ	0xFDA
 28147                           fsr2l	equ	0xFD9
 28148                           status	equ	0xFD8
 28149                           
 28150 ;; *************** function _HMI_Render *****************
 28151 ;; Defined at:
 28152 ;;		line 138 in file "HMI.c"
 28153 ;; Parameters:    Size  Location     Type
 28154 ;;		None
 28155 ;; Auto vars:     Size  Location     Type
 28156 ;;  a               2    8[BANK0 ] unsigned short 
 28157 ;; Return value:  Size  Location     Type
 28158 ;;                  1    wreg      void 
 28159 ;; Registers used:
 28160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28161 ;; Tracked objects:
 28162 ;;		On entry : 0/0
 28163 ;;		On exit  : 0/0
 28164 ;;		Unchanged: 0/0
 28165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28167 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28169 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28170 ;;Total ram usage:        2 bytes
 28171 ;; Hardware stack levels used:    1
 28172 ;; Hardware stack levels required when called:    9
 28173 ;; This function calls:
 28174 ;;		_OutSeg
 28175 ;; This function is called by:
 28176 ;;		_ADCAverage
 28177 ;;		_main
 28178 ;; This function uses a non-reentrant model
 28179 ;;
 28180                           
 28181                           	psect	text147
 28182  015A24                     __ptext147:
 28183                           	opt stack 0
 28184  015A24                     _HMI_Render:
 28185                           	opt stack 19
 28186                           
 28187                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 28188                           
 28189                           ;incstack = 0
 28190  015A24  0E00               	movlw	0
 28191  015A26  0100               	movlb	0	; () banked
 28192  015A28  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 28193  015A2A  0E00               	movlw	0
 28194  015A2C  6F68               	movwf	HMI_Render@a& (0+255),b
 28195  015A2E                     l14539:
 28196                           
 28197                           ; BSR set to: 0
 28198  015A2E  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 28199  015A30  E113               	bnz	l1158
 28200  015A32  0E08               	movlw	8
 28201  015A34  5D68               	subwf	HMI_Render@a& (0+255),w,b
 28202  015A36  B0D8               	btfsc	status,0,c
 28203  015A38  0012               	return	
 28204                           
 28205                           ; BSR set to: 0
 28206                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 28207                           
 28208                           ; BSR set to: 0
 28209                           
 28210                           ; BSR set to: 0
 28211  015A3A  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 28212  015A3E  0E48               	movlw	low _HMIBoard
 28213  015A40  2568               	addwf	HMI_Render@a& (0+255),w,b
 28214  015A42  6ED9               	movwf	fsr2l,c
 28215  015A44  0E01               	movlw	high _HMIBoard
 28216  015A46  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 28217  015A48  6EDA               	movwf	fsr2h,c
 28218  015A4A  50DF               	movf	indf2,w,c
 28219  015A4C  ECB1  F0A6         	call	_OutSeg
 28220  015A50  0100               	movlb	0	; () banked
 28221  015A52  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 28222  015A54  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 28223  015A56  D7EB               	goto	l14539
 28224  015A58                     l1158:
 28225                           
 28226                           ; BSR set to: 0
 28227  015A58  0012               	return		;funcret
 28228  015A5A                     __end_of_HMI_Render:
 28229                           	opt stack 0
 28230                           tosu	equ	0xFFF
 28231                           tosh	equ	0xFFE
 28232                           tosl	equ	0xFFD
 28233                           pclath	equ	0xFFA
 28234                           tblptru	equ	0xFF8
 28235                           tblptrh	equ	0xFF7
 28236                           tblptrl	equ	0xFF6
 28237                           tablat	equ	0xFF5
 28238                           prodh	equ	0xFF4
 28239                           prodl	equ	0xFF3
 28240                           intcon	equ	0xFF2
 28241                           indf0	equ	0xFEF
 28242                           postinc0	equ	0xFEE
 28243                           fsr0h	equ	0xFEA
 28244                           fsr0l	equ	0xFE9
 28245                           wreg	equ	0xFE8
 28246                           indf1	equ	0xFE7
 28247                           postdec1	equ	0xFE5
 28248                           fsr1h	equ	0xFE2
 28249                           fsr1l	equ	0xFE1
 28250                           indf2	equ	0xFDF
 28251                           postinc2	equ	0xFDE
 28252                           postdec2	equ	0xFDD
 28253                           plusw2	equ	0xFDB
 28254                           fsr2h	equ	0xFDA
 28255                           fsr2l	equ	0xFD9
 28256                           status	equ	0xFD8
 28257                           
 28258 ;; *************** function _OutSeg *****************
 28259 ;; Defined at:
 28260 ;;		line 54 in file "HMI.c"
 28261 ;; Parameters:    Size  Location     Type
 28262 ;;  pInput          1    wreg     unsigned char 
 28263 ;;  pSegment        1    3[BANK0 ] unsigned char 
 28264 ;; Auto vars:     Size  Location     Type
 28265 ;;  pInput          1    6[BANK0 ] unsigned char 
 28266 ;;  out             1    7[BANK0 ] volatile unsigned char 
 28267 ;; Return value:  Size  Location     Type
 28268 ;;                  1    wreg      void 
 28269 ;; Registers used:
 28270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28271 ;; Tracked objects:
 28272 ;;		On entry : 0/0
 28273 ;;		On exit  : 0/0
 28274 ;;		Unchanged: 0/0
 28275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28276 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28277 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28278 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28279 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28280 ;;Total ram usage:        5 bytes
 28281 ;; Hardware stack levels used:    1
 28282 ;; Hardware stack levels required when called:    8
 28283 ;; This function calls:
 28284 ;;		_SPI_Send
 28285 ;; This function is called by:
 28286 ;;		_HMI_Render
 28287 ;;		_HMI_GRender
 28288 ;; This function uses a non-reentrant model
 28289 ;;
 28290                           
 28291                           	psect	text148
 28292  014D62                     __ptext148:
 28293                           	opt stack 0
 28294  014D62                     _OutSeg:
 28295                           	opt stack 19
 28296                           
 28297                           ; BSR set to: 0
 28298                           ;incstack = 0
 28299                           ;OutSeg@pInput stored from wreg
 28300  014D62  0100               	movlb	0	; () banked
 28301  014D64  6F66               	movwf	OutSeg@pInput& (0+255),b
 28302                           
 28303                           ;HMI.c: 58: static UINT8 cur;
 28304                           ;HMI.c: 59: volatile UINT8 out;
 28305                           ;HMI.c: 60: static UINT8 segset;
 28306                           ;HMI.c: 61: static UINT8 a;
 28307                           ;HMI.c: 83: if (pSegment <= 8)
 28308  014D66  0E09               	movlw	9
 28309  014D68  0100               	movlb	0	; () banked
 28310  014D6A  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 28311  014D6C  0012               	return	
 28312                           
 28313                           ; BSR set to: 0
 28314                           ;HMI.c: 84: {
 28315                           ;HMI.c: 85: cur = pInput;
 28316  014D6E  C066  F03F         	movff	OutSeg@pInput,OutSeg@cur
 28317                           
 28318                           ; BSR set to: 0
 28319                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 28320  014D72  0E00               	movlw	0
 28321  014D74  6E3D               	movwf	OutSeg@a,c
 28322  014D76                     l14057:
 28323                           
 28324                           ; BSR set to: 0
 28325  014D76  0E07               	movlw	7
 28326  014D78  643D               	cpfsgt	OutSeg@a,c
 28327  014D7A  D001               	goto	l1146
 28328  014D7C  D01F               	goto	u11410
 28329  014D7E                     l1146:
 28330                           
 28331                           ;HMI.c: 87: {
 28332                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 28333                           
 28334                           ; BSR set to: 0
 28335  014D7E  C03F  F064         	movff	OutSeg@cur,??_OutSeg
 28336  014D82  0E01               	movlw	1
 28337  014D84  0100               	movlb	0	; () banked
 28338  014D86  1764               	andwf	??_OutSeg& (0+255),f,b
 28339  014D88  0E06               	movlw	6
 28340  014D8A  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 28341  014D8C                     u11405:
 28342  014D8C  90D8               	bcf	status,0,c
 28343  014D8E  3764               	rlcf	??_OutSeg& (0+255),f,b
 28344  014D90  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 28345  014D92  D7FC               	goto	u11405
 28346  014D94  5164               	movf	??_OutSeg& (0+255),w,b
 28347  014D96  6E3E               	movwf	OutSeg@segset,c
 28348                           
 28349                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 28350  014D98  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 28351  014D9A  42E8               	rrncf	wreg,f,c
 28352  014D9C  0BF8               	andlw	248
 28353  014D9E  103D               	iorwf	OutSeg@a,w,c
 28354  014DA0  103E               	iorwf	OutSeg@segset,w,c
 28355  014DA2  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 28356                           
 28357                           ;HMI.c: 90: cur >>= 1;
 28358  014DA4  90D8               	bcf	status,0,c
 28359  014DA6  323F               	rrcf	OutSeg@cur,f,c
 28360                           
 28361                           ; BSR set to: 0
 28362                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 28363  014DA8  0EC8               	movlw	low _SPI1
 28364  014DAA  6F60               	movwf	SPI_Send@pInput& (0+255),b
 28365  014DAC  0E02               	movlw	high _SPI1
 28366  014DAE  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 28367  014DB0  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 28368  014DB4  EC1E  F0A7         	call	_SPI_Send	;wreg free
 28369  014DB8  2A3D               	incf	OutSeg@a,f,c
 28370  014DBA  D7DD               	goto	l14057
 28371  014DBC                     u11410:
 28372                           
 28373                           ;HMI.c: 96: }
 28374                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 28375  014DBC  0EC8               	movlw	low _SPI1
 28376  014DBE  0100               	movlb	0	; () banked
 28377  014DC0  6F60               	movwf	SPI_Send@pInput& (0+255),b
 28378  014DC2  0E02               	movlw	high _SPI1
 28379  014DC4  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 28380  014DC6  0E00               	movlw	0
 28381  014DC8  6F62               	movwf	SPI_Send@pData& (0+255),b
 28382  014DCA  EC1E  F0A7         	call	_SPI_Send	;wreg free
 28383  014DCE  0012               	return	
 28384  014DD0                     __end_of_OutSeg:
 28385                           	opt stack 0
 28386                           tosu	equ	0xFFF
 28387                           tosh	equ	0xFFE
 28388                           tosl	equ	0xFFD
 28389                           pclath	equ	0xFFA
 28390                           tblptru	equ	0xFF8
 28391                           tblptrh	equ	0xFF7
 28392                           tblptrl	equ	0xFF6
 28393                           tablat	equ	0xFF5
 28394                           prodh	equ	0xFF4
 28395                           prodl	equ	0xFF3
 28396                           intcon	equ	0xFF2
 28397                           indf0	equ	0xFEF
 28398                           postinc0	equ	0xFEE
 28399                           fsr0h	equ	0xFEA
 28400                           fsr0l	equ	0xFE9
 28401                           wreg	equ	0xFE8
 28402                           indf1	equ	0xFE7
 28403                           postdec1	equ	0xFE5
 28404                           fsr1h	equ	0xFE2
 28405                           fsr1l	equ	0xFE1
 28406                           indf2	equ	0xFDF
 28407                           postinc2	equ	0xFDE
 28408                           postdec2	equ	0xFDD
 28409                           plusw2	equ	0xFDB
 28410                           fsr2h	equ	0xFDA
 28411                           fsr2l	equ	0xFD9
 28412                           status	equ	0xFD8
 28413                           
 28414 ;; *************** function _SPI_Send *****************
 28415 ;; Defined at:
 28416 ;;		line 226 in file "Library/SPI.c"
 28417 ;; Parameters:    Size  Location     Type
 28418 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 28419 ;;		 -> SPI1(11), SPI2(11), 
 28420 ;;  pData           1    2[BANK0 ] unsigned char 
 28421 ;; Auto vars:     Size  Location     Type
 28422 ;;		None
 28423 ;; Return value:  Size  Location     Type
 28424 ;;                  1    wreg      unsigned char 
 28425 ;; Registers used:
 28426 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28427 ;; Tracked objects:
 28428 ;;		On entry : 0/0
 28429 ;;		On exit  : 0/0
 28430 ;;		Unchanged: 0/0
 28431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28432 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28435 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28436 ;;Total ram usage:        3 bytes
 28437 ;; Hardware stack levels used:    1
 28438 ;; Hardware stack levels required when called:    7
 28439 ;; This function calls:
 28440 ;;		Nothing
 28441 ;; This function is called by:
 28442 ;;		_LCD_Write
 28443 ;;		_OutSeg
 28444 ;; This function uses a non-reentrant model
 28445 ;;
 28446                           
 28447                           	psect	text149
 28448  014E3C                     __ptext149:
 28449                           	opt stack 0
 28450  014E3C                     _SPI_Send:
 28451                           	opt stack 18
 28452                           
 28453                           ;SPI.c: 253: switch (pInput->mChannel)
 28454                           
 28455                           ;incstack = 0
 28456  014E3C  D026               	goto	l678
 28457  014E3E                     
 28458                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 28459  014E3E  C1AF  FFD9         	movff	_PortC+4,fsr2l
 28460  014E42  C1B0  FFDA         	movff	_PortC+5,fsr2h
 28461  014E46  0101               	movlb	1	; () banked
 28462  014E48  94DF               	bcf	indf2,2,c
 28463                           
 28464                           ; BSR set to: 1
 28465                           ;SPI.c: 257: SSP1BUF = pData;
 28466  014E4A  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 28467  014E4E                     
 28468                           ; BSR set to: 1
 28469  014E4E  A0C7               	btfss	4039,0,c	;volatile
 28470  014E50  D7FE               	goto	l681
 28471                           
 28472                           ;SPI.c: 259: pData = SSP1BUF;
 28473  014E52  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 28474                           
 28475                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 28476  014E56  C1AF  FFD9         	movff	_PortC+4,fsr2l
 28477  014E5A  C1B0  FFDA         	movff	_PortC+5,fsr2h
 28478  014E5E  0101               	movlb	1	; () banked
 28479  014E60  84DF               	bsf	indf2,2,c
 28480                           
 28481                           ; BSR set to: 1
 28482                           ;SPI.c: 261: return pData;
 28483                           ;	Return value of _SPI_Send is never used
 28484  014E62  0012               	return	
 28485  014E64                     
 28486                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 28487                           
 28488                           ; BSR set to: 1
 28489  014E64  C19B  FFD9         	movff	_PortD+4,fsr2l
 28490  014E68  C19C  FFDA         	movff	_PortD+5,fsr2h
 28491  014E6C  0101               	movlb	1	; () banked
 28492  014E6E  9EDF               	bcf	indf2,7,c
 28493                           
 28494                           ; BSR set to: 1
 28495                           ;SPI.c: 264: SSP2BUF = pData;
 28496  014E70  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 28497  014E74                     
 28498                           ; BSR set to: 1
 28499  014E74  A06D               	btfss	3949,0,c	;volatile
 28500  014E76  D7FE               	goto	l686
 28501                           
 28502                           ;SPI.c: 266: pData = SSP2BUF;
 28503  014E78  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 28504                           
 28505                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 28506  014E7C  C19B  FFD9         	movff	_PortD+4,fsr2l
 28507  014E80  C19C  FFDA         	movff	_PortD+5,fsr2h
 28508  014E84  0101               	movlb	1	; () banked
 28509  014E86  8EDF               	bsf	indf2,7,c
 28510                           
 28511                           ; BSR set to: 1
 28512                           ;SPI.c: 269: };
 28513                           
 28514                           ; BSR set to: 1
 28515                           ;SPI.c: 268: return pData;
 28516                           ;	Return value of _SPI_Send is never used
 28517  014E88  0012               	return	
 28518  014E8A                     l678:
 28519                           
 28520                           ; BSR set to: 1
 28521  014E8A  0100               	movlb	0	; () banked
 28522  014E8C  EE20 F002          	lfsr	2,2
 28523  014E90  5160               	movf	SPI_Send@pInput& (0+255),w,b
 28524  014E92  26D9               	addwf	fsr2l,f,c
 28525  014E94  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 28526  014E96  22DA               	addwfc	fsr2h,f,c
 28527  014E98  50DF               	movf	indf2,w,c
 28528                           
 28529                           ; Switch size 1, requested type "space"
 28530                           ; Number of cases is 2, Range of values is 0 to 1
 28531                           ; switch strategies available:
 28532                           ; Name         Instructions Cycles
 28533                           ; simple_byte            7     4 (average)
 28534                           ;	Chosen strategy is simple_byte
 28535  014E9A  0A00               	xorlw	0	; case 0
 28536  014E9C  B4D8               	btfsc	status,2,c
 28537  014E9E  D7CF               	goto	l679
 28538  014EA0  0A01               	xorlw	1	; case 1
 28539  014EA2  A4D8               	btfss	status,2,c
 28540  014EA4  0012               	return	
 28541  014EA6  D7DE               	goto	l684
 28542  014EA8                     __end_of_SPI_Send:
 28543                           	opt stack 0
 28544                           tosu	equ	0xFFF
 28545                           tosh	equ	0xFFE
 28546                           tosl	equ	0xFFD
 28547                           pclath	equ	0xFFA
 28548                           tblptru	equ	0xFF8
 28549                           tblptrh	equ	0xFF7
 28550                           tblptrl	equ	0xFF6
 28551                           tablat	equ	0xFF5
 28552                           prodh	equ	0xFF4
 28553                           prodl	equ	0xFF3
 28554                           intcon	equ	0xFF2
 28555                           indf0	equ	0xFEF
 28556                           postinc0	equ	0xFEE
 28557                           fsr0h	equ	0xFEA
 28558                           fsr0l	equ	0xFE9
 28559                           wreg	equ	0xFE8
 28560                           indf1	equ	0xFE7
 28561                           postdec1	equ	0xFE5
 28562                           fsr1h	equ	0xFE2
 28563                           fsr1l	equ	0xFE1
 28564                           indf2	equ	0xFDF
 28565                           postinc2	equ	0xFDE
 28566                           postdec2	equ	0xFDD
 28567                           plusw2	equ	0xFDB
 28568                           fsr2h	equ	0xFDA
 28569                           fsr2l	equ	0xFD9
 28570                           status	equ	0xFD8
 28571                           
 28572 ;; *************** function _FunctReadADC *****************
 28573 ;; Defined at:
 28574 ;;		line 94 in file "main.c"
 28575 ;; Parameters:    Size  Location     Type
 28576 ;;  channel         2    0[BANK0 ] int 
 28577 ;; Auto vars:     Size  Location     Type
 28578 ;;		None
 28579 ;; Return value:  Size  Location     Type
 28580 ;;                  2    0[BANK0 ] int 
 28581 ;; Registers used:
 28582 ;;		wreg, status,2, status,0
 28583 ;; Tracked objects:
 28584 ;;		On entry : 0/0
 28585 ;;		On exit  : 0/0
 28586 ;;		Unchanged: 0/0
 28587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28588 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28591 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28592 ;;Total ram usage:        2 bytes
 28593 ;; Hardware stack levels used:    1
 28594 ;; Hardware stack levels required when called:    7
 28595 ;; This function calls:
 28596 ;;		Nothing
 28597 ;; This function is called by:
 28598 ;;		_ADCAverage
 28599 ;; This function uses a non-reentrant model
 28600 ;;
 28601                           
 28602                           	psect	text150
 28603  015902                     __ptext150:
 28604                           	opt stack 0
 28605  015902                     _FunctReadADC:
 28606                           	opt stack 21
 28607                           
 28608                           ;main.c: 96: if (channel > 4) return 0;
 28609                           
 28610                           ;incstack = 0
 28611  015902  0100               	movlb	0	; () banked
 28612  015904  BF61               	btfsc	(FunctReadADC@channel+1)& (0+255),7,b
 28613  015906  D00B               	goto	l2124
 28614  015908  5161               	movf	(FunctReadADC@channel+1)& (0+255),w,b
 28615  01590A  E104               	bnz	u11810
 28616  01590C  0E05               	movlw	5
 28617  01590E  5D60               	subwf	FunctReadADC@channel& (0+255),w,b
 28618  015910  A0D8               	btfss	status,0,c
 28619  015912  D005               	goto	l2124
 28620  015914                     u11810:
 28621                           
 28622                           ; BSR set to: 0
 28623  015914  0E00               	movlw	0
 28624  015916  6F61               	movwf	(?_FunctReadADC+1)& (0+255),b
 28625  015918  0E00               	movlw	0
 28626  01591A  6F60               	movwf	?_FunctReadADC& (0+255),b
 28627                           
 28628                           ; BSR set to: 0
 28629  01591C  0012               	return	
 28630  01591E                     l2124:
 28631                           
 28632                           ; BSR set to: 0
 28633                           ;main.c: 97: ADCON0 = 0x00;
 28634                           
 28635                           ; BSR set to: 0
 28636  01591E  0E00               	movlw	0
 28637  015920  6EC2               	movwf	4034,c	;volatile
 28638                           
 28639                           ; BSR set to: 0
 28640                           ;main.c: 98: ADCON0 = (channel << 2);
 28641  015922  4560               	rlncf	FunctReadADC@channel& (0+255),w,b
 28642  015924  46E8               	rlncf	wreg,f,c
 28643  015926  0BFC               	andlw	252
 28644  015928  6EC2               	movwf	4034,c	;volatile
 28645                           
 28646                           ; BSR set to: 0
 28647                           ;main.c: 99: ADON = 1;
 28648  01592A  80C2               	bsf	4034,0,c	;volatile
 28649                           
 28650                           ; BSR set to: 0
 28651                           ;main.c: 100: GODONE = 1;
 28652  01592C  82C2               	bsf	4034,1,c	;volatile
 28653  01592E                     
 28654                           ; BSR set to: 0
 28655  01592E  B2C2               	btfsc	4034,1,c	;volatile
 28656  015930  D7FE               	goto	l2127
 28657                           
 28658                           ;main.c: 102: ADON = 0;
 28659  015932  90C2               	bcf	4034,0,c	;volatile
 28660                           
 28661                           ;main.c: 103: return ADRES;
 28662  015934  CFC3 F060          	movff	4035,?_FunctReadADC	;volatile
 28663  015938  CFC4 F061          	movff	4036,?_FunctReadADC+1	;volatile
 28664  01593C  0012               	return		;funcret
 28665  01593E                     __end_of_FunctReadADC:
 28666                           	opt stack 0
 28667                           tosu	equ	0xFFF
 28668                           tosh	equ	0xFFE
 28669                           tosl	equ	0xFFD
 28670                           pclath	equ	0xFFA
 28671                           tblptru	equ	0xFF8
 28672                           tblptrh	equ	0xFF7
 28673                           tblptrl	equ	0xFF6
 28674                           tablat	equ	0xFF5
 28675                           prodh	equ	0xFF4
 28676                           prodl	equ	0xFF3
 28677                           intcon	equ	0xFF2
 28678                           indf0	equ	0xFEF
 28679                           postinc0	equ	0xFEE
 28680                           fsr0h	equ	0xFEA
 28681                           fsr0l	equ	0xFE9
 28682                           wreg	equ	0xFE8
 28683                           indf1	equ	0xFE7
 28684                           postdec1	equ	0xFE5
 28685                           fsr1h	equ	0xFE2
 28686                           fsr1l	equ	0xFE1
 28687                           indf2	equ	0xFDF
 28688                           postinc2	equ	0xFDE
 28689                           postdec2	equ	0xFDD
 28690                           plusw2	equ	0xFDB
 28691                           fsr2h	equ	0xFDA
 28692                           fsr2l	equ	0xFD9
 28693                           status	equ	0xFD8
 28694                           
 28695 ;; *************** function _BangBang *****************
 28696 ;; Defined at:
 28697 ;;		line 230 in file "main.c"
 28698 ;; Parameters:    Size  Location     Type
 28699 ;;  RSpeedH         2    1[BANK0 ] int 
 28700 ;;  RSpeedL         2    3[BANK0 ] int 
 28701 ;;  LSpeedH         2    5[BANK0 ] int 
 28702 ;;  LSpeedL         2    7[BANK0 ] int 
 28703 ;; Auto vars:     Size  Location     Type
 28704 ;;		None
 28705 ;; Return value:  Size  Location     Type
 28706 ;;                  1    wreg      void 
 28707 ;; Registers used:
 28708 ;;		wreg, status,2, cstack
 28709 ;; Tracked objects:
 28710 ;;		On entry : 0/0
 28711 ;;		On exit  : 0/0
 28712 ;;		Unchanged: 0/0
 28713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28714 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28717 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28718 ;;Total ram usage:        8 bytes
 28719 ;; Hardware stack levels used:    1
 28720 ;; Hardware stack levels required when called:    8
 28721 ;; This function calls:
 28722 ;;		_eusartSend
 28723 ;; This function is called by:
 28724 ;;		_main
 28725 ;; This function uses a non-reentrant model
 28726 ;;
 28727                           
 28728                           	psect	text151
 28729  015CC8                     __ptext151:
 28730                           	opt stack 0
 28731  015CC8                     _BangBang:
 28732                           	opt stack 22
 28733                           
 28734                           ;main.c: 232: eusartSend(145);
 28735                           
 28736                           ;incstack = 0
 28737  015CC8  0E91               	movlw	145
 28738  015CCA  EC28  F0B0         	call	_eusartSend
 28739                           
 28740                           ;main.c: 233: eusartSend((((RSpeedH)>>8) & 255));
 28741  015CCE  0100               	movlb	0	; () banked
 28742  015CD0  5162               	movf	(BangBang@RSpeedH+1)& (0+255),w,b
 28743  015CD2  EC28  F0B0         	call	_eusartSend
 28744                           
 28745                           ;main.c: 234: eusartSend(((RSpeedL) & 255));
 28746  015CD6  0100               	movlb	0	; () banked
 28747  015CD8  5163               	movf	BangBang@RSpeedL& (0+255),w,b
 28748  015CDA  EC28  F0B0         	call	_eusartSend
 28749                           
 28750                           ;main.c: 235: eusartSend((((LSpeedH)>>8) & 255));
 28751  015CDE  0100               	movlb	0	; () banked
 28752  015CE0  5166               	movf	(BangBang@LSpeedH+1)& (0+255),w,b
 28753  015CE2  EC28  F0B0         	call	_eusartSend
 28754                           
 28755                           ;main.c: 236: eusartSend(((LSpeedL) & 255));
 28756  015CE6  0100               	movlb	0	; () banked
 28757  015CE8  5167               	movf	BangBang@LSpeedL& (0+255),w,b
 28758  015CEA  EC28  F0B0         	call	_eusartSend
 28759  015CEE  0012               	return		;funcret
 28760  015CF0                     __end_of_BangBang:
 28761                           	opt stack 0
 28762                           tosu	equ	0xFFF
 28763                           tosh	equ	0xFFE
 28764                           tosl	equ	0xFFD
 28765                           pclath	equ	0xFFA
 28766                           tblptru	equ	0xFF8
 28767                           tblptrh	equ	0xFF7
 28768                           tblptrl	equ	0xFF6
 28769                           tablat	equ	0xFF5
 28770                           prodh	equ	0xFF4
 28771                           prodl	equ	0xFF3
 28772                           intcon	equ	0xFF2
 28773                           indf0	equ	0xFEF
 28774                           postinc0	equ	0xFEE
 28775                           fsr0h	equ	0xFEA
 28776                           fsr0l	equ	0xFE9
 28777                           wreg	equ	0xFE8
 28778                           indf1	equ	0xFE7
 28779                           postdec1	equ	0xFE5
 28780                           fsr1h	equ	0xFE2
 28781                           fsr1l	equ	0xFE1
 28782                           indf2	equ	0xFDF
 28783                           postinc2	equ	0xFDE
 28784                           postdec2	equ	0xFDD
 28785                           plusw2	equ	0xFDB
 28786                           fsr2h	equ	0xFDA
 28787                           fsr2l	equ	0xFD9
 28788                           status	equ	0xFD8
 28789                           
 28790 ;; *************** function _eusartSend *****************
 28791 ;; Defined at:
 28792 ;;		line 147 in file "main.c"
 28793 ;; Parameters:    Size  Location     Type
 28794 ;;  sendChar        1    wreg     unsigned char 
 28795 ;; Auto vars:     Size  Location     Type
 28796 ;;  sendChar        1    0[BANK0 ] unsigned char 
 28797 ;; Return value:  Size  Location     Type
 28798 ;;                  1    wreg      void 
 28799 ;; Registers used:
 28800 ;;		wreg
 28801 ;; Tracked objects:
 28802 ;;		On entry : 0/0
 28803 ;;		On exit  : 0/0
 28804 ;;		Unchanged: 0/0
 28805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28807 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28809 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28810 ;;Total ram usage:        1 bytes
 28811 ;; Hardware stack levels used:    1
 28812 ;; Hardware stack levels required when called:    7
 28813 ;; This function calls:
 28814 ;;		Nothing
 28815 ;; This function is called by:
 28816 ;;		_Robot_Stop
 28817 ;;		_Get_Sensor_State
 28818 ;;		_UpdateDistance
 28819 ;;		_Drive
 28820 ;;		_Turn
 28821 ;;		_BangBang
 28822 ;;		_Robot_Init
 28823 ;;		_LEDOn
 28824 ;;		_LEDOff
 28825 ;;		_Get_VirtualWall_State
 28826 ;; This function uses a non-reentrant model
 28827 ;;
 28828                           
 28829                           	psect	text152
 28830  016050                     __ptext152:
 28831                           	opt stack 0
 28832  016050                     _eusartSend:
 28833                           	opt stack 22
 28834                           
 28835                           ;incstack = 0
 28836                           ;eusartSend@sendChar stored from wreg
 28837  016050  0100               	movlb	0	; () banked
 28838  016052  6F60               	movwf	eusartSend@sendChar& (0+255),b
 28839  016054                     
 28840                           ;main.c: 148: while (!TXSTA1bits.TRMT) {}
 28841  016054  A2AD               	btfss	4013,1,c	;volatile
 28842  016056  D7FE               	goto	l14675
 28843                           
 28844                           ;main.c: 149: TXREG1 = sendChar;
 28845  016058  C060  FFAE         	movff	eusartSend@sendChar,4014	;volatile
 28846  01605C  0012               	return		;funcret
 28847  01605E                     __end_of_eusartSend:
 28848                           	opt stack 0
 28849                           tosu	equ	0xFFF
 28850                           tosh	equ	0xFFE
 28851                           tosl	equ	0xFFD
 28852                           pclath	equ	0xFFA
 28853                           tblptru	equ	0xFF8
 28854                           tblptrh	equ	0xFF7
 28855                           tblptrl	equ	0xFF6
 28856                           tablat	equ	0xFF5
 28857                           prodh	equ	0xFF4
 28858                           prodl	equ	0xFF3
 28859                           intcon	equ	0xFF2
 28860                           indf0	equ	0xFEF
 28861                           postinc0	equ	0xFEE
 28862                           fsr0h	equ	0xFEA
 28863                           fsr0l	equ	0xFE9
 28864                           wreg	equ	0xFE8
 28865                           indf1	equ	0xFE7
 28866                           postdec1	equ	0xFE5
 28867                           fsr1h	equ	0xFE2
 28868                           fsr1l	equ	0xFE1
 28869                           indf2	equ	0xFDF
 28870                           postinc2	equ	0xFDE
 28871                           postdec2	equ	0xFDD
 28872                           plusw2	equ	0xFDB
 28873                           fsr2h	equ	0xFDA
 28874                           fsr2l	equ	0xFD9
 28875                           status	equ	0xFD8
 28876                           
 28877 ;; *************** function _ISR_Function *****************
 28878 ;; Defined at:
 28879 ;;		line 38 in file "Library/ISR.c"
 28880 ;; Parameters:    Size  Location     Type
 28881 ;;		None
 28882 ;; Auto vars:     Size  Location     Type
 28883 ;;		None
 28884 ;; Return value:  Size  Location     Type
 28885 ;;                  1    wreg      void 
 28886 ;; Registers used:
 28887 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28888 ;; Tracked objects:
 28889 ;;		On entry : 0/0
 28890 ;;		On exit  : 0/0
 28891 ;;		Unchanged: 0/0
 28892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28895 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28896 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28897 ;;Total ram usage:       18 bytes
 28898 ;; Hardware stack levels used:    1
 28899 ;; Hardware stack levels required when called:    6
 28900 ;; This function calls:
 28901 ;;		_Timer0_ISR
 28902 ;; This function is called by:
 28903 ;;		Interrupt level 2
 28904 ;; This function uses a non-reentrant model
 28905 ;;
 28906                           
 28907                           	psect	intcode
 28908  001408                     __pintcode:
 28909                           	opt stack 0
 28910  001408                     _ISR_Function:
 28911                           	opt stack 14
 28912                           
 28913                           ;incstack = 0
 28914  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 28915  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 28916  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 28917  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 28918  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 28919  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 28920  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 28921  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 28922  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 28923  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 28924  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 28925  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 28926  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 28927  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 28928  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 28929  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 28930  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 28931  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 28932  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 28933                           
 28934                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 28935  001452  92F2               	bcf	intcon,1,c	;volatile
 28936                           
 28937                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 28938  001454  B4F2               	btfsc	intcon,2,c	;volatile
 28939  001456  AAF2               	btfss	intcon,5,c	;volatile
 28940  001458  D002               	goto	i2l1590
 28941                           
 28942                           ;ISR.c: 68: Timer0_ISR();
 28943  00145A  EC78  F0AE         	call	_Timer0_ISR	;wreg free
 28944  00145E                     i2l1590:
 28945  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 28946  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 28947  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 28948  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 28949  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 28950  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 28951  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 28952  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 28953  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 28954  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 28955  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 28956  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 28957  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 28958  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 28959  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 28960  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 28961  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 28962  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 28963  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 28964  0014A8  0011               	retfie		f
 28965  0014AA                     __end_of_ISR_Function:
 28966                           	opt stack 0
 28967                           tosu	equ	0xFFF
 28968                           tosh	equ	0xFFE
 28969                           tosl	equ	0xFFD
 28970                           pclatu	equ	0xFFB
 28971                           pclath	equ	0xFFA
 28972                           tblptru	equ	0xFF8
 28973                           tblptrh	equ	0xFF7
 28974                           tblptrl	equ	0xFF6
 28975                           tablat	equ	0xFF5
 28976                           prodh	equ	0xFF4
 28977                           prodl	equ	0xFF3
 28978                           intcon	equ	0xFF2
 28979                           indf0	equ	0xFEF
 28980                           postinc0	equ	0xFEE
 28981                           fsr0h	equ	0xFEA
 28982                           fsr0l	equ	0xFE9
 28983                           wreg	equ	0xFE8
 28984                           indf1	equ	0xFE7
 28985                           postdec1	equ	0xFE5
 28986                           fsr1h	equ	0xFE2
 28987                           fsr1l	equ	0xFE1
 28988                           indf2	equ	0xFDF
 28989                           postinc2	equ	0xFDE
 28990                           postdec2	equ	0xFDD
 28991                           plusw2	equ	0xFDB
 28992                           fsr2h	equ	0xFDA
 28993                           fsr2l	equ	0xFD9
 28994                           status	equ	0xFD8
 28995                           
 28996 ;; *************** function _Timer0_ISR *****************
 28997 ;; Defined at:
 28998 ;;		line 94 in file "Library/Timer0.c"
 28999 ;; Parameters:    Size  Location     Type
 29000 ;;		None
 29001 ;; Auto vars:     Size  Location     Type
 29002 ;;		None
 29003 ;; Return value:  Size  Location     Type
 29004 ;;                  1    wreg      void 
 29005 ;; Registers used:
 29006 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29007 ;; Tracked objects:
 29008 ;;		On entry : 0/0
 29009 ;;		On exit  : 0/0
 29010 ;;		Unchanged: 0/0
 29011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29016 ;;Total ram usage:        0 bytes
 29017 ;; Hardware stack levels used:    1
 29018 ;; Hardware stack levels required when called:    5
 29019 ;; This function calls:
 29020 ;;		Absolute function
 29021 ;;		i2_Motor_Step
 29022 ;;		i2_Timer0_Stop
 29023 ;; This function is called by:
 29024 ;;		_ISR_Function
 29025 ;; This function uses a non-reentrant model
 29026 ;;
 29027                           
 29028                           	psect	text154
 29029  015CF0                     __ptext154:
 29030                           	opt stack 0
 29031  015CF0                     _Timer0_ISR:
 29032                           	opt stack 14
 29033                           
 29034                           ;Timer0.c: 96: Timer0_Stop();
 29035                           
 29036                           ;incstack = 0
 29037  015CF0  EC73  F0B0         	call	i2_Timer0_Stop	;wreg free
 29038                           
 29039                           ;Timer0.c: 99: if (gISR != 0)
 29040  015CF4  0101               	movlb	1	; () banked
 29041  015CF6  5108               	movf	_gISR& (0+255),w,b
 29042  015CF8  1109               	iorwf	(_gISR+1)& (0+255),w,b
 29043  015CFA  110A               	iorwf	(_gISR+2)& (0+255),w,b
 29044  015CFC  B4D8               	btfsc	status,2,c
 29045  015CFE  0012               	return	
 29046                           
 29047                           ; BSR set to: 1
 29048                           ;Timer0.c: 100: gISR();
 29049  015D00  D801               	call	i2u1423_48
 29050  015D02  0012               	return	
 29051  015D04                     i2u1423_48:
 29052  015D04  0005               	push	
 29053  015D06  6EFA               	movwf	pclath,c
 29054  015D08  5108               	movf	_gISR& (0+255),w,b
 29055  015D0A  6EFD               	movwf	tosl,c
 29056  015D0C  5109               	movf	(_gISR+1)& (0+255),w,b
 29057  015D0E  6EFE               	movwf	tosh,c
 29058  015D10  510A               	movf	(_gISR+2)& (0+255),w,b
 29059  015D12  6EFF               	movwf	tosu,c
 29060  015D14  50FA               	movf	pclath,w,c
 29061  015D16  0012               	return		;indir
 29062  015D18                     __end_of_Timer0_ISR:
 29063                           	opt stack 0
 29064                           tosu	equ	0xFFF
 29065                           tosh	equ	0xFFE
 29066                           tosl	equ	0xFFD
 29067                           pclatu	equ	0xFFB
 29068                           pclath	equ	0xFFA
 29069                           tblptru	equ	0xFF8
 29070                           tblptrh	equ	0xFF7
 29071                           tblptrl	equ	0xFF6
 29072                           tablat	equ	0xFF5
 29073                           prodh	equ	0xFF4
 29074                           prodl	equ	0xFF3
 29075                           intcon	equ	0xFF2
 29076                           indf0	equ	0xFEF
 29077                           postinc0	equ	0xFEE
 29078                           fsr0h	equ	0xFEA
 29079                           fsr0l	equ	0xFE9
 29080                           wreg	equ	0xFE8
 29081                           indf1	equ	0xFE7
 29082                           postdec1	equ	0xFE5
 29083                           fsr1h	equ	0xFE2
 29084                           fsr1l	equ	0xFE1
 29085                           indf2	equ	0xFDF
 29086                           postinc2	equ	0xFDE
 29087                           postdec2	equ	0xFDD
 29088                           plusw2	equ	0xFDB
 29089                           fsr2h	equ	0xFDA
 29090                           fsr2l	equ	0xFD9
 29091                           status	equ	0xFD8
 29092                           
 29093 ;; *************** function i2_Motor_Step *****************
 29094 ;; Defined at:
 29095 ;;		line 75 in file "Library/Motor.c"
 29096 ;; Parameters:    Size  Location     Type
 29097 ;;		None
 29098 ;; Auto vars:     Size  Location     Type
 29099 ;;		None
 29100 ;; Return value:  Size  Location     Type
 29101 ;;                  1    wreg      void 
 29102 ;; Registers used:
 29103 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29104 ;; Tracked objects:
 29105 ;;		On entry : 0/0
 29106 ;;		On exit  : 0/0
 29107 ;;		Unchanged: 0/0
 29108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29111 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29112 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29113 ;;Total ram usage:        2 bytes
 29114 ;; Hardware stack levels used:    1
 29115 ;; Hardware stack levels required when called:    4
 29116 ;; This function calls:
 29117 ;;		i2_MXK_Queue
 29118 ;;		i2_MXK_Release
 29119 ;;		i2_MXK_SwitchTo
 29120 ;;		i2_Port_SetPin
 29121 ;;		i2_Timer0_Restart
 29122 ;;		i2_Timer0_Stop
 29123 ;; This function is called by:
 29124 ;; This function uses a non-reentrant model
 29125 ;;
 29126                           
 29127                           	psect	text155
 29128  013C02                     __ptext155:
 29129                           	opt stack 0
 29130  013C02                     i2_Motor_Step:
 29131                           	opt stack 14
 29132                           
 29133                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29134                           
 29135                           ;incstack = 0
 29136  013C02  0100               	movlb	0	; () banked
 29137  013C04  EE20 F004          	lfsr	2,4
 29138  013C08  51ED               	movf	_lMotor& (0+255),w,b
 29139  013C0A  26D9               	addwf	fsr2l,f,c
 29140  013C0C  51EE               	movf	(_lMotor+1)& (0+255),w,b
 29141  013C0E  22DA               	addwfc	fsr2h,f,c
 29142  013C10  50DF               	movf	indf2,w,c
 29143  013C12  EC2D  F0AD         	call	i2_MXK_SwitchTo
 29144  013C16  0900               	iorlw	0
 29145  013C18  B4D8               	btfsc	status,2,c
 29146  013C1A  D06A               	goto	i2l1627
 29147                           
 29148                           ;Motor.c: 78: {
 29149                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29150  013C1C  C0ED  FFD9         	movff	_lMotor,fsr2l
 29151  013C20  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29152  013C24  50DE               	movf	postinc2,w,c
 29153  013C26  10DE               	iorwf	postinc2,w,c
 29154  013C28  B4D8               	btfsc	status,2,c
 29155  013C2A  D05D               	goto	i2l1628
 29156                           
 29157                           ;Motor.c: 80: {
 29158                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29159  013C2C  C0ED  FFD9         	movff	_lMotor,fsr2l
 29160  013C30  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29161  013C34  0E01               	movlw	1
 29162  013C36  BEDB               	btfsc	plusw2,7,c
 29163  013C38  D022               	goto	i2l1629
 29164  013C3A  0E01               	movlw	1
 29165  013C3C  50DB               	movf	plusw2,w,c
 29166  013C3E  E103               	bnz	i2u786_40
 29167  013C40  04DE               	decf	postinc2,w,c
 29168  013C42  A0D8               	btfss	status,0,c
 29169  013C44  D01C               	goto	i2l1629
 29170  013C46                     i2u786_40:
 29171                           
 29172                           ;Motor.c: 83: {
 29173                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29174  013C46  C0ED  FFD9         	movff	_lMotor,fsr2l
 29175  013C4A  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29176  013C4E  28DE               	incf	postinc2,w,c
 29177  013C50  E104               	bnz	i2u787_40
 29178  013C52  0E7F               	movlw	127
 29179  013C54  18DE               	xorwf	postinc2,w,c
 29180  013C56  B4D8               	btfsc	status,2,c
 29181  013C58  D007               	goto	i2l1630
 29182  013C5A                     i2u787_40:
 29183                           
 29184                           ;Motor.c: 85: lMotor->mDelta --;
 29185  013C5A  C0ED  FFD9         	movff	_lMotor,fsr2l
 29186  013C5E  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29187  013C62  06DE               	decf	postinc2,f,c
 29188  013C64  0E00               	movlw	0
 29189  013C66  5ADD               	subwfb	postdec2,f,c
 29190  013C68                     i2l1630:
 29191                           
 29192                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29193  013C68  0E8D               	movlw	low _PortE
 29194  013C6A  6E10               	movwf	i2Port_SetPin@pInput,c
 29195  013C6C  0E01               	movlw	high _PortE
 29196  013C6E  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29197  013C70  0E00               	movlw	0
 29198  013C72  6E12               	movwf	i2Port_SetPin@pPin,c
 29199  013C74  0E01               	movlw	1
 29200  013C76  6E13               	movwf	i2Port_SetPin@pValue,c
 29201  013C78  ECC8  F0A0         	call	i2_Port_SetPin	;wreg free
 29202                           
 29203                           ;Motor.c: 88: }
 29204  013C7C  D01B               	goto	i2l1631
 29205  013C7E                     i2l1629:
 29206                           
 29207                           ;Motor.c: 89: else
 29208                           ;Motor.c: 90: {
 29209                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29210  013C7E  C0ED  FFD9         	movff	_lMotor,fsr2l
 29211  013C82  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29212  013C86  04DE               	decf	postinc2,w,c
 29213  013C88  E104               	bnz	i2u788_40
 29214  013C8A  0E80               	movlw	128
 29215  013C8C  18DE               	xorwf	postinc2,w,c
 29216  013C8E  B4D8               	btfsc	status,2,c
 29217  013C90  D007               	goto	i2l1632
 29218  013C92                     i2u788_40:
 29219                           
 29220                           ;Motor.c: 92: lMotor->mDelta ++;
 29221  013C92  C0ED  FFD9         	movff	_lMotor,fsr2l
 29222  013C96  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29223  013C9A  2ADE               	incf	postinc2,f,c
 29224  013C9C  0E00               	movlw	0
 29225  013C9E  22DD               	addwfc	postdec2,f,c
 29226  013CA0                     i2l1632:
 29227                           
 29228                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29229  013CA0  0E8D               	movlw	low _PortE
 29230  013CA2  6E10               	movwf	i2Port_SetPin@pInput,c
 29231  013CA4  0E01               	movlw	high _PortE
 29232  013CA6  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29233  013CA8  0E00               	movlw	0
 29234  013CAA  6E12               	movwf	i2Port_SetPin@pPin,c
 29235  013CAC  0E00               	movlw	0
 29236  013CAE  6E13               	movwf	i2Port_SetPin@pValue,c
 29237  013CB0  ECC8  F0A0         	call	i2_Port_SetPin	;wreg free
 29238  013CB4                     i2l1631:
 29239                           
 29240                           ;Motor.c: 95: }
 29241                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29242  013CB4  0E8D               	movlw	low _PortE
 29243  013CB6  6E10               	movwf	i2Port_SetPin@pInput,c
 29244  013CB8  0E01               	movlw	high _PortE
 29245  013CBA  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29246  013CBC  0E01               	movlw	1
 29247  013CBE  6E12               	movwf	i2Port_SetPin@pPin,c
 29248  013CC0  0E01               	movlw	1
 29249  013CC2  6E13               	movwf	i2Port_SetPin@pValue,c
 29250  013CC4  ECC8  F0A0         	call	i2_Port_SetPin	;wreg free
 29251                           
 29252                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29253  013CC8  0E8D               	movlw	low _PortE
 29254  013CCA  6E10               	movwf	i2Port_SetPin@pInput,c
 29255  013CCC  0E01               	movlw	high _PortE
 29256  013CCE  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29257  013CD0  0E01               	movlw	1
 29258  013CD2  6E12               	movwf	i2Port_SetPin@pPin,c
 29259  013CD4  0E00               	movlw	0
 29260  013CD6  6E13               	movwf	i2Port_SetPin@pValue,c
 29261  013CD8  ECC8  F0A0         	call	i2_Port_SetPin	;wreg free
 29262                           
 29263                           ;Motor.c: 101: MXK_Release();
 29264  013CDC  EC76  F0B0         	call	i2_MXK_Release	;wreg free
 29265                           
 29266                           ;Motor.c: 102: Timer0_Restart();
 29267  013CE0  EC3C  F0B0         	call	i2_Timer0_Restart	;wreg free
 29268                           
 29269                           ;Motor.c: 103: return;
 29270  013CE4  0012               	return	
 29271  013CE6                     i2l1628:
 29272                           
 29273                           ;Motor.c: 104: }
 29274                           ;Motor.c: 105: MXK_Release();
 29275  013CE6  EC76  F0B0         	call	i2_MXK_Release	;wreg free
 29276                           
 29277                           ;Motor.c: 106: Timer0_Stop();
 29278  013CEA  EC73  F0B0         	call	i2_Timer0_Stop	;wreg free
 29279                           
 29280                           ;Motor.c: 107: return;
 29281  013CEE  0012               	return	
 29282  013CF0                     i2l1627:
 29283                           
 29284                           ;Motor.c: 108: }
 29285                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29286  013CF0  C10B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29287  013CF4  C10C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29288  013CF8  C10D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29289  013CFC  EC2F  F0B0         	call	i2_MXK_Queue	;wreg free
 29290  013D00  0012               	return		;funcret
 29291  013D02                     __end_ofi2_Motor_Step:
 29292                           	opt stack 0
 29293                           tosu	equ	0xFFF
 29294                           tosh	equ	0xFFE
 29295                           tosl	equ	0xFFD
 29296                           pclatu	equ	0xFFB
 29297                           pclath	equ	0xFFA
 29298                           tblptru	equ	0xFF8
 29299                           tblptrh	equ	0xFF7
 29300                           tblptrl	equ	0xFF6
 29301                           tablat	equ	0xFF5
 29302                           prodh	equ	0xFF4
 29303                           prodl	equ	0xFF3
 29304                           intcon	equ	0xFF2
 29305                           indf0	equ	0xFEF
 29306                           postinc0	equ	0xFEE
 29307                           fsr0h	equ	0xFEA
 29308                           fsr0l	equ	0xFE9
 29309                           wreg	equ	0xFE8
 29310                           indf1	equ	0xFE7
 29311                           postdec1	equ	0xFE5
 29312                           fsr1h	equ	0xFE2
 29313                           fsr1l	equ	0xFE1
 29314                           indf2	equ	0xFDF
 29315                           postinc2	equ	0xFDE
 29316                           postdec2	equ	0xFDD
 29317                           plusw2	equ	0xFDB
 29318                           fsr2h	equ	0xFDA
 29319                           fsr2l	equ	0xFD9
 29320                           status	equ	0xFD8
 29321                           
 29322 ;; *************** function i2_Timer0_Stop *****************
 29323 ;; Defined at:
 29324 ;;		line 89 in file "Library/Timer0.c"
 29325 ;; Parameters:    Size  Location     Type
 29326 ;;		None
 29327 ;; Auto vars:     Size  Location     Type
 29328 ;;		None
 29329 ;; Return value:  Size  Location     Type
 29330 ;;                  1    wreg      void 
 29331 ;; Registers used:
 29332 ;;		None
 29333 ;; Tracked objects:
 29334 ;;		On entry : 0/0
 29335 ;;		On exit  : 0/0
 29336 ;;		Unchanged: 0/0
 29337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29342 ;;Total ram usage:        0 bytes
 29343 ;; Hardware stack levels used:    1
 29344 ;; This function calls:
 29345 ;;		Nothing
 29346 ;; This function is called by:
 29347 ;;		_Timer0_ISR
 29348 ;;		i2_Motor_Step
 29349 ;; This function uses a non-reentrant model
 29350 ;;
 29351                           
 29352                           	psect	text156
 29353  0160E6                     __ptext156:
 29354                           	opt stack 0
 29355  0160E6                     i2_Timer0_Stop:
 29356                           	opt stack 18
 29357                           
 29358                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 29359                           
 29360                           ;incstack = 0
 29361  0160E6  9AF2               	bcf	intcon,5,c	;volatile
 29362                           
 29363                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 29364  0160E8  94F2               	bcf	intcon,2,c	;volatile
 29365  0160EA  0012               	return		;funcret
 29366  0160EC                     __end_ofi2_Timer0_Stop:
 29367                           	opt stack 0
 29368                           tosu	equ	0xFFF
 29369                           tosh	equ	0xFFE
 29370                           tosl	equ	0xFFD
 29371                           pclatu	equ	0xFFB
 29372                           pclath	equ	0xFFA
 29373                           tblptru	equ	0xFF8
 29374                           tblptrh	equ	0xFF7
 29375                           tblptrl	equ	0xFF6
 29376                           tablat	equ	0xFF5
 29377                           prodh	equ	0xFF4
 29378                           prodl	equ	0xFF3
 29379                           intcon	equ	0xFF2
 29380                           indf0	equ	0xFEF
 29381                           postinc0	equ	0xFEE
 29382                           fsr0h	equ	0xFEA
 29383                           fsr0l	equ	0xFE9
 29384                           wreg	equ	0xFE8
 29385                           indf1	equ	0xFE7
 29386                           postdec1	equ	0xFE5
 29387                           fsr1h	equ	0xFE2
 29388                           fsr1l	equ	0xFE1
 29389                           indf2	equ	0xFDF
 29390                           postinc2	equ	0xFDE
 29391                           postdec2	equ	0xFDD
 29392                           plusw2	equ	0xFDB
 29393                           fsr2h	equ	0xFDA
 29394                           fsr2l	equ	0xFD9
 29395                           status	equ	0xFD8
 29396                           
 29397 ;; *************** function i2_Timer0_Restart *****************
 29398 ;; Defined at:
 29399 ;;		line 83 in file "Library/Timer0.c"
 29400 ;; Parameters:    Size  Location     Type
 29401 ;;		None
 29402 ;; Auto vars:     Size  Location     Type
 29403 ;;		None
 29404 ;; Return value:  Size  Location     Type
 29405 ;;                  1    wreg      void 
 29406 ;; Registers used:
 29407 ;;		None
 29408 ;; Tracked objects:
 29409 ;;		On entry : 0/0
 29410 ;;		On exit  : 0/0
 29411 ;;		Unchanged: 0/0
 29412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29417 ;;Total ram usage:        0 bytes
 29418 ;; Hardware stack levels used:    1
 29419 ;; This function calls:
 29420 ;;		Nothing
 29421 ;; This function is called by:
 29422 ;;		i2_Motor_Step
 29423 ;; This function uses a non-reentrant model
 29424 ;;
 29425                           
 29426                           	psect	text157
 29427  016078                     __ptext157:
 29428                           	opt stack 0
 29429  016078                     i2_Timer0_Restart:
 29430                           	opt stack 17
 29431                           
 29432                           ;Timer0.c: 85: TMR0 = COUNTER;
 29433                           
 29434                           ;incstack = 0
 29435  016078  C033  FFD6         	movff	_COUNTER,4054	;volatile
 29436  01607C  C034  FFD7         	movff	_COUNTER+1,4055	;volatile
 29437                           
 29438                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29439  016080  8AF2               	bsf	intcon,5,c	;volatile
 29440  016082  0012               	return		;funcret
 29441  016084                     __end_ofi2_Timer0_Restart:
 29442                           	opt stack 0
 29443                           tosu	equ	0xFFF
 29444                           tosh	equ	0xFFE
 29445                           tosl	equ	0xFFD
 29446                           pclatu	equ	0xFFB
 29447                           pclath	equ	0xFFA
 29448                           tblptru	equ	0xFF8
 29449                           tblptrh	equ	0xFF7
 29450                           tblptrl	equ	0xFF6
 29451                           tablat	equ	0xFF5
 29452                           prodh	equ	0xFF4
 29453                           prodl	equ	0xFF3
 29454                           intcon	equ	0xFF2
 29455                           indf0	equ	0xFEF
 29456                           postinc0	equ	0xFEE
 29457                           fsr0h	equ	0xFEA
 29458                           fsr0l	equ	0xFE9
 29459                           wreg	equ	0xFE8
 29460                           indf1	equ	0xFE7
 29461                           postdec1	equ	0xFE5
 29462                           fsr1h	equ	0xFE2
 29463                           fsr1l	equ	0xFE1
 29464                           indf2	equ	0xFDF
 29465                           postinc2	equ	0xFDE
 29466                           postdec2	equ	0xFDD
 29467                           plusw2	equ	0xFDB
 29468                           fsr2h	equ	0xFDA
 29469                           fsr2l	equ	0xFD9
 29470                           status	equ	0xFD8
 29471                           
 29472 ;; *************** function i2_Port_SetPin *****************
 29473 ;; Defined at:
 29474 ;;		line 247 in file "Library/Port.c"
 29475 ;; Parameters:    Size  Location     Type
 29476 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29477 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29478 ;;  pPin            1   17[COMRAM] enum E6750
 29479 ;;  pValue          1   18[COMRAM] unsigned char 
 29480 ;; Auto vars:     Size  Location     Type
 29481 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29482 ;; Return value:  Size  Location     Type
 29483 ;;                  1    wreg      void 
 29484 ;; Registers used:
 29485 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29486 ;; Tracked objects:
 29487 ;;		On entry : 0/0
 29488 ;;		On exit  : 0/0
 29489 ;;		Unchanged: 0/0
 29490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29491 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29492 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29494 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29495 ;;Total ram usage:        5 bytes
 29496 ;; Hardware stack levels used:    1
 29497 ;; Hardware stack levels required when called:    3
 29498 ;; This function calls:
 29499 ;;		i2_Byte_SetBit
 29500 ;;		i2_Word_GetPair
 29501 ;; This function is called by:
 29502 ;;		i2_Motor_Step
 29503 ;; This function uses a non-reentrant model
 29504 ;;
 29505                           
 29506                           	psect	text158
 29507  014190                     __ptext158:
 29508                           	opt stack 0
 29509  014190                     i2_Port_SetPin:
 29510                           	opt stack 14
 29511                           
 29512                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29513                           
 29514                           ;incstack = 0
 29515  014190  0E08               	movlw	8
 29516  014192  2410               	addwf	i2Port_SetPin@pInput,w,c
 29517  014194  6E0D               	movwf	i2Word_GetPair@pInput,c
 29518  014196  0E00               	movlw	0
 29519  014198  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 29520  01419A  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 29521  01419C  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 29522  0141A0  ECF7  F0AD         	call	i2_Word_GetPair	;wreg free
 29523  0141A4  6E14               	movwf	i2Port_SetPin@Type,c
 29524                           
 29525                           ;Port.c: 250: switch (Type)
 29526  0141A6  D03B               	goto	i2l427
 29527  0141A8                     
 29528                           ;Port.c: 256: pValue &= 1;
 29529  0141A8  0E01               	movlw	1
 29530  0141AA  1613               	andwf	i2Port_SetPin@pValue,f,c
 29531                           
 29532                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29533  0141AC  EE20 F002          	lfsr	2,2
 29534  0141B0  5010               	movf	i2Port_SetPin@pInput,w,c
 29535  0141B2  26D9               	addwf	fsr2l,f,c
 29536  0141B4  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29537  0141B6  22DA               	addwfc	fsr2h,f,c
 29538  0141B8  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29539  0141BC  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29540  0141C0  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29541  0141C4  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29542  0141C8  ECA1  F0AA         	call	i2_Byte_SetBit	;wreg free
 29543                           
 29544                           ;Port.c: 258: break;
 29545  0141CC  0012               	return	
 29546  0141CE                     
 29547                           ;Port.c: 261: pValue &= 1;
 29548  0141CE  0E01               	movlw	1
 29549  0141D0  1613               	andwf	i2Port_SetPin@pValue,f,c
 29550                           
 29551                           ;Port.c: 262: pValue ^= 1;
 29552  0141D2  0E01               	movlw	1
 29553  0141D4  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 29554                           
 29555                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29556  0141D6  EE20 F002          	lfsr	2,2
 29557  0141DA  5010               	movf	i2Port_SetPin@pInput,w,c
 29558  0141DC  26D9               	addwf	fsr2l,f,c
 29559  0141DE  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29560  0141E0  22DA               	addwfc	fsr2h,f,c
 29561  0141E2  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29562  0141E6  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29563  0141EA  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29564  0141EE  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29565  0141F2  ECA1  F0AA         	call	i2_Byte_SetBit	;wreg free
 29566                           
 29567                           ;Port.c: 264: break;
 29568  0141F6  0012               	return	
 29569  0141F8                     
 29570                           ;Port.c: 266: pValue &= 1;
 29571  0141F8  0E01               	movlw	1
 29572  0141FA  1613               	andwf	i2Port_SetPin@pValue,f,c
 29573                           
 29574                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29575  0141FC  EE20 F004          	lfsr	2,4
 29576  014200  5010               	movf	i2Port_SetPin@pInput,w,c
 29577  014202  26D9               	addwf	fsr2l,f,c
 29578  014204  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29579  014206  22DA               	addwfc	fsr2h,f,c
 29580  014208  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29581  01420C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29582  014210  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29583  014214  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29584  014218  ECA1  F0AA         	call	i2_Byte_SetBit	;wreg free
 29585                           
 29586                           ;Port.c: 269: }
 29587                           
 29588                           ;Port.c: 268: break;
 29589  01421C  0012               	return	
 29590  01421E                     i2l427:
 29591  01421E  5014               	movf	i2Port_SetPin@Type,w,c
 29592                           
 29593                           ; Switch size 1, requested type "space"
 29594                           ; Number of cases is 4, Range of values is 0 to 3
 29595                           ; switch strategies available:
 29596                           ; Name         Instructions Cycles
 29597                           ; simple_byte           13     7 (average)
 29598                           ;	Chosen strategy is simple_byte
 29599  014220  0A00               	xorlw	0	; case 0
 29600  014222  B4D8               	btfsc	status,2,c
 29601  014224  0012               	return	
 29602  014226  0A01               	xorlw	1	; case 1
 29603  014228  B4D8               	btfsc	status,2,c
 29604  01422A  D7BE               	goto	i2l430
 29605  01422C  0A03               	xorlw	3	; case 2
 29606  01422E  B4D8               	btfsc	status,2,c
 29607  014230  D7CE               	goto	i2l432
 29608  014232  0A01               	xorlw	1	; case 3
 29609  014234  A4D8               	btfss	status,2,c
 29610  014236  0012               	return	
 29611  014238  D7DF               	goto	i2l433
 29612  01423A                     __end_ofi2_Port_SetPin:
 29613                           	opt stack 0
 29614                           tosu	equ	0xFFF
 29615                           tosh	equ	0xFFE
 29616                           tosl	equ	0xFFD
 29617                           pclatu	equ	0xFFB
 29618                           pclath	equ	0xFFA
 29619                           tblptru	equ	0xFF8
 29620                           tblptrh	equ	0xFF7
 29621                           tblptrl	equ	0xFF6
 29622                           tablat	equ	0xFF5
 29623                           prodh	equ	0xFF4
 29624                           prodl	equ	0xFF3
 29625                           intcon	equ	0xFF2
 29626                           indf0	equ	0xFEF
 29627                           postinc0	equ	0xFEE
 29628                           fsr0h	equ	0xFEA
 29629                           fsr0l	equ	0xFE9
 29630                           wreg	equ	0xFE8
 29631                           indf1	equ	0xFE7
 29632                           postdec1	equ	0xFE5
 29633                           fsr1h	equ	0xFE2
 29634                           fsr1l	equ	0xFE1
 29635                           indf2	equ	0xFDF
 29636                           postinc2	equ	0xFDE
 29637                           postdec2	equ	0xFDD
 29638                           plusw2	equ	0xFDB
 29639                           fsr2h	equ	0xFDA
 29640                           fsr2l	equ	0xFD9
 29641                           status	equ	0xFD8
 29642                           
 29643 ;; *************** function i2_Word_GetPair *****************
 29644 ;; Defined at:
 29645 ;;		line 156 in file "Library/Types.c"
 29646 ;; Parameters:    Size  Location     Type
 29647 ;;  pInput          2   12[COMRAM] PTR struct Word
 29648 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29649 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29650 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29651 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29652 ;;  pPair           1   14[COMRAM] unsigned char 
 29653 ;; Auto vars:     Size  Location     Type
 29654 ;;		None
 29655 ;; Return value:  Size  Location     Type
 29656 ;;                  1    wreg      unsigned char 
 29657 ;; Registers used:
 29658 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29659 ;; Tracked objects:
 29660 ;;		On entry : 0/0
 29661 ;;		On exit  : 0/0
 29662 ;;		Unchanged: 0/0
 29663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29664 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29667 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29668 ;;Total ram usage:        3 bytes
 29669 ;; Hardware stack levels used:    1
 29670 ;; Hardware stack levels required when called:    2
 29671 ;; This function calls:
 29672 ;;		i2_Byte_GetPair
 29673 ;; This function is called by:
 29674 ;;		i2_Port_SetPin
 29675 ;; This function uses a non-reentrant model
 29676 ;;
 29677                           
 29678                           	psect	text159
 29679  015BEE                     __ptext159:
 29680                           	opt stack 0
 29681  015BEE                     i2_Word_GetPair:
 29682                           	opt stack 14
 29683                           
 29684                           ;Types.c: 158: if (pPair >= 4)
 29685                           
 29686                           ;incstack = 0
 29687  015BEE  0E03               	movlw	3
 29688  015BF0  640F               	cpfsgt	i2Word_GetPair@pPair,c
 29689  015BF2  D00C               	goto	i2l781
 29690                           
 29691                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29692  015BF4  0E01               	movlw	1
 29693  015BF6  240D               	addwf	i2Word_GetPair@pInput,w,c
 29694  015BF8  6E0A               	movwf	i2Byte_GetPair@pInput,c
 29695  015BFA  0E00               	movlw	0
 29696  015BFC  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 29697  015BFE  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 29698  015C00  500F               	movf	i2Word_GetPair@pPair,w,c
 29699  015C02  0FFC               	addlw	252
 29700  015C04  6E0C               	movwf	i2Byte_GetPair@pPair,c
 29701  015C06  EC44  F0AF         	call	i2_Byte_GetPair	;wreg free
 29702  015C0A  0012               	return	
 29703  015C0C                     i2l781:
 29704                           
 29705                           ;Types.c: 160: else
 29706                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29707  015C0C  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 29708  015C10  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 29709  015C14  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 29710  015C18  EC44  F0AF         	call	i2_Byte_GetPair	;wreg free
 29711  015C1C  0012               	return	
 29712  015C1E                     __end_ofi2_Word_GetPair:
 29713                           	opt stack 0
 29714                           tosu	equ	0xFFF
 29715                           tosh	equ	0xFFE
 29716                           tosl	equ	0xFFD
 29717                           pclatu	equ	0xFFB
 29718                           pclath	equ	0xFFA
 29719                           tblptru	equ	0xFF8
 29720                           tblptrh	equ	0xFF7
 29721                           tblptrl	equ	0xFF6
 29722                           tablat	equ	0xFF5
 29723                           prodh	equ	0xFF4
 29724                           prodl	equ	0xFF3
 29725                           intcon	equ	0xFF2
 29726                           indf0	equ	0xFEF
 29727                           postinc0	equ	0xFEE
 29728                           fsr0h	equ	0xFEA
 29729                           fsr0l	equ	0xFE9
 29730                           wreg	equ	0xFE8
 29731                           indf1	equ	0xFE7
 29732                           postdec1	equ	0xFE5
 29733                           fsr1h	equ	0xFE2
 29734                           fsr1l	equ	0xFE1
 29735                           indf2	equ	0xFDF
 29736                           postinc2	equ	0xFDE
 29737                           postdec2	equ	0xFDD
 29738                           plusw2	equ	0xFDB
 29739                           fsr2h	equ	0xFDA
 29740                           fsr2l	equ	0xFD9
 29741                           status	equ	0xFD8
 29742                           
 29743 ;; *************** function i2_Byte_GetPair *****************
 29744 ;; Defined at:
 29745 ;;		line 87 in file "Library/Types.c"
 29746 ;; Parameters:    Size  Location     Type
 29747 ;;  pInput          2    9[COMRAM] PTR struct Byte
 29748 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29749 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29750 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29751 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29752 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29753 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29754 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29755 ;;		 -> NULL(0), 
 29756 ;;  pPair           1   11[COMRAM] unsigned char 
 29757 ;; Auto vars:     Size  Location     Type
 29758 ;;		None
 29759 ;; Return value:  Size  Location     Type
 29760 ;;                  1    wreg      unsigned char 
 29761 ;; Registers used:
 29762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29763 ;; Tracked objects:
 29764 ;;		On entry : 0/0
 29765 ;;		On exit  : 0/0
 29766 ;;		Unchanged: 0/0
 29767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29768 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29771 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29772 ;;Total ram usage:        3 bytes
 29773 ;; Hardware stack levels used:    1
 29774 ;; Hardware stack levels required when called:    1
 29775 ;; This function calls:
 29776 ;;		i2_Byte_GetZone
 29777 ;; This function is called by:
 29778 ;;		i2_Word_GetPair
 29779 ;; This function uses a non-reentrant model
 29780 ;;
 29781                           
 29782                           	psect	text160
 29783  015E88                     __ptext160:
 29784                           	opt stack 0
 29785  015E88                     i2_Byte_GetPair:
 29786                           	opt stack 14
 29787                           
 29788                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 29789                           
 29790                           ;incstack = 0
 29791  015E88  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 29792  015E8C  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 29793  015E90  0E04               	movlw	4
 29794  015E92  6E03               	movwf	i2Byte_GetZone@pMax,c
 29795  015E94  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 29796  015E98  0E02               	movlw	2
 29797  015E9A  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 29798  015E9C  EC76  F0A6         	call	i2_Byte_GetZone	;wreg free
 29799  015EA0  0012               	return	
 29800  015EA2                     __end_ofi2_Byte_GetPair:
 29801                           	opt stack 0
 29802                           tosu	equ	0xFFF
 29803                           tosh	equ	0xFFE
 29804                           tosl	equ	0xFFD
 29805                           pclatu	equ	0xFFB
 29806                           pclath	equ	0xFFA
 29807                           tblptru	equ	0xFF8
 29808                           tblptrh	equ	0xFF7
 29809                           tblptrl	equ	0xFF6
 29810                           tablat	equ	0xFF5
 29811                           prodh	equ	0xFF4
 29812                           prodl	equ	0xFF3
 29813                           intcon	equ	0xFF2
 29814                           indf0	equ	0xFEF
 29815                           postinc0	equ	0xFEE
 29816                           fsr0h	equ	0xFEA
 29817                           fsr0l	equ	0xFE9
 29818                           wreg	equ	0xFE8
 29819                           indf1	equ	0xFE7
 29820                           postdec1	equ	0xFE5
 29821                           fsr1h	equ	0xFE2
 29822                           fsr1l	equ	0xFE1
 29823                           indf2	equ	0xFDF
 29824                           postinc2	equ	0xFDE
 29825                           postdec2	equ	0xFDD
 29826                           plusw2	equ	0xFDB
 29827                           fsr2h	equ	0xFDA
 29828                           fsr2l	equ	0xFD9
 29829                           status	equ	0xFD8
 29830                           
 29831 ;; *************** function i2_Byte_GetZone *****************
 29832 ;; Defined at:
 29833 ;;		line 64 in file "Library/Types.c"
 29834 ;; Parameters:    Size  Location     Type
 29835 ;;  pInput          2    0[COMRAM] PTR struct Byte
 29836 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29837 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29838 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29839 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29840 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29841 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29842 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29843 ;;		 -> NULL(0), 
 29844 ;;  pMax            1    2[COMRAM] unsigned char 
 29845 ;;  pChunk          1    3[COMRAM] unsigned char 
 29846 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 29847 ;; Auto vars:     Size  Location     Type
 29848 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 29849 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 29850 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 29851 ;; Return value:  Size  Location     Type
 29852 ;;                  1    wreg      unsigned char 
 29853 ;; Registers used:
 29854 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 29855 ;; Tracked objects:
 29856 ;;		On entry : 0/0
 29857 ;;		On exit  : 0/0
 29858 ;;		Unchanged: 0/0
 29859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29860 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29861 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29862 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29863 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29864 ;;Total ram usage:        9 bytes
 29865 ;; Hardware stack levels used:    1
 29866 ;; This function calls:
 29867 ;;		Nothing
 29868 ;; This function is called by:
 29869 ;;		i2_Byte_GetPair
 29870 ;; This function uses a non-reentrant model
 29871 ;;
 29872                           
 29873                           	psect	text161
 29874  014CEC                     __ptext161:
 29875                           	opt stack 0
 29876  014CEC                     i2_Byte_GetZone:
 29877                           	opt stack 14
 29878                           
 29879                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 29880                           
 29881                           ;incstack = 0
 29882  014CEC  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 29883  014CF0  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 29884  014CF4  0E00               	movlw	low (__mediumconst shr (0+16))
 29885  014CF6  6EF8               	movwf	tblptru,c
 29886  014CF8  0E0F               	movlw	(high __ramtop+-1)
 29887  014CFA  64F7               	cpfsgt	tblptrh,c
 29888  014CFC  D003               	bra	i2u598_47
 29889  014CFE  0008               	tblrd		*
 29890  014D00  50F5               	movf	tablat,w,c
 29891  014D02  D005               	bra	i2u598_40
 29892  014D04                     i2u598_47:
 29893  014D04  CFF6 FFE9          	movff	tblptrl,fsr0l
 29894  014D08  CFF7 FFEA          	movff	tblptrh,fsr0h
 29895  014D0C  50EF               	movf	indf0,w,c
 29896  014D0E                     i2u598_40:
 29897  014D0E  6E09               	movwf	i2Byte_GetZone@Output,c
 29898                           
 29899                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 29900  014D10  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 29901  014D12  0D01               	mullw	1
 29902  014D14  0E33               	movlw	low _MASKS
 29903  014D16  24F3               	addwf	prodl,w,c
 29904  014D18  6EF6               	movwf	tblptrl,c
 29905  014D1A  0EFC               	movlw	high _MASKS
 29906  014D1C  20F4               	addwfc	prodh,w,c
 29907  014D1E  6EF7               	movwf	tblptrh,c
 29908  014D20                     	if	1	;There are 3 active tblptr bytes
 29909  014D20  6AF8               	clrf	tblptru,c
 29910  014D22  0E00               	movlw	low (__mediumconst shr (0+16))
 29911  014D24  22F8               	addwfc	tblptru,f,c
 29912  014D26                     	endif
 29913  014D26  0008               	tblrd		*
 29914  014D28  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 29915                           
 29916                           ;Types.c: 68: UINT8 Offset = 0;
 29917  014D2C  0E00               	movlw	0
 29918  014D2E  6E08               	movwf	i2Byte_GetZone@Offset,c
 29919                           
 29920                           ;Types.c: 70: while (pChunk >= pMax)
 29921  014D30  D003               	goto	i2l732
 29922  014D32                     
 29923                           ;Types.c: 71: {
 29924                           ;Types.c: 72: pChunk -= pMax;
 29925  014D32  5003               	movf	i2Byte_GetZone@pMax,w,c
 29926  014D34  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 29927                           
 29928                           ;Types.c: 73: Offset += 1;
 29929  014D36  2A08               	incf	i2Byte_GetZone@Offset,f,c
 29930  014D38                     i2l732:
 29931  014D38  5003               	movf	i2Byte_GetZone@pMax,w,c
 29932  014D3A  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 29933  014D3C  B0D8               	btfsc	status,0,c
 29934  014D3E  D7F9               	goto	i2l733
 29935                           
 29936                           ;Types.c: 74: }
 29937                           ;Types.c: 75: pChunk *= pChunkSize;
 29938  014D40  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 29939  014D42  0204               	mulwf	i2Byte_GetZone@pChunk,c
 29940  014D44  50F3               	movf	prodl,w,c
 29941  014D46  6E04               	movwf	i2Byte_GetZone@pChunk,c
 29942                           
 29943                           ;Types.c: 76: pChunk += Offset;
 29944  014D48  5008               	movf	i2Byte_GetZone@Offset,w,c
 29945  014D4A  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 29946                           
 29947                           ;Types.c: 78: Output >>= pChunk;
 29948  014D4C  2804               	incf	i2Byte_GetZone@pChunk,w,c
 29949  014D4E  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 29950  014D50  D002               	goto	i2u600_40
 29951  014D52                     i2u600_45:
 29952  014D52  90D8               	bcf	status,0,c
 29953  014D54  3209               	rrcf	i2Byte_GetZone@Output,f,c
 29954  014D56                     i2u600_40:
 29955  014D56  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 29956  014D58  D7FC               	goto	i2u600_45
 29957                           
 29958                           ;Types.c: 79: Output &= MASK;
 29959  014D5A  5007               	movf	i2Byte_GetZone@MASK,w,c
 29960  014D5C  1609               	andwf	i2Byte_GetZone@Output,f,c
 29961                           
 29962                           ;Types.c: 80: return Output;
 29963  014D5E  5009               	movf	i2Byte_GetZone@Output,w,c
 29964  014D60  0012               	return	
 29965  014D62                     __end_ofi2_Byte_GetZone:
 29966                           	opt stack 0
 29967                           tosu	equ	0xFFF
 29968                           tosh	equ	0xFFE
 29969                           tosl	equ	0xFFD
 29970                           pclatu	equ	0xFFB
 29971                           pclath	equ	0xFFA
 29972                           tblptru	equ	0xFF8
 29973                           tblptrh	equ	0xFF7
 29974                           tblptrl	equ	0xFF6
 29975                           tablat	equ	0xFF5
 29976                           prodh	equ	0xFF4
 29977                           prodl	equ	0xFF3
 29978                           intcon	equ	0xFF2
 29979                           indf0	equ	0xFEF
 29980                           postinc0	equ	0xFEE
 29981                           fsr0h	equ	0xFEA
 29982                           fsr0l	equ	0xFE9
 29983                           wreg	equ	0xFE8
 29984                           indf1	equ	0xFE7
 29985                           postdec1	equ	0xFE5
 29986                           fsr1h	equ	0xFE2
 29987                           fsr1l	equ	0xFE1
 29988                           indf2	equ	0xFDF
 29989                           postinc2	equ	0xFDE
 29990                           postdec2	equ	0xFDD
 29991                           plusw2	equ	0xFDB
 29992                           fsr2h	equ	0xFDA
 29993                           fsr2l	equ	0xFD9
 29994                           status	equ	0xFD8
 29995                           
 29996 ;; *************** function i2_Byte_SetBit *****************
 29997 ;; Defined at:
 29998 ;;		line 32 in file "Library/Types.c"
 29999 ;; Parameters:    Size  Location     Type
 30000 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30001 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30002 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30003 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30004 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30005 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30006 ;;		 -> NULL(0), 
 30007 ;;  pBit            1    2[COMRAM] unsigned char 
 30008 ;;  pValue          1    3[COMRAM] unsigned char 
 30009 ;; Auto vars:     Size  Location     Type
 30010 ;;		None
 30011 ;; Return value:  Size  Location     Type
 30012 ;;                  1    wreg      void 
 30013 ;; Registers used:
 30014 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30015 ;; Tracked objects:
 30016 ;;		On entry : 0/0
 30017 ;;		On exit  : 0/0
 30018 ;;		Unchanged: 0/0
 30019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30020 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30022 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30023 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30024 ;;Total ram usage:        7 bytes
 30025 ;; Hardware stack levels used:    1
 30026 ;; This function calls:
 30027 ;;		Nothing
 30028 ;; This function is called by:
 30029 ;;		i2_Port_SetPin
 30030 ;; This function uses a non-reentrant model
 30031 ;;
 30032                           
 30033                           	psect	text162
 30034  015542                     __ptext162:
 30035                           	opt stack 0
 30036  015542                     i2_Byte_SetBit:
 30037                           	opt stack 16
 30038                           
 30039                           ;Types.c: 34: pValue &= 1;
 30040                           
 30041                           ;incstack = 0
 30042  015542  0E01               	movlw	1
 30043  015544  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30044                           
 30045                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30046  015546  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30047  01554A  0E01               	movlw	1
 30048  01554C  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30049  01554E  2A05               	incf	??i2_Byte_SetBit,f,c
 30050  015550  D002               	goto	i2u687_44
 30051  015552                     i2u687_45:
 30052  015552  90D8               	bcf	status,0,c
 30053  015554  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30054  015556                     i2u687_44:
 30055  015556  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30056  015558  D7FC               	goto	i2u687_45
 30057  01555A  5006               	movf	??i2_Byte_SetBit+1,w,c
 30058  01555C  0AFF               	xorlw	255
 30059  01555E  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30060  015560  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30061  015564  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30062  015568  5007               	movf	??i2_Byte_SetBit+2,w,c
 30063  01556A  16DF               	andwf	indf2,f,c
 30064                           
 30065                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30066  01556C  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30067  015570  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30068  015574  2A05               	incf	??i2_Byte_SetBit,f,c
 30069  015576  D002               	goto	i2u688_44
 30070  015578                     i2u688_45:
 30071  015578  90D8               	bcf	status,0,c
 30072  01557A  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30073  01557C                     i2u688_44:
 30074  01557C  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30075  01557E  D7FC               	goto	i2u688_45
 30076  015580  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30077  015584  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30078  015588  5006               	movf	??i2_Byte_SetBit+1,w,c
 30079  01558A  12DF               	iorwf	indf2,f,c
 30080  01558C  0012               	return		;funcret
 30081  01558E                     __end_ofi2_Byte_SetBit:
 30082                           	opt stack 0
 30083                           tosu	equ	0xFFF
 30084                           tosh	equ	0xFFE
 30085                           tosl	equ	0xFFD
 30086                           pclatu	equ	0xFFB
 30087                           pclath	equ	0xFFA
 30088                           tblptru	equ	0xFF8
 30089                           tblptrh	equ	0xFF7
 30090                           tblptrl	equ	0xFF6
 30091                           tablat	equ	0xFF5
 30092                           prodh	equ	0xFF4
 30093                           prodl	equ	0xFF3
 30094                           intcon	equ	0xFF2
 30095                           indf0	equ	0xFEF
 30096                           postinc0	equ	0xFEE
 30097                           fsr0h	equ	0xFEA
 30098                           fsr0l	equ	0xFE9
 30099                           wreg	equ	0xFE8
 30100                           indf1	equ	0xFE7
 30101                           postdec1	equ	0xFE5
 30102                           fsr1h	equ	0xFE2
 30103                           fsr1l	equ	0xFE1
 30104                           indf2	equ	0xFDF
 30105                           postinc2	equ	0xFDE
 30106                           postdec2	equ	0xFDD
 30107                           plusw2	equ	0xFDB
 30108                           fsr2h	equ	0xFDA
 30109                           fsr2l	equ	0xFD9
 30110                           status	equ	0xFD8
 30111                           
 30112 ;; *************** function i2_MXK_SwitchTo *****************
 30113 ;; Defined at:
 30114 ;;		line 105 in file "Library/MXK.c"
 30115 ;; Parameters:    Size  Location     Type
 30116 ;;  pModule         1    wreg     enum E6927
 30117 ;; Auto vars:     Size  Location     Type
 30118 ;;  pModule         1    7[COMRAM] enum E6927
 30119 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30120 ;; Return value:  Size  Location     Type
 30121 ;;                  1    wreg      unsigned char 
 30122 ;; Registers used:
 30123 ;;		wreg, status,2, status,0, cstack
 30124 ;; Tracked objects:
 30125 ;;		On entry : 0/0
 30126 ;;		On exit  : 0/0
 30127 ;;		Unchanged: 0/0
 30128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30130 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30132 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30133 ;;Total ram usage:        2 bytes
 30134 ;; Hardware stack levels used:    1
 30135 ;; Hardware stack levels required when called:    1
 30136 ;; This function calls:
 30137 ;;		i2_delay_us
 30138 ;; This function is called by:
 30139 ;;		i2_Motor_Step
 30140 ;; This function uses a non-reentrant model
 30141 ;;
 30142                           
 30143                           	psect	text163
 30144  015A5A                     __ptext163:
 30145                           	opt stack 0
 30146  015A5A                     i2_MXK_SwitchTo:
 30147                           	opt stack 16
 30148                           
 30149                           ;incstack = 0
 30150                           ;i2MXK_SwitchTo@pModule stored from wreg
 30151  015A5A  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30152                           
 30153                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30154  015A5C  5086               	movf	3974,w,c	;volatile
 30155  015A5E  0B0F               	andlw	15
 30156  015A60  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30157                           
 30158                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30159  015A62  504C               	movf	_Bus_State,w,c
 30160  015A64  A4D8               	btfss	status,2,c
 30161  015A66  D002               	goto	i2l1730
 30162                           
 30163                           ;MXK.c: 110: return 0;
 30164  015A68  0E00               	movlw	0
 30165  015A6A  0012               	return	
 30166  015A6C                     i2l1730:
 30167                           
 30168                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30169  015A6C  0E00               	movlw	0
 30170  015A6E  6E4C               	movwf	_Bus_State,c
 30171                           
 30172                           ;MXK.c: 114: if (CUR != pModule)
 30173  015A70  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30174  015A72  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30175  015A74  B4D8               	btfsc	status,2,c
 30176  015A76  D00A               	goto	i2l1732
 30177                           
 30178                           ;MXK.c: 115: {
 30179                           ;MXK.c: 116: PORTG &= ~(0xF);
 30180  015A78  0EF0               	movlw	240
 30181  015A7A  1686               	andwf	3974,f,c	;volatile
 30182                           
 30183                           ;MXK.c: 117: PORTG |= pModule;
 30184  015A7C  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30185  015A7E  1286               	iorwf	3974,f,c	;volatile
 30186                           
 30187                           ;MXK.c: 120: delay_us(10);
 30188  015A80  0E00               	movlw	0
 30189  015A82  6E02               	movwf	i2delay_us@us+1,c
 30190  015A84  0E0A               	movlw	10
 30191  015A86  6E01               	movwf	i2delay_us@us,c
 30192  015A88  EC23  F0AC         	call	i2_delay_us	;wreg free
 30193  015A8C                     i2l1732:
 30194                           
 30195                           ;MXK.c: 121: }
 30196                           ;MXK.c: 122: return 1;
 30197  015A8C  0E01               	movlw	1
 30198  015A8E  0012               	return	
 30199  015A90                     __end_ofi2_MXK_SwitchTo:
 30200                           	opt stack 0
 30201                           tosu	equ	0xFFF
 30202                           tosh	equ	0xFFE
 30203                           tosl	equ	0xFFD
 30204                           pclatu	equ	0xFFB
 30205                           pclath	equ	0xFFA
 30206                           tblptru	equ	0xFF8
 30207                           tblptrh	equ	0xFF7
 30208                           tblptrl	equ	0xFF6
 30209                           tablat	equ	0xFF5
 30210                           prodh	equ	0xFF4
 30211                           prodl	equ	0xFF3
 30212                           intcon	equ	0xFF2
 30213                           indf0	equ	0xFEF
 30214                           postinc0	equ	0xFEE
 30215                           fsr0h	equ	0xFEA
 30216                           fsr0l	equ	0xFE9
 30217                           wreg	equ	0xFE8
 30218                           indf1	equ	0xFE7
 30219                           postdec1	equ	0xFE5
 30220                           fsr1h	equ	0xFE2
 30221                           fsr1l	equ	0xFE1
 30222                           indf2	equ	0xFDF
 30223                           postinc2	equ	0xFDE
 30224                           postdec2	equ	0xFDD
 30225                           plusw2	equ	0xFDB
 30226                           fsr2h	equ	0xFDA
 30227                           fsr2l	equ	0xFD9
 30228                           status	equ	0xFD8
 30229                           
 30230 ;; *************** function i2_delay_us *****************
 30231 ;; Defined at:
 30232 ;;		line 255 in file "Library/Types.c"
 30233 ;; Parameters:    Size  Location     Type
 30234 ;;  us              2    0[COMRAM] unsigned short 
 30235 ;; Auto vars:     Size  Location     Type
 30236 ;;  delay_us        4    2[COMRAM] unsigned long 
 30237 ;; Return value:  Size  Location     Type
 30238 ;;                  1    wreg      void 
 30239 ;; Registers used:
 30240 ;;		wreg, status,2, status,0
 30241 ;; Tracked objects:
 30242 ;;		On entry : 0/0
 30243 ;;		On exit  : 0/0
 30244 ;;		Unchanged: 0/0
 30245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30246 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30247 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30249 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30250 ;;Total ram usage:        6 bytes
 30251 ;; Hardware stack levels used:    1
 30252 ;; This function calls:
 30253 ;;		Nothing
 30254 ;; This function is called by:
 30255 ;;		i2_MXK_SwitchTo
 30256 ;; This function uses a non-reentrant model
 30257 ;;
 30258                           
 30259                           	psect	text164
 30260  015846                     __ptext164:
 30261                           	opt stack 0
 30262  015846                     i2_delay_us:
 30263                           	opt stack 16
 30264                           
 30265                           ;Types.c: 256: unsigned long u;
 30266                           ;Types.c: 257: while (us--) {
 30267                           
 30268                           ;incstack = 0
 30269  015846  D016               	goto	i2u691_40
 30270  015848                     i2l9637:
 30271                           
 30272                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30273  015848  0E00               	movlw	0
 30274  01584A  6E03               	movwf	i2delay_us@u,c
 30275  01584C  0E00               	movlw	0
 30276  01584E  6E04               	movwf	i2delay_us@u+1,c
 30277  015850  0E00               	movlw	0
 30278  015852  6E05               	movwf	i2delay_us@u+2,c
 30279  015854  0E00               	movlw	0
 30280  015856  6E06               	movwf	i2delay_us@u+3,c
 30281  015858                     i2l9639:
 30282  015858  5003               	movf	i2delay_us@u,w,c
 30283  01585A  1004               	iorwf	i2delay_us@u+1,w,c
 30284  01585C  1005               	iorwf	i2delay_us@u+2,w,c
 30285  01585E  1006               	iorwf	i2delay_us@u+3,w,c
 30286  015860  A4D8               	btfss	status,2,c
 30287  015862  D008               	goto	i2u691_40
 30288  015864  F000               	nop		; ;# 
 30289  015866  0E01               	movlw	1
 30290  015868  2603               	addwf	i2delay_us@u,f,c
 30291  01586A  0E00               	movlw	0
 30292  01586C  2204               	addwfc	i2delay_us@u+1,f,c
 30293  01586E  2205               	addwfc	i2delay_us@u+2,f,c
 30294  015870  2206               	addwfc	i2delay_us@u+3,f,c
 30295  015872  D7F2               	goto	i2l9639
 30296  015874                     i2u691_40:
 30297  015874  0601               	decf	i2delay_us@us,f,c
 30298  015876  A0D8               	btfss	status,0,c
 30299  015878  0602               	decf	i2delay_us@us+1,f,c
 30300  01587A  2801               	incf	i2delay_us@us,w,c
 30301  01587C  E1E5               	bnz	i2l9637
 30302  01587E  2802               	incf	i2delay_us@us+1,w,c
 30303  015880  B4D8               	btfsc	status,2,c
 30304  015882  0012               	return	
 30305  015884  D7E1               	goto	i2l832
 30306  015886                     __end_ofi2_delay_us:
 30307                           	opt stack 0
 30308                           tosu	equ	0xFFF
 30309                           tosh	equ	0xFFE
 30310                           tosl	equ	0xFFD
 30311                           pclatu	equ	0xFFB
 30312                           pclath	equ	0xFFA
 30313                           tblptru	equ	0xFF8
 30314                           tblptrh	equ	0xFF7
 30315                           tblptrl	equ	0xFF6
 30316                           tablat	equ	0xFF5
 30317                           prodh	equ	0xFF4
 30318                           prodl	equ	0xFF3
 30319                           intcon	equ	0xFF2
 30320                           indf0	equ	0xFEF
 30321                           postinc0	equ	0xFEE
 30322                           fsr0h	equ	0xFEA
 30323                           fsr0l	equ	0xFE9
 30324                           wreg	equ	0xFE8
 30325                           indf1	equ	0xFE7
 30326                           postdec1	equ	0xFE5
 30327                           fsr1h	equ	0xFE2
 30328                           fsr1l	equ	0xFE1
 30329                           indf2	equ	0xFDF
 30330                           postinc2	equ	0xFDE
 30331                           postdec2	equ	0xFDD
 30332                           plusw2	equ	0xFDB
 30333                           fsr2h	equ	0xFDA
 30334                           fsr2l	equ	0xFD9
 30335                           status	equ	0xFD8
 30336                           
 30337 ;; *************** function i2_MXK_Release *****************
 30338 ;; Defined at:
 30339 ;;		line 130 in file "Library/MXK.c"
 30340 ;; Parameters:    Size  Location     Type
 30341 ;;		None
 30342 ;; Auto vars:     Size  Location     Type
 30343 ;;		None
 30344 ;; Return value:  Size  Location     Type
 30345 ;;                  1    wreg      unsigned char 
 30346 ;; Registers used:
 30347 ;;		wreg, status,2, status,0
 30348 ;; Tracked objects:
 30349 ;;		On entry : 0/0
 30350 ;;		On exit  : 0/0
 30351 ;;		Unchanged: 0/0
 30352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30357 ;;Total ram usage:        0 bytes
 30358 ;; Hardware stack levels used:    1
 30359 ;; This function calls:
 30360 ;;		Nothing
 30361 ;; This function is called by:
 30362 ;;		i2_Motor_Step
 30363 ;; This function uses a non-reentrant model
 30364 ;;
 30365                           
 30366                           	psect	text165
 30367  0160EC                     __ptext165:
 30368                           	opt stack 0
 30369  0160EC                     i2_MXK_Release:
 30370                           	opt stack 17
 30371                           
 30372                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 30373                           
 30374                           ;incstack = 0
 30375  0160EC  0E01               	movlw	1
 30376  0160EE  6E4C               	movwf	_Bus_State,c
 30377                           
 30378                           ;MXK.c: 135: return 1;
 30379                           ;	Return value of i2_MXK_Release is never used
 30380  0160F0  0012               	return	
 30381  0160F2                     __end_ofi2_MXK_Release:
 30382                           	opt stack 0
 30383                           tosu	equ	0xFFF
 30384                           tosh	equ	0xFFE
 30385                           tosl	equ	0xFFD
 30386                           pclatu	equ	0xFFB
 30387                           pclath	equ	0xFFA
 30388                           tblptru	equ	0xFF8
 30389                           tblptrh	equ	0xFF7
 30390                           tblptrl	equ	0xFF6
 30391                           tablat	equ	0xFF5
 30392                           prodh	equ	0xFF4
 30393                           prodl	equ	0xFF3
 30394                           intcon	equ	0xFF2
 30395                           indf0	equ	0xFEF
 30396                           postinc0	equ	0xFEE
 30397                           fsr0h	equ	0xFEA
 30398                           fsr0l	equ	0xFE9
 30399                           wreg	equ	0xFE8
 30400                           indf1	equ	0xFE7
 30401                           postdec1	equ	0xFE5
 30402                           fsr1h	equ	0xFE2
 30403                           fsr1l	equ	0xFE1
 30404                           indf2	equ	0xFDF
 30405                           postinc2	equ	0xFDE
 30406                           postdec2	equ	0xFDD
 30407                           plusw2	equ	0xFDB
 30408                           fsr2h	equ	0xFDA
 30409                           fsr2l	equ	0xFD9
 30410                           status	equ	0xFD8
 30411                           
 30412 ;; *************** function i2_MXK_Queue *****************
 30413 ;; Defined at:
 30414 ;;		line 144 in file "Library/MXK.c"
 30415 ;; Parameters:    Size  Location     Type
 30416 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30417 ;;		 -> Absolute function(1), Motor_Step(1), 
 30418 ;; Auto vars:     Size  Location     Type
 30419 ;;		None
 30420 ;; Return value:  Size  Location     Type
 30421 ;;                  1    wreg      void 
 30422 ;; Registers used:
 30423 ;;		wreg, status,2, status,0
 30424 ;; Tracked objects:
 30425 ;;		On entry : 0/0
 30426 ;;		On exit  : 0/0
 30427 ;;		Unchanged: 0/0
 30428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30429 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30432 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30433 ;;Total ram usage:        3 bytes
 30434 ;; Hardware stack levels used:    1
 30435 ;; This function calls:
 30436 ;;		Nothing
 30437 ;; This function is called by:
 30438 ;;		i2_Motor_Step
 30439 ;; This function uses a non-reentrant model
 30440 ;;
 30441                           
 30442                           	psect	text166
 30443  01605E                     __ptext166:
 30444                           	opt stack 0
 30445  01605E                     i2_MXK_Queue:
 30446                           	opt stack 17
 30447                           
 30448                           ;MXK.c: 146: lQueue = pCallback;
 30449                           
 30450                           ;incstack = 0
 30451  01605E  C001  F0E6         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30452  016062  C002  F0E7         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30453  016066  C003  F0E8         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30454  01606A  0012               	return		;funcret
 30455  01606C                     __end_ofi2_MXK_Queue:
 30456                           	opt stack 0
 30457                           tosu	equ	0xFFF
 30458                           tosh	equ	0xFFE
 30459                           tosl	equ	0xFFD
 30460                           pclatu	equ	0xFFB
 30461                           pclath	equ	0xFFA
 30462                           tblptru	equ	0xFF8
 30463                           tblptrh	equ	0xFF7
 30464                           tblptrl	equ	0xFF6
 30465                           tablat	equ	0xFF5
 30466                           prodh	equ	0xFF4
 30467                           prodl	equ	0xFF3
 30468                           intcon	equ	0xFF2
 30469                           indf0	equ	0xFEF
 30470                           postinc0	equ	0xFEE
 30471                           fsr0h	equ	0xFEA
 30472                           fsr0l	equ	0xFE9
 30473                           wreg	equ	0xFE8
 30474                           indf1	equ	0xFE7
 30475                           postdec1	equ	0xFE5
 30476                           fsr1h	equ	0xFE2
 30477                           fsr1l	equ	0xFE1
 30478                           indf2	equ	0xFDF
 30479                           postinc2	equ	0xFDE
 30480                           postdec2	equ	0xFDD
 30481                           plusw2	equ	0xFDB
 30482                           fsr2h	equ	0xFDA
 30483                           fsr2l	equ	0xFD9
 30484                           status	equ	0xFD8
 30485                           tosu	equ	0xFFF
 30486                           tosh	equ	0xFFE
 30487                           tosl	equ	0xFFD
 30488                           pclatu	equ	0xFFB
 30489                           pclath	equ	0xFFA
 30490                           tblptru	equ	0xFF8
 30491                           tblptrh	equ	0xFF7
 30492                           tblptrl	equ	0xFF6
 30493                           tablat	equ	0xFF5
 30494                           prodh	equ	0xFF4
 30495                           prodl	equ	0xFF3
 30496                           intcon	equ	0xFF2
 30497                           indf0	equ	0xFEF
 30498                           postinc0	equ	0xFEE
 30499                           fsr0h	equ	0xFEA
 30500                           fsr0l	equ	0xFE9
 30501                           wreg	equ	0xFE8
 30502                           indf1	equ	0xFE7
 30503                           postdec1	equ	0xFE5
 30504                           fsr1h	equ	0xFE2
 30505                           fsr1l	equ	0xFE1
 30506                           indf2	equ	0xFDF
 30507                           postinc2	equ	0xFDE
 30508                           postdec2	equ	0xFDD
 30509                           plusw2	equ	0xFDB
 30510                           fsr2h	equ	0xFDA
 30511                           fsr2l	equ	0xFD9
 30512                           status	equ	0xFD8
 30513                           
 30514                           	psect	text167
 30515  000000                     __ptext167:
 30516                           	opt stack 0
 30517                           tosu	equ	0xFFF
 30518                           tosh	equ	0xFFE
 30519                           tosl	equ	0xFFD
 30520                           pclatu	equ	0xFFB
 30521                           pclath	equ	0xFFA
 30522                           tblptru	equ	0xFF8
 30523                           tblptrh	equ	0xFF7
 30524                           tblptrl	equ	0xFF6
 30525                           tablat	equ	0xFF5
 30526                           prodh	equ	0xFF4
 30527                           prodl	equ	0xFF3
 30528                           intcon	equ	0xFF2
 30529                           indf0	equ	0xFEF
 30530                           postinc0	equ	0xFEE
 30531                           fsr0h	equ	0xFEA
 30532                           fsr0l	equ	0xFE9
 30533                           wreg	equ	0xFE8
 30534                           indf1	equ	0xFE7
 30535                           postdec1	equ	0xFE5
 30536                           fsr1h	equ	0xFE2
 30537                           fsr1l	equ	0xFE1
 30538                           indf2	equ	0xFDF
 30539                           postinc2	equ	0xFDE
 30540                           postdec2	equ	0xFDD
 30541                           plusw2	equ	0xFDB
 30542                           fsr2h	equ	0xFDA
 30543                           fsr2l	equ	0xFD9
 30544                           status	equ	0xFD8
 30545                           
 30546                           	psect	rparam
 30547  0000                     tosu	equ	0xFFF
 30548                           tosh	equ	0xFFE
 30549                           tosl	equ	0xFFD
 30550                           pclatu	equ	0xFFB
 30551                           pclath	equ	0xFFA
 30552                           tblptru	equ	0xFF8
 30553                           tblptrh	equ	0xFF7
 30554                           tblptrl	equ	0xFF6
 30555                           tablat	equ	0xFF5
 30556                           prodh	equ	0xFF4
 30557                           prodl	equ	0xFF3
 30558                           intcon	equ	0xFF2
 30559                           indf0	equ	0xFEF
 30560                           postinc0	equ	0xFEE
 30561                           fsr0h	equ	0xFEA
 30562                           fsr0l	equ	0xFE9
 30563                           wreg	equ	0xFE8
 30564                           indf1	equ	0xFE7
 30565                           postdec1	equ	0xFE5
 30566                           fsr1h	equ	0xFE2
 30567                           fsr1l	equ	0xFE1
 30568                           indf2	equ	0xFDF
 30569                           postinc2	equ	0xFDE
 30570                           postdec2	equ	0xFDD
 30571                           plusw2	equ	0xFDB
 30572                           fsr2h	equ	0xFDA
 30573                           fsr2l	equ	0xFD9
 30574                           status	equ	0xFD8
 30575                           
 30576                           	psect	temp
 30577  000051                     btemp:
 30578                           	opt stack 0
 30579  000051                     	ds	1
 30580  0000                     int$flags	set	btemp
 30581  0000                     wtemp6	set	btemp+1
 30582                           tosu	equ	0xFFF
 30583                           tosh	equ	0xFFE
 30584                           tosl	equ	0xFFD
 30585                           pclatu	equ	0xFFB
 30586                           pclath	equ	0xFFA
 30587                           tblptru	equ	0xFF8
 30588                           tblptrh	equ	0xFF7
 30589                           tblptrl	equ	0xFF6
 30590                           tablat	equ	0xFF5
 30591                           prodh	equ	0xFF4
 30592                           prodl	equ	0xFF3
 30593                           intcon	equ	0xFF2
 30594                           indf0	equ	0xFEF
 30595                           postinc0	equ	0xFEE
 30596                           fsr0h	equ	0xFEA
 30597                           fsr0l	equ	0xFE9
 30598                           wreg	equ	0xFE8
 30599                           indf1	equ	0xFE7
 30600                           postdec1	equ	0xFE5
 30601                           fsr1h	equ	0xFE2
 30602                           fsr1l	equ	0xFE1
 30603                           indf2	equ	0xFDF
 30604                           postinc2	equ	0xFDE
 30605                           postdec2	equ	0xFDD
 30606                           plusw2	equ	0xFDB
 30607                           fsr2h	equ	0xFDA
 30608                           fsr2l	equ	0xFD9
 30609                           status	equ	0xFD8


Data Sizes:
    Strings     386
    Constant    806
    Data        33
    BSS         821
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160    134     150
    BANK1           256      0     247
    BANK2           256      0     251
    BANK3           256     24      24
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[6]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_72(CODE[12]), STR_71(CODE[19]), STR_70(CODE[19]), STR_69(CODE[19]), 
		 -> STR_68(CODE[19]), STR_67(CODE[19]), STR_66(CODE[19]), STR_65(CODE[19]), 
		 -> STR_64(CODE[19]), STR_63(CODE[16]), STR_62(CODE[28]), STR_61(CODE[3]), 
		 -> STR_60(CODE[19]), STR_59(CODE[19]), STR_58(CODE[19]), STR_57(CODE[19]), 
		 -> STR_56(CODE[19]), STR_55(CODE[19]), STR_54(CODE[19]), STR_53(CODE[19]), 
		 -> STR_52(CODE[11]), STR_51(CODE[23]), STR_50(CODE[3]), STR_49(CODE[19]), 
		 -> STR_48(CODE[19]), STR_47(CODE[19]), STR_46(CODE[19]), STR_45(CODE[19]), 
		 -> STR_44(CODE[19]), STR_43(CODE[19]), STR_42(CODE[19]), STR_41(CODE[22]), 
		 -> STR_40(CODE[3]), STR_39(CODE[19]), STR_38(CODE[19]), STR_37(CODE[19]), 
		 -> STR_36(CODE[19]), STR_35(CODE[28]), STR_34(CODE[28]), STR_33(CODE[30]), 
		 -> STR_32(CODE[28]), STR_31(CODE[15]), STR_30(CODE[3]), STR_29(CODE[21]), 
		 -> STR_28(CODE[3]), STR_27(CODE[19]), STR_26(CODE[28]), STR_25(CODE[20]), 
		 -> STR_24(CODE[3]), STR_23(CODE[19]), STR_22(CODE[19]), STR_21(CODE[19]), 
		 -> STR_20(CODE[19]), STR_19(CODE[19]), STR_18(CODE[19]), STR_17(CODE[19]), 
		 -> STR_16(CODE[19]), STR_15(CODE[3]), STR_14(CODE[19]), STR_13(CODE[28]), 
		 -> STR_12(CODE[20]), STR_11(CODE[3]), STR_10(CODE[19]), STR_9(CODE[19]), 
		 -> STR_8(CODE[19]), STR_7(CODE[19]), STR_6(CODE[19]), STR_5(CODE[19]), 
		 -> STR_4(CODE[19]), STR_3(CODE[16]), STR_2(CODE[19]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK1[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortE(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_Sensor_Observe
    _main->_Sensor_Observe2
    _Turn->_eusartSend
    _Sensor_Observe2->_ADCAverage
    _Sensor_Observe->_ADCAverage
    _Robot_Init->_UpdateDistance
    _UpdateDistance->_eusartSend
    _Robot_Stop->_eusartSend
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _LEDOn->_eusartSend
    _LEDOff->_eusartSend
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _Get_Sensor_State->_eusartSend
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _Drive->_eusartSend
    _Closest_Object2->_ADCAverage
    _SteppingCW->_delay_ms
    _Closest_Object->_ADCAverage
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _SteppingCCW->_delay_ms
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit
    _ADCAverage->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->___fladd
    _eval_poly->___fladd
    ___flmul->___xxtofl
    ___flsub->___fladd
    ___fladd->___flneg
    ___flneg->___flmul
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _BangBang->_eusartSend

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_ADCAverage
    _Sensor_Observe2->_ADCAverage
    _Sensor_Observe->_ADCAverage
    _Closest_Object2->_ADCAverage
    _Closest_Object->_ADCAverage

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0 2031261
                                            123 BANK0     11    11      0
                         _ADCAverage
                           _BangBang
                     _Closest_Object
                    _Closest_Object2
                       _Console_Init
                     _Console_Render
                              _Drive
                    _FunctInitButton
                   _Get_Sensor_State
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                         _HMI_Render
                    _HMI_RightSwitch *
                      _HMI_SetNumber
                       _HMI_UpSwitch *
                         _ISR_Enable
                            _InitADC
            _InitSerialCommunication
                        _Init_Timer0
                           _LCD_Init
                          _LEDToggle
                           _LED_Init
                            _LED_Set
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                     _MXK_TestButton *
                    _Reset_variables
                         _Robot_Init
                         _Robot_Stop
                     _Sensor_Observe
                    _Sensor_Observe2
                               _Turn
                     _UpdateDistance
                           _delay_ms
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Turn                                                10     4      6     778
                                              1 BANK0     10     4      6
                         _Robot_Stop
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Sensor_Observe2                                      2     2      0  158592
                                            121 BANK0      2     2      0
                         _ADCAverage
                     _Console_Render
                        _SteppingCCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Sensor_Observe                                       2     2      0  158592
                                            121 BANK0      2     2      0
                         _ADCAverage
                     _Console_Render
                         _SteppingCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Robot_Init                                           0     0      0      93
                         _Robot_Stop
                     _UpdateDistance
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _UpdateDistance                                       2     0      2      31
                                              1 BANK0      2     0      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Robot_Stop                                           0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Reset_variables                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  364440
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   86131
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   31288
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LEDToggle                                            0     0      0      62
                             _LEDOff
                              _LEDOn
 ---------------------------------------------------------------------------------
 (2) _LEDOn                                                0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _LEDOff                                               0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  293556
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  263181
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   95805
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _Init_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSerialCommunication                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0   84861
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84861
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   37493
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Get_Sensor_State                                     0     0      0      31
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _eusartRec                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Drive                                                4     2      2     561
                                              1 BANK0      4     2      2
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Closest_Object2                                      0     0      0  158592
                         _ADCAverage
                     _Console_Render
                         _SteppingCW
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SteppingCW                                           0     0      0    2686
                               _STP1
                               _STP2
                               _STP3
                               _STP4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _Closest_Object                                       0     0      0  158592
                         _ADCAverage
                     _Console_Render
                        _SteppingCCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4   15540
                                             21 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _SteppingCCW                                          0     0      0    2686
                               _STP1
                               _STP2
                               _STP3
                               _STP4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             6     4      2    2686
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _STP4                                                 0     0      0       0
                         _Coil_Setup
 ---------------------------------------------------------------------------------
 (3) _STP3                                                 0     0      0       0
                         _Coil_Setup
 ---------------------------------------------------------------------------------
 (3) _STP2                                                 0     0      0       0
                         _Coil_Setup
 ---------------------------------------------------------------------------------
 (3) _STP1                                                 0     0      0       0
                         _Coil_Setup
 ---------------------------------------------------------------------------------
 (4) _Coil_Setup                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35631
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   16824
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADCAverage                                          26    26      0  104735
                                            119 BANK0      2     2      0
                                              0 BANK3     24    24      0
                       _FunctReadADC
                         _HMI_Render
                      _HMI_SetNumber
                            ___awdiv
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                             ___wmul
                           ___xxtofl
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   81724
                                             98 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   26512
                                             79 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   43838
                                             87 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     663
                                             79 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   11207
                                             73 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (5) ___xxtofl                                            14    10      4    1692
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (6) ___fltol                                             10     6      4     945
                                             63 BANK0     10     6      4
                            ___fladd (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___flge                                              12     4      8    1482
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   12261
                                             63 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (6) ___flmul                                             25    17      8    5457
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    6271
                                             63 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             20    12      8    5638
                                             43 BANK0     20    12      8
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     673
                                             39 BANK0      4     0      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _HMI_SetNumber                                        2     0      2    4398
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (4) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (5) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (5) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (6) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _FunctReadADC                                         2     0      2     214
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _BangBang                                             8     0      8    3195
                                              1 BANK0      8     0      8
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _eusartSend                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCAverage
     _FunctReadADC
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     ___awdiv
     ___fladd
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flmul
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flneg
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___wmul
     ___xxtofl
     _pow
       ___flge
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _exp
         ___fldiv
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _floor
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flge
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
       _log
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _frexp
   _BangBang
     _eusartSend
   _Closest_Object
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___wmul
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCCW
       _STP1
         _Coil_Setup
       _STP2
         _Coil_Setup
       _STP3
         _Coil_Setup
       _STP4
         _Coil_Setup
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Closest_Object2
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___wmul
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCW
       _STP1
         _Coil_Setup
       _STP2
         _Coil_Setup
       _STP3
         _Coil_Setup
       _STP4
         _Coil_Setup
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _Drive
     _eusartSend
   _FunctInitButton
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
   _Get_Sensor_State
     _eusartRec
     _eusartSend
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_Render *
     _OutSeg
       _SPI_Send
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_SetNumber *
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _HMI_UpSwitch *
     _Port_GetPin
   _ISR_Enable *
   _InitADC *
   _InitSerialCommunication *
   _Init_Timer0 *
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _LEDToggle *
     _LEDOff
       _eusartSend
     _LEDOn
       _eusartSend
   _LED_Init *
     _LED_Set
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
   _LED_Set *
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_TestButton *
     _Port_GetPin
   _Reset_variables *
   _Robot_Init *
     _Robot_Stop
       _eusartSend
     _UpdateDistance
       _eusartRec
       _eusartSend
     _eusartSend
   _Robot_Stop *
     _eusartSend
   _Sensor_Observe *
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___wmul
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCW
       _STP1
         _Coil_Setup
       _STP2
         _Coil_Setup
       _STP3
         _Coil_Setup
       _STP4
         _Coil_Setup
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Sensor_Observe2 *
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___wmul
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCCW
       _STP1
         _Coil_Setup
       _STP2
         _Coil_Setup
       _STP3
         _Coil_Setup
       _STP4
         _Coil_Setup
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Turn *
     _Robot_Stop
       _eusartSend
     _eusartRec
     _eusartSend
   _UpdateDistance *
     _eusartRec
     _eusartSend
   _delay_ms *
   _printf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     18      18      11        9.4%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FB       9       98.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     86      96       5       93.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2F0      12        0.0%
DATA                 0      0     41C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 14 15:39:14 2018

                   i2_Timer0_Stop 60E6                  SPI_Init@pChannel 0091  
      __size_of_MXK_BlockSwitchTo 0038                      i2_Motor_Step 3C02  
                               _A 01F5                                 l8 406E  
                    ___fldiv@aexp 0078                      ___fldiv@bexp 0077  
                               _a 01F6                                 _i 0146  
                               _j 0145                                 _l 004F  
                               _u 0144                                 _w 0050  
                               _x 0120                      ___fldiv@sign 006C  
               ??_Reset_variables 0060                                l11 34E6  
                              l12 34D4                                l90 31AA  
                              l87 3124               __size_of_ADCAverage 030E  
                              l89 3184                  ??_UpdateDistance 0063  
                    ___awdiv@sign 0065               ___wmul@multiplicand 0062  
                   _HMI_DIPSwitch 5F8A                LCD_DrawField@pSize 0078  
              LCD_DrawField@count 007E                 ?_Event_TestButton 0001  
                i2_Timer0_Restart 6078                               l120 457A  
                             l121 4590                               l122 45A6  
                             l220 51FA                               l117 45BC  
                             l221 51CA                               l118 4566  
                             l230 5640                               l222 520A  
                             l223 51E2                       ?_LED_Toggle 0001  
                             l234 5834                               l235 580C  
                             l227 5658                               l403 2AE2  
                             l412 2802                               l228 5628  
                             l340 4790                               l404 2A82  
                             l421 279E                               l413 26B4  
                             l237 5820                               l341 479A  
                             l405 2B12                     ??_Console_Tab 0068  
                             l414 281E                               l430 3F9E  
                             l350 485E                               l342 47A4  
                             l510 2320                               l406 2A9A  
                             l183 4A02                               l415 26D6  
                             l351 480C                               l343 47AE  
                             l511 2416                               l407 2AB2  
                             l184 49E2                               l600 07A2  
                             l432 3FC4                               l344 47B8  
                             l512 2340                               l408 2ACA  
                             l417 273A                               l601 08F4  
                             l433 3FF0                               l353 4818  
                             l337 47D6                               l345 47C2  
                             l610 096C                               l602 07CE  
                             l354 4822                               l346 47CC  
                             l338 4784                               l370 4730  
                             l611 09B2                               l603 0904  
                             l427 4018                               l355 482C  
                             l363 474E                               l371 473A  
                             l531 19D6                       ?_HMI_GetBar 0001  
                             l612 09F8                               l604 085E  
                             l356 4836                               l372 4744  
                             l364 46FC                               l532 19F8  
                             l516 2380                               l357 4840  
                             l509 23FC                               l614 0ACA  
                             l358 484A                               l366 4708  
                             l526 1A18                               l615 0AC2  
                             l607 0A3E                               l359 4854  
                             l367 4712                               l519 23C0  
                             l616 0ADC                               l608 0926  
                             l368 471C                               l528 1A36  
                             l393 5456                               l617 0AC6  
                             l609 0A5C                               l369 4726  
                             l529 19B8                               l483 1FE0  
                             l900 1AF2                               l732 4B5A  
                             l476 20A8                               l901 1AF6  
                             l733 4B54                               l389 5106  
                             l477 1F38                               l397 5802  
                             l910 1B1A                               l902 1AFA  
                             l726 4692                               l478 20C4  
                             l486 2044                               l654 5C82  
                             l911 1B1E                               l903 1AFE  
                             l727 468C                               l479 1F7C  
                             l655 5C7A                               l912 1B22  
                             l904 1B02                               l824 516A  
                             l832 56FC                               l681 4E4E  
                             l913 1B26                               l905 1B06  
                             l921 5300                               l673 5B80  
                             l657 5C7E                               l914 1B2A  
                             l906 1B0A                               l922 52D0  
                             l930 3EFC                               l915 1B2E  
                             l907 1B0E                               l819 5046  
                             l684 4E64                               l916 1B32  
                             l908 1B12                               l860 1A52  
                             l853 1B3A                               l917 1B36  
                             l909 1B16                               l861 1A56  
                             l781 5B4C                               l597 07AC  
                             l678 4E8A                               l686 4E74  
                             l870 1A7A                               l862 1A5A  
                             l854 1A3E                               l598 0798  
                             l679 4E3E                               l871 1A7E  
                             l863 1A5E                               l599 07BC  
                             l880 1AA2                               l872 1A82  
                             l864 1A62                               l856 1A42  
                             l928 3F6E                               l776 59D6  
                             l881 1AA6                               l873 1A86  
                             l865 1A66                               l857 1A46  
                             l929 3F46                               l890 1ACA  
                             l882 1AAA                               l874 1A8A  
                             l866 1A6A                               l858 1A4A  
                             l891 1ACE                               l883 1AAE  
                             l875 1A8E                               l867 1A6E  
                             l859 1A4E                               l892 1AD2  
                             l884 1AB2                               l876 1A92  
                             l868 1A72                               l893 1AD6  
                             l885 1AB6                               l877 1A96  
                             l869 1A76                               l894 1ADA  
                             l886 1ABA                               l878 1A9A  
                             l990 4DE6                               l895 1ADE  
                             l887 1ABE                               l879 1A9E  
                             l983 4A72                               l896 1AE2  
                             l888 1AC2                               l992 4DF2  
                             l984 4A18                               l976 4EBE  
                             l897 1AE6                               l889 1AC6  
                             l985 4A70                               l898 1AEA  
                             l978 4ECA                               l899 1AEE  
                             l997 546E                               l999 548C  
                             _RA2 007C02                               _RA3 007C03  
                             _RD5 007C1D                               _RD7 007C1F  
                             _PR2 000FCB                               _exp 1CBC  
                             _log 2B2A                               _mod 0132  
                             _val 0138                               _pow 2142  
                     ?_HMI_SetBar 0001                ??_Event_TestButton 0079  
                    _Word_GetPair 5B2C                               prod 000FF3  
                     ?_HMI_Render 0001               MXK_SwitchTo@pModule 0067  
                             tosl 000FFD                               wreg 000FE8  
              Console_MakeField@x 0070                Console_MakeField@y 0071  
                      _TXSTA1bits 000FAD                      Console_Tab@c 006F  
                    Console_Tab@i 006E               LCD_DrawField@pField 0072  
                    Console_Tab@t 006D                      ___flmul@aexp 007B  
                    ___flmul@bexp 0080                        i2_delay_us 5846  
            Port_Set@TypeRequired 0082                      ___flmul@sign 007A  
                    ___flmul@temp 0085                      ___flmul@prod 0081  
               Console_FormFeed@x 0062                 Console_FormFeed@y 0063  
             LCD_DrawField@pPoint 0074                    ?_LCD_DrawField 0072  
           Port_SetPinType@Output 008A                   Port_SetPin@Type 0073  
                 Port_SetPin@pPin 0071                     ?_Byte_GetPair 0069  
                 __end_of_LED_Set 566A           __size_ofi2_Word_GetPair 0030  
                   i2_Port_SetPin 4190                      ___fltol@exp1 00A8  
                    _Word_SetPair 59B2                              l1000 54A4  
                            l1010 44F6                              l1004 5242  
                   ?_Byte_GetZone 0060                              l1005 5268  
                            l1200 438A                              l1040 2F66  
                            l1201 43D2                              l1009 4502  
                            l1041 2F6C                              l1202 43E6  
                            l1042 2F72                              l1043 2F78  
                            l1204 440A                              l1036 3074  
                            l1044 2F7E                              l1205 43F6  
                            l1045 2F84                              l1037 2F60  
                            l1062 2636                              l1207 4418  
                            l1063 2664                              l1047 3002  
                            l1056 250C                              l1057 2684  
                            l1153 29B4                              l1146 4D7E  
                            l1082 4294                              l1058 2512  
                            l2210 3790                              l2131 1284  
                            l1059 2536                              l2211 375E  
                            l2124 591E                              l1084 429C  
                            l2212 378C                              l1077 4268  
                            l1158 5A58                              l2230 417C  
                            l2118 5526                              l2127 592E  
                            l1079 4274                              l2303 2D82  
                            l2231 413C                              l2119 5506  
                            l2223 3ABC                              l2304 2DDC  
                            l2224 3A8A                              l2305 2D88  
                            l2217 4BEC                              l2225 3AB8  
                            l2218 4B88                              l2242 0046  
                            l2163 5796                              l2251 02C0  
                            l2260 0782                              l2244 00F0  
                            l2245 00FE                              l2510 364A  
                            l1630 395C                              l2270 06F6  
                            l2254 02EE                              l2246 010C  
                            l2511 3688                              l1631 39AC  
                            l2159 5ABA                              l2167 4C1A  
                            l2271 0720                              l2263 0486  
                            l2247 011A                              l1632 3996  
                            l2264 05C6                              l2256 0442  
                            l2273 0772                              l2257 041C  
                            l2249 01DC                              l2290 2CBA  
                            l2186 58C2                              l1730 5954  
                            l2515 5BDC                              l2291 2CDE  
                            l1627 39EC                              l2267 060C  
                            l2508 35D8                              l2540 3E72  
                            l1724 59F8                              l1732 5974  
                            l1628 39E2                              l2268 065E  
                            l2509 360C                              l2541 3E62  
                            l1629 3974                              l2269 06A4  
                            l1726 5A20                              l1735 5EB6  
                            l2712 5334                              l2480 48CA  
                            l2800 11AC                              l2296 2D10  
                            l2713 532C                              l2801 11AE  
                            l2297 2CC2                              l2289 2CAA  
                            l2722 5758                              l2810 1506  
                            l2546 3E96                              l2538 3E06  
                            l2298 2CD6                              l2723 5750  
                            l2483 48F2                              l2547 3E8A  
                            l2299 2D3A                              l1827 3256  
                            l2716 5354                              l2484 48FC  
                            l2476 48A4                              l2820 1616  
                            l2660 4938                              l1828 3272  
                            l2717 535E                              l2485 490A  
                            l2477 48B4                              l2821 163E  
                            l2813 154A                              l2549 3EB2  
                            l2726 5770                              l2814 1546  
                            l2902 1CDC                              l2742 219C  
                            l2727 577A                              l2479 48D2  
                            l2823 1664                              l2743 2188  
                            l2663 4978                              l2816 1590  
                            l2760 0F62                              l2752 0EBE  
                            l2904 1D24                              l2664 4986  
                            l2833 16D2                              l2809 150A  
                            l2761 0F26                              l2753 0EBA  
                            l2913 3826                              l2905 1D6C  
                            l2745 21BA                              l1873 5B24  
                            l2826 169A                              l2818 15B8  
                            l2770 103C                              l2850 0BDA  
                            l2922 4310                              l2914 3814  
                            l2930 3DAA                              l2906 1DA2  
                            l2746 225C                              l2835 1716  
                            l2827 167C                              l2819 1666  
                            l2771 1002                              l2843 0B6C  
                            l2931 3D9A                              l2907 1F1E  
                            l2747 2232                              l2659 4944  
                            l2836 173A                              l2780 10D4  
                            l2764 0FDE                              l2844 0B68  
                            l2916 3844                              l2908 1EE8  
                            l2748 2306                              l2837 1764  
                            l2765 0FBC                              l2757 0F06  
                            l2861 0DD2                              l2845 0B7C  
                            l2917 38DE                              l2838 1770  
                            l2774 1026                              l2766 0FCA  
                            l2758 0F02                              l2854 0D9A  
                            l2926 3D22                              l2839 1772  
                            l2783 10F8                              l2775 102A  
                            l2767 0FCE                              l2863 0E16  
                            l2855 0D7C                              l2847 0BAC  
                            l2871 2E48                              l2792 1138  
                            l2864 0E34                              l2848 0BA8  
                            l2952 3BE6                              l2872 2E58  
                            l2928 3D70                              l2944 2B4E  
                            l2785 110E                              l2849 0BBC  
                            l2953 3B4E                              l2881 2EF8  
                            l2873 2E76                              l2778 10C4  
                            l2866 0E58                              l2882 2EEC  
                            l2946 2B78                              l2795 117E  
                            l2787 1118                              l2867 0E76  
                            l2875 2E88                              l2876 2E7C  
                            l2886 2F16                              l2878 2EC6  
                            l2799 11A4                              l2887 2F48  
                            l2879 2EAE                              ?_exp 00B7  
                            ?_log 00AF                    ??_Console_Init 0060  
                            _ADON 007E10             Port_SetPinType@pInput 0086  
                            ?_pow 00C2                              STR_1 FFFC  
                            STR_2 FF7D                              STR_3 FFB6  
                            STR_4 FF7D                              STR_5 FF7D  
                            STR_6 FF7D                              STR_7 FF7D  
                            STR_8 FF7D                              STR_9 FF7D  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _LATD 000F8C  
                            _LATE 000F8D                              _LATF 000F8E  
     __size_of_MXK_InitTestButton 0018                              _LATG 000F8F  
             __end_of_GetPortPORT 488E                              _PIR1 000F9E  
                            _PIR2 000FA1                              _PIR3 000FA4  
             __end_of_GetPortTRIS 477E                              u9510 4FF4  
                            u9630 4E22                              u9710 523E  
                            u9470 4B2E                              u9640 4E26  
                            u9720 5260                              u9544 537E  
                            u9545 537A                              u9490 4B78  
                            u9554 53A6                              u9555 53A2  
                            _SPI1 02C8                              u9820 0F92  
                            _SPI2 0182                              u9477 4B24  
                            u9830 0FA2                              u9574 46BA  
                            u9655 6022                              u9575 46B6  
                            u9495 4B74                              u9840 0FA4  
                            u9656 6024                              u9584 46E2  
                            u9585 46DE                              u9690 59A4  
                            u9870 0FE6                              u9695 59A0  
                            _TMR0 000FD6                              _STP1 60CC  
                            _STP2 60C4                              _STP3 60BC  
                            _STP4 60B4                              _gISR 0108  
              Event_DIPSwitch@Bar 007A                     ??_Byte_GetBit 0063  
                            _Turn 4C00                SPI_MaxSpeed@pInput 006F  
                   ?_Byte_SetByte 0060                     ?_Byte_SetPair 006B  
                 __end_of_SPI_DCS 5B8E                              _main 0000  
                            _mode 0031                   ??i2_Byte_SetBit 0005  
                   ?_Byte_SetQuad 006B                              _itos 3EC4  
                            _test 011C                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   ?_Byte_SetZone 0060                              btemp 0051  
                            _zero 004E                              exp@x 00B7  
                            log@x 00AF                     ??_Byte_SetBit 0064  
                            pow@x 00C2                              pow@y 00C6  
              __size_of_LCD_Reset 0050                              prodh 000FF4  
                            prodl 000FF3                              start 14AA  
              __size_of_LCD_Write 0020                     __CFG_IESO$OFF 000000  
                 ___fldiv@new_exp 0071                   ?_SPI_DisableISR 0060  
              __size_of_LEDToggle 003E               HMI_SetButton@pValue 0066  
                      _Cliff_Left 013E                     Console_Init@x 0062  
                   Console_Init@y 0063                    ?i2_Timer0_Stop 0001  
               i2Byte_SetBit@pBit 0003                      ___param_bank 000000  
                 __end_of_Font5x7 FE23                   __end_of_InitADC 5542  
            Set_Rotation@rotation 0066         __size_of_Get_Sensor_State 0018  
                   ??_Init_Timer0 0060            __size_of_HMI_SetButton 007A  
          __size_of_HMI_SetNumber 0026                       ?_ISR_Enable 0001  
                           ??_exp 00BB                             ??_log 00B3  
                           ??_pow 00CA      __size_of_Console_ClearCursor 0030  
                __end_of_LCD_Fill 56B2                  __end_of_LCD_Init 31F2  
                           ?_STP1 0001                             ?_STP2 0001  
                           ?_STP3 0001                             ?_STP4 0001  
                  ?_HMI_DIPSwitch 0001                     __CFG_PLLDIV$3 000000  
                __end_of_LED_Init 5218                      _BAUDCON1bits 000F7E  
                      _Coil_Setup 6002                     ??_Button_Init 00A8  
         GetPortProperties@pInput 0062                     ??_Button_Poll 007E  
                __end_of_HMI_Init 29B6                             l12405 36C0  
                           l12513 4DDE                             l13503 3F5A  
                           l12519 4DEA                             l14057 4D76  
                           l15107 3124                             l14165 1EE8  
                           l15117 31B6                             ?_Turn 0061  
                           l14263 52A4                             l15067 2D3E  
                           l13565 440A                             l15263 4EB6  
                           l14539 5A2E                             l14491 426C  
                           l15291 2992                             l14485 4260  
                           l13853 516A                             l13861 51A0  
                           l15269 4EC2                             l14805 5696  
                __end_of_HMI_Poll 50AA                             l13855 517C  
                           l13689 1764                             l13945 3256  
                           l14675 6054                             l14843 2A7A  
                           l13993 56FC                             l15499 58A2  
                           l13995 570E                             l14885 252E  
                           _I2C1T 0040                             _I2C2T 01BF  
                   ___fltol@sign1 00A7                   __end_of___fladd 11CA  
                           ?_main 0001                   __end_of___fldiv 178E  
                 __end_of___awdiv 4914                   __end_of___flneg 5BEE  
                           _ADRES 000FC3                             ?_itos 006C  
                           STR_10 FF7D                             STR_11 FFFC  
                           STR_20 FF7D                             STR_12 FF69  
                           STR_21 FF7D                             STR_13 FF0B  
                           STR_22 FF7D                             STR_30 FFFC  
                           STR_14 FFA3                             STR_23 FF7D  
                           STR_15 FFFC                             STR_31 FFD6  
                           STR_16 FF7D                             STR_40 FFFC  
                           STR_24 FFFC                             STR_32 FEB7  
                           STR_25 FF69                             STR_17 FF90  
                           STR_41 FF3E                             STR_33 FE7D  
                           STR_42 FF7D                             STR_18 FF7D  
                           STR_50 FFFC                             STR_26 FF0B  
                           STR_34 FE9B                             STR_43 FF7D  
                           STR_19 FF7D                             STR_27 FFA3  
                           STR_51 FF27                             STR_35 FEEF  
                           STR_60 FF7D                             STR_44 FF7D  
                           STR_36 FF7D                             STR_28 FFFC  
                           STR_52 FFF1                             STR_53 FF7D  
                           STR_45 FF7D                             STR_37 FF7D  
                           STR_61 FFFC                             STR_29 FF54  
                           STR_70 FF7D                             STR_54 FF7D  
                           STR_46 FF7D                             STR_38 FF7D  
                           STR_62 FED3                             STR_71 FF7D  
                           STR_55 FF7D                             STR_47 FF7D  
                           STR_39 FF7D                             STR_63 FFC6  
                           STR_64 FF7D                             STR_56 FF7D  
                           STR_48 FF7D                             STR_72 FFE5  
                           STR_65 FF7D                             STR_57 FF7D  
                           STR_49 FF7D                             STR_66 FF7D  
                           STR_58 FF7D                             STR_67 FF7D  
                           STR_59 FF7D                             STR_68 FF7D  
                           STR_69 FF7D                   __end_of___flmul 0E8C  
                 __end_of___flsub 56FA                   __end_of___fltol 3EC4  
                           u10000 111C                   _Event_DIPSwitch 5D18  
                 __end_of___lldiv 4998                             u10030 1134  
                           u11000 1748                             u10200 0D3E  
                           u10205 0D34                             u10080 118A  
                           u11120 3D42                             u11200 51A0  
                           u11040 4948                             u10250 0DCE  
                           u10500 5338                             u10340 48D6  
                           u10190 0BC8                             u10430 3E24  
                           u11310 5C6A                             u10280 0E24  
                           u11080 3832                             u11128 3D46  
                           u12200 394E                             u11410 4DBC  
                           u10530 575C                             u10290 0E42  
                           u10610 2F02                             u12050 56AE  
                           u11330 572C                             u12210 3988  
                           u10435 3E1A                             u11315 5C66  
                           u12140 2672                             u12300 2DE6  
                           u11260 58F4           __size_of_HMI_LeftSwitch 0014  
                           u12028 358C                   ___awdiv@divisor 0062  
                           u11405 4D8C                             u10710 3F5A  
                           u10470 3E9C                             u11424 4AE4  
                           u12080 2B18                             u11425 4AE0  
                           u11265 58F0                             u11290 32B8  
                           u11275 3212                             u10660 4338  
                           u11550 52BC                             u12190 393A  
                           u11615 17B0                             u11480 1D74  
                           u12280 2D70                             u12360 31B6  
                           u11625 17C2                             u11810 5914  
                           u11490 1D76                             u11730 42CE  
                           u11635 17D4                             u10668 433C  
                           u11740 42D6                             u11645 17EC  
                           u11655 18E6                             u10960 16CE  
                           u11665 193A                             u11675 1968  
                           u12580 4F0E                             u14308 006A  
                           u11685 1996                             u14309 007E  
                           u10990 1724                             u11870 2214  
                           u14318 008A                             u14319 009E  
                           u14328 00AA                             u14329 00BE  
                           u14258 5AD4                             u14338 00CA  
                           u14259 5AE8                             u14339 00DE  
                           u14470 047C                             u11968 40D2  
                           u11978 3486                             u14490 05A2  
                           u11979 349A                             u14590 077A  
                           u14558 0728                             u14559 073C  
                           u14578 074A                             u14579 075E  
                           _INDEX 003B                   __end_of___lwdiv 5368  
                           _LEDOn 5E3A                             _MASKS FC33  
                 __end_of___lwmod 5784                             i2l430 41A8  
                           i2l432 41CE                             i2l433 41F8  
                           i2l427 421E                             i2l732 4D38  
                           i2l733 4D32                             i2l832 5848  
                           i2l781 5C0C                   ___awdiv@counter 0064  
                           _PORTA 000F80                             _PORTB 000F81  
                           _PORTC 000F82                             _PORTD 000F83  
                           _PORTE 000F84                             _PORTF 000F85  
                           _PORTG 000F86           __size_of_HMI_DownSwitch 0014  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TRISF 000F97  
                           _TRISG 000F98                             _T_VAR 002F  
                ??i2_Byte_GetPair 000D                             _Drive 5784  
                   ?_FunctReadADC 0060                  ??i2_Byte_GetZone 0006  
              Port_TogglePin@pPin 0076           __size_of_Sensor_Observe 0104  
                  __CFG_FCMEN$OFF 000000                             _PortA 02F1  
                           _PortB 01A1                             _PortC 01AB  
                           _PortD 0197                             _PortE 018D  
                           _PortF 01B5                             _PortG 02E7  
         __end_of_Port_SetPinType 283A                   _ADC_Initialised 0147  
                  ??_Byte_GetPair 006C                    ?i2_Port_SetPin 0010  
                     LED_Set@pLED 0075                   __end_of_dpowers FC33  
                  ??_Byte_GetZone 0065                             _count 012C  
                           _floor 37DA                             _ldexp 3D02  
                  Button_Poll@Pin 0083                             _frexp 42E0  
                           _errno 011A          __size_of_Set_Addr_Window 009A  
             __end_of_Console_Tab 4548                  __end_of_MXK_Init 3474  
            i2Byte_GetPair@pInput 000A                             _putch 6042  
                           _total 0122                  __end_of_SPI_Init 0B3A  
                __end_of_SPI_Send 4EA8                        _BumpSensor 00F1  
                __end_of_BangBang 5CF0             __end_ofi2_MXK_Release 60F2  
                           pclath 000FFA                             tablat 000FF5  
                 __end_of_reverse 5314                __size_of_MXK_Queue 000E  
                  ??_Byte_SetByte 0063                    ??_Byte_SetPair 006F  
                           pow@yi 00D3                    ??_Byte_SetQuad 006F  
                           plusw2 000FDB                    ??_Byte_SetZone 0066  
                           status 000FD8                             wtemp6 0052  
                 _Configure_GPIOs 510A              i2MXK_Queue@pCallback 0001  
                     i2delay_us@u 0003                    _LCD_Word_Write 5E6E  
                     _Cliff_FLeft 0140               __size_of_LED_Toggle 0040  
             __size_of_HMI_GetBar 0006                     ?_HMI_UpSwitch 0001  
                     exp@exponent 00BF                        _Event_NULL 1404  
     __size_of_Port_CheckPairType 0060                       ldexp@newexp 00B3  
                    __end_of_STP1 60D4                      __end_of_STP2 60CC  
                    __end_of_STP3 60C4                      __end_of_STP4 60BC  
                     _Cliff_Right 013F               __size_of_HMI_SetBar 000A  
                 __initialization 45DA               __size_of_HMI_Render 0036  
                     log@exponent 00B3               __end_of_Byte_GetBit 5C78  
                   _Current_Dist1 0143                     _Current_Dist2 0037  
                    __end_of_Turn 4C76                      __end_of_main 0796  
              _Vitual_Wall_Sensor 0142                      __end_of_itos 3F82  
            HMI_SetButton@reindex 0062                      SPI_Send9@dat 013C  
             __end_of_Byte_SetBit 53BA                  __end_of_InitList FC09  
     __size_of_Port_CheckQuadType 0050                            ??_STP1 0060  
                          ??_STP2 0060                            ??_STP3 0060  
                          ??_STP4 0060                  __end_of_Mode_Set 6026  
     __size_of_Port_CheckPortType 0040                            ??_Turn 0067  
                     HMI_Render@a 0068                            ??_main 00DB  
                          ??_itos 0070               __end_of_Init_Timer0 5F02  
        __size_of_FunctInitButton 0076           _Console_MakeField$10974 006E  
                   __activetblptr 000003                            ?_LEDOn 0001  
               Port_SetPin@pInput 006F                 __end_of_LCD_Reset 540A  
               Port_SetPin@pValue 0072                         ??_LED_Set 0075  
               _MXK_InitDIPSwitch 5F1A                    ??_FunctReadADC 0062  
               GetPortPORT@pInput 0062            Port_CheckPairType@Pin1 008A  
          Port_CheckPairType@Pin2 008B                 __end_of_LCD_Write 5DE4  
                     _GetPortPORT 4806                      ?i2_MXK_Queue 0001  
                     _GetPortTRIS 46F6                   ??_LCD_DrawField 007C  
                          ?_Drive 0061        __end_of_PortProperty_Valid 504A  
                __end_of_Port_Set 1A38                 __end_of_LEDToggle 58C4  
                     ?i2_delay_us 0001  __size_of_Console_IncrementCursor 0054  
             __end_of_Button_Init 40E6               __end_of_Button_Poll 35A2  
               Word_GetPair@pPair 006E           LCD_FillRectangle@pPoint 006B  
              ?_MXK_InitDIPSwitch 0001                     _HMI_SetButton 4A92  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                    ??_ADCAverage 00D7                         ??_SPI_DCS 0062  
                          ?_floor 00A9                            ?_ldexp 00AF  
                          ?_frexp 0060                        _Low_Sensor 004A  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                   _HMI_SetNumber 5D3E            Port_SetQuadType@Output 009A  
                          _ANCON0 000FC1                  ___awdiv@dividend 0060  
                          ?_putch 0001                  ??_Console_Render 0083  
                   ToSegment@pCHR 0060                            _GODONE 007E11  
                _Console_FormFeed 4DD0            Port_SetQuadType@pInput 0096  
                          _LEDOff 5E54                            i2l1630 3C68  
                          i2l1631 3CB4                            i2l1632 3CA0  
                          i2l1730 5A6C                            i2l1627 3CF0  
                          i2l1732 5A8C                            i2l1628 3CE6  
                          i2l1629 3C7E                            i2l1590 145E  
                  __CFG_WDTEN$OFF 000000               __size_of_ISR_Enable 000A  
                          i2l9637 5848                            i2l9639 5858  
                          _RCREG1 000FAF                            _RCSTA1 000FAC  
          __end_of_LCD_Word_Write 5E88                    _Timer0_Restart 606C  
                          _SPBRG1 000FB0               ??_MXK_InitDIPSwitch 009B  
                          _TRISA2 007C92                            _TRISA3 007C93  
                          _TRISD5 007CAD                            _TRISD7 007CAF  
                          _TXREG1 000FAE                  __end_of___xxtofl 2F5A  
                       ??_InitADC 0060                    i2_MXK_SwitchTo 5A5A  
                          _TXSTA1 000FAD                   Byte_GetBit@pBit 0062  
                      _Reset_High 5ED2                Console_Render@temp 0085  
                  ??_HMI_UpSwitch 0066                    OutSeg@pSegment 0063  
                 ??i2_Timer0_Stop 0001               Port_TogglePin@Value 0077  
                __end_of_delay_ms 51C4                      LED_Init@pLED 008D  
                __end_of_delay_us 5740                     ??_Timer2_Init 0071  
                   ??_Timer0_Stop 0060          __size_of_Sensor_Observe2 0116  
                      _Timer0_ISR 5CF0          __size_of_Console_NewLine 007C  
               Timer2_Init@DIVIDE 007A                    __CFG_XINST$OFF 000000  
                          _OutSeg 4D62          __size_of_HMI_InitButtons 0006  
                          ___flge 35A2                        _Motor_Step 38F0  
                 _Closest_Object2 4B86           __end_of_Event_DIPSwitch 5D3E  
                       ??___fladd 0093                            ___wmul 5CA0  
                 ??_HMI_DIPSwitch 0066                         ??___fldiv 0068  
                       ??___awdiv 0064                         ??___flneg 008B  
                  __CFG_STVREN$ON 000000                        _Robot_Init 5F60  
                          _change 004D                         ??___flmul 0076  
                          _lMotor 00ED                         ??___flsub 00A7  
                       ??___fltol 00A3                         ??___lldiv 0068  
                          _lQueue 00E6                        _TestButton 02DD  
                      _Robot_Stop 5D64                         ??___lwdiv 0064  
              __size_of_ToSegment 0284                         ??___lwmod 006B  
        __end_of_Port_SetQuadType 2142          i2Byte_GetZone@pChunkSize 0005  
                    HMI_GRender@a 013A              __end_of_Console_Init 4F12  
               GetPortTRIS@pInput 0062                __size_of_Reset_Low 0018  
                          clear_0 4622                            clear_1 4634  
                          clear_2 4640                            clear_3 464C  
                          clear_4 4658                       ?_Coil_Setup 0001  
              __end_of_ADCAverage 14D8                  ___awdiv@quotient 0066  
                      Port_Init@i 00A5                 __end_of_MXK_Queue 6042  
      __end_ofHMI_SetButton@F7213 FC40                            _printf 2C9E  
       __end_of_MXK_InitDIPSwitch 5F32                            main@up 00E3  
                  HMI_SetButton@v 0067                            floor@i 00AD  
                          floor@x 00A9            HMI_SetSegments@pString 0061  
                     _Console_Tab 44B4               LCD_Word_Write@value 0065  
                    __pdataCOMRAM 0046                __size_of_Port_Init 0174  
                   ??_Port_GetPin 0063          Port_CheckPortType@Output 0099  
                 ??i2_Port_SetPin 0014                      __mediumconst FB56  
     __end_ofTimer2_Init@PRESCALE FC43          Port_CheckPortType@pDrive 0098  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                      ?_MXK_Dequeue 0001  
                  ?_HMI_SetButton 0001          Port_CheckPortType@pInput 0096  
                   ??_Port_SetPin 0073                         ??_reverse 0064  
           Console_MakeField@Fill 0282                  ?_Port_SetPinType 0086  
                          putch@c 0074                    ?_HMI_SetNumber 0076  
                  i2_Word_GetPair 5BEE           __end_of_Configure_GPIOs 5168  
                ??_MXK_TestButton 0066            __end_of_Timer0_Restart 6078  
                   Set_Rotation@m 0065                      ?_MXK_Release 0001  
                      ___flge@ff1 0060                        ___flge@ff2 0064  
                      _SteppingCW 558E                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 5A90                      ___xxtofl@arg 006A  
                __end_ofexp@coeff FE4B                      i2delay_us@us 0001  
                    ___xxtofl@exp 0069                      ___xxtofl@val 0060  
                __end_oflog@coeff FE6F                   ?_LCD_Word_Write 0065  
                      __accesstop 0060           __end_of__initialization 465E  
                       ?_LCD_Fill 0069                         ?_LCD_Init 0001  
                    _Cliff_FRight 0141                     SPI_Init@pMode 0092  
                      ___flneg@f1 0087                   _Reset_variables 54AA  
                     _Byte_GetBit 5C4C                         ?_LED_Init 0001  
        __end_ofi2_Timer0_Restart 6084                         ?_HMI_Init 0001  
               ??_Set_Addr_Window 0068                         ?_HMI_Poll 0001  
                    eval_poly@res 00AB                     ___rparam_used 000001  
                      ___fltol@f1 009F                       _Byte_SetBit 5368  
                   __end_of_LEDOn 5E54                     __end_of_MASKS FC3C  
                  _PortA_Property FE7B                       ?_Event_NULL 0001  
                       LCD_Fill@i 006B                         LCD_Fill@j 006C  
                       LCD_Init@i 0097                     __end_of_Drive 57C6  
                  __pcstackCOMRAM 0001                  _Get_Sensor_State 5F02  
                  _PortB_Property FE79               __size_ofi2_delay_us 0040  
                    __pidataBANK1 5F4A                       _Init_Timer0 5EEA  
             i2Byte_SetBit@pInput 0001              __end_of_Byte_GetPair 5E1E  
                 Console_Render@x 008A                   Console_Render@y 008B  
             i2Byte_SetBit@pValue 0004                     ?_Set_Rotation 0001  
             Timer0_Init@PRESCALE FC09              __end_of_Byte_GetZone 4B86  
                   __end_of_floor 38F0                     __end_of_ldexp 3DE6  
                   __end_of_frexp 437E               FunctReadADC@channel 0060  
                  _PortC_Property FE77                     __end_of_putch 6050  
                       ?_MXK_Init 0001               __end_of_Timer2_Init 3338  
             __end_of_Timer0_Stop 60DA                         ?_SPI_Init 008D  
                       ?_SPI_Send 0060                       _Button_Init 4036  
                       ?_BangBang 0061                 Port_SetType@pType 009C  
                     _Button_Poll 3474              __end_of_Byte_SetByte 6034  
            __end_of_Byte_SetPair 5DA4                    _HMI_LeftSwitch 5FDA  
                  _PortD_Property FE75              __end_of_Byte_SetQuad 5DC4  
                    ??_LED_Toggle 0078                      ??_HMI_GetBar 0060  
            __end_of_Byte_SetZone 46F6                           ??_LEDOn 0061  
                  _HMI_DownSwitch 5F9E                     SPI_Send@pData 0062  
                   ??_SteppingCCW 0066             __end_of_MXK_DIPSwitch 5F8A  
                    ??_HMI_SetBar 0060                      ??_HMI_Render 0068  
                  _PortE_Property FE73                    _Sensor_Observe 39FE  
        __size_of_HMI_SetSegments 009C            __end_ofi2_Word_GetPair 5C1E  
                         ??_Drive 0063                    _PortF_Property FE71  
         Port_CheckQuadType@Pair1 0093           Port_CheckQuadType@Pair2 0094  
        MXK_BlockSwitchTo@pModule 0067                           ??_floor 00AD  
                         ??_ldexp 00B5                           ??_frexp 0066  
               ??_FunctInitButton 00A8                 _Console_Backspace 545A  
                 ?_Timer0_Restart 0001                           ??_putch 0074  
        __size_of_HMI_RightSwitch 0014               _Console_ClearCursor 5B8E  
               __end_of_ToSegment 1CBC                    _PortG_Property FE6F  
                      __pbssBANK0 00E6                        __pbssBANK1 0100  
                      __pbssBANK2 0200               __end_of_Port_GetPin 59B2  
         Port_CheckQuadType@pQuad 0091                   reverse@iterator 0065  
                         ?_LEDOff 0001                __size_of_eval_poly 0100  
                ??_SPI_DisableISR 0062                   ?i2_MXK_SwitchTo 0001  
              ?_Console_Backspace 0001                 __end_of_Reset_Low 5ED2  
       __size_of_Event_TestButton 0034           __size_of_Port_TogglePin 002E  
                      ??_LCD_Fill 006B                        ??_LCD_Init 0095  
             __end_of_Port_SetPin 4036               __size_of_Coil_Setup 0012  
          __end_of_PortA_Property FE7D                         ?_Mode_Set 0001  
              Byte_SetByte@pInput 0060                        ??_LED_Init 008D  
              Byte_SetByte@pValue 0062                     ?_ISR_Function 0001  
                     ?_Reset_High 0001           __end_of_Closest_Object2 4C00  
                      ??_HMI_Init 00A8                        ??_HMI_Poll 0084  
                   ?_Timer2_Clear 0001           Port_CheckPairType@Props 008D  
          __end_of_PortB_Property FE7B                __size_of_eusartRec 0008  
               __end_of_Port_Init 2B2A                       ?_Timer0_ISR 0001  
         Port_CheckPairType@pPair 0088                __end_of_LED_Toggle 5846  
              __end_of_HMI_GetBar 60E0          LCD_FillRectangle@pColour 0069  
            __end_of_FunctReadADC 593E               ??_Console_Backspace 0062  
               Set_Addr_Window@xe 0066                 Set_Addr_Window@ye 0067  
               Set_Addr_Window@xs 0068                 Set_Addr_Window@ys 0065  
                         ?_OutSeg 0063                Byte_SetPair@pInput 006B  
                     ?_Motor_Step 0001                Byte_SetPair@pValue 006E  
                         ?___flge 0060                __end_of_HMI_SetBar 60A4  
          __end_of_PortC_Property FE79                Word_GetPair@pInput 006C  
              __end_of_HMI_Render 5A5A                    ??_Set_Rotation 0065  
                       ?_Port_Set 006F                           ?___wmul 0060  
                     ?_Robot_Init 0001                  ?_Event_DIPSwitch 0001  
               Port_GetPin@Output 0065                      ??_ISR_Enable 0060  
                     ?_Robot_Stop 0001      __size_of_Console_ResetCursor 001C  
            ?_Console_ClearCursor 0001            __end_of_HMI_LeftSwitch 5FEE  
          __end_of_PortD_Property FE77                           _ADC_AN0 01D4  
                         _ADC_AN1 01CF                           _ADC_AN2 01CA  
                         _ADC_AN3 01C5                        ??_MXK_Init 00A6  
               Port_GetPin@pInput 0060                 _Console_MakeField 423A  
               ??_Sensor_Observe2 00D9                 ??_Console_NewLine 0060  
          __end_of_HMI_DownSwitch 5FB2                        ??_SPI_Init 0093  
          Event_TestButton@pState 0079                        ??_SPI_Send 0063  
                      ??_BangBang 0069                           ?_printf 0075  
               ??_HMI_InitButtons 0060        __size_of_MXK_InitDIPSwitch 0018  
          __end_of_PortE_Property FE75               Console_Render@F6956 01E1  
          __end_of_Sensor_Observe 3B02                ?_Console_MakeField 0065  
                         _COUNTER 0033                   ??_HMI_SetButton 0060  
            __end_of_HMI_UpSwitch 5FC6                           _LED_Set 5622  
         _Console_IncrementCursor 5218                         ?___xxtofl 0060  
          __end_of_PortF_Property FE73                       _gBackcolour 0035  
                 ??_HMI_SetNumber 0078                         _I2C1_Done 0117  
                 ?i2_Word_GetPair 000D                         _I2C2_Done 0114  
                       _I2C1_More 0111                         _I2C2_More 010E  
                       ?_delay_ms 0060         __end_of_Console_Backspace 54AA  
                       ?_delay_us 0060               __size_of_Event_NULL 0002  
      __end_of_MXK_InitTestButton 5F4A                           _SSP1ADD 000FC8  
                         _SSP1BUF 000FC9                           _SSP2BUF 000F6F  
         __end_of_Reset_variables 54F6            __end_of_PortG_Property FE71  
             ??_Console_MakeField 0067                           _SPI_DCS 5B5E  
            __size_ofi2_MXK_Queue 000E                  ?_Configure_GPIOs 0001  
        ?_InitSerialCommunication 0001               __end_of_SteppingCCW 5622  
              eusartSend@sendChar 0060              i2Byte_GetZone@Offset 0008  
                     ?_SteppingCW 0001                   __size_of_LEDOff 001A  
              __end_of_ISR_Enable 609A                    ??_ISR_Function 0017  
            i2Byte_GetZone@Output 0009                 Event_TestButton@j 0038  
                      ??_Mode_Set 0060                    ??_Timer2_Clear 0060  
                         _Font5x7 FC43              i2Byte_GetZone@pChunk 0004  
                         _InitADC 54F6              i2Byte_GetZone@pInput 0001  
            SPI_DisableISR@pInput 0060                     ?_Port_GetQuad 0060  
                 Byte_SetBit@pBit 0062              Port_TogglePin@pInput 0074  
           __end_ofi2_Byte_SetBit 558E                           __Hparam 0000  
               Port_GetQuad@pQuad 0062                       _Timer2_Init 31F2  
                         __Lparam 0000                       _Timer0_Stop 60D4  
           __size_of_Console_Init 006A                           OutSeg@a 003D  
 __end_ofPortProperty_Valid@F6830 FC29                     LCD_Write@mode 0063  
                 __size_of_OutSeg 006E                       _Motor_Count 002D  
                      ??_Port_Set 0072                   __size_of___flge 0122  
       __end_of_Console_MakeField 42E0                 _Console_PrintChar 2F5A  
         __size_of_Closest_Object 00AA                           ___fladd 0E8C  
                   ?_Port_SetType 009A                           _gCursor 0046  
                         ___fldiv 14D8                           ___awdiv 488E  
                         ___flneg 5BBE             ??_Console_ClearCursor 0060  
                         ___flmul 0B3A                           ___flsub 56B2  
                         ___fltol 3DE6                           _lBuffer 0318  
                         ___lldiv 4914                   __size_of___wmul 0028  
                         ___lwdiv 5314                           ___lwmod 5740  
                         Turn@Dir 0065                           Turn@Rad 0069  
                 ?_HMI_LeftSwitch 0001          __end_of_Console_FormFeed 4E3C  
              ?_Console_PrintChar 0001                           __pcinit 45DA  
               __end_of_eval_poly 3C02                   ?_HMI_DownSwitch 0001  
                         __ramtop 1000                         _CCW_Count 012A  
                         __ptext0 0000                           __ptext1 4C00  
                         __ptext2 36C4                           __ptext3 39FE  
                         __ptext4 5F60                           __ptext5 5A90  
                         __ptext6 5D64                           __ptext7 54AA  
                         __ptext8 3338                           __ptext9 29B6  
                      _eusartSend 6050                   __size_of_printf 0168  
                         _average 00E9                         _T0CONbits 000FD5  
                 ?_Sensor_Observe 0001                 i2MXK_SwitchTo@CUR 0007  
                         _countOn 01EF                           _dpowers FC29  
                       _T2CONbits 000FCA                     LED_Set@pValue 0074  
                    __size_of_exp 0274                      __size_of_log 0174  
             __size_of_Reset_High 0018             Event_DIPSwitch@pState 0079  
                    __size_of_pow 01D6                        ??___xxtofl 0064  
                    ?_GetPortPORT 0060                      ?_GetPortTRIS 0060  
             ??_Console_PrintChar 0070                 __end_of_eusartRec 60B4  
                     _Port_GetPin 5978                 __CFG_MSSPMSK$MSK5 000000  
             LCD_DrawRectangle@p2 01DD               LCD_DrawRectangle@p4 01D9  
                    ??i2_delay_us 0003                        ??_delay_ms 0062  
                      ??_delay_us 0062                           _reverse 52C0  
                       _DIPSwitch 02D3               __size_of_Timer0_ISR 0028  
                     _Port_SetPin 3F82           __size_of_UpdateDistance 0034  
                  LCD_DrawField@i 0082                         _LCD_Reset 53BA  
             __size_of_Motor_Step 010E                         _LCD_Write 5DC4  
            __size_of_MXK_Dequeue 0034                        delay_ms@ms 0060  
            end_of_initialization 465E                         _LEDToggle 5886  
             __size_of_Robot_Init 0016                           exp@sign 00C1  
                      delay_us@us 0060               __size_of_Robot_Stop 0020  
               ??_HMI_SetSegments 0063           Console_PrintChar@pInput 0073  
                    _Console_Init 4EA8                   BangBang@LSpeedH 0065  
                 BangBang@LSpeedL 0067              __size_of_MXK_Release 0018  
      __end_of_Port_CheckPairType 510A                           itos@Out 0074  
                  ??_Port_GetQuad 0063                _PortProperty_Valid 4FE2  
                ?_Closest_Object2 0001                         i2u1423_48 5D04  
              Byte_SetQuad@pInput 006B                   BangBang@RSpeedH 0061  
                 BangBang@RSpeedL 0063                SPI_MinSpeed@pInput 006F  
              Byte_SetQuad@pValue 006E             __size_of_Byte_GetPair 001C  
                 ___lldiv@divisor 0064             __size_of_Byte_GetZone 007A  
               ??_HMI_RightSwitch 0066                           pow@sign 00D2  
                 ___lldiv@counter 006C         __end_of_Console_PrintChar 30AA  
                  ??_Port_SetType 009D        __end_of_Port_CheckQuadType 545A  
                         printf@c 0080                           printf@f 0075  
                  Port_Init@pPort 00A2                           postdec1 000FE5  
                         postdec2 000FDD             __size_of_Byte_SetByte 000E  
           __size_of_Byte_SetPair 0020                  _ADCAverage$15670 0314  
          Console_MakeField@Index 0069                  _ADCAverage$15665 0300  
                _ADCAverage$15666 0304                  _ADCAverage$15667 0308  
                _ADCAverage$15668 030C                  _ADCAverage$15669 0310  
                         postinc0 000FEE                           postinc2 000FDE  
             ?_PortProperty_Valid 006F             __size_of_Byte_SetQuad 0020  
      __end_of_Port_CheckPortType 5806             __size_of_Byte_SetZone 008E  
              __end_ofi2_delay_us 5886                Button_Init@pInitIO 009F  
               ?_Port_SetQuadType 0096                      ??_Coil_Setup 0060  
                     _gForecolour 01F3         ??_Console_IncrementCursor 0064  
          __size_ofi2_MXK_Release 0006               __size_of_SteppingCW 004A  
                       _PORTFbits 000F85                        _timercount 011E  
              ??_Port_SetQuadType 009A                      ?_Console_Tab 0001  
                Byte_GetZone@MASK 0066                       ___fladd@grs 009E  
           Console_Render@lCursor 0086                       _SteppingCCW 55D8  
 __end_of_InitSerialCommunication 5E02                         _MXK_Queue 6034  
                __CFG_CPUDIV$OSC1 000000                     ___xxtofl@sign 0068  
                Byte_GetZone@pMax 0062        __size_of_Console_Backspace 0050  
                       _TRISCbits 000F94                       _Square_Dist 0134  
                 _Set_Addr_Window 441A                    SPI_Init@pClock 008D  
                ??_LCD_Word_Write 0067          __end_of_Get_Sensor_State 5F1A  
                     ___fldiv@grs 0073                       ___fldiv@rem 006D  
           __end_of_LCD_DrawField 4A16                    Port_Set@pInput 006F  
                  SPI_Init@pInput 0093              ??_PortProperty_Valid 0073  
                ?_Reset_variables 0001                    Port_Set@pValue 0071  
                      ?_LCD_Reset 0001              __end_of_Set_Rotation 45DA  
                      ?_LCD_Write 0063                      _Byte_GetPair 5E02  
              HMI_SetButton@F7213 FC3C                      _Byte_GetZone 4B0C  
                      ?_LEDToggle 0001                     ?_MXK_SwitchTo 0001  
               LCD_DrawField@xmax 0080                 LCD_DrawField@ymax 0081  
                  _Port_TogglePin 5C1E                  _Event_TestButton 5AF8  
                     ___flmul@grs 007C             __size_of_FunctReadADC 003C  
            Port_SetPinType@Props 008B                      ?_Byte_GetBit 0060  
                  __end_of_LEDOff 5E6E           __size_ofi2_Byte_GetPair 001A  
                    _Byte_SetByte 6026                      _Byte_SetPair 5D84  
                    _Byte_SetQuad 5DA4           __size_ofi2_Byte_GetZone 0076  
              __end_of_Coil_Setup 6014                      _Byte_SetZone 4668  
            Port_SetPinType@pType 0089                 ?i2_Timer0_Restart 0001  
                    ?_Byte_SetBit 0060                     ?_SPI_MaxSpeed 006F  
               __size_of_LCD_Fill 0048                      ??_Event_NULL 0060  
               __size_of_LCD_Init 0148                 __size_of_LED_Init 0054  
                   ?_SPI_MinSpeed 006F             __end_ofi2_Timer0_Stop 60EC  
              ??i2_Timer0_Restart 0001                 __size_of_HMI_Init 017C  
               __size_of_HMI_Poll 0060                     ?i2_Motor_Step 0001  
                    ?_Init_Timer0 0001        __size_of_Console_MakeField 00A6  
                  __end_of_OutSeg 4DD0                    __end_of___flge 36C4  
           __size_of_HMI_UpSwitch 0014                         _Close_Pos 002B  
                  __end_of___wmul 5CC8             __end_of_HMI_DIPSwitch 5F9E  
                   __pidataCOMRAM 6084                      ?_Button_Init 009B  
                 _FunctInitButton 4C76                      ?_Button_Poll 007B  
                     ?_eusartSend 0001                         _Bus_State 004C  
             i2Byte_GetPair@pPair 000C              __end_of_ISR_Function 14AA  
               __size_of_MXK_Init 013C                         _BumpState 0130  
                     Turn@C_Angle 0067                        floor@expon 00B1  
            __end_of_Timer2_Clear 60AC                    __end_of_printf 2E06  
               __size_of_SPI_Init 03A4                 __size_of_SPI_Send 006C  
                   ?_Word_GetPair 006C                 __size_of_BangBang 0028  
                ??_Timer0_Restart 0060                Port_SetType@Output 009F  
             start_initialization 45DA                        ?_MXK_Queue 0060  
                      eval_poly@d 00A3                        eval_poly@n 00A5  
                      eval_poly@x 009F                        ldexp@value 00AF  
                    _FunctReadADC 5902          PortProperty_Valid@Errors 0075  
                ??i2_MXK_SwitchTo 0007                 _LCD_FillRectangle 526C  
              Port_SetType@pInput 009A                      _Current_Dist 0136  
                     __end_of_exp 1F30                       __end_of_log 2C9E  
                     _ADC_Reading 012E                       __end_of_pow 2318  
                      HMI_Init@in 00A8               HMI_SetNumber@pInput 0076  
           __end_ofi2_Port_SetPin 423A                __end_of_Event_NULL 1406  
          __end_of_Port_TogglePin 5C4C                     ?_Word_SetPair 006F  
               Byte_SetBit@pInput 0060                    ??_MXK_SwitchTo 0066  
               Byte_SetBit@pValue 0063                ?_LCD_FillRectangle 0069  
             _Console_ResetCursor 5E1E       PortProperty_Valid@pPinDrive 0071  
            MXK_BlockSwitchTo@CUR 0066          PortProperty_Valid@pInput 006F  
                        ??_LEDOff 0061                     i2_MXK_Release 60EC  
                      frexp@value 0060            LCD_FillRectangle@pSize 006F  
                  SPI_Send@pInput 0060                      ??_Reset_High 0074  
        __size_of_Port_SetPinType 019E                    ??_SPI_MaxSpeed 0071  
           Port_SetQuadType@pQuad 0098                         _ToSegment 1A38  
             ??_LCD_FillRectangle 0073             Port_SetQuadType@pType 0099  
                 _Sensor_Observe2 36C4                   _Console_NewLine 4A16  
                  ??_SPI_MinSpeed 0071                      _HMI_UpSwitch 5FB2  
                       _Reset_Low 5EBA                      ??_Timer0_ISR 0017  
                 _HMI_InitButtons 60E0                 __size_of_Mode_Set 0012  
      __size_of_Console_PrintChar 0150                         _gCharSize 01E9  
                Timer2_Init@INDEX 00F2                         OutSeg@cur 003F  
                  ??i2_Motor_Step 0015                          ??_OutSeg 0064  
                       OutSeg@out 0067           __size_of_Console_Render 01B6  
                    ??_Motor_Step 0074                    _Closest_Object 40E6  
                        ??___flge 0068                Byte_SetZone@Offset 0069  
                    ??_Robot_Init 0063                          ??___wmul 0064  
                    ??_Robot_Stop 0061              ?_Console_ResetCursor 0001  
                       _Port_Init 29B6                       __pdataBANK1 01E1  
               __size_of_Port_Set 02AA                Byte_SetZone@pChunk 0063  
                ??i2_Word_GetPair 0010                Byte_SetZone@pInput 0060  
              Byte_SetZone@pValue 0065                     Mode_Set@pMode 0060  
                        ??_printf 0079           __end_of_Set_Addr_Window 44B4  
        Port_CheckQuadType@Output 0095                         _gLineSize 01E5  
        Port_CheckQuadType@pDrive 0092                         ___fladd@a 008F  
                       ___fladd@b 008B                    ??_Word_GetPair 006F  
        Port_CheckQuadType@pInput 008F              __end_of_Port_GetQuad 5902  
                       ___fldiv@a 0064                         ___fldiv@b 0060  
       __end_of_LCD_FillRectangle 52C0                       __pbssBIGRAM 0318  
                        ?_LED_Set 0074                         ___flmul@a 0072  
                       ___flmul@b 006E                       __pbssCOMRAM 0029  
                       ___flsub@a 00A3                         ___flsub@b 009F  
              __end_of_Reset_High 5EEA                     __pcstackBANK0 0060  
                   __pcstackBANK3 0300                    _UpdateDistance 5A90  
                      itos@Length 0072                    ??_Word_SetPair 0073  
               __size_of___xxtofl 0154                __end_of_Timer0_ISR 5D18  
            __size_of_GetPortPORT 0088                       ??_LCD_Reset 0079  
            __size_of_GetPortTRIS 0088              __end_of_Port_SetType 24E6  
                        ?_SPI_DCS 0060                   ?_Port_TogglePin 0074  
                     ??_LCD_Write 0064                 __size_of_delay_ms 005C  
               __size_of_delay_us 0046                         Turn@Angle 0061  
             __CFG_CCP2MX$DEFAULT 000000                       ??_LEDToggle 0061  
              __end_of_Motor_Step 39FE             Timer2_Init@pFrequency 006D  
                    ??_SteppingCW 0066                    ?i2_MXK_Release 0001  
                       Turn@Speed 0063                __end_of_Robot_Init 5F76  
              __end_of_Robot_Stop 5D84                         _exp$15673 00BB  
                        ?_InitADC 0001          Port_CheckPairType@Output 008C  
             __size_of_eusartSend 000E                        ?_ToSegment 0001  
        Port_CheckPairType@pDrive 0089          Port_CheckPairType@pInput 0086  
                  reverse@tempVar 0064            __end_of_Closest_Object 4190  
              _MXK_InitTestButton 5F32                        ?_Reset_Low 0001  
          __size_of_MXK_DIPSwitch 0014                      ?_Timer2_Init 006D  
                ??_HMI_LeftSwitch 0066                      ?_Timer0_Stop 0001  
                ___lwdiv@dividend 0060                     _lStepFunction 010B  
         __size_of_MXK_TestButton 0014                 Byte_SetPair@pPair 006D  
         __end_of_FunctInitButton 4CEC                  ??_HMI_DownSwitch 0066  
__size_of_InitSerialCommunication 001E                         __pintcode 1408  
                   __pmediumconst FB56             ??_Console_ResetCursor 0060  
                        ?___fladd 008B                          ?___fldiv 0060  
                        ?___awdiv 0060                         __ptext100 5218  
                       __ptext101 4A16                         __ptext110 60C4  
                       __ptext102 4DD0                          ?___flneg 0087  
                       __ptext111 60CC                         __ptext103 5E1E  
                       __ptext120 423A                         __ptext112 6002  
                       __ptext104 545A                         __ptext121 5C4C  
                       __ptext113 24E6                         __ptext105 5B8E  
                       __ptext130 3DE6                         __ptext122 11CA  
                       __ptext114 526C                         __ptext106 55D8  
                       __ptext131 35A2                         __ptext123 2142  
                       __ptext115 4998                         __ptext107 5168  
                       __ptext140 5D3E                         __ptext132 3B02  
                       __ptext124 2B2A                         __ptext116 441A  
                       __ptext108 60B4                         __ptext141 3EC4  
                       __ptext133 0B3A                         __ptext125 1CBC  
                       __ptext117 5E6E                         __ptext109 60BC  
                       __ptext150 5902                         __ptext142 52C0  
                       __ptext134 56B2                         __ptext126 3D02  
                       __ptext118 5DC4                         __ptext151 5CC8  
                       __ptext143 5740                         __ptext135 0E8C  
                       __ptext127 37DA                         __ptext119 6014  
                       __ptext160 5E88                         __ptext152 6050  
                       __ptext144 5314                         __ptext136 5BBE  
                       __ptext128 42E0                         __ptext161 4CEC  
                       __ptext145 437E                         __ptext137 14D8  
                       __ptext129 2E06                         __ptext162 5542  
                       __ptext154 5CF0                         __ptext146 1A38  
                       __ptext138 5CA0                         __ptext163 5A5A  
                       __ptext155 3C02                         __ptext147 5A24  
                       __ptext139 488E                         __ptext164 5846  
                       __ptext156 60E6                         __ptext148 4D62  
                       __ptext165 60EC                         __ptext157 6078  
                       __ptext149 4E3C                         __ptext166 605E  
                       __ptext158 4190                         _pShiftVal 00EB  
                       __ptext167 0000                         __ptext159 5BEE  
                        ?___flmul 006E                  ??_Sensor_Observe 00D9  
                        ?___flsub 009F                          ?___fltol 009F  
                        ?___lldiv 0060                        ?_Port_Init 00A0  
                        ?___lwdiv 0060                          ?___lwmod 0067  
             ?_MXK_InitTestButton 0001                 ?_Console_FormFeed 0001  
               _GetPortProperties 477E                         _pow$15671 00CA  
                       _pow$15672 00CE                __end_of_SteppingCW 55D8  
     __end_ofTimer0_Init@PRESCALE FC19                ??_Console_FormFeed 0060  
                  __size_of_LEDOn 001A                   _HMI_SetSegments 437E  
              ?_GetPortProperties 0060                  Event_NULL@pState 0001  
          __end_of_UpdateDistance 5AC4          __size_of_Event_DIPSwitch 0026  
           __size_of_Set_Rotation 0092                     ??i2_MXK_Queue 0004  
                       _eval_poly 3B02                       ??_MXK_Queue 0063  
                    ?_Port_GetPin 0060                    __size_of_Drive 0042  
           __end_of_HMI_SetButton 4B0C              __size_of_Console_Tab 0094  
                        ?_reverse 0060                      ?_Port_SetPin 006F  
                       _readIndex 0029             __end_of_HMI_SetNumber 5D64  
                ___lwdiv@quotient 0065                   _HMI_RightSwitch 5FC6  
                  __size_of_floor 0116                    __size_of_ldexp 00E4  
                  __size_of_frexp 009E               ??_GetPortProperties 0062  
         __end_of_Sensor_Observe2 37DA           __end_of_Console_NewLine 4A92  
                       _eusartRec 60AC              ??_MXK_InitTestButton 008D  
              Byte_GetPair@pInput 0069                    __size_of_putch 000E  
         __end_of_HMI_InitButtons 60E6                 i2Port_SetPin@Type 0014  
               i2Port_SetPin@pPin 0012                    i2_Byte_GetPair 5E88  
                        _LCD_Fill 566A                          _LCD_Init 30AA  
                  ___wmul@product 0064                          _HMIBoard 0148  
                  i2_Byte_GetZone 4CEC                          _LED_Init 51C4  
                       delay_ms@u 0062                Button_Poll@pButton 007B  
                       delay_us@u 0062                          _HMI_Init 283A  
                        _HMI_Poll 504A                MXK_Queue@pCallback 0060  
                        _IPR1bits 000F9F                          _IPR3bits 000FA5  
                        _PIE1bits 000F9D                          _PIE3bits 000FA3  
     __end_of_Console_ClearCursor 5BBE          __size_of_Configure_GPIOs 005E  
            __size_of_Byte_GetBit 002C                   ?_Closest_Object 0001  
               Byte_SetQuad@pQuad 006D                          i2u600_40 4D56  
                        i2u600_45 4D52                          _PIR1bits 000F9E  
                        _PIR3bits 000FA4                          _CW_Count 0128  
                        i2u691_40 5874                          i2u598_40 4D0E  
                        i2u598_47 4D04                          i2u687_44 5556  
                        i2u687_45 5552                          i2u688_44 557C  
                        i2u688_45 5578              __size_of_Byte_SetBit 0052  
                        i2u786_40 3C46                          i2u787_40 3C5A  
                        i2u788_40 3C92                          _RCONbits 000FD0  
            i2Word_GetPair@pInput 000D                _Sensor_Observe_Fin 0126  
                __CFG_WDTPS$32768 000000                  HMI_SetBar@pValue 0060  
               Button_Init@pInput 009B           __size_of_SPI_DisableISR 0028  
                        _SSP1CON1 000FC6                 ??_Port_SetPinType 008A  
                        _SSP1CON2 000FC5                          _SSP2CON1 000F6C  
                        _SSP2CON2 000F6B             __size_of_ISR_Function 00A2  
                        _SSP1STAT 000FC7         __end_of_GetPortProperties 4806  
                        _SSP2STAT 000F6D                      _Set_Rotation 4548  
           __size_of_Timer2_Clear 0008              __end_of_MXK_SwitchTo 5978  
              _Port_CheckPairType 50AA                          _MXK_Init 3338  
            __size_of_Init_Timer0 0018                   MXK_SwitchTo@CUR 0066  
                        Drive@Rad 0063                          _SPI_Init 0796  
        __end_of_Event_TestButton 5B2C                          _SPI_Send 4E3C  
                        _BangBang 5CC8                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                  ?_Set_Addr_Window 0065  
               ___wmul@multiplier 0060                 Byte_GetBit@Output 0064  
                      printf@flag 007A              Timer2_Init@pCPUClock 0076  
      __size_of_LCD_FillRectangle 0054                      ?_SteppingCCW 0001  
            __size_of_Button_Init 00B0                   ?_UpdateDistance 0061  
            __end_of_SPI_MaxSpeed 4F7A                        printf@prec 007B  
               Byte_GetBit@pInput 0060               Port_SetPinType@pPin 0088  
            __size_of_Button_Poll 012E                        ?_eval_poly 009F  
              _Port_CheckQuadType 540A                     _MXK_DIPSwitch 5F76  
             ?_Port_CheckPairType 0086                         main@right 00E1  
            __end_of_SPI_MinSpeed 4FE2                     ??_MXK_Dequeue 0076  
                __size_of_LED_Set 0048            __size_ofi2_Byte_SetBit 004C  
              _Port_CheckPortType 57C6             Button_Poll@pIncrement 007D  
         PortProperty_Valid@F6830 FC19              __end_ofi2_Motor_Step 3D02  
                 ??i2_MXK_Release 0001                 ?_Get_Sensor_State 0001  
                      _ADCAverage 11CA                         copy_data0 45EE  
                       copy_data1 460E                     ??_MXK_Release 0060  
                      ?_eusartRec 0001            __end_ofi2_Byte_GetPair 5EA2  
       __size_of_Port_SetQuadType 0212                  __size_of_SPI_DCS 0030  
             ?_Port_CheckQuadType 008F            __end_ofi2_Byte_GetZone 4D62  
             __end_ofi2_MXK_Queue 606C                ??_Get_Sensor_State 0061  
             ?_Port_CheckPortType 0096                   itos@destination 006E  
                        _InitList FB57              _Motor_Step$intlevel0 38F6  
                        _Mode_Set 6014                Port_GetQuad@Output 0065  
                     ??_ToSegment 0060                      _ISR_Function 1408  
                       frexp@eptr 0064                Port_GetQuad@pInput 0060  
                    _Timer2_Clear 60A4                  __size_of_InitADC 004C  
            __end_of_Word_GetPair 5B5E                          _lCBuffer 0264  
            ??_Port_CheckPairType 008A                       ??_Reset_Low 0074  
                        __Hrparam 0000                      OutSeg@pInput 0066  
                  _Console_Render 24E6                          __Lrparam 0000  
                 Timer2_Init@RDIV 0072                  ?_FunctInitButton 0001  
                  LCD_Write@value 0064                          _Port_Set 178E  
                    OutSeg@segset 003E                         rand@screw 003C  
            __end_of_Word_SetPair 59EC                       ??_Port_Init 00A3  
         __end_of_HMI_SetSegments 441A              ??_Port_CheckQuadType 0093  
        __size_of_Closest_Object2 007A                  __size_of___fladd 033E  
                __size_of___fldiv 02B6             __size_of_Port_GetQuad 003E  
                __size_of___awdiv 0086                  __size_of___flneg 0030  
                __size_of___flmul 0352                  __size_of___flsub 0048  
                __size_of___fltol 00DE                  __size_of___lldiv 0084  
               _MXK_BlockSwitchTo 59EC                  __size_of___lwdiv 0054  
            ??_Port_CheckPortType 0099                  __size_of___lwmod 0044  
                        _lBufferX 00F4                          _lBufferY 00F3  
             Timer2_Init@PRESCALE FC40                      ??_eusartSend 0060  
                 LCD_Fill@pColour 0069                ?_MXK_BlockSwitchTo 0001  
       __size_ofi2_Timer0_Restart 000C                          _lCurrent 00EF  
         __end_of_HMI_RightSwitch 5FDA            Byte_GetZone@pChunkSize 0064  
                  ?_MXK_DIPSwitch 0001            Byte_SetZone@pChunkSize 0064  
           __size_of_Port_SetType 01CE                     reverse@length 0062  
                       itos@input 006C             i2MXK_SwitchTo@pModule 0008  
                        ___xxtofl 2E06                          _delay_ms 5168  
                        _delay_us 56FA                          _clearall 00F5  
                 ___lwdiv@divisor 0062                   ___lwdiv@counter 0064  
                 Port_GetPin@pPin 0062                          __ptext10 2318  
                        __ptext11 57C6                          __ptext20 38F0  
                        __ptext12 178E                          __ptext21 60D4  
                        __ptext13 6026                          __ptext30 5E54  
                        __ptext22 606C                          __ptext14 46F6  
                        __ptext31 30AA                          __ptext23 593E  
                        __ptext15 477E                          __ptext40 5DE4  
                        __ptext32 4548                          __ptext24 5EA2  
                        __ptext16 4806                          __ptext41 54F6  
                        __ptext33 566A                          __ptext25 6034  
                        __ptext17 51C4                          __ptext50 5FDA  
                        __ptext42 6090                          __ptext34 510A  
                        __ptext26 59EC                          __ptext18 5622  
                        __ptext51 5FEE                          __ptext43 504A  
                        __ptext35 4F12                          __ptext27 56FA  
                        __ptext19 5AC4                          __ptext60 5978  
                        __ptext52 58C4                          __ptext44 3474  
                        __ptext36 53BA                          __ptext28 5886  
                        __ptext61 609A                          __ptext53 5D18  
                        __ptext45 5F76                          __ptext37 5EBA  
                        __ptext29 5E3A                          __ptext70 5B5E  
                        __ptext62 60DA                          __ptext54 1404  
                        __ptext46 5F8A                          __ptext38 5ED2  
                        __ptext71 5F02                          __ptext63 283A  
                        __ptext55 5AF8                          __ptext47 5F9E  
                        __ptext39 5EEA               ??_MXK_BlockSwitchTo 0066  
                        __ptext80 1F30                          __ptext72 60AC  
                        __ptext64 4F7A                          __ptext56 4A92  
                        __ptext48 5FB2                          __ptext81 59B2  
                        __ptext73 4C76                          __ptext65 0796  
                        __ptext57 5806                          __ptext49 5FC6  
                        __ptext90 4668                          __ptext82 5D84  
                        __ptext74 4036                          __ptext66 31F2  
                        __ptext58 5C1E                          __ptext91 5784  
                        __ptext83 540A                          __ptext75 5F1A  
                        __ptext67 4914                          __ptext59 3F82  
                        __ptext92 4EA8                          __ptext84 50AA  
                        __ptext76 60E0                          __ptext68 60A4  
                        __ptext93 4B86                          __ptext85 4FE2  
                        __ptext77 5F32                          __ptext69 5C78  
                        __ptext94 558E                          __ptext86 5B2C  
                        __ptext78 269C                          __ptext95 40E6  
                        __ptext87 5E02                          __ptext79 5368  
                        __ptext96 2C9E                          __ptext88 4B0C  
                        __ptext97 6042                          __ptext89 5DA4  
                        __ptext98 2F5A                          __ptext99 44B4  
                    _SSP1CON1bits 000FC6                  __size_of_reverse 0054  
                    _SSP1CON2bits 000FC5       __size_of_PortProperty_Valid 0068  
              i2Byte_GetZone@MASK 0007                      _SSP2CON1bits 000F6C  
                    _SSP2CON2bits 000F6B                  ?_Sensor_Observe2 0001  
                 ?i2_Byte_GetPair 000A                  ?_Console_NewLine 0001  
               ??_Event_DIPSwitch 0079                   ?i2_Byte_GetZone 0001  
                        _countOff 01ED                     __size_of_STP1 0008  
                   __size_of_STP2 0008                     __size_of_STP3 0008  
                   __size_of_STP4 0008                i2Byte_GetZone@pMax 0003  
                ?_HMI_InitButtons 0001               __end_of_MXK_Dequeue 5AF8  
               HMI_SetSegments@in 0064             Button_Init@pThreshold 009D  
                   __size_of_Turn 0076                     __size_of_main 0796  
                   __size_of_itos 00BE                 Byte_GetPair@pPair 006B  
                        _readings 0200            __end_of_Console_Render 269C  
        __size_of_Reset_variables 004C               i2Port_SetPin@pInput 0010  
             i2Port_SetPin@pValue 0013                __end_of_eusartSend 605E  
                    _Port_GetQuad 58C4               __end_of_MXK_Release 5EBA  
                  _MXK_TestButton 5FEE           _InitSerialCommunication 5DE4  
                   i2_Byte_SetBit 5542               i2Word_GetPair@pPair 000F  
       __end_of_MXK_BlockSwitchTo 5A24          ?_Console_IncrementCursor 0001  
            __size_of_Timer2_Init 0146                          int$flags 0051  
            __size_of_Timer0_Stop 0006                      _Port_SetType 2318  
                    Port_Set@Type 0086        __size_of_GetPortProperties 0088  
          __size_of_LCD_DrawField 007E                 ??_Configure_GPIOs 0095  
                       printf@val 007E                      _SSP1STATbits 000FC7  
                        main@left 00E2                          main@down 00E0  
                  Timer0_Init@DIV 0104                    Timer0_Init@PRE 003A  
                    _SSP2STATbits 000F6D                          exp@coeff FE23  
                      _LED_Toggle 5806                          log@coeff FE4B  
                      _HMI_GetBar 60DA              Button_Init@pGetState 00A2  
          PortProperty_Valid@Pair 0085                  ??_Port_TogglePin 0077  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
          PortProperty_Valid@pPin 0072                       ??_eval_poly 00A7  
                      _HMI_SetBar 609A                        _HMI_Render 5A24  
                Byte_SetZone@MASK 006A                       i2_MXK_Queue 605E  
                  Timer2_Init@DIV 0100                    Timer2_Init@PRE 0039  
                Byte_SetZone@pMax 0062            __size_ofi2_Timer0_Stop 0006  
            __size_of_Port_GetPin 003A                       ?_ADCAverage 0001  
            Button_Init@pFunction 00A5                          itos@Data 0070  
                     ??_eusartRec 0060                LCD_FillRectangle@i 0075  
              LCD_FillRectangle@j 0076              __size_of_Port_SetPin 00B4  
                        intlevel2 0000                      reverse@input 0060  
                     _numReadings 01F1            __size_of_HMI_DIPSwitch 0014  
                ___lwmod@dividend 0067                  ___lldiv@dividend 0060  
          __end_of_MXK_TestButton 6002                   ?_Console_Render 0001  
         __size_of_LCD_Word_Write 001A                    ?i2_Byte_SetBit 0001  
           __size_of_MXK_SwitchTo 003A                    _SPI_DisableISR 5C78  
                 Port_Init@pInput 00A0                          printf@ap 007C  
                     _thisReading 0124            __size_ofi2_Port_SetPin 00AA  
                      _ISR_Enable 6090                  ?_HMI_SetSegments 0061  
         Console_MakeField@Column 006C               main@Target_Distance 00E4  
           __size_of_SPI_MaxSpeed 0068                     SPI_DCS@pInput 0060  
           __size_of_SPI_MinSpeed 0068                   ??_MXK_DIPSwitch 0066  
           __size_ofi2_Motor_Step 0100           Console_MakeField@pInput 006B  
                ?_HMI_RightSwitch 0001                  ___lldiv@quotient 0068  
                   ??_GetPortPORT 0062                   ___lwmod@divisor 0069  
                   ??_GetPortTRIS 0062                 ??_Closest_Object2 00D9  
              Word_SetPair@pInput 006F                   ___lwmod@counter 006B  
              Word_SetPair@pValue 0072                       _MXK_Dequeue 5AC4  
            __size_of_SteppingCCW 004A                    LED_Toggle@pLED 0078  
                   ___fladd@signs 009B                     _LCD_DrawField 4998  
                _Port_SetQuadType 1F30                       _MXK_Release 5EA2  
       __size_of_Console_FormFeed 006C                      _MXK_SwitchTo 593E  
           __size_of_Word_GetPair 0032                Byte_GetZone@Offset 0067  
                   ?_Console_Init 0001                 Word_SetPair@pPair 0071  
                ??_Closest_Object 00D9                   _Port_SetPinType 269C  
                    ___fladd@aexp 009C                      ___fladd@bexp 009D  
         __size_of_Timer0_Restart 000C                Byte_GetZone@Output 0068  
       ??_InitSerialCommunication 0060                Byte_GetZone@pChunk 0063  
                 ?_MXK_TestButton 0001       __end_of_Console_ResetCursor 5E3A  
              Byte_GetZone@pInput 0060           __size_ofi2_MXK_SwitchTo 0036  
 __end_of_Console_IncrementCursor 526C             __size_of_Word_SetPair 003A  
          __end_of_SPI_DisableISR 5CA0                      _SPI_MaxSpeed 4F12  
                    _SPI_MinSpeed 4F7A                Port_Set@TypeActual 0084  
                      Drive@Speed 0061  
