

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu May 17 17:05:23 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1,inline
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1,inline
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1,inline
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1,inline
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1,inline
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1,inline
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1,group=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1,group=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1,group=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1,group=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1,group=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1,group=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1,group=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1,group=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1,group=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1,group=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1,group=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1,group=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1,group=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1,group=1
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1,group=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1,group=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1,group=1
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1
   152                           	psect	text131,global,reloc=2,class=CODE,delta=1
   153                           	psect	text132,global,reloc=2,class=CODE,delta=1,group=1
   154                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=1
   155                           	psect	text134,global,reloc=2,class=CODE,delta=1
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1
   157                           	psect	text136,global,reloc=2,class=CODE,delta=1
   158                           	psect	text137,global,reloc=2,class=CODE,delta=1
   159                           	psect	text138,global,reloc=2,class=CODE,delta=1
   160                           	psect	text139,global,reloc=2,class=CODE,delta=1
   161                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   162                           	psect	text141,global,reloc=2,class=CODE,delta=1
   163                           	psect	text142,global,reloc=2,class=CODE,delta=1
   164                           	psect	text143,global,reloc=2,class=CODE,delta=1
   165                           	psect	text144,global,reloc=2,class=CODE,delta=1
   166                           	psect	text145,global,reloc=2,class=CODE,delta=1
   167                           	psect	text146,global,reloc=2,class=CODE,delta=1
   168                           	psect	text147,global,reloc=2,class=CODE,delta=1
   169                           	psect	text148,global,reloc=2,class=CODE,delta=1,inline
   170                           	psect	text149,global,reloc=2,class=CODE,delta=1
   171                           	psect	text150,global,reloc=2,class=CODE,delta=1
   172                           	psect	text151,global,reloc=2,class=CODE,delta=1
   173                           	psect	text152,global,reloc=2,class=CODE,delta=1
   174                           	psect	text153,global,reloc=2,class=CODE,delta=1
   175                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   176                           	psect	text154,global,reloc=2,class=CODE,delta=1
   177                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   178                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   179  0000                     
   180                           ; Version 1.45
   181                           ; Generated 16/11/2017 GMT
   182                           ; 
   183                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   184                           ; All rights reserved.
   185                           ; 
   186                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   187                           ; 
   188                           ; Redistribution and use in source and binary forms, with or without modification, are
   189                           ; permitted provided that the following conditions are met:
   190                           ; 
   191                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   192                           ;        conditions and the following disclaimer.
   193                           ; 
   194                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   195                           ;        of conditions and the following disclaimer in the documentation and/or other
   196                           ;        materials provided with the distribution.
   197                           ; 
   198                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   199                           ;        software without specific prior written permission.
   200                           ; 
   201                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   202                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   203                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   204                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   205                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   206                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   207                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   208                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   209                           ; 
   210                           ; 
   211                           ; Code-generator required, PIC18F67J50 Definitions
   212                           ; 
   213                           ; SFR Addresses
   214  0000                     
   215                           	psect	idataCOMRAM
   216  015AAC                     __pidataCOMRAM:
   217                           	opt stack 0
   218                           
   219                           ;initializer for _gCursor
   220  015AAC  0006               	dw	6
   221  015AAE  0006               	dw	6
   222                           
   223                           ;initializer for _numReadings
   224  015AB0  000A               	dw	10
   225                           
   226                           ;initializer for _top
   227  015AB2  FFFF               	dw	65535
   228                           
   229                           ;initializer for _Bus_State
   230  015AB4  01                 	db	1
   231                           
   232                           ;initializer for _A
   233  015AB5  41                 	db	65
   234                           
   235                           ;initializer for _a
   236  015AB6  61                 	db	97
   237                           
   238                           ;initializer for _zero
   239  015AB7  30                 	db	48
   240                           
   241                           ;initializer for _l
   242  015AB8  80                 	db	128
   243                           
   244                           ;initializer for _w
   245  015AB9  80                 	db	128
   246                           
   247                           	psect	idataBANK0
   248  015B5A                     __pidataBANK0:
   249                           	opt stack 0
   250                           
   251                           ;initializer for _change
   252  015B5A  01                 	db	1
   253                           
   254                           	psect	idataBANK1
   255  0159E2                     __pidataBANK1:
   256                           	opt stack 0
   257                           
   258                           ;initializer for Console_Render@F6956
   259  0159E2  0006               	dw	6
   260  0159E4  0006               	dw	6
   261                           
   262                           ;initializer for _gLineSize
   263  0159E6  0080               	dw	128
   264  0159E8  0007               	dw	7
   265                           
   266                           ;initializer for _gCharSize
   267  0159EA  0005               	dw	5
   268  0159EC  0007               	dw	7
   269                           
   270                           ;initializer for _countOff
   271  0159EE  00F8               	dw	248
   272                           
   273                           ;initializer for _countOn
   274  0159F0  007C               	dw	124
   275                           
   276                           ;initializer for _Low_Sensor
   277  0159F2  2710               	dw	10000
   278                           
   279                           ;initializer for _Current_Direction
   280  0159F4  0003               	dw	3
   281                           
   282                           ;initializer for _gForecolour
   283  0159F6  FFFF               	dw	65535
   284                           
   285                           	psect	mediumconst
   286  00FB90                     __pmediumconst:
   287                           	opt stack 0
   288  00FB90  00                 	db	0
   289  00FB91                     _InitList:
   290                           	opt stack 0
   291  00FB91  1100               	dw	4352
   292  00FB93  0080               	dw	128
   293  00FB95  012C               	dw	300
   294  00FB97  B100               	dw	45312
   295  00FB99  0002               	dw	2
   296  00FB9B  0035               	dw	53
   297  00FB9D  0036               	dw	54
   298  00FB9F  B200               	dw	45568
   299  00FBA1  0002               	dw	2
   300  00FBA3  0035               	dw	53
   301  00FBA5  0036               	dw	54
   302  00FBA7  B300               	dw	45824
   303  00FBA9  0002               	dw	2
   304  00FBAB  0035               	dw	53
   305  00FBAD  0036               	dw	54
   306  00FBAF  0002               	dw	2
   307  00FBB1  0035               	dw	53
   308  00FBB3  0036               	dw	54
   309  00FBB5  B400               	dw	46080
   310  00FBB7  0000               	dw	0
   311  00FBB9  C000               	dw	49152
   312  00FBBB  00A2               	dw	162
   313  00FBBD  0002               	dw	2
   314  00FBBF  0084               	dw	132
   315  00FBC1  C100               	dw	49408
   316  00FBC3  00C5               	dw	197
   317  00FBC5  C200               	dw	49664
   318  00FBC7  000D               	dw	13
   319  00FBC9  0000               	dw	0
   320  00FBCB  C300               	dw	49920
   321  00FBCD  008D               	dw	141
   322  00FBCF  002A               	dw	42
   323  00FBD1  C400               	dw	50176
   324  00FBD3  008D               	dw	141
   325  00FBD5  00EE               	dw	238
   326  00FBD7  C500               	dw	50432
   327  00FBD9  000A               	dw	10
   328  00FBDB  3600               	dw	13824
   329  00FBDD  00C8               	dw	200
   330  00FBDF  E000               	dw	57344
   331  00FBE1  0012               	dw	18
   332  00FBE3  001C               	dw	28
   333  00FBE5  0010               	dw	16
   334  00FBE7  0018               	dw	24
   335  00FBE9  0033               	dw	51
   336  00FBEB  002C               	dw	44
   337  00FBED  0025               	dw	37
   338  00FBEF  0028               	dw	40
   339  00FBF1  0028               	dw	40
   340  00FBF3  0027               	dw	39
   341  00FBF5  002F               	dw	47
   342  00FBF7  003C               	dw	60
   343  00FBF9  0000               	dw	0
   344  00FBFB  0003               	dw	3
   345  00FBFD  0003               	dw	3
   346  00FBFF  0010               	dw	16
   347  00FC01  0080               	dw	128
   348  00FC03  0078               	dw	120
   349  00FC05  E100               	dw	57600
   350  00FC07  0012               	dw	18
   351  00FC09  001C               	dw	28
   352  00FC0B  0010               	dw	16
   353  00FC0D  0018               	dw	24
   354  00FC0F  002D               	dw	45
   355  00FC11  0028               	dw	40
   356  00FC13  0023               	dw	35
   357  00FC15  0028               	dw	40
   358  00FC17  0028               	dw	40
   359  00FC19  0026               	dw	38
   360  00FC1B  002F               	dw	47
   361  00FC1D  003B               	dw	59
   362  00FC1F  0000               	dw	0
   363  00FC21  0003               	dw	3
   364  00FC23  0003               	dw	3
   365  00FC25  0010               	dw	16
   366  00FC27  3A00               	dw	14848
   367  00FC29  0005               	dw	5
   368  00FC2B  2A00               	dw	10752
   369  00FC2D  0000               	dw	0
   370  00FC2F  0002               	dw	2
   371  00FC31  0000               	dw	0
   372  00FC33  0081               	dw	129
   373  00FC35  2B00               	dw	11008
   374  00FC37  0000               	dw	0
   375  00FC39  0003               	dw	3
   376  00FC3B  0000               	dw	0
   377  00FC3D  00A2               	dw	162
   378  00FC3F  2900               	dw	10496
   379  00FC41  2C00               	dw	11264
   380  00FC43                     __end_of_InitList:
   381                           	opt stack 0
   382  00FC43                     Timer0_Init@PRESCALE:
   383                           	opt stack 0
   384  00FC43  0002               	dw	2
   385  00FC45  0004               	dw	4
   386  00FC47  0008               	dw	8
   387  00FC49  0010               	dw	16
   388  00FC4B  0020               	dw	32
   389  00FC4D  0040               	dw	64
   390  00FC4F  0080               	dw	128
   391  00FC51  0100               	dw	256
   392  00FC53                     __end_ofTimer0_Init@PRESCALE:
   393                           	opt stack 0
   394  00FC53                     PortProperty_Valid@F6830:
   395                           	opt stack 0
   396  00FC53  00                 	db	0
   397  00FC54  01                 	db	1
   398  00FC55  02                 	db	2
   399  00FC56  00                 	db	0
   400  00FC57  01                 	db	1
   401  00FC58  00                 	db	0
   402  00FC59  01                 	db	1
   403  00FC5A  00                 	db	0
   404  00FC5B  02                 	db	2
   405  00FC5C  02                 	db	2
   406  00FC5D  00                 	db	0
   407  00FC5E  00                 	db	0
   408  00FC5F  03                 	db	3
   409  00FC60  03                 	db	3
   410  00FC61  03                 	db	3
   411  00FC62  00                 	db	0
   412  00FC63                     __end_ofPortProperty_Valid@F6830:
   413                           	opt stack 0
   414  00FC63                     _dpowers:
   415                           	opt stack 0
   416  00FC63  0001               	dw	1
   417  00FC65  000A               	dw	10
   418  00FC67  0064               	dw	100
   419  00FC69  03E8               	dw	1000
   420  00FC6B  2710               	dw	10000
   421  00FC6D                     __end_of_dpowers:
   422                           	opt stack 0
   423  00FC6D                     _MASKS:
   424                           	opt stack 0
   425  00FC6D  00                 	db	0
   426  00FC6E  01                 	db	1
   427  00FC6F  03                 	db	3
   428  00FC70  07                 	db	7
   429  00FC71  0F                 	db	15
   430  00FC72  1F                 	db	31
   431  00FC73  3F                 	db	63
   432  00FC74  7F                 	db	127
   433  00FC75  FF                 	db	255
   434  00FC76                     __end_of_MASKS:
   435                           	opt stack 0
   436  00FC76                     HMI_SetButton@F7213:
   437                           	opt stack 0
   438  00FC76  00                 	db	0
   439  00FC77  02                 	db	2
   440  00FC78  01                 	db	1
   441  00FC79  03                 	db	3
   442  00FC7A                     __end_ofHMI_SetButton@F7213:
   443                           	opt stack 0
   444  00FC7A                     Timer2_Init@PRESCALE:
   445                           	opt stack 0
   446  00FC7A  01                 	db	1
   447  00FC7B  04                 	db	4
   448  00FC7C  10                 	db	16
   449  00FC7D                     __end_ofTimer2_Init@PRESCALE:
   450                           	opt stack 0
   451  00FC7D                     _Font5x7:
   452                           	opt stack 0
   453  00FC7D  00                 	db	0
   454  00FC7E  00                 	db	0
   455  00FC7F  00                 	db	0
   456  00FC80  00                 	db	0
   457  00FC81  00                 	db	0
   458  00FC82  00                 	db	0
   459  00FC83  00                 	db	0
   460  00FC84  5F                 	db	95
   461  00FC85  00                 	db	0
   462  00FC86  00                 	db	0
   463  00FC87  00                 	db	0
   464  00FC88  07                 	db	7
   465  00FC89  00                 	db	0
   466  00FC8A  07                 	db	7
   467  00FC8B  00                 	db	0
   468  00FC8C  14                 	db	20
   469  00FC8D  7F                 	db	127
   470  00FC8E  14                 	db	20
   471  00FC8F  7F                 	db	127
   472  00FC90  14                 	db	20
   473  00FC91  24                 	db	36
   474  00FC92  2A                 	db	42
   475  00FC93  7F                 	db	127
   476  00FC94  2A                 	db	42
   477  00FC95  12                 	db	18
   478  00FC96  23                 	db	35
   479  00FC97  13                 	db	19
   480  00FC98  08                 	db	8
   481  00FC99  64                 	db	100
   482  00FC9A  62                 	db	98
   483  00FC9B  36                 	db	54
   484  00FC9C  49                 	db	73
   485  00FC9D  55                 	db	85
   486  00FC9E  22                 	db	34
   487  00FC9F  50                 	db	80
   488  00FCA0  00                 	db	0
   489  00FCA1  05                 	db	5
   490  00FCA2  03                 	db	3
   491  00FCA3  00                 	db	0
   492  00FCA4  00                 	db	0
   493  00FCA5  00                 	db	0
   494  00FCA6  1C                 	db	28
   495  00FCA7  22                 	db	34
   496  00FCA8  41                 	db	65
   497  00FCA9  00                 	db	0
   498  00FCAA  00                 	db	0
   499  00FCAB  41                 	db	65
   500  00FCAC  22                 	db	34
   501  00FCAD  1C                 	db	28
   502  00FCAE  00                 	db	0
   503  00FCAF  08                 	db	8
   504  00FCB0  2A                 	db	42
   505  00FCB1  1C                 	db	28
   506  00FCB2  2A                 	db	42
   507  00FCB3  08                 	db	8
   508  00FCB4  08                 	db	8
   509  00FCB5  08                 	db	8
   510  00FCB6  3E                 	db	62
   511  00FCB7  08                 	db	8
   512  00FCB8  08                 	db	8
   513  00FCB9  00                 	db	0
   514  00FCBA  50                 	db	80
   515  00FCBB  30                 	db	48
   516  00FCBC  00                 	db	0
   517  00FCBD  00                 	db	0
   518  00FCBE  08                 	db	8
   519  00FCBF  08                 	db	8
   520  00FCC0  08                 	db	8
   521  00FCC1  08                 	db	8
   522  00FCC2  08                 	db	8
   523  00FCC3  00                 	db	0
   524  00FCC4  60                 	db	96
   525  00FCC5  60                 	db	96
   526  00FCC6  00                 	db	0
   527  00FCC7  00                 	db	0
   528  00FCC8  20                 	db	32
   529  00FCC9  10                 	db	16
   530  00FCCA  08                 	db	8
   531  00FCCB  04                 	db	4
   532  00FCCC  02                 	db	2
   533  00FCCD  3E                 	db	62
   534  00FCCE  51                 	db	81
   535  00FCCF  49                 	db	73
   536  00FCD0  45                 	db	69
   537  00FCD1  3E                 	db	62
   538  00FCD2  00                 	db	0
   539  00FCD3  42                 	db	66
   540  00FCD4  7F                 	db	127
   541  00FCD5  40                 	db	64
   542  00FCD6  00                 	db	0
   543  00FCD7  42                 	db	66
   544  00FCD8  61                 	db	97
   545  00FCD9  51                 	db	81
   546  00FCDA  49                 	db	73
   547  00FCDB  46                 	db	70
   548  00FCDC  21                 	db	33
   549  00FCDD  41                 	db	65
   550  00FCDE  45                 	db	69
   551  00FCDF  4B                 	db	75
   552  00FCE0  31                 	db	49
   553  00FCE1  18                 	db	24
   554  00FCE2  14                 	db	20
   555  00FCE3  12                 	db	18
   556  00FCE4  7F                 	db	127
   557  00FCE5  10                 	db	16
   558  00FCE6  27                 	db	39
   559  00FCE7  45                 	db	69
   560  00FCE8  45                 	db	69
   561  00FCE9  45                 	db	69
   562  00FCEA  39                 	db	57
   563  00FCEB  3C                 	db	60
   564  00FCEC  4A                 	db	74
   565  00FCED  49                 	db	73
   566  00FCEE  49                 	db	73
   567  00FCEF  30                 	db	48
   568  00FCF0  01                 	db	1
   569  00FCF1  71                 	db	113
   570  00FCF2  09                 	db	9
   571  00FCF3  05                 	db	5
   572  00FCF4  03                 	db	3
   573  00FCF5  36                 	db	54
   574  00FCF6  49                 	db	73
   575  00FCF7  49                 	db	73
   576  00FCF8  49                 	db	73
   577  00FCF9  36                 	db	54
   578  00FCFA  06                 	db	6
   579  00FCFB  49                 	db	73
   580  00FCFC  49                 	db	73
   581  00FCFD  29                 	db	41
   582  00FCFE  1E                 	db	30
   583  00FCFF  00                 	db	0
   584  00FD00  36                 	db	54
   585  00FD01  36                 	db	54
   586  00FD02  00                 	db	0
   587  00FD03  00                 	db	0
   588  00FD04  00                 	db	0
   589  00FD05  56                 	db	86
   590  00FD06  36                 	db	54
   591  00FD07  00                 	db	0
   592  00FD08  00                 	db	0
   593  00FD09  00                 	db	0
   594  00FD0A  08                 	db	8
   595  00FD0B  14                 	db	20
   596  00FD0C  22                 	db	34
   597  00FD0D  41                 	db	65
   598  00FD0E  14                 	db	20
   599  00FD0F  14                 	db	20
   600  00FD10  14                 	db	20
   601  00FD11  14                 	db	20
   602  00FD12  14                 	db	20
   603  00FD13  41                 	db	65
   604  00FD14  22                 	db	34
   605  00FD15  14                 	db	20
   606  00FD16  08                 	db	8
   607  00FD17  00                 	db	0
   608  00FD18  02                 	db	2
   609  00FD19  01                 	db	1
   610  00FD1A  51                 	db	81
   611  00FD1B  09                 	db	9
   612  00FD1C  06                 	db	6
   613  00FD1D  32                 	db	50
   614  00FD1E  49                 	db	73
   615  00FD1F  79                 	db	121
   616  00FD20  41                 	db	65
   617  00FD21  3E                 	db	62
   618  00FD22  7E                 	db	126
   619  00FD23  11                 	db	17
   620  00FD24  11                 	db	17
   621  00FD25  11                 	db	17
   622  00FD26  7E                 	db	126
   623  00FD27  7F                 	db	127
   624  00FD28  49                 	db	73
   625  00FD29  49                 	db	73
   626  00FD2A  49                 	db	73
   627  00FD2B  36                 	db	54
   628  00FD2C  3E                 	db	62
   629  00FD2D  41                 	db	65
   630  00FD2E  41                 	db	65
   631  00FD2F  41                 	db	65
   632  00FD30  22                 	db	34
   633  00FD31  7F                 	db	127
   634  00FD32  41                 	db	65
   635  00FD33  41                 	db	65
   636  00FD34  22                 	db	34
   637  00FD35  1C                 	db	28
   638  00FD36  7F                 	db	127
   639  00FD37  49                 	db	73
   640  00FD38  49                 	db	73
   641  00FD39  49                 	db	73
   642  00FD3A  41                 	db	65
   643  00FD3B  7F                 	db	127
   644  00FD3C  09                 	db	9
   645  00FD3D  09                 	db	9
   646  00FD3E  01                 	db	1
   647  00FD3F  01                 	db	1
   648  00FD40  3E                 	db	62
   649  00FD41  41                 	db	65
   650  00FD42  41                 	db	65
   651  00FD43  51                 	db	81
   652  00FD44  32                 	db	50
   653  00FD45  7F                 	db	127
   654  00FD46  08                 	db	8
   655  00FD47  08                 	db	8
   656  00FD48  08                 	db	8
   657  00FD49  7F                 	db	127
   658  00FD4A  00                 	db	0
   659  00FD4B  41                 	db	65
   660  00FD4C  7F                 	db	127
   661  00FD4D  41                 	db	65
   662  00FD4E  00                 	db	0
   663  00FD4F  20                 	db	32
   664  00FD50  40                 	db	64
   665  00FD51  41                 	db	65
   666  00FD52  3F                 	db	63
   667  00FD53  01                 	db	1
   668  00FD54  7F                 	db	127
   669  00FD55  08                 	db	8
   670  00FD56  14                 	db	20
   671  00FD57  22                 	db	34
   672  00FD58  41                 	db	65
   673  00FD59  7F                 	db	127
   674  00FD5A  40                 	db	64
   675  00FD5B  40                 	db	64
   676  00FD5C  40                 	db	64
   677  00FD5D  40                 	db	64
   678  00FD5E  7F                 	db	127
   679  00FD5F  02                 	db	2
   680  00FD60  04                 	db	4
   681  00FD61  02                 	db	2
   682  00FD62  7F                 	db	127
   683  00FD63  7F                 	db	127
   684  00FD64  04                 	db	4
   685  00FD65  08                 	db	8
   686  00FD66  10                 	db	16
   687  00FD67  7F                 	db	127
   688  00FD68  3E                 	db	62
   689  00FD69  41                 	db	65
   690  00FD6A  41                 	db	65
   691  00FD6B  41                 	db	65
   692  00FD6C  3E                 	db	62
   693  00FD6D  7F                 	db	127
   694  00FD6E  09                 	db	9
   695  00FD6F  09                 	db	9
   696  00FD70  09                 	db	9
   697  00FD71  06                 	db	6
   698  00FD72  3E                 	db	62
   699  00FD73  41                 	db	65
   700  00FD74  51                 	db	81
   701  00FD75  21                 	db	33
   702  00FD76  5E                 	db	94
   703  00FD77  7F                 	db	127
   704  00FD78  09                 	db	9
   705  00FD79  19                 	db	25
   706  00FD7A  29                 	db	41
   707  00FD7B  46                 	db	70
   708  00FD7C  46                 	db	70
   709  00FD7D  49                 	db	73
   710  00FD7E  49                 	db	73
   711  00FD7F  49                 	db	73
   712  00FD80  31                 	db	49
   713  00FD81  01                 	db	1
   714  00FD82  01                 	db	1
   715  00FD83  7F                 	db	127
   716  00FD84  01                 	db	1
   717  00FD85  01                 	db	1
   718  00FD86  3F                 	db	63
   719  00FD87  40                 	db	64
   720  00FD88  40                 	db	64
   721  00FD89  40                 	db	64
   722  00FD8A  3F                 	db	63
   723  00FD8B  1F                 	db	31
   724  00FD8C  20                 	db	32
   725  00FD8D  40                 	db	64
   726  00FD8E  20                 	db	32
   727  00FD8F  1F                 	db	31
   728  00FD90  7F                 	db	127
   729  00FD91  20                 	db	32
   730  00FD92  18                 	db	24
   731  00FD93  20                 	db	32
   732  00FD94  7F                 	db	127
   733  00FD95  63                 	db	99
   734  00FD96  14                 	db	20
   735  00FD97  08                 	db	8
   736  00FD98  14                 	db	20
   737  00FD99  63                 	db	99
   738  00FD9A  03                 	db	3
   739  00FD9B  04                 	db	4
   740  00FD9C  78                 	db	120
   741  00FD9D  04                 	db	4
   742  00FD9E  03                 	db	3
   743  00FD9F  61                 	db	97
   744  00FDA0  51                 	db	81
   745  00FDA1  49                 	db	73
   746  00FDA2  45                 	db	69
   747  00FDA3  43                 	db	67
   748  00FDA4  00                 	db	0
   749  00FDA5  00                 	db	0
   750  00FDA6  7F                 	db	127
   751  00FDA7  41                 	db	65
   752  00FDA8  41                 	db	65
   753  00FDA9  02                 	db	2
   754  00FDAA  04                 	db	4
   755  00FDAB  08                 	db	8
   756  00FDAC  10                 	db	16
   757  00FDAD  20                 	db	32
   758  00FDAE  41                 	db	65
   759  00FDAF  41                 	db	65
   760  00FDB0  7F                 	db	127
   761  00FDB1  00                 	db	0
   762  00FDB2  00                 	db	0
   763  00FDB3  04                 	db	4
   764  00FDB4  02                 	db	2
   765  00FDB5  01                 	db	1
   766  00FDB6  02                 	db	2
   767  00FDB7  04                 	db	4
   768  00FDB8  40                 	db	64
   769  00FDB9  40                 	db	64
   770  00FDBA  40                 	db	64
   771  00FDBB  40                 	db	64
   772  00FDBC  40                 	db	64
   773  00FDBD  00                 	db	0
   774  00FDBE  01                 	db	1
   775  00FDBF  02                 	db	2
   776  00FDC0  04                 	db	4
   777  00FDC1  00                 	db	0
   778  00FDC2  20                 	db	32
   779  00FDC3  54                 	db	84
   780  00FDC4  54                 	db	84
   781  00FDC5  54                 	db	84
   782  00FDC6  78                 	db	120
   783  00FDC7  7F                 	db	127
   784  00FDC8  48                 	db	72
   785  00FDC9  44                 	db	68
   786  00FDCA  44                 	db	68
   787  00FDCB  38                 	db	56
   788  00FDCC  38                 	db	56
   789  00FDCD  44                 	db	68
   790  00FDCE  44                 	db	68
   791  00FDCF  44                 	db	68
   792  00FDD0  20                 	db	32
   793  00FDD1  38                 	db	56
   794  00FDD2  44                 	db	68
   795  00FDD3  44                 	db	68
   796  00FDD4  48                 	db	72
   797  00FDD5  7F                 	db	127
   798  00FDD6  38                 	db	56
   799  00FDD7  54                 	db	84
   800  00FDD8  54                 	db	84
   801  00FDD9  54                 	db	84
   802  00FDDA  18                 	db	24
   803  00FDDB  08                 	db	8
   804  00FDDC  7E                 	db	126
   805  00FDDD  09                 	db	9
   806  00FDDE  01                 	db	1
   807  00FDDF  02                 	db	2
   808  00FDE0  08                 	db	8
   809  00FDE1  14                 	db	20
   810  00FDE2  54                 	db	84
   811  00FDE3  54                 	db	84
   812  00FDE4  3C                 	db	60
   813  00FDE5  7F                 	db	127
   814  00FDE6  08                 	db	8
   815  00FDE7  04                 	db	4
   816  00FDE8  04                 	db	4
   817  00FDE9  78                 	db	120
   818  00FDEA  00                 	db	0
   819  00FDEB  44                 	db	68
   820  00FDEC  7D                 	db	125
   821  00FDED  40                 	db	64
   822  00FDEE  00                 	db	0
   823  00FDEF  20                 	db	32
   824  00FDF0  40                 	db	64
   825  00FDF1  44                 	db	68
   826  00FDF2  3D                 	db	61
   827  00FDF3  00                 	db	0
   828  00FDF4  00                 	db	0
   829  00FDF5  7F                 	db	127
   830  00FDF6  10                 	db	16
   831  00FDF7  28                 	db	40
   832  00FDF8  44                 	db	68
   833  00FDF9  00                 	db	0
   834  00FDFA  41                 	db	65
   835  00FDFB  7F                 	db	127
   836  00FDFC  40                 	db	64
   837  00FDFD  00                 	db	0
   838  00FDFE  7C                 	db	124
   839  00FDFF  04                 	db	4
   840  00FE00  18                 	db	24
   841  00FE01  04                 	db	4
   842  00FE02  78                 	db	120
   843  00FE03  7C                 	db	124
   844  00FE04  08                 	db	8
   845  00FE05  04                 	db	4
   846  00FE06  04                 	db	4
   847  00FE07  78                 	db	120
   848  00FE08  38                 	db	56
   849  00FE09  44                 	db	68
   850  00FE0A  44                 	db	68
   851  00FE0B  44                 	db	68
   852  00FE0C  38                 	db	56
   853  00FE0D  7C                 	db	124
   854  00FE0E  14                 	db	20
   855  00FE0F  14                 	db	20
   856  00FE10  14                 	db	20
   857  00FE11  08                 	db	8
   858  00FE12  08                 	db	8
   859  00FE13  14                 	db	20
   860  00FE14  14                 	db	20
   861  00FE15  18                 	db	24
   862  00FE16  7C                 	db	124
   863  00FE17  7C                 	db	124
   864  00FE18  08                 	db	8
   865  00FE19  04                 	db	4
   866  00FE1A  04                 	db	4
   867  00FE1B  08                 	db	8
   868  00FE1C  48                 	db	72
   869  00FE1D  54                 	db	84
   870  00FE1E  54                 	db	84
   871  00FE1F  54                 	db	84
   872  00FE20  20                 	db	32
   873  00FE21  04                 	db	4
   874  00FE22  3F                 	db	63
   875  00FE23  44                 	db	68
   876  00FE24  40                 	db	64
   877  00FE25  20                 	db	32
   878  00FE26  3C                 	db	60
   879  00FE27  40                 	db	64
   880  00FE28  40                 	db	64
   881  00FE29  20                 	db	32
   882  00FE2A  7C                 	db	124
   883  00FE2B  1C                 	db	28
   884  00FE2C  20                 	db	32
   885  00FE2D  40                 	db	64
   886  00FE2E  20                 	db	32
   887  00FE2F  1C                 	db	28
   888  00FE30  3C                 	db	60
   889  00FE31  40                 	db	64
   890  00FE32  30                 	db	48
   891  00FE33  40                 	db	64
   892  00FE34  3C                 	db	60
   893  00FE35  44                 	db	68
   894  00FE36  28                 	db	40
   895  00FE37  10                 	db	16
   896  00FE38  28                 	db	40
   897  00FE39  44                 	db	68
   898  00FE3A  0C                 	db	12
   899  00FE3B  50                 	db	80
   900  00FE3C  50                 	db	80
   901  00FE3D  50                 	db	80
   902  00FE3E  3C                 	db	60
   903  00FE3F  44                 	db	68
   904  00FE40  64                 	db	100
   905  00FE41  54                 	db	84
   906  00FE42  4C                 	db	76
   907  00FE43  44                 	db	68
   908  00FE44  00                 	db	0
   909  00FE45  08                 	db	8
   910  00FE46  36                 	db	54
   911  00FE47  41                 	db	65
   912  00FE48  00                 	db	0
   913  00FE49  00                 	db	0
   914  00FE4A  00                 	db	0
   915  00FE4B  7F                 	db	127
   916  00FE4C  00                 	db	0
   917  00FE4D  00                 	db	0
   918  00FE4E  00                 	db	0
   919  00FE4F  41                 	db	65
   920  00FE50  36                 	db	54
   921  00FE51  08                 	db	8
   922  00FE52  00                 	db	0
   923  00FE53  08                 	db	8
   924  00FE54  08                 	db	8
   925  00FE55  2A                 	db	42
   926  00FE56  1C                 	db	28
   927  00FE57  08                 	db	8
   928  00FE58  08                 	db	8
   929  00FE59  1C                 	db	28
   930  00FE5A  2A                 	db	42
   931  00FE5B  08                 	db	8
   932  00FE5C  08                 	db	8
   933  00FE5D                     __end_of_Font5x7:
   934                           	opt stack 0
   935  00FE5D                     exp@coeff:
   936                           	opt stack 0
   937  00FE5D  0000               	dw	0
   938  00FE5F  3F80               	dw	16256
   939  00FE61  7218               	dw	29208
   940  00FE63  3F31               	dw	16177
   941  00FE65  FDF0               	dw	65008
   942  00FE67  3E75               	dw	15989
   943  00FE69  5847               	dw	22599
   944  00FE6B  3D63               	dw	15715
   945  00FE6D  9558               	dw	38232
   946  00FE6F  3C1D               	dw	15389
   947  00FE71  C482               	dw	50306
   948  00FE73  3AAE               	dw	15022
   949  00FE75  78A8               	dw	30888
   950  00FE77  3921               	dw	14625
   951  00FE79  93EF               	dw	37871
   952  00FE7B  3780               	dw	14208
   953  00FE7D  92A0               	dw	37536
   954  00FE7F  35A7               	dw	13735
   955  00FE81  5646               	dw	22086
   956  00FE83  3415               	dw	13333
   957  00FE85                     __end_ofexp@coeff:
   958                           	opt stack 0
   959  00FE85                     log@coeff:
   960                           	opt stack 0
   961  00FE85  0000               	dw	0
   962  00FE87  0000               	dw	0
   963  00FE89  FFC4               	dw	65476
   964  00FE8B  3F7F               	dw	16255
   965  00FE8D  EF80               	dw	61312
   966  00FE8F  BEFF               	dw	48895
   967  00FE91  E190               	dw	57744
   968  00FE93  3EA9               	dw	16041
   969  00FE95  82EC               	dw	33516
   970  00FE97  BE76               	dw	48758
   971  00FE99  AD82               	dw	44418
   972  00FE9B  3E2B               	dw	15915
   973  00FE9D  3C0E               	dw	15374
   974  00FE9F  BDC3               	dw	48579
   975  00FEA1  D187               	dw	53639
   976  00FEA3  3D13               	dw	15635
   977  00FEA5  7841               	dw	30785
   978  00FEA7  BBD3               	dw	48083
   979  00FEA9                     __end_oflog@coeff:
   980                           	opt stack 0
   981  00FEA9                     _PortG_Property:
   982                           	opt stack 0
   983  00FEA9  FC00               	dw	64512
   984  00FEAB                     __end_of_PortG_Property:
   985                           	opt stack 0
   986  00FEAB                     _PortF_Property:
   987                           	opt stack 0
   988  00FEAB  0FFF               	dw	4095
   989  00FEAD                     __end_of_PortF_Property:
   990                           	opt stack 0
   991  00FEAD                     _PortE_Property:
   992                           	opt stack 0
   993  00FEAD  0000               	dw	0
   994  00FEAF                     __end_of_PortE_Property:
   995                           	opt stack 0
   996  00FEAF                     _PortD_Property:
   997                           	opt stack 0
   998  00FEAF  FFFF               	dw	65535
   999  00FEB1                     __end_of_PortD_Property:
  1000                           	opt stack 0
  1001  00FEB1                     _PortC_Property:
  1002                           	opt stack 0
  1003  00FEB1  FFF0               	dw	65520
  1004  00FEB3                     __end_of_PortC_Property:
  1005                           	opt stack 0
  1006  00FEB3                     _PortB_Property:
  1007                           	opt stack 0
  1008  00FEB3  FF00               	dw	65280
  1009  00FEB5                     __end_of_PortB_Property:
  1010                           	opt stack 0
  1011  00FEB5                     _PortA_Property:
  1012                           	opt stack 0
  1013  00FEB5  00FF               	dw	255
  1014  00FEB7                     __end_of_PortA_Property:
  1015                           	opt stack 0
  1016  0000                     _ADRES	set	4035
  1017  0000                     _TMR0	set	4054
  1018  0000                     _TXREG1	set	4014
  1019  0000                     _ADCON0	set	4034
  1020  0000                     _ADCON1	set	4033
  1021  0000                     _RCREG1	set	4015
  1022  0000                     _SPBRG1	set	4016
  1023  0000                     _TXSTA1bits	set	4013
  1024  0000                     _BAUDCON1bits	set	3966
  1025  0000                     _RCSTA1	set	4012
  1026  0000                     _TXSTA1	set	4013
  1027  0000                     _TRISCbits	set	3988
  1028  0000                     _PR2	set	4043
  1029  0000                     _T2CONbits	set	4042
  1030  0000                     _T0CONbits	set	4053
  1031  0000                     _RCONbits	set	4048
  1032  0000                     _OSCTUNEbits	set	3995
  1033  0000                     _PIR3	set	4004
  1034  0000                     _PIR2	set	4001
  1035  0000                     _PIR1	set	3998
  1036  0000                     _INTCONbits	set	4082
  1037  0000                     _SSP2CON2bits	set	3947
  1038  0000                     _SSP1CON2bits	set	4037
  1039  0000                     _SSP1ADD	set	4040
  1040  0000                     _ANCON0	set	4033
  1041  0000                     _ADRESL	set	4035
  1042  0000                     _ADRESH	set	4036
  1043  0000                     _ADCON1bits	set	4033
  1044  0000                     _ADCON0bits	set	4034
  1045  0000                     _SSP2CON1bits	set	3948
  1046  0000                     _SSP1CON1bits	set	4038
  1047  0000                     _SSP2STATbits	set	3949
  1048  0000                     _SSP1STATbits	set	4039
  1049  0000                     _PIE3bits	set	4003
  1050  0000                     _PIE1bits	set	3997
  1051  0000                     _PIR3bits	set	4004
  1052  0000                     _PIR1bits	set	3998
  1053  0000                     _IPR3bits	set	4005
  1054  0000                     _IPR1bits	set	3999
  1055  0000                     _PORTFbits	set	3973
  1056  0000                     _SSP2CON2	set	3947
  1057  0000                     _SSP1CON2	set	4037
  1058  0000                     _SSP2BUF	set	3951
  1059  0000                     _SSP2CON1	set	3948
  1060  0000                     _SSP2STAT	set	3949
  1061  0000                     _SSP1BUF	set	4041
  1062  0000                     _SSP1CON1	set	4038
  1063  0000                     _SSP1STAT	set	4039
  1064  0000                     _LATG	set	3983
  1065  0000                     _LATF	set	3982
  1066  0000                     _LATE	set	3981
  1067  0000                     _LATD	set	3980
  1068  0000                     _LATC	set	3979
  1069  0000                     _LATB	set	3978
  1070  0000                     _LATA	set	3977
  1071  0000                     _TRISG	set	3992
  1072  0000                     _TRISF	set	3991
  1073  0000                     _TRISE	set	3990
  1074  0000                     _TRISD	set	3989
  1075  0000                     _TRISC	set	3988
  1076  0000                     _TRISB	set	3987
  1077  0000                     _TRISA	set	3986
  1078  0000                     _PORTG	set	3974
  1079  0000                     _PORTF	set	3973
  1080  0000                     _PORTE	set	3972
  1081  0000                     _PORTD	set	3971
  1082  0000                     _PORTC	set	3970
  1083  0000                     _PORTB	set	3969
  1084  0000                     _PORTA	set	3968
  1085  0000                     _GODONE	set	32273
  1086  0000                     _ADON	set	32272
  1087  0000                     _RA3	set	31747
  1088  0000                     _RA2	set	31746
  1089  0000                     _RD7	set	31775
  1090  0000                     _RD5	set	31773
  1091  0000                     _TRISD7	set	31919
  1092  0000                     _TRISD5	set	31917
  1093  0000                     _TRISA3	set	31891
  1094  0000                     _TRISA2	set	31890
  1095  00FEB7  43                 	db	67	;'C'
  1096  00FEB8  6F                 	db	111	;'o'
  1097  00FEB9  75                 	db	117	;'u'
  1098  00FEBA  6C                 	db	108	;'l'
  1099  00FEBB  64                 	db	100	;'d'
  1100  00FEBC  20                 	db	32
  1101  00FEBD  6E                 	db	110	;'n'
  1102  00FEBE  6F                 	db	111	;'o'
  1103  00FEBF  74                 	db	116	;'t'
  1104  00FEC0  20                 	db	32
  1105  00FEC1  72                 	db	114	;'r'
  1106  00FEC2  65                 	db	101	;'e'
  1107  00FEC3  74                 	db	116	;'t'
  1108  00FEC4  72                 	db	114	;'r'
  1109  00FEC5  69                 	db	105	;'i'
  1110  00FEC6  65                 	db	101	;'e'
  1111  00FEC7  76                 	db	118	;'v'
  1112  00FEC8  65                 	db	101	;'e'
  1113  00FEC9  20                 	db	32
  1114  00FECA  64                 	db	100	;'d'
  1115  00FECB  61                 	db	97	;'a'
  1116  00FECC  74                 	db	116	;'t'
  1117  00FECD  61                 	db	97	;'a'
  1118  00FECE  2C                 	db	44
  1119  00FECF  20                 	db	32
  1120  00FED0  53                 	db	83	;'S'
  1121  00FED1  74                 	db	116	;'t'
  1122  00FED2  61                 	db	97	;'a'
  1123  00FED3  63                 	db	99	;'c'
  1124  00FED4  6B                 	db	107	;'k'
  1125  00FED5  20                 	db	32
  1126  00FED6  69                 	db	105	;'i'
  1127  00FED7  73                 	db	115	;'s'
  1128  00FED8  20                 	db	32
  1129  00FED9  65                 	db	101	;'e'
  1130  00FEDA  6D                 	db	109	;'m'
  1131  00FEDB  70                 	db	112	;'p'
  1132  00FEDC  74                 	db	116	;'t'
  1133  00FEDD  79                 	db	121	;'y'
  1134  00FEDE  2E                 	db	46
  1135  00FEDF  0A                 	db	10
  1136  00FEE0  00                 	db	0
  1137  00FEE1  43                 	db	67	;'C'
  1138  00FEE2  6F                 	db	111	;'o'
  1139  00FEE3  75                 	db	117	;'u'
  1140  00FEE4  6C                 	db	108	;'l'
  1141  00FEE5  64                 	db	100	;'d'
  1142  00FEE6  20                 	db	32
  1143  00FEE7  6E                 	db	110	;'n'
  1144  00FEE8  6F                 	db	111	;'o'
  1145  00FEE9  74                 	db	116	;'t'
  1146  00FEEA  20                 	db	32
  1147  00FEEB  69                 	db	105	;'i'
  1148  00FEEC  6E                 	db	110	;'n'
  1149  00FEED  73                 	db	115	;'s'
  1150  00FEEE  65                 	db	101	;'e'
  1151  00FEEF  72                 	db	114	;'r'
  1152  00FEF0  74                 	db	116	;'t'
  1153  00FEF1  20                 	db	32
  1154  00FEF2  64                 	db	100	;'d'
  1155  00FEF3  61                 	db	97	;'a'
  1156  00FEF4  74                 	db	116	;'t'
  1157  00FEF5  61                 	db	97	;'a'
  1158  00FEF6  2C                 	db	44
  1159  00FEF7  20                 	db	32
  1160  00FEF8  53                 	db	83	;'S'
  1161  00FEF9  74                 	db	116	;'t'
  1162  00FEFA  61                 	db	97	;'a'
  1163  00FEFB  63                 	db	99	;'c'
  1164  00FEFC  6B                 	db	107	;'k'
  1165  00FEFD  20                 	db	32
  1166  00FEFE  69                 	db	105	;'i'
  1167  00FEFF  73                 	db	115	;'s'
  1168  00FF00  20                 	db	32
  1169  00FF01  66                 	db	102	;'f'
  1170  00FF02  75                 	db	117	;'u'
  1171  00FF03  6C                 	db	108	;'l'
  1172  00FF04  6C                 	db	108	;'l'
  1173  00FF05  2E                 	db	46
  1174  00FF06  0A                 	db	10
  1175  00FF07  00                 	db	0
  1176  00FF08  0A                 	db	10
  1177  00FF09  54                 	db	84	;'T'
  1178  00FF0A  68                 	db	104	;'h'
  1179  00FF0B  65                 	db	101	;'e'
  1180  00FF0C  20                 	db	32
  1181  00FF0D  43                 	db	67	;'C'
  1182  00FF0E  6C                 	db	108	;'l'
  1183  00FF0F  6F                 	db	111	;'o'
  1184  00FF10  73                 	db	115	;'s'
  1185  00FF11  65                 	db	101	;'e'
  1186  00FF12  73                 	db	115	;'s'
  1187  00FF13  20                 	db	32
  1188  00FF14  6F                 	db	111	;'o'
  1189  00FF15  62                 	db	98	;'b'
  1190  00FF16  6A                 	db	106	;'j'
  1191  00FF17  65                 	db	101	;'e'
  1192  00FF18  63                 	db	99	;'c'
  1193  00FF19  74                 	db	116	;'t'
  1194  00FF1A  20                 	db	32
  1195  00FF1B  28                 	db	40
  1196  00FF1C  6D                 	db	109	;'m'
  1197  00FF1D  6D                 	db	109	;'m'
  1198  00FF1E  29                 	db	41
  1199  00FF1F  3A                 	db	58	;':'
  1200  00FF20  20                 	db	32
  1201  00FF21  25                 	db	37
  1202  00FF22  64                 	db	100	;'d'
  1203  00FF23  00                 	db	0
  1204  00FF24  0A                 	db	10
  1205  00FF25  53                 	db	83	;'S'
  1206  00FF26  74                 	db	116	;'t'
  1207  00FF27  65                 	db	101	;'e'
  1208  00FF28  70                 	db	112	;'p'
  1209  00FF29  73                 	db	115	;'s'
  1210  00FF2A  20                 	db	32
  1211  00FF2B  54                 	db	84	;'T'
  1212  00FF2C  72                 	db	114	;'r'
  1213  00FF2D  61                 	db	97	;'a'
  1214  00FF2E  76                 	db	118	;'v'
  1215  00FF2F  65                 	db	101	;'e'
  1216  00FF30  6C                 	db	108	;'l'
  1217  00FF31  6C                 	db	108	;'l'
  1218  00FF32  65                 	db	101	;'e'
  1219  00FF33  64                 	db	100	;'d'
  1220  00FF34  3A                 	db	58	;':'
  1221  00FF35  20                 	db	32
  1222  00FF36  25                 	db	37
  1223  00FF37  64                 	db	100	;'d'
  1224  00FF38  20                 	db	32
  1225  00FF39  0A                 	db	10
  1226  00FF3A  0A                 	db	10
  1227  00FF3B  00                 	db	0
  1228  00FF3C  0A                 	db	10
  1229  00FF3D  53                 	db	83	;'S'
  1230  00FF3E  74                 	db	116	;'t'
  1231  00FF3F  65                 	db	101	;'e'
  1232  00FF40  70                 	db	112	;'p'
  1233  00FF41  73                 	db	115	;'s'
  1234  00FF42  20                 	db	32
  1235  00FF43  54                 	db	84	;'T'
  1236  00FF44  72                 	db	114	;'r'
  1237  00FF45  61                 	db	97	;'a'
  1238  00FF46  76                 	db	118	;'v'
  1239  00FF47  65                 	db	101	;'e'
  1240  00FF48  6C                 	db	108	;'l'
  1241  00FF49  6C                 	db	108	;'l'
  1242  00FF4A  65                 	db	101	;'e'
  1243  00FF4B  64                 	db	100	;'d'
  1244  00FF4C  3A                 	db	58	;':'
  1245  00FF4D  20                 	db	32
  1246  00FF4E  25                 	db	37
  1247  00FF4F  64                 	db	100	;'d'
  1248  00FF50  00                 	db	0
  1249  00FF51  53                 	db	83	;'S'
  1250  00FF52  74                 	db	116	;'t'
  1251  00FF53  65                 	db	101	;'e'
  1252  00FF54  70                 	db	112	;'p'
  1253  00FF55  70                 	db	112	;'p'
  1254  00FF56  65                 	db	101	;'e'
  1255  00FF57  64                 	db	100	;'d'
  1256  00FF58  20                 	db	32
  1257  00FF59  33                 	db	51	;'3'
  1258  00FF5A  36                 	db	54	;'6'
  1259  00FF5B  30                 	db	48	;'0'
  1260  00FF5C  20                 	db	32
  1261  00FF5D  64                 	db	100	;'d'
  1262  00FF5E  65                 	db	101	;'e'
  1263  00FF5F  67                 	db	103	;'g'
  1264  00FF60  72                 	db	114	;'r'
  1265  00FF61  65                 	db	101	;'e'
  1266  00FF62  65                 	db	101	;'e'
  1267  00FF63  73                 	db	115	;'s'
  1268  00FF64  00                 	db	0
  1269  00FF65  53                 	db	83	;'S'
  1270  00FF66  65                 	db	101	;'e'
  1271  00FF67  6E                 	db	110	;'n'
  1272  00FF68  73                 	db	115	;'s'
  1273  00FF69  6F                 	db	111	;'o'
  1274  00FF6A  72                 	db	114	;'r'
  1275  00FF6B  20                 	db	32
  1276  00FF6C  4D                 	db	77	;'M'
  1277  00FF6D  6F                 	db	111	;'o'
  1278  00FF6E  76                 	db	118	;'v'
  1279  00FF6F  69                 	db	105	;'i'
  1280  00FF70  6E                 	db	110	;'n'
  1281  00FF71  67                 	db	103	;'g'
  1282  00FF72  21                 	db	33
  1283  00FF73  20                 	db	32
  1284  00FF74  20                 	db	32
  1285  00FF75  20                 	db	32
  1286  00FF76  0A                 	db	10
  1287  00FF77  00                 	db	0
  1288  00FF78  0A                 	db	10
  1289  00FF79  47                 	db	71	;'G'
  1290  00FF7A  6F                 	db	111	;'o'
  1291  00FF7B  69                 	db	105	;'i'
  1292  00FF7C  6E                 	db	110	;'n'
  1293  00FF7D  67                 	db	103	;'g'
  1294  00FF7E  20                 	db	32
  1295  00FF7F  62                 	db	98	;'b'
  1296  00FF80  61                 	db	97	;'a'
  1297  00FF81  63                 	db	99	;'c'
  1298  00FF82  6B                 	db	107	;'k'
  1299  00FF83  20                 	db	32
  1300  00FF84  74                 	db	116	;'t'
  1301  00FF85  6F                 	db	111	;'o'
  1302  00FF86  3A                 	db	58	;':'
  1303  00FF87  20                 	db	32
  1304  00FF88  25                 	db	37
  1305  00FF89  64                 	db	100	;'d'
  1306  00FF8A  00                 	db	0
  1307  00FF8B  0A                 	db	10
  1308  00FF8C  20                 	db	32
  1309  00FF8D  46                 	db	70	;'F'
  1310  00FF8E  6F                 	db	111	;'o'
  1311  00FF8F  75                 	db	117	;'u'
  1312  00FF90  6E                 	db	110	;'n'
  1313  00FF91  64                 	db	100	;'d'
  1314  00FF92  20                 	db	32
  1315  00FF93  46                 	db	70	;'F'
  1316  00FF94  6C                 	db	108	;'l'
  1317  00FF95  61                 	db	97	;'a'
  1318  00FF96  67                 	db	103	;'g'
  1319  00FF97  3A                 	db	58	;':'
  1320  00FF98  20                 	db	32
  1321  00FF99  25                 	db	37
  1322  00FF9A  64                 	db	100	;'d'
  1323  00FF9B  00                 	db	0
  1324  00FF9C                     STR_25:
  1325  00FF9C  72                 	db	114	;'r'
  1326  00FF9D  65                 	db	101	;'e'
  1327  00FF9E  76                 	db	118	;'v'
  1328  00FF9F  3A                 	db	58	;':'
  1329  00FFA0  25                 	db	37
  1330  00FFA1  64                 	db	100	;'d'
  1331  00FFA2  20                 	db	32
  1332  00FFA3  54                 	db	84	;'T'
  1333  00FFA4  61                 	db	97	;'a'
  1334  00FFA5  72                 	db	114	;'r'
  1335  00FFA6  3A                 	db	58	;':'
  1336  00FFA7  20                 	db	32
  1337  00FFA8  25                 	db	37
  1338  00FFA9  64                 	db	100	;'d'
  1339  00FFAA  0A                 	db	10
  1340  00FFAB  00                 	db	0
  1341  00FFAC                     STR_13:
  1342  00FFAC  52                 	db	82	;'R'
  1343  00FFAD  6F                 	db	111	;'o'
  1344  00FFAE  62                 	db	98	;'b'
  1345  00FFAF  6F                 	db	111	;'o'
  1346  00FFB0  74                 	db	116	;'t'
  1347  00FFB1  20                 	db	32
  1348  00FFB2  52                 	db	82	;'R'
  1349  00FFB3  65                 	db	101	;'e'
  1350  00FFB4  61                 	db	97	;'a'
  1351  00FFB5  64                 	db	100	;'d'
  1352  00FFB6  79                 	db	121	;'y'
  1353  00FFB7  21                 	db	33
  1354  00FFB8  20                 	db	32
  1355  00FFB9  0A                 	db	10
  1356  00FFBA  0A                 	db	10
  1357  00FFBB  00                 	db	0
  1358  00FFBC                     STR_23:
  1359  00FFBC  57                 	db	87	;'W'
  1360  00FFBD  41                 	db	65	;'A'
  1361  00FFBE  4C                 	db	76	;'L'
  1362  00FFBF  4C                 	db	76	;'L'
  1363  00FFC0  20                 	db	32
  1364  00FFC1  46                 	db	70	;'F'
  1365  00FFC2  4F                 	db	79	;'O'
  1366  00FFC3  55                 	db	85	;'U'
  1367  00FFC4  4E                 	db	78	;'N'
  1368  00FFC5  44                 	db	68	;'D'
  1369  00FFC6  0A                 	db	10
  1370  00FFC7  00                 	db	0
  1371  00FFC8                     STR_26:
  1372  00FFC8  50                 	db	80	;'P'
  1373  00FFC9  6F                 	db	111	;'o'
  1374  00FFCA  73                 	db	115	;'s'
  1375  00FFCB  3A                 	db	58	;':'
  1376  00FFCC  20                 	db	32
  1377  00FFCD  25                 	db	37
  1378  00FFCE  64                 	db	100	;'d'
  1379  00FFCF  2C                 	db	44
  1380  00FFD0  20                 	db	32
  1381  00FFD1  25                 	db	37
  1382  00FFD2  64                 	db	100	;'d'
  1383  00FFD3  00                 	db	0
  1384  00FFD4  0A                 	db	10
  1385  00FFD5  41                 	db	65	;'A'
  1386  00FFD6  44                 	db	68	;'D'
  1387  00FFD7  43                 	db	67	;'C'
  1388  00FFD8  3A                 	db	58	;':'
  1389  00FFD9  20                 	db	32
  1390  00FFDA  25                 	db	37
  1391  00FFDB  64                 	db	100	;'d'
  1392  00FFDC  20                 	db	32
  1393  00FFDD  0A                 	db	10
  1394  00FFDE  0A                 	db	10
  1395  00FFDF  00                 	db	0
  1396  00FFE0  0A                 	db	10
  1397  00FFE1  53                 	db	83	;'S'
  1398  00FFE2  74                 	db	116	;'t'
  1399  00FFE3  65                 	db	101	;'e'
  1400  00FFE4  70                 	db	112	;'p'
  1401  00FFE5  73                 	db	115	;'s'
  1402  00FFE6  20                 	db	32
  1403  00FFE7  25                 	db	37
  1404  00FFE8  64                 	db	100	;'d'
  1405  00FFE9  00                 	db	0
  1406  00FFEA                     STR_20:
  1407  00FFEA  64                 	db	100	;'d'
  1408  00FFEB  72                 	db	114	;'r'
  1409  00FFEC  69                 	db	105	;'i'
  1410  00FFED  76                 	db	118	;'v'
  1411  00FFEE  69                 	db	105	;'i'
  1412  00FFEF  6E                 	db	110	;'n'
  1413  00FFF0  67                 	db	103	;'g'
  1414  00FFF1  00                 	db	0
  1415  00FFF2                     STR_22:
  1416  00FFF2  25                 	db	37
  1417  00FFF3  64                 	db	100	;'d'
  1418  00FFF4  20                 	db	32
  1419  00FFF5  0A                 	db	10
  1420  00FFF6  00                 	db	0
  1421  00FFF7  25                 	db	37
  1422  00FFF8  64                 	db	100	;'d'
  1423  00FFF9  09                 	db	9
  1424  00FFFA  00                 	db	0
  1425  00FFFB                     STR_1:
  1426  00FFFB  25                 	db	37
  1427  00FFFC  63                 	db	99	;'c'
  1428  00FFFD  00                 	db	0
  1429  0000                     
  1430                           ; #config settings
  1431  00FFFE  00                 	db	0	; dummy byte at the end
  1432  0000                     
  1433                           	psect	cinit
  1434  013F18                     __pcinit:
  1435                           	opt stack 0
  1436  013F18                     start_initialization:
  1437                           	opt stack 0
  1438  013F18                     __initialization:
  1439                           	opt stack 0
  1440                           
  1441                           ; Initialize objects allocated to BANK1 (22 bytes)
  1442                           ; load TBLPTR registers with __pidataBANK1
  1443  013F18  0EE2               	movlw	low __pidataBANK1
  1444  013F1A  6EF6               	movwf	tblptrl,c
  1445  013F1C  0E59               	movlw	high __pidataBANK1
  1446  013F1E  6EF7               	movwf	tblptrh,c
  1447  013F20  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1448  013F22  6EF8               	movwf	tblptru,c
  1449  013F24  EE01  F0E5         	lfsr	0,__pdataBANK1
  1450  013F28  EE10 F016          	lfsr	1,22
  1451  013F2C                     copy_data0:
  1452  013F2C  0009               	tblrd		*+
  1453  013F2E  CFF5 FFEE          	movff	tablat,postinc0
  1454  013F32  50E5               	movf	postdec1,w,c
  1455  013F34  50E1               	movf	fsr1l,w,c
  1456  013F36  E1FA               	bnz	copy_data0
  1457                           
  1458                           ; Initialize objects allocated to BANK0 (1 bytes)
  1459                           ; load TBLPTR registers with __pidataBANK0
  1460  013F38  0E5A               	movlw	low __pidataBANK0
  1461  013F3A  6EF6               	movwf	tblptrl,c
  1462  013F3C  0E5B               	movlw	high __pidataBANK0
  1463  013F3E  6EF7               	movwf	tblptrh,c
  1464  013F40  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1465  013F42  6EF8               	movwf	tblptru,c
  1466  013F44  0009               	tblrd		*+	;fetch initializer
  1467  013F46  CFF5 F0F5          	movff	tablat,__pdataBANK0
  1468                           
  1469                           ; Initialize objects allocated to COMRAM (14 bytes)
  1470                           ; load TBLPTR registers with __pidataCOMRAM
  1471  013F4A  0EAC               	movlw	low __pidataCOMRAM
  1472  013F4C  6EF6               	movwf	tblptrl,c
  1473  013F4E  0E5A               	movlw	high __pidataCOMRAM
  1474  013F50  6EF7               	movwf	tblptrh,c
  1475  013F52  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1476  013F54  6EF8               	movwf	tblptru,c
  1477  013F56  EE00  F043         	lfsr	0,__pdataCOMRAM
  1478  013F5A  EE10 F00E          	lfsr	1,14
  1479  013F5E                     copy_data1:
  1480  013F5E  0009               	tblrd		*+
  1481  013F60  CFF5 FFEE          	movff	tablat,postinc0
  1482  013F64  50E5               	movf	postdec1,w,c
  1483  013F66  50E1               	movf	fsr1l,w,c
  1484  013F68  E1FA               	bnz	copy_data1
  1485                           
  1486                           ; Clear objects allocated to BIGRAM (300 bytes)
  1487  013F6A  EE03  F018         	lfsr	0,__pbssBIGRAM
  1488  013F6E  EE11 F02C          	lfsr	1,300
  1489  013F72                     clear_0:
  1490  013F72  6AEE               	clrf	postinc0,c
  1491  013F74  50E5               	movf	postdec1,w,c
  1492  013F76  50E1               	movf	fsr1l,w,c
  1493  013F78  E1FC               	bnz	clear_0
  1494  013F7A  50E2               	movf	fsr1h,w,c
  1495  013F7C  E1FA               	bnz	clear_0
  1496                           
  1497                           ; Clear objects allocated to BANK2 (251 bytes)
  1498  013F7E  EE02  F000         	lfsr	0,__pbssBANK2
  1499  013F82  0EFB               	movlw	251
  1500  013F84                     clear_1:
  1501  013F84  6AEE               	clrf	postinc0,c
  1502  013F86  06E8               	decf	wreg,f,c
  1503  013F88  E1FD               	bnz	clear_1
  1504                           
  1505                           ; Clear objects allocated to BANK1 (229 bytes)
  1506  013F8A  EE01  F000         	lfsr	0,__pbssBANK1
  1507  013F8E  0EE5               	movlw	229
  1508  013F90                     clear_2:
  1509  013F90  6AEE               	clrf	postinc0,c
  1510  013F92  06E8               	decf	wreg,f,c
  1511  013F94  E1FD               	bnz	clear_2
  1512                           
  1513                           ; Clear objects allocated to BANK0 (24 bytes)
  1514  013F96  EE00  F0DD         	lfsr	0,__pbssBANK0
  1515  013F9A  0E18               	movlw	24
  1516  013F9C                     clear_3:
  1517  013F9C  6AEE               	clrf	postinc0,c
  1518  013F9E  06E8               	decf	wreg,f,c
  1519  013FA0  E1FD               	bnz	clear_3
  1520                           
  1521                           ; Clear objects allocated to COMRAM (26 bytes)
  1522  013FA2  EE00  F029         	lfsr	0,__pbssCOMRAM
  1523  013FA6  0E1A               	movlw	26
  1524  013FA8                     clear_4:
  1525  013FA8  6AEE               	clrf	postinc0,c
  1526  013FAA  06E8               	decf	wreg,f,c
  1527  013FAC  E1FD               	bnz	clear_4
  1528  013FAE                     end_of_initialization:
  1529                           	opt stack 0
  1530  013FAE                     __end_of__initialization:
  1531                           	opt stack 0
  1532  013FAE  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1533  013FB0  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1534  013FB2  0100               	movlb	0
  1535  013FB4  EFD1  F090         	goto	_main	;jump to C main() function
  1536                           tblptru	equ	0xFF8
  1537                           tblptrh	equ	0xFF7
  1538                           tblptrl	equ	0xFF6
  1539                           tablat	equ	0xFF5
  1540                           postinc0	equ	0xFEE
  1541                           wreg	equ	0xFE8
  1542                           postdec1	equ	0xFE5
  1543                           fsr1h	equ	0xFE2
  1544                           fsr1l	equ	0xFE1
  1545                           
  1546                           	psect	bssCOMRAM
  1547  000029                     __pbssCOMRAM:
  1548                           	opt stack 0
  1549  000029                     _total:
  1550                           	opt stack 0
  1551  000029                     	ds	2
  1552  00002B                     _Motor_Count:
  1553                           	opt stack 0
  1554  00002B                     	ds	2
  1555  00002D                     _Found_Flag:
  1556                           	opt stack 0
  1557  00002D                     	ds	2
  1558  00002F                     _val:
  1559                           	opt stack 0
  1560  00002F                     	ds	2
  1561  000031                     _COUNTER:
  1562                           	opt stack 0
  1563  000031                     	ds	2
  1564  000033                     HMI_GRender@a:
  1565                           	opt stack 0
  1566  000033                     	ds	2
  1567  000035                     _gBackcolour:
  1568                           	opt stack 0
  1569  000035                     	ds	2
  1570  000037                     Timer0_Init@PRE:
  1571                           	opt stack 0
  1572  000037                     	ds	1
  1573  000038                     _INDEX:
  1574                           	opt stack 0
  1575  000038                     	ds	1
  1576  000039                     rand@screw:
  1577                           	opt stack 0
  1578  000039                     	ds	1
  1579  00003A                     OutSeg@a:
  1580                           	opt stack 0
  1581  00003A                     	ds	1
  1582  00003B                     OutSeg@segset:
  1583                           	opt stack 0
  1584  00003B                     	ds	1
  1585  00003C                     OutSeg@cur:
  1586                           	opt stack 0
  1587  00003C                     	ds	1
  1588  00003D                     _I2C1T:
  1589                           	opt stack 0
  1590  00003D                     	ds	6
  1591                           tblptru	equ	0xFF8
  1592                           tblptrh	equ	0xFF7
  1593                           tblptrl	equ	0xFF6
  1594                           tablat	equ	0xFF5
  1595                           postinc0	equ	0xFEE
  1596                           wreg	equ	0xFE8
  1597                           postdec1	equ	0xFE5
  1598                           fsr1h	equ	0xFE2
  1599                           fsr1l	equ	0xFE1
  1600                           
  1601                           	psect	dataCOMRAM
  1602  000043                     __pdataCOMRAM:
  1603                           	opt stack 0
  1604  000043                     _gCursor:
  1605                           	opt stack 0
  1606  000043                     	ds	4
  1607  000047                     _numReadings:
  1608                           	opt stack 0
  1609  000047                     	ds	2
  1610  000049                     _top:
  1611                           	opt stack 0
  1612  000049                     	ds	2
  1613  00004B                     _Bus_State:
  1614                           	opt stack 0
  1615  00004B                     	ds	1
  1616  00004C                     	ds	1
  1617  00004D                     	ds	1
  1618  00004E                     	ds	1
  1619  00004F                     _l:
  1620                           	opt stack 0
  1621  00004F                     	ds	1
  1622  000050                     _w:
  1623                           	opt stack 0
  1624  000050                     	ds	1
  1625                           tblptru	equ	0xFF8
  1626                           tblptrh	equ	0xFF7
  1627                           tblptrl	equ	0xFF6
  1628                           tablat	equ	0xFF5
  1629                           postinc0	equ	0xFEE
  1630                           wreg	equ	0xFE8
  1631                           postdec1	equ	0xFE5
  1632                           fsr1h	equ	0xFE2
  1633                           fsr1l	equ	0xFE1
  1634                           
  1635                           	psect	bssBANK0
  1636  0000DD                     __pbssBANK0:
  1637                           	opt stack 0
  1638  0000DD                     _lQueue:
  1639                           	opt stack 0
  1640  0000DD                     	ds	3
  1641  0000E0                     _Y_Pos:
  1642                           	opt stack 0
  1643  0000E0                     	ds	2
  1644  0000E2                     _X_Pos:
  1645                           	opt stack 0
  1646  0000E2                     	ds	2
  1647  0000E4                     _average:
  1648                           	opt stack 0
  1649  0000E4                     	ds	2
  1650  0000E6                     _readIndex:
  1651                           	opt stack 0
  1652  0000E6                     	ds	2
  1653  0000E8                     _pShiftVal:
  1654                           	opt stack 0
  1655  0000E8                     	ds	2
  1656  0000EA                     _lMotor:
  1657                           	opt stack 0
  1658  0000EA                     	ds	2
  1659  0000EC                     _lCurrent:
  1660                           	opt stack 0
  1661  0000EC                     	ds	2
  1662  0000EE                     Event_TestButton@j:
  1663                           	opt stack 0
  1664  0000EE                     	ds	1
  1665  0000EF                     Timer2_Init@PRE:
  1666                           	opt stack 0
  1667  0000EF                     	ds	1
  1668  0000F0                     Timer2_Init@INDEX:
  1669                           	opt stack 0
  1670  0000F0                     	ds	1
  1671  0000F1                     _ADC_Initialised:
  1672                           	opt stack 0
  1673  0000F1                     	ds	1
  1674  0000F2                     _lBufferY:
  1675                           	opt stack 0
  1676  0000F2                     	ds	1
  1677  0000F3                     _lBufferX:
  1678                           	opt stack 0
  1679  0000F3                     	ds	1
  1680  0000F4                     _clearall:
  1681                           	opt stack 0
  1682  0000F4                     	ds	1
  1683                           tblptru	equ	0xFF8
  1684                           tblptrh	equ	0xFF7
  1685                           tblptrl	equ	0xFF6
  1686                           tablat	equ	0xFF5
  1687                           postinc0	equ	0xFEE
  1688                           wreg	equ	0xFE8
  1689                           postdec1	equ	0xFE5
  1690                           fsr1h	equ	0xFE2
  1691                           fsr1l	equ	0xFE1
  1692                           
  1693                           	psect	dataBANK0
  1694  0000F5                     __pdataBANK0:
  1695                           	opt stack 0
  1696  0000F5                     _change:
  1697                           	opt stack 0
  1698  0000F5                     	ds	1
  1699                           tblptru	equ	0xFF8
  1700                           tblptrh	equ	0xFF7
  1701                           tblptrl	equ	0xFF6
  1702                           tablat	equ	0xFF5
  1703                           postinc0	equ	0xFEE
  1704                           wreg	equ	0xFE8
  1705                           postdec1	equ	0xFE5
  1706                           fsr1h	equ	0xFE2
  1707                           fsr1l	equ	0xFE1
  1708                           
  1709                           	psect	bssBANK1
  1710  000100                     __pbssBANK1:
  1711                           	opt stack 0
  1712  000100                     Timer2_Init@DIV:
  1713                           	opt stack 0
  1714  000100                     	ds	4
  1715  000104                     Timer0_Init@DIV:
  1716                           	opt stack 0
  1717  000104                     	ds	4
  1718  000108                     _gISR:
  1719                           	opt stack 0
  1720  000108                     	ds	3
  1721  00010B                     _lStepFunction:
  1722                           	opt stack 0
  1723  00010B                     	ds	3
  1724  00010E                     _I2C2_More:
  1725                           	opt stack 0
  1726  00010E                     	ds	3
  1727  000111                     _I2C1_More:
  1728                           	opt stack 0
  1729  000111                     	ds	3
  1730  000114                     _I2C2_Done:
  1731                           	opt stack 0
  1732  000114                     	ds	3
  1733  000117                     _I2C1_Done:
  1734                           	opt stack 0
  1735  000117                     	ds	3
  1736  00011A                     _errno:
  1737                           	opt stack 0
  1738  00011A                     	ds	2
  1739  00011C                     _test:
  1740                           	opt stack 0
  1741  00011C                     	ds	2
  1742  00011E                     _timercount:
  1743                           	opt stack 0
  1744  00011E                     	ds	2
  1745  000120                     _Sensor_Observe_Fin:
  1746                           	opt stack 0
  1747  000120                     	ds	2
  1748  000122                     _CW_Count:
  1749                           	opt stack 0
  1750  000122                     	ds	2
  1751  000124                     _CCW_Count:
  1752                           	opt stack 0
  1753  000124                     	ds	2
  1754  000126                     _count:
  1755                           	opt stack 0
  1756  000126                     	ds	2
  1757  000128                     _Close_Pos:
  1758                           	opt stack 0
  1759  000128                     	ds	2
  1760  00012A                     _ADC_Reading:
  1761                           	opt stack 0
  1762  00012A                     	ds	2
  1763  00012C                     _BumpState:
  1764                           	opt stack 0
  1765  00012C                     	ds	2
  1766  00012E                     _mod:
  1767                           	opt stack 0
  1768  00012E                     	ds	2
  1769  000130                     _Square_Dist:
  1770                           	opt stack 0
  1771  000130                     	ds	2
  1772  000132                     _T_VAR:
  1773                           	opt stack 0
  1774  000132                     	ds	2
  1775  000134                     _x:
  1776                           	opt stack 0
  1777  000134                     	ds	2
  1778  000136                     _thisReading:
  1779                           	opt stack 0
  1780  000136                     	ds	2
  1781  000138                     _Steps:
  1782                           	opt stack 0
  1783  000138                     	ds	2
  1784  00013A                     _mode:
  1785                           	opt stack 0
  1786  00013A                     	ds	2
  1787  00013C                     _Current_Dist2:
  1788                           	opt stack 0
  1789  00013C                     	ds	2
  1790  00013E                     _Current_Dist1:
  1791                           	opt stack 0
  1792  00013E                     	ds	2
  1793  000140                     _Current_Dist:
  1794                           	opt stack 0
  1795  000140                     	ds	2
  1796  000142                     SPI_Send9@dat:
  1797                           	opt stack 0
  1798  000142                     	ds	2
  1799  000144                     _Cliff_Left:
  1800                           	opt stack 0
  1801  000144                     	ds	1
  1802  000145                     _Cliff_Right:
  1803                           	opt stack 0
  1804  000145                     	ds	1
  1805  000146                     _Cliff_FLeft:
  1806                           	opt stack 0
  1807  000146                     	ds	1
  1808  000147                     _Cliff_FRight:
  1809                           	opt stack 0
  1810  000147                     	ds	1
  1811  000148                     _BumpSensor:
  1812                           	opt stack 0
  1813  000148                     	ds	1
  1814  000149                     _u:
  1815                           	opt stack 0
  1816  000149                     	ds	1
  1817  00014A                     _j:
  1818                           	opt stack 0
  1819  00014A                     	ds	1
  1820  00014B                     _i:
  1821                           	opt stack 0
  1822  00014B                     	ds	1
  1823  00014C                     _HMIBoard:
  1824                           	opt stack 0
  1825  00014C                     	ds	58
  1826  000186                     _SPI2:
  1827                           	opt stack 0
  1828  000186                     	ds	11
  1829  000191                     _PortE:
  1830                           	opt stack 0
  1831  000191                     	ds	10
  1832  00019B                     _PortD:
  1833                           	opt stack 0
  1834  00019B                     	ds	10
  1835  0001A5                     _PortB:
  1836                           	opt stack 0
  1837  0001A5                     	ds	10
  1838  0001AF                     _PortC:
  1839                           	opt stack 0
  1840  0001AF                     	ds	10
  1841  0001B9                     _PortF:
  1842                           	opt stack 0
  1843  0001B9                     	ds	10
  1844  0001C3                     _I2C2T:
  1845                           	opt stack 0
  1846  0001C3                     	ds	6
  1847  0001C9                     _ADC_AN3:
  1848                           	opt stack 0
  1849  0001C9                     	ds	5
  1850  0001CE                     _ADC_AN2:
  1851                           	opt stack 0
  1852  0001CE                     	ds	5
  1853  0001D3                     _ADC_AN1:
  1854                           	opt stack 0
  1855  0001D3                     	ds	5
  1856  0001D8                     _ADC_AN0:
  1857                           	opt stack 0
  1858  0001D8                     	ds	5
  1859  0001DD                     LCD_DrawRectangle@p4:
  1860                           	opt stack 0
  1861  0001DD                     	ds	4
  1862  0001E1                     LCD_DrawRectangle@p2:
  1863                           	opt stack 0
  1864  0001E1                     	ds	4
  1865                           tblptru	equ	0xFF8
  1866                           tblptrh	equ	0xFF7
  1867                           tblptrl	equ	0xFF6
  1868                           tablat	equ	0xFF5
  1869                           postinc0	equ	0xFEE
  1870                           wreg	equ	0xFE8
  1871                           postdec1	equ	0xFE5
  1872                           fsr1h	equ	0xFE2
  1873                           fsr1l	equ	0xFE1
  1874                           
  1875                           	psect	dataBANK1
  1876  0001E5                     __pdataBANK1:
  1877                           	opt stack 0
  1878  0001E5                     Console_Render@F6956:
  1879                           	opt stack 0
  1880  0001E5                     	ds	4
  1881  0001E9                     _gLineSize:
  1882                           	opt stack 0
  1883  0001E9                     	ds	4
  1884  0001ED                     _gCharSize:
  1885                           	opt stack 0
  1886  0001ED                     	ds	4
  1887  0001F1                     _countOff:
  1888                           	opt stack 0
  1889  0001F1                     	ds	2
  1890  0001F3                     _countOn:
  1891                           	opt stack 0
  1892  0001F3                     	ds	2
  1893  0001F5                     _Low_Sensor:
  1894                           	opt stack 0
  1895  0001F5                     	ds	2
  1896  0001F7                     _Current_Direction:
  1897                           	opt stack 0
  1898  0001F7                     	ds	2
  1899  0001F9                     _gForecolour:
  1900                           	opt stack 0
  1901  0001F9                     	ds	2
  1902                           tblptru	equ	0xFF8
  1903                           tblptrh	equ	0xFF7
  1904                           tblptrl	equ	0xFF6
  1905                           tablat	equ	0xFF5
  1906                           postinc0	equ	0xFEE
  1907                           wreg	equ	0xFE8
  1908                           postdec1	equ	0xFE5
  1909                           fsr1h	equ	0xFE2
  1910                           fsr1l	equ	0xFE1
  1911                           
  1912                           	psect	bssBANK2
  1913  000200                     __pbssBANK2:
  1914                           	opt stack 0
  1915  000200                     Init_Pos_Array@F7088:
  1916                           	opt stack 0
  1917  000200                     	ds	40
  1918  000228                     _stack:
  1919                           	opt stack 0
  1920  000228                     	ds	40
  1921  000250                     _lCBuffer:
  1922                           	opt stack 0
  1923  000250                     	ds	30
  1924  00026E                     _readings:
  1925                           	opt stack 0
  1926  00026E                     	ds	20
  1927  000282                     Console_MakeField@Fill:
  1928                           	opt stack 0
  1929  000282                     	ds	70
  1930  0002C8                     _SPI1:
  1931                           	opt stack 0
  1932  0002C8                     	ds	11
  1933  0002D3                     _DIPSwitch:
  1934                           	opt stack 0
  1935  0002D3                     	ds	10
  1936  0002DD                     _TestButton:
  1937                           	opt stack 0
  1938  0002DD                     	ds	10
  1939  0002E7                     _PortG:
  1940                           	opt stack 0
  1941  0002E7                     	ds	10
  1942  0002F1                     _PortA:
  1943                           	opt stack 0
  1944  0002F1                     	ds	10
  1945                           tblptru	equ	0xFF8
  1946                           tblptrh	equ	0xFF7
  1947                           tblptrl	equ	0xFF6
  1948                           tablat	equ	0xFF5
  1949                           postinc0	equ	0xFEE
  1950                           wreg	equ	0xFE8
  1951                           postdec1	equ	0xFE5
  1952                           fsr1h	equ	0xFE2
  1953                           fsr1l	equ	0xFE1
  1954                           
  1955                           	psect	bssBIGRAM
  1956  000318                     __pbssBIGRAM:
  1957                           	opt stack 0
  1958  000318                     _lBuffer:
  1959                           	opt stack 0
  1960  000318                     	ds	300
  1961                           tblptru	equ	0xFF8
  1962                           tblptrh	equ	0xFF7
  1963                           tblptrl	equ	0xFF6
  1964                           tablat	equ	0xFF5
  1965                           postinc0	equ	0xFEE
  1966                           wreg	equ	0xFE8
  1967                           postdec1	equ	0xFE5
  1968                           fsr1h	equ	0xFE2
  1969                           fsr1l	equ	0xFE1
  1970                           
  1971                           	psect	cstackBANK3
  1972  000300                     __pcstackBANK3:
  1973                           	opt stack 0
  1974  000300                     _ADCAverage$15798:
  1975                           	opt stack 0
  1976                           
  1977                           ; 4 bytes @ 0x0
  1978  000300                     	ds	4
  1979  000304                     _ADCAverage$15799:
  1980                           	opt stack 0
  1981                           
  1982                           ; 4 bytes @ 0x4
  1983  000304                     	ds	4
  1984  000308                     _ADCAverage$15800:
  1985                           	opt stack 0
  1986                           
  1987                           ; 4 bytes @ 0x8
  1988  000308                     	ds	4
  1989  00030C                     _ADCAverage$15801:
  1990                           	opt stack 0
  1991                           
  1992                           ; 4 bytes @ 0xC
  1993  00030C                     	ds	4
  1994  000310                     _ADCAverage$15802:
  1995                           	opt stack 0
  1996                           
  1997                           ; 4 bytes @ 0x10
  1998  000310                     	ds	4
  1999  000314                     _ADCAverage$15803:
  2000                           	opt stack 0
  2001                           
  2002                           ; 4 bytes @ 0x14
  2003  000314                     	ds	4
  2004                           tblptru	equ	0xFF8
  2005                           tblptrh	equ	0xFF7
  2006                           tblptrl	equ	0xFF6
  2007                           tablat	equ	0xFF5
  2008                           postinc0	equ	0xFEE
  2009                           wreg	equ	0xFE8
  2010                           postdec1	equ	0xFE5
  2011                           fsr1h	equ	0xFE2
  2012                           fsr1l	equ	0xFE1
  2013                           
  2014                           	psect	cstackBANK0
  2015  000060                     __pcstackBANK0:
  2016                           	opt stack 0
  2017  000060                     ??_Console_ClearCursor:
  2018  000060                     ??_InitADC:
  2019  000060                     ??_Console_Init:
  2020  000060                     ??_Console_NewLine:
  2021  000060                     ??_Console_FormFeed:
  2022  000060                     ??_HMI_SetButton:
  2023  000060                     ?_GetPortProperties:
  2024                           	opt stack 0
  2025  000060                     ?_GetPortPORT:
  2026                           	opt stack 0
  2027  000060                     ?_GetPortTRIS:
  2028                           	opt stack 0
  2029  000060                     ?_FunctReadADC:
  2030                           	opt stack 0
  2031  000060                     ?___wmul:
  2032                           	opt stack 0
  2033  000060                     ?___awdiv:
  2034                           	opt stack 0
  2035  000060                     ?___lwdiv:
  2036                           	opt stack 0
  2037  000060                     ?___fldiv:
  2038                           	opt stack 0
  2039  000060                     ?_frexp:
  2040                           	opt stack 0
  2041  000060                     ?___lldiv:
  2042                           	opt stack 0
  2043  000060                     ?___xxtofl:
  2044                           	opt stack 0
  2045  000060                     Mode_Set@pMode:
  2046                           	opt stack 0
  2047  000060                     ToSegment@pCHR:
  2048                           	opt stack 0
  2049  000060                     HMI_SetBar@pValue:
  2050                           	opt stack 0
  2051  000060                     eusartSend@sendChar:
  2052                           	opt stack 0
  2053  000060                     Port_GetPin@pInput:
  2054                           	opt stack 0
  2055  000060                     Port_GetQuad@pInput:
  2056                           	opt stack 0
  2057  000060                     SPI_DisableISR@pInput:
  2058                           	opt stack 0
  2059  000060                     SPI_DCS@pInput:
  2060                           	opt stack 0
  2061  000060                     SPI_Send@pInput:
  2062                           	opt stack 0
  2063  000060                     Byte_SetBit@pInput:
  2064                           	opt stack 0
  2065  000060                     Byte_GetBit@pInput:
  2066                           	opt stack 0
  2067  000060                     Byte_SetZone@pInput:
  2068                           	opt stack 0
  2069  000060                     Byte_GetZone@pInput:
  2070                           	opt stack 0
  2071  000060                     Byte_SetByte@pInput:
  2072                           	opt stack 0
  2073  000060                     delay_ms@ms:
  2074                           	opt stack 0
  2075  000060                     delay_us@us:
  2076                           	opt stack 0
  2077  000060                     reverse@input:
  2078                           	opt stack 0
  2079  000060                     FunctReadADC@channel:
  2080                           	opt stack 0
  2081  000060                     ___wmul@multiplier:
  2082                           	opt stack 0
  2083  000060                     ___awdiv@dividend:
  2084                           	opt stack 0
  2085  000060                     ___lwdiv@dividend:
  2086                           	opt stack 0
  2087  000060                     MXK_Queue@pCallback:
  2088                           	opt stack 0
  2089  000060                     ___flge@ff1:
  2090                           	opt stack 0
  2091  000060                     ___lldiv@dividend:
  2092                           	opt stack 0
  2093  000060                     ___fldiv@b:
  2094                           	opt stack 0
  2095  000060                     ___xxtofl@val:
  2096                           	opt stack 0
  2097  000060                     frexp@value:
  2098                           	opt stack 0
  2099                           
  2100                           ; 4 bytes @ 0x0
  2101  000060                     	ds	1
  2102  000061                     ?_UpdateDistance:
  2103                           	opt stack 0
  2104  000061                     ?_Get_VirtualWall_State:
  2105                           	opt stack 0
  2106  000061                     HMI_SetSegments@pString:
  2107                           	opt stack 0
  2108  000061                     Drive@SpeedL:
  2109                           	opt stack 0
  2110  000061                     Turn@Angle:
  2111                           	opt stack 0
  2112                           
  2113                           ; 2 bytes @ 0x1
  2114  000061                     	ds	1
  2115  000062                     GetPortProperties@pInput:
  2116                           	opt stack 0
  2117  000062                     GetPortPORT@pInput:
  2118                           	opt stack 0
  2119  000062                     GetPortTRIS@pInput:
  2120                           	opt stack 0
  2121  000062                     Port_GetPin@pPin:
  2122                           	opt stack 0
  2123  000062                     Port_GetQuad@pQuad:
  2124                           	opt stack 0
  2125  000062                     SPI_Send@pData:
  2126                           	opt stack 0
  2127  000062                     Byte_SetBit@pBit:
  2128                           	opt stack 0
  2129  000062                     Byte_GetBit@pBit:
  2130                           	opt stack 0
  2131  000062                     Byte_SetZone@pMax:
  2132                           	opt stack 0
  2133  000062                     Byte_GetZone@pMax:
  2134                           	opt stack 0
  2135  000062                     Byte_SetByte@pValue:
  2136                           	opt stack 0
  2137  000062                     Console_Init@x:
  2138                           	opt stack 0
  2139  000062                     Console_FormFeed@x:
  2140                           	opt stack 0
  2141  000062                     reverse@length:
  2142                           	opt stack 0
  2143  000062                     ___wmul@multiplicand:
  2144                           	opt stack 0
  2145  000062                     ___awdiv@divisor:
  2146                           	opt stack 0
  2147  000062                     ___lwdiv@divisor:
  2148                           	opt stack 0
  2149  000062                     delay_ms@u:
  2150                           	opt stack 0
  2151  000062                     delay_us@u:
  2152                           	opt stack 0
  2153  000062                     HMI_SetButton@reindex:
  2154                           	opt stack 0
  2155                           
  2156                           ; 4 bytes @ 0x2
  2157  000062                     	ds	1
  2158  000063                     ??_UpdateDistance:
  2159  000063                     ??_Port_GetPin:
  2160  000063                     ??_Port_GetQuad:
  2161  000063                     ??_Byte_GetBit:
  2162  000063                     ??_Get_VirtualWall_State:
  2163  000063                     LCD_Write@mode:
  2164                           	opt stack 0
  2165  000063                     Byte_SetBit@pValue:
  2166                           	opt stack 0
  2167  000063                     Byte_SetZone@pChunk:
  2168                           	opt stack 0
  2169  000063                     Byte_GetZone@pChunk:
  2170                           	opt stack 0
  2171  000063                     Console_Init@y:
  2172                           	opt stack 0
  2173  000063                     Console_FormFeed@y:
  2174                           	opt stack 0
  2175  000063                     OutSeg@pSegment:
  2176                           	opt stack 0
  2177  000063                     Drive@SpeedR:
  2178                           	opt stack 0
  2179  000063                     Turn@Speed:
  2180                           	opt stack 0
  2181                           
  2182                           ; 2 bytes @ 0x3
  2183  000063                     	ds	1
  2184  000064                     ??_Byte_SetBit:
  2185  000064                     ??_Console_IncrementCursor:
  2186  000064                     ??_OutSeg:
  2187  000064                     ??___xxtofl:
  2188  000064                     LCD_Write@value:
  2189                           	opt stack 0
  2190  000064                     Byte_GetBit@Output:
  2191                           	opt stack 0
  2192  000064                     Byte_SetZone@pChunkSize:
  2193                           	opt stack 0
  2194  000064                     Byte_GetZone@pChunkSize:
  2195                           	opt stack 0
  2196  000064                     reverse@tempVar:
  2197                           	opt stack 0
  2198  000064                     ___awdiv@counter:
  2199                           	opt stack 0
  2200  000064                     ___lwdiv@counter:
  2201                           	opt stack 0
  2202  000064                     HMI_SetSegments@in:
  2203                           	opt stack 0
  2204  000064                     Get_VirtualWall_State@Vitual_Wall_Sensor:
  2205                           	opt stack 0
  2206  000064                     ___wmul@product:
  2207                           	opt stack 0
  2208  000064                     frexp@eptr:
  2209                           	opt stack 0
  2210  000064                     ___flge@ff2:
  2211                           	opt stack 0
  2212  000064                     ___lldiv@divisor:
  2213                           	opt stack 0
  2214  000064                     ___fldiv@a:
  2215                           	opt stack 0
  2216                           
  2217                           ; 4 bytes @ 0x4
  2218  000064                     	ds	1
  2219  000065                     ??_Byte_GetZone:
  2220  000065                     ?_Console_MakeField:
  2221                           	opt stack 0
  2222  000065                     Set_Addr_Window@ys:
  2223                           	opt stack 0
  2224  000065                     Set_Rotation@m:
  2225                           	opt stack 0
  2226  000065                     Port_GetPin@Output:
  2227                           	opt stack 0
  2228  000065                     Port_GetQuad@Output:
  2229                           	opt stack 0
  2230  000065                     Byte_SetZone@pValue:
  2231                           	opt stack 0
  2232  000065                     ___awdiv@sign:
  2233                           	opt stack 0
  2234  000065                     LCD_Word_Write@value:
  2235                           	opt stack 0
  2236  000065                     reverse@iterator:
  2237                           	opt stack 0
  2238  000065                     Turn@Dir:
  2239                           	opt stack 0
  2240  000065                     ___lwdiv@quotient:
  2241                           	opt stack 0
  2242                           
  2243                           ; 2 bytes @ 0x5
  2244  000065                     	ds	1
  2245  000066                     ??_Create_Maze:
  2246  000066                     ??_frexp:
  2247  000066                     ??_Byte_SetZone:
  2248  000066                     Set_Addr_Window@xe:
  2249                           	opt stack 0
  2250  000066                     Set_Rotation@rotation:
  2251                           	opt stack 0
  2252  000066                     Byte_GetZone@MASK:
  2253                           	opt stack 0
  2254  000066                     OutSeg@pInput:
  2255                           	opt stack 0
  2256  000066                     HMI_SetButton@pValue:
  2257                           	opt stack 0
  2258  000066                     MXK_BlockSwitchTo@CUR:
  2259                           	opt stack 0
  2260  000066                     MXK_SwitchTo@CUR:
  2261                           	opt stack 0
  2262  000066                     ___awdiv@quotient:
  2263                           	opt stack 0
  2264                           
  2265                           ; 2 bytes @ 0x6
  2266  000066                     	ds	1
  2267  000067                     ??_Console_MakeField:
  2268  000067                     ?___lwmod:
  2269                           	opt stack 0
  2270  000067                     Set_Addr_Window@ye:
  2271                           	opt stack 0
  2272  000067                     Byte_GetZone@Offset:
  2273                           	opt stack 0
  2274  000067                     OutSeg@out:
  2275                           	opt stack 0
  2276  000067                     HMI_SetButton@v:
  2277                           	opt stack 0
  2278  000067                     MXK_BlockSwitchTo@pModule:
  2279                           	opt stack 0
  2280  000067                     MXK_SwitchTo@pModule:
  2281                           	opt stack 0
  2282  000067                     Turn@C_Angle:
  2283                           	opt stack 0
  2284  000067                     ___lwmod@dividend:
  2285                           	opt stack 0
  2286                           
  2287                           ; 2 bytes @ 0x7
  2288  000067                     	ds	1
  2289  000068                     ??___fldiv:
  2290  000068                     ??_Console_Tab:
  2291  000068                     ??___flge:
  2292  000068                     Set_Addr_Window@xs:
  2293                           	opt stack 0
  2294  000068                     Byte_GetZone@Output:
  2295                           	opt stack 0
  2296  000068                     ___xxtofl@sign:
  2297                           	opt stack 0
  2298  000068                     HMI_Render@a:
  2299                           	opt stack 0
  2300  000068                     ___lldiv@quotient:
  2301                           	opt stack 0
  2302                           
  2303                           ; 4 bytes @ 0x8
  2304  000068                     	ds	1
  2305  000069                     Byte_SetZone@Offset:
  2306                           	opt stack 0
  2307  000069                     ___xxtofl@exp:
  2308                           	opt stack 0
  2309  000069                     LCD_Fill@pColour:
  2310                           	opt stack 0
  2311  000069                     LCD_FillRectangle@pColour:
  2312                           	opt stack 0
  2313  000069                     Byte_GetPair@pInput:
  2314                           	opt stack 0
  2315  000069                     Console_MakeField@Index:
  2316                           	opt stack 0
  2317  000069                     Turn@Rad:
  2318                           	opt stack 0
  2319  000069                     ___lwmod@divisor:
  2320                           	opt stack 0
  2321                           
  2322                           ; 2 bytes @ 0x9
  2323  000069                     	ds	1
  2324  00006A                     Byte_SetZone@MASK:
  2325                           	opt stack 0
  2326  00006A                     ___xxtofl@arg:
  2327                           	opt stack 0
  2328  00006A                     Create_Maze@maze:
  2329                           	opt stack 0
  2330                           
  2331                           ; 80 bytes @ 0xA
  2332  00006A                     	ds	1
  2333  00006B                     LCD_Fill@i:
  2334                           	opt stack 0
  2335  00006B                     Byte_GetPair@pPair:
  2336                           	opt stack 0
  2337  00006B                     Console_MakeField@pInput:
  2338                           	opt stack 0
  2339  00006B                     ___lwmod@counter:
  2340                           	opt stack 0
  2341  00006B                     Byte_SetPair@pInput:
  2342                           	opt stack 0
  2343  00006B                     Byte_SetQuad@pInput:
  2344                           	opt stack 0
  2345  00006B                     LCD_FillRectangle@pPoint:
  2346                           	opt stack 0
  2347                           
  2348                           ; 4 bytes @ 0xB
  2349  00006B                     	ds	1
  2350  00006C                     LCD_Fill@j:
  2351                           	opt stack 0
  2352  00006C                     ___lldiv@counter:
  2353                           	opt stack 0
  2354  00006C                     ___fldiv@sign:
  2355                           	opt stack 0
  2356  00006C                     Word_GetPair@pInput:
  2357                           	opt stack 0
  2358  00006C                     itos@input:
  2359                           	opt stack 0
  2360  00006C                     Console_MakeField@Column:
  2361                           	opt stack 0
  2362                           
  2363                           ; 2 bytes @ 0xC
  2364  00006C                     	ds	1
  2365  00006D                     Byte_SetPair@pPair:
  2366                           	opt stack 0
  2367  00006D                     Byte_SetQuad@pQuad:
  2368                           	opt stack 0
  2369  00006D                     Console_Tab@t:
  2370                           	opt stack 0
  2371  00006D                     Timer2_Init@pFrequency:
  2372                           	opt stack 0
  2373  00006D                     ___fldiv@rem:
  2374                           	opt stack 0
  2375                           
  2376                           ; 4 bytes @ 0xD
  2377  00006D                     	ds	1
  2378  00006E                     ?___flmul:
  2379                           	opt stack 0
  2380  00006E                     Byte_SetPair@pValue:
  2381                           	opt stack 0
  2382  00006E                     Byte_SetQuad@pValue:
  2383                           	opt stack 0
  2384  00006E                     Word_GetPair@pPair:
  2385                           	opt stack 0
  2386  00006E                     Console_Tab@i:
  2387                           	opt stack 0
  2388  00006E                     itos@destination:
  2389                           	opt stack 0
  2390  00006E                     _Console_MakeField$10974:
  2391                           	opt stack 0
  2392  00006E                     ___flmul@b:
  2393                           	opt stack 0
  2394                           
  2395                           ; 4 bytes @ 0xE
  2396  00006E                     	ds	1
  2397  00006F                     Console_Tab@c:
  2398                           	opt stack 0
  2399  00006F                     Port_SetPin@pInput:
  2400                           	opt stack 0
  2401  00006F                     Port_Set@pInput:
  2402                           	opt stack 0
  2403  00006F                     SPI_MinSpeed@pInput:
  2404                           	opt stack 0
  2405  00006F                     SPI_MaxSpeed@pInput:
  2406                           	opt stack 0
  2407  00006F                     Word_SetPair@pInput:
  2408                           	opt stack 0
  2409  00006F                     PortProperty_Valid@pInput:
  2410                           	opt stack 0
  2411  00006F                     LCD_FillRectangle@pSize:
  2412                           	opt stack 0
  2413                           
  2414                           ; 4 bytes @ 0xF
  2415  00006F                     	ds	1
  2416  000070                     ??_Console_PrintChar:
  2417  000070                     Console_MakeField@x:
  2418                           	opt stack 0
  2419  000070                     itos@Data:
  2420                           	opt stack 0
  2421                           
  2422                           ; 2 bytes @ 0x10
  2423  000070                     	ds	1
  2424  000071                     ??_Timer2_Init:
  2425  000071                     Port_SetPin@pPin:
  2426                           	opt stack 0
  2427  000071                     Port_Set@pValue:
  2428                           	opt stack 0
  2429  000071                     Word_SetPair@pPair:
  2430                           	opt stack 0
  2431  000071                     PortProperty_Valid@pPinDrive:
  2432                           	opt stack 0
  2433  000071                     Console_MakeField@y:
  2434                           	opt stack 0
  2435  000071                     ___fldiv@new_exp:
  2436                           	opt stack 0
  2437                           
  2438                           ; 2 bytes @ 0x11
  2439  000071                     	ds	1
  2440  000072                     ??_Port_Set:
  2441  000072                     Port_SetPin@pValue:
  2442                           	opt stack 0
  2443  000072                     Word_SetPair@pValue:
  2444                           	opt stack 0
  2445  000072                     PortProperty_Valid@pPin:
  2446                           	opt stack 0
  2447  000072                     LCD_DrawField@pField:
  2448                           	opt stack 0
  2449  000072                     itos@Length:
  2450                           	opt stack 0
  2451  000072                     Timer2_Init@RDIV:
  2452                           	opt stack 0
  2453  000072                     ___flmul@a:
  2454                           	opt stack 0
  2455                           
  2456                           ; 4 bytes @ 0x12
  2457  000072                     	ds	1
  2458  000073                     ??_PortProperty_Valid:
  2459  000073                     ??_LCD_FillRectangle:
  2460  000073                     Port_SetPin@Type:
  2461                           	opt stack 0
  2462  000073                     Console_PrintChar@pInput:
  2463                           	opt stack 0
  2464  000073                     ___fldiv@grs:
  2465                           	opt stack 0
  2466                           
  2467                           ; 4 bytes @ 0x13
  2468  000073                     	ds	1
  2469  000074                     LED_Set@pValue:
  2470                           	opt stack 0
  2471  000074                     putch@c:
  2472                           	opt stack 0
  2473  000074                     Port_TogglePin@pInput:
  2474                           	opt stack 0
  2475  000074                     itos@Out:
  2476                           	opt stack 0
  2477  000074                     LCD_DrawField@pPoint:
  2478                           	opt stack 0
  2479                           
  2480                           ; 4 bytes @ 0x14
  2481  000074                     	ds	1
  2482  000075                     ?_printf:
  2483                           	opt stack 0
  2484  000075                     LCD_FillRectangle@i:
  2485                           	opt stack 0
  2486  000075                     LED_Set@pLED:
  2487                           	opt stack 0
  2488  000075                     printf@f:
  2489                           	opt stack 0
  2490  000075                     PortProperty_Valid@Errors:
  2491                           	opt stack 0
  2492                           
  2493                           ; 16 bytes @ 0x15
  2494  000075                     	ds	1
  2495  000076                     ??___flmul:
  2496  000076                     LCD_FillRectangle@j:
  2497                           	opt stack 0
  2498  000076                     Port_TogglePin@pPin:
  2499                           	opt stack 0
  2500  000076                     HMI_SetNumber@pInput:
  2501                           	opt stack 0
  2502  000076                     Timer2_Init@pCPUClock:
  2503                           	opt stack 0
  2504                           
  2505                           ; 4 bytes @ 0x16
  2506  000076                     	ds	1
  2507  000077                     Port_TogglePin@Value:
  2508                           	opt stack 0
  2509  000077                     ___fldiv@bexp:
  2510                           	opt stack 0
  2511                           
  2512                           ; 1 bytes @ 0x17
  2513  000077                     	ds	1
  2514  000078                     LED_Toggle@pLED:
  2515                           	opt stack 0
  2516  000078                     ___fldiv@aexp:
  2517                           	opt stack 0
  2518  000078                     LCD_DrawField@pSize:
  2519                           	opt stack 0
  2520                           
  2521                           ; 4 bytes @ 0x18
  2522  000078                     	ds	1
  2523  000079                     Event_DIPSwitch@pState:
  2524                           	opt stack 0
  2525  000079                     Event_TestButton@pState:
  2526                           	opt stack 0
  2527                           
  2528                           ; 1 bytes @ 0x19
  2529  000079                     	ds	1
  2530  00007A                     Event_DIPSwitch@Bar:
  2531                           	opt stack 0
  2532  00007A                     ___flmul@sign:
  2533                           	opt stack 0
  2534  00007A                     Timer2_Init@DIVIDE:
  2535                           	opt stack 0
  2536                           
  2537                           ; 4 bytes @ 0x1A
  2538  00007A                     	ds	1
  2539  00007B                     ??_printf:
  2540  00007B                     ___flmul@aexp:
  2541                           	opt stack 0
  2542  00007B                     Button_Poll@pButton:
  2543                           	opt stack 0
  2544                           
  2545                           ; 2 bytes @ 0x1B
  2546  00007B                     	ds	1
  2547  00007C                     ??_LCD_DrawField:
  2548  00007C                     printf@flag:
  2549                           	opt stack 0
  2550  00007C                     ___flmul@grs:
  2551                           	opt stack 0
  2552                           
  2553                           ; 4 bytes @ 0x1C
  2554  00007C                     	ds	1
  2555  00007D                     Button_Poll@pIncrement:
  2556                           	opt stack 0
  2557  00007D                     printf@prec:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0x1D
  2561  00007D                     	ds	1
  2562  00007E                     ??_Button_Poll:
  2563  00007E                     LCD_DrawField@count:
  2564                           	opt stack 0
  2565  00007E                     printf@ap:
  2566                           	opt stack 0
  2567                           
  2568                           ; 2 bytes @ 0x1E
  2569  00007E                     	ds	2
  2570  000080                     LCD_DrawField@xmax:
  2571                           	opt stack 0
  2572  000080                     ___flmul@bexp:
  2573                           	opt stack 0
  2574  000080                     printf@val:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x20
  2578  000080                     	ds	1
  2579  000081                     LCD_DrawField@ymax:
  2580                           	opt stack 0
  2581  000081                     ___flmul@prod:
  2582                           	opt stack 0
  2583                           
  2584                           ; 4 bytes @ 0x21
  2585  000081                     	ds	1
  2586  000082                     LCD_DrawField@i:
  2587                           	opt stack 0
  2588  000082                     printf@c:
  2589                           	opt stack 0
  2590  000082                     Port_Set@TypeRequired:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x22
  2594  000082                     	ds	1
  2595  000083                     ??_Console_Render:
  2596  000083                     Button_Poll@Pin:
  2597                           	opt stack 0
  2598                           
  2599                           ; 1 bytes @ 0x23
  2600  000083                     	ds	1
  2601  000084                     Port_Set@TypeActual:
  2602                           	opt stack 0
  2603                           
  2604                           ; 2 bytes @ 0x24
  2605  000084                     	ds	1
  2606  000085                     PortProperty_Valid@Pair:
  2607                           	opt stack 0
  2608  000085                     Console_Render@temp:
  2609                           	opt stack 0
  2610  000085                     ___flmul@temp:
  2611                           	opt stack 0
  2612                           
  2613                           ; 2 bytes @ 0x25
  2614  000085                     	ds	1
  2615  000086                     Port_Set@Type:
  2616                           	opt stack 0
  2617  000086                     Port_CheckPairType@pInput:
  2618                           	opt stack 0
  2619  000086                     Port_SetPinType@pInput:
  2620                           	opt stack 0
  2621  000086                     Console_Render@lCursor:
  2622                           	opt stack 0
  2623                           
  2624                           ; 4 bytes @ 0x26
  2625  000086                     	ds	1
  2626  000087                     ?___flneg:
  2627                           	opt stack 0
  2628  000087                     ___flneg@f1:
  2629                           	opt stack 0
  2630                           
  2631                           ; 4 bytes @ 0x27
  2632  000087                     	ds	1
  2633  000088                     Port_CheckPairType@pPair:
  2634                           	opt stack 0
  2635  000088                     Port_SetPinType@pPin:
  2636                           	opt stack 0
  2637                           
  2638                           ; 1 bytes @ 0x28
  2639  000088                     	ds	1
  2640  000089                     Port_CheckPairType@pDrive:
  2641                           	opt stack 0
  2642  000089                     Port_SetPinType@pType:
  2643                           	opt stack 0
  2644                           
  2645                           ; 1 bytes @ 0x29
  2646  000089                     	ds	1
  2647  00008A                     Port_CheckPairType@Pin1:
  2648                           	opt stack 0
  2649  00008A                     Port_SetPinType@Output:
  2650                           	opt stack 0
  2651  00008A                     Console_Render@x:
  2652                           	opt stack 0
  2653                           
  2654                           ; 1 bytes @ 0x2A
  2655  00008A                     	ds	1
  2656  00008B                     ?___fladd:
  2657                           	opt stack 0
  2658  00008B                     Port_CheckPairType@Pin2:
  2659                           	opt stack 0
  2660  00008B                     Console_Render@y:
  2661                           	opt stack 0
  2662  00008B                     Port_SetPinType@Props:
  2663                           	opt stack 0
  2664  00008B                     ___fladd@b:
  2665                           	opt stack 0
  2666                           
  2667                           ; 4 bytes @ 0x2B
  2668  00008B                     	ds	1
  2669  00008C                     Port_CheckPairType@Output:
  2670                           	opt stack 0
  2671  00008C                     Travel@direction:
  2672                           	opt stack 0
  2673                           
  2674                           ; 2 bytes @ 0x2C
  2675  00008C                     	ds	1
  2676  00008D                     LED_Init@pLED:
  2677                           	opt stack 0
  2678  00008D                     Port_CheckPairType@Props:
  2679                           	opt stack 0
  2680  00008D                     SPI_Init@pClock:
  2681                           	opt stack 0
  2682                           
  2683                           ; 4 bytes @ 0x2D
  2684  00008D                     	ds	1
  2685  00008E                     Travel@Dist:
  2686                           	opt stack 0
  2687                           
  2688                           ; 2 bytes @ 0x2E
  2689  00008E                     	ds	1
  2690  00008F                     Port_CheckQuadType@pInput:
  2691                           	opt stack 0
  2692  00008F                     ___fladd@a:
  2693                           	opt stack 0
  2694                           
  2695                           ; 4 bytes @ 0x2F
  2696  00008F                     	ds	1
  2697  000090                     Travel@Test_ADC:
  2698                           	opt stack 0
  2699                           
  2700                           ; 2 bytes @ 0x30
  2701  000090                     	ds	1
  2702  000091                     Port_CheckQuadType@pQuad:
  2703                           	opt stack 0
  2704  000091                     SPI_Init@pChannel:
  2705                           	opt stack 0
  2706                           
  2707                           ; 1 bytes @ 0x31
  2708  000091                     	ds	1
  2709  000092                     Port_CheckQuadType@pDrive:
  2710                           	opt stack 0
  2711  000092                     SPI_Init@pMode:
  2712                           	opt stack 0
  2713  000092                     Travel@Spd:
  2714                           	opt stack 0
  2715                           
  2716                           ; 2 bytes @ 0x32
  2717  000092                     	ds	1
  2718  000093                     ??___fladd:
  2719  000093                     Port_CheckQuadType@Pair1:
  2720                           	opt stack 0
  2721  000093                     SPI_Init@pInput:
  2722                           	opt stack 0
  2723                           
  2724                           ; 2 bytes @ 0x33
  2725  000093                     	ds	1
  2726  000094                     ??_Travel:
  2727  000094                     Port_CheckQuadType@Pair2:
  2728                           	opt stack 0
  2729                           
  2730                           ; 1 bytes @ 0x34
  2731  000094                     	ds	1
  2732  000095                     ??_LCD_Init:
  2733  000095                     Port_CheckQuadType@Output:
  2734                           	opt stack 0
  2735                           
  2736                           ; 1 bytes @ 0x35
  2737  000095                     	ds	1
  2738  000096                     Port_CheckPortType@pInput:
  2739                           	opt stack 0
  2740  000096                     Port_SetQuadType@pInput:
  2741                           	opt stack 0
  2742                           
  2743                           ; 2 bytes @ 0x36
  2744  000096                     	ds	1
  2745  000097                     LCD_Init@i:
  2746                           	opt stack 0
  2747                           
  2748                           ; 2 bytes @ 0x37
  2749  000097                     	ds	1
  2750  000098                     Port_CheckPortType@pDrive:
  2751                           	opt stack 0
  2752  000098                     Port_SetQuadType@pQuad:
  2753                           	opt stack 0
  2754  000098                     Travel@Dir:
  2755                           	opt stack 0
  2756                           
  2757                           ; 2 bytes @ 0x38
  2758  000098                     	ds	1
  2759  000099                     Port_CheckPortType@Output:
  2760                           	opt stack 0
  2761  000099                     Port_SetQuadType@pType:
  2762                           	opt stack 0
  2763                           
  2764                           ; 1 bytes @ 0x39
  2765  000099                     	ds	1
  2766  00009A                     Port_SetQuadType@Output:
  2767                           	opt stack 0
  2768  00009A                     Port_SetType@pInput:
  2769                           	opt stack 0
  2770  00009A                     Travel@rev_Dist:
  2771                           	opt stack 0
  2772                           
  2773                           ; 2 bytes @ 0x3A
  2774  00009A                     	ds	1
  2775  00009B                     ___fladd@signs:
  2776                           	opt stack 0
  2777  00009B                     Button_Init@pInput:
  2778                           	opt stack 0
  2779                           
  2780                           ; 2 bytes @ 0x3B
  2781  00009B                     	ds	1
  2782  00009C                     Port_SetType@pType:
  2783                           	opt stack 0
  2784  00009C                     ___fladd@aexp:
  2785                           	opt stack 0
  2786  00009C                     Travel@Dist_Travelled:
  2787                           	opt stack 0
  2788                           
  2789                           ; 2 bytes @ 0x3C
  2790  00009C                     	ds	1
  2791  00009D                     ??_Port_SetType:
  2792  00009D                     ___fladd@bexp:
  2793                           	opt stack 0
  2794  00009D                     Button_Init@pThreshold:
  2795                           	opt stack 0
  2796                           
  2797                           ; 2 bytes @ 0x3D
  2798  00009D                     	ds	1
  2799  00009E                     ___fladd@grs:
  2800                           	opt stack 0
  2801  00009E                     Travel@Req_Dir:
  2802                           	opt stack 0
  2803                           
  2804                           ; 2 bytes @ 0x3E
  2805  00009E                     	ds	1
  2806  00009F                     ?___flsub:
  2807                           	opt stack 0
  2808  00009F                     ?_eval_poly:
  2809                           	opt stack 0
  2810  00009F                     ?___fltol:
  2811                           	opt stack 0
  2812  00009F                     Port_SetType@Output:
  2813                           	opt stack 0
  2814  00009F                     Button_Init@pInitIO:
  2815                           	opt stack 0
  2816  00009F                     ___fltol@f1:
  2817                           	opt stack 0
  2818  00009F                     ___flsub@b:
  2819                           	opt stack 0
  2820  00009F                     eval_poly@x:
  2821                           	opt stack 0
  2822                           
  2823                           ; 4 bytes @ 0x3F
  2824  00009F                     	ds	1
  2825  0000A0                     Port_Init@pInput:
  2826                           	opt stack 0
  2827                           
  2828                           ; 2 bytes @ 0x40
  2829  0000A0                     	ds	2
  2830  0000A2                     Port_Init@pPort:
  2831                           	opt stack 0
  2832  0000A2                     Button_Init@pGetState:
  2833                           	opt stack 0
  2834                           
  2835                           ; 3 bytes @ 0x42
  2836  0000A2                     	ds	1
  2837  0000A3                     ??_Port_Init:
  2838  0000A3                     ??___fltol:
  2839  0000A3                     eval_poly@d:
  2840                           	opt stack 0
  2841  0000A3                     ___flsub@a:
  2842                           	opt stack 0
  2843                           
  2844                           ; 4 bytes @ 0x43
  2845  0000A3                     	ds	2
  2846  0000A5                     Port_Init@i:
  2847                           	opt stack 0
  2848  0000A5                     eval_poly@n:
  2849                           	opt stack 0
  2850  0000A5                     Button_Init@pFunction:
  2851                           	opt stack 0
  2852                           
  2853                           ; 3 bytes @ 0x45
  2854  0000A5                     	ds	1
  2855  0000A6                     
  2856                           ; 1 bytes @ 0x46
  2857  0000A6                     	ds	1
  2858  0000A7                     ??_eval_poly:
  2859  0000A7                     ___fltol@sign1:
  2860                           	opt stack 0
  2861                           
  2862                           ; 1 bytes @ 0x47
  2863  0000A7                     	ds	1
  2864  0000A8                     ___fltol@exp1:
  2865                           	opt stack 0
  2866  0000A8                     HMI_Init@in:
  2867                           	opt stack 0
  2868                           
  2869                           ; 2 bytes @ 0x48
  2870  0000A8                     	ds	1
  2871  0000A9                     ?_floor:
  2872                           	opt stack 0
  2873  0000A9                     floor@x:
  2874                           	opt stack 0
  2875                           
  2876                           ; 4 bytes @ 0x49
  2877  0000A9                     	ds	2
  2878  0000AB                     eval_poly@res:
  2879                           	opt stack 0
  2880                           
  2881                           ; 4 bytes @ 0x4B
  2882  0000AB                     	ds	2
  2883  0000AD                     floor@i:
  2884                           	opt stack 0
  2885                           
  2886                           ; 4 bytes @ 0x4D
  2887  0000AD                     	ds	2
  2888  0000AF                     ?_log:
  2889                           	opt stack 0
  2890  0000AF                     ?_ldexp:
  2891                           	opt stack 0
  2892  0000AF                     ldexp@value:
  2893                           	opt stack 0
  2894  0000AF                     log@x:
  2895                           	opt stack 0
  2896                           
  2897                           ; 4 bytes @ 0x4F
  2898  0000AF                     	ds	2
  2899  0000B1                     floor@expon:
  2900                           	opt stack 0
  2901                           
  2902                           ; 2 bytes @ 0x51
  2903  0000B1                     	ds	2
  2904  0000B3                     ldexp@newexp:
  2905                           	opt stack 0
  2906  0000B3                     log@exponent:
  2907                           	opt stack 0
  2908                           
  2909                           ; 2 bytes @ 0x53
  2910  0000B3                     	ds	2
  2911  0000B5                     ??_ldexp:
  2912                           
  2913                           ; 1 bytes @ 0x55
  2914  0000B5                     	ds	2
  2915  0000B7                     ?_exp:
  2916                           	opt stack 0
  2917  0000B7                     exp@x:
  2918                           	opt stack 0
  2919                           
  2920                           ; 4 bytes @ 0x57
  2921  0000B7                     	ds	3
  2922  0000BA                     Create_Maze@count:
  2923                           	opt stack 0
  2924                           
  2925                           ; 2 bytes @ 0x5A
  2926  0000BA                     	ds	1
  2927  0000BB                     _exp$15806:
  2928                           	opt stack 0
  2929                           
  2930                           ; 4 bytes @ 0x5B
  2931  0000BB                     	ds	1
  2932  0000BC                     Create_Maze@i:
  2933                           	opt stack 0
  2934                           
  2935                           ; 2 bytes @ 0x5C
  2936  0000BC                     	ds	2
  2937  0000BE                     Create_Maze@j:
  2938                           	opt stack 0
  2939                           
  2940                           ; 2 bytes @ 0x5E
  2941  0000BE                     	ds	1
  2942  0000BF                     exp@exponent:
  2943                           	opt stack 0
  2944                           
  2945                           ; 2 bytes @ 0x5F
  2946  0000BF                     	ds	1
  2947  0000C0                     Create_Maze@i_14045:
  2948                           	opt stack 0
  2949                           
  2950                           ; 2 bytes @ 0x60
  2951  0000C0                     	ds	1
  2952  0000C1                     exp@sign:
  2953                           	opt stack 0
  2954                           
  2955                           ; 1 bytes @ 0x61
  2956  0000C1                     	ds	1
  2957  0000C2                     ?_pow:
  2958                           	opt stack 0
  2959  0000C2                     Create_Maze@j_14046:
  2960                           	opt stack 0
  2961  0000C2                     pow@x:
  2962                           	opt stack 0
  2963                           
  2964                           ; 4 bytes @ 0x62
  2965  0000C2                     	ds	4
  2966  0000C6                     pow@y:
  2967                           	opt stack 0
  2968                           
  2969                           ; 4 bytes @ 0x66
  2970  0000C6                     	ds	4
  2971  0000CA                     _pow$15804:
  2972                           	opt stack 0
  2973                           
  2974                           ; 4 bytes @ 0x6A
  2975  0000CA                     	ds	4
  2976  0000CE                     _pow$15805:
  2977                           	opt stack 0
  2978                           
  2979                           ; 4 bytes @ 0x6E
  2980  0000CE                     	ds	4
  2981  0000D2                     pow@sign:
  2982                           	opt stack 0
  2983                           
  2984                           ; 1 bytes @ 0x72
  2985  0000D2                     	ds	1
  2986  0000D3                     pow@yi:
  2987                           	opt stack 0
  2988                           
  2989                           ; 4 bytes @ 0x73
  2990  0000D3                     	ds	4
  2991  0000D7                     ??_ADCAverage:
  2992                           
  2993                           ; 1 bytes @ 0x77
  2994  0000D7                     	ds	2
  2995  0000D9                     main@down:
  2996                           	opt stack 0
  2997                           
  2998                           ; 1 bytes @ 0x79
  2999  0000D9                     	ds	1
  3000  0000DA                     main@right:
  3001                           	opt stack 0
  3002                           
  3003                           ; 1 bytes @ 0x7A
  3004  0000DA                     	ds	1
  3005  0000DB                     main@up:
  3006                           	opt stack 0
  3007                           
  3008                           ; 1 bytes @ 0x7B
  3009  0000DB                     	ds	1
  3010  0000DC                     main@left:
  3011                           	opt stack 0
  3012                           
  3013                           ; 1 bytes @ 0x7C
  3014  0000DC                     	ds	1
  3015                           tblptru	equ	0xFF8
  3016                           tblptrh	equ	0xFF7
  3017                           tblptrl	equ	0xFF6
  3018                           tablat	equ	0xFF5
  3019                           postinc0	equ	0xFEE
  3020                           wreg	equ	0xFE8
  3021                           postdec1	equ	0xFE5
  3022                           fsr1h	equ	0xFE2
  3023                           fsr1l	equ	0xFE1
  3024                           
  3025                           	psect	cstackCOMRAM
  3026  000001                     __pcstackCOMRAM:
  3027                           	opt stack 0
  3028  000001                     i2Byte_SetBit@pInput:
  3029                           	opt stack 0
  3030  000001                     i2Byte_GetZone@pInput:
  3031                           	opt stack 0
  3032  000001                     i2delay_us@us:
  3033                           	opt stack 0
  3034  000001                     i2MXK_Queue@pCallback:
  3035                           	opt stack 0
  3036                           
  3037                           ; 3 bytes @ 0x0
  3038  000001                     	ds	2
  3039  000003                     i2Byte_SetBit@pBit:
  3040                           	opt stack 0
  3041  000003                     i2Byte_GetZone@pMax:
  3042                           	opt stack 0
  3043  000003                     i2delay_us@u:
  3044                           	opt stack 0
  3045                           
  3046                           ; 4 bytes @ 0x2
  3047  000003                     	ds	1
  3048  000004                     i2Byte_SetBit@pValue:
  3049                           	opt stack 0
  3050  000004                     i2Byte_GetZone@pChunk:
  3051                           	opt stack 0
  3052                           
  3053                           ; 1 bytes @ 0x3
  3054  000004                     	ds	1
  3055  000005                     ??i2_Byte_SetBit:
  3056  000005                     i2Byte_GetZone@pChunkSize:
  3057                           	opt stack 0
  3058                           
  3059                           ; 1 bytes @ 0x4
  3060  000005                     	ds	1
  3061  000006                     ??i2_Byte_GetZone:
  3062                           
  3063                           ; 1 bytes @ 0x5
  3064  000006                     	ds	1
  3065  000007                     i2Byte_GetZone@MASK:
  3066                           	opt stack 0
  3067  000007                     i2MXK_SwitchTo@CUR:
  3068                           	opt stack 0
  3069                           
  3070                           ; 1 bytes @ 0x6
  3071  000007                     	ds	1
  3072  000008                     i2Byte_GetZone@Offset:
  3073                           	opt stack 0
  3074  000008                     i2MXK_SwitchTo@pModule:
  3075                           	opt stack 0
  3076                           
  3077                           ; 1 bytes @ 0x7
  3078  000008                     	ds	1
  3079  000009                     i2Byte_GetZone@Output:
  3080                           	opt stack 0
  3081                           
  3082                           ; 1 bytes @ 0x8
  3083  000009                     	ds	1
  3084  00000A                     i2Byte_GetPair@pInput:
  3085                           	opt stack 0
  3086                           
  3087                           ; 2 bytes @ 0x9
  3088  00000A                     	ds	2
  3089  00000C                     i2Byte_GetPair@pPair:
  3090                           	opt stack 0
  3091                           
  3092                           ; 1 bytes @ 0xB
  3093  00000C                     	ds	1
  3094  00000D                     i2Word_GetPair@pInput:
  3095                           	opt stack 0
  3096                           
  3097                           ; 2 bytes @ 0xC
  3098  00000D                     	ds	2
  3099  00000F                     i2Word_GetPair@pPair:
  3100                           	opt stack 0
  3101                           
  3102                           ; 1 bytes @ 0xE
  3103  00000F                     	ds	1
  3104  000010                     i2Port_SetPin@pInput:
  3105                           	opt stack 0
  3106                           
  3107                           ; 2 bytes @ 0xF
  3108  000010                     	ds	2
  3109  000012                     i2Port_SetPin@pPin:
  3110                           	opt stack 0
  3111                           
  3112                           ; 1 bytes @ 0x11
  3113  000012                     	ds	1
  3114  000013                     i2Port_SetPin@pValue:
  3115                           	opt stack 0
  3116                           
  3117                           ; 1 bytes @ 0x12
  3118  000013                     	ds	1
  3119  000014                     i2Port_SetPin@Type:
  3120                           	opt stack 0
  3121                           
  3122                           ; 1 bytes @ 0x13
  3123  000014                     	ds	1
  3124  000015                     
  3125                           ; 1 bytes @ 0x14
  3126  000015                     	ds	2
  3127  000017                     ??_ISR_Function:
  3128                           
  3129                           ; 1 bytes @ 0x16
  3130  000017                     	ds	18
  3131                           tblptru	equ	0xFF8
  3132                           tblptrh	equ	0xFF7
  3133                           tblptrl	equ	0xFF6
  3134                           tablat	equ	0xFF5
  3135                           postinc0	equ	0xFEE
  3136                           wreg	equ	0xFE8
  3137                           postdec1	equ	0xFE5
  3138                           fsr1h	equ	0xFE2
  3139                           fsr1l	equ	0xFE1
  3140                           
  3141 ;;
  3142 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3143 ;;
  3144 ;; *************** function _main *****************
  3145 ;; Defined at:
  3146 ;;		line 328 in file "main.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;		None
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  left            1  124[BANK0 ] unsigned char 
  3151 ;;  up              1  123[BANK0 ] unsigned char 
  3152 ;;  right           1  122[BANK0 ] unsigned char 
  3153 ;;  down            1  121[BANK0 ] unsigned char 
  3154 ;;  square         80    0        struct square[5][4]
  3155 ;; Return value:  Size  Location     Type
  3156 ;;                  1    wreg      void 
  3157 ;; Registers used:
  3158 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3167 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;Total ram usage:        4 bytes
  3169 ;; Hardware stack levels required when called:   17
  3170 ;; This function calls:
  3171 ;;		_ADCAverage
  3172 ;;		_Console_Init
  3173 ;;		_Console_Render
  3174 ;;		_Create_Maze
  3175 ;;		_FunctInitButton
  3176 ;;		_HMI_DIPSwitch
  3177 ;;		_HMI_DownSwitch
  3178 ;;		_HMI_Init
  3179 ;;		_HMI_LeftSwitch
  3180 ;;		_HMI_Poll
  3181 ;;		_HMI_Render
  3182 ;;		_HMI_RightSwitch
  3183 ;;		_HMI_SetNumber
  3184 ;;		_HMI_UpSwitch
  3185 ;;		_ISR_Enable
  3186 ;;		_InitADC
  3187 ;;		_InitSerialCommunication
  3188 ;;		_Init_Timer0
  3189 ;;		_LCD_Init
  3190 ;;		_LED_Init
  3191 ;;		_MXK_BlockSwitchTo
  3192 ;;		_MXK_DIPSwitch
  3193 ;;		_MXK_Dequeue
  3194 ;;		_MXK_Init
  3195 ;;		_MXK_Release
  3196 ;;		_MXK_TestButton
  3197 ;;		_Robot_Init
  3198 ;;		_movement1
  3199 ;;		_printf
  3200 ;; This function is called by:
  3201 ;;		Startup code after reset
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           	psect	text0
  3206  0121A2                     __ptext0:
  3207                           	opt stack 0
  3208  0121A2                     _main:
  3209                           	opt stack 14
  3210                           
  3211                           ;main.c: 329: struct square square[4][5];
  3212                           ;main.c: 333: MXK_Init();
  3213                           
  3214                           ;incstack = 0
  3215  0121A2  ECEF  F097         	call	_MXK_Init	;wreg free
  3216                           
  3217                           ;main.c: 334: Init_Timer0();
  3218  0121A6  ECCD  F0AC         	call	_Init_Timer0	;wreg free
  3219                           
  3220                           ;main.c: 335: InitSerialCommunication();
  3221  0121AA  EC64  F0AC         	call	_InitSerialCommunication	;wreg free
  3222                           
  3223                           ;main.c: 336: Robot_Init();
  3224  0121AE  ECFC  F0AC         	call	_Robot_Init	;wreg free
  3225                           
  3226                           ;main.c: 337: ISR_Enable();
  3227  0121B2  EC8C  F0AD         	call	_ISR_Enable	;wreg free
  3228                           
  3229                           ;main.c: 338: FunctInitButton();
  3230  0121B6  EC23  F0A4         	call	_FunctInitButton	;wreg free
  3231                           
  3232                           ;main.c: 339: InitADC();
  3233  0121BA  EC03  F0A9         	call	_InitADC	;wreg free
  3234                           
  3235                           ;main.c: 340: LED_Init(eLED2);
  3236  0121BE  0E01               	movlw	1
  3237  0121C0  EC51  F0A7         	call	_LED_Init
  3238                           
  3239                           ;main.c: 346: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3240  0121C4  0E01               	movlw	1
  3241  0121C6  EC84  F0AA         	call	_MXK_BlockSwitchTo
  3242  0121CA  0900               	iorlw	0
  3243  0121CC  B4D8               	btfsc	status,2,c
  3244  0121CE  D00C               	goto	l2194
  3245                           
  3246                           ;main.c: 347: HMI_Init();
  3247  0121D0  EC70  F092         	call	_HMI_Init	;wreg free
  3248                           
  3249                           ;main.c: 348: LCD_Init();
  3250  0121D4  ECA8  F096         	call	_LCD_Init	;wreg free
  3251                           
  3252                           ;main.c: 349: Console_Init();
  3253  0121D8  EC3C  F0A5         	call	_Console_Init	;wreg free
  3254                           
  3255                           ;main.c: 350: if (MXK_Release())
  3256  0121DC  ECA9  F0AC         	call	_MXK_Release	;wreg free
  3257  0121E0  0900               	iorlw	0
  3258  0121E2  A4D8               	btfss	status,2,c
  3259                           
  3260                           ;main.c: 351: MXK_Dequeue();
  3261  0121E4  ECD6  F0AA         	call	_MXK_Dequeue	;wreg free
  3262  0121E8                     l2194:
  3263                           
  3264                           ;main.c: 357: ADCAverage();
  3265                           
  3266                           ;main.c: 352: }
  3267                           ;main.c: 355: for(;;){
  3268  0121E8  EC85  F086         	call	_ADCAverage	;wreg free
  3269                           
  3270                           ;main.c: 359: HMI_SetNumber(average);
  3271  0121EC  C0E4  F076         	movff	_average,HMI_SetNumber@pInput
  3272  0121F0  C0E5  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  3273  0121F4  ECFF  F0AB         	call	_HMI_SetNumber	;wreg free
  3274                           
  3275                           ;main.c: 361: HMI_Render();
  3276  0121F8  ECA0  F0AA         	call	_HMI_Render	;wreg free
  3277                           
  3278                           ;main.c: 363: HMI_Poll();
  3279  0121FC  EC40  F0A6         	call	_HMI_Poll	;wreg free
  3280                           
  3281                           ;main.c: 367: bool down = HMIBoard.mDown.mGetState();
  3282  012200  EE21  F079         	lfsr	2,_HMIBoard+45
  3283  012204  D801               	call	u14328
  3284  012206  D00A               	goto	u14329
  3285  012208                     u14328:
  3286  012208  0005               	push	
  3287  01220A  6EFA               	movwf	pclath,c
  3288  01220C  50DE               	movf	postinc2,w,c
  3289  01220E  6EFD               	movwf	tosl,c
  3290  012210  50DE               	movf	postinc2,w,c
  3291  012212  6EFE               	movwf	tosh,c
  3292  012214  50DE               	movf	postinc2,w,c
  3293  012216  6EFF               	movwf	tosu,c
  3294  012218  50FA               	movf	pclath,w,c
  3295  01221A  0012               	return		;indir
  3296  01221C                     u14329:
  3297  01221C  0100               	movlb	0	; () banked
  3298  01221E  6FD9               	movwf	main@down& (0+255),b
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;main.c: 368: bool right = HMIBoard.mRight.mGetState();
  3302  012220  EE21  F05B         	lfsr	2,_HMIBoard+15
  3303  012224  D801               	call	u14338
  3304  012226  D00A               	goto	u14339
  3305  012228                     u14338:
  3306  012228  0005               	push	
  3307  01222A  6EFA               	movwf	pclath,c
  3308  01222C  50DE               	movf	postinc2,w,c
  3309  01222E  6EFD               	movwf	tosl,c
  3310  012230  50DE               	movf	postinc2,w,c
  3311  012232  6EFE               	movwf	tosh,c
  3312  012234  50DE               	movf	postinc2,w,c
  3313  012236  6EFF               	movwf	tosu,c
  3314  012238  50FA               	movf	pclath,w,c
  3315  01223A  0012               	return		;indir
  3316  01223C                     u14339:
  3317  01223C  0100               	movlb	0	; () banked
  3318  01223E  6FDA               	movwf	main@right& (0+255),b
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;main.c: 369: bool up = HMIBoard.mUp.mGetState();
  3322  012240  EE21  F06F         	lfsr	2,_HMIBoard+35
  3323  012244  D801               	call	u14348
  3324  012246  D00A               	goto	u14349
  3325  012248                     u14348:
  3326  012248  0005               	push	
  3327  01224A  6EFA               	movwf	pclath,c
  3328  01224C  50DE               	movf	postinc2,w,c
  3329  01224E  6EFD               	movwf	tosl,c
  3330  012250  50DE               	movf	postinc2,w,c
  3331  012252  6EFE               	movwf	tosh,c
  3332  012254  50DE               	movf	postinc2,w,c
  3333  012256  6EFF               	movwf	tosu,c
  3334  012258  50FA               	movf	pclath,w,c
  3335  01225A  0012               	return		;indir
  3336  01225C                     u14349:
  3337  01225C  0100               	movlb	0	; () banked
  3338  01225E  6FDB               	movwf	main@up& (0+255),b
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;main.c: 370: bool left = HMIBoard.mLeft.mGetState();
  3342  012260  EE21  F065         	lfsr	2,_HMIBoard+25
  3343  012264  D801               	call	u14358
  3344  012266  D00A               	goto	u14359
  3345  012268                     u14358:
  3346  012268  0005               	push	
  3347  01226A  6EFA               	movwf	pclath,c
  3348  01226C  50DE               	movf	postinc2,w,c
  3349  01226E  6EFD               	movwf	tosl,c
  3350  012270  50DE               	movf	postinc2,w,c
  3351  012272  6EFE               	movwf	tosh,c
  3352  012274  50DE               	movf	postinc2,w,c
  3353  012276  6EFF               	movwf	tosu,c
  3354  012278  50FA               	movf	pclath,w,c
  3355  01227A  0012               	return		;indir
  3356  01227C                     u14359:
  3357  01227C  0100               	movlb	0	; () banked
  3358  01227E  6FDC               	movwf	main@left& (0+255),b
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;main.c: 371: if (down) {mode=3;}
  3362  012280  51D9               	movf	main@down& (0+255),w,b
  3363  012282  B4D8               	btfsc	status,2,c
  3364  012284  D005               	goto	l2196
  3365                           
  3366                           ; BSR set to: 0
  3367  012286  0E00               	movlw	0
  3368  012288  0101               	movlb	1	; () banked
  3369  01228A  6F3B               	movwf	(_mode+1)& (0+255),b
  3370  01228C  0E03               	movlw	3
  3371  01228E  6F3A               	movwf	_mode& (0+255),b
  3372  012290                     l2196:
  3373                           
  3374                           ;main.c: 372: if (right) {mode =1;}
  3375  012290  0100               	movlb	0	; () banked
  3376  012292  51DA               	movf	main@right& (0+255),w,b
  3377  012294  B4D8               	btfsc	status,2,c
  3378  012296  D005               	goto	l2197
  3379                           
  3380                           ; BSR set to: 0
  3381  012298  0E00               	movlw	0
  3382  01229A  0101               	movlb	1	; () banked
  3383  01229C  6F3B               	movwf	(_mode+1)& (0+255),b
  3384  01229E  0E01               	movlw	1
  3385  0122A0  6F3A               	movwf	_mode& (0+255),b
  3386  0122A2                     l2197:
  3387                           
  3388                           ;main.c: 373: if (up) {mode=2;}
  3389  0122A2  0100               	movlb	0	; () banked
  3390  0122A4  51DB               	movf	main@up& (0+255),w,b
  3391  0122A6  B4D8               	btfsc	status,2,c
  3392  0122A8  D005               	goto	l2198
  3393                           
  3394                           ; BSR set to: 0
  3395  0122AA  0E00               	movlw	0
  3396  0122AC  0101               	movlb	1	; () banked
  3397  0122AE  6F3B               	movwf	(_mode+1)& (0+255),b
  3398  0122B0  0E02               	movlw	2
  3399  0122B2  6F3A               	movwf	_mode& (0+255),b
  3400  0122B4                     l2198:
  3401                           
  3402                           ;main.c: 374: if (left) {mode=4;}
  3403  0122B4  0100               	movlb	0	; () banked
  3404  0122B6  51DC               	movf	main@left& (0+255),w,b
  3405  0122B8  B4D8               	btfsc	status,2,c
  3406  0122BA  D005               	goto	l2199
  3407                           
  3408                           ; BSR set to: 0
  3409  0122BC  0E00               	movlw	0
  3410  0122BE  0101               	movlb	1	; () banked
  3411  0122C0  6F3B               	movwf	(_mode+1)& (0+255),b
  3412  0122C2  0E04               	movlw	4
  3413  0122C4  6F3A               	movwf	_mode& (0+255),b
  3414  0122C6                     l2199:
  3415                           
  3416                           ;main.c: 379: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3417                           
  3418                           ; BSR set to: 1
  3419  0122C6  0E01               	movlw	1
  3420  0122C8  EC84  F0AA         	call	_MXK_BlockSwitchTo
  3421  0122CC  0900               	iorlw	0
  3422  0122CE  B4D8               	btfsc	status,2,c
  3423  0122D0  D78B               	goto	l2194
  3424                           
  3425                           ;main.c: 381: if (mode==0){
  3426  0122D2  0101               	movlb	1	; () banked
  3427  0122D4  513A               	movf	_mode& (0+255),w,b
  3428  0122D6  113B               	iorwf	(_mode+1)& (0+255),w,b
  3429  0122D8  A4D8               	btfss	status,2,c
  3430  0122DA  D014               	goto	l2201
  3431                           
  3432                           ; BSR set to: 1
  3433                           ;main.c: 384: printf("%c", (char)35);
  3434  0122DC  0EFB               	movlw	low STR_1
  3435  0122DE  0100               	movlb	0	; () banked
  3436  0122E0  6F75               	movwf	printf@f& (0+255),b
  3437  0122E2  0EFF               	movlw	high STR_1
  3438  0122E4  6F76               	movwf	(printf@f+1)& (0+255),b
  3439  0122E6  0E00               	movlw	0
  3440  0122E8  6F78               	movwf	(?_printf+3)& (0+255),b
  3441  0122EA  0E23               	movlw	35
  3442  0122EC  6F77               	movwf	(?_printf+2)& (0+255),b
  3443  0122EE  ECA2  F094         	call	_printf	;wreg free
  3444                           
  3445                           ;main.c: 385: printf("Robot Ready! \n\n");
  3446  0122F2  0EAC               	movlw	low STR_13
  3447  0122F4  0100               	movlb	0	; () banked
  3448  0122F6  6F75               	movwf	printf@f& (0+255),b
  3449  0122F8  0EFF               	movlw	high STR_13
  3450  0122FA  6F76               	movwf	(printf@f+1)& (0+255),b
  3451  0122FC  ECA2  F094         	call	_printf	;wreg free
  3452                           
  3453                           ;main.c: 387: Console_Render();
  3454  012300  ECF6  F08F         	call	_Console_Render	;wreg free
  3455  012304                     l2201:
  3456                           
  3457                           ;main.c: 389: }
  3458                           ;main.c: 390: if (mode == 3){
  3459  012304  0E03               	movlw	3
  3460  012306  0101               	movlb	1	; () banked
  3461  012308  193A               	xorwf	_mode& (0+255),w,b
  3462  01230A  113B               	iorwf	(_mode+1)& (0+255),w,b
  3463  01230C  A4D8               	btfss	status,2,c
  3464  01230E  D00F               	goto	l2202
  3465                           
  3466                           ; BSR set to: 1
  3467                           ;main.c: 393: Console_Render();
  3468  012310  ECF6  F08F         	call	_Console_Render	;wreg free
  3469                           
  3470                           ;main.c: 401: Create_Maze();
  3471  012314  EC8D  F098         	call	_Create_Maze	;wreg free
  3472                           
  3473                           ;main.c: 402: movement1();
  3474  012318  ECBE  F099         	call	_movement1	;wreg free
  3475                           
  3476                           ;main.c: 407: Console_Render();
  3477  01231C  ECF6  F08F         	call	_Console_Render	;wreg free
  3478                           
  3479                           ;main.c: 408: mode=0;
  3480  012320  0E00               	movlw	0
  3481  012322  0101               	movlb	1	; () banked
  3482  012324  6F3B               	movwf	(_mode+1)& (0+255),b
  3483  012326  0E00               	movlw	0
  3484  012328  6F3A               	movwf	_mode& (0+255),b
  3485                           
  3486                           ; BSR set to: 1
  3487                           ;main.c: 411: Console_Render();
  3488  01232A  ECF6  F08F         	call	_Console_Render	;wreg free
  3489  01232E                     l2202:
  3490                           
  3491                           ;main.c: 413: }
  3492                           ;main.c: 415: Console_Render();
  3493  01232E  ECF6  F08F         	call	_Console_Render	;wreg free
  3494                           
  3495                           ;main.c: 416: if (MXK_Release())
  3496  012332  ECA9  F0AC         	call	_MXK_Release	;wreg free
  3497  012336  0900               	iorlw	0
  3498  012338  B4D8               	btfsc	status,2,c
  3499  01233A  D756               	goto	l2194
  3500                           
  3501                           ;main.c: 417: MXK_Dequeue();
  3502  01233C  ECD6  F0AA         	call	_MXK_Dequeue	;wreg free
  3503                           
  3504                           ;main.c: 418: }
  3505                           ;main.c: 419: }
  3506  012340  D753               	goto	l2194
  3507  012342                     __end_of_main:
  3508                           	opt stack 0
  3509                           tosu	equ	0xFFF
  3510                           tosh	equ	0xFFE
  3511                           tosl	equ	0xFFD
  3512                           pclath	equ	0xFFA
  3513                           tblptru	equ	0xFF8
  3514                           tblptrh	equ	0xFF7
  3515                           tblptrl	equ	0xFF6
  3516                           tablat	equ	0xFF5
  3517                           postinc0	equ	0xFEE
  3518                           wreg	equ	0xFE8
  3519                           postdec1	equ	0xFE5
  3520                           fsr1h	equ	0xFE2
  3521                           fsr1l	equ	0xFE1
  3522                           postinc2	equ	0xFDE
  3523                           status	equ	0xFD8
  3524                           
  3525 ;; *************** function _movement1 *****************
  3526 ;; Defined at:
  3527 ;;		line 354 in file "dans.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;		None
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;		None
  3532 ;; Return value:  Size  Location     Type
  3533 ;;                  1    wreg      void 
  3534 ;; Registers used:
  3535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;Total ram usage:        0 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:   14
  3548 ;; This function calls:
  3549 ;;		_Console_Render
  3550 ;;		_Travel
  3551 ;;		_printf
  3552 ;; This function is called by:
  3553 ;;		_main
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	text1
  3558  01337C                     __ptext1:
  3559                           	opt stack 0
  3560  01337C                     _movement1:
  3561                           	opt stack 16
  3562                           
  3563                           ;dans.c: 355: Travel(3, 1000, 0, 200);
  3564                           
  3565                           ;incstack = 0
  3566  01337C  0E00               	movlw	0
  3567  01337E  0100               	movlb	0	; () banked
  3568  013380  6F8D               	movwf	(Travel@direction+1)& (0+255),b
  3569  013382  0E03               	movlw	3
  3570  013384  6F8C               	movwf	Travel@direction& (0+255),b
  3571  013386  0E03               	movlw	3
  3572  013388  6F8F               	movwf	(Travel@Dist+1)& (0+255),b
  3573  01338A  0EE8               	movlw	232
  3574  01338C  6F8E               	movwf	Travel@Dist& (0+255),b
  3575  01338E  0E00               	movlw	0
  3576  013390  6F91               	movwf	(Travel@Test_ADC+1)& (0+255),b
  3577  013392  0E00               	movlw	0
  3578  013394  6F90               	movwf	Travel@Test_ADC& (0+255),b
  3579  013396  0E00               	movlw	0
  3580  013398  6F93               	movwf	(Travel@Spd+1)& (0+255),b
  3581  01339A  0EC8               	movlw	200
  3582  01339C  6F92               	movwf	Travel@Spd& (0+255),b
  3583  01339E  EC1A  F085         	call	_Travel	;wreg free
  3584                           
  3585                           ;dans.c: 356: printf("Pos: %d, %d", X_Pos, Y_Pos);
  3586  0133A2  0EC8               	movlw	low STR_26
  3587  0133A4  0100               	movlb	0	; () banked
  3588  0133A6  6F75               	movwf	printf@f& (0+255),b
  3589  0133A8  0EFF               	movlw	high STR_26
  3590  0133AA  6F76               	movwf	(printf@f+1)& (0+255),b
  3591  0133AC  C0E2  F077         	movff	_X_Pos,?_printf+2
  3592  0133B0  C0E3  F078         	movff	_X_Pos+1,?_printf+3
  3593  0133B4  C0E0  F079         	movff	_Y_Pos,?_printf+4
  3594  0133B8  C0E1  F07A         	movff	_Y_Pos+1,?_printf+5
  3595  0133BC  ECA2  F094         	call	_printf	;wreg free
  3596                           
  3597                           ;dans.c: 357: Console_Render();
  3598  0133C0  ECF6  F08F         	call	_Console_Render	;wreg free
  3599                           
  3600                           ;dans.c: 358: Travel(0, 1000, 0, 200);
  3601  0133C4  0E00               	movlw	0
  3602  0133C6  0100               	movlb	0	; () banked
  3603  0133C8  6F8D               	movwf	(Travel@direction+1)& (0+255),b
  3604  0133CA  0E00               	movlw	0
  3605  0133CC  6F8C               	movwf	Travel@direction& (0+255),b
  3606  0133CE  0E03               	movlw	3
  3607  0133D0  6F8F               	movwf	(Travel@Dist+1)& (0+255),b
  3608  0133D2  0EE8               	movlw	232
  3609  0133D4  6F8E               	movwf	Travel@Dist& (0+255),b
  3610  0133D6  0E00               	movlw	0
  3611  0133D8  6F91               	movwf	(Travel@Test_ADC+1)& (0+255),b
  3612  0133DA  0E00               	movlw	0
  3613  0133DC  6F90               	movwf	Travel@Test_ADC& (0+255),b
  3614  0133DE  0E00               	movlw	0
  3615  0133E0  6F93               	movwf	(Travel@Spd+1)& (0+255),b
  3616  0133E2  0EC8               	movlw	200
  3617  0133E4  6F92               	movwf	Travel@Spd& (0+255),b
  3618  0133E6  EC1A  F085         	call	_Travel	;wreg free
  3619                           
  3620                           ;dans.c: 359: printf("Pos: %d, %d", X_Pos, Y_Pos);
  3621  0133EA  0EC8               	movlw	low STR_26
  3622  0133EC  0100               	movlb	0	; () banked
  3623  0133EE  6F75               	movwf	printf@f& (0+255),b
  3624  0133F0  0EFF               	movlw	high STR_26
  3625  0133F2  6F76               	movwf	(printf@f+1)& (0+255),b
  3626  0133F4  C0E2  F077         	movff	_X_Pos,?_printf+2
  3627  0133F8  C0E3  F078         	movff	_X_Pos+1,?_printf+3
  3628  0133FC  C0E0  F079         	movff	_Y_Pos,?_printf+4
  3629  013400  C0E1  F07A         	movff	_Y_Pos+1,?_printf+5
  3630  013404  ECA2  F094         	call	_printf	;wreg free
  3631                           
  3632                           ;dans.c: 360: Console_Render();
  3633  013408  ECF6  F08F         	call	_Console_Render	;wreg free
  3634                           
  3635                           ;dans.c: 361: Travel(1, 1000, 0, 200);
  3636  01340C  0E00               	movlw	0
  3637  01340E  0100               	movlb	0	; () banked
  3638  013410  6F8D               	movwf	(Travel@direction+1)& (0+255),b
  3639  013412  0E01               	movlw	1
  3640  013414  6F8C               	movwf	Travel@direction& (0+255),b
  3641  013416  0E03               	movlw	3
  3642  013418  6F8F               	movwf	(Travel@Dist+1)& (0+255),b
  3643  01341A  0EE8               	movlw	232
  3644  01341C  6F8E               	movwf	Travel@Dist& (0+255),b
  3645  01341E  0E00               	movlw	0
  3646  013420  6F91               	movwf	(Travel@Test_ADC+1)& (0+255),b
  3647  013422  0E00               	movlw	0
  3648  013424  6F90               	movwf	Travel@Test_ADC& (0+255),b
  3649  013426  0E00               	movlw	0
  3650  013428  6F93               	movwf	(Travel@Spd+1)& (0+255),b
  3651  01342A  0EC8               	movlw	200
  3652  01342C  6F92               	movwf	Travel@Spd& (0+255),b
  3653  01342E  EC1A  F085         	call	_Travel	;wreg free
  3654                           
  3655                           ;dans.c: 362: printf("Pos: %d, %d", X_Pos, Y_Pos);
  3656  013432  0EC8               	movlw	low STR_26
  3657  013434  0100               	movlb	0	; () banked
  3658  013436  6F75               	movwf	printf@f& (0+255),b
  3659  013438  0EFF               	movlw	high STR_26
  3660  01343A  6F76               	movwf	(printf@f+1)& (0+255),b
  3661  01343C  C0E2  F077         	movff	_X_Pos,?_printf+2
  3662  013440  C0E3  F078         	movff	_X_Pos+1,?_printf+3
  3663  013444  C0E0  F079         	movff	_Y_Pos,?_printf+4
  3664  013448  C0E1  F07A         	movff	_Y_Pos+1,?_printf+5
  3665  01344C  ECA2  F094         	call	_printf	;wreg free
  3666                           
  3667                           ;dans.c: 363: Console_Render();
  3668  013450  ECF6  F08F         	call	_Console_Render	;wreg free
  3669                           
  3670                           ;dans.c: 364: Travel(0, 1000, 0, 200);
  3671  013454  0E00               	movlw	0
  3672  013456  0100               	movlb	0	; () banked
  3673  013458  6F8D               	movwf	(Travel@direction+1)& (0+255),b
  3674  01345A  0E00               	movlw	0
  3675  01345C  6F8C               	movwf	Travel@direction& (0+255),b
  3676  01345E  0E03               	movlw	3
  3677  013460  6F8F               	movwf	(Travel@Dist+1)& (0+255),b
  3678  013462  0EE8               	movlw	232
  3679  013464  6F8E               	movwf	Travel@Dist& (0+255),b
  3680  013466  0E00               	movlw	0
  3681  013468  6F91               	movwf	(Travel@Test_ADC+1)& (0+255),b
  3682  01346A  0E00               	movlw	0
  3683  01346C  6F90               	movwf	Travel@Test_ADC& (0+255),b
  3684  01346E  0E00               	movlw	0
  3685  013470  6F93               	movwf	(Travel@Spd+1)& (0+255),b
  3686  013472  0EC8               	movlw	200
  3687  013474  6F92               	movwf	Travel@Spd& (0+255),b
  3688  013476  EC1A  F085         	call	_Travel	;wreg free
  3689                           
  3690                           ;dans.c: 365: printf("Pos: %d, %d", X_Pos, Y_Pos);
  3691  01347A  0EC8               	movlw	low STR_26
  3692  01347C  0100               	movlb	0	; () banked
  3693  01347E  6F75               	movwf	printf@f& (0+255),b
  3694  013480  0EFF               	movlw	high STR_26
  3695  013482  6F76               	movwf	(printf@f+1)& (0+255),b
  3696  013484  C0E2  F077         	movff	_X_Pos,?_printf+2
  3697  013488  C0E3  F078         	movff	_X_Pos+1,?_printf+3
  3698  01348C  C0E0  F079         	movff	_Y_Pos,?_printf+4
  3699  013490  C0E1  F07A         	movff	_Y_Pos+1,?_printf+5
  3700  013494  ECA2  F094         	call	_printf	;wreg free
  3701                           
  3702                           ;dans.c: 366: Console_Render();
  3703  013498  ECF6  F08F         	call	_Console_Render	;wreg free
  3704  01349C                     l2402:
  3705  01349C  D7FF               	goto	l2402
  3706  01349E                     __end_of_movement1:
  3707                           	opt stack 0
  3708                           tosu	equ	0xFFF
  3709                           tosh	equ	0xFFE
  3710                           tosl	equ	0xFFD
  3711                           pclath	equ	0xFFA
  3712                           tblptru	equ	0xFF8
  3713                           tblptrh	equ	0xFF7
  3714                           tblptrl	equ	0xFF6
  3715                           tablat	equ	0xFF5
  3716                           postinc0	equ	0xFEE
  3717                           wreg	equ	0xFE8
  3718                           postdec1	equ	0xFE5
  3719                           fsr1h	equ	0xFE2
  3720                           fsr1l	equ	0xFE1
  3721                           postinc2	equ	0xFDE
  3722                           status	equ	0xFD8
  3723                           
  3724 ;; *************** function _Travel *****************
  3725 ;; Defined at:
  3726 ;;		line 278 in file "dans.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;  direction       2   44[BANK0 ] int 
  3729 ;;  Dist            2   46[BANK0 ] int 
  3730 ;;  Test_ADC        2   48[BANK0 ] int 
  3731 ;;  Spd             2   50[BANK0 ] int 
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;  rev_Dist        2   58[BANK0 ] int 
  3734 ;;  Req_Dir         2   62[BANK0 ] int 
  3735 ;;  Dist_Travell    2   60[BANK0 ] int 
  3736 ;;  Dir             2   56[BANK0 ] int 
  3737 ;; Return value:  Size  Location     Type
  3738 ;;                  2   44[BANK0 ] int 
  3739 ;; Registers used:
  3740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3746 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;Total ram usage:       20 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; Hardware stack levels required when called:   13
  3753 ;; This function calls:
  3754 ;;		_Console_Render
  3755 ;;		_Drive
  3756 ;;		_Get_VirtualWall_State
  3757 ;;		_Robot_Stop
  3758 ;;		_Turn
  3759 ;;		_UpdateDistance
  3760 ;;		___wmul
  3761 ;;		_printf
  3762 ;; This function is called by:
  3763 ;;		_movement1
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767                           	psect	text2
  3768  010A34                     __ptext2:
  3769                           	opt stack 0
  3770  010A34                     _Travel:
  3771                           	opt stack 16
  3772                           
  3773                           ;dans.c: 279: int Dist_Travelled = 0;
  3774                           
  3775                           ;incstack = 0
  3776  010A34  0E00               	movlw	0
  3777  010A36  0100               	movlb	0	; () banked
  3778  010A38  6F9D               	movwf	(Travel@Dist_Travelled+1)& (0+255),b
  3779  010A3A  0E00               	movlw	0
  3780  010A3C  6F9C               	movwf	Travel@Dist_Travelled& (0+255),b
  3781                           
  3782                           ;dans.c: 280: int Req_Dir = 0;
  3783  010A3E  0E00               	movlw	0
  3784  010A40  6F9F               	movwf	(Travel@Req_Dir+1)& (0+255),b
  3785  010A42  0E00               	movlw	0
  3786  010A44  6F9E               	movwf	Travel@Req_Dir& (0+255),b
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;dans.c: 281: int Dir;
  3790                           ;dans.c: 282: if(direction == Current_Direction){
  3791  010A46  0101               	movlb	1	; () banked
  3792  010A48  51F7               	movf	_Current_Direction& (0+255),w,b
  3793  010A4A  0100               	movlb	0	; () banked
  3794  010A4C  198C               	xorwf	Travel@direction& (0+255),w,b
  3795  010A4E  E11A               	bnz	l15229
  3796  010A50  0101               	movlb	1	; () banked
  3797  010A52  51F8               	movf	(_Current_Direction+1)& (0+255),w,b
  3798  010A54  0100               	movlb	0	; () banked
  3799  010A56  198D               	xorwf	(Travel@direction+1)& (0+255),w,b
  3800  010A58  A4D8               	btfss	status,2,c
  3801  010A5A  D014               	goto	l2379
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;dans.c: 283: printf("%d", Spd);
  3805  010A5C  0ED1               	movlw	low (STR_26+9)
  3806  010A5E  6F75               	movwf	printf@f& (0+255),b
  3807  010A60  0EFF               	movlw	high (STR_26+9)
  3808  010A62  6F76               	movwf	(printf@f+1)& (0+255),b
  3809  010A64  C092  F077         	movff	Travel@Spd,?_printf+2
  3810  010A68  C093  F078         	movff	Travel@Spd+1,?_printf+3
  3811  010A6C  ECA2  F094         	call	_printf	;wreg free
  3812                           
  3813                           ;dans.c: 284: printf("driving");
  3814  010A70  0EEA               	movlw	low STR_20
  3815  010A72  0100               	movlb	0	; () banked
  3816  010A74  6F75               	movwf	printf@f& (0+255),b
  3817  010A76  0EFF               	movlw	high STR_20
  3818  010A78  6F76               	movwf	(printf@f+1)& (0+255),b
  3819  010A7A  ECA2  F094         	call	_printf	;wreg free
  3820                           
  3821                           ;dans.c: 285: Console_Render();
  3822  010A7E  ECF6  F08F         	call	_Console_Render	;wreg free
  3823                           
  3824                           ;dans.c: 286: }
  3825  010A82  D085               	goto	l2380
  3826  010A84                     l2379:
  3827  010A84                     l15229:
  3828                           
  3829                           ;dans.c: 287: else {
  3830                           ;dans.c: 288: Req_Dir = direction - Current_Direction;
  3831  010A84  C1F7  F094         	movff	_Current_Direction,??_Travel
  3832  010A88  C1F8  F095         	movff	_Current_Direction+1,??_Travel+1
  3833  010A8C  0100               	movlb	0	; () banked
  3834  010A8E  1F94               	comf	??_Travel& (0+255),f,b
  3835  010A90  1F95               	comf	(??_Travel+1)& (0+255),f,b
  3836  010A92  4B94               	infsnz	??_Travel& (0+255),f,b
  3837  010A94  2B95               	incf	(??_Travel+1)& (0+255),f,b
  3838  010A96  518C               	movf	Travel@direction& (0+255),w,b
  3839  010A98  2594               	addwf	??_Travel& (0+255),w,b
  3840  010A9A  6F9E               	movwf	Travel@Req_Dir& (0+255),b
  3841  010A9C  518D               	movf	(Travel@direction+1)& (0+255),w,b
  3842  010A9E  2195               	addwfc	(??_Travel+1)& (0+255),w,b
  3843  010AA0  6F9F               	movwf	(Travel@Req_Dir+1)& (0+255),b
  3844                           
  3845                           ;dans.c: 289: if (Req_Dir < 0 ){
  3846  010AA2  AF9F               	btfss	(Travel@Req_Dir+1)& (0+255),7,b
  3847  010AA4  D035               	goto	l2381
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;dans.c: 290: Req_Dir = 83*Req_Dir*-1;
  3851  010AA6  C09E  F094         	movff	Travel@Req_Dir,??_Travel
  3852  010AAA  C09F  F095         	movff	Travel@Req_Dir+1,??_Travel+1
  3853  010AAE  1F94               	comf	??_Travel& (0+255),f,b
  3854  010AB0  1F95               	comf	(??_Travel+1)& (0+255),f,b
  3855  010AB2  4B94               	infsnz	??_Travel& (0+255),f,b
  3856  010AB4  2B95               	incf	(??_Travel+1)& (0+255),f,b
  3857  010AB6  C094  F060         	movff	??_Travel,___wmul@multiplier
  3858  010ABA  C095  F061         	movff	??_Travel+1,___wmul@multiplier+1
  3859  010ABE  0E00               	movlw	0
  3860  010AC0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3861  010AC2  0E53               	movlw	83
  3862  010AC4  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3863  010AC6  ECC4  F0AB         	call	___wmul	;wreg free
  3864  010ACA  C060  F09E         	movff	?___wmul,Travel@Req_Dir
  3865  010ACE  C061  F09F         	movff	?___wmul+1,Travel@Req_Dir+1
  3866                           
  3867                           ;dans.c: 291: Dir = 1;
  3868  010AD2  0E00               	movlw	0
  3869  010AD4  0100               	movlb	0	; () banked
  3870  010AD6  6F99               	movwf	(Travel@Dir+1)& (0+255),b
  3871  010AD8  0E01               	movlw	1
  3872  010ADA  6F98               	movwf	Travel@Dir& (0+255),b
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;dans.c: 292: if(Req_Dir > 166){
  3876  010ADC  BF9F               	btfsc	(Travel@Req_Dir+1)& (0+255),7,b
  3877  010ADE  D045               	goto	l2384
  3878  010AE0  519F               	movf	(Travel@Req_Dir+1)& (0+255),w,b
  3879  010AE2  E104               	bnz	u12630
  3880  010AE4  0EA7               	movlw	167
  3881  010AE6  5D9E               	subwf	Travel@Req_Dir& (0+255),w,b
  3882  010AE8  A0D8               	btfss	status,0,c
  3883  010AEA  D03F               	goto	l2384
  3884  010AEC                     u12630:
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;dans.c: 293: Req_Dir = 332 - Req_Dir;
  3888  010AEC  C09E  F094         	movff	Travel@Req_Dir,??_Travel
  3889  010AF0  C09F  F095         	movff	Travel@Req_Dir+1,??_Travel+1
  3890  010AF4  1F94               	comf	??_Travel& (0+255),f,b
  3891  010AF6  1F95               	comf	(??_Travel+1)& (0+255),f,b
  3892  010AF8  4B94               	infsnz	??_Travel& (0+255),f,b
  3893  010AFA  2B95               	incf	(??_Travel+1)& (0+255),f,b
  3894  010AFC  0E4C               	movlw	76
  3895  010AFE  2594               	addwf	??_Travel& (0+255),w,b
  3896  010B00  6F9E               	movwf	Travel@Req_Dir& (0+255),b
  3897  010B02  0E01               	movlw	1
  3898  010B04  2195               	addwfc	(??_Travel+1)& (0+255),w,b
  3899  010B06  6F9F               	movwf	(Travel@Req_Dir+1)& (0+255),b
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;dans.c: 294: Dir = 0;
  3903  010B08  0E00               	movlw	0
  3904  010B0A  6F99               	movwf	(Travel@Dir+1)& (0+255),b
  3905  010B0C  0E00               	movlw	0
  3906  010B0E  D02C               	goto	L1
  3907  010B10                     l2381:
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;dans.c: 297: else{
  3911                           ;dans.c: 298: Req_Dir = 83*Req_Dir;
  3912                           
  3913                           ; BSR set to: 0
  3914  010B10  C09E  F060         	movff	Travel@Req_Dir,___wmul@multiplier
  3915  010B14  C09F  F061         	movff	Travel@Req_Dir+1,___wmul@multiplier+1
  3916  010B18  0E00               	movlw	0
  3917  010B1A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3918  010B1C  0E53               	movlw	83
  3919  010B1E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3920  010B20  ECC4  F0AB         	call	___wmul	;wreg free
  3921  010B24  C060  F09E         	movff	?___wmul,Travel@Req_Dir
  3922  010B28  C061  F09F         	movff	?___wmul+1,Travel@Req_Dir+1
  3923                           
  3924                           ;dans.c: 299: Dir = 0;
  3925  010B2C  0E00               	movlw	0
  3926  010B2E  0100               	movlb	0	; () banked
  3927  010B30  6F99               	movwf	(Travel@Dir+1)& (0+255),b
  3928  010B32  0E00               	movlw	0
  3929  010B34  6F98               	movwf	Travel@Dir& (0+255),b
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;dans.c: 300: if(Req_Dir > 166){
  3933  010B36  BF9F               	btfsc	(Travel@Req_Dir+1)& (0+255),7,b
  3934  010B38  D018               	goto	l2384
  3935  010B3A  519F               	movf	(Travel@Req_Dir+1)& (0+255),w,b
  3936  010B3C  E104               	bnz	u12640
  3937  010B3E  0EA7               	movlw	167
  3938  010B40  5D9E               	subwf	Travel@Req_Dir& (0+255),w,b
  3939  010B42  A0D8               	btfss	status,0,c
  3940  010B44  D012               	goto	l2384
  3941  010B46                     u12640:
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;dans.c: 301: Req_Dir = 332 - Req_Dir;
  3945  010B46  C09E  F094         	movff	Travel@Req_Dir,??_Travel
  3946  010B4A  C09F  F095         	movff	Travel@Req_Dir+1,??_Travel+1
  3947  010B4E  1F94               	comf	??_Travel& (0+255),f,b
  3948  010B50  1F95               	comf	(??_Travel+1)& (0+255),f,b
  3949  010B52  4B94               	infsnz	??_Travel& (0+255),f,b
  3950  010B54  2B95               	incf	(??_Travel+1)& (0+255),f,b
  3951  010B56  0E4C               	movlw	76
  3952  010B58  2594               	addwf	??_Travel& (0+255),w,b
  3953  010B5A  6F9E               	movwf	Travel@Req_Dir& (0+255),b
  3954  010B5C  0E01               	movlw	1
  3955  010B5E  2195               	addwfc	(??_Travel+1)& (0+255),w,b
  3956  010B60  6F9F               	movwf	(Travel@Req_Dir+1)& (0+255),b
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;dans.c: 302: Dir = 1;
  3960  010B62  0E00               	movlw	0
  3961  010B64  6F99               	movwf	(Travel@Dir+1)& (0+255),b
  3962  010B66  0E01               	movlw	1
  3963  010B68                     L1:
  3964  010B68  6F98               	movwf	Travel@Dir& (0+255),b
  3965  010B6A                     l2384:
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;dans.c: 303: }
  3969                           ;dans.c: 304: }
  3970                           ;dans.c: 305: Turn(Req_Dir, 200, Dir);
  3971                           
  3972                           ; BSR set to: 0
  3973                           
  3974                           ; BSR set to: 0
  3975  010B6A  C09E  F061         	movff	Travel@Req_Dir,Turn@Angle
  3976  010B6E  C09F  F062         	movff	Travel@Req_Dir+1,Turn@Angle+1
  3977  010B72  0E00               	movlw	0
  3978  010B74  6F64               	movwf	(Turn@Speed+1)& (0+255),b
  3979  010B76  0EC8               	movlw	200
  3980  010B78  6F63               	movwf	Turn@Speed& (0+255),b
  3981  010B7A  C098  F065         	movff	Travel@Dir,Turn@Dir
  3982  010B7E  C099  F066         	movff	Travel@Dir+1,Turn@Dir+1
  3983  010B82  ECE8  F0A3         	call	_Turn	;wreg free
  3984                           
  3985                           ;dans.c: 306: Current_Direction = direction;
  3986  010B86  C08C  F1F7         	movff	Travel@direction,_Current_Direction
  3987  010B8A  C08D  F1F8         	movff	Travel@direction+1,_Current_Direction+1
  3988  010B8E                     l2380:
  3989                           
  3990                           ;dans.c: 307: }
  3991                           ;dans.c: 309: Drive(Spd,Spd);
  3992  010B8E  C092  F061         	movff	Travel@Spd,Drive@SpeedL
  3993  010B92  C093  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
  3994  010B96  C092  F063         	movff	Travel@Spd,Drive@SpeedR
  3995  010B9A  C093  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
  3996  010B9E  EC96  F0A8         	call	_Drive	;wreg free
  3997                           
  3998                           ;dans.c: 311: while (Dist_Travelled<1000){
  3999  010BA2  D088               	goto	l2387
  4000  010BA4                     
  4001                           ;dans.c: 312: printf("%c", (char)35);
  4002  010BA4  0EFB               	movlw	low STR_1
  4003  010BA6  0100               	movlb	0	; () banked
  4004  010BA8  6F75               	movwf	printf@f& (0+255),b
  4005  010BAA  0EFF               	movlw	high STR_1
  4006  010BAC  6F76               	movwf	(printf@f+1)& (0+255),b
  4007  010BAE  0E00               	movlw	0
  4008  010BB0  6F78               	movwf	(?_printf+3)& (0+255),b
  4009  010BB2  0E23               	movlw	35
  4010  010BB4  6F77               	movwf	(?_printf+2)& (0+255),b
  4011  010BB6  ECA2  F094         	call	_printf	;wreg free
  4012                           
  4013                           ;dans.c: 313: Dist_Travelled += UpdateDistance();
  4014  010BBA  EC0D  F0A6         	call	_UpdateDistance	;wreg free
  4015  010BBE  0100               	movlb	0	; () banked
  4016  010BC0  5161               	movf	?_UpdateDistance& (0+255),w,b
  4017  010BC2  279C               	addwf	Travel@Dist_Travelled& (0+255),f,b
  4018  010BC4  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
  4019  010BC6  239D               	addwfc	(Travel@Dist_Travelled+1)& (0+255),f,b
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;dans.c: 314: printf("%d \n", Dist_Travelled);
  4023  010BC8  0EF2               	movlw	low STR_22
  4024  010BCA  6F75               	movwf	printf@f& (0+255),b
  4025  010BCC  0EFF               	movlw	high STR_22
  4026  010BCE  6F76               	movwf	(printf@f+1)& (0+255),b
  4027  010BD0  C09C  F077         	movff	Travel@Dist_Travelled,?_printf+2
  4028  010BD4  C09D  F078         	movff	Travel@Dist_Travelled+1,?_printf+3
  4029  010BD8  ECA2  F094         	call	_printf	;wreg free
  4030                           
  4031                           ;dans.c: 315: Console_Render();
  4032  010BDC  ECF6  F08F         	call	_Console_Render	;wreg free
  4033                           
  4034                           ;dans.c: 316: if (Get_VirtualWall_State()){
  4035  010BE0  EC12  F0AC         	call	_Get_VirtualWall_State	;wreg free
  4036  010BE4  0100               	movlb	0	; () banked
  4037  010BE6  5161               	movf	?_Get_VirtualWall_State& (0+255),w,b
  4038  010BE8  1162               	iorwf	(?_Get_VirtualWall_State+1)& (0+255),w,b
  4039  010BEA  B4D8               	btfsc	status,2,c
  4040  010BEC  D063               	goto	l2387
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;dans.c: 317: int rev_Dist = 0;
  4044  010BEE  0E00               	movlw	0
  4045  010BF0  6F9B               	movwf	(Travel@rev_Dist+1)& (0+255),b
  4046  010BF2  0E00               	movlw	0
  4047  010BF4  6F9A               	movwf	Travel@rev_Dist& (0+255),b
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;dans.c: 319: printf("WALL FOUND\n");
  4051  010BF6  0EBC               	movlw	low STR_23
  4052  010BF8  6F75               	movwf	printf@f& (0+255),b
  4053  010BFA  0EFF               	movlw	high STR_23
  4054  010BFC  6F76               	movwf	(printf@f+1)& (0+255),b
  4055  010BFE  ECA2  F094         	call	_printf	;wreg free
  4056                           
  4057                           ;dans.c: 320: Console_Render();
  4058  010C02  ECF6  F08F         	call	_Console_Render	;wreg free
  4059                           
  4060                           ;dans.c: 321: Drive(-Spd,-Spd);
  4061  010C06  C092  F094         	movff	Travel@Spd,??_Travel
  4062  010C0A  C093  F095         	movff	Travel@Spd+1,??_Travel+1
  4063  010C0E  0100               	movlb	0	; () banked
  4064  010C10  1F94               	comf	??_Travel& (0+255),f,b
  4065  010C12  1F95               	comf	(??_Travel+1)& (0+255),f,b
  4066  010C14  4B94               	infsnz	??_Travel& (0+255),f,b
  4067  010C16  2B95               	incf	(??_Travel+1)& (0+255),f,b
  4068  010C18  C094  F061         	movff	??_Travel,Drive@SpeedL
  4069  010C1C  C095  F062         	movff	??_Travel+1,Drive@SpeedL+1
  4070  010C20  C092  F096         	movff	Travel@Spd,??_Travel+2
  4071  010C24  C093  F097         	movff	Travel@Spd+1,??_Travel+3
  4072  010C28  1F96               	comf	(??_Travel+2)& (0+255),f,b
  4073  010C2A  1F97               	comf	(??_Travel+3)& (0+255),f,b
  4074  010C2C  4B96               	infsnz	(??_Travel+2)& (0+255),f,b
  4075  010C2E  2B97               	incf	(??_Travel+3)& (0+255),f,b
  4076  010C30  C096  F063         	movff	??_Travel+2,Drive@SpeedR
  4077  010C34  C097  F064         	movff	??_Travel+3,Drive@SpeedR+1
  4078  010C38  EC96  F0A8         	call	_Drive	;wreg free
  4079                           
  4080                           ;dans.c: 322: UpdateDistance();
  4081  010C3C  EC0D  F0A6         	call	_UpdateDistance	;wreg free
  4082                           
  4083                           ;dans.c: 323: while(rev_Dist >= -Dist_Travelled){
  4084  010C40  D025               	goto	l2388
  4085  010C42                     
  4086                           ;dans.c: 325: rev_Dist += UpdateDistance();
  4087  010C42  EC0D  F0A6         	call	_UpdateDistance	;wreg free
  4088  010C46  0100               	movlb	0	; () banked
  4089  010C48  5161               	movf	?_UpdateDistance& (0+255),w,b
  4090  010C4A  279A               	addwf	Travel@rev_Dist& (0+255),f,b
  4091  010C4C  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
  4092  010C4E  239B               	addwfc	(Travel@rev_Dist+1)& (0+255),f,b
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;dans.c: 326: Console_Render();
  4096  010C50  ECF6  F08F         	call	_Console_Render	;wreg free
  4097                           
  4098                           ;dans.c: 327: printf("%c", (char)35);
  4099  010C54  0EFB               	movlw	low STR_1
  4100  010C56  0100               	movlb	0	; () banked
  4101  010C58  6F75               	movwf	printf@f& (0+255),b
  4102  010C5A  0EFF               	movlw	high STR_1
  4103  010C5C  6F76               	movwf	(printf@f+1)& (0+255),b
  4104  010C5E  0E00               	movlw	0
  4105  010C60  6F78               	movwf	(?_printf+3)& (0+255),b
  4106  010C62  0E23               	movlw	35
  4107  010C64  6F77               	movwf	(?_printf+2)& (0+255),b
  4108  010C66  ECA2  F094         	call	_printf	;wreg free
  4109                           
  4110                           ;dans.c: 328: printf("rev:%d Tar: %d\n", rev_Dist, Dist_Travelled);
  4111  010C6A  0E9C               	movlw	low STR_25
  4112  010C6C  0100               	movlb	0	; () banked
  4113  010C6E  6F75               	movwf	printf@f& (0+255),b
  4114  010C70  0EFF               	movlw	high STR_25
  4115  010C72  6F76               	movwf	(printf@f+1)& (0+255),b
  4116  010C74  C09A  F077         	movff	Travel@rev_Dist,?_printf+2
  4117  010C78  C09B  F078         	movff	Travel@rev_Dist+1,?_printf+3
  4118  010C7C  C09C  F079         	movff	Travel@Dist_Travelled,?_printf+4
  4119  010C80  C09D  F07A         	movff	Travel@Dist_Travelled+1,?_printf+5
  4120  010C84  ECA2  F094         	call	_printf	;wreg free
  4121                           
  4122                           ;dans.c: 329: Console_Render();
  4123  010C88  ECF6  F08F         	call	_Console_Render	;wreg free
  4124  010C8C                     l2388:
  4125  010C8C  C09C  F094         	movff	Travel@Dist_Travelled,??_Travel
  4126  010C90  C09D  F095         	movff	Travel@Dist_Travelled+1,??_Travel+1
  4127  010C94  0100               	movlb	0	; () banked
  4128  010C96  1F94               	comf	??_Travel& (0+255),f,b
  4129  010C98  1F95               	comf	(??_Travel+1)& (0+255),f,b
  4130  010C9A  4B94               	infsnz	??_Travel& (0+255),f,b
  4131  010C9C  2B95               	incf	(??_Travel+1)& (0+255),f,b
  4132  010C9E  5194               	movf	??_Travel& (0+255),w,b
  4133  010CA0  5D9A               	subwf	Travel@rev_Dist& (0+255),w,b
  4134  010CA2  519B               	movf	(Travel@rev_Dist+1)& (0+255),w,b
  4135  010CA4  0A80               	xorlw	128
  4136  010CA6  6F96               	movwf	(??_Travel+2)& (0+255),b
  4137  010CA8  5195               	movf	(??_Travel+1)& (0+255),w,b
  4138  010CAA  0A80               	xorlw	128
  4139  010CAC  5996               	subwfb	(??_Travel+2)& (0+255),w,b
  4140  010CAE  A0D8               	btfss	status,0,c
  4141  010CB0  0012               	return	
  4142  010CB2  D7C7               	goto	l2389
  4143  010CB4                     l2387:
  4144                           
  4145                           ; BSR set to: 0
  4146                           
  4147                           ; BSR set to: 0
  4148  010CB4  0100               	movlb	0	; () banked
  4149  010CB6  BF9D               	btfsc	(Travel@Dist_Travelled+1)& (0+255),7,b
  4150  010CB8  D775               	goto	l2386
  4151  010CBA  0EE8               	movlw	232
  4152  010CBC  5D9C               	subwf	Travel@Dist_Travelled& (0+255),w,b
  4153  010CBE  0E03               	movlw	3
  4154  010CC0  599D               	subwfb	(Travel@Dist_Travelled+1)& (0+255),w,b
  4155  010CC2  A0D8               	btfss	status,0,c
  4156  010CC4  D76F               	goto	l2386
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;dans.c: 332: }
  4160                           ;dans.c: 336: }
  4161                           ;dans.c: 337: if (direction == 0){
  4162                           
  4163                           ; BSR set to: 0
  4164  010CC6  518C               	movf	Travel@direction& (0+255),w,b
  4165  010CC8  118D               	iorwf	(Travel@direction+1)& (0+255),w,b
  4166  010CCA  A4D8               	btfss	status,2,c
  4167  010CCC  D004               	goto	l2393
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;dans.c: 338: X_Pos -= 1;
  4171  010CCE  07E2               	decf	_X_Pos& (0+255),f,b
  4172  010CD0  A0D8               	btfss	status,0,c
  4173  010CD2  07E3               	decf	(_X_Pos+1)& (0+255),f,b
  4174                           
  4175                           ;dans.c: 339: }
  4176  010CD4  D017               	goto	l2399
  4177  010CD6                     l2393:
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;dans.c: 340: else if (direction == 1){
  4181                           
  4182                           ; BSR set to: 0
  4183  010CD6  058C               	decf	Travel@direction& (0+255),w,b
  4184  010CD8  118D               	iorwf	(Travel@direction+1)& (0+255),w,b
  4185  010CDA  A4D8               	btfss	status,2,c
  4186  010CDC  D003               	goto	l2395
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;dans.c: 341: Y_Pos += 1;
  4190  010CDE  4BE0               	infsnz	_Y_Pos& (0+255),f,b
  4191  010CE0  2BE1               	incf	(_Y_Pos+1)& (0+255),f,b
  4192                           
  4193                           ;dans.c: 342: }
  4194  010CE2  D010               	goto	l2399
  4195  010CE4                     l2395:
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;dans.c: 343: else if (direction == 2){
  4199                           
  4200                           ; BSR set to: 0
  4201  010CE4  0E02               	movlw	2
  4202  010CE6  198C               	xorwf	Travel@direction& (0+255),w,b
  4203  010CE8  118D               	iorwf	(Travel@direction+1)& (0+255),w,b
  4204  010CEA  A4D8               	btfss	status,2,c
  4205  010CEC  D003               	goto	l2397
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;dans.c: 344: X_Pos += 1;
  4209  010CEE  4BE2               	infsnz	_X_Pos& (0+255),f,b
  4210  010CF0  2BE3               	incf	(_X_Pos+1)& (0+255),f,b
  4211                           
  4212                           ;dans.c: 345: }
  4213  010CF2  D008               	goto	l2399
  4214  010CF4                     l2397:
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;dans.c: 346: else if (direction == 3){
  4218                           
  4219                           ; BSR set to: 0
  4220  010CF4  0E03               	movlw	3
  4221  010CF6  198C               	xorwf	Travel@direction& (0+255),w,b
  4222  010CF8  118D               	iorwf	(Travel@direction+1)& (0+255),w,b
  4223  010CFA  A4D8               	btfss	status,2,c
  4224  010CFC  D003               	goto	l2399
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;dans.c: 347: Y_Pos -= 1;
  4228  010CFE  07E0               	decf	_Y_Pos& (0+255),f,b
  4229  010D00  A0D8               	btfss	status,0,c
  4230  010D02  07E1               	decf	(_Y_Pos+1)& (0+255),f,b
  4231  010D04                     l2399:
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;dans.c: 348: }
  4235                           ;dans.c: 349: Robot_Stop();
  4236                           
  4237                           ; BSR set to: 0
  4238                           
  4239                           ; BSR set to: 0
  4240                           
  4241                           ; BSR set to: 0
  4242                           
  4243                           ; BSR set to: 0
  4244  010D04  EC24  F0AC         	call	_Robot_Stop	;wreg free
  4245  010D08  0012               	return	
  4246  010D0A                     __end_of_Travel:
  4247                           	opt stack 0
  4248                           tosu	equ	0xFFF
  4249                           tosh	equ	0xFFE
  4250                           tosl	equ	0xFFD
  4251                           pclath	equ	0xFFA
  4252                           tblptru	equ	0xFF8
  4253                           tblptrh	equ	0xFF7
  4254                           tblptrl	equ	0xFF6
  4255                           tablat	equ	0xFF5
  4256                           postinc0	equ	0xFEE
  4257                           wreg	equ	0xFE8
  4258                           postdec1	equ	0xFE5
  4259                           fsr1h	equ	0xFE2
  4260                           fsr1l	equ	0xFE1
  4261                           postinc2	equ	0xFDE
  4262                           status	equ	0xFD8
  4263                           
  4264 ;; *************** function _printf *****************
  4265 ;; Defined at:
  4266 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  4269 ;;		 -> STR_33(10), STR_32(3), STR_31(24), STR_30(3), 
  4270 ;;		 -> STR_29(12), STR_28(12), STR_27(12), STR_26(12), 
  4271 ;;		 -> STR_25(16), STR_24(3), STR_23(12), STR_22(5), 
  4272 ;;		 -> STR_21(3), STR_20(8), STR_19(3), STR_18(2), 
  4273 ;;		 -> STR_17(4), STR_16(3), STR_15(39), STR_14(42), 
  4274 ;;		 -> STR_13(16), STR_12(3), STR_11(21), STR_10(3), 
  4275 ;;		 -> STR_9(19), STR_8(28), STR_7(20), STR_6(3), 
  4276 ;;		 -> STR_5(17), STR_4(12), STR_3(3), STR_2(19), 
  4277 ;;		 -> STR_1(3), 
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;  tmpval          4    0        struct .
  4280 ;;  cp              3    0        PTR const unsigned char 
  4281 ;;  val             2   32[BANK0 ] unsigned int 
  4282 ;;  ap              2   30[BANK0 ] PTR void [1]
  4283 ;;		 -> ?_printf(2), 
  4284 ;;  len             2    0        unsigned int 
  4285 ;;  c               1   34[BANK0 ] char 
  4286 ;;  prec            1   29[BANK0 ] char 
  4287 ;;  flag            1   28[BANK0 ] unsigned char 
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  2   21[BANK0 ] int 
  4290 ;; Registers used:
  4291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4297 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4298 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;Total ram usage:       14 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; Hardware stack levels required when called:   12
  4304 ;; This function calls:
  4305 ;;		___lwdiv
  4306 ;;		___lwmod
  4307 ;;		_putch
  4308 ;; This function is called by:
  4309 ;;		_main
  4310 ;;		_Travel
  4311 ;;		_movement1
  4312 ;;		_Sensor_Observe
  4313 ;;		_Closest_Object
  4314 ;;		_pop
  4315 ;;		_push
  4316 ;;		_Init_Pos_Array
  4317 ;;		_Find_Flag
  4318 ;;		_Move_ADC_To
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           	psect	text3
  4323  012944                     __ptext3:
  4324                           	opt stack 0
  4325  012944                     _printf:
  4326                           	opt stack 18
  4327                           
  4328                           ;doprnt.c: 466: va_list ap;
  4329                           ;doprnt.c: 499: signed char c;
  4330                           ;doprnt.c: 506: signed char prec;
  4331                           ;doprnt.c: 508: unsigned char flag;
  4332                           ;doprnt.c: 523: union {
  4333                           ;doprnt.c: 524: unsigned long vd;
  4334                           ;doprnt.c: 525: double integ;
  4335                           ;doprnt.c: 526: } tmpval;
  4336                           ;doprnt.c: 528: unsigned int val;
  4337                           ;doprnt.c: 529: unsigned len;
  4338                           ;doprnt.c: 530: const char * cp;
  4339                           ;doprnt.c: 533: *ap = __va_start();
  4340                           
  4341                           ;incstack = 0
  4342  012944  0E77               	movlw	low (?_printf+2)
  4343  012946  0100               	movlb	0	; () banked
  4344  012948  6F7E               	movwf	printf@ap& (0+255),b
  4345  01294A  0E00               	movlw	high (?_printf+2)
  4346  01294C  6F7F               	movwf	(printf@ap+1)& (0+255),b
  4347                           
  4348                           ;doprnt.c: 536: while(c = *f++) {
  4349  01294E  D09E               	goto	u12130
  4350  012950                     
  4351                           ; BSR set to: 0
  4352                           ;doprnt.c: 538: if(c != '%')
  4353                           
  4354                           ; BSR set to: 0
  4355  012950  0E25               	movlw	37
  4356  012952  1982               	xorwf	printf@c& (0+255),w,b
  4357  012954  B4D8               	btfsc	status,2,c
  4358  012956  D004               	goto	l2436
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;doprnt.c: 540: {
  4362                           ;doprnt.c: 541: (putch(c) );
  4363  012958  5182               	movf	printf@c& (0+255),w,b
  4364  01295A  EC5D  F0AD         	call	_putch
  4365                           
  4366                           ;doprnt.c: 542: continue;
  4367  01295E  D096               	goto	u12130
  4368  012960                     l2436:
  4369                           
  4370                           ;doprnt.c: 543: }
  4371                           ;doprnt.c: 548: flag = 0;
  4372  012960  0E00               	movlw	0
  4373  012962  0100               	movlb	0	; () banked
  4374  012964  6F7C               	movwf	printf@flag& (0+255),b
  4375                           
  4376                           ;doprnt.c: 635: switch(c = *f++) {
  4377  012966  D00E               	goto	l2437
  4378  012968                     
  4379                           ; BSR set to: 0
  4380                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4381                           
  4382                           ; BSR set to: 0
  4383  012968  C07E  FFD9         	movff	printf@ap,fsr2l
  4384  01296C  C07F  FFDA         	movff	printf@ap+1,fsr2h
  4385  012970  50DF               	movf	indf2,w,c
  4386  012972  6F82               	movwf	printf@c& (0+255),b
  4387                           
  4388                           ; BSR set to: 0
  4389  012974  0E02               	movlw	2
  4390  012976  277E               	addwf	printf@ap& (0+255),f,b
  4391  012978  0E00               	movlw	0
  4392  01297A  237F               	addwfc	(printf@ap+1)& (0+255),f,b
  4393  01297C                     
  4394                           ; BSR set to: 0
  4395                           ;doprnt.c: 809: (putch(c) );
  4396                           
  4397                           ; BSR set to: 0
  4398  01297C  5182               	movf	printf@c& (0+255),w,b
  4399  01297E  EC5D  F0AD         	call	_putch
  4400                           
  4401                           ;doprnt.c: 810: continue;
  4402  012982  D084               	goto	u12130
  4403  012984                     l2437:
  4404  012984  C075  FFF6         	movff	printf@f,tblptrl
  4405  012988  C076  FFF7         	movff	printf@f+1,tblptrh
  4406  01298C  0100               	movlb	0	; () banked
  4407  01298E  4B75               	infsnz	printf@f& (0+255),f,b
  4408  012990  2B76               	incf	(printf@f+1)& (0+255),f,b
  4409  012992                     	if	0	;tblptru may be non-zero
  4410  012992                     	endif
  4411  012992                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4412  012992  0E00               	movlw	low (__mediumconst shr (0+16))
  4413  012994  6EF8               	movwf	tblptru,c
  4414  012996                     	endif
  4415  012996  0008               	tblrd		*
  4416  012998  CFF5 F082          	movff	tablat,printf@c
  4417  01299C  5182               	movf	printf@c& (0+255),w,b
  4418                           
  4419                           ; Switch size 1, requested type "space"
  4420                           ; Number of cases is 4, Range of values is 0 to 105
  4421                           ; switch strategies available:
  4422                           ; Name         Instructions Cycles
  4423                           ; simple_byte           13     7 (average)
  4424                           ;	Chosen strategy is simple_byte
  4425  01299E  0A00               	xorlw	0	; case 0
  4426  0129A0  B4D8               	btfsc	status,2,c
  4427  0129A2  0012               	return	
  4428  0129A4  0A63               	xorlw	99	; case 99
  4429  0129A6  B4D8               	btfsc	status,2,c
  4430  0129A8  D7DF               	goto	l2443
  4431  0129AA  0A07               	xorlw	7	; case 100
  4432  0129AC  B4D8               	btfsc	status,2,c
  4433  0129AE  D003               	goto	l2442
  4434  0129B0  0A0D               	xorlw	13	; case 105
  4435  0129B2  A4D8               	btfss	status,2,c
  4436  0129B4  D7E3               	goto	l2444
  4437  0129B6                     l2442:
  4438                           
  4439                           ;doprnt.c: 1253: {
  4440                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4441                           
  4442                           ; BSR set to: 0
  4443  0129B6  C07E  FFD9         	movff	printf@ap,fsr2l
  4444  0129BA  C07F  FFDA         	movff	printf@ap+1,fsr2h
  4445  0129BE  CFDE F080          	movff	postinc2,printf@val
  4446  0129C2  CFDD F081          	movff	postdec2,printf@val+1
  4447  0129C6  0E02               	movlw	2
  4448  0129C8  0100               	movlb	0	; () banked
  4449  0129CA  277E               	addwf	printf@ap& (0+255),f,b
  4450  0129CC  0E00               	movlw	0
  4451  0129CE  237F               	addwfc	(printf@ap+1)& (0+255),f,b
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;doprnt.c: 1261: if((int)val < 0) {
  4455  0129D0  AF81               	btfss	(printf@val+1)& (0+255),7,b
  4456  0129D2  D006               	goto	l2445
  4457                           
  4458                           ; BSR set to: 0
  4459                           ;doprnt.c: 1262: flag |= 0x03;
  4460  0129D4  0E03               	movlw	3
  4461  0129D6  137C               	iorwf	printf@flag& (0+255),f,b
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;doprnt.c: 1263: val = -val;
  4465  0129D8  6D80               	negf	printf@val& (0+255),b
  4466  0129DA  1F81               	comf	(printf@val+1)& (0+255),f,b
  4467  0129DC  B0D8               	btfsc	status,0,c
  4468  0129DE  2B81               	incf	(printf@val+1)& (0+255),f,b
  4469  0129E0                     l2445:
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;doprnt.c: 1264: }
  4473                           ;doprnt.c: 1266: }
  4474                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4475                           
  4476                           ; BSR set to: 0
  4477  0129E0  0E01               	movlw	1
  4478  0129E2  6F82               	movwf	printf@c& (0+255),b
  4479  0129E4                     l14797:
  4480                           
  4481                           ; BSR set to: 0
  4482  0129E4  0E05               	movlw	5
  4483  0129E6  1982               	xorwf	printf@c& (0+255),w,b
  4484  0129E8  B4D8               	btfsc	status,2,c
  4485  0129EA  D015               	goto	u12110
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;doprnt.c: 1306: if(val < dpowers[c])
  4489                           
  4490                           ; BSR set to: 0
  4491                           
  4492                           ; BSR set to: 0
  4493  0129EC  5182               	movf	printf@c& (0+255),w,b
  4494  0129EE  0D02               	mullw	2
  4495  0129F0  0E63               	movlw	low _dpowers
  4496  0129F2  24F3               	addwf	prodl,w,c
  4497  0129F4  6EF6               	movwf	tblptrl,c
  4498  0129F6  0EFC               	movlw	high _dpowers
  4499  0129F8  20F4               	addwfc	prodh,w,c
  4500  0129FA  6EF7               	movwf	tblptrh,c
  4501  0129FC                     	if	1	;There are 3 active tblptr bytes
  4502  0129FC  6AF8               	clrf	tblptru,c
  4503  0129FE  0E00               	movlw	low (__mediumconst shr (0+16))
  4504  012A00  22F8               	addwfc	tblptru,f,c
  4505  012A02                     	endif
  4506  012A02  0009               	tblrd		*+
  4507  012A04  50F5               	movf	tablat,w,c
  4508  012A06  5D80               	subwf	printf@val& (0+255),w,b
  4509  012A08  0009               	tblrd		*+
  4510  012A0A  50F5               	movf	tablat,w,c
  4511  012A0C  5981               	subwfb	(printf@val+1)& (0+255),w,b
  4512  012A0E  A0D8               	btfss	status,0,c
  4513  012A10  D002               	goto	u12110
  4514                           
  4515                           ; BSR set to: 0
  4516                           
  4517                           ; BSR set to: 0
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;doprnt.c: 1307: break;
  4521  012A12  2B82               	incf	printf@c& (0+255),f,b
  4522  012A14  D7E7               	goto	l14797
  4523  012A16                     u12110:
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;doprnt.c: 1422: {
  4527                           ;doprnt.c: 1438: if(flag & 0x03)
  4528                           
  4529                           ; BSR set to: 0
  4530  012A16  C07C  F07B         	movff	printf@flag,??_printf
  4531  012A1A  0E03               	movlw	3
  4532  012A1C  177B               	andwf	??_printf& (0+255),f,b
  4533  012A1E  B4D8               	btfsc	status,2,c
  4534  012A20  D003               	goto	l2449
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;doprnt.c: 1439: (putch('-') );
  4538  012A22  0E2D               	movlw	45
  4539  012A24  EC5D  F0AD         	call	_putch
  4540  012A28                     l2449:
  4541                           
  4542                           ;doprnt.c: 1469: }
  4543                           ;doprnt.c: 1472: prec = c;
  4544  012A28  C082  F07D         	movff	printf@c,printf@prec
  4545                           
  4546                           ;doprnt.c: 1474: while(prec--) {
  4547  012A2C  D02A               	goto	l2450
  4548  012A2E                     
  4549                           ;doprnt.c: 1478: {
  4550                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4551  012A2E  0100               	movlb	0	; () banked
  4552  012A30  517D               	movf	printf@prec& (0+255),w,b
  4553  012A32  0D02               	mullw	2
  4554  012A34  0E63               	movlw	low _dpowers
  4555  012A36  24F3               	addwf	prodl,w,c
  4556  012A38  6EF6               	movwf	tblptrl,c
  4557  012A3A  0EFC               	movlw	high _dpowers
  4558  012A3C  20F4               	addwfc	prodh,w,c
  4559  012A3E  6EF7               	movwf	tblptrh,c
  4560  012A40                     	if	1	;There are 3 active tblptr bytes
  4561  012A40  6AF8               	clrf	tblptru,c
  4562  012A42  0E00               	movlw	low (__mediumconst shr (0+16))
  4563  012A44  22F8               	addwfc	tblptru,f,c
  4564  012A46                     	endif
  4565  012A46  0009               	tblrd		*+
  4566  012A48  CFF5 F062          	movff	tablat,___lwdiv@divisor
  4567  012A4C  000A               	tblrd		*-
  4568  012A4E  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  4569  012A52  C080  F060         	movff	printf@val,___lwdiv@dividend
  4570  012A56  C081  F061         	movff	printf@val+1,___lwdiv@dividend+1
  4571  012A5A  ECA5  F0A7         	call	___lwdiv	;wreg free
  4572  012A5E  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  4573  012A62  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  4574  012A66  0E00               	movlw	0
  4575  012A68  0100               	movlb	0	; () banked
  4576  012A6A  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  4577  012A6C  0E0A               	movlw	10
  4578  012A6E  6F69               	movwf	___lwmod@divisor& (0+255),b
  4579  012A70  EC6E  F0A9         	call	___lwmod	;wreg free
  4580  012A74  0100               	movlb	0	; () banked
  4581  012A76  5167               	movf	?___lwmod& (0+255),w,b
  4582  012A78  0F30               	addlw	48
  4583  012A7A  6F82               	movwf	printf@c& (0+255),b
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;doprnt.c: 1523: }
  4587                           ;doprnt.c: 1524: (putch(c) );
  4588  012A7C  5182               	movf	printf@c& (0+255),w,b
  4589  012A7E  EC5D  F0AD         	call	_putch
  4590  012A82                     l2450:
  4591  012A82  0100               	movlb	0	; () banked
  4592  012A84  077D               	decf	printf@prec& (0+255),f,b
  4593  012A86  297D               	incf	printf@prec& (0+255),w,b
  4594  012A88  A4D8               	btfss	status,2,c
  4595  012A8A  D7D1               	goto	l2451
  4596  012A8C                     u12130:
  4597                           
  4598                           ; BSR set to: 0
  4599                           
  4600                           ; BSR set to: 0
  4601  012A8C  C075  FFF6         	movff	printf@f,tblptrl
  4602  012A90  C076  FFF7         	movff	printf@f+1,tblptrh
  4603  012A94  0100               	movlb	0	; () banked
  4604  012A96  4B75               	infsnz	printf@f& (0+255),f,b
  4605  012A98  2B76               	incf	(printf@f+1)& (0+255),f,b
  4606  012A9A                     	if	0	;tblptru may be non-zero
  4607  012A9A                     	endif
  4608  012A9A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4609  012A9A  0E00               	movlw	low (__mediumconst shr (0+16))
  4610  012A9C  6EF8               	movwf	tblptru,c
  4611  012A9E                     	endif
  4612  012A9E  0008               	tblrd		*
  4613  012AA0  CFF5 F082          	movff	tablat,printf@c
  4614  012AA4  5182               	movf	printf@c& (0+255),w,b
  4615  012AA6  B4D8               	btfsc	status,2,c
  4616  012AA8  0012               	return	
  4617  012AAA  D752               	goto	l2435
  4618  012AAC                     __end_of_printf:
  4619                           	opt stack 0
  4620                           tosu	equ	0xFFF
  4621                           tosh	equ	0xFFE
  4622                           tosl	equ	0xFFD
  4623                           pclath	equ	0xFFA
  4624                           tblptru	equ	0xFF8
  4625                           tblptrh	equ	0xFF7
  4626                           tblptrl	equ	0xFF6
  4627                           tablat	equ	0xFF5
  4628                           prodh	equ	0xFF4
  4629                           prodl	equ	0xFF3
  4630                           postinc0	equ	0xFEE
  4631                           wreg	equ	0xFE8
  4632                           postdec1	equ	0xFE5
  4633                           fsr1h	equ	0xFE2
  4634                           fsr1l	equ	0xFE1
  4635                           indf2	equ	0xFDF
  4636                           postinc2	equ	0xFDE
  4637                           postdec2	equ	0xFDD
  4638                           fsr2h	equ	0xFDA
  4639                           fsr2l	equ	0xFD9
  4640                           status	equ	0xFD8
  4641                           
  4642 ;; *************** function _putch *****************
  4643 ;; Defined at:
  4644 ;;		line 454 in file "Library/Console.c"
  4645 ;; Parameters:    Size  Location     Type
  4646 ;;  c               1    wreg     unsigned char 
  4647 ;; Auto vars:     Size  Location     Type
  4648 ;;  c               1   20[BANK0 ] unsigned char 
  4649 ;; Return value:  Size  Location     Type
  4650 ;;                  1    wreg      void 
  4651 ;; Registers used:
  4652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4653 ;; Tracked objects:
  4654 ;;		On entry : 0/0
  4655 ;;		On exit  : 0/0
  4656 ;;		Unchanged: 0/0
  4657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4659 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;Total ram usage:        1 bytes
  4663 ;; Hardware stack levels used:    1
  4664 ;; Hardware stack levels required when called:   11
  4665 ;; This function calls:
  4666 ;;		_Console_PrintChar
  4667 ;; This function is called by:
  4668 ;;		_printf
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           	psect	text4
  4673  015ABA                     __ptext4:
  4674                           	opt stack 0
  4675  015ABA                     _putch:
  4676                           	opt stack 18
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;incstack = 0
  4680                           ;putch@c stored from wreg
  4681  015ABA  0100               	movlb	0	; () banked
  4682  015ABC  6F74               	movwf	putch@c& (0+255),b
  4683                           
  4684                           ;Console.c: 456: Console_PrintChar(c);
  4685  015ABE  0100               	movlb	0	; () banked
  4686  015AC0  5174               	movf	putch@c& (0+255),w,b
  4687  015AC2  EC00  F096         	call	_Console_PrintChar
  4688  015AC6  0012               	return		;funcret
  4689  015AC8                     __end_of_putch:
  4690                           	opt stack 0
  4691                           tosu	equ	0xFFF
  4692                           tosh	equ	0xFFE
  4693                           tosl	equ	0xFFD
  4694                           pclath	equ	0xFFA
  4695                           tblptru	equ	0xFF8
  4696                           tblptrh	equ	0xFF7
  4697                           tblptrl	equ	0xFF6
  4698                           tablat	equ	0xFF5
  4699                           prodh	equ	0xFF4
  4700                           prodl	equ	0xFF3
  4701                           postinc0	equ	0xFEE
  4702                           wreg	equ	0xFE8
  4703                           postdec1	equ	0xFE5
  4704                           fsr1h	equ	0xFE2
  4705                           fsr1l	equ	0xFE1
  4706                           indf2	equ	0xFDF
  4707                           postinc2	equ	0xFDE
  4708                           postdec2	equ	0xFDD
  4709                           fsr2h	equ	0xFDA
  4710                           fsr2l	equ	0xFD9
  4711                           status	equ	0xFD8
  4712                           
  4713 ;; *************** function _Console_PrintChar *****************
  4714 ;; Defined at:
  4715 ;;		line 322 in file "Library/Console.c"
  4716 ;; Parameters:    Size  Location     Type
  4717 ;;  pInput          1    wreg     unsigned char 
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;  pInput          1   19[BANK0 ] unsigned char 
  4720 ;; Return value:  Size  Location     Type
  4721 ;;                  1    wreg      void 
  4722 ;; Registers used:
  4723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4724 ;; Tracked objects:
  4725 ;;		On entry : 0/0
  4726 ;;		On exit  : 0/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4731 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4732 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4733 ;;Total ram usage:        4 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; Hardware stack levels required when called:   10
  4736 ;; This function calls:
  4737 ;;		_Console_Backspace
  4738 ;;		_Console_FormFeed
  4739 ;;		_Console_IncrementCursor
  4740 ;;		_Console_NewLine
  4741 ;;		_Console_ResetCursor
  4742 ;;		_Console_Tab
  4743 ;; This function is called by:
  4744 ;;		_putch
  4745 ;;		_Console_PrintString
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           	psect	text5
  4750  012C00                     __ptext5:
  4751                           	opt stack 0
  4752  012C00                     _Console_PrintChar:
  4753                           	opt stack 18
  4754                           
  4755                           ;incstack = 0
  4756                           ;Console_PrintChar@pInput stored from wreg
  4757  012C00  0100               	movlb	0	; () banked
  4758  012C02  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
  4759                           
  4760                           ;Console.c: 324: switch(pInput)
  4761  012C04  D08A               	goto	l1036
  4762  012C06                     
  4763                           ;Console.c: 327: case '\n':
  4764                           ;Console.c: 328: Console_NewLine();
  4765  012C06  EC30  F0A3         	call	_Console_NewLine	;wreg free
  4766                           
  4767                           ;Console.c: 329: return;
  4768  012C0A  0012               	return	
  4769  012C0C                     
  4770                           ;Console.c: 331: Console_Backspace();
  4771  012C0C  ECF8  F0A7         	call	_Console_Backspace	;wreg free
  4772                           
  4773                           ;Console.c: 332: return;
  4774  012C10  0012               	return	
  4775  012C12                     
  4776                           ;Console.c: 334: Console_FormFeed();
  4777  012C12  ECD0  F0A4         	call	_Console_FormFeed	;wreg free
  4778                           
  4779                           ;Console.c: 335: return;
  4780  012C16  0012               	return	
  4781  012C18                     
  4782                           ;Console.c: 337: Console_Tab();
  4783  012C18  ECC6  F0A0         	call	_Console_Tab	;wreg free
  4784                           
  4785                           ;Console.c: 338: return;
  4786  012C1C  0012               	return	
  4787  012C1E                     
  4788                           ;Console.c: 340: Console_IncrementCursor();
  4789  012C1E  ECFD  F0A6         	call	_Console_IncrementCursor	;wreg free
  4790                           
  4791                           ;Console.c: 341: return;
  4792  012C22  0012               	return	
  4793  012C24                     
  4794                           ;Console.c: 343: Console_ResetCursor();
  4795  012C24  EC73  F0AC         	call	_Console_ResetCursor	;wreg free
  4796                           
  4797                           ;Console.c: 344: return;
  4798  012C28  0012               	return	
  4799  012C2A                     
  4800                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4801                           
  4802                           ;Console.c: 349: default:
  4803  012C2A  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4804  012C2E  0E7F               	movlw	127
  4805  012C30  0100               	movlb	0	; () banked
  4806  012C32  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  4807  012C34  51F2               	movf	_lBufferY& (0+255),w,b
  4808  012C36  0D14               	mullw	20
  4809  012C38  0E18               	movlw	low _lBuffer
  4810  012C3A  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4811  012C3C  0E03               	movlw	high _lBuffer
  4812  012C3E  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4813  012C40  50F3               	movf	prodl,w,c
  4814  012C42  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4815  012C44  50F4               	movf	prodh,w,c
  4816  012C46  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4817  012C48  51F3               	movf	_lBufferX& (0+255),w,b
  4818  012C4A  0D01               	mullw	1
  4819  012C4C  50F3               	movf	prodl,w,c
  4820  012C4E  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4821  012C50  6ED9               	movwf	fsr2l,c
  4822  012C52  50F4               	movf	prodh,w,c
  4823  012C54  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4824  012C56  6EDA               	movwf	fsr2h,c
  4825  012C58  50DF               	movf	indf2,w,c
  4826  012C5A  0B7F               	andlw	127
  4827  012C5C  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  4828  012C5E  B4D8               	btfsc	status,2,c
  4829  012C60  D023               	goto	l1047
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;Console.c: 351: {
  4833                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4834  012C62  0E01               	movlw	1
  4835  012C64  6FF5               	movwf	_change& (0+255),b
  4836                           
  4837                           ; BSR set to: 0
  4838  012C66  51F2               	movf	_lBufferY& (0+255),w,b
  4839  012C68  0D14               	mullw	20
  4840  012C6A  0E18               	movlw	low _lBuffer
  4841  012C6C  6F70               	movwf	??_Console_PrintChar& (0+255),b
  4842  012C6E  0E03               	movlw	high _lBuffer
  4843  012C70  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4844  012C72  50F3               	movf	prodl,w,c
  4845  012C74  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  4846  012C76  50F4               	movf	prodh,w,c
  4847  012C78  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4848  012C7A  51F3               	movf	_lBufferX& (0+255),w,b
  4849  012C7C  0D01               	mullw	1
  4850  012C7E  50F3               	movf	prodl,w,c
  4851  012C80  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  4852  012C82  6ED9               	movwf	fsr2l,c
  4853  012C84  50F4               	movf	prodh,w,c
  4854  012C86  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4855  012C88  6EDA               	movwf	fsr2h,c
  4856  012C8A  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  4857  012C8C  0980               	iorlw	128
  4858  012C8E  6EDF               	movwf	indf2,c
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  4862  012C90  51F2               	movf	_lBufferY& (0+255),w,b
  4863  012C92  0D02               	mullw	2
  4864  012C94  0E50               	movlw	low _lCBuffer
  4865  012C96  24F3               	addwf	prodl,w,c
  4866  012C98  6ED9               	movwf	fsr2l,c
  4867  012C9A  0E02               	movlw	high _lCBuffer
  4868  012C9C  20F4               	addwfc	prodh,w,c
  4869  012C9E  6EDA               	movwf	fsr2h,c
  4870  012CA0  C1F9  FFDE         	movff	_gForecolour,postinc2
  4871  012CA4  C1FA  FFDD         	movff	_gForecolour+1,postdec2
  4872  012CA8                     l1047:
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;Console.c: 354: }
  4876                           ;Console.c: 368: if(Console_IncrementCursor())
  4877                           
  4878                           ; BSR set to: 0
  4879  012CA8  ECFD  F0A6         	call	_Console_IncrementCursor	;wreg free
  4880  012CAC  0900               	iorlw	0
  4881  012CAE  B4D8               	btfsc	status,2,c
  4882  012CB0  0012               	return	
  4883                           
  4884                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4885  012CB2  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4886  012CB6  0E7F               	movlw	127
  4887  012CB8  0100               	movlb	0	; () banked
  4888  012CBA  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  4889  012CBC  51F2               	movf	_lBufferY& (0+255),w,b
  4890  012CBE  0D14               	mullw	20
  4891  012CC0  0E18               	movlw	low _lBuffer
  4892  012CC2  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4893  012CC4  0E03               	movlw	high _lBuffer
  4894  012CC6  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4895  012CC8  50F3               	movf	prodl,w,c
  4896  012CCA  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4897  012CCC  50F4               	movf	prodh,w,c
  4898  012CCE  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4899  012CD0  51F3               	movf	_lBufferX& (0+255),w,b
  4900  012CD2  0D01               	mullw	1
  4901  012CD4  50F3               	movf	prodl,w,c
  4902  012CD6  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4903  012CD8  6ED9               	movwf	fsr2l,c
  4904  012CDA  50F4               	movf	prodh,w,c
  4905  012CDC  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4906  012CDE  6EDA               	movwf	fsr2h,c
  4907  012CE0  50DF               	movf	indf2,w,c
  4908  012CE2  0B7F               	andlw	127
  4909  012CE4  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  4910  012CE6  B4D8               	btfsc	status,2,c
  4911  012CE8  0012               	return	
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4915  012CEA  0E01               	movlw	1
  4916  012CEC  6FF5               	movwf	_change& (0+255),b
  4917                           
  4918                           ; BSR set to: 0
  4919  012CEE  51F2               	movf	_lBufferY& (0+255),w,b
  4920  012CF0  0D14               	mullw	20
  4921  012CF2  0E18               	movlw	low _lBuffer
  4922  012CF4  6F70               	movwf	??_Console_PrintChar& (0+255),b
  4923  012CF6  0E03               	movlw	high _lBuffer
  4924  012CF8  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4925  012CFA  50F3               	movf	prodl,w,c
  4926  012CFC  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  4927  012CFE  50F4               	movf	prodh,w,c
  4928  012D00  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4929  012D02  51F3               	movf	_lBufferX& (0+255),w,b
  4930  012D04  0D01               	mullw	1
  4931  012D06  50F3               	movf	prodl,w,c
  4932  012D08  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  4933  012D0A  6ED9               	movwf	fsr2l,c
  4934  012D0C  50F4               	movf	prodh,w,c
  4935  012D0E  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4936  012D10  6EDA               	movwf	fsr2h,c
  4937  012D12  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  4938  012D14  0980               	iorlw	128
  4939  012D16  6EDF               	movwf	indf2,c
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;Console.c: 372: };
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;Console.c: 371: return;
  4946                           
  4947                           ; BSR set to: 0
  4948                           
  4949                           ; BSR set to: 0
  4950  012D18  0012               	return	
  4951  012D1A                     l1036:
  4952                           
  4953                           ; BSR set to: 0
  4954  012D1A  0100               	movlb	0	; () banked
  4955  012D1C  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  4956                           
  4957                           ; Switch size 1, requested type "space"
  4958                           ; Number of cases is 8, Range of values is 7 to 35
  4959                           ; switch strategies available:
  4960                           ; Name         Instructions Cycles
  4961                           ; simple_byte           25    13 (average)
  4962                           ;	Chosen strategy is simple_byte
  4963  012D1E  0A07               	xorlw	7	; case 7
  4964  012D20  B4D8               	btfsc	status,2,c
  4965  012D22  D77D               	goto	l1043
  4966  012D24  0A0F               	xorlw	15	; case 8
  4967  012D26  B4D8               	btfsc	status,2,c
  4968  012D28  D771               	goto	l1040
  4969  012D2A  0A01               	xorlw	1	; case 9
  4970  012D2C  B4D8               	btfsc	status,2,c
  4971  012D2E  D774               	goto	l1042
  4972  012D30  0A03               	xorlw	3	; case 10
  4973  012D32  B4D8               	btfsc	status,2,c
  4974  012D34  D768               	goto	l1037
  4975  012D36  0A06               	xorlw	6	; case 12
  4976  012D38  B4D8               	btfsc	status,2,c
  4977  012D3A  D76B               	goto	l1041
  4978  012D3C  0A01               	xorlw	1	; case 13
  4979  012D3E  B4D8               	btfsc	status,2,c
  4980  012D40  D762               	goto	l1037
  4981  012D42  0A2D               	xorlw	45	; case 32
  4982  012D44  B4D8               	btfsc	status,2,c
  4983  012D46  D771               	goto	l1045
  4984  012D48  0A03               	xorlw	3	; case 35
  4985  012D4A  B4D8               	btfsc	status,2,c
  4986  012D4C  D76B               	goto	l1044
  4987  012D4E  D76D               	goto	l1045
  4988  012D50                     __end_of_Console_PrintChar:
  4989                           	opt stack 0
  4990                           tosu	equ	0xFFF
  4991                           tosh	equ	0xFFE
  4992                           tosl	equ	0xFFD
  4993                           pclath	equ	0xFFA
  4994                           tblptru	equ	0xFF8
  4995                           tblptrh	equ	0xFF7
  4996                           tblptrl	equ	0xFF6
  4997                           tablat	equ	0xFF5
  4998                           prodh	equ	0xFF4
  4999                           prodl	equ	0xFF3
  5000                           postinc0	equ	0xFEE
  5001                           wreg	equ	0xFE8
  5002                           postdec1	equ	0xFE5
  5003                           fsr1h	equ	0xFE2
  5004                           fsr1l	equ	0xFE1
  5005                           indf2	equ	0xFDF
  5006                           postinc2	equ	0xFDE
  5007                           postdec2	equ	0xFDD
  5008                           fsr2h	equ	0xFDA
  5009                           fsr2l	equ	0xFD9
  5010                           status	equ	0xFD8
  5011                           
  5012 ;; *************** function _Console_Tab *****************
  5013 ;; Defined at:
  5014 ;;		line 260 in file "Library/Console.c"
  5015 ;; Parameters:    Size  Location     Type
  5016 ;;		None
  5017 ;; Auto vars:     Size  Location     Type
  5018 ;;  c               1   15[BANK0 ] unsigned char 
  5019 ;;  i               1   14[BANK0 ] unsigned char 
  5020 ;;  t               1   13[BANK0 ] unsigned char 
  5021 ;; Return value:  Size  Location     Type
  5022 ;;                  1    wreg      void 
  5023 ;; Registers used:
  5024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5031 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5032 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;Total ram usage:        8 bytes
  5035 ;; Hardware stack levels used:    1
  5036 ;; Hardware stack levels required when called:    9
  5037 ;; This function calls:
  5038 ;;		_Console_ClearCursor
  5039 ;;		_Console_IncrementCursor
  5040 ;;		___awdiv
  5041 ;; This function is called by:
  5042 ;;		_Console_PrintChar
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           	psect	text6
  5047  01418C                     __ptext6:
  5048                           	opt stack 0
  5049  01418C                     _Console_Tab:
  5050                           	opt stack 18
  5051                           
  5052                           ;Console.c: 262: UINT8 i = 0;
  5053                           
  5054                           ;incstack = 0
  5055  01418C  0E00               	movlw	0
  5056  01418E  0100               	movlb	0	; () banked
  5057  014190  6F6E               	movwf	Console_Tab@i& (0+255),b
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  5061  014192  0EFA               	movlw	250
  5062  014194  2443               	addwf	_gCursor,w,c
  5063  014196  6F60               	movwf	___awdiv@dividend& (0+255),b
  5064  014198  0EFF               	movlw	255
  5065  01419A  2044               	addwfc	_gCursor+1,w,c
  5066  01419C  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
  5067  01419E  0E00               	movlw	0
  5068  0141A0  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5069  0141A2  0E06               	movlw	6
  5070  0141A4  6F62               	movwf	___awdiv@divisor& (0+255),b
  5071  0141A6  EC6C  F0A2         	call	___awdiv	;wreg free
  5072  0141AA  0100               	movlb	0	; () banked
  5073  0141AC  5160               	movf	?___awdiv& (0+255),w,b
  5074  0141AE  6F6F               	movwf	Console_Tab@c& (0+255),b
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;Console.c: 264: UINT8 t = c/4;
  5078  0141B0  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
  5079  0141B4  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  5080  0141B6  0E00               	movlw	0
  5081  0141B8  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5082  0141BA  0E04               	movlw	4
  5083  0141BC  6F62               	movwf	___awdiv@divisor& (0+255),b
  5084  0141BE  EC6C  F0A2         	call	___awdiv	;wreg free
  5085  0141C2  0100               	movlb	0	; () banked
  5086  0141C4  5160               	movf	?___awdiv& (0+255),w,b
  5087  0141C6  6F6D               	movwf	Console_Tab@t& (0+255),b
  5088                           
  5089                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  5090  0141C8  0E00               	movlw	0
  5091  0141CA  6F6E               	movwf	Console_Tab@i& (0+255),b
  5092  0141CC  D006               	goto	l1009
  5093  0141CE                     
  5094                           ; BSR set to: 0
  5095                           ;Console.c: 266: {
  5096                           ;Console.c: 267: Console_ClearCursor();
  5097                           
  5098                           ; BSR set to: 0
  5099  0141CE  EC23  F0AB         	call	_Console_ClearCursor	;wreg free
  5100                           
  5101                           ;Console.c: 268: Console_IncrementCursor();
  5102  0141D2  ECFD  F0A6         	call	_Console_IncrementCursor	;wreg free
  5103  0141D6  0100               	movlb	0	; () banked
  5104  0141D8  2B6E               	incf	Console_Tab@i& (0+255),f,b
  5105  0141DA                     l1009:
  5106                           
  5107                           ; BSR set to: 0
  5108                           
  5109                           ; BSR set to: 0
  5110  0141DA  516D               	movf	Console_Tab@t& (0+255),w,b
  5111  0141DC  0D04               	mullw	4
  5112  0141DE  1EF3               	comf	prodl,f,c
  5113  0141E0  1EF4               	comf	prodh,f,c
  5114  0141E2  4AF3               	infsnz	prodl,f,c
  5115  0141E4  2AF4               	incf	prodh,f,c
  5116  0141E6  516F               	movf	Console_Tab@c& (0+255),w,b
  5117  0141E8  6F68               	movwf	??_Console_Tab& (0+255),b
  5118  0141EA  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
  5119  0141EC  50F3               	movf	prodl,w,c
  5120  0141EE  2768               	addwf	??_Console_Tab& (0+255),f,b
  5121  0141F0  50F4               	movf	prodh,w,c
  5122  0141F2  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  5123  0141F4  1F68               	comf	??_Console_Tab& (0+255),f,b
  5124  0141F6  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
  5125  0141F8  4B68               	infsnz	??_Console_Tab& (0+255),f,b
  5126  0141FA  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
  5127  0141FC  0E04               	movlw	4
  5128  0141FE  2768               	addwf	??_Console_Tab& (0+255),f,b
  5129  014200  0E00               	movlw	0
  5130  014202  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  5131  014204  516E               	movf	Console_Tab@i& (0+255),w,b
  5132  014206  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
  5133  014208  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
  5134  01420A  5168               	movf	??_Console_Tab& (0+255),w,b
  5135  01420C  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
  5136  01420E  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
  5137  014210  0A80               	xorlw	128
  5138  014212  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
  5139  014214  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
  5140  014216  0A80               	xorlw	128
  5141  014218  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  5142  01421A  B0D8               	btfsc	status,0,c
  5143  01421C  0012               	return	
  5144  01421E  D7D7               	goto	l1010
  5145  014220                     __end_of_Console_Tab:
  5146                           	opt stack 0
  5147                           tosu	equ	0xFFF
  5148                           tosh	equ	0xFFE
  5149                           tosl	equ	0xFFD
  5150                           pclath	equ	0xFFA
  5151                           tblptru	equ	0xFF8
  5152                           tblptrh	equ	0xFF7
  5153                           tblptrl	equ	0xFF6
  5154                           tablat	equ	0xFF5
  5155                           prodh	equ	0xFF4
  5156                           prodl	equ	0xFF3
  5157                           postinc0	equ	0xFEE
  5158                           wreg	equ	0xFE8
  5159                           postdec1	equ	0xFE5
  5160                           fsr1h	equ	0xFE2
  5161                           fsr1l	equ	0xFE1
  5162                           indf2	equ	0xFDF
  5163                           postinc2	equ	0xFDE
  5164                           postdec2	equ	0xFDD
  5165                           fsr2h	equ	0xFDA
  5166                           fsr2l	equ	0xFD9
  5167                           status	equ	0xFD8
  5168                           
  5169 ;; *************** function _Console_IncrementCursor *****************
  5170 ;; Defined at:
  5171 ;;		line 243 in file "Library/Console.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;		None
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;		None
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  1    wreg      unsigned char 
  5178 ;; Registers used:
  5179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5187 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;Total ram usage:        2 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; Hardware stack levels required when called:    8
  5192 ;; This function calls:
  5193 ;;		_Console_FormFeed
  5194 ;;		_Console_NewLine
  5195 ;; This function is called by:
  5196 ;;		_Console_Tab
  5197 ;;		_Console_PrintChar
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text7
  5202  014DFA                     __ptext7:
  5203                           	opt stack 0
  5204  014DFA                     _Console_IncrementCursor:
  5205                           	opt stack 18
  5206                           
  5207                           ;Console.c: 246: lBufferX += 1;
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;incstack = 0
  5211  014DFA  0100               	movlb	0	; () banked
  5212  014DFC  2BF3               	incf	_lBufferX& (0+255),f,b
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;Console.c: 248: gCursor.x += 6;
  5216  014DFE  0E06               	movlw	6
  5217  014E00  2643               	addwf	_gCursor,f,c
  5218  014E02  0E00               	movlw	0
  5219  014E04  2244               	addwfc	_gCursor+1,f,c
  5220                           
  5221                           ; BSR set to: 0
  5222                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  5223  014E06  0E06               	movlw	6
  5224  014E08  2443               	addwf	_gCursor,w,c
  5225  014E0A  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  5226  014E0C  0E00               	movlw	0
  5227  014E0E  2044               	addwfc	_gCursor+1,w,c
  5228  014E10  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5229  014E12  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5230  014E14  D007               	goto	l1004
  5231  014E16  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5232  014E18  E103               	bnz	u9960
  5233  014E1A  0E80               	movlw	128
  5234  014E1C  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5235  014E1E  B0D8               	btfsc	status,0,c
  5236  014E20                     u9960:
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;Console.c: 250: Console_NewLine();
  5240  014E20  EC30  F0A3         	call	_Console_NewLine	;wreg free
  5241  014E24                     l1004:
  5242                           
  5243                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  5244  014E24  0E08               	movlw	8
  5245  014E26  2445               	addwf	_gCursor+2,w,c
  5246  014E28  0100               	movlb	0	; () banked
  5247  014E2A  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  5248  014E2C  0E00               	movlw	0
  5249  014E2E  2046               	addwfc	_gCursor+3,w,c
  5250  014E30  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5251  014E32  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5252  014E34  D00A               	goto	l1005
  5253  014E36  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5254  014E38  E104               	bnz	u9970
  5255  014E3A  0E80               	movlw	128
  5256  014E3C  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5257  014E3E  A0D8               	btfss	status,0,c
  5258  014E40  D004               	goto	l1005
  5259  014E42                     u9970:
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;Console.c: 252: {
  5263                           ;Console.c: 253: Console_FormFeed();
  5264  014E42  ECD0  F0A4         	call	_Console_FormFeed	;wreg free
  5265                           
  5266                           ;Console.c: 254: return 1;
  5267  014E46  0E01               	movlw	1
  5268  014E48  0012               	return	
  5269  014E4A                     l1005:
  5270                           
  5271                           ;Console.c: 255: }
  5272                           ;Console.c: 257: return 0;
  5273  014E4A  0E00               	movlw	0
  5274  014E4C  0012               	return	
  5275  014E4E                     __end_of_Console_IncrementCursor:
  5276                           	opt stack 0
  5277                           tosu	equ	0xFFF
  5278                           tosh	equ	0xFFE
  5279                           tosl	equ	0xFFD
  5280                           pclath	equ	0xFFA
  5281                           tblptru	equ	0xFF8
  5282                           tblptrh	equ	0xFF7
  5283                           tblptrl	equ	0xFF6
  5284                           tablat	equ	0xFF5
  5285                           prodh	equ	0xFF4
  5286                           prodl	equ	0xFF3
  5287                           postinc0	equ	0xFEE
  5288                           wreg	equ	0xFE8
  5289                           postdec1	equ	0xFE5
  5290                           fsr1h	equ	0xFE2
  5291                           fsr1l	equ	0xFE1
  5292                           indf2	equ	0xFDF
  5293                           postinc2	equ	0xFDE
  5294                           postdec2	equ	0xFDD
  5295                           fsr2h	equ	0xFDA
  5296                           fsr2l	equ	0xFD9
  5297                           status	equ	0xFD8
  5298                           
  5299 ;; *************** function _Console_NewLine *****************
  5300 ;; Defined at:
  5301 ;;		line 175 in file "Library/Console.c"
  5302 ;; Parameters:    Size  Location     Type
  5303 ;;		None
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;		None
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  1    wreg      void 
  5308 ;; Registers used:
  5309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5317 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5318 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5319 ;;Total ram usage:        2 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    7
  5322 ;; This function calls:
  5323 ;;		Nothing
  5324 ;; This function is called by:
  5325 ;;		_Console_IncrementCursor
  5326 ;;		_Console_PrintChar
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text8
  5331  014660                     __ptext8:
  5332                           	opt stack 0
  5333  014660                     _Console_NewLine:
  5334                           	opt stack 18
  5335                           
  5336                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  5337                           
  5338                           ;incstack = 0
  5339  014660  D02D               	goto	l983
  5340  014662                     
  5341                           ;Console.c: 179: {
  5342                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  5343  014662  0100               	movlb	0	; () banked
  5344  014664  51F2               	movf	_lBufferY& (0+255),w,b
  5345  014666  0D14               	mullw	20
  5346  014668  0E18               	movlw	low _lBuffer
  5347  01466A  6F60               	movwf	??_Console_NewLine& (0+255),b
  5348  01466C  0E03               	movlw	high _lBuffer
  5349  01466E  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  5350  014670  50F3               	movf	prodl,w,c
  5351  014672  2760               	addwf	??_Console_NewLine& (0+255),f,b
  5352  014674  50F4               	movf	prodh,w,c
  5353  014676  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5354  014678  51F3               	movf	_lBufferX& (0+255),w,b
  5355  01467A  0D01               	mullw	1
  5356  01467C  50F3               	movf	prodl,w,c
  5357  01467E  2560               	addwf	??_Console_NewLine& (0+255),w,b
  5358  014680  6ED9               	movwf	fsr2l,c
  5359  014682  50F4               	movf	prodh,w,c
  5360  014684  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5361  014686  6EDA               	movwf	fsr2h,c
  5362  014688  50DF               	movf	indf2,w,c
  5363  01468A  B4D8               	btfsc	status,2,c
  5364  01468C  D016               	goto	l985
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  5368  01468E  0E01               	movlw	1
  5369  014690  6FF5               	movwf	_change& (0+255),b
  5370                           
  5371                           ; BSR set to: 0
  5372  014692  51F2               	movf	_lBufferY& (0+255),w,b
  5373  014694  0D14               	mullw	20
  5374  014696  0E18               	movlw	low _lBuffer
  5375  014698  6F60               	movwf	??_Console_NewLine& (0+255),b
  5376  01469A  0E03               	movlw	high _lBuffer
  5377  01469C  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  5378  01469E  50F3               	movf	prodl,w,c
  5379  0146A0  2760               	addwf	??_Console_NewLine& (0+255),f,b
  5380  0146A2  50F4               	movf	prodh,w,c
  5381  0146A4  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5382  0146A6  51F3               	movf	_lBufferX& (0+255),w,b
  5383  0146A8  0D01               	mullw	1
  5384  0146AA  50F3               	movf	prodl,w,c
  5385  0146AC  2560               	addwf	??_Console_NewLine& (0+255),w,b
  5386  0146AE  6ED9               	movwf	fsr2l,c
  5387  0146B0  50F4               	movf	prodh,w,c
  5388  0146B2  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5389  0146B4  6EDA               	movwf	fsr2h,c
  5390  0146B6  0E80               	movlw	128
  5391  0146B8  6EDF               	movwf	indf2,c
  5392  0146BA                     l985:
  5393                           
  5394                           ; BSR set to: 0
  5395                           ;Console.c: 182: lBufferX ++;
  5396                           
  5397                           ; BSR set to: 0
  5398  0146BA  2BF3               	incf	_lBufferX& (0+255),f,b
  5399  0146BC                     l983:
  5400                           
  5401                           ; BSR set to: 0
  5402  0146BC  0E13               	movlw	19
  5403  0146BE  0100               	movlb	0	; () banked
  5404  0146C0  65F3               	cpfsgt	_lBufferX& (0+255),b
  5405  0146C2  D7CF               	goto	l984
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;Console.c: 183: }
  5409                           ;Console.c: 185: lBufferX = 0;
  5410                           
  5411                           ; BSR set to: 0
  5412  0146C4  0E00               	movlw	0
  5413  0146C6  6FF3               	movwf	_lBufferX& (0+255),b
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;Console.c: 186: lBufferY ++;
  5417  0146C8  2BF2               	incf	_lBufferY& (0+255),f,b
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;Console.c: 188: gCursor.y += 8;
  5421  0146CA  0E08               	movlw	8
  5422  0146CC  2645               	addwf	_gCursor+2,f,c
  5423  0146CE  0E00               	movlw	0
  5424  0146D0  2246               	addwfc	_gCursor+3,f,c
  5425                           
  5426                           ; BSR set to: 0
  5427                           ;Console.c: 189: gCursor.x = 6;
  5428  0146D2  0E00               	movlw	0
  5429  0146D4  6E44               	movwf	_gCursor+1,c
  5430  0146D6  0E06               	movlw	6
  5431  0146D8  6E43               	movwf	_gCursor,c
  5432                           
  5433                           ; BSR set to: 0
  5434  0146DA  0012               	return		;funcret
  5435  0146DC                     __end_of_Console_NewLine:
  5436                           	opt stack 0
  5437                           tosu	equ	0xFFF
  5438                           tosh	equ	0xFFE
  5439                           tosl	equ	0xFFD
  5440                           pclath	equ	0xFFA
  5441                           tblptru	equ	0xFF8
  5442                           tblptrh	equ	0xFF7
  5443                           tblptrl	equ	0xFF6
  5444                           tablat	equ	0xFF5
  5445                           prodh	equ	0xFF4
  5446                           prodl	equ	0xFF3
  5447                           postinc0	equ	0xFEE
  5448                           wreg	equ	0xFE8
  5449                           postdec1	equ	0xFE5
  5450                           fsr1h	equ	0xFE2
  5451                           fsr1l	equ	0xFE1
  5452                           indf2	equ	0xFDF
  5453                           postinc2	equ	0xFDE
  5454                           postdec2	equ	0xFDD
  5455                           fsr2h	equ	0xFDA
  5456                           fsr2l	equ	0xFD9
  5457                           status	equ	0xFD8
  5458                           
  5459 ;; *************** function _Console_FormFeed *****************
  5460 ;; Defined at:
  5461 ;;		line 192 in file "Library/Console.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;		None
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;  y               1    3[BANK0 ] unsigned char 
  5466 ;;  x               1    2[BANK0 ] unsigned char 
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  1    wreg      void 
  5469 ;; Registers used:
  5470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;Total ram usage:        4 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; Hardware stack levels required when called:    7
  5483 ;; This function calls:
  5484 ;;		Nothing
  5485 ;; This function is called by:
  5486 ;;		_Console_IncrementCursor
  5487 ;;		_Console_PrintChar
  5488 ;; This function uses a non-reentrant model
  5489 ;;
  5490                           
  5491                           	psect	text9
  5492  0149A0                     __ptext9:
  5493                           	opt stack 0
  5494  0149A0                     _Console_FormFeed:
  5495                           	opt stack 18
  5496                           
  5497                           ;Console.c: 195: lBufferX = 0;
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;incstack = 0
  5501  0149A0  0E00               	movlw	0
  5502  0149A2  0100               	movlb	0	; () banked
  5503  0149A4  6FF3               	movwf	_lBufferX& (0+255),b
  5504                           
  5505                           ;Console.c: 196: lBufferY = 0;
  5506  0149A6  0E00               	movlw	0
  5507  0149A8  6FF2               	movwf	_lBufferY& (0+255),b
  5508                           
  5509                           ;Console.c: 197: UINT8 x, y;
  5510                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  5511  0149AA  0E00               	movlw	0
  5512  0149AC  6F63               	movwf	Console_FormFeed@y& (0+255),b
  5513  0149AE                     l12627:
  5514                           
  5515                           ; BSR set to: 0
  5516  0149AE  0E0E               	movlw	14
  5517  0149B0  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
  5518  0149B2  D001               	goto	l990
  5519  0149B4  D020               	goto	u9840
  5520  0149B6                     l990:
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  5524                           
  5525                           ; BSR set to: 0
  5526  0149B6  0E00               	movlw	0
  5527  0149B8  6F62               	movwf	Console_FormFeed@x& (0+255),b
  5528  0149BA                     l12633:
  5529                           
  5530                           ; BSR set to: 0
  5531  0149BA  0E13               	movlw	19
  5532  0149BC  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
  5533  0149BE  D001               	goto	l992
  5534  0149C0  D018               	goto	u9830
  5535  0149C2                     l992:
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  5539                           
  5540                           ; BSR set to: 0
  5541  0149C2  0E01               	movlw	1
  5542  0149C4  6FF5               	movwf	_change& (0+255),b
  5543                           
  5544                           ; BSR set to: 0
  5545  0149C6  5163               	movf	Console_FormFeed@y& (0+255),w,b
  5546  0149C8  0D14               	mullw	20
  5547  0149CA  0E18               	movlw	low _lBuffer
  5548  0149CC  6F60               	movwf	??_Console_FormFeed& (0+255),b
  5549  0149CE  0E03               	movlw	high _lBuffer
  5550  0149D0  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
  5551  0149D2  50F3               	movf	prodl,w,c
  5552  0149D4  2760               	addwf	??_Console_FormFeed& (0+255),f,b
  5553  0149D6  50F4               	movf	prodh,w,c
  5554  0149D8  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  5555  0149DA  5162               	movf	Console_FormFeed@x& (0+255),w,b
  5556  0149DC  0D01               	mullw	1
  5557  0149DE  50F3               	movf	prodl,w,c
  5558  0149E0  2560               	addwf	??_Console_FormFeed& (0+255),w,b
  5559  0149E2  6ED9               	movwf	fsr2l,c
  5560  0149E4  50F4               	movf	prodh,w,c
  5561  0149E6  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  5562  0149E8  6EDA               	movwf	fsr2h,c
  5563  0149EA  0E80               	movlw	128
  5564  0149EC  6EDF               	movwf	indf2,c
  5565                           
  5566                           ; BSR set to: 0
  5567  0149EE  2B62               	incf	Console_FormFeed@x& (0+255),f,b
  5568  0149F0  D7E4               	goto	l12633
  5569  0149F2                     u9830:
  5570                           
  5571                           ; BSR set to: 0
  5572                           
  5573                           ; BSR set to: 0
  5574  0149F2  2B63               	incf	Console_FormFeed@y& (0+255),f,b
  5575  0149F4  D7DC               	goto	l12627
  5576  0149F6                     u9840:
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;Console.c: 204: clearall = 1;
  5580                           
  5581                           ; BSR set to: 0
  5582  0149F6  0E01               	movlw	1
  5583  0149F8  6FF4               	movwf	_clearall& (0+255),b
  5584                           
  5585                           ;Console.c: 205: gCursor.x = 6;
  5586  0149FA  0E00               	movlw	0
  5587  0149FC  6E44               	movwf	_gCursor+1,c
  5588  0149FE  0E06               	movlw	6
  5589  014A00  6E43               	movwf	_gCursor,c
  5590                           
  5591                           ;Console.c: 206: gCursor.y = 6;
  5592  014A02  0E00               	movlw	0
  5593  014A04  6E46               	movwf	_gCursor+3,c
  5594  014A06  0E06               	movlw	6
  5595  014A08  6E45               	movwf	_gCursor+2,c
  5596                           
  5597                           ; BSR set to: 0
  5598  014A0A  0012               	return		;funcret
  5599  014A0C                     __end_of_Console_FormFeed:
  5600                           	opt stack 0
  5601                           tosu	equ	0xFFF
  5602                           tosh	equ	0xFFE
  5603                           tosl	equ	0xFFD
  5604                           pclath	equ	0xFFA
  5605                           tblptru	equ	0xFF8
  5606                           tblptrh	equ	0xFF7
  5607                           tblptrl	equ	0xFF6
  5608                           tablat	equ	0xFF5
  5609                           prodh	equ	0xFF4
  5610                           prodl	equ	0xFF3
  5611                           postinc0	equ	0xFEE
  5612                           wreg	equ	0xFE8
  5613                           postdec1	equ	0xFE5
  5614                           fsr1h	equ	0xFE2
  5615                           fsr1l	equ	0xFE1
  5616                           indf2	equ	0xFDF
  5617                           postinc2	equ	0xFDE
  5618                           postdec2	equ	0xFDD
  5619                           fsr2h	equ	0xFDA
  5620                           fsr2l	equ	0xFD9
  5621                           status	equ	0xFD8
  5622                           
  5623 ;; *************** function _Console_ResetCursor *****************
  5624 ;; Defined at:
  5625 ;;		line 297 in file "Library/Console.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;		None
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;		None
  5630 ;; Return value:  Size  Location     Type
  5631 ;;                  1    wreg      void 
  5632 ;; Registers used:
  5633 ;;		wreg, status,2
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 0/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;Total ram usage:        0 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; Hardware stack levels required when called:    7
  5646 ;; This function calls:
  5647 ;;		Nothing
  5648 ;; This function is called by:
  5649 ;;		_Console_PrintChar
  5650 ;; This function uses a non-reentrant model
  5651 ;;
  5652                           
  5653                           	psect	text10
  5654  0158E6                     __ptext10:
  5655                           	opt stack 0
  5656  0158E6                     _Console_ResetCursor:
  5657                           	opt stack 20
  5658                           
  5659                           ;Console.c: 299: gCursor.x = 6;
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;incstack = 0
  5663  0158E6  0E00               	movlw	0
  5664  0158E8  6E44               	movwf	_gCursor+1,c
  5665  0158EA  0E06               	movlw	6
  5666  0158EC  6E43               	movwf	_gCursor,c
  5667                           
  5668                           ;Console.c: 300: gCursor.y = 6;
  5669  0158EE  0E00               	movlw	0
  5670  0158F0  6E46               	movwf	_gCursor+3,c
  5671  0158F2  0E06               	movlw	6
  5672  0158F4  6E45               	movwf	_gCursor+2,c
  5673                           
  5674                           ;Console.c: 303: lBufferX = 0;
  5675  0158F6  0E00               	movlw	0
  5676  0158F8  0100               	movlb	0	; () banked
  5677  0158FA  6FF3               	movwf	_lBufferX& (0+255),b
  5678                           
  5679                           ;Console.c: 304: lBufferY = 0;
  5680  0158FC  0E00               	movlw	0
  5681  0158FE  6FF2               	movwf	_lBufferY& (0+255),b
  5682                           
  5683                           ; BSR set to: 0
  5684  015900  0012               	return		;funcret
  5685  015902                     __end_of_Console_ResetCursor:
  5686                           	opt stack 0
  5687                           tosu	equ	0xFFF
  5688                           tosh	equ	0xFFE
  5689                           tosl	equ	0xFFD
  5690                           pclath	equ	0xFFA
  5691                           tblptru	equ	0xFF8
  5692                           tblptrh	equ	0xFF7
  5693                           tblptrl	equ	0xFF6
  5694                           tablat	equ	0xFF5
  5695                           prodh	equ	0xFF4
  5696                           prodl	equ	0xFF3
  5697                           postinc0	equ	0xFEE
  5698                           wreg	equ	0xFE8
  5699                           postdec1	equ	0xFE5
  5700                           fsr1h	equ	0xFE2
  5701                           fsr1l	equ	0xFE1
  5702                           indf2	equ	0xFDF
  5703                           postinc2	equ	0xFDE
  5704                           postdec2	equ	0xFDD
  5705                           fsr2h	equ	0xFDA
  5706                           fsr2l	equ	0xFD9
  5707                           status	equ	0xFD8
  5708                           
  5709 ;; *************** function _Console_Backspace *****************
  5710 ;; Defined at:
  5711 ;;		line 209 in file "Library/Console.c"
  5712 ;; Parameters:    Size  Location     Type
  5713 ;;		None
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;		None
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  1    wreg      void 
  5718 ;; Registers used:
  5719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5720 ;; Tracked objects:
  5721 ;;		On entry : 0/0
  5722 ;;		On exit  : 0/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;Total ram usage:        0 bytes
  5730 ;; Hardware stack levels used:    1
  5731 ;; Hardware stack levels required when called:    8
  5732 ;; This function calls:
  5733 ;;		_Console_ClearCursor
  5734 ;; This function is called by:
  5735 ;;		_Console_PrintChar
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739                           	psect	text11
  5740  014FF0                     __ptext11:
  5741                           	opt stack 0
  5742  014FF0                     _Console_Backspace:
  5743                           	opt stack 19
  5744                           
  5745                           ;Console.c: 211: if (lBufferX > 0)
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;incstack = 0
  5749  014FF0  0100               	movlb	0	; () banked
  5750  014FF2  51F3               	movf	_lBufferX& (0+255),w,b
  5751  014FF4  B4D8               	btfsc	status,2,c
  5752  014FF6  D006               	goto	l997
  5753                           
  5754                           ; BSR set to: 0
  5755                           ;Console.c: 212: {
  5756                           ;Console.c: 213: gCursor.x -= 6;
  5757  014FF8  0EFA               	movlw	250
  5758  014FFA  2643               	addwf	_gCursor,f,c
  5759  014FFC  0EFF               	movlw	255
  5760  014FFE  2244               	addwfc	_gCursor+1,f,c
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;Console.c: 216: lBufferX --;
  5764  015000  07F3               	decf	_lBufferX& (0+255),f,b
  5765                           
  5766                           ;Console.c: 218: }
  5767  015002  D01B               	goto	l1000
  5768  015004                     l997:
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;Console.c: 219: else if (lBufferY > 0)
  5772                           
  5773                           ; BSR set to: 0
  5774  015004  51F2               	movf	_lBufferY& (0+255),w,b
  5775  015006  B4D8               	btfsc	status,2,c
  5776  015008  D00C               	goto	l999
  5777                           
  5778                           ; BSR set to: 0
  5779                           ;Console.c: 220: {
  5780                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  5781  01500A  0E00               	movlw	0
  5782  01500C  6E44               	movwf	_gCursor+1,c
  5783  01500E  0E72               	movlw	114
  5784  015010  6E43               	movwf	_gCursor,c
  5785                           
  5786                           ; BSR set to: 0
  5787                           ;Console.c: 222: gCursor.y -= 8;
  5788  015012  0EF8               	movlw	248
  5789  015014  2645               	addwf	_gCursor+2,f,c
  5790  015016  0EFF               	movlw	255
  5791  015018  2246               	addwfc	_gCursor+3,f,c
  5792                           
  5793                           ; BSR set to: 0
  5794                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  5795  01501A  0E13               	movlw	19
  5796  01501C  6FF3               	movwf	_lBufferX& (0+255),b
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;Console.c: 226: lBufferY --;
  5800  01501E  07F2               	decf	_lBufferY& (0+255),f,b
  5801                           
  5802                           ;Console.c: 228: }
  5803  015020  D00C               	goto	l1000
  5804  015022                     l999:
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;Console.c: 229: else
  5808                           ;Console.c: 230: {
  5809                           ;Console.c: 231: gCursor.x = 6;
  5810                           
  5811                           ; BSR set to: 0
  5812  015022  0E00               	movlw	0
  5813  015024  6E44               	movwf	_gCursor+1,c
  5814  015026  0E06               	movlw	6
  5815  015028  6E43               	movwf	_gCursor,c
  5816                           
  5817                           ;Console.c: 232: gCursor.y = 6;
  5818  01502A  0E00               	movlw	0
  5819  01502C  6E46               	movwf	_gCursor+3,c
  5820  01502E  0E06               	movlw	6
  5821  015030  6E45               	movwf	_gCursor+2,c
  5822                           
  5823                           ;Console.c: 235: lBufferX = 0;
  5824  015032  0E00               	movlw	0
  5825  015034  6FF3               	movwf	_lBufferX& (0+255),b
  5826                           
  5827                           ;Console.c: 236: lBufferY = 0;
  5828  015036  0E00               	movlw	0
  5829  015038  6FF2               	movwf	_lBufferY& (0+255),b
  5830  01503A                     l1000:
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;Console.c: 238: }
  5834                           ;Console.c: 240: Console_ClearCursor();
  5835                           
  5836                           ; BSR set to: 0
  5837                           
  5838                           ; BSR set to: 0
  5839  01503A  EC23  F0AB         	call	_Console_ClearCursor	;wreg free
  5840  01503E  0012               	return		;funcret
  5841  015040                     __end_of_Console_Backspace:
  5842                           	opt stack 0
  5843                           tosu	equ	0xFFF
  5844                           tosh	equ	0xFFE
  5845                           tosl	equ	0xFFD
  5846                           pclath	equ	0xFFA
  5847                           tblptru	equ	0xFF8
  5848                           tblptrh	equ	0xFF7
  5849                           tblptrl	equ	0xFF6
  5850                           tablat	equ	0xFF5
  5851                           prodh	equ	0xFF4
  5852                           prodl	equ	0xFF3
  5853                           postinc0	equ	0xFEE
  5854                           wreg	equ	0xFE8
  5855                           postdec1	equ	0xFE5
  5856                           fsr1h	equ	0xFE2
  5857                           fsr1l	equ	0xFE1
  5858                           indf2	equ	0xFDF
  5859                           postinc2	equ	0xFDE
  5860                           postdec2	equ	0xFDD
  5861                           fsr2h	equ	0xFDA
  5862                           fsr2l	equ	0xFD9
  5863                           status	equ	0xFD8
  5864                           
  5865 ;; *************** function _Console_ClearCursor *****************
  5866 ;; Defined at:
  5867 ;;		line 308 in file "Library/Console.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;		None
  5870 ;; Auto vars:     Size  Location     Type
  5871 ;;		None
  5872 ;; Return value:  Size  Location     Type
  5873 ;;                  1    wreg      void 
  5874 ;; Registers used:
  5875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5876 ;; Tracked objects:
  5877 ;;		On entry : 0/0
  5878 ;;		On exit  : 0/0
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5883 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5884 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5885 ;;Total ram usage:        2 bytes
  5886 ;; Hardware stack levels used:    1
  5887 ;; Hardware stack levels required when called:    7
  5888 ;; This function calls:
  5889 ;;		Nothing
  5890 ;; This function is called by:
  5891 ;;		_Console_Backspace
  5892 ;;		_Console_Tab
  5893 ;; This function uses a non-reentrant model
  5894 ;;
  5895                           
  5896                           	psect	text12
  5897  015646                     __ptext12:
  5898                           	opt stack 0
  5899  015646                     _Console_ClearCursor:
  5900                           	opt stack 19
  5901                           
  5902                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  5903                           
  5904                           ;incstack = 0
  5905  015646  0E01               	movlw	1
  5906  015648  0100               	movlb	0	; () banked
  5907  01564A  6FF5               	movwf	_change& (0+255),b
  5908                           
  5909                           ; BSR set to: 0
  5910  01564C  51F2               	movf	_lBufferY& (0+255),w,b
  5911  01564E  0D14               	mullw	20
  5912  015650  0E18               	movlw	low _lBuffer
  5913  015652  6F60               	movwf	??_Console_ClearCursor& (0+255),b
  5914  015654  0E03               	movlw	high _lBuffer
  5915  015656  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  5916  015658  50F3               	movf	prodl,w,c
  5917  01565A  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
  5918  01565C  50F4               	movf	prodh,w,c
  5919  01565E  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  5920  015660  51F3               	movf	_lBufferX& (0+255),w,b
  5921  015662  0D01               	mullw	1
  5922  015664  50F3               	movf	prodl,w,c
  5923  015666  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
  5924  015668  6ED9               	movwf	fsr2l,c
  5925  01566A  50F4               	movf	prodh,w,c
  5926  01566C  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  5927  01566E  6EDA               	movwf	fsr2h,c
  5928  015670  0E80               	movlw	128
  5929  015672  6EDF               	movwf	indf2,c
  5930                           
  5931                           ; BSR set to: 0
  5932  015674  0012               	return		;funcret
  5933  015676                     __end_of_Console_ClearCursor:
  5934                           	opt stack 0
  5935                           tosu	equ	0xFFF
  5936                           tosh	equ	0xFFE
  5937                           tosl	equ	0xFFD
  5938                           pclath	equ	0xFFA
  5939                           tblptru	equ	0xFF8
  5940                           tblptrh	equ	0xFF7
  5941                           tblptrl	equ	0xFF6
  5942                           tablat	equ	0xFF5
  5943                           prodh	equ	0xFF4
  5944                           prodl	equ	0xFF3
  5945                           postinc0	equ	0xFEE
  5946                           wreg	equ	0xFE8
  5947                           postdec1	equ	0xFE5
  5948                           fsr1h	equ	0xFE2
  5949                           fsr1l	equ	0xFE1
  5950                           indf2	equ	0xFDF
  5951                           postinc2	equ	0xFDE
  5952                           postdec2	equ	0xFDD
  5953                           fsr2h	equ	0xFDA
  5954                           fsr2l	equ	0xFD9
  5955                           status	equ	0xFD8
  5956                           
  5957 ;; *************** function _Turn *****************
  5958 ;; Defined at:
  5959 ;;		line 255 in file "dans.c"
  5960 ;; Parameters:    Size  Location     Type
  5961 ;;  Angle           2    1[BANK0 ] int 
  5962 ;;  Speed           2    3[BANK0 ] int 
  5963 ;;  Dir             2    5[BANK0 ] int 
  5964 ;; Auto vars:     Size  Location     Type
  5965 ;;  Rad             2    9[BANK0 ] int 
  5966 ;;  C_Angle         2    7[BANK0 ] int 
  5967 ;; Return value:  Size  Location     Type
  5968 ;;                  2    1[BANK0 ] int 
  5969 ;; Registers used:
  5970 ;;		wreg, status,2, status,0, cstack
  5971 ;; Tracked objects:
  5972 ;;		On entry : 0/0
  5973 ;;		On exit  : 0/0
  5974 ;;		Unchanged: 0/0
  5975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5976 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5977 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5979 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5980 ;;Total ram usage:       10 bytes
  5981 ;; Hardware stack levels used:    1
  5982 ;; Hardware stack levels required when called:    9
  5983 ;; This function calls:
  5984 ;;		_Robot_Stop
  5985 ;;		_eusartRec
  5986 ;;		_eusartSend
  5987 ;; This function is called by:
  5988 ;;		_Travel
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           	psect	text13
  5993  0147D0                     __ptext13:
  5994                           	opt stack 0
  5995  0147D0                     _Turn:
  5996                           	opt stack 19
  5997                           
  5998                           ;dans.c: 256: int Rad = 1;
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;incstack = 0
  6002  0147D0  0E00               	movlw	0
  6003  0147D2  0100               	movlb	0	; () banked
  6004  0147D4  6F6A               	movwf	(Turn@Rad+1)& (0+255),b
  6005  0147D6  0E01               	movlw	1
  6006  0147D8  6F69               	movwf	Turn@Rad& (0+255),b
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;dans.c: 257: if (Dir == 0){
  6010  0147DA  5165               	movf	Turn@Dir& (0+255),w,b
  6011  0147DC  1166               	iorwf	(Turn@Dir+1)& (0+255),w,b
  6012  0147DE  A4D8               	btfss	status,2,c
  6013  0147E0  D004               	goto	l2375
  6014                           
  6015                           ; BSR set to: 0
  6016                           ;dans.c: 258: Rad = 65535;
  6017  0147E2  6969               	setf	Turn@Rad& (0+255),b
  6018  0147E4  696A               	setf	(Turn@Rad+1)& (0+255),b
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;dans.c: 259: Angle = ~Angle;
  6022  0147E6  1F61               	comf	Turn@Angle& (0+255),f,b
  6023  0147E8  1F62               	comf	(Turn@Angle+1)& (0+255),f,b
  6024  0147EA                     l2375:
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;dans.c: 260: }
  6028                           ;dans.c: 262: eusartSend(137);
  6029                           
  6030                           ; BSR set to: 0
  6031  0147EA  0E89               	movlw	137
  6032  0147EC  EC64  F0AD         	call	_eusartSend
  6033                           
  6034                           ;dans.c: 263: eusartSend(((unsigned char)(((Speed)>>8)&0xFF)));
  6035  0147F0  0100               	movlb	0	; () banked
  6036  0147F2  5164               	movf	(Turn@Speed+1)& (0+255),w,b
  6037  0147F4  EC64  F0AD         	call	_eusartSend
  6038                           
  6039                           ;dans.c: 264: eusartSend(((unsigned char)((Speed)&0xFF)));
  6040  0147F8  0100               	movlb	0	; () banked
  6041  0147FA  5163               	movf	Turn@Speed& (0+255),w,b
  6042  0147FC  EC64  F0AD         	call	_eusartSend
  6043                           
  6044                           ;dans.c: 265: eusartSend(((unsigned char)(((Rad)>>8)&0xFF)));
  6045  014800  0100               	movlb	0	; () banked
  6046  014802  516A               	movf	(Turn@Rad+1)& (0+255),w,b
  6047  014804  EC64  F0AD         	call	_eusartSend
  6048                           
  6049                           ;dans.c: 266: eusartSend(((unsigned char)((Rad)&0xFF)));
  6050  014808  0100               	movlb	0	; () banked
  6051  01480A  5169               	movf	Turn@Rad& (0+255),w,b
  6052  01480C  EC64  F0AD         	call	_eusartSend
  6053                           
  6054                           ;dans.c: 267: int C_Angle = 0;
  6055  014810  0E00               	movlw	0
  6056  014812  0100               	movlb	0	; () banked
  6057  014814  6F68               	movwf	(Turn@C_Angle+1)& (0+255),b
  6058  014816  0E00               	movlw	0
  6059  014818  6F67               	movwf	Turn@C_Angle& (0+255),b
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;dans.c: 268: eusartSend(157);
  6063  01481A  0E9D               	movlw	157
  6064  01481C  EC64  F0AD         	call	_eusartSend
  6065                           
  6066                           ;dans.c: 269: eusartSend(((unsigned char)(((Angle)>>8)&0xFF)));
  6067  014820  0100               	movlb	0	; () banked
  6068  014822  5162               	movf	(Turn@Angle+1)& (0+255),w,b
  6069  014824  EC64  F0AD         	call	_eusartSend
  6070                           
  6071                           ;dans.c: 270: eusartSend(((unsigned char)((Angle)&0xFF)));
  6072  014828  0100               	movlb	0	; () banked
  6073  01482A  5161               	movf	Turn@Angle& (0+255),w,b
  6074  01482C  EC64  F0AD         	call	_eusartSend
  6075                           
  6076                           ;dans.c: 272: Robot_Stop();
  6077  014830  EC24  F0AC         	call	_Robot_Stop	;wreg free
  6078                           
  6079                           ;dans.c: 274: eusartSend(142);
  6080  014834  0E8E               	movlw	142
  6081  014836  EC64  F0AD         	call	_eusartSend
  6082                           
  6083                           ;dans.c: 275: eusartSend(7);
  6084  01483A  0E07               	movlw	7
  6085  01483C  EC64  F0AD         	call	_eusartSend
  6086                           
  6087                           ;dans.c: 276: eusartRec();
  6088  014840  EC96  F0AD         	call	_eusartRec	;wreg free
  6089  014844  0012               	return		;funcret
  6090  014846                     __end_of_Turn:
  6091                           	opt stack 0
  6092                           tosu	equ	0xFFF
  6093                           tosh	equ	0xFFE
  6094                           tosl	equ	0xFFD
  6095                           pclath	equ	0xFFA
  6096                           tblptru	equ	0xFF8
  6097                           tblptrh	equ	0xFF7
  6098                           tblptrl	equ	0xFF6
  6099                           tablat	equ	0xFF5
  6100                           prodh	equ	0xFF4
  6101                           prodl	equ	0xFF3
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           postdec1	equ	0xFE5
  6105                           fsr1h	equ	0xFE2
  6106                           fsr1l	equ	0xFE1
  6107                           indf2	equ	0xFDF
  6108                           postinc2	equ	0xFDE
  6109                           postdec2	equ	0xFDD
  6110                           fsr2h	equ	0xFDA
  6111                           fsr2l	equ	0xFD9
  6112                           status	equ	0xFD8
  6113                           
  6114 ;; *************** function _Get_VirtualWall_State *****************
  6115 ;; Defined at:
  6116 ;;		line 249 in file "dans.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;		None
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;  Vitual_Wall_    2    4[BANK0 ] int 
  6121 ;; Return value:  Size  Location     Type
  6122 ;;                  2    1[BANK0 ] int 
  6123 ;; Registers used:
  6124 ;;		wreg, status,2, status,0, cstack
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6130 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6131 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6132 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6133 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6134 ;;Total ram usage:        5 bytes
  6135 ;; Hardware stack levels used:    1
  6136 ;; Hardware stack levels required when called:    8
  6137 ;; This function calls:
  6138 ;;		_eusartRec
  6139 ;;		_eusartSend
  6140 ;; This function is called by:
  6141 ;;		_Travel
  6142 ;; This function uses a non-reentrant model
  6143 ;;
  6144                           
  6145                           	psect	text14
  6146  015824                     __ptext14:
  6147                           	opt stack 0
  6148  015824                     _Get_VirtualWall_State:
  6149                           	opt stack 20
  6150                           
  6151                           ;dans.c: 250: eusartSend(142);
  6152                           
  6153                           ;incstack = 0
  6154  015824  0E8E               	movlw	142
  6155  015826  EC64  F0AD         	call	_eusartSend
  6156                           
  6157                           ;dans.c: 251: eusartSend(13);
  6158  01582A  0E0D               	movlw	13
  6159  01582C  EC64  F0AD         	call	_eusartSend
  6160                           
  6161                           ;dans.c: 252: int Vitual_Wall_Sensor = (eusartRec());
  6162  015830  EC96  F0AD         	call	_eusartRec	;wreg free
  6163  015834  0100               	movlb	0	; () banked
  6164  015836  6F63               	movwf	??_Get_VirtualWall_State& (0+255),b
  6165  015838  5163               	movf	??_Get_VirtualWall_State& (0+255),w,b
  6166  01583A  6F64               	movwf	Get_VirtualWall_State@Vitual_Wall_Sensor& (0+255),b
  6167  01583C  6B65               	clrf	(Get_VirtualWall_State@Vitual_Wall_Sensor+1)& (0+255),b
  6168                           
  6169                           ; BSR set to: 0
  6170                           ;dans.c: 253: return Vitual_Wall_Sensor;
  6171  01583E  C064  F061         	movff	Get_VirtualWall_State@Vitual_Wall_Sensor,?_Get_VirtualWall_State
  6172  015842  C065  F062         	movff	Get_VirtualWall_State@Vitual_Wall_Sensor+1,?_Get_VirtualWall_State+1
  6173  015846  0012               	return	
  6174  015848                     __end_of_Get_VirtualWall_State:
  6175                           	opt stack 0
  6176                           tosu	equ	0xFFF
  6177                           tosh	equ	0xFFE
  6178                           tosl	equ	0xFFD
  6179                           pclath	equ	0xFFA
  6180                           tblptru	equ	0xFF8
  6181                           tblptrh	equ	0xFF7
  6182                           tblptrl	equ	0xFF6
  6183                           tablat	equ	0xFF5
  6184                           prodh	equ	0xFF4
  6185                           prodl	equ	0xFF3
  6186                           postinc0	equ	0xFEE
  6187                           wreg	equ	0xFE8
  6188                           postdec1	equ	0xFE5
  6189                           fsr1h	equ	0xFE2
  6190                           fsr1l	equ	0xFE1
  6191                           indf2	equ	0xFDF
  6192                           postinc2	equ	0xFDE
  6193                           postdec2	equ	0xFDD
  6194                           fsr2h	equ	0xFDA
  6195                           fsr2l	equ	0xFD9
  6196                           status	equ	0xFD8
  6197                           
  6198 ;; *************** function _Drive *****************
  6199 ;; Defined at:
  6200 ;;		line 217 in file "dans.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;  SpeedL          2    1[BANK0 ] int 
  6203 ;;  SpeedR          2    3[BANK0 ] int 
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;		None
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  1    wreg      void 
  6208 ;; Registers used:
  6209 ;;		wreg, status,2, status,0, cstack
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6215 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;Total ram usage:        4 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    8
  6222 ;; This function calls:
  6223 ;;		_eusartSend
  6224 ;; This function is called by:
  6225 ;;		_Travel
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229                           	psect	text15
  6230  01512C                     __ptext15:
  6231                           	opt stack 0
  6232  01512C                     _Drive:
  6233                           	opt stack 20
  6234                           
  6235                           ;dans.c: 218: if (SpeedL < 0){
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;incstack = 0
  6239  01512C  0100               	movlb	0	; () banked
  6240  01512E  AF62               	btfss	(Drive@SpeedL+1)& (0+255),7,b
  6241  015130  D006               	goto	l2361
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;dans.c: 219: SpeedL = -1*SpeedL;
  6245  015132  6D61               	negf	Drive@SpeedL& (0+255),b
  6246  015134  1F62               	comf	(Drive@SpeedL+1)& (0+255),f,b
  6247  015136  B0D8               	btfsc	status,0,c
  6248  015138  2B62               	incf	(Drive@SpeedL+1)& (0+255),f,b
  6249                           
  6250                           ;dans.c: 220: SpeedL = ~SpeedL;
  6251  01513A  1F61               	comf	Drive@SpeedL& (0+255),f,b
  6252  01513C  1F62               	comf	(Drive@SpeedL+1)& (0+255),f,b
  6253  01513E                     l2361:
  6254                           
  6255                           ; BSR set to: 0
  6256                           ;dans.c: 221: }
  6257                           ;dans.c: 222: if (SpeedR < 0){
  6258                           
  6259                           ; BSR set to: 0
  6260  01513E  AF64               	btfss	(Drive@SpeedR+1)& (0+255),7,b
  6261  015140  D006               	goto	l2362
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;dans.c: 223: SpeedR = -1*SpeedR;
  6265  015142  6D63               	negf	Drive@SpeedR& (0+255),b
  6266  015144  1F64               	comf	(Drive@SpeedR+1)& (0+255),f,b
  6267  015146  B0D8               	btfsc	status,0,c
  6268  015148  2B64               	incf	(Drive@SpeedR+1)& (0+255),f,b
  6269                           
  6270                           ;dans.c: 224: SpeedR = ~SpeedR;
  6271  01514A  1F63               	comf	Drive@SpeedR& (0+255),f,b
  6272  01514C  1F64               	comf	(Drive@SpeedR+1)& (0+255),f,b
  6273  01514E                     l2362:
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;dans.c: 225: }
  6277                           ;dans.c: 227: eusartSend(145);
  6278                           
  6279                           ; BSR set to: 0
  6280  01514E  0E91               	movlw	145
  6281  015150  EC64  F0AD         	call	_eusartSend
  6282                           
  6283                           ;dans.c: 228: eusartSend(((unsigned char)(((SpeedL)>>8)&0xFF)));
  6284  015154  0100               	movlb	0	; () banked
  6285  015156  5162               	movf	(Drive@SpeedL+1)& (0+255),w,b
  6286  015158  EC64  F0AD         	call	_eusartSend
  6287                           
  6288                           ;dans.c: 229: eusartSend(((unsigned char)((SpeedL)&0xFF)));
  6289  01515C  0100               	movlb	0	; () banked
  6290  01515E  5161               	movf	Drive@SpeedL& (0+255),w,b
  6291  015160  EC64  F0AD         	call	_eusartSend
  6292                           
  6293                           ;dans.c: 230: eusartSend(((unsigned char)(((SpeedR)>>8)&0xFF)));
  6294  015164  0100               	movlb	0	; () banked
  6295  015166  5164               	movf	(Drive@SpeedR+1)& (0+255),w,b
  6296  015168  EC64  F0AD         	call	_eusartSend
  6297                           
  6298                           ;dans.c: 231: eusartSend(((unsigned char)((SpeedR)&0xFF)));
  6299  01516C  0100               	movlb	0	; () banked
  6300  01516E  5163               	movf	Drive@SpeedR& (0+255),w,b
  6301  015170  EC64  F0AD         	call	_eusartSend
  6302  015174  0012               	return		;funcret
  6303  015176                     __end_of_Drive:
  6304                           	opt stack 0
  6305                           tosu	equ	0xFFF
  6306                           tosh	equ	0xFFE
  6307                           tosl	equ	0xFFD
  6308                           pclath	equ	0xFFA
  6309                           tblptru	equ	0xFF8
  6310                           tblptrh	equ	0xFF7
  6311                           tblptrl	equ	0xFF6
  6312                           tablat	equ	0xFF5
  6313                           prodh	equ	0xFF4
  6314                           prodl	equ	0xFF3
  6315                           postinc0	equ	0xFEE
  6316                           wreg	equ	0xFE8
  6317                           postdec1	equ	0xFE5
  6318                           fsr1h	equ	0xFE2
  6319                           fsr1l	equ	0xFE1
  6320                           indf2	equ	0xFDF
  6321                           postinc2	equ	0xFDE
  6322                           postdec2	equ	0xFDD
  6323                           fsr2h	equ	0xFDA
  6324                           fsr2l	equ	0xFD9
  6325                           status	equ	0xFD8
  6326                           
  6327 ;; *************** function _Console_Render *****************
  6328 ;; Defined at:
  6329 ;;		line 377 in file "Library/Console.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;		None
  6332 ;; Auto vars:     Size  Location     Type
  6333 ;;  lCursor         4   38[BANK0 ] struct Point
  6334 ;;  y               1   43[BANK0 ] unsigned char 
  6335 ;;  x               1   42[BANK0 ] unsigned char 
  6336 ;;  temp            1   37[BANK0 ] unsigned char 
  6337 ;;  Temp            2    0        unsigned short 
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  1    wreg      void 
  6340 ;; Registers used:
  6341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6348 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6351 ;;Total ram usage:        9 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; Hardware stack levels required when called:   11
  6354 ;; This function calls:
  6355 ;;		_Console_MakeField
  6356 ;;		_LCD_DrawField
  6357 ;;		_LCD_FillRectangle
  6358 ;; This function is called by:
  6359 ;;		_main
  6360 ;;		_Travel
  6361 ;;		_movement1
  6362 ;;		_Sensor_Observe
  6363 ;;		_Closest_Object
  6364 ;;		_Init_Pos_Array
  6365 ;;		_Find_Flag
  6366 ;;		_Move_ADC_To
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370                           	psect	text16
  6371  011FEC                     __ptext16:
  6372                           	opt stack 0
  6373  011FEC                     _Console_Render:
  6374                           	opt stack 17
  6375                           
  6376                           ;Console.c: 379: Colour Temp;
  6377                           ;Console.c: 380: if (change)
  6378                           
  6379                           ;incstack = 0
  6380  011FEC  0100               	movlb	0	; () banked
  6381  011FEE  51F5               	movf	_change& (0+255),w,b
  6382  011FF0  B4D8               	btfsc	status,2,c
  6383  011FF2  0012               	return	
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;Console.c: 381: {
  6387                           ;Console.c: 382: UINT8 x, y, temp;
  6388                           ;Console.c: 383: Point lCursor = {6,6};
  6389  011FF4  C1E5  F086         	movff	Console_Render@F6956,Console_Render@lCursor
  6390  011FF8  C1E6  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  6391  011FFC  C1E7  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  6392  012000  C1E8  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;Console.c: 385: if (clearall)
  6396  012004  51F4               	movf	_clearall& (0+255),w,b
  6397  012006  B4D8               	btfsc	status,2,c
  6398  012008  D004               	goto	l1056
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;Console.c: 386: {
  6402                           ;Console.c: 389: temp = lBufferY;
  6403  01200A  C0F2  F085         	movff	_lBufferY,Console_Render@temp
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  6407  01200E  0E0F               	movlw	15
  6408  012010  6FF2               	movwf	_lBufferY& (0+255),b
  6409  012012                     l1056:
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;Console.c: 391: }
  6413                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  6414  012012  0E00               	movlw	0
  6415  012014  6F8B               	movwf	Console_Render@y& (0+255),b
  6416  012016  D0B9               	goto	l1057
  6417  012018                     
  6418                           ; BSR set to: 0
  6419                           ;Console.c: 394: {
  6420                           ;Console.c: 395: gForecolour = lCBuffer[y];
  6421                           
  6422                           ; BSR set to: 0
  6423  012018  518B               	movf	Console_Render@y& (0+255),w,b
  6424  01201A  0D02               	mullw	2
  6425  01201C  0E50               	movlw	low _lCBuffer
  6426  01201E  24F3               	addwf	prodl,w,c
  6427  012020  6ED9               	movwf	fsr2l,c
  6428  012022  0E02               	movlw	high _lCBuffer
  6429  012024  20F4               	addwfc	prodh,w,c
  6430  012026  6EDA               	movwf	fsr2h,c
  6431  012028  CFDE F1F9          	movff	postinc2,_gForecolour
  6432  01202C  CFDD F1FA          	movff	postdec2,_gForecolour+1
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  6436  012030  0E00               	movlw	0
  6437  012032  6F8A               	movwf	Console_Render@x& (0+255),b
  6438  012034                     l14607:
  6439                           
  6440                           ; BSR set to: 0
  6441  012034  0E13               	movlw	19
  6442  012036  658A               	cpfsgt	Console_Render@x& (0+255),b
  6443  012038  D001               	goto	l1059
  6444  01203A  D09E               	goto	u11960
  6445  01203C                     l1059:
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;Console.c: 397: {
  6449                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  6450                           
  6451                           ; BSR set to: 0
  6452  01203C  518B               	movf	Console_Render@y& (0+255),w,b
  6453  01203E  0D14               	mullw	20
  6454  012040  0E18               	movlw	low _lBuffer
  6455  012042  6F83               	movwf	??_Console_Render& (0+255),b
  6456  012044  0E03               	movlw	high _lBuffer
  6457  012046  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  6458  012048  50F3               	movf	prodl,w,c
  6459  01204A  2783               	addwf	??_Console_Render& (0+255),f,b
  6460  01204C  50F4               	movf	prodh,w,c
  6461  01204E  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  6462  012050  518A               	movf	Console_Render@x& (0+255),w,b
  6463  012052  0D01               	mullw	1
  6464  012054  50F3               	movf	prodl,w,c
  6465  012056  2583               	addwf	??_Console_Render& (0+255),w,b
  6466  012058  6ED9               	movwf	fsr2l,c
  6467  01205A  50F4               	movf	prodh,w,c
  6468  01205C  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  6469  01205E  6EDA               	movwf	fsr2h,c
  6470  012060  AEDF               	btfss	indf2,7,c
  6471  012062  D083               	goto	l1063
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;Console.c: 399: {
  6475                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
  6476  012064  518B               	movf	Console_Render@y& (0+255),w,b
  6477  012066  0D14               	mullw	20
  6478  012068  0E18               	movlw	low _lBuffer
  6479  01206A  6F83               	movwf	??_Console_Render& (0+255),b
  6480  01206C  0E03               	movlw	high _lBuffer
  6481  01206E  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  6482  012070  50F3               	movf	prodl,w,c
  6483  012072  2783               	addwf	??_Console_Render& (0+255),f,b
  6484  012074  50F4               	movf	prodh,w,c
  6485  012076  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  6486  012078  518A               	movf	Console_Render@x& (0+255),w,b
  6487  01207A  0D01               	mullw	1
  6488  01207C  50F3               	movf	prodl,w,c
  6489  01207E  2583               	addwf	??_Console_Render& (0+255),w,b
  6490  012080  6ED9               	movwf	fsr2l,c
  6491  012082  50F4               	movf	prodh,w,c
  6492  012084  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  6493  012086  6EDA               	movwf	fsr2h,c
  6494  012088  0E7F               	movlw	127
  6495  01208A  16DF               	andwf	indf2,f,c
  6496                           
  6497                           ;Console.c: 401: if (lBuffer[y][x])
  6498  01208C  518B               	movf	Console_Render@y& (0+255),w,b
  6499  01208E  0D14               	mullw	20
  6500  012090  0E18               	movlw	low _lBuffer
  6501  012092  6F83               	movwf	??_Console_Render& (0+255),b
  6502  012094  0E03               	movlw	high _lBuffer
  6503  012096  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  6504  012098  50F3               	movf	prodl,w,c
  6505  01209A  2783               	addwf	??_Console_Render& (0+255),f,b
  6506  01209C  50F4               	movf	prodh,w,c
  6507  01209E  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  6508  0120A0  518A               	movf	Console_Render@x& (0+255),w,b
  6509  0120A2  0D01               	mullw	1
  6510  0120A4  50F3               	movf	prodl,w,c
  6511  0120A6  2583               	addwf	??_Console_Render& (0+255),w,b
  6512  0120A8  6ED9               	movwf	fsr2l,c
  6513  0120AA  50F4               	movf	prodh,w,c
  6514  0120AC  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  6515  0120AE  6EDA               	movwf	fsr2h,c
  6516  0120B0  50DF               	movf	indf2,w,c
  6517  0120B2  B4D8               	btfsc	status,2,c
  6518  0120B4  D043               	goto	l1062
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;Console.c: 402: {
  6522                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
  6523  0120B6  C035  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
  6524  0120BA  C036  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
  6525  0120BE  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  6526  0120C2  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  6527  0120C6  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  6528  0120CA  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  6529  0120CE  C1ED  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
  6530  0120D2  C1EE  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  6531  0120D6  C1EF  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  6532  0120DA  C1F0  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  6533  0120DE  EC27  F0A7         	call	_LCD_FillRectangle	;wreg free
  6534                           
  6535                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
  6536  0120E2  0100               	movlb	0	; () banked
  6537  0120E4  518B               	movf	Console_Render@y& (0+255),w,b
  6538  0120E6  0D14               	mullw	20
  6539  0120E8  0E18               	movlw	low _lBuffer
  6540  0120EA  6F83               	movwf	??_Console_Render& (0+255),b
  6541  0120EC  0E03               	movlw	high _lBuffer
  6542  0120EE  6F84               	movwf	(??_Console_Render+1)& (0+255),b
  6543  0120F0  50F3               	movf	prodl,w,c
  6544  0120F2  2783               	addwf	??_Console_Render& (0+255),f,b
  6545  0120F4  50F4               	movf	prodh,w,c
  6546  0120F6  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
  6547  0120F8  518A               	movf	Console_Render@x& (0+255),w,b
  6548  0120FA  0D01               	mullw	1
  6549  0120FC  50F3               	movf	prodl,w,c
  6550  0120FE  2583               	addwf	??_Console_Render& (0+255),w,b
  6551  012100  6ED9               	movwf	fsr2l,c
  6552  012102  50F4               	movf	prodh,w,c
  6553  012104  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
  6554  012106  6EDA               	movwf	fsr2h,c
  6555  012108  50DF               	movf	indf2,w,c
  6556  01210A  EC39  F09F         	call	_Console_MakeField
  6557  01210E  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
  6558  012112  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
  6559  012116  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
  6560  01211A  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
  6561  01211E  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
  6562  012122  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
  6563  012126  C1ED  F078         	movff	_gCharSize,LCD_DrawField@pSize
  6564  01212A  C1EE  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
  6565  01212E  C1EF  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
  6566  012132  C1F0  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
  6567  012136  ECF1  F0A2         	call	_LCD_DrawField	;wreg free
  6568                           
  6569                           ;Console.c: 405: }
  6570  01213A  D017               	goto	l1063
  6571  01213C                     l1062:
  6572                           
  6573                           ;Console.c: 406: else
  6574                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
  6575  01213C  0E00               	movlw	0
  6576  01213E  0100               	movlb	0	; () banked
  6577  012140  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
  6578  012142  0E00               	movlw	0
  6579  012144  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
  6580  012146  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  6581  01214A  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  6582  01214E  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  6583  012152  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  6584  012156  C1ED  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
  6585  01215A  C1EE  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  6586  01215E  C1EF  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  6587  012162  C1F0  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  6588  012166  EC27  F0A7         	call	_LCD_FillRectangle	;wreg free
  6589  01216A                     l1063:
  6590                           
  6591                           ;Console.c: 408: }
  6592                           ;Console.c: 409: lCursor.x += (5 + 1);
  6593  01216A  0E06               	movlw	6
  6594  01216C  0100               	movlb	0	; () banked
  6595  01216E  2786               	addwf	Console_Render@lCursor& (0+255),f,b
  6596  012170  0E00               	movlw	0
  6597  012172  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
  6598                           
  6599                           ; BSR set to: 0
  6600  012174  2B8A               	incf	Console_Render@x& (0+255),f,b
  6601  012176  D75E               	goto	l14607
  6602  012178                     u11960:
  6603                           
  6604                           ; BSR set to: 0
  6605                           ;Console.c: 410: }
  6606                           ;Console.c: 411: lCursor.y += (7 + 1);
  6607                           
  6608                           ; BSR set to: 0
  6609  012178  0E08               	movlw	8
  6610  01217A  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
  6611  01217C  0E00               	movlw	0
  6612  01217E  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;Console.c: 412: lCursor.x = 6;
  6616  012180  0E00               	movlw	0
  6617  012182  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
  6618  012184  0E06               	movlw	6
  6619  012186  6F86               	movwf	Console_Render@lCursor& (0+255),b
  6620                           
  6621                           ; BSR set to: 0
  6622  012188  2B8B               	incf	Console_Render@y& (0+255),f,b
  6623  01218A                     l1057:
  6624                           
  6625                           ; BSR set to: 0
  6626                           
  6627                           ; BSR set to: 0
  6628  01218A  518B               	movf	Console_Render@y& (0+255),w,b
  6629  01218C  5DF2               	subwf	_lBufferY& (0+255),w,b
  6630  01218E  B0D8               	btfsc	status,0,c
  6631  012190  D743               	goto	l1058
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;Console.c: 413: }
  6635                           ;Console.c: 415: if (clearall)
  6636                           
  6637                           ; BSR set to: 0
  6638  012192  51F4               	movf	_clearall& (0+255),w,b
  6639  012194  B4D8               	btfsc	status,2,c
  6640  012196  0012               	return	
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;Console.c: 416: {
  6644                           ;Console.c: 417: clearall = 0;
  6645  012198  0E00               	movlw	0
  6646  01219A  6FF4               	movwf	_clearall& (0+255),b
  6647                           
  6648                           ; BSR set to: 0
  6649                           ;Console.c: 418: lBufferY = temp;
  6650  01219C  C085  F0F2         	movff	Console_Render@temp,_lBufferY
  6651                           
  6652                           ; BSR set to: 0
  6653  0121A0  0012               	return	
  6654  0121A2                     __end_of_Console_Render:
  6655                           	opt stack 0
  6656                           tosu	equ	0xFFF
  6657                           tosh	equ	0xFFE
  6658                           tosl	equ	0xFFD
  6659                           pclath	equ	0xFFA
  6660                           tblptru	equ	0xFF8
  6661                           tblptrh	equ	0xFF7
  6662                           tblptrl	equ	0xFF6
  6663                           tablat	equ	0xFF5
  6664                           prodh	equ	0xFF4
  6665                           prodl	equ	0xFF3
  6666                           postinc0	equ	0xFEE
  6667                           wreg	equ	0xFE8
  6668                           postdec1	equ	0xFE5
  6669                           fsr1h	equ	0xFE2
  6670                           fsr1l	equ	0xFE1
  6671                           indf2	equ	0xFDF
  6672                           postinc2	equ	0xFDE
  6673                           postdec2	equ	0xFDD
  6674                           fsr2h	equ	0xFDA
  6675                           fsr2l	equ	0xFD9
  6676                           status	equ	0xFD8
  6677                           
  6678 ;; *************** function _LCD_FillRectangle *****************
  6679 ;; Defined at:
  6680 ;;		line 318 in file "Library/LCD.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;  pColour         2    9[BANK0 ] unsigned short 
  6683 ;;  pPoint          4   11[BANK0 ] struct Point
  6684 ;;  pSize           4   15[BANK0 ] struct Point
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;  j               1   22[BANK0 ] unsigned char 
  6687 ;;  i               1   21[BANK0 ] unsigned char 
  6688 ;; Return value:  Size  Location     Type
  6689 ;;                  1    wreg      void 
  6690 ;; Registers used:
  6691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6697 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;Total ram usage:       14 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:   10
  6704 ;; This function calls:
  6705 ;;		_LCD_Word_Write
  6706 ;;		_Set_Addr_Window
  6707 ;; This function is called by:
  6708 ;;		_Console_Render
  6709 ;;		_Console_ClearLine
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           	psect	text17
  6714  014E4E                     __ptext17:
  6715                           	opt stack 0
  6716  014E4E                     _LCD_FillRectangle:
  6717                           	opt stack 17
  6718                           
  6719                           ;LCD.c: 320: UINT8 i = 0x00;
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;incstack = 0
  6723  014E4E  0E00               	movlw	0
  6724  014E50  0100               	movlb	0	; () banked
  6725  014E52  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
  6726                           
  6727                           ;LCD.c: 321: UINT8 j = 0x00;
  6728  014E54  0E00               	movlw	0
  6729  014E56  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
  6733  014E58  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
  6734  014E5C  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  6735  014E5E  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
  6736  014E60  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
  6737  014E62  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
  6738  014E64  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  6739  014E66  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
  6740  014E68  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
  6741  014E6A  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
  6742  014E6C  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
  6743  014E6E  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  6744  014E70  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
  6745  014E72  EC79  F0A0         	call	_Set_Addr_Window
  6746                           
  6747                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
  6748  014E76  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
  6749  014E7A  0100               	movlb	0	; () banked
  6750  014E7C  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
  6751  014E7E  B4D8               	btfsc	status,2,c
  6752  014E80  0012               	return	
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
  6756                           
  6757                           ; BSR set to: 0
  6758  014E82  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
  6759  014E86                     l13909:
  6760                           
  6761                           ; BSR set to: 0
  6762  014E86  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
  6763  014E88  B4D8               	btfsc	status,2,c
  6764  014E8A  D009               	goto	u11230
  6765                           
  6766                           ; BSR set to: 0
  6767                           ;LCD.c: 333: LCD_Word_Write(pColour);
  6768                           
  6769                           ; BSR set to: 0
  6770                           
  6771                           ; BSR set to: 0
  6772  014E8C  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
  6773  014E90  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
  6774  014E94  EC8F  F0AC         	call	_LCD_Word_Write	;wreg free
  6775  014E98  0100               	movlb	0	; () banked
  6776  014E9A  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
  6777  014E9C  D7F4               	goto	l13909
  6778  014E9E                     u11230:
  6779                           
  6780                           ; BSR set to: 0
  6781                           
  6782                           ; BSR set to: 0
  6783  014E9E  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
  6784  014EA0  D7ED               	goto	L2
  6785  014EA2                     __end_of_LCD_FillRectangle:
  6786                           	opt stack 0
  6787                           tosu	equ	0xFFF
  6788                           tosh	equ	0xFFE
  6789                           tosl	equ	0xFFD
  6790                           pclath	equ	0xFFA
  6791                           tblptru	equ	0xFF8
  6792                           tblptrh	equ	0xFF7
  6793                           tblptrl	equ	0xFF6
  6794                           tablat	equ	0xFF5
  6795                           prodh	equ	0xFF4
  6796                           prodl	equ	0xFF3
  6797                           postinc0	equ	0xFEE
  6798                           wreg	equ	0xFE8
  6799                           postdec1	equ	0xFE5
  6800                           fsr1h	equ	0xFE2
  6801                           fsr1l	equ	0xFE1
  6802                           indf2	equ	0xFDF
  6803                           postinc2	equ	0xFDE
  6804                           postdec2	equ	0xFDD
  6805                           fsr2h	equ	0xFDA
  6806                           fsr2l	equ	0xFD9
  6807                           status	equ	0xFD8
  6808                           
  6809 ;; *************** function _LCD_DrawField *****************
  6810 ;; Defined at:
  6811 ;;		line 393 in file "Library/LCD.c"
  6812 ;; Parameters:    Size  Location     Type
  6813 ;;  pField          2   18[BANK0 ] PTR unsigned short 
  6814 ;;		 -> Console_MakeField@Fill(70), 
  6815 ;;  pPoint          4   20[BANK0 ] struct Point
  6816 ;;  pSize           4   24[BANK0 ] struct Point
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;  count           2   30[BANK0 ] unsigned short 
  6819 ;;  i               1   34[BANK0 ] unsigned char 
  6820 ;;  ymax            1   33[BANK0 ] unsigned char 
  6821 ;;  xmax            1   32[BANK0 ] unsigned char 
  6822 ;; Return value:  Size  Location     Type
  6823 ;;                  1    wreg      void 
  6824 ;; Registers used:
  6825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6826 ;; Tracked objects:
  6827 ;;		On entry : 0/0
  6828 ;;		On exit  : 0/0
  6829 ;;		Unchanged: 0/0
  6830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6831 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6832 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6833 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6834 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;Total ram usage:       17 bytes
  6836 ;; Hardware stack levels used:    1
  6837 ;; Hardware stack levels required when called:   10
  6838 ;; This function calls:
  6839 ;;		_LCD_Word_Write
  6840 ;;		_Set_Addr_Window
  6841 ;;		___wmul
  6842 ;; This function is called by:
  6843 ;;		_Console_Render
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           	psect	text18
  6848  0145E2                     __ptext18:
  6849                           	opt stack 0
  6850  0145E2                     _LCD_DrawField:
  6851                           	opt stack 17
  6852                           
  6853                           ;LCD.c: 396: UINT8 i = 0x00;
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;incstack = 0
  6857  0145E2  0E00               	movlw	0
  6858  0145E4  0100               	movlb	0	; () banked
  6859  0145E6  6F82               	movwf	LCD_DrawField@i& (0+255),b
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
  6863  0145E8  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
  6864  0145EA  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
  6865  0145EC  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
  6866                           
  6867                           ; BSR set to: 0
  6868                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
  6869  0145EE  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
  6870  0145F0  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
  6871  0145F2  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
  6875  0145F4  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
  6876  0145F8  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
  6877  0145FC  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
  6878  014600  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
  6879  014604  ECC4  F0AB         	call	___wmul	;wreg free
  6880  014608  C060  F07E         	movff	?___wmul,LCD_DrawField@count
  6881  01460C  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
  6882                           
  6883                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
  6884  014610  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
  6885  014614  0100               	movlb	0	; () banked
  6886  014616  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
  6887  014618  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  6888  01461A  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
  6889  01461C  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  6890  01461E  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
  6891  014620  EC79  F0A0         	call	_Set_Addr_Window
  6892                           
  6893                           ;LCD.c: 403: for(i = 0; i < count; i++)
  6894  014624  0E00               	movlw	0
  6895  014626  0100               	movlb	0	; () banked
  6896  014628  6F82               	movwf	LCD_DrawField@i& (0+255),b
  6897  01462A  D010               	goto	l183
  6898  01462C                     
  6899                           ; BSR set to: 0
  6900                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
  6901                           
  6902                           ; BSR set to: 0
  6903  01462C  5182               	movf	LCD_DrawField@i& (0+255),w,b
  6904  01462E  0D02               	mullw	2
  6905  014630  50F3               	movf	prodl,w,c
  6906  014632  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
  6907  014634  6ED9               	movwf	fsr2l,c
  6908  014636  50F4               	movf	prodh,w,c
  6909  014638  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
  6910  01463A  6EDA               	movwf	fsr2h,c
  6911  01463C  CFDE F065          	movff	postinc2,LCD_Word_Write@value
  6912  014640  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
  6913  014644  EC8F  F0AC         	call	_LCD_Word_Write	;wreg free
  6914  014648  0100               	movlb	0	; () banked
  6915  01464A  2B82               	incf	LCD_DrawField@i& (0+255),f,b
  6916  01464C                     l183:
  6917                           
  6918                           ; BSR set to: 0
  6919                           
  6920                           ; BSR set to: 0
  6921  01464C  5182               	movf	LCD_DrawField@i& (0+255),w,b
  6922  01464E  6F7C               	movwf	??_LCD_DrawField& (0+255),b
  6923  014650  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
  6924  014652  517E               	movf	LCD_DrawField@count& (0+255),w,b
  6925  014654  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
  6926  014656  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
  6927  014658  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
  6928  01465A  B0D8               	btfsc	status,0,c
  6929  01465C  0012               	return	
  6930  01465E  D7E6               	goto	l184
  6931  014660                     __end_of_LCD_DrawField:
  6932                           	opt stack 0
  6933                           tosu	equ	0xFFF
  6934                           tosh	equ	0xFFE
  6935                           tosl	equ	0xFFD
  6936                           pclath	equ	0xFFA
  6937                           tblptru	equ	0xFF8
  6938                           tblptrh	equ	0xFF7
  6939                           tblptrl	equ	0xFF6
  6940                           tablat	equ	0xFF5
  6941                           prodh	equ	0xFF4
  6942                           prodl	equ	0xFF3
  6943                           postinc0	equ	0xFEE
  6944                           wreg	equ	0xFE8
  6945                           postdec1	equ	0xFE5
  6946                           fsr1h	equ	0xFE2
  6947                           fsr1l	equ	0xFE1
  6948                           indf2	equ	0xFDF
  6949                           postinc2	equ	0xFDE
  6950                           postdec2	equ	0xFDD
  6951                           fsr2h	equ	0xFDA
  6952                           fsr2l	equ	0xFD9
  6953                           status	equ	0xFD8
  6954                           
  6955 ;; *************** function _Console_MakeField *****************
  6956 ;; Defined at:
  6957 ;;		line 435 in file "Library/Console.c"
  6958 ;; Parameters:    Size  Location     Type
  6959 ;;  pInput          1    wreg     unsigned char 
  6960 ;; Auto vars:     Size  Location     Type
  6961 ;;  pInput          1   11[BANK0 ] unsigned char 
  6962 ;;  y               1   17[BANK0 ] unsigned char 
  6963 ;;  x               1   16[BANK0 ] unsigned char 
  6964 ;;  Column          2   12[BANK0 ] PTR struct Byte
  6965 ;;		 -> Font5x7(480), 
  6966 ;;  Index           2    9[BANK0 ] unsigned short 
  6967 ;; Return value:  Size  Location     Type
  6968 ;;                  2    5[BANK0 ] PTR unsigned short 
  6969 ;; Registers used:
  6970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6976 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6978 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;Total ram usage:       13 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:    8
  6983 ;; This function calls:
  6984 ;;		_Byte_GetBit
  6985 ;; This function is called by:
  6986 ;;		_Console_Render
  6987 ;; This function uses a non-reentrant model
  6988 ;;
  6989                           
  6990                           	psect	text19
  6991  013E72                     __ptext19:
  6992                           	opt stack 0
  6993  013E72                     _Console_MakeField:
  6994                           	opt stack 19
  6995                           
  6996                           ; BSR set to: 0
  6997                           ;incstack = 0
  6998                           ;Console_MakeField@pInput stored from wreg
  6999  013E72  0100               	movlb	0	; () banked
  7000  013E74  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
  7001                           
  7002                           ;Console.c: 437: static Colour Fill[7][5];
  7003                           ;Console.c: 438: pInput -= 32;
  7004  013E76  0E20               	movlw	32
  7005  013E78  0100               	movlb	0	; () banked
  7006  013E7A  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
  7010  013E7C  516B               	movf	Console_MakeField@pInput& (0+255),w,b
  7011  013E7E  0D05               	mullw	5
  7012  013E80  CFF3 F069          	movff	prodl,Console_MakeField@Index
  7013  013E84  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
  7014                           
  7015                           ; BSR set to: 0
  7016                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
  7017  013E88  0E7D               	movlw	low _Font5x7
  7018  013E8A  2569               	addwf	Console_MakeField@Index& (0+255),w,b
  7019  013E8C  6F6C               	movwf	Console_MakeField@Column& (0+255),b
  7020  013E8E  0EFC               	movlw	high _Font5x7
  7021  013E90  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
  7022  013E92  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
  7026  013E94  0E00               	movlw	0
  7027  013E96  6F70               	movwf	Console_MakeField@x& (0+255),b
  7028  013E98                     l14051:
  7029                           
  7030                           ; BSR set to: 0
  7031  013E98  0E04               	movlw	4
  7032  013E9A  6570               	cpfsgt	Console_MakeField@x& (0+255),b
  7033  013E9C  D001               	goto	l1077
  7034  013E9E  D037               	goto	u11420
  7035  013EA0                     l1077:
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;Console.c: 444: {
  7039                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
  7040                           
  7041                           ; BSR set to: 0
  7042  013EA0  0E00               	movlw	0
  7043  013EA2  6F71               	movwf	Console_MakeField@y& (0+255),b
  7044  013EA4                     l14057:
  7045                           
  7046                           ; BSR set to: 0
  7047  013EA4  0E06               	movlw	6
  7048  013EA6  6571               	cpfsgt	Console_MakeField@y& (0+255),b
  7049  013EA8  D001               	goto	l1079
  7050  013EAA  D02D               	goto	u11410
  7051  013EAC                     l1079:
  7052                           
  7053                           ; BSR set to: 0
  7054                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
  7055                           
  7056                           ; BSR set to: 0
  7057  013EAC  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
  7058  013EB0  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
  7059  013EB4  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
  7060  013EB8  EC9A  F0AB         	call	_Byte_GetBit	;wreg free
  7061  013EBC  0900               	iorlw	0
  7062  013EBE  A4D8               	btfss	status,2,c
  7063  013EC0  D005               	goto	l1082
  7064  013EC2  C035  F06E         	movff	_gBackcolour,_Console_MakeField$10974
  7065  013EC6  C036  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
  7066  013ECA  D004               	goto	l1084
  7067  013ECC                     l1082:
  7068  013ECC  C1F9  F06E         	movff	_gForecolour,_Console_MakeField$10974
  7069  013ED0  C1FA  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
  7070  013ED4                     l1084:
  7071  013ED4  0100               	movlb	0	; () banked
  7072  013ED6  5171               	movf	Console_MakeField@y& (0+255),w,b
  7073  013ED8  0D0A               	mullw	10
  7074  013EDA  0E82               	movlw	low Console_MakeField@Fill
  7075  013EDC  6F67               	movwf	??_Console_MakeField& (0+255),b
  7076  013EDE  0E02               	movlw	high Console_MakeField@Fill
  7077  013EE0  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
  7078  013EE2  50F3               	movf	prodl,w,c
  7079  013EE4  2767               	addwf	??_Console_MakeField& (0+255),f,b
  7080  013EE6  50F4               	movf	prodh,w,c
  7081  013EE8  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
  7082  013EEA  5170               	movf	Console_MakeField@x& (0+255),w,b
  7083  013EEC  0D02               	mullw	2
  7084  013EEE  50F3               	movf	prodl,w,c
  7085  013EF0  2567               	addwf	??_Console_MakeField& (0+255),w,b
  7086  013EF2  6ED9               	movwf	fsr2l,c
  7087  013EF4  50F4               	movf	prodh,w,c
  7088  013EF6  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
  7089  013EF8  6EDA               	movwf	fsr2h,c
  7090  013EFA  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
  7091  013EFE  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
  7092                           
  7093                           ; BSR set to: 0
  7094  013F02  2B71               	incf	Console_MakeField@y& (0+255),f,b
  7095  013F04  D7CF               	goto	l14057
  7096  013F06                     u11410:
  7097                           
  7098                           ; BSR set to: 0
  7099                           ;Console.c: 447: Column += 1;
  7100                           
  7101                           ; BSR set to: 0
  7102  013F06  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
  7103  013F08  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
  7104  013F0A  2B70               	incf	Console_MakeField@x& (0+255),f,b
  7105  013F0C  D7C5               	goto	l14051
  7106  013F0E                     u11420:
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;Console.c: 448: }
  7110                           ;Console.c: 449: return (ColourPtr)Fill;
  7111                           
  7112                           ; BSR set to: 0
  7113  013F0E  0E82               	movlw	low Console_MakeField@Fill
  7114  013F10  6F65               	movwf	?_Console_MakeField& (0+255),b
  7115  013F12  0E02               	movlw	high Console_MakeField@Fill
  7116  013F14  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
  7117  013F16  0012               	return	
  7118  013F18                     __end_of_Console_MakeField:
  7119                           	opt stack 0
  7120                           tosu	equ	0xFFF
  7121                           tosh	equ	0xFFE
  7122                           tosl	equ	0xFFD
  7123                           pclath	equ	0xFFA
  7124                           tblptru	equ	0xFF8
  7125                           tblptrh	equ	0xFF7
  7126                           tblptrl	equ	0xFF6
  7127                           tablat	equ	0xFF5
  7128                           prodh	equ	0xFF4
  7129                           prodl	equ	0xFF3
  7130                           postinc0	equ	0xFEE
  7131                           wreg	equ	0xFE8
  7132                           postdec1	equ	0xFE5
  7133                           fsr1h	equ	0xFE2
  7134                           fsr1l	equ	0xFE1
  7135                           indf2	equ	0xFDF
  7136                           postinc2	equ	0xFDE
  7137                           postdec2	equ	0xFDD
  7138                           fsr2h	equ	0xFDA
  7139                           fsr2l	equ	0xFD9
  7140                           status	equ	0xFD8
  7141                           
  7142 ;; *************** function _Byte_GetBit *****************
  7143 ;; Defined at:
  7144 ;;		line 38 in file "Library/Types.c"
  7145 ;; Parameters:    Size  Location     Type
  7146 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  7147 ;;		 -> Font5x7(480), 
  7148 ;;  pBit            1    2[BANK0 ] unsigned char 
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;  Output          1    4[BANK0 ] unsigned char 
  7151 ;; Return value:  Size  Location     Type
  7152 ;;                  1    wreg      unsigned char 
  7153 ;; Registers used:
  7154 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  7155 ;; Tracked objects:
  7156 ;;		On entry : 0/0
  7157 ;;		On exit  : 0/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7160 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7162 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7163 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7164 ;;Total ram usage:        5 bytes
  7165 ;; Hardware stack levels used:    1
  7166 ;; Hardware stack levels required when called:    7
  7167 ;; This function calls:
  7168 ;;		Nothing
  7169 ;; This function is called by:
  7170 ;;		_Console_MakeField
  7171 ;;		_Word_GetBit
  7172 ;; This function uses a non-reentrant model
  7173 ;;
  7174                           
  7175                           	psect	text20
  7176  015734                     __ptext20:
  7177                           	opt stack 0
  7178  015734                     _Byte_GetBit:
  7179                           	opt stack 19
  7180                           
  7181                           ;Types.c: 40: UINT8 Output = pInput->mBits;
  7182                           
  7183                           ; BSR set to: 0
  7184                           ;incstack = 0
  7185  015734  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
  7186  015738  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
  7187  01573C                     	if	0	;tblptru may be non-zero
  7188  01573C                     	endif
  7189  01573C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7190  01573C  0E00               	movlw	low (__mediumconst shr (0+16))
  7191  01573E  6EF8               	movwf	tblptru,c
  7192  015740                     	endif
  7193  015740  0008               	tblrd		*
  7194  015742  CFF5 F064          	movff	tablat,Byte_GetBit@Output
  7195                           
  7196                           ;Types.c: 42: Output >>= pBit;
  7197  015746  0100               	movlb	0	; () banked
  7198  015748  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
  7199  01574A  6F63               	movwf	??_Byte_GetBit& (0+255),b
  7200  01574C  D002               	goto	u10180
  7201  01574E                     u10185:
  7202  01574E  90D8               	bcf	status,0,c
  7203  015750  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
  7204  015752                     u10180:
  7205  015752  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
  7206  015754  D7FC               	goto	u10185
  7207                           
  7208                           ;Types.c: 43: Output &= 1;
  7209  015756  0E01               	movlw	1
  7210  015758  0100               	movlb	0	; () banked
  7211  01575A  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
  7212                           
  7213                           ; BSR set to: 0
  7214                           ;Types.c: 44: return Output;
  7215  01575C  5164               	movf	Byte_GetBit@Output& (0+255),w,b
  7216  01575E  0012               	return	
  7217  015760                     __end_of_Byte_GetBit:
  7218                           	opt stack 0
  7219                           tosu	equ	0xFFF
  7220                           tosh	equ	0xFFE
  7221                           tosl	equ	0xFFD
  7222                           pclath	equ	0xFFA
  7223                           tblptru	equ	0xFF8
  7224                           tblptrh	equ	0xFF7
  7225                           tblptrl	equ	0xFF6
  7226                           tablat	equ	0xFF5
  7227                           prodh	equ	0xFF4
  7228                           prodl	equ	0xFF3
  7229                           postinc0	equ	0xFEE
  7230                           wreg	equ	0xFE8
  7231                           postdec1	equ	0xFE5
  7232                           fsr1h	equ	0xFE2
  7233                           fsr1l	equ	0xFE1
  7234                           indf2	equ	0xFDF
  7235                           postinc2	equ	0xFDE
  7236                           postdec2	equ	0xFDD
  7237                           fsr2h	equ	0xFDA
  7238                           fsr2l	equ	0xFD9
  7239                           status	equ	0xFD8
  7240                           
  7241 ;; *************** function _Robot_Init *****************
  7242 ;; Defined at:
  7243 ;;		line 154 in file "main.c"
  7244 ;; Parameters:    Size  Location     Type
  7245 ;;		None
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;		None
  7248 ;; Return value:  Size  Location     Type
  7249 ;;                  1    wreg      void 
  7250 ;; Registers used:
  7251 ;;		wreg, status,2, status,0, cstack
  7252 ;; Tracked objects:
  7253 ;;		On entry : 0/0
  7254 ;;		On exit  : 0/0
  7255 ;;		Unchanged: 0/0
  7256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7261 ;;Total ram usage:        0 bytes
  7262 ;; Hardware stack levels used:    1
  7263 ;; Hardware stack levels required when called:    9
  7264 ;; This function calls:
  7265 ;;		_Robot_Stop
  7266 ;;		_UpdateDistance
  7267 ;;		_eusartSend
  7268 ;; This function is called by:
  7269 ;;		_main
  7270 ;; This function uses a non-reentrant model
  7271 ;;
  7272                           
  7273                           	psect	text21
  7274  0159F8                     __ptext21:
  7275                           	opt stack 0
  7276  0159F8                     _Robot_Init:
  7277                           	opt stack 21
  7278                           
  7279                           ;main.c: 155: eusartSend(128);
  7280                           
  7281                           ; BSR set to: 0
  7282                           ;incstack = 0
  7283  0159F8  0E80               	movlw	128
  7284  0159FA  EC64  F0AD         	call	_eusartSend
  7285                           
  7286                           ;main.c: 156: eusartSend(132);
  7287  0159FE  0E84               	movlw	132
  7288  015A00  EC64  F0AD         	call	_eusartSend
  7289                           
  7290                           ;main.c: 157: Robot_Stop();
  7291  015A04  EC24  F0AC         	call	_Robot_Stop	;wreg free
  7292                           
  7293                           ;main.c: 158: UpdateDistance();
  7294  015A08  EC0D  F0A6         	call	_UpdateDistance	;wreg free
  7295  015A0C  0012               	return		;funcret
  7296  015A0E                     __end_of_Robot_Init:
  7297                           	opt stack 0
  7298                           tosu	equ	0xFFF
  7299                           tosh	equ	0xFFE
  7300                           tosl	equ	0xFFD
  7301                           pclath	equ	0xFFA
  7302                           tblptru	equ	0xFF8
  7303                           tblptrh	equ	0xFF7
  7304                           tblptrl	equ	0xFF6
  7305                           tablat	equ	0xFF5
  7306                           prodh	equ	0xFF4
  7307                           prodl	equ	0xFF3
  7308                           postinc0	equ	0xFEE
  7309                           wreg	equ	0xFE8
  7310                           postdec1	equ	0xFE5
  7311                           fsr1h	equ	0xFE2
  7312                           fsr1l	equ	0xFE1
  7313                           indf2	equ	0xFDF
  7314                           postinc2	equ	0xFDE
  7315                           postdec2	equ	0xFDD
  7316                           fsr2h	equ	0xFDA
  7317                           fsr2l	equ	0xFD9
  7318                           status	equ	0xFD8
  7319                           
  7320 ;; *************** function _UpdateDistance *****************
  7321 ;; Defined at:
  7322 ;;		line 233 in file "dans.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;		None
  7325 ;; Auto vars:     Size  Location     Type
  7326 ;;		None
  7327 ;; Return value:  Size  Location     Type
  7328 ;;                  2    1[BANK0 ] int 
  7329 ;; Registers used:
  7330 ;;		wreg, status,2, status,0, cstack
  7331 ;; Tracked objects:
  7332 ;;		On entry : 0/0
  7333 ;;		On exit  : 0/0
  7334 ;;		Unchanged: 0/0
  7335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7336 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7338 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7339 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7340 ;;Total ram usage:        6 bytes
  7341 ;; Hardware stack levels used:    1
  7342 ;; Hardware stack levels required when called:    8
  7343 ;; This function calls:
  7344 ;;		_eusartRec
  7345 ;;		_eusartSend
  7346 ;; This function is called by:
  7347 ;;		_Robot_Init
  7348 ;;		_Travel
  7349 ;; This function uses a non-reentrant model
  7350 ;;
  7351                           
  7352                           	psect	text22
  7353  014C1A                     __ptext22:
  7354                           	opt stack 0
  7355  014C1A                     _UpdateDistance:
  7356                           	opt stack 20
  7357                           
  7358                           ;dans.c: 234: eusartSend(142);
  7359                           
  7360                           ;incstack = 0
  7361  014C1A  0E8E               	movlw	142
  7362  014C1C  EC64  F0AD         	call	_eusartSend
  7363                           
  7364                           ;dans.c: 235: eusartSend(19);
  7365  014C20  0E13               	movlw	19
  7366  014C22  EC64  F0AD         	call	_eusartSend
  7367                           
  7368                           ;dans.c: 236: Current_Dist1 = eusartRec();
  7369  014C26  EC96  F0AD         	call	_eusartRec	;wreg free
  7370  014C2A  0100               	movlb	0	; () banked
  7371  014C2C  6F63               	movwf	??_UpdateDistance& (0+255),b
  7372  014C2E  5163               	movf	??_UpdateDistance& (0+255),w,b
  7373  014C30  0101               	movlb	1	; () banked
  7374  014C32  6F3E               	movwf	_Current_Dist1& (0+255),b
  7375  014C34  6B3F               	clrf	(_Current_Dist1+1)& (0+255),b
  7376                           
  7377                           ; BSR set to: 1
  7378                           ;dans.c: 237: Current_Dist2 = eusartRec();
  7379  014C36  EC96  F0AD         	call	_eusartRec	;wreg free
  7380  014C3A  0100               	movlb	0	; () banked
  7381  014C3C  6F63               	movwf	??_UpdateDistance& (0+255),b
  7382  014C3E  5163               	movf	??_UpdateDistance& (0+255),w,b
  7383  014C40  0101               	movlb	1	; () banked
  7384  014C42  6F3C               	movwf	_Current_Dist2& (0+255),b
  7385  014C44  6B3D               	clrf	(_Current_Dist2+1)& (0+255),b
  7386                           
  7387                           ; BSR set to: 1
  7388                           ;dans.c: 239: Current_Dist = ((Current_Dist1 <<(8)) & 0b1111111100000000 | (Current_Dist
      +                          2 & 255));
  7389  014C46  0E00               	movlw	0
  7390  014C48  0100               	movlb	0	; () banked
  7391  014C4A  6F63               	movwf	??_UpdateDistance& (0+255),b
  7392  014C4C  0EFF               	movlw	255
  7393  014C4E  6F64               	movwf	(??_UpdateDistance+1)& (0+255),b
  7394  014C50  0101               	movlb	1	; () banked
  7395  014C52  513E               	movf	_Current_Dist1& (0+255),w,b
  7396  014C54  0100               	movlb	0	; () banked
  7397  014C56  6F66               	movwf	(??_UpdateDistance+3)& (0+255),b
  7398  014C58  6B65               	clrf	(??_UpdateDistance+2)& (0+255),b
  7399  014C5A  5163               	movf	??_UpdateDistance& (0+255),w,b
  7400  014C5C  1765               	andwf	(??_UpdateDistance+2)& (0+255),f,b
  7401  014C5E  5164               	movf	(??_UpdateDistance+1)& (0+255),w,b
  7402  014C60  1766               	andwf	(??_UpdateDistance+3)& (0+255),f,b
  7403  014C62  0101               	movlb	1	; () banked
  7404  014C64  513C               	movf	_Current_Dist2& (0+255),w,b
  7405  014C66  0100               	movlb	0	; () banked
  7406  014C68  1165               	iorwf	(??_UpdateDistance+2)& (0+255),w,b
  7407  014C6A  0101               	movlb	1	; () banked
  7408  014C6C  6F40               	movwf	_Current_Dist& (0+255),b
  7409  014C6E  0100               	movlb	0	; () banked
  7410  014C70  5166               	movf	(??_UpdateDistance+3)& (0+255),w,b
  7411  014C72  0101               	movlb	1	; () banked
  7412  014C74  6F41               	movwf	(_Current_Dist+1)& (0+255),b
  7413                           
  7414                           ; BSR set to: 1
  7415                           ;dans.c: 240: return Current_Dist;
  7416  014C76  C140  F061         	movff	_Current_Dist,?_UpdateDistance
  7417  014C7A  C141  F062         	movff	_Current_Dist+1,?_UpdateDistance+1
  7418  014C7E  0012               	return	
  7419  014C80                     __end_of_UpdateDistance:
  7420                           	opt stack 0
  7421                           tosu	equ	0xFFF
  7422                           tosh	equ	0xFFE
  7423                           tosl	equ	0xFFD
  7424                           pclath	equ	0xFFA
  7425                           tblptru	equ	0xFF8
  7426                           tblptrh	equ	0xFF7
  7427                           tblptrl	equ	0xFF6
  7428                           tablat	equ	0xFF5
  7429                           prodh	equ	0xFF4
  7430                           prodl	equ	0xFF3
  7431                           postinc0	equ	0xFEE
  7432                           wreg	equ	0xFE8
  7433                           postdec1	equ	0xFE5
  7434                           fsr1h	equ	0xFE2
  7435                           fsr1l	equ	0xFE1
  7436                           indf2	equ	0xFDF
  7437                           postinc2	equ	0xFDE
  7438                           postdec2	equ	0xFDD
  7439                           fsr2h	equ	0xFDA
  7440                           fsr2l	equ	0xFD9
  7441                           status	equ	0xFD8
  7442                           
  7443 ;; *************** function _eusartRec *****************
  7444 ;; Defined at:
  7445 ;;		line 75 in file "dans.c"
  7446 ;; Parameters:    Size  Location     Type
  7447 ;;		None
  7448 ;; Auto vars:     Size  Location     Type
  7449 ;;		None
  7450 ;; Return value:  Size  Location     Type
  7451 ;;                  1    wreg      unsigned char 
  7452 ;; Registers used:
  7453 ;;		wreg, status,2
  7454 ;; Tracked objects:
  7455 ;;		On entry : 0/0
  7456 ;;		On exit  : 0/0
  7457 ;;		Unchanged: 0/0
  7458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7463 ;;Total ram usage:        0 bytes
  7464 ;; Hardware stack levels used:    1
  7465 ;; Hardware stack levels required when called:    7
  7466 ;; This function calls:
  7467 ;;		Nothing
  7468 ;; This function is called by:
  7469 ;;		_UpdateDistance
  7470 ;;		_Get_VirtualWall_State
  7471 ;;		_Turn
  7472 ;; This function uses a non-reentrant model
  7473 ;;
  7474                           
  7475                           	psect	text23
  7476  015B2C                     __ptext23:
  7477                           	opt stack 0
  7478  015B2C                     _eusartRec:
  7479                           	opt stack 20
  7480                           
  7481                           ;dans.c: 76: while(!PIR1bits.RC1IF){}
  7482                           
  7483                           ; BSR set to: 1
  7484                           ;incstack = 0
  7485  015B2C  AA9E               	btfss	3998,5,c	;volatile
  7486  015B2E  D7FE               	goto	_eusartRec
  7487                           
  7488                           ;dans.c: 77: return (int) RCREG1;
  7489  015B30  50AF               	movf	4015,w,c	;volatile
  7490  015B32  0012               	return	
  7491  015B34                     __end_of_eusartRec:
  7492                           	opt stack 0
  7493                           tosu	equ	0xFFF
  7494                           tosh	equ	0xFFE
  7495                           tosl	equ	0xFFD
  7496                           pclath	equ	0xFFA
  7497                           tblptru	equ	0xFF8
  7498                           tblptrh	equ	0xFF7
  7499                           tblptrl	equ	0xFF6
  7500                           tablat	equ	0xFF5
  7501                           prodh	equ	0xFF4
  7502                           prodl	equ	0xFF3
  7503                           postinc0	equ	0xFEE
  7504                           wreg	equ	0xFE8
  7505                           postdec1	equ	0xFE5
  7506                           fsr1h	equ	0xFE2
  7507                           fsr1l	equ	0xFE1
  7508                           indf2	equ	0xFDF
  7509                           postinc2	equ	0xFDE
  7510                           postdec2	equ	0xFDD
  7511                           fsr2h	equ	0xFDA
  7512                           fsr2l	equ	0xFD9
  7513                           status	equ	0xFD8
  7514                           
  7515 ;; *************** function _Robot_Stop *****************
  7516 ;; Defined at:
  7517 ;;		line 242 in file "dans.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;		None
  7520 ;; Auto vars:     Size  Location     Type
  7521 ;;		None
  7522 ;; Return value:  Size  Location     Type
  7523 ;;                  1    wreg      void 
  7524 ;; Registers used:
  7525 ;;		wreg, cstack
  7526 ;; Tracked objects:
  7527 ;;		On entry : 0/0
  7528 ;;		On exit  : 0/0
  7529 ;;		Unchanged: 0/0
  7530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;Total ram usage:        0 bytes
  7536 ;; Hardware stack levels used:    1
  7537 ;; Hardware stack levels required when called:    8
  7538 ;; This function calls:
  7539 ;;		_eusartSend
  7540 ;; This function is called by:
  7541 ;;		_Robot_Init
  7542 ;;		_Turn
  7543 ;;		_Travel
  7544 ;; This function uses a non-reentrant model
  7545 ;;
  7546                           
  7547                           	psect	text24
  7548  015848                     __ptext24:
  7549                           	opt stack 0
  7550  015848                     _Robot_Stop:
  7551                           	opt stack 19
  7552                           
  7553                           ;dans.c: 243: eusartSend(137);
  7554                           
  7555                           ;incstack = 0
  7556  015848  0E89               	movlw	137
  7557  01584A  EC64  F0AD         	call	_eusartSend
  7558                           
  7559                           ;dans.c: 244: eusartSend(0);
  7560  01584E  0E00               	movlw	0
  7561  015850  EC64  F0AD         	call	_eusartSend
  7562                           
  7563                           ;dans.c: 245: eusartSend(0);
  7564  015854  0E00               	movlw	0
  7565  015856  EC64  F0AD         	call	_eusartSend
  7566                           
  7567                           ;dans.c: 246: eusartSend(0);
  7568  01585A  0E00               	movlw	0
  7569  01585C  EC64  F0AD         	call	_eusartSend
  7570                           
  7571                           ;dans.c: 247: eusartSend(0);
  7572  015860  0E00               	movlw	0
  7573  015862  EC64  F0AD         	call	_eusartSend
  7574  015866  0012               	return		;funcret
  7575  015868                     __end_of_Robot_Stop:
  7576                           	opt stack 0
  7577                           tosu	equ	0xFFF
  7578                           tosh	equ	0xFFE
  7579                           tosl	equ	0xFFD
  7580                           pclath	equ	0xFFA
  7581                           tblptru	equ	0xFF8
  7582                           tblptrh	equ	0xFF7
  7583                           tblptrl	equ	0xFF6
  7584                           tablat	equ	0xFF5
  7585                           prodh	equ	0xFF4
  7586                           prodl	equ	0xFF3
  7587                           postinc0	equ	0xFEE
  7588                           wreg	equ	0xFE8
  7589                           postdec1	equ	0xFE5
  7590                           fsr1h	equ	0xFE2
  7591                           fsr1l	equ	0xFE1
  7592                           indf2	equ	0xFDF
  7593                           postinc2	equ	0xFDE
  7594                           postdec2	equ	0xFDD
  7595                           fsr2h	equ	0xFDA
  7596                           fsr2l	equ	0xFD9
  7597                           status	equ	0xFD8
  7598                           
  7599 ;; *************** function _eusartSend *****************
  7600 ;; Defined at:
  7601 ;;		line 71 in file "dans.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;  sendChar        1    wreg     unsigned char 
  7604 ;; Auto vars:     Size  Location     Type
  7605 ;;  sendChar        1    0[BANK0 ] unsigned char 
  7606 ;; Return value:  Size  Location     Type
  7607 ;;                  1    wreg      void 
  7608 ;; Registers used:
  7609 ;;		wreg
  7610 ;; Tracked objects:
  7611 ;;		On entry : 0/0
  7612 ;;		On exit  : 0/0
  7613 ;;		Unchanged: 0/0
  7614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;Total ram usage:        1 bytes
  7620 ;; Hardware stack levels used:    1
  7621 ;; Hardware stack levels required when called:    7
  7622 ;; This function calls:
  7623 ;;		Nothing
  7624 ;; This function is called by:
  7625 ;;		_Robot_Init
  7626 ;;		_Drive
  7627 ;;		_UpdateDistance
  7628 ;;		_Robot_Stop
  7629 ;;		_Get_VirtualWall_State
  7630 ;;		_Turn
  7631 ;;		_Get_Sensor_State
  7632 ;;		_BangBang
  7633 ;;		_LEDOn
  7634 ;;		_LEDOff
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           	psect	text25
  7639  015AC8                     __ptext25:
  7640                           	opt stack 0
  7641  015AC8                     _eusartSend:
  7642                           	opt stack 20
  7643                           
  7644                           ;incstack = 0
  7645                           ;eusartSend@sendChar stored from wreg
  7646  015AC8  0100               	movlb	0	; () banked
  7647  015ACA  6F60               	movwf	eusartSend@sendChar& (0+255),b
  7648  015ACC                     
  7649                           ;dans.c: 72: while(!TXSTA1bits.TRMT){};
  7650  015ACC  A2AD               	btfss	4013,1,c	;volatile
  7651  015ACE  D7FE               	goto	l13349
  7652                           
  7653                           ;dans.c: 73: TXREG1 = sendChar;
  7654  015AD0  C060  FFAE         	movff	eusartSend@sendChar,4014	;volatile
  7655  015AD4  0012               	return		;funcret
  7656  015AD6                     __end_of_eusartSend:
  7657                           	opt stack 0
  7658                           tosu	equ	0xFFF
  7659                           tosh	equ	0xFFE
  7660                           tosl	equ	0xFFD
  7661                           pclath	equ	0xFFA
  7662                           tblptru	equ	0xFF8
  7663                           tblptrh	equ	0xFF7
  7664                           tblptrl	equ	0xFF6
  7665                           tablat	equ	0xFF5
  7666                           prodh	equ	0xFF4
  7667                           prodl	equ	0xFF3
  7668                           postinc0	equ	0xFEE
  7669                           wreg	equ	0xFE8
  7670                           postdec1	equ	0xFE5
  7671                           fsr1h	equ	0xFE2
  7672                           fsr1l	equ	0xFE1
  7673                           indf2	equ	0xFDF
  7674                           postinc2	equ	0xFDE
  7675                           postdec2	equ	0xFDD
  7676                           fsr2h	equ	0xFDA
  7677                           fsr2l	equ	0xFD9
  7678                           status	equ	0xFD8
  7679                           
  7680 ;; *************** function _MXK_Init *****************
  7681 ;; Defined at:
  7682 ;;		line 33 in file "Library/MXK.c"
  7683 ;; Parameters:    Size  Location     Type
  7684 ;;		None
  7685 ;; Auto vars:     Size  Location     Type
  7686 ;;		None
  7687 ;; Return value:  Size  Location     Type
  7688 ;;                  1    wreg      void 
  7689 ;; Registers used:
  7690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7691 ;; Tracked objects:
  7692 ;;		On entry : 0/0
  7693 ;;		On exit  : 0/0
  7694 ;;		Unchanged: 0/0
  7695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;Total ram usage:        0 bytes
  7701 ;; Hardware stack levels used:    1
  7702 ;; Hardware stack levels required when called:   16
  7703 ;; This function calls:
  7704 ;;		_LED_Init
  7705 ;;		_Port_Init
  7706 ;;		_Port_SetPin
  7707 ;;		_Port_SetPinType
  7708 ;;		_Port_SetQuadType
  7709 ;;		_Port_SetType
  7710 ;;		_delay_ms
  7711 ;; This function is called by:
  7712 ;;		_main
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           	psect	text26
  7717  012FDE                     __ptext26:
  7718                           	opt stack 0
  7719  012FDE                     _MXK_Init:
  7720                           	opt stack 14
  7721                           
  7722                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  7723                           
  7724                           ;incstack = 0
  7725  012FDE  0E01               	movlw	1
  7726  012FE0  6E4B               	movwf	_Bus_State,c
  7727                           
  7728                           ;MXK.c: 36: lQueue = (Function)0;
  7729  012FE2  0E00               	movlw	0
  7730  012FE4  0100               	movlb	0	; () banked
  7731  012FE6  6FDD               	movwf	_lQueue& (0+255),b	;volatile
  7732  012FE8  0E00               	movlw	0
  7733  012FEA  6FDE               	movwf	(_lQueue+1)& (0+255),b	;volatile
  7734  012FEC  0E00               	movlw	0
  7735  012FEE  6FDF               	movwf	(_lQueue+2)& (0+255),b	;volatile
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  7739  012FF0  0EF1               	movlw	low _PortA
  7740  012FF2  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7741  012FF4  0E02               	movlw	high _PortA
  7742  012FF6  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7743  012FF8  0E00               	movlw	0
  7744  012FFA  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7745  012FFC  EC2E  F093         	call	_Port_Init	;wreg free
  7746                           
  7747                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  7748  013000  0EA5               	movlw	low _PortB
  7749  013002  0100               	movlb	0	; () banked
  7750  013004  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7751  013006  0E01               	movlw	high _PortB
  7752  013008  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7753  01300A  0E01               	movlw	1
  7754  01300C  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7755  01300E  EC2E  F093         	call	_Port_Init	;wreg free
  7756                           
  7757                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  7758  013012  0EAF               	movlw	low _PortC
  7759  013014  0100               	movlb	0	; () banked
  7760  013016  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7761  013018  0E01               	movlw	high _PortC
  7762  01301A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7763  01301C  0E02               	movlw	2
  7764  01301E  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7765  013020  EC2E  F093         	call	_Port_Init	;wreg free
  7766                           
  7767                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  7768  013024  0E9B               	movlw	low _PortD
  7769  013026  0100               	movlb	0	; () banked
  7770  013028  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7771  01302A  0E01               	movlw	high _PortD
  7772  01302C  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7773  01302E  0E03               	movlw	3
  7774  013030  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7775  013032  EC2E  F093         	call	_Port_Init	;wreg free
  7776                           
  7777                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  7778  013036  0E91               	movlw	low _PortE
  7779  013038  0100               	movlb	0	; () banked
  7780  01303A  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7781  01303C  0E01               	movlw	high _PortE
  7782  01303E  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7783  013040  0E04               	movlw	4
  7784  013042  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7785  013044  EC2E  F093         	call	_Port_Init	;wreg free
  7786                           
  7787                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  7788  013048  0EB9               	movlw	low _PortF
  7789  01304A  0100               	movlb	0	; () banked
  7790  01304C  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7791  01304E  0E01               	movlw	high _PortF
  7792  013050  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7793  013052  0E05               	movlw	5
  7794  013054  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7795  013056  EC2E  F093         	call	_Port_Init	;wreg free
  7796                           
  7797                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  7798  01305A  0EE7               	movlw	low _PortG
  7799  01305C  0100               	movlb	0	; () banked
  7800  01305E  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7801  013060  0E02               	movlw	high _PortG
  7802  013062  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7803  013064  0E06               	movlw	6
  7804  013066  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7805  013068  EC2E  F093         	call	_Port_Init	;wreg free
  7806                           
  7807                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  7808  01306C  0EB9               	movlw	low _PortF
  7809  01306E  0100               	movlb	0	; () banked
  7810  013070  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7811  013072  0E01               	movlw	high _PortF
  7812  013074  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7813  013076  0E05               	movlw	5
  7814  013078  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7815  01307A  0E00               	movlw	0
  7816  01307C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7817  01307E  ECA1  F091         	call	_Port_SetPinType	;wreg free
  7818                           
  7819                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  7820  013082  0EA5               	movlw	low _PortB
  7821  013084  0100               	movlb	0	; () banked
  7822  013086  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
  7823  013088  0E01               	movlw	high _PortB
  7824  01308A  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  7825  01308C  0E00               	movlw	0
  7826  01308E  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
  7827  013090  0E00               	movlw	0
  7828  013092  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
  7829  013094  EC1B  F08D         	call	_Port_SetQuadType	;wreg free
  7830                           
  7831                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  7832  013098  0EB9               	movlw	low _PortF
  7833  01309A  0100               	movlb	0	; () banked
  7834  01309C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7835  01309E  0E01               	movlw	high _PortF
  7836  0130A0  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7837  0130A2  0E06               	movlw	6
  7838  0130A4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7839  0130A6  0E03               	movlw	3
  7840  0130A8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7841  0130AA  ECA1  F091         	call	_Port_SetPinType	;wreg free
  7842                           
  7843                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  7844  0130AE  0EE7               	movlw	low _PortG
  7845  0130B0  0100               	movlb	0	; () banked
  7846  0130B2  6F9A               	movwf	Port_SetType@pInput& (0+255),b
  7847  0130B4  0E02               	movlw	high _PortG
  7848  0130B6  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
  7849  0130B8  0E03               	movlw	3
  7850  0130BA  6F9C               	movwf	Port_SetType@pType& (0+255),b
  7851  0130BC  EC0F  F08F         	call	_Port_SetType	;wreg free
  7852                           
  7853                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  7854  0130C0  0EE7               	movlw	low _PortG
  7855  0130C2  0100               	movlb	0	; () banked
  7856  0130C4  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7857  0130C6  0E02               	movlw	high _PortG
  7858  0130C8  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7859  0130CA  0E04               	movlw	4
  7860  0130CC  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7861  0130CE  0E00               	movlw	0
  7862  0130D0  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7863  0130D2  EC32  F09E         	call	_Port_SetPin	;wreg free
  7864                           
  7865                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  7866  0130D6  0EB9               	movlw	low _PortF
  7867  0130D8  0100               	movlb	0	; () banked
  7868  0130DA  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7869  0130DC  0E01               	movlw	high _PortF
  7870  0130DE  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7871  0130E0  0E06               	movlw	6
  7872  0130E2  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7873  0130E4  0E01               	movlw	1
  7874  0130E6  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7875  0130E8  EC32  F09E         	call	_Port_SetPin	;wreg free
  7876                           
  7877                           ;MXK.c: 55: LED_Init(eLED1);
  7878  0130EC  0E00               	movlw	0
  7879  0130EE  EC51  F0A7         	call	_LED_Init
  7880                           
  7881                           ;MXK.c: 56: LED_Init(eLED2);
  7882  0130F2  0E01               	movlw	1
  7883  0130F4  EC51  F0A7         	call	_LED_Init
  7884                           
  7885                           ;MXK.c: 58: PIR1 = 0;
  7886  0130F8  0E00               	movlw	0
  7887  0130FA  6E9E               	movwf	3998,c	;volatile
  7888                           
  7889                           ;MXK.c: 59: PIR2 = 0;
  7890  0130FC  0E00               	movlw	0
  7891  0130FE  6EA1               	movwf	4001,c	;volatile
  7892                           
  7893                           ;MXK.c: 60: PIR3 = 0;
  7894  013100  0E00               	movlw	0
  7895  013102  6EA4               	movwf	4004,c	;volatile
  7896                           
  7897                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  7898  013104  8E9B               	bsf	3995,7,c	;volatile
  7899                           
  7900                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  7901  013106  8C9B               	bsf	3995,6,c	;volatile
  7902                           
  7903                           ;MXK.c: 66: delay_ms(100);
  7904  013108  0E00               	movlw	0
  7905  01310A  0100               	movlb	0	; () banked
  7906  01310C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  7907  01310E  0E64               	movlw	100
  7908  013110  6F60               	movwf	delay_ms@ms& (0+255),b
  7909  013112  ECCF  F0A6         	call	_delay_ms	;wreg free
  7910                           
  7911                           ;MXK.c: 68: RCONbits.IPEN = 1;
  7912  013116  8ED0               	bsf	4048,7,c	;volatile
  7913  013118  0012               	return		;funcret
  7914  01311A                     __end_of_MXK_Init:
  7915                           	opt stack 0
  7916                           tosu	equ	0xFFF
  7917                           tosh	equ	0xFFE
  7918                           tosl	equ	0xFFD
  7919                           pclath	equ	0xFFA
  7920                           tblptru	equ	0xFF8
  7921                           tblptrh	equ	0xFF7
  7922                           tblptrl	equ	0xFF6
  7923                           tablat	equ	0xFF5
  7924                           prodh	equ	0xFF4
  7925                           prodl	equ	0xFF3
  7926                           postinc0	equ	0xFEE
  7927                           wreg	equ	0xFE8
  7928                           postdec1	equ	0xFE5
  7929                           fsr1h	equ	0xFE2
  7930                           fsr1l	equ	0xFE1
  7931                           indf2	equ	0xFDF
  7932                           postinc2	equ	0xFDE
  7933                           postdec2	equ	0xFDD
  7934                           fsr2h	equ	0xFDA
  7935                           fsr2l	equ	0xFD9
  7936                           status	equ	0xFD8
  7937                           
  7938 ;; *************** function _Port_Init *****************
  7939 ;; Defined at:
  7940 ;;		line 150 in file "Library/Port.c"
  7941 ;; Parameters:    Size  Location     Type
  7942 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  7943 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  7944 ;;		 -> PortD(10), PortC(10), PortF(10), 
  7945 ;;  pPort           1   66[BANK0 ] enum E6786
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;  i               1   69[BANK0 ] unsigned char 
  7948 ;; Return value:  Size  Location     Type
  7949 ;;                  1    wreg      void 
  7950 ;; Registers used:
  7951 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7952 ;; Tracked objects:
  7953 ;;		On entry : 0/0
  7954 ;;		On exit  : 0/0
  7955 ;;		Unchanged: 0/0
  7956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7957 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7958 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7960 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7961 ;;Total ram usage:        6 bytes
  7962 ;; Hardware stack levels used:    1
  7963 ;; Hardware stack levels required when called:   15
  7964 ;; This function calls:
  7965 ;;		_GetPortPORT
  7966 ;;		_GetPortProperties
  7967 ;;		_GetPortTRIS
  7968 ;;		_Port_Set
  7969 ;;		_Port_SetPinType
  7970 ;;		_Port_SetType
  7971 ;;		_Word_GetPair
  7972 ;; This function is called by:
  7973 ;;		_MXK_Init
  7974 ;; This function uses a non-reentrant model
  7975 ;;
  7976                           
  7977                           	psect	text27
  7978  01265C                     __ptext27:
  7979                           	opt stack 0
  7980  01265C                     _Port_Init:
  7981                           	opt stack 14
  7982                           
  7983                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  7984                           
  7985                           ;incstack = 0
  7986  01265C  0100               	movlb	0	; () banked
  7987  01265E  51A2               	movf	Port_Init@pPort& (0+255),w,b
  7988  012660  ECE4  F0A1         	call	_GetPortProperties
  7989  012664  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  7990  012668  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  7991  01266C  0100               	movlb	0	; () banked
  7992  01266E  C060  FFDE         	movff	?_GetPortProperties,postinc2
  7993  012672  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
  7994                           
  7995                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  7996  012676  51A2               	movf	Port_Init@pPort& (0+255),w,b
  7997  012678  EC28  F0A2         	call	_GetPortPORT
  7998  01267C  0100               	movlb	0	; () banked
  7999  01267E  EE20 F006          	lfsr	2,6
  8000  012682  51A0               	movf	Port_Init@pInput& (0+255),w,b
  8001  012684  26D9               	addwf	fsr2l,f,c
  8002  012686  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  8003  012688  22DA               	addwfc	fsr2h,f,c
  8004  01268A  C060  FFDE         	movff	?_GetPortPORT,postinc2
  8005  01268E  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  8006                           
  8007                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  8008  012692  51A2               	movf	Port_Init@pPort& (0+255),w,b
  8009  012694  EC28  F0A2         	call	_GetPortPORT
  8010  012698  0100               	movlb	0	; () banked
  8011  01269A  EE20 F004          	lfsr	2,4
  8012  01269E  51A0               	movf	Port_Init@pInput& (0+255),w,b
  8013  0126A0  26D9               	addwf	fsr2l,f,c
  8014  0126A2  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  8015  0126A4  22DA               	addwfc	fsr2h,f,c
  8016  0126A6  C060  FFDE         	movff	?_GetPortPORT,postinc2
  8017  0126AA  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  8018                           
  8019                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  8020  0126AE  51A2               	movf	Port_Init@pPort& (0+255),w,b
  8021  0126B0  ECA0  F0A1         	call	_GetPortTRIS
  8022  0126B4  0100               	movlb	0	; () banked
  8023  0126B6  EE20 F002          	lfsr	2,2
  8024  0126BA  51A0               	movf	Port_Init@pInput& (0+255),w,b
  8025  0126BC  26D9               	addwf	fsr2l,f,c
  8026  0126BE  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  8027  0126C0  22DA               	addwfc	fsr2h,f,c
  8028  0126C2  C060  FFDE         	movff	?_GetPortTRIS,postinc2
  8029  0126C6  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
  8030                           
  8031                           ; BSR set to: 0
  8032                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  8033  0126CA  EE20 F004          	lfsr	2,4
  8034  0126CE  51A0               	movf	Port_Init@pInput& (0+255),w,b
  8035  0126D0  26D9               	addwf	fsr2l,f,c
  8036  0126D2  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  8037  0126D4  22DA               	addwfc	fsr2h,f,c
  8038  0126D6  CFDE F0A3          	movff	postinc2,??_Port_Init
  8039  0126DA  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  8040  0126DE  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  8041  0126E2  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  8042  0126E6  0E00               	movlw	0
  8043  0126E8  6EDF               	movwf	indf2,c
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  8047  0126EA  EE20 F002          	lfsr	2,2
  8048  0126EE  51A0               	movf	Port_Init@pInput& (0+255),w,b
  8049  0126F0  26D9               	addwf	fsr2l,f,c
  8050  0126F2  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  8051  0126F4  22DA               	addwfc	fsr2h,f,c
  8052  0126F6  CFDE F0A3          	movff	postinc2,??_Port_Init
  8053  0126FA  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  8054  0126FE  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  8055  012702  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  8056  012706  0EFF               	movlw	255
  8057  012708  6EDF               	movwf	indf2,c
  8058                           
  8059                           ; BSR set to: 0
  8060                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  8061  01270A  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
  8062  01270E  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  8063  012712  0E00               	movlw	0
  8064  012714  6F9C               	movwf	Port_SetType@pType& (0+255),b
  8065  012716  EC0F  F08F         	call	_Port_SetType	;wreg free
  8066                           
  8067                           ;Port.c: 166: UINT8 i;
  8068                           ;Port.c: 167: for (i=0; i<8; i++)
  8069  01271A  0E00               	movlw	0
  8070  01271C  0100               	movlb	0	; () banked
  8071  01271E  6FA5               	movwf	Port_Init@i& (0+255),b
  8072  012720                     l15093:
  8073                           
  8074                           ; BSR set to: 0
  8075  012720  0E07               	movlw	7
  8076  012722  65A5               	cpfsgt	Port_Init@i& (0+255),b
  8077  012724  D031               	goto	l403
  8078  012726  D04B               	goto	u12450
  8079  012728                     
  8080                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  8081                           
  8082                           ; BSR set to: 0
  8083  012728  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  8084  01272C  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  8085  012730  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  8086  012734  0E03               	movlw	3
  8087  012736  0100               	movlb	0	; () banked
  8088  012738  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  8089  01273A  ECA1  F091         	call	_Port_SetPinType	;wreg free
  8090                           
  8091                           ;Port.c: 173: break;
  8092  01273E  D03C               	goto	l405
  8093  012740                     
  8094                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  8095  012740  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  8096  012744  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  8097  012748  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  8098  01274C  0E02               	movlw	2
  8099  01274E  0100               	movlb	0	; () banked
  8100  012750  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  8101  012752  ECA1  F091         	call	_Port_SetPinType	;wreg free
  8102                           
  8103                           ;Port.c: 176: break;
  8104  012756  D030               	goto	l405
  8105  012758                     
  8106                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  8107  012758  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  8108  01275C  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  8109  012760  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  8110  012764  0E01               	movlw	1
  8111  012766  0100               	movlb	0	; () banked
  8112  012768  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  8113  01276A  ECA1  F091         	call	_Port_SetPinType	;wreg free
  8114                           
  8115                           ;Port.c: 179: break;
  8116  01276E  D024               	goto	l405
  8117  012770                     
  8118                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  8119  012770  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  8120  012774  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  8121  012778  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  8122  01277C  0E00               	movlw	0
  8123  01277E  0100               	movlb	0	; () banked
  8124  012780  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  8125  012782  ECA1  F091         	call	_Port_SetPinType	;wreg free
  8126                           
  8127                           ;Port.c: 183: }
  8128                           
  8129                           ;Port.c: 182: break;
  8130  012786  D018               	goto	l405
  8131  012788                     l403:
  8132  012788  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  8133  01278C  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  8134  012790  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
  8135  012794  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
  8136  012798  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
  8137  01279C  EC0A  F0AB         	call	_Word_GetPair	;wreg free
  8138                           
  8139                           ; Switch size 1, requested type "space"
  8140                           ; Number of cases is 4, Range of values is 0 to 3
  8141                           ; switch strategies available:
  8142                           ; Name         Instructions Cycles
  8143                           ; simple_byte           13     7 (average)
  8144                           ;	Chosen strategy is simple_byte
  8145  0127A0  0A00               	xorlw	0	; case 0
  8146  0127A2  B4D8               	btfsc	status,2,c
  8147  0127A4  D7C1               	goto	l404
  8148  0127A6  0A01               	xorlw	1	; case 1
  8149  0127A8  B4D8               	btfsc	status,2,c
  8150  0127AA  D7D6               	goto	l407
  8151  0127AC  0A03               	xorlw	3	; case 2
  8152  0127AE  B4D8               	btfsc	status,2,c
  8153  0127B0  D7C7               	goto	l406
  8154  0127B2  0A01               	xorlw	1	; case 3
  8155  0127B4  B4D8               	btfsc	status,2,c
  8156  0127B6  D7DC               	goto	l408
  8157  0127B8                     l405:
  8158  0127B8  0100               	movlb	0	; () banked
  8159  0127BA  2BA5               	incf	Port_Init@i& (0+255),f,b
  8160  0127BC  D7B1               	goto	l15093
  8161  0127BE                     u12450:
  8162                           
  8163                           ; BSR set to: 0
  8164                           ;Port.c: 184: }
  8165                           ;Port.c: 185: Port_Set(pInput, 0x00);
  8166                           
  8167                           ; BSR set to: 0
  8168  0127BE  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
  8169  0127C2  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  8170  0127C6  0E00               	movlw	0
  8171  0127C8  6F71               	movwf	Port_Set@pValue& (0+255),b
  8172  0127CA  EC4A  F089         	call	_Port_Set	;wreg free
  8173  0127CE  0012               	return		;funcret
  8174  0127D0                     __end_of_Port_Init:
  8175                           	opt stack 0
  8176                           tosu	equ	0xFFF
  8177                           tosh	equ	0xFFE
  8178                           tosl	equ	0xFFD
  8179                           pclath	equ	0xFFA
  8180                           tblptru	equ	0xFF8
  8181                           tblptrh	equ	0xFF7
  8182                           tblptrl	equ	0xFF6
  8183                           tablat	equ	0xFF5
  8184                           prodh	equ	0xFF4
  8185                           prodl	equ	0xFF3
  8186                           postinc0	equ	0xFEE
  8187                           wreg	equ	0xFE8
  8188                           postdec1	equ	0xFE5
  8189                           fsr1h	equ	0xFE2
  8190                           fsr1l	equ	0xFE1
  8191                           indf2	equ	0xFDF
  8192                           postinc2	equ	0xFDE
  8193                           postdec2	equ	0xFDD
  8194                           fsr2h	equ	0xFDA
  8195                           fsr2l	equ	0xFD9
  8196                           status	equ	0xFD8
  8197                           
  8198 ;; *************** function _Port_SetType *****************
  8199 ;; Defined at:
  8200 ;;		line 513 in file "Library/Port.c"
  8201 ;; Parameters:    Size  Location     Type
  8202 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  8203 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8204 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8205 ;;  pType           1   60[BANK0 ] enum E6795
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;  Output          1   63[BANK0 ] enum E6475
  8208 ;; Return value:  Size  Location     Type
  8209 ;;                  1    wreg      enum E6475
  8210 ;; Registers used:
  8211 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8217 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;Total ram usage:        6 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; Hardware stack levels required when called:   14
  8224 ;; This function calls:
  8225 ;;		_Port_CheckPortType
  8226 ;;		_Word_SetPair
  8227 ;; This function is called by:
  8228 ;;		_Port_Init
  8229 ;;		_MXK_Init
  8230 ;; This function uses a non-reentrant model
  8231 ;;
  8232                           
  8233                           	psect	text28
  8234  011E1E                     __ptext28:
  8235                           	opt stack 0
  8236  011E1E                     _Port_SetType:
  8237                           	opt stack 15
  8238                           
  8239                           ;Port.c: 515: ePinError Output = ePinErrorState;
  8240                           
  8241                           ;incstack = 0
  8242  011E1E  0E05               	movlw	5
  8243  011E20  0100               	movlb	0	; () banked
  8244  011E22  6F9F               	movwf	Port_SetType@Output& (0+255),b
  8245                           
  8246                           ;Port.c: 517: switch (pType)
  8247  011E24  D06E               	goto	l509
  8248  011E26                     
  8249                           ; BSR set to: 0
  8250                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  8251                           
  8252                           ; BSR set to: 0
  8253  011E26  EE20 F002          	lfsr	2,2
  8254  011E2A  519A               	movf	Port_SetType@pInput& (0+255),w,b
  8255  011E2C  26D9               	addwf	fsr2l,f,c
  8256  011E2E  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8257  011E30  22DA               	addwfc	fsr2h,f,c
  8258  011E32  CFDE F09D          	movff	postinc2,??_Port_SetType
  8259  011E36  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  8260  011E3A  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  8261  011E3E  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  8262  011E42  0EFF               	movlw	255
  8263  011E44  D05C               	goto	L5
  8264  011E46                     
  8265                           ; BSR set to: 0
  8266                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  8267                           
  8268                           ; BSR set to: 0
  8269  011E46  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8270  011E4A  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8271  011E4E  0E01               	movlw	1
  8272  011E50  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8273  011E52  EC90  F0A9         	call	_Port_CheckPortType	;wreg free
  8274  011E56  0100               	movlb	0	; () banked
  8275  011E58  6F9F               	movwf	Port_SetType@Output& (0+255),b
  8276  011E5A  519F               	movf	Port_SetType@Output& (0+255),w,b
  8277  011E5C  A4D8               	btfss	status,2,c
  8278  011E5E  0012               	return	
  8279                           
  8280                           ; BSR set to: 0
  8281                           ;Port.c: 527: {
  8282                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  8283  011E60  EE20 F002          	lfsr	2,2
  8284  011E64  519A               	movf	Port_SetType@pInput& (0+255),w,b
  8285  011E66  26D9               	addwf	fsr2l,f,c
  8286  011E68  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8287  011E6A  22DA               	addwfc	fsr2h,f,c
  8288  011E6C  CFDE F09D          	movff	postinc2,??_Port_SetType
  8289  011E70  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  8290  011E74  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  8291  011E78  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  8292  011E7C  0E00               	movlw	0
  8293  011E7E  6EDF               	movwf	indf2,c
  8294                           
  8295                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  8296  011E80  EE20 F004          	lfsr	2,4
  8297  011E84  D02F               	goto	L18
  8298  011E86                     
  8299                           ; BSR set to: 0
  8300                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  8301                           
  8302                           ; BSR set to: 0
  8303  011E86  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8304  011E8A  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8305  011E8E  0E02               	movlw	2
  8306  011E90  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8307  011E92  EC90  F0A9         	call	_Port_CheckPortType	;wreg free
  8308  011E96  0100               	movlb	0	; () banked
  8309  011E98  6F9F               	movwf	Port_SetType@Output& (0+255),b
  8310  011E9A  519F               	movf	Port_SetType@Output& (0+255),w,b
  8311  011E9C  A4D8               	btfss	status,2,c
  8312  011E9E  0012               	return	
  8313                           
  8314                           ; BSR set to: 0
  8315                           ;Port.c: 538: {
  8316                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  8317  011EA0  EE20 F002          	lfsr	2,2
  8318  011EA4  519A               	movf	Port_SetType@pInput& (0+255),w,b
  8319  011EA6  26D9               	addwf	fsr2l,f,c
  8320  011EA8  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8321  011EAA  22DA               	addwfc	fsr2h,f,c
  8322  011EAC  CFDE F09D          	movff	postinc2,??_Port_SetType
  8323  011EB0  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  8324  011EB4  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  8325  011EB8  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  8326  011EBC  0EFF               	movlw	255
  8327  011EBE  6EDF               	movwf	indf2,c
  8328                           
  8329                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  8330  011EC0  EE20 F004          	lfsr	2,4
  8331  011EC4  D7B2               	goto	L6
  8332  011EC6                     
  8333                           ; BSR set to: 0
  8334                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  8335                           
  8336                           ; BSR set to: 0
  8337  011EC6  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8338  011ECA  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8339  011ECE  0E00               	movlw	0
  8340  011ED0  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8341  011ED2  EC90  F0A9         	call	_Port_CheckPortType	;wreg free
  8342  011ED6  0100               	movlb	0	; () banked
  8343  011ED8  6F9F               	movwf	Port_SetType@Output& (0+255),b
  8344  011EDA  519F               	movf	Port_SetType@Output& (0+255),w,b
  8345  011EDC  A4D8               	btfss	status,2,c
  8346  011EDE  0012               	return	
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;Port.c: 549: {
  8350                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  8351  011EE0  EE20 F002          	lfsr	2,2
  8352  011EE4                     L18:
  8353  011EE4  519A               	movf	Port_SetType@pInput& (0+255),w,b
  8354  011EE6  26D9               	addwf	fsr2l,f,c
  8355  011EE8  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8356  011EEA  22DA               	addwfc	fsr2h,f,c
  8357  011EEC  CFDE F09D          	movff	postinc2,??_Port_SetType
  8358  011EF0  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  8359  011EF4  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  8360  011EF8  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  8361  011EFC  0E00               	movlw	0
  8362  011EFE                     L5:
  8363  011EFE  6EDF               	movwf	indf2,c
  8364                           
  8365                           ;Port.c: 552: }
  8366  011F00  D00D               	goto	l511
  8367  011F02                     l509:
  8368                           
  8369                           ; BSR set to: 0
  8370                           
  8371                           ; BSR set to: 0
  8372  011F02  519C               	movf	Port_SetType@pType& (0+255),w,b
  8373                           
  8374                           ; Switch size 1, requested type "space"
  8375                           ; Number of cases is 4, Range of values is 0 to 3
  8376                           ; switch strategies available:
  8377                           ; Name         Instructions Cycles
  8378                           ; simple_byte           13     7 (average)
  8379                           ;	Chosen strategy is simple_byte
  8380  011F04  0A00               	xorlw	0	; case 0
  8381  011F06  B4D8               	btfsc	status,2,c
  8382  011F08  D78E               	goto	l510
  8383  011F0A  0A01               	xorlw	1	; case 1
  8384  011F0C  B4D8               	btfsc	status,2,c
  8385  011F0E  D79B               	goto	l512
  8386  011F10  0A03               	xorlw	3	; case 2
  8387  011F12  B4D8               	btfsc	status,2,c
  8388  011F14  D7B8               	goto	l516
  8389  011F16  0A01               	xorlw	1	; case 3
  8390  011F18  B4D8               	btfsc	status,2,c
  8391  011F1A  D7D5               	goto	l519
  8392  011F1C                     l511:
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  8396                           
  8397                           ; BSR set to: 0
  8398  011F1C  0E08               	movlw	8
  8399  011F1E  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8400  011F20  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8401  011F22  0E00               	movlw	0
  8402  011F24  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8403  011F26  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8404  011F28  0E00               	movlw	0
  8405  011F2A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8406  011F2C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8407  011F30  EC67  F0AA         	call	_Word_SetPair	;wreg free
  8408                           
  8409                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  8410  011F34  0E08               	movlw	8
  8411  011F36  0100               	movlb	0	; () banked
  8412  011F38  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8413  011F3A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8414  011F3C  0E00               	movlw	0
  8415  011F3E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8416  011F40  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8417  011F42  0E01               	movlw	1
  8418  011F44  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8419  011F46  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8420  011F4A  EC67  F0AA         	call	_Word_SetPair	;wreg free
  8421                           
  8422                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  8423  011F4E  0E08               	movlw	8
  8424  011F50  0100               	movlb	0	; () banked
  8425  011F52  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8426  011F54  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8427  011F56  0E00               	movlw	0
  8428  011F58  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8429  011F5A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8430  011F5C  0E02               	movlw	2
  8431  011F5E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8432  011F60  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8433  011F64  EC67  F0AA         	call	_Word_SetPair	;wreg free
  8434                           
  8435                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  8436  011F68  0E08               	movlw	8
  8437  011F6A  0100               	movlb	0	; () banked
  8438  011F6C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8439  011F6E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8440  011F70  0E00               	movlw	0
  8441  011F72  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8442  011F74  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8443  011F76  0E03               	movlw	3
  8444  011F78  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8445  011F7A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8446  011F7E  EC67  F0AA         	call	_Word_SetPair	;wreg free
  8447                           
  8448                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  8449  011F82  0E08               	movlw	8
  8450  011F84  0100               	movlb	0	; () banked
  8451  011F86  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8452  011F88  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8453  011F8A  0E00               	movlw	0
  8454  011F8C  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8455  011F8E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8456  011F90  0E04               	movlw	4
  8457  011F92  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8458  011F94  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8459  011F98  EC67  F0AA         	call	_Word_SetPair	;wreg free
  8460                           
  8461                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  8462  011F9C  0E08               	movlw	8
  8463  011F9E  0100               	movlb	0	; () banked
  8464  011FA0  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8465  011FA2  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8466  011FA4  0E00               	movlw	0
  8467  011FA6  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8468  011FA8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8469  011FAA  0E05               	movlw	5
  8470  011FAC  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8471  011FAE  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8472  011FB2  EC67  F0AA         	call	_Word_SetPair	;wreg free
  8473                           
  8474                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  8475  011FB6  0E08               	movlw	8
  8476  011FB8  0100               	movlb	0	; () banked
  8477  011FBA  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8478  011FBC  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8479  011FBE  0E00               	movlw	0
  8480  011FC0  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8481  011FC2  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8482  011FC4  0E06               	movlw	6
  8483  011FC6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8484  011FC8  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8485  011FCC  EC67  F0AA         	call	_Word_SetPair	;wreg free
  8486                           
  8487                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  8488  011FD0  0E08               	movlw	8
  8489  011FD2  0100               	movlb	0	; () banked
  8490  011FD4  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8491  011FD6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8492  011FD8  0E00               	movlw	0
  8493  011FDA  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8494  011FDC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8495  011FDE  0E07               	movlw	7
  8496  011FE0  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8497  011FE2  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8498  011FE6  EC67  F0AA         	call	_Word_SetPair	;wreg free
  8499  011FEA  0012               	return	
  8500  011FEC                     __end_of_Port_SetType:
  8501                           	opt stack 0
  8502                           tosu	equ	0xFFF
  8503                           tosh	equ	0xFFE
  8504                           tosl	equ	0xFFD
  8505                           pclath	equ	0xFFA
  8506                           tblptru	equ	0xFF8
  8507                           tblptrh	equ	0xFF7
  8508                           tblptrl	equ	0xFF6
  8509                           tablat	equ	0xFF5
  8510                           prodh	equ	0xFF4
  8511                           prodl	equ	0xFF3
  8512                           postinc0	equ	0xFEE
  8513                           wreg	equ	0xFE8
  8514                           postdec1	equ	0xFE5
  8515                           fsr1h	equ	0xFE2
  8516                           fsr1l	equ	0xFE1
  8517                           indf2	equ	0xFDF
  8518                           postinc2	equ	0xFDE
  8519                           postdec2	equ	0xFDD
  8520                           fsr2h	equ	0xFDA
  8521                           fsr2l	equ	0xFD9
  8522                           status	equ	0xFD8
  8523                           
  8524 ;; *************** function _Port_CheckPortType *****************
  8525 ;; Defined at:
  8526 ;;		line 138 in file "Library/Port.c"
  8527 ;; Parameters:    Size  Location     Type
  8528 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  8529 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8530 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8531 ;;  pDrive          1   56[BANK0 ] enum E6469
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;  Output          1   57[BANK0 ] enum E6475
  8534 ;; Return value:  Size  Location     Type
  8535 ;;                  1    wreg      enum E6475
  8536 ;; Registers used:
  8537 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8538 ;; Tracked objects:
  8539 ;;		On entry : 0/0
  8540 ;;		On exit  : 0/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8543 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8544 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8546 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8547 ;;Total ram usage:        4 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; Hardware stack levels required when called:   13
  8550 ;; This function calls:
  8551 ;;		_Port_CheckQuadType
  8552 ;; This function is called by:
  8553 ;;		_Port_SetType
  8554 ;; This function uses a non-reentrant model
  8555 ;;
  8556                           
  8557                           	psect	text29
  8558  015320                     __ptext29:
  8559                           	opt stack 0
  8560  015320                     _Port_CheckPortType:
  8561                           	opt stack 15
  8562                           
  8563                           ;Port.c: 140: ePinError Output = ePinErrorState;
  8564                           
  8565                           ;incstack = 0
  8566  015320  0E05               	movlw	5
  8567  015322  0100               	movlb	0	; () banked
  8568  015324  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  8569                           
  8570                           ; BSR set to: 0
  8571                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  8572  015326  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  8573  01532A  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  8574  01532E  0E00               	movlw	0
  8575  015330  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  8576  015332  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  8577  015336  EC48  F0A8         	call	_Port_CheckQuadType	;wreg free
  8578  01533A  0100               	movlb	0	; () banked
  8579  01533C  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  8580  01533E  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  8581  015340  A4D8               	btfss	status,2,c
  8582  015342  D00C               	goto	l397
  8583                           
  8584                           ; BSR set to: 0
  8585                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  8586  015344  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  8587  015348  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  8588  01534C  0E01               	movlw	1
  8589  01534E  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  8590  015350  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  8591  015354  EC48  F0A8         	call	_Port_CheckQuadType	;wreg free
  8592  015358  0100               	movlb	0	; () banked
  8593  01535A  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  8594  01535C                     l397:
  8595                           
  8596                           ; BSR set to: 0
  8597                           ;Port.c: 146: return Output;
  8598                           
  8599                           ; BSR set to: 0
  8600  01535C  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  8601  01535E  0012               	return	
  8602  015360                     __end_of_Port_CheckPortType:
  8603                           	opt stack 0
  8604                           tosu	equ	0xFFF
  8605                           tosh	equ	0xFFE
  8606                           tosl	equ	0xFFD
  8607                           pclath	equ	0xFFA
  8608                           tblptru	equ	0xFF8
  8609                           tblptrh	equ	0xFF7
  8610                           tblptrl	equ	0xFF6
  8611                           tablat	equ	0xFF5
  8612                           prodh	equ	0xFF4
  8613                           prodl	equ	0xFF3
  8614                           postinc0	equ	0xFEE
  8615                           wreg	equ	0xFE8
  8616                           postdec1	equ	0xFE5
  8617                           fsr1h	equ	0xFE2
  8618                           fsr1l	equ	0xFE1
  8619                           indf2	equ	0xFDF
  8620                           postinc2	equ	0xFDE
  8621                           postdec2	equ	0xFDD
  8622                           fsr2h	equ	0xFDA
  8623                           fsr2l	equ	0xFD9
  8624                           status	equ	0xFD8
  8625                           
  8626 ;; *************** function _Port_Set *****************
  8627 ;; Defined at:
  8628 ;;		line 570 in file "Library/Port.c"
  8629 ;; Parameters:    Size  Location     Type
  8630 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  8631 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8632 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8633 ;;  pValue          1   17[BANK0 ] unsigned char 
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  8636 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  8637 ;;  Type            1   38[BANK0 ] enum E6795
  8638 ;; Return value:  Size  Location     Type
  8639 ;;                  1    wreg      void 
  8640 ;; Registers used:
  8641 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8647 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8648 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8649 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8650 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8651 ;;Total ram usage:       24 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:   10
  8654 ;; This function calls:
  8655 ;;		_Byte_SetByte
  8656 ;;		_Word_GetPair
  8657 ;; This function is called by:
  8658 ;;		_Port_Init
  8659 ;;		_Port_Toggle
  8660 ;; This function uses a non-reentrant model
  8661 ;;
  8662                           
  8663                           	psect	text30
  8664  011294                     __ptext30:
  8665                           	opt stack 0
  8666  011294                     _Port_Set:
  8667                           	opt stack 18
  8668                           
  8669                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;incstack = 0
  8673  011294  0E08               	movlw	8
  8674  011296  0100               	movlb	0	; () banked
  8675  011298  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8676  01129A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8677  01129C  0E00               	movlw	0
  8678  01129E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8679  0112A0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8680  0112A2  0E00               	movlw	0
  8681  0112A4  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8682  0112A6  EC0A  F0AB         	call	_Word_GetPair	;wreg free
  8683  0112AA  0100               	movlb	0	; () banked
  8684  0112AC  6F86               	movwf	Port_Set@Type& (0+255),b
  8685                           
  8686                           ; BSR set to: 0
  8687                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  8688  0112AE  5186               	movf	Port_Set@Type& (0+255),w,b
  8689  0112B0  6F72               	movwf	??_Port_Set& (0+255),b
  8690  0112B2  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8691  0112B4  0E0E               	movlw	14
  8692  0112B6                     u11825:
  8693  0112B6  90D8               	bcf	status,0,c
  8694  0112B8  3772               	rlcf	??_Port_Set& (0+255),f,b
  8695  0112BA  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8696  0112BC  2EE8               	decfsz	wreg,f,c
  8697  0112BE  D7FB               	goto	u11825
  8698  0112C0  5186               	movf	Port_Set@Type& (0+255),w,b
  8699  0112C2  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  8700  0112C4  6B75               	clrf	(??_Port_Set+3)& (0+255),b
  8701  0112C6  0E0C               	movlw	12
  8702  0112C8                     u11835:
  8703  0112C8  90D8               	bcf	status,0,c
  8704  0112CA  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
  8705  0112CC  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
  8706  0112CE  2EE8               	decfsz	wreg,f,c
  8707  0112D0  D7FB               	goto	u11835
  8708  0112D2  5186               	movf	Port_Set@Type& (0+255),w,b
  8709  0112D4  6F76               	movwf	(??_Port_Set+4)& (0+255),b
  8710  0112D6  6B77               	clrf	(??_Port_Set+5)& (0+255),b
  8711  0112D8  0E0A               	movlw	10
  8712  0112DA                     u11845:
  8713  0112DA  90D8               	bcf	status,0,c
  8714  0112DC  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
  8715  0112DE  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
  8716  0112E0  2EE8               	decfsz	wreg,f,c
  8717  0112E2  D7FB               	goto	u11845
  8718  0112E4  5186               	movf	Port_Set@Type& (0+255),w,b
  8719  0112E6  6F79               	movwf	(??_Port_Set+7)& (0+255),b
  8720  0112E8  6B78               	clrf	(??_Port_Set+6)& (0+255),b
  8721  0112EA  5186               	movf	Port_Set@Type& (0+255),w,b
  8722  0112EC  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
  8723  0112EE  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
  8724  0112F0  0E06               	movlw	6
  8725  0112F2                     u11855:
  8726  0112F2  90D8               	bcf	status,0,c
  8727  0112F4  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
  8728  0112F6  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
  8729  0112F8  2EE8               	decfsz	wreg,f,c
  8730  0112FA  D7FB               	goto	u11855
  8731  0112FC  5186               	movf	Port_Set@Type& (0+255),w,b
  8732  0112FE  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
  8733  011300  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
  8734  011302  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
  8735  011304  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
  8736  011306  0EF0               	movlw	240
  8737  011308  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
  8738  01130A  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  8739  01130C  0B0F               	andlw	15
  8740  01130E  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
  8741  011310  0EF0               	movlw	240
  8742  011312  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
  8743  011314  5186               	movf	Port_Set@Type& (0+255),w,b
  8744  011316  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
  8745  011318  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
  8746  01131A  90D8               	bcf	status,0,c
  8747  01131C  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  8748  01131E  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  8749  011320  90D8               	bcf	status,0,c
  8750  011322  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  8751  011324  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  8752  011326  5186               	movf	Port_Set@Type& (0+255),w,b
  8753  011328  6F80               	movwf	(??_Port_Set+14)& (0+255),b
  8754  01132A  6B81               	clrf	(??_Port_Set+15)& (0+255),b
  8755  01132C  517E               	movf	(??_Port_Set+12)& (0+255),w,b
  8756  01132E  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8757  011330  517F               	movf	(??_Port_Set+13)& (0+255),w,b
  8758  011332  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8759  011334  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  8760  011336  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8761  011338  517D               	movf	(??_Port_Set+11)& (0+255),w,b
  8762  01133A  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8763  01133C  517A               	movf	(??_Port_Set+8)& (0+255),w,b
  8764  01133E  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8765  011340  517B               	movf	(??_Port_Set+9)& (0+255),w,b
  8766  011342  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8767  011344  5178               	movf	(??_Port_Set+6)& (0+255),w,b
  8768  011346  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8769  011348  5179               	movf	(??_Port_Set+7)& (0+255),w,b
  8770  01134A  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8771  01134C  5176               	movf	(??_Port_Set+4)& (0+255),w,b
  8772  01134E  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8773  011350  5177               	movf	(??_Port_Set+5)& (0+255),w,b
  8774  011352  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8775  011354  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  8776  011356  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8777  011358  5175               	movf	(??_Port_Set+3)& (0+255),w,b
  8778  01135A  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8779  01135C  5172               	movf	??_Port_Set& (0+255),w,b
  8780  01135E  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
  8781  011360  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
  8782  011362  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8783  011364  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
  8784  011366  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  8785                           
  8786                           ; BSR set to: 0
  8787                           ;Port.c: 574: UINT16 TypeActual = Type;
  8788  011368  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
  8789  01136C  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  8793  01136E  0E08               	movlw	8
  8794  011370  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8795  011372  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8796  011374  0E00               	movlw	0
  8797  011376  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8798  011378  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8799  01137A  0E01               	movlw	1
  8800  01137C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8801  01137E  EC0A  F0AB         	call	_Word_GetPair	;wreg free
  8802  011382  0100               	movlb	0	; () banked
  8803  011384  6F72               	movwf	??_Port_Set& (0+255),b
  8804  011386  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8805  011388  90D8               	bcf	status,0,c
  8806  01138A  3772               	rlcf	??_Port_Set& (0+255),f,b
  8807  01138C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8808  01138E  90D8               	bcf	status,0,c
  8809  011390  3772               	rlcf	??_Port_Set& (0+255),f,b
  8810  011392  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8811  011394  5172               	movf	??_Port_Set& (0+255),w,b
  8812  011396  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8813  011398  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8814  01139A  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8815                           
  8816                           ; BSR set to: 0
  8817                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  8818  01139C  0E08               	movlw	8
  8819  01139E  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8820  0113A0  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8821  0113A2  0E00               	movlw	0
  8822  0113A4  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8823  0113A6  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8824  0113A8  0E02               	movlw	2
  8825  0113AA  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8826  0113AC  EC0A  F0AB         	call	_Word_GetPair	;wreg free
  8827  0113B0  0100               	movlb	0	; () banked
  8828  0113B2  6F72               	movwf	??_Port_Set& (0+255),b
  8829  0113B4  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8830  0113B6  3B72               	swapf	??_Port_Set& (0+255),f,b
  8831  0113B8  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
  8832  0113BA  0EF0               	movlw	240
  8833  0113BC  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
  8834  0113BE  5172               	movf	??_Port_Set& (0+255),w,b
  8835  0113C0  0B0F               	andlw	15
  8836  0113C2  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
  8837  0113C4  0EF0               	movlw	240
  8838  0113C6  1772               	andwf	??_Port_Set& (0+255),f,b
  8839  0113C8  5172               	movf	??_Port_Set& (0+255),w,b
  8840  0113CA  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8841  0113CC  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8842  0113CE  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8843                           
  8844                           ; BSR set to: 0
  8845                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  8846  0113D0  0E08               	movlw	8
  8847  0113D2  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8848  0113D4  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8849  0113D6  0E00               	movlw	0
  8850  0113D8  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8851  0113DA  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8852  0113DC  0E03               	movlw	3
  8853  0113DE  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8854  0113E0  EC0A  F0AB         	call	_Word_GetPair	;wreg free
  8855  0113E4  0100               	movlb	0	; () banked
  8856  0113E6  6F72               	movwf	??_Port_Set& (0+255),b
  8857  0113E8  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8858  0113EA  0E06               	movlw	6
  8859  0113EC                     u11865:
  8860  0113EC  90D8               	bcf	status,0,c
  8861  0113EE  3772               	rlcf	??_Port_Set& (0+255),f,b
  8862  0113F0  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8863  0113F2  2EE8               	decfsz	wreg,f,c
  8864  0113F4  D7FB               	goto	u11865
  8865  0113F6  5172               	movf	??_Port_Set& (0+255),w,b
  8866  0113F8  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8867  0113FA  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8868  0113FC  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8869                           
  8870                           ; BSR set to: 0
  8871                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  8872  0113FE  0E08               	movlw	8
  8873  011400  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8874  011402  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8875  011404  0E00               	movlw	0
  8876  011406  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8877  011408  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8878  01140A  0E04               	movlw	4
  8879  01140C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8880  01140E  EC0A  F0AB         	call	_Word_GetPair	;wreg free
  8881  011412  0100               	movlb	0	; () banked
  8882  011414  6F72               	movwf	??_Port_Set& (0+255),b
  8883  011416  5172               	movf	??_Port_Set& (0+255),w,b
  8884  011418  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  8885  01141A  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8886  01141C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8887  01141E  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8888  011420  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  8889  011422  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8890                           
  8891                           ; BSR set to: 0
  8892                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  8893  011424  0E08               	movlw	8
  8894  011426  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8895  011428  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8896  01142A  0E00               	movlw	0
  8897  01142C  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8898  01142E  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8899  011430  0E05               	movlw	5
  8900  011432  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8901  011434  EC0A  F0AB         	call	_Word_GetPair	;wreg free
  8902  011438  0100               	movlb	0	; () banked
  8903  01143A  6F72               	movwf	??_Port_Set& (0+255),b
  8904  01143C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8905  01143E  0E0A               	movlw	10
  8906  011440                     u11875:
  8907  011440  90D8               	bcf	status,0,c
  8908  011442  3772               	rlcf	??_Port_Set& (0+255),f,b
  8909  011444  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8910  011446  2EE8               	decfsz	wreg,f,c
  8911  011448  D7FB               	goto	u11875
  8912  01144A  5172               	movf	??_Port_Set& (0+255),w,b
  8913  01144C  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8914  01144E  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8915  011450  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  8919  011452  0E08               	movlw	8
  8920  011454  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8921  011456  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8922  011458  0E00               	movlw	0
  8923  01145A  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8924  01145C  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8925  01145E  0E06               	movlw	6
  8926  011460  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8927  011462  EC0A  F0AB         	call	_Word_GetPair	;wreg free
  8928  011466  0100               	movlb	0	; () banked
  8929  011468  6F72               	movwf	??_Port_Set& (0+255),b
  8930  01146A  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8931  01146C  0E0C               	movlw	12
  8932  01146E                     u11885:
  8933  01146E  90D8               	bcf	status,0,c
  8934  011470  3772               	rlcf	??_Port_Set& (0+255),f,b
  8935  011472  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8936  011474  2EE8               	decfsz	wreg,f,c
  8937  011476  D7FB               	goto	u11885
  8938  011478  5172               	movf	??_Port_Set& (0+255),w,b
  8939  01147A  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8940  01147C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8941  01147E  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8942                           
  8943                           ; BSR set to: 0
  8944                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  8945  011480  0E08               	movlw	8
  8946  011482  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8947  011484  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8948  011486  0E00               	movlw	0
  8949  011488  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8950  01148A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8951  01148C  0E07               	movlw	7
  8952  01148E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8953  011490  EC0A  F0AB         	call	_Word_GetPair	;wreg free
  8954  011494  0100               	movlb	0	; () banked
  8955  011496  6F72               	movwf	??_Port_Set& (0+255),b
  8956  011498  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8957  01149A  0E0E               	movlw	14
  8958  01149C                     u11895:
  8959  01149C  90D8               	bcf	status,0,c
  8960  01149E  3772               	rlcf	??_Port_Set& (0+255),f,b
  8961  0114A0  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8962  0114A2  2EE8               	decfsz	wreg,f,c
  8963  0114A4  D7FB               	goto	u11895
  8964  0114A6  5172               	movf	??_Port_Set& (0+255),w,b
  8965  0114A8  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8966  0114AA  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8967  0114AC  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8968                           
  8969                           ;Port.c: 584: if (TypeRequired == TypeActual)
  8970  0114AE  5184               	movf	Port_Set@TypeActual& (0+255),w,b
  8971  0114B0  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  8972  0114B2  E144               	bnz	l528
  8973  0114B4  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  8974  0114B6  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  8975  0114B8  A4D8               	btfss	status,2,c
  8976  0114BA  0012               	return	
  8977  0114BC  D030               	goto	l526
  8978  0114BE                     
  8979                           ; BSR set to: 0
  8980                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  8981                           
  8982                           ; BSR set to: 0
  8983  0114BE  EE20 F002          	lfsr	2,2
  8984  0114C2  516F               	movf	Port_Set@pInput& (0+255),w,b
  8985  0114C4  26D9               	addwf	fsr2l,f,c
  8986  0114C6  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  8987  0114C8  22DA               	addwfc	fsr2h,f,c
  8988  0114CA  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  8989  0114CE  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  8990  0114D2  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  8991  0114D6  EC6B  F0AD         	call	_Byte_SetByte	;wreg free
  8992                           
  8993                           ;Port.c: 594: break;
  8994  0114DA  0012               	return	
  8995  0114DC                     
  8996                           ;Port.c: 597: pValue = ~pValue;
  8997  0114DC  0100               	movlb	0	; () banked
  8998  0114DE  1F71               	comf	Port_Set@pValue& (0+255),f,b
  8999                           
  9000                           ; BSR set to: 0
  9001                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  9002  0114E0  EE20 F002          	lfsr	2,2
  9003  0114E4  516F               	movf	Port_Set@pInput& (0+255),w,b
  9004  0114E6  26D9               	addwf	fsr2l,f,c
  9005  0114E8  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  9006  0114EA  22DA               	addwfc	fsr2h,f,c
  9007  0114EC  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  9008  0114F0  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  9009  0114F4  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  9010  0114F8  EC6B  F0AD         	call	_Byte_SetByte	;wreg free
  9011                           
  9012                           ;Port.c: 599: break;
  9013  0114FC  0012               	return	
  9014  0114FE                     
  9015                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  9016  0114FE  0100               	movlb	0	; () banked
  9017  011500  EE20 F004          	lfsr	2,4
  9018  011504  516F               	movf	Port_Set@pInput& (0+255),w,b
  9019  011506  26D9               	addwf	fsr2l,f,c
  9020  011508  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  9021  01150A  22DA               	addwfc	fsr2h,f,c
  9022  01150C  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  9023  011510  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  9024  011514  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  9025  011518  EC6B  F0AD         	call	_Byte_SetByte	;wreg free
  9026                           
  9027                           ;Port.c: 606: }
  9028                           
  9029                           ;Port.c: 605: break;
  9030                           
  9031                           ;Port.c: 604: default:
  9032                           
  9033                           ;Port.c: 603: break;
  9034  01151C  0012               	return	
  9035  01151E                     l526:
  9036  01151E  0100               	movlb	0	; () banked
  9037  011520  5186               	movf	Port_Set@Type& (0+255),w,b
  9038                           
  9039                           ; Switch size 1, requested type "space"
  9040                           ; Number of cases is 4, Range of values is 0 to 3
  9041                           ; switch strategies available:
  9042                           ; Name         Instructions Cycles
  9043                           ; simple_byte           13     7 (average)
  9044                           ;	Chosen strategy is simple_byte
  9045  011522  0A00               	xorlw	0	; case 0
  9046  011524  B4D8               	btfsc	status,2,c
  9047  011526  0012               	return	
  9048  011528  0A01               	xorlw	1	; case 1
  9049  01152A  B4D8               	btfsc	status,2,c
  9050  01152C  D7C8               	goto	l529
  9051  01152E  0A03               	xorlw	3	; case 2
  9052  011530  B4D8               	btfsc	status,2,c
  9053  011532  D7D4               	goto	l531
  9054  011534  0A01               	xorlw	1	; case 3
  9055  011536  A4D8               	btfss	status,2,c
  9056                           
  9057                           ; BSR set to: 0
  9058                           
  9059                           ; BSR set to: 0
  9060                           ;Port.c: 607: }
  9061  011538  0012               	return	
  9062  01153A  D7E1               	goto	l532
  9063  01153C                     l528:
  9064  01153C  0012               	return		;funcret
  9065  01153E                     __end_of_Port_Set:
  9066                           	opt stack 0
  9067                           tosu	equ	0xFFF
  9068                           tosh	equ	0xFFE
  9069                           tosl	equ	0xFFD
  9070                           pclath	equ	0xFFA
  9071                           tblptru	equ	0xFF8
  9072                           tblptrh	equ	0xFF7
  9073                           tblptrl	equ	0xFF6
  9074                           tablat	equ	0xFF5
  9075                           prodh	equ	0xFF4
  9076                           prodl	equ	0xFF3
  9077                           postinc0	equ	0xFEE
  9078                           wreg	equ	0xFE8
  9079                           postdec1	equ	0xFE5
  9080                           fsr1h	equ	0xFE2
  9081                           fsr1l	equ	0xFE1
  9082                           indf2	equ	0xFDF
  9083                           postinc2	equ	0xFDE
  9084                           postdec2	equ	0xFDD
  9085                           fsr2h	equ	0xFDA
  9086                           fsr2l	equ	0xFD9
  9087                           status	equ	0xFD8
  9088                           
  9089 ;; *************** function _Byte_SetByte *****************
  9090 ;; Defined at:
  9091 ;;		line 110 in file "Library/Types.c"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  9094 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  9095 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  9096 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  9097 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  9098 ;;		 -> NULL(0), 
  9099 ;;  pValue          1    2[BANK0 ] unsigned char 
  9100 ;; Auto vars:     Size  Location     Type
  9101 ;;		None
  9102 ;; Return value:  Size  Location     Type
  9103 ;;                  1    wreg      void 
  9104 ;; Registers used:
  9105 ;;		fsr2l, fsr2h
  9106 ;; Tracked objects:
  9107 ;;		On entry : 0/0
  9108 ;;		On exit  : 0/0
  9109 ;;		Unchanged: 0/0
  9110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9111 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9114 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9115 ;;Total ram usage:        3 bytes
  9116 ;; Hardware stack levels used:    1
  9117 ;; Hardware stack levels required when called:    7
  9118 ;; This function calls:
  9119 ;;		Nothing
  9120 ;; This function is called by:
  9121 ;;		_Port_Set
  9122 ;;		_I2C_Init
  9123 ;; This function uses a non-reentrant model
  9124 ;;
  9125                           
  9126                           	psect	text31
  9127  015AD6                     __ptext31:
  9128                           	opt stack 0
  9129  015AD6                     _Byte_SetByte:
  9130                           	opt stack 20
  9131                           
  9132                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  9133                           
  9134                           ;incstack = 0
  9135  015AD6  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  9136  015ADA  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  9137  015ADE  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
  9138  015AE2  0012               	return		;funcret
  9139  015AE4                     __end_of_Byte_SetByte:
  9140                           	opt stack 0
  9141                           tosu	equ	0xFFF
  9142                           tosh	equ	0xFFE
  9143                           tosl	equ	0xFFD
  9144                           pclath	equ	0xFFA
  9145                           tblptru	equ	0xFF8
  9146                           tblptrh	equ	0xFF7
  9147                           tblptrl	equ	0xFF6
  9148                           tablat	equ	0xFF5
  9149                           prodh	equ	0xFF4
  9150                           prodl	equ	0xFF3
  9151                           postinc0	equ	0xFEE
  9152                           wreg	equ	0xFE8
  9153                           postdec1	equ	0xFE5
  9154                           fsr1h	equ	0xFE2
  9155                           fsr1l	equ	0xFE1
  9156                           indf2	equ	0xFDF
  9157                           postinc2	equ	0xFDE
  9158                           postdec2	equ	0xFDD
  9159                           fsr2h	equ	0xFDA
  9160                           fsr2l	equ	0xFD9
  9161                           status	equ	0xFD8
  9162                           
  9163 ;; *************** function _GetPortTRIS *****************
  9164 ;; Defined at:
  9165 ;;		line 67 in file "Library/Port.c"
  9166 ;; Parameters:    Size  Location     Type
  9167 ;;  pInput          1    wreg     enum E6786
  9168 ;; Auto vars:     Size  Location     Type
  9169 ;;  pInput          1    2[BANK0 ] enum E6786
  9170 ;; Return value:  Size  Location     Type
  9171 ;;                  2    0[BANK0 ] PTR struct Byte
  9172 ;; Registers used:
  9173 ;;		wreg, status,2, status,0
  9174 ;; Tracked objects:
  9175 ;;		On entry : 0/0
  9176 ;;		On exit  : 0/0
  9177 ;;		Unchanged: 0/0
  9178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9179 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9182 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9183 ;;Total ram usage:        3 bytes
  9184 ;; Hardware stack levels used:    1
  9185 ;; Hardware stack levels required when called:    7
  9186 ;; This function calls:
  9187 ;;		Nothing
  9188 ;; This function is called by:
  9189 ;;		_Port_Init
  9190 ;; This function uses a non-reentrant model
  9191 ;;
  9192                           
  9193                           	psect	text32
  9194  014340                     __ptext32:
  9195                           	opt stack 0
  9196  014340                     _GetPortTRIS:
  9197                           	opt stack 21
  9198                           
  9199                           ;incstack = 0
  9200                           ;GetPortTRIS@pInput stored from wreg
  9201  014340  0100               	movlb	0	; () banked
  9202  014342  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
  9203                           
  9204                           ;Port.c: 69: switch (pInput)
  9205  014344  D029               	goto	l363
  9206  014346                     
  9207                           ;Port.c: 72: return (BytePtr)&TRISA;
  9208  014346  0E92               	movlw	146
  9209  014348  0100               	movlb	0	; () banked
  9210  01434A  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9211  01434C  0E0F               	movlw	15
  9212  01434E  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9213                           
  9214                           ; BSR set to: 0
  9215  014350  0012               	return	
  9216  014352                     
  9217                           ; BSR set to: 0
  9218                           ;Port.c: 74: return (BytePtr)&TRISB;
  9219                           
  9220                           ; BSR set to: 0
  9221  014352  0E93               	movlw	147
  9222  014354  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9223  014356  0E0F               	movlw	15
  9224  014358  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9225                           
  9226                           ; BSR set to: 0
  9227  01435A  0012               	return	
  9228  01435C                     
  9229                           ; BSR set to: 0
  9230                           ;Port.c: 76: return (BytePtr)&TRISC;
  9231                           
  9232                           ; BSR set to: 0
  9233  01435C  0E94               	movlw	148
  9234  01435E  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9235  014360  0E0F               	movlw	15
  9236  014362  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9237                           
  9238                           ; BSR set to: 0
  9239  014364  0012               	return	
  9240  014366                     
  9241                           ; BSR set to: 0
  9242                           ;Port.c: 78: return (BytePtr)&TRISD;
  9243                           
  9244                           ; BSR set to: 0
  9245  014366  0E95               	movlw	149
  9246  014368  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9247  01436A  0E0F               	movlw	15
  9248  01436C  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9249                           
  9250                           ; BSR set to: 0
  9251  01436E  0012               	return	
  9252  014370                     
  9253                           ; BSR set to: 0
  9254                           ;Port.c: 80: return (BytePtr)&TRISE;
  9255                           
  9256                           ; BSR set to: 0
  9257  014370  0E96               	movlw	150
  9258  014372  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9259  014374  0E0F               	movlw	15
  9260  014376  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9261                           
  9262                           ; BSR set to: 0
  9263  014378  0012               	return	
  9264  01437A                     
  9265                           ; BSR set to: 0
  9266                           ;Port.c: 82: return (BytePtr)&TRISF;
  9267                           
  9268                           ; BSR set to: 0
  9269  01437A  0E97               	movlw	151
  9270  01437C  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9271  01437E  0E0F               	movlw	15
  9272  014380  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9273                           
  9274                           ; BSR set to: 0
  9275  014382  0012               	return	
  9276  014384                     
  9277                           ; BSR set to: 0
  9278                           ;Port.c: 84: return (BytePtr)&TRISG;
  9279                           
  9280                           ; BSR set to: 0
  9281  014384  0E98               	movlw	152
  9282  014386  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9283  014388  0E0F               	movlw	15
  9284  01438A  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9285                           
  9286                           ; BSR set to: 0
  9287  01438C  0012               	return	
  9288  01438E                     
  9289                           ; BSR set to: 0
  9290                           ;Port.c: 86: return (void*)0;
  9291                           
  9292                           ; BSR set to: 0
  9293  01438E  0E00               	movlw	0
  9294  014390  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9295  014392  0E00               	movlw	0
  9296  014394  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9297                           
  9298                           ; BSR set to: 0
  9299                           ;Port.c: 87: }
  9300                           
  9301                           ; BSR set to: 0
  9302  014396  0012               	return	
  9303  014398                     l363:
  9304                           
  9305                           ; BSR set to: 0
  9306  014398  0100               	movlb	0	; () banked
  9307  01439A  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
  9308                           
  9309                           ; Switch size 1, requested type "space"
  9310                           ; Number of cases is 7, Range of values is 0 to 6
  9311                           ; switch strategies available:
  9312                           ; Name         Instructions Cycles
  9313                           ; simple_byte           22    12 (average)
  9314                           ;	Chosen strategy is simple_byte
  9315  01439C  0A00               	xorlw	0	; case 0
  9316  01439E  B4D8               	btfsc	status,2,c
  9317  0143A0  D7D2               	goto	l364
  9318  0143A2  0A01               	xorlw	1	; case 1
  9319  0143A4  B4D8               	btfsc	status,2,c
  9320  0143A6  D7D5               	goto	l366
  9321  0143A8  0A03               	xorlw	3	; case 2
  9322  0143AA  B4D8               	btfsc	status,2,c
  9323  0143AC  D7D7               	goto	l367
  9324  0143AE  0A01               	xorlw	1	; case 3
  9325  0143B0  B4D8               	btfsc	status,2,c
  9326  0143B2  D7D9               	goto	l368
  9327  0143B4  0A07               	xorlw	7	; case 4
  9328  0143B6  B4D8               	btfsc	status,2,c
  9329  0143B8  D7DB               	goto	l369
  9330  0143BA  0A01               	xorlw	1	; case 5
  9331  0143BC  B4D8               	btfsc	status,2,c
  9332  0143BE  D7DD               	goto	l370
  9333  0143C0  0A03               	xorlw	3	; case 6
  9334  0143C2  B4D8               	btfsc	status,2,c
  9335  0143C4  D7DF               	goto	l371
  9336  0143C6  D7E3               	goto	l372
  9337  0143C8                     __end_of_GetPortTRIS:
  9338                           	opt stack 0
  9339                           tosu	equ	0xFFF
  9340                           tosh	equ	0xFFE
  9341                           tosl	equ	0xFFD
  9342                           pclath	equ	0xFFA
  9343                           tblptru	equ	0xFF8
  9344                           tblptrh	equ	0xFF7
  9345                           tblptrl	equ	0xFF6
  9346                           tablat	equ	0xFF5
  9347                           prodh	equ	0xFF4
  9348                           prodl	equ	0xFF3
  9349                           postinc0	equ	0xFEE
  9350                           wreg	equ	0xFE8
  9351                           postdec1	equ	0xFE5
  9352                           fsr1h	equ	0xFE2
  9353                           fsr1l	equ	0xFE1
  9354                           indf2	equ	0xFDF
  9355                           postinc2	equ	0xFDE
  9356                           postdec2	equ	0xFDD
  9357                           fsr2h	equ	0xFDA
  9358                           fsr2l	equ	0xFD9
  9359                           status	equ	0xFD8
  9360                           
  9361 ;; *************** function _GetPortProperties *****************
  9362 ;; Defined at:
  9363 ;;		line 21 in file "Library/Port.c"
  9364 ;; Parameters:    Size  Location     Type
  9365 ;;  pInput          1    wreg     enum E6786
  9366 ;; Auto vars:     Size  Location     Type
  9367 ;;  pInput          1    2[BANK0 ] enum E6786
  9368 ;; Return value:  Size  Location     Type
  9369 ;;                  2    0[BANK0 ] PTR struct PortProperty
  9370 ;; Registers used:
  9371 ;;		wreg, status,2, status,0
  9372 ;; Tracked objects:
  9373 ;;		On entry : 0/0
  9374 ;;		On exit  : 0/0
  9375 ;;		Unchanged: 0/0
  9376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9377 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9378 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;Total ram usage:        3 bytes
  9382 ;; Hardware stack levels used:    1
  9383 ;; Hardware stack levels required when called:    7
  9384 ;; This function calls:
  9385 ;;		Nothing
  9386 ;; This function is called by:
  9387 ;;		_Port_Init
  9388 ;; This function uses a non-reentrant model
  9389 ;;
  9390                           
  9391                           	psect	text33
  9392  0143C8                     __ptext33:
  9393                           	opt stack 0
  9394  0143C8                     _GetPortProperties:
  9395                           	opt stack 21
  9396                           
  9397                           ; BSR set to: 0
  9398                           ;incstack = 0
  9399                           ;GetPortProperties@pInput stored from wreg
  9400  0143C8  0100               	movlb	0	; () banked
  9401  0143CA  6F62               	movwf	GetPortProperties@pInput& (0+255),b
  9402                           
  9403                           ;Port.c: 23: switch (pInput)
  9404  0143CC  D029               	goto	l337
  9405  0143CE                     
  9406                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  9407  0143CE  0EB5               	movlw	low _PortA_Property
  9408  0143D0  0100               	movlb	0	; () banked
  9409  0143D2  6F60               	movwf	?_GetPortProperties& (0+255),b
  9410  0143D4  0EFE               	movlw	high _PortA_Property
  9411  0143D6  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9412                           
  9413                           ; BSR set to: 0
  9414  0143D8  0012               	return	
  9415  0143DA                     
  9416                           ; BSR set to: 0
  9417                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  9418                           
  9419                           ; BSR set to: 0
  9420  0143DA  0EB3               	movlw	low _PortB_Property
  9421  0143DC  6F60               	movwf	?_GetPortProperties& (0+255),b
  9422  0143DE  0EFE               	movlw	high _PortB_Property
  9423  0143E0  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9424                           
  9425                           ; BSR set to: 0
  9426  0143E2  0012               	return	
  9427  0143E4                     
  9428                           ; BSR set to: 0
  9429                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  9430                           
  9431                           ; BSR set to: 0
  9432  0143E4  0EB1               	movlw	low _PortC_Property
  9433  0143E6  6F60               	movwf	?_GetPortProperties& (0+255),b
  9434  0143E8  0EFE               	movlw	high _PortC_Property
  9435  0143EA  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9436                           
  9437                           ; BSR set to: 0
  9438  0143EC  0012               	return	
  9439  0143EE                     
  9440                           ; BSR set to: 0
  9441                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  9442                           
  9443                           ; BSR set to: 0
  9444  0143EE  0EAF               	movlw	low _PortD_Property
  9445  0143F0  6F60               	movwf	?_GetPortProperties& (0+255),b
  9446  0143F2  0EFE               	movlw	high _PortD_Property
  9447  0143F4  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9448                           
  9449                           ; BSR set to: 0
  9450  0143F6  0012               	return	
  9451  0143F8                     
  9452                           ; BSR set to: 0
  9453                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  9454                           
  9455                           ; BSR set to: 0
  9456  0143F8  0EAD               	movlw	low _PortE_Property
  9457  0143FA  6F60               	movwf	?_GetPortProperties& (0+255),b
  9458  0143FC  0EFE               	movlw	high _PortE_Property
  9459  0143FE  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9460                           
  9461                           ; BSR set to: 0
  9462  014400  0012               	return	
  9463  014402                     
  9464                           ; BSR set to: 0
  9465                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  9466                           
  9467                           ; BSR set to: 0
  9468  014402  0EAB               	movlw	low _PortF_Property
  9469  014404  6F60               	movwf	?_GetPortProperties& (0+255),b
  9470  014406  0EFE               	movlw	high _PortF_Property
  9471  014408  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9472                           
  9473                           ; BSR set to: 0
  9474  01440A  0012               	return	
  9475  01440C                     
  9476                           ; BSR set to: 0
  9477                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  9478                           
  9479                           ; BSR set to: 0
  9480  01440C  0EA9               	movlw	low _PortG_Property
  9481  01440E  6F60               	movwf	?_GetPortProperties& (0+255),b
  9482  014410  0EFE               	movlw	high _PortG_Property
  9483  014412  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9484                           
  9485                           ; BSR set to: 0
  9486  014414  0012               	return	
  9487  014416                     
  9488                           ; BSR set to: 0
  9489                           ;Port.c: 40: return (void*)0;
  9490                           
  9491                           ; BSR set to: 0
  9492  014416  0E00               	movlw	0
  9493  014418  6F60               	movwf	?_GetPortProperties& (0+255),b
  9494  01441A  0E00               	movlw	0
  9495  01441C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9496                           
  9497                           ; BSR set to: 0
  9498                           ;Port.c: 41: }
  9499                           
  9500                           ; BSR set to: 0
  9501  01441E  0012               	return	
  9502  014420                     l337:
  9503                           
  9504                           ; BSR set to: 0
  9505  014420  0100               	movlb	0	; () banked
  9506  014422  5162               	movf	GetPortProperties@pInput& (0+255),w,b
  9507                           
  9508                           ; Switch size 1, requested type "space"
  9509                           ; Number of cases is 7, Range of values is 0 to 6
  9510                           ; switch strategies available:
  9511                           ; Name         Instructions Cycles
  9512                           ; simple_byte           22    12 (average)
  9513                           ;	Chosen strategy is simple_byte
  9514  014424  0A00               	xorlw	0	; case 0
  9515  014426  B4D8               	btfsc	status,2,c
  9516  014428  D7D2               	goto	l338
  9517  01442A  0A01               	xorlw	1	; case 1
  9518  01442C  B4D8               	btfsc	status,2,c
  9519  01442E  D7D5               	goto	l340
  9520  014430  0A03               	xorlw	3	; case 2
  9521  014432  B4D8               	btfsc	status,2,c
  9522  014434  D7D7               	goto	l341
  9523  014436  0A01               	xorlw	1	; case 3
  9524  014438  B4D8               	btfsc	status,2,c
  9525  01443A  D7D9               	goto	l342
  9526  01443C  0A07               	xorlw	7	; case 4
  9527  01443E  B4D8               	btfsc	status,2,c
  9528  014440  D7DB               	goto	l343
  9529  014442  0A01               	xorlw	1	; case 5
  9530  014444  B4D8               	btfsc	status,2,c
  9531  014446  D7DD               	goto	l344
  9532  014448  0A03               	xorlw	3	; case 6
  9533  01444A  B4D8               	btfsc	status,2,c
  9534  01444C  D7DF               	goto	l345
  9535  01444E  D7E3               	goto	l346
  9536  014450                     __end_of_GetPortProperties:
  9537                           	opt stack 0
  9538                           tosu	equ	0xFFF
  9539                           tosh	equ	0xFFE
  9540                           tosl	equ	0xFFD
  9541                           pclath	equ	0xFFA
  9542                           tblptru	equ	0xFF8
  9543                           tblptrh	equ	0xFF7
  9544                           tblptrl	equ	0xFF6
  9545                           tablat	equ	0xFF5
  9546                           prodh	equ	0xFF4
  9547                           prodl	equ	0xFF3
  9548                           postinc0	equ	0xFEE
  9549                           wreg	equ	0xFE8
  9550                           postdec1	equ	0xFE5
  9551                           fsr1h	equ	0xFE2
  9552                           fsr1l	equ	0xFE1
  9553                           indf2	equ	0xFDF
  9554                           postinc2	equ	0xFDE
  9555                           postdec2	equ	0xFDD
  9556                           fsr2h	equ	0xFDA
  9557                           fsr2l	equ	0xFD9
  9558                           status	equ	0xFD8
  9559                           
  9560 ;; *************** function _GetPortPORT *****************
  9561 ;; Defined at:
  9562 ;;		line 44 in file "Library/Port.c"
  9563 ;; Parameters:    Size  Location     Type
  9564 ;;  pInput          1    wreg     enum E6786
  9565 ;; Auto vars:     Size  Location     Type
  9566 ;;  pInput          1    2[BANK0 ] enum E6786
  9567 ;; Return value:  Size  Location     Type
  9568 ;;                  2    0[BANK0 ] PTR struct Byte
  9569 ;; Registers used:
  9570 ;;		wreg, status,2, status,0
  9571 ;; Tracked objects:
  9572 ;;		On entry : 0/0
  9573 ;;		On exit  : 0/0
  9574 ;;		Unchanged: 0/0
  9575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9576 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9577 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;Total ram usage:        3 bytes
  9581 ;; Hardware stack levels used:    1
  9582 ;; Hardware stack levels required when called:    7
  9583 ;; This function calls:
  9584 ;;		Nothing
  9585 ;; This function is called by:
  9586 ;;		_Port_Init
  9587 ;; This function uses a non-reentrant model
  9588 ;;
  9589                           
  9590                           	psect	text34
  9591  014450                     __ptext34:
  9592                           	opt stack 0
  9593  014450                     _GetPortPORT:
  9594                           	opt stack 21
  9595                           
  9596                           ; BSR set to: 0
  9597                           ;incstack = 0
  9598                           ;GetPortPORT@pInput stored from wreg
  9599  014450  0100               	movlb	0	; () banked
  9600  014452  6F62               	movwf	GetPortPORT@pInput& (0+255),b
  9601                           
  9602                           ;Port.c: 46: switch (pInput)
  9603  014454  D029               	goto	l350
  9604  014456                     
  9605                           ;Port.c: 49: return (BytePtr)&PORTA;
  9606  014456  0E80               	movlw	128
  9607  014458  0100               	movlb	0	; () banked
  9608  01445A  6F60               	movwf	?_GetPortPORT& (0+255),b
  9609  01445C  0E0F               	movlw	15
  9610  01445E  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9611                           
  9612                           ; BSR set to: 0
  9613  014460  0012               	return	
  9614  014462                     
  9615                           ; BSR set to: 0
  9616                           ;Port.c: 51: return (BytePtr)&PORTB;
  9617                           
  9618                           ; BSR set to: 0
  9619  014462  0E81               	movlw	129
  9620  014464  6F60               	movwf	?_GetPortPORT& (0+255),b
  9621  014466  0E0F               	movlw	15
  9622  014468  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9623                           
  9624                           ; BSR set to: 0
  9625  01446A  0012               	return	
  9626  01446C                     
  9627                           ; BSR set to: 0
  9628                           ;Port.c: 53: return (BytePtr)&PORTC;
  9629                           
  9630                           ; BSR set to: 0
  9631  01446C  0E82               	movlw	130
  9632  01446E  6F60               	movwf	?_GetPortPORT& (0+255),b
  9633  014470  0E0F               	movlw	15
  9634  014472  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9635                           
  9636                           ; BSR set to: 0
  9637  014474  0012               	return	
  9638  014476                     
  9639                           ; BSR set to: 0
  9640                           ;Port.c: 55: return (BytePtr)&PORTD;
  9641                           
  9642                           ; BSR set to: 0
  9643  014476  0E83               	movlw	131
  9644  014478  6F60               	movwf	?_GetPortPORT& (0+255),b
  9645  01447A  0E0F               	movlw	15
  9646  01447C  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9647                           
  9648                           ; BSR set to: 0
  9649  01447E  0012               	return	
  9650  014480                     
  9651                           ; BSR set to: 0
  9652                           ;Port.c: 57: return (BytePtr)&PORTE;
  9653                           
  9654                           ; BSR set to: 0
  9655  014480  0E84               	movlw	132
  9656  014482  6F60               	movwf	?_GetPortPORT& (0+255),b
  9657  014484  0E0F               	movlw	15
  9658  014486  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9659                           
  9660                           ; BSR set to: 0
  9661  014488  0012               	return	
  9662  01448A                     
  9663                           ; BSR set to: 0
  9664                           ;Port.c: 59: return (BytePtr)&PORTF;
  9665                           
  9666                           ; BSR set to: 0
  9667  01448A  0E85               	movlw	133
  9668  01448C  6F60               	movwf	?_GetPortPORT& (0+255),b
  9669  01448E  0E0F               	movlw	15
  9670  014490  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9671                           
  9672                           ; BSR set to: 0
  9673  014492  0012               	return	
  9674  014494                     
  9675                           ; BSR set to: 0
  9676                           ;Port.c: 61: return (BytePtr)&PORTG;
  9677                           
  9678                           ; BSR set to: 0
  9679  014494  0E86               	movlw	134
  9680  014496  6F60               	movwf	?_GetPortPORT& (0+255),b
  9681  014498  0E0F               	movlw	15
  9682  01449A  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9683                           
  9684                           ; BSR set to: 0
  9685  01449C  0012               	return	
  9686  01449E                     
  9687                           ; BSR set to: 0
  9688                           ;Port.c: 63: return (void*)0;
  9689                           
  9690                           ; BSR set to: 0
  9691  01449E  0E00               	movlw	0
  9692  0144A0  6F60               	movwf	?_GetPortPORT& (0+255),b
  9693  0144A2  0E00               	movlw	0
  9694  0144A4  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9695                           
  9696                           ; BSR set to: 0
  9697                           ;Port.c: 64: }
  9698                           
  9699                           ; BSR set to: 0
  9700  0144A6  0012               	return	
  9701  0144A8                     l350:
  9702                           
  9703                           ; BSR set to: 0
  9704  0144A8  0100               	movlb	0	; () banked
  9705  0144AA  5162               	movf	GetPortPORT@pInput& (0+255),w,b
  9706                           
  9707                           ; Switch size 1, requested type "space"
  9708                           ; Number of cases is 7, Range of values is 0 to 6
  9709                           ; switch strategies available:
  9710                           ; Name         Instructions Cycles
  9711                           ; simple_byte           22    12 (average)
  9712                           ;	Chosen strategy is simple_byte
  9713  0144AC  0A00               	xorlw	0	; case 0
  9714  0144AE  B4D8               	btfsc	status,2,c
  9715  0144B0  D7D2               	goto	l351
  9716  0144B2  0A01               	xorlw	1	; case 1
  9717  0144B4  B4D8               	btfsc	status,2,c
  9718  0144B6  D7D5               	goto	l353
  9719  0144B8  0A03               	xorlw	3	; case 2
  9720  0144BA  B4D8               	btfsc	status,2,c
  9721  0144BC  D7D7               	goto	l354
  9722  0144BE  0A01               	xorlw	1	; case 3
  9723  0144C0  B4D8               	btfsc	status,2,c
  9724  0144C2  D7D9               	goto	l355
  9725  0144C4  0A07               	xorlw	7	; case 4
  9726  0144C6  B4D8               	btfsc	status,2,c
  9727  0144C8  D7DB               	goto	l356
  9728  0144CA  0A01               	xorlw	1	; case 5
  9729  0144CC  B4D8               	btfsc	status,2,c
  9730  0144CE  D7DD               	goto	l357
  9731  0144D0  0A03               	xorlw	3	; case 6
  9732  0144D2  B4D8               	btfsc	status,2,c
  9733  0144D4  D7DF               	goto	l358
  9734  0144D6  D7E3               	goto	l359
  9735  0144D8                     __end_of_GetPortPORT:
  9736                           	opt stack 0
  9737                           tosu	equ	0xFFF
  9738                           tosh	equ	0xFFE
  9739                           tosl	equ	0xFFD
  9740                           pclath	equ	0xFFA
  9741                           tblptru	equ	0xFF8
  9742                           tblptrh	equ	0xFF7
  9743                           tblptrl	equ	0xFF6
  9744                           tablat	equ	0xFF5
  9745                           prodh	equ	0xFF4
  9746                           prodl	equ	0xFF3
  9747                           postinc0	equ	0xFEE
  9748                           wreg	equ	0xFE8
  9749                           postdec1	equ	0xFE5
  9750                           fsr1h	equ	0xFE2
  9751                           fsr1l	equ	0xFE1
  9752                           indf2	equ	0xFDF
  9753                           postinc2	equ	0xFDE
  9754                           postdec2	equ	0xFDD
  9755                           fsr2h	equ	0xFDA
  9756                           fsr2l	equ	0xFD9
  9757                           status	equ	0xFD8
  9758                           
  9759 ;; *************** function _LED_Init *****************
  9760 ;; Defined at:
  9761 ;;		line 15 in file "Library/LED.c"
  9762 ;; Parameters:    Size  Location     Type
  9763 ;;  pLED            1    wreg     enum E6739
  9764 ;; Auto vars:     Size  Location     Type
  9765 ;;  pLED            1   45[BANK0 ] enum E6739
  9766 ;; Return value:  Size  Location     Type
  9767 ;;                  1    wreg      void 
  9768 ;; Registers used:
  9769 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9770 ;; Tracked objects:
  9771 ;;		On entry : 0/0
  9772 ;;		On exit  : 0/0
  9773 ;;		Unchanged: 0/0
  9774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9776 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9778 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9779 ;;Total ram usage:        1 bytes
  9780 ;; Hardware stack levels used:    1
  9781 ;; Hardware stack levels required when called:   12
  9782 ;; This function calls:
  9783 ;;		_LED_Set
  9784 ;;		_Port_SetPinType
  9785 ;; This function is called by:
  9786 ;;		_MXK_Init
  9787 ;;		_main
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           	psect	text35
  9792  014EA2                     __ptext35:
  9793                           	opt stack 0
  9794  014EA2                     _LED_Init:
  9795                           	opt stack 17
  9796                           
  9797                           ; BSR set to: 0
  9798                           ;incstack = 0
  9799                           ;LED_Init@pLED stored from wreg
  9800  014EA2  0100               	movlb	0	; () banked
  9801  014EA4  6F8D               	movwf	LED_Init@pLED& (0+255),b
  9802                           
  9803                           ;LED.c: 17: switch (pLED)
  9804  014EA6  D018               	goto	l220
  9805  014EA8                     
  9806                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  9807  014EA8  0EAF               	movlw	low _PortC
  9808  014EAA  0100               	movlb	0	; () banked
  9809  014EAC  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9810  014EAE  0E01               	movlw	high _PortC
  9811  014EB0  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9812  014EB2  0E00               	movlw	0
  9813  014EB4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9814  014EB6  0E03               	movlw	3
  9815  014EB8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9816  014EBA  ECA1  F091         	call	_Port_SetPinType	;wreg free
  9817                           
  9818                           ;LED.c: 21: break;
  9819  014EBE  D014               	goto	l222
  9820  014EC0                     
  9821                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  9822  014EC0  0EAF               	movlw	low _PortC
  9823  014EC2  0100               	movlb	0	; () banked
  9824  014EC4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9825  014EC6  0E01               	movlw	high _PortC
  9826  014EC8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9827  014ECA  0E01               	movlw	1
  9828  014ECC  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9829  014ECE  0E03               	movlw	3
  9830  014ED0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9831  014ED2  ECA1  F091         	call	_Port_SetPinType	;wreg free
  9832                           
  9833                           ;LED.c: 25: }
  9834                           
  9835                           ;LED.c: 24: break;
  9836  014ED6  D008               	goto	l222
  9837  014ED8                     l220:
  9838  014ED8  0100               	movlb	0	; () banked
  9839  014EDA  518D               	movf	LED_Init@pLED& (0+255),w,b
  9840                           
  9841                           ; Switch size 1, requested type "space"
  9842                           ; Number of cases is 2, Range of values is 0 to 1
  9843                           ; switch strategies available:
  9844                           ; Name         Instructions Cycles
  9845                           ; simple_byte            7     4 (average)
  9846                           ;	Chosen strategy is simple_byte
  9847  014EDC  0A00               	xorlw	0	; case 0
  9848  014EDE  B4D8               	btfsc	status,2,c
  9849  014EE0  D7E3               	goto	l221
  9850  014EE2  0A01               	xorlw	1	; case 1
  9851  014EE4  B4D8               	btfsc	status,2,c
  9852  014EE6  D7EC               	goto	l223
  9853  014EE8                     l222:
  9854                           
  9855                           ;LED.c: 26: LED_Set(pLED, 0);
  9856                           
  9857                           ; BSR set to: 0
  9858  014EE8  0E00               	movlw	0
  9859  014EEA  0100               	movlb	0	; () banked
  9860  014EEC  6F74               	movwf	LED_Set@pValue& (0+255),b
  9861  014EEE  518D               	movf	LED_Init@pLED& (0+255),w,b
  9862  014EF0  ECBB  F0A8         	call	_LED_Set
  9863  014EF4  0012               	return		;funcret
  9864  014EF6                     __end_of_LED_Init:
  9865                           	opt stack 0
  9866                           tosu	equ	0xFFF
  9867                           tosh	equ	0xFFE
  9868                           tosl	equ	0xFFD
  9869                           pclath	equ	0xFFA
  9870                           tblptru	equ	0xFF8
  9871                           tblptrh	equ	0xFF7
  9872                           tblptrl	equ	0xFF6
  9873                           tablat	equ	0xFF5
  9874                           prodh	equ	0xFF4
  9875                           prodl	equ	0xFF3
  9876                           postinc0	equ	0xFEE
  9877                           wreg	equ	0xFE8
  9878                           postdec1	equ	0xFE5
  9879                           fsr1h	equ	0xFE2
  9880                           fsr1l	equ	0xFE1
  9881                           indf2	equ	0xFDF
  9882                           postinc2	equ	0xFDE
  9883                           postdec2	equ	0xFDD
  9884                           fsr2h	equ	0xFDA
  9885                           fsr2l	equ	0xFD9
  9886                           status	equ	0xFD8
  9887                           
  9888 ;; *************** function _LED_Set *****************
  9889 ;; Defined at:
  9890 ;;		line 33 in file "Library/LED.c"
  9891 ;; Parameters:    Size  Location     Type
  9892 ;;  pLED            1    wreg     enum E6739
  9893 ;;  pValue          1   20[BANK0 ] unsigned char 
  9894 ;; Auto vars:     Size  Location     Type
  9895 ;;  pLED            1   21[BANK0 ] enum E6739
  9896 ;; Return value:  Size  Location     Type
  9897 ;;                  1    wreg      void 
  9898 ;; Registers used:
  9899 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9900 ;; Tracked objects:
  9901 ;;		On entry : 0/0
  9902 ;;		On exit  : 0/0
  9903 ;;		Unchanged: 0/0
  9904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9905 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9909 ;;Total ram usage:        2 bytes
  9910 ;; Hardware stack levels used:    1
  9911 ;; Hardware stack levels required when called:   11
  9912 ;; This function calls:
  9913 ;;		_Port_SetPin
  9914 ;; This function is called by:
  9915 ;;		_LED_Init
  9916 ;;		_SYSTEM_Initialize
  9917 ;; This function uses a non-reentrant model
  9918 ;;
  9919                           
  9920                           	psect	text36
  9921  015176                     __ptext36:
  9922                           	opt stack 0
  9923  015176                     _LED_Set:
  9924                           	opt stack 17
  9925                           
  9926                           ;incstack = 0
  9927                           ;LED_Set@pLED stored from wreg
  9928  015176  0100               	movlb	0	; () banked
  9929  015178  6F75               	movwf	LED_Set@pLED& (0+255),b
  9930                           
  9931                           ;LED.c: 35: switch (pLED)
  9932  01517A  D018               	goto	l227
  9933  01517C                     
  9934                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  9935  01517C  0EAF               	movlw	low _PortC
  9936  01517E  0100               	movlb	0	; () banked
  9937  015180  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9938  015182  0E01               	movlw	high _PortC
  9939  015184  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9940  015186  0E00               	movlw	0
  9941  015188  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9942  01518A  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  9943  01518E  EC32  F09E         	call	_Port_SetPin	;wreg free
  9944                           
  9945                           ;LED.c: 39: break;
  9946  015192  0012               	return	
  9947  015194                     
  9948                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  9949  015194  0EAF               	movlw	low _PortC
  9950  015196  0100               	movlb	0	; () banked
  9951  015198  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9952  01519A  0E01               	movlw	high _PortC
  9953  01519C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9954  01519E  0E01               	movlw	1
  9955  0151A0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9956  0151A2  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  9957  0151A6  EC32  F09E         	call	_Port_SetPin	;wreg free
  9958                           
  9959                           ;LED.c: 43: }
  9960                           
  9961                           ;LED.c: 42: break;
  9962  0151AA  0012               	return	
  9963  0151AC                     l227:
  9964  0151AC  0100               	movlb	0	; () banked
  9965  0151AE  5175               	movf	LED_Set@pLED& (0+255),w,b
  9966                           
  9967                           ; Switch size 1, requested type "space"
  9968                           ; Number of cases is 2, Range of values is 0 to 1
  9969                           ; switch strategies available:
  9970                           ; Name         Instructions Cycles
  9971                           ; simple_byte            7     4 (average)
  9972                           ;	Chosen strategy is simple_byte
  9973  0151B0  0A00               	xorlw	0	; case 0
  9974  0151B2  B4D8               	btfsc	status,2,c
  9975  0151B4  D7E3               	goto	l228
  9976  0151B6  0A01               	xorlw	1	; case 1
  9977  0151B8  A4D8               	btfss	status,2,c
  9978  0151BA  0012               	return	
  9979  0151BC  D7EB               	goto	l230
  9980  0151BE                     __end_of_LED_Set:
  9981                           	opt stack 0
  9982                           tosu	equ	0xFFF
  9983                           tosh	equ	0xFFE
  9984                           tosl	equ	0xFFD
  9985                           pclath	equ	0xFFA
  9986                           tblptru	equ	0xFF8
  9987                           tblptrh	equ	0xFF7
  9988                           tblptrl	equ	0xFF6
  9989                           tablat	equ	0xFF5
  9990                           prodh	equ	0xFF4
  9991                           prodl	equ	0xFF3
  9992                           postinc0	equ	0xFEE
  9993                           wreg	equ	0xFE8
  9994                           postdec1	equ	0xFE5
  9995                           fsr1h	equ	0xFE2
  9996                           fsr1l	equ	0xFE1
  9997                           indf2	equ	0xFDF
  9998                           postinc2	equ	0xFDE
  9999                           postdec2	equ	0xFDD
 10000                           fsr2h	equ	0xFDA
 10001                           fsr2l	equ	0xFD9
 10002                           status	equ	0xFD8
 10003                           
 10004 ;; *************** function _MXK_Dequeue *****************
 10005 ;; Defined at:
 10006 ;;		line 153 in file "Library/MXK.c"
 10007 ;; Parameters:    Size  Location     Type
 10008 ;;		None
 10009 ;; Auto vars:     Size  Location     Type
 10010 ;;		None
 10011 ;; Return value:  Size  Location     Type
 10012 ;;                  1    wreg      void 
 10013 ;; Registers used:
 10014 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10015 ;; Tracked objects:
 10016 ;;		On entry : 0/0
 10017 ;;		On exit  : 0/0
 10018 ;;		Unchanged: 0/0
 10019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10024 ;;Total ram usage:        0 bytes
 10025 ;; Hardware stack levels used:    1
 10026 ;; Hardware stack levels required when called:   12
 10027 ;; This function calls:
 10028 ;;		Absolute function
 10029 ;;		_Motor_Step
 10030 ;; This function is called by:
 10031 ;;		_main
 10032 ;; This function uses a non-reentrant model
 10033 ;;
 10034                           
 10035                           	psect	text37
 10036  0155AC                     __ptext37:
 10037                           	opt stack 0
 10038  0155AC                     _MXK_Dequeue:
 10039                           	opt stack 18
 10040                           
 10041                           ;MXK.c: 155: if (lQueue)
 10042                           
 10043                           ;incstack = 0
 10044  0155AC  0100               	movlb	0	; () banked
 10045  0155AE  51DD               	movf	_lQueue& (0+255),w,b	;volatile
 10046  0155B0  11DE               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 10047  0155B2  11DF               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 10048  0155B4  B4D8               	btfsc	status,2,c
 10049  0155B6  D00C               	goto	u14279
 10050                           
 10051                           ; BSR set to: 0
 10052                           ;MXK.c: 156: lQueue();
 10053  0155B8  D801               	call	u14278
 10054  0155BA  D00A               	goto	u14279
 10055  0155BC                     u14278:
 10056  0155BC  0005               	push	
 10057  0155BE  6EFA               	movwf	pclath,c
 10058  0155C0  51DD               	movf	_lQueue& (0+255),w,b	;volatile
 10059  0155C2  6EFD               	movwf	tosl,c
 10060  0155C4  51DE               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 10061  0155C6  6EFE               	movwf	tosh,c
 10062  0155C8  51DF               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 10063  0155CA  6EFF               	movwf	tosu,c
 10064  0155CC  50FA               	movf	pclath,w,c
 10065  0155CE  0012               	return		;indir
 10066  0155D0                     u14279:
 10067                           
 10068                           ;MXK.c: 157: lQueue = 0;
 10069  0155D0  0E00               	movlw	0
 10070  0155D2  0100               	movlb	0	; () banked
 10071  0155D4  6FDD               	movwf	_lQueue& (0+255),b	;volatile
 10072  0155D6  0E00               	movlw	0
 10073  0155D8  6FDE               	movwf	(_lQueue+1)& (0+255),b	;volatile
 10074  0155DA  0E00               	movlw	0
 10075  0155DC  6FDF               	movwf	(_lQueue+2)& (0+255),b	;volatile
 10076                           
 10077                           ; BSR set to: 0
 10078  0155DE  0012               	return		;funcret
 10079  0155E0                     __end_of_MXK_Dequeue:
 10080                           	opt stack 0
 10081                           tosu	equ	0xFFF
 10082                           tosh	equ	0xFFE
 10083                           tosl	equ	0xFFD
 10084                           pclath	equ	0xFFA
 10085                           tblptru	equ	0xFF8
 10086                           tblptrh	equ	0xFF7
 10087                           tblptrl	equ	0xFF6
 10088                           tablat	equ	0xFF5
 10089                           prodh	equ	0xFF4
 10090                           prodl	equ	0xFF3
 10091                           postinc0	equ	0xFEE
 10092                           wreg	equ	0xFE8
 10093                           postdec1	equ	0xFE5
 10094                           fsr1h	equ	0xFE2
 10095                           fsr1l	equ	0xFE1
 10096                           indf2	equ	0xFDF
 10097                           postinc2	equ	0xFDE
 10098                           postdec2	equ	0xFDD
 10099                           fsr2h	equ	0xFDA
 10100                           fsr2l	equ	0xFD9
 10101                           status	equ	0xFD8
 10102                           
 10103 ;; *************** function _Motor_Step *****************
 10104 ;; Defined at:
 10105 ;;		line 75 in file "Library/Motor.c"
 10106 ;; Parameters:    Size  Location     Type
 10107 ;;		None
 10108 ;; Auto vars:     Size  Location     Type
 10109 ;;		None
 10110 ;; Return value:  Size  Location     Type
 10111 ;;                  1    wreg      void 
 10112 ;; Registers used:
 10113 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10114 ;; Tracked objects:
 10115 ;;		On entry : 0/0
 10116 ;;		On exit  : 0/0
 10117 ;;		Unchanged: 0/0
 10118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10121 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10122 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10123 ;;Total ram usage:        2 bytes
 10124 ;; Hardware stack levels used:    1
 10125 ;; Hardware stack levels required when called:   11
 10126 ;; This function calls:
 10127 ;;		_MXK_Queue
 10128 ;;		_MXK_Release
 10129 ;;		_MXK_SwitchTo
 10130 ;;		_Port_SetPin
 10131 ;;		_Timer0_Restart
 10132 ;;		_Timer0_Stop
 10133 ;; This function is called by:
 10134 ;;		_Motor_Init
 10135 ;;		_Timer0_ISR
 10136 ;;		_MXK_Dequeue
 10137 ;; This function uses a non-reentrant model
 10138 ;;
 10139                           
 10140                           	psect	text38
 10141  0136D6                     __ptext38:
 10142                           	opt stack 0
 10143  0136D6                     _Motor_Step:
 10144                           	opt stack 0
 10145                           
 10146                           ; BSR set to: 0
 10147                           ;Skip over the trampoline to the duplicate function for level 2
 10148  0136D6  B251               	btfsc	btemp,1,c
 10149  0136D8  EF72  F09C         	goto	i2_Motor_Step
 10150  0136DC                     _Motor_Step$intlevel0:
 10151                           	opt stack 18
 10152                           
 10153                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 10154                           
 10155                           ;incstack = 0
 10156  0136DC  0100               	movlb	0	; () banked
 10157  0136DE  EE20 F004          	lfsr	2,4
 10158  0136E2  51EA               	movf	_lMotor& (0+255),w,b
 10159  0136E4  26D9               	addwf	fsr2l,f,c
 10160  0136E6  51EB               	movf	(_lMotor+1)& (0+255),w,b
 10161  0136E8  22DA               	addwfc	fsr2h,f,c
 10162  0136EA  50DF               	movf	indf2,w,c
 10163  0136EC  EC2D  F0AA         	call	_MXK_SwitchTo
 10164  0136F0  0900               	iorlw	0
 10165  0136F2  B4D8               	btfsc	status,2,c
 10166  0136F4  D06E               	goto	l1627
 10167                           
 10168                           ;Motor.c: 78: {
 10169                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 10170  0136F6  C0EA  FFD9         	movff	_lMotor,fsr2l
 10171  0136FA  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 10172  0136FE  50DE               	movf	postinc2,w,c
 10173  013700  10DE               	iorwf	postinc2,w,c
 10174  013702  B4D8               	btfsc	status,2,c
 10175  013704  D061               	goto	l1628
 10176                           
 10177                           ;Motor.c: 80: {
 10178                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 10179  013706  C0EA  FFD9         	movff	_lMotor,fsr2l
 10180  01370A  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 10181  01370E  0E01               	movlw	1
 10182  013710  BEDB               	btfsc	plusw2,7,c
 10183  013712  D023               	goto	l1629
 10184  013714  0E01               	movlw	1
 10185  013716  50DB               	movf	plusw2,w,c
 10186  013718  E103               	bnz	u12500
 10187  01371A  04DE               	decf	postinc2,w,c
 10188  01371C  A0D8               	btfss	status,0,c
 10189  01371E  D01D               	goto	l1629
 10190  013720                     u12500:
 10191                           
 10192                           ;Motor.c: 83: {
 10193                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 10194  013720  C0EA  FFD9         	movff	_lMotor,fsr2l
 10195  013724  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 10196  013728  28DE               	incf	postinc2,w,c
 10197  01372A  E104               	bnz	u12510
 10198  01372C  0E7F               	movlw	127
 10199  01372E  18DE               	xorwf	postinc2,w,c
 10200  013730  B4D8               	btfsc	status,2,c
 10201  013732  D007               	goto	l1630
 10202  013734                     u12510:
 10203                           
 10204                           ;Motor.c: 85: lMotor->mDelta --;
 10205  013734  C0EA  FFD9         	movff	_lMotor,fsr2l
 10206  013738  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 10207  01373C  06DE               	decf	postinc2,f,c
 10208  01373E  0E00               	movlw	0
 10209  013740  5ADD               	subwfb	postdec2,f,c
 10210  013742                     l1630:
 10211                           
 10212                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 10213  013742  0E91               	movlw	low _PortE
 10214  013744  0100               	movlb	0	; () banked
 10215  013746  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10216  013748  0E01               	movlw	high _PortE
 10217  01374A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10218  01374C  0E00               	movlw	0
 10219  01374E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10220  013750  0E01               	movlw	1
 10221  013752  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10222  013754  EC32  F09E         	call	_Port_SetPin	;wreg free
 10223                           
 10224                           ;Motor.c: 88: }
 10225  013758  D01C               	goto	l1631
 10226  01375A                     l1629:
 10227                           
 10228                           ;Motor.c: 89: else
 10229                           ;Motor.c: 90: {
 10230                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 10231  01375A  C0EA  FFD9         	movff	_lMotor,fsr2l
 10232  01375E  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 10233  013762  04DE               	decf	postinc2,w,c
 10234  013764  E104               	bnz	u12520
 10235  013766  0E80               	movlw	128
 10236  013768  18DE               	xorwf	postinc2,w,c
 10237  01376A  B4D8               	btfsc	status,2,c
 10238  01376C  D007               	goto	l1632
 10239  01376E                     u12520:
 10240                           
 10241                           ;Motor.c: 92: lMotor->mDelta ++;
 10242  01376E  C0EA  FFD9         	movff	_lMotor,fsr2l
 10243  013772  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 10244  013776  2ADE               	incf	postinc2,f,c
 10245  013778  0E00               	movlw	0
 10246  01377A  22DD               	addwfc	postdec2,f,c
 10247  01377C                     l1632:
 10248                           
 10249                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 10250  01377C  0E91               	movlw	low _PortE
 10251  01377E  0100               	movlb	0	; () banked
 10252  013780  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10253  013782  0E01               	movlw	high _PortE
 10254  013784  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10255  013786  0E00               	movlw	0
 10256  013788  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10257  01378A  0E00               	movlw	0
 10258  01378C  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10259  01378E  EC32  F09E         	call	_Port_SetPin	;wreg free
 10260  013792                     l1631:
 10261                           
 10262                           ;Motor.c: 95: }
 10263                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 10264  013792  0E91               	movlw	low _PortE
 10265  013794  0100               	movlb	0	; () banked
 10266  013796  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10267  013798  0E01               	movlw	high _PortE
 10268  01379A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10269  01379C  0E01               	movlw	1
 10270  01379E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10271  0137A0  0E01               	movlw	1
 10272  0137A2  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10273  0137A4  EC32  F09E         	call	_Port_SetPin	;wreg free
 10274                           
 10275                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 10276  0137A8  0E91               	movlw	low _PortE
 10277  0137AA  0100               	movlb	0	; () banked
 10278  0137AC  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10279  0137AE  0E01               	movlw	high _PortE
 10280  0137B0  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10281  0137B2  0E01               	movlw	1
 10282  0137B4  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10283  0137B6  0E00               	movlw	0
 10284  0137B8  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10285  0137BA  EC32  F09E         	call	_Port_SetPin	;wreg free
 10286                           
 10287                           ;Motor.c: 101: MXK_Release();
 10288  0137BE  ECA9  F0AC         	call	_MXK_Release	;wreg free
 10289                           
 10290                           ;Motor.c: 102: Timer0_Restart();
 10291  0137C2  EC80  F0AD         	call	_Timer0_Restart	;wreg free
 10292                           
 10293                           ;Motor.c: 103: return;
 10294  0137C6  0012               	return	
 10295  0137C8                     l1628:
 10296                           
 10297                           ;Motor.c: 104: }
 10298                           ;Motor.c: 105: MXK_Release();
 10299  0137C8  ECA9  F0AC         	call	_MXK_Release	;wreg free
 10300                           
 10301                           ;Motor.c: 106: Timer0_Stop();
 10302  0137CC  EC9E  F0AD         	call	_Timer0_Stop	;wreg free
 10303                           
 10304                           ;Motor.c: 107: return;
 10305  0137D0  0012               	return	
 10306  0137D2                     l1627:
 10307                           
 10308                           ;Motor.c: 108: }
 10309                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 10310  0137D2  C10B  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 10311  0137D6  C10C  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 10312  0137DA  C10D  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 10313  0137DE  EC72  F0AD         	call	_MXK_Queue	;wreg free
 10314  0137E2  0012               	return		;funcret
 10315  0137E4                     __end_of_Motor_Step:
 10316                           	opt stack 0
 10317                           tosu	equ	0xFFF
 10318                           tosh	equ	0xFFE
 10319                           tosl	equ	0xFFD
 10320                           pclath	equ	0xFFA
 10321                           tblptru	equ	0xFF8
 10322                           tblptrh	equ	0xFF7
 10323                           tblptrl	equ	0xFF6
 10324                           tablat	equ	0xFF5
 10325                           prodh	equ	0xFF4
 10326                           prodl	equ	0xFF3
 10327                           postinc0	equ	0xFEE
 10328                           wreg	equ	0xFE8
 10329                           postdec1	equ	0xFE5
 10330                           fsr1h	equ	0xFE2
 10331                           fsr1l	equ	0xFE1
 10332                           indf2	equ	0xFDF
 10333                           postinc2	equ	0xFDE
 10334                           postdec2	equ	0xFDD
 10335                           plusw2	equ	0xFDB
 10336                           fsr2h	equ	0xFDA
 10337                           fsr2l	equ	0xFD9
 10338                           status	equ	0xFD8
 10339                           
 10340 ;; *************** function _Timer0_Stop *****************
 10341 ;; Defined at:
 10342 ;;		line 89 in file "Library/Timer0.c"
 10343 ;; Parameters:    Size  Location     Type
 10344 ;;		None
 10345 ;; Auto vars:     Size  Location     Type
 10346 ;;		None
 10347 ;; Return value:  Size  Location     Type
 10348 ;;                  1    wreg      void 
 10349 ;; Registers used:
 10350 ;;		None
 10351 ;; Tracked objects:
 10352 ;;		On entry : 0/0
 10353 ;;		On exit  : 0/0
 10354 ;;		Unchanged: 0/0
 10355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10360 ;;Total ram usage:        0 bytes
 10361 ;; Hardware stack levels used:    1
 10362 ;; Hardware stack levels required when called:    7
 10363 ;; This function calls:
 10364 ;;		Nothing
 10365 ;; This function is called by:
 10366 ;;		_Motor_Step
 10367 ;; This function uses a non-reentrant model
 10368 ;;
 10369                           
 10370                           	psect	text39
 10371  015B3C                     __ptext39:
 10372                           	opt stack 0
 10373  015B3C                     _Timer0_Stop:
 10374                           	opt stack 21
 10375                           
 10376                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 10377                           
 10378                           ;incstack = 0
 10379  015B3C  9AF2               	bcf	intcon,5,c	;volatile
 10380                           
 10381                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 10382  015B3E  94F2               	bcf	intcon,2,c	;volatile
 10383  015B40  0012               	return		;funcret
 10384  015B42                     __end_of_Timer0_Stop:
 10385                           	opt stack 0
 10386                           tosu	equ	0xFFF
 10387                           tosh	equ	0xFFE
 10388                           tosl	equ	0xFFD
 10389                           pclath	equ	0xFFA
 10390                           tblptru	equ	0xFF8
 10391                           tblptrh	equ	0xFF7
 10392                           tblptrl	equ	0xFF6
 10393                           tablat	equ	0xFF5
 10394                           prodh	equ	0xFF4
 10395                           prodl	equ	0xFF3
 10396                           intcon	equ	0xFF2
 10397                           postinc0	equ	0xFEE
 10398                           wreg	equ	0xFE8
 10399                           postdec1	equ	0xFE5
 10400                           fsr1h	equ	0xFE2
 10401                           fsr1l	equ	0xFE1
 10402                           indf2	equ	0xFDF
 10403                           postinc2	equ	0xFDE
 10404                           postdec2	equ	0xFDD
 10405                           plusw2	equ	0xFDB
 10406                           fsr2h	equ	0xFDA
 10407                           fsr2l	equ	0xFD9
 10408                           status	equ	0xFD8
 10409                           
 10410 ;; *************** function _Timer0_Restart *****************
 10411 ;; Defined at:
 10412 ;;		line 83 in file "Library/Timer0.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;		None
 10415 ;; Auto vars:     Size  Location     Type
 10416 ;;		None
 10417 ;; Return value:  Size  Location     Type
 10418 ;;                  1    wreg      void 
 10419 ;; Registers used:
 10420 ;;		None
 10421 ;; Tracked objects:
 10422 ;;		On entry : 0/0
 10423 ;;		On exit  : 0/0
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10430 ;;Total ram usage:        0 bytes
 10431 ;; Hardware stack levels used:    1
 10432 ;; Hardware stack levels required when called:    7
 10433 ;; This function calls:
 10434 ;;		Nothing
 10435 ;; This function is called by:
 10436 ;;		_Motor_Step
 10437 ;; This function uses a non-reentrant model
 10438 ;;
 10439                           
 10440                           	psect	text40
 10441  015B00                     __ptext40:
 10442                           	opt stack 0
 10443  015B00                     _Timer0_Restart:
 10444                           	opt stack 21
 10445                           
 10446                           ;Timer0.c: 85: TMR0 = COUNTER;
 10447                           
 10448                           ;incstack = 0
 10449  015B00  C031  FFD6         	movff	_COUNTER,4054	;volatile
 10450  015B04  C032  FFD7         	movff	_COUNTER+1,4055	;volatile
 10451                           
 10452                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 10453  015B08  8AF2               	bsf	intcon,5,c	;volatile
 10454  015B0A  0012               	return		;funcret
 10455  015B0C                     __end_of_Timer0_Restart:
 10456                           	opt stack 0
 10457                           tosu	equ	0xFFF
 10458                           tosh	equ	0xFFE
 10459                           tosl	equ	0xFFD
 10460                           pclath	equ	0xFFA
 10461                           tblptru	equ	0xFF8
 10462                           tblptrh	equ	0xFF7
 10463                           tblptrl	equ	0xFF6
 10464                           tablat	equ	0xFF5
 10465                           prodh	equ	0xFF4
 10466                           prodl	equ	0xFF3
 10467                           intcon	equ	0xFF2
 10468                           postinc0	equ	0xFEE
 10469                           wreg	equ	0xFE8
 10470                           postdec1	equ	0xFE5
 10471                           fsr1h	equ	0xFE2
 10472                           fsr1l	equ	0xFE1
 10473                           indf2	equ	0xFDF
 10474                           postinc2	equ	0xFDE
 10475                           postdec2	equ	0xFDD
 10476                           plusw2	equ	0xFDB
 10477                           fsr2h	equ	0xFDA
 10478                           fsr2l	equ	0xFD9
 10479                           status	equ	0xFD8
 10480                           
 10481 ;; *************** function _MXK_SwitchTo *****************
 10482 ;; Defined at:
 10483 ;;		line 105 in file "Library/MXK.c"
 10484 ;; Parameters:    Size  Location     Type
 10485 ;;  pModule         1    wreg     enum E6927
 10486 ;; Auto vars:     Size  Location     Type
 10487 ;;  pModule         1    7[BANK0 ] enum E6927
 10488 ;;  CUR             1    6[BANK0 ] unsigned char 
 10489 ;; Return value:  Size  Location     Type
 10490 ;;                  1    wreg      unsigned char 
 10491 ;; Registers used:
 10492 ;;		wreg, status,2, status,0, cstack
 10493 ;; Tracked objects:
 10494 ;;		On entry : 0/0
 10495 ;;		On exit  : 0/0
 10496 ;;		Unchanged: 0/0
 10497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10501 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10502 ;;Total ram usage:        2 bytes
 10503 ;; Hardware stack levels used:    1
 10504 ;; Hardware stack levels required when called:    8
 10505 ;; This function calls:
 10506 ;;		_delay_us
 10507 ;; This function is called by:
 10508 ;;		_Motor_Step
 10509 ;; This function uses a non-reentrant model
 10510 ;;
 10511                           
 10512                           	psect	text41
 10513  01545A                     __ptext41:
 10514                           	opt stack 0
 10515  01545A                     _MXK_SwitchTo:
 10516                           	opt stack 20
 10517                           
 10518                           ;incstack = 0
 10519                           ;MXK_SwitchTo@pModule stored from wreg
 10520  01545A  0100               	movlb	0	; () banked
 10521  01545C  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 10522                           
 10523                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 10524  01545E  5086               	movf	3974,w,c	;volatile
 10525  015460  0B0F               	andlw	15
 10526  015462  0100               	movlb	0	; () banked
 10527  015464  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 10528                           
 10529                           ; BSR set to: 0
 10530                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 10531  015466  504B               	movf	_Bus_State,w,c
 10532  015468  A4D8               	btfss	status,2,c
 10533  01546A  D002               	goto	l1730
 10534                           
 10535                           ; BSR set to: 0
 10536                           ;MXK.c: 110: return 0;
 10537  01546C  0E00               	movlw	0
 10538                           
 10539                           ; BSR set to: 0
 10540  01546E  0012               	return	
 10541  015470                     l1730:
 10542                           
 10543                           ; BSR set to: 0
 10544                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 10545                           
 10546                           ; BSR set to: 0
 10547  015470  0E00               	movlw	0
 10548  015472  6E4B               	movwf	_Bus_State,c
 10549                           
 10550                           ; BSR set to: 0
 10551                           ;MXK.c: 114: if (CUR != pModule)
 10552  015474  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 10553  015476  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 10554  015478  B4D8               	btfsc	status,2,c
 10555  01547A  D00A               	goto	l1732
 10556                           
 10557                           ; BSR set to: 0
 10558                           ;MXK.c: 115: {
 10559                           ;MXK.c: 116: PORTG &= ~(0xF);
 10560  01547C  0EF0               	movlw	240
 10561  01547E  1686               	andwf	3974,f,c	;volatile
 10562                           
 10563                           ;MXK.c: 117: PORTG |= pModule;
 10564  015480  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 10565  015482  1286               	iorwf	3974,f,c	;volatile
 10566                           
 10567                           ; BSR set to: 0
 10568                           ;MXK.c: 120: delay_us(10);
 10569  015484  0E00               	movlw	0
 10570  015486  6F61               	movwf	(delay_us@us+1)& (0+255),b
 10571  015488  0E0A               	movlw	10
 10572  01548A  6F60               	movwf	delay_us@us& (0+255),b
 10573  01548C  EC4B  F0A9         	call	_delay_us	;wreg free
 10574  015490                     l1732:
 10575                           
 10576                           ;MXK.c: 121: }
 10577                           ;MXK.c: 122: return 1;
 10578  015490  0E01               	movlw	1
 10579  015492  0012               	return	
 10580  015494                     __end_of_MXK_SwitchTo:
 10581                           	opt stack 0
 10582                           tosu	equ	0xFFF
 10583                           tosh	equ	0xFFE
 10584                           tosl	equ	0xFFD
 10585                           pclath	equ	0xFFA
 10586                           tblptru	equ	0xFF8
 10587                           tblptrh	equ	0xFF7
 10588                           tblptrl	equ	0xFF6
 10589                           tablat	equ	0xFF5
 10590                           prodh	equ	0xFF4
 10591                           prodl	equ	0xFF3
 10592                           intcon	equ	0xFF2
 10593                           postinc0	equ	0xFEE
 10594                           wreg	equ	0xFE8
 10595                           postdec1	equ	0xFE5
 10596                           fsr1h	equ	0xFE2
 10597                           fsr1l	equ	0xFE1
 10598                           indf2	equ	0xFDF
 10599                           postinc2	equ	0xFDE
 10600                           postdec2	equ	0xFDD
 10601                           plusw2	equ	0xFDB
 10602                           fsr2h	equ	0xFDA
 10603                           fsr2l	equ	0xFD9
 10604                           status	equ	0xFD8
 10605                           
 10606 ;; *************** function _MXK_Release *****************
 10607 ;; Defined at:
 10608 ;;		line 130 in file "Library/MXK.c"
 10609 ;; Parameters:    Size  Location     Type
 10610 ;;		None
 10611 ;; Auto vars:     Size  Location     Type
 10612 ;;		None
 10613 ;; Return value:  Size  Location     Type
 10614 ;;                  1    wreg      unsigned char 
 10615 ;; Registers used:
 10616 ;;		wreg, status,2, status,0
 10617 ;; Tracked objects:
 10618 ;;		On entry : 0/0
 10619 ;;		On exit  : 0/0
 10620 ;;		Unchanged: 0/0
 10621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10626 ;;Total ram usage:        0 bytes
 10627 ;; Hardware stack levels used:    1
 10628 ;; Hardware stack levels required when called:    7
 10629 ;; This function calls:
 10630 ;;		Nothing
 10631 ;; This function is called by:
 10632 ;;		_Motor_Step
 10633 ;;		_main
 10634 ;; This function uses a non-reentrant model
 10635 ;;
 10636                           
 10637                           	psect	text42
 10638  015952                     __ptext42:
 10639                           	opt stack 0
 10640  015952                     _MXK_Release:
 10641                           	opt stack 23
 10642                           
 10643                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 10644                           
 10645                           ;incstack = 0
 10646  015952  0E01               	movlw	1
 10647  015954  6E4B               	movwf	_Bus_State,c
 10648                           
 10649                           ;MXK.c: 134: if (lQueue != 0)
 10650  015956  0100               	movlb	0	; () banked
 10651  015958  51DD               	movf	_lQueue& (0+255),w,b	;volatile
 10652  01595A  11DE               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 10653  01595C  11DF               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 10654  01595E  B4D8               	btfsc	status,2,c
 10655  015960  D002               	goto	l1735
 10656                           
 10657                           ; BSR set to: 0
 10658                           ;MXK.c: 135: return 1;
 10659  015962  0E01               	movlw	1
 10660                           
 10661                           ; BSR set to: 0
 10662  015964  0012               	return	
 10663  015966                     l1735:
 10664                           
 10665                           ; BSR set to: 0
 10666                           ;MXK.c: 137: return 0;
 10667                           
 10668                           ; BSR set to: 0
 10669  015966  0E00               	movlw	0
 10670  015968  0012               	return	
 10671  01596A                     __end_of_MXK_Release:
 10672                           	opt stack 0
 10673                           tosu	equ	0xFFF
 10674                           tosh	equ	0xFFE
 10675                           tosl	equ	0xFFD
 10676                           pclath	equ	0xFFA
 10677                           tblptru	equ	0xFF8
 10678                           tblptrh	equ	0xFF7
 10679                           tblptrl	equ	0xFF6
 10680                           tablat	equ	0xFF5
 10681                           prodh	equ	0xFF4
 10682                           prodl	equ	0xFF3
 10683                           intcon	equ	0xFF2
 10684                           postinc0	equ	0xFEE
 10685                           wreg	equ	0xFE8
 10686                           postdec1	equ	0xFE5
 10687                           fsr1h	equ	0xFE2
 10688                           fsr1l	equ	0xFE1
 10689                           indf2	equ	0xFDF
 10690                           postinc2	equ	0xFDE
 10691                           postdec2	equ	0xFDD
 10692                           plusw2	equ	0xFDB
 10693                           fsr2h	equ	0xFDA
 10694                           fsr2l	equ	0xFD9
 10695                           status	equ	0xFD8
 10696                           
 10697 ;; *************** function _MXK_Queue *****************
 10698 ;; Defined at:
 10699 ;;		line 144 in file "Library/MXK.c"
 10700 ;; Parameters:    Size  Location     Type
 10701 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 10702 ;;		 -> Absolute function(1), Motor_Step(1), 
 10703 ;; Auto vars:     Size  Location     Type
 10704 ;;		None
 10705 ;; Return value:  Size  Location     Type
 10706 ;;                  1    wreg      void 
 10707 ;; Registers used:
 10708 ;;		wreg, status,2, status,0
 10709 ;; Tracked objects:
 10710 ;;		On entry : 0/0
 10711 ;;		On exit  : 0/0
 10712 ;;		Unchanged: 0/0
 10713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10714 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10717 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10718 ;;Total ram usage:        3 bytes
 10719 ;; Hardware stack levels used:    1
 10720 ;; Hardware stack levels required when called:    7
 10721 ;; This function calls:
 10722 ;;		Nothing
 10723 ;; This function is called by:
 10724 ;;		_Motor_Step
 10725 ;; This function uses a non-reentrant model
 10726 ;;
 10727                           
 10728                           	psect	text43
 10729  015AE4                     __ptext43:
 10730                           	opt stack 0
 10731  015AE4                     _MXK_Queue:
 10732                           	opt stack 21
 10733                           
 10734                           ;MXK.c: 146: lQueue = pCallback;
 10735                           
 10736                           ; BSR set to: 0
 10737                           ;incstack = 0
 10738  015AE4  C060  F0DD         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 10739  015AE8  C061  F0DE         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 10740  015AEC  C062  F0DF         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 10741  015AF0  0012               	return		;funcret
 10742  015AF2                     __end_of_MXK_Queue:
 10743                           	opt stack 0
 10744                           tosu	equ	0xFFF
 10745                           tosh	equ	0xFFE
 10746                           tosl	equ	0xFFD
 10747                           pclath	equ	0xFFA
 10748                           tblptru	equ	0xFF8
 10749                           tblptrh	equ	0xFF7
 10750                           tblptrl	equ	0xFF6
 10751                           tablat	equ	0xFF5
 10752                           prodh	equ	0xFF4
 10753                           prodl	equ	0xFF3
 10754                           intcon	equ	0xFF2
 10755                           postinc0	equ	0xFEE
 10756                           wreg	equ	0xFE8
 10757                           postdec1	equ	0xFE5
 10758                           fsr1h	equ	0xFE2
 10759                           fsr1l	equ	0xFE1
 10760                           indf2	equ	0xFDF
 10761                           postinc2	equ	0xFDE
 10762                           postdec2	equ	0xFDD
 10763                           plusw2	equ	0xFDB
 10764                           fsr2h	equ	0xFDA
 10765                           fsr2l	equ	0xFD9
 10766                           status	equ	0xFD8
 10767                           
 10768 ;; *************** function _MXK_BlockSwitchTo *****************
 10769 ;; Defined at:
 10770 ;;		line 82 in file "Library/MXK.c"
 10771 ;; Parameters:    Size  Location     Type
 10772 ;;  pModule         1    wreg     enum E6927
 10773 ;; Auto vars:     Size  Location     Type
 10774 ;;  pModule         1    7[BANK0 ] enum E6927
 10775 ;;  CUR             1    6[BANK0 ] unsigned char 
 10776 ;; Return value:  Size  Location     Type
 10777 ;;                  1    wreg      unsigned char 
 10778 ;; Registers used:
 10779 ;;		wreg, status,2, status,0, cstack
 10780 ;; Tracked objects:
 10781 ;;		On entry : 0/0
 10782 ;;		On exit  : 0/0
 10783 ;;		Unchanged: 0/0
 10784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10786 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10788 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10789 ;;Total ram usage:        2 bytes
 10790 ;; Hardware stack levels used:    1
 10791 ;; Hardware stack levels required when called:    8
 10792 ;; This function calls:
 10793 ;;		_delay_us
 10794 ;; This function is called by:
 10795 ;;		_main
 10796 ;; This function uses a non-reentrant model
 10797 ;;
 10798                           
 10799                           	psect	text44
 10800  015508                     __ptext44:
 10801                           	opt stack 0
 10802  015508                     _MXK_BlockSwitchTo:
 10803                           	opt stack 22
 10804                           
 10805                           ;incstack = 0
 10806                           ;MXK_BlockSwitchTo@pModule stored from wreg
 10807  015508  0100               	movlb	0	; () banked
 10808  01550A  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 10809                           
 10810                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 10811  01550C  5086               	movf	3974,w,c	;volatile
 10812  01550E  0B0F               	andlw	15
 10813  015510  0100               	movlb	0	; () banked
 10814  015512  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 10815  015514                     
 10816                           ; BSR set to: 0
 10817                           
 10818                           ; BSR set to: 0
 10819  015514  504B               	movf	_Bus_State,w,c
 10820  015516  B4D8               	btfsc	status,2,c
 10821  015518  D7FD               	goto	l1724
 10822                           
 10823                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 10824  01551A  0E00               	movlw	0
 10825  01551C  6E4B               	movwf	_Bus_State,c
 10826                           
 10827                           ;MXK.c: 90: if (CUR != pModule)
 10828  01551E  0100               	movlb	0	; () banked
 10829  015520  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 10830  015522  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 10831  015524  B4D8               	btfsc	status,2,c
 10832  015526  D00A               	goto	l1726
 10833                           
 10834                           ; BSR set to: 0
 10835                           ;MXK.c: 91: {
 10836                           ;MXK.c: 92: PORTG &= ~(0xF);
 10837  015528  0EF0               	movlw	240
 10838  01552A  1686               	andwf	3974,f,c	;volatile
 10839                           
 10840                           ;MXK.c: 93: PORTG |= pModule;
 10841  01552C  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 10842  01552E  1286               	iorwf	3974,f,c	;volatile
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;MXK.c: 96: delay_us(10);
 10846  015530  0E00               	movlw	0
 10847  015532  6F61               	movwf	(delay_us@us+1)& (0+255),b
 10848  015534  0E0A               	movlw	10
 10849  015536  6F60               	movwf	delay_us@us& (0+255),b
 10850  015538  EC4B  F0A9         	call	_delay_us	;wreg free
 10851  01553C                     l1726:
 10852                           
 10853                           ;MXK.c: 97: }
 10854                           ;MXK.c: 98: return 1;
 10855  01553C  0E01               	movlw	1
 10856  01553E  0012               	return	
 10857  015540                     __end_of_MXK_BlockSwitchTo:
 10858                           	opt stack 0
 10859                           tosu	equ	0xFFF
 10860                           tosh	equ	0xFFE
 10861                           tosl	equ	0xFFD
 10862                           pclath	equ	0xFFA
 10863                           tblptru	equ	0xFF8
 10864                           tblptrh	equ	0xFF7
 10865                           tblptrl	equ	0xFF6
 10866                           tablat	equ	0xFF5
 10867                           prodh	equ	0xFF4
 10868                           prodl	equ	0xFF3
 10869                           intcon	equ	0xFF2
 10870                           postinc0	equ	0xFEE
 10871                           wreg	equ	0xFE8
 10872                           postdec1	equ	0xFE5
 10873                           fsr1h	equ	0xFE2
 10874                           fsr1l	equ	0xFE1
 10875                           indf2	equ	0xFDF
 10876                           postinc2	equ	0xFDE
 10877                           postdec2	equ	0xFDD
 10878                           plusw2	equ	0xFDB
 10879                           fsr2h	equ	0xFDA
 10880                           fsr2l	equ	0xFD9
 10881                           status	equ	0xFD8
 10882                           
 10883 ;; *************** function _delay_us *****************
 10884 ;; Defined at:
 10885 ;;		line 255 in file "Library/Types.c"
 10886 ;; Parameters:    Size  Location     Type
 10887 ;;  us              2    0[BANK0 ] unsigned short 
 10888 ;; Auto vars:     Size  Location     Type
 10889 ;;  u               4    2[BANK0 ] unsigned long 
 10890 ;; Return value:  Size  Location     Type
 10891 ;;                  1    wreg      void 
 10892 ;; Registers used:
 10893 ;;		wreg, status,2, status,0
 10894 ;; Tracked objects:
 10895 ;;		On entry : 0/0
 10896 ;;		On exit  : 0/0
 10897 ;;		Unchanged: 0/0
 10898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10899 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10900 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10902 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;Total ram usage:        6 bytes
 10904 ;; Hardware stack levels used:    1
 10905 ;; Hardware stack levels required when called:    7
 10906 ;; This function calls:
 10907 ;;		Nothing
 10908 ;; This function is called by:
 10909 ;;		_MXK_BlockSwitchTo
 10910 ;;		_MXK_SwitchTo
 10911 ;; This function uses a non-reentrant model
 10912 ;;
 10913                           
 10914                           	psect	text45
 10915  015296                     __ptext45:
 10916                           	opt stack 0
 10917  015296                     _delay_us:
 10918                           	opt stack 20
 10919                           
 10920                           ;Types.c: 256: unsigned long u;
 10921                           ;Types.c: 257: while (us--) {
 10922                           
 10923                           ;incstack = 0
 10924  015296  D018               	goto	u11360
 10925  015298                     l14033:
 10926                           
 10927                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 10928  015298  0E00               	movlw	0
 10929  01529A  0100               	movlb	0	; () banked
 10930  01529C  6F62               	movwf	delay_us@u& (0+255),b
 10931  01529E  0E00               	movlw	0
 10932  0152A0  6F63               	movwf	(delay_us@u+1)& (0+255),b
 10933  0152A2  0E00               	movlw	0
 10934  0152A4  6F64               	movwf	(delay_us@u+2)& (0+255),b
 10935  0152A6  0E00               	movlw	0
 10936  0152A8  6F65               	movwf	(delay_us@u+3)& (0+255),b
 10937  0152AA                     l14035:
 10938                           
 10939                           ; BSR set to: 0
 10940  0152AA  5162               	movf	delay_us@u& (0+255),w,b
 10941  0152AC  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 10942  0152AE  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 10943  0152B0  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 10944  0152B2  A4D8               	btfss	status,2,c
 10945  0152B4  D009               	goto	u11360
 10946                           
 10947                           ; BSR set to: 0
 10948                           
 10949                           ; BSR set to: 0
 10950  0152B6  F000               	nop		; ;# 
 10951  0152B8  0E01               	movlw	1
 10952  0152BA  0100               	movlb	0	; () banked
 10953  0152BC  2762               	addwf	delay_us@u& (0+255),f,b
 10954  0152BE  0E00               	movlw	0
 10955  0152C0  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 10956  0152C2  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 10957  0152C4  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 10958  0152C6  D7F1               	goto	l14035
 10959  0152C8                     u11360:
 10960                           
 10961                           ; BSR set to: 0
 10962                           
 10963                           ; BSR set to: 0
 10964  0152C8  0100               	movlb	0	; () banked
 10965  0152CA  0760               	decf	delay_us@us& (0+255),f,b
 10966  0152CC  A0D8               	btfss	status,0,c
 10967  0152CE  0761               	decf	(delay_us@us+1)& (0+255),f,b
 10968  0152D0  2960               	incf	delay_us@us& (0+255),w,b
 10969  0152D2  E1E2               	bnz	l14033
 10970  0152D4  2961               	incf	(delay_us@us+1)& (0+255),w,b
 10971  0152D6  B4D8               	btfsc	status,2,c
 10972  0152D8  0012               	return	
 10973  0152DA  D7DE               	goto	l832
 10974  0152DC                     __end_of_delay_us:
 10975                           	opt stack 0
 10976                           tosu	equ	0xFFF
 10977                           tosh	equ	0xFFE
 10978                           tosl	equ	0xFFD
 10979                           pclath	equ	0xFFA
 10980                           tblptru	equ	0xFF8
 10981                           tblptrh	equ	0xFF7
 10982                           tblptrl	equ	0xFF6
 10983                           tablat	equ	0xFF5
 10984                           prodh	equ	0xFF4
 10985                           prodl	equ	0xFF3
 10986                           intcon	equ	0xFF2
 10987                           postinc0	equ	0xFEE
 10988                           wreg	equ	0xFE8
 10989                           postdec1	equ	0xFE5
 10990                           fsr1h	equ	0xFE2
 10991                           fsr1l	equ	0xFE1
 10992                           indf2	equ	0xFDF
 10993                           postinc2	equ	0xFDE
 10994                           postdec2	equ	0xFDD
 10995                           plusw2	equ	0xFDB
 10996                           fsr2h	equ	0xFDA
 10997                           fsr2l	equ	0xFD9
 10998                           status	equ	0xFD8
 10999                           
 11000 ;; *************** function _LCD_Init *****************
 11001 ;; Defined at:
 11002 ;;		line 172 in file "Library/LCD.c"
 11003 ;; Parameters:    Size  Location     Type
 11004 ;;		None
 11005 ;; Auto vars:     Size  Location     Type
 11006 ;;  i               2   55[BANK0 ] unsigned short 
 11007 ;; Return value:  Size  Location     Type
 11008 ;;                  1    wreg      void 
 11009 ;; Registers used:
 11010 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11011 ;; Tracked objects:
 11012 ;;		On entry : 0/0
 11013 ;;		On exit  : 0/0
 11014 ;;		Unchanged: 0/0
 11015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11017 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11018 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11019 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11020 ;;Total ram usage:        4 bytes
 11021 ;; Hardware stack levels used:    1
 11022 ;; Hardware stack levels required when called:   15
 11023 ;; This function calls:
 11024 ;;		_Configure_GPIOs
 11025 ;;		_LCD_Fill
 11026 ;;		_LCD_Write
 11027 ;;		_Set_Rotation
 11028 ;;		_delay_ms
 11029 ;; This function is called by:
 11030 ;;		_main
 11031 ;; This function uses a non-reentrant model
 11032 ;;
 11033                           
 11034                           	psect	text46
 11035  012D50                     __ptext46:
 11036                           	opt stack 0
 11037  012D50                     _LCD_Init:
 11038                           	opt stack 15
 11039                           
 11040                           ;LCD.c: 174: UINT16 i;
 11041                           ;LCD.c: 175: Configure_GPIOs();
 11042                           
 11043                           ; BSR set to: 0
 11044                           ;incstack = 0
 11045  012D50  ECA0  F0A6         	call	_Configure_GPIOs	;wreg free
 11046                           
 11047                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 11048  012D54  0E00               	movlw	0
 11049  012D56  0100               	movlb	0	; () banked
 11050  012D58  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 11051  012D5A  0E00               	movlw	0
 11052  012D5C  6F97               	movwf	LCD_Init@i& (0+255),b
 11053                           
 11054                           ; BSR set to: 0
 11055  012D5E  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 11056  012D60  E17D               	bnz	u12760
 11057  012D62  0E59               	movlw	89
 11058  012D64  5D97               	subwf	LCD_Init@i& (0+255),w,b
 11059  012D66  B0D8               	btfsc	status,0,c
 11060  012D68  D079               	goto	u12760
 11061                           
 11062                           ; BSR set to: 0
 11063                           ;LCD.c: 178: {
 11064                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 11065                           
 11066                           ; BSR set to: 0
 11067                           
 11068                           ; BSR set to: 0
 11069  012D6A  90D8               	bcf	status,0,c
 11070  012D6C  3597               	rlcf	LCD_Init@i& (0+255),w,b
 11071  012D6E  6EF6               	movwf	tblptrl,c
 11072  012D70  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11073  012D72  6EF7               	movwf	tblptrh,c
 11074  012D74  0E91               	movlw	low _InitList
 11075  012D76  26F6               	addwf	tblptrl,f,c
 11076  012D78  0EFB               	movlw	high _InitList
 11077  012D7A  22F7               	addwfc	tblptrh,f,c
 11078  012D7C                     	if	1	;There are 3 active tblptr bytes
 11079  012D7C  6AF8               	clrf	tblptru,c
 11080  012D7E  0E00               	movlw	low (__mediumconst shr (0+16))
 11081  012D80  22F8               	addwfc	tblptru,f,c
 11082  012D82                     	endif
 11083  012D82  0009               	tblrd		*+
 11084  012D84  0E80               	movlw	128
 11085  012D86  18F5               	xorwf	tablat,w,c
 11086  012D88  0009               	tblrd		*+
 11087  012D8A  10F5               	iorwf	tablat,w,c
 11088  012D8C  A4D8               	btfss	status,2,c
 11089  012D8E  D01D               	goto	l87
 11090                           
 11091                           ; BSR set to: 0
 11092  012D90  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 11093  012D92  E11B               	bnz	l15325
 11094  012D94  0E58               	movlw	88
 11095  012D96  5D97               	subwf	LCD_Init@i& (0+255),w,b
 11096  012D98  B0D8               	btfsc	status,0,c
 11097  012D9A  D017               	goto	l87
 11098                           
 11099                           ; BSR set to: 0
 11100                           ;LCD.c: 180: delay_ms(InitList[++i]);
 11101  012D9C  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 11102  012D9E  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 11103  012DA0  90D8               	bcf	status,0,c
 11104  012DA2  3597               	rlcf	LCD_Init@i& (0+255),w,b
 11105  012DA4  6EF6               	movwf	tblptrl,c
 11106  012DA6  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11107  012DA8  6EF7               	movwf	tblptrh,c
 11108  012DAA  0E91               	movlw	low _InitList
 11109  012DAC  26F6               	addwf	tblptrl,f,c
 11110  012DAE  0EFB               	movlw	high _InitList
 11111  012DB0  22F7               	addwfc	tblptrh,f,c
 11112  012DB2                     	if	1	;There are 3 active tblptr bytes
 11113  012DB2  6AF8               	clrf	tblptru,c
 11114  012DB4  0E00               	movlw	low (__mediumconst shr (0+16))
 11115  012DB6  22F8               	addwfc	tblptru,f,c
 11116  012DB8                     	endif
 11117  012DB8  0009               	tblrd		*+
 11118  012DBA  CFF5 F060          	movff	tablat,delay_ms@ms
 11119  012DBE  000A               	tblrd		*-
 11120  012DC0  CFF5 F061          	movff	tablat,delay_ms@ms+1
 11121  012DC4  ECCF  F0A6         	call	_delay_ms	;wreg free
 11122  012DC8  D043               	goto	l90
 11123  012DCA                     l87:
 11124  012DCA                     l15325:
 11125                           
 11126                           ;LCD.c: 181: else
 11127                           ;LCD.c: 182: {
 11128                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 11129  012DCA  90D8               	bcf	status,0,c
 11130  012DCC  0100               	movlb	0	; () banked
 11131  012DCE  3597               	rlcf	LCD_Init@i& (0+255),w,b
 11132  012DD0  6EF6               	movwf	tblptrl,c
 11133  012DD2  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11134  012DD4  6EF7               	movwf	tblptrh,c
 11135  012DD6  0E91               	movlw	low _InitList
 11136  012DD8  26F6               	addwf	tblptrl,f,c
 11137  012DDA  0EFB               	movlw	high _InitList
 11138  012DDC  22F7               	addwfc	tblptrh,f,c
 11139  012DDE                     	if	1	;There are 3 active tblptr bytes
 11140  012DDE  6AF8               	clrf	tblptru,c
 11141  012DE0  0E00               	movlw	low (__mediumconst shr (0+16))
 11142  012DE2  22F8               	addwfc	tblptru,f,c
 11143  012DE4                     	endif
 11144  012DE4  0009               	tblrd		*+
 11145  012DE6  0E00               	movlw	0
 11146  012DE8  5EF5               	subwf	tablat,f,c
 11147  012DEA  0009               	tblrd		*+
 11148  012DEC  0E01               	movlw	1
 11149  012DEE  5AF5               	subwfb	tablat,f,c
 11150  012DF0  A0D8               	btfss	status,0,c
 11151  012DF2  D01B               	goto	l89
 11152                           
 11153                           ; BSR set to: 0
 11154  012DF4  0E00               	movlw	0
 11155  012DF6  6F63               	movwf	LCD_Write@mode& (0+255),b
 11156  012DF8  90D8               	bcf	status,0,c
 11157  012DFA  3597               	rlcf	LCD_Init@i& (0+255),w,b
 11158  012DFC  6EF6               	movwf	tblptrl,c
 11159  012DFE  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11160  012E00  6EF7               	movwf	tblptrh,c
 11161  012E02  0E91               	movlw	low _InitList
 11162  012E04  26F6               	addwf	tblptrl,f,c
 11163  012E06  0EFB               	movlw	high _InitList
 11164  012E08  22F7               	addwfc	tblptrh,f,c
 11165  012E0A                     	if	1	;There are 3 active tblptr bytes
 11166  012E0A  6AF8               	clrf	tblptru,c
 11167  012E0C  0E00               	movlw	low (__mediumconst shr (0+16))
 11168  012E0E  22F8               	addwfc	tblptru,f,c
 11169  012E10                     	endif
 11170  012E10  0009               	tblrd		*+
 11171  012E12  CFF5 F095          	movff	tablat,??_LCD_Init
 11172  012E16  0009               	tblrd		*+
 11173  012E18  CFF5 F096          	movff	tablat,??_LCD_Init+1
 11174  012E1C  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 11175  012E20  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 11176  012E22  5195               	movf	??_LCD_Init& (0+255),w,b
 11177  012E24  EC34  F0AC         	call	_LCD_Write
 11178  012E28  D013               	goto	l90
 11179  012E2A                     l89:
 11180                           
 11181                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 11182  012E2A  0E01               	movlw	1
 11183  012E2C  0100               	movlb	0	; () banked
 11184  012E2E  6F63               	movwf	LCD_Write@mode& (0+255),b
 11185  012E30  90D8               	bcf	status,0,c
 11186  012E32  3597               	rlcf	LCD_Init@i& (0+255),w,b
 11187  012E34  6EF6               	movwf	tblptrl,c
 11188  012E36  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11189  012E38  6EF7               	movwf	tblptrh,c
 11190  012E3A  0E91               	movlw	low _InitList
 11191  012E3C  26F6               	addwf	tblptrl,f,c
 11192  012E3E  0EFB               	movlw	high _InitList
 11193  012E40  22F7               	addwfc	tblptrh,f,c
 11194  012E42                     	if	1	;There are 3 active tblptr bytes
 11195  012E42  6AF8               	clrf	tblptru,c
 11196  012E44  0E00               	movlw	low (__mediumconst shr (0+16))
 11197  012E46  22F8               	addwfc	tblptru,f,c
 11198  012E48                     	endif
 11199  012E48  0008               	tblrd		*
 11200  012E4A  50F5               	movf	tablat,w,c
 11201  012E4C  EC34  F0AC         	call	_LCD_Write
 11202  012E50                     l90:
 11203  012E50  0100               	movlb	0	; () banked
 11204  012E52  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 11205  012E54  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 11206                           
 11207                           ; BSR set to: 0
 11208  012E56  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 11209  012E58  E101               	bnz	l15335
 11210  012E5A  D783               	goto	L7
 11211  012E5C                     u12760:
 11212  012E5C                     l15335:
 11213                           
 11214                           ; BSR set to: 0
 11215                           ;LCD.c: 185: }
 11216                           ;LCD.c: 186: }
 11217                           ;LCD.c: 187: delay_ms(100);
 11218  012E5C  0E00               	movlw	0
 11219  012E5E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 11220  012E60  0E64               	movlw	100
 11221  012E62  6F60               	movwf	delay_ms@ms& (0+255),b
 11222  012E64  ECCF  F0A6         	call	_delay_ms	;wreg free
 11223                           
 11224                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 11225  012E68  0E00               	movlw	0
 11226  012E6A  0100               	movlb	0	; () banked
 11227  012E6C  6F63               	movwf	LCD_Write@mode& (0+255),b
 11228  012E6E  0E29               	movlw	41
 11229  012E70  EC34  F0AC         	call	_LCD_Write
 11230                           
 11231                           ;LCD.c: 189: Set_Rotation(1);
 11232  012E74  0E01               	movlw	1
 11233  012E76  EC10  F0A1         	call	_Set_Rotation
 11234                           
 11235                           ;LCD.c: 191: delay_ms(100);
 11236  012E7A  0E00               	movlw	0
 11237  012E7C  0100               	movlb	0	; () banked
 11238  012E7E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 11239  012E80  0E64               	movlw	100
 11240  012E82  6F60               	movwf	delay_ms@ms& (0+255),b
 11241  012E84  ECCF  F0A6         	call	_delay_ms	;wreg free
 11242                           
 11243                           ;LCD.c: 192: LCD_Fill(0x0000);
 11244  012E88  0E00               	movlw	0
 11245  012E8A  0100               	movlb	0	; () banked
 11246  012E8C  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 11247  012E8E  0E00               	movlw	0
 11248  012E90  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 11249  012E92  ECDF  F0A8         	call	_LCD_Fill	;wreg free
 11250  012E96  0012               	return		;funcret
 11251  012E98                     __end_of_LCD_Init:
 11252                           	opt stack 0
 11253                           tosu	equ	0xFFF
 11254                           tosh	equ	0xFFE
 11255                           tosl	equ	0xFFD
 11256                           pclath	equ	0xFFA
 11257                           tblptru	equ	0xFF8
 11258                           tblptrh	equ	0xFF7
 11259                           tblptrl	equ	0xFF6
 11260                           tablat	equ	0xFF5
 11261                           prodh	equ	0xFF4
 11262                           prodl	equ	0xFF3
 11263                           intcon	equ	0xFF2
 11264                           postinc0	equ	0xFEE
 11265                           wreg	equ	0xFE8
 11266                           postdec1	equ	0xFE5
 11267                           fsr1h	equ	0xFE2
 11268                           fsr1l	equ	0xFE1
 11269                           indf2	equ	0xFDF
 11270                           postinc2	equ	0xFDE
 11271                           postdec2	equ	0xFDD
 11272                           plusw2	equ	0xFDB
 11273                           fsr2h	equ	0xFDA
 11274                           fsr2l	equ	0xFD9
 11275                           status	equ	0xFD8
 11276                           
 11277 ;; *************** function _Set_Rotation *****************
 11278 ;; Defined at:
 11279 ;;		line 248 in file "Library/LCD.c"
 11280 ;; Parameters:    Size  Location     Type
 11281 ;;  m               1    wreg     unsigned char 
 11282 ;; Auto vars:     Size  Location     Type
 11283 ;;  m               1    5[BANK0 ] unsigned char 
 11284 ;;  rotation        1    6[BANK0 ] unsigned char 
 11285 ;; Return value:  Size  Location     Type
 11286 ;;                  1    wreg      void 
 11287 ;; Registers used:
 11288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11289 ;; Tracked objects:
 11290 ;;		On entry : 0/0
 11291 ;;		On exit  : 0/0
 11292 ;;		Unchanged: 0/0
 11293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11295 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11297 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11298 ;;Total ram usage:        2 bytes
 11299 ;; Hardware stack levels used:    1
 11300 ;; Hardware stack levels required when called:    9
 11301 ;; This function calls:
 11302 ;;		_LCD_Write
 11303 ;; This function is called by:
 11304 ;;		_LCD_Init
 11305 ;; This function uses a non-reentrant model
 11306 ;;
 11307                           
 11308                           	psect	text47
 11309  014220                     __ptext47:
 11310                           	opt stack 0
 11311  014220                     _Set_Rotation:
 11312                           	opt stack 20
 11313                           
 11314                           ;incstack = 0
 11315                           ;Set_Rotation@m stored from wreg
 11316  014220  0100               	movlb	0	; () banked
 11317  014222  6F65               	movwf	Set_Rotation@m& (0+255),b
 11318                           
 11319                           ;LCD.c: 250: UINT8 rotation = 0x00;
 11320  014224  0E00               	movlw	0
 11321  014226  0100               	movlb	0	; () banked
 11322  014228  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 11323                           
 11324                           ; BSR set to: 0
 11325                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 11326  01422A  0E00               	movlw	0
 11327  01422C  6F63               	movwf	LCD_Write@mode& (0+255),b
 11328  01422E  0E36               	movlw	54
 11329  014230  EC34  F0AC         	call	_LCD_Write
 11330                           
 11331                           ;LCD.c: 253: rotation = (m % 4);
 11332  014234  0100               	movlb	0	; () banked
 11333  014236  5165               	movf	Set_Rotation@m& (0+255),w,b
 11334  014238  0B03               	andlw	3
 11335  01423A  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 11336                           
 11337                           ;LCD.c: 255: switch(rotation)
 11338  01423C  D02B               	goto	l117
 11339  01423E                     
 11340                           ; BSR set to: 0
 11341                           ;LCD.c: 258: {
 11342                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 11343                           
 11344                           ; BSR set to: 0
 11345  01423E  0E01               	movlw	1
 11346  014240  6F63               	movwf	LCD_Write@mode& (0+255),b
 11347  014242  0EC8               	movlw	200
 11348  014244  EC34  F0AC         	call	_LCD_Write
 11349                           
 11350                           ;LCD.c: 260: w = 128;
 11351  014248  0E80               	movlw	128
 11352  01424A  6E50               	movwf	_w,c
 11353                           
 11354                           ;LCD.c: 261: l = 128;
 11355  01424C  0E80               	movlw	128
 11356  01424E  6E4F               	movwf	_l,c
 11357                           
 11358                           ;LCD.c: 262: break;
 11359  014250  0012               	return	
 11360  014252                     
 11361                           ;LCD.c: 265: {
 11362                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 11363  014252  0E01               	movlw	1
 11364  014254  0100               	movlb	0	; () banked
 11365  014256  6F63               	movwf	LCD_Write@mode& (0+255),b
 11366  014258  0EA8               	movlw	168
 11367  01425A  EC34  F0AC         	call	_LCD_Write
 11368                           
 11369                           ;LCD.c: 267: w = 128;
 11370  01425E  0E80               	movlw	128
 11371  014260  6E50               	movwf	_w,c
 11372                           
 11373                           ;LCD.c: 268: l = 128;
 11374  014262  0E80               	movlw	128
 11375  014264  6E4F               	movwf	_l,c
 11376                           
 11377                           ;LCD.c: 269: break;
 11378  014266  0012               	return	
 11379  014268                     
 11380                           ;LCD.c: 272: {
 11381                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 11382  014268  0E01               	movlw	1
 11383  01426A  0100               	movlb	0	; () banked
 11384  01426C  6F63               	movwf	LCD_Write@mode& (0+255),b
 11385  01426E  0E08               	movlw	8
 11386  014270  EC34  F0AC         	call	_LCD_Write
 11387                           
 11388                           ;LCD.c: 274: w = 128;
 11389  014274  0E80               	movlw	128
 11390  014276  6E50               	movwf	_w,c
 11391                           
 11392                           ;LCD.c: 275: l = 128;
 11393  014278  0E80               	movlw	128
 11394  01427A  6E4F               	movwf	_l,c
 11395                           
 11396                           ;LCD.c: 276: break;
 11397  01427C  0012               	return	
 11398  01427E                     
 11399                           ;LCD.c: 279: {
 11400                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 11401  01427E  0E01               	movlw	1
 11402  014280  0100               	movlb	0	; () banked
 11403  014282  6F63               	movwf	LCD_Write@mode& (0+255),b
 11404  014284  0E68               	movlw	104
 11405  014286  EC34  F0AC         	call	_LCD_Write
 11406                           
 11407                           ;LCD.c: 281: w = 128;
 11408  01428A  0E80               	movlw	128
 11409  01428C  6E50               	movwf	_w,c
 11410                           
 11411                           ;LCD.c: 282: l = 128;
 11412  01428E  0E80               	movlw	128
 11413  014290  6E4F               	movwf	_l,c
 11414                           
 11415                           ;LCD.c: 284: }
 11416                           ;LCD.c: 285: }
 11417                           
 11418                           ;LCD.c: 283: break;
 11419  014292  0012               	return	
 11420  014294                     l117:
 11421  014294  0100               	movlb	0	; () banked
 11422  014296  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 11423                           
 11424                           ; Switch size 1, requested type "space"
 11425                           ; Number of cases is 4, Range of values is 0 to 3
 11426                           ; switch strategies available:
 11427                           ; Name         Instructions Cycles
 11428                           ; simple_byte           13     7 (average)
 11429                           ;	Chosen strategy is simple_byte
 11430  014298  0A00               	xorlw	0	; case 0
 11431  01429A  B4D8               	btfsc	status,2,c
 11432  01429C  D7D0               	goto	l118
 11433  01429E  0A01               	xorlw	1	; case 1
 11434  0142A0  B4D8               	btfsc	status,2,c
 11435  0142A2  D7D7               	goto	l120
 11436  0142A4  0A03               	xorlw	3	; case 2
 11437  0142A6  B4D8               	btfsc	status,2,c
 11438  0142A8  D7DF               	goto	l121
 11439  0142AA  0A01               	xorlw	1	; case 3
 11440  0142AC  A4D8               	btfss	status,2,c
 11441  0142AE  0012               	return	
 11442  0142B0  D7E6               	goto	l122
 11443  0142B2                     __end_of_Set_Rotation:
 11444                           	opt stack 0
 11445                           tosu	equ	0xFFF
 11446                           tosh	equ	0xFFE
 11447                           tosl	equ	0xFFD
 11448                           pclath	equ	0xFFA
 11449                           tblptru	equ	0xFF8
 11450                           tblptrh	equ	0xFF7
 11451                           tblptrl	equ	0xFF6
 11452                           tablat	equ	0xFF5
 11453                           prodh	equ	0xFF4
 11454                           prodl	equ	0xFF3
 11455                           intcon	equ	0xFF2
 11456                           postinc0	equ	0xFEE
 11457                           wreg	equ	0xFE8
 11458                           postdec1	equ	0xFE5
 11459                           fsr1h	equ	0xFE2
 11460                           fsr1l	equ	0xFE1
 11461                           indf2	equ	0xFDF
 11462                           postinc2	equ	0xFDE
 11463                           postdec2	equ	0xFDD
 11464                           plusw2	equ	0xFDB
 11465                           fsr2h	equ	0xFDA
 11466                           fsr2l	equ	0xFD9
 11467                           status	equ	0xFD8
 11468                           
 11469 ;; *************** function _LCD_Fill *****************
 11470 ;; Defined at:
 11471 ;;		line 287 in file "Library/LCD.c"
 11472 ;; Parameters:    Size  Location     Type
 11473 ;;  pColour         2    9[BANK0 ] unsigned short 
 11474 ;; Auto vars:     Size  Location     Type
 11475 ;;  j               1   12[BANK0 ] unsigned char 
 11476 ;;  i               1   11[BANK0 ] unsigned char 
 11477 ;; Return value:  Size  Location     Type
 11478 ;;                  1    wreg      void 
 11479 ;; Registers used:
 11480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11481 ;; Tracked objects:
 11482 ;;		On entry : 0/0
 11483 ;;		On exit  : 0/0
 11484 ;;		Unchanged: 0/0
 11485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11486 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11487 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11489 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11490 ;;Total ram usage:        4 bytes
 11491 ;; Hardware stack levels used:    1
 11492 ;; Hardware stack levels required when called:   10
 11493 ;; This function calls:
 11494 ;;		_LCD_Word_Write
 11495 ;;		_Set_Addr_Window
 11496 ;; This function is called by:
 11497 ;;		_LCD_Init
 11498 ;; This function uses a non-reentrant model
 11499 ;;
 11500                           
 11501                           	psect	text48
 11502  0151BE                     __ptext48:
 11503                           	opt stack 0
 11504  0151BE                     _LCD_Fill:
 11505                           	opt stack 19
 11506                           
 11507                           ;LCD.c: 296: UINT8 i = 0x00;
 11508                           
 11509                           ;incstack = 0
 11510  0151BE  0E00               	movlw	0
 11511  0151C0  0100               	movlb	0	; () banked
 11512  0151C2  6F6B               	movwf	LCD_Fill@i& (0+255),b
 11513                           
 11514                           ;LCD.c: 297: UINT8 j = 0x00;
 11515  0151C4  0E00               	movlw	0
 11516  0151C6  6F6C               	movwf	LCD_Fill@j& (0+255),b
 11517                           
 11518                           ; BSR set to: 0
 11519                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 11520  0151C8  0E00               	movlw	0
 11521  0151CA  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 11522  0151CC  0450               	decf	_w,w,c
 11523  0151CE  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 11524  0151D0  044F               	decf	_l,w,c
 11525  0151D2  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 11526  0151D4  0E00               	movlw	0
 11527  0151D6  EC79  F0A0         	call	_Set_Addr_Window
 11528                           
 11529                           ;LCD.c: 299: for (j = l; j > 0; j--)
 11530  0151DA  C04F  F06C         	movff	_l,LCD_Fill@j
 11531  0151DE  0100               	movlb	0	; () banked
 11532  0151E0  516C               	movf	LCD_Fill@j& (0+255),w,b
 11533  0151E2  B4D8               	btfsc	status,2,c
 11534  0151E4  0012               	return	
 11535                           
 11536                           ; BSR set to: 0
 11537                           ;LCD.c: 300: for (i = w; i > 0; i--)
 11538                           
 11539                           ; BSR set to: 0
 11540  0151E6  C050  F06B         	movff	_w,LCD_Fill@i
 11541  0151EA                     l15055:
 11542                           
 11543                           ; BSR set to: 0
 11544  0151EA  516B               	movf	LCD_Fill@i& (0+255),w,b
 11545  0151EC  B4D8               	btfsc	status,2,c
 11546  0151EE  D009               	goto	u12420
 11547                           
 11548                           ; BSR set to: 0
 11549                           ;LCD.c: 301: LCD_Word_Write(pColour);
 11550                           
 11551                           ; BSR set to: 0
 11552                           
 11553                           ; BSR set to: 0
 11554  0151F0  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 11555  0151F4  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 11556  0151F8  EC8F  F0AC         	call	_LCD_Word_Write	;wreg free
 11557  0151FC  0100               	movlb	0	; () banked
 11558  0151FE  076B               	decf	LCD_Fill@i& (0+255),f,b
 11559  015200  D7F4               	goto	l15055
 11560  015202                     u12420:
 11561                           
 11562                           ; BSR set to: 0
 11563                           
 11564                           ; BSR set to: 0
 11565  015202  076C               	decf	LCD_Fill@j& (0+255),f,b
 11566  015204  D7ED               	goto	L8
 11567  015206                     __end_of_LCD_Fill:
 11568                           	opt stack 0
 11569                           tosu	equ	0xFFF
 11570                           tosh	equ	0xFFE
 11571                           tosl	equ	0xFFD
 11572                           pclath	equ	0xFFA
 11573                           tblptru	equ	0xFF8
 11574                           tblptrh	equ	0xFF7
 11575                           tblptrl	equ	0xFF6
 11576                           tablat	equ	0xFF5
 11577                           prodh	equ	0xFF4
 11578                           prodl	equ	0xFF3
 11579                           intcon	equ	0xFF2
 11580                           postinc0	equ	0xFEE
 11581                           wreg	equ	0xFE8
 11582                           postdec1	equ	0xFE5
 11583                           fsr1h	equ	0xFE2
 11584                           fsr1l	equ	0xFE1
 11585                           indf2	equ	0xFDF
 11586                           postinc2	equ	0xFDE
 11587                           postdec2	equ	0xFDD
 11588                           plusw2	equ	0xFDB
 11589                           fsr2h	equ	0xFDA
 11590                           fsr2l	equ	0xFD9
 11591                           status	equ	0xFD8
 11592                           
 11593 ;; *************** function _Set_Addr_Window *****************
 11594 ;; Defined at:
 11595 ;;		line 214 in file "Library/LCD.c"
 11596 ;; Parameters:    Size  Location     Type
 11597 ;;  xs              1    wreg     unsigned char 
 11598 ;;  ys              1    5[BANK0 ] unsigned char 
 11599 ;;  xe              1    6[BANK0 ] unsigned char 
 11600 ;;  ye              1    7[BANK0 ] unsigned char 
 11601 ;; Auto vars:     Size  Location     Type
 11602 ;;  xs              1    8[BANK0 ] unsigned char 
 11603 ;; Return value:  Size  Location     Type
 11604 ;;                  1    wreg      void 
 11605 ;; Registers used:
 11606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11607 ;; Tracked objects:
 11608 ;;		On entry : 0/0
 11609 ;;		On exit  : 0/0
 11610 ;;		Unchanged: 0/0
 11611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11612 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11613 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11615 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11616 ;;Total ram usage:        4 bytes
 11617 ;; Hardware stack levels used:    1
 11618 ;; Hardware stack levels required when called:    9
 11619 ;; This function calls:
 11620 ;;		_LCD_Write
 11621 ;; This function is called by:
 11622 ;;		_LCD_Fill
 11623 ;;		_LCD_FillRectangle
 11624 ;;		_LCD_DrawField
 11625 ;;		_RAM_Address_Set
 11626 ;;		_LCD_DrawPixel
 11627 ;; This function uses a non-reentrant model
 11628 ;;
 11629                           
 11630                           	psect	text49
 11631  0140F2                     __ptext49:
 11632                           	opt stack 0
 11633  0140F2                     _Set_Addr_Window:
 11634                           	opt stack 17
 11635                           
 11636                           ; BSR set to: 0
 11637                           ;incstack = 0
 11638                           ;Set_Addr_Window@xs stored from wreg
 11639  0140F2  0100               	movlb	0	; () banked
 11640  0140F4  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 11641                           
 11642                           ;LCD.c: 216: ys+=2;
 11643  0140F6  0E02               	movlw	2
 11644  0140F8  0100               	movlb	0	; () banked
 11645  0140FA  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 11646                           
 11647                           ;LCD.c: 217: ye+=2;
 11648  0140FC  0E02               	movlw	2
 11649  0140FE  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 11650                           
 11651                           ;LCD.c: 218: xs+=3;
 11652  014100  0E03               	movlw	3
 11653  014102  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 11654                           
 11655                           ;LCD.c: 219: xe+=3;
 11656  014104  0E03               	movlw	3
 11657  014106  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 11658                           
 11659                           ; BSR set to: 0
 11660                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 11661  014108  0E00               	movlw	0
 11662  01410A  6F63               	movwf	LCD_Write@mode& (0+255),b
 11663  01410C  0E2A               	movlw	42
 11664  01410E  EC34  F0AC         	call	_LCD_Write
 11665                           
 11666                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 11667  014112  0E01               	movlw	1
 11668  014114  0100               	movlb	0	; () banked
 11669  014116  6F63               	movwf	LCD_Write@mode& (0+255),b
 11670  014118  0E00               	movlw	0
 11671  01411A  EC34  F0AC         	call	_LCD_Write
 11672                           
 11673                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 11674  01411E  0E01               	movlw	1
 11675  014120  0100               	movlb	0	; () banked
 11676  014122  6F63               	movwf	LCD_Write@mode& (0+255),b
 11677  014124  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 11678  014126  EC34  F0AC         	call	_LCD_Write
 11679                           
 11680                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 11681  01412A  0E01               	movlw	1
 11682  01412C  0100               	movlb	0	; () banked
 11683  01412E  6F63               	movwf	LCD_Write@mode& (0+255),b
 11684  014130  0E00               	movlw	0
 11685  014132  EC34  F0AC         	call	_LCD_Write
 11686                           
 11687                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 11688  014136  0E01               	movlw	1
 11689  014138  0100               	movlb	0	; () banked
 11690  01413A  6F63               	movwf	LCD_Write@mode& (0+255),b
 11691  01413C  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 11692  01413E  EC34  F0AC         	call	_LCD_Write
 11693                           
 11694                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 11695  014142  0E00               	movlw	0
 11696  014144  0100               	movlb	0	; () banked
 11697  014146  6F63               	movwf	LCD_Write@mode& (0+255),b
 11698  014148  0E2B               	movlw	43
 11699  01414A  EC34  F0AC         	call	_LCD_Write
 11700                           
 11701                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 11702  01414E  0E01               	movlw	1
 11703  014150  0100               	movlb	0	; () banked
 11704  014152  6F63               	movwf	LCD_Write@mode& (0+255),b
 11705  014154  0E00               	movlw	0
 11706  014156  EC34  F0AC         	call	_LCD_Write
 11707                           
 11708                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 11709  01415A  0E01               	movlw	1
 11710  01415C  0100               	movlb	0	; () banked
 11711  01415E  6F63               	movwf	LCD_Write@mode& (0+255),b
 11712  014160  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 11713  014162  EC34  F0AC         	call	_LCD_Write
 11714                           
 11715                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 11716  014166  0E01               	movlw	1
 11717  014168  0100               	movlb	0	; () banked
 11718  01416A  6F63               	movwf	LCD_Write@mode& (0+255),b
 11719  01416C  0E00               	movlw	0
 11720  01416E  EC34  F0AC         	call	_LCD_Write
 11721                           
 11722                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 11723  014172  0E01               	movlw	1
 11724  014174  0100               	movlb	0	; () banked
 11725  014176  6F63               	movwf	LCD_Write@mode& (0+255),b
 11726  014178  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 11727  01417A  EC34  F0AC         	call	_LCD_Write
 11728                           
 11729                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 11730  01417E  0E00               	movlw	0
 11731  014180  0100               	movlb	0	; () banked
 11732  014182  6F63               	movwf	LCD_Write@mode& (0+255),b
 11733  014184  0E2C               	movlw	44
 11734  014186  EC34  F0AC         	call	_LCD_Write
 11735  01418A  0012               	return		;funcret
 11736  01418C                     __end_of_Set_Addr_Window:
 11737                           	opt stack 0
 11738                           tosu	equ	0xFFF
 11739                           tosh	equ	0xFFE
 11740                           tosl	equ	0xFFD
 11741                           pclath	equ	0xFFA
 11742                           tblptru	equ	0xFF8
 11743                           tblptrh	equ	0xFF7
 11744                           tblptrl	equ	0xFF6
 11745                           tablat	equ	0xFF5
 11746                           prodh	equ	0xFF4
 11747                           prodl	equ	0xFF3
 11748                           intcon	equ	0xFF2
 11749                           postinc0	equ	0xFEE
 11750                           wreg	equ	0xFE8
 11751                           postdec1	equ	0xFE5
 11752                           fsr1h	equ	0xFE2
 11753                           fsr1l	equ	0xFE1
 11754                           indf2	equ	0xFDF
 11755                           postinc2	equ	0xFDE
 11756                           postdec2	equ	0xFDD
 11757                           plusw2	equ	0xFDB
 11758                           fsr2h	equ	0xFDA
 11759                           fsr2l	equ	0xFD9
 11760                           status	equ	0xFD8
 11761                           
 11762 ;; *************** function _LCD_Word_Write *****************
 11763 ;; Defined at:
 11764 ;;		line 198 in file "Library/LCD.c"
 11765 ;; Parameters:    Size  Location     Type
 11766 ;;  value           2    5[BANK0 ] unsigned short 
 11767 ;; Auto vars:     Size  Location     Type
 11768 ;;		None
 11769 ;; Return value:  Size  Location     Type
 11770 ;;                  1    wreg      void 
 11771 ;; Registers used:
 11772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11773 ;; Tracked objects:
 11774 ;;		On entry : 0/0
 11775 ;;		On exit  : 0/0
 11776 ;;		Unchanged: 0/0
 11777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11778 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11781 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11782 ;;Total ram usage:        2 bytes
 11783 ;; Hardware stack levels used:    1
 11784 ;; Hardware stack levels required when called:    9
 11785 ;; This function calls:
 11786 ;;		_LCD_Write
 11787 ;; This function is called by:
 11788 ;;		_LCD_Fill
 11789 ;;		_LCD_FillRectangle
 11790 ;;		_LCD_DrawField
 11791 ;;		_LCD_DrawPixel
 11792 ;; This function uses a non-reentrant model
 11793 ;;
 11794                           
 11795                           	psect	text50
 11796  01591E                     __ptext50:
 11797                           	opt stack 0
 11798  01591E                     _LCD_Word_Write:
 11799                           	opt stack 17
 11800                           
 11801                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 11802                           
 11803                           ;incstack = 0
 11804  01591E  0E01               	movlw	1
 11805  015920  0100               	movlb	0	; () banked
 11806  015922  6F63               	movwf	LCD_Write@mode& (0+255),b
 11807  015924  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 11808  015926  EC34  F0AC         	call	_LCD_Write
 11809                           
 11810                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 11811  01592A  0E01               	movlw	1
 11812  01592C  0100               	movlb	0	; () banked
 11813  01592E  6F63               	movwf	LCD_Write@mode& (0+255),b
 11814  015930  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 11815  015932  EC34  F0AC         	call	_LCD_Write
 11816  015936  0012               	return		;funcret
 11817  015938                     __end_of_LCD_Word_Write:
 11818                           	opt stack 0
 11819                           tosu	equ	0xFFF
 11820                           tosh	equ	0xFFE
 11821                           tosl	equ	0xFFD
 11822                           pclath	equ	0xFFA
 11823                           tblptru	equ	0xFF8
 11824                           tblptrh	equ	0xFF7
 11825                           tblptrl	equ	0xFF6
 11826                           tablat	equ	0xFF5
 11827                           prodh	equ	0xFF4
 11828                           prodl	equ	0xFF3
 11829                           intcon	equ	0xFF2
 11830                           postinc0	equ	0xFEE
 11831                           wreg	equ	0xFE8
 11832                           postdec1	equ	0xFE5
 11833                           fsr1h	equ	0xFE2
 11834                           fsr1l	equ	0xFE1
 11835                           indf2	equ	0xFDF
 11836                           postinc2	equ	0xFDE
 11837                           postdec2	equ	0xFDD
 11838                           plusw2	equ	0xFDB
 11839                           fsr2h	equ	0xFDA
 11840                           fsr2l	equ	0xFD9
 11841                           status	equ	0xFD8
 11842                           
 11843 ;; *************** function _LCD_Write *****************
 11844 ;; Defined at:
 11845 ;;		line 67 in file "Library/LCD.c"
 11846 ;; Parameters:    Size  Location     Type
 11847 ;;  value           1    wreg     unsigned char 
 11848 ;;  mode            1    3[BANK0 ] enum E6761
 11849 ;; Auto vars:     Size  Location     Type
 11850 ;;  value           1    4[BANK0 ] unsigned char 
 11851 ;; Return value:  Size  Location     Type
 11852 ;;                  1    wreg      void 
 11853 ;; Registers used:
 11854 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11855 ;; Tracked objects:
 11856 ;;		On entry : 0/0
 11857 ;;		On exit  : 0/0
 11858 ;;		Unchanged: 0/0
 11859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11860 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11861 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11863 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11864 ;;Total ram usage:        2 bytes
 11865 ;; Hardware stack levels used:    1
 11866 ;; Hardware stack levels required when called:    8
 11867 ;; This function calls:
 11868 ;;		_Mode_Set
 11869 ;;		_SPI_Send
 11870 ;; This function is called by:
 11871 ;;		_LCD_Init
 11872 ;;		_LCD_Word_Write
 11873 ;;		_Set_Addr_Window
 11874 ;;		_Set_Rotation
 11875 ;;		_LCD_WriteCMD
 11876 ;;		_LCD_WriteData
 11877 ;;		_LCD_Data_Write
 11878 ;;		_LCD_Data_Write_4k
 11879 ;;		_Invert_Display
 11880 ;; This function uses a non-reentrant model
 11881 ;;
 11882                           
 11883                           	psect	text51
 11884  015868                     __ptext51:
 11885                           	opt stack 0
 11886  015868                     _LCD_Write:
 11887                           	opt stack 17
 11888                           
 11889                           ;incstack = 0
 11890                           ;LCD_Write@value stored from wreg
 11891  015868  0100               	movlb	0	; () banked
 11892  01586A  6F64               	movwf	LCD_Write@value& (0+255),b
 11893                           
 11894                           ;LCD.c: 89: Mode_Set(mode);
 11895  01586C  0100               	movlb	0	; () banked
 11896  01586E  5163               	movf	LCD_Write@mode& (0+255),w,b
 11897  015870  EC4D  F0AD         	call	_Mode_Set
 11898                           
 11899                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 11900  015874  0E86               	movlw	low _SPI2
 11901  015876  0100               	movlb	0	; () banked
 11902  015878  6F60               	movwf	SPI_Send@pInput& (0+255),b
 11903  01587A  0E01               	movlw	high _SPI2
 11904  01587C  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 11905  01587E  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 11906  015882  EC06  F0A5         	call	_SPI_Send	;wreg free
 11907  015886  0012               	return		;funcret
 11908  015888                     __end_of_LCD_Write:
 11909                           	opt stack 0
 11910                           tosu	equ	0xFFF
 11911                           tosh	equ	0xFFE
 11912                           tosl	equ	0xFFD
 11913                           pclath	equ	0xFFA
 11914                           tblptru	equ	0xFF8
 11915                           tblptrh	equ	0xFF7
 11916                           tblptrl	equ	0xFF6
 11917                           tablat	equ	0xFF5
 11918                           prodh	equ	0xFF4
 11919                           prodl	equ	0xFF3
 11920                           intcon	equ	0xFF2
 11921                           postinc0	equ	0xFEE
 11922                           wreg	equ	0xFE8
 11923                           postdec1	equ	0xFE5
 11924                           fsr1h	equ	0xFE2
 11925                           fsr1l	equ	0xFE1
 11926                           indf2	equ	0xFDF
 11927                           postinc2	equ	0xFDE
 11928                           postdec2	equ	0xFDD
 11929                           plusw2	equ	0xFDB
 11930                           fsr2h	equ	0xFDA
 11931                           fsr2l	equ	0xFD9
 11932                           status	equ	0xFD8
 11933                           
 11934 ;; *************** function _Mode_Set *****************
 11935 ;; Defined at:
 11936 ;;		line 40 in file "Library/LCD.c"
 11937 ;; Parameters:    Size  Location     Type
 11938 ;;  pMode           1    wreg     enum E6761
 11939 ;; Auto vars:     Size  Location     Type
 11940 ;;  pMode           1    0[BANK0 ] enum E6761
 11941 ;; Return value:  Size  Location     Type
 11942 ;;                  1    wreg      void 
 11943 ;; Registers used:
 11944 ;;		wreg
 11945 ;; Tracked objects:
 11946 ;;		On entry : 0/0
 11947 ;;		On exit  : 0/0
 11948 ;;		Unchanged: 0/0
 11949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11951 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11953 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11954 ;;Total ram usage:        1 bytes
 11955 ;; Hardware stack levels used:    1
 11956 ;; Hardware stack levels required when called:    7
 11957 ;; This function calls:
 11958 ;;		Nothing
 11959 ;; This function is called by:
 11960 ;;		_LCD_Write
 11961 ;; This function uses a non-reentrant model
 11962 ;;
 11963                           
 11964                           	psect	text52
 11965  015A9A                     __ptext52:
 11966                           	opt stack 0
 11967  015A9A                     _Mode_Set:
 11968                           	opt stack 17
 11969                           
 11970                           ;incstack = 0
 11971                           ;Mode_Set@pMode stored from wreg
 11972  015A9A  0100               	movlb	0	; () banked
 11973  015A9C  6F60               	movwf	Mode_Set@pMode& (0+255),b
 11974                           
 11975                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 11976  015A9E  0100               	movlb	0	; () banked
 11977  015AA0  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 11978  015AA2  D002               	bra	u9855
 11979  015AA4  9E85               	bcf	3973,7,c	;volatile
 11980  015AA6  D001               	bra	u9856
 11981  015AA8                     u9855:
 11982  015AA8  8E85               	bsf	3973,7,c	;volatile
 11983  015AAA                     u9856:
 11984  015AAA  0012               	return		;funcret
 11985  015AAC                     __end_of_Mode_Set:
 11986                           	opt stack 0
 11987                           tosu	equ	0xFFF
 11988                           tosh	equ	0xFFE
 11989                           tosl	equ	0xFFD
 11990                           pclath	equ	0xFFA
 11991                           tblptru	equ	0xFF8
 11992                           tblptrh	equ	0xFF7
 11993                           tblptrl	equ	0xFF6
 11994                           tablat	equ	0xFF5
 11995                           prodh	equ	0xFF4
 11996                           prodl	equ	0xFF3
 11997                           intcon	equ	0xFF2
 11998                           postinc0	equ	0xFEE
 11999                           wreg	equ	0xFE8
 12000                           postdec1	equ	0xFE5
 12001                           fsr1h	equ	0xFE2
 12002                           fsr1l	equ	0xFE1
 12003                           indf2	equ	0xFDF
 12004                           postinc2	equ	0xFDE
 12005                           postdec2	equ	0xFDD
 12006                           plusw2	equ	0xFDB
 12007                           fsr2h	equ	0xFDA
 12008                           fsr2l	equ	0xFD9
 12009                           status	equ	0xFD8
 12010                           
 12011 ;; *************** function _Configure_GPIOs *****************
 12012 ;; Defined at:
 12013 ;;		line 46 in file "Library/LCD.c"
 12014 ;; Parameters:    Size  Location     Type
 12015 ;;		None
 12016 ;; Auto vars:     Size  Location     Type
 12017 ;;		None
 12018 ;; Return value:  Size  Location     Type
 12019 ;;                  1    wreg      void 
 12020 ;; Registers used:
 12021 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12022 ;; Tracked objects:
 12023 ;;		On entry : 0/0
 12024 ;;		On exit  : 0/0
 12025 ;;		Unchanged: 0/0
 12026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12031 ;;Total ram usage:        0 bytes
 12032 ;; Hardware stack levels used:    1
 12033 ;; Hardware stack levels required when called:   14
 12034 ;; This function calls:
 12035 ;;		_LCD_Reset
 12036 ;;		_Port_SetPinType
 12037 ;;		_SPI_Init
 12038 ;;		_SPI_MaxSpeed
 12039 ;; This function is called by:
 12040 ;;		_LCD_Init
 12041 ;; This function uses a non-reentrant model
 12042 ;;
 12043                           
 12044                           	psect	text53
 12045  014D40                     __ptext53:
 12046                           	opt stack 0
 12047  014D40                     _Configure_GPIOs:
 12048                           	opt stack 15
 12049                           
 12050                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 12051                           
 12052                           ;incstack = 0
 12053  014D40  0EB9               	movlw	low _PortF
 12054  014D42  0100               	movlb	0	; () banked
 12055  014D44  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12056  014D46  0E01               	movlw	high _PortF
 12057  014D48  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12058  014D4A  0E07               	movlw	7
 12059  014D4C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12060  014D4E  0E03               	movlw	3
 12061  014D50  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12062  014D52  ECA1  F091         	call	_Port_SetPinType	;wreg free
 12063                           
 12064                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 12065  014D56  0EB9               	movlw	low _PortF
 12066  014D58  0100               	movlb	0	; () banked
 12067  014D5A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12068  014D5C  0E01               	movlw	high _PortF
 12069  014D5E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12070  014D60  0E06               	movlw	6
 12071  014D62  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12072  014D64  0E03               	movlw	3
 12073  014D66  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12074  014D68  ECA1  F091         	call	_Port_SetPinType	;wreg free
 12075                           
 12076                           ;LCD.c: 55: LCD_Reset();
 12077  014D6C  EC20  F0A8         	call	_LCD_Reset	;wreg free
 12078                           
 12079                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 12080  014D70  0EC0               	movlw	192
 12081  014D72  0100               	movlb	0	; () banked
 12082  014D74  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 12083  014D76  0EC6               	movlw	198
 12084  014D78  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 12085  014D7A  0E2D               	movlw	45
 12086  014D7C  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 12087  014D7E  0E00               	movlw	0
 12088  014D80  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 12089  014D82  0E01               	movlw	1
 12090  014D84  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 12091  014D86  0E01               	movlw	1
 12092  014D88  6F92               	movwf	SPI_Init@pMode& (0+255),b
 12093  014D8A  EC00  F080         	call	_SPI_Init	;wreg free
 12094                           
 12095                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 12096  014D8E  0E86               	movlw	low _SPI2
 12097  014D90  0100               	movlb	0	; () banked
 12098  014D92  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 12099  014D94  0E01               	movlw	high _SPI2
 12100  014D96  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 12101  014D98  EC71  F0A5         	call	_SPI_MaxSpeed	;wreg free
 12102  014D9C  0012               	return		;funcret
 12103  014D9E                     __end_of_Configure_GPIOs:
 12104                           	opt stack 0
 12105                           tosu	equ	0xFFF
 12106                           tosh	equ	0xFFE
 12107                           tosl	equ	0xFFD
 12108                           pclath	equ	0xFFA
 12109                           tblptru	equ	0xFF8
 12110                           tblptrh	equ	0xFF7
 12111                           tblptrl	equ	0xFF6
 12112                           tablat	equ	0xFF5
 12113                           prodh	equ	0xFF4
 12114                           prodl	equ	0xFF3
 12115                           intcon	equ	0xFF2
 12116                           postinc0	equ	0xFEE
 12117                           wreg	equ	0xFE8
 12118                           postdec1	equ	0xFE5
 12119                           fsr1h	equ	0xFE2
 12120                           fsr1l	equ	0xFE1
 12121                           indf2	equ	0xFDF
 12122                           postinc2	equ	0xFDE
 12123                           postdec2	equ	0xFDD
 12124                           plusw2	equ	0xFDB
 12125                           fsr2h	equ	0xFDA
 12126                           fsr2l	equ	0xFD9
 12127                           status	equ	0xFD8
 12128                           
 12129 ;; *************** function _SPI_MaxSpeed *****************
 12130 ;; Defined at:
 12131 ;;		line 201 in file "Library/SPI.c"
 12132 ;; Parameters:    Size  Location     Type
 12133 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 12134 ;;		 -> SPI2(11), 
 12135 ;; Auto vars:     Size  Location     Type
 12136 ;;		None
 12137 ;; Return value:  Size  Location     Type
 12138 ;;                  1    wreg      void 
 12139 ;; Registers used:
 12140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12141 ;; Tracked objects:
 12142 ;;		On entry : 0/0
 12143 ;;		On exit  : 0/0
 12144 ;;		Unchanged: 0/0
 12145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12146 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12149 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12150 ;;Total ram usage:        2 bytes
 12151 ;; Hardware stack levels used:    1
 12152 ;; Hardware stack levels required when called:    9
 12153 ;; This function calls:
 12154 ;;		_Byte_SetBit
 12155 ;;		_Byte_SetQuad
 12156 ;; This function is called by:
 12157 ;;		_Configure_GPIOs
 12158 ;; This function uses a non-reentrant model
 12159 ;;
 12160                           
 12161                           	psect	text54
 12162  014AE2                     __ptext54:
 12163                           	opt stack 0
 12164  014AE2                     _SPI_MaxSpeed:
 12165                           	opt stack 19
 12166                           
 12167                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 12168                           
 12169                           ;incstack = 0
 12170  014AE2  0100               	movlb	0	; () banked
 12171  014AE4  EE20 F006          	lfsr	2,6
 12172  014AE8  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 12173  014AEA  26D9               	addwf	fsr2l,f,c
 12174  014AEC  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 12175  014AEE  22DA               	addwfc	fsr2h,f,c
 12176  014AF0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12177  014AF4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12178  014AF8  0E05               	movlw	5
 12179  014AFA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12180  014AFC  0E00               	movlw	0
 12181  014AFE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12182  014B00  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 12183                           
 12184                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 12185  014B04  0100               	movlb	0	; () banked
 12186  014B06  EE20 F006          	lfsr	2,6
 12187  014B0A  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 12188  014B0C  26D9               	addwf	fsr2l,f,c
 12189  014B0E  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 12190  014B10  22DA               	addwfc	fsr2h,f,c
 12191  014B12  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 12192  014B16  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 12193  014B1A  0E00               	movlw	0
 12194  014B1C  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 12195  014B1E  0E00               	movlw	0
 12196  014B20  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 12197  014B22  EC54  F0AC         	call	_Byte_SetQuad	;wreg free
 12198                           
 12199                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 12200  014B26  0100               	movlb	0	; () banked
 12201  014B28  EE20 F006          	lfsr	2,6
 12202  014B2C  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 12203  014B2E  26D9               	addwf	fsr2l,f,c
 12204  014B30  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 12205  014B32  22DA               	addwfc	fsr2h,f,c
 12206  014B34  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12207  014B38  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12208  014B3C  0E05               	movlw	5
 12209  014B3E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12210  014B40  0E01               	movlw	1
 12211  014B42  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12212  014B44  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 12213  014B48  0012               	return		;funcret
 12214  014B4A                     __end_of_SPI_MaxSpeed:
 12215                           	opt stack 0
 12216                           tosu	equ	0xFFF
 12217                           tosh	equ	0xFFE
 12218                           tosl	equ	0xFFD
 12219                           pclath	equ	0xFFA
 12220                           tblptru	equ	0xFF8
 12221                           tblptrh	equ	0xFF7
 12222                           tblptrl	equ	0xFF6
 12223                           tablat	equ	0xFF5
 12224                           prodh	equ	0xFF4
 12225                           prodl	equ	0xFF3
 12226                           intcon	equ	0xFF2
 12227                           postinc0	equ	0xFEE
 12228                           wreg	equ	0xFE8
 12229                           postdec1	equ	0xFE5
 12230                           fsr1h	equ	0xFE2
 12231                           fsr1l	equ	0xFE1
 12232                           indf2	equ	0xFDF
 12233                           postinc2	equ	0xFDE
 12234                           postdec2	equ	0xFDD
 12235                           plusw2	equ	0xFDB
 12236                           fsr2h	equ	0xFDA
 12237                           fsr2l	equ	0xFD9
 12238                           status	equ	0xFD8
 12239                           
 12240 ;; *************** function _LCD_Reset *****************
 12241 ;; Defined at:
 12242 ;;		line 95 in file "Library/LCD.c"
 12243 ;; Parameters:    Size  Location     Type
 12244 ;;		None
 12245 ;; Auto vars:     Size  Location     Type
 12246 ;;		None
 12247 ;; Return value:  Size  Location     Type
 12248 ;;                  1    wreg      void 
 12249 ;; Registers used:
 12250 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12251 ;; Tracked objects:
 12252 ;;		On entry : 0/0
 12253 ;;		On exit  : 0/0
 12254 ;;		Unchanged: 0/0
 12255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12260 ;;Total ram usage:        0 bytes
 12261 ;; Hardware stack levels used:    1
 12262 ;; Hardware stack levels required when called:   13
 12263 ;; This function calls:
 12264 ;;		_LED_Toggle
 12265 ;;		_Reset_High
 12266 ;;		_Reset_Low
 12267 ;;		_delay_ms
 12268 ;; This function is called by:
 12269 ;;		_Configure_GPIOs
 12270 ;; This function uses a non-reentrant model
 12271 ;;
 12272                           
 12273                           	psect	text55
 12274  015040                     __ptext55:
 12275                           	opt stack 0
 12276  015040                     _LCD_Reset:
 12277                           	opt stack 15
 12278                           
 12279                           ;LCD.c: 97: Reset_High();
 12280                           
 12281                           ;incstack = 0
 12282  015040  ECC1  F0AC         	call	_Reset_High	;wreg free
 12283                           
 12284                           ;LCD.c: 98: LED_Toggle(eLED2);
 12285  015044  0E01               	movlw	1
 12286  015046  ECB0  F0A9         	call	_LED_Toggle
 12287                           
 12288                           ;LCD.c: 99: delay_ms(0x80);
 12289  01504A  0E00               	movlw	0
 12290  01504C  0100               	movlb	0	; () banked
 12291  01504E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 12292  015050  0E80               	movlw	128
 12293  015052  6F60               	movwf	delay_ms@ms& (0+255),b
 12294  015054  ECCF  F0A6         	call	_delay_ms	;wreg free
 12295                           
 12296                           ;LCD.c: 100: LED_Toggle(eLED2);
 12297  015058  0E01               	movlw	1
 12298  01505A  ECB0  F0A9         	call	_LED_Toggle
 12299                           
 12300                           ;LCD.c: 101: Reset_Low();
 12301  01505E  ECB5  F0AC         	call	_Reset_Low	;wreg free
 12302                           
 12303                           ;LCD.c: 102: delay_ms(0x80);
 12304  015062  0E00               	movlw	0
 12305  015064  0100               	movlb	0	; () banked
 12306  015066  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 12307  015068  0E80               	movlw	128
 12308  01506A  6F60               	movwf	delay_ms@ms& (0+255),b
 12309  01506C  ECCF  F0A6         	call	_delay_ms	;wreg free
 12310                           
 12311                           ;LCD.c: 103: LED_Toggle(eLED2);
 12312  015070  0E01               	movlw	1
 12313  015072  ECB0  F0A9         	call	_LED_Toggle
 12314                           
 12315                           ;LCD.c: 104: Reset_High();
 12316  015076  ECC1  F0AC         	call	_Reset_High	;wreg free
 12317                           
 12318                           ;LCD.c: 105: delay_ms(0x80);
 12319  01507A  0E00               	movlw	0
 12320  01507C  0100               	movlb	0	; () banked
 12321  01507E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 12322  015080  0E80               	movlw	128
 12323  015082  6F60               	movwf	delay_ms@ms& (0+255),b
 12324  015084  ECCF  F0A6         	call	_delay_ms	;wreg free
 12325                           
 12326                           ;LCD.c: 106: LED_Toggle(eLED2);
 12327  015088  0E01               	movlw	1
 12328  01508A  ECB0  F0A9         	call	_LED_Toggle
 12329  01508E  0012               	return		;funcret
 12330  015090                     __end_of_LCD_Reset:
 12331                           	opt stack 0
 12332                           tosu	equ	0xFFF
 12333                           tosh	equ	0xFFE
 12334                           tosl	equ	0xFFD
 12335                           pclath	equ	0xFFA
 12336                           tblptru	equ	0xFF8
 12337                           tblptrh	equ	0xFF7
 12338                           tblptrl	equ	0xFF6
 12339                           tablat	equ	0xFF5
 12340                           prodh	equ	0xFF4
 12341                           prodl	equ	0xFF3
 12342                           intcon	equ	0xFF2
 12343                           postinc0	equ	0xFEE
 12344                           wreg	equ	0xFE8
 12345                           postdec1	equ	0xFE5
 12346                           fsr1h	equ	0xFE2
 12347                           fsr1l	equ	0xFE1
 12348                           indf2	equ	0xFDF
 12349                           postinc2	equ	0xFDE
 12350                           postdec2	equ	0xFDD
 12351                           plusw2	equ	0xFDB
 12352                           fsr2h	equ	0xFDA
 12353                           fsr2l	equ	0xFD9
 12354                           status	equ	0xFD8
 12355                           
 12356 ;; *************** function _delay_ms *****************
 12357 ;; Defined at:
 12358 ;;		line 240 in file "Library/Types.c"
 12359 ;; Parameters:    Size  Location     Type
 12360 ;;  ms              2    0[BANK0 ] unsigned short 
 12361 ;; Auto vars:     Size  Location     Type
 12362 ;;  u               4    2[BANK0 ] volatile unsigned long 
 12363 ;; Return value:  Size  Location     Type
 12364 ;;                  1    wreg      void 
 12365 ;; Registers used:
 12366 ;;		wreg, status,2, status,0
 12367 ;; Tracked objects:
 12368 ;;		On entry : 0/0
 12369 ;;		On exit  : 0/0
 12370 ;;		Unchanged: 0/0
 12371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12372 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12373 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12375 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12376 ;;Total ram usage:        6 bytes
 12377 ;; Hardware stack levels used:    1
 12378 ;; Hardware stack levels required when called:    7
 12379 ;; This function calls:
 12380 ;;		Nothing
 12381 ;; This function is called by:
 12382 ;;		_LCD_Reset
 12383 ;;		_LCD_Init
 12384 ;;		_MXK_Init
 12385 ;;		_SteppingCCW
 12386 ;;		_SteppingCW
 12387 ;; This function uses a non-reentrant model
 12388 ;;
 12389                           
 12390                           	psect	text56
 12391  014D9E                     __ptext56:
 12392                           	opt stack 0
 12393  014D9E                     _delay_ms:
 12394                           	opt stack 22
 12395                           
 12396                           ;Types.c: 242: volatile unsigned long u;
 12397                           ;Types.c: 243: while (ms--)
 12398                           
 12399                           ;incstack = 0
 12400  014D9E  D01B               	goto	u11190
 12401  014DA0                     l13887:
 12402                           
 12403                           ;Types.c: 244: {
 12404                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 12405  014DA0  0E00               	movlw	0
 12406  014DA2  0100               	movlb	0	; () banked
 12407  014DA4  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 12408  014DA6  0E00               	movlw	0
 12409  014DA8  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 12410  014DAA  0E00               	movlw	0
 12411  014DAC  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 12412  014DAE  0E00               	movlw	0
 12413  014DB0  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 12414  014DB2                     l13889:
 12415                           
 12416                           ; BSR set to: 0
 12417  014DB2  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 12418  014DB4  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 12419  014DB6  E10F               	bnz	l13895
 12420  014DB8  0EB0               	movlw	176
 12421  014DBA  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 12422  014DBC  0E04               	movlw	4
 12423  014DBE  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 12424  014DC0  B0D8               	btfsc	status,0,c
 12425  014DC2  D009               	goto	u11190
 12426                           
 12427                           ; BSR set to: 0
 12428                           
 12429                           ; BSR set to: 0
 12430  014DC4  F000               	nop		; ;# 
 12431  014DC6  0E01               	movlw	1
 12432  014DC8  0100               	movlb	0	; () banked
 12433  014DCA  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 12434  014DCC  0E00               	movlw	0
 12435  014DCE  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 12436  014DD0  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 12437  014DD2  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 12438  014DD4  D7EE               	goto	l13889
 12439  014DD6                     u11190:
 12440  014DD6                     l13895:
 12441  014DD6  0100               	movlb	0	; () banked
 12442  014DD8  0760               	decf	delay_ms@ms& (0+255),f,b
 12443  014DDA  A0D8               	btfss	status,0,c
 12444  014DDC  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 12445  014DDE  2960               	incf	delay_ms@ms& (0+255),w,b
 12446  014DE0  E1DF               	bnz	l13887
 12447  014DE2  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 12448  014DE4  A4D8               	btfss	status,2,c
 12449  014DE6  D7DC               	goto	l824
 12450                           
 12451                           ; BSR set to: 0
 12452                           ;Types.c: 251: }
 12453                           ;Types.c: 252: }
 12454                           ;Types.c: 253: u = 0x8008;
 12455                           
 12456                           ; BSR set to: 0
 12457  014DE8  0E08               	movlw	8
 12458  014DEA  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 12459  014DEC  0E80               	movlw	128
 12460  014DEE  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 12461  014DF0  0E00               	movlw	0
 12462  014DF2  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 12463  014DF4  0E00               	movlw	0
 12464  014DF6  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 12465                           
 12466                           ; BSR set to: 0
 12467  014DF8  0012               	return		;funcret
 12468  014DFA                     __end_of_delay_ms:
 12469                           	opt stack 0
 12470                           tosu	equ	0xFFF
 12471                           tosh	equ	0xFFE
 12472                           tosl	equ	0xFFD
 12473                           pclath	equ	0xFFA
 12474                           tblptru	equ	0xFF8
 12475                           tblptrh	equ	0xFF7
 12476                           tblptrl	equ	0xFF6
 12477                           tablat	equ	0xFF5
 12478                           prodh	equ	0xFF4
 12479                           prodl	equ	0xFF3
 12480                           intcon	equ	0xFF2
 12481                           postinc0	equ	0xFEE
 12482                           wreg	equ	0xFE8
 12483                           postdec1	equ	0xFE5
 12484                           fsr1h	equ	0xFE2
 12485                           fsr1l	equ	0xFE1
 12486                           indf2	equ	0xFDF
 12487                           postinc2	equ	0xFDE
 12488                           postdec2	equ	0xFDD
 12489                           plusw2	equ	0xFDB
 12490                           fsr2h	equ	0xFDA
 12491                           fsr2l	equ	0xFD9
 12492                           status	equ	0xFD8
 12493                           
 12494 ;; *************** function _Reset_Low *****************
 12495 ;; Defined at:
 12496 ;;		line 32 in file "Library/LCD.c"
 12497 ;; Parameters:    Size  Location     Type
 12498 ;;		None
 12499 ;; Auto vars:     Size  Location     Type
 12500 ;;		None
 12501 ;; Return value:  Size  Location     Type
 12502 ;;                  1    wreg      void 
 12503 ;; Registers used:
 12504 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12505 ;; Tracked objects:
 12506 ;;		On entry : 0/0
 12507 ;;		On exit  : 0/0
 12508 ;;		Unchanged: 0/0
 12509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12514 ;;Total ram usage:        0 bytes
 12515 ;; Hardware stack levels used:    1
 12516 ;; Hardware stack levels required when called:   11
 12517 ;; This function calls:
 12518 ;;		_Port_SetPin
 12519 ;; This function is called by:
 12520 ;;		_LCD_Reset
 12521 ;; This function uses a non-reentrant model
 12522 ;;
 12523                           
 12524                           	psect	text57
 12525  01596A                     __ptext57:
 12526                           	opt stack 0
 12527  01596A                     _Reset_Low:
 12528                           	opt stack 16
 12529                           
 12530                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 12531                           
 12532                           ; BSR set to: 0
 12533                           ;incstack = 0
 12534  01596A  0EB9               	movlw	low _PortF
 12535  01596C  0100               	movlb	0	; () banked
 12536  01596E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12537  015970  0E01               	movlw	high _PortF
 12538  015972  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12539  015974  0E06               	movlw	6
 12540  015976  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12541  015978  0E01               	movlw	1
 12542  01597A  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12543  01597C  EC32  F09E         	call	_Port_SetPin	;wreg free
 12544  015980  0012               	return		;funcret
 12545  015982                     __end_of_Reset_Low:
 12546                           	opt stack 0
 12547                           tosu	equ	0xFFF
 12548                           tosh	equ	0xFFE
 12549                           tosl	equ	0xFFD
 12550                           pclath	equ	0xFFA
 12551                           tblptru	equ	0xFF8
 12552                           tblptrh	equ	0xFF7
 12553                           tblptrl	equ	0xFF6
 12554                           tablat	equ	0xFF5
 12555                           prodh	equ	0xFF4
 12556                           prodl	equ	0xFF3
 12557                           intcon	equ	0xFF2
 12558                           postinc0	equ	0xFEE
 12559                           wreg	equ	0xFE8
 12560                           postdec1	equ	0xFE5
 12561                           fsr1h	equ	0xFE2
 12562                           fsr1l	equ	0xFE1
 12563                           indf2	equ	0xFDF
 12564                           postinc2	equ	0xFDE
 12565                           postdec2	equ	0xFDD
 12566                           plusw2	equ	0xFDB
 12567                           fsr2h	equ	0xFDA
 12568                           fsr2l	equ	0xFD9
 12569                           status	equ	0xFD8
 12570                           
 12571 ;; *************** function _Reset_High *****************
 12572 ;; Defined at:
 12573 ;;		line 36 in file "Library/LCD.c"
 12574 ;; Parameters:    Size  Location     Type
 12575 ;;		None
 12576 ;; Auto vars:     Size  Location     Type
 12577 ;;		None
 12578 ;; Return value:  Size  Location     Type
 12579 ;;                  1    wreg      void 
 12580 ;; Registers used:
 12581 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12582 ;; Tracked objects:
 12583 ;;		On entry : 0/0
 12584 ;;		On exit  : 0/0
 12585 ;;		Unchanged: 0/0
 12586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12591 ;;Total ram usage:        0 bytes
 12592 ;; Hardware stack levels used:    1
 12593 ;; Hardware stack levels required when called:   11
 12594 ;; This function calls:
 12595 ;;		_Port_SetPin
 12596 ;; This function is called by:
 12597 ;;		_LCD_Reset
 12598 ;; This function uses a non-reentrant model
 12599 ;;
 12600                           
 12601                           	psect	text58
 12602  015982                     __ptext58:
 12603                           	opt stack 0
 12604  015982                     _Reset_High:
 12605                           	opt stack 16
 12606                           
 12607                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 12608                           
 12609                           ;incstack = 0
 12610  015982  0EB9               	movlw	low _PortF
 12611  015984  0100               	movlb	0	; () banked
 12612  015986  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12613  015988  0E01               	movlw	high _PortF
 12614  01598A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12615  01598C  0E06               	movlw	6
 12616  01598E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12617  015990  0E00               	movlw	0
 12618  015992  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12619  015994  EC32  F09E         	call	_Port_SetPin	;wreg free
 12620  015998  0012               	return		;funcret
 12621  01599A                     __end_of_Reset_High:
 12622                           	opt stack 0
 12623                           tosu	equ	0xFFF
 12624                           tosh	equ	0xFFE
 12625                           tosl	equ	0xFFD
 12626                           pclath	equ	0xFFA
 12627                           tblptru	equ	0xFF8
 12628                           tblptrh	equ	0xFF7
 12629                           tblptrl	equ	0xFF6
 12630                           tablat	equ	0xFF5
 12631                           prodh	equ	0xFF4
 12632                           prodl	equ	0xFF3
 12633                           intcon	equ	0xFF2
 12634                           postinc0	equ	0xFEE
 12635                           wreg	equ	0xFE8
 12636                           postdec1	equ	0xFE5
 12637                           fsr1h	equ	0xFE2
 12638                           fsr1l	equ	0xFE1
 12639                           indf2	equ	0xFDF
 12640                           postinc2	equ	0xFDE
 12641                           postdec2	equ	0xFDD
 12642                           plusw2	equ	0xFDB
 12643                           fsr2h	equ	0xFDA
 12644                           fsr2l	equ	0xFD9
 12645                           status	equ	0xFD8
 12646                           
 12647 ;; *************** function _Init_Timer0 *****************
 12648 ;; Defined at:
 12649 ;;		line 68 in file "main.c"
 12650 ;; Parameters:    Size  Location     Type
 12651 ;;		None
 12652 ;; Auto vars:     Size  Location     Type
 12653 ;;		None
 12654 ;; Return value:  Size  Location     Type
 12655 ;;                  2  2118[None  ] int 
 12656 ;; Registers used:
 12657 ;;		None
 12658 ;; Tracked objects:
 12659 ;;		On entry : 0/0
 12660 ;;		On exit  : 0/0
 12661 ;;		Unchanged: 0/0
 12662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12667 ;;Total ram usage:        0 bytes
 12668 ;; Hardware stack levels used:    1
 12669 ;; Hardware stack levels required when called:    7
 12670 ;; This function calls:
 12671 ;;		Nothing
 12672 ;; This function is called by:
 12673 ;;		_main
 12674 ;; This function uses a non-reentrant model
 12675 ;;
 12676                           
 12677                           	psect	text59
 12678  01599A                     __ptext59:
 12679                           	opt stack 0
 12680  01599A                     _Init_Timer0:
 12681                           	opt stack 23
 12682                           
 12683                           ;main.c: 70: T0CONbits.TMR0ON = 1;
 12684                           
 12685                           ;incstack = 0
 12686  01599A  8ED5               	bsf	4053,7,c	;volatile
 12687                           
 12688                           ;main.c: 71: T0CONbits.T08BIT = 1;
 12689  01599C  8CD5               	bsf	4053,6,c	;volatile
 12690                           
 12691                           ;main.c: 72: T0CONbits.T0CS=0;
 12692  01599E  9AD5               	bcf	4053,5,c	;volatile
 12693                           
 12694                           ;main.c: 73: T0CONbits.T0SE=0;
 12695  0159A0  98D5               	bcf	4053,4,c	;volatile
 12696                           
 12697                           ;main.c: 74: T0CONbits.PSA=0;
 12698  0159A2  96D5               	bcf	4053,3,c	;volatile
 12699                           
 12700                           ;main.c: 75: T0CONbits.T0PS2=1;
 12701  0159A4  84D5               	bsf	4053,2,c	;volatile
 12702                           
 12703                           ;main.c: 76: T0CONbits.T0PS1=1;
 12704  0159A6  82D5               	bsf	4053,1,c	;volatile
 12705                           
 12706                           ;main.c: 77: T0CONbits.T0PS0=1;
 12707  0159A8  80D5               	bsf	4053,0,c	;volatile
 12708                           
 12709                           ;main.c: 79: INTCONbits.TMR0IE = 1;
 12710  0159AA  8AF2               	bsf	intcon,5,c	;volatile
 12711                           
 12712                           ;main.c: 80: INTCONbits.PEIE = 1;
 12713  0159AC  8CF2               	bsf	intcon,6,c	;volatile
 12714                           
 12715                           ;main.c: 81: INTCONbits.GIE = 1;
 12716  0159AE  8EF2               	bsf	intcon,7,c	;volatile
 12717  0159B0  0012               	return		;funcret
 12718  0159B2                     __end_of_Init_Timer0:
 12719                           	opt stack 0
 12720                           tosu	equ	0xFFF
 12721                           tosh	equ	0xFFE
 12722                           tosl	equ	0xFFD
 12723                           pclath	equ	0xFFA
 12724                           tblptru	equ	0xFF8
 12725                           tblptrh	equ	0xFF7
 12726                           tblptrl	equ	0xFF6
 12727                           tablat	equ	0xFF5
 12728                           prodh	equ	0xFF4
 12729                           prodl	equ	0xFF3
 12730                           intcon	equ	0xFF2
 12731                           postinc0	equ	0xFEE
 12732                           wreg	equ	0xFE8
 12733                           postdec1	equ	0xFE5
 12734                           fsr1h	equ	0xFE2
 12735                           fsr1l	equ	0xFE1
 12736                           indf2	equ	0xFDF
 12737                           postinc2	equ	0xFDE
 12738                           postdec2	equ	0xFDD
 12739                           plusw2	equ	0xFDB
 12740                           fsr2h	equ	0xFDA
 12741                           fsr2l	equ	0xFD9
 12742                           status	equ	0xFD8
 12743                           
 12744 ;; *************** function _InitSerialCommunication *****************
 12745 ;; Defined at:
 12746 ;;		line 91 in file "main.c"
 12747 ;; Parameters:    Size  Location     Type
 12748 ;;		None
 12749 ;; Auto vars:     Size  Location     Type
 12750 ;;		None
 12751 ;; Return value:  Size  Location     Type
 12752 ;;                  1    wreg      void 
 12753 ;; Registers used:
 12754 ;;		wreg, status,2
 12755 ;; Tracked objects:
 12756 ;;		On entry : 0/0
 12757 ;;		On exit  : 0/0
 12758 ;;		Unchanged: 0/0
 12759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12764 ;;Total ram usage:        0 bytes
 12765 ;; Hardware stack levels used:    1
 12766 ;; Hardware stack levels required when called:    7
 12767 ;; This function calls:
 12768 ;;		Nothing
 12769 ;; This function is called by:
 12770 ;;		_main
 12771 ;; This function uses a non-reentrant model
 12772 ;;
 12773                           
 12774                           	psect	text60
 12775  0158C8                     __ptext60:
 12776                           	opt stack 0
 12777  0158C8                     _InitSerialCommunication:
 12778                           	opt stack 23
 12779                           
 12780                           ;main.c: 93: TRISCbits.TRISC6 = 0;
 12781                           
 12782                           ;incstack = 0
 12783  0158C8  9C94               	bcf	3988,6,c	;volatile
 12784                           
 12785                           ;main.c: 94: TRISCbits.TRISC7 = 1;
 12786  0158CA  8E94               	bsf	3988,7,c	;volatile
 12787                           
 12788                           ;main.c: 96: TXSTA1 = 0b00100100;
 12789  0158CC  0E24               	movlw	36
 12790  0158CE  6EAD               	movwf	4013,c	;volatile
 12791                           
 12792                           ;main.c: 97: RCSTA1 = 0b10010000;
 12793  0158D0  0E90               	movlw	144
 12794  0158D2  6EAC               	movwf	4012,c	;volatile
 12795                           
 12796                           ;main.c: 99: BAUDCON1bits.DTRXP = 0;
 12797  0158D4  9A7E               	bcf	3966,5,c	;volatile
 12798                           
 12799                           ;main.c: 100: BAUDCON1bits.SCKP = 0;
 12800  0158D6  987E               	bcf	3966,4,c	;volatile
 12801                           
 12802                           ;main.c: 101: BAUDCON1bits.WUE = 0;
 12803  0158D8  927E               	bcf	3966,1,c	;volatile
 12804                           
 12805                           ;main.c: 102: BAUDCON1bits.ABDEN = 0;
 12806  0158DA  907E               	bcf	3966,0,c	;volatile
 12807                           
 12808                           ;main.c: 105: TXSTA1bits.BRGH = 1;
 12809  0158DC  84AD               	bsf	4013,2,c	;volatile
 12810                           
 12811                           ;main.c: 106: BAUDCON1bits.BRG16 = 0;
 12812  0158DE  967E               	bcf	3966,3,c	;volatile
 12813                           
 12814                           ;main.c: 107: SPBRG1 = 51;
 12815  0158E0  0E33               	movlw	51
 12816  0158E2  6EB0               	movwf	4016,c	;volatile
 12817  0158E4  0012               	return		;funcret
 12818  0158E6                     __end_of_InitSerialCommunication:
 12819                           	opt stack 0
 12820                           tosu	equ	0xFFF
 12821                           tosh	equ	0xFFE
 12822                           tosl	equ	0xFFD
 12823                           pclath	equ	0xFFA
 12824                           tblptru	equ	0xFF8
 12825                           tblptrh	equ	0xFF7
 12826                           tblptrl	equ	0xFF6
 12827                           tablat	equ	0xFF5
 12828                           prodh	equ	0xFF4
 12829                           prodl	equ	0xFF3
 12830                           intcon	equ	0xFF2
 12831                           postinc0	equ	0xFEE
 12832                           wreg	equ	0xFE8
 12833                           postdec1	equ	0xFE5
 12834                           fsr1h	equ	0xFE2
 12835                           fsr1l	equ	0xFE1
 12836                           indf2	equ	0xFDF
 12837                           postinc2	equ	0xFDE
 12838                           postdec2	equ	0xFDD
 12839                           plusw2	equ	0xFDB
 12840                           fsr2h	equ	0xFDA
 12841                           fsr2l	equ	0xFD9
 12842                           status	equ	0xFD8
 12843                           
 12844 ;; *************** function _InitADC *****************
 12845 ;; Defined at:
 12846 ;;		line 26 in file "dans.c"
 12847 ;; Parameters:    Size  Location     Type
 12848 ;;		None
 12849 ;; Auto vars:     Size  Location     Type
 12850 ;;		None
 12851 ;; Return value:  Size  Location     Type
 12852 ;;                  1    wreg      void 
 12853 ;; Registers used:
 12854 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12855 ;; Tracked objects:
 12856 ;;		On entry : 0/0
 12857 ;;		On exit  : 0/0
 12858 ;;		Unchanged: 0/0
 12859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12862 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12863 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12864 ;;Total ram usage:        1 bytes
 12865 ;; Hardware stack levels used:    1
 12866 ;; Hardware stack levels required when called:    7
 12867 ;; This function calls:
 12868 ;;		Nothing
 12869 ;; This function is called by:
 12870 ;;		_main
 12871 ;; This function uses a non-reentrant model
 12872 ;;
 12873                           
 12874                           	psect	text61
 12875  015206                     __ptext61:
 12876                           	opt stack 0
 12877  015206                     _InitADC:
 12878                           	opt stack 23
 12879                           
 12880                           ;dans.c: 28: ADCON1 = 0b10101101;
 12881                           
 12882                           ;incstack = 0
 12883  015206  0EAD               	movlw	173
 12884  015208  6EC1               	movwf	4033,c	;volatile
 12885                           
 12886                           ;dans.c: 29: for (thisReading = 0; thisReading < numReadings; thisReading++) {
 12887  01520A  0E00               	movlw	0
 12888  01520C  0101               	movlb	1	; () banked
 12889  01520E  6F37               	movwf	(_thisReading+1)& (0+255),b
 12890  015210  0E00               	movlw	0
 12891  015212  6F36               	movwf	_thisReading& (0+255),b
 12892  015214  D010               	goto	l2297
 12893  015216                     
 12894                           ;dans.c: 30: readings[thisReading] = 0;
 12895                           
 12896                           ; BSR set to: 1
 12897  015216  90D8               	bcf	status,0,c
 12898  015218  0101               	movlb	1	; () banked
 12899  01521A  3536               	rlcf	_thisReading& (0+255),w,b
 12900  01521C  6ED9               	movwf	fsr2l,c
 12901  01521E  3537               	rlcf	(_thisReading+1)& (0+255),w,b
 12902  015220  6EDA               	movwf	fsr2h,c
 12903  015222  0E6E               	movlw	low _readings
 12904  015224  26D9               	addwf	fsr2l,f,c
 12905  015226  0E02               	movlw	high _readings
 12906  015228  22DA               	addwfc	fsr2h,f,c
 12907  01522A  0E00               	movlw	0
 12908  01522C  6EDE               	movwf	postinc2,c
 12909  01522E  0E00               	movlw	0
 12910  015230  6EDD               	movwf	postdec2,c
 12911                           
 12912                           ; BSR set to: 1
 12913  015232  4B36               	infsnz	_thisReading& (0+255),f,b
 12914  015234  2B37               	incf	(_thisReading+1)& (0+255),f,b
 12915  015236                     l2297:
 12916                           
 12917                           ; BSR set to: 1
 12918                           
 12919                           ; BSR set to: 1
 12920  015236  5047               	movf	_numReadings,w,c
 12921  015238  5D36               	subwf	_thisReading& (0+255),w,b
 12922  01523A  5137               	movf	(_thisReading+1)& (0+255),w,b
 12923  01523C  0A80               	xorlw	128
 12924  01523E  0100               	movlb	0	; () banked
 12925  015240  6F60               	movwf	??_InitADC& (0+255),b
 12926  015242  5048               	movf	_numReadings+1,w,c
 12927  015244  0A80               	xorlw	128
 12928  015246  5960               	subwfb	??_InitADC& (0+255),w,b
 12929  015248  B0D8               	btfsc	status,0,c
 12930  01524A  0012               	return	
 12931  01524C  D7E4               	goto	l2298
 12932  01524E                     __end_of_InitADC:
 12933                           	opt stack 0
 12934                           tosu	equ	0xFFF
 12935                           tosh	equ	0xFFE
 12936                           tosl	equ	0xFFD
 12937                           pclath	equ	0xFFA
 12938                           tblptru	equ	0xFF8
 12939                           tblptrh	equ	0xFF7
 12940                           tblptrl	equ	0xFF6
 12941                           tablat	equ	0xFF5
 12942                           prodh	equ	0xFF4
 12943                           prodl	equ	0xFF3
 12944                           intcon	equ	0xFF2
 12945                           postinc0	equ	0xFEE
 12946                           wreg	equ	0xFE8
 12947                           postdec1	equ	0xFE5
 12948                           fsr1h	equ	0xFE2
 12949                           fsr1l	equ	0xFE1
 12950                           indf2	equ	0xFDF
 12951                           postinc2	equ	0xFDE
 12952                           postdec2	equ	0xFDD
 12953                           plusw2	equ	0xFDB
 12954                           fsr2h	equ	0xFDA
 12955                           fsr2l	equ	0xFD9
 12956                           status	equ	0xFD8
 12957                           
 12958 ;; *************** function _ISR_Enable *****************
 12959 ;; Defined at:
 12960 ;;		line 27 in file "Library/ISR.c"
 12961 ;; Parameters:    Size  Location     Type
 12962 ;;		None
 12963 ;; Auto vars:     Size  Location     Type
 12964 ;;		None
 12965 ;; Return value:  Size  Location     Type
 12966 ;;                  1    wreg      void 
 12967 ;; Registers used:
 12968 ;;		None
 12969 ;; Tracked objects:
 12970 ;;		On entry : 0/0
 12971 ;;		On exit  : 0/0
 12972 ;;		Unchanged: 0/0
 12973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12978 ;;Total ram usage:        0 bytes
 12979 ;; Hardware stack levels used:    1
 12980 ;; Hardware stack levels required when called:    7
 12981 ;; This function calls:
 12982 ;;		Nothing
 12983 ;; This function is called by:
 12984 ;;		_main
 12985 ;; This function uses a non-reentrant model
 12986 ;;
 12987                           
 12988                           	psect	text62
 12989  015B18                     __ptext62:
 12990                           	opt stack 0
 12991  015B18                     _ISR_Enable:
 12992                           	opt stack 23
 12993                           
 12994                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 12995                           
 12996                           ; BSR set to: 0
 12997                           ;incstack = 0
 12998  015B18  8CF2               	bsf	intcon,6,c	;volatile
 12999                           
 13000                           ;ISR.c: 30: INTCONbits.GIE = 1;
 13001  015B1A  8EF2               	bsf	intcon,7,c	;volatile
 13002                           
 13003                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 13004  015B1C  88F2               	bsf	intcon,4,c	;volatile
 13005                           
 13006                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 13007  015B1E  92F2               	bcf	intcon,1,c	;volatile
 13008  015B20  0012               	return		;funcret
 13009  015B22                     __end_of_ISR_Enable:
 13010                           	opt stack 0
 13011                           tosu	equ	0xFFF
 13012                           tosh	equ	0xFFE
 13013                           tosl	equ	0xFFD
 13014                           pclath	equ	0xFFA
 13015                           tblptru	equ	0xFF8
 13016                           tblptrh	equ	0xFF7
 13017                           tblptrl	equ	0xFF6
 13018                           tablat	equ	0xFF5
 13019                           prodh	equ	0xFF4
 13020                           prodl	equ	0xFF3
 13021                           intcon	equ	0xFF2
 13022                           postinc0	equ	0xFEE
 13023                           wreg	equ	0xFE8
 13024                           postdec1	equ	0xFE5
 13025                           fsr1h	equ	0xFE2
 13026                           fsr1l	equ	0xFE1
 13027                           indf2	equ	0xFDF
 13028                           postinc2	equ	0xFDE
 13029                           postdec2	equ	0xFDD
 13030                           plusw2	equ	0xFDB
 13031                           fsr2h	equ	0xFDA
 13032                           fsr2l	equ	0xFD9
 13033                           status	equ	0xFD8
 13034                           
 13035 ;; *************** function _HMI_Poll *****************
 13036 ;; Defined at:
 13037 ;;		line 252 in file "HMI.c"
 13038 ;; Parameters:    Size  Location     Type
 13039 ;;		None
 13040 ;; Auto vars:     Size  Location     Type
 13041 ;;		None
 13042 ;; Return value:  Size  Location     Type
 13043 ;;                  1    wreg      void 
 13044 ;; Registers used:
 13045 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 13046 ;; Tracked objects:
 13047 ;;		On entry : 0/0
 13048 ;;		On exit  : 0/0
 13049 ;;		Unchanged: 0/0
 13050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13055 ;;Total ram usage:        0 bytes
 13056 ;; Hardware stack levels used:    1
 13057 ;; Hardware stack levels required when called:   15
 13058 ;; This function calls:
 13059 ;;		_Button_Poll
 13060 ;; This function is called by:
 13061 ;;		_main
 13062 ;; This function uses a non-reentrant model
 13063 ;;
 13064                           
 13065                           	psect	text63
 13066  014C80                     __ptext63:
 13067                           	opt stack 0
 13068  014C80                     _HMI_Poll:
 13069                           	opt stack 15
 13070                           
 13071                           ;HMI.c: 254: TRISE = 0xFC;
 13072                           
 13073                           ;incstack = 0
 13074  014C80  0EFC               	movlw	252
 13075  014C82  6E96               	movwf	3990,c	;volatile
 13076                           
 13077                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 13078  014C84  0E7C               	movlw	low (_HMIBoard+48)
 13079  014C86  0100               	movlb	0	; () banked
 13080  014C88  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 13081  014C8A  0E01               	movlw	high (_HMIBoard+48)
 13082  014C8C  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 13083  014C8E  0E01               	movlw	1
 13084  014C90  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 13085  014C92  EC27  F099         	call	_Button_Poll	;wreg free
 13086                           
 13087                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 13088  014C96  0E5E               	movlw	low (_HMIBoard+18)
 13089  014C98  0100               	movlb	0	; () banked
 13090  014C9A  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 13091  014C9C  0E01               	movlw	high (_HMIBoard+18)
 13092  014C9E  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 13093  014CA0  0E01               	movlw	1
 13094  014CA2  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 13095  014CA4  EC27  F099         	call	_Button_Poll	;wreg free
 13096                           
 13097                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 13098  014CA8  0E54               	movlw	low (_HMIBoard+8)
 13099  014CAA  0100               	movlb	0	; () banked
 13100  014CAC  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 13101  014CAE  0E01               	movlw	high (_HMIBoard+8)
 13102  014CB0  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 13103  014CB2  0E01               	movlw	1
 13104  014CB4  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 13105  014CB6  EC27  F099         	call	_Button_Poll	;wreg free
 13106                           
 13107                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 13108  014CBA  0E68               	movlw	low (_HMIBoard+28)
 13109  014CBC  0100               	movlb	0	; () banked
 13110  014CBE  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 13111  014CC0  0E01               	movlw	high (_HMIBoard+28)
 13112  014CC2  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 13113  014CC4  0E01               	movlw	1
 13114  014CC6  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 13115  014CC8  EC27  F099         	call	_Button_Poll	;wreg free
 13116                           
 13117                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 13118  014CCC  0E72               	movlw	low (_HMIBoard+38)
 13119  014CCE  0100               	movlb	0	; () banked
 13120  014CD0  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 13121  014CD2  0E01               	movlw	high (_HMIBoard+38)
 13122  014CD4  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 13123  014CD6  0E01               	movlw	1
 13124  014CD8  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 13125  014CDA  EC27  F099         	call	_Button_Poll	;wreg free
 13126  014CDE  0012               	return		;funcret
 13127  014CE0                     __end_of_HMI_Poll:
 13128                           	opt stack 0
 13129                           tosu	equ	0xFFF
 13130                           tosh	equ	0xFFE
 13131                           tosl	equ	0xFFD
 13132                           pclath	equ	0xFFA
 13133                           tblptru	equ	0xFF8
 13134                           tblptrh	equ	0xFF7
 13135                           tblptrl	equ	0xFF6
 13136                           tablat	equ	0xFF5
 13137                           prodh	equ	0xFF4
 13138                           prodl	equ	0xFF3
 13139                           intcon	equ	0xFF2
 13140                           postinc0	equ	0xFEE
 13141                           wreg	equ	0xFE8
 13142                           postdec1	equ	0xFE5
 13143                           fsr1h	equ	0xFE2
 13144                           fsr1l	equ	0xFE1
 13145                           indf2	equ	0xFDF
 13146                           postinc2	equ	0xFDE
 13147                           postdec2	equ	0xFDD
 13148                           plusw2	equ	0xFDB
 13149                           fsr2h	equ	0xFDA
 13150                           fsr2l	equ	0xFD9
 13151                           status	equ	0xFD8
 13152                           
 13153 ;; *************** function _Button_Poll *****************
 13154 ;; Defined at:
 13155 ;;		line 57 in file "Library/Button.c"
 13156 ;; Parameters:    Size  Location     Type
 13157 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 13158 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 13159 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 13160 ;; Auto vars:     Size  Location     Type
 13161 ;;  Pin             1   35[BANK0 ] unsigned char 
 13162 ;; Return value:  Size  Location     Type
 13163 ;;                  1    wreg      unsigned char 
 13164 ;; Registers used:
 13165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 13166 ;; Tracked objects:
 13167 ;;		On entry : 0/0
 13168 ;;		On exit  : 0/0
 13169 ;;		Unchanged: 0/0
 13170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13171 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13173 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13174 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13175 ;;Total ram usage:        9 bytes
 13176 ;; Hardware stack levels used:    1
 13177 ;; Hardware stack levels required when called:   14
 13178 ;; This function calls:
 13179 ;;		_Event_DIPSwitch
 13180 ;;		_Event_NULL
 13181 ;;		_Event_TestButton
 13182 ;;		_HMI_DIPSwitch
 13183 ;;		_HMI_DownSwitch
 13184 ;;		_HMI_LeftSwitch
 13185 ;;		_HMI_RightSwitch
 13186 ;;		_HMI_UpSwitch
 13187 ;;		_MXK_DIPSwitch
 13188 ;;		_MXK_TestButton
 13189 ;; This function is called by:
 13190 ;;		_HMI_Poll
 13191 ;;		_MXK_Poll
 13192 ;; This function uses a non-reentrant model
 13193 ;;
 13194                           
 13195                           	psect	text64
 13196  01324E                     __ptext64:
 13197                           	opt stack 0
 13198  01324E                     _Button_Poll:
 13199                           	opt stack 15
 13200                           
 13201                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 13202                           
 13203                           ;incstack = 0
 13204  01324E  0100               	movlb	0	; () banked
 13205  013250  EE20 F007          	lfsr	2,7
 13206  013254  517B               	movf	Button_Poll@pButton& (0+255),w,b
 13207  013256  26D9               	addwf	fsr2l,f,c
 13208  013258  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 13209  01325A  22DA               	addwfc	fsr2h,f,c
 13210  01325C  D801               	call	u12348
 13211  01325E  D00A               	goto	u12349
 13212  013260                     u12348:
 13213  013260  0005               	push	
 13214  013262  6EFA               	movwf	pclath,c
 13215  013264  50DE               	movf	postinc2,w,c
 13216  013266  6EFD               	movwf	tosl,c
 13217  013268  50DE               	movf	postinc2,w,c
 13218  01326A  6EFE               	movwf	tosh,c
 13219  01326C  50DE               	movf	postinc2,w,c
 13220  01326E  6EFF               	movwf	tosu,c
 13221  013270  50FA               	movf	pclath,w,c
 13222  013272  0012               	return		;indir
 13223  013274                     u12349:
 13224  013274  0100               	movlb	0	; () banked
 13225  013276  6F83               	movwf	Button_Poll@Pin& (0+255),b
 13226                           
 13227                           ; BSR set to: 0
 13228                           ;Button.c: 61: if (pButton->mState == Pin)
 13229  013278  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 13230  01327C  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 13231  013280  5183               	movf	Button_Poll@Pin& (0+255),w,b
 13232  013282  18DE               	xorwf	postinc2,w,c
 13233  013284  A4D8               	btfss	status,2,c
 13234  013286  D01C               	goto	l11
 13235                           
 13236                           ; BSR set to: 0
 13237                           ;Button.c: 62: {
 13238                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 13239  013288  EE20 F001          	lfsr	2,1
 13240  01328C  517B               	movf	Button_Poll@pButton& (0+255),w,b
 13241  01328E  26D9               	addwf	fsr2l,f,c
 13242  013290  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 13243  013292  22DA               	addwfc	fsr2h,f,c
 13244  013294  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 13245  013296  5CDE               	subwf	postinc2,w,c
 13246  013298  B0D8               	btfsc	status,0,c
 13247  01329A  D009               	goto	l12
 13248                           
 13249                           ; BSR set to: 0
 13250                           ;Button.c: 66: pButton->mCount = 0;
 13251  01329C  EE20 F001          	lfsr	2,1
 13252  0132A0  517B               	movf	Button_Poll@pButton& (0+255),w,b
 13253  0132A2  26D9               	addwf	fsr2l,f,c
 13254  0132A4  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 13255  0132A6  22DA               	addwfc	fsr2h,f,c
 13256  0132A8  0E00               	movlw	0
 13257  0132AA  6EDF               	movwf	indf2,c
 13258  0132AC  0012               	return	
 13259  0132AE                     l12:
 13260                           
 13261                           ; BSR set to: 0
 13262                           ;Button.c: 67: else
 13263                           ;Button.c: 68: pButton->mCount -= pIncrement;
 13264                           
 13265                           ; BSR set to: 0
 13266  0132AE  EE20 F001          	lfsr	2,1
 13267  0132B2  517B               	movf	Button_Poll@pButton& (0+255),w,b
 13268  0132B4  26D9               	addwf	fsr2l,f,c
 13269  0132B6  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 13270  0132B8  22DA               	addwfc	fsr2h,f,c
 13271  0132BA  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 13272  0132BC  5EDF               	subwf	indf2,f,c
 13273                           
 13274                           ; BSR set to: 0
 13275                           ;Button.c: 69: }
 13276  0132BE  0012               	return	
 13277  0132C0                     l11:
 13278                           
 13279                           ; BSR set to: 0
 13280                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 13281                           
 13282                           ; BSR set to: 0
 13283  0132C0  EE20 F001          	lfsr	2,1
 13284  0132C4  517B               	movf	Button_Poll@pButton& (0+255),w,b
 13285  0132C6  26D9               	addwf	fsr2l,f,c
 13286  0132C8  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 13287  0132CA  22DA               	addwfc	fsr2h,f,c
 13288  0132CC  50DF               	movf	indf2,w,c
 13289  0132CE  6F7E               	movwf	??_Button_Poll& (0+255),b
 13290  0132D0  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 13291  0132D2  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 13292  0132D4  277E               	addwf	??_Button_Poll& (0+255),f,b
 13293  0132D6  0E00               	movlw	0
 13294  0132D8  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 13295  0132DA  EE20 F001          	lfsr	2,1
 13296  0132DE  517B               	movf	Button_Poll@pButton& (0+255),w,b
 13297  0132E0  26D9               	addwf	fsr2l,f,c
 13298  0132E2  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 13299  0132E4  22DA               	addwfc	fsr2h,f,c
 13300  0132E6  50DF               	movf	indf2,w,c
 13301  0132E8  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 13302  0132EA  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 13303  0132EC  517E               	movf	??_Button_Poll& (0+255),w,b
 13304  0132EE  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 13305  0132F0  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 13306  0132F2  0A80               	xorlw	128
 13307  0132F4  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 13308  0132F6  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 13309  0132F8  0A80               	xorlw	128
 13310  0132FA  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 13311  0132FC  B0D8               	btfsc	status,0,c
 13312  0132FE  0012               	return	
 13313                           
 13314                           ; BSR set to: 0
 13315                           ;Button.c: 73: {
 13316                           ;Button.c: 75: pButton->mCount += pIncrement;
 13317  013300  EE20 F001          	lfsr	2,1
 13318  013304  517B               	movf	Button_Poll@pButton& (0+255),w,b
 13319  013306  26D9               	addwf	fsr2l,f,c
 13320  013308  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 13321  01330A  22DA               	addwfc	fsr2h,f,c
 13322  01330C  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 13323  01330E  26DF               	addwf	indf2,f,c
 13324                           
 13325                           ; BSR set to: 0
 13326                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 13327  013310  EE20 F002          	lfsr	2,2
 13328  013314  517B               	movf	Button_Poll@pButton& (0+255),w,b
 13329  013316  26D9               	addwf	fsr2l,f,c
 13330  013318  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 13331  01331A  22DA               	addwfc	fsr2h,f,c
 13332  01331C  EE10 F001          	lfsr	1,1
 13333  013320  517B               	movf	Button_Poll@pButton& (0+255),w,b
 13334  013322  26E1               	addwf	fsr1l,f,c
 13335  013324  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 13336  013326  22E2               	addwfc	fsr1h,f,c
 13337  013328  50E7               	movf	indf1,w,c
 13338  01332A  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 13339  01332C  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 13340  01332E  50DE               	movf	postinc2,w,c
 13341  013330  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 13342  013332  50DE               	movf	postinc2,w,c
 13343  013334  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 13344  013336  A0D8               	btfss	status,0,c
 13345  013338  0012               	return	
 13346                           
 13347                           ; BSR set to: 0
 13348                           ;Button.c: 77: {
 13349                           ;Button.c: 79: pButton->mState = Pin;
 13350  01333A  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 13351  01333E  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 13352  013342  C083  FFDF         	movff	Button_Poll@Pin,indf2
 13353                           
 13354                           ; BSR set to: 0
 13355                           ;Button.c: 80: pButton->mCount = 0;
 13356  013346  EE20 F001          	lfsr	2,1
 13357  01334A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 13358  01334C  26D9               	addwf	fsr2l,f,c
 13359  01334E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 13360  013350  22DA               	addwfc	fsr2h,f,c
 13361  013352  0E00               	movlw	0
 13362  013354  6EDF               	movwf	indf2,c
 13363                           
 13364                           ; BSR set to: 0
 13365                           ;Button.c: 83: pButton->mFunction(Pin);
 13366  013356  EE20 F004          	lfsr	2,4
 13367  01335A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 13368  01335C  26D9               	addwf	fsr2l,f,c
 13369  01335E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 13370  013360  22DA               	addwfc	fsr2h,f,c
 13371  013362  D801               	call	u12398
 13372  013364  0012               	return	
 13373  013366                     u12398:
 13374  013366  0005               	push	
 13375  013368  6EFA               	movwf	pclath,c
 13376  01336A  50DE               	movf	postinc2,w,c
 13377  01336C  6EFD               	movwf	tosl,c
 13378  01336E  50DE               	movf	postinc2,w,c
 13379  013370  6EFE               	movwf	tosh,c
 13380  013372  50DE               	movf	postinc2,w,c
 13381  013374  6EFF               	movwf	tosu,c
 13382  013376  50FA               	movf	pclath,w,c
 13383  013378  5183               	movf	Button_Poll@Pin& (0+255),w,b
 13384  01337A  0012               	return		;indir
 13385  01337C                     __end_of_Button_Poll:
 13386                           	opt stack 0
 13387                           tosu	equ	0xFFF
 13388                           tosh	equ	0xFFE
 13389                           tosl	equ	0xFFD
 13390                           pclath	equ	0xFFA
 13391                           tblptru	equ	0xFF8
 13392                           tblptrh	equ	0xFF7
 13393                           tblptrl	equ	0xFF6
 13394                           tablat	equ	0xFF5
 13395                           prodh	equ	0xFF4
 13396                           prodl	equ	0xFF3
 13397                           intcon	equ	0xFF2
 13398                           postinc0	equ	0xFEE
 13399                           wreg	equ	0xFE8
 13400                           indf1	equ	0xFE7
 13401                           postdec1	equ	0xFE5
 13402                           fsr1h	equ	0xFE2
 13403                           fsr1l	equ	0xFE1
 13404                           indf2	equ	0xFDF
 13405                           postinc2	equ	0xFDE
 13406                           postdec2	equ	0xFDD
 13407                           plusw2	equ	0xFDB
 13408                           fsr2h	equ	0xFDA
 13409                           fsr2l	equ	0xFD9
 13410                           status	equ	0xFD8
 13411                           
 13412 ;; *************** function _MXK_DIPSwitch *****************
 13413 ;; Defined at:
 13414 ;;		line 24 in file "Library/MXK.c"
 13415 ;; Parameters:    Size  Location     Type
 13416 ;;		None
 13417 ;; Auto vars:     Size  Location     Type
 13418 ;;		None
 13419 ;; Return value:  Size  Location     Type
 13420 ;;                  1    wreg      unsigned char 
 13421 ;; Registers used:
 13422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13423 ;; Tracked objects:
 13424 ;;		On entry : 0/0
 13425 ;;		On exit  : 0/0
 13426 ;;		Unchanged: 0/0
 13427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13432 ;;Total ram usage:        0 bytes
 13433 ;; Hardware stack levels used:    1
 13434 ;; Hardware stack levels required when called:    8
 13435 ;; This function calls:
 13436 ;;		_Port_GetQuad
 13437 ;; This function is called by:
 13438 ;;		_FunctInitButton
 13439 ;;		_Button_Poll
 13440 ;;		_main
 13441 ;; This function uses a non-reentrant model
 13442 ;;
 13443                           
 13444                           	psect	text65
 13445  015A0E                     __ptext65:
 13446                           	opt stack 0
 13447  015A0E                     _MXK_DIPSwitch:
 13448                           	opt stack 22
 13449                           
 13450                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 13451                           
 13452                           ;incstack = 0
 13453  015A0E  0E9B               	movlw	low _PortD
 13454  015A10  0100               	movlb	0	; () banked
 13455  015A12  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 13456  015A14  0E01               	movlw	high _PortD
 13457  015A16  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 13458  015A18  0E00               	movlw	0
 13459  015A1A  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 13460  015A1C  ECF0  F0A9         	call	_Port_GetQuad
 13461  015A20  0012               	return	
 13462  015A22                     __end_of_MXK_DIPSwitch:
 13463                           	opt stack 0
 13464                           tosu	equ	0xFFF
 13465                           tosh	equ	0xFFE
 13466                           tosl	equ	0xFFD
 13467                           pclath	equ	0xFFA
 13468                           tblptru	equ	0xFF8
 13469                           tblptrh	equ	0xFF7
 13470                           tblptrl	equ	0xFF6
 13471                           tablat	equ	0xFF5
 13472                           prodh	equ	0xFF4
 13473                           prodl	equ	0xFF3
 13474                           intcon	equ	0xFF2
 13475                           postinc0	equ	0xFEE
 13476                           wreg	equ	0xFE8
 13477                           indf1	equ	0xFE7
 13478                           postdec1	equ	0xFE5
 13479                           fsr1h	equ	0xFE2
 13480                           fsr1l	equ	0xFE1
 13481                           indf2	equ	0xFDF
 13482                           postinc2	equ	0xFDE
 13483                           postdec2	equ	0xFDD
 13484                           plusw2	equ	0xFDB
 13485                           fsr2h	equ	0xFDA
 13486                           fsr2l	equ	0xFD9
 13487                           status	equ	0xFD8
 13488                           
 13489 ;; *************** function _HMI_DIPSwitch *****************
 13490 ;; Defined at:
 13491 ;;		line 47 in file "HMI.c"
 13492 ;; Parameters:    Size  Location     Type
 13493 ;;		None
 13494 ;; Auto vars:     Size  Location     Type
 13495 ;;		None
 13496 ;; Return value:  Size  Location     Type
 13497 ;;                  1    wreg      unsigned char 
 13498 ;; Registers used:
 13499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13500 ;; Tracked objects:
 13501 ;;		On entry : 0/0
 13502 ;;		On exit  : 0/0
 13503 ;;		Unchanged: 0/0
 13504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13509 ;;Total ram usage:        0 bytes
 13510 ;; Hardware stack levels used:    1
 13511 ;; Hardware stack levels required when called:    8
 13512 ;; This function calls:
 13513 ;;		_Port_GetQuad
 13514 ;; This function is called by:
 13515 ;;		_HMI_Init
 13516 ;;		_Button_Poll
 13517 ;;		_main
 13518 ;; This function uses a non-reentrant model
 13519 ;;
 13520                           
 13521                           	psect	text66
 13522  015A22                     __ptext66:
 13523                           	opt stack 0
 13524  015A22                     _HMI_DIPSwitch:
 13525                           	opt stack 20
 13526                           
 13527                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 13528                           
 13529                           ;incstack = 0
 13530  015A22  0E91               	movlw	low _PortE
 13531  015A24  0100               	movlb	0	; () banked
 13532  015A26  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 13533  015A28  0E01               	movlw	high _PortE
 13534  015A2A  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 13535  015A2C  0E00               	movlw	0
 13536  015A2E  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 13537  015A30  ECF0  F0A9         	call	_Port_GetQuad	;wreg free
 13538  015A34  0012               	return	
 13539  015A36                     __end_of_HMI_DIPSwitch:
 13540                           	opt stack 0
 13541                           tosu	equ	0xFFF
 13542                           tosh	equ	0xFFE
 13543                           tosl	equ	0xFFD
 13544                           pclath	equ	0xFFA
 13545                           tblptru	equ	0xFF8
 13546                           tblptrh	equ	0xFF7
 13547                           tblptrl	equ	0xFF6
 13548                           tablat	equ	0xFF5
 13549                           prodh	equ	0xFF4
 13550                           prodl	equ	0xFF3
 13551                           intcon	equ	0xFF2
 13552                           postinc0	equ	0xFEE
 13553                           wreg	equ	0xFE8
 13554                           indf1	equ	0xFE7
 13555                           postdec1	equ	0xFE5
 13556                           fsr1h	equ	0xFE2
 13557                           fsr1l	equ	0xFE1
 13558                           indf2	equ	0xFDF
 13559                           postinc2	equ	0xFDE
 13560                           postdec2	equ	0xFDD
 13561                           plusw2	equ	0xFDB
 13562                           fsr2h	equ	0xFDA
 13563                           fsr2l	equ	0xFD9
 13564                           status	equ	0xFD8
 13565                           
 13566 ;; *************** function _HMI_DownSwitch *****************
 13567 ;; Defined at:
 13568 ;;		line 42 in file "HMI.c"
 13569 ;; Parameters:    Size  Location     Type
 13570 ;;		None
 13571 ;; Auto vars:     Size  Location     Type
 13572 ;;		None
 13573 ;; Return value:  Size  Location     Type
 13574 ;;                  1    wreg      unsigned char 
 13575 ;; Registers used:
 13576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13577 ;; Tracked objects:
 13578 ;;		On entry : 0/0
 13579 ;;		On exit  : 0/0
 13580 ;;		Unchanged: 0/0
 13581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13586 ;;Total ram usage:        0 bytes
 13587 ;; Hardware stack levels used:    1
 13588 ;; Hardware stack levels required when called:    8
 13589 ;; This function calls:
 13590 ;;		_Port_GetPin
 13591 ;; This function is called by:
 13592 ;;		_HMI_Init
 13593 ;;		_Button_Poll
 13594 ;;		_main
 13595 ;; This function uses a non-reentrant model
 13596 ;;
 13597                           
 13598                           	psect	text67
 13599  015A36                     __ptext67:
 13600                           	opt stack 0
 13601  015A36                     _HMI_DownSwitch:
 13602                           	opt stack 20
 13603                           
 13604                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 13605                           
 13606                           ;incstack = 0
 13607  015A36  0E91               	movlw	low _PortE
 13608  015A38  0100               	movlb	0	; () banked
 13609  015A3A  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 13610  015A3C  0E01               	movlw	high _PortE
 13611  015A3E  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13612  015A40  0E06               	movlw	6
 13613  015A42  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 13614  015A44  EC4A  F0AA         	call	_Port_GetPin	;wreg free
 13615  015A48  0012               	return	
 13616  015A4A                     __end_of_HMI_DownSwitch:
 13617                           	opt stack 0
 13618                           tosu	equ	0xFFF
 13619                           tosh	equ	0xFFE
 13620                           tosl	equ	0xFFD
 13621                           pclath	equ	0xFFA
 13622                           tblptru	equ	0xFF8
 13623                           tblptrh	equ	0xFF7
 13624                           tblptrl	equ	0xFF6
 13625                           tablat	equ	0xFF5
 13626                           prodh	equ	0xFF4
 13627                           prodl	equ	0xFF3
 13628                           intcon	equ	0xFF2
 13629                           postinc0	equ	0xFEE
 13630                           wreg	equ	0xFE8
 13631                           indf1	equ	0xFE7
 13632                           postdec1	equ	0xFE5
 13633                           fsr1h	equ	0xFE2
 13634                           fsr1l	equ	0xFE1
 13635                           indf2	equ	0xFDF
 13636                           postinc2	equ	0xFDE
 13637                           postdec2	equ	0xFDD
 13638                           plusw2	equ	0xFDB
 13639                           fsr2h	equ	0xFDA
 13640                           fsr2l	equ	0xFD9
 13641                           status	equ	0xFD8
 13642                           
 13643 ;; *************** function _HMI_UpSwitch *****************
 13644 ;; Defined at:
 13645 ;;		line 37 in file "HMI.c"
 13646 ;; Parameters:    Size  Location     Type
 13647 ;;		None
 13648 ;; Auto vars:     Size  Location     Type
 13649 ;;		None
 13650 ;; Return value:  Size  Location     Type
 13651 ;;                  1    wreg      unsigned char 
 13652 ;; Registers used:
 13653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13654 ;; Tracked objects:
 13655 ;;		On entry : 0/0
 13656 ;;		On exit  : 0/0
 13657 ;;		Unchanged: 0/0
 13658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13663 ;;Total ram usage:        0 bytes
 13664 ;; Hardware stack levels used:    1
 13665 ;; Hardware stack levels required when called:    8
 13666 ;; This function calls:
 13667 ;;		_Port_GetPin
 13668 ;; This function is called by:
 13669 ;;		_HMI_Init
 13670 ;;		_Button_Poll
 13671 ;;		_main
 13672 ;; This function uses a non-reentrant model
 13673 ;;
 13674                           
 13675                           	psect	text68
 13676  015A4A                     __ptext68:
 13677                           	opt stack 0
 13678  015A4A                     _HMI_UpSwitch:
 13679                           	opt stack 22
 13680                           
 13681                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 13682                           
 13683                           ;incstack = 0
 13684  015A4A  0E91               	movlw	low _PortE
 13685  015A4C  0100               	movlb	0	; () banked
 13686  015A4E  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 13687  015A50  0E01               	movlw	high _PortE
 13688  015A52  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13689  015A54  0E07               	movlw	7
 13690  015A56  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 13691  015A58  EC4A  F0AA         	call	_Port_GetPin	;wreg free
 13692  015A5C  0012               	return	
 13693  015A5E                     __end_of_HMI_UpSwitch:
 13694                           	opt stack 0
 13695                           tosu	equ	0xFFF
 13696                           tosh	equ	0xFFE
 13697                           tosl	equ	0xFFD
 13698                           pclath	equ	0xFFA
 13699                           tblptru	equ	0xFF8
 13700                           tblptrh	equ	0xFF7
 13701                           tblptrl	equ	0xFF6
 13702                           tablat	equ	0xFF5
 13703                           prodh	equ	0xFF4
 13704                           prodl	equ	0xFF3
 13705                           intcon	equ	0xFF2
 13706                           postinc0	equ	0xFEE
 13707                           wreg	equ	0xFE8
 13708                           indf1	equ	0xFE7
 13709                           postdec1	equ	0xFE5
 13710                           fsr1h	equ	0xFE2
 13711                           fsr1l	equ	0xFE1
 13712                           indf2	equ	0xFDF
 13713                           postinc2	equ	0xFDE
 13714                           postdec2	equ	0xFDD
 13715                           plusw2	equ	0xFDB
 13716                           fsr2h	equ	0xFDA
 13717                           fsr2l	equ	0xFD9
 13718                           status	equ	0xFD8
 13719                           
 13720 ;; *************** function _HMI_RightSwitch *****************
 13721 ;; Defined at:
 13722 ;;		line 32 in file "HMI.c"
 13723 ;; Parameters:    Size  Location     Type
 13724 ;;		None
 13725 ;; Auto vars:     Size  Location     Type
 13726 ;;		None
 13727 ;; Return value:  Size  Location     Type
 13728 ;;                  1    wreg      unsigned char 
 13729 ;; Registers used:
 13730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13731 ;; Tracked objects:
 13732 ;;		On entry : 0/0
 13733 ;;		On exit  : 0/0
 13734 ;;		Unchanged: 0/0
 13735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13740 ;;Total ram usage:        0 bytes
 13741 ;; Hardware stack levels used:    1
 13742 ;; Hardware stack levels required when called:    8
 13743 ;; This function calls:
 13744 ;;		_Port_GetPin
 13745 ;; This function is called by:
 13746 ;;		_HMI_Init
 13747 ;;		_Button_Poll
 13748 ;;		_main
 13749 ;; This function uses a non-reentrant model
 13750 ;;
 13751                           
 13752                           	psect	text69
 13753  015A5E                     __ptext69:
 13754                           	opt stack 0
 13755  015A5E                     _HMI_RightSwitch:
 13756                           	opt stack 22
 13757                           
 13758                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 13759                           
 13760                           ;incstack = 0
 13761  015A5E  0E91               	movlw	low _PortE
 13762  015A60  0100               	movlb	0	; () banked
 13763  015A62  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 13764  015A64  0E01               	movlw	high _PortE
 13765  015A66  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13766  015A68  0E04               	movlw	4
 13767  015A6A  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 13768  015A6C  EC4A  F0AA         	call	_Port_GetPin	;wreg free
 13769  015A70  0012               	return	
 13770  015A72                     __end_of_HMI_RightSwitch:
 13771                           	opt stack 0
 13772                           tosu	equ	0xFFF
 13773                           tosh	equ	0xFFE
 13774                           tosl	equ	0xFFD
 13775                           pclath	equ	0xFFA
 13776                           tblptru	equ	0xFF8
 13777                           tblptrh	equ	0xFF7
 13778                           tblptrl	equ	0xFF6
 13779                           tablat	equ	0xFF5
 13780                           prodh	equ	0xFF4
 13781                           prodl	equ	0xFF3
 13782                           intcon	equ	0xFF2
 13783                           postinc0	equ	0xFEE
 13784                           wreg	equ	0xFE8
 13785                           indf1	equ	0xFE7
 13786                           postdec1	equ	0xFE5
 13787                           fsr1h	equ	0xFE2
 13788                           fsr1l	equ	0xFE1
 13789                           indf2	equ	0xFDF
 13790                           postinc2	equ	0xFDE
 13791                           postdec2	equ	0xFDD
 13792                           plusw2	equ	0xFDB
 13793                           fsr2h	equ	0xFDA
 13794                           fsr2l	equ	0xFD9
 13795                           status	equ	0xFD8
 13796                           
 13797 ;; *************** function _HMI_LeftSwitch *****************
 13798 ;; Defined at:
 13799 ;;		line 27 in file "HMI.c"
 13800 ;; Parameters:    Size  Location     Type
 13801 ;;		None
 13802 ;; Auto vars:     Size  Location     Type
 13803 ;;		None
 13804 ;; Return value:  Size  Location     Type
 13805 ;;                  1    wreg      unsigned char 
 13806 ;; Registers used:
 13807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13808 ;; Tracked objects:
 13809 ;;		On entry : 0/0
 13810 ;;		On exit  : 0/0
 13811 ;;		Unchanged: 0/0
 13812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13817 ;;Total ram usage:        0 bytes
 13818 ;; Hardware stack levels used:    1
 13819 ;; Hardware stack levels required when called:    8
 13820 ;; This function calls:
 13821 ;;		_Port_GetPin
 13822 ;; This function is called by:
 13823 ;;		_HMI_Init
 13824 ;;		_Button_Poll
 13825 ;;		_main
 13826 ;; This function uses a non-reentrant model
 13827 ;;
 13828                           
 13829                           	psect	text70
 13830  015A72                     __ptext70:
 13831                           	opt stack 0
 13832  015A72                     _HMI_LeftSwitch:
 13833                           	opt stack 20
 13834                           
 13835                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 13836                           
 13837                           ;incstack = 0
 13838  015A72  0E91               	movlw	low _PortE
 13839  015A74  0100               	movlb	0	; () banked
 13840  015A76  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 13841  015A78  0E01               	movlw	high _PortE
 13842  015A7A  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13843  015A7C  0E05               	movlw	5
 13844  015A7E  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 13845  015A80  EC4A  F0AA         	call	_Port_GetPin	;wreg free
 13846  015A84  0012               	return	
 13847  015A86                     __end_of_HMI_LeftSwitch:
 13848                           	opt stack 0
 13849                           tosu	equ	0xFFF
 13850                           tosh	equ	0xFFE
 13851                           tosl	equ	0xFFD
 13852                           pclath	equ	0xFFA
 13853                           tblptru	equ	0xFF8
 13854                           tblptrh	equ	0xFF7
 13855                           tblptrl	equ	0xFF6
 13856                           tablat	equ	0xFF5
 13857                           prodh	equ	0xFF4
 13858                           prodl	equ	0xFF3
 13859                           intcon	equ	0xFF2
 13860                           postinc0	equ	0xFEE
 13861                           wreg	equ	0xFE8
 13862                           indf1	equ	0xFE7
 13863                           postdec1	equ	0xFE5
 13864                           fsr1h	equ	0xFE2
 13865                           fsr1l	equ	0xFE1
 13866                           indf2	equ	0xFDF
 13867                           postinc2	equ	0xFDE
 13868                           postdec2	equ	0xFDD
 13869                           plusw2	equ	0xFDB
 13870                           fsr2h	equ	0xFDA
 13871                           fsr2l	equ	0xFD9
 13872                           status	equ	0xFD8
 13873                           
 13874 ;; *************** function _MXK_TestButton *****************
 13875 ;; Defined at:
 13876 ;;		line 14 in file "Library/MXK.c"
 13877 ;; Parameters:    Size  Location     Type
 13878 ;;		None
 13879 ;; Auto vars:     Size  Location     Type
 13880 ;;		None
 13881 ;; Return value:  Size  Location     Type
 13882 ;;                  1    wreg      unsigned char 
 13883 ;; Registers used:
 13884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13885 ;; Tracked objects:
 13886 ;;		On entry : 0/0
 13887 ;;		On exit  : 0/0
 13888 ;;		Unchanged: 0/0
 13889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13894 ;;Total ram usage:        0 bytes
 13895 ;; Hardware stack levels used:    1
 13896 ;; Hardware stack levels required when called:    8
 13897 ;; This function calls:
 13898 ;;		_Port_GetPin
 13899 ;; This function is called by:
 13900 ;;		_FunctInitButton
 13901 ;;		_Button_Poll
 13902 ;;		_main
 13903 ;; This function uses a non-reentrant model
 13904 ;;
 13905                           
 13906                           	psect	text71
 13907  015A86                     __ptext71:
 13908                           	opt stack 0
 13909  015A86                     _MXK_TestButton:
 13910                           	opt stack 22
 13911                           
 13912                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 13913                           
 13914                           ;incstack = 0
 13915  015A86  0EA5               	movlw	low _PortB
 13916  015A88  0100               	movlb	0	; () banked
 13917  015A8A  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 13918  015A8C  0E01               	movlw	high _PortB
 13919  015A8E  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13920  015A90  0E04               	movlw	4
 13921  015A92  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 13922  015A94  EC4A  F0AA         	call	_Port_GetPin	;wreg free
 13923  015A98  0012               	return	
 13924  015A9A                     __end_of_MXK_TestButton:
 13925                           	opt stack 0
 13926                           tosu	equ	0xFFF
 13927                           tosh	equ	0xFFE
 13928                           tosl	equ	0xFFD
 13929                           pclath	equ	0xFFA
 13930                           tblptru	equ	0xFF8
 13931                           tblptrh	equ	0xFF7
 13932                           tblptrl	equ	0xFF6
 13933                           tablat	equ	0xFF5
 13934                           prodh	equ	0xFF4
 13935                           prodl	equ	0xFF3
 13936                           intcon	equ	0xFF2
 13937                           postinc0	equ	0xFEE
 13938                           wreg	equ	0xFE8
 13939                           indf1	equ	0xFE7
 13940                           postdec1	equ	0xFE5
 13941                           fsr1h	equ	0xFE2
 13942                           fsr1l	equ	0xFE1
 13943                           indf2	equ	0xFDF
 13944                           postinc2	equ	0xFDE
 13945                           postdec2	equ	0xFDD
 13946                           plusw2	equ	0xFDB
 13947                           fsr2h	equ	0xFDA
 13948                           fsr2l	equ	0xFD9
 13949                           status	equ	0xFD8
 13950                           
 13951 ;; *************** function _Port_GetQuad *****************
 13952 ;; Defined at:
 13953 ;;		line 498 in file "Library/Port.c"
 13954 ;; Parameters:    Size  Location     Type
 13955 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 13956 ;;		 -> PortE(10), PortD(10), 
 13957 ;;  pQuad           1    2[BANK0 ] enum E6776
 13958 ;; Auto vars:     Size  Location     Type
 13959 ;;  Output          1    5[BANK0 ] unsigned char 
 13960 ;; Return value:  Size  Location     Type
 13961 ;;                  1    wreg      unsigned char 
 13962 ;; Registers used:
 13963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13964 ;; Tracked objects:
 13965 ;;		On entry : 0/0
 13966 ;;		On exit  : 0/0
 13967 ;;		Unchanged: 0/0
 13968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13969 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13971 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13972 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13973 ;;Total ram usage:        6 bytes
 13974 ;; Hardware stack levels used:    1
 13975 ;; Hardware stack levels required when called:    7
 13976 ;; This function calls:
 13977 ;;		Nothing
 13978 ;; This function is called by:
 13979 ;;		_HMI_DIPSwitch
 13980 ;;		_MXK_DIPSwitch
 13981 ;;		_Port_ToggleQuad
 13982 ;; This function uses a non-reentrant model
 13983 ;;
 13984                           
 13985                           	psect	text72
 13986  0153E0                     __ptext72:
 13987                           	opt stack 0
 13988  0153E0                     _Port_GetQuad:
 13989                           	opt stack 22
 13990                           
 13991                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 13992                           
 13993                           ;incstack = 0
 13994  0153E0  0100               	movlb	0	; () banked
 13995  0153E2  EE20 F006          	lfsr	2,6
 13996  0153E6  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 13997  0153E8  26D9               	addwf	fsr2l,f,c
 13998  0153EA  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 13999  0153EC  22DA               	addwfc	fsr2h,f,c
 14000  0153EE  CFDE F063          	movff	postinc2,??_Port_GetQuad
 14001  0153F2  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 14002  0153F6  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 14003  0153FA  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 14004  0153FE  50DF               	movf	indf2,w,c
 14005  015400  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 14006                           
 14007                           ; BSR set to: 0
 14008                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 14009  015402  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 14010  015404  0D04               	mullw	4
 14011  015406  28F3               	incf	prodl,w,c
 14012  015408  6F63               	movwf	??_Port_GetQuad& (0+255),b
 14013  01540A  D002               	goto	u11300
 14014  01540C                     u11305:
 14015  01540C  90D8               	bcf	status,0,c
 14016  01540E  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 14017  015410                     u11300:
 14018  015410  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 14019  015412  D7FC               	goto	u11305
 14020                           
 14021                           ;Port.c: 502: Output &= 0xF;
 14022  015414  0E0F               	movlw	15
 14023  015416  0100               	movlb	0	; () banked
 14024  015418  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 14025                           
 14026                           ; BSR set to: 0
 14027                           ;Port.c: 503: return Output;
 14028  01541A  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 14029  01541C  0012               	return	
 14030  01541E                     __end_of_Port_GetQuad:
 14031                           	opt stack 0
 14032                           tosu	equ	0xFFF
 14033                           tosh	equ	0xFFE
 14034                           tosl	equ	0xFFD
 14035                           pclath	equ	0xFFA
 14036                           tblptru	equ	0xFF8
 14037                           tblptrh	equ	0xFF7
 14038                           tblptrl	equ	0xFF6
 14039                           tablat	equ	0xFF5
 14040                           prodh	equ	0xFF4
 14041                           prodl	equ	0xFF3
 14042                           intcon	equ	0xFF2
 14043                           postinc0	equ	0xFEE
 14044                           wreg	equ	0xFE8
 14045                           indf1	equ	0xFE7
 14046                           postdec1	equ	0xFE5
 14047                           fsr1h	equ	0xFE2
 14048                           fsr1l	equ	0xFE1
 14049                           indf2	equ	0xFDF
 14050                           postinc2	equ	0xFDE
 14051                           postdec2	equ	0xFDD
 14052                           plusw2	equ	0xFDB
 14053                           fsr2h	equ	0xFDA
 14054                           fsr2l	equ	0xFD9
 14055                           status	equ	0xFD8
 14056                           
 14057 ;; *************** function _Event_DIPSwitch *****************
 14058 ;; Defined at:
 14059 ;;		line 22 in file "Events.c"
 14060 ;; Parameters:    Size  Location     Type
 14061 ;;  pState          1    wreg     unsigned char 
 14062 ;; Auto vars:     Size  Location     Type
 14063 ;;  pState          1   25[BANK0 ] unsigned char 
 14064 ;;  Bar             1   26[BANK0 ] unsigned char 
 14065 ;; Return value:  Size  Location     Type
 14066 ;;                  1    wreg      void 
 14067 ;; Registers used:
 14068 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14069 ;; Tracked objects:
 14070 ;;		On entry : 0/0
 14071 ;;		On exit  : 0/0
 14072 ;;		Unchanged: 0/0
 14073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14075 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14077 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14078 ;;Total ram usage:        2 bytes
 14079 ;; Hardware stack levels used:    1
 14080 ;; Hardware stack levels required when called:   13
 14081 ;; This function calls:
 14082 ;;		_HMI_GetBar
 14083 ;;		_HMI_SetBar
 14084 ;;		_LED_Toggle
 14085 ;; This function is called by:
 14086 ;;		_FunctInitButton
 14087 ;;		_Button_Poll
 14088 ;; This function uses a non-reentrant model
 14089 ;;
 14090                           
 14091                           	psect	text73
 14092  0157D8                     __ptext73:
 14093                           	opt stack 0
 14094  0157D8                     _Event_DIPSwitch:
 14095                           	opt stack 15
 14096                           
 14097                           ; BSR set to: 0
 14098                           ;incstack = 0
 14099                           ;Event_DIPSwitch@pState stored from wreg
 14100  0157D8  0100               	movlb	0	; () banked
 14101  0157DA  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 14102                           
 14103                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 14104  0157DC  ECA1  F0AD         	call	_HMI_GetBar	;wreg free
 14105  0157E0  0100               	movlb	0	; () banked
 14106  0157E2  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 14107                           
 14108                           ; BSR set to: 0
 14109                           ;Events.c: 25: Bar &= 0x0F;
 14110  0157E4  0E0F               	movlw	15
 14111  0157E6  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 14112                           
 14113                           ; BSR set to: 0
 14114                           ;Events.c: 26: pState <<= 4;
 14115  0157E8  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 14116  0157EA  0EF0               	movlw	240
 14117  0157EC  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 14118                           
 14119                           ; BSR set to: 0
 14120                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 14121  0157EE  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 14122  0157F0  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 14123  0157F2  EC91  F0AD         	call	_HMI_SetBar
 14124                           
 14125                           ;Events.c: 32: LED_Toggle(eLED1);
 14126  0157F6  0E00               	movlw	0
 14127  0157F8  ECB0  F0A9         	call	_LED_Toggle
 14128  0157FC  0012               	return		;funcret
 14129  0157FE                     __end_of_Event_DIPSwitch:
 14130                           	opt stack 0
 14131                           tosu	equ	0xFFF
 14132                           tosh	equ	0xFFE
 14133                           tosl	equ	0xFFD
 14134                           pclath	equ	0xFFA
 14135                           tblptru	equ	0xFF8
 14136                           tblptrh	equ	0xFF7
 14137                           tblptrl	equ	0xFF6
 14138                           tablat	equ	0xFF5
 14139                           prodh	equ	0xFF4
 14140                           prodl	equ	0xFF3
 14141                           intcon	equ	0xFF2
 14142                           postinc0	equ	0xFEE
 14143                           wreg	equ	0xFE8
 14144                           indf1	equ	0xFE7
 14145                           postdec1	equ	0xFE5
 14146                           fsr1h	equ	0xFE2
 14147                           fsr1l	equ	0xFE1
 14148                           indf2	equ	0xFDF
 14149                           postinc2	equ	0xFDE
 14150                           postdec2	equ	0xFDD
 14151                           plusw2	equ	0xFDB
 14152                           fsr2h	equ	0xFDA
 14153                           fsr2l	equ	0xFD9
 14154                           status	equ	0xFD8
 14155                           
 14156 ;; *************** function _Event_NULL *****************
 14157 ;; Defined at:
 14158 ;;		line 9 in file "Events.c"
 14159 ;; Parameters:    Size  Location     Type
 14160 ;;  pState          1    wreg     unsigned char 
 14161 ;; Auto vars:     Size  Location     Type
 14162 ;;  pState          1    0[COMRAM] unsigned char 
 14163 ;; Return value:  Size  Location     Type
 14164 ;;                  1    wreg      void 
 14165 ;; Registers used:
 14166 ;;		wreg
 14167 ;; Tracked objects:
 14168 ;;		On entry : 0/0
 14169 ;;		On exit  : 0/0
 14170 ;;		Unchanged: 0/0
 14171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14176 ;;Total ram usage:        0 bytes
 14177 ;; Hardware stack levels used:    1
 14178 ;; Hardware stack levels required when called:    7
 14179 ;; This function calls:
 14180 ;;		Nothing
 14181 ;; This function is called by:
 14182 ;;		_HMI_Init
 14183 ;;		_Button_Poll
 14184 ;; This function uses a non-reentrant model
 14185 ;;
 14186                           
 14187                           	psect	text74
 14188  001404                     __ptext74:
 14189                           	opt stack 0
 14190  001404                     _Event_NULL:
 14191                           	opt stack 21
 14192                           
 14193                           ;incstack = 0
 14194  001404  0012               	return		;funcret
 14195  001406                     __end_of_Event_NULL:
 14196                           	opt stack 0
 14197                           tosu	equ	0xFFF
 14198                           tosh	equ	0xFFE
 14199                           tosl	equ	0xFFD
 14200                           pclath	equ	0xFFA
 14201                           tblptru	equ	0xFF8
 14202                           tblptrh	equ	0xFF7
 14203                           tblptrl	equ	0xFF6
 14204                           tablat	equ	0xFF5
 14205                           prodh	equ	0xFF4
 14206                           prodl	equ	0xFF3
 14207                           intcon	equ	0xFF2
 14208                           postinc0	equ	0xFEE
 14209                           wreg	equ	0xFE8
 14210                           indf1	equ	0xFE7
 14211                           postdec1	equ	0xFE5
 14212                           fsr1h	equ	0xFE2
 14213                           fsr1l	equ	0xFE1
 14214                           indf2	equ	0xFDF
 14215                           postinc2	equ	0xFDE
 14216                           postdec2	equ	0xFDD
 14217                           plusw2	equ	0xFDB
 14218                           fsr2h	equ	0xFDA
 14219                           fsr2l	equ	0xFD9
 14220                           status	equ	0xFD8
 14221                           
 14222 ;; *************** function _Event_TestButton *****************
 14223 ;; Defined at:
 14224 ;;		line 52 in file "Events.c"
 14225 ;; Parameters:    Size  Location     Type
 14226 ;;  pState          1    wreg     unsigned char 
 14227 ;; Auto vars:     Size  Location     Type
 14228 ;;  pState          1   25[BANK0 ] unsigned char 
 14229 ;; Return value:  Size  Location     Type
 14230 ;;                  1    wreg      void 
 14231 ;; Registers used:
 14232 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14233 ;; Tracked objects:
 14234 ;;		On entry : 0/0
 14235 ;;		On exit  : 0/0
 14236 ;;		Unchanged: 0/0
 14237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14241 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14242 ;;Total ram usage:        1 bytes
 14243 ;; Hardware stack levels used:    1
 14244 ;; Hardware stack levels required when called:   13
 14245 ;; This function calls:
 14246 ;;		_HMI_SetButton
 14247 ;;		_HMI_SetNumber
 14248 ;;		_LED_Toggle
 14249 ;; This function is called by:
 14250 ;;		_FunctInitButton
 14251 ;;		_Button_Poll
 14252 ;; This function uses a non-reentrant model
 14253 ;;
 14254                           
 14255                           	psect	text75
 14256  0155E0                     __ptext75:
 14257                           	opt stack 0
 14258  0155E0                     _Event_TestButton:
 14259                           	opt stack 15
 14260                           
 14261                           ;incstack = 0
 14262                           ;Event_TestButton@pState stored from wreg
 14263  0155E0  0100               	movlb	0	; () banked
 14264  0155E2  6F79               	movwf	Event_TestButton@pState& (0+255),b
 14265                           
 14266                           ;Events.c: 56: static UINT8 j = 0;
 14267                           ;Events.c: 60: if (pState == 0)
 14268  0155E4  0100               	movlb	0	; () banked
 14269  0155E6  5179               	movf	Event_TestButton@pState& (0+255),w,b
 14270  0155E8  A4D8               	btfss	status,2,c
 14271  0155EA  D010               	goto	l1873
 14272                           
 14273                           ; BSR set to: 0
 14274                           ;Events.c: 61: {
 14275                           ;Events.c: 62: j++;
 14276  0155EC  2BEE               	incf	Event_TestButton@j& (0+255),f,b
 14277                           
 14278                           ; BSR set to: 0
 14279                           ;Events.c: 63: val += j;
 14280  0155EE  51EE               	movf	Event_TestButton@j& (0+255),w,b
 14281  0155F0  262F               	addwf	_val,f,c
 14282  0155F2  0E00               	movlw	0
 14283  0155F4  2230               	addwfc	_val+1,f,c
 14284                           
 14285                           ; BSR set to: 0
 14286                           ;Events.c: 64: HMI_SetNumber( val );
 14287  0155F6  C02F  F076         	movff	_val,HMI_SetNumber@pInput
 14288  0155FA  C030  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 14289  0155FE  ECFF  F0AB         	call	_HMI_SetNumber	;wreg free
 14290                           
 14291                           ;Events.c: 67: HMI_SetButton( j & 3 );
 14292  015602  0100               	movlb	0	; () banked
 14293  015604  51EE               	movf	Event_TestButton@j& (0+255),w,b
 14294  015606  0B03               	andlw	3
 14295  015608  EC6E  F0A3         	call	_HMI_SetButton
 14296  01560C                     l1873:
 14297                           
 14298                           ;Events.c: 68: }
 14299                           ;Events.c: 72: LED_Toggle(eLED1);
 14300  01560C  0E00               	movlw	0
 14301  01560E  ECB0  F0A9         	call	_LED_Toggle
 14302  015612  0012               	return		;funcret
 14303  015614                     __end_of_Event_TestButton:
 14304                           	opt stack 0
 14305                           tosu	equ	0xFFF
 14306                           tosh	equ	0xFFE
 14307                           tosl	equ	0xFFD
 14308                           pclath	equ	0xFFA
 14309                           tblptru	equ	0xFF8
 14310                           tblptrh	equ	0xFF7
 14311                           tblptrl	equ	0xFF6
 14312                           tablat	equ	0xFF5
 14313                           prodh	equ	0xFF4
 14314                           prodl	equ	0xFF3
 14315                           intcon	equ	0xFF2
 14316                           postinc0	equ	0xFEE
 14317                           wreg	equ	0xFE8
 14318                           indf1	equ	0xFE7
 14319                           postdec1	equ	0xFE5
 14320                           fsr1h	equ	0xFE2
 14321                           fsr1l	equ	0xFE1
 14322                           indf2	equ	0xFDF
 14323                           postinc2	equ	0xFDE
 14324                           postdec2	equ	0xFDD
 14325                           plusw2	equ	0xFDB
 14326                           fsr2h	equ	0xFDA
 14327                           fsr2l	equ	0xFD9
 14328                           status	equ	0xFD8
 14329                           
 14330 ;; *************** function _HMI_SetButton *****************
 14331 ;; Defined at:
 14332 ;;		line 186 in file "HMI.c"
 14333 ;; Parameters:    Size  Location     Type
 14334 ;;  pValue          1    wreg     unsigned char 
 14335 ;; Auto vars:     Size  Location     Type
 14336 ;;  pValue          1    6[BANK0 ] unsigned char 
 14337 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 14338 ;;  v               1    7[BANK0 ] unsigned char 
 14339 ;; Return value:  Size  Location     Type
 14340 ;;                  1    wreg      void 
 14341 ;; Registers used:
 14342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 14343 ;; Tracked objects:
 14344 ;;		On entry : 0/0
 14345 ;;		On exit  : 0/0
 14346 ;;		Unchanged: 0/0
 14347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14349 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14350 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14351 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14352 ;;Total ram usage:        8 bytes
 14353 ;; Hardware stack levels used:    1
 14354 ;; Hardware stack levels required when called:    7
 14355 ;; This function calls:
 14356 ;;		Nothing
 14357 ;; This function is called by:
 14358 ;;		_Event_TestButton
 14359 ;; This function uses a non-reentrant model
 14360 ;;
 14361                           
 14362                           	psect	text76
 14363  0146DC                     __ptext76:
 14364                           	opt stack 0
 14365  0146DC                     _HMI_SetButton:
 14366                           	opt stack 20
 14367                           
 14368                           ;incstack = 0
 14369                           ;HMI_SetButton@pValue stored from wreg
 14370  0146DC  0100               	movlb	0	; () banked
 14371  0146DE  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 14372                           
 14373                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 14374  0146E0  0E76               	movlw	low HMI_SetButton@F7213
 14375  0146E2  6EF6               	movwf	tblptrl,c
 14376  0146E4                     	if	1	;There is more than 1 active tblptr byte
 14377  0146E4  0EFC               	movlw	high HMI_SetButton@F7213
 14378  0146E6  6EF7               	movwf	tblptrh,c
 14379  0146E8                     	endif
 14380  0146E8                     	if	1	;There are 3 active tblptr bytes
 14381  0146E8  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 14382  0146EA  6EF8               	movwf	tblptru,c
 14383  0146EC                     	endif
 14384  0146EC  0009               	tblrd		*+
 14385  0146EE  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 14386  0146F2  0009               	tblrd		*+
 14387  0146F4  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 14388  0146F8  0009               	tblrd		*+
 14389  0146FA  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 14390  0146FE  000A               	tblrd		*-
 14391  014700  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 14392                           
 14393                           ;HMI.c: 189: UINT8 v = 0b00010001;
 14394  014704  0E11               	movlw	17
 14395  014706  0100               	movlb	0	; () banked
 14396  014708  6F67               	movwf	HMI_SetButton@v& (0+255),b
 14397                           
 14398                           ; BSR set to: 0
 14399                           ;HMI.c: 190: pValue &= 3;
 14400  01470A  0E03               	movlw	3
 14401  01470C  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 14402                           
 14403                           ; BSR set to: 0
 14404                           ;HMI.c: 191: v = v << reindex[pValue];
 14405  01470E  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 14406  014710  0D01               	mullw	1
 14407  014712  0E62               	movlw	low HMI_SetButton@reindex
 14408  014714  24F3               	addwf	prodl,w,c
 14409  014716  6ED9               	movwf	fsr2l,c
 14410  014718  0E00               	movlw	high HMI_SetButton@reindex
 14411  01471A  20F4               	addwfc	prodh,w,c
 14412  01471C  6EDA               	movwf	fsr2h,c
 14413  01471E  50DF               	movf	indf2,w,c
 14414  014720  6F60               	movwf	??_HMI_SetButton& (0+255),b
 14415  014722  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 14416  014726  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 14417  014728  D002               	goto	u11434
 14418  01472A                     u11435:
 14419  01472A  90D8               	bcf	status,0,c
 14420  01472C  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 14421  01472E                     u11434:
 14422  01472E  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 14423  014730  D7FC               	goto	u11435
 14424  014732  0100               	movlb	0	; () banked
 14425  014734  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 14426  014736  6F67               	movwf	HMI_SetButton@v& (0+255),b
 14427                           
 14428                           ; BSR set to: 0
 14429                           ;HMI.c: 192: v = v >> 4;
 14430  014738  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 14431  01473A  0B0F               	andlw	15
 14432  01473C  6F67               	movwf	HMI_SetButton@v& (0+255),b
 14433                           
 14434                           ; BSR set to: 0
 14435                           ;HMI.c: 193: v = v & 0x0F;
 14436  01473E  5167               	movf	HMI_SetButton@v& (0+255),w,b
 14437  014740  0B0F               	andlw	15
 14438  014742  6F67               	movwf	HMI_SetButton@v& (0+255),b
 14439                           
 14440                           ; BSR set to: 0
 14441                           ;HMI.c: 194: HMIBoard.pButton = v;
 14442  014744  0101               	movlb	1	; () banked
 14443  014746  5152               	movf	(_HMIBoard+6)& (0+255),w,b
 14444  014748  0100               	movlb	0	; () banked
 14445  01474A  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 14446  01474C  0BF0               	andlw	-16
 14447  01474E  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 14448  014750  0101               	movlb	1	; () banked
 14449  014752  6F52               	movwf	(_HMIBoard+6)& (0+255),b
 14450                           
 14451                           ; BSR set to: 1
 14452  014754  0012               	return		;funcret
 14453  014756                     __end_of_HMI_SetButton:
 14454                           	opt stack 0
 14455                           tosu	equ	0xFFF
 14456                           tosh	equ	0xFFE
 14457                           tosl	equ	0xFFD
 14458                           pclath	equ	0xFFA
 14459                           tblptru	equ	0xFF8
 14460                           tblptrh	equ	0xFF7
 14461                           tblptrl	equ	0xFF6
 14462                           tablat	equ	0xFF5
 14463                           prodh	equ	0xFF4
 14464                           prodl	equ	0xFF3
 14465                           intcon	equ	0xFF2
 14466                           postinc0	equ	0xFEE
 14467                           wreg	equ	0xFE8
 14468                           indf1	equ	0xFE7
 14469                           postdec1	equ	0xFE5
 14470                           fsr1h	equ	0xFE2
 14471                           fsr1l	equ	0xFE1
 14472                           indf2	equ	0xFDF
 14473                           postinc2	equ	0xFDE
 14474                           postdec2	equ	0xFDD
 14475                           plusw2	equ	0xFDB
 14476                           fsr2h	equ	0xFDA
 14477                           fsr2l	equ	0xFD9
 14478                           status	equ	0xFD8
 14479                           
 14480 ;; *************** function _LED_Toggle *****************
 14481 ;; Defined at:
 14482 ;;		line 50 in file "Library/LED.c"
 14483 ;; Parameters:    Size  Location     Type
 14484 ;;  pLED            1    wreg     enum E6739
 14485 ;; Auto vars:     Size  Location     Type
 14486 ;;  pLED            1   24[BANK0 ] enum E6739
 14487 ;; Return value:  Size  Location     Type
 14488 ;;                  1    wreg      void 
 14489 ;; Registers used:
 14490 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14491 ;; Tracked objects:
 14492 ;;		On entry : 0/0
 14493 ;;		On exit  : 0/0
 14494 ;;		Unchanged: 0/0
 14495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14497 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14499 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14500 ;;Total ram usage:        1 bytes
 14501 ;; Hardware stack levels used:    1
 14502 ;; Hardware stack levels required when called:   12
 14503 ;; This function calls:
 14504 ;;		_Port_TogglePin
 14505 ;; This function is called by:
 14506 ;;		_LCD_Reset
 14507 ;;		_Event_DIPSwitch
 14508 ;;		_Event_TestButton
 14509 ;;		_Event_ADCSequenceComplete
 14510 ;;		_Event_HMI_DIPSwitch
 14511 ;;		_Event_HMI_LeftButton
 14512 ;;		_Event_HMI_RightButton
 14513 ;;		_Event_HMI_UpButton
 14514 ;;		_Event_HMI_DownButton
 14515 ;; This function uses a non-reentrant model
 14516 ;;
 14517                           
 14518                           	psect	text77
 14519  015360                     __ptext77:
 14520                           	opt stack 0
 14521  015360                     _LED_Toggle:
 14522                           	opt stack 15
 14523                           
 14524                           ; BSR set to: 1
 14525                           ;incstack = 0
 14526                           ;LED_Toggle@pLED stored from wreg
 14527  015360  0100               	movlb	0	; () banked
 14528  015362  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 14529                           
 14530                           ;LED.c: 52: switch (pLED)
 14531  015364  D014               	goto	l234
 14532  015366                     
 14533                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 14534  015366  0EAF               	movlw	low _PortC
 14535  015368  0100               	movlb	0	; () banked
 14536  01536A  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 14537  01536C  0E01               	movlw	high _PortC
 14538  01536E  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 14539  015370  0E00               	movlw	0
 14540  015372  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 14541  015374  EC83  F0AB         	call	_Port_TogglePin	;wreg free
 14542                           
 14543                           ;LED.c: 56: break;
 14544  015378  0012               	return	
 14545  01537A                     
 14546                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 14547  01537A  0EAF               	movlw	low _PortC
 14548  01537C  0100               	movlb	0	; () banked
 14549  01537E  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 14550  015380  0E01               	movlw	high _PortC
 14551  015382  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 14552  015384  0E01               	movlw	1
 14553  015386  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 14554  015388  EC83  F0AB         	call	_Port_TogglePin	;wreg free
 14555                           
 14556                           ;LED.c: 60: }
 14557                           
 14558                           ;LED.c: 59: break;
 14559  01538C  0012               	return	
 14560  01538E                     l234:
 14561  01538E  0100               	movlb	0	; () banked
 14562  015390  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 14563                           
 14564                           ; Switch size 1, requested type "space"
 14565                           ; Number of cases is 2, Range of values is 0 to 1
 14566                           ; switch strategies available:
 14567                           ; Name         Instructions Cycles
 14568                           ; simple_byte            7     4 (average)
 14569                           ;	Chosen strategy is simple_byte
 14570  015392  0A00               	xorlw	0	; case 0
 14571  015394  B4D8               	btfsc	status,2,c
 14572  015396  D7E7               	goto	l235
 14573  015398  0A01               	xorlw	1	; case 1
 14574  01539A  A4D8               	btfss	status,2,c
 14575  01539C  0012               	return	
 14576  01539E  D7ED               	goto	l237
 14577  0153A0                     __end_of_LED_Toggle:
 14578                           	opt stack 0
 14579                           tosu	equ	0xFFF
 14580                           tosh	equ	0xFFE
 14581                           tosl	equ	0xFFD
 14582                           pclath	equ	0xFFA
 14583                           tblptru	equ	0xFF8
 14584                           tblptrh	equ	0xFF7
 14585                           tblptrl	equ	0xFF6
 14586                           tablat	equ	0xFF5
 14587                           prodh	equ	0xFF4
 14588                           prodl	equ	0xFF3
 14589                           intcon	equ	0xFF2
 14590                           postinc0	equ	0xFEE
 14591                           wreg	equ	0xFE8
 14592                           indf1	equ	0xFE7
 14593                           postdec1	equ	0xFE5
 14594                           fsr1h	equ	0xFE2
 14595                           fsr1l	equ	0xFE1
 14596                           indf2	equ	0xFDF
 14597                           postinc2	equ	0xFDE
 14598                           postdec2	equ	0xFDD
 14599                           plusw2	equ	0xFDB
 14600                           fsr2h	equ	0xFDA
 14601                           fsr2l	equ	0xFD9
 14602                           status	equ	0xFD8
 14603                           
 14604 ;; *************** function _Port_TogglePin *****************
 14605 ;; Defined at:
 14606 ;;		line 278 in file "Library/Port.c"
 14607 ;; Parameters:    Size  Location     Type
 14608 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 14609 ;;		 -> PortC(10), 
 14610 ;;  pPin            1   22[BANK0 ] enum E6750
 14611 ;; Auto vars:     Size  Location     Type
 14612 ;;  Value           1   23[BANK0 ] unsigned char 
 14613 ;; Return value:  Size  Location     Type
 14614 ;;                  1    wreg      void 
 14615 ;; Registers used:
 14616 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14617 ;; Tracked objects:
 14618 ;;		On entry : 0/0
 14619 ;;		On exit  : 0/0
 14620 ;;		Unchanged: 0/0
 14621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14622 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14625 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14626 ;;Total ram usage:        4 bytes
 14627 ;; Hardware stack levels used:    1
 14628 ;; Hardware stack levels required when called:   11
 14629 ;; This function calls:
 14630 ;;		_Port_GetPin
 14631 ;;		_Port_SetPin
 14632 ;; This function is called by:
 14633 ;;		_LED_Toggle
 14634 ;; This function uses a non-reentrant model
 14635 ;;
 14636                           
 14637                           	psect	text78
 14638  015706                     __ptext78:
 14639                           	opt stack 0
 14640  015706                     _Port_TogglePin:
 14641                           	opt stack 15
 14642                           
 14643                           ;Port.c: 280: UINT8 Value;
 14644                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 14645                           
 14646                           ;incstack = 0
 14647  015706  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 14648  01570A  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 14649  01570E  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 14650  015712  EC4A  F0AA         	call	_Port_GetPin	;wreg free
 14651  015716  0100               	movlb	0	; () banked
 14652  015718  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 14653                           
 14654                           ; BSR set to: 0
 14655                           ;Port.c: 282: Value ^= 0x01;
 14656  01571A  0E01               	movlw	1
 14657  01571C  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 14658                           
 14659                           ; BSR set to: 0
 14660                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 14661  01571E  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 14662  015722  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 14663  015726  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 14664  01572A  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 14665  01572E  EC32  F09E         	call	_Port_SetPin	;wreg free
 14666  015732  0012               	return		;funcret
 14667  015734                     __end_of_Port_TogglePin:
 14668                           	opt stack 0
 14669                           tosu	equ	0xFFF
 14670                           tosh	equ	0xFFE
 14671                           tosl	equ	0xFFD
 14672                           pclath	equ	0xFFA
 14673                           tblptru	equ	0xFF8
 14674                           tblptrh	equ	0xFF7
 14675                           tblptrl	equ	0xFF6
 14676                           tablat	equ	0xFF5
 14677                           prodh	equ	0xFF4
 14678                           prodl	equ	0xFF3
 14679                           intcon	equ	0xFF2
 14680                           postinc0	equ	0xFEE
 14681                           wreg	equ	0xFE8
 14682                           indf1	equ	0xFE7
 14683                           postdec1	equ	0xFE5
 14684                           fsr1h	equ	0xFE2
 14685                           fsr1l	equ	0xFE1
 14686                           indf2	equ	0xFDF
 14687                           postinc2	equ	0xFDE
 14688                           postdec2	equ	0xFDD
 14689                           plusw2	equ	0xFDB
 14690                           fsr2h	equ	0xFDA
 14691                           fsr2l	equ	0xFD9
 14692                           status	equ	0xFD8
 14693                           
 14694 ;; *************** function _Port_SetPin *****************
 14695 ;; Defined at:
 14696 ;;		line 247 in file "Library/Port.c"
 14697 ;; Parameters:    Size  Location     Type
 14698 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 14699 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 14700 ;;  pPin            1   17[BANK0 ] enum E6750
 14701 ;;  pValue          1   18[BANK0 ] unsigned char 
 14702 ;; Auto vars:     Size  Location     Type
 14703 ;;  Type            1   19[BANK0 ] enum E6795
 14704 ;; Return value:  Size  Location     Type
 14705 ;;                  1    wreg      void 
 14706 ;; Registers used:
 14707 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14708 ;; Tracked objects:
 14709 ;;		On entry : 0/0
 14710 ;;		On exit  : 0/0
 14711 ;;		Unchanged: 0/0
 14712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14713 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14714 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14716 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14717 ;;Total ram usage:        5 bytes
 14718 ;; Hardware stack levels used:    1
 14719 ;; Hardware stack levels required when called:   10
 14720 ;; This function calls:
 14721 ;;		_Byte_SetBit
 14722 ;;		_Word_GetPair
 14723 ;; This function is called by:
 14724 ;;		_Reset_Low
 14725 ;;		_Reset_High
 14726 ;;		_LED_Set
 14727 ;;		_Port_TogglePin
 14728 ;;		_Motor_Step
 14729 ;;		_MXK_Init
 14730 ;;		_Motor_Init
 14731 ;; This function uses a non-reentrant model
 14732 ;;
 14733                           
 14734                           	psect	text79
 14735  013C64                     __ptext79:
 14736                           	opt stack 0
 14737  013C64                     _Port_SetPin:
 14738                           	opt stack 19
 14739                           
 14740                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 14741                           
 14742                           ;incstack = 0
 14743  013C64  0E08               	movlw	8
 14744  013C66  0100               	movlb	0	; () banked
 14745  013C68  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 14746  013C6A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14747  013C6C  0E00               	movlw	0
 14748  013C6E  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 14749  013C70  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14750  013C72  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 14751  013C76  EC0A  F0AB         	call	_Word_GetPair	;wreg free
 14752  013C7A  0100               	movlb	0	; () banked
 14753  013C7C  6F73               	movwf	Port_SetPin@Type& (0+255),b
 14754                           
 14755                           ;Port.c: 250: switch (Type)
 14756  013C7E  D03D               	goto	l427
 14757  013C80                     
 14758                           ; BSR set to: 0
 14759                           ;Port.c: 256: pValue &= 1;
 14760                           
 14761                           ; BSR set to: 0
 14762  013C80  0E01               	movlw	1
 14763  013C82  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 14764                           
 14765                           ; BSR set to: 0
 14766                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 14767  013C84  EE20 F002          	lfsr	2,2
 14768  013C88  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 14769  013C8A  26D9               	addwf	fsr2l,f,c
 14770  013C8C  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 14771  013C8E  22DA               	addwfc	fsr2h,f,c
 14772  013C90  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14773  013C94  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14774  013C98  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 14775  013C9C  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 14776  013CA0  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 14777                           
 14778                           ;Port.c: 258: break;
 14779  013CA4  0012               	return	
 14780  013CA6                     
 14781                           ;Port.c: 261: pValue &= 1;
 14782  013CA6  0E01               	movlw	1
 14783  013CA8  0100               	movlb	0	; () banked
 14784  013CAA  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 14785                           
 14786                           ;Port.c: 262: pValue ^= 1;
 14787  013CAC  0E01               	movlw	1
 14788  013CAE  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 14789                           
 14790                           ; BSR set to: 0
 14791                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 14792  013CB0  EE20 F002          	lfsr	2,2
 14793  013CB4  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 14794  013CB6  26D9               	addwf	fsr2l,f,c
 14795  013CB8  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 14796  013CBA  22DA               	addwfc	fsr2h,f,c
 14797  013CBC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14798  013CC0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14799  013CC4  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 14800  013CC8  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 14801  013CCC  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 14802                           
 14803                           ;Port.c: 264: break;
 14804  013CD0  0012               	return	
 14805  013CD2                     
 14806                           ;Port.c: 266: pValue &= 1;
 14807  013CD2  0E01               	movlw	1
 14808  013CD4  0100               	movlb	0	; () banked
 14809  013CD6  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 14810                           
 14811                           ; BSR set to: 0
 14812                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 14813  013CD8  EE20 F004          	lfsr	2,4
 14814  013CDC  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 14815  013CDE  26D9               	addwf	fsr2l,f,c
 14816  013CE0  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 14817  013CE2  22DA               	addwfc	fsr2h,f,c
 14818  013CE4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14819  013CE8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14820  013CEC  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 14821  013CF0  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 14822  013CF4  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 14823                           
 14824                           ;Port.c: 269: }
 14825                           
 14826                           ;Port.c: 268: break;
 14827  013CF8  0012               	return	
 14828  013CFA                     l427:
 14829  013CFA  0100               	movlb	0	; () banked
 14830  013CFC  5173               	movf	Port_SetPin@Type& (0+255),w,b
 14831                           
 14832                           ; Switch size 1, requested type "space"
 14833                           ; Number of cases is 4, Range of values is 0 to 3
 14834                           ; switch strategies available:
 14835                           ; Name         Instructions Cycles
 14836                           ; simple_byte           13     7 (average)
 14837                           ;	Chosen strategy is simple_byte
 14838  013CFE  0A00               	xorlw	0	; case 0
 14839  013D00  B4D8               	btfsc	status,2,c
 14840  013D02  0012               	return	
 14841  013D04  0A01               	xorlw	1	; case 1
 14842  013D06  B4D8               	btfsc	status,2,c
 14843  013D08  D7BB               	goto	l430
 14844  013D0A  0A03               	xorlw	3	; case 2
 14845  013D0C  B4D8               	btfsc	status,2,c
 14846  013D0E  D7CB               	goto	l432
 14847  013D10  0A01               	xorlw	1	; case 3
 14848  013D12  A4D8               	btfss	status,2,c
 14849  013D14  0012               	return	
 14850  013D16  D7DD               	goto	l433
 14851  013D18                     __end_of_Port_SetPin:
 14852                           	opt stack 0
 14853                           tosu	equ	0xFFF
 14854                           tosh	equ	0xFFE
 14855                           tosl	equ	0xFFD
 14856                           pclath	equ	0xFFA
 14857                           tblptru	equ	0xFF8
 14858                           tblptrh	equ	0xFF7
 14859                           tblptrl	equ	0xFF6
 14860                           tablat	equ	0xFF5
 14861                           prodh	equ	0xFF4
 14862                           prodl	equ	0xFF3
 14863                           intcon	equ	0xFF2
 14864                           postinc0	equ	0xFEE
 14865                           wreg	equ	0xFE8
 14866                           indf1	equ	0xFE7
 14867                           postdec1	equ	0xFE5
 14868                           fsr1h	equ	0xFE2
 14869                           fsr1l	equ	0xFE1
 14870                           indf2	equ	0xFDF
 14871                           postinc2	equ	0xFDE
 14872                           postdec2	equ	0xFDD
 14873                           plusw2	equ	0xFDB
 14874                           fsr2h	equ	0xFDA
 14875                           fsr2l	equ	0xFD9
 14876                           status	equ	0xFD8
 14877                           
 14878 ;; *************** function _Port_GetPin *****************
 14879 ;; Defined at:
 14880 ;;		line 271 in file "Library/Port.c"
 14881 ;; Parameters:    Size  Location     Type
 14882 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 14883 ;;		 -> PortB(10), PortE(10), PortC(10), 
 14884 ;;  pPin            1    2[BANK0 ] enum E6750
 14885 ;; Auto vars:     Size  Location     Type
 14886 ;;  Output          1    5[BANK0 ] unsigned char 
 14887 ;; Return value:  Size  Location     Type
 14888 ;;                  1    wreg      unsigned char 
 14889 ;; Registers used:
 14890 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14891 ;; Tracked objects:
 14892 ;;		On entry : 0/0
 14893 ;;		On exit  : 0/0
 14894 ;;		Unchanged: 0/0
 14895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14896 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14898 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14899 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14900 ;;Total ram usage:        6 bytes
 14901 ;; Hardware stack levels used:    1
 14902 ;; Hardware stack levels required when called:    7
 14903 ;; This function calls:
 14904 ;;		Nothing
 14905 ;; This function is called by:
 14906 ;;		_Port_TogglePin
 14907 ;;		_HMI_LeftSwitch
 14908 ;;		_HMI_RightSwitch
 14909 ;;		_HMI_UpSwitch
 14910 ;;		_HMI_DownSwitch
 14911 ;;		_MXK_TestButton
 14912 ;; This function uses a non-reentrant model
 14913 ;;
 14914                           
 14915                           	psect	text80
 14916  015494                     __ptext80:
 14917                           	opt stack 0
 14918  015494                     _Port_GetPin:
 14919                           	opt stack 22
 14920                           
 14921                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 14922                           
 14923                           ;incstack = 0
 14924  015494  0100               	movlb	0	; () banked
 14925  015496  EE20 F006          	lfsr	2,6
 14926  01549A  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 14927  01549C  26D9               	addwf	fsr2l,f,c
 14928  01549E  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 14929  0154A0  22DA               	addwfc	fsr2h,f,c
 14930  0154A2  CFDE F063          	movff	postinc2,??_Port_GetPin
 14931  0154A6  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 14932  0154AA  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 14933  0154AE  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 14934  0154B2  50DF               	movf	indf2,w,c
 14935  0154B4  6F65               	movwf	Port_GetPin@Output& (0+255),b
 14936                           
 14937                           ; BSR set to: 0
 14938                           ;Port.c: 274: Output >>= (UINT8)pPin;
 14939  0154B6  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 14940  0154B8  6F63               	movwf	??_Port_GetPin& (0+255),b
 14941  0154BA  D002               	goto	u10050
 14942  0154BC                     u10055:
 14943  0154BC  90D8               	bcf	status,0,c
 14944  0154BE  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 14945  0154C0                     u10050:
 14946  0154C0  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 14947  0154C2  D7FC               	goto	u10055
 14948                           
 14949                           ;Port.c: 275: Output &= 1;
 14950  0154C4  0E01               	movlw	1
 14951  0154C6  0100               	movlb	0	; () banked
 14952  0154C8  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 14953                           
 14954                           ; BSR set to: 0
 14955                           ;Port.c: 276: return Output;
 14956  0154CA  5165               	movf	Port_GetPin@Output& (0+255),w,b
 14957  0154CC  0012               	return	
 14958  0154CE                     __end_of_Port_GetPin:
 14959                           	opt stack 0
 14960                           tosu	equ	0xFFF
 14961                           tosh	equ	0xFFE
 14962                           tosl	equ	0xFFD
 14963                           pclath	equ	0xFFA
 14964                           tblptru	equ	0xFF8
 14965                           tblptrh	equ	0xFF7
 14966                           tblptrl	equ	0xFF6
 14967                           tablat	equ	0xFF5
 14968                           prodh	equ	0xFF4
 14969                           prodl	equ	0xFF3
 14970                           intcon	equ	0xFF2
 14971                           postinc0	equ	0xFEE
 14972                           wreg	equ	0xFE8
 14973                           indf1	equ	0xFE7
 14974                           postdec1	equ	0xFE5
 14975                           fsr1h	equ	0xFE2
 14976                           fsr1l	equ	0xFE1
 14977                           indf2	equ	0xFDF
 14978                           postinc2	equ	0xFDE
 14979                           postdec2	equ	0xFDD
 14980                           plusw2	equ	0xFDB
 14981                           fsr2h	equ	0xFDA
 14982                           fsr2l	equ	0xFD9
 14983                           status	equ	0xFD8
 14984                           
 14985 ;; *************** function _HMI_SetBar *****************
 14986 ;; Defined at:
 14987 ;;		line 205 in file "HMI.c"
 14988 ;; Parameters:    Size  Location     Type
 14989 ;;  pValue          1    wreg     unsigned char 
 14990 ;; Auto vars:     Size  Location     Type
 14991 ;;  pValue          1    0[BANK0 ] unsigned char 
 14992 ;; Return value:  Size  Location     Type
 14993 ;;                  1    wreg      void 
 14994 ;; Registers used:
 14995 ;;		wreg
 14996 ;; Tracked objects:
 14997 ;;		On entry : 0/0
 14998 ;;		On exit  : 0/0
 14999 ;;		Unchanged: 0/0
 15000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15002 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15004 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15005 ;;Total ram usage:        1 bytes
 15006 ;; Hardware stack levels used:    1
 15007 ;; Hardware stack levels required when called:    7
 15008 ;; This function calls:
 15009 ;;		Nothing
 15010 ;; This function is called by:
 15011 ;;		_Event_DIPSwitch
 15012 ;;		_Event_HMI_DIPSwitch
 15013 ;;		_Event_HMI_LeftButton
 15014 ;;		_Event_HMI_RightButton
 15015 ;; This function uses a non-reentrant model
 15016 ;;
 15017                           
 15018                           	psect	text81
 15019  015B22                     __ptext81:
 15020                           	opt stack 0
 15021  015B22                     _HMI_SetBar:
 15022                           	opt stack 20
 15023                           
 15024                           ; BSR set to: 0
 15025                           ;incstack = 0
 15026                           ;HMI_SetBar@pValue stored from wreg
 15027  015B22  0100               	movlb	0	; () banked
 15028  015B24  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 15029                           
 15030                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 15031  015B26  C060  F153         	movff	HMI_SetBar@pValue,_HMIBoard+7
 15032  015B2A  0012               	return		;funcret
 15033  015B2C                     __end_of_HMI_SetBar:
 15034                           	opt stack 0
 15035                           tosu	equ	0xFFF
 15036                           tosh	equ	0xFFE
 15037                           tosl	equ	0xFFD
 15038                           pclath	equ	0xFFA
 15039                           tblptru	equ	0xFF8
 15040                           tblptrh	equ	0xFF7
 15041                           tblptrl	equ	0xFF6
 15042                           tablat	equ	0xFF5
 15043                           prodh	equ	0xFF4
 15044                           prodl	equ	0xFF3
 15045                           intcon	equ	0xFF2
 15046                           postinc0	equ	0xFEE
 15047                           wreg	equ	0xFE8
 15048                           indf1	equ	0xFE7
 15049                           postdec1	equ	0xFE5
 15050                           fsr1h	equ	0xFE2
 15051                           fsr1l	equ	0xFE1
 15052                           indf2	equ	0xFDF
 15053                           postinc2	equ	0xFDE
 15054                           postdec2	equ	0xFDD
 15055                           plusw2	equ	0xFDB
 15056                           fsr2h	equ	0xFDA
 15057                           fsr2l	equ	0xFD9
 15058                           status	equ	0xFD8
 15059                           
 15060 ;; *************** function _HMI_GetBar *****************
 15061 ;; Defined at:
 15062 ;;		line 209 in file "HMI.c"
 15063 ;; Parameters:    Size  Location     Type
 15064 ;;		None
 15065 ;; Auto vars:     Size  Location     Type
 15066 ;;		None
 15067 ;; Return value:  Size  Location     Type
 15068 ;;                  1    wreg      unsigned char 
 15069 ;; Registers used:
 15070 ;;		wreg, status,2
 15071 ;; Tracked objects:
 15072 ;;		On entry : 0/0
 15073 ;;		On exit  : 0/0
 15074 ;;		Unchanged: 0/0
 15075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15080 ;;Total ram usage:        0 bytes
 15081 ;; Hardware stack levels used:    1
 15082 ;; Hardware stack levels required when called:    7
 15083 ;; This function calls:
 15084 ;;		Nothing
 15085 ;; This function is called by:
 15086 ;;		_Event_DIPSwitch
 15087 ;;		_Event_HMI_DIPSwitch
 15088 ;; This function uses a non-reentrant model
 15089 ;;
 15090                           
 15091                           	psect	text82
 15092  015B42                     __ptext82:
 15093                           	opt stack 0
 15094  015B42                     _HMI_GetBar:
 15095                           	opt stack 20
 15096                           
 15097                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 15098                           
 15099                           ;incstack = 0
 15100  015B42  0101               	movlb	1	; () banked
 15101  015B44  5153               	movf	(_HMIBoard+7)& (0+255),w,b
 15102  015B46  0012               	return	
 15103  015B48                     __end_of_HMI_GetBar:
 15104                           	opt stack 0
 15105                           tosu	equ	0xFFF
 15106                           tosh	equ	0xFFE
 15107                           tosl	equ	0xFFD
 15108                           pclath	equ	0xFFA
 15109                           tblptru	equ	0xFF8
 15110                           tblptrh	equ	0xFF7
 15111                           tblptrl	equ	0xFF6
 15112                           tablat	equ	0xFF5
 15113                           prodh	equ	0xFF4
 15114                           prodl	equ	0xFF3
 15115                           intcon	equ	0xFF2
 15116                           postinc0	equ	0xFEE
 15117                           wreg	equ	0xFE8
 15118                           indf1	equ	0xFE7
 15119                           postdec1	equ	0xFE5
 15120                           fsr1h	equ	0xFE2
 15121                           fsr1l	equ	0xFE1
 15122                           indf2	equ	0xFDF
 15123                           postinc2	equ	0xFDE
 15124                           postdec2	equ	0xFDD
 15125                           plusw2	equ	0xFDB
 15126                           fsr2h	equ	0xFDA
 15127                           fsr2l	equ	0xFD9
 15128                           status	equ	0xFD8
 15129                           
 15130 ;; *************** function _HMI_Init *****************
 15131 ;; Defined at:
 15132 ;;		line 104 in file "HMI.c"
 15133 ;; Parameters:    Size  Location     Type
 15134 ;;		None
 15135 ;; Auto vars:     Size  Location     Type
 15136 ;;  in              2   72[BANK0 ] unsigned short 
 15137 ;; Return value:  Size  Location     Type
 15138 ;;                  1    wreg      void 
 15139 ;; Registers used:
 15140 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15141 ;; Tracked objects:
 15142 ;;		On entry : 0/0
 15143 ;;		On exit  : 0/0
 15144 ;;		Unchanged: 0/0
 15145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15147 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15149 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15150 ;;Total ram usage:        2 bytes
 15151 ;; Hardware stack levels used:    1
 15152 ;; Hardware stack levels required when called:   16
 15153 ;; This function calls:
 15154 ;;		_Button_Init
 15155 ;;		_SPI_Init
 15156 ;;		_SPI_MinSpeed
 15157 ;; This function is called by:
 15158 ;;		_main
 15159 ;; This function uses a non-reentrant model
 15160 ;;
 15161                           
 15162                           	psect	text83
 15163  0124E0                     __ptext83:
 15164                           	opt stack 0
 15165  0124E0                     _HMI_Init:
 15166                           	opt stack 14
 15167                           
 15168                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 15169                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 15170                           
 15171                           ; BSR set to: 1
 15172                           ;incstack = 0
 15173  0124E0  0E7C               	movlw	low (_HMIBoard+48)
 15174  0124E2  0100               	movlb	0	; () banked
 15175  0124E4  6F9B               	movwf	Button_Init@pInput& (0+255),b
 15176  0124E6  0E01               	movlw	high (_HMIBoard+48)
 15177  0124E8  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 15178  0124EA  0E00               	movlw	0
 15179  0124EC  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15180  0124EE  0E02               	movlw	2
 15181  0124F0  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 15182  0124F2  0E48               	movlw	low _HMI_InitButtons
 15183  0124F4  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 15184  0124F6  0E5B               	movlw	high _HMI_InitButtons
 15185  0124F8  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15186  0124FA  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15187  0124FC  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15188  0124FE  0E22               	movlw	low _HMI_DIPSwitch
 15189  012500  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 15190  012502  0E5A               	movlw	high _HMI_DIPSwitch
 15191  012504  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15192  012506  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 15193  012508  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15194  01250A  0E04               	movlw	low _Event_NULL
 15195  01250C  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 15196  01250E  0E14               	movlw	high _Event_NULL
 15197  012510  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15198  012512  0E00               	movlw	low (_Event_NULL shr (0+16))
 15199  012514  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15200  012516  EC8C  F09E         	call	_Button_Init	;wreg free
 15201                           
 15202                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 15203                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 15204  01251A  0E5E               	movlw	low (_HMIBoard+18)
 15205  01251C  0100               	movlb	0	; () banked
 15206  01251E  6F9B               	movwf	Button_Init@pInput& (0+255),b
 15207  012520  0E01               	movlw	high (_HMIBoard+18)
 15208  012522  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 15209  012524  0E00               	movlw	0
 15210  012526  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15211  012528  0E02               	movlw	2
 15212  01252A  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 15213  01252C  0E48               	movlw	low _HMI_InitButtons
 15214  01252E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 15215  012530  0E5B               	movlw	high _HMI_InitButtons
 15216  012532  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15217  012534  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15218  012536  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15219  012538  0E72               	movlw	low _HMI_LeftSwitch
 15220  01253A  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 15221  01253C  0E5A               	movlw	high _HMI_LeftSwitch
 15222  01253E  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15223  012540  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 15224  012542  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15225  012544  0E04               	movlw	low _Event_NULL
 15226  012546  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 15227  012548  0E14               	movlw	high _Event_NULL
 15228  01254A  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15229  01254C  0E00               	movlw	low (_Event_NULL shr (0+16))
 15230  01254E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15231  012550  EC8C  F09E         	call	_Button_Init	;wreg free
 15232                           
 15233                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 15234                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 15235  012554  0E54               	movlw	low (_HMIBoard+8)
 15236  012556  0100               	movlb	0	; () banked
 15237  012558  6F9B               	movwf	Button_Init@pInput& (0+255),b
 15238  01255A  0E01               	movlw	high (_HMIBoard+8)
 15239  01255C  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 15240  01255E  0E00               	movlw	0
 15241  012560  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15242  012562  0E02               	movlw	2
 15243  012564  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 15244  012566  0E48               	movlw	low _HMI_InitButtons
 15245  012568  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 15246  01256A  0E5B               	movlw	high _HMI_InitButtons
 15247  01256C  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15248  01256E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15249  012570  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15250  012572  0E5E               	movlw	low _HMI_RightSwitch
 15251  012574  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 15252  012576  0E5A               	movlw	high _HMI_RightSwitch
 15253  012578  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15254  01257A  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 15255  01257C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15256  01257E  0E04               	movlw	low _Event_NULL
 15257  012580  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 15258  012582  0E14               	movlw	high _Event_NULL
 15259  012584  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15260  012586  0E00               	movlw	low (_Event_NULL shr (0+16))
 15261  012588  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15262  01258A  EC8C  F09E         	call	_Button_Init	;wreg free
 15263                           
 15264                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 15265                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 15266  01258E  0E68               	movlw	low (_HMIBoard+28)
 15267  012590  0100               	movlb	0	; () banked
 15268  012592  6F9B               	movwf	Button_Init@pInput& (0+255),b
 15269  012594  0E01               	movlw	high (_HMIBoard+28)
 15270  012596  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 15271  012598  0E00               	movlw	0
 15272  01259A  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15273  01259C  0E02               	movlw	2
 15274  01259E  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 15275  0125A0  0E48               	movlw	low _HMI_InitButtons
 15276  0125A2  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 15277  0125A4  0E5B               	movlw	high _HMI_InitButtons
 15278  0125A6  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15279  0125A8  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15280  0125AA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15281  0125AC  0E4A               	movlw	low _HMI_UpSwitch
 15282  0125AE  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 15283  0125B0  0E5A               	movlw	high _HMI_UpSwitch
 15284  0125B2  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15285  0125B4  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 15286  0125B6  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15287  0125B8  0E04               	movlw	low _Event_NULL
 15288  0125BA  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 15289  0125BC  0E14               	movlw	high _Event_NULL
 15290  0125BE  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15291  0125C0  0E00               	movlw	low (_Event_NULL shr (0+16))
 15292  0125C2  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15293  0125C4  EC8C  F09E         	call	_Button_Init	;wreg free
 15294                           
 15295                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 15296                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 15297  0125C8  0E72               	movlw	low (_HMIBoard+38)
 15298  0125CA  0100               	movlb	0	; () banked
 15299  0125CC  6F9B               	movwf	Button_Init@pInput& (0+255),b
 15300  0125CE  0E01               	movlw	high (_HMIBoard+38)
 15301  0125D0  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 15302  0125D2  0E00               	movlw	0
 15303  0125D4  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15304  0125D6  0E02               	movlw	2
 15305  0125D8  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 15306  0125DA  0E48               	movlw	low _HMI_InitButtons
 15307  0125DC  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 15308  0125DE  0E5B               	movlw	high _HMI_InitButtons
 15309  0125E0  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15310  0125E2  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 15311  0125E4  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15312  0125E6  0E36               	movlw	low _HMI_DownSwitch
 15313  0125E8  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 15314  0125EA  0E5A               	movlw	high _HMI_DownSwitch
 15315  0125EC  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15316  0125EE  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 15317  0125F0  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15318  0125F2  0E04               	movlw	low _Event_NULL
 15319  0125F4  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 15320  0125F6  0E14               	movlw	high _Event_NULL
 15321  0125F8  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15322  0125FA  0E00               	movlw	low (_Event_NULL shr (0+16))
 15323  0125FC  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15324  0125FE  EC8C  F09E         	call	_Button_Init	;wreg free
 15325                           
 15326                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 15327  012602  0EA0               	movlw	160
 15328  012604  0100               	movlb	0	; () banked
 15329  012606  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 15330  012608  0E86               	movlw	134
 15331  01260A  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 15332  01260C  0E01               	movlw	1
 15333  01260E  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 15334  012610  0E00               	movlw	0
 15335  012612  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 15336  012614  0E00               	movlw	0
 15337  012616  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 15338  012618  0E02               	movlw	2
 15339  01261A  6F92               	movwf	SPI_Init@pMode& (0+255),b
 15340  01261C  EC00  F080         	call	_SPI_Init	;wreg free
 15341                           
 15342                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 15343  012620  0EC8               	movlw	low _SPI1
 15344  012622  0100               	movlb	0	; () banked
 15345  012624  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 15346  012626  0E02               	movlw	high _SPI1
 15347  012628  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 15348  01262A  ECA5  F0A5         	call	_SPI_MinSpeed	;wreg free
 15349                           
 15350                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 15351  01262E  0E00               	movlw	0
 15352  012630  0100               	movlb	0	; () banked
 15353  012632  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 15354  012634  0E00               	movlw	0
 15355  012636  6FA8               	movwf	HMI_Init@in& (0+255),b
 15356  012638                     l15509:
 15357                           
 15358                           ; BSR set to: 0
 15359  012638  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 15360  01263A  E10F               	bnz	l1153
 15361  01263C  0E08               	movlw	8
 15362  01263E  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 15363  012640  B0D8               	btfsc	status,0,c
 15364  012642  0012               	return	
 15365                           
 15366                           ; BSR set to: 0
 15367                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 15368                           
 15369                           ; BSR set to: 0
 15370                           
 15371                           ; BSR set to: 0
 15372  012644  0E4C               	movlw	low _HMIBoard
 15373  012646  25A8               	addwf	HMI_Init@in& (0+255),w,b
 15374  012648  6ED9               	movwf	fsr2l,c
 15375  01264A  0E01               	movlw	high _HMIBoard
 15376  01264C  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 15377  01264E  6EDA               	movwf	fsr2h,c
 15378  012650  0E00               	movlw	0
 15379  012652  6EDF               	movwf	indf2,c
 15380                           
 15381                           ; BSR set to: 0
 15382  012654  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 15383  012656  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 15384  012658  D7EF               	goto	l15509
 15385  01265A                     l1153:
 15386                           
 15387                           ; BSR set to: 0
 15388  01265A  0012               	return		;funcret
 15389  01265C                     __end_of_HMI_Init:
 15390                           	opt stack 0
 15391                           tosu	equ	0xFFF
 15392                           tosh	equ	0xFFE
 15393                           tosl	equ	0xFFD
 15394                           pclath	equ	0xFFA
 15395                           tblptru	equ	0xFF8
 15396                           tblptrh	equ	0xFF7
 15397                           tblptrl	equ	0xFF6
 15398                           tablat	equ	0xFF5
 15399                           prodh	equ	0xFF4
 15400                           prodl	equ	0xFF3
 15401                           intcon	equ	0xFF2
 15402                           postinc0	equ	0xFEE
 15403                           wreg	equ	0xFE8
 15404                           indf1	equ	0xFE7
 15405                           postdec1	equ	0xFE5
 15406                           fsr1h	equ	0xFE2
 15407                           fsr1l	equ	0xFE1
 15408                           indf2	equ	0xFDF
 15409                           postinc2	equ	0xFDE
 15410                           postdec2	equ	0xFDD
 15411                           plusw2	equ	0xFDB
 15412                           fsr2h	equ	0xFDA
 15413                           fsr2l	equ	0xFD9
 15414                           status	equ	0xFD8
 15415                           
 15416 ;; *************** function _SPI_MinSpeed *****************
 15417 ;; Defined at:
 15418 ;;		line 190 in file "Library/SPI.c"
 15419 ;; Parameters:    Size  Location     Type
 15420 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 15421 ;;		 -> SPI1(11), 
 15422 ;; Auto vars:     Size  Location     Type
 15423 ;;		None
 15424 ;; Return value:  Size  Location     Type
 15425 ;;                  1    wreg      void 
 15426 ;; Registers used:
 15427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15428 ;; Tracked objects:
 15429 ;;		On entry : 0/0
 15430 ;;		On exit  : 0/0
 15431 ;;		Unchanged: 0/0
 15432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15433 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15436 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15437 ;;Total ram usage:        2 bytes
 15438 ;; Hardware stack levels used:    1
 15439 ;; Hardware stack levels required when called:    9
 15440 ;; This function calls:
 15441 ;;		_Byte_SetBit
 15442 ;;		_Byte_SetQuad
 15443 ;; This function is called by:
 15444 ;;		_HMI_Init
 15445 ;; This function uses a non-reentrant model
 15446 ;;
 15447                           
 15448                           	psect	text84
 15449  014B4A                     __ptext84:
 15450                           	opt stack 0
 15451  014B4A                     _SPI_MinSpeed:
 15452                           	opt stack 20
 15453                           
 15454                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 15455                           
 15456                           ; BSR set to: 0
 15457                           ;incstack = 0
 15458  014B4A  0100               	movlb	0	; () banked
 15459  014B4C  EE20 F006          	lfsr	2,6
 15460  014B50  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 15461  014B52  26D9               	addwf	fsr2l,f,c
 15462  014B54  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 15463  014B56  22DA               	addwfc	fsr2h,f,c
 15464  014B58  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15465  014B5C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15466  014B60  0E05               	movlw	5
 15467  014B62  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15468  014B64  0E00               	movlw	0
 15469  014B66  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15470  014B68  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 15471                           
 15472                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 15473  014B6C  0100               	movlb	0	; () banked
 15474  014B6E  EE20 F006          	lfsr	2,6
 15475  014B72  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 15476  014B74  26D9               	addwf	fsr2l,f,c
 15477  014B76  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 15478  014B78  22DA               	addwfc	fsr2h,f,c
 15479  014B7A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15480  014B7E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15481  014B82  0E00               	movlw	0
 15482  014B84  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 15483  014B86  0E02               	movlw	2
 15484  014B88  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15485  014B8A  EC54  F0AC         	call	_Byte_SetQuad	;wreg free
 15486                           
 15487                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 15488  014B8E  0100               	movlb	0	; () banked
 15489  014B90  EE20 F006          	lfsr	2,6
 15490  014B94  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 15491  014B96  26D9               	addwf	fsr2l,f,c
 15492  014B98  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 15493  014B9A  22DA               	addwfc	fsr2h,f,c
 15494  014B9C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15495  014BA0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15496  014BA4  0E05               	movlw	5
 15497  014BA6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15498  014BA8  0E01               	movlw	1
 15499  014BAA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15500  014BAC  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 15501  014BB0  0012               	return		;funcret
 15502  014BB2                     __end_of_SPI_MinSpeed:
 15503                           	opt stack 0
 15504                           tosu	equ	0xFFF
 15505                           tosh	equ	0xFFE
 15506                           tosl	equ	0xFFD
 15507                           pclath	equ	0xFFA
 15508                           tblptru	equ	0xFF8
 15509                           tblptrh	equ	0xFF7
 15510                           tblptrl	equ	0xFF6
 15511                           tablat	equ	0xFF5
 15512                           prodh	equ	0xFF4
 15513                           prodl	equ	0xFF3
 15514                           intcon	equ	0xFF2
 15515                           postinc0	equ	0xFEE
 15516                           wreg	equ	0xFE8
 15517                           indf1	equ	0xFE7
 15518                           postdec1	equ	0xFE5
 15519                           fsr1h	equ	0xFE2
 15520                           fsr1l	equ	0xFE1
 15521                           indf2	equ	0xFDF
 15522                           postinc2	equ	0xFDE
 15523                           postdec2	equ	0xFDD
 15524                           plusw2	equ	0xFDB
 15525                           fsr2h	equ	0xFDA
 15526                           fsr2l	equ	0xFD9
 15527                           status	equ	0xFD8
 15528                           
 15529 ;; *************** function _SPI_Init *****************
 15530 ;; Defined at:
 15531 ;;		line 12 in file "Library/SPI.c"
 15532 ;; Parameters:    Size  Location     Type
 15533 ;;  pClock          4   45[BANK0 ] unsigned long 
 15534 ;;  pChannel        1   49[BANK0 ] enum E6744
 15535 ;;  pMode           1   50[BANK0 ] enum E6748
 15536 ;; Auto vars:     Size  Location     Type
 15537 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 15538 ;;		 -> SPI1(11), SPI2(11), 
 15539 ;; Return value:  Size  Location     Type
 15540 ;;                  1    wreg      void 
 15541 ;; Registers used:
 15542 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15543 ;; Tracked objects:
 15544 ;;		On entry : 0/0
 15545 ;;		On exit  : 0/0
 15546 ;;		Unchanged: 0/0
 15547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15548 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15549 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15551 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15552 ;;Total ram usage:        8 bytes
 15553 ;; Hardware stack levels used:    1
 15554 ;; Hardware stack levels required when called:   12
 15555 ;; This function calls:
 15556 ;;		_Byte_SetBit
 15557 ;;		_Byte_SetQuad
 15558 ;;		_Port_SetPinType
 15559 ;;		_SPI_DCS
 15560 ;;		_SPI_DisableISR
 15561 ;;		_Timer2_Init
 15562 ;; This function is called by:
 15563 ;;		_Configure_GPIOs
 15564 ;;		_HMI_Init
 15565 ;; This function uses a non-reentrant model
 15566 ;;
 15567                           
 15568                           	psect	text85
 15569  010000                     __ptext85:
 15570                           	opt stack 0
 15571  010000                     _SPI_Init:
 15572                           	opt stack 16
 15573                           
 15574                           ;SPI.c: 14: SPIPtr pInput;
 15575                           ;SPI.c: 16: switch (pChannel)
 15576                           
 15577                           ;incstack = 0
 15578  010000  D00A               	goto	l597
 15579  010002                     
 15580                           ;SPI.c: 19: pInput = &SPI1;
 15581  010002  0EC8               	movlw	low _SPI1
 15582  010004  0100               	movlb	0	; () banked
 15583  010006  6F93               	movwf	SPI_Init@pInput& (0+255),b
 15584  010008  0E02               	movlw	high _SPI1
 15585  01000A  D003               	goto	L9
 15586  01000C                     
 15587                           ; BSR set to: 0
 15588                           ;SPI.c: 22: pInput = &SPI2;
 15589                           
 15590                           ; BSR set to: 0
 15591  01000C  0E86               	movlw	low _SPI2
 15592  01000E  6F93               	movwf	SPI_Init@pInput& (0+255),b
 15593  010010  0E01               	movlw	high _SPI2
 15594  010012                     L9:
 15595  010012  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 15596                           
 15597                           ; BSR set to: 0
 15598                           ;SPI.c: 24: };
 15599                           
 15600                           ;SPI.c: 23: break;
 15601  010014  D008               	goto	l599
 15602  010016                     l597:
 15603                           
 15604                           ; BSR set to: 0
 15605  010016  0100               	movlb	0	; () banked
 15606  010018  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 15607                           
 15608                           ; Switch size 1, requested type "space"
 15609                           ; Number of cases is 2, Range of values is 0 to 1
 15610                           ; switch strategies available:
 15611                           ; Name         Instructions Cycles
 15612                           ; simple_byte            7     4 (average)
 15613                           ;	Chosen strategy is simple_byte
 15614  01001A  0A00               	xorlw	0	; case 0
 15615  01001C  B4D8               	btfsc	status,2,c
 15616  01001E  D7F1               	goto	l598
 15617  010020  0A01               	xorlw	1	; case 1
 15618  010022  B4D8               	btfsc	status,2,c
 15619  010024  D7F3               	goto	l600
 15620  010026                     l599:
 15621                           
 15622                           ; BSR set to: 0
 15623                           ;SPI.c: 26: pInput->mChannel = pChannel;
 15624                           
 15625                           ; BSR set to: 0
 15626  010026  EE20 F002          	lfsr	2,2
 15627  01002A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15628  01002C  26D9               	addwf	fsr2l,f,c
 15629  01002E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15630  010030  22DA               	addwfc	fsr2h,f,c
 15631  010032  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 15632                           
 15633                           ;SPI.c: 35: switch (pChannel)
 15634  010036  D093               	goto	l601
 15635  010038                     
 15636                           ; BSR set to: 0
 15637                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 15638                           
 15639                           ; BSR set to: 0
 15640  010038  0EAF               	movlw	low _PortC
 15641  01003A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15642  01003C  0E01               	movlw	high _PortC
 15643  01003E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15644  010040  0E02               	movlw	2
 15645  010042  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15646  010044  0E03               	movlw	3
 15647  010046  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15648  010048  ECA1  F091         	call	_Port_SetPinType	;wreg free
 15649                           
 15650                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 15651  01004C  0EAF               	movlw	low _PortC
 15652  01004E  0100               	movlb	0	; () banked
 15653  010050  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15654  010052  0E01               	movlw	high _PortC
 15655  010054  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15656  010056  0E03               	movlw	3
 15657  010058  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15658  01005A  0E03               	movlw	3
 15659  01005C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15660  01005E  ECA1  F091         	call	_Port_SetPinType	;wreg free
 15661                           
 15662                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 15663  010062  0EAF               	movlw	low _PortC
 15664  010064  0100               	movlb	0	; () banked
 15665  010066  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15666  010068  0E01               	movlw	high _PortC
 15667  01006A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15668  01006C  0E05               	movlw	5
 15669  01006E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15670  010070  0E03               	movlw	3
 15671  010072  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15672  010074  ECA1  F091         	call	_Port_SetPinType	;wreg free
 15673                           
 15674                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 15675  010078  0EAF               	movlw	low _PortC
 15676  01007A  0100               	movlb	0	; () banked
 15677  01007C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15678  01007E  0E01               	movlw	high _PortC
 15679  010080  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15680  010082  0E04               	movlw	4
 15681  010084  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15682  010086  0E00               	movlw	0
 15683  010088  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15684  01008A  ECA1  F091         	call	_Port_SetPinType	;wreg free
 15685                           
 15686                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 15687  01008E  0100               	movlb	0	; () banked
 15688  010090  EE20 F003          	lfsr	2,3
 15689  010094  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15690  010096  26D9               	addwf	fsr2l,f,c
 15691  010098  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15692  01009A  22DA               	addwfc	fsr2h,f,c
 15693  01009C  0EC7               	movlw	199
 15694  01009E  6EDE               	movwf	postinc2,c
 15695  0100A0  0E0F               	movlw	15
 15696  0100A2  6EDD               	movwf	postdec2,c
 15697                           
 15698                           ; BSR set to: 0
 15699                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 15700  0100A4  EE20 F006          	lfsr	2,6
 15701  0100A8  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15702  0100AA  26D9               	addwf	fsr2l,f,c
 15703  0100AC  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15704  0100AE  22DA               	addwfc	fsr2h,f,c
 15705  0100B0  0EC6               	movlw	198
 15706  0100B2  6EDE               	movwf	postinc2,c
 15707  0100B4  0E0F               	movlw	15
 15708  0100B6  6EDD               	movwf	postdec2,c
 15709                           
 15710                           ; BSR set to: 0
 15711                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 15712  0100B8  EE20 F009          	lfsr	2,9
 15713  0100BC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15714  0100BE  26D9               	addwf	fsr2l,f,c
 15715  0100C0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15716  0100C2  22DA               	addwfc	fsr2h,f,c
 15717  0100C4  0EC9               	movlw	201
 15718  0100C6  D047               	goto	L10
 15719  0100C8                     
 15720                           ; BSR set to: 0
 15721                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 15722                           
 15723                           ; BSR set to: 0
 15724  0100C8  0E9B               	movlw	low _PortD
 15725  0100CA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15726  0100CC  0E01               	movlw	high _PortD
 15727  0100CE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15728  0100D0  0E07               	movlw	7
 15729  0100D2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15730  0100D4  0E03               	movlw	3
 15731  0100D6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15732  0100D8  ECA1  F091         	call	_Port_SetPinType	;wreg free
 15733                           
 15734                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 15735  0100DC  0E9B               	movlw	low _PortD
 15736  0100DE  0100               	movlb	0	; () banked
 15737  0100E0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15738  0100E2  0E01               	movlw	high _PortD
 15739  0100E4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15740  0100E6  0E06               	movlw	6
 15741  0100E8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15742  0100EA  0E03               	movlw	3
 15743  0100EC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15744  0100EE  ECA1  F091         	call	_Port_SetPinType	;wreg free
 15745                           
 15746                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 15747  0100F2  0E9B               	movlw	low _PortD
 15748  0100F4  0100               	movlb	0	; () banked
 15749  0100F6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15750  0100F8  0E01               	movlw	high _PortD
 15751  0100FA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15752  0100FC  0E04               	movlw	4
 15753  0100FE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15754  010100  0E03               	movlw	3
 15755  010102  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15756  010104  ECA1  F091         	call	_Port_SetPinType	;wreg free
 15757                           
 15758                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 15759  010108  0E9B               	movlw	low _PortD
 15760  01010A  0100               	movlb	0	; () banked
 15761  01010C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15762  01010E  0E01               	movlw	high _PortD
 15763  010110  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15764  010112  0E05               	movlw	5
 15765  010114  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15766  010116  0E00               	movlw	0
 15767  010118  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15768  01011A  ECA1  F091         	call	_Port_SetPinType	;wreg free
 15769                           
 15770                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 15771  01011E  0100               	movlb	0	; () banked
 15772  010120  EE20 F003          	lfsr	2,3
 15773  010124  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15774  010126  26D9               	addwf	fsr2l,f,c
 15775  010128  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15776  01012A  22DA               	addwfc	fsr2h,f,c
 15777  01012C  0E6D               	movlw	109
 15778  01012E  6EDE               	movwf	postinc2,c
 15779  010130  0E0F               	movlw	15
 15780  010132  6EDD               	movwf	postdec2,c
 15781                           
 15782                           ; BSR set to: 0
 15783                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 15784  010134  EE20 F006          	lfsr	2,6
 15785  010138  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15786  01013A  26D9               	addwf	fsr2l,f,c
 15787  01013C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15788  01013E  22DA               	addwfc	fsr2h,f,c
 15789  010140  0E6C               	movlw	108
 15790  010142  6EDE               	movwf	postinc2,c
 15791  010144  0E0F               	movlw	15
 15792  010146  6EDD               	movwf	postdec2,c
 15793                           
 15794                           ; BSR set to: 0
 15795                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 15796  010148  EE20 F009          	lfsr	2,9
 15797  01014C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15798  01014E  26D9               	addwf	fsr2l,f,c
 15799  010150  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15800  010152  22DA               	addwfc	fsr2h,f,c
 15801  010154  0E6F               	movlw	111
 15802  010156                     L10:
 15803  010156  6EDE               	movwf	postinc2,c
 15804  010158  0E0F               	movlw	15
 15805  01015A  6EDD               	movwf	postdec2,c
 15806                           
 15807                           ;SPI.c: 68: break;
 15808  01015C  D008               	goto	l603
 15809  01015E                     l601:
 15810                           
 15811                           ; BSR set to: 0
 15812                           
 15813                           ; BSR set to: 0
 15814  01015E  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 15815                           
 15816                           ; Switch size 1, requested type "space"
 15817                           ; Number of cases is 2, Range of values is 0 to 1
 15818                           ; switch strategies available:
 15819                           ; Name         Instructions Cycles
 15820                           ; simple_byte            7     4 (average)
 15821                           ;	Chosen strategy is simple_byte
 15822  010160  0A00               	xorlw	0	; case 0
 15823  010162  B4D8               	btfsc	status,2,c
 15824  010164  D769               	goto	l602
 15825  010166  0A01               	xorlw	1	; case 1
 15826  010168  A4D8               	btfss	status,2,c
 15827  01016A  0012               	return	
 15828  01016C  D7AD               	goto	l604
 15829  01016E                     l603:
 15830                           
 15831                           ; BSR set to: 0
 15832                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 15833                           
 15834                           ; BSR set to: 0
 15835  01016E  EE20 F006          	lfsr	2,6
 15836  010172  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15837  010174  26D9               	addwf	fsr2l,f,c
 15838  010176  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15839  010178  22DA               	addwfc	fsr2h,f,c
 15840  01017A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15841  01017E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15842  010182  0E05               	movlw	5
 15843  010184  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15844  010186  0E00               	movlw	0
 15845  010188  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15846  01018A  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 15847                           
 15848                           ;SPI.c: 77: switch(pMode)
 15849  01018E  D08C               	goto	l607
 15850  010190                     
 15851                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 15852  010190  0100               	movlb	0	; () banked
 15853  010192  EE20 F006          	lfsr	2,6
 15854  010196  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15855  010198  26D9               	addwf	fsr2l,f,c
 15856  01019A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15857  01019C  22DA               	addwfc	fsr2h,f,c
 15858  01019E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15859  0101A2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15860  0101A6  0E04               	movlw	4
 15861  0101A8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15862  0101AA  0E00               	movlw	0
 15863  0101AC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15864  0101AE  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 15865                           
 15866                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 15867  0101B2  0100               	movlb	0	; () banked
 15868  0101B4  EE20 F003          	lfsr	2,3
 15869  0101B8  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15870  0101BA  26D9               	addwf	fsr2l,f,c
 15871  0101BC  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15872  0101BE  22DA               	addwfc	fsr2h,f,c
 15873  0101C0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15874  0101C4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15875  0101C8  0E06               	movlw	6
 15876  0101CA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15877  0101CC  0E00               	movlw	0
 15878  0101CE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15879  0101D0  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 15880                           
 15881                           ;SPI.c: 82: break;
 15882  0101D4  D078               	goto	l609
 15883  0101D6                     
 15884                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 15885  0101D6  0100               	movlb	0	; () banked
 15886  0101D8  EE20 F006          	lfsr	2,6
 15887  0101DC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15888  0101DE  26D9               	addwf	fsr2l,f,c
 15889  0101E0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15890  0101E2  22DA               	addwfc	fsr2h,f,c
 15891  0101E4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15892  0101E8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15893  0101EC  0E04               	movlw	4
 15894  0101EE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15895  0101F0  0E00               	movlw	0
 15896  0101F2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15897  0101F4  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 15898                           
 15899                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 15900  0101F8  0100               	movlb	0	; () banked
 15901  0101FA  EE20 F003          	lfsr	2,3
 15902  0101FE  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15903  010200  26D9               	addwf	fsr2l,f,c
 15904  010202  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15905  010204  22DA               	addwfc	fsr2h,f,c
 15906  010206  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15907  01020A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15908  01020E  0E06               	movlw	6
 15909  010210  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15910  010212  0E01               	movlw	1
 15911  010214  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15912  010216  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 15913                           
 15914                           ;SPI.c: 86: break;
 15915  01021A  D055               	goto	l609
 15916  01021C                     
 15917                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 15918  01021C  0100               	movlb	0	; () banked
 15919  01021E  EE20 F006          	lfsr	2,6
 15920  010222  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15921  010224  26D9               	addwf	fsr2l,f,c
 15922  010226  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15923  010228  22DA               	addwfc	fsr2h,f,c
 15924  01022A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15925  01022E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15926  010232  0E04               	movlw	4
 15927  010234  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15928  010236  0E01               	movlw	1
 15929  010238  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15930  01023A  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 15931                           
 15932                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 15933  01023E  0100               	movlb	0	; () banked
 15934  010240  EE20 F003          	lfsr	2,3
 15935  010244  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15936  010246  26D9               	addwf	fsr2l,f,c
 15937  010248  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15938  01024A  22DA               	addwfc	fsr2h,f,c
 15939  01024C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15940  010250  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15941  010254  0E06               	movlw	6
 15942  010256  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15943  010258  0E00               	movlw	0
 15944  01025A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15945  01025C  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 15946                           
 15947                           ;SPI.c: 90: break;
 15948  010260  D032               	goto	l609
 15949  010262                     
 15950                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 15951  010262  0100               	movlb	0	; () banked
 15952  010264  EE20 F006          	lfsr	2,6
 15953  010268  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15954  01026A  26D9               	addwf	fsr2l,f,c
 15955  01026C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15956  01026E  22DA               	addwfc	fsr2h,f,c
 15957  010270  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15958  010274  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15959  010278  0E04               	movlw	4
 15960  01027A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15961  01027C  0E01               	movlw	1
 15962  01027E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15963  010280  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 15964                           
 15965                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 15966  010284  0100               	movlb	0	; () banked
 15967  010286  EE20 F003          	lfsr	2,3
 15968  01028A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15969  01028C  26D9               	addwf	fsr2l,f,c
 15970  01028E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15971  010290  22DA               	addwfc	fsr2h,f,c
 15972  010292  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15973  010296  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15974  01029A  0E06               	movlw	6
 15975  01029C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15976  01029E  0E01               	movlw	1
 15977  0102A0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15978  0102A2  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 15979                           
 15980                           ;SPI.c: 94: break;
 15981  0102A6  D00F               	goto	l609
 15982  0102A8                     l607:
 15983  0102A8  0100               	movlb	0	; () banked
 15984  0102AA  5192               	movf	SPI_Init@pMode& (0+255),w,b
 15985                           
 15986                           ; Switch size 1, requested type "space"
 15987                           ; Number of cases is 4, Range of values is 0 to 3
 15988                           ; switch strategies available:
 15989                           ; Name         Instructions Cycles
 15990                           ; simple_byte           13     7 (average)
 15991                           ;	Chosen strategy is simple_byte
 15992  0102AC  0A00               	xorlw	0	; case 0
 15993  0102AE  B4D8               	btfsc	status,2,c
 15994  0102B0  D76F               	goto	l608
 15995  0102B2  0A01               	xorlw	1	; case 1
 15996  0102B4  B4D8               	btfsc	status,2,c
 15997  0102B6  D78F               	goto	l610
 15998  0102B8  0A03               	xorlw	3	; case 2
 15999  0102BA  B4D8               	btfsc	status,2,c
 16000  0102BC  D7AF               	goto	l611
 16001  0102BE  0A01               	xorlw	1	; case 3
 16002  0102C0  A4D8               	btfss	status,2,c
 16003  0102C2  0012               	return	
 16004  0102C4  D7CE               	goto	l612
 16005  0102C6                     l609:
 16006                           
 16007                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 16008                           
 16009                           ; BSR set to: 0
 16010  0102C6  0100               	movlb	0	; () banked
 16011  0102C8  EE20 F006          	lfsr	2,6
 16012  0102CC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16013  0102CE  26D9               	addwf	fsr2l,f,c
 16014  0102D0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16015  0102D2  22DA               	addwfc	fsr2h,f,c
 16016  0102D4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16017  0102D8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16018  0102DC  0E07               	movlw	7
 16019  0102DE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16020  0102E0  0E00               	movlw	0
 16021  0102E2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16022  0102E4  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 16023                           
 16024                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 16025  0102E8  0100               	movlb	0	; () banked
 16026  0102EA  EE20 F006          	lfsr	2,6
 16027  0102EE  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16028  0102F0  26D9               	addwf	fsr2l,f,c
 16029  0102F2  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16030  0102F4  22DA               	addwfc	fsr2h,f,c
 16031  0102F6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16032  0102FA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16033  0102FE  0E06               	movlw	6
 16034  010300  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16035  010302  0E00               	movlw	0
 16036  010304  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16037  010306  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 16038                           
 16039                           ;SPI.c: 106: Timer2_Init(pClock);
 16040  01030A  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 16041  01030E  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 16042  010312  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 16043  010316  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 16044  01031A  EC4C  F097         	call	_Timer2_Init	;wreg free
 16045                           
 16046                           ;SPI.c: 112: SPI_DisableISR(pInput);
 16047  01031E  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 16048  010322  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 16049  010326  ECB0  F0AB         	call	_SPI_DisableISR	;wreg free
 16050                           
 16051                           ;SPI.c: 116: switch (pChannel)
 16052  01032A  D004               	goto	l614
 16053  01032C                     l615:
 16054                           
 16055                           ; BSR set to: 0
 16056  01032C  869F               	bsf	3999,3,c	;volatile
 16057  01032E  D00B               	goto	l616
 16058  010330                     l617:
 16059                           
 16060                           ; BSR set to: 0
 16061  010330  8EA5               	bsf	4005,7,c	;volatile
 16062  010332  D009               	goto	l616
 16063  010334                     l614:
 16064                           
 16065                           ; BSR set to: 0
 16066  010334  0100               	movlb	0	; () banked
 16067  010336  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 16068                           
 16069                           ; Switch size 1, requested type "space"
 16070                           ; Number of cases is 2, Range of values is 0 to 1
 16071                           ; switch strategies available:
 16072                           ; Name         Instructions Cycles
 16073                           ; simple_byte            7     4 (average)
 16074                           ;	Chosen strategy is simple_byte
 16075  010338  0A00               	xorlw	0	; case 0
 16076  01033A  B4D8               	btfsc	status,2,c
 16077  01033C  D7F7               	goto	l615
 16078  01033E  0A01               	xorlw	1	; case 1
 16079  010340  A4D8               	btfss	status,2,c
 16080  010342  0012               	return	
 16081  010344  D7F5               	goto	l617
 16082  010346                     l616:
 16083                           
 16084                           ; BSR set to: 0
 16085                           ;SPI.c: 124: SPI_DCS(pInput);
 16086                           
 16087                           ; BSR set to: 0
 16088  010346  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 16089  01034A  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 16090  01034E  EC3B  F0AB         	call	_SPI_DCS	;wreg free
 16091                           
 16092                           ;SPI.c: 126: pInput->mBusy = 0;
 16093  010352  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 16094  010356  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 16095  01035A  0E00               	movlw	0
 16096  01035C  6EDF               	movwf	indf2,c
 16097                           
 16098                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 16099  01035E  0100               	movlb	0	; () banked
 16100  010360  EE20 F006          	lfsr	2,6
 16101  010364  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16102  010366  26D9               	addwf	fsr2l,f,c
 16103  010368  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16104  01036A  22DA               	addwfc	fsr2h,f,c
 16105  01036C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 16106  010370  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 16107  010374  0E00               	movlw	0
 16108  010376  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 16109  010378  0E03               	movlw	3
 16110  01037A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 16111  01037C  EC54  F0AC         	call	_Byte_SetQuad	;wreg free
 16112                           
 16113                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 16114  010380  0100               	movlb	0	; () banked
 16115  010382  EE20 F006          	lfsr	2,6
 16116  010386  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16117  010388  26D9               	addwf	fsr2l,f,c
 16118  01038A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16119  01038C  22DA               	addwfc	fsr2h,f,c
 16120  01038E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16121  010392  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16122  010396  0E05               	movlw	5
 16123  010398  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16124  01039A  0E01               	movlw	1
 16125  01039C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16126  01039E  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 16127  0103A2  0012               	return		;funcret
 16128  0103A4                     __end_of_SPI_Init:
 16129                           	opt stack 0
 16130                           tosu	equ	0xFFF
 16131                           tosh	equ	0xFFE
 16132                           tosl	equ	0xFFD
 16133                           pclath	equ	0xFFA
 16134                           tblptru	equ	0xFF8
 16135                           tblptrh	equ	0xFF7
 16136                           tblptrl	equ	0xFF6
 16137                           tablat	equ	0xFF5
 16138                           prodh	equ	0xFF4
 16139                           prodl	equ	0xFF3
 16140                           intcon	equ	0xFF2
 16141                           postinc0	equ	0xFEE
 16142                           wreg	equ	0xFE8
 16143                           indf1	equ	0xFE7
 16144                           postdec1	equ	0xFE5
 16145                           fsr1h	equ	0xFE2
 16146                           fsr1l	equ	0xFE1
 16147                           indf2	equ	0xFDF
 16148                           postinc2	equ	0xFDE
 16149                           postdec2	equ	0xFDD
 16150                           plusw2	equ	0xFDB
 16151                           fsr2h	equ	0xFDA
 16152                           fsr2l	equ	0xFD9
 16153                           status	equ	0xFD8
 16154                           
 16155 ;; *************** function _Timer2_Init *****************
 16156 ;; Defined at:
 16157 ;;		line 10 in file "Library/Timer2.c"
 16158 ;; Parameters:    Size  Location     Type
 16159 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 16160 ;; Auto vars:     Size  Location     Type
 16161 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 16162 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 16163 ;;  RDIV            4   18[BANK0 ] unsigned long 
 16164 ;; Return value:  Size  Location     Type
 16165 ;;                  1    wreg      void 
 16166 ;; Registers used:
 16167 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16168 ;; Tracked objects:
 16169 ;;		On entry : 0/0
 16170 ;;		On exit  : 0/0
 16171 ;;		Unchanged: 0/0
 16172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16173 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16174 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16176 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16177 ;;Total ram usage:       17 bytes
 16178 ;; Hardware stack levels used:    1
 16179 ;; Hardware stack levels required when called:    8
 16180 ;; This function calls:
 16181 ;;		_Timer2_Clear
 16182 ;;		___lldiv
 16183 ;; This function is called by:
 16184 ;;		_SPI_Init
 16185 ;; This function uses a non-reentrant model
 16186 ;;
 16187                           
 16188                           	psect	text86
 16189  012E98                     __ptext86:
 16190                           	opt stack 0
 16191  012E98                     _Timer2_Init:
 16192                           	opt stack 19
 16193                           
 16194                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 16195                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 16196                           ;Timer2.c: 14: static UINT8 PRE = 0;
 16197                           ;Timer2.c: 15: static UINT32 DIV = 0;
 16198                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 16199                           
 16200                           ;incstack = 0
 16201  012E98  0E00               	movlw	0
 16202  012E9A  0100               	movlb	0	; () banked
 16203  012E9C  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 16204  012E9E  0E6C               	movlw	108
 16205  012EA0  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 16206  012EA2  0EDC               	movlw	220
 16207  012EA4  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 16208  012EA6  0E02               	movlw	2
 16209  012EA8  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 16210                           
 16211                           ; BSR set to: 0
 16212                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 16213                           ;Timer2.c: 20: pFrequency *= 2;
 16214  012EAA  90D8               	bcf	status,0,c
 16215  012EAC  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 16216  012EAE  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 16217  012EB0  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 16218  012EB2  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 16219                           
 16220                           ; BSR set to: 0
 16221                           ;Timer2.c: 23: pCPUClock /= 4;
 16222  012EB4  0E02               	movlw	2
 16223  012EB6  6F71               	movwf	??_Timer2_Init& (0+255),b
 16224  012EB8                     u11315:
 16225  012EB8  90D8               	bcf	status,0,c
 16226  012EBA  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 16227  012EBC  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 16228  012EBE  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 16229  012EC0  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 16230  012EC2  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 16231  012EC4  D7F9               	goto	u11315
 16232                           
 16233                           ; BSR set to: 0
 16234                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 16235  012EC6  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 16236  012ECA  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 16237  012ECE  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 16238  012ED2  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 16239  012ED6  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 16240  012EDA  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 16241  012EDE  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 16242  012EE2  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 16243  012EE6  ECAF  F0A2         	call	___lldiv	;wreg free
 16244  012EEA  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 16245  012EEE  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 16246  012EF2  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 16247  012EF6  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 16248                           
 16249                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 16250  012EFA  D00E               	goto	l1828
 16251  012EFC                     l13995:
 16252                           
 16253                           ;Timer2.c: 28: {
 16254                           ;Timer2.c: 29: RDIV = 0;
 16255  012EFC  0E00               	movlw	0
 16256  012EFE  0100               	movlb	0	; () banked
 16257  012F00  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 16258  012F02  0E00               	movlw	0
 16259  012F04  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 16260  012F06  0E00               	movlw	0
 16261  012F08  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 16262  012F0A  0E00               	movlw	0
 16263  012F0C  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 16264                           
 16265                           ; BSR set to: 0
 16266                           ;Timer2.c: 30: INDEX ++;
 16267  012F0E  2BF0               	incf	Timer2_Init@INDEX& (0+255),f,b
 16268                           
 16269                           ; BSR set to: 0
 16270                           ;Timer2.c: 31: if (INDEX >= 3)
 16271  012F10  0E02               	movlw	2
 16272  012F12  65F0               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 16273  012F14  D001               	goto	l1828
 16274  012F16  D023               	goto	u11330
 16275  012F18                     l1828:
 16276                           
 16277                           ; BSR set to: 0
 16278                           
 16279                           ; BSR set to: 0
 16280  012F18  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 16281  012F1C  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 16282  012F20  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 16283  012F24  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 16284  012F28  0100               	movlb	0	; () banked
 16285  012F2A  51F0               	movf	Timer2_Init@INDEX& (0+255),w,b
 16286  012F2C  0D01               	mullw	1
 16287  012F2E  0E7A               	movlw	low Timer2_Init@PRESCALE
 16288  012F30  24F3               	addwf	prodl,w,c
 16289  012F32  6EF6               	movwf	tblptrl,c
 16290  012F34  0EFC               	movlw	high Timer2_Init@PRESCALE
 16291  012F36  20F4               	addwfc	prodh,w,c
 16292  012F38  6EF7               	movwf	tblptrh,c
 16293  012F3A                     	if	1	;There are 3 active tblptr bytes
 16294  012F3A  6AF8               	clrf	tblptru,c
 16295  012F3C  0E00               	movlw	low (__mediumconst shr (0+16))
 16296  012F3E  22F8               	addwfc	tblptru,f,c
 16297  012F40                     	endif
 16298  012F40  0008               	tblrd		*
 16299  012F42  50F5               	movf	tablat,w,c
 16300  012F44  6F64               	movwf	___lldiv@divisor& (0+255),b
 16301  012F46  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 16302  012F48  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 16303  012F4A  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 16304  012F4C  ECAF  F0A2         	call	___lldiv	;wreg free
 16305  012F50  0100               	movlb	0	; () banked
 16306  012F52  5163               	movf	(?___lldiv+3)& (0+255),w,b
 16307  012F54  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 16308  012F56  E1D2               	bnz	l13995
 16309  012F58  0561               	decf	(?___lldiv+1)& (0+255),w,b
 16310  012F5A  B0D8               	btfsc	status,0,c
 16311  012F5C  D7CF               	goto	l1827
 16312  012F5E                     u11330:
 16313                           
 16314                           ; BSR set to: 0
 16315                           ;Timer2.c: 33: }
 16316                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 16317                           
 16318                           ; BSR set to: 0
 16319  012F5E  50CA               	movf	4042,w,c	;volatile
 16320  012F60  19F0               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 16321  012F62  0BFC               	andlw	-4
 16322  012F64  19F0               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 16323  012F66  6ECA               	movwf	4042,c	;volatile
 16324                           
 16325                           ; BSR set to: 0
 16326                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 16327  012F68  84CA               	bsf	4042,2,c	;volatile
 16328                           
 16329                           ; BSR set to: 0
 16330                           ;Timer2.c: 44: Timer2_Clear();
 16331  012F6A  EC9A  F0AD         	call	_Timer2_Clear	;wreg free
 16332                           
 16333                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 16334  012F6E  0100               	movlb	0	; () banked
 16335  012F70  51F0               	movf	Timer2_Init@INDEX& (0+255),w,b
 16336  012F72  0D01               	mullw	1
 16337  012F74  0E7A               	movlw	low Timer2_Init@PRESCALE
 16338  012F76  24F3               	addwf	prodl,w,c
 16339  012F78  6EF6               	movwf	tblptrl,c
 16340  012F7A  0EFC               	movlw	high Timer2_Init@PRESCALE
 16341  012F7C  20F4               	addwfc	prodh,w,c
 16342  012F7E  6EF7               	movwf	tblptrh,c
 16343  012F80                     	if	1	;There are 3 active tblptr bytes
 16344  012F80  6AF8               	clrf	tblptru,c
 16345  012F82  0E00               	movlw	low (__mediumconst shr (0+16))
 16346  012F84  22F8               	addwfc	tblptru,f,c
 16347  012F86                     	endif
 16348  012F86  0008               	tblrd		*
 16349  012F88  CFF5 F0EF          	movff	tablat,Timer2_Init@PRE
 16350                           
 16351                           ; BSR set to: 0
 16352                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 16353  012F8C  0EFF               	movlw	255
 16354  012F8E  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 16355  012F90  0101               	movlb	1	; () banked
 16356  012F92  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 16357  012F94  0EFF               	movlw	255
 16358  012F96  0100               	movlb	0	; () banked
 16359  012F98  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 16360  012F9A  0101               	movlb	1	; () banked
 16361  012F9C  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 16362  012F9E  0EFF               	movlw	255
 16363  012FA0  0100               	movlb	0	; () banked
 16364  012FA2  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 16365  012FA4  0101               	movlb	1	; () banked
 16366  012FA6  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 16367  012FA8  0EFF               	movlw	255
 16368  012FAA  0100               	movlb	0	; () banked
 16369  012FAC  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 16370  012FAE  0101               	movlb	1	; () banked
 16371  012FB0  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 16372                           
 16373                           ; BSR set to: 1
 16374                           ;Timer2.c: 48: INDEX = DIV/PRE;
 16375  012FB2  C100  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 16376  012FB6  C101  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 16377  012FBA  C102  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 16378  012FBE  C103  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 16379  012FC2  0100               	movlb	0	; () banked
 16380  012FC4  51EF               	movf	Timer2_Init@PRE& (0+255),w,b
 16381  012FC6  6F64               	movwf	___lldiv@divisor& (0+255),b
 16382  012FC8  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 16383  012FCA  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 16384  012FCC  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 16385  012FCE  ECAF  F0A2         	call	___lldiv	;wreg free
 16386  012FD2  0100               	movlb	0	; () banked
 16387  012FD4  5160               	movf	?___lldiv& (0+255),w,b
 16388  012FD6  6FF0               	movwf	Timer2_Init@INDEX& (0+255),b
 16389                           
 16390                           ; BSR set to: 0
 16391                           ;Timer2.c: 49: PR2 = INDEX;
 16392  012FD8  C0F0  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 16393                           
 16394                           ; BSR set to: 0
 16395  012FDC  0012               	return		;funcret
 16396  012FDE                     __end_of_Timer2_Init:
 16397                           	opt stack 0
 16398                           tosu	equ	0xFFF
 16399                           tosh	equ	0xFFE
 16400                           tosl	equ	0xFFD
 16401                           pclath	equ	0xFFA
 16402                           tblptru	equ	0xFF8
 16403                           tblptrh	equ	0xFF7
 16404                           tblptrl	equ	0xFF6
 16405                           tablat	equ	0xFF5
 16406                           prodh	equ	0xFF4
 16407                           prodl	equ	0xFF3
 16408                           intcon	equ	0xFF2
 16409                           postinc0	equ	0xFEE
 16410                           wreg	equ	0xFE8
 16411                           indf1	equ	0xFE7
 16412                           postdec1	equ	0xFE5
 16413                           fsr1h	equ	0xFE2
 16414                           fsr1l	equ	0xFE1
 16415                           indf2	equ	0xFDF
 16416                           postinc2	equ	0xFDE
 16417                           postdec2	equ	0xFDD
 16418                           plusw2	equ	0xFDB
 16419                           fsr2h	equ	0xFDA
 16420                           fsr2l	equ	0xFD9
 16421                           status	equ	0xFD8
 16422                           
 16423 ;; *************** function ___lldiv *****************
 16424 ;; Defined at:
 16425 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 16426 ;; Parameters:    Size  Location     Type
 16427 ;;  dividend        4    0[BANK0 ] unsigned long 
 16428 ;;  divisor         4    4[BANK0 ] unsigned long 
 16429 ;; Auto vars:     Size  Location     Type
 16430 ;;  quotient        4    8[BANK0 ] unsigned long 
 16431 ;;  counter         1   12[BANK0 ] unsigned char 
 16432 ;; Return value:  Size  Location     Type
 16433 ;;                  4    0[BANK0 ] unsigned long 
 16434 ;; Registers used:
 16435 ;;		wreg, status,2, status,0
 16436 ;; Tracked objects:
 16437 ;;		On entry : 0/0
 16438 ;;		On exit  : 0/0
 16439 ;;		Unchanged: 0/0
 16440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16441 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16442 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16444 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16445 ;;Total ram usage:       13 bytes
 16446 ;; Hardware stack levels used:    1
 16447 ;; Hardware stack levels required when called:    7
 16448 ;; This function calls:
 16449 ;;		Nothing
 16450 ;; This function is called by:
 16451 ;;		_Timer2_Init
 16452 ;;		_rand_between
 16453 ;;		_I2C_Init
 16454 ;;		_Timer0_Init
 16455 ;; This function uses a non-reentrant model
 16456 ;;
 16457                           
 16458                           	psect	text87
 16459  01455E                     __ptext87:
 16460                           	opt stack 0
 16461  01455E                     ___lldiv:
 16462                           	opt stack 19
 16463                           
 16464                           ; BSR set to: 0
 16465                           ;incstack = 0
 16466  01455E  0E00               	movlw	0
 16467  014560  0100               	movlb	0	; () banked
 16468  014562  6F68               	movwf	___lldiv@quotient& (0+255),b
 16469  014564  0E00               	movlw	0
 16470  014566  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 16471  014568  0E00               	movlw	0
 16472  01456A  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 16473  01456C  0E00               	movlw	0
 16474  01456E  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 16475                           
 16476                           ; BSR set to: 0
 16477  014570  5164               	movf	___lldiv@divisor& (0+255),w,b
 16478  014572  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 16479  014574  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 16480  014576  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 16481  014578  B4D8               	btfsc	status,2,c
 16482  01457A  D02A               	goto	l2810
 16483                           
 16484                           ; BSR set to: 0
 16485  01457C  0E01               	movlw	1
 16486  01457E  6F6C               	movwf	___lldiv@counter& (0+255),b
 16487  014580  D006               	goto	l2805
 16488  014582                     
 16489                           ; BSR set to: 0
 16490                           
 16491                           ; BSR set to: 0
 16492  014582  90D8               	bcf	status,0,c
 16493  014584  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 16494  014586  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 16495  014588  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 16496  01458A  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 16497  01458C  2B6C               	incf	___lldiv@counter& (0+255),f,b
 16498  01458E                     l2805:
 16499                           
 16500                           ; BSR set to: 0
 16501                           
 16502                           ; BSR set to: 0
 16503  01458E  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 16504  014590  D7F8               	goto	l2806
 16505  014592                     u11010:
 16506                           
 16507                           ; BSR set to: 0
 16508                           
 16509                           ; BSR set to: 0
 16510                           
 16511                           ; BSR set to: 0
 16512  014592  90D8               	bcf	status,0,c
 16513  014594  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 16514  014596  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 16515  014598  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 16516  01459A  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 16517                           
 16518                           ; BSR set to: 0
 16519  01459C  5164               	movf	___lldiv@divisor& (0+255),w,b
 16520  01459E  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 16521  0145A0  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16522  0145A2  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 16523  0145A4  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16524  0145A6  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 16525  0145A8  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16526  0145AA  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 16527  0145AC  A0D8               	btfss	status,0,c
 16528  0145AE  D009               	goto	l2809
 16529                           
 16530                           ; BSR set to: 0
 16531  0145B0  5164               	movf	___lldiv@divisor& (0+255),w,b
 16532  0145B2  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 16533  0145B4  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16534  0145B6  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 16535  0145B8  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16536  0145BA  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 16537  0145BC  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16538  0145BE  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 16539                           
 16540                           ; BSR set to: 0
 16541  0145C0  8168               	bsf	___lldiv@quotient& (0+255),0,b
 16542  0145C2                     l2809:
 16543                           
 16544                           ; BSR set to: 0
 16545                           
 16546                           ; BSR set to: 0
 16547  0145C2  90D8               	bcf	status,0,c
 16548  0145C4  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 16549  0145C6  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 16550  0145C8  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 16551  0145CA  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 16552                           
 16553                           ; BSR set to: 0
 16554  0145CC  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 16555  0145CE  D7E1               	goto	u11010
 16556  0145D0                     l2810:
 16557                           
 16558                           ; BSR set to: 0
 16559                           
 16560                           ; BSR set to: 0
 16561  0145D0  C068  F060         	movff	___lldiv@quotient,?___lldiv
 16562  0145D4  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 16563  0145D8  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 16564  0145DC  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 16565                           
 16566                           ; BSR set to: 0
 16567  0145E0  0012               	return		;funcret
 16568  0145E2                     __end_of___lldiv:
 16569                           	opt stack 0
 16570                           tosu	equ	0xFFF
 16571                           tosh	equ	0xFFE
 16572                           tosl	equ	0xFFD
 16573                           pclath	equ	0xFFA
 16574                           tblptru	equ	0xFF8
 16575                           tblptrh	equ	0xFF7
 16576                           tblptrl	equ	0xFF6
 16577                           tablat	equ	0xFF5
 16578                           prodh	equ	0xFF4
 16579                           prodl	equ	0xFF3
 16580                           intcon	equ	0xFF2
 16581                           postinc0	equ	0xFEE
 16582                           wreg	equ	0xFE8
 16583                           indf1	equ	0xFE7
 16584                           postdec1	equ	0xFE5
 16585                           fsr1h	equ	0xFE2
 16586                           fsr1l	equ	0xFE1
 16587                           indf2	equ	0xFDF
 16588                           postinc2	equ	0xFDE
 16589                           postdec2	equ	0xFDD
 16590                           plusw2	equ	0xFDB
 16591                           fsr2h	equ	0xFDA
 16592                           fsr2l	equ	0xFD9
 16593                           status	equ	0xFD8
 16594                           
 16595 ;; *************** function _Timer2_Clear *****************
 16596 ;; Defined at:
 16597 ;;		line 3 in file "Library/Timer2.c"
 16598 ;; Parameters:    Size  Location     Type
 16599 ;;		None
 16600 ;; Auto vars:     Size  Location     Type
 16601 ;;		None
 16602 ;; Return value:  Size  Location     Type
 16603 ;;                  1    wreg      void 
 16604 ;; Registers used:
 16605 ;;		None
 16606 ;; Tracked objects:
 16607 ;;		On entry : 0/0
 16608 ;;		On exit  : 0/0
 16609 ;;		Unchanged: 0/0
 16610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16615 ;;Total ram usage:        0 bytes
 16616 ;; Hardware stack levels used:    1
 16617 ;; Hardware stack levels required when called:    7
 16618 ;; This function calls:
 16619 ;;		Nothing
 16620 ;; This function is called by:
 16621 ;;		_Timer2_Init
 16622 ;; This function uses a non-reentrant model
 16623 ;;
 16624                           
 16625                           	psect	text88
 16626  015B34                     __ptext88:
 16627                           	opt stack 0
 16628  015B34                     _Timer2_Clear:
 16629                           	opt stack 19
 16630                           
 16631                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 16632                           
 16633                           ; BSR set to: 0
 16634                           ;incstack = 0
 16635  015B34  929E               	bcf	3998,1,c	;volatile
 16636                           
 16637                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 16638  015B36  929D               	bcf	3997,1,c	;volatile
 16639                           
 16640                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 16641  015B38  929F               	bcf	3999,1,c	;volatile
 16642  015B3A  0012               	return		;funcret
 16643  015B3C                     __end_of_Timer2_Clear:
 16644                           	opt stack 0
 16645                           tosu	equ	0xFFF
 16646                           tosh	equ	0xFFE
 16647                           tosl	equ	0xFFD
 16648                           pclath	equ	0xFFA
 16649                           tblptru	equ	0xFF8
 16650                           tblptrh	equ	0xFF7
 16651                           tblptrl	equ	0xFF6
 16652                           tablat	equ	0xFF5
 16653                           prodh	equ	0xFF4
 16654                           prodl	equ	0xFF3
 16655                           intcon	equ	0xFF2
 16656                           postinc0	equ	0xFEE
 16657                           wreg	equ	0xFE8
 16658                           indf1	equ	0xFE7
 16659                           postdec1	equ	0xFE5
 16660                           fsr1h	equ	0xFE2
 16661                           fsr1l	equ	0xFE1
 16662                           indf2	equ	0xFDF
 16663                           postinc2	equ	0xFDE
 16664                           postdec2	equ	0xFDD
 16665                           plusw2	equ	0xFDB
 16666                           fsr2h	equ	0xFDA
 16667                           fsr2l	equ	0xFD9
 16668                           status	equ	0xFD8
 16669                           
 16670 ;; *************** function _SPI_DisableISR *****************
 16671 ;; Defined at:
 16672 ;;		line 181 in file "Library/SPI.c"
 16673 ;; Parameters:    Size  Location     Type
 16674 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16675 ;;		 -> SPI1(11), SPI2(11), 
 16676 ;; Auto vars:     Size  Location     Type
 16677 ;;		None
 16678 ;; Return value:  Size  Location     Type
 16679 ;;                  1    wreg      void 
 16680 ;; Registers used:
 16681 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16682 ;; Tracked objects:
 16683 ;;		On entry : 0/0
 16684 ;;		On exit  : 0/0
 16685 ;;		Unchanged: 0/0
 16686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16687 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16690 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16691 ;;Total ram usage:        2 bytes
 16692 ;; Hardware stack levels used:    1
 16693 ;; Hardware stack levels required when called:    7
 16694 ;; This function calls:
 16695 ;;		Nothing
 16696 ;; This function is called by:
 16697 ;;		_SPI_Init
 16698 ;; This function uses a non-reentrant model
 16699 ;;
 16700                           
 16701                           	psect	text89
 16702  015760                     __ptext89:
 16703                           	opt stack 0
 16704  015760                     _SPI_DisableISR:
 16705                           	opt stack 20
 16706                           
 16707                           ;SPI.c: 183: switch (pInput->mChannel)
 16708                           
 16709                           ;incstack = 0
 16710  015760  D004               	goto	l654
 16711  015762                     l655:
 16712                           
 16713                           ; BSR set to: 0
 16714  015762  969D               	bcf	3997,3,c	;volatile
 16715  015764  0012               	return	
 16716  015766                     l657:
 16717                           
 16718                           ; BSR set to: 0
 16719  015766  9EA3               	bcf	4003,7,c	;volatile
 16720                           
 16721                           ; BSR set to: 0
 16722                           ;SPI.c: 188: };
 16723                           
 16724                           ; BSR set to: 0
 16725                           
 16726                           ;SPI.c: 187: default: return;
 16727  015768  0012               	return	
 16728  01576A                     l654:
 16729                           
 16730                           ; BSR set to: 0
 16731  01576A  0100               	movlb	0	; () banked
 16732  01576C  EE20 F002          	lfsr	2,2
 16733  015770  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 16734  015772  26D9               	addwf	fsr2l,f,c
 16735  015774  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 16736  015776  22DA               	addwfc	fsr2h,f,c
 16737  015778  50DF               	movf	indf2,w,c
 16738                           
 16739                           ; Switch size 1, requested type "space"
 16740                           ; Number of cases is 2, Range of values is 0 to 1
 16741                           ; switch strategies available:
 16742                           ; Name         Instructions Cycles
 16743                           ; simple_byte            7     4 (average)
 16744                           ;	Chosen strategy is simple_byte
 16745  01577A  0A00               	xorlw	0	; case 0
 16746  01577C  B4D8               	btfsc	status,2,c
 16747  01577E  D7F1               	goto	l655
 16748  015780  0A01               	xorlw	1	; case 1
 16749  015782  A4D8               	btfss	status,2,c
 16750  015784  0012               	return	
 16751  015786  D7EF               	goto	l657
 16752  015788                     __end_of_SPI_DisableISR:
 16753                           	opt stack 0
 16754                           tosu	equ	0xFFF
 16755                           tosh	equ	0xFFE
 16756                           tosl	equ	0xFFD
 16757                           pclath	equ	0xFFA
 16758                           tblptru	equ	0xFF8
 16759                           tblptrh	equ	0xFF7
 16760                           tblptrl	equ	0xFF6
 16761                           tablat	equ	0xFF5
 16762                           prodh	equ	0xFF4
 16763                           prodl	equ	0xFF3
 16764                           intcon	equ	0xFF2
 16765                           postinc0	equ	0xFEE
 16766                           wreg	equ	0xFE8
 16767                           indf1	equ	0xFE7
 16768                           postdec1	equ	0xFE5
 16769                           fsr1h	equ	0xFE2
 16770                           fsr1l	equ	0xFE1
 16771                           indf2	equ	0xFDF
 16772                           postinc2	equ	0xFDE
 16773                           postdec2	equ	0xFDD
 16774                           plusw2	equ	0xFDB
 16775                           fsr2h	equ	0xFDA
 16776                           fsr2l	equ	0xFD9
 16777                           status	equ	0xFD8
 16778                           
 16779 ;; *************** function _SPI_DCS *****************
 16780 ;; Defined at:
 16781 ;;		line 219 in file "Library/SPI.c"
 16782 ;; Parameters:    Size  Location     Type
 16783 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16784 ;;		 -> SPI1(11), SPI2(11), 
 16785 ;; Auto vars:     Size  Location     Type
 16786 ;;		None
 16787 ;; Return value:  Size  Location     Type
 16788 ;;                  1    wreg      void 
 16789 ;; Registers used:
 16790 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16791 ;; Tracked objects:
 16792 ;;		On entry : 0/0
 16793 ;;		On exit  : 0/0
 16794 ;;		Unchanged: 0/0
 16795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16796 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16799 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16800 ;;Total ram usage:        2 bytes
 16801 ;; Hardware stack levels used:    1
 16802 ;; Hardware stack levels required when called:    7
 16803 ;; This function calls:
 16804 ;;		Nothing
 16805 ;; This function is called by:
 16806 ;;		_SPI_Init
 16807 ;; This function uses a non-reentrant model
 16808 ;;
 16809                           
 16810                           	psect	text90
 16811  015676                     __ptext90:
 16812                           	opt stack 0
 16813  015676                     _SPI_DCS:
 16814                           	opt stack 20
 16815                           
 16816                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 16817                           
 16818                           ; BSR set to: 0
 16819                           ;incstack = 0
 16820  015676  0100               	movlb	0	; () banked
 16821  015678  EE20 F002          	lfsr	2,2
 16822  01567C  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 16823  01567E  26D9               	addwf	fsr2l,f,c
 16824  015680  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 16825  015682  22DA               	addwfc	fsr2h,f,c
 16826  015684  50DF               	movf	indf2,w,c
 16827  015686  A4D8               	btfss	status,2,c
 16828  015688  D007               	goto	l673
 16829                           
 16830                           ; BSR set to: 0
 16831                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 16832  01568A  C1B3  FFD9         	movff	_PortC+4,fsr2l
 16833  01568E  C1B4  FFDA         	movff	_PortC+5,fsr2h
 16834  015692  0101               	movlb	1	; () banked
 16835  015694  84DF               	bsf	indf2,2,c
 16836  015696  0012               	return	
 16837  015698                     l673:
 16838                           
 16839                           ;SPI.c: 223: else
 16840                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 16841                           
 16842                           ; BSR set to: 1
 16843  015698  C19F  FFD9         	movff	_PortD+4,fsr2l
 16844  01569C  C1A0  FFDA         	movff	_PortD+5,fsr2h
 16845  0156A0  0101               	movlb	1	; () banked
 16846  0156A2  8EDF               	bsf	indf2,7,c
 16847  0156A4  0012               	return	
 16848  0156A6                     __end_of_SPI_DCS:
 16849                           	opt stack 0
 16850                           tosu	equ	0xFFF
 16851                           tosh	equ	0xFFE
 16852                           tosl	equ	0xFFD
 16853                           pclath	equ	0xFFA
 16854                           tblptru	equ	0xFF8
 16855                           tblptrh	equ	0xFF7
 16856                           tblptrl	equ	0xFF6
 16857                           tablat	equ	0xFF5
 16858                           prodh	equ	0xFF4
 16859                           prodl	equ	0xFF3
 16860                           intcon	equ	0xFF2
 16861                           postinc0	equ	0xFEE
 16862                           wreg	equ	0xFE8
 16863                           indf1	equ	0xFE7
 16864                           postdec1	equ	0xFE5
 16865                           fsr1h	equ	0xFE2
 16866                           fsr1l	equ	0xFE1
 16867                           indf2	equ	0xFDF
 16868                           postinc2	equ	0xFDE
 16869                           postdec2	equ	0xFDD
 16870                           plusw2	equ	0xFDB
 16871                           fsr2h	equ	0xFDA
 16872                           fsr2l	equ	0xFD9
 16873                           status	equ	0xFD8
 16874                           
 16875 ;; *************** function _FunctInitButton *****************
 16876 ;; Defined at:
 16877 ;;		line 16 in file "Functions.c"
 16878 ;; Parameters:    Size  Location     Type
 16879 ;;		None
 16880 ;; Auto vars:     Size  Location     Type
 16881 ;;		None
 16882 ;; Return value:  Size  Location     Type
 16883 ;;                  1    wreg      void 
 16884 ;; Registers used:
 16885 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16886 ;; Tracked objects:
 16887 ;;		On entry : 0/0
 16888 ;;		On exit  : 0/0
 16889 ;;		Unchanged: 0/0
 16890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16895 ;;Total ram usage:        0 bytes
 16896 ;; Hardware stack levels used:    1
 16897 ;; Hardware stack levels required when called:   16
 16898 ;; This function calls:
 16899 ;;		_Button_Init
 16900 ;; This function is called by:
 16901 ;;		_main
 16902 ;; This function uses a non-reentrant model
 16903 ;;
 16904                           
 16905                           	psect	text91
 16906  014846                     __ptext91:
 16907                           	opt stack 0
 16908  014846                     _FunctInitButton:
 16909                           	opt stack 14
 16910                           
 16911                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 16912                           
 16913                           ; BSR set to: 1
 16914                           ;incstack = 0
 16915  014846  0EDD               	movlw	low _TestButton
 16916  014848  0100               	movlb	0	; () banked
 16917  01484A  6F9B               	movwf	Button_Init@pInput& (0+255),b
 16918  01484C  0E02               	movlw	high _TestButton
 16919  01484E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 16920  014850  0E00               	movlw	0
 16921  014852  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16922  014854  0E02               	movlw	2
 16923  014856  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16924  014858  0ECA               	movlw	low _MXK_InitTestButton
 16925  01485A  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 16926  01485C  0E59               	movlw	high _MXK_InitTestButton
 16927  01485E  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16928  014860  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 16929  014862  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16930  014864  0E86               	movlw	low _MXK_TestButton
 16931  014866  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 16932  014868  0E5A               	movlw	high _MXK_TestButton
 16933  01486A  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16934  01486C  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 16935  01486E  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16936  014870  0EE0               	movlw	low _Event_TestButton
 16937  014872  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 16938  014874  0E55               	movlw	high _Event_TestButton
 16939  014876  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16940  014878  0E01               	movlw	low (_Event_TestButton shr (0+16))
 16941  01487A  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16942  01487C  EC8C  F09E         	call	_Button_Init	;wreg free
 16943                           
 16944                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 16945  014880  0ED3               	movlw	low _DIPSwitch
 16946  014882  0100               	movlb	0	; () banked
 16947  014884  6F9B               	movwf	Button_Init@pInput& (0+255),b
 16948  014886  0E02               	movlw	high _DIPSwitch
 16949  014888  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 16950  01488A  0E00               	movlw	0
 16951  01488C  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16952  01488E  0E02               	movlw	2
 16953  014890  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16954  014892  0EB2               	movlw	low _MXK_InitDIPSwitch
 16955  014894  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 16956  014896  0E59               	movlw	high _MXK_InitDIPSwitch
 16957  014898  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16958  01489A  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 16959  01489C  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16960  01489E  0E0E               	movlw	low _MXK_DIPSwitch
 16961  0148A0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 16962  0148A2  0E5A               	movlw	high _MXK_DIPSwitch
 16963  0148A4  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16964  0148A6  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 16965  0148A8  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16966  0148AA  0ED8               	movlw	low _Event_DIPSwitch
 16967  0148AC  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 16968  0148AE  0E57               	movlw	high _Event_DIPSwitch
 16969  0148B0  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16970  0148B2  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 16971  0148B4  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16972  0148B6  EC8C  F09E         	call	_Button_Init	;wreg free
 16973  0148BA  0012               	return		;funcret
 16974  0148BC                     __end_of_FunctInitButton:
 16975                           	opt stack 0
 16976                           tosu	equ	0xFFF
 16977                           tosh	equ	0xFFE
 16978                           tosl	equ	0xFFD
 16979                           pclath	equ	0xFFA
 16980                           tblptru	equ	0xFF8
 16981                           tblptrh	equ	0xFF7
 16982                           tblptrl	equ	0xFF6
 16983                           tablat	equ	0xFF5
 16984                           prodh	equ	0xFF4
 16985                           prodl	equ	0xFF3
 16986                           intcon	equ	0xFF2
 16987                           postinc0	equ	0xFEE
 16988                           wreg	equ	0xFE8
 16989                           indf1	equ	0xFE7
 16990                           postdec1	equ	0xFE5
 16991                           fsr1h	equ	0xFE2
 16992                           fsr1l	equ	0xFE1
 16993                           indf2	equ	0xFDF
 16994                           postinc2	equ	0xFDE
 16995                           postdec2	equ	0xFDD
 16996                           plusw2	equ	0xFDB
 16997                           fsr2h	equ	0xFDA
 16998                           fsr2l	equ	0xFD9
 16999                           status	equ	0xFD8
 17000                           
 17001 ;; *************** function _Button_Init *****************
 17002 ;; Defined at:
 17003 ;;		line 18 in file "Library/Button.c"
 17004 ;; Parameters:    Size  Location     Type
 17005 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 17006 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 17007 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 17008 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 17009 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 17010 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 17011 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 17012 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 17013 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 17014 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 17015 ;; Auto vars:     Size  Location     Type
 17016 ;;		None
 17017 ;; Return value:  Size  Location     Type
 17018 ;;                  1    wreg      void 
 17019 ;; Registers used:
 17020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17021 ;; Tracked objects:
 17022 ;;		On entry : 0/0
 17023 ;;		On exit  : 0/0
 17024 ;;		Unchanged: 0/0
 17025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17026 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17029 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17030 ;;Total ram usage:       13 bytes
 17031 ;; Hardware stack levels used:    1
 17032 ;; Hardware stack levels required when called:   15
 17033 ;; This function calls:
 17034 ;;		_HMI_InitButtons
 17035 ;;		_MXK_InitDIPSwitch
 17036 ;;		_MXK_InitTestButton
 17037 ;; This function is called by:
 17038 ;;		_HMI_Init
 17039 ;;		_FunctInitButton
 17040 ;; This function uses a non-reentrant model
 17041 ;;
 17042                           
 17043                           	psect	text92
 17044  013D18                     __ptext92:
 17045                           	opt stack 0
 17046  013D18                     _Button_Init:
 17047                           	opt stack 14
 17048                           
 17049                           ;Button.c: 21: if(pInput==(void*)0)
 17050                           
 17051                           ;incstack = 0
 17052  013D18  0100               	movlb	0	; () banked
 17053  013D1A  519B               	movf	Button_Init@pInput& (0+255),w,b
 17054  013D1C  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 17055  013D1E  B4D8               	btfsc	status,2,c
 17056  013D20  0012               	return	
 17057                           
 17058                           ; BSR set to: 0
 17059                           ;Button.c: 23: if(pInitIO==(void*)0)
 17060                           
 17061                           ; BSR set to: 0
 17062                           
 17063                           ; BSR set to: 0
 17064                           ;Button.c: 22: return;
 17065  013D22  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 17066  013D24  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 17067  013D26  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 17068  013D28  B4D8               	btfsc	status,2,c
 17069  013D2A  0012               	return	
 17070                           
 17071                           ; BSR set to: 0
 17072                           ;Button.c: 25: if(pGetState==(void*)0)
 17073                           
 17074                           ; BSR set to: 0
 17075                           
 17076                           ; BSR set to: 0
 17077                           ;Button.c: 24: return;
 17078  013D2C  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 17079  013D2E  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 17080  013D30  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 17081  013D32  B4D8               	btfsc	status,2,c
 17082  013D34  0012               	return	
 17083                           
 17084                           ; BSR set to: 0
 17085                           ;Button.c: 27: if(pFunction==(void*)0)
 17086                           
 17087                           ; BSR set to: 0
 17088                           
 17089                           ; BSR set to: 0
 17090                           ;Button.c: 26: return;
 17091  013D36  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 17092  013D38  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 17093  013D3A  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 17094  013D3C  B4D8               	btfsc	status,2,c
 17095  013D3E  0012               	return	
 17096                           
 17097                           ; BSR set to: 0
 17098                           ;Button.c: 30: if(pThreshold == 0)
 17099                           
 17100                           ; BSR set to: 0
 17101                           
 17102                           ; BSR set to: 0
 17103                           ;Button.c: 28: return;
 17104  013D40  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 17105  013D42  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 17106  013D44  A4D8               	btfss	status,2,c
 17107  013D46  D004               	goto	l8
 17108                           
 17109                           ; BSR set to: 0
 17110                           ;Button.c: 31: pThreshold = 1;
 17111  013D48  0E00               	movlw	0
 17112  013D4A  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 17113  013D4C  0E01               	movlw	1
 17114  013D4E  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 17115  013D50                     l8:
 17116                           
 17117                           ; BSR set to: 0
 17118                           ;Button.c: 34: pInput->mState = 0;
 17119                           
 17120                           ; BSR set to: 0
 17121  013D50  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 17122  013D54  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 17123  013D58  0E00               	movlw	0
 17124  013D5A  6EDF               	movwf	indf2,c
 17125                           
 17126                           ; BSR set to: 0
 17127                           ;Button.c: 35: pInput->mCount = 0;
 17128  013D5C  EE20 F001          	lfsr	2,1
 17129  013D60  519B               	movf	Button_Init@pInput& (0+255),w,b
 17130  013D62  26D9               	addwf	fsr2l,f,c
 17131  013D64  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17132  013D66  22DA               	addwfc	fsr2h,f,c
 17133  013D68  0E00               	movlw	0
 17134  013D6A  6EDF               	movwf	indf2,c
 17135                           
 17136                           ; BSR set to: 0
 17137                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 17138  013D6C  EE20 F002          	lfsr	2,2
 17139  013D70  519B               	movf	Button_Init@pInput& (0+255),w,b
 17140  013D72  26D9               	addwf	fsr2l,f,c
 17141  013D74  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17142  013D76  22DA               	addwfc	fsr2h,f,c
 17143  013D78  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 17144  013D7C  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 17145                           
 17146                           ; BSR set to: 0
 17147                           ;Button.c: 37: pInput->mFunction = pFunction;
 17148  013D80  EE20 F004          	lfsr	2,4
 17149  013D84  519B               	movf	Button_Init@pInput& (0+255),w,b
 17150  013D86  26D9               	addwf	fsr2l,f,c
 17151  013D88  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17152  013D8A  22DA               	addwfc	fsr2h,f,c
 17153  013D8C  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 17154  013D90  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 17155  013D94  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 17156                           
 17157                           ; BSR set to: 0
 17158                           ;Button.c: 38: pInput->mGetState = pGetState;
 17159  013D98  EE20 F007          	lfsr	2,7
 17160  013D9C  519B               	movf	Button_Init@pInput& (0+255),w,b
 17161  013D9E  26D9               	addwf	fsr2l,f,c
 17162  013DA0  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 17163  013DA2  22DA               	addwfc	fsr2h,f,c
 17164  013DA4  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 17165  013DA8  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 17166  013DAC  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 17167                           
 17168                           ; BSR set to: 0
 17169                           ;Button.c: 41: pInitIO();
 17170  013DB0  D801               	call	u12338
 17171  013DB2  0012               	return	
 17172  013DB4                     u12338:
 17173  013DB4  0005               	push	
 17174  013DB6  6EFA               	movwf	pclath,c
 17175  013DB8  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 17176  013DBA  6EFD               	movwf	tosl,c
 17177  013DBC  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 17178  013DBE  6EFE               	movwf	tosh,c
 17179  013DC0  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 17180  013DC2  6EFF               	movwf	tosu,c
 17181  013DC4  50FA               	movf	pclath,w,c
 17182  013DC6  0012               	return		;indir
 17183  013DC8                     __end_of_Button_Init:
 17184                           	opt stack 0
 17185                           tosu	equ	0xFFF
 17186                           tosh	equ	0xFFE
 17187                           tosl	equ	0xFFD
 17188                           pclath	equ	0xFFA
 17189                           tblptru	equ	0xFF8
 17190                           tblptrh	equ	0xFF7
 17191                           tblptrl	equ	0xFF6
 17192                           tablat	equ	0xFF5
 17193                           prodh	equ	0xFF4
 17194                           prodl	equ	0xFF3
 17195                           intcon	equ	0xFF2
 17196                           postinc0	equ	0xFEE
 17197                           wreg	equ	0xFE8
 17198                           indf1	equ	0xFE7
 17199                           postdec1	equ	0xFE5
 17200                           fsr1h	equ	0xFE2
 17201                           fsr1l	equ	0xFE1
 17202                           indf2	equ	0xFDF
 17203                           postinc2	equ	0xFDE
 17204                           postdec2	equ	0xFDD
 17205                           plusw2	equ	0xFDB
 17206                           fsr2h	equ	0xFDA
 17207                           fsr2l	equ	0xFD9
 17208                           status	equ	0xFD8
 17209                           
 17210 ;; *************** function _MXK_InitDIPSwitch *****************
 17211 ;; Defined at:
 17212 ;;		line 20 in file "Library/MXK.c"
 17213 ;; Parameters:    Size  Location     Type
 17214 ;;		None
 17215 ;; Auto vars:     Size  Location     Type
 17216 ;;		None
 17217 ;; Return value:  Size  Location     Type
 17218 ;;                  1    wreg      void 
 17219 ;; Registers used:
 17220 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17221 ;; Tracked objects:
 17222 ;;		On entry : 0/0
 17223 ;;		On exit  : 0/0
 17224 ;;		Unchanged: 0/0
 17225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17230 ;;Total ram usage:        0 bytes
 17231 ;; Hardware stack levels used:    1
 17232 ;; Hardware stack levels required when called:   14
 17233 ;; This function calls:
 17234 ;;		_Port_SetQuadType
 17235 ;; This function is called by:
 17236 ;;		_FunctInitButton
 17237 ;;		_Button_Init
 17238 ;; This function uses a non-reentrant model
 17239 ;;
 17240                           
 17241                           	psect	text93
 17242  0159B2                     __ptext93:
 17243                           	opt stack 0
 17244  0159B2                     _MXK_InitDIPSwitch:
 17245                           	opt stack 14
 17246                           
 17247                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 17248                           
 17249                           ;incstack = 0
 17250  0159B2  0E9B               	movlw	low _PortD
 17251  0159B4  0100               	movlb	0	; () banked
 17252  0159B6  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 17253  0159B8  0E01               	movlw	high _PortD
 17254  0159BA  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 17255  0159BC  0E00               	movlw	0
 17256  0159BE  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 17257  0159C0  0E00               	movlw	0
 17258  0159C2  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 17259  0159C4  EC1B  F08D         	call	_Port_SetQuadType	;wreg free
 17260  0159C8  0012               	return		;funcret
 17261  0159CA                     __end_of_MXK_InitDIPSwitch:
 17262                           	opt stack 0
 17263                           tosu	equ	0xFFF
 17264                           tosh	equ	0xFFE
 17265                           tosl	equ	0xFFD
 17266                           pclath	equ	0xFFA
 17267                           tblptru	equ	0xFF8
 17268                           tblptrh	equ	0xFF7
 17269                           tblptrl	equ	0xFF6
 17270                           tablat	equ	0xFF5
 17271                           prodh	equ	0xFF4
 17272                           prodl	equ	0xFF3
 17273                           intcon	equ	0xFF2
 17274                           postinc0	equ	0xFEE
 17275                           wreg	equ	0xFE8
 17276                           indf1	equ	0xFE7
 17277                           postdec1	equ	0xFE5
 17278                           fsr1h	equ	0xFE2
 17279                           fsr1l	equ	0xFE1
 17280                           indf2	equ	0xFDF
 17281                           postinc2	equ	0xFDE
 17282                           postdec2	equ	0xFDD
 17283                           plusw2	equ	0xFDB
 17284                           fsr2h	equ	0xFDA
 17285                           fsr2l	equ	0xFD9
 17286                           status	equ	0xFD8
 17287                           
 17288 ;; *************** function _HMI_InitButtons *****************
 17289 ;; Defined at:
 17290 ;;		line 21 in file "HMI.c"
 17291 ;; Parameters:    Size  Location     Type
 17292 ;;		None
 17293 ;; Auto vars:     Size  Location     Type
 17294 ;;		None
 17295 ;; Return value:  Size  Location     Type
 17296 ;;                  1    wreg      void 
 17297 ;; Registers used:
 17298 ;;		wreg, status,2
 17299 ;; Tracked objects:
 17300 ;;		On entry : 0/0
 17301 ;;		On exit  : 0/0
 17302 ;;		Unchanged: 0/0
 17303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17308 ;;Total ram usage:        0 bytes
 17309 ;; Hardware stack levels used:    1
 17310 ;; Hardware stack levels required when called:    7
 17311 ;; This function calls:
 17312 ;;		Nothing
 17313 ;; This function is called by:
 17314 ;;		_HMI_Init
 17315 ;;		_Button_Init
 17316 ;; This function uses a non-reentrant model
 17317 ;;
 17318                           
 17319                           	psect	text94
 17320  015B48                     __ptext94:
 17321                           	opt stack 0
 17322  015B48                     _HMI_InitButtons:
 17323                           	opt stack 21
 17324                           
 17325                           ;HMI.c: 23: TRISE = 0xFC;
 17326                           
 17327                           ;incstack = 0
 17328  015B48  0EFC               	movlw	252
 17329  015B4A  6E96               	movwf	3990,c	;volatile
 17330  015B4C  0012               	return		;funcret
 17331  015B4E                     __end_of_HMI_InitButtons:
 17332                           	opt stack 0
 17333                           tosu	equ	0xFFF
 17334                           tosh	equ	0xFFE
 17335                           tosl	equ	0xFFD
 17336                           pclath	equ	0xFFA
 17337                           tblptru	equ	0xFF8
 17338                           tblptrh	equ	0xFF7
 17339                           tblptrl	equ	0xFF6
 17340                           tablat	equ	0xFF5
 17341                           prodh	equ	0xFF4
 17342                           prodl	equ	0xFF3
 17343                           intcon	equ	0xFF2
 17344                           postinc0	equ	0xFEE
 17345                           wreg	equ	0xFE8
 17346                           indf1	equ	0xFE7
 17347                           postdec1	equ	0xFE5
 17348                           fsr1h	equ	0xFE2
 17349                           fsr1l	equ	0xFE1
 17350                           indf2	equ	0xFDF
 17351                           postinc2	equ	0xFDE
 17352                           postdec2	equ	0xFDD
 17353                           plusw2	equ	0xFDB
 17354                           fsr2h	equ	0xFDA
 17355                           fsr2l	equ	0xFD9
 17356                           status	equ	0xFD8
 17357                           
 17358 ;; *************** function _MXK_InitTestButton *****************
 17359 ;; Defined at:
 17360 ;;		line 10 in file "Library/MXK.c"
 17361 ;; Parameters:    Size  Location     Type
 17362 ;;		None
 17363 ;; Auto vars:     Size  Location     Type
 17364 ;;		None
 17365 ;; Return value:  Size  Location     Type
 17366 ;;                  1    wreg      void 
 17367 ;; Registers used:
 17368 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17369 ;; Tracked objects:
 17370 ;;		On entry : 0/0
 17371 ;;		On exit  : 0/0
 17372 ;;		Unchanged: 0/0
 17373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17378 ;;Total ram usage:        0 bytes
 17379 ;; Hardware stack levels used:    1
 17380 ;; Hardware stack levels required when called:   12
 17381 ;; This function calls:
 17382 ;;		_Port_SetPinType
 17383 ;; This function is called by:
 17384 ;;		_FunctInitButton
 17385 ;;		_Button_Init
 17386 ;; This function uses a non-reentrant model
 17387 ;;
 17388                           
 17389                           	psect	text95
 17390  0159CA                     __ptext95:
 17391                           	opt stack 0
 17392  0159CA                     _MXK_InitTestButton:
 17393                           	opt stack 16
 17394                           
 17395                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 17396                           
 17397                           ;incstack = 0
 17398  0159CA  0EA5               	movlw	low _PortB
 17399  0159CC  0100               	movlb	0	; () banked
 17400  0159CE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 17401  0159D0  0E01               	movlw	high _PortB
 17402  0159D2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17403  0159D4  0E04               	movlw	4
 17404  0159D6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 17405  0159D8  0E00               	movlw	0
 17406  0159DA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 17407  0159DC  ECA1  F091         	call	_Port_SetPinType	;wreg free
 17408  0159E0  0012               	return		;funcret
 17409  0159E2                     __end_of_MXK_InitTestButton:
 17410                           	opt stack 0
 17411                           tosu	equ	0xFFF
 17412                           tosh	equ	0xFFE
 17413                           tosl	equ	0xFFD
 17414                           pclath	equ	0xFFA
 17415                           tblptru	equ	0xFF8
 17416                           tblptrh	equ	0xFF7
 17417                           tblptrl	equ	0xFF6
 17418                           tablat	equ	0xFF5
 17419                           prodh	equ	0xFF4
 17420                           prodl	equ	0xFF3
 17421                           intcon	equ	0xFF2
 17422                           postinc0	equ	0xFEE
 17423                           wreg	equ	0xFE8
 17424                           indf1	equ	0xFE7
 17425                           postdec1	equ	0xFE5
 17426                           fsr1h	equ	0xFE2
 17427                           fsr1l	equ	0xFE1
 17428                           indf2	equ	0xFDF
 17429                           postinc2	equ	0xFDE
 17430                           postdec2	equ	0xFDD
 17431                           plusw2	equ	0xFDB
 17432                           fsr2h	equ	0xFDA
 17433                           fsr2l	equ	0xFD9
 17434                           status	equ	0xFD8
 17435                           
 17436 ;; *************** function _Port_SetPinType *****************
 17437 ;; Defined at:
 17438 ;;		line 189 in file "Library/Port.c"
 17439 ;; Parameters:    Size  Location     Type
 17440 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 17441 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17442 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17443 ;;  pPin            1   40[BANK0 ] enum E6750
 17444 ;;  pType           1   41[BANK0 ] enum E6795
 17445 ;; Auto vars:     Size  Location     Type
 17446 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 17447 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 17448 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 17449 ;;  Output          1   42[BANK0 ] enum E6475
 17450 ;; Return value:  Size  Location     Type
 17451 ;;                  1    wreg      enum E6475
 17452 ;; Registers used:
 17453 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17454 ;; Tracked objects:
 17455 ;;		On entry : 0/0
 17456 ;;		On exit  : 0/0
 17457 ;;		Unchanged: 0/0
 17458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17459 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17460 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17462 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17463 ;;Total ram usage:        7 bytes
 17464 ;; Hardware stack levels used:    1
 17465 ;; Hardware stack levels required when called:   11
 17466 ;; This function calls:
 17467 ;;		_Byte_SetBit
 17468 ;;		_PortProperty_Valid
 17469 ;;		_Word_SetPair
 17470 ;; This function is called by:
 17471 ;;		_Configure_GPIOs
 17472 ;;		_LED_Init
 17473 ;;		_Port_Init
 17474 ;;		_SPI_Init
 17475 ;;		_MXK_InitTestButton
 17476 ;;		_MXK_Init
 17477 ;;		_I2C_Init
 17478 ;;		_Motor_Init
 17479 ;; This function uses a non-reentrant model
 17480 ;;
 17481                           
 17482                           	psect	text96
 17483  012342                     __ptext96:
 17484                           	opt stack 0
 17485  012342                     _Port_SetPinType:
 17486                           	opt stack 18
 17487                           
 17488                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 17489                           
 17490                           ;incstack = 0
 17491  012342  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 17492  012346  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 17493  01234A  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 17494  01234E  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 17495                           
 17496                           ;Port.c: 192: ePinError Output = ePinErrorState;
 17497  012352  0E05               	movlw	5
 17498  012354  0100               	movlb	0	; () banked
 17499  012356  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17500                           
 17501                           ;Port.c: 193: switch (pType)
 17502  012358  D0A7               	goto	l412
 17503  01235A                     
 17504                           ; BSR set to: 0
 17505                           ;Port.c: 197: {
 17506                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 17507                           
 17508                           ; BSR set to: 0
 17509  01235A  EE20 F002          	lfsr	2,2
 17510  01235E  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17511  012360  26D9               	addwf	fsr2l,f,c
 17512  012362  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17513  012364  22DA               	addwfc	fsr2h,f,c
 17514  012366  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17515  01236A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17516  01236E  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17517  012372  0E01               	movlw	1
 17518  012374  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17519  012376  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 17520                           
 17521                           ;Port.c: 203: break;
 17522  01237A  D0A4               	goto	l414
 17523  01237C                     
 17524                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 17525  01237C  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17526  012380  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17527  012384  0E01               	movlw	1
 17528  012386  0100               	movlb	0	; () banked
 17529  012388  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17530  01238A  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17531  01238E  ECD9  F0A5         	call	_PortProperty_Valid	;wreg free
 17532  012392  0100               	movlb	0	; () banked
 17533  012394  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17534  012396  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 17535  012398  A4D8               	btfss	status,2,c
 17536  01239A  0012               	return	
 17537                           
 17538                           ; BSR set to: 0
 17539                           ;Port.c: 208: {
 17540                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 17541  01239C  EE20 F002          	lfsr	2,2
 17542  0123A0  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17543  0123A2  26D9               	addwf	fsr2l,f,c
 17544  0123A4  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17545  0123A6  22DA               	addwfc	fsr2h,f,c
 17546  0123A8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17547  0123AC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17548  0123B0  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17549  0123B4  0E00               	movlw	0
 17550  0123B6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17551  0123B8  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 17552                           
 17553                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 17554  0123BC  0100               	movlb	0	; () banked
 17555  0123BE  EE20 F004          	lfsr	2,4
 17556  0123C2  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17557  0123C4  26D9               	addwf	fsr2l,f,c
 17558  0123C6  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17559  0123C8  22DA               	addwfc	fsr2h,f,c
 17560  0123CA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17561  0123CE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17562  0123D2  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17563  0123D6  0E00               	movlw	0
 17564  0123D8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17565  0123DA  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 17566                           
 17567                           ;Port.c: 214: break;
 17568  0123DE  D072               	goto	l414
 17569  0123E0                     
 17570                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 17571                           
 17572                           ;Port.c: 218: case eTypeOutputOpenSource:
 17573  0123E0  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17574  0123E4  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17575  0123E8  0E02               	movlw	2
 17576  0123EA  0100               	movlb	0	; () banked
 17577  0123EC  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17578  0123EE  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17579  0123F2  ECD9  F0A5         	call	_PortProperty_Valid	;wreg free
 17580  0123F6  0100               	movlb	0	; () banked
 17581  0123F8  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17582  0123FA  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 17583  0123FC  A4D8               	btfss	status,2,c
 17584  0123FE  0012               	return	
 17585                           
 17586                           ; BSR set to: 0
 17587                           ;Port.c: 220: {
 17588                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 17589  012400  EE20 F002          	lfsr	2,2
 17590  012404  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17591  012406  26D9               	addwf	fsr2l,f,c
 17592  012408  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17593  01240A  22DA               	addwfc	fsr2h,f,c
 17594  01240C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17595  012410  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17596  012414  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17597  012418  0E01               	movlw	1
 17598  01241A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17599  01241C  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 17600                           
 17601                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 17602  012420  0100               	movlb	0	; () banked
 17603  012422  EE20 F004          	lfsr	2,4
 17604  012426  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17605  012428  26D9               	addwf	fsr2l,f,c
 17606  01242A  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17607  01242C  22DA               	addwfc	fsr2h,f,c
 17608  01242E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17609  012432  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17610  012436  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17611  01243A  0E01               	movlw	1
 17612  01243C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17613  01243E  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 17614                           
 17615                           ;Port.c: 226: break;
 17616  012442  D040               	goto	l414
 17617  012444                     
 17618                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 17619                           
 17620                           ;Port.c: 230: case eTypeOutputPushPull:
 17621  012444  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17622  012448  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17623  01244C  0E00               	movlw	0
 17624  01244E  0100               	movlb	0	; () banked
 17625  012450  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17626  012452  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17627  012456  ECD9  F0A5         	call	_PortProperty_Valid	;wreg free
 17628  01245A  0100               	movlb	0	; () banked
 17629  01245C  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17630  01245E  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 17631  012460  A4D8               	btfss	status,2,c
 17632  012462  0012               	return	
 17633                           
 17634                           ; BSR set to: 0
 17635                           ;Port.c: 232: {
 17636                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 17637  012464  EE20 F002          	lfsr	2,2
 17638  012468  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17639  01246A  26D9               	addwf	fsr2l,f,c
 17640  01246C  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17641  01246E  22DA               	addwfc	fsr2h,f,c
 17642  012470  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17643  012474  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17644  012478  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17645  01247C  0E00               	movlw	0
 17646  01247E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17647  012480  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 17648                           
 17649                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 17650  012484  0100               	movlb	0	; () banked
 17651  012486  EE20 F004          	lfsr	2,4
 17652  01248A  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17653  01248C  26D9               	addwf	fsr2l,f,c
 17654  01248E  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17655  012490  22DA               	addwfc	fsr2h,f,c
 17656  012492  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17657  012496  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17658  01249A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17659  01249E  0E00               	movlw	0
 17660  0124A0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17661  0124A2  ECCF  F0A7         	call	_Byte_SetBit	;wreg free
 17662                           
 17663                           ;Port.c: 239: }
 17664                           
 17665                           ;Port.c: 238: break;
 17666  0124A6  D00E               	goto	l414
 17667  0124A8                     l412:
 17668  0124A8  0100               	movlb	0	; () banked
 17669  0124AA  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 17670                           
 17671                           ; Switch size 1, requested type "space"
 17672                           ; Number of cases is 4, Range of values is 0 to 3
 17673                           ; switch strategies available:
 17674                           ; Name         Instructions Cycles
 17675                           ; simple_byte           13     7 (average)
 17676                           ;	Chosen strategy is simple_byte
 17677  0124AC  0A00               	xorlw	0	; case 0
 17678  0124AE  B4D8               	btfsc	status,2,c
 17679  0124B0  D754               	goto	l413
 17680  0124B2  0A01               	xorlw	1	; case 1
 17681  0124B4  B4D8               	btfsc	status,2,c
 17682  0124B6  D762               	goto	l415
 17683  0124B8  0A03               	xorlw	3	; case 2
 17684  0124BA  B4D8               	btfsc	status,2,c
 17685  0124BC  D791               	goto	l417
 17686  0124BE  0A01               	xorlw	1	; case 3
 17687  0124C0  B4D8               	btfsc	status,2,c
 17688  0124C2  D7C0               	goto	l421
 17689  0124C4                     l414:
 17690                           
 17691                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 17692                           
 17693                           ; BSR set to: 0
 17694  0124C4  0E08               	movlw	8
 17695  0124C6  0100               	movlb	0	; () banked
 17696  0124C8  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 17697  0124CA  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17698  0124CC  0E00               	movlw	0
 17699  0124CE  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 17700  0124D0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17701  0124D2  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 17702  0124D6  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 17703  0124DA  EC67  F0AA         	call	_Word_SetPair	;wreg free
 17704  0124DE  0012               	return	
 17705  0124E0                     __end_of_Port_SetPinType:
 17706                           	opt stack 0
 17707                           tosu	equ	0xFFF
 17708                           tosh	equ	0xFFE
 17709                           tosl	equ	0xFFD
 17710                           pclath	equ	0xFFA
 17711                           tblptru	equ	0xFF8
 17712                           tblptrh	equ	0xFF7
 17713                           tblptrl	equ	0xFF6
 17714                           tablat	equ	0xFF5
 17715                           prodh	equ	0xFF4
 17716                           prodl	equ	0xFF3
 17717                           intcon	equ	0xFF2
 17718                           postinc0	equ	0xFEE
 17719                           wreg	equ	0xFE8
 17720                           indf1	equ	0xFE7
 17721                           postdec1	equ	0xFE5
 17722                           fsr1h	equ	0xFE2
 17723                           fsr1l	equ	0xFE1
 17724                           indf2	equ	0xFDF
 17725                           postinc2	equ	0xFDE
 17726                           postdec2	equ	0xFDD
 17727                           plusw2	equ	0xFDB
 17728                           fsr2h	equ	0xFDA
 17729                           fsr2l	equ	0xFD9
 17730                           status	equ	0xFD8
 17731                           
 17732 ;; *************** function _Byte_SetBit *****************
 17733 ;; Defined at:
 17734 ;;		line 32 in file "Library/Types.c"
 17735 ;; Parameters:    Size  Location     Type
 17736 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17737 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 17738 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 17739 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17740 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17741 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17742 ;;		 -> NULL(0), 
 17743 ;;  pBit            1    2[BANK0 ] unsigned char 
 17744 ;;  pValue          1    3[BANK0 ] unsigned char 
 17745 ;; Auto vars:     Size  Location     Type
 17746 ;;		None
 17747 ;; Return value:  Size  Location     Type
 17748 ;;                  1    wreg      void 
 17749 ;; Registers used:
 17750 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17751 ;; Tracked objects:
 17752 ;;		On entry : 0/0
 17753 ;;		On exit  : 0/0
 17754 ;;		Unchanged: 0/0
 17755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17756 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17758 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17759 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17760 ;;Total ram usage:        7 bytes
 17761 ;; Hardware stack levels used:    1
 17762 ;; Hardware stack levels required when called:    7
 17763 ;; This function calls:
 17764 ;;		Nothing
 17765 ;; This function is called by:
 17766 ;;		_Port_SetPinType
 17767 ;;		_Port_SetPin
 17768 ;;		_SPI_Init
 17769 ;;		_SPI_MinSpeed
 17770 ;;		_SPI_MaxSpeed
 17771 ;;		_Word_SetBit
 17772 ;;		_I2C_Init
 17773 ;; This function uses a non-reentrant model
 17774 ;;
 17775                           
 17776                           	psect	text97
 17777  014F9E                     __ptext97:
 17778                           	opt stack 0
 17779  014F9E                     _Byte_SetBit:
 17780                           	opt stack 21
 17781                           
 17782                           ;Types.c: 34: pValue &= 1;
 17783                           
 17784                           ;incstack = 0
 17785  014F9E  0E01               	movlw	1
 17786  014FA0  0100               	movlb	0	; () banked
 17787  014FA2  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 17788                           
 17789                           ; BSR set to: 0
 17790                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 17791  014FA4  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 17792  014FA8  0E01               	movlw	1
 17793  014FAA  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 17794  014FAC  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 17795  014FAE  D002               	goto	u9914
 17796  014FB0                     u9915:
 17797  014FB0  90D8               	bcf	status,0,c
 17798  014FB2  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 17799  014FB4                     u9914:
 17800  014FB4  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 17801  014FB6  D7FC               	goto	u9915
 17802  014FB8  0100               	movlb	0	; () banked
 17803  014FBA  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 17804  014FBC  0AFF               	xorlw	255
 17805  014FBE  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 17806  014FC0  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 17807  014FC4  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 17808  014FC8  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 17809  014FCA  16DF               	andwf	indf2,f,c
 17810                           
 17811                           ; BSR set to: 0
 17812                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 17813  014FCC  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 17814  014FD0  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 17815  014FD4  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 17816  014FD6  D002               	goto	u9924
 17817  014FD8                     u9925:
 17818  014FD8  90D8               	bcf	status,0,c
 17819  014FDA  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 17820  014FDC                     u9924:
 17821  014FDC  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 17822  014FDE  D7FC               	goto	u9925
 17823  014FE0  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 17824  014FE4  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 17825  014FE8  0100               	movlb	0	; () banked
 17826  014FEA  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 17827  014FEC  12DF               	iorwf	indf2,f,c
 17828                           
 17829                           ; BSR set to: 0
 17830  014FEE  0012               	return		;funcret
 17831  014FF0                     __end_of_Byte_SetBit:
 17832                           	opt stack 0
 17833                           tosu	equ	0xFFF
 17834                           tosh	equ	0xFFE
 17835                           tosl	equ	0xFFD
 17836                           pclath	equ	0xFFA
 17837                           tblptru	equ	0xFF8
 17838                           tblptrh	equ	0xFF7
 17839                           tblptrl	equ	0xFF6
 17840                           tablat	equ	0xFF5
 17841                           prodh	equ	0xFF4
 17842                           prodl	equ	0xFF3
 17843                           intcon	equ	0xFF2
 17844                           postinc0	equ	0xFEE
 17845                           wreg	equ	0xFE8
 17846                           indf1	equ	0xFE7
 17847                           postdec1	equ	0xFE5
 17848                           fsr1h	equ	0xFE2
 17849                           fsr1l	equ	0xFE1
 17850                           indf2	equ	0xFDF
 17851                           postinc2	equ	0xFDE
 17852                           postdec2	equ	0xFDD
 17853                           plusw2	equ	0xFDB
 17854                           fsr2h	equ	0xFDA
 17855                           fsr2l	equ	0xFD9
 17856                           status	equ	0xFD8
 17857                           
 17858 ;; *************** function _Port_SetQuadType *****************
 17859 ;; Defined at:
 17860 ;;		line 399 in file "Library/Port.c"
 17861 ;; Parameters:    Size  Location     Type
 17862 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 17863 ;;		 -> PortB(10), PortD(10), 
 17864 ;;  pQuad           1   56[BANK0 ] enum E6776
 17865 ;;  pType           1   57[BANK0 ] enum E6795
 17866 ;; Auto vars:     Size  Location     Type
 17867 ;;  Output          1   58[BANK0 ] enum E6475
 17868 ;; Return value:  Size  Location     Type
 17869 ;;                  1    wreg      enum E6475
 17870 ;; Registers used:
 17871 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17872 ;; Tracked objects:
 17873 ;;		On entry : 0/0
 17874 ;;		On exit  : 0/0
 17875 ;;		Unchanged: 0/0
 17876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17877 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17878 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17880 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17881 ;;Total ram usage:        5 bytes
 17882 ;; Hardware stack levels used:    1
 17883 ;; Hardware stack levels required when called:   13
 17884 ;; This function calls:
 17885 ;;		_Byte_SetQuad
 17886 ;;		_Port_CheckQuadType
 17887 ;;		_Word_SetPair
 17888 ;; This function is called by:
 17889 ;;		_MXK_InitDIPSwitch
 17890 ;;		_MXK_Init
 17891 ;; This function uses a non-reentrant model
 17892 ;;
 17893                           
 17894                           	psect	text98
 17895  011A36                     __ptext98:
 17896                           	opt stack 0
 17897  011A36                     _Port_SetQuadType:
 17898                           	opt stack 16
 17899                           
 17900                           ;Port.c: 401: ePinError Output = ePinErrorState;
 17901                           
 17902                           ; BSR set to: 0
 17903                           ;incstack = 0
 17904  011A36  0E05               	movlw	5
 17905  011A38  0100               	movlb	0	; () banked
 17906  011A3A  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17907                           
 17908                           ;Port.c: 403: switch (pType)
 17909  011A3C  D0B8               	goto	l476
 17910  011A3E                     
 17911                           ; BSR set to: 0
 17912                           ;Port.c: 407: {
 17913                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 17914                           
 17915                           ; BSR set to: 0
 17916  011A3E  EE20 F002          	lfsr	2,2
 17917  011A42  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17918  011A44  26D9               	addwf	fsr2l,f,c
 17919  011A46  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17920  011A48  22DA               	addwfc	fsr2h,f,c
 17921  011A4A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17922  011A4E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17923  011A52  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17924  011A56  0E0F               	movlw	15
 17925  011A58  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17926  011A5A  EC54  F0AC         	call	_Byte_SetQuad	;wreg free
 17927                           
 17928                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 17929  011A5E  0100               	movlb	0	; () banked
 17930  011A60  EE20 F004          	lfsr	2,4
 17931  011A64  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17932  011A66  26D9               	addwf	fsr2l,f,c
 17933  011A68  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17934  011A6A  22DA               	addwfc	fsr2h,f,c
 17935  011A6C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17936  011A70  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17937  011A74  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17938  011A78  0E00               	movlw	0
 17939  011A7A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17940  011A7C  EC54  F0AC         	call	_Byte_SetQuad	;wreg free
 17941                           
 17942                           ;Port.c: 413: }
 17943                           ;Port.c: 415: break;
 17944  011A80  D0A4               	goto	l478
 17945  011A82                     
 17946                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 17947  011A82  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 17948  011A86  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 17949  011A8A  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 17950  011A8E  0E03               	movlw	3
 17951  011A90  0100               	movlb	0	; () banked
 17952  011A92  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 17953  011A94  EC48  F0A8         	call	_Port_CheckQuadType	;wreg free
 17954  011A98  0100               	movlb	0	; () banked
 17955  011A9A  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17956  011A9C  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 17957  011A9E  A4D8               	btfss	status,2,c
 17958  011AA0  0012               	return	
 17959                           
 17960                           ; BSR set to: 0
 17961                           ;Port.c: 418: {
 17962                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 17963  011AA2  EE20 F002          	lfsr	2,2
 17964  011AA6  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17965  011AA8  26D9               	addwf	fsr2l,f,c
 17966  011AAA  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17967  011AAC  22DA               	addwfc	fsr2h,f,c
 17968  011AAE  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17969  011AB2  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17970  011AB6  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17971  011ABA  0E00               	movlw	0
 17972  011ABC  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17973  011ABE  EC54  F0AC         	call	_Byte_SetQuad	;wreg free
 17974                           
 17975                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 17976  011AC2  0100               	movlb	0	; () banked
 17977  011AC4  EE20 F004          	lfsr	2,4
 17978  011AC8  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17979  011ACA  26D9               	addwf	fsr2l,f,c
 17980  011ACC  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17981  011ACE  22DA               	addwfc	fsr2h,f,c
 17982  011AD0  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17983  011AD4  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17984  011AD8  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17985  011ADC  0E00               	movlw	0
 17986  011ADE  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17987  011AE0  EC54  F0AC         	call	_Byte_SetQuad	;wreg free
 17988                           
 17989                           ;Port.c: 424: }
 17990  011AE4  D072               	goto	l478
 17991  011AE6                     
 17992                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 17993  011AE6  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 17994  011AEA  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 17995  011AEE  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 17996  011AF2  0E03               	movlw	3
 17997  011AF4  0100               	movlb	0	; () banked
 17998  011AF6  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 17999  011AF8  EC48  F0A8         	call	_Port_CheckQuadType	;wreg free
 18000  011AFC  0100               	movlb	0	; () banked
 18001  011AFE  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 18002  011B00  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 18003  011B02  A4D8               	btfss	status,2,c
 18004  011B04  0012               	return	
 18005                           
 18006                           ; BSR set to: 0
 18007                           ;Port.c: 429: {
 18008                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 18009  011B06  EE20 F002          	lfsr	2,2
 18010  011B0A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18011  011B0C  26D9               	addwf	fsr2l,f,c
 18012  011B0E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18013  011B10  22DA               	addwfc	fsr2h,f,c
 18014  011B12  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 18015  011B16  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 18016  011B1A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18017  011B1E  0E0F               	movlw	15
 18018  011B20  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 18019  011B22  EC54  F0AC         	call	_Byte_SetQuad	;wreg free
 18020                           
 18021                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 18022  011B26  0100               	movlb	0	; () banked
 18023  011B28  EE20 F004          	lfsr	2,4
 18024  011B2C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18025  011B2E  26D9               	addwf	fsr2l,f,c
 18026  011B30  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18027  011B32  22DA               	addwfc	fsr2h,f,c
 18028  011B34  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 18029  011B38  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 18030  011B3C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18031  011B40  0E0F               	movlw	15
 18032  011B42  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 18033  011B44  EC54  F0AC         	call	_Byte_SetQuad	;wreg free
 18034                           
 18035                           ;Port.c: 435: }
 18036  011B48  D040               	goto	l478
 18037  011B4A                     
 18038                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 18039  011B4A  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 18040  011B4E  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 18041  011B52  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 18042  011B56  0E03               	movlw	3
 18043  011B58  0100               	movlb	0	; () banked
 18044  011B5A  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 18045  011B5C  EC48  F0A8         	call	_Port_CheckQuadType	;wreg free
 18046  011B60  0100               	movlb	0	; () banked
 18047  011B62  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 18048  011B64  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 18049  011B66  A4D8               	btfss	status,2,c
 18050  011B68  0012               	return	
 18051                           
 18052                           ; BSR set to: 0
 18053                           ;Port.c: 440: {
 18054                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 18055  011B6A  EE20 F002          	lfsr	2,2
 18056  011B6E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18057  011B70  26D9               	addwf	fsr2l,f,c
 18058  011B72  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18059  011B74  22DA               	addwfc	fsr2h,f,c
 18060  011B76  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 18061  011B7A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 18062  011B7E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18063  011B82  0E00               	movlw	0
 18064  011B84  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 18065  011B86  EC54  F0AC         	call	_Byte_SetQuad	;wreg free
 18066                           
 18067                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 18068  011B8A  0100               	movlb	0	; () banked
 18069  011B8C  EE20 F004          	lfsr	2,4
 18070  011B90  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18071  011B92  26D9               	addwf	fsr2l,f,c
 18072  011B94  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18073  011B96  22DA               	addwfc	fsr2h,f,c
 18074  011B98  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 18075  011B9C  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 18076  011BA0  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18077  011BA4  0E00               	movlw	0
 18078  011BA6  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 18079  011BA8  EC54  F0AC         	call	_Byte_SetQuad	;wreg free
 18080                           
 18081                           ;Port.c: 446: }
 18082  011BAC  D00E               	goto	l478
 18083  011BAE                     l476:
 18084  011BAE  0100               	movlb	0	; () banked
 18085  011BB0  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 18086                           
 18087                           ; Switch size 1, requested type "space"
 18088                           ; Number of cases is 4, Range of values is 0 to 3
 18089                           ; switch strategies available:
 18090                           ; Name         Instructions Cycles
 18091                           ; simple_byte           13     7 (average)
 18092                           ;	Chosen strategy is simple_byte
 18093  011BB2  0A00               	xorlw	0	; case 0
 18094  011BB4  B4D8               	btfsc	status,2,c
 18095  011BB6  D743               	goto	l477
 18096  011BB8  0A01               	xorlw	1	; case 1
 18097  011BBA  B4D8               	btfsc	status,2,c
 18098  011BBC  D762               	goto	l479
 18099  011BBE  0A03               	xorlw	3	; case 2
 18100  011BC0  B4D8               	btfsc	status,2,c
 18101  011BC2  D791               	goto	l483
 18102  011BC4  0A01               	xorlw	1	; case 3
 18103  011BC6  B4D8               	btfsc	status,2,c
 18104  011BC8  D7C0               	goto	l486
 18105  011BCA                     l478:
 18106                           
 18107                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 18108                           
 18109                           ; BSR set to: 0
 18110  011BCA  0E08               	movlw	8
 18111  011BCC  0100               	movlb	0	; () banked
 18112  011BCE  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18113  011BD0  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 18114  011BD2  0E00               	movlw	0
 18115  011BD4  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18116  011BD6  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18117  011BD8  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18118  011BDA  0D04               	mullw	4
 18119  011BDC  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 18120  011BE0  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18121  011BE4  EC67  F0AA         	call	_Word_SetPair	;wreg free
 18122                           
 18123                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 18124  011BE8  0E08               	movlw	8
 18125  011BEA  0100               	movlb	0	; () banked
 18126  011BEC  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18127  011BEE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 18128  011BF0  0E00               	movlw	0
 18129  011BF2  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18130  011BF4  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18131  011BF6  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18132  011BF8  0D04               	mullw	4
 18133  011BFA  28F3               	incf	prodl,w,c
 18134  011BFC  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 18135  011BFE  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18136  011C02  EC67  F0AA         	call	_Word_SetPair	;wreg free
 18137                           
 18138                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 18139  011C06  0E08               	movlw	8
 18140  011C08  0100               	movlb	0	; () banked
 18141  011C0A  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18142  011C0C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 18143  011C0E  0E00               	movlw	0
 18144  011C10  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18145  011C12  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18146  011C14  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18147  011C16  0D04               	mullw	4
 18148  011C18  50F3               	movf	prodl,w,c
 18149  011C1A  0F02               	addlw	2
 18150  011C1C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 18151  011C1E  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18152  011C22  EC67  F0AA         	call	_Word_SetPair	;wreg free
 18153                           
 18154                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 18155  011C26  0E08               	movlw	8
 18156  011C28  0100               	movlb	0	; () banked
 18157  011C2A  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 18158  011C2C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 18159  011C2E  0E00               	movlw	0
 18160  011C30  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18161  011C32  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18162  011C34  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 18163  011C36  0D04               	mullw	4
 18164  011C38  50F3               	movf	prodl,w,c
 18165  011C3A  0F03               	addlw	3
 18166  011C3C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 18167  011C3E  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 18168  011C42  EC67  F0AA         	call	_Word_SetPair	;wreg free
 18169  011C46  0012               	return	
 18170  011C48                     __end_of_Port_SetQuadType:
 18171                           	opt stack 0
 18172                           tosu	equ	0xFFF
 18173                           tosh	equ	0xFFE
 18174                           tosl	equ	0xFFD
 18175                           pclath	equ	0xFFA
 18176                           tblptru	equ	0xFF8
 18177                           tblptrh	equ	0xFF7
 18178                           tblptrl	equ	0xFF6
 18179                           tablat	equ	0xFF5
 18180                           prodh	equ	0xFF4
 18181                           prodl	equ	0xFF3
 18182                           intcon	equ	0xFF2
 18183                           postinc0	equ	0xFEE
 18184                           wreg	equ	0xFE8
 18185                           indf1	equ	0xFE7
 18186                           postdec1	equ	0xFE5
 18187                           fsr1h	equ	0xFE2
 18188                           fsr1l	equ	0xFE1
 18189                           indf2	equ	0xFDF
 18190                           postinc2	equ	0xFDE
 18191                           postdec2	equ	0xFDD
 18192                           plusw2	equ	0xFDB
 18193                           fsr2h	equ	0xFDA
 18194                           fsr2l	equ	0xFD9
 18195                           status	equ	0xFD8
 18196                           
 18197 ;; *************** function _Word_SetPair *****************
 18198 ;; Defined at:
 18199 ;;		line 149 in file "Library/Types.c"
 18200 ;; Parameters:    Size  Location     Type
 18201 ;;  pInput          2   15[BANK0 ] PTR struct Word
 18202 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18203 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18204 ;;  pPair           1   17[BANK0 ] unsigned char 
 18205 ;;  pValue          1   18[BANK0 ] unsigned char 
 18206 ;; Auto vars:     Size  Location     Type
 18207 ;;		None
 18208 ;; Return value:  Size  Location     Type
 18209 ;;                  1    wreg      void 
 18210 ;; Registers used:
 18211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18212 ;; Tracked objects:
 18213 ;;		On entry : 0/0
 18214 ;;		On exit  : 0/0
 18215 ;;		Unchanged: 0/0
 18216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18217 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18220 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18221 ;;Total ram usage:        4 bytes
 18222 ;; Hardware stack levels used:    1
 18223 ;; Hardware stack levels required when called:    9
 18224 ;; This function calls:
 18225 ;;		_Byte_SetPair
 18226 ;; This function is called by:
 18227 ;;		_Port_SetPinType
 18228 ;;		_Port_SetQuadType
 18229 ;;		_Port_SetType
 18230 ;;		_Port_SetPairType
 18231 ;;		_PortProperty_Init
 18232 ;; This function uses a non-reentrant model
 18233 ;;
 18234                           
 18235                           	psect	text99
 18236  0154CE                     __ptext99:
 18237                           	opt stack 0
 18238  0154CE                     _Word_SetPair:
 18239                           	opt stack 19
 18240                           
 18241                           ;Types.c: 151: if (pPair >= 4)
 18242                           
 18243                           ;incstack = 0
 18244  0154CE  0E03               	movlw	3
 18245  0154D0  0100               	movlb	0	; () banked
 18246  0154D2  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 18247  0154D4  D00E               	goto	l776
 18248                           
 18249                           ; BSR set to: 0
 18250                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 18251  0154D6  0E01               	movlw	1
 18252  0154D8  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 18253  0154DA  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 18254  0154DC  0E00               	movlw	0
 18255  0154DE  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 18256  0154E0  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 18257  0154E2  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 18258  0154E4  0FFC               	addlw	252
 18259  0154E6  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 18260  0154E8  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 18261  0154EC  EC44  F0AC         	call	_Byte_SetPair	;wreg free
 18262  0154F0  0012               	return	
 18263  0154F2                     l776:
 18264                           
 18265                           ;Types.c: 153: else
 18266                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 18267  0154F2  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 18268  0154F6  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 18269  0154FA  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 18270  0154FE  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 18271  015502  EC44  F0AC         	call	_Byte_SetPair	;wreg free
 18272  015506  0012               	return	
 18273  015508                     __end_of_Word_SetPair:
 18274                           	opt stack 0
 18275                           tosu	equ	0xFFF
 18276                           tosh	equ	0xFFE
 18277                           tosl	equ	0xFFD
 18278                           pclath	equ	0xFFA
 18279                           tblptru	equ	0xFF8
 18280                           tblptrh	equ	0xFF7
 18281                           tblptrl	equ	0xFF6
 18282                           tablat	equ	0xFF5
 18283                           prodh	equ	0xFF4
 18284                           prodl	equ	0xFF3
 18285                           intcon	equ	0xFF2
 18286                           postinc0	equ	0xFEE
 18287                           wreg	equ	0xFE8
 18288                           indf1	equ	0xFE7
 18289                           postdec1	equ	0xFE5
 18290                           fsr1h	equ	0xFE2
 18291                           fsr1l	equ	0xFE1
 18292                           indf2	equ	0xFDF
 18293                           postinc2	equ	0xFDE
 18294                           postdec2	equ	0xFDD
 18295                           plusw2	equ	0xFDB
 18296                           fsr2h	equ	0xFDA
 18297                           fsr2l	equ	0xFD9
 18298                           status	equ	0xFD8
 18299                           
 18300 ;; *************** function _Byte_SetPair *****************
 18301 ;; Defined at:
 18302 ;;		line 83 in file "Library/Types.c"
 18303 ;; Parameters:    Size  Location     Type
 18304 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 18305 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 18306 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 18307 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 18308 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 18309 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 18310 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 18311 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 18312 ;;		 -> NULL(0), 
 18313 ;;  pPair           1   13[BANK0 ] unsigned char 
 18314 ;;  pValue          1   14[BANK0 ] unsigned char 
 18315 ;; Auto vars:     Size  Location     Type
 18316 ;;		None
 18317 ;; Return value:  Size  Location     Type
 18318 ;;                  1    wreg      void 
 18319 ;; Registers used:
 18320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18321 ;; Tracked objects:
 18322 ;;		On entry : 0/0
 18323 ;;		On exit  : 0/0
 18324 ;;		Unchanged: 0/0
 18325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18326 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18329 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18330 ;;Total ram usage:        4 bytes
 18331 ;; Hardware stack levels used:    1
 18332 ;; Hardware stack levels required when called:    8
 18333 ;; This function calls:
 18334 ;;		_Byte_SetZone
 18335 ;; This function is called by:
 18336 ;;		_Word_SetPair
 18337 ;;		_Port_SetPairType
 18338 ;;		_Port_SetPair
 18339 ;; This function uses a non-reentrant model
 18340 ;;
 18341                           
 18342                           	psect	text100
 18343  015888                     __ptext100:
 18344                           	opt stack 0
 18345  015888                     _Byte_SetPair:
 18346                           	opt stack 19
 18347                           
 18348                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 18349                           
 18350                           ;incstack = 0
 18351  015888  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 18352  01588C  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 18353  015890  0E04               	movlw	4
 18354  015892  0100               	movlb	0	; () banked
 18355  015894  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 18356  015896  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 18357  01589A  0E02               	movlw	2
 18358  01589C  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 18359  01589E  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 18360  0158A2  EC59  F0A1         	call	_Byte_SetZone	;wreg free
 18361  0158A6  0012               	return		;funcret
 18362  0158A8                     __end_of_Byte_SetPair:
 18363                           	opt stack 0
 18364                           tosu	equ	0xFFF
 18365                           tosh	equ	0xFFE
 18366                           tosl	equ	0xFFD
 18367                           pclath	equ	0xFFA
 18368                           tblptru	equ	0xFF8
 18369                           tblptrh	equ	0xFF7
 18370                           tblptrl	equ	0xFF6
 18371                           tablat	equ	0xFF5
 18372                           prodh	equ	0xFF4
 18373                           prodl	equ	0xFF3
 18374                           intcon	equ	0xFF2
 18375                           postinc0	equ	0xFEE
 18376                           wreg	equ	0xFE8
 18377                           indf1	equ	0xFE7
 18378                           postdec1	equ	0xFE5
 18379                           fsr1h	equ	0xFE2
 18380                           fsr1l	equ	0xFE1
 18381                           indf2	equ	0xFDF
 18382                           postinc2	equ	0xFDE
 18383                           postdec2	equ	0xFDD
 18384                           plusw2	equ	0xFDB
 18385                           fsr2h	equ	0xFDA
 18386                           fsr2l	equ	0xFD9
 18387                           status	equ	0xFD8
 18388                           
 18389 ;; *************** function _Port_CheckQuadType *****************
 18390 ;; Defined at:
 18391 ;;		line 126 in file "Library/Port.c"
 18392 ;; Parameters:    Size  Location     Type
 18393 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 18394 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18395 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18396 ;;  pQuad           1   49[BANK0 ] enum E6776
 18397 ;;  pDrive          1   50[BANK0 ] enum E6469
 18398 ;; Auto vars:     Size  Location     Type
 18399 ;;  Output          1   53[BANK0 ] enum E6475
 18400 ;;  Pair2           1   52[BANK0 ] enum E6760
 18401 ;;  Pair1           1   51[BANK0 ] enum E6760
 18402 ;; Return value:  Size  Location     Type
 18403 ;;                  1    wreg      enum E6475
 18404 ;; Registers used:
 18405 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18406 ;; Tracked objects:
 18407 ;;		On entry : 0/0
 18408 ;;		On exit  : 0/0
 18409 ;;		Unchanged: 0/0
 18410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18411 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18412 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18414 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18415 ;;Total ram usage:        7 bytes
 18416 ;; Hardware stack levels used:    1
 18417 ;; Hardware stack levels required when called:   12
 18418 ;; This function calls:
 18419 ;;		_Port_CheckPairType
 18420 ;; This function is called by:
 18421 ;;		_Port_CheckPortType
 18422 ;;		_Port_SetQuadType
 18423 ;; This function uses a non-reentrant model
 18424 ;;
 18425                           
 18426                           	psect	text101
 18427  015090                     __ptext101:
 18428                           	opt stack 0
 18429  015090                     _Port_CheckQuadType:
 18430                           	opt stack 15
 18431                           
 18432                           ;Port.c: 128: ePinError Output = ePinErrorState;
 18433                           
 18434                           ;incstack = 0
 18435  015090  0E05               	movlw	5
 18436  015092  0100               	movlb	0	; () banked
 18437  015094  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 18438                           
 18439                           ; BSR set to: 0
 18440                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 18441  015096  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 18442  015098  0D02               	mullw	2
 18443  01509A  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 18444                           
 18445                           ; BSR set to: 0
 18446                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 18447  01509E  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 18448  0150A0  0D02               	mullw	2
 18449  0150A2  28F3               	incf	prodl,w,c
 18450  0150A4  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 18451                           
 18452                           ; BSR set to: 0
 18453                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 18454  0150A6  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 18455  0150AA  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 18456  0150AE  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 18457  0150B2  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 18458  0150B6  EC70  F0A6         	call	_Port_CheckPairType	;wreg free
 18459  0150BA  0100               	movlb	0	; () banked
 18460  0150BC  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 18461  0150BE  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 18462  0150C0  A4D8               	btfss	status,2,c
 18463  0150C2  D00C               	goto	l393
 18464                           
 18465                           ; BSR set to: 0
 18466                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 18467  0150C4  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 18468  0150C8  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 18469  0150CC  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 18470  0150D0  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 18471  0150D4  EC70  F0A6         	call	_Port_CheckPairType	;wreg free
 18472  0150D8  0100               	movlb	0	; () banked
 18473  0150DA  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 18474  0150DC                     l393:
 18475                           
 18476                           ; BSR set to: 0
 18477                           ;Port.c: 136: return Output;
 18478                           
 18479                           ; BSR set to: 0
 18480  0150DC  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 18481  0150DE  0012               	return	
 18482  0150E0                     __end_of_Port_CheckQuadType:
 18483                           	opt stack 0
 18484                           tosu	equ	0xFFF
 18485                           tosh	equ	0xFFE
 18486                           tosl	equ	0xFFD
 18487                           pclath	equ	0xFFA
 18488                           tblptru	equ	0xFF8
 18489                           tblptrh	equ	0xFF7
 18490                           tblptrl	equ	0xFF6
 18491                           tablat	equ	0xFF5
 18492                           prodh	equ	0xFF4
 18493                           prodl	equ	0xFF3
 18494                           intcon	equ	0xFF2
 18495                           postinc0	equ	0xFEE
 18496                           wreg	equ	0xFE8
 18497                           indf1	equ	0xFE7
 18498                           postdec1	equ	0xFE5
 18499                           fsr1h	equ	0xFE2
 18500                           fsr1l	equ	0xFE1
 18501                           indf2	equ	0xFDF
 18502                           postinc2	equ	0xFDE
 18503                           postdec2	equ	0xFDD
 18504                           plusw2	equ	0xFDB
 18505                           fsr2h	equ	0xFDA
 18506                           fsr2l	equ	0xFD9
 18507                           status	equ	0xFD8
 18508                           
 18509 ;; *************** function _Port_CheckPairType *****************
 18510 ;; Defined at:
 18511 ;;		line 112 in file "Library/Port.c"
 18512 ;; Parameters:    Size  Location     Type
 18513 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 18514 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18515 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18516 ;;  pPair           1   40[BANK0 ] enum E6760
 18517 ;;  pDrive          1   41[BANK0 ] enum E6469
 18518 ;; Auto vars:     Size  Location     Type
 18519 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 18520 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18521 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18522 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18523 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18524 ;;  Output          1   44[BANK0 ] enum E6475
 18525 ;;  Pin2            1   43[BANK0 ] enum E6750
 18526 ;;  Pin1            1   42[BANK0 ] enum E6750
 18527 ;; Return value:  Size  Location     Type
 18528 ;;                  1    wreg      enum E6475
 18529 ;; Registers used:
 18530 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18531 ;; Tracked objects:
 18532 ;;		On entry : 0/0
 18533 ;;		On exit  : 0/0
 18534 ;;		Unchanged: 0/0
 18535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18536 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18537 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18539 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18540 ;;Total ram usage:        9 bytes
 18541 ;; Hardware stack levels used:    1
 18542 ;; Hardware stack levels required when called:   11
 18543 ;; This function calls:
 18544 ;;		_PortProperty_Valid
 18545 ;; This function is called by:
 18546 ;;		_Port_CheckQuadType
 18547 ;;		_Port_SetPairType
 18548 ;; This function uses a non-reentrant model
 18549 ;;
 18550                           
 18551                           	psect	text102
 18552  014CE0                     __ptext102:
 18553                           	opt stack 0
 18554  014CE0                     _Port_CheckPairType:
 18555                           	opt stack 15
 18556                           
 18557                           ;Port.c: 114: ePinError Output = ePinErrorState;
 18558                           
 18559                           ; BSR set to: 0
 18560                           ;incstack = 0
 18561  014CE0  0E05               	movlw	5
 18562  014CE2  0100               	movlb	0	; () banked
 18563  014CE4  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 18564                           
 18565                           ; BSR set to: 0
 18566                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 18567  014CE6  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 18568  014CEA  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 18569  014CEE  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 18570  014CF2  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 18571                           
 18572                           ; BSR set to: 0
 18573                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 18574  014CF6  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 18575  014CF8  0D02               	mullw	2
 18576  014CFA  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 18577                           
 18578                           ; BSR set to: 0
 18579                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 18580  014CFE  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 18581  014D00  0D02               	mullw	2
 18582  014D02  28F3               	incf	prodl,w,c
 18583  014D04  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 18584                           
 18585                           ; BSR set to: 0
 18586                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 18587  014D06  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 18588  014D0A  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 18589  014D0E  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 18590  014D12  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 18591  014D16  ECD9  F0A5         	call	_PortProperty_Valid	;wreg free
 18592  014D1A  0100               	movlb	0	; () banked
 18593  014D1C  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 18594  014D1E  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 18595  014D20  A4D8               	btfss	status,2,c
 18596  014D22  D00C               	goto	l389
 18597                           
 18598                           ; BSR set to: 0
 18599                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 18600  014D24  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 18601  014D28  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 18602  014D2C  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 18603  014D30  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 18604  014D34  ECD9  F0A5         	call	_PortProperty_Valid	;wreg free
 18605  014D38  0100               	movlb	0	; () banked
 18606  014D3A  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 18607  014D3C                     l389:
 18608                           
 18609                           ; BSR set to: 0
 18610                           ;Port.c: 124: return Output;
 18611                           
 18612                           ; BSR set to: 0
 18613  014D3C  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 18614  014D3E  0012               	return	
 18615  014D40                     __end_of_Port_CheckPairType:
 18616                           	opt stack 0
 18617                           tosu	equ	0xFFF
 18618                           tosh	equ	0xFFE
 18619                           tosl	equ	0xFFD
 18620                           pclath	equ	0xFFA
 18621                           tblptru	equ	0xFF8
 18622                           tblptrh	equ	0xFF7
 18623                           tblptrl	equ	0xFF6
 18624                           tablat	equ	0xFF5
 18625                           prodh	equ	0xFF4
 18626                           prodl	equ	0xFF3
 18627                           intcon	equ	0xFF2
 18628                           postinc0	equ	0xFEE
 18629                           wreg	equ	0xFE8
 18630                           indf1	equ	0xFE7
 18631                           postdec1	equ	0xFE5
 18632                           fsr1h	equ	0xFE2
 18633                           fsr1l	equ	0xFE1
 18634                           indf2	equ	0xFDF
 18635                           postinc2	equ	0xFDE
 18636                           postdec2	equ	0xFDD
 18637                           plusw2	equ	0xFDB
 18638                           fsr2h	equ	0xFDA
 18639                           fsr2l	equ	0xFD9
 18640                           status	equ	0xFD8
 18641                           
 18642 ;; *************** function _PortProperty_Valid *****************
 18643 ;; Defined at:
 18644 ;;		line 220 in file "Library/Types.c"
 18645 ;; Parameters:    Size  Location     Type
 18646 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 18647 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18648 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18649 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18650 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18651 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 18652 ;;  pPin            1   18[BANK0 ] unsigned char 
 18653 ;; Auto vars:     Size  Location     Type
 18654 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 18655 ;;  Pair            1   37[BANK0 ] enum E6469
 18656 ;; Return value:  Size  Location     Type
 18657 ;;                  1    wreg      enum E6475
 18658 ;; Registers used:
 18659 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18660 ;; Tracked objects:
 18661 ;;		On entry : 0/0
 18662 ;;		On exit  : 0/0
 18663 ;;		Unchanged: 0/0
 18664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18665 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18666 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18667 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18668 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18669 ;;Total ram usage:       23 bytes
 18670 ;; Hardware stack levels used:    1
 18671 ;; Hardware stack levels required when called:   10
 18672 ;; This function calls:
 18673 ;;		_Word_GetPair
 18674 ;; This function is called by:
 18675 ;;		_Port_CheckPairType
 18676 ;;		_Port_SetPinType
 18677 ;; This function uses a non-reentrant model
 18678 ;;
 18679                           
 18680                           	psect	text103
 18681  014BB2                     __ptext103:
 18682                           	opt stack 0
 18683  014BB2                     _PortProperty_Valid:
 18684                           	opt stack 15
 18685                           
 18686                           ;Types.c: 222: ePinDrive Pair;
 18687                           ;Types.c: 223: const ePinError Errors[4][4] =
 18688                           ;Types.c: 224: {
 18689                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 18690                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 18691                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 18692                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 18693                           ;Types.c: 230: };
 18694                           
 18695                           ; BSR set to: 0
 18696                           ;incstack = 0
 18697  014BB2  0E53               	movlw	low PortProperty_Valid@F6830
 18698  014BB4  6EF6               	movwf	tblptrl,c
 18699  014BB6                     	if	1	;There is more than 1 active tblptr byte
 18700  014BB6  0EFC               	movlw	high PortProperty_Valid@F6830
 18701  014BB8  6EF7               	movwf	tblptrh,c
 18702  014BBA                     	endif
 18703  014BBA                     	if	1	;There are 3 active tblptr bytes
 18704  014BBA  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 18705  014BBC  6EF8               	movwf	tblptru,c
 18706  014BBE                     	endif
 18707  014BBE  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 18708  014BC2  0E0F               	movlw	15
 18709  014BC4                     u9880:
 18710  014BC4  0009               	tblrd		*+
 18711  014BC6  CFF5 FFDE          	movff	tablat,postinc2
 18712  014BCA  06E8               	decf	wreg,f,c
 18713  014BCC  E2FB               	bc	u9880
 18714                           
 18715                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 18716  014BCE  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 18717  014BD2  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 18718  014BD6  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 18719  014BDA  EC0A  F0AB         	call	_Word_GetPair	;wreg free
 18720  014BDE  0100               	movlb	0	; () banked
 18721  014BE0  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 18722                           
 18723                           ; BSR set to: 0
 18724                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 18725  014BE2  0E04               	movlw	4
 18726  014BE4  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 18727  014BE6  D017               	goto	l819
 18728                           
 18729                           ; BSR set to: 0
 18730  014BE8  0E04               	movlw	4
 18731  014BEA  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 18732  014BEC  D014               	goto	l819
 18733                           
 18734                           ; BSR set to: 0
 18735                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 18736  014BEE  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 18737  014BF0  0D04               	mullw	4
 18738  014BF2  0E75               	movlw	low PortProperty_Valid@Errors
 18739  014BF4  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 18740  014BF6  0E00               	movlw	high PortProperty_Valid@Errors
 18741  014BF8  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 18742  014BFA  50F3               	movf	prodl,w,c
 18743  014BFC  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 18744  014BFE  50F4               	movf	prodh,w,c
 18745  014C00  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 18746  014C02  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 18747  014C04  0D01               	mullw	1
 18748  014C06  50F3               	movf	prodl,w,c
 18749  014C08  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 18750  014C0A  6ED9               	movwf	fsr2l,c
 18751  014C0C  50F4               	movf	prodh,w,c
 18752  014C0E  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 18753  014C10  6EDA               	movwf	fsr2h,c
 18754  014C12  50DF               	movf	indf2,w,c
 18755                           
 18756                           ; BSR set to: 0
 18757  014C14  0012               	return	
 18758  014C16                     l819:
 18759                           
 18760                           ; BSR set to: 0
 18761                           ;Types.c: 237: return ePinErrorState;
 18762                           
 18763                           ; BSR set to: 0
 18764  014C16  0E05               	movlw	5
 18765  014C18  0012               	return	
 18766  014C1A                     __end_of_PortProperty_Valid:
 18767                           	opt stack 0
 18768                           tosu	equ	0xFFF
 18769                           tosh	equ	0xFFE
 18770                           tosl	equ	0xFFD
 18771                           pclath	equ	0xFFA
 18772                           tblptru	equ	0xFF8
 18773                           tblptrh	equ	0xFF7
 18774                           tblptrl	equ	0xFF6
 18775                           tablat	equ	0xFF5
 18776                           prodh	equ	0xFF4
 18777                           prodl	equ	0xFF3
 18778                           intcon	equ	0xFF2
 18779                           postinc0	equ	0xFEE
 18780                           wreg	equ	0xFE8
 18781                           indf1	equ	0xFE7
 18782                           postdec1	equ	0xFE5
 18783                           fsr1h	equ	0xFE2
 18784                           fsr1l	equ	0xFE1
 18785                           indf2	equ	0xFDF
 18786                           postinc2	equ	0xFDE
 18787                           postdec2	equ	0xFDD
 18788                           plusw2	equ	0xFDB
 18789                           fsr2h	equ	0xFDA
 18790                           fsr2l	equ	0xFD9
 18791                           status	equ	0xFD8
 18792                           
 18793 ;; *************** function _Word_GetPair *****************
 18794 ;; Defined at:
 18795 ;;		line 156 in file "Library/Types.c"
 18796 ;; Parameters:    Size  Location     Type
 18797 ;;  pInput          2   12[BANK0 ] PTR struct Word
 18798 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18799 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18800 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18801 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18802 ;;  pPair           1   14[BANK0 ] unsigned char 
 18803 ;; Auto vars:     Size  Location     Type
 18804 ;;		None
 18805 ;; Return value:  Size  Location     Type
 18806 ;;                  1    wreg      unsigned char 
 18807 ;; Registers used:
 18808 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18809 ;; Tracked objects:
 18810 ;;		On entry : 0/0
 18811 ;;		On exit  : 0/0
 18812 ;;		Unchanged: 0/0
 18813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18814 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18817 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18818 ;;Total ram usage:        3 bytes
 18819 ;; Hardware stack levels used:    1
 18820 ;; Hardware stack levels required when called:    9
 18821 ;; This function calls:
 18822 ;;		_Byte_GetPair
 18823 ;; This function is called by:
 18824 ;;		_Port_Init
 18825 ;;		_Port_SetPin
 18826 ;;		_Port_Set
 18827 ;;		_PortProperty_Valid
 18828 ;;		_Port_SetPair
 18829 ;;		_Port_SetQuad
 18830 ;; This function uses a non-reentrant model
 18831 ;;
 18832                           
 18833                           	psect	text104
 18834  015614                     __ptext104:
 18835                           	opt stack 0
 18836  015614                     _Word_GetPair:
 18837                           	opt stack 15
 18838                           
 18839                           ;Types.c: 158: if (pPair >= 4)
 18840                           
 18841                           ; BSR set to: 0
 18842                           ;incstack = 0
 18843  015614  0E03               	movlw	3
 18844  015616  0100               	movlb	0	; () banked
 18845  015618  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 18846  01561A  D00C               	goto	l781
 18847                           
 18848                           ; BSR set to: 0
 18849                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 18850  01561C  0E01               	movlw	1
 18851  01561E  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 18852  015620  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 18853  015622  0E00               	movlw	0
 18854  015624  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 18855  015626  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 18856  015628  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 18857  01562A  0FFC               	addlw	252
 18858  01562C  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 18859  01562E  EC81  F0AC         	call	_Byte_GetPair	;wreg free
 18860  015632  0012               	return	
 18861  015634                     l781:
 18862                           
 18863                           ;Types.c: 160: else
 18864                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 18865  015634  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 18866  015638  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 18867  01563C  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 18868  015640  EC81  F0AC         	call	_Byte_GetPair	;wreg free
 18869  015644  0012               	return	
 18870  015646                     __end_of_Word_GetPair:
 18871                           	opt stack 0
 18872                           tosu	equ	0xFFF
 18873                           tosh	equ	0xFFE
 18874                           tosl	equ	0xFFD
 18875                           pclath	equ	0xFFA
 18876                           tblptru	equ	0xFF8
 18877                           tblptrh	equ	0xFF7
 18878                           tblptrl	equ	0xFF6
 18879                           tablat	equ	0xFF5
 18880                           prodh	equ	0xFF4
 18881                           prodl	equ	0xFF3
 18882                           intcon	equ	0xFF2
 18883                           postinc0	equ	0xFEE
 18884                           wreg	equ	0xFE8
 18885                           indf1	equ	0xFE7
 18886                           postdec1	equ	0xFE5
 18887                           fsr1h	equ	0xFE2
 18888                           fsr1l	equ	0xFE1
 18889                           indf2	equ	0xFDF
 18890                           postinc2	equ	0xFDE
 18891                           postdec2	equ	0xFDD
 18892                           plusw2	equ	0xFDB
 18893                           fsr2h	equ	0xFDA
 18894                           fsr2l	equ	0xFD9
 18895                           status	equ	0xFD8
 18896                           
 18897 ;; *************** function _Byte_GetPair *****************
 18898 ;; Defined at:
 18899 ;;		line 87 in file "Library/Types.c"
 18900 ;; Parameters:    Size  Location     Type
 18901 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 18902 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 18903 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 18904 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 18905 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 18906 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 18907 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 18908 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 18909 ;;		 -> NULL(0), 
 18910 ;;  pPair           1   11[BANK0 ] unsigned char 
 18911 ;; Auto vars:     Size  Location     Type
 18912 ;;		None
 18913 ;; Return value:  Size  Location     Type
 18914 ;;                  1    wreg      unsigned char 
 18915 ;; Registers used:
 18916 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18917 ;; Tracked objects:
 18918 ;;		On entry : 0/0
 18919 ;;		On exit  : 0/0
 18920 ;;		Unchanged: 0/0
 18921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18922 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18925 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18926 ;;Total ram usage:        3 bytes
 18927 ;; Hardware stack levels used:    1
 18928 ;; Hardware stack levels required when called:    8
 18929 ;; This function calls:
 18930 ;;		_Byte_GetZone
 18931 ;; This function is called by:
 18932 ;;		_Word_GetPair
 18933 ;; This function uses a non-reentrant model
 18934 ;;
 18935                           
 18936                           	psect	text105
 18937  015902                     __ptext105:
 18938                           	opt stack 0
 18939  015902                     _Byte_GetPair:
 18940                           	opt stack 15
 18941                           
 18942                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 18943                           
 18944                           ;incstack = 0
 18945  015902  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 18946  015906  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 18947  01590A  0E04               	movlw	4
 18948  01590C  0100               	movlb	0	; () banked
 18949  01590E  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 18950  015910  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 18951  015914  0E02               	movlw	2
 18952  015916  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 18953  015918  ECAB  F0A3         	call	_Byte_GetZone	;wreg free
 18954  01591C  0012               	return	
 18955  01591E                     __end_of_Byte_GetPair:
 18956                           	opt stack 0
 18957                           tosu	equ	0xFFF
 18958                           tosh	equ	0xFFE
 18959                           tosl	equ	0xFFD
 18960                           pclath	equ	0xFFA
 18961                           tblptru	equ	0xFF8
 18962                           tblptrh	equ	0xFF7
 18963                           tblptrl	equ	0xFF6
 18964                           tablat	equ	0xFF5
 18965                           prodh	equ	0xFF4
 18966                           prodl	equ	0xFF3
 18967                           intcon	equ	0xFF2
 18968                           postinc0	equ	0xFEE
 18969                           wreg	equ	0xFE8
 18970                           indf1	equ	0xFE7
 18971                           postdec1	equ	0xFE5
 18972                           fsr1h	equ	0xFE2
 18973                           fsr1l	equ	0xFE1
 18974                           indf2	equ	0xFDF
 18975                           postinc2	equ	0xFDE
 18976                           postdec2	equ	0xFDD
 18977                           plusw2	equ	0xFDB
 18978                           fsr2h	equ	0xFDA
 18979                           fsr2l	equ	0xFD9
 18980                           status	equ	0xFD8
 18981                           
 18982 ;; *************** function _Byte_GetZone *****************
 18983 ;; Defined at:
 18984 ;;		line 64 in file "Library/Types.c"
 18985 ;; Parameters:    Size  Location     Type
 18986 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 18987 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 18988 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 18989 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 18990 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 18991 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 18992 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 18993 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 18994 ;;		 -> NULL(0), 
 18995 ;;  pMax            1    2[BANK0 ] unsigned char 
 18996 ;;  pChunk          1    3[BANK0 ] unsigned char 
 18997 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 18998 ;; Auto vars:     Size  Location     Type
 18999 ;;  Output          1    8[BANK0 ] unsigned char 
 19000 ;;  Offset          1    7[BANK0 ] unsigned char 
 19001 ;;  MASK            1    6[BANK0 ] unsigned char 
 19002 ;; Return value:  Size  Location     Type
 19003 ;;                  1    wreg      unsigned char 
 19004 ;; Registers used:
 19005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 19006 ;; Tracked objects:
 19007 ;;		On entry : 0/0
 19008 ;;		On exit  : 0/0
 19009 ;;		Unchanged: 0/0
 19010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19011 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19012 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19014 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19015 ;;Total ram usage:        9 bytes
 19016 ;; Hardware stack levels used:    1
 19017 ;; Hardware stack levels required when called:    7
 19018 ;; This function calls:
 19019 ;;		Nothing
 19020 ;; This function is called by:
 19021 ;;		_Byte_GetPair
 19022 ;;		_Byte_GetTriple
 19023 ;;		_Byte_GetQuad
 19024 ;; This function uses a non-reentrant model
 19025 ;;
 19026                           
 19027                           	psect	text106
 19028  014756                     __ptext106:
 19029                           	opt stack 0
 19030  014756                     _Byte_GetZone:
 19031                           	opt stack 15
 19032                           
 19033                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 19034                           
 19035                           ;incstack = 0
 19036  014756  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 19037  01475A  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 19038  01475E  0E00               	movlw	low (__mediumconst shr (0+16))
 19039  014760  6EF8               	movwf	tblptru,c
 19040  014762  0E0F               	movlw	(high __ramtop+-1)
 19041  014764  64F7               	cpfsgt	tblptrh,c
 19042  014766  D003               	bra	u9757
 19043  014768  0008               	tblrd		*
 19044  01476A  50F5               	movf	tablat,w,c
 19045  01476C  D005               	bra	u9750
 19046  01476E                     u9757:
 19047  01476E  CFF6 FFE9          	movff	tblptrl,fsr0l
 19048  014772  CFF7 FFEA          	movff	tblptrh,fsr0h
 19049  014776  50EF               	movf	indf0,w,c
 19050  014778                     u9750:
 19051  014778  0100               	movlb	0	; () banked
 19052  01477A  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 19053                           
 19054                           ; BSR set to: 0
 19055                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 19056  01477C  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 19057  01477E  0D01               	mullw	1
 19058  014780  0E6D               	movlw	low _MASKS
 19059  014782  24F3               	addwf	prodl,w,c
 19060  014784  6EF6               	movwf	tblptrl,c
 19061  014786  0EFC               	movlw	high _MASKS
 19062  014788  20F4               	addwfc	prodh,w,c
 19063  01478A  6EF7               	movwf	tblptrh,c
 19064  01478C                     	if	1	;There are 3 active tblptr bytes
 19065  01478C  6AF8               	clrf	tblptru,c
 19066  01478E  0E00               	movlw	low (__mediumconst shr (0+16))
 19067  014790  22F8               	addwfc	tblptru,f,c
 19068  014792                     	endif
 19069  014792  0008               	tblrd		*
 19070  014794  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 19071                           
 19072                           ; BSR set to: 0
 19073                           ;Types.c: 68: UINT8 Offset = 0;
 19074  014798  0E00               	movlw	0
 19075  01479A  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 19076                           
 19077                           ;Types.c: 70: while (pChunk >= pMax)
 19078  01479C  D003               	goto	l732
 19079  01479E                     
 19080                           ; BSR set to: 0
 19081                           ;Types.c: 71: {
 19082                           ;Types.c: 72: pChunk -= pMax;
 19083                           
 19084                           ; BSR set to: 0
 19085  01479E  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 19086  0147A0  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 19087                           
 19088                           ; BSR set to: 0
 19089                           ;Types.c: 73: Offset += 1;
 19090  0147A2  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 19091  0147A4                     l732:
 19092                           
 19093                           ; BSR set to: 0
 19094                           
 19095                           ; BSR set to: 0
 19096  0147A4  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 19097  0147A6  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 19098  0147A8  B0D8               	btfsc	status,0,c
 19099  0147AA  D7F9               	goto	l733
 19100                           
 19101                           ; BSR set to: 0
 19102                           ;Types.c: 74: }
 19103                           ;Types.c: 75: pChunk *= pChunkSize;
 19104                           
 19105                           ; BSR set to: 0
 19106  0147AC  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 19107  0147AE  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 19108  0147B0  50F3               	movf	prodl,w,c
 19109  0147B2  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 19110                           
 19111                           ; BSR set to: 0
 19112                           ;Types.c: 76: pChunk += Offset;
 19113  0147B4  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 19114  0147B6  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 19115                           
 19116                           ; BSR set to: 0
 19117                           ;Types.c: 78: Output >>= pChunk;
 19118  0147B8  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 19119  0147BA  6F65               	movwf	??_Byte_GetZone& (0+255),b
 19120  0147BC  D002               	goto	u9770
 19121  0147BE                     u9775:
 19122  0147BE  90D8               	bcf	status,0,c
 19123  0147C0  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 19124  0147C2                     u9770:
 19125  0147C2  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 19126  0147C4  D7FC               	goto	u9775
 19127                           
 19128                           ;Types.c: 79: Output &= MASK;
 19129  0147C6  0100               	movlb	0	; () banked
 19130  0147C8  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 19131  0147CA  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 19132                           
 19133                           ; BSR set to: 0
 19134                           ;Types.c: 80: return Output;
 19135  0147CC  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 19136  0147CE  0012               	return	
 19137  0147D0                     __end_of_Byte_GetZone:
 19138                           	opt stack 0
 19139                           tosu	equ	0xFFF
 19140                           tosh	equ	0xFFE
 19141                           tosl	equ	0xFFD
 19142                           pclath	equ	0xFFA
 19143                           tblptru	equ	0xFF8
 19144                           tblptrh	equ	0xFF7
 19145                           tblptrl	equ	0xFF6
 19146                           tablat	equ	0xFF5
 19147                           prodh	equ	0xFF4
 19148                           prodl	equ	0xFF3
 19149                           intcon	equ	0xFF2
 19150                           indf0	equ	0xFEF
 19151                           postinc0	equ	0xFEE
 19152                           fsr0h	equ	0xFEA
 19153                           fsr0l	equ	0xFE9
 19154                           wreg	equ	0xFE8
 19155                           indf1	equ	0xFE7
 19156                           postdec1	equ	0xFE5
 19157                           fsr1h	equ	0xFE2
 19158                           fsr1l	equ	0xFE1
 19159                           indf2	equ	0xFDF
 19160                           postinc2	equ	0xFDE
 19161                           postdec2	equ	0xFDD
 19162                           plusw2	equ	0xFDB
 19163                           fsr2h	equ	0xFDA
 19164                           fsr2l	equ	0xFD9
 19165                           status	equ	0xFD8
 19166                           
 19167 ;; *************** function _Byte_SetQuad *****************
 19168 ;; Defined at:
 19169 ;;		line 101 in file "Library/Types.c"
 19170 ;; Parameters:    Size  Location     Type
 19171 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 19172 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 19173 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 19174 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 19175 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 19176 ;;		 -> NULL(0), 
 19177 ;;  pQuad           1   13[BANK0 ] unsigned char 
 19178 ;;  pValue          1   14[BANK0 ] unsigned char 
 19179 ;; Auto vars:     Size  Location     Type
 19180 ;;		None
 19181 ;; Return value:  Size  Location     Type
 19182 ;;                  1    wreg      void 
 19183 ;; Registers used:
 19184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19185 ;; Tracked objects:
 19186 ;;		On entry : 0/0
 19187 ;;		On exit  : 0/0
 19188 ;;		Unchanged: 0/0
 19189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19190 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19193 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19194 ;;Total ram usage:        4 bytes
 19195 ;; Hardware stack levels used:    1
 19196 ;; Hardware stack levels required when called:    8
 19197 ;; This function calls:
 19198 ;;		_Byte_SetZone
 19199 ;; This function is called by:
 19200 ;;		_Port_SetQuadType
 19201 ;;		_SPI_Init
 19202 ;;		_SPI_MinSpeed
 19203 ;;		_SPI_MaxSpeed
 19204 ;;		_Port_SetQuad
 19205 ;;		_Word_SetQuad
 19206 ;;		_I2C_Init
 19207 ;; This function uses a non-reentrant model
 19208 ;;
 19209                           
 19210                           	psect	text107
 19211  0158A8                     __ptext107:
 19212                           	opt stack 0
 19213  0158A8                     _Byte_SetQuad:
 19214                           	opt stack 20
 19215                           
 19216                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 19217                           
 19218                           ; BSR set to: 0
 19219                           ;incstack = 0
 19220  0158A8  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 19221  0158AC  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 19222  0158B0  0E02               	movlw	2
 19223  0158B2  0100               	movlb	0	; () banked
 19224  0158B4  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 19225  0158B6  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 19226  0158BA  0E04               	movlw	4
 19227  0158BC  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 19228  0158BE  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 19229  0158C2  EC59  F0A1         	call	_Byte_SetZone	;wreg free
 19230  0158C6  0012               	return		;funcret
 19231  0158C8                     __end_of_Byte_SetQuad:
 19232                           	opt stack 0
 19233                           tosu	equ	0xFFF
 19234                           tosh	equ	0xFFE
 19235                           tosl	equ	0xFFD
 19236                           pclath	equ	0xFFA
 19237                           tblptru	equ	0xFF8
 19238                           tblptrh	equ	0xFF7
 19239                           tblptrl	equ	0xFF6
 19240                           tablat	equ	0xFF5
 19241                           prodh	equ	0xFF4
 19242                           prodl	equ	0xFF3
 19243                           intcon	equ	0xFF2
 19244                           indf0	equ	0xFEF
 19245                           postinc0	equ	0xFEE
 19246                           fsr0h	equ	0xFEA
 19247                           fsr0l	equ	0xFE9
 19248                           wreg	equ	0xFE8
 19249                           indf1	equ	0xFE7
 19250                           postdec1	equ	0xFE5
 19251                           fsr1h	equ	0xFE2
 19252                           fsr1l	equ	0xFE1
 19253                           indf2	equ	0xFDF
 19254                           postinc2	equ	0xFDE
 19255                           postdec2	equ	0xFDD
 19256                           plusw2	equ	0xFDB
 19257                           fsr2h	equ	0xFDA
 19258                           fsr2l	equ	0xFD9
 19259                           status	equ	0xFD8
 19260                           
 19261 ;; *************** function _Byte_SetZone *****************
 19262 ;; Defined at:
 19263 ;;		line 47 in file "Library/Types.c"
 19264 ;; Parameters:    Size  Location     Type
 19265 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 19266 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 19267 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 19268 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 19269 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 19270 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 19271 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 19272 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 19273 ;;		 -> PortC(10), PortF(10), NULL(0), 
 19274 ;;  pMax            1    2[BANK0 ] unsigned char 
 19275 ;;  pChunk          1    3[BANK0 ] unsigned char 
 19276 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 19277 ;;  pValue          1    5[BANK0 ] unsigned char 
 19278 ;; Auto vars:     Size  Location     Type
 19279 ;;  MASK            1   10[BANK0 ] unsigned char 
 19280 ;;  Offset          1    9[BANK0 ] unsigned char 
 19281 ;; Return value:  Size  Location     Type
 19282 ;;                  1    wreg      void 
 19283 ;; Registers used:
 19284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 19285 ;; Tracked objects:
 19286 ;;		On entry : 0/0
 19287 ;;		On exit  : 0/0
 19288 ;;		Unchanged: 0/0
 19289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19290 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19291 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19292 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19293 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19294 ;;Total ram usage:       11 bytes
 19295 ;; Hardware stack levels used:    1
 19296 ;; Hardware stack levels required when called:    7
 19297 ;; This function calls:
 19298 ;;		Nothing
 19299 ;; This function is called by:
 19300 ;;		_Byte_SetPair
 19301 ;;		_Byte_SetQuad
 19302 ;;		_Byte_SetTriple
 19303 ;; This function uses a non-reentrant model
 19304 ;;
 19305                           
 19306                           	psect	text108
 19307  0142B2                     __ptext108:
 19308                           	opt stack 0
 19309  0142B2                     _Byte_SetZone:
 19310                           	opt stack 19
 19311                           
 19312                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 19313                           
 19314                           ;incstack = 0
 19315  0142B2  0100               	movlb	0	; () banked
 19316  0142B4  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 19317  0142B6  0D01               	mullw	1
 19318  0142B8  0E6D               	movlw	low _MASKS
 19319  0142BA  24F3               	addwf	prodl,w,c
 19320  0142BC  6EF6               	movwf	tblptrl,c
 19321  0142BE  0EFC               	movlw	high _MASKS
 19322  0142C0  20F4               	addwfc	prodh,w,c
 19323  0142C2  6EF7               	movwf	tblptrh,c
 19324  0142C4                     	if	1	;There are 3 active tblptr bytes
 19325  0142C4  6AF8               	clrf	tblptru,c
 19326  0142C6  0E00               	movlw	low (__mediumconst shr (0+16))
 19327  0142C8  22F8               	addwfc	tblptru,f,c
 19328  0142CA                     	endif
 19329  0142CA  0008               	tblrd		*
 19330  0142CC  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 19331                           
 19332                           ; BSR set to: 0
 19333                           ;Types.c: 50: UINT8 Offset = 0;
 19334  0142D0  0E00               	movlw	0
 19335  0142D2  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 19336                           
 19337                           ;Types.c: 52: while (pChunk >= pMax)
 19338  0142D4  D003               	goto	l726
 19339  0142D6                     
 19340                           ; BSR set to: 0
 19341                           ;Types.c: 53: {
 19342                           ;Types.c: 54: pChunk -= pMax;
 19343                           
 19344                           ; BSR set to: 0
 19345  0142D6  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 19346  0142D8  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 19347                           
 19348                           ; BSR set to: 0
 19349                           ;Types.c: 55: Offset += 1;
 19350  0142DA  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 19351  0142DC                     l726:
 19352                           
 19353                           ; BSR set to: 0
 19354                           
 19355                           ; BSR set to: 0
 19356  0142DC  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 19357  0142DE  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 19358  0142E0  B0D8               	btfsc	status,0,c
 19359  0142E2  D7F9               	goto	l727
 19360                           
 19361                           ; BSR set to: 0
 19362                           ;Types.c: 56: }
 19363                           ;Types.c: 57: pChunk *= pChunkSize;
 19364                           
 19365                           ; BSR set to: 0
 19366  0142E4  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 19367  0142E6  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 19368  0142E8  50F3               	movf	prodl,w,c
 19369  0142EA  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 19370                           
 19371                           ; BSR set to: 0
 19372                           ;Types.c: 58: pChunk += Offset;
 19373  0142EC  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 19374  0142EE  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 19375                           
 19376                           ; BSR set to: 0
 19377                           ;Types.c: 60: pValue &= MASK;
 19378  0142F0  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 19379  0142F2  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 19380                           
 19381                           ; BSR set to: 0
 19382                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 19383  0142F4  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 19384  0142F8  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 19385  0142FC  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 19386  0142FE  D002               	goto	u9944
 19387  014300                     u9945:
 19388  014300  90D8               	bcf	status,0,c
 19389  014302  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 19390  014304                     u9944:
 19391  014304  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 19392  014306  D7FC               	goto	u9945
 19393  014308  0100               	movlb	0	; () banked
 19394  01430A  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 19395  01430C  0AFF               	xorlw	255
 19396  01430E  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 19397  014310  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 19398  014314  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 19399  014318  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 19400  01431A  16DF               	andwf	indf2,f,c
 19401                           
 19402                           ; BSR set to: 0
 19403                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 19404  01431C  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 19405  014320  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 19406  014324  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 19407  014326  D002               	goto	u9954
 19408  014328                     u9955:
 19409  014328  90D8               	bcf	status,0,c
 19410  01432A  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 19411  01432C                     u9954:
 19412  01432C  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 19413  01432E  D7FC               	goto	u9955
 19414  014330  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 19415  014334  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 19416  014338  0100               	movlb	0	; () banked
 19417  01433A  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 19418  01433C  12DF               	iorwf	indf2,f,c
 19419                           
 19420                           ; BSR set to: 0
 19421  01433E  0012               	return		;funcret
 19422  014340                     __end_of_Byte_SetZone:
 19423                           	opt stack 0
 19424                           tosu	equ	0xFFF
 19425                           tosh	equ	0xFFE
 19426                           tosl	equ	0xFFD
 19427                           pclath	equ	0xFFA
 19428                           tblptru	equ	0xFF8
 19429                           tblptrh	equ	0xFF7
 19430                           tblptrl	equ	0xFF6
 19431                           tablat	equ	0xFF5
 19432                           prodh	equ	0xFF4
 19433                           prodl	equ	0xFF3
 19434                           intcon	equ	0xFF2
 19435                           indf0	equ	0xFEF
 19436                           postinc0	equ	0xFEE
 19437                           fsr0h	equ	0xFEA
 19438                           fsr0l	equ	0xFE9
 19439                           wreg	equ	0xFE8
 19440                           indf1	equ	0xFE7
 19441                           postdec1	equ	0xFE5
 19442                           fsr1h	equ	0xFE2
 19443                           fsr1l	equ	0xFE1
 19444                           indf2	equ	0xFDF
 19445                           postinc2	equ	0xFDE
 19446                           postdec2	equ	0xFDD
 19447                           plusw2	equ	0xFDB
 19448                           fsr2h	equ	0xFDA
 19449                           fsr2l	equ	0xFD9
 19450                           status	equ	0xFD8
 19451                           
 19452 ;; *************** function _Create_Maze *****************
 19453 ;; Defined at:
 19454 ;;		line 8 in file "dans.c"
 19455 ;; Parameters:    Size  Location     Type
 19456 ;;		None
 19457 ;; Auto vars:     Size  Location     Type
 19458 ;;  j               2   98[BANK0 ] int 
 19459 ;;  j               2   94[BANK0 ] int 
 19460 ;;  i               2   96[BANK0 ] int 
 19461 ;;  i               2   92[BANK0 ] int 
 19462 ;;  maze           80   10[BANK0 ] struct square[5][4]
 19463 ;;  count           2   90[BANK0 ] int 
 19464 ;; Return value:  Size  Location     Type
 19465 ;;                  2  2036[None  ] int 
 19466 ;; Registers used:
 19467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19468 ;; Tracked objects:
 19469 ;;		On entry : 0/0
 19470 ;;		On exit  : 0/0
 19471 ;;		Unchanged: 0/0
 19472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19474 ;;      Locals:         0      90       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19475 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19476 ;;      Totals:         0      94       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19477 ;;Total ram usage:       94 bytes
 19478 ;; Hardware stack levels used:    1
 19479 ;; Hardware stack levels required when called:    8
 19480 ;; This function calls:
 19481 ;;		___wmul
 19482 ;; This function is called by:
 19483 ;;		_main
 19484 ;; This function uses a non-reentrant model
 19485 ;;
 19486                           
 19487                           	psect	text109
 19488  01311A                     __ptext109:
 19489                           	opt stack 0
 19490  01311A                     _Create_Maze:
 19491                           	opt stack 22
 19492                           
 19493                           ;dans.c: 9: int count = 0;
 19494                           
 19495                           ; BSR set to: 0
 19496                           ;incstack = 0
 19497  01311A  0E00               	movlw	0
 19498  01311C  0100               	movlb	0	; () banked
 19499  01311E  6FBB               	movwf	(Create_Maze@count+1)& (0+255),b
 19500  013120  0E00               	movlw	0
 19501  013122  6FBA               	movwf	Create_Maze@count& (0+255),b
 19502                           
 19503                           ;dans.c: 10: struct square maze[4][5];
 19504                           ;dans.c: 11: for(int i = 0 ; i < 4; ++i){
 19505  013124  0E00               	movlw	0
 19506  013126  6FBD               	movwf	(Create_Maze@i+1)& (0+255),b
 19507  013128  0E00               	movlw	0
 19508  01312A  6FBC               	movwf	Create_Maze@i& (0+255),b
 19509  01312C                     l15747:
 19510                           
 19511                           ; BSR set to: 0
 19512  01312C  BFBD               	btfsc	(Create_Maze@i+1)& (0+255),7,b
 19513  01312E  D006               	goto	l2286
 19514  013130  51BD               	movf	(Create_Maze@i+1)& (0+255),w,b
 19515  013132  E13B               	bnz	l15769
 19516  013134  0E04               	movlw	4
 19517  013136  5DBC               	subwf	Create_Maze@i& (0+255),w,b
 19518  013138  B0D8               	btfsc	status,0,c
 19519  01313A  D037               	goto	u13160
 19520  01313C                     l2286:
 19521                           
 19522                           ; BSR set to: 0
 19523                           ;dans.c: 12: for(int j = 0 ; j < 5; ++j){
 19524                           
 19525                           ; BSR set to: 0
 19526  01313C  0E00               	movlw	0
 19527  01313E  6FBF               	movwf	(Create_Maze@j+1)& (0+255),b
 19528  013140  0E00               	movlw	0
 19529  013142  6FBE               	movwf	Create_Maze@j& (0+255),b
 19530  013144                     l15753:
 19531                           
 19532                           ; BSR set to: 0
 19533  013144  BFBF               	btfsc	(Create_Maze@j+1)& (0+255),7,b
 19534  013146  D006               	goto	l2288
 19535  013148  51BF               	movf	(Create_Maze@j+1)& (0+255),w,b
 19536  01314A  E12C               	bnz	l15765
 19537  01314C  0E05               	movlw	5
 19538  01314E  5DBE               	subwf	Create_Maze@j& (0+255),w,b
 19539  013150  B0D8               	btfsc	status,0,c
 19540  013152  D028               	goto	u13150
 19541  013154                     l2288:
 19542                           
 19543                           ; BSR set to: 0
 19544                           ;dans.c: 13: maze[i][j].id = count;
 19545                           
 19546                           ; BSR set to: 0
 19547  013154  C0BC  F060         	movff	Create_Maze@i,___wmul@multiplier
 19548  013158  C0BD  F061         	movff	Create_Maze@i+1,___wmul@multiplier+1
 19549  01315C  0E00               	movlw	0
 19550  01315E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19551  013160  0E14               	movlw	20
 19552  013162  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19553  013164  ECC4  F0AB         	call	___wmul	;wreg free
 19554  013168  0E6A               	movlw	low Create_Maze@maze
 19555  01316A  0100               	movlb	0	; () banked
 19556  01316C  6F66               	movwf	??_Create_Maze& (0+255),b
 19557  01316E  0E00               	movlw	high Create_Maze@maze
 19558  013170  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19559  013172  5160               	movf	?___wmul& (0+255),w,b
 19560  013174  2766               	addwf	??_Create_Maze& (0+255),f,b
 19561  013176  5161               	movf	(?___wmul+1)& (0+255),w,b
 19562  013178  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19563  01317A  90D8               	bcf	status,0,c
 19564  01317C  35BE               	rlcf	Create_Maze@j& (0+255),w,b
 19565  01317E  6ED9               	movwf	fsr2l,c
 19566  013180  35BF               	rlcf	(Create_Maze@j+1)& (0+255),w,b
 19567  013182  6EDA               	movwf	fsr2h,c
 19568  013184  90D8               	bcf	status,0,c
 19569  013186  36D9               	rlcf	fsr2l,f,c
 19570  013188  36DA               	rlcf	fsr2h,f,c
 19571  01318A  5166               	movf	??_Create_Maze& (0+255),w,b
 19572  01318C  26D9               	addwf	fsr2l,f,c
 19573  01318E  5167               	movf	(??_Create_Maze+1)& (0+255),w,b
 19574  013190  22DA               	addwfc	fsr2h,f,c
 19575  013192  C0BA  FFDE         	movff	Create_Maze@count,postinc2
 19576  013196  C0BB  FFDD         	movff	Create_Maze@count+1,postdec2
 19577                           
 19578                           ; BSR set to: 0
 19579                           ;dans.c: 14: ++count;
 19580  01319A  4BBA               	infsnz	Create_Maze@count& (0+255),f,b
 19581  01319C  2BBB               	incf	(Create_Maze@count+1)& (0+255),f,b
 19582                           
 19583                           ; BSR set to: 0
 19584  01319E  4BBE               	infsnz	Create_Maze@j& (0+255),f,b
 19585  0131A0  2BBF               	incf	(Create_Maze@j+1)& (0+255),f,b
 19586  0131A2  D7D0               	goto	l15753
 19587  0131A4                     u13150:
 19588  0131A4                     l15765:
 19589                           
 19590                           ; BSR set to: 0
 19591  0131A4  4BBC               	infsnz	Create_Maze@i& (0+255),f,b
 19592  0131A6  2BBD               	incf	(Create_Maze@i+1)& (0+255),f,b
 19593  0131A8  D7C1               	goto	l15747
 19594  0131AA                     u13160:
 19595  0131AA                     l15769:
 19596                           
 19597                           ; BSR set to: 0
 19598                           ;dans.c: 15: }
 19599                           ;dans.c: 16: }
 19600                           ;dans.c: 17: for(int i = 0 ; i < 4; ++i){
 19601  0131AA  0E00               	movlw	0
 19602  0131AC  6FC1               	movwf	(Create_Maze@i_14045+1)& (0+255),b
 19603  0131AE  0E00               	movlw	0
 19604  0131B0  6FC0               	movwf	Create_Maze@i_14045& (0+255),b
 19605  0131B2                     l15771:
 19606                           
 19607                           ; BSR set to: 0
 19608  0131B2  BFC1               	btfsc	(Create_Maze@i_14045+1)& (0+255),7,b
 19609  0131B4  D006               	goto	l2290
 19610  0131B6  51C1               	movf	(Create_Maze@i_14045+1)& (0+255),w,b
 19611  0131B8  E141               	bnz	l15791
 19612  0131BA  0E04               	movlw	4
 19613  0131BC  5DC0               	subwf	Create_Maze@i_14045& (0+255),w,b
 19614  0131BE  B0D8               	btfsc	status,0,c
 19615  0131C0  D03D               	goto	u13200
 19616  0131C2                     l2290:
 19617                           
 19618                           ; BSR set to: 0
 19619                           ;dans.c: 18: for(int j = 0 ; j < 5; ++j){
 19620                           
 19621                           ; BSR set to: 0
 19622  0131C2  0E00               	movlw	0
 19623  0131C4  6FC3               	movwf	(Create_Maze@j_14046+1)& (0+255),b
 19624  0131C6  0E00               	movlw	0
 19625  0131C8  6FC2               	movwf	Create_Maze@j_14046& (0+255),b
 19626  0131CA                     l15777:
 19627                           
 19628                           ; BSR set to: 0
 19629  0131CA  BFC3               	btfsc	(Create_Maze@j_14046+1)& (0+255),7,b
 19630  0131CC  D006               	goto	l2292
 19631  0131CE  51C3               	movf	(Create_Maze@j_14046+1)& (0+255),w,b
 19632  0131D0  E132               	bnz	l15787
 19633  0131D2  0E05               	movlw	5
 19634  0131D4  5DC2               	subwf	Create_Maze@j_14046& (0+255),w,b
 19635  0131D6  B0D8               	btfsc	status,0,c
 19636  0131D8  D02E               	goto	u13190
 19637  0131DA                     l2292:
 19638                           
 19639                           ; BSR set to: 0
 19640                           ;dans.c: 19: maze[i][j].victim = 0;
 19641                           
 19642                           ; BSR set to: 0
 19643  0131DA  C0C2  F066         	movff	Create_Maze@j_14046,??_Create_Maze
 19644  0131DE  C0C3  F067         	movff	Create_Maze@j_14046+1,??_Create_Maze+1
 19645  0131E2  90D8               	bcf	status,0,c
 19646  0131E4  3766               	rlcf	??_Create_Maze& (0+255),f,b
 19647  0131E6  3767               	rlcf	(??_Create_Maze+1)& (0+255),f,b
 19648  0131E8  90D8               	bcf	status,0,c
 19649  0131EA  3766               	rlcf	??_Create_Maze& (0+255),f,b
 19650  0131EC  3767               	rlcf	(??_Create_Maze+1)& (0+255),f,b
 19651  0131EE  C0C0  F060         	movff	Create_Maze@i_14045,___wmul@multiplier
 19652  0131F2  C0C1  F061         	movff	Create_Maze@i_14045+1,___wmul@multiplier+1
 19653  0131F6  0E00               	movlw	0
 19654  0131F8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19655  0131FA  0E14               	movlw	20
 19656  0131FC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19657  0131FE  ECC4  F0AB         	call	___wmul	;wreg free
 19658  013202  0E6A               	movlw	low Create_Maze@maze
 19659  013204  0100               	movlb	0	; () banked
 19660  013206  6F68               	movwf	(??_Create_Maze+2)& (0+255),b
 19661  013208  0E00               	movlw	high Create_Maze@maze
 19662  01320A  6F69               	movwf	(??_Create_Maze+3)& (0+255),b
 19663  01320C  5160               	movf	?___wmul& (0+255),w,b
 19664  01320E  2768               	addwf	(??_Create_Maze+2)& (0+255),f,b
 19665  013210  5161               	movf	(?___wmul+1)& (0+255),w,b
 19666  013212  2369               	addwfc	(??_Create_Maze+3)& (0+255),f,b
 19667  013214  5166               	movf	??_Create_Maze& (0+255),w,b
 19668  013216  2768               	addwf	(??_Create_Maze+2)& (0+255),f,b
 19669  013218  5167               	movf	(??_Create_Maze+1)& (0+255),w,b
 19670  01321A  2369               	addwfc	(??_Create_Maze+3)& (0+255),f,b
 19671  01321C  0E02               	movlw	2
 19672  01321E  2568               	addwf	(??_Create_Maze+2)& (0+255),w,b
 19673  013220  6ED9               	movwf	fsr2l,c
 19674  013222  0E00               	movlw	0
 19675  013224  2169               	addwfc	(??_Create_Maze+3)& (0+255),w,b
 19676  013226  6EDA               	movwf	fsr2h,c
 19677  013228  0E00               	movlw	0
 19678  01322A  6EDE               	movwf	postinc2,c
 19679  01322C  0E00               	movlw	0
 19680  01322E  6EDD               	movwf	postdec2,c
 19681                           
 19682                           ; BSR set to: 0
 19683  013230  4BC2               	infsnz	Create_Maze@j_14046& (0+255),f,b
 19684  013232  2BC3               	incf	(Create_Maze@j_14046+1)& (0+255),f,b
 19685  013234  D7CA               	goto	l15777
 19686  013236                     u13190:
 19687  013236                     l15787:
 19688                           
 19689                           ; BSR set to: 0
 19690  013236  4BC0               	infsnz	Create_Maze@i_14045& (0+255),f,b
 19691  013238  2BC1               	incf	(Create_Maze@i_14045+1)& (0+255),f,b
 19692  01323A  D7BB               	goto	l15771
 19693  01323C                     u13200:
 19694  01323C                     l15791:
 19695                           
 19696                           ; BSR set to: 0
 19697                           ;dans.c: 20: }
 19698                           ;dans.c: 21: }
 19699                           ;dans.c: 22: X_Pos = 3;
 19700  01323C  0E00               	movlw	0
 19701  01323E  6FE3               	movwf	(_X_Pos+1)& (0+255),b
 19702  013240  0E03               	movlw	3
 19703  013242  6FE2               	movwf	_X_Pos& (0+255),b
 19704                           
 19705                           ;dans.c: 23: Y_Pos = 1;
 19706  013244  0E00               	movlw	0
 19707  013246  6FE1               	movwf	(_Y_Pos+1)& (0+255),b
 19708  013248  0E01               	movlw	1
 19709  01324A  6FE0               	movwf	_Y_Pos& (0+255),b
 19710                           
 19711                           ; BSR set to: 0
 19712  01324C  0012               	return		;funcret
 19713  01324E                     __end_of_Create_Maze:
 19714                           	opt stack 0
 19715                           tosu	equ	0xFFF
 19716                           tosh	equ	0xFFE
 19717                           tosl	equ	0xFFD
 19718                           pclath	equ	0xFFA
 19719                           tblptru	equ	0xFF8
 19720                           tblptrh	equ	0xFF7
 19721                           tblptrl	equ	0xFF6
 19722                           tablat	equ	0xFF5
 19723                           prodh	equ	0xFF4
 19724                           prodl	equ	0xFF3
 19725                           intcon	equ	0xFF2
 19726                           indf0	equ	0xFEF
 19727                           postinc0	equ	0xFEE
 19728                           fsr0h	equ	0xFEA
 19729                           fsr0l	equ	0xFE9
 19730                           wreg	equ	0xFE8
 19731                           indf1	equ	0xFE7
 19732                           postdec1	equ	0xFE5
 19733                           fsr1h	equ	0xFE2
 19734                           fsr1l	equ	0xFE1
 19735                           indf2	equ	0xFDF
 19736                           postinc2	equ	0xFDE
 19737                           postdec2	equ	0xFDD
 19738                           plusw2	equ	0xFDB
 19739                           fsr2h	equ	0xFDA
 19740                           fsr2l	equ	0xFD9
 19741                           status	equ	0xFD8
 19742                           
 19743 ;; *************** function ___wmul *****************
 19744 ;; Defined at:
 19745 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 19746 ;; Parameters:    Size  Location     Type
 19747 ;;  multiplier      2    0[BANK0 ] unsigned int 
 19748 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 19749 ;; Auto vars:     Size  Location     Type
 19750 ;;  product         2    4[BANK0 ] unsigned int 
 19751 ;; Return value:  Size  Location     Type
 19752 ;;                  2    0[BANK0 ] unsigned int 
 19753 ;; Registers used:
 19754 ;;		wreg, status,2, status,0, prodl, prodh
 19755 ;; Tracked objects:
 19756 ;;		On entry : 0/0
 19757 ;;		On exit  : 0/0
 19758 ;;		Unchanged: 0/0
 19759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19760 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19761 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19763 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19764 ;;Total ram usage:        6 bytes
 19765 ;; Hardware stack levels used:    1
 19766 ;; Hardware stack levels required when called:    7
 19767 ;; This function calls:
 19768 ;;		Nothing
 19769 ;; This function is called by:
 19770 ;;		_LCD_DrawField
 19771 ;;		_Create_Maze
 19772 ;;		_Travel
 19773 ;;		_Init_Pos_Array
 19774 ;; This function uses a non-reentrant model
 19775 ;;
 19776                           
 19777                           	psect	text110
 19778  015788                     __ptext110:
 19779                           	opt stack 0
 19780  015788                     ___wmul:
 19781                           	opt stack 21
 19782                           
 19783                           ; BSR set to: 0
 19784                           ;incstack = 0
 19785  015788  0100               	movlb	0	; () banked
 19786  01578A  5160               	movf	___wmul@multiplier& (0+255),w,b
 19787  01578C  0362               	mulwf	___wmul@multiplicand& (0+255),b
 19788  01578E  CFF3 F064          	movff	prodl,___wmul@product
 19789  015792  CFF4 F065          	movff	prodh,___wmul@product+1
 19790  015796  5160               	movf	___wmul@multiplier& (0+255),w,b
 19791  015798  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 19792  01579A  50F3               	movf	prodl,w,c
 19793  01579C  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 19794  01579E  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 19795  0157A0  0362               	mulwf	___wmul@multiplicand& (0+255),b
 19796  0157A2  50F3               	movf	prodl,w,c
 19797  0157A4  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 19798                           
 19799                           ; BSR set to: 0
 19800  0157A6  C064  F060         	movff	___wmul@product,?___wmul
 19801  0157AA  C065  F061         	movff	___wmul@product+1,?___wmul+1
 19802  0157AE  0012               	return	
 19803  0157B0                     __end_of___wmul:
 19804                           	opt stack 0
 19805                           tosu	equ	0xFFF
 19806                           tosh	equ	0xFFE
 19807                           tosl	equ	0xFFD
 19808                           pclath	equ	0xFFA
 19809                           tblptru	equ	0xFF8
 19810                           tblptrh	equ	0xFF7
 19811                           tblptrl	equ	0xFF6
 19812                           tablat	equ	0xFF5
 19813                           prodh	equ	0xFF4
 19814                           prodl	equ	0xFF3
 19815                           intcon	equ	0xFF2
 19816                           indf0	equ	0xFEF
 19817                           postinc0	equ	0xFEE
 19818                           fsr0h	equ	0xFEA
 19819                           fsr0l	equ	0xFE9
 19820                           wreg	equ	0xFE8
 19821                           indf1	equ	0xFE7
 19822                           postdec1	equ	0xFE5
 19823                           fsr1h	equ	0xFE2
 19824                           fsr1l	equ	0xFE1
 19825                           indf2	equ	0xFDF
 19826                           postinc2	equ	0xFDE
 19827                           postdec2	equ	0xFDD
 19828                           plusw2	equ	0xFDB
 19829                           fsr2h	equ	0xFDA
 19830                           fsr2l	equ	0xFD9
 19831                           status	equ	0xFD8
 19832                           
 19833 ;; *************** function _Console_Init *****************
 19834 ;; Defined at:
 19835 ;;		line 157 in file "Library/Console.c"
 19836 ;; Parameters:    Size  Location     Type
 19837 ;;		None
 19838 ;; Auto vars:     Size  Location     Type
 19839 ;;  y               1    3[BANK0 ] unsigned char 
 19840 ;;  x               1    2[BANK0 ] unsigned char 
 19841 ;; Return value:  Size  Location     Type
 19842 ;;                  1    wreg      void 
 19843 ;; Registers used:
 19844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19845 ;; Tracked objects:
 19846 ;;		On entry : 0/0
 19847 ;;		On exit  : 0/0
 19848 ;;		Unchanged: 0/0
 19849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19851 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19852 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19853 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19854 ;;Total ram usage:        4 bytes
 19855 ;; Hardware stack levels used:    1
 19856 ;; Hardware stack levels required when called:    7
 19857 ;; This function calls:
 19858 ;;		Nothing
 19859 ;; This function is called by:
 19860 ;;		_main
 19861 ;; This function uses a non-reentrant model
 19862 ;;
 19863                           
 19864                           	psect	text111
 19865  014A78                     __ptext111:
 19866                           	opt stack 0
 19867  014A78                     _Console_Init:
 19868                           	opt stack 23
 19869                           
 19870                           ;Console.c: 160: lBufferX = 0;
 19871                           
 19872                           ; BSR set to: 0
 19873                           ;incstack = 0
 19874  014A78  0E00               	movlw	0
 19875  014A7A  0100               	movlb	0	; () banked
 19876  014A7C  6FF3               	movwf	_lBufferX& (0+255),b
 19877                           
 19878                           ;Console.c: 161: lBufferY = 0;
 19879  014A7E  0E00               	movlw	0
 19880  014A80  6FF2               	movwf	_lBufferY& (0+255),b
 19881                           
 19882                           ;Console.c: 163: UINT8 x, y;
 19883                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 19884  014A82  0E00               	movlw	0
 19885  014A84  6F62               	movwf	Console_Init@x& (0+255),b
 19886  014A86                     l15481:
 19887                           
 19888                           ; BSR set to: 0
 19889  014A86  0E13               	movlw	19
 19890  014A88  6562               	cpfsgt	Console_Init@x& (0+255),b
 19891  014A8A  D001               	goto	l976
 19892  014A8C  0012               	return	
 19893  014A8E                     l976:
 19894                           
 19895                           ; BSR set to: 0
 19896                           ;Console.c: 165: {
 19897                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 19898                           
 19899                           ; BSR set to: 0
 19900  014A8E  0E00               	movlw	0
 19901  014A90  6F63               	movwf	Console_Init@y& (0+255),b
 19902  014A92                     l15487:
 19903                           
 19904                           ; BSR set to: 0
 19905  014A92  0E0E               	movlw	14
 19906  014A94  6563               	cpfsgt	Console_Init@y& (0+255),b
 19907  014A96  D001               	goto	l978
 19908  014A98  D022               	goto	u12980
 19909  014A9A                     l978:
 19910                           
 19911                           ; BSR set to: 0
 19912                           ;Console.c: 167: {
 19913                           ;Console.c: 168: lBuffer[y][x] = '\0';
 19914                           
 19915                           ; BSR set to: 0
 19916  014A9A  5163               	movf	Console_Init@y& (0+255),w,b
 19917  014A9C  0D14               	mullw	20
 19918  014A9E  0E18               	movlw	low _lBuffer
 19919  014AA0  6F60               	movwf	??_Console_Init& (0+255),b
 19920  014AA2  0E03               	movlw	high _lBuffer
 19921  014AA4  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 19922  014AA6  50F3               	movf	prodl,w,c
 19923  014AA8  2760               	addwf	??_Console_Init& (0+255),f,b
 19924  014AAA  50F4               	movf	prodh,w,c
 19925  014AAC  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 19926  014AAE  5162               	movf	Console_Init@x& (0+255),w,b
 19927  014AB0  0D01               	mullw	1
 19928  014AB2  50F3               	movf	prodl,w,c
 19929  014AB4  2560               	addwf	??_Console_Init& (0+255),w,b
 19930  014AB6  6ED9               	movwf	fsr2l,c
 19931  014AB8  50F4               	movf	prodh,w,c
 19932  014ABA  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 19933  014ABC  6EDA               	movwf	fsr2h,c
 19934  014ABE  0E00               	movlw	0
 19935  014AC0  6EDF               	movwf	indf2,c
 19936                           
 19937                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 19938  014AC2  5163               	movf	Console_Init@y& (0+255),w,b
 19939  014AC4  0D02               	mullw	2
 19940  014AC6  0E50               	movlw	low _lCBuffer
 19941  014AC8  24F3               	addwf	prodl,w,c
 19942  014ACA  6ED9               	movwf	fsr2l,c
 19943  014ACC  0E02               	movlw	high _lCBuffer
 19944  014ACE  20F4               	addwfc	prodh,w,c
 19945  014AD0  6EDA               	movwf	fsr2h,c
 19946  014AD2  0EFF               	movlw	255
 19947  014AD4  6EDE               	movwf	postinc2,c
 19948  014AD6  0EFF               	movlw	255
 19949  014AD8  6EDD               	movwf	postdec2,c
 19950                           
 19951                           ; BSR set to: 0
 19952  014ADA  2B63               	incf	Console_Init@y& (0+255),f,b
 19953  014ADC  D7DA               	goto	l15487
 19954  014ADE                     u12980:
 19955                           
 19956                           ; BSR set to: 0
 19957                           
 19958                           ; BSR set to: 0
 19959  014ADE  2B62               	incf	Console_Init@x& (0+255),f,b
 19960  014AE0  D7D2               	goto	l15481
 19961  014AE2                     __end_of_Console_Init:
 19962                           	opt stack 0
 19963                           tosu	equ	0xFFF
 19964                           tosh	equ	0xFFE
 19965                           tosl	equ	0xFFD
 19966                           pclath	equ	0xFFA
 19967                           tblptru	equ	0xFF8
 19968                           tblptrh	equ	0xFF7
 19969                           tblptrl	equ	0xFF6
 19970                           tablat	equ	0xFF5
 19971                           prodh	equ	0xFF4
 19972                           prodl	equ	0xFF3
 19973                           intcon	equ	0xFF2
 19974                           indf0	equ	0xFEF
 19975                           postinc0	equ	0xFEE
 19976                           fsr0h	equ	0xFEA
 19977                           fsr0l	equ	0xFE9
 19978                           wreg	equ	0xFE8
 19979                           indf1	equ	0xFE7
 19980                           postdec1	equ	0xFE5
 19981                           fsr1h	equ	0xFE2
 19982                           fsr1l	equ	0xFE1
 19983                           indf2	equ	0xFDF
 19984                           postinc2	equ	0xFDE
 19985                           postdec2	equ	0xFDD
 19986                           plusw2	equ	0xFDB
 19987                           fsr2h	equ	0xFDA
 19988                           fsr2l	equ	0xFD9
 19989                           status	equ	0xFD8
 19990                           
 19991 ;; *************** function _ADCAverage *****************
 19992 ;; Defined at:
 19993 ;;		line 46 in file "dans.c"
 19994 ;; Parameters:    Size  Location     Type
 19995 ;;		None
 19996 ;; Auto vars:     Size  Location     Type
 19997 ;;		None
 19998 ;; Return value:  Size  Location     Type
 19999 ;;                  2  2000[None  ] int 
 20000 ;; Registers used:
 20001 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20002 ;; Tracked objects:
 20003 ;;		On entry : 0/0
 20004 ;;		On exit  : 0/0
 20005 ;;		Unchanged: 0/0
 20006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20008 ;;      Locals:         0       0       0       0      24       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20009 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20010 ;;      Totals:         0       2       0       0      24       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20011 ;;Total ram usage:       26 bytes
 20012 ;; Hardware stack levels used:    1
 20013 ;; Hardware stack levels required when called:   11
 20014 ;; This function calls:
 20015 ;;		_FunctReadADC
 20016 ;;		_HMI_Render
 20017 ;;		_HMI_SetNumber
 20018 ;;		___awdiv
 20019 ;;		___fladd
 20020 ;;		___flmul
 20021 ;;		___flneg
 20022 ;;		___fltol
 20023 ;;		___xxtofl
 20024 ;;		_pow
 20025 ;; This function is called by:
 20026 ;;		_main
 20027 ;;		_Sensor_Observe
 20028 ;;		_Closest_Object
 20029 ;;		_Find_Flag
 20030 ;; This function uses a non-reentrant model
 20031 ;;
 20032                           
 20033                           	psect	text112
 20034  010D0A                     __ptext112:
 20035                           	opt stack 0
 20036  010D0A                     _ADCAverage:
 20037                           	opt stack 19
 20038                           
 20039                           ;dans.c: 48: total = total - readings[readIndex];
 20040                           
 20041                           ; BSR set to: 0
 20042                           ;incstack = 0
 20043  010D0A  90D8               	bcf	status,0,c
 20044  010D0C  0100               	movlb	0	; () banked
 20045  010D0E  35E6               	rlcf	_readIndex& (0+255),w,b
 20046  010D10  6ED9               	movwf	fsr2l,c
 20047  010D12  35E7               	rlcf	(_readIndex+1)& (0+255),w,b
 20048  010D14  6EDA               	movwf	fsr2h,c
 20049  010D16  0E6E               	movlw	low _readings
 20050  010D18  26D9               	addwf	fsr2l,f,c
 20051  010D1A  0E02               	movlw	high _readings
 20052  010D1C  22DA               	addwfc	fsr2h,f,c
 20053  010D1E  CFDE F0D7          	movff	postinc2,??_ADCAverage
 20054  010D22  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 20055  010D26  1FD7               	comf	??_ADCAverage& (0+255),f,b
 20056  010D28  1FD8               	comf	(??_ADCAverage+1)& (0+255),f,b
 20057  010D2A  4BD7               	infsnz	??_ADCAverage& (0+255),f,b
 20058  010D2C  2BD8               	incf	(??_ADCAverage+1)& (0+255),f,b
 20059  010D2E  5029               	movf	_total,w,c
 20060  010D30  25D7               	addwf	??_ADCAverage& (0+255),w,b
 20061  010D32  6E29               	movwf	_total,c
 20062  010D34  502A               	movf	_total+1,w,c
 20063  010D36  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 20064  010D38  6E2A               	movwf	_total+1,c
 20065                           
 20066                           ; BSR set to: 0
 20067                           ;dans.c: 50: readings[readIndex] = (FunctReadADC(0));
 20068  010D3A  0E00               	movlw	0
 20069  010D3C  6F61               	movwf	(FunctReadADC@channel+1)& (0+255),b
 20070  010D3E  0E00               	movlw	0
 20071  010D40  6F60               	movwf	FunctReadADC@channel& (0+255),b
 20072  010D42  EC0F  F0AA         	call	_FunctReadADC	;wreg free
 20073  010D46  90D8               	bcf	status,0,c
 20074  010D48  0100               	movlb	0	; () banked
 20075  010D4A  35E6               	rlcf	_readIndex& (0+255),w,b
 20076  010D4C  6ED9               	movwf	fsr2l,c
 20077  010D4E  35E7               	rlcf	(_readIndex+1)& (0+255),w,b
 20078  010D50  6EDA               	movwf	fsr2h,c
 20079  010D52  0E6E               	movlw	low _readings
 20080  010D54  26D9               	addwf	fsr2l,f,c
 20081  010D56  0E02               	movlw	high _readings
 20082  010D58  22DA               	addwfc	fsr2h,f,c
 20083  010D5A  C060  FFDE         	movff	?_FunctReadADC,postinc2
 20084  010D5E  C061  FFDD         	movff	?_FunctReadADC+1,postdec2
 20085                           
 20086                           ; BSR set to: 0
 20087                           ;dans.c: 52: total = total + readings[readIndex];
 20088  010D62  90D8               	bcf	status,0,c
 20089  010D64  35E6               	rlcf	_readIndex& (0+255),w,b
 20090  010D66  6ED9               	movwf	fsr2l,c
 20091  010D68  35E7               	rlcf	(_readIndex+1)& (0+255),w,b
 20092  010D6A  6EDA               	movwf	fsr2h,c
 20093  010D6C  0E6E               	movlw	low _readings
 20094  010D6E  26D9               	addwf	fsr2l,f,c
 20095  010D70  0E02               	movlw	high _readings
 20096  010D72  22DA               	addwfc	fsr2h,f,c
 20097  010D74  CFDE F0D7          	movff	postinc2,??_ADCAverage
 20098  010D78  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 20099  010D7C  5029               	movf	_total,w,c
 20100  010D7E  25D7               	addwf	??_ADCAverage& (0+255),w,b
 20101  010D80  6E29               	movwf	_total,c
 20102  010D82  502A               	movf	_total+1,w,c
 20103  010D84  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 20104  010D86  6E2A               	movwf	_total+1,c
 20105                           
 20106                           ; BSR set to: 0
 20107                           ;dans.c: 54: readIndex++;
 20108  010D88  4BE6               	infsnz	_readIndex& (0+255),f,b
 20109  010D8A  2BE7               	incf	(_readIndex+1)& (0+255),f,b
 20110                           
 20111                           ; BSR set to: 0
 20112                           ;dans.c: 57: if (readIndex >= numReadings) {
 20113  010D8C  5047               	movf	_numReadings,w,c
 20114  010D8E  5DE6               	subwf	_readIndex& (0+255),w,b
 20115  010D90  51E7               	movf	(_readIndex+1)& (0+255),w,b
 20116  010D92  0A80               	xorlw	128
 20117  010D94  6FD7               	movwf	??_ADCAverage& (0+255),b
 20118  010D96  5048               	movf	_numReadings+1,w,c
 20119  010D98  0A80               	xorlw	128
 20120  010D9A  59D7               	subwfb	??_ADCAverage& (0+255),w,b
 20121  010D9C  A0D8               	btfss	status,0,c
 20122  010D9E  D004               	goto	l2310
 20123                           
 20124                           ; BSR set to: 0
 20125                           ;dans.c: 59: readIndex = 0;
 20126  010DA0  0E00               	movlw	0
 20127  010DA2  6FE7               	movwf	(_readIndex+1)& (0+255),b
 20128  010DA4  0E00               	movlw	0
 20129  010DA6  6FE6               	movwf	_readIndex& (0+255),b
 20130  010DA8                     l2310:
 20131                           
 20132                           ; BSR set to: 0
 20133                           ;dans.c: 60: }
 20134                           ;dans.c: 63: average = total / numReadings;
 20135                           
 20136                           ; BSR set to: 0
 20137  010DA8  C029  F060         	movff	_total,___awdiv@dividend
 20138  010DAC  C02A  F061         	movff	_total+1,___awdiv@dividend+1
 20139  010DB0  C047  F062         	movff	_numReadings,___awdiv@divisor
 20140  010DB4  C048  F063         	movff	_numReadings+1,___awdiv@divisor+1
 20141  010DB8  EC6C  F0A2         	call	___awdiv	;wreg free
 20142  010DBC  C060  F0E4         	movff	?___awdiv,_average
 20143  010DC0  C061  F0E5         	movff	?___awdiv+1,_average+1
 20144                           
 20145                           ;dans.c: 64: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
 20146  010DC4  C0E4  F060         	movff	_average,___xxtofl@val
 20147  010DC8  C0E5  F061         	movff	_average+1,___xxtofl@val+1
 20148  010DCC  0100               	movlb	0	; () banked
 20149  010DCE  0E00               	movlw	0
 20150  010DD0  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 20151  010DD2  0EFF               	movlw	-1
 20152  010DD4  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 20153  010DD6  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 20154  010DD8  0E01               	movlw	1
 20155  010DDA  EC56  F095         	call	___xxtofl
 20156  010DDE  C060  F300         	movff	?___xxtofl,_ADCAverage$15798
 20157  010DE2  C061  F301         	movff	?___xxtofl+1,_ADCAverage$15798+1
 20158  010DE6  C062  F302         	movff	?___xxtofl+2,_ADCAverage$15798+2
 20159  010DEA  C063  F303         	movff	?___xxtofl+3,_ADCAverage$15798+3
 20160                           
 20161                           ;dans.c: 64: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
 20162  010DEE  0E00               	movlw	0
 20163  010DF0  0100               	movlb	0	; () banked
 20164  010DF2  6FC6               	movwf	pow@y& (0+255),b
 20165  010DF4  0E00               	movlw	0
 20166  010DF6  6FC7               	movwf	(pow@y+1)& (0+255),b
 20167  010DF8  0E00               	movlw	0
 20168  010DFA  6FC8               	movwf	(pow@y+2)& (0+255),b
 20169  010DFC  0E40               	movlw	64
 20170  010DFE  6FC9               	movwf	(pow@y+3)& (0+255),b
 20171  010E00  C300  F0C2         	movff	_ADCAverage$15798,pow@x
 20172  010E04  C301  F0C3         	movff	_ADCAverage$15798+1,pow@x+1
 20173  010E08  C302  F0C4         	movff	_ADCAverage$15798+2,pow@x+2
 20174  010E0C  C303  F0C5         	movff	_ADCAverage$15798+3,pow@x+3
 20175  010E10  EC24  F08E         	call	_pow	;wreg free
 20176  010E14  C0C2  F304         	movff	?_pow,_ADCAverage$15799
 20177  010E18  C0C3  F305         	movff	?_pow+1,_ADCAverage$15799+1
 20178  010E1C  C0C4  F306         	movff	?_pow+2,_ADCAverage$15799+2
 20179  010E20  C0C5  F307         	movff	?_pow+3,_ADCAverage$15799+3
 20180                           
 20181                           ;dans.c: 64: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
 20182  010E24  C0E4  F060         	movff	_average,___xxtofl@val
 20183  010E28  C0E5  F061         	movff	_average+1,___xxtofl@val+1
 20184  010E2C  0100               	movlb	0	; () banked
 20185  010E2E  0E00               	movlw	0
 20186  010E30  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 20187  010E32  0EFF               	movlw	-1
 20188  010E34  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 20189  010E36  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 20190  010E38  0E01               	movlw	1
 20191  010E3A  EC56  F095         	call	___xxtofl
 20192  010E3E  C060  F308         	movff	?___xxtofl,_ADCAverage$15800
 20193  010E42  C061  F309         	movff	?___xxtofl+1,_ADCAverage$15800+1
 20194  010E46  C062  F30A         	movff	?___xxtofl+2,_ADCAverage$15800+2
 20195  010E4A  C063  F30B         	movff	?___xxtofl+3,_ADCAverage$15800+3
 20196                           
 20197                           ;dans.c: 64: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
 20198  010E4E  0E00               	movlw	0
 20199  010E50  0100               	movlb	0	; () banked
 20200  010E52  6FC6               	movwf	pow@y& (0+255),b
 20201  010E54  0E00               	movlw	0
 20202  010E56  6FC7               	movwf	(pow@y+1)& (0+255),b
 20203  010E58  0E40               	movlw	64
 20204  010E5A  6FC8               	movwf	(pow@y+2)& (0+255),b
 20205  010E5C  0E40               	movlw	64
 20206  010E5E  6FC9               	movwf	(pow@y+3)& (0+255),b
 20207  010E60  C308  F0C2         	movff	_ADCAverage$15800,pow@x
 20208  010E64  C309  F0C3         	movff	_ADCAverage$15800+1,pow@x+1
 20209  010E68  C30A  F0C4         	movff	_ADCAverage$15800+2,pow@x+2
 20210  010E6C  C30B  F0C5         	movff	_ADCAverage$15800+3,pow@x+3
 20211  010E70  EC24  F08E         	call	_pow	;wreg free
 20212  010E74  C0C2  F30C         	movff	?_pow,_ADCAverage$15801
 20213  010E78  C0C3  F30D         	movff	?_pow+1,_ADCAverage$15801+1
 20214  010E7C  C0C4  F30E         	movff	?_pow+2,_ADCAverage$15801+2
 20215  010E80  C0C5  F30F         	movff	?_pow+3,_ADCAverage$15801+3
 20216                           
 20217                           ;dans.c: 64: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
 20218  010E84  0EA6               	movlw	166
 20219  010E86  0100               	movlb	0	; () banked
 20220  010E88  6F72               	movwf	___flmul@a& (0+255),b
 20221  010E8A  0E9B               	movlw	155
 20222  010E8C  6F73               	movwf	(___flmul@a+1)& (0+255),b
 20223  010E8E  0EC4               	movlw	196
 20224  010E90  6F74               	movwf	(___flmul@a+2)& (0+255),b
 20225  010E92  0E3A               	movlw	58
 20226  010E94  6F75               	movwf	(___flmul@a+3)& (0+255),b
 20227  010E96  C304  F06E         	movff	_ADCAverage$15799,___flmul@b
 20228  010E9A  C305  F06F         	movff	_ADCAverage$15799+1,___flmul@b+1
 20229  010E9E  C306  F070         	movff	_ADCAverage$15799+2,___flmul@b+2
 20230  010EA2  C307  F071         	movff	_ADCAverage$15799+3,___flmul@b+3
 20231  010EA6  ECD2  F081         	call	___flmul	;wreg free
 20232  010EAA  C06E  F08F         	movff	?___flmul,___fladd@a
 20233  010EAE  C06F  F090         	movff	?___flmul+1,___fladd@a+1
 20234  010EB2  C070  F091         	movff	?___flmul+2,___fladd@a+2
 20235  010EB6  C071  F092         	movff	?___flmul+3,___fladd@a+3
 20236  010EBA  0E87               	movlw	135
 20237  010EBC  0100               	movlb	0	; () banked
 20238  010EBE  6F72               	movwf	___flmul@a& (0+255),b
 20239  010EC0  0E97               	movlw	151
 20240  010EC2  6F73               	movwf	(___flmul@a+1)& (0+255),b
 20241  010EC4  0E71               	movlw	113
 20242  010EC6  6F74               	movwf	(___flmul@a+2)& (0+255),b
 20243  010EC8  0EB5               	movlw	181
 20244  010ECA  6F75               	movwf	(___flmul@a+3)& (0+255),b
 20245  010ECC  C30C  F06E         	movff	_ADCAverage$15801,___flmul@b
 20246  010ED0  C30D  F06F         	movff	_ADCAverage$15801+1,___flmul@b+1
 20247  010ED4  C30E  F070         	movff	_ADCAverage$15801+2,___flmul@b+2
 20248  010ED8  C30F  F071         	movff	_ADCAverage$15801+3,___flmul@b+3
 20249  010EDC  ECD2  F081         	call	___flmul	;wreg free
 20250  010EE0  C06E  F08B         	movff	?___flmul,___fladd@b
 20251  010EE4  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 20252  010EE8  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 20253  010EEC  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 20254  010EF0  EC7B  F083         	call	___fladd	;wreg free
 20255  010EF4  C08B  F310         	movff	?___fladd,_ADCAverage$15802
 20256  010EF8  C08C  F311         	movff	?___fladd+1,_ADCAverage$15802+1
 20257  010EFC  C08D  F312         	movff	?___fladd+2,_ADCAverage$15802+2
 20258  010F00  C08E  F313         	movff	?___fladd+3,_ADCAverage$15802+3
 20259                           
 20260                           ;dans.c: 64: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
 20261  010F04  0E8C               	movlw	140
 20262  010F06  0100               	movlb	0	; () banked
 20263  010F08  6F72               	movwf	___flmul@a& (0+255),b
 20264  010F0A  0EB9               	movlw	185
 20265  010F0C  6F73               	movwf	(___flmul@a+1)& (0+255),b
 20266  010F0E  0E6B               	movlw	107
 20267  010F10  6F74               	movwf	(___flmul@a+2)& (0+255),b
 20268  010F12  0E3F               	movlw	63
 20269  010F14  6F75               	movwf	(___flmul@a+3)& (0+255),b
 20270  010F16  C0E4  F060         	movff	_average,___xxtofl@val
 20271  010F1A  C0E5  F061         	movff	_average+1,___xxtofl@val+1
 20272  010F1E  0E00               	movlw	0
 20273  010F20  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 20274  010F22  0EFF               	movlw	-1
 20275  010F24  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 20276  010F26  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 20277  010F28  0E01               	movlw	1
 20278  010F2A  EC56  F095         	call	___xxtofl
 20279  010F2E  C060  F06E         	movff	?___xxtofl,___flmul@b
 20280  010F32  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 20281  010F36  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 20282  010F3A  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 20283  010F3E  ECD2  F081         	call	___flmul	;wreg free
 20284  010F42  C06E  F087         	movff	?___flmul,___flneg@f1
 20285  010F46  C06F  F088         	movff	?___flmul+1,___flneg@f1+1
 20286  010F4A  C070  F089         	movff	?___flmul+2,___flneg@f1+2
 20287  010F4E  C071  F08A         	movff	?___flmul+3,___flneg@f1+3
 20288  010F52  EC53  F0AB         	call	___flneg	;wreg free
 20289  010F56  C087  F08F         	movff	?___flneg,___fladd@a
 20290  010F5A  C088  F090         	movff	?___flneg+1,___fladd@a+1
 20291  010F5E  C089  F091         	movff	?___flneg+2,___fladd@a+2
 20292  010F62  C08A  F092         	movff	?___flneg+3,___fladd@a+3
 20293  010F66  C310  F08B         	movff	_ADCAverage$15802,___fladd@b
 20294  010F6A  C311  F08C         	movff	_ADCAverage$15802+1,___fladd@b+1
 20295  010F6E  C312  F08D         	movff	_ADCAverage$15802+2,___fladd@b+2
 20296  010F72  C313  F08E         	movff	_ADCAverage$15802+3,___fladd@b+3
 20297  010F76  EC7B  F083         	call	___fladd	;wreg free
 20298  010F7A  C08B  F314         	movff	?___fladd,_ADCAverage$15803
 20299  010F7E  C08C  F315         	movff	?___fladd+1,_ADCAverage$15803+1
 20300  010F82  C08D  F316         	movff	?___fladd+2,_ADCAverage$15803+2
 20301  010F86  C08E  F317         	movff	?___fladd+3,_ADCAverage$15803+3
 20302                           
 20303                           ;dans.c: 64: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
 20304  010F8A  0E7B               	movlw	123
 20305  010F8C  0100               	movlb	0	; () banked
 20306  010F8E  6F8F               	movwf	___fladd@a& (0+255),b
 20307  010F90  0E54               	movlw	84
 20308  010F92  6F90               	movwf	(___fladd@a+1)& (0+255),b
 20309  010F94  0E63               	movlw	99
 20310  010F96  6F91               	movwf	(___fladd@a+2)& (0+255),b
 20311  010F98  0E43               	movlw	67
 20312  010F9A  6F92               	movwf	(___fladd@a+3)& (0+255),b
 20313  010F9C  C314  F08B         	movff	_ADCAverage$15803,___fladd@b
 20314  010FA0  C315  F08C         	movff	_ADCAverage$15803+1,___fladd@b+1
 20315  010FA4  C316  F08D         	movff	_ADCAverage$15803+2,___fladd@b+2
 20316  010FA8  C317  F08E         	movff	_ADCAverage$15803+3,___fladd@b+3
 20317  010FAC  EC7B  F083         	call	___fladd	;wreg free
 20318  010FB0  C08B  F09F         	movff	?___fladd,___fltol@f1
 20319  010FB4  C08C  F0A0         	movff	?___fladd+1,___fltol@f1+1
 20320  010FB8  C08D  F0A1         	movff	?___fladd+2,___fltol@f1+2
 20321  010FBC  C08E  F0A2         	movff	?___fladd+3,___fltol@f1+3
 20322  010FC0  EC64  F09D         	call	___fltol	;wreg free
 20323  010FC4  C09F  F0E4         	movff	?___fltol,_average
 20324  010FC8  C0A0  F0E5         	movff	?___fltol+1,_average+1
 20325                           
 20326                           ;dans.c: 67: HMI_SetNumber(average);
 20327  010FCC  C0E4  F076         	movff	_average,HMI_SetNumber@pInput
 20328  010FD0  C0E5  F077         	movff	_average+1,HMI_SetNumber@pInput+1
 20329  010FD4  ECFF  F0AB         	call	_HMI_SetNumber	;wreg free
 20330                           
 20331                           ;dans.c: 68: HMI_Render();
 20332  010FD8  ECA0  F0AA         	call	_HMI_Render	;wreg free
 20333  010FDC  0012               	return	
 20334  010FDE                     __end_of_ADCAverage:
 20335                           	opt stack 0
 20336                           tosu	equ	0xFFF
 20337                           tosh	equ	0xFFE
 20338                           tosl	equ	0xFFD
 20339                           pclath	equ	0xFFA
 20340                           tblptru	equ	0xFF8
 20341                           tblptrh	equ	0xFF7
 20342                           tblptrl	equ	0xFF6
 20343                           tablat	equ	0xFF5
 20344                           prodh	equ	0xFF4
 20345                           prodl	equ	0xFF3
 20346                           intcon	equ	0xFF2
 20347                           indf0	equ	0xFEF
 20348                           postinc0	equ	0xFEE
 20349                           fsr0h	equ	0xFEA
 20350                           fsr0l	equ	0xFE9
 20351                           wreg	equ	0xFE8
 20352                           indf1	equ	0xFE7
 20353                           postdec1	equ	0xFE5
 20354                           fsr1h	equ	0xFE2
 20355                           fsr1l	equ	0xFE1
 20356                           indf2	equ	0xFDF
 20357                           postinc2	equ	0xFDE
 20358                           postdec2	equ	0xFDD
 20359                           plusw2	equ	0xFDB
 20360                           fsr2h	equ	0xFDA
 20361                           fsr2l	equ	0xFD9
 20362                           status	equ	0xFD8
 20363                           
 20364 ;; *************** function _pow *****************
 20365 ;; Defined at:
 20366 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 20367 ;; Parameters:    Size  Location     Type
 20368 ;;  x               4   98[BANK0 ] int 
 20369 ;;  y               4  102[BANK0 ] int 
 20370 ;; Auto vars:     Size  Location     Type
 20371 ;;  yi              4  115[BANK0 ] unsigned long 
 20372 ;;  sign            1  114[BANK0 ] unsigned char 
 20373 ;; Return value:  Size  Location     Type
 20374 ;;                  4   98[BANK0 ] unsigned char 
 20375 ;; Registers used:
 20376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20377 ;; Tracked objects:
 20378 ;;		On entry : 0/0
 20379 ;;		On exit  : 0/0
 20380 ;;		Unchanged: 0/0
 20381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20382 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20383 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20385 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20386 ;;Total ram usage:       21 bytes
 20387 ;; Hardware stack levels used:    1
 20388 ;; Hardware stack levels required when called:   10
 20389 ;; This function calls:
 20390 ;;		___flge
 20391 ;;		___flmul
 20392 ;;		___flneg
 20393 ;;		___fltol
 20394 ;;		___xxtofl
 20395 ;;		_exp
 20396 ;;		_log
 20397 ;; This function is called by:
 20398 ;;		_ADCAverage
 20399 ;; This function uses a non-reentrant model
 20400 ;;
 20401                           
 20402                           	psect	text113
 20403  011C48                     __ptext113:
 20404                           	opt stack 0
 20405  011C48                     _pow:
 20406                           	opt stack 19
 20407                           
 20408                           ;incstack = 0
 20409  011C48  0E00               	movlw	0
 20410  011C4A  0100               	movlb	0	; () banked
 20411  011C4C  6FD2               	movwf	pow@sign& (0+255),b
 20412                           
 20413                           ; BSR set to: 0
 20414  011C4E  51C2               	movf	pow@x& (0+255),w,b
 20415  011C50  11C3               	iorwf	(pow@x+1)& (0+255),w,b
 20416  011C52  11C4               	iorwf	(pow@x+2)& (0+255),w,b
 20417  011C54  11C5               	iorwf	(pow@x+3)& (0+255),w,b
 20418  011C56  A4D8               	btfss	status,2,c
 20419  011C58  D024               	goto	l2888
 20420                           
 20421                           ; BSR set to: 0
 20422  011C5A  0E00               	movlw	0
 20423  011C5C  6F60               	movwf	___flge@ff1& (0+255),b
 20424  011C5E  0E00               	movlw	0
 20425  011C60  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 20426  011C62  0E00               	movlw	0
 20427  011C64  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 20428  011C66  0E00               	movlw	0
 20429  011C68  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 20430  011C6A  C0C6  F064         	movff	pow@y,___flge@ff2
 20431  011C6E  C0C7  F065         	movff	pow@y+1,___flge@ff2+1
 20432  011C72  C0C8  F066         	movff	pow@y+2,___flge@ff2+2
 20433  011C76  C0C9  F067         	movff	pow@y+3,___flge@ff2+3
 20434  011C7A  EC4F  F09A         	call	___flge	;wreg free
 20435  011C7E  0100               	movlb	0	; () banked
 20436  011C80  A0D8               	btfss	status,0,c
 20437  011C82  D005               	goto	l2889
 20438                           
 20439                           ; BSR set to: 0
 20440  011C84  0E00               	movlw	0
 20441  011C86  0101               	movlb	1	; () banked
 20442  011C88  6F1B               	movwf	(_errno+1)& (0+255),b
 20443  011C8A  0E21               	movlw	33
 20444  011C8C  6F1A               	movwf	_errno& (0+255),b
 20445  011C8E                     l2889:
 20446  011C8E  0E00               	movlw	0
 20447  011C90  0100               	movlb	0	; () banked
 20448  011C92  6FC2               	movwf	?_pow& (0+255),b
 20449  011C94  0E00               	movlw	0
 20450  011C96  6FC3               	movwf	(?_pow+1)& (0+255),b
 20451  011C98  0E00               	movlw	0
 20452  011C9A  6FC4               	movwf	(?_pow+2)& (0+255),b
 20453  011C9C  0E00               	movlw	0
 20454  011C9E  6FC5               	movwf	(?_pow+3)& (0+255),b
 20455                           
 20456                           ; BSR set to: 0
 20457  011CA0  0012               	return	
 20458  011CA2                     l2888:
 20459                           
 20460                           ; BSR set to: 0
 20461                           
 20462                           ; BSR set to: 0
 20463  011CA2  51C6               	movf	pow@y& (0+255),w,b
 20464  011CA4  11C7               	iorwf	(pow@y+1)& (0+255),w,b
 20465  011CA6  11C8               	iorwf	(pow@y+2)& (0+255),w,b
 20466  011CA8  11C9               	iorwf	(pow@y+3)& (0+255),w,b
 20467  011CAA  A4D8               	btfss	status,2,c
 20468  011CAC  D009               	goto	l2891
 20469                           
 20470                           ; BSR set to: 0
 20471  011CAE  0E00               	movlw	0
 20472  011CB0  6FC2               	movwf	?_pow& (0+255),b
 20473  011CB2  0E00               	movlw	0
 20474  011CB4  6FC3               	movwf	(?_pow+1)& (0+255),b
 20475  011CB6  0E80               	movlw	128
 20476  011CB8  6FC4               	movwf	(?_pow+2)& (0+255),b
 20477  011CBA  0E3F               	movlw	63
 20478  011CBC  6FC5               	movwf	(?_pow+3)& (0+255),b
 20479                           
 20480                           ; BSR set to: 0
 20481  011CBE  0012               	return	
 20482  011CC0                     l2891:
 20483                           
 20484                           ; BSR set to: 0
 20485                           
 20486                           ; BSR set to: 0
 20487  011CC0  AFC5               	btfss	(pow@x+3)& (0+255),7,b
 20488  011CC2  D04F               	goto	l2892
 20489                           
 20490                           ; BSR set to: 0
 20491  011CC4  C0C6  F09F         	movff	pow@y,___fltol@f1
 20492  011CC8  C0C7  F0A0         	movff	pow@y+1,___fltol@f1+1
 20493  011CCC  C0C8  F0A1         	movff	pow@y+2,___fltol@f1+2
 20494  011CD0  C0C9  F0A2         	movff	pow@y+3,___fltol@f1+3
 20495  011CD4  EC64  F09D         	call	___fltol	;wreg free
 20496  011CD8  C09F  F0D3         	movff	?___fltol,pow@yi
 20497  011CDC  C0A0  F0D4         	movff	?___fltol+1,pow@yi+1
 20498  011CE0  C0A1  F0D5         	movff	?___fltol+2,pow@yi+2
 20499  011CE4  C0A2  F0D6         	movff	?___fltol+3,pow@yi+3
 20500  011CE8  C0D3  F060         	movff	pow@yi,___xxtofl@val
 20501  011CEC  C0D4  F061         	movff	pow@yi+1,___xxtofl@val+1
 20502  011CF0  C0D5  F062         	movff	pow@yi+2,___xxtofl@val+2
 20503  011CF4  C0D6  F063         	movff	pow@yi+3,___xxtofl@val+3
 20504  011CF8  0E00               	movlw	0
 20505  011CFA  EC56  F095         	call	___xxtofl
 20506  011CFE  0100               	movlb	0	; () banked
 20507  011D00  51C6               	movf	pow@y& (0+255),w,b
 20508  011D02  1960               	xorwf	?___xxtofl& (0+255),w,b
 20509  011D04  E10A               	bnz	u12590
 20510  011D06  51C7               	movf	(pow@y+1)& (0+255),w,b
 20511  011D08  1961               	xorwf	(?___xxtofl+1)& (0+255),w,b
 20512  011D0A  E107               	bnz	u12590
 20513  011D0C  51C8               	movf	(pow@y+2)& (0+255),w,b
 20514  011D0E  1962               	xorwf	(?___xxtofl+2)& (0+255),w,b
 20515  011D10  E104               	bnz	u12590
 20516  011D12  51C9               	movf	(pow@y+3)& (0+255),w,b
 20517  011D14  1963               	xorwf	(?___xxtofl+3)& (0+255),w,b
 20518  011D16  B4D8               	btfsc	status,2,c
 20519  011D18  D00F               	goto	l2893
 20520  011D1A                     u12590:
 20521                           
 20522                           ; BSR set to: 0
 20523  011D1A  0E00               	movlw	0
 20524  011D1C  0101               	movlb	1	; () banked
 20525  011D1E  6F1B               	movwf	(_errno+1)& (0+255),b
 20526  011D20  0E21               	movlw	33
 20527  011D22  6F1A               	movwf	_errno& (0+255),b
 20528  011D24  0E00               	movlw	0
 20529  011D26  0100               	movlb	0	; () banked
 20530  011D28  6FC2               	movwf	?_pow& (0+255),b
 20531  011D2A  0E00               	movlw	0
 20532  011D2C  6FC3               	movwf	(?_pow+1)& (0+255),b
 20533  011D2E  0E00               	movlw	0
 20534  011D30  6FC4               	movwf	(?_pow+2)& (0+255),b
 20535  011D32  0E00               	movlw	0
 20536  011D34  6FC5               	movwf	(?_pow+3)& (0+255),b
 20537                           
 20538                           ; BSR set to: 0
 20539  011D36  0012               	return	
 20540  011D38                     l2893:
 20541                           
 20542                           ; BSR set to: 0
 20543                           
 20544                           ; BSR set to: 0
 20545  011D38  51D3               	movf	pow@yi& (0+255),w,b
 20546  011D3A  0B01               	andlw	1
 20547  011D3C  6FD2               	movwf	pow@sign& (0+255),b
 20548                           
 20549                           ; BSR set to: 0
 20550  011D3E  C0C2  F087         	movff	pow@x,___flneg@f1
 20551  011D42  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 20552  011D46  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 20553  011D4A  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 20554  011D4E  EC53  F0AB         	call	___flneg	;wreg free
 20555  011D52  C087  F0C2         	movff	?___flneg,pow@x
 20556  011D56  C088  F0C3         	movff	?___flneg+1,pow@x+1
 20557  011D5A  C089  F0C4         	movff	?___flneg+2,pow@x+2
 20558  011D5E  C08A  F0C5         	movff	?___flneg+3,pow@x+3
 20559  011D62                     l2892:
 20560  011D62  C0C2  F0AF         	movff	pow@x,log@x
 20561  011D66  C0C3  F0B0         	movff	pow@x+1,log@x+1
 20562  011D6A  C0C4  F0B1         	movff	pow@x+2,log@x+2
 20563  011D6E  C0C5  F0B2         	movff	pow@x+3,log@x+3
 20564  011D72  ECE8  F093         	call	_log	;wreg free
 20565  011D76  C0AF  F0CA         	movff	?_log,_pow$15804
 20566  011D7A  C0B0  F0CB         	movff	?_log+1,_pow$15804+1
 20567  011D7E  C0B1  F0CC         	movff	?_log+2,_pow$15804+2
 20568  011D82  C0B2  F0CD         	movff	?_log+3,_pow$15804+3
 20569  011D86  C0CA  F06E         	movff	_pow$15804,___flmul@b
 20570  011D8A  C0CB  F06F         	movff	_pow$15804+1,___flmul@b+1
 20571  011D8E  C0CC  F070         	movff	_pow$15804+2,___flmul@b+2
 20572  011D92  C0CD  F071         	movff	_pow$15804+3,___flmul@b+3
 20573  011D96  C0C6  F072         	movff	pow@y,___flmul@a
 20574  011D9A  C0C7  F073         	movff	pow@y+1,___flmul@a+1
 20575  011D9E  C0C8  F074         	movff	pow@y+2,___flmul@a+2
 20576  011DA2  C0C9  F075         	movff	pow@y+3,___flmul@a+3
 20577  011DA6  ECD2  F081         	call	___flmul	;wreg free
 20578  011DAA  C06E  F0CE         	movff	?___flmul,_pow$15805
 20579  011DAE  C06F  F0CF         	movff	?___flmul+1,_pow$15805+1
 20580  011DB2  C070  F0D0         	movff	?___flmul+2,_pow$15805+2
 20581  011DB6  C071  F0D1         	movff	?___flmul+3,_pow$15805+3
 20582  011DBA  C0CE  F0B7         	movff	_pow$15805,exp@x
 20583  011DBE  C0CF  F0B8         	movff	_pow$15805+1,exp@x+1
 20584  011DC2  C0D0  F0B9         	movff	_pow$15805+2,exp@x+2
 20585  011DC6  C0D1  F0BA         	movff	_pow$15805+3,exp@x+3
 20586  011DCA  ECE1  F08B         	call	_exp	;wreg free
 20587  011DCE  C0B7  F0C2         	movff	?_exp,pow@x
 20588  011DD2  C0B8  F0C3         	movff	?_exp+1,pow@x+1
 20589  011DD6  C0B9  F0C4         	movff	?_exp+2,pow@x+2
 20590  011DDA  C0BA  F0C5         	movff	?_exp+3,pow@x+3
 20591  011DDE  0100               	movlb	0	; () banked
 20592  011DE0  51D2               	movf	pow@sign& (0+255),w,b
 20593  011DE2  B4D8               	btfsc	status,2,c
 20594  011DE4  D013               	goto	l2894
 20595                           
 20596                           ; BSR set to: 0
 20597  011DE6  C0C2  F087         	movff	pow@x,___flneg@f1
 20598  011DEA  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 20599  011DEE  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 20600  011DF2  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 20601  011DF6  EC53  F0AB         	call	___flneg	;wreg free
 20602  011DFA  C087  F0C2         	movff	?___flneg,?_pow
 20603  011DFE  C088  F0C3         	movff	?___flneg+1,?_pow+1
 20604  011E02  C089  F0C4         	movff	?___flneg+2,?_pow+2
 20605  011E06  C08A  F0C5         	movff	?___flneg+3,?_pow+3
 20606  011E0A  0012               	return	
 20607  011E0C                     l2894:
 20608                           
 20609                           ; BSR set to: 0
 20610  011E0C  C0C2  F0C2         	movff	pow@x,?_pow
 20611  011E10  C0C3  F0C3         	movff	pow@x+1,?_pow+1
 20612  011E14  C0C4  F0C4         	movff	pow@x+2,?_pow+2
 20613  011E18  C0C5  F0C5         	movff	pow@x+3,?_pow+3
 20614  011E1C  0012               	return		;funcret
 20615  011E1E                     __end_of_pow:
 20616                           	opt stack 0
 20617                           tosu	equ	0xFFF
 20618                           tosh	equ	0xFFE
 20619                           tosl	equ	0xFFD
 20620                           pclath	equ	0xFFA
 20621                           tblptru	equ	0xFF8
 20622                           tblptrh	equ	0xFF7
 20623                           tblptrl	equ	0xFF6
 20624                           tablat	equ	0xFF5
 20625                           prodh	equ	0xFF4
 20626                           prodl	equ	0xFF3
 20627                           intcon	equ	0xFF2
 20628                           indf0	equ	0xFEF
 20629                           postinc0	equ	0xFEE
 20630                           fsr0h	equ	0xFEA
 20631                           fsr0l	equ	0xFE9
 20632                           wreg	equ	0xFE8
 20633                           indf1	equ	0xFE7
 20634                           postdec1	equ	0xFE5
 20635                           fsr1h	equ	0xFE2
 20636                           fsr1l	equ	0xFE1
 20637                           indf2	equ	0xFDF
 20638                           postinc2	equ	0xFDE
 20639                           postdec2	equ	0xFDD
 20640                           plusw2	equ	0xFDB
 20641                           fsr2h	equ	0xFDA
 20642                           fsr2l	equ	0xFD9
 20643                           status	equ	0xFD8
 20644                           
 20645 ;; *************** function _log *****************
 20646 ;; Defined at:
 20647 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 20648 ;; Parameters:    Size  Location     Type
 20649 ;;  x               4   79[BANK0 ] unsigned char 
 20650 ;; Auto vars:     Size  Location     Type
 20651 ;;  exponent        2   83[BANK0 ] int 
 20652 ;; Return value:  Size  Location     Type
 20653 ;;                  4   79[BANK0 ] int 
 20654 ;; Registers used:
 20655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20656 ;; Tracked objects:
 20657 ;;		On entry : 0/0
 20658 ;;		On exit  : 0/0
 20659 ;;		Unchanged: 0/0
 20660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20661 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20662 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20664 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20665 ;;Total ram usage:        6 bytes
 20666 ;; Hardware stack levels used:    1
 20667 ;; Hardware stack levels required when called:    9
 20668 ;; This function calls:
 20669 ;;		___fladd
 20670 ;;		___flmul
 20671 ;;		___xxtofl
 20672 ;;		_eval_poly
 20673 ;;		_frexp
 20674 ;; This function is called by:
 20675 ;;		_pow
 20676 ;; This function uses a non-reentrant model
 20677 ;;
 20678                           
 20679                           	psect	text114
 20680  0127D0                     __ptext114:
 20681                           	opt stack 0
 20682  0127D0                     _log:
 20683                           	opt stack 19
 20684                           
 20685                           ;incstack = 0
 20686  0127D0  0100               	movlb	0	; () banked
 20687  0127D2  AFB2               	btfss	(log@x+3)& (0+255),7,b
 20688  0127D4  D00F               	goto	l3090
 20689                           
 20690                           ; BSR set to: 0
 20691  0127D6  0E00               	movlw	0
 20692  0127D8  0101               	movlb	1	; () banked
 20693  0127DA  6F1B               	movwf	(_errno+1)& (0+255),b
 20694  0127DC  0E21               	movlw	33
 20695  0127DE  6F1A               	movwf	_errno& (0+255),b
 20696  0127E0  0E00               	movlw	0
 20697  0127E2  0100               	movlb	0	; () banked
 20698  0127E4  6FAF               	movwf	?_log& (0+255),b
 20699  0127E6  0E00               	movlw	0
 20700  0127E8  6FB0               	movwf	(?_log+1)& (0+255),b
 20701  0127EA  0E00               	movlw	0
 20702  0127EC  6FB1               	movwf	(?_log+2)& (0+255),b
 20703  0127EE  0E00               	movlw	0
 20704  0127F0  6FB2               	movwf	(?_log+3)& (0+255),b
 20705                           
 20706                           ; BSR set to: 0
 20707  0127F2  0012               	return	
 20708  0127F4                     l3090:
 20709                           
 20710                           ; BSR set to: 0
 20711                           
 20712                           ; BSR set to: 0
 20713  0127F4  51AF               	movf	log@x& (0+255),w,b
 20714  0127F6  11B0               	iorwf	(log@x+1)& (0+255),w,b
 20715  0127F8  11B1               	iorwf	(log@x+2)& (0+255),w,b
 20716  0127FA  11B2               	iorwf	(log@x+3)& (0+255),w,b
 20717  0127FC  A4D8               	btfss	status,2,c
 20718  0127FE  D00F               	goto	l3092
 20719                           
 20720                           ; BSR set to: 0
 20721  012800  0E00               	movlw	0
 20722  012802  0101               	movlb	1	; () banked
 20723  012804  6F1B               	movwf	(_errno+1)& (0+255),b
 20724  012806  0E22               	movlw	34
 20725  012808  6F1A               	movwf	_errno& (0+255),b
 20726  01280A  0E00               	movlw	0
 20727  01280C  0100               	movlb	0	; () banked
 20728  01280E  6FAF               	movwf	?_log& (0+255),b
 20729  012810  0E00               	movlw	0
 20730  012812  6FB0               	movwf	(?_log+1)& (0+255),b
 20731  012814  0E00               	movlw	0
 20732  012816  6FB1               	movwf	(?_log+2)& (0+255),b
 20733  012818  0E00               	movlw	0
 20734  01281A  6FB2               	movwf	(?_log+3)& (0+255),b
 20735                           
 20736                           ; BSR set to: 0
 20737  01281C  0012               	return	
 20738  01281E                     l3092:
 20739                           
 20740                           ; BSR set to: 0
 20741                           
 20742                           ; BSR set to: 0
 20743  01281E  0E00               	movlw	0
 20744  012820  6F72               	movwf	___flmul@a& (0+255),b
 20745  012822  0E00               	movlw	0
 20746  012824  6F73               	movwf	(___flmul@a+1)& (0+255),b
 20747  012826  0E00               	movlw	0
 20748  012828  6F74               	movwf	(___flmul@a+2)& (0+255),b
 20749  01282A  0E40               	movlw	64
 20750  01282C  6F75               	movwf	(___flmul@a+3)& (0+255),b
 20751  01282E  0EB3               	movlw	low log@exponent
 20752  012830  6F64               	movwf	frexp@eptr& (0+255),b
 20753  012832  0E00               	movlw	high log@exponent
 20754  012834  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 20755  012836  C0AF  F060         	movff	log@x,frexp@value
 20756  01283A  C0B0  F061         	movff	log@x+1,frexp@value+1
 20757  01283E  C0B1  F062         	movff	log@x+2,frexp@value+2
 20758  012842  C0B2  F063         	movff	log@x+3,frexp@value+3
 20759  012846  ECDC  F09F         	call	_frexp	;wreg free
 20760  01284A  C060  F06E         	movff	?_frexp,___flmul@b
 20761  01284E  C061  F06F         	movff	?_frexp+1,___flmul@b+1
 20762  012852  C062  F070         	movff	?_frexp+2,___flmul@b+2
 20763  012856  C063  F071         	movff	?_frexp+3,___flmul@b+3
 20764  01285A  ECD2  F081         	call	___flmul	;wreg free
 20765  01285E  C06E  F08B         	movff	?___flmul,___fladd@b
 20766  012862  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 20767  012866  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 20768  01286A  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 20769  01286E  0E00               	movlw	0
 20770  012870  0100               	movlb	0	; () banked
 20771  012872  6F8F               	movwf	___fladd@a& (0+255),b
 20772  012874  0E00               	movlw	0
 20773  012876  6F90               	movwf	(___fladd@a+1)& (0+255),b
 20774  012878  0E80               	movlw	128
 20775  01287A  6F91               	movwf	(___fladd@a+2)& (0+255),b
 20776  01287C  0EBF               	movlw	191
 20777  01287E  6F92               	movwf	(___fladd@a+3)& (0+255),b
 20778  012880  EC7B  F083         	call	___fladd	;wreg free
 20779  012884  C08B  F0AF         	movff	?___fladd,log@x
 20780  012888  C08C  F0B0         	movff	?___fladd+1,log@x+1
 20781  01288C  C08D  F0B1         	movff	?___fladd+2,log@x+2
 20782  012890  C08E  F0B2         	movff	?___fladd+3,log@x+3
 20783  012894  0100               	movlb	0	; () banked
 20784  012896  07B3               	decf	log@exponent& (0+255),f,b
 20785  012898  A0D8               	btfss	status,0,c
 20786  01289A  07B4               	decf	(log@exponent+1)& (0+255),f,b
 20787                           
 20788                           ; BSR set to: 0
 20789  01289C  C0AF  F09F         	movff	log@x,eval_poly@x
 20790  0128A0  C0B0  F0A0         	movff	log@x+1,eval_poly@x+1
 20791  0128A4  C0B1  F0A1         	movff	log@x+2,eval_poly@x+2
 20792  0128A8  C0B2  F0A2         	movff	log@x+3,eval_poly@x+3
 20793  0128AC  0E85               	movlw	low log@coeff
 20794  0128AE  6FA3               	movwf	eval_poly@d& (0+255),b
 20795  0128B0  0EFE               	movlw	high log@coeff
 20796  0128B2  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 20797  0128B4  0E00               	movlw	0
 20798  0128B6  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 20799  0128B8  0E08               	movlw	8
 20800  0128BA  6FA5               	movwf	eval_poly@n& (0+255),b
 20801  0128BC  ECF2  F09B         	call	_eval_poly	;wreg free
 20802  0128C0  C09F  F0AF         	movff	?_eval_poly,log@x
 20803  0128C4  C0A0  F0B0         	movff	?_eval_poly+1,log@x+1
 20804  0128C8  C0A1  F0B1         	movff	?_eval_poly+2,log@x+2
 20805  0128CC  C0A2  F0B2         	movff	?_eval_poly+3,log@x+3
 20806  0128D0  0E18               	movlw	24
 20807  0128D2  0100               	movlb	0	; () banked
 20808  0128D4  6F72               	movwf	___flmul@a& (0+255),b
 20809  0128D6  0E72               	movlw	114
 20810  0128D8  6F73               	movwf	(___flmul@a+1)& (0+255),b
 20811  0128DA  0E31               	movlw	49
 20812  0128DC  6F74               	movwf	(___flmul@a+2)& (0+255),b
 20813  0128DE  0E3F               	movlw	63
 20814  0128E0  6F75               	movwf	(___flmul@a+3)& (0+255),b
 20815  0128E2  C0B3  F060         	movff	log@exponent,___xxtofl@val
 20816  0128E6  C0B4  F061         	movff	log@exponent+1,___xxtofl@val+1
 20817  0128EA  0E00               	movlw	0
 20818  0128EC  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 20819  0128EE  0EFF               	movlw	-1
 20820  0128F0  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 20821  0128F2  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 20822  0128F4  0E01               	movlw	1
 20823  0128F6  EC56  F095         	call	___xxtofl
 20824  0128FA  C060  F06E         	movff	?___xxtofl,___flmul@b
 20825  0128FE  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 20826  012902  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 20827  012906  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 20828  01290A  ECD2  F081         	call	___flmul	;wreg free
 20829  01290E  C06E  F08B         	movff	?___flmul,___fladd@b
 20830  012912  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 20831  012916  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 20832  01291A  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 20833  01291E  C0AF  F08F         	movff	log@x,___fladd@a
 20834  012922  C0B0  F090         	movff	log@x+1,___fladd@a+1
 20835  012926  C0B1  F091         	movff	log@x+2,___fladd@a+2
 20836  01292A  C0B2  F092         	movff	log@x+3,___fladd@a+3
 20837  01292E  EC7B  F083         	call	___fladd	;wreg free
 20838  012932  C08B  F0AF         	movff	?___fladd,?_log
 20839  012936  C08C  F0B0         	movff	?___fladd+1,?_log+1
 20840  01293A  C08D  F0B1         	movff	?___fladd+2,?_log+2
 20841  01293E  C08E  F0B2         	movff	?___fladd+3,?_log+3
 20842  012942  0012               	return	
 20843  012944                     __end_of_log:
 20844                           	opt stack 0
 20845                           tosu	equ	0xFFF
 20846                           tosh	equ	0xFFE
 20847                           tosl	equ	0xFFD
 20848                           pclath	equ	0xFFA
 20849                           tblptru	equ	0xFF8
 20850                           tblptrh	equ	0xFF7
 20851                           tblptrl	equ	0xFF6
 20852                           tablat	equ	0xFF5
 20853                           prodh	equ	0xFF4
 20854                           prodl	equ	0xFF3
 20855                           intcon	equ	0xFF2
 20856                           indf0	equ	0xFEF
 20857                           postinc0	equ	0xFEE
 20858                           fsr0h	equ	0xFEA
 20859                           fsr0l	equ	0xFE9
 20860                           wreg	equ	0xFE8
 20861                           indf1	equ	0xFE7
 20862                           postdec1	equ	0xFE5
 20863                           fsr1h	equ	0xFE2
 20864                           fsr1l	equ	0xFE1
 20865                           indf2	equ	0xFDF
 20866                           postinc2	equ	0xFDE
 20867                           postdec2	equ	0xFDD
 20868                           plusw2	equ	0xFDB
 20869                           fsr2h	equ	0xFDA
 20870                           fsr2l	equ	0xFD9
 20871                           status	equ	0xFD8
 20872                           
 20873 ;; *************** function _exp *****************
 20874 ;; Defined at:
 20875 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 20876 ;; Parameters:    Size  Location     Type
 20877 ;;  x               4   87[BANK0 ] int 
 20878 ;; Auto vars:     Size  Location     Type
 20879 ;;  exponent        2   95[BANK0 ] int 
 20880 ;;  sign            1   97[BANK0 ] unsigned char 
 20881 ;; Return value:  Size  Location     Type
 20882 ;;                  4   87[BANK0 ] unsigned char 
 20883 ;; Registers used:
 20884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20885 ;; Tracked objects:
 20886 ;;		On entry : 0/0
 20887 ;;		On exit  : 0/0
 20888 ;;		Unchanged: 0/0
 20889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20890 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20891 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20893 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20894 ;;Total ram usage:       11 bytes
 20895 ;; Hardware stack levels used:    1
 20896 ;; Hardware stack levels required when called:    9
 20897 ;; This function calls:
 20898 ;;		___fldiv
 20899 ;;		___flge
 20900 ;;		___flmul
 20901 ;;		___flneg
 20902 ;;		___flsub
 20903 ;;		___fltol
 20904 ;;		___xxtofl
 20905 ;;		_eval_poly
 20906 ;;		_floor
 20907 ;;		_ldexp
 20908 ;; This function is called by:
 20909 ;;		_pow
 20910 ;; This function uses a non-reentrant model
 20911 ;;
 20912                           
 20913                           	psect	text115
 20914  0117C2                     __ptext115:
 20915                           	opt stack 0
 20916  0117C2                     _exp:
 20917                           	opt stack 19
 20918                           
 20919                           ;incstack = 0
 20920  0117C2  0100               	movlb	0	; () banked
 20921  0117C4  51B7               	movf	exp@x& (0+255),w,b
 20922  0117C6  11B8               	iorwf	(exp@x+1)& (0+255),w,b
 20923  0117C8  11B9               	iorwf	(exp@x+2)& (0+255),w,b
 20924  0117CA  11BA               	iorwf	(exp@x+3)& (0+255),w,b
 20925  0117CC  A4D8               	btfss	status,2,c
 20926  0117CE  D009               	goto	l3048
 20927                           
 20928                           ; BSR set to: 0
 20929  0117D0  0E00               	movlw	0
 20930  0117D2  6FB7               	movwf	?_exp& (0+255),b
 20931  0117D4  0E00               	movlw	0
 20932  0117D6  6FB8               	movwf	(?_exp+1)& (0+255),b
 20933  0117D8  0E80               	movlw	128
 20934  0117DA  6FB9               	movwf	(?_exp+2)& (0+255),b
 20935  0117DC  0E3F               	movlw	63
 20936  0117DE  6FBA               	movwf	(?_exp+3)& (0+255),b
 20937                           
 20938                           ; BSR set to: 0
 20939  0117E0  0012               	return	
 20940  0117E2                     l3048:
 20941                           
 20942                           ; BSR set to: 0
 20943                           
 20944                           ; BSR set to: 0
 20945  0117E2  0E18               	movlw	24
 20946  0117E4  6F60               	movwf	___flge@ff1& (0+255),b
 20947  0117E6  0E72               	movlw	114
 20948  0117E8  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 20949  0117EA  0E31               	movlw	49
 20950  0117EC  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 20951  0117EE  0E44               	movlw	68
 20952  0117F0  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 20953  0117F2  C0B7  F064         	movff	exp@x,___flge@ff2
 20954  0117F6  C0B8  F065         	movff	exp@x+1,___flge@ff2+1
 20955  0117FA  C0B9  F066         	movff	exp@x+2,___flge@ff2+2
 20956  0117FE  C0BA  F067         	movff	exp@x+3,___flge@ff2+3
 20957  011802  EC4F  F09A         	call	___flge	;wreg free
 20958  011806  0100               	movlb	0	; () banked
 20959  011808  B0D8               	btfsc	status,0,c
 20960  01180A  D00F               	goto	l3050
 20961                           
 20962                           ; BSR set to: 0
 20963  01180C  0E00               	movlw	0
 20964  01180E  0101               	movlb	1	; () banked
 20965  011810  6F1B               	movwf	(_errno+1)& (0+255),b
 20966  011812  0E22               	movlw	34
 20967  011814  6F1A               	movwf	_errno& (0+255),b
 20968  011816  0EFF               	movlw	255
 20969  011818  0100               	movlb	0	; () banked
 20970  01181A  6FB7               	movwf	?_exp& (0+255),b
 20971  01181C  0EFF               	movlw	255
 20972  01181E  6FB8               	movwf	(?_exp+1)& (0+255),b
 20973  011820  0E7F               	movlw	127
 20974  011822  6FB9               	movwf	(?_exp+2)& (0+255),b
 20975  011824  0E7F               	movlw	127
 20976  011826  6FBA               	movwf	(?_exp+3)& (0+255),b
 20977                           
 20978                           ; BSR set to: 0
 20979  011828  0012               	return	
 20980  01182A                     l3050:
 20981                           
 20982                           ; BSR set to: 0
 20983                           
 20984                           ; BSR set to: 0
 20985  01182A  C0B7  F060         	movff	exp@x,___flge@ff1
 20986  01182E  C0B8  F061         	movff	exp@x+1,___flge@ff1+1
 20987  011832  C0B9  F062         	movff	exp@x+2,___flge@ff1+2
 20988  011836  C0BA  F063         	movff	exp@x+3,___flge@ff1+3
 20989  01183A  0E87               	movlw	135
 20990  01183C  6F64               	movwf	___flge@ff2& (0+255),b
 20991  01183E  0E48               	movlw	72
 20992  011840  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 20993  011842  0E3A               	movlw	58
 20994  011844  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 20995  011846  0EC4               	movlw	196
 20996  011848  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 20997  01184A  EC4F  F09A         	call	___flge	;wreg free
 20998  01184E  0100               	movlb	0	; () banked
 20999  011850  B0D8               	btfsc	status,0,c
 21000  011852  D00F               	goto	l3051
 21001                           
 21002                           ; BSR set to: 0
 21003  011854  0E00               	movlw	0
 21004  011856  0101               	movlb	1	; () banked
 21005  011858  6F1B               	movwf	(_errno+1)& (0+255),b
 21006  01185A  0E22               	movlw	34
 21007  01185C  6F1A               	movwf	_errno& (0+255),b
 21008  01185E  0E00               	movlw	0
 21009  011860  0100               	movlb	0	; () banked
 21010  011862  6FB7               	movwf	?_exp& (0+255),b
 21011  011864  0E00               	movlw	0
 21012  011866  6FB8               	movwf	(?_exp+1)& (0+255),b
 21013  011868  0E00               	movlw	0
 21014  01186A  6FB9               	movwf	(?_exp+2)& (0+255),b
 21015  01186C  0E00               	movlw	0
 21016  01186E  6FBA               	movwf	(?_exp+3)& (0+255),b
 21017                           
 21018                           ; BSR set to: 0
 21019  011870  0012               	return	
 21020  011872                     l3051:
 21021                           
 21022                           ; BSR set to: 0
 21023                           
 21024                           ; BSR set to: 0
 21025  011872  AFBA               	btfss	(exp@x+3)& (0+255),7,b
 21026  011874  D002               	goto	u12230
 21027  011876  0E01               	movlw	1
 21028  011878  D001               	goto	u12240
 21029  01187A                     u12230:
 21030  01187A  0E00               	movlw	0
 21031  01187C                     u12240:
 21032  01187C  6FC1               	movwf	exp@sign& (0+255),b
 21033                           
 21034                           ; BSR set to: 0
 21035  01187E  51C1               	movf	exp@sign& (0+255),w,b
 21036  011880  B4D8               	btfsc	status,2,c
 21037  011882  D012               	goto	l3052
 21038                           
 21039                           ; BSR set to: 0
 21040  011884  C0B7  F087         	movff	exp@x,___flneg@f1
 21041  011888  C0B8  F088         	movff	exp@x+1,___flneg@f1+1
 21042  01188C  C0B9  F089         	movff	exp@x+2,___flneg@f1+2
 21043  011890  C0BA  F08A         	movff	exp@x+3,___flneg@f1+3
 21044  011894  EC53  F0AB         	call	___flneg	;wreg free
 21045  011898  C087  F0B7         	movff	?___flneg,exp@x
 21046  01189C  C088  F0B8         	movff	?___flneg+1,exp@x+1
 21047  0118A0  C089  F0B9         	movff	?___flneg+2,exp@x+2
 21048  0118A4  C08A  F0BA         	movff	?___flneg+3,exp@x+3
 21049  0118A8                     l3052:
 21050  0118A8  C0B7  F06E         	movff	exp@x,___flmul@b
 21051  0118AC  C0B8  F06F         	movff	exp@x+1,___flmul@b+1
 21052  0118B0  C0B9  F070         	movff	exp@x+2,___flmul@b+2
 21053  0118B4  C0BA  F071         	movff	exp@x+3,___flmul@b+3
 21054  0118B8  0E3B               	movlw	59
 21055  0118BA  0100               	movlb	0	; () banked
 21056  0118BC  6F72               	movwf	___flmul@a& (0+255),b
 21057  0118BE  0EAA               	movlw	170
 21058  0118C0  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21059  0118C2  0EB8               	movlw	184
 21060  0118C4  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21061  0118C6  0E3F               	movlw	63
 21062  0118C8  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21063  0118CA  ECD2  F081         	call	___flmul	;wreg free
 21064  0118CE  C06E  F0B7         	movff	?___flmul,exp@x
 21065  0118D2  C06F  F0B8         	movff	?___flmul+1,exp@x+1
 21066  0118D6  C070  F0B9         	movff	?___flmul+2,exp@x+2
 21067  0118DA  C071  F0BA         	movff	?___flmul+3,exp@x+3
 21068  0118DE  C0B7  F0A9         	movff	exp@x,floor@x
 21069  0118E2  C0B8  F0AA         	movff	exp@x+1,floor@x+1
 21070  0118E6  C0B9  F0AB         	movff	exp@x+2,floor@x+2
 21071  0118EA  C0BA  F0AC         	movff	exp@x+3,floor@x+3
 21072  0118EE  ECE0  F09A         	call	_floor	;wreg free
 21073  0118F2  C0A9  F0BB         	movff	?_floor,_exp$15806
 21074  0118F6  C0AA  F0BC         	movff	?_floor+1,_exp$15806+1
 21075  0118FA  C0AB  F0BD         	movff	?_floor+2,_exp$15806+2
 21076  0118FE  C0AC  F0BE         	movff	?_floor+3,_exp$15806+3
 21077  011902  C0BB  F09F         	movff	_exp$15806,___fltol@f1
 21078  011906  C0BC  F0A0         	movff	_exp$15806+1,___fltol@f1+1
 21079  01190A  C0BD  F0A1         	movff	_exp$15806+2,___fltol@f1+2
 21080  01190E  C0BE  F0A2         	movff	_exp$15806+3,___fltol@f1+3
 21081  011912  EC64  F09D         	call	___fltol	;wreg free
 21082  011916  C09F  F0BF         	movff	?___fltol,exp@exponent
 21083  01191A  C0A0  F0C0         	movff	?___fltol+1,exp@exponent+1
 21084  01191E  C0B7  F09F         	movff	exp@x,___flsub@b
 21085  011922  C0B8  F0A0         	movff	exp@x+1,___flsub@b+1
 21086  011926  C0B9  F0A1         	movff	exp@x+2,___flsub@b+2
 21087  01192A  C0BA  F0A2         	movff	exp@x+3,___flsub@b+3
 21088  01192E  C0BF  F060         	movff	exp@exponent,___xxtofl@val
 21089  011932  C0C0  F061         	movff	exp@exponent+1,___xxtofl@val+1
 21090  011936  0100               	movlb	0	; () banked
 21091  011938  0E00               	movlw	0
 21092  01193A  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 21093  01193C  0EFF               	movlw	-1
 21094  01193E  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 21095  011940  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 21096  011942  0E01               	movlw	1
 21097  011944  EC56  F095         	call	___xxtofl
 21098  011948  C060  F0A3         	movff	?___xxtofl,___flsub@a
 21099  01194C  C061  F0A4         	movff	?___xxtofl+1,___flsub@a+1
 21100  011950  C062  F0A5         	movff	?___xxtofl+2,___flsub@a+2
 21101  011954  C063  F0A6         	movff	?___xxtofl+3,___flsub@a+3
 21102  011958  EC27  F0A9         	call	___flsub	;wreg free
 21103  01195C  C09F  F0B7         	movff	?___flsub,exp@x
 21104  011960  C0A0  F0B8         	movff	?___flsub+1,exp@x+1
 21105  011964  C0A1  F0B9         	movff	?___flsub+2,exp@x+2
 21106  011968  C0A2  F0BA         	movff	?___flsub+3,exp@x+3
 21107  01196C  C0B7  F09F         	movff	exp@x,eval_poly@x
 21108  011970  C0B8  F0A0         	movff	exp@x+1,eval_poly@x+1
 21109  011974  C0B9  F0A1         	movff	exp@x+2,eval_poly@x+2
 21110  011978  C0BA  F0A2         	movff	exp@x+3,eval_poly@x+3
 21111  01197C  0E5D               	movlw	low exp@coeff
 21112  01197E  0100               	movlb	0	; () banked
 21113  011980  6FA3               	movwf	eval_poly@d& (0+255),b
 21114  011982  0EFE               	movlw	high exp@coeff
 21115  011984  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 21116  011986  0E00               	movlw	0
 21117  011988  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 21118  01198A  0E09               	movlw	9
 21119  01198C  6FA5               	movwf	eval_poly@n& (0+255),b
 21120  01198E  ECF2  F09B         	call	_eval_poly	;wreg free
 21121  011992  C09F  F0AF         	movff	?_eval_poly,ldexp@value
 21122  011996  C0A0  F0B0         	movff	?_eval_poly+1,ldexp@value+1
 21123  01199A  C0A1  F0B1         	movff	?_eval_poly+2,ldexp@value+2
 21124  01199E  C0A2  F0B2         	movff	?_eval_poly+3,ldexp@value+3
 21125  0119A2  C0BF  F0B3         	movff	exp@exponent,ldexp@newexp
 21126  0119A6  C0C0  F0B4         	movff	exp@exponent+1,ldexp@newexp+1
 21127  0119AA  ECF2  F09C         	call	_ldexp	;wreg free
 21128  0119AE  C0AF  F0B7         	movff	?_ldexp,exp@x
 21129  0119B2  C0B0  F0B8         	movff	?_ldexp+1,exp@x+1
 21130  0119B6  C0B1  F0B9         	movff	?_ldexp+2,exp@x+2
 21131  0119BA  C0B2  F0BA         	movff	?_ldexp+3,exp@x+3
 21132  0119BE  0100               	movlb	0	; () banked
 21133  0119C0  51C1               	movf	exp@sign& (0+255),w,b
 21134  0119C2  B4D8               	btfsc	status,2,c
 21135  0119C4  D02F               	goto	l3053
 21136                           
 21137                           ; BSR set to: 0
 21138  0119C6  29B7               	incf	exp@x& (0+255),w,b
 21139  0119C8  E112               	bnz	l14947
 21140  0119CA  29B8               	incf	(exp@x+1)& (0+255),w,b
 21141  0119CC  E110               	bnz	l14947
 21142  0119CE  0E7F               	movlw	127
 21143  0119D0  19B9               	xorwf	(exp@x+2)& (0+255),w,b
 21144  0119D2  E10D               	bnz	l14947
 21145  0119D4  0E7F               	movlw	127
 21146  0119D6  19BA               	xorwf	(exp@x+3)& (0+255),w,b
 21147  0119D8  A4D8               	btfss	status,2,c
 21148  0119DA  D009               	goto	l3054
 21149                           
 21150                           ; BSR set to: 0
 21151  0119DC  0E00               	movlw	0
 21152  0119DE  6FB7               	movwf	?_exp& (0+255),b
 21153  0119E0  0E00               	movlw	0
 21154  0119E2  6FB8               	movwf	(?_exp+1)& (0+255),b
 21155  0119E4  0E00               	movlw	0
 21156  0119E6  6FB9               	movwf	(?_exp+2)& (0+255),b
 21157  0119E8  0E00               	movlw	0
 21158  0119EA  6FBA               	movwf	(?_exp+3)& (0+255),b
 21159                           
 21160                           ; BSR set to: 0
 21161  0119EC  0012               	return	
 21162  0119EE                     l3054:
 21163  0119EE                     l14947:
 21164                           
 21165                           ; BSR set to: 0
 21166  0119EE  0E00               	movlw	0
 21167  0119F0  6F60               	movwf	___fldiv@b& (0+255),b
 21168  0119F2  0E00               	movlw	0
 21169  0119F4  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 21170  0119F6  0E80               	movlw	128
 21171  0119F8  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 21172  0119FA  0E3F               	movlw	63
 21173  0119FC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 21174  0119FE  C0B7  F064         	movff	exp@x,___fldiv@a
 21175  011A02  C0B8  F065         	movff	exp@x+1,___fldiv@a+1
 21176  011A06  C0B9  F066         	movff	exp@x+2,___fldiv@a+2
 21177  011A0A  C0BA  F067         	movff	exp@x+3,___fldiv@a+3
 21178  011A0E  ECEF  F087         	call	___fldiv	;wreg free
 21179  011A12  C060  F0B7         	movff	?___fldiv,?_exp
 21180  011A16  C061  F0B8         	movff	?___fldiv+1,?_exp+1
 21181  011A1A  C062  F0B9         	movff	?___fldiv+2,?_exp+2
 21182  011A1E  C063  F0BA         	movff	?___fldiv+3,?_exp+3
 21183  011A22  0012               	return	
 21184  011A24                     l3053:
 21185                           
 21186                           ; BSR set to: 0
 21187  011A24  C0B7  F0B7         	movff	exp@x,?_exp
 21188  011A28  C0B8  F0B8         	movff	exp@x+1,?_exp+1
 21189  011A2C  C0B9  F0B9         	movff	exp@x+2,?_exp+2
 21190  011A30  C0BA  F0BA         	movff	exp@x+3,?_exp+3
 21191  011A34  0012               	return		;funcret
 21192  011A36                     __end_of_exp:
 21193                           	opt stack 0
 21194                           tosu	equ	0xFFF
 21195                           tosh	equ	0xFFE
 21196                           tosl	equ	0xFFD
 21197                           pclath	equ	0xFFA
 21198                           tblptru	equ	0xFF8
 21199                           tblptrh	equ	0xFF7
 21200                           tblptrl	equ	0xFF6
 21201                           tablat	equ	0xFF5
 21202                           prodh	equ	0xFF4
 21203                           prodl	equ	0xFF3
 21204                           intcon	equ	0xFF2
 21205                           indf0	equ	0xFEF
 21206                           postinc0	equ	0xFEE
 21207                           fsr0h	equ	0xFEA
 21208                           fsr0l	equ	0xFE9
 21209                           wreg	equ	0xFE8
 21210                           indf1	equ	0xFE7
 21211                           postdec1	equ	0xFE5
 21212                           fsr1h	equ	0xFE2
 21213                           fsr1l	equ	0xFE1
 21214                           indf2	equ	0xFDF
 21215                           postinc2	equ	0xFDE
 21216                           postdec2	equ	0xFDD
 21217                           plusw2	equ	0xFDB
 21218                           fsr2h	equ	0xFDA
 21219                           fsr2l	equ	0xFD9
 21220                           status	equ	0xFD8
 21221                           
 21222 ;; *************** function _ldexp *****************
 21223 ;; Defined at:
 21224 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 21225 ;; Parameters:    Size  Location     Type
 21226 ;;  value           4   79[BANK0 ] unsigned char 
 21227 ;;  newexp          2   83[BANK0 ] int 
 21228 ;; Auto vars:     Size  Location     Type
 21229 ;;		None
 21230 ;; Return value:  Size  Location     Type
 21231 ;;                  4   79[BANK0 ] int 
 21232 ;; Registers used:
 21233 ;;		wreg, status,2, status,0
 21234 ;; Tracked objects:
 21235 ;;		On entry : 0/0
 21236 ;;		On exit  : 0/0
 21237 ;;		Unchanged: 0/0
 21238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21239 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21241 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21242 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21243 ;;Total ram usage:        8 bytes
 21244 ;; Hardware stack levels used:    1
 21245 ;; Hardware stack levels required when called:    7
 21246 ;; This function calls:
 21247 ;;		Nothing
 21248 ;; This function is called by:
 21249 ;;		_exp
 21250 ;; This function uses a non-reentrant model
 21251 ;;
 21252                           
 21253                           	psect	text116
 21254  0139E4                     __ptext116:
 21255                           	opt stack 0
 21256  0139E4                     _ldexp:
 21257                           	opt stack 20
 21258                           
 21259                           ;incstack = 0
 21260  0139E4  0100               	movlb	0	; () banked
 21261  0139E6  51AF               	movf	ldexp@value& (0+255),w,b
 21262  0139E8  11B0               	iorwf	(ldexp@value+1)& (0+255),w,b
 21263  0139EA  11B1               	iorwf	(ldexp@value+2)& (0+255),w,b
 21264  0139EC  11B2               	iorwf	(ldexp@value+3)& (0+255),w,b
 21265  0139EE  A4D8               	btfss	status,2,c
 21266  0139F0  D009               	goto	l3072
 21267                           
 21268                           ; BSR set to: 0
 21269  0139F2  0E00               	movlw	0
 21270  0139F4  6FAF               	movwf	?_ldexp& (0+255),b
 21271  0139F6  0E00               	movlw	0
 21272  0139F8  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 21273  0139FA  0E00               	movlw	0
 21274  0139FC  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 21275  0139FE  0E00               	movlw	0
 21276  013A00  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 21277                           
 21278                           ; BSR set to: 0
 21279  013A02  0012               	return	
 21280  013A04                     l3072:
 21281                           
 21282                           ; BSR set to: 0
 21283                           
 21284                           ; BSR set to: 0
 21285  013A04  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 21286  013A06  0B7F               	andlw	127
 21287  013A08  6FB5               	movwf	??_ldexp& (0+255),b
 21288  013A0A  6BB6               	clrf	(??_ldexp+1)& (0+255),b
 21289  013A0C  90D8               	bcf	status,0,c
 21290  013A0E  37B5               	rlcf	??_ldexp& (0+255),f,b
 21291  013A10  37B6               	rlcf	(??_ldexp+1)& (0+255),f,b
 21292  013A12  51B5               	movf	??_ldexp& (0+255),w,b
 21293  013A14  27B3               	addwf	ldexp@newexp& (0+255),f,b
 21294  013A16  51B6               	movf	(??_ldexp+1)& (0+255),w,b
 21295  013A18  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 21296  013A1A  AFB1               	btfss	(ldexp@value+2)& (0+255),7,b
 21297  013A1C  D003               	goto	u11750
 21298  013A1E  6BB5               	clrf	??_ldexp& (0+255),b
 21299  013A20  2BB5               	incf	??_ldexp& (0+255),f,b
 21300  013A22  D002               	goto	u11758
 21301  013A24                     u11750:
 21302  013A24  0100               	movlb	0	; () banked
 21303  013A26  6BB5               	clrf	??_ldexp& (0+255),b
 21304  013A28                     u11758:
 21305  013A28  51B5               	movf	??_ldexp& (0+255),w,b
 21306  013A2A  27B3               	addwf	ldexp@newexp& (0+255),f,b
 21307  013A2C  0E00               	movlw	0
 21308  013A2E  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 21309  013A30  AFB4               	btfss	(ldexp@newexp+1)& (0+255),7,b
 21310  013A32  D00F               	goto	l3074
 21311                           
 21312                           ; BSR set to: 0
 21313  013A34  0E00               	movlw	0
 21314  013A36  0101               	movlb	1	; () banked
 21315  013A38  6F1B               	movwf	(_errno+1)& (0+255),b
 21316  013A3A  0E22               	movlw	34
 21317  013A3C  6F1A               	movwf	_errno& (0+255),b
 21318  013A3E  0E00               	movlw	0
 21319  013A40  0100               	movlb	0	; () banked
 21320  013A42  6FAF               	movwf	?_ldexp& (0+255),b
 21321  013A44  0E00               	movlw	0
 21322  013A46  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 21323  013A48  0E00               	movlw	0
 21324  013A4A  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 21325  013A4C  0E00               	movlw	0
 21326  013A4E                     L11:
 21327  013A4E  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 21328                           
 21329                           ; BSR set to: 0
 21330  013A50  0012               	return	
 21331  013A52                     l3074:
 21332                           
 21333                           ; BSR set to: 0
 21334                           
 21335                           ; BSR set to: 0
 21336  013A52  BFB4               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 21337  013A54  D01B               	goto	l3076
 21338  013A56  05B4               	decf	(ldexp@newexp+1)& (0+255),w,b
 21339  013A58  A0D8               	btfss	status,0,c
 21340  013A5A  D018               	goto	l3076
 21341                           
 21342                           ; BSR set to: 0
 21343  013A5C  0E00               	movlw	0
 21344  013A5E  0101               	movlb	1	; () banked
 21345  013A60  6F1B               	movwf	(_errno+1)& (0+255),b
 21346  013A62  0E22               	movlw	34
 21347  013A64  6F1A               	movwf	_errno& (0+255),b
 21348                           
 21349                           ; BSR set to: 1
 21350  013A66  0100               	movlb	0	; () banked
 21351  013A68  AFB2               	btfss	(ldexp@value+3)& (0+255),7,b
 21352  013A6A  D008               	goto	l3077
 21353                           
 21354                           ; BSR set to: 0
 21355  013A6C  0EFF               	movlw	255
 21356  013A6E  6FAF               	movwf	?_ldexp& (0+255),b
 21357  013A70  0EFF               	movlw	255
 21358  013A72  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 21359  013A74  0E7F               	movlw	127
 21360  013A76  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 21361  013A78  0EFF               	movlw	255
 21362  013A7A  D7E9               	goto	L11
 21363  013A7C                     l3077:
 21364                           
 21365                           ; BSR set to: 0
 21366                           
 21367                           ; BSR set to: 0
 21368  013A7C  0EFF               	movlw	255
 21369  013A7E  6FAF               	movwf	?_ldexp& (0+255),b
 21370  013A80  0EFF               	movlw	255
 21371  013A82  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 21372  013A84  0E7F               	movlw	127
 21373  013A86  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 21374  013A88  0E7F               	movlw	127
 21375  013A8A  D7E1               	goto	L11
 21376  013A8C                     l3076:
 21377                           
 21378                           ; BSR set to: 0
 21379                           
 21380                           ; BSR set to: 0
 21381  013A8C  35B4               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 21382  013A8E  31B4               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 21383  013A90  6FB6               	movwf	(??_ldexp+1)& (0+255),b
 21384  013A92  31B3               	rrcf	ldexp@newexp& (0+255),w,b
 21385  013A94  6FB5               	movwf	??_ldexp& (0+255),b
 21386  013A96  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 21387  013A98  19B5               	xorwf	??_ldexp& (0+255),w,b
 21388  013A9A  0B80               	andlw	-128
 21389  013A9C  19B5               	xorwf	??_ldexp& (0+255),w,b
 21390  013A9E  6FB2               	movwf	(ldexp@value+3)& (0+255),b
 21391  013AA0  C0B3  F0B5         	movff	ldexp@newexp,??_ldexp
 21392  013AA4  0E01               	movlw	1
 21393  013AA6  17B5               	andwf	??_ldexp& (0+255),f,b
 21394  013AA8  33B5               	rrcf	??_ldexp& (0+255),f,b
 21395  013AAA  33B5               	rrcf	??_ldexp& (0+255),f,b
 21396  013AAC  51B1               	movf	(ldexp@value+2)& (0+255),w,b
 21397  013AAE  19B5               	xorwf	??_ldexp& (0+255),w,b
 21398  013AB0  0B7F               	andlw	-129
 21399  013AB2  19B5               	xorwf	??_ldexp& (0+255),w,b
 21400  013AB4  6FB1               	movwf	(ldexp@value+2)& (0+255),b
 21401                           
 21402                           ; BSR set to: 0
 21403                           
 21404                           ; BSR set to: 0
 21405                           
 21406                           ; BSR set to: 0
 21407  013AB6  C0AF  F0AF         	movff	ldexp@value,?_ldexp
 21408  013ABA  C0B0  F0B0         	movff	ldexp@value+1,?_ldexp+1
 21409  013ABE  C0B1  F0B1         	movff	ldexp@value+2,?_ldexp+2
 21410  013AC2  C0B2  F0B2         	movff	ldexp@value+3,?_ldexp+3
 21411  013AC6  0012               	return	
 21412  013AC8                     __end_of_ldexp:
 21413                           	opt stack 0
 21414                           tosu	equ	0xFFF
 21415                           tosh	equ	0xFFE
 21416                           tosl	equ	0xFFD
 21417                           pclath	equ	0xFFA
 21418                           tblptru	equ	0xFF8
 21419                           tblptrh	equ	0xFF7
 21420                           tblptrl	equ	0xFF6
 21421                           tablat	equ	0xFF5
 21422                           prodh	equ	0xFF4
 21423                           prodl	equ	0xFF3
 21424                           intcon	equ	0xFF2
 21425                           indf0	equ	0xFEF
 21426                           postinc0	equ	0xFEE
 21427                           fsr0h	equ	0xFEA
 21428                           fsr0l	equ	0xFE9
 21429                           wreg	equ	0xFE8
 21430                           indf1	equ	0xFE7
 21431                           postdec1	equ	0xFE5
 21432                           fsr1h	equ	0xFE2
 21433                           fsr1l	equ	0xFE1
 21434                           indf2	equ	0xFDF
 21435                           postinc2	equ	0xFDE
 21436                           postdec2	equ	0xFDD
 21437                           plusw2	equ	0xFDB
 21438                           fsr2h	equ	0xFDA
 21439                           fsr2l	equ	0xFD9
 21440                           status	equ	0xFD8
 21441                           
 21442 ;; *************** function _floor *****************
 21443 ;; Defined at:
 21444 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 21445 ;; Parameters:    Size  Location     Type
 21446 ;;  x               4   73[BANK0 ] int 
 21447 ;; Auto vars:     Size  Location     Type
 21448 ;;  i               4   77[BANK0 ] int 
 21449 ;;  expon           2   81[BANK0 ] int 
 21450 ;; Return value:  Size  Location     Type
 21451 ;;                  4   73[BANK0 ] int 
 21452 ;; Registers used:
 21453 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21454 ;; Tracked objects:
 21455 ;;		On entry : 0/0
 21456 ;;		On exit  : 0/0
 21457 ;;		Unchanged: 0/0
 21458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21459 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21460 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21462 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21463 ;;Total ram usage:       10 bytes
 21464 ;; Hardware stack levels used:    1
 21465 ;; Hardware stack levels required when called:    8
 21466 ;; This function calls:
 21467 ;;		___fladd
 21468 ;;		___flge
 21469 ;;		___fltol
 21470 ;;		___xxtofl
 21471 ;;		_frexp
 21472 ;; This function is called by:
 21473 ;;		_exp
 21474 ;; This function uses a non-reentrant model
 21475 ;;
 21476                           
 21477                           	psect	text117
 21478  0135C0                     __ptext117:
 21479                           	opt stack 0
 21480  0135C0                     _floor:
 21481                           	opt stack 19
 21482                           
 21483                           ; BSR set to: 0
 21484                           ;incstack = 0
 21485  0135C0  C0A9  F060         	movff	floor@x,frexp@value
 21486  0135C4  C0AA  F061         	movff	floor@x+1,frexp@value+1
 21487  0135C8  C0AB  F062         	movff	floor@x+2,frexp@value+2
 21488  0135CC  C0AC  F063         	movff	floor@x+3,frexp@value+3
 21489  0135D0  0EB1               	movlw	low floor@expon
 21490  0135D2  0100               	movlb	0	; () banked
 21491  0135D4  6F64               	movwf	frexp@eptr& (0+255),b
 21492  0135D6  0E00               	movlw	high floor@expon
 21493  0135D8  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 21494  0135DA  ECDC  F09F         	call	_frexp	;wreg free
 21495  0135DE  0100               	movlb	0	; () banked
 21496  0135E0  AFB2               	btfss	(floor@expon+1)& (0+255),7,b
 21497  0135E2  D014               	goto	l3059
 21498                           
 21499                           ; BSR set to: 0
 21500  0135E4  AFAC               	btfss	(floor@x+3)& (0+255),7,b
 21501  0135E6  D009               	goto	l3060
 21502                           
 21503                           ; BSR set to: 0
 21504  0135E8  0E00               	movlw	0
 21505  0135EA  6FA9               	movwf	?_floor& (0+255),b
 21506  0135EC  0E00               	movlw	0
 21507  0135EE  6FAA               	movwf	(?_floor+1)& (0+255),b
 21508  0135F0  0E80               	movlw	128
 21509  0135F2  6FAB               	movwf	(?_floor+2)& (0+255),b
 21510  0135F4  0EBF               	movlw	191
 21511  0135F6  6FAC               	movwf	(?_floor+3)& (0+255),b
 21512                           
 21513                           ; BSR set to: 0
 21514  0135F8  0012               	return	
 21515  0135FA                     l3060:
 21516                           
 21517                           ; BSR set to: 0
 21518                           
 21519                           ; BSR set to: 0
 21520  0135FA  0E00               	movlw	0
 21521  0135FC  6FA9               	movwf	?_floor& (0+255),b
 21522  0135FE  0E00               	movlw	0
 21523  013600  6FAA               	movwf	(?_floor+1)& (0+255),b
 21524  013602  0E00               	movlw	0
 21525  013604  6FAB               	movwf	(?_floor+2)& (0+255),b
 21526  013606  0E00               	movlw	0
 21527  013608  6FAC               	movwf	(?_floor+3)& (0+255),b
 21528                           
 21529                           ; BSR set to: 0
 21530  01360A  0012               	return	
 21531  01360C                     l3059:
 21532                           
 21533                           ; BSR set to: 0
 21534                           
 21535                           ; BSR set to: 0
 21536  01360C  51B2               	movf	(floor@expon+1)& (0+255),w,b
 21537  01360E  E104               	bnz	u11710
 21538  013610  0E1D               	movlw	29
 21539  013612  5DB1               	subwf	floor@expon& (0+255),w,b
 21540  013614  A0D8               	btfss	status,0,c
 21541  013616  D009               	goto	l3062
 21542  013618                     u11710:
 21543                           
 21544                           ; BSR set to: 0
 21545  013618  C0A9  F0A9         	movff	floor@x,?_floor
 21546  01361C  C0AA  F0AA         	movff	floor@x+1,?_floor+1
 21547  013620  C0AB  F0AB         	movff	floor@x+2,?_floor+2
 21548  013624  C0AC  F0AC         	movff	floor@x+3,?_floor+3
 21549  013628  0012               	return	
 21550  01362A                     l3062:
 21551                           
 21552                           ; BSR set to: 0
 21553                           
 21554                           ; BSR set to: 0
 21555  01362A  C0A9  F09F         	movff	floor@x,___fltol@f1
 21556  01362E  C0AA  F0A0         	movff	floor@x+1,___fltol@f1+1
 21557  013632  C0AB  F0A1         	movff	floor@x+2,___fltol@f1+2
 21558  013636  C0AC  F0A2         	movff	floor@x+3,___fltol@f1+3
 21559  01363A  EC64  F09D         	call	___fltol	;wreg free
 21560  01363E  C09F  F060         	movff	?___fltol,___xxtofl@val
 21561  013642  C0A0  F061         	movff	?___fltol+1,___xxtofl@val+1
 21562  013646  C0A1  F062         	movff	?___fltol+2,___xxtofl@val+2
 21563  01364A  C0A2  F063         	movff	?___fltol+3,___xxtofl@val+3
 21564  01364E  0E01               	movlw	1
 21565  013650  EC56  F095         	call	___xxtofl
 21566  013654  C060  F0AD         	movff	?___xxtofl,floor@i
 21567  013658  C061  F0AE         	movff	?___xxtofl+1,floor@i+1
 21568  01365C  C062  F0AF         	movff	?___xxtofl+2,floor@i+2
 21569  013660  C063  F0B0         	movff	?___xxtofl+3,floor@i+3
 21570  013664  C0A9  F060         	movff	floor@x,___flge@ff1
 21571  013668  C0AA  F061         	movff	floor@x+1,___flge@ff1+1
 21572  01366C  C0AB  F062         	movff	floor@x+2,___flge@ff1+2
 21573  013670  C0AC  F063         	movff	floor@x+3,___flge@ff1+3
 21574  013674  C0AD  F064         	movff	floor@i,___flge@ff2
 21575  013678  C0AE  F065         	movff	floor@i+1,___flge@ff2+1
 21576  01367C  C0AF  F066         	movff	floor@i+2,___flge@ff2+2
 21577  013680  C0B0  F067         	movff	floor@i+3,___flge@ff2+3
 21578  013684  EC4F  F09A         	call	___flge	;wreg free
 21579  013688  0100               	movlb	0	; () banked
 21580  01368A  B0D8               	btfsc	status,0,c
 21581  01368C  D01B               	goto	l3063
 21582                           
 21583                           ; BSR set to: 0
 21584  01368E  C0AD  F08B         	movff	floor@i,___fladd@b
 21585  013692  C0AE  F08C         	movff	floor@i+1,___fladd@b+1
 21586  013696  C0AF  F08D         	movff	floor@i+2,___fladd@b+2
 21587  01369A  C0B0  F08E         	movff	floor@i+3,___fladd@b+3
 21588  01369E  0E00               	movlw	0
 21589  0136A0  6F8F               	movwf	___fladd@a& (0+255),b
 21590  0136A2  0E00               	movlw	0
 21591  0136A4  6F90               	movwf	(___fladd@a+1)& (0+255),b
 21592  0136A6  0E80               	movlw	128
 21593  0136A8  6F91               	movwf	(___fladd@a+2)& (0+255),b
 21594  0136AA  0EBF               	movlw	191
 21595  0136AC  6F92               	movwf	(___fladd@a+3)& (0+255),b
 21596  0136AE  EC7B  F083         	call	___fladd	;wreg free
 21597  0136B2  C08B  F0A9         	movff	?___fladd,?_floor
 21598  0136B6  C08C  F0AA         	movff	?___fladd+1,?_floor+1
 21599  0136BA  C08D  F0AB         	movff	?___fladd+2,?_floor+2
 21600  0136BE  C08E  F0AC         	movff	?___fladd+3,?_floor+3
 21601  0136C2  0012               	return	
 21602  0136C4                     l3063:
 21603                           
 21604                           ; BSR set to: 0
 21605  0136C4  C0AD  F0A9         	movff	floor@i,?_floor
 21606  0136C8  C0AE  F0AA         	movff	floor@i+1,?_floor+1
 21607  0136CC  C0AF  F0AB         	movff	floor@i+2,?_floor+2
 21608  0136D0  C0B0  F0AC         	movff	floor@i+3,?_floor+3
 21609  0136D4  0012               	return		;funcret
 21610  0136D6                     __end_of_floor:
 21611                           	opt stack 0
 21612                           tosu	equ	0xFFF
 21613                           tosh	equ	0xFFE
 21614                           tosl	equ	0xFFD
 21615                           pclath	equ	0xFFA
 21616                           tblptru	equ	0xFF8
 21617                           tblptrh	equ	0xFF7
 21618                           tblptrl	equ	0xFF6
 21619                           tablat	equ	0xFF5
 21620                           prodh	equ	0xFF4
 21621                           prodl	equ	0xFF3
 21622                           intcon	equ	0xFF2
 21623                           indf0	equ	0xFEF
 21624                           postinc0	equ	0xFEE
 21625                           fsr0h	equ	0xFEA
 21626                           fsr0l	equ	0xFE9
 21627                           wreg	equ	0xFE8
 21628                           indf1	equ	0xFE7
 21629                           postdec1	equ	0xFE5
 21630                           fsr1h	equ	0xFE2
 21631                           fsr1l	equ	0xFE1
 21632                           indf2	equ	0xFDF
 21633                           postinc2	equ	0xFDE
 21634                           postdec2	equ	0xFDD
 21635                           plusw2	equ	0xFDB
 21636                           fsr2h	equ	0xFDA
 21637                           fsr2l	equ	0xFD9
 21638                           status	equ	0xFD8
 21639                           
 21640 ;; *************** function _frexp *****************
 21641 ;; Defined at:
 21642 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 21643 ;; Parameters:    Size  Location     Type
 21644 ;;  value           4    0[BANK0 ] int 
 21645 ;;  eptr            2    4[BANK0 ] PTR int 
 21646 ;;		 -> log@exponent(2), floor@expon(2), 
 21647 ;; Auto vars:     Size  Location     Type
 21648 ;;		None
 21649 ;; Return value:  Size  Location     Type
 21650 ;;                  4    0[BANK0 ] PTR int 
 21651 ;; Registers used:
 21652 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21653 ;; Tracked objects:
 21654 ;;		On entry : 0/0
 21655 ;;		On exit  : 0/0
 21656 ;;		Unchanged: 0/0
 21657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21658 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21660 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21661 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21662 ;;Total ram usage:        8 bytes
 21663 ;; Hardware stack levels used:    1
 21664 ;; Hardware stack levels required when called:    7
 21665 ;; This function calls:
 21666 ;;		Nothing
 21667 ;; This function is called by:
 21668 ;;		_floor
 21669 ;;		_log
 21670 ;; This function uses a non-reentrant model
 21671 ;;
 21672                           
 21673                           	psect	text118
 21674  013FB8                     __ptext118:
 21675                           	opt stack 0
 21676  013FB8                     _frexp:
 21677                           	opt stack 20
 21678                           
 21679                           ;incstack = 0
 21680  013FB8  0100               	movlb	0	; () banked
 21681  013FBA  5160               	movf	frexp@value& (0+255),w,b
 21682  013FBC  1161               	iorwf	(frexp@value+1)& (0+255),w,b
 21683  013FBE  1162               	iorwf	(frexp@value+2)& (0+255),w,b
 21684  013FC0  1163               	iorwf	(frexp@value+3)& (0+255),w,b
 21685  013FC2  A4D8               	btfss	status,2,c
 21686  013FC4  D011               	goto	l3068
 21687                           
 21688                           ; BSR set to: 0
 21689  013FC6  C064  FFD9         	movff	frexp@eptr,fsr2l
 21690  013FCA  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 21691  013FCE  0E00               	movlw	0
 21692  013FD0  6EDE               	movwf	postinc2,c
 21693  013FD2  0E00               	movlw	0
 21694  013FD4  6EDD               	movwf	postdec2,c
 21695                           
 21696                           ; BSR set to: 0
 21697  013FD6  0E00               	movlw	0
 21698  013FD8  6F60               	movwf	?_frexp& (0+255),b
 21699  013FDA  0E00               	movlw	0
 21700  013FDC  6F61               	movwf	(?_frexp+1)& (0+255),b
 21701  013FDE  0E00               	movlw	0
 21702  013FE0  6F62               	movwf	(?_frexp+2)& (0+255),b
 21703  013FE2  0E00               	movlw	0
 21704  013FE4  6F63               	movwf	(?_frexp+3)& (0+255),b
 21705                           
 21706                           ; BSR set to: 0
 21707  013FE6  0012               	return	
 21708  013FE8                     l3068:
 21709                           
 21710                           ; BSR set to: 0
 21711                           
 21712                           ; BSR set to: 0
 21713  013FE8  5163               	movf	(frexp@value+3)& (0+255),w,b
 21714  013FEA  0B7F               	andlw	127
 21715  013FEC  6F66               	movwf	??_frexp& (0+255),b
 21716  013FEE  6B67               	clrf	(??_frexp+1)& (0+255),b
 21717  013FF0  90D8               	bcf	status,0,c
 21718  013FF2  3766               	rlcf	??_frexp& (0+255),f,b
 21719  013FF4  3767               	rlcf	(??_frexp+1)& (0+255),f,b
 21720  013FF6  C064  FFD9         	movff	frexp@eptr,fsr2l
 21721  013FFA  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 21722  013FFE  C066  FFDE         	movff	??_frexp,postinc2
 21723  014002  C067  FFDD         	movff	??_frexp+1,postdec2
 21724  014006  AF62               	btfss	(frexp@value+2)& (0+255),7,b
 21725  014008  D003               	goto	u11140
 21726  01400A  6B66               	clrf	??_frexp& (0+255),b
 21727  01400C  2B66               	incf	??_frexp& (0+255),f,b
 21728  01400E  D002               	goto	u11148
 21729  014010                     u11140:
 21730  014010  0100               	movlb	0	; () banked
 21731  014012  6B66               	clrf	??_frexp& (0+255),b
 21732  014014                     u11148:
 21733  014014  5166               	movf	??_frexp& (0+255),w,b
 21734  014016  C064  FFD9         	movff	frexp@eptr,fsr2l
 21735  01401A  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 21736  01401E  12DE               	iorwf	postinc2,f,c
 21737  014020  0E00               	movlw	0
 21738  014022  12DD               	iorwf	postdec2,f,c
 21739                           
 21740                           ; BSR set to: 0
 21741  014024  C064  FFD9         	movff	frexp@eptr,fsr2l
 21742  014028  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 21743  01402C  0E82               	movlw	130
 21744  01402E  26DE               	addwf	postinc2,f,c
 21745  014030  0EFF               	movlw	255
 21746  014032  22DD               	addwfc	postdec2,f,c
 21747                           
 21748                           ; BSR set to: 0
 21749  014034  8163               	bsf	(frexp@value+3)& (0+255),0,b
 21750  014036  8363               	bsf	(frexp@value+3)& (0+255),1,b
 21751  014038  8563               	bsf	(frexp@value+3)& (0+255),2,b
 21752  01403A  8763               	bsf	(frexp@value+3)& (0+255),3,b
 21753  01403C  8963               	bsf	(frexp@value+3)& (0+255),4,b
 21754  01403E  8B63               	bsf	(frexp@value+3)& (0+255),5,b
 21755  014040  9D63               	bcf	(frexp@value+3)& (0+255),6,b
 21756                           
 21757                           ; BSR set to: 0
 21758  014042  9F62               	bcf	(frexp@value+2)& (0+255),7,b
 21759                           
 21760                           ; BSR set to: 0
 21761  014044  C060  F060         	movff	frexp@value,?_frexp
 21762  014048  C061  F061         	movff	frexp@value+1,?_frexp+1
 21763  01404C  C062  F062         	movff	frexp@value+2,?_frexp+2
 21764  014050  C063  F063         	movff	frexp@value+3,?_frexp+3
 21765  014054  0012               	return	
 21766  014056                     __end_of_frexp:
 21767                           	opt stack 0
 21768                           tosu	equ	0xFFF
 21769                           tosh	equ	0xFFE
 21770                           tosl	equ	0xFFD
 21771                           pclath	equ	0xFFA
 21772                           tblptru	equ	0xFF8
 21773                           tblptrh	equ	0xFF7
 21774                           tblptrl	equ	0xFF6
 21775                           tablat	equ	0xFF5
 21776                           prodh	equ	0xFF4
 21777                           prodl	equ	0xFF3
 21778                           intcon	equ	0xFF2
 21779                           indf0	equ	0xFEF
 21780                           postinc0	equ	0xFEE
 21781                           fsr0h	equ	0xFEA
 21782                           fsr0l	equ	0xFE9
 21783                           wreg	equ	0xFE8
 21784                           indf1	equ	0xFE7
 21785                           postdec1	equ	0xFE5
 21786                           fsr1h	equ	0xFE2
 21787                           fsr1l	equ	0xFE1
 21788                           indf2	equ	0xFDF
 21789                           postinc2	equ	0xFDE
 21790                           postdec2	equ	0xFDD
 21791                           plusw2	equ	0xFDB
 21792                           fsr2h	equ	0xFDA
 21793                           fsr2l	equ	0xFD9
 21794                           status	equ	0xFD8
 21795                           
 21796 ;; *************** function ___xxtofl *****************
 21797 ;; Defined at:
 21798 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
 21799 ;; Parameters:    Size  Location     Type
 21800 ;;  sign            1    wreg     unsigned char 
 21801 ;;  val             4    0[BANK0 ] long 
 21802 ;; Auto vars:     Size  Location     Type
 21803 ;;  sign            1    8[BANK0 ] unsigned char 
 21804 ;;  arg             4   10[BANK0 ] unsigned long 
 21805 ;;  exp             1    9[BANK0 ] unsigned char 
 21806 ;; Return value:  Size  Location     Type
 21807 ;;                  4    0[BANK0 ] unsigned char 
 21808 ;; Registers used:
 21809 ;;		wreg, status,2, status,0
 21810 ;; Tracked objects:
 21811 ;;		On entry : 0/0
 21812 ;;		On exit  : 0/0
 21813 ;;		Unchanged: 0/0
 21814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21815 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21816 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21817 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21818 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21819 ;;Total ram usage:       14 bytes
 21820 ;; Hardware stack levels used:    1
 21821 ;; Hardware stack levels required when called:    7
 21822 ;; This function calls:
 21823 ;;		Nothing
 21824 ;; This function is called by:
 21825 ;;		_ADCAverage
 21826 ;;		_pow
 21827 ;;		_exp
 21828 ;;		_floor
 21829 ;;		_log
 21830 ;;		_ADC_Voltage
 21831 ;;		_Move_ADC_To
 21832 ;; This function uses a non-reentrant model
 21833 ;;
 21834                           
 21835                           	psect	text119
 21836  012AAC                     __ptext119:
 21837                           	opt stack 0
 21838  012AAC                     ___xxtofl:
 21839                           	opt stack 20
 21840                           
 21841                           ; BSR set to: 0
 21842                           ;incstack = 0
 21843                           ;___xxtofl@sign stored from wreg
 21844  012AAC  0100               	movlb	0	; () banked
 21845  012AAE  6F68               	movwf	___xxtofl@sign& (0+255),b
 21846  012AB0  0100               	movlb	0	; () banked
 21847  012AB2  5168               	movf	___xxtofl@sign& (0+255),w,b
 21848  012AB4  A4D8               	btfss	status,2,c
 21849                           
 21850                           ; BSR set to: 0
 21851  012AB6  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 21852  012AB8  D01A               	goto	l3017
 21853                           
 21854                           ; BSR set to: 0
 21855  012ABA  C060  F064         	movff	___xxtofl@val,??___xxtofl
 21856  012ABE  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 21857  012AC2  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 21858  012AC6  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 21859  012ACA  1F64               	comf	??___xxtofl& (0+255),f,b
 21860  012ACC  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 21861  012ACE  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 21862  012AD0  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 21863  012AD2  2B64               	incf	??___xxtofl& (0+255),f,b
 21864  012AD4  0E00               	movlw	0
 21865  012AD6  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 21866  012AD8  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 21867  012ADA  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 21868  012ADC  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 21869  012AE0  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 21870  012AE4  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 21871  012AE8  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 21872  012AEC  D008               	goto	l3018
 21873  012AEE                     l3017:
 21874                           
 21875                           ; BSR set to: 0
 21876  012AEE  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 21877  012AF2  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 21878  012AF6  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 21879  012AFA  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 21880  012AFE                     l3018:
 21881                           
 21882                           ; BSR set to: 0
 21883                           
 21884                           ; BSR set to: 0
 21885  012AFE  5160               	movf	___xxtofl@val& (0+255),w,b
 21886  012B00  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 21887  012B02  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 21888  012B04  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 21889  012B06  A4D8               	btfss	status,2,c
 21890  012B08  D009               	goto	l3019
 21891                           
 21892                           ; BSR set to: 0
 21893  012B0A  0E00               	movlw	0
 21894  012B0C  6F60               	movwf	?___xxtofl& (0+255),b
 21895  012B0E  0E00               	movlw	0
 21896  012B10  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 21897  012B12  0E00               	movlw	0
 21898  012B14  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 21899  012B16  0E00               	movlw	0
 21900  012B18  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 21901                           
 21902                           ; BSR set to: 0
 21903  012B1A  0012               	return	
 21904  012B1C                     l3019:
 21905                           
 21906                           ; BSR set to: 0
 21907                           
 21908                           ; BSR set to: 0
 21909  012B1C  0E96               	movlw	150
 21910  012B1E  6F69               	movwf	___xxtofl@exp& (0+255),b
 21911  012B20  D006               	goto	l3021
 21912  012B22                     
 21913                           ; BSR set to: 0
 21914                           
 21915                           ; BSR set to: 0
 21916  012B22  2B69               	incf	___xxtofl@exp& (0+255),f,b
 21917  012B24  90D8               	bcf	status,0,c
 21918  012B26  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 21919  012B28  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 21920  012B2A  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 21921  012B2C  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 21922  012B2E                     l3021:
 21923                           
 21924                           ; BSR set to: 0
 21925                           
 21926                           ; BSR set to: 0
 21927  012B2E  0E00               	movlw	0
 21928  012B30  156A               	andwf	___xxtofl@arg& (0+255),w,b
 21929  012B32  6F64               	movwf	??___xxtofl& (0+255),b
 21930  012B34  0E00               	movlw	0
 21931  012B36  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 21932  012B38  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 21933  012B3A  0E00               	movlw	0
 21934  012B3C  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 21935  012B3E  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 21936  012B40  0EFE               	movlw	254
 21937  012B42  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 21938  012B44  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 21939  012B46  5164               	movf	??___xxtofl& (0+255),w,b
 21940  012B48  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 21941  012B4A  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 21942  012B4C  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 21943  012B4E  B4D8               	btfsc	status,2,c
 21944  012B50  D00D               	goto	l3024
 21945  012B52  D7E7               	goto	l3022
 21946  012B54                     
 21947                           ; BSR set to: 0
 21948                           
 21949                           ; BSR set to: 0
 21950  012B54  2B69               	incf	___xxtofl@exp& (0+255),f,b
 21951                           
 21952                           ; BSR set to: 0
 21953  012B56  0E01               	movlw	1
 21954  012B58  276A               	addwf	___xxtofl@arg& (0+255),f,b
 21955  012B5A  0E00               	movlw	0
 21956  012B5C  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 21957  012B5E  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 21958  012B60  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 21959                           
 21960                           ; BSR set to: 0
 21961  012B62  90D8               	bcf	status,0,c
 21962  012B64  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 21963  012B66  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 21964  012B68  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 21965  012B6A  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 21966  012B6C                     l3024:
 21967                           
 21968                           ; BSR set to: 0
 21969  012B6C  0E00               	movlw	0
 21970  012B6E  156A               	andwf	___xxtofl@arg& (0+255),w,b
 21971  012B70  6F64               	movwf	??___xxtofl& (0+255),b
 21972  012B72  0E00               	movlw	0
 21973  012B74  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 21974  012B76  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 21975  012B78  0E00               	movlw	0
 21976  012B7A  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 21977  012B7C  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 21978  012B7E  0EFF               	movlw	255
 21979  012B80  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 21980  012B82  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 21981  012B84  5164               	movf	??___xxtofl& (0+255),w,b
 21982  012B86  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 21983  012B88  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 21984  012B8A  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 21985  012B8C  B4D8               	btfsc	status,2,c
 21986  012B8E  D007               	goto	l3027
 21987  012B90  D7E1               	goto	l3025
 21988  012B92                     
 21989                           ; BSR set to: 0
 21990                           
 21991                           ; BSR set to: 0
 21992  012B92  0769               	decf	___xxtofl@exp& (0+255),f,b
 21993  012B94  90D8               	bcf	status,0,c
 21994  012B96  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 21995  012B98  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 21996  012B9A  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 21997  012B9C  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 21998  012B9E                     l3027:
 21999                           
 22000                           ; BSR set to: 0
 22001                           
 22002                           ; BSR set to: 0
 22003  012B9E  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 22004  012BA0  D003               	goto	u11090
 22005                           
 22006                           ; BSR set to: 0
 22007  012BA2  0E02               	movlw	2
 22008  012BA4  6169               	cpfslt	___xxtofl@exp& (0+255),b
 22009  012BA6  D7F5               	goto	l3028
 22010  012BA8                     u11090:
 22011                           
 22012                           ; BSR set to: 0
 22013                           
 22014                           ; BSR set to: 0
 22015  012BA8  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 22016  012BAA  D008               	goto	l3032
 22017                           
 22018                           ; BSR set to: 0
 22019  012BAC  0EFF               	movlw	255
 22020  012BAE  176A               	andwf	___xxtofl@arg& (0+255),f,b
 22021  012BB0  0EFF               	movlw	255
 22022  012BB2  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 22023  012BB4  0E7F               	movlw	127
 22024  012BB6  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 22025  012BB8  0EFF               	movlw	255
 22026  012BBA  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 22027  012BBC                     l3032:
 22028                           
 22029                           ; BSR set to: 0
 22030  012BBC  90D8               	bcf	status,0,c
 22031  012BBE  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 22032  012BC0  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 22033  012BC4  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 22034  012BC6  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 22035  012BC8  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 22036  012BCA  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 22037  012BCE  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 22038  012BD0  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 22039  012BD2  6B64               	clrf	??___xxtofl& (0+255),b
 22040  012BD4  5164               	movf	??___xxtofl& (0+255),w,b
 22041  012BD6  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 22042  012BD8  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 22043  012BDA  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 22044  012BDC  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 22045  012BDE  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 22046  012BE0  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 22047  012BE2  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 22048                           
 22049                           ; BSR set to: 0
 22050  012BE4  5168               	movf	___xxtofl@sign& (0+255),w,b
 22051  012BE6  A4D8               	btfss	status,2,c
 22052                           
 22053                           ; BSR set to: 0
 22054  012BE8  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 22055  012BEA  D001               	goto	l3033
 22056                           
 22057                           ; BSR set to: 0
 22058  012BEC  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 22059  012BEE                     l3033:
 22060                           
 22061                           ; BSR set to: 0
 22062                           
 22063                           ; BSR set to: 0
 22064  012BEE  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 22065  012BF2  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 22066  012BF6  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 22067  012BFA  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 22068  012BFE  0012               	return	
 22069  012C00                     __end_of___xxtofl:
 22070                           	opt stack 0
 22071                           tosu	equ	0xFFF
 22072                           tosh	equ	0xFFE
 22073                           tosl	equ	0xFFD
 22074                           pclath	equ	0xFFA
 22075                           tblptru	equ	0xFF8
 22076                           tblptrh	equ	0xFF7
 22077                           tblptrl	equ	0xFF6
 22078                           tablat	equ	0xFF5
 22079                           prodh	equ	0xFF4
 22080                           prodl	equ	0xFF3
 22081                           intcon	equ	0xFF2
 22082                           indf0	equ	0xFEF
 22083                           postinc0	equ	0xFEE
 22084                           fsr0h	equ	0xFEA
 22085                           fsr0l	equ	0xFE9
 22086                           wreg	equ	0xFE8
 22087                           indf1	equ	0xFE7
 22088                           postdec1	equ	0xFE5
 22089                           fsr1h	equ	0xFE2
 22090                           fsr1l	equ	0xFE1
 22091                           indf2	equ	0xFDF
 22092                           postinc2	equ	0xFDE
 22093                           postdec2	equ	0xFDD
 22094                           plusw2	equ	0xFDB
 22095                           fsr2h	equ	0xFDA
 22096                           fsr2l	equ	0xFD9
 22097                           status	equ	0xFD8
 22098                           
 22099 ;; *************** function ___fltol *****************
 22100 ;; Defined at:
 22101 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
 22102 ;; Parameters:    Size  Location     Type
 22103 ;;  f1              4   63[BANK0 ] unsigned char 
 22104 ;; Auto vars:     Size  Location     Type
 22105 ;;  exp1            1   72[BANK0 ] unsigned char 
 22106 ;;  sign1           1   71[BANK0 ] unsigned char 
 22107 ;; Return value:  Size  Location     Type
 22108 ;;                  4   63[BANK0 ] long 
 22109 ;; Registers used:
 22110 ;;		wreg, status,2, status,0
 22111 ;; Tracked objects:
 22112 ;;		On entry : 0/0
 22113 ;;		On exit  : 0/0
 22114 ;;		Unchanged: 0/0
 22115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22116 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22117 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22118 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22119 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22120 ;;Total ram usage:       10 bytes
 22121 ;; Hardware stack levels used:    1
 22122 ;; Hardware stack levels required when called:    7
 22123 ;; This function calls:
 22124 ;;		Nothing
 22125 ;; This function is called by:
 22126 ;;		_ADCAverage
 22127 ;;		_pow
 22128 ;;		_exp
 22129 ;;		_floor
 22130 ;;		_Move_ADC_To
 22131 ;; This function uses a non-reentrant model
 22132 ;;
 22133                           
 22134                           	psect	text120
 22135  013AC8                     __ptext120:
 22136                           	opt stack 0
 22137  013AC8                     ___fltol:
 22138                           	opt stack 19
 22139                           
 22140                           ; BSR set to: 0
 22141                           ;incstack = 0
 22142  013AC8  0100               	movlb	0	; () banked
 22143  013ACA  35A1               	rlcf	(___fltol@f1+2)& (0+255),w,b
 22144  013ACC  35A2               	rlcf	(___fltol@f1+3)& (0+255),w,b
 22145  013ACE  6FA8               	movwf	___fltol@exp1& (0+255),b
 22146  013AD0  51A8               	movf	___fltol@exp1& (0+255),w,b
 22147  013AD2  A4D8               	btfss	status,2,c
 22148  013AD4  D009               	goto	l2684
 22149                           
 22150                           ; BSR set to: 0
 22151  013AD6  0E00               	movlw	0
 22152  013AD8  6F9F               	movwf	?___fltol& (0+255),b
 22153  013ADA  0E00               	movlw	0
 22154  013ADC  6FA0               	movwf	(?___fltol+1)& (0+255),b
 22155  013ADE  0E00               	movlw	0
 22156  013AE0  6FA1               	movwf	(?___fltol+2)& (0+255),b
 22157  013AE2  0E00               	movlw	0
 22158  013AE4  6FA2               	movwf	(?___fltol+3)& (0+255),b
 22159                           
 22160                           ; BSR set to: 0
 22161  013AE6  0012               	return	
 22162  013AE8                     l2684:
 22163                           
 22164                           ; BSR set to: 0
 22165                           
 22166                           ; BSR set to: 0
 22167  013AE8  C09F  F0A3         	movff	___fltol@f1,??___fltol
 22168  013AEC  C0A0  F0A4         	movff	___fltol@f1+1,??___fltol+1
 22169  013AF0  C0A1  F0A5         	movff	___fltol@f1+2,??___fltol+2
 22170  013AF4  C0A2  F0A6         	movff	___fltol@f1+3,??___fltol+3
 22171  013AF8  0E20               	movlw	32
 22172  013AFA  D005               	goto	u10940
 22173  013AFC                     u10945:
 22174  013AFC  90D8               	bcf	status,0,c
 22175  013AFE  33A6               	rrcf	(??___fltol+3)& (0+255),f,b
 22176  013B00  33A5               	rrcf	(??___fltol+2)& (0+255),f,b
 22177  013B02  33A4               	rrcf	(??___fltol+1)& (0+255),f,b
 22178  013B04  33A3               	rrcf	??___fltol& (0+255),f,b
 22179  013B06                     u10940:
 22180  013B06  2EE8               	decfsz	wreg,f,c
 22181  013B08  D7F9               	goto	u10945
 22182  013B0A  51A3               	movf	??___fltol& (0+255),w,b
 22183  013B0C  6FA7               	movwf	___fltol@sign1& (0+255),b
 22184                           
 22185                           ; BSR set to: 0
 22186  013B0E  8FA1               	bsf	(___fltol@f1+2)& (0+255),7,b
 22187                           
 22188                           ; BSR set to: 0
 22189  013B10  0EFF               	movlw	255
 22190  013B12  179F               	andwf	___fltol@f1& (0+255),f,b
 22191  013B14  0EFF               	movlw	255
 22192  013B16  17A0               	andwf	(___fltol@f1+1)& (0+255),f,b
 22193  013B18  0EFF               	movlw	255
 22194  013B1A  17A1               	andwf	(___fltol@f1+2)& (0+255),f,b
 22195  013B1C  0E00               	movlw	0
 22196  013B1E  17A2               	andwf	(___fltol@f1+3)& (0+255),f,b
 22197                           
 22198                           ; BSR set to: 0
 22199  013B20  0E96               	movlw	150
 22200  013B22  5FA8               	subwf	___fltol@exp1& (0+255),f,b
 22201                           
 22202                           ; BSR set to: 0
 22203  013B24  AFA8               	btfss	___fltol@exp1& (0+255),7,b
 22204  013B26  D016               	goto	l2686
 22205                           
 22206                           ; BSR set to: 0
 22207  013B28  51A8               	movf	___fltol@exp1& (0+255),w,b
 22208  013B2A  0A80               	xorlw	128
 22209  013B2C  0F97               	addlw	151
 22210  013B2E  B0D8               	btfsc	status,0,c
 22211  013B30  D009               	goto	l2687
 22212                           
 22213                           ; BSR set to: 0
 22214  013B32  0E00               	movlw	0
 22215  013B34  6F9F               	movwf	?___fltol& (0+255),b
 22216  013B36  0E00               	movlw	0
 22217  013B38  6FA0               	movwf	(?___fltol+1)& (0+255),b
 22218  013B3A  0E00               	movlw	0
 22219  013B3C  6FA1               	movwf	(?___fltol+2)& (0+255),b
 22220  013B3E  0E00               	movlw	0
 22221  013B40  6FA2               	movwf	(?___fltol+3)& (0+255),b
 22222                           
 22223                           ; BSR set to: 0
 22224  013B42  0012               	return	
 22225  013B44                     l2687:
 22226                           
 22227                           ; BSR set to: 0
 22228                           
 22229                           ; BSR set to: 0
 22230                           
 22231                           ; BSR set to: 0
 22232  013B44  90D8               	bcf	status,0,c
 22233  013B46  33A2               	rrcf	(___fltol@f1+3)& (0+255),f,b
 22234  013B48  33A1               	rrcf	(___fltol@f1+2)& (0+255),f,b
 22235  013B4A  33A0               	rrcf	(___fltol@f1+1)& (0+255),f,b
 22236  013B4C  339F               	rrcf	___fltol@f1& (0+255),f,b
 22237                           
 22238                           ; BSR set to: 0
 22239  013B4E  3FA8               	incfsz	___fltol@exp1& (0+255),f,b
 22240  013B50  D7F9               	goto	l2687
 22241                           
 22242                           ; BSR set to: 0
 22243  013B52  D015               	goto	u10980
 22244  013B54                     l2686:
 22245                           
 22246                           ; BSR set to: 0
 22247                           
 22248                           ; BSR set to: 0
 22249  013B54  0E1F               	movlw	31
 22250  013B56  65A8               	cpfsgt	___fltol@exp1& (0+255),b
 22251  013B58  D00F               	goto	l2692
 22252                           
 22253                           ; BSR set to: 0
 22254  013B5A  0E00               	movlw	0
 22255  013B5C  6F9F               	movwf	?___fltol& (0+255),b
 22256  013B5E  0E00               	movlw	0
 22257  013B60  6FA0               	movwf	(?___fltol+1)& (0+255),b
 22258  013B62  0E00               	movlw	0
 22259  013B64  6FA1               	movwf	(?___fltol+2)& (0+255),b
 22260  013B66  0E00               	movlw	0
 22261  013B68  6FA2               	movwf	(?___fltol+3)& (0+255),b
 22262                           
 22263                           ; BSR set to: 0
 22264  013B6A  0012               	return	
 22265  013B6C                     
 22266                           ; BSR set to: 0
 22267                           
 22268                           ; BSR set to: 0
 22269  013B6C  90D8               	bcf	status,0,c
 22270  013B6E  379F               	rlcf	___fltol@f1& (0+255),f,b
 22271  013B70  37A0               	rlcf	(___fltol@f1+1)& (0+255),f,b
 22272  013B72  37A1               	rlcf	(___fltol@f1+2)& (0+255),f,b
 22273  013B74  37A2               	rlcf	(___fltol@f1+3)& (0+255),f,b
 22274  013B76  07A8               	decf	___fltol@exp1& (0+255),f,b
 22275  013B78                     l2692:
 22276                           
 22277                           ; BSR set to: 0
 22278                           
 22279                           ; BSR set to: 0
 22280  013B78  51A8               	movf	___fltol@exp1& (0+255),w,b
 22281  013B7A  A4D8               	btfss	status,2,c
 22282  013B7C  D7F7               	goto	l2693
 22283  013B7E                     u10980:
 22284                           
 22285                           ; BSR set to: 0
 22286                           
 22287                           ; BSR set to: 0
 22288                           
 22289                           ; BSR set to: 0
 22290  013B7E  51A7               	movf	___fltol@sign1& (0+255),w,b
 22291  013B80  B4D8               	btfsc	status,2,c
 22292  013B82  D008               	goto	l2695
 22293                           
 22294                           ; BSR set to: 0
 22295  013B84  1FA2               	comf	(___fltol@f1+3)& (0+255),f,b
 22296  013B86  1FA1               	comf	(___fltol@f1+2)& (0+255),f,b
 22297  013B88  1FA0               	comf	(___fltol@f1+1)& (0+255),f,b
 22298  013B8A  6D9F               	negf	___fltol@f1& (0+255),b
 22299  013B8C  0E00               	movlw	0
 22300  013B8E  23A0               	addwfc	(___fltol@f1+1)& (0+255),f,b
 22301  013B90  23A1               	addwfc	(___fltol@f1+2)& (0+255),f,b
 22302  013B92  23A2               	addwfc	(___fltol@f1+3)& (0+255),f,b
 22303  013B94                     l2695:
 22304                           
 22305                           ; BSR set to: 0
 22306                           
 22307                           ; BSR set to: 0
 22308  013B94  C09F  F09F         	movff	___fltol@f1,?___fltol
 22309  013B98  C0A0  F0A0         	movff	___fltol@f1+1,?___fltol+1
 22310  013B9C  C0A1  F0A1         	movff	___fltol@f1+2,?___fltol+2
 22311  013BA0  C0A2  F0A2         	movff	___fltol@f1+3,?___fltol+3
 22312  013BA4  0012               	return	
 22313  013BA6                     __end_of___fltol:
 22314                           	opt stack 0
 22315                           tosu	equ	0xFFF
 22316                           tosh	equ	0xFFE
 22317                           tosl	equ	0xFFD
 22318                           pclath	equ	0xFFA
 22319                           tblptru	equ	0xFF8
 22320                           tblptrh	equ	0xFF7
 22321                           tblptrl	equ	0xFF6
 22322                           tablat	equ	0xFF5
 22323                           prodh	equ	0xFF4
 22324                           prodl	equ	0xFF3
 22325                           intcon	equ	0xFF2
 22326                           indf0	equ	0xFEF
 22327                           postinc0	equ	0xFEE
 22328                           fsr0h	equ	0xFEA
 22329                           fsr0l	equ	0xFE9
 22330                           wreg	equ	0xFE8
 22331                           indf1	equ	0xFE7
 22332                           postdec1	equ	0xFE5
 22333                           fsr1h	equ	0xFE2
 22334                           fsr1l	equ	0xFE1
 22335                           indf2	equ	0xFDF
 22336                           postinc2	equ	0xFDE
 22337                           postdec2	equ	0xFDD
 22338                           plusw2	equ	0xFDB
 22339                           fsr2h	equ	0xFDA
 22340                           fsr2l	equ	0xFD9
 22341                           status	equ	0xFD8
 22342                           
 22343 ;; *************** function ___flge *****************
 22344 ;; Defined at:
 22345 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flge.c"
 22346 ;; Parameters:    Size  Location     Type
 22347 ;;  ff1             4    0[BANK0 ] long 
 22348 ;;  ff2             4    4[BANK0 ] long 
 22349 ;; Auto vars:     Size  Location     Type
 22350 ;;		None
 22351 ;; Return value:  Size  Location     Type
 22352 ;;		None               void
 22353 ;; Registers used:
 22354 ;;		wreg, status,2, status,0
 22355 ;; Tracked objects:
 22356 ;;		On entry : 0/0
 22357 ;;		On exit  : 0/0
 22358 ;;		Unchanged: 0/0
 22359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22360 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22362 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22363 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22364 ;;Total ram usage:       12 bytes
 22365 ;; Hardware stack levels used:    1
 22366 ;; Hardware stack levels required when called:    7
 22367 ;; This function calls:
 22368 ;;		Nothing
 22369 ;; This function is called by:
 22370 ;;		_pow
 22371 ;;		_exp
 22372 ;;		_floor
 22373 ;; This function uses a non-reentrant model
 22374 ;;
 22375                           
 22376                           	psect	text121
 22377  01349E                     __ptext121:
 22378                           	opt stack 0
 22379  01349E                     ___flge:
 22380                           	opt stack 19
 22381                           
 22382                           ; BSR set to: 0
 22383                           ;incstack = 0
 22384  01349E  0E00               	movlw	0
 22385  0134A0  0100               	movlb	0	; () banked
 22386  0134A2  1560               	andwf	___flge@ff1& (0+255),w,b
 22387  0134A4  6F68               	movwf	??___flge& (0+255),b
 22388  0134A6  0E00               	movlw	0
 22389  0134A8  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 22390  0134AA  6F69               	movwf	(??___flge+1)& (0+255),b
 22391  0134AC  0E80               	movlw	128
 22392  0134AE  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 22393  0134B0  6F6A               	movwf	(??___flge+2)& (0+255),b
 22394  0134B2  0E7F               	movlw	127
 22395  0134B4  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 22396  0134B6  6F6B               	movwf	(??___flge+3)& (0+255),b
 22397  0134B8  5168               	movf	??___flge& (0+255),w,b
 22398  0134BA  1169               	iorwf	(??___flge+1)& (0+255),w,b
 22399  0134BC  116A               	iorwf	(??___flge+2)& (0+255),w,b
 22400  0134BE  116B               	iorwf	(??___flge+3)& (0+255),w,b
 22401  0134C0  A4D8               	btfss	status,2,c
 22402  0134C2  D008               	goto	l2654
 22403                           
 22404                           ; BSR set to: 0
 22405  0134C4  0E00               	movlw	0
 22406  0134C6  6F60               	movwf	___flge@ff1& (0+255),b
 22407  0134C8  0E00               	movlw	0
 22408  0134CA  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 22409  0134CC  0E00               	movlw	0
 22410  0134CE  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 22411  0134D0  0E00               	movlw	0
 22412  0134D2  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 22413  0134D4                     l2654:
 22414                           
 22415                           ; BSR set to: 0
 22416                           
 22417                           ; BSR set to: 0
 22418  0134D4  0E00               	movlw	0
 22419  0134D6  1564               	andwf	___flge@ff2& (0+255),w,b
 22420  0134D8  6F68               	movwf	??___flge& (0+255),b
 22421  0134DA  0E00               	movlw	0
 22422  0134DC  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 22423  0134DE  6F69               	movwf	(??___flge+1)& (0+255),b
 22424  0134E0  0E80               	movlw	128
 22425  0134E2  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 22426  0134E4  6F6A               	movwf	(??___flge+2)& (0+255),b
 22427  0134E6  0E7F               	movlw	127
 22428  0134E8  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 22429  0134EA  6F6B               	movwf	(??___flge+3)& (0+255),b
 22430  0134EC  5168               	movf	??___flge& (0+255),w,b
 22431  0134EE  1169               	iorwf	(??___flge+1)& (0+255),w,b
 22432  0134F0  116A               	iorwf	(??___flge+2)& (0+255),w,b
 22433  0134F2  116B               	iorwf	(??___flge+3)& (0+255),w,b
 22434  0134F4  A4D8               	btfss	status,2,c
 22435  0134F6  D008               	goto	l2655
 22436                           
 22437                           ; BSR set to: 0
 22438  0134F8  0E00               	movlw	0
 22439  0134FA  6F64               	movwf	___flge@ff2& (0+255),b
 22440  0134FC  0E00               	movlw	0
 22441  0134FE  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 22442  013500  0E00               	movlw	0
 22443  013502  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 22444  013504  0E00               	movlw	0
 22445  013506  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 22446  013508                     l2655:
 22447                           
 22448                           ; BSR set to: 0
 22449                           
 22450                           ; BSR set to: 0
 22451  013508  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 22452  01350A  D01D               	goto	l2656
 22453                           
 22454                           ; BSR set to: 0
 22455  01350C  C060  F068         	movff	___flge@ff1,??___flge
 22456  013510  C061  F069         	movff	___flge@ff1+1,??___flge+1
 22457  013514  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 22458  013518  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 22459  01351C  1F68               	comf	??___flge& (0+255),f,b
 22460  01351E  1F69               	comf	(??___flge+1)& (0+255),f,b
 22461  013520  1F6A               	comf	(??___flge+2)& (0+255),f,b
 22462  013522  1F6B               	comf	(??___flge+3)& (0+255),f,b
 22463  013524  2B68               	incf	??___flge& (0+255),f,b
 22464  013526  0E00               	movlw	0
 22465  013528  2369               	addwfc	(??___flge+1)& (0+255),f,b
 22466  01352A  236A               	addwfc	(??___flge+2)& (0+255),f,b
 22467  01352C  236B               	addwfc	(??___flge+3)& (0+255),f,b
 22468  01352E  0E00               	movlw	0
 22469  013530  2568               	addwf	??___flge& (0+255),w,b
 22470  013532  6F60               	movwf	___flge@ff1& (0+255),b
 22471  013534  0E00               	movlw	0
 22472  013536  2169               	addwfc	(??___flge+1)& (0+255),w,b
 22473  013538  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 22474  01353A  0E00               	movlw	0
 22475  01353C  216A               	addwfc	(??___flge+2)& (0+255),w,b
 22476  01353E  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 22477  013540  0E80               	movlw	128
 22478  013542  216B               	addwfc	(??___flge+3)& (0+255),w,b
 22479  013544  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 22480  013546                     l2656:
 22481                           
 22482                           ; BSR set to: 0
 22483                           
 22484                           ; BSR set to: 0
 22485  013546  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 22486  013548  D01D               	goto	l2657
 22487                           
 22488                           ; BSR set to: 0
 22489  01354A  C064  F068         	movff	___flge@ff2,??___flge
 22490  01354E  C065  F069         	movff	___flge@ff2+1,??___flge+1
 22491  013552  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 22492  013556  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 22493  01355A  1F68               	comf	??___flge& (0+255),f,b
 22494  01355C  1F69               	comf	(??___flge+1)& (0+255),f,b
 22495  01355E  1F6A               	comf	(??___flge+2)& (0+255),f,b
 22496  013560  1F6B               	comf	(??___flge+3)& (0+255),f,b
 22497  013562  2B68               	incf	??___flge& (0+255),f,b
 22498  013564  0E00               	movlw	0
 22499  013566  2369               	addwfc	(??___flge+1)& (0+255),f,b
 22500  013568  236A               	addwfc	(??___flge+2)& (0+255),f,b
 22501  01356A  236B               	addwfc	(??___flge+3)& (0+255),f,b
 22502  01356C  0E00               	movlw	0
 22503  01356E  2568               	addwf	??___flge& (0+255),w,b
 22504  013570  6F64               	movwf	___flge@ff2& (0+255),b
 22505  013572  0E00               	movlw	0
 22506  013574  2169               	addwfc	(??___flge+1)& (0+255),w,b
 22507  013576  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 22508  013578  0E00               	movlw	0
 22509  01357A  216A               	addwfc	(??___flge+2)& (0+255),w,b
 22510  01357C  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 22511  01357E  0E80               	movlw	128
 22512  013580  216B               	addwfc	(??___flge+3)& (0+255),w,b
 22513  013582  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 22514  013584                     l2657:
 22515                           
 22516                           ; BSR set to: 0
 22517  013584  0E00               	movlw	0
 22518  013586  1B60               	xorwf	___flge@ff1& (0+255),f,b
 22519  013588  0E00               	movlw	0
 22520  01358A  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 22521  01358C  0E00               	movlw	0
 22522  01358E  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 22523  013590  0E80               	movlw	128
 22524  013592  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 22525  013594  0E00               	movlw	0
 22526  013596  1B64               	xorwf	___flge@ff2& (0+255),f,b
 22527  013598  0E00               	movlw	0
 22528  01359A  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 22529  01359C  0E00               	movlw	0
 22530  01359E  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 22531  0135A0  0E80               	movlw	128
 22532  0135A2  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 22533  0135A4  5164               	movf	___flge@ff2& (0+255),w,b
 22534  0135A6  5D60               	subwf	___flge@ff1& (0+255),w,b
 22535  0135A8  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 22536  0135AA  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 22537  0135AC  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 22538  0135AE  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 22539  0135B0  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 22540  0135B2  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 22541  0135B4  B0D8               	btfsc	status,0,c
 22542  0135B6  D002               	goto	l12561
 22543                           
 22544                           ; BSR set to: 0
 22545  0135B8  90D8               	bcf	status,0,c
 22546  0135BA  0012               	return	
 22547  0135BC                     l12561:
 22548                           
 22549                           ; BSR set to: 0
 22550                           
 22551                           ; BSR set to: 0
 22552  0135BC  80D8               	bsf	status,0,c
 22553                           
 22554                           ; BSR set to: 0
 22555  0135BE  0012               	return	
 22556  0135C0                     __end_of___flge:
 22557                           	opt stack 0
 22558                           tosu	equ	0xFFF
 22559                           tosh	equ	0xFFE
 22560                           tosl	equ	0xFFD
 22561                           pclath	equ	0xFFA
 22562                           tblptru	equ	0xFF8
 22563                           tblptrh	equ	0xFF7
 22564                           tblptrl	equ	0xFF6
 22565                           tablat	equ	0xFF5
 22566                           prodh	equ	0xFF4
 22567                           prodl	equ	0xFF3
 22568                           intcon	equ	0xFF2
 22569                           indf0	equ	0xFEF
 22570                           postinc0	equ	0xFEE
 22571                           fsr0h	equ	0xFEA
 22572                           fsr0l	equ	0xFE9
 22573                           wreg	equ	0xFE8
 22574                           indf1	equ	0xFE7
 22575                           postdec1	equ	0xFE5
 22576                           fsr1h	equ	0xFE2
 22577                           fsr1l	equ	0xFE1
 22578                           indf2	equ	0xFDF
 22579                           postinc2	equ	0xFDE
 22580                           postdec2	equ	0xFDD
 22581                           plusw2	equ	0xFDB
 22582                           fsr2h	equ	0xFDA
 22583                           fsr2l	equ	0xFD9
 22584                           status	equ	0xFD8
 22585                           
 22586 ;; *************** function _eval_poly *****************
 22587 ;; Defined at:
 22588 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 22589 ;; Parameters:    Size  Location     Type
 22590 ;;  x               4   63[BANK0 ] long 
 22591 ;;  d               2   67[BANK0 ] PTR const 
 22592 ;;		 -> log@coeff(36), exp@coeff(40), 
 22593 ;;  n               2   69[BANK0 ] int 
 22594 ;; Auto vars:     Size  Location     Type
 22595 ;;  res             4   75[BANK0 ] int 
 22596 ;; Return value:  Size  Location     Type
 22597 ;;                  4   63[BANK0 ] int 
 22598 ;; Registers used:
 22599 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22600 ;; Tracked objects:
 22601 ;;		On entry : 0/0
 22602 ;;		On exit  : 0/0
 22603 ;;		Unchanged: 0/0
 22604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22605 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22606 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22607 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22608 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22609 ;;Total ram usage:       16 bytes
 22610 ;; Hardware stack levels used:    1
 22611 ;; Hardware stack levels required when called:    8
 22612 ;; This function calls:
 22613 ;;		___fladd
 22614 ;;		___flmul
 22615 ;; This function is called by:
 22616 ;;		_exp
 22617 ;;		_log
 22618 ;; This function uses a non-reentrant model
 22619 ;;
 22620                           
 22621                           	psect	text122
 22622  0137E4                     __ptext122:
 22623                           	opt stack 0
 22624  0137E4                     _eval_poly:
 22625                           	opt stack 19
 22626                           
 22627                           ; BSR set to: 0
 22628                           ;incstack = 0
 22629  0137E4  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 22630  0137E8  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 22631  0137EC  0100               	movlb	0	; () banked
 22632  0137EE  90D8               	bcf	status,0,c
 22633  0137F0  37A7               	rlcf	??_eval_poly& (0+255),f,b
 22634  0137F2  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 22635  0137F4  90D8               	bcf	status,0,c
 22636  0137F6  37A7               	rlcf	??_eval_poly& (0+255),f,b
 22637  0137F8  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 22638  0137FA  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 22639  0137FE  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 22640  013802  51A7               	movf	??_eval_poly& (0+255),w,b
 22641  013804  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 22642  013806  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 22643  013808  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 22644  01380A  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 22645  01380E  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 22646  013812                     	if	0	;tblptru may be non-zero
 22647  013812                     	endif
 22648  013812                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 22649  013812  0E00               	movlw	low (__mediumconst shr (0+16))
 22650  013814  6EF8               	movwf	tblptru,c
 22651  013816                     	endif
 22652  013816  0009               	tblrd		*+
 22653  013818  CFF5 F0AB          	movff	tablat,eval_poly@res
 22654  01381C  0009               	tblrd		*+
 22655  01381E  CFF5 F0AC          	movff	tablat,eval_poly@res+1
 22656  013822  0009               	tblrd		*+
 22657  013824  CFF5 F0AD          	movff	tablat,eval_poly@res+2
 22658  013828  000A               	tblrd		*-
 22659  01382A  CFF5 F0AE          	movff	tablat,eval_poly@res+3
 22660  01382E  D04C               	goto	l3098
 22661  013830                     
 22662                           ; BSR set to: 0
 22663                           
 22664                           ; BSR set to: 0
 22665  013830  C0AB  F072         	movff	eval_poly@res,___flmul@a
 22666  013834  C0AC  F073         	movff	eval_poly@res+1,___flmul@a+1
 22667  013838  C0AD  F074         	movff	eval_poly@res+2,___flmul@a+2
 22668  01383C  C0AE  F075         	movff	eval_poly@res+3,___flmul@a+3
 22669  013840  C09F  F06E         	movff	eval_poly@x,___flmul@b
 22670  013844  C0A0  F06F         	movff	eval_poly@x+1,___flmul@b+1
 22671  013848  C0A1  F070         	movff	eval_poly@x+2,___flmul@b+2
 22672  01384C  C0A2  F071         	movff	eval_poly@x+3,___flmul@b+3
 22673  013850  ECD2  F081         	call	___flmul	;wreg free
 22674  013854  C06E  F08B         	movff	?___flmul,___fladd@b
 22675  013858  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 22676  01385C  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 22677  013860  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 22678  013864  0100               	movlb	0	; () banked
 22679  013866  07A5               	decf	eval_poly@n& (0+255),f,b
 22680  013868  A0D8               	btfss	status,0,c
 22681  01386A  07A6               	decf	(eval_poly@n+1)& (0+255),f,b
 22682  01386C  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 22683  013870  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 22684  013874  90D8               	bcf	status,0,c
 22685  013876  37A7               	rlcf	??_eval_poly& (0+255),f,b
 22686  013878  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 22687  01387A  90D8               	bcf	status,0,c
 22688  01387C  37A7               	rlcf	??_eval_poly& (0+255),f,b
 22689  01387E  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 22690  013880  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 22691  013884  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 22692  013888  51A7               	movf	??_eval_poly& (0+255),w,b
 22693  01388A  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 22694  01388C  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 22695  01388E  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 22696  013890  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 22697  013894  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 22698  013898                     	if	0	;tblptru may be non-zero
 22699  013898                     	endif
 22700  013898                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 22701  013898  0E00               	movlw	low (__mediumconst shr (0+16))
 22702  01389A  6EF8               	movwf	tblptru,c
 22703  01389C                     	endif
 22704  01389C  0009               	tblrd		*+
 22705  01389E  CFF5 F08F          	movff	tablat,___fladd@a
 22706  0138A2  0009               	tblrd		*+
 22707  0138A4  CFF5 F090          	movff	tablat,___fladd@a+1
 22708  0138A8  0009               	tblrd		*+
 22709  0138AA  CFF5 F091          	movff	tablat,___fladd@a+2
 22710  0138AE  000A               	tblrd		*-
 22711  0138B0  CFF5 F092          	movff	tablat,___fladd@a+3
 22712  0138B4  EC7B  F083         	call	___fladd	;wreg free
 22713  0138B8  C08B  F0AB         	movff	?___fladd,eval_poly@res
 22714  0138BC  C08C  F0AC         	movff	?___fladd+1,eval_poly@res+1
 22715  0138C0  C08D  F0AD         	movff	?___fladd+2,eval_poly@res+2
 22716  0138C4  C08E  F0AE         	movff	?___fladd+3,eval_poly@res+3
 22717  0138C8                     l3098:
 22718  0138C8  0100               	movlb	0	; () banked
 22719  0138CA  51A5               	movf	eval_poly@n& (0+255),w,b
 22720  0138CC  11A6               	iorwf	(eval_poly@n+1)& (0+255),w,b
 22721  0138CE  A4D8               	btfss	status,2,c
 22722  0138D0  D7AF               	goto	l3099
 22723                           
 22724                           ; BSR set to: 0
 22725  0138D2  C0AB  F09F         	movff	eval_poly@res,?_eval_poly
 22726  0138D6  C0AC  F0A0         	movff	eval_poly@res+1,?_eval_poly+1
 22727  0138DA  C0AD  F0A1         	movff	eval_poly@res+2,?_eval_poly+2
 22728  0138DE  C0AE  F0A2         	movff	eval_poly@res+3,?_eval_poly+3
 22729                           
 22730                           ; BSR set to: 0
 22731  0138E2  0012               	return		;funcret
 22732  0138E4                     __end_of_eval_poly:
 22733                           	opt stack 0
 22734                           tosu	equ	0xFFF
 22735                           tosh	equ	0xFFE
 22736                           tosl	equ	0xFFD
 22737                           pclath	equ	0xFFA
 22738                           tblptru	equ	0xFF8
 22739                           tblptrh	equ	0xFF7
 22740                           tblptrl	equ	0xFF6
 22741                           tablat	equ	0xFF5
 22742                           prodh	equ	0xFF4
 22743                           prodl	equ	0xFF3
 22744                           intcon	equ	0xFF2
 22745                           indf0	equ	0xFEF
 22746                           postinc0	equ	0xFEE
 22747                           fsr0h	equ	0xFEA
 22748                           fsr0l	equ	0xFE9
 22749                           wreg	equ	0xFE8
 22750                           indf1	equ	0xFE7
 22751                           postdec1	equ	0xFE5
 22752                           fsr1h	equ	0xFE2
 22753                           fsr1l	equ	0xFE1
 22754                           indf2	equ	0xFDF
 22755                           postinc2	equ	0xFDE
 22756                           postdec2	equ	0xFDD
 22757                           plusw2	equ	0xFDB
 22758                           fsr2h	equ	0xFDA
 22759                           fsr2l	equ	0xFD9
 22760                           status	equ	0xFD8
 22761                           
 22762 ;; *************** function ___flmul *****************
 22763 ;; Defined at:
 22764 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
 22765 ;; Parameters:    Size  Location     Type
 22766 ;;  b               4   14[BANK0 ] int 
 22767 ;;  a               4   18[BANK0 ] int 
 22768 ;; Auto vars:     Size  Location     Type
 22769 ;;  prod            4   33[BANK0 ] struct .
 22770 ;;  grs             4   28[BANK0 ] unsigned long 
 22771 ;;  temp            2   37[BANK0 ] struct .
 22772 ;;  bexp            1   32[BANK0 ] unsigned char 
 22773 ;;  aexp            1   27[BANK0 ] unsigned char 
 22774 ;;  sign            1   26[BANK0 ] unsigned char 
 22775 ;; Return value:  Size  Location     Type
 22776 ;;                  4   14[BANK0 ] unsigned char 
 22777 ;; Registers used:
 22778 ;;		wreg, status,2, status,0, prodl, prodh
 22779 ;; Tracked objects:
 22780 ;;		On entry : 0/0
 22781 ;;		On exit  : 0/0
 22782 ;;		Unchanged: 0/0
 22783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22784 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22785 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22786 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22787 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22788 ;;Total ram usage:       25 bytes
 22789 ;; Hardware stack levels used:    1
 22790 ;; Hardware stack levels required when called:    7
 22791 ;; This function calls:
 22792 ;;		Nothing
 22793 ;; This function is called by:
 22794 ;;		_ADCAverage
 22795 ;;		_pow
 22796 ;;		_exp
 22797 ;;		_log
 22798 ;;		_eval_poly
 22799 ;;		_ADC_Voltage
 22800 ;;		_Move_ADC_To
 22801 ;; This function uses a non-reentrant model
 22802 ;;
 22803                           
 22804                           	psect	text123
 22805  0103A4                     __ptext123:
 22806                           	opt stack 0
 22807  0103A4                     ___flmul:
 22808                           	opt stack 19
 22809                           
 22810                           ; BSR set to: 0
 22811                           ;incstack = 0
 22812  0103A4  0100               	movlb	0	; () banked
 22813  0103A6  5171               	movf	(___flmul@b+3)& (0+255),w,b
 22814  0103A8  0B80               	andlw	128
 22815  0103AA  6F7A               	movwf	___flmul@sign& (0+255),b
 22816  0103AC  5171               	movf	(___flmul@b+3)& (0+255),w,b
 22817  0103AE  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 22818  0103B0  6F80               	movwf	___flmul@bexp& (0+255),b
 22819                           
 22820                           ; BSR set to: 0
 22821  0103B2  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 22822                           
 22823                           ; BSR set to: 0
 22824  0103B4  8180               	bsf	___flmul@bexp& (0+255),0,b
 22825                           
 22826                           ; BSR set to: 0
 22827                           
 22828                           ; BSR set to: 0
 22829  0103B6  5180               	movf	___flmul@bexp& (0+255),w,b
 22830  0103B8  B4D8               	btfsc	status,2,c
 22831  0103BA  D00D               	goto	l2989
 22832                           
 22833                           ; BSR set to: 0
 22834  0103BC  2980               	incf	___flmul@bexp& (0+255),w,b
 22835  0103BE  A4D8               	btfss	status,2,c
 22836  0103C0  D008               	goto	l2990
 22837                           
 22838                           ; BSR set to: 0
 22839  0103C2  0E00               	movlw	0
 22840  0103C4  6F6E               	movwf	___flmul@b& (0+255),b
 22841  0103C6  0E00               	movlw	0
 22842  0103C8  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 22843  0103CA  0E00               	movlw	0
 22844  0103CC  6F70               	movwf	(___flmul@b+2)& (0+255),b
 22845  0103CE  0E00               	movlw	0
 22846  0103D0  6F71               	movwf	(___flmul@b+3)& (0+255),b
 22847  0103D2                     l2990:
 22848                           
 22849                           ; BSR set to: 0
 22850                           
 22851                           ; BSR set to: 0
 22852  0103D2  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 22853  0103D4  D008               	goto	l2991
 22854  0103D6                     l2989:
 22855                           
 22856                           ; BSR set to: 0
 22857                           
 22858                           ; BSR set to: 0
 22859  0103D6  0E00               	movlw	0
 22860  0103D8  6F6E               	movwf	___flmul@b& (0+255),b
 22861  0103DA  0E00               	movlw	0
 22862  0103DC  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 22863  0103DE  0E00               	movlw	0
 22864  0103E0  6F70               	movwf	(___flmul@b+2)& (0+255),b
 22865  0103E2  0E00               	movlw	0
 22866  0103E4  6F71               	movwf	(___flmul@b+3)& (0+255),b
 22867  0103E6                     l2991:
 22868                           
 22869                           ; BSR set to: 0
 22870                           
 22871                           ; BSR set to: 0
 22872  0103E6  5175               	movf	(___flmul@a+3)& (0+255),w,b
 22873  0103E8  0B80               	andlw	128
 22874  0103EA  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 22875                           
 22876                           ; BSR set to: 0
 22877  0103EC  5175               	movf	(___flmul@a+3)& (0+255),w,b
 22878  0103EE  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 22879  0103F0  6F7B               	movwf	___flmul@aexp& (0+255),b
 22880                           
 22881                           ; BSR set to: 0
 22882  0103F2  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 22883                           
 22884                           ; BSR set to: 0
 22885  0103F4  817B               	bsf	___flmul@aexp& (0+255),0,b
 22886                           
 22887                           ; BSR set to: 0
 22888                           
 22889                           ; BSR set to: 0
 22890  0103F6  517B               	movf	___flmul@aexp& (0+255),w,b
 22891  0103F8  B4D8               	btfsc	status,2,c
 22892  0103FA  D00D               	goto	l2993
 22893                           
 22894                           ; BSR set to: 0
 22895  0103FC  297B               	incf	___flmul@aexp& (0+255),w,b
 22896  0103FE  A4D8               	btfss	status,2,c
 22897  010400  D008               	goto	l2994
 22898                           
 22899                           ; BSR set to: 0
 22900  010402  0E00               	movlw	0
 22901  010404  6F72               	movwf	___flmul@a& (0+255),b
 22902  010406  0E00               	movlw	0
 22903  010408  6F73               	movwf	(___flmul@a+1)& (0+255),b
 22904  01040A  0E00               	movlw	0
 22905  01040C  6F74               	movwf	(___flmul@a+2)& (0+255),b
 22906  01040E  0E00               	movlw	0
 22907  010410  6F75               	movwf	(___flmul@a+3)& (0+255),b
 22908  010412                     l2994:
 22909                           
 22910                           ; BSR set to: 0
 22911                           
 22912                           ; BSR set to: 0
 22913  010412  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 22914  010414  D008               	goto	l2995
 22915  010416                     l2993:
 22916                           
 22917                           ; BSR set to: 0
 22918                           
 22919                           ; BSR set to: 0
 22920  010416  0E00               	movlw	0
 22921  010418  6F72               	movwf	___flmul@a& (0+255),b
 22922  01041A  0E00               	movlw	0
 22923  01041C  6F73               	movwf	(___flmul@a+1)& (0+255),b
 22924  01041E  0E00               	movlw	0
 22925  010420  6F74               	movwf	(___flmul@a+2)& (0+255),b
 22926  010422  0E00               	movlw	0
 22927  010424  6F75               	movwf	(___flmul@a+3)& (0+255),b
 22928  010426                     l2995:
 22929                           
 22930                           ; BSR set to: 0
 22931  010426  517B               	movf	___flmul@aexp& (0+255),w,b
 22932  010428  B4D8               	btfsc	status,2,c
 22933  01042A  D003               	goto	u10760
 22934                           
 22935                           ; BSR set to: 0
 22936  01042C  5180               	movf	___flmul@bexp& (0+255),w,b
 22937  01042E  A4D8               	btfss	status,2,c
 22938  010430  D009               	goto	l2996
 22939  010432                     u10760:
 22940                           
 22941                           ; BSR set to: 0
 22942                           
 22943                           ; BSR set to: 0
 22944  010432  0E00               	movlw	0
 22945  010434  6F6E               	movwf	?___flmul& (0+255),b
 22946  010436  0E00               	movlw	0
 22947  010438  6F6F               	movwf	(?___flmul+1)& (0+255),b
 22948  01043A  0E00               	movlw	0
 22949  01043C  6F70               	movwf	(?___flmul+2)& (0+255),b
 22950  01043E  0E00               	movlw	0
 22951  010440  6F71               	movwf	(?___flmul+3)& (0+255),b
 22952                           
 22953                           ; BSR set to: 0
 22954  010442  0012               	return	
 22955  010444                     l2996:
 22956                           
 22957                           ; BSR set to: 0
 22958                           
 22959                           ; BSR set to: 0
 22960  010444  5174               	movf	(___flmul@a+2)& (0+255),w,b
 22961  010446  036E               	mulwf	___flmul@b& (0+255),b
 22962  010448  CFF3 F085          	movff	prodl,___flmul@temp
 22963  01044C  CFF4 F086          	movff	prodh,___flmul@temp+1
 22964                           
 22965                           ; BSR set to: 0
 22966  010450  5185               	movf	___flmul@temp& (0+255),w,b
 22967  010452  6F7C               	movwf	___flmul@grs& (0+255),b
 22968  010454  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 22969  010456  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 22970  010458  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 22971                           
 22972                           ; BSR set to: 0
 22973  01045A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 22974  01045C  6F81               	movwf	___flmul@prod& (0+255),b
 22975  01045E  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 22976  010460  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 22977  010462  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 22978  010464  5173               	movf	(___flmul@a+1)& (0+255),w,b
 22979  010466  036F               	mulwf	(___flmul@b+1)& (0+255),b
 22980  010468  CFF3 F085          	movff	prodl,___flmul@temp
 22981  01046C  CFF4 F086          	movff	prodh,___flmul@temp+1
 22982                           
 22983                           ; BSR set to: 0
 22984  010470  5185               	movf	___flmul@temp& (0+255),w,b
 22985  010472  277C               	addwf	___flmul@grs& (0+255),f,b
 22986  010474  0E00               	movlw	0
 22987  010476  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 22988  010478  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 22989  01047A  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 22990                           
 22991                           ; BSR set to: 0
 22992  01047C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 22993  01047E  2781               	addwf	___flmul@prod& (0+255),f,b
 22994  010480  0E00               	movlw	0
 22995  010482  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 22996  010484  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 22997  010486  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 22998  010488  5172               	movf	___flmul@a& (0+255),w,b
 22999  01048A  0370               	mulwf	(___flmul@b+2)& (0+255),b
 23000  01048C  CFF3 F085          	movff	prodl,___flmul@temp
 23001  010490  CFF4 F086          	movff	prodh,___flmul@temp+1
 23002                           
 23003                           ; BSR set to: 0
 23004  010494  5185               	movf	___flmul@temp& (0+255),w,b
 23005  010496  277C               	addwf	___flmul@grs& (0+255),f,b
 23006  010498  0E00               	movlw	0
 23007  01049A  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 23008  01049C  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 23009  01049E  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 23010                           
 23011                           ; BSR set to: 0
 23012  0104A0  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 23013  0104A2  2781               	addwf	___flmul@prod& (0+255),f,b
 23014  0104A4  0E00               	movlw	0
 23015  0104A6  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 23016  0104A8  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 23017  0104AA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 23018                           
 23019                           ; BSR set to: 0
 23020  0104AC  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 23021  0104B0  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 23022  0104B4  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 23023  0104B8  6B7C               	clrf	___flmul@grs& (0+255),b
 23024                           
 23025                           ; BSR set to: 0
 23026  0104BA  5172               	movf	___flmul@a& (0+255),w,b
 23027  0104BC  036F               	mulwf	(___flmul@b+1)& (0+255),b
 23028  0104BE  CFF3 F085          	movff	prodl,___flmul@temp
 23029  0104C2  CFF4 F086          	movff	prodh,___flmul@temp+1
 23030                           
 23031                           ; BSR set to: 0
 23032  0104C6  5185               	movf	___flmul@temp& (0+255),w,b
 23033  0104C8  277C               	addwf	___flmul@grs& (0+255),f,b
 23034  0104CA  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 23035  0104CC  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 23036  0104CE  0E00               	movlw	0
 23037  0104D0  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 23038  0104D2  0E00               	movlw	0
 23039  0104D4  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 23040                           
 23041                           ; BSR set to: 0
 23042  0104D6  5173               	movf	(___flmul@a+1)& (0+255),w,b
 23043  0104D8  036E               	mulwf	___flmul@b& (0+255),b
 23044  0104DA  CFF3 F085          	movff	prodl,___flmul@temp
 23045  0104DE  CFF4 F086          	movff	prodh,___flmul@temp+1
 23046                           
 23047                           ; BSR set to: 0
 23048  0104E2  5185               	movf	___flmul@temp& (0+255),w,b
 23049  0104E4  277C               	addwf	___flmul@grs& (0+255),f,b
 23050  0104E6  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 23051  0104E8  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 23052  0104EA  0E00               	movlw	0
 23053  0104EC  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 23054  0104EE  0E00               	movlw	0
 23055  0104F0  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 23056                           
 23057                           ; BSR set to: 0
 23058  0104F2  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 23059  0104F6  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 23060  0104FA  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 23061  0104FE  6B7C               	clrf	___flmul@grs& (0+255),b
 23062  010500  5172               	movf	___flmul@a& (0+255),w,b
 23063  010502  036E               	mulwf	___flmul@b& (0+255),b
 23064  010504  CFF3 F085          	movff	prodl,___flmul@temp
 23065  010508  CFF4 F086          	movff	prodh,___flmul@temp+1
 23066                           
 23067                           ; BSR set to: 0
 23068  01050C  5185               	movf	___flmul@temp& (0+255),w,b
 23069  01050E  277C               	addwf	___flmul@grs& (0+255),f,b
 23070  010510  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 23071  010512  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 23072  010514  0E00               	movlw	0
 23073  010516  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 23074  010518  0E00               	movlw	0
 23075  01051A  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 23076                           
 23077                           ; BSR set to: 0
 23078  01051C  5174               	movf	(___flmul@a+2)& (0+255),w,b
 23079  01051E  036F               	mulwf	(___flmul@b+1)& (0+255),b
 23080  010520  CFF3 F085          	movff	prodl,___flmul@temp
 23081  010524  CFF4 F086          	movff	prodh,___flmul@temp+1
 23082  010528  5185               	movf	___flmul@temp& (0+255),w,b
 23083  01052A  2781               	addwf	___flmul@prod& (0+255),f,b
 23084  01052C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 23085  01052E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 23086  010530  0E00               	movlw	0
 23087  010532  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 23088  010534  0E00               	movlw	0
 23089  010536  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 23090                           
 23091                           ; BSR set to: 0
 23092  010538  5173               	movf	(___flmul@a+1)& (0+255),w,b
 23093  01053A  0370               	mulwf	(___flmul@b+2)& (0+255),b
 23094  01053C  CFF3 F085          	movff	prodl,___flmul@temp
 23095  010540  CFF4 F086          	movff	prodh,___flmul@temp+1
 23096                           
 23097                           ; BSR set to: 0
 23098  010544  5185               	movf	___flmul@temp& (0+255),w,b
 23099  010546  2781               	addwf	___flmul@prod& (0+255),f,b
 23100  010548  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 23101  01054A  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 23102  01054C  0E00               	movlw	0
 23103  01054E  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 23104  010550  0E00               	movlw	0
 23105  010552  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 23106  010554  5174               	movf	(___flmul@a+2)& (0+255),w,b
 23107  010556  0370               	mulwf	(___flmul@b+2)& (0+255),b
 23108  010558  CFF3 F085          	movff	prodl,___flmul@temp
 23109  01055C  CFF4 F086          	movff	prodh,___flmul@temp+1
 23110                           
 23111                           ; BSR set to: 0
 23112  010560  5185               	movf	___flmul@temp& (0+255),w,b
 23113  010562  6F76               	movwf	??___flmul& (0+255),b
 23114  010564  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 23115  010566  6F77               	movwf	(??___flmul+1)& (0+255),b
 23116  010568  6B78               	clrf	(??___flmul+2)& (0+255),b
 23117  01056A  6B79               	clrf	(??___flmul+3)& (0+255),b
 23118  01056C  C078  F079         	movff	??___flmul+2,??___flmul+3
 23119  010570  C077  F078         	movff	??___flmul+1,??___flmul+2
 23120  010574  C076  F077         	movff	??___flmul,??___flmul+1
 23121  010578  6B76               	clrf	??___flmul& (0+255),b
 23122  01057A  5176               	movf	??___flmul& (0+255),w,b
 23123  01057C  2781               	addwf	___flmul@prod& (0+255),f,b
 23124  01057E  5177               	movf	(??___flmul+1)& (0+255),w,b
 23125  010580  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 23126  010582  5178               	movf	(??___flmul+2)& (0+255),w,b
 23127  010584  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 23128  010586  5179               	movf	(??___flmul+3)& (0+255),w,b
 23129  010588  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 23130                           
 23131                           ; BSR set to: 0
 23132  01058A  C07C  F076         	movff	___flmul@grs,??___flmul
 23133  01058E  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 23134  010592  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 23135  010596  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 23136  01059A  0E19               	movlw	25
 23137  01059C  D005               	goto	u10770
 23138  01059E                     u10775:
 23139  01059E  90D8               	bcf	status,0,c
 23140  0105A0  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 23141  0105A2  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 23142  0105A4  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 23143  0105A6  3376               	rrcf	??___flmul& (0+255),f,b
 23144  0105A8                     u10770:
 23145  0105A8  2EE8               	decfsz	wreg,f,c
 23146  0105AA  D7F9               	goto	u10775
 23147  0105AC  5176               	movf	??___flmul& (0+255),w,b
 23148  0105AE  2781               	addwf	___flmul@prod& (0+255),f,b
 23149  0105B0  5177               	movf	(??___flmul+1)& (0+255),w,b
 23150  0105B2  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 23151  0105B4  5178               	movf	(??___flmul+2)& (0+255),w,b
 23152  0105B6  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 23153  0105B8  5179               	movf	(??___flmul+3)& (0+255),w,b
 23154  0105BA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 23155                           
 23156                           ; BSR set to: 0
 23157  0105BC  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 23158  0105C0  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 23159  0105C4  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 23160  0105C8  6B7C               	clrf	___flmul@grs& (0+255),b
 23161                           
 23162                           ; BSR set to: 0
 23163  0105CA  517B               	movf	___flmul@aexp& (0+255),w,b
 23164  0105CC  C080  F076         	movff	___flmul@bexp,??___flmul
 23165  0105D0  6B77               	clrf	(??___flmul+1)& (0+255),b
 23166  0105D2  2776               	addwf	??___flmul& (0+255),f,b
 23167  0105D4  0E00               	movlw	0
 23168  0105D6  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 23169  0105D8  0E82               	movlw	130
 23170  0105DA  2576               	addwf	??___flmul& (0+255),w,b
 23171  0105DC  6F85               	movwf	___flmul@temp& (0+255),b
 23172  0105DE  0EFF               	movlw	255
 23173  0105E0  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 23174  0105E2  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 23175  0105E4  D00F               	goto	l3000
 23176  0105E6                     
 23177                           ; BSR set to: 0
 23178                           
 23179                           ; BSR set to: 0
 23180  0105E6  90D8               	bcf	status,0,c
 23181  0105E8  3781               	rlcf	___flmul@prod& (0+255),f,b
 23182  0105EA  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 23183  0105EC  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 23184  0105EE  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 23185                           
 23186                           ; BSR set to: 0
 23187  0105F0  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 23188                           
 23189                           ; BSR set to: 0
 23190  0105F2  8181               	bsf	___flmul@prod& (0+255),0,b
 23191                           
 23192                           ; BSR set to: 0
 23193  0105F4  90D8               	bcf	status,0,c
 23194  0105F6  377C               	rlcf	___flmul@grs& (0+255),f,b
 23195  0105F8  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 23196  0105FA  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 23197  0105FC  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 23198  0105FE  0785               	decf	___flmul@temp& (0+255),f,b
 23199  010600  A0D8               	btfss	status,0,c
 23200  010602  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 23201  010604                     l3000:
 23202                           
 23203                           ; BSR set to: 0
 23204                           
 23205                           ; BSR set to: 0
 23206  010604  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 23207  010606  D7EF               	goto	l3001
 23208                           
 23209                           ; BSR set to: 0
 23210                           
 23211                           ; BSR set to: 0
 23212  010608  0E00               	movlw	0
 23213  01060A  6F7B               	movwf	___flmul@aexp& (0+255),b
 23214                           
 23215                           ; BSR set to: 0
 23216  01060C  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 23217  01060E  D016               	goto	l3007
 23218                           
 23219                           ; BSR set to: 0
 23220  010610  0EFF               	movlw	255
 23221  010612  157C               	andwf	___flmul@grs& (0+255),w,b
 23222  010614  6F76               	movwf	??___flmul& (0+255),b
 23223  010616  0EFF               	movlw	255
 23224  010618  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 23225  01061A  6F77               	movwf	(??___flmul+1)& (0+255),b
 23226  01061C  0EFF               	movlw	255
 23227  01061E  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 23228  010620  6F78               	movwf	(??___flmul+2)& (0+255),b
 23229  010622  0E7F               	movlw	127
 23230  010624  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 23231  010626  6F79               	movwf	(??___flmul+3)& (0+255),b
 23232  010628  5176               	movf	??___flmul& (0+255),w,b
 23233  01062A  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 23234  01062C  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 23235  01062E  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 23236  010630  A4D8               	btfss	status,2,c
 23237  010632  D002               	goto	u10820
 23238                           
 23239                           ; BSR set to: 0
 23240                           
 23241                           ; BSR set to: 0
 23242  010634  A181               	btfss	___flmul@prod& (0+255),0,b
 23243  010636  D002               	goto	l3007
 23244  010638                     u10820:
 23245                           
 23246                           ; BSR set to: 0
 23247  010638  0E01               	movlw	1
 23248  01063A  6F7B               	movwf	___flmul@aexp& (0+255),b
 23249  01063C                     l3007:
 23250                           
 23251                           ; BSR set to: 0
 23252                           
 23253                           ; BSR set to: 0
 23254                           
 23255                           ; BSR set to: 0
 23256  01063C  517B               	movf	___flmul@aexp& (0+255),w,b
 23257  01063E  B4D8               	btfsc	status,2,c
 23258  010640  D01F               	goto	l3009
 23259                           
 23260                           ; BSR set to: 0
 23261  010642  0E01               	movlw	1
 23262  010644  2781               	addwf	___flmul@prod& (0+255),f,b
 23263  010646  0E00               	movlw	0
 23264  010648  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 23265  01064A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 23266  01064C  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 23267                           
 23268                           ; BSR set to: 0
 23269  01064E  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 23270  010650  D017               	goto	l3009
 23271                           
 23272                           ; BSR set to: 0
 23273  010652  C081  F076         	movff	___flmul@prod,??___flmul
 23274  010656  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 23275  01065A  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 23276  01065E  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 23277  010662  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 23278  010664  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 23279  010666  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 23280  010668  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 23281  01066A  3376               	rrcf	??___flmul& (0+255),f,b
 23282  01066C  C076  F081         	movff	??___flmul,___flmul@prod
 23283  010670  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 23284  010674  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 23285  010678  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 23286                           
 23287                           ; BSR set to: 0
 23288  01067C  4B85               	infsnz	___flmul@temp& (0+255),f,b
 23289  01067E  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 23290  010680                     l3009:
 23291                           
 23292                           ; BSR set to: 0
 23293                           
 23294                           ; BSR set to: 0
 23295                           
 23296                           ; BSR set to: 0
 23297  010680  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 23298  010682  D00D               	goto	l3010
 23299  010684  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 23300  010686  E103               	bnz	u10850
 23301  010688  2985               	incf	___flmul@temp& (0+255),w,b
 23302  01068A  A0D8               	btfss	status,0,c
 23303  01068C  D008               	goto	l3010
 23304  01068E                     u10850:
 23305                           
 23306                           ; BSR set to: 0
 23307  01068E  0E00               	movlw	0
 23308  010690  6F81               	movwf	___flmul@prod& (0+255),b
 23309  010692  0E00               	movlw	0
 23310  010694  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 23311  010696  0E80               	movlw	128
 23312  010698  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 23313  01069A  0E7F               	movlw	127
 23314  01069C  D020               	goto	L12
 23315  01069E                     l3010:
 23316                           
 23317                           ; BSR set to: 0
 23318                           
 23319                           ; BSR set to: 0
 23320  01069E  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 23321  0106A0  D005               	goto	u10860
 23322  0106A2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 23323  0106A4  E10E               	bnz	l3012
 23324  0106A6  0585               	decf	___flmul@temp& (0+255),w,b
 23325  0106A8  B0D8               	btfsc	status,0,c
 23326  0106AA  D00B               	goto	l3012
 23327  0106AC                     u10860:
 23328                           
 23329                           ; BSR set to: 0
 23330  0106AC  0E00               	movlw	0
 23331  0106AE  6F81               	movwf	___flmul@prod& (0+255),b
 23332  0106B0  0E00               	movlw	0
 23333  0106B2  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 23334  0106B4  0E00               	movlw	0
 23335  0106B6  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 23336  0106B8  0E00               	movlw	0
 23337  0106BA  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 23338  0106BC  0E00               	movlw	0
 23339  0106BE  6F7A               	movwf	___flmul@sign& (0+255),b
 23340  0106C0  D00F               	goto	l3013
 23341  0106C2                     l3012:
 23342                           
 23343                           ; BSR set to: 0
 23344  0106C2  C085  F080         	movff	___flmul@temp,___flmul@bexp
 23345                           
 23346                           ; BSR set to: 0
 23347  0106C6  0EFF               	movlw	255
 23348  0106C8  1781               	andwf	___flmul@prod& (0+255),f,b
 23349  0106CA  0EFF               	movlw	255
 23350  0106CC  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 23351  0106CE  0E7F               	movlw	127
 23352  0106D0  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 23353  0106D2  0E00               	movlw	0
 23354  0106D4  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 23355                           
 23356                           ; BSR set to: 0
 23357  0106D6  B180               	btfsc	___flmul@bexp& (0+255),0,b
 23358                           
 23359                           ; BSR set to: 0
 23360  0106D8  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 23361                           
 23362                           ; BSR set to: 0
 23363                           
 23364                           ; BSR set to: 0
 23365  0106DA  90D8               	bcf	status,0,c
 23366  0106DC  3180               	rrcf	___flmul@bexp& (0+255),w,b
 23367  0106DE                     L12:
 23368  0106DE  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 23369  0106E0                     l3013:
 23370                           
 23371                           ; BSR set to: 0
 23372                           
 23373                           ; BSR set to: 0
 23374                           
 23375                           ; BSR set to: 0
 23376  0106E0  517A               	movf	___flmul@sign& (0+255),w,b
 23377  0106E2  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 23378                           
 23379                           ; BSR set to: 0
 23380  0106E4  C081  F06E         	movff	___flmul@prod,?___flmul
 23381  0106E8  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 23382  0106EC  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 23383  0106F0  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 23384  0106F4  0012               	return	
 23385  0106F6                     __end_of___flmul:
 23386                           	opt stack 0
 23387                           tosu	equ	0xFFF
 23388                           tosh	equ	0xFFE
 23389                           tosl	equ	0xFFD
 23390                           pclath	equ	0xFFA
 23391                           tblptru	equ	0xFF8
 23392                           tblptrh	equ	0xFF7
 23393                           tblptrl	equ	0xFF6
 23394                           tablat	equ	0xFF5
 23395                           prodh	equ	0xFF4
 23396                           prodl	equ	0xFF3
 23397                           intcon	equ	0xFF2
 23398                           indf0	equ	0xFEF
 23399                           postinc0	equ	0xFEE
 23400                           fsr0h	equ	0xFEA
 23401                           fsr0l	equ	0xFE9
 23402                           wreg	equ	0xFE8
 23403                           indf1	equ	0xFE7
 23404                           postdec1	equ	0xFE5
 23405                           fsr1h	equ	0xFE2
 23406                           fsr1l	equ	0xFE1
 23407                           indf2	equ	0xFDF
 23408                           postinc2	equ	0xFDE
 23409                           postdec2	equ	0xFDD
 23410                           plusw2	equ	0xFDB
 23411                           fsr2h	equ	0xFDA
 23412                           fsr2l	equ	0xFD9
 23413                           status	equ	0xFD8
 23414                           
 23415 ;; *************** function ___flsub *****************
 23416 ;; Defined at:
 23417 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
 23418 ;; Parameters:    Size  Location     Type
 23419 ;;  b               4   63[BANK0 ] unsigned char 
 23420 ;;  a               4   67[BANK0 ] unsigned char 
 23421 ;; Auto vars:     Size  Location     Type
 23422 ;;		None
 23423 ;; Return value:  Size  Location     Type
 23424 ;;                  4   63[BANK0 ] unsigned char 
 23425 ;; Registers used:
 23426 ;;		wreg, status,2, status,0, cstack
 23427 ;; Tracked objects:
 23428 ;;		On entry : 0/0
 23429 ;;		On exit  : 0/0
 23430 ;;		Unchanged: 0/0
 23431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23432 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23435 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23436 ;;Total ram usage:        8 bytes
 23437 ;; Hardware stack levels used:    1
 23438 ;; Hardware stack levels required when called:    8
 23439 ;; This function calls:
 23440 ;;		___fladd
 23441 ;; This function is called by:
 23442 ;;		_exp
 23443 ;; This function uses a non-reentrant model
 23444 ;;
 23445                           
 23446                           	psect	text124
 23447  01524E                     __ptext124:
 23448                           	opt stack 0
 23449  01524E                     ___flsub:
 23450                           	opt stack 19
 23451                           
 23452                           ; BSR set to: 0
 23453                           ;incstack = 0
 23454  01524E  0E00               	movlw	0
 23455  015250  0100               	movlb	0	; () banked
 23456  015252  1BA3               	xorwf	___flsub@a& (0+255),f,b
 23457  015254  0E00               	movlw	0
 23458  015256  1BA4               	xorwf	(___flsub@a+1)& (0+255),f,b
 23459  015258  0E00               	movlw	0
 23460  01525A  1BA5               	xorwf	(___flsub@a+2)& (0+255),f,b
 23461  01525C  0E80               	movlw	128
 23462  01525E  1BA6               	xorwf	(___flsub@a+3)& (0+255),f,b
 23463                           
 23464                           ; BSR set to: 0
 23465  015260  C09F  F08B         	movff	___flsub@b,___fladd@b
 23466  015264  C0A0  F08C         	movff	___flsub@b+1,___fladd@b+1
 23467  015268  C0A1  F08D         	movff	___flsub@b+2,___fladd@b+2
 23468  01526C  C0A2  F08E         	movff	___flsub@b+3,___fladd@b+3
 23469  015270  C0A3  F08F         	movff	___flsub@a,___fladd@a
 23470  015274  C0A4  F090         	movff	___flsub@a+1,___fladd@a+1
 23471  015278  C0A5  F091         	movff	___flsub@a+2,___fladd@a+2
 23472  01527C  C0A6  F092         	movff	___flsub@a+3,___fladd@a+3
 23473  015280  EC7B  F083         	call	___fladd	;wreg free
 23474  015284  C08B  F09F         	movff	?___fladd,?___flsub
 23475  015288  C08C  F0A0         	movff	?___fladd+1,?___flsub+1
 23476  01528C  C08D  F0A1         	movff	?___fladd+2,?___flsub+2
 23477  015290  C08E  F0A2         	movff	?___fladd+3,?___flsub+3
 23478  015294  0012               	return	
 23479  015296                     __end_of___flsub:
 23480                           	opt stack 0
 23481                           tosu	equ	0xFFF
 23482                           tosh	equ	0xFFE
 23483                           tosl	equ	0xFFD
 23484                           pclath	equ	0xFFA
 23485                           tblptru	equ	0xFF8
 23486                           tblptrh	equ	0xFF7
 23487                           tblptrl	equ	0xFF6
 23488                           tablat	equ	0xFF5
 23489                           prodh	equ	0xFF4
 23490                           prodl	equ	0xFF3
 23491                           intcon	equ	0xFF2
 23492                           indf0	equ	0xFEF
 23493                           postinc0	equ	0xFEE
 23494                           fsr0h	equ	0xFEA
 23495                           fsr0l	equ	0xFE9
 23496                           wreg	equ	0xFE8
 23497                           indf1	equ	0xFE7
 23498                           postdec1	equ	0xFE5
 23499                           fsr1h	equ	0xFE2
 23500                           fsr1l	equ	0xFE1
 23501                           indf2	equ	0xFDF
 23502                           postinc2	equ	0xFDE
 23503                           postdec2	equ	0xFDD
 23504                           plusw2	equ	0xFDB
 23505                           fsr2h	equ	0xFDA
 23506                           fsr2l	equ	0xFD9
 23507                           status	equ	0xFD8
 23508                           
 23509 ;; *************** function ___fladd *****************
 23510 ;; Defined at:
 23511 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
 23512 ;; Parameters:    Size  Location     Type
 23513 ;;  b               4   43[BANK0 ] unsigned char 
 23514 ;;  a               4   47[BANK0 ] unsigned char 
 23515 ;; Auto vars:     Size  Location     Type
 23516 ;;  grs             1   62[BANK0 ] unsigned char 
 23517 ;;  bexp            1   61[BANK0 ] unsigned char 
 23518 ;;  aexp            1   60[BANK0 ] unsigned char 
 23519 ;;  signs           1   59[BANK0 ] unsigned char 
 23520 ;; Return value:  Size  Location     Type
 23521 ;;                  4   43[BANK0 ] unsigned char 
 23522 ;; Registers used:
 23523 ;;		wreg, status,2, status,0
 23524 ;; Tracked objects:
 23525 ;;		On entry : 0/0
 23526 ;;		On exit  : 0/0
 23527 ;;		Unchanged: 0/0
 23528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23529 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23530 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23531 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23532 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23533 ;;Total ram usage:       20 bytes
 23534 ;; Hardware stack levels used:    1
 23535 ;; Hardware stack levels required when called:    7
 23536 ;; This function calls:
 23537 ;;		Nothing
 23538 ;; This function is called by:
 23539 ;;		_ADCAverage
 23540 ;;		___flsub
 23541 ;;		_floor
 23542 ;;		_log
 23543 ;;		_eval_poly
 23544 ;;		_Move_ADC_To
 23545 ;; This function uses a non-reentrant model
 23546 ;;
 23547                           
 23548                           	psect	text125
 23549  0106F6                     __ptext125:
 23550                           	opt stack 0
 23551  0106F6                     ___fladd:
 23552                           	opt stack 19
 23553                           
 23554                           ;incstack = 0
 23555  0106F6  0100               	movlb	0	; () banked
 23556  0106F8  518E               	movf	(___fladd@b+3)& (0+255),w,b
 23557  0106FA  0B80               	andlw	128
 23558  0106FC  6F9B               	movwf	___fladd@signs& (0+255),b
 23559  0106FE  518E               	movf	(___fladd@b+3)& (0+255),w,b
 23560  010700  258E               	addwf	(___fladd@b+3)& (0+255),w,b
 23561  010702  6F9D               	movwf	___fladd@bexp& (0+255),b
 23562                           
 23563                           ; BSR set to: 0
 23564  010704  BF8D               	btfsc	(___fladd@b+2)& (0+255),7,b
 23565                           
 23566                           ; BSR set to: 0
 23567  010706  819D               	bsf	___fladd@bexp& (0+255),0,b
 23568                           
 23569                           ; BSR set to: 0
 23570                           
 23571                           ; BSR set to: 0
 23572  010708  519D               	movf	___fladd@bexp& (0+255),w,b
 23573  01070A  B4D8               	btfsc	status,2,c
 23574  01070C  D00D               	goto	l2898
 23575                           
 23576                           ; BSR set to: 0
 23577  01070E  299D               	incf	___fladd@bexp& (0+255),w,b
 23578  010710  A4D8               	btfss	status,2,c
 23579  010712  D008               	goto	l2899
 23580                           
 23581                           ; BSR set to: 0
 23582  010714  0E00               	movlw	0
 23583  010716  6F8B               	movwf	___fladd@b& (0+255),b
 23584  010718  0E00               	movlw	0
 23585  01071A  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 23586  01071C  0E00               	movlw	0
 23587  01071E  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 23588  010720  0E00               	movlw	0
 23589  010722  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 23590  010724                     l2899:
 23591                           
 23592                           ; BSR set to: 0
 23593                           
 23594                           ; BSR set to: 0
 23595  010724  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 23596  010726  D006               	goto	L13
 23597  010728                     l2898:
 23598                           
 23599                           ; BSR set to: 0
 23600                           
 23601                           ; BSR set to: 0
 23602  010728  0E00               	movlw	0
 23603  01072A  6F8B               	movwf	___fladd@b& (0+255),b
 23604  01072C  0E00               	movlw	0
 23605  01072E  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 23606  010730  0E00               	movlw	0
 23607  010732  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 23608  010734                     L13:
 23609  010734  0E00               	movlw	0
 23610  010736  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 23611                           
 23612                           ; BSR set to: 0
 23613                           
 23614                           ; BSR set to: 0
 23615  010738  5192               	movf	(___fladd@a+3)& (0+255),w,b
 23616  01073A  0B80               	andlw	128
 23617  01073C  6F9C               	movwf	___fladd@aexp& (0+255),b
 23618                           
 23619                           ; BSR set to: 0
 23620  01073E  519B               	movf	___fladd@signs& (0+255),w,b
 23621  010740  199C               	xorwf	___fladd@aexp& (0+255),w,b
 23622  010742  A4D8               	btfss	status,2,c
 23623                           
 23624                           ; BSR set to: 0
 23625  010744  8D9B               	bsf	___fladd@signs& (0+255),6,b
 23626                           
 23627                           ; BSR set to: 0
 23628                           
 23629                           ; BSR set to: 0
 23630  010746  5192               	movf	(___fladd@a+3)& (0+255),w,b
 23631  010748  2592               	addwf	(___fladd@a+3)& (0+255),w,b
 23632  01074A  6F9C               	movwf	___fladd@aexp& (0+255),b
 23633                           
 23634                           ; BSR set to: 0
 23635  01074C  BF91               	btfsc	(___fladd@a+2)& (0+255),7,b
 23636                           
 23637                           ; BSR set to: 0
 23638  01074E  819C               	bsf	___fladd@aexp& (0+255),0,b
 23639                           
 23640                           ; BSR set to: 0
 23641                           
 23642                           ; BSR set to: 0
 23643  010750  519C               	movf	___fladd@aexp& (0+255),w,b
 23644  010752  B4D8               	btfsc	status,2,c
 23645  010754  D00D               	goto	l2903
 23646                           
 23647                           ; BSR set to: 0
 23648  010756  299C               	incf	___fladd@aexp& (0+255),w,b
 23649  010758  A4D8               	btfss	status,2,c
 23650  01075A  D008               	goto	l2904
 23651                           
 23652                           ; BSR set to: 0
 23653  01075C  0E00               	movlw	0
 23654  01075E  6F8F               	movwf	___fladd@a& (0+255),b
 23655  010760  0E00               	movlw	0
 23656  010762  6F90               	movwf	(___fladd@a+1)& (0+255),b
 23657  010764  0E00               	movlw	0
 23658  010766  6F91               	movwf	(___fladd@a+2)& (0+255),b
 23659  010768  0E00               	movlw	0
 23660  01076A  6F92               	movwf	(___fladd@a+3)& (0+255),b
 23661  01076C                     l2904:
 23662                           
 23663                           ; BSR set to: 0
 23664                           
 23665                           ; BSR set to: 0
 23666  01076C  8F91               	bsf	(___fladd@a+2)& (0+255),7,b
 23667  01076E  D006               	goto	L14
 23668  010770                     l2903:
 23669                           
 23670                           ; BSR set to: 0
 23671                           
 23672                           ; BSR set to: 0
 23673  010770  0E00               	movlw	0
 23674  010772  6F8F               	movwf	___fladd@a& (0+255),b
 23675  010774  0E00               	movlw	0
 23676  010776  6F90               	movwf	(___fladd@a+1)& (0+255),b
 23677  010778  0E00               	movlw	0
 23678  01077A  6F91               	movwf	(___fladd@a+2)& (0+255),b
 23679  01077C                     L14:
 23680  01077C  0E00               	movlw	0
 23681  01077E  6F92               	movwf	(___fladd@a+3)& (0+255),b
 23682                           
 23683                           ; BSR set to: 0
 23684                           
 23685                           ; BSR set to: 0
 23686  010780  519D               	movf	___fladd@bexp& (0+255),w,b
 23687  010782  5D9C               	subwf	___fladd@aexp& (0+255),w,b
 23688  010784  B0D8               	btfsc	status,0,c
 23689  010786  D022               	goto	l2906
 23690                           
 23691                           ; BSR set to: 0
 23692  010788  AD9B               	btfss	___fladd@signs& (0+255),6,b
 23693  01078A  D002               	goto	l2907
 23694                           
 23695                           ; BSR set to: 0
 23696  01078C  0E80               	movlw	128
 23697  01078E  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 23698  010790                     l2907:
 23699                           
 23700                           ; BSR set to: 0
 23701                           
 23702                           ; BSR set to: 0
 23703  010790  C09D  F09E         	movff	___fladd@bexp,___fladd@grs
 23704                           
 23705                           ; BSR set to: 0
 23706  010794  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 23707                           
 23708                           ; BSR set to: 0
 23709  010798  C09E  F09C         	movff	___fladd@grs,___fladd@aexp
 23710                           
 23711                           ; BSR set to: 0
 23712  01079C  C08B  F09E         	movff	___fladd@b,___fladd@grs
 23713                           
 23714                           ; BSR set to: 0
 23715  0107A0  C08F  F08B         	movff	___fladd@a,___fladd@b
 23716                           
 23717                           ; BSR set to: 0
 23718  0107A4  C09E  F08F         	movff	___fladd@grs,___fladd@a
 23719                           
 23720                           ; BSR set to: 0
 23721  0107A8  C08C  F09E         	movff	___fladd@b+1,___fladd@grs
 23722                           
 23723                           ; BSR set to: 0
 23724  0107AC  C090  F08C         	movff	___fladd@a+1,___fladd@b+1
 23725                           
 23726                           ; BSR set to: 0
 23727  0107B0  C09E  F090         	movff	___fladd@grs,___fladd@a+1
 23728                           
 23729                           ; BSR set to: 0
 23730  0107B4  C08D  F09E         	movff	___fladd@b+2,___fladd@grs
 23731                           
 23732                           ; BSR set to: 0
 23733  0107B8  C091  F08D         	movff	___fladd@a+2,___fladd@b+2
 23734                           
 23735                           ; BSR set to: 0
 23736  0107BC  C09E  F091         	movff	___fladd@grs,___fladd@a+2
 23737                           
 23738                           ; BSR set to: 0
 23739  0107C0  C08E  F09E         	movff	___fladd@b+3,___fladd@grs
 23740                           
 23741                           ; BSR set to: 0
 23742  0107C4  C092  F08E         	movff	___fladd@a+3,___fladd@b+3
 23743                           
 23744                           ; BSR set to: 0
 23745  0107C8  C09E  F092         	movff	___fladd@grs,___fladd@a+3
 23746  0107CC                     l2906:
 23747                           
 23748                           ; BSR set to: 0
 23749                           
 23750                           ; BSR set to: 0
 23751  0107CC  0E00               	movlw	0
 23752  0107CE  6F9E               	movwf	___fladd@grs& (0+255),b
 23753                           
 23754                           ; BSR set to: 0
 23755  0107D0  519D               	movf	___fladd@bexp& (0+255),w,b
 23756  0107D2  6F93               	movwf	??___fladd& (0+255),b
 23757  0107D4  6B94               	clrf	(??___fladd+1)& (0+255),b
 23758  0107D6  1F93               	comf	??___fladd& (0+255),f,b
 23759  0107D8  1F94               	comf	(??___fladd+1)& (0+255),f,b
 23760  0107DA  4B93               	infsnz	??___fladd& (0+255),f,b
 23761  0107DC  2B94               	incf	(??___fladd+1)& (0+255),f,b
 23762  0107DE  519C               	movf	___fladd@aexp& (0+255),w,b
 23763  0107E0  6F95               	movwf	(??___fladd+2)& (0+255),b
 23764  0107E2  6B96               	clrf	(??___fladd+3)& (0+255),b
 23765  0107E4  5193               	movf	??___fladd& (0+255),w,b
 23766  0107E6  2795               	addwf	(??___fladd+2)& (0+255),f,b
 23767  0107E8  5194               	movf	(??___fladd+1)& (0+255),w,b
 23768  0107EA  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 23769  0107EC  BF96               	btfsc	(??___fladd+3)& (0+255),7,b
 23770  0107EE  D02C               	goto	l2910
 23771  0107F0  5196               	movf	(??___fladd+3)& (0+255),w,b
 23772  0107F2  E104               	bnz	u10390
 23773  0107F4  0E1A               	movlw	26
 23774  0107F6  5D95               	subwf	(??___fladd+2)& (0+255),w,b
 23775  0107F8  A0D8               	btfss	status,0,c
 23776  0107FA  D026               	goto	l2910
 23777  0107FC                     u10390:
 23778                           
 23779                           ; BSR set to: 0
 23780  0107FC  518B               	movf	___fladd@b& (0+255),w,b
 23781  0107FE  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 23782  010800  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 23783  010802  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 23784  010804  B4D8               	btfsc	status,2,c
 23785  010806  D002               	goto	u10400
 23786  010808  0E01               	movlw	1
 23787  01080A  D001               	goto	u10410
 23788  01080C                     u10400:
 23789  01080C  0E00               	movlw	0
 23790  01080E                     u10410:
 23791  01080E  6F9E               	movwf	___fladd@grs& (0+255),b
 23792                           
 23793                           ; BSR set to: 0
 23794  010810  0E00               	movlw	0
 23795  010812  6F8B               	movwf	___fladd@b& (0+255),b
 23796  010814  0E00               	movlw	0
 23797  010816  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 23798  010818  0E00               	movlw	0
 23799  01081A  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 23800  01081C  0E00               	movlw	0
 23801  01081E  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 23802                           
 23803                           ; BSR set to: 0
 23804  010820  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 23805  010824  D015               	goto	u10440
 23806  010826                     l2911:
 23807                           
 23808                           ; BSR set to: 0
 23809  010826  A19E               	btfss	___fladd@grs& (0+255),0,b
 23810  010828  D005               	goto	l2912
 23811                           
 23812                           ; BSR set to: 0
 23813  01082A  90D8               	bcf	status,0,c
 23814  01082C  319E               	rrcf	___fladd@grs& (0+255),w,b
 23815  01082E  0901               	iorlw	1
 23816  010830  6F9E               	movwf	___fladd@grs& (0+255),b
 23817  010832  D002               	goto	l2913
 23818  010834                     l2912:
 23819                           
 23820                           ; BSR set to: 0
 23821                           
 23822                           ; BSR set to: 0
 23823  010834  90D8               	bcf	status,0,c
 23824  010836  339E               	rrcf	___fladd@grs& (0+255),f,b
 23825  010838                     l2913:
 23826                           
 23827                           ; BSR set to: 0
 23828                           
 23829                           ; BSR set to: 0
 23830  010838  B18B               	btfsc	___fladd@b& (0+255),0,b
 23831                           
 23832                           ; BSR set to: 0
 23833  01083A  8F9E               	bsf	___fladd@grs& (0+255),7,b
 23834                           
 23835                           ; BSR set to: 0
 23836                           
 23837                           ; BSR set to: 0
 23838  01083C  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 23839  01083E  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 23840  010840  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 23841  010842  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 23842  010844  338B               	rrcf	___fladd@b& (0+255),f,b
 23843                           
 23844                           ; BSR set to: 0
 23845  010846  2B9D               	incf	___fladd@bexp& (0+255),f,b
 23846  010848                     l2910:
 23847                           
 23848                           ; BSR set to: 0
 23849  010848  519C               	movf	___fladd@aexp& (0+255),w,b
 23850  01084A  5D9D               	subwf	___fladd@bexp& (0+255),w,b
 23851  01084C  A0D8               	btfss	status,0,c
 23852  01084E  D7EB               	goto	l2911
 23853  010850                     u10440:
 23854                           
 23855                           ; BSR set to: 0
 23856                           
 23857                           ; BSR set to: 0
 23858  010850  BD9B               	btfsc	___fladd@signs& (0+255),6,b
 23859  010852  D029               	goto	l2916
 23860                           
 23861                           ; BSR set to: 0
 23862  010854  519D               	movf	___fladd@bexp& (0+255),w,b
 23863  010856  A4D8               	btfss	status,2,c
 23864  010858  D009               	goto	l2917
 23865                           
 23866                           ; BSR set to: 0
 23867  01085A  0E00               	movlw	0
 23868  01085C  6F8B               	movwf	?___fladd& (0+255),b
 23869  01085E  0E00               	movlw	0
 23870  010860  6F8C               	movwf	(?___fladd+1)& (0+255),b
 23871  010862  0E00               	movlw	0
 23872  010864  6F8D               	movwf	(?___fladd+2)& (0+255),b
 23873  010866  0E00               	movlw	0
 23874  010868  6F8E               	movwf	(?___fladd+3)& (0+255),b
 23875                           
 23876                           ; BSR set to: 0
 23877  01086A  0012               	return	
 23878  01086C                     l2917:
 23879                           
 23880                           ; BSR set to: 0
 23881                           
 23882                           ; BSR set to: 0
 23883  01086C  518F               	movf	___fladd@a& (0+255),w,b
 23884  01086E  278B               	addwf	___fladd@b& (0+255),f,b
 23885  010870  5190               	movf	(___fladd@a+1)& (0+255),w,b
 23886  010872  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 23887  010874  5191               	movf	(___fladd@a+2)& (0+255),w,b
 23888  010876  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 23889  010878  5192               	movf	(___fladd@a+3)& (0+255),w,b
 23890  01087A  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 23891                           
 23892                           ; BSR set to: 0
 23893  01087C  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 23894  01087E  D083               	goto	u10570
 23895                           
 23896                           ; BSR set to: 0
 23897  010880  A19E               	btfss	___fladd@grs& (0+255),0,b
 23898  010882  D006               	goto	l2920
 23899                           
 23900                           ; BSR set to: 0
 23901  010884  90D8               	bcf	status,0,c
 23902  010886  339E               	rrcf	___fladd@grs& (0+255),f,b
 23903  010888  519E               	movf	___fladd@grs& (0+255),w,b
 23904  01088A  0901               	iorlw	1
 23905  01088C  6F9E               	movwf	___fladd@grs& (0+255),b
 23906  01088E  D002               	goto	l2921
 23907  010890                     l2920:
 23908                           
 23909                           ; BSR set to: 0
 23910                           
 23911                           ; BSR set to: 0
 23912  010890  90D8               	bcf	status,0,c
 23913  010892  339E               	rrcf	___fladd@grs& (0+255),f,b
 23914  010894                     l2921:
 23915                           
 23916                           ; BSR set to: 0
 23917                           
 23918                           ; BSR set to: 0
 23919  010894  B18B               	btfsc	___fladd@b& (0+255),0,b
 23920                           
 23921                           ; BSR set to: 0
 23922  010896  8F9E               	bsf	___fladd@grs& (0+255),7,b
 23923                           
 23924                           ; BSR set to: 0
 23925                           
 23926                           ; BSR set to: 0
 23927  010898  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 23928  01089A  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 23929  01089C  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 23930  01089E  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 23931  0108A0  338B               	rrcf	___fladd@b& (0+255),f,b
 23932                           
 23933                           ; BSR set to: 0
 23934  0108A2  2B9D               	incf	___fladd@bexp& (0+255),f,b
 23935                           
 23936                           ; BSR set to: 0
 23937  0108A4  D070               	goto	u10570
 23938  0108A6                     l2916:
 23939                           
 23940                           ; BSR set to: 0
 23941                           
 23942                           ; BSR set to: 0
 23943  0108A6  518F               	movf	___fladd@a& (0+255),w,b
 23944  0108A8  5D8B               	subwf	___fladd@b& (0+255),w,b
 23945  0108AA  5190               	movf	(___fladd@a+1)& (0+255),w,b
 23946  0108AC  598C               	subwfb	(___fladd@b+1)& (0+255),w,b
 23947  0108AE  5191               	movf	(___fladd@a+2)& (0+255),w,b
 23948  0108B0  598D               	subwfb	(___fladd@b+2)& (0+255),w,b
 23949  0108B2  518E               	movf	(___fladd@b+3)& (0+255),w,b
 23950  0108B4  0A80               	xorlw	128
 23951  0108B6  6F93               	movwf	??___fladd& (0+255),b
 23952  0108B8  5192               	movf	(___fladd@a+3)& (0+255),w,b
 23953  0108BA  0A80               	xorlw	128
 23954  0108BC  5993               	subwfb	??___fladd& (0+255),w,b
 23955  0108BE  B0D8               	btfsc	status,0,c
 23956  0108C0  D036               	goto	l2924
 23957                           
 23958                           ; BSR set to: 0
 23959  0108C2  C08B  F093         	movff	___fladd@b,??___fladd
 23960  0108C6  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 23961  0108CA  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 23962  0108CE  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 23963  0108D2  1F93               	comf	??___fladd& (0+255),f,b
 23964  0108D4  1F94               	comf	(??___fladd+1)& (0+255),f,b
 23965  0108D6  1F95               	comf	(??___fladd+2)& (0+255),f,b
 23966  0108D8  1F96               	comf	(??___fladd+3)& (0+255),f,b
 23967  0108DA  2B93               	incf	??___fladd& (0+255),f,b
 23968  0108DC  0E00               	movlw	0
 23969  0108DE  2394               	addwfc	(??___fladd+1)& (0+255),f,b
 23970  0108E0  2395               	addwfc	(??___fladd+2)& (0+255),f,b
 23971  0108E2  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 23972  0108E4  518F               	movf	___fladd@a& (0+255),w,b
 23973  0108E6  2593               	addwf	??___fladd& (0+255),w,b
 23974  0108E8  6F97               	movwf	(??___fladd+4)& (0+255),b
 23975  0108EA  5190               	movf	(___fladd@a+1)& (0+255),w,b
 23976  0108EC  2194               	addwfc	(??___fladd+1)& (0+255),w,b
 23977  0108EE  6F98               	movwf	(??___fladd+5)& (0+255),b
 23978  0108F0  5191               	movf	(___fladd@a+2)& (0+255),w,b
 23979  0108F2  2195               	addwfc	(??___fladd+2)& (0+255),w,b
 23980  0108F4  6F99               	movwf	(??___fladd+6)& (0+255),b
 23981  0108F6  5192               	movf	(___fladd@a+3)& (0+255),w,b
 23982  0108F8  2196               	addwfc	(??___fladd+3)& (0+255),w,b
 23983  0108FA  6F9A               	movwf	(??___fladd+7)& (0+255),b
 23984  0108FC  0EFF               	movlw	255
 23985  0108FE  2597               	addwf	(??___fladd+4)& (0+255),w,b
 23986  010900  6F8B               	movwf	___fladd@b& (0+255),b
 23987  010902  0EFF               	movlw	255
 23988  010904  2198               	addwfc	(??___fladd+5)& (0+255),w,b
 23989  010906  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 23990  010908  0EFF               	movlw	255
 23991  01090A  2199               	addwfc	(??___fladd+6)& (0+255),w,b
 23992  01090C  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 23993  01090E  0EFF               	movlw	255
 23994  010910  219A               	addwfc	(??___fladd+7)& (0+255),w,b
 23995  010912  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 23996  010914  0E80               	movlw	128
 23997  010916  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 23998                           
 23999                           ; BSR set to: 0
 24000  010918  6D9E               	negf	___fladd@grs& (0+255),b
 24001                           
 24002                           ; BSR set to: 0
 24003  01091A  519E               	movf	___fladd@grs& (0+255),w,b
 24004  01091C  A4D8               	btfss	status,2,c
 24005  01091E  D00F               	goto	l2926
 24006                           
 24007                           ; BSR set to: 0
 24008  010920  0E01               	movlw	1
 24009  010922  278B               	addwf	___fladd@b& (0+255),f,b
 24010  010924  0E00               	movlw	0
 24011  010926  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 24012  010928  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 24013  01092A  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 24014                           
 24015                           ; BSR set to: 0
 24016  01092C  D008               	goto	l2926
 24017  01092E                     l2924:
 24018                           
 24019                           ; BSR set to: 0
 24020                           
 24021                           ; BSR set to: 0
 24022  01092E  518F               	movf	___fladd@a& (0+255),w,b
 24023  010930  5F8B               	subwf	___fladd@b& (0+255),f,b
 24024  010932  5190               	movf	(___fladd@a+1)& (0+255),w,b
 24025  010934  5B8C               	subwfb	(___fladd@b+1)& (0+255),f,b
 24026  010936  5191               	movf	(___fladd@a+2)& (0+255),w,b
 24027  010938  5B8D               	subwfb	(___fladd@b+2)& (0+255),f,b
 24028  01093A  5192               	movf	(___fladd@a+3)& (0+255),w,b
 24029  01093C  5B8E               	subwfb	(___fladd@b+3)& (0+255),f,b
 24030  01093E                     l2926:
 24031                           
 24032                           ; BSR set to: 0
 24033  01093E  518B               	movf	___fladd@b& (0+255),w,b
 24034  010940  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 24035  010942  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 24036  010944  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 24037  010946  A4D8               	btfss	status,2,c
 24038  010948  D01C               	goto	l2933
 24039                           
 24040                           ; BSR set to: 0
 24041  01094A  519E               	movf	___fladd@grs& (0+255),w,b
 24042  01094C  A4D8               	btfss	status,2,c
 24043  01094E  D019               	goto	l2933
 24044                           
 24045                           ; BSR set to: 0
 24046  010950  0E00               	movlw	0
 24047  010952  6F8B               	movwf	?___fladd& (0+255),b
 24048  010954  0E00               	movlw	0
 24049  010956  6F8C               	movwf	(?___fladd+1)& (0+255),b
 24050  010958  0E00               	movlw	0
 24051  01095A  6F8D               	movwf	(?___fladd+2)& (0+255),b
 24052  01095C  0E00               	movlw	0
 24053  01095E  6F8E               	movwf	(?___fladd+3)& (0+255),b
 24054                           
 24055                           ; BSR set to: 0
 24056  010960  0012               	return	
 24057  010962                     
 24058                           ; BSR set to: 0
 24059                           
 24060                           ; BSR set to: 0
 24061  010962  90D8               	bcf	status,0,c
 24062  010964  378B               	rlcf	___fladd@b& (0+255),f,b
 24063  010966  378C               	rlcf	(___fladd@b+1)& (0+255),f,b
 24064  010968  378D               	rlcf	(___fladd@b+2)& (0+255),f,b
 24065  01096A  378E               	rlcf	(___fladd@b+3)& (0+255),f,b
 24066                           
 24067                           ; BSR set to: 0
 24068  01096C  BF9E               	btfsc	___fladd@grs& (0+255),7,b
 24069                           
 24070                           ; BSR set to: 0
 24071  01096E  818B               	bsf	___fladd@b& (0+255),0,b
 24072                           
 24073                           ; BSR set to: 0
 24074                           
 24075                           ; BSR set to: 0
 24076  010970  A19E               	btfss	___fladd@grs& (0+255),0,b
 24077  010972  D002               	goto	l2931
 24078                           
 24079                           ; BSR set to: 0
 24080  010974  80D8               	bsf	status,0,c
 24081  010976  D001               	goto	L15
 24082  010978                     l2931:
 24083                           
 24084                           ; BSR set to: 0
 24085                           
 24086                           ; BSR set to: 0
 24087  010978  90D8               	bcf	status,0,c
 24088  01097A                     L15:
 24089  01097A  379E               	rlcf	___fladd@grs& (0+255),f,b
 24090                           
 24091                           ; BSR set to: 0
 24092                           
 24093                           ; BSR set to: 0
 24094  01097C  519D               	movf	___fladd@bexp& (0+255),w,b
 24095  01097E  A4D8               	btfss	status,2,c
 24096                           
 24097                           ; BSR set to: 0
 24098  010980  079D               	decf	___fladd@bexp& (0+255),f,b
 24099  010982                     l2933:
 24100                           
 24101                           ; BSR set to: 0
 24102                           
 24103                           ; BSR set to: 0
 24104                           
 24105                           ; BSR set to: 0
 24106  010982  AF8D               	btfss	(___fladd@b+2)& (0+255),7,b
 24107  010984  D7EE               	goto	l2929
 24108  010986                     u10570:
 24109                           
 24110                           ; BSR set to: 0
 24111                           
 24112                           ; BSR set to: 0
 24113                           
 24114                           ; BSR set to: 0
 24115  010986  0E00               	movlw	0
 24116  010988  6F9C               	movwf	___fladd@aexp& (0+255),b
 24117                           
 24118                           ; BSR set to: 0
 24119  01098A  AF9E               	btfss	___fladd@grs& (0+255),7,b
 24120  01098C  D00A               	goto	l2938
 24121                           
 24122                           ; BSR set to: 0
 24123  01098E  C09E  F093         	movff	___fladd@grs,??___fladd
 24124  010992  0E7F               	movlw	127
 24125  010994  1793               	andwf	??___fladd& (0+255),f,b
 24126  010996  A4D8               	btfss	status,2,c
 24127  010998  D002               	goto	u10600
 24128                           
 24129                           ; BSR set to: 0
 24130                           
 24131                           ; BSR set to: 0
 24132  01099A  A18B               	btfss	___fladd@b& (0+255),0,b
 24133  01099C  D002               	goto	l2938
 24134  01099E                     u10600:
 24135                           
 24136                           ; BSR set to: 0
 24137  01099E  0E01               	movlw	1
 24138  0109A0  6F9C               	movwf	___fladd@aexp& (0+255),b
 24139  0109A2                     l2938:
 24140                           
 24141                           ; BSR set to: 0
 24142                           
 24143                           ; BSR set to: 0
 24144                           
 24145                           ; BSR set to: 0
 24146  0109A2  519C               	movf	___fladd@aexp& (0+255),w,b
 24147  0109A4  B4D8               	btfsc	status,2,c
 24148  0109A6  D020               	goto	l2941
 24149                           
 24150                           ; BSR set to: 0
 24151  0109A8  0E01               	movlw	1
 24152  0109AA  278B               	addwf	___fladd@b& (0+255),f,b
 24153  0109AC  0E00               	movlw	0
 24154  0109AE  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 24155  0109B0  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 24156  0109B2  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 24157                           
 24158                           ; BSR set to: 0
 24159  0109B4  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 24160  0109B6  D018               	goto	l2941
 24161                           
 24162                           ; BSR set to: 0
 24163  0109B8  C08B  F093         	movff	___fladd@b,??___fladd
 24164  0109BC  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 24165  0109C0  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 24166  0109C4  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 24167  0109C8  3596               	rlcf	(??___fladd+3)& (0+255),w,b
 24168  0109CA  3396               	rrcf	(??___fladd+3)& (0+255),f,b
 24169  0109CC  3395               	rrcf	(??___fladd+2)& (0+255),f,b
 24170  0109CE  3394               	rrcf	(??___fladd+1)& (0+255),f,b
 24171  0109D0  3393               	rrcf	??___fladd& (0+255),f,b
 24172  0109D2  C093  F08B         	movff	??___fladd,___fladd@b
 24173  0109D6  C094  F08C         	movff	??___fladd+1,___fladd@b+1
 24174  0109DA  C095  F08D         	movff	??___fladd+2,___fladd@b+2
 24175  0109DE  C096  F08E         	movff	??___fladd+3,___fladd@b+3
 24176  0109E2  299D               	incf	___fladd@bexp& (0+255),w,b
 24177  0109E4  A4D8               	btfss	status,2,c
 24178                           
 24179                           ; BSR set to: 0
 24180  0109E6  2B9D               	incf	___fladd@bexp& (0+255),f,b
 24181  0109E8                     l2941:
 24182                           
 24183                           ; BSR set to: 0
 24184                           
 24185                           ; BSR set to: 0
 24186                           
 24187                           ; BSR set to: 0
 24188                           
 24189                           ; BSR set to: 0
 24190  0109E8  299D               	incf	___fladd@bexp& (0+255),w,b
 24191  0109EA  B4D8               	btfsc	status,2,c
 24192  0109EC  D003               	goto	u10650
 24193                           
 24194                           ; BSR set to: 0
 24195  0109EE  519D               	movf	___fladd@bexp& (0+255),w,b
 24196  0109F0  A4D8               	btfss	status,2,c
 24197  0109F2  D00D               	goto	l2945
 24198  0109F4                     u10650:
 24199                           
 24200                           ; BSR set to: 0
 24201                           
 24202                           ; BSR set to: 0
 24203  0109F4  0E00               	movlw	0
 24204  0109F6  6F8B               	movwf	___fladd@b& (0+255),b
 24205  0109F8  0E00               	movlw	0
 24206  0109FA  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 24207  0109FC  0E00               	movlw	0
 24208  0109FE  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 24209  010A00  0E00               	movlw	0
 24210  010A02  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 24211  010A04  519D               	movf	___fladd@bexp& (0+255),w,b
 24212  010A06  A4D8               	btfss	status,2,c
 24213  010A08  D002               	goto	l2945
 24214                           
 24215                           ; BSR set to: 0
 24216  010A0A  0E00               	movlw	0
 24217  010A0C  6F9B               	movwf	___fladd@signs& (0+255),b
 24218  010A0E                     l2945:
 24219                           
 24220                           ; BSR set to: 0
 24221                           
 24222                           ; BSR set to: 0
 24223                           
 24224                           ; BSR set to: 0
 24225  010A0E  A19D               	btfss	___fladd@bexp& (0+255),0,b
 24226  010A10  D002               	goto	l2946
 24227                           
 24228                           ; BSR set to: 0
 24229  010A12  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 24230  010A14  D001               	goto	l2947
 24231  010A16                     l2946:
 24232                           
 24233                           ; BSR set to: 0
 24234                           
 24235                           ; BSR set to: 0
 24236  010A16  9F8D               	bcf	(___fladd@b+2)& (0+255),7,b
 24237  010A18                     l2947:
 24238                           
 24239                           ; BSR set to: 0
 24240                           
 24241                           ; BSR set to: 0
 24242  010A18  90D8               	bcf	status,0,c
 24243  010A1A  319D               	rrcf	___fladd@bexp& (0+255),w,b
 24244  010A1C  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 24245                           
 24246                           ; BSR set to: 0
 24247  010A1E  BF9B               	btfsc	___fladd@signs& (0+255),7,b
 24248                           
 24249                           ; BSR set to: 0
 24250  010A20  8F8E               	bsf	(___fladd@b+3)& (0+255),7,b
 24251                           
 24252                           ; BSR set to: 0
 24253                           
 24254                           ; BSR set to: 0
 24255  010A22  C08B  F08B         	movff	___fladd@b,?___fladd
 24256  010A26  C08C  F08C         	movff	___fladd@b+1,?___fladd+1
 24257  010A2A  C08D  F08D         	movff	___fladd@b+2,?___fladd+2
 24258  010A2E  C08E  F08E         	movff	___fladd@b+3,?___fladd+3
 24259  010A32  0012               	return	
 24260  010A34                     __end_of___fladd:
 24261                           	opt stack 0
 24262                           tosu	equ	0xFFF
 24263                           tosh	equ	0xFFE
 24264                           tosl	equ	0xFFD
 24265                           pclath	equ	0xFFA
 24266                           tblptru	equ	0xFF8
 24267                           tblptrh	equ	0xFF7
 24268                           tblptrl	equ	0xFF6
 24269                           tablat	equ	0xFF5
 24270                           prodh	equ	0xFF4
 24271                           prodl	equ	0xFF3
 24272                           intcon	equ	0xFF2
 24273                           indf0	equ	0xFEF
 24274                           postinc0	equ	0xFEE
 24275                           fsr0h	equ	0xFEA
 24276                           fsr0l	equ	0xFE9
 24277                           wreg	equ	0xFE8
 24278                           indf1	equ	0xFE7
 24279                           postdec1	equ	0xFE5
 24280                           fsr1h	equ	0xFE2
 24281                           fsr1l	equ	0xFE1
 24282                           indf2	equ	0xFDF
 24283                           postinc2	equ	0xFDE
 24284                           postdec2	equ	0xFDD
 24285                           plusw2	equ	0xFDB
 24286                           fsr2h	equ	0xFDA
 24287                           fsr2l	equ	0xFD9
 24288                           status	equ	0xFD8
 24289                           
 24290 ;; *************** function ___flneg *****************
 24291 ;; Defined at:
 24292 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
 24293 ;; Parameters:    Size  Location     Type
 24294 ;;  f1              4   39[BANK0 ] unsigned char 
 24295 ;; Auto vars:     Size  Location     Type
 24296 ;;		None
 24297 ;; Return value:  Size  Location     Type
 24298 ;;                  4   39[BANK0 ] unsigned char 
 24299 ;; Registers used:
 24300 ;;		wreg, status,2, status,0
 24301 ;; Tracked objects:
 24302 ;;		On entry : 0/0
 24303 ;;		On exit  : 0/0
 24304 ;;		Unchanged: 0/0
 24305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24306 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24309 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24310 ;;Total ram usage:        4 bytes
 24311 ;; Hardware stack levels used:    1
 24312 ;; Hardware stack levels required when called:    7
 24313 ;; This function calls:
 24314 ;;		Nothing
 24315 ;; This function is called by:
 24316 ;;		_ADCAverage
 24317 ;;		_pow
 24318 ;;		_exp
 24319 ;; This function uses a non-reentrant model
 24320 ;;
 24321                           
 24322                           	psect	text126
 24323  0156A6                     __ptext126:
 24324                           	opt stack 0
 24325  0156A6                     ___flneg:
 24326                           	opt stack 20
 24327                           
 24328                           ; BSR set to: 0
 24329                           ;incstack = 0
 24330  0156A6  0100               	movlb	0	; () banked
 24331  0156A8  5187               	movf	___flneg@f1& (0+255),w,b
 24332  0156AA  1188               	iorwf	(___flneg@f1+1)& (0+255),w,b
 24333  0156AC  1189               	iorwf	(___flneg@f1+2)& (0+255),w,b
 24334  0156AE  118A               	iorwf	(___flneg@f1+3)& (0+255),w,b
 24335  0156B0  B4D8               	btfsc	status,2,c
 24336  0156B2  D008               	goto	l2661
 24337                           
 24338                           ; BSR set to: 0
 24339  0156B4  0E00               	movlw	0
 24340  0156B6  1B87               	xorwf	___flneg@f1& (0+255),f,b
 24341  0156B8  0E00               	movlw	0
 24342  0156BA  1B88               	xorwf	(___flneg@f1+1)& (0+255),f,b
 24343  0156BC  0E00               	movlw	0
 24344  0156BE  1B89               	xorwf	(___flneg@f1+2)& (0+255),f,b
 24345  0156C0  0E80               	movlw	128
 24346  0156C2  1B8A               	xorwf	(___flneg@f1+3)& (0+255),f,b
 24347  0156C4                     l2661:
 24348                           
 24349                           ; BSR set to: 0
 24350                           
 24351                           ; BSR set to: 0
 24352  0156C4  C087  F087         	movff	___flneg@f1,?___flneg
 24353  0156C8  C088  F088         	movff	___flneg@f1+1,?___flneg+1
 24354  0156CC  C089  F089         	movff	___flneg@f1+2,?___flneg+2
 24355  0156D0  C08A  F08A         	movff	___flneg@f1+3,?___flneg+3
 24356  0156D4  0012               	return	
 24357  0156D6                     __end_of___flneg:
 24358                           	opt stack 0
 24359                           tosu	equ	0xFFF
 24360                           tosh	equ	0xFFE
 24361                           tosl	equ	0xFFD
 24362                           pclath	equ	0xFFA
 24363                           tblptru	equ	0xFF8
 24364                           tblptrh	equ	0xFF7
 24365                           tblptrl	equ	0xFF6
 24366                           tablat	equ	0xFF5
 24367                           prodh	equ	0xFF4
 24368                           prodl	equ	0xFF3
 24369                           intcon	equ	0xFF2
 24370                           indf0	equ	0xFEF
 24371                           postinc0	equ	0xFEE
 24372                           fsr0h	equ	0xFEA
 24373                           fsr0l	equ	0xFE9
 24374                           wreg	equ	0xFE8
 24375                           indf1	equ	0xFE7
 24376                           postdec1	equ	0xFE5
 24377                           fsr1h	equ	0xFE2
 24378                           fsr1l	equ	0xFE1
 24379                           indf2	equ	0xFDF
 24380                           postinc2	equ	0xFDE
 24381                           postdec2	equ	0xFDD
 24382                           plusw2	equ	0xFDB
 24383                           fsr2h	equ	0xFDA
 24384                           fsr2l	equ	0xFD9
 24385                           status	equ	0xFD8
 24386                           
 24387 ;; *************** function ___fldiv *****************
 24388 ;; Defined at:
 24389 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
 24390 ;; Parameters:    Size  Location     Type
 24391 ;;  b               4    0[BANK0 ] unsigned char 
 24392 ;;  a               4    4[BANK0 ] unsigned char 
 24393 ;; Auto vars:     Size  Location     Type
 24394 ;;  grs             4   19[BANK0 ] unsigned long 
 24395 ;;  rem             4   13[BANK0 ] unsigned long 
 24396 ;;  new_exp         2   17[BANK0 ] int 
 24397 ;;  aexp            1   24[BANK0 ] unsigned char 
 24398 ;;  bexp            1   23[BANK0 ] unsigned char 
 24399 ;;  sign            1   12[BANK0 ] unsigned char 
 24400 ;; Return value:  Size  Location     Type
 24401 ;;                  4    0[BANK0 ] unsigned char 
 24402 ;; Registers used:
 24403 ;;		wreg, status,2, status,0
 24404 ;; Tracked objects:
 24405 ;;		On entry : 0/0
 24406 ;;		On exit  : 0/0
 24407 ;;		Unchanged: 0/0
 24408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24409 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24410 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24411 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24412 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24413 ;;Total ram usage:       25 bytes
 24414 ;; Hardware stack levels used:    1
 24415 ;; Hardware stack levels required when called:    7
 24416 ;; This function calls:
 24417 ;;		Nothing
 24418 ;; This function is called by:
 24419 ;;		_exp
 24420 ;;		_ADC_Voltage
 24421 ;; This function uses a non-reentrant model
 24422 ;;
 24423                           
 24424                           	psect	text127
 24425  010FDE                     __ptext127:
 24426                           	opt stack 0
 24427  010FDE                     ___fldiv:
 24428                           	opt stack 20
 24429                           
 24430                           ; BSR set to: 0
 24431                           ;incstack = 0
 24432  010FDE  0100               	movlb	0	; () banked
 24433  010FE0  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 24434  010FE2  0B80               	andlw	128
 24435  010FE4  6F6C               	movwf	___fldiv@sign& (0+255),b
 24436  010FE6  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 24437  010FE8  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 24438  010FEA  6F77               	movwf	___fldiv@bexp& (0+255),b
 24439                           
 24440                           ; BSR set to: 0
 24441  010FEC  BF62               	btfsc	(___fldiv@b+2)& (0+255),7,b
 24442                           
 24443                           ; BSR set to: 0
 24444  010FEE  8177               	bsf	___fldiv@bexp& (0+255),0,b
 24445                           
 24446                           ; BSR set to: 0
 24447                           
 24448                           ; BSR set to: 0
 24449  010FF0  5177               	movf	___fldiv@bexp& (0+255),w,b
 24450  010FF2  B4D8               	btfsc	status,2,c
 24451  010FF4  D00D               	goto	l2955
 24452                           
 24453                           ; BSR set to: 0
 24454  010FF6  2977               	incf	___fldiv@bexp& (0+255),w,b
 24455  010FF8  A4D8               	btfss	status,2,c
 24456  010FFA  D008               	goto	l2956
 24457                           
 24458                           ; BSR set to: 0
 24459  010FFC  0E00               	movlw	0
 24460  010FFE  6F60               	movwf	___fldiv@b& (0+255),b
 24461  011000  0E00               	movlw	0
 24462  011002  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 24463  011004  0E00               	movlw	0
 24464  011006  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 24465  011008  0E00               	movlw	0
 24466  01100A  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 24467  01100C                     l2956:
 24468                           
 24469                           ; BSR set to: 0
 24470                           
 24471                           ; BSR set to: 0
 24472  01100C  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 24473  01100E  D006               	goto	L16
 24474  011010                     l2955:
 24475                           
 24476                           ; BSR set to: 0
 24477                           
 24478                           ; BSR set to: 0
 24479  011010  0E00               	movlw	0
 24480  011012  6F60               	movwf	___fldiv@b& (0+255),b
 24481  011014  0E00               	movlw	0
 24482  011016  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 24483  011018  0E00               	movlw	0
 24484  01101A  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 24485  01101C                     L16:
 24486  01101C  0E00               	movlw	0
 24487  01101E  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 24488                           
 24489                           ; BSR set to: 0
 24490                           
 24491                           ; BSR set to: 0
 24492  011020  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 24493  011022  0B80               	andlw	128
 24494  011024  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 24495                           
 24496                           ; BSR set to: 0
 24497  011026  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 24498  011028  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 24499  01102A  6F78               	movwf	___fldiv@aexp& (0+255),b
 24500                           
 24501                           ; BSR set to: 0
 24502  01102C  BF66               	btfsc	(___fldiv@a+2)& (0+255),7,b
 24503                           
 24504                           ; BSR set to: 0
 24505  01102E  8178               	bsf	___fldiv@aexp& (0+255),0,b
 24506                           
 24507                           ; BSR set to: 0
 24508                           
 24509                           ; BSR set to: 0
 24510  011030  5178               	movf	___fldiv@aexp& (0+255),w,b
 24511  011032  B4D8               	btfsc	status,2,c
 24512  011034  D00D               	goto	l2959
 24513                           
 24514                           ; BSR set to: 0
 24515  011036  2978               	incf	___fldiv@aexp& (0+255),w,b
 24516  011038  A4D8               	btfss	status,2,c
 24517  01103A  D008               	goto	l2960
 24518                           
 24519                           ; BSR set to: 0
 24520  01103C  0E00               	movlw	0
 24521  01103E  6F64               	movwf	___fldiv@a& (0+255),b
 24522  011040  0E00               	movlw	0
 24523  011042  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 24524  011044  0E00               	movlw	0
 24525  011046  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 24526  011048  0E00               	movlw	0
 24527  01104A  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 24528  01104C                     l2960:
 24529                           
 24530                           ; BSR set to: 0
 24531                           
 24532                           ; BSR set to: 0
 24533  01104C  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 24534  01104E  D006               	goto	L17
 24535  011050                     l2959:
 24536                           
 24537                           ; BSR set to: 0
 24538                           
 24539                           ; BSR set to: 0
 24540  011050  0E00               	movlw	0
 24541  011052  6F64               	movwf	___fldiv@a& (0+255),b
 24542  011054  0E00               	movlw	0
 24543  011056  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 24544  011058  0E00               	movlw	0
 24545  01105A  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 24546  01105C                     L17:
 24547  01105C  0E00               	movlw	0
 24548  01105E  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 24549                           
 24550                           ; BSR set to: 0
 24551                           
 24552                           ; BSR set to: 0
 24553  011060  5164               	movf	___fldiv@a& (0+255),w,b
 24554  011062  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 24555  011064  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 24556  011066  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 24557  011068  A4D8               	btfss	status,2,c
 24558  01106A  D015               	goto	l2962
 24559                           
 24560                           ; BSR set to: 0
 24561  01106C  0E00               	movlw	0
 24562  01106E  6F60               	movwf	___fldiv@b& (0+255),b
 24563  011070  0E00               	movlw	0
 24564  011072  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 24565  011074  0E00               	movlw	0
 24566  011076  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 24567  011078  0E00               	movlw	0
 24568  01107A  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 24569                           
 24570                           ; BSR set to: 0
 24571  01107C  0E80               	movlw	128
 24572  01107E  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 24573  011080  0E7F               	movlw	127
 24574  011082  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 24575                           
 24576                           ; BSR set to: 0
 24577  011084  C060  F060         	movff	___fldiv@b,?___fldiv
 24578  011088  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 24579  01108C  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 24580  011090  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 24581                           
 24582                           ; BSR set to: 0
 24583  011094  0012               	return	
 24584  011096                     l2962:
 24585                           
 24586                           ; BSR set to: 0
 24587                           
 24588                           ; BSR set to: 0
 24589  011096  5177               	movf	___fldiv@bexp& (0+255),w,b
 24590  011098  A4D8               	btfss	status,2,c
 24591  01109A  D011               	goto	l2964
 24592                           
 24593                           ; BSR set to: 0
 24594  01109C  0E00               	movlw	0
 24595  01109E  6F60               	movwf	___fldiv@b& (0+255),b
 24596  0110A0  0E00               	movlw	0
 24597  0110A2  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 24598  0110A4  0E00               	movlw	0
 24599  0110A6  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 24600  0110A8  0E00               	movlw	0
 24601  0110AA  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 24602                           
 24603                           ; BSR set to: 0
 24604  0110AC  C060  F060         	movff	___fldiv@b,?___fldiv
 24605  0110B0  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 24606  0110B4  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 24607  0110B8  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 24608                           
 24609                           ; BSR set to: 0
 24610  0110BC  0012               	return	
 24611  0110BE                     l2964:
 24612                           
 24613                           ; BSR set to: 0
 24614                           
 24615                           ; BSR set to: 0
 24616  0110BE  5178               	movf	___fldiv@aexp& (0+255),w,b
 24617  0110C0  6F68               	movwf	??___fldiv& (0+255),b
 24618  0110C2  6B69               	clrf	(??___fldiv+1)& (0+255),b
 24619  0110C4  1F68               	comf	??___fldiv& (0+255),f,b
 24620  0110C6  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 24621  0110C8  4B68               	infsnz	??___fldiv& (0+255),f,b
 24622  0110CA  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 24623  0110CC  5177               	movf	___fldiv@bexp& (0+255),w,b
 24624  0110CE  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 24625  0110D0  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 24626  0110D2  5168               	movf	??___fldiv& (0+255),w,b
 24627  0110D4  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 24628  0110D6  5169               	movf	(??___fldiv+1)& (0+255),w,b
 24629  0110D8  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 24630  0110DA  0E7F               	movlw	127
 24631  0110DC  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 24632  0110DE  6F71               	movwf	___fldiv@new_exp& (0+255),b
 24633  0110E0  0E00               	movlw	0
 24634  0110E2  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 24635  0110E4  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 24636                           
 24637                           ; BSR set to: 0
 24638  0110E6  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 24639  0110EA  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 24640  0110EE  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 24641  0110F2  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 24642                           
 24643                           ; BSR set to: 0
 24644  0110F6  0E00               	movlw	0
 24645  0110F8  6F60               	movwf	___fldiv@b& (0+255),b
 24646  0110FA  0E00               	movlw	0
 24647  0110FC  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 24648  0110FE  0E00               	movlw	0
 24649  011100  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 24650  011102  0E00               	movlw	0
 24651  011104  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 24652                           
 24653                           ; BSR set to: 0
 24654  011106  0E00               	movlw	0
 24655  011108  6F73               	movwf	___fldiv@grs& (0+255),b
 24656  01110A  0E00               	movlw	0
 24657  01110C  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 24658  01110E  0E00               	movlw	0
 24659  011110  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 24660  011112  0E00               	movlw	0
 24661  011114  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 24662                           
 24663                           ; BSR set to: 0
 24664  011116  0E00               	movlw	0
 24665  011118  6F78               	movwf	___fldiv@aexp& (0+255),b
 24666  01111A  D028               	goto	l2965
 24667  01111C                     
 24668                           ; BSR set to: 0
 24669                           
 24670                           ; BSR set to: 0
 24671  01111C  5178               	movf	___fldiv@aexp& (0+255),w,b
 24672  01111E  B4D8               	btfsc	status,2,c
 24673  011120  D011               	goto	l2967
 24674                           
 24675                           ; BSR set to: 0
 24676  011122  90D8               	bcf	status,0,c
 24677  011124  376D               	rlcf	___fldiv@rem& (0+255),f,b
 24678  011126  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 24679  011128  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 24680  01112A  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 24681  01112C  90D8               	bcf	status,0,c
 24682  01112E  3760               	rlcf	___fldiv@b& (0+255),f,b
 24683  011130  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 24684  011132  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 24685  011134  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 24686                           
 24687                           ; BSR set to: 0
 24688  011136  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 24689                           
 24690                           ; BSR set to: 0
 24691  011138  8160               	bsf	___fldiv@b& (0+255),0,b
 24692                           
 24693                           ; BSR set to: 0
 24694  01113A  90D8               	bcf	status,0,c
 24695  01113C  3773               	rlcf	___fldiv@grs& (0+255),f,b
 24696  01113E  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 24697  011140  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 24698  011142  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 24699  011144                     l2967:
 24700                           
 24701                           ; BSR set to: 0
 24702                           
 24703                           ; BSR set to: 0
 24704  011144  5164               	movf	___fldiv@a& (0+255),w,b
 24705  011146  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 24706  011148  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 24707  01114A  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 24708  01114C  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 24709  01114E  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 24710  011150  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 24711  011152  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 24712  011154  A0D8               	btfss	status,0,c
 24713  011156  D009               	goto	l2969
 24714                           
 24715                           ; BSR set to: 0
 24716  011158  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 24717                           
 24718                           ; BSR set to: 0
 24719  01115A  5164               	movf	___fldiv@a& (0+255),w,b
 24720  01115C  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 24721  01115E  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 24722  011160  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 24723  011162  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 24724  011164  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 24725  011166  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 24726  011168  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 24727  01116A                     l2969:
 24728                           
 24729                           ; BSR set to: 0
 24730                           
 24731                           ; BSR set to: 0
 24732  01116A  2B78               	incf	___fldiv@aexp& (0+255),f,b
 24733  01116C                     l2965:
 24734                           
 24735                           ; BSR set to: 0
 24736  01116C  0E19               	movlw	25
 24737  01116E  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 24738  011170  D7D5               	goto	l2966
 24739                           
 24740                           ; BSR set to: 0
 24741                           
 24742                           ; BSR set to: 0
 24743  011172  516D               	movf	___fldiv@rem& (0+255),w,b
 24744  011174  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 24745  011176  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 24746  011178  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 24747  01117A  B4D8               	btfsc	status,2,c
 24748  01117C  D011               	goto	l2972
 24749                           
 24750                           ; BSR set to: 0
 24751  01117E  8173               	bsf	___fldiv@grs& (0+255),0,b
 24752                           
 24753                           ; BSR set to: 0
 24754  011180  D00F               	goto	l2972
 24755  011182                     
 24756                           ; BSR set to: 0
 24757                           
 24758                           ; BSR set to: 0
 24759  011182  90D8               	bcf	status,0,c
 24760  011184  3760               	rlcf	___fldiv@b& (0+255),f,b
 24761  011186  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 24762  011188  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 24763  01118A  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 24764                           
 24765                           ; BSR set to: 0
 24766  01118C  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 24767                           
 24768                           ; BSR set to: 0
 24769  01118E  8160               	bsf	___fldiv@b& (0+255),0,b
 24770                           
 24771                           ; BSR set to: 0
 24772  011190  90D8               	bcf	status,0,c
 24773  011192  3773               	rlcf	___fldiv@grs& (0+255),f,b
 24774  011194  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 24775  011196  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 24776  011198  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 24777  01119A  0771               	decf	___fldiv@new_exp& (0+255),f,b
 24778  01119C  A0D8               	btfss	status,0,c
 24779  01119E  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 24780  0111A0                     l2972:
 24781                           
 24782                           ; BSR set to: 0
 24783                           
 24784                           ; BSR set to: 0
 24785  0111A0  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 24786  0111A2  D7EF               	goto	l2973
 24787                           
 24788                           ; BSR set to: 0
 24789                           
 24790                           ; BSR set to: 0
 24791  0111A4  0E00               	movlw	0
 24792  0111A6  6F78               	movwf	___fldiv@aexp& (0+255),b
 24793                           
 24794                           ; BSR set to: 0
 24795  0111A8  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 24796  0111AA  D016               	goto	l2979
 24797                           
 24798                           ; BSR set to: 0
 24799  0111AC  0EFF               	movlw	255
 24800  0111AE  1573               	andwf	___fldiv@grs& (0+255),w,b
 24801  0111B0  6F68               	movwf	??___fldiv& (0+255),b
 24802  0111B2  0EFF               	movlw	255
 24803  0111B4  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 24804  0111B6  6F69               	movwf	(??___fldiv+1)& (0+255),b
 24805  0111B8  0EFF               	movlw	255
 24806  0111BA  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 24807  0111BC  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 24808  0111BE  0E7F               	movlw	127
 24809  0111C0  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 24810  0111C2  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 24811  0111C4  5168               	movf	??___fldiv& (0+255),w,b
 24812  0111C6  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 24813  0111C8  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 24814  0111CA  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 24815  0111CC  A4D8               	btfss	status,2,c
 24816  0111CE  D002               	goto	u11620
 24817                           
 24818                           ; BSR set to: 0
 24819                           
 24820                           ; BSR set to: 0
 24821  0111D0  A160               	btfss	___fldiv@b& (0+255),0,b
 24822  0111D2  D002               	goto	l2979
 24823  0111D4                     u11620:
 24824                           
 24825                           ; BSR set to: 0
 24826  0111D4  0E01               	movlw	1
 24827  0111D6  6F78               	movwf	___fldiv@aexp& (0+255),b
 24828  0111D8                     l2979:
 24829                           
 24830                           ; BSR set to: 0
 24831                           
 24832                           ; BSR set to: 0
 24833                           
 24834                           ; BSR set to: 0
 24835  0111D8  5178               	movf	___fldiv@aexp& (0+255),w,b
 24836  0111DA  B4D8               	btfsc	status,2,c
 24837  0111DC  D01F               	goto	l2981
 24838                           
 24839                           ; BSR set to: 0
 24840  0111DE  0E01               	movlw	1
 24841  0111E0  2760               	addwf	___fldiv@b& (0+255),f,b
 24842  0111E2  0E00               	movlw	0
 24843  0111E4  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 24844  0111E6  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 24845  0111E8  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 24846                           
 24847                           ; BSR set to: 0
 24848  0111EA  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 24849  0111EC  D017               	goto	l2981
 24850                           
 24851                           ; BSR set to: 0
 24852  0111EE  C060  F068         	movff	___fldiv@b,??___fldiv
 24853  0111F2  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 24854  0111F6  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 24855  0111FA  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 24856  0111FE  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 24857  011200  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 24858  011202  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 24859  011204  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 24860  011206  3368               	rrcf	??___fldiv& (0+255),f,b
 24861  011208  C068  F060         	movff	??___fldiv,___fldiv@b
 24862  01120C  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 24863  011210  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 24864  011214  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 24865                           
 24866                           ; BSR set to: 0
 24867  011218  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 24868  01121A  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 24869  01121C                     l2981:
 24870                           
 24871                           ; BSR set to: 0
 24872                           
 24873                           ; BSR set to: 0
 24874                           
 24875                           ; BSR set to: 0
 24876  01121C  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 24877  01121E  D010               	goto	l2982
 24878  011220  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 24879  011222  E103               	bnz	u11650
 24880  011224  2971               	incf	___fldiv@new_exp& (0+255),w,b
 24881  011226  A0D8               	btfss	status,0,c
 24882  011228  D00B               	goto	l2982
 24883  01122A                     u11650:
 24884                           
 24885                           ; BSR set to: 0
 24886  01122A  0E00               	movlw	0
 24887  01122C  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 24888  01122E  6971               	setf	___fldiv@new_exp& (0+255),b
 24889  011230  0E00               	movlw	0
 24890  011232  6F60               	movwf	___fldiv@b& (0+255),b
 24891  011234  0E00               	movlw	0
 24892  011236  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 24893  011238  0E00               	movlw	0
 24894  01123A  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 24895  01123C  0E00               	movlw	0
 24896  01123E  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 24897  011240                     l2982:
 24898                           
 24899                           ; BSR set to: 0
 24900                           
 24901                           ; BSR set to: 0
 24902  011240  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 24903  011242  D005               	goto	u11660
 24904  011244  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 24905  011246  E111               	bnz	l14231
 24906  011248  0571               	decf	___fldiv@new_exp& (0+255),w,b
 24907  01124A  B0D8               	btfsc	status,0,c
 24908  01124C  D00E               	goto	l2983
 24909  01124E                     u11660:
 24910                           
 24911                           ; BSR set to: 0
 24912  01124E  0E00               	movlw	0
 24913  011250  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 24914  011252  0E00               	movlw	0
 24915  011254  6F71               	movwf	___fldiv@new_exp& (0+255),b
 24916  011256  0E00               	movlw	0
 24917  011258  6F60               	movwf	___fldiv@b& (0+255),b
 24918  01125A  0E00               	movlw	0
 24919  01125C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 24920  01125E  0E00               	movlw	0
 24921  011260  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 24922  011262  0E00               	movlw	0
 24923  011264  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 24924  011266  0E00               	movlw	0
 24925  011268  6F6C               	movwf	___fldiv@sign& (0+255),b
 24926  01126A                     l2983:
 24927  01126A                     l14231:
 24928                           
 24929                           ; BSR set to: 0
 24930  01126A  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 24931                           
 24932                           ; BSR set to: 0
 24933  01126E  A177               	btfss	___fldiv@bexp& (0+255),0,b
 24934  011270  D002               	goto	l2984
 24935                           
 24936                           ; BSR set to: 0
 24937  011272  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 24938  011274  D001               	goto	l2985
 24939  011276                     l2984:
 24940                           
 24941                           ; BSR set to: 0
 24942                           
 24943                           ; BSR set to: 0
 24944  011276  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 24945  011278                     l2985:
 24946                           
 24947                           ; BSR set to: 0
 24948                           
 24949                           ; BSR set to: 0
 24950  011278  90D8               	bcf	status,0,c
 24951  01127A  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 24952  01127C  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 24953                           
 24954                           ; BSR set to: 0
 24955  01127E  516C               	movf	___fldiv@sign& (0+255),w,b
 24956  011280  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 24957                           
 24958                           ; BSR set to: 0
 24959  011282  C060  F060         	movff	___fldiv@b,?___fldiv
 24960  011286  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 24961  01128A  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 24962  01128E  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 24963  011292  0012               	return	
 24964  011294                     __end_of___fldiv:
 24965                           	opt stack 0
 24966                           tosu	equ	0xFFF
 24967                           tosh	equ	0xFFE
 24968                           tosl	equ	0xFFD
 24969                           pclath	equ	0xFFA
 24970                           tblptru	equ	0xFF8
 24971                           tblptrh	equ	0xFF7
 24972                           tblptrl	equ	0xFF6
 24973                           tablat	equ	0xFF5
 24974                           prodh	equ	0xFF4
 24975                           prodl	equ	0xFF3
 24976                           intcon	equ	0xFF2
 24977                           indf0	equ	0xFEF
 24978                           postinc0	equ	0xFEE
 24979                           fsr0h	equ	0xFEA
 24980                           fsr0l	equ	0xFE9
 24981                           wreg	equ	0xFE8
 24982                           indf1	equ	0xFE7
 24983                           postdec1	equ	0xFE5
 24984                           fsr1h	equ	0xFE2
 24985                           fsr1l	equ	0xFE1
 24986                           indf2	equ	0xFDF
 24987                           postinc2	equ	0xFDE
 24988                           postdec2	equ	0xFDD
 24989                           plusw2	equ	0xFDB
 24990                           fsr2h	equ	0xFDA
 24991                           fsr2l	equ	0xFD9
 24992                           status	equ	0xFD8
 24993                           
 24994 ;; *************** function ___awdiv *****************
 24995 ;; Defined at:
 24996 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 24997 ;; Parameters:    Size  Location     Type
 24998 ;;  dividend        2    0[BANK0 ] int 
 24999 ;;  divisor         2    2[BANK0 ] int 
 25000 ;; Auto vars:     Size  Location     Type
 25001 ;;  quotient        2    6[BANK0 ] int 
 25002 ;;  sign            1    5[BANK0 ] unsigned char 
 25003 ;;  counter         1    4[BANK0 ] unsigned char 
 25004 ;; Return value:  Size  Location     Type
 25005 ;;                  2    0[BANK0 ] int 
 25006 ;; Registers used:
 25007 ;;		wreg, status,2, status,0
 25008 ;; Tracked objects:
 25009 ;;		On entry : 0/0
 25010 ;;		On exit  : 0/0
 25011 ;;		Unchanged: 0/0
 25012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25013 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25014 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25016 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25017 ;;Total ram usage:        8 bytes
 25018 ;; Hardware stack levels used:    1
 25019 ;; Hardware stack levels required when called:    7
 25020 ;; This function calls:
 25021 ;;		Nothing
 25022 ;; This function is called by:
 25023 ;;		_Console_Tab
 25024 ;;		_ADCAverage
 25025 ;; This function uses a non-reentrant model
 25026 ;;
 25027                           
 25028                           	psect	text128
 25029  0144D8                     __ptext128:
 25030                           	opt stack 0
 25031  0144D8                     ___awdiv:
 25032                           	opt stack 19
 25033                           
 25034                           ; BSR set to: 0
 25035                           ;incstack = 0
 25036  0144D8  0E00               	movlw	0
 25037  0144DA  0100               	movlb	0	; () banked
 25038  0144DC  6F65               	movwf	___awdiv@sign& (0+255),b
 25039                           
 25040                           ; BSR set to: 0
 25041  0144DE  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 25042  0144E0  D006               	goto	l2622
 25043                           
 25044                           ; BSR set to: 0
 25045  0144E2  6D62               	negf	___awdiv@divisor& (0+255),b
 25046  0144E4  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
 25047  0144E6  B0D8               	btfsc	status,0,c
 25048  0144E8  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
 25049                           
 25050                           ; BSR set to: 0
 25051  0144EA  0E01               	movlw	1
 25052  0144EC  6F65               	movwf	___awdiv@sign& (0+255),b
 25053  0144EE                     l2622:
 25054                           
 25055                           ; BSR set to: 0
 25056                           
 25057                           ; BSR set to: 0
 25058  0144EE  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 25059  0144F0  D006               	goto	l2623
 25060                           
 25061                           ; BSR set to: 0
 25062  0144F2  6D60               	negf	___awdiv@dividend& (0+255),b
 25063  0144F4  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
 25064  0144F6  B0D8               	btfsc	status,0,c
 25065  0144F8  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
 25066                           
 25067                           ; BSR set to: 0
 25068  0144FA  0E01               	movlw	1
 25069  0144FC  1B65               	xorwf	___awdiv@sign& (0+255),f,b
 25070  0144FE                     l2623:
 25071                           
 25072                           ; BSR set to: 0
 25073                           
 25074                           ; BSR set to: 0
 25075  0144FE  0E00               	movlw	0
 25076  014500  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
 25077  014502  0E00               	movlw	0
 25078  014504  6F66               	movwf	___awdiv@quotient& (0+255),b
 25079                           
 25080                           ; BSR set to: 0
 25081  014506  5162               	movf	___awdiv@divisor& (0+255),w,b
 25082  014508  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 25083  01450A  B4D8               	btfsc	status,2,c
 25084  01450C  D01C               	goto	l2630
 25085                           
 25086                           ; BSR set to: 0
 25087  01450E  0E01               	movlw	1
 25088  014510  6F64               	movwf	___awdiv@counter& (0+255),b
 25089  014512  D004               	goto	l2625
 25090  014514                     
 25091                           ; BSR set to: 0
 25092                           
 25093                           ; BSR set to: 0
 25094  014514  90D8               	bcf	status,0,c
 25095  014516  3762               	rlcf	___awdiv@divisor& (0+255),f,b
 25096  014518  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 25097  01451A  2B64               	incf	___awdiv@counter& (0+255),f,b
 25098  01451C                     l2625:
 25099                           
 25100                           ; BSR set to: 0
 25101                           
 25102                           ; BSR set to: 0
 25103  01451C  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 25104  01451E  D7FA               	goto	l2626
 25105  014520                     u10010:
 25106                           
 25107                           ; BSR set to: 0
 25108                           
 25109                           ; BSR set to: 0
 25110                           
 25111                           ; BSR set to: 0
 25112  014520  90D8               	bcf	status,0,c
 25113  014522  3766               	rlcf	___awdiv@quotient& (0+255),f,b
 25114  014524  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 25115                           
 25116                           ; BSR set to: 0
 25117  014526  5162               	movf	___awdiv@divisor& (0+255),w,b
 25118  014528  5D60               	subwf	___awdiv@dividend& (0+255),w,b
 25119  01452A  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 25120  01452C  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 25121  01452E  A0D8               	btfss	status,0,c
 25122  014530  D005               	goto	l2629
 25123                           
 25124                           ; BSR set to: 0
 25125  014532  5162               	movf	___awdiv@divisor& (0+255),w,b
 25126  014534  5F60               	subwf	___awdiv@dividend& (0+255),f,b
 25127  014536  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 25128  014538  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 25129                           
 25130                           ; BSR set to: 0
 25131  01453A  8166               	bsf	___awdiv@quotient& (0+255),0,b
 25132  01453C                     l2629:
 25133                           
 25134                           ; BSR set to: 0
 25135                           
 25136                           ; BSR set to: 0
 25137  01453C  90D8               	bcf	status,0,c
 25138  01453E  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 25139  014540  3362               	rrcf	___awdiv@divisor& (0+255),f,b
 25140                           
 25141                           ; BSR set to: 0
 25142  014542  2F64               	decfsz	___awdiv@counter& (0+255),f,b
 25143  014544  D7ED               	goto	u10010
 25144  014546                     l2630:
 25145                           
 25146                           ; BSR set to: 0
 25147                           
 25148                           ; BSR set to: 0
 25149                           
 25150                           ; BSR set to: 0
 25151  014546  5165               	movf	___awdiv@sign& (0+255),w,b
 25152  014548  B4D8               	btfsc	status,2,c
 25153  01454A  D004               	goto	l2631
 25154                           
 25155                           ; BSR set to: 0
 25156  01454C  6D66               	negf	___awdiv@quotient& (0+255),b
 25157  01454E  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
 25158  014550  B0D8               	btfsc	status,0,c
 25159  014552  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
 25160  014554                     l2631:
 25161                           
 25162                           ; BSR set to: 0
 25163                           
 25164                           ; BSR set to: 0
 25165  014554  C066  F060         	movff	___awdiv@quotient,?___awdiv
 25166  014558  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
 25167  01455C  0012               	return	
 25168  01455E                     __end_of___awdiv:
 25169                           	opt stack 0
 25170                           tosu	equ	0xFFF
 25171                           tosh	equ	0xFFE
 25172                           tosl	equ	0xFFD
 25173                           pclath	equ	0xFFA
 25174                           tblptru	equ	0xFF8
 25175                           tblptrh	equ	0xFF7
 25176                           tblptrl	equ	0xFF6
 25177                           tablat	equ	0xFF5
 25178                           prodh	equ	0xFF4
 25179                           prodl	equ	0xFF3
 25180                           intcon	equ	0xFF2
 25181                           indf0	equ	0xFEF
 25182                           postinc0	equ	0xFEE
 25183                           fsr0h	equ	0xFEA
 25184                           fsr0l	equ	0xFE9
 25185                           wreg	equ	0xFE8
 25186                           indf1	equ	0xFE7
 25187                           postdec1	equ	0xFE5
 25188                           fsr1h	equ	0xFE2
 25189                           fsr1l	equ	0xFE1
 25190                           indf2	equ	0xFDF
 25191                           postinc2	equ	0xFDE
 25192                           postdec2	equ	0xFDD
 25193                           plusw2	equ	0xFDB
 25194                           fsr2h	equ	0xFDA
 25195                           fsr2l	equ	0xFD9
 25196                           status	equ	0xFD8
 25197                           
 25198 ;; *************** function _HMI_SetNumber *****************
 25199 ;; Defined at:
 25200 ;;		line 221 in file "HMI.c"
 25201 ;; Parameters:    Size  Location     Type
 25202 ;;  pInput          2   22[BANK0 ] int 
 25203 ;; Auto vars:     Size  Location     Type
 25204 ;;		None
 25205 ;; Return value:  Size  Location     Type
 25206 ;;                  1    wreg      void 
 25207 ;; Registers used:
 25208 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 25209 ;; Tracked objects:
 25210 ;;		On entry : 0/0
 25211 ;;		On exit  : 0/0
 25212 ;;		Unchanged: 0/0
 25213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25214 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25217 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25218 ;;Total ram usage:        2 bytes
 25219 ;; Hardware stack levels used:    1
 25220 ;; Hardware stack levels required when called:    9
 25221 ;; This function calls:
 25222 ;;		_HMI_SetSegments
 25223 ;;		_itos
 25224 ;; This function is called by:
 25225 ;;		_Event_TestButton
 25226 ;;		_main
 25227 ;;		_ADCAverage
 25228 ;;		_Event_HMI_UpButton
 25229 ;;		_Event_HMI_DownButton
 25230 ;; This function uses a non-reentrant model
 25231 ;;
 25232                           
 25233                           	psect	text129
 25234  0157FE                     __ptext129:
 25235                           	opt stack 0
 25236  0157FE                     _HMI_SetNumber:
 25237                           	opt stack 21
 25238                           
 25239                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 25240                           
 25241                           ; BSR set to: 0
 25242                           ;incstack = 0
 25243  0157FE  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 25244  015802  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 25245  015806  0E4C               	movlw	low _HMIBoard
 25246  015808  0100               	movlb	0	; () banked
 25247  01580A  6F6E               	movwf	itos@destination& (0+255),b
 25248  01580C  0E01               	movlw	high _HMIBoard
 25249  01580E  6F6F               	movwf	(itos@destination+1)& (0+255),b
 25250  015810  ECD3  F09D         	call	_itos	;wreg free
 25251                           
 25252                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 25253  015814  0E4C               	movlw	low _HMIBoard
 25254  015816  0100               	movlb	0	; () banked
 25255  015818  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 25256  01581A  0E01               	movlw	high _HMIBoard
 25257  01581C  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 25258  01581E  EC2B  F0A0         	call	_HMI_SetSegments	;wreg free
 25259  015822  0012               	return		;funcret
 25260  015824                     __end_of_HMI_SetNumber:
 25261                           	opt stack 0
 25262                           tosu	equ	0xFFF
 25263                           tosh	equ	0xFFE
 25264                           tosl	equ	0xFFD
 25265                           pclath	equ	0xFFA
 25266                           tblptru	equ	0xFF8
 25267                           tblptrh	equ	0xFF7
 25268                           tblptrl	equ	0xFF6
 25269                           tablat	equ	0xFF5
 25270                           prodh	equ	0xFF4
 25271                           prodl	equ	0xFF3
 25272                           intcon	equ	0xFF2
 25273                           indf0	equ	0xFEF
 25274                           postinc0	equ	0xFEE
 25275                           fsr0h	equ	0xFEA
 25276                           fsr0l	equ	0xFE9
 25277                           wreg	equ	0xFE8
 25278                           indf1	equ	0xFE7
 25279                           postdec1	equ	0xFE5
 25280                           fsr1h	equ	0xFE2
 25281                           fsr1l	equ	0xFE1
 25282                           indf2	equ	0xFDF
 25283                           postinc2	equ	0xFDE
 25284                           postdec2	equ	0xFDD
 25285                           plusw2	equ	0xFDB
 25286                           fsr2h	equ	0xFDA
 25287                           fsr2l	equ	0xFD9
 25288                           status	equ	0xFD8
 25289                           
 25290 ;; *************** function _itos *****************
 25291 ;; Defined at:
 25292 ;;		line 369 in file "Library/Types.c"
 25293 ;; Parameters:    Size  Location     Type
 25294 ;;  input           2   12[BANK0 ] unsigned short 
 25295 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 25296 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 25297 ;; Auto vars:     Size  Location     Type
 25298 ;;  Out             2   20[BANK0 ] unsigned short 
 25299 ;;  Length          2   18[BANK0 ] unsigned short 
 25300 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 25301 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 25302 ;; Return value:  Size  Location     Type
 25303 ;;                  1    wreg      void 
 25304 ;; Registers used:
 25305 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 25306 ;; Tracked objects:
 25307 ;;		On entry : 0/0
 25308 ;;		On exit  : 0/0
 25309 ;;		Unchanged: 0/0
 25310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25311 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25312 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25314 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25315 ;;Total ram usage:       10 bytes
 25316 ;; Hardware stack levels used:    1
 25317 ;; Hardware stack levels required when called:    8
 25318 ;; This function calls:
 25319 ;;		___lwdiv
 25320 ;;		___lwmod
 25321 ;;		_reverse
 25322 ;; This function is called by:
 25323 ;;		_HMI_SetNumber
 25324 ;; This function uses a non-reentrant model
 25325 ;;
 25326                           
 25327                           	psect	text130
 25328  013BA6                     __ptext130:
 25329                           	opt stack 0
 25330  013BA6                     _itos:
 25331                           	opt stack 21
 25332                           
 25333                           ;Types.c: 371: UINT16 Out = input;
 25334                           
 25335                           ;incstack = 0
 25336  013BA6  C06C  F074         	movff	itos@input,itos@Out
 25337  013BAA  C06D  F075         	movff	itos@input+1,itos@Out+1
 25338                           
 25339                           ;Types.c: 372: UINT16 Length = 0;
 25340  013BAE  0E00               	movlw	0
 25341  013BB0  0100               	movlb	0	; () banked
 25342  013BB2  6F73               	movwf	(itos@Length+1)& (0+255),b
 25343  013BB4  0E00               	movlw	0
 25344  013BB6  6F72               	movwf	itos@Length& (0+255),b
 25345                           
 25346                           ; BSR set to: 0
 25347                           ;Types.c: 373: char *Data = destination;
 25348  013BB8  C06E  F070         	movff	itos@destination,itos@Data
 25349  013BBC  C06F  F071         	movff	itos@destination+1,itos@Data+1
 25350                           
 25351                           ; BSR set to: 0
 25352                           ;Types.c: 374: if(Out == 0)
 25353  013BC0  5174               	movf	itos@Out& (0+255),w,b
 25354  013BC2  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 25355  013BC4  A4D8               	btfss	status,2,c
 25356  013BC6  D030               	goto	l929
 25357                           
 25358                           ; BSR set to: 0
 25359                           ;Types.c: 375: {
 25360                           ;Types.c: 376: Data[0] = (UINT16)'0';
 25361  013BC8  C070  FFD9         	movff	itos@Data,fsr2l
 25362  013BCC  C071  FFDA         	movff	itos@Data+1,fsr2h
 25363  013BD0  0E30               	movlw	48
 25364  013BD2  6EDF               	movwf	indf2,c
 25365                           
 25366                           ; BSR set to: 0
 25367                           ;Types.c: 377: Length = 1;
 25368  013BD4  0E00               	movlw	0
 25369  013BD6  6F73               	movwf	(itos@Length+1)& (0+255),b
 25370  013BD8  0E01               	movlw	1
 25371  013BDA  6F72               	movwf	itos@Length& (0+255),b
 25372                           
 25373                           ;Types.c: 378: }
 25374  013BDC  D039               	goto	l928
 25375  013BDE                     
 25376                           ; BSR set to: 0
 25377                           ;Types.c: 382: {
 25378                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 25379                           
 25380                           ; BSR set to: 0
 25381  013BDE  C074  F067         	movff	itos@Out,___lwmod@dividend
 25382  013BE2  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 25383  013BE6  0E00               	movlw	0
 25384  013BE8  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 25385  013BEA  0E0A               	movlw	10
 25386  013BEC  6F69               	movwf	___lwmod@divisor& (0+255),b
 25387  013BEE  EC6E  F0A9         	call	___lwmod	;wreg free
 25388  013BF2  0100               	movlb	0	; () banked
 25389  013BF4  5167               	movf	?___lwmod& (0+255),w,b
 25390  013BF6  0F30               	addlw	48
 25391  013BF8  C070  FFD9         	movff	itos@Data,fsr2l
 25392  013BFC  C071  FFDA         	movff	itos@Data+1,fsr2h
 25393  013C00  6EDF               	movwf	indf2,c
 25394                           
 25395                           ; BSR set to: 0
 25396                           ;Types.c: 384: Out /= 10;
 25397  013C02  C074  F060         	movff	itos@Out,___lwdiv@dividend
 25398  013C06  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 25399  013C0A  0E00               	movlw	0
 25400  013C0C  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 25401  013C0E  0E0A               	movlw	10
 25402  013C10  6F62               	movwf	___lwdiv@divisor& (0+255),b
 25403  013C12  ECA5  F0A7         	call	___lwdiv	;wreg free
 25404  013C16  C060  F074         	movff	?___lwdiv,itos@Out
 25405  013C1A  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 25406                           
 25407                           ;Types.c: 385: Length ++;
 25408  013C1E  0100               	movlb	0	; () banked
 25409  013C20  4B72               	infsnz	itos@Length& (0+255),f,b
 25410  013C22  2B73               	incf	(itos@Length+1)& (0+255),f,b
 25411                           
 25412                           ; BSR set to: 0
 25413                           ;Types.c: 386: Data++;
 25414  013C24  4B70               	infsnz	itos@Data& (0+255),f,b
 25415  013C26  2B71               	incf	(itos@Data+1)& (0+255),f,b
 25416  013C28                     l929:
 25417                           
 25418                           ; BSR set to: 0
 25419                           
 25420                           ; BSR set to: 0
 25421  013C28  5174               	movf	itos@Out& (0+255),w,b
 25422  013C2A  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 25423  013C2C  B4D8               	btfsc	status,2,c
 25424  013C2E  D006               	goto	u10210
 25425                           
 25426                           ; BSR set to: 0
 25427  013C30  5173               	movf	(itos@Length+1)& (0+255),w,b
 25428  013C32  E104               	bnz	l13269
 25429  013C34  0E06               	movlw	6
 25430  013C36  5D72               	subwf	itos@Length& (0+255),w,b
 25431  013C38  A0D8               	btfss	status,0,c
 25432  013C3A  D7D1               	goto	l930
 25433  013C3C                     u10210:
 25434  013C3C                     l13269:
 25435                           
 25436                           ; BSR set to: 0
 25437                           ;Types.c: 387: }
 25438                           ;Types.c: 388: reverse(destination, Length);
 25439  013C3C  C06E  F060         	movff	itos@destination,reverse@input
 25440  013C40  C06F  F061         	movff	itos@destination+1,reverse@input+1
 25441  013C44  C072  F062         	movff	itos@Length,reverse@length
 25442  013C48  C073  F063         	movff	itos@Length+1,reverse@length+1
 25443  013C4C  EC7B  F0A7         	call	_reverse	;wreg free
 25444  013C50                     l928:
 25445                           
 25446                           ;Types.c: 389: }
 25447                           ;Types.c: 390: destination[Length] = '\0';
 25448  013C50  0100               	movlb	0	; () banked
 25449  013C52  5172               	movf	itos@Length& (0+255),w,b
 25450  013C54  256E               	addwf	itos@destination& (0+255),w,b
 25451  013C56  6ED9               	movwf	fsr2l,c
 25452  013C58  5173               	movf	(itos@Length+1)& (0+255),w,b
 25453  013C5A  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 25454  013C5C  6EDA               	movwf	fsr2h,c
 25455  013C5E  0E00               	movlw	0
 25456  013C60  6EDF               	movwf	indf2,c
 25457                           
 25458                           ; BSR set to: 0
 25459  013C62  0012               	return		;funcret
 25460  013C64                     __end_of_itos:
 25461                           	opt stack 0
 25462                           tosu	equ	0xFFF
 25463                           tosh	equ	0xFFE
 25464                           tosl	equ	0xFFD
 25465                           pclath	equ	0xFFA
 25466                           tblptru	equ	0xFF8
 25467                           tblptrh	equ	0xFF7
 25468                           tblptrl	equ	0xFF6
 25469                           tablat	equ	0xFF5
 25470                           prodh	equ	0xFF4
 25471                           prodl	equ	0xFF3
 25472                           intcon	equ	0xFF2
 25473                           indf0	equ	0xFEF
 25474                           postinc0	equ	0xFEE
 25475                           fsr0h	equ	0xFEA
 25476                           fsr0l	equ	0xFE9
 25477                           wreg	equ	0xFE8
 25478                           indf1	equ	0xFE7
 25479                           postdec1	equ	0xFE5
 25480                           fsr1h	equ	0xFE2
 25481                           fsr1l	equ	0xFE1
 25482                           indf2	equ	0xFDF
 25483                           postinc2	equ	0xFDE
 25484                           postdec2	equ	0xFDD
 25485                           plusw2	equ	0xFDB
 25486                           fsr2h	equ	0xFDA
 25487                           fsr2l	equ	0xFD9
 25488                           status	equ	0xFD8
 25489                           
 25490 ;; *************** function _reverse *****************
 25491 ;; Defined at:
 25492 ;;		line 357 in file "Library/Types.c"
 25493 ;; Parameters:    Size  Location     Type
 25494 ;;  input           2    0[BANK0 ] PTR unsigned char 
 25495 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 25496 ;;  length          2    2[BANK0 ] unsigned short 
 25497 ;; Auto vars:     Size  Location     Type
 25498 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 25499 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 25500 ;;  tempVar         1    4[BANK0 ] unsigned char 
 25501 ;; Return value:  Size  Location     Type
 25502 ;;                  1    wreg      void 
 25503 ;; Registers used:
 25504 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 25505 ;; Tracked objects:
 25506 ;;		On entry : 0/0
 25507 ;;		On exit  : 0/0
 25508 ;;		Unchanged: 0/0
 25509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25510 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25511 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25513 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25514 ;;Total ram usage:        7 bytes
 25515 ;; Hardware stack levels used:    1
 25516 ;; Hardware stack levels required when called:    7
 25517 ;; This function calls:
 25518 ;;		Nothing
 25519 ;; This function is called by:
 25520 ;;		_itos
 25521 ;; This function uses a non-reentrant model
 25522 ;;
 25523                           
 25524                           	psect	text131
 25525  014EF6                     __ptext131:
 25526                           	opt stack 0
 25527  014EF6                     _reverse:
 25528                           	opt stack 21
 25529                           
 25530                           ;Types.c: 359: char tempVar,
 25531                           ;Types.c: 360: *iterator = input + length;
 25532                           
 25533                           ; BSR set to: 0
 25534                           ;incstack = 0
 25535  014EF6  0100               	movlb	0	; () banked
 25536  014EF8  5162               	movf	reverse@length& (0+255),w,b
 25537  014EFA  2560               	addwf	reverse@input& (0+255),w,b
 25538  014EFC  6F65               	movwf	reverse@iterator& (0+255),b
 25539  014EFE  5163               	movf	(reverse@length+1)& (0+255),w,b
 25540  014F00  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 25541  014F02  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 25542                           
 25543                           ;Types.c: 362: while ( --iterator > input )
 25544  014F04  D018               	goto	l921
 25545  014F06                     
 25546                           ; BSR set to: 0
 25547                           ;Types.c: 363: {
 25548                           ;Types.c: 364: tempVar = *input;
 25549                           
 25550                           ; BSR set to: 0
 25551  014F06  C060  FFD9         	movff	reverse@input,fsr2l
 25552  014F0A  C061  FFDA         	movff	reverse@input+1,fsr2h
 25553  014F0E  50DF               	movf	indf2,w,c
 25554  014F10  6F64               	movwf	reverse@tempVar& (0+255),b
 25555                           
 25556                           ; BSR set to: 0
 25557                           ;Types.c: 365: *input++=*iterator;
 25558  014F12  C065  FFD9         	movff	reverse@iterator,fsr2l
 25559  014F16  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 25560  014F1A  C060  FFE1         	movff	reverse@input,fsr1l
 25561  014F1E  C061  FFE2         	movff	reverse@input+1,fsr1h
 25562  014F22  CFDF FFE7          	movff	indf2,indf1
 25563                           
 25564                           ; BSR set to: 0
 25565  014F26  4B60               	infsnz	reverse@input& (0+255),f,b
 25566  014F28  2B61               	incf	(reverse@input+1)& (0+255),f,b
 25567                           
 25568                           ; BSR set to: 0
 25569                           ;Types.c: 366: *iterator=tempVar;
 25570  014F2A  C065  FFD9         	movff	reverse@iterator,fsr2l
 25571  014F2E  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 25572  014F32  C064  FFDF         	movff	reverse@tempVar,indf2
 25573  014F36                     l921:
 25574                           
 25575                           ; BSR set to: 0
 25576                           
 25577                           ; BSR set to: 0
 25578  014F36  0765               	decf	reverse@iterator& (0+255),f,b
 25579  014F38  A0D8               	btfss	status,0,c
 25580  014F3A  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 25581  014F3C  5165               	movf	reverse@iterator& (0+255),w,b
 25582  014F3E  5D60               	subwf	reverse@input& (0+255),w,b
 25583  014F40  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 25584  014F42  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 25585  014F44  B0D8               	btfsc	status,0,c
 25586  014F46  0012               	return	
 25587  014F48  D7DE               	goto	l922
 25588  014F4A                     __end_of_reverse:
 25589                           	opt stack 0
 25590                           tosu	equ	0xFFF
 25591                           tosh	equ	0xFFE
 25592                           tosl	equ	0xFFD
 25593                           pclath	equ	0xFFA
 25594                           tblptru	equ	0xFF8
 25595                           tblptrh	equ	0xFF7
 25596                           tblptrl	equ	0xFF6
 25597                           tablat	equ	0xFF5
 25598                           prodh	equ	0xFF4
 25599                           prodl	equ	0xFF3
 25600                           intcon	equ	0xFF2
 25601                           indf0	equ	0xFEF
 25602                           postinc0	equ	0xFEE
 25603                           fsr0h	equ	0xFEA
 25604                           fsr0l	equ	0xFE9
 25605                           wreg	equ	0xFE8
 25606                           indf1	equ	0xFE7
 25607                           postdec1	equ	0xFE5
 25608                           fsr1h	equ	0xFE2
 25609                           fsr1l	equ	0xFE1
 25610                           indf2	equ	0xFDF
 25611                           postinc2	equ	0xFDE
 25612                           postdec2	equ	0xFDD
 25613                           plusw2	equ	0xFDB
 25614                           fsr2h	equ	0xFDA
 25615                           fsr2l	equ	0xFD9
 25616                           status	equ	0xFD8
 25617                           
 25618 ;; *************** function ___lwmod *****************
 25619 ;; Defined at:
 25620 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 25621 ;; Parameters:    Size  Location     Type
 25622 ;;  dividend        2    7[BANK0 ] unsigned int 
 25623 ;;  divisor         2    9[BANK0 ] unsigned int 
 25624 ;; Auto vars:     Size  Location     Type
 25625 ;;  counter         1   11[BANK0 ] unsigned char 
 25626 ;; Return value:  Size  Location     Type
 25627 ;;                  2    7[BANK0 ] unsigned int 
 25628 ;; Registers used:
 25629 ;;		wreg, status,2, status,0
 25630 ;; Tracked objects:
 25631 ;;		On entry : 0/0
 25632 ;;		On exit  : 0/0
 25633 ;;		Unchanged: 0/0
 25634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25635 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25638 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25639 ;;Total ram usage:        5 bytes
 25640 ;; Hardware stack levels used:    1
 25641 ;; Hardware stack levels required when called:    7
 25642 ;; This function calls:
 25643 ;;		Nothing
 25644 ;; This function is called by:
 25645 ;;		_itos
 25646 ;;		_printf
 25647 ;; This function uses a non-reentrant model
 25648 ;;
 25649                           
 25650                           	psect	text132
 25651  0152DC                     __ptext132:
 25652                           	opt stack 0
 25653  0152DC                     ___lwmod:
 25654                           	opt stack 22
 25655                           
 25656                           ; BSR set to: 0
 25657                           ;incstack = 0
 25658  0152DC  0100               	movlb	0	; () banked
 25659  0152DE  5169               	movf	___lwmod@divisor& (0+255),w,b
 25660  0152E0  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 25661  0152E2  B4D8               	btfsc	status,2,c
 25662  0152E4  D018               	goto	l2873
 25663                           
 25664                           ; BSR set to: 0
 25665  0152E6  0E01               	movlw	1
 25666  0152E8  6F6B               	movwf	___lwmod@counter& (0+255),b
 25667  0152EA  D004               	goto	l2868
 25668  0152EC                     
 25669                           ; BSR set to: 0
 25670                           
 25671                           ; BSR set to: 0
 25672  0152EC  90D8               	bcf	status,0,c
 25673  0152EE  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 25674  0152F0  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 25675  0152F2  2B6B               	incf	___lwmod@counter& (0+255),f,b
 25676  0152F4                     l2868:
 25677                           
 25678                           ; BSR set to: 0
 25679                           
 25680                           ; BSR set to: 0
 25681  0152F4  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 25682  0152F6  D7FA               	goto	l2869
 25683  0152F8                     u10140:
 25684                           
 25685                           ; BSR set to: 0
 25686                           
 25687                           ; BSR set to: 0
 25688                           
 25689                           ; BSR set to: 0
 25690  0152F8  5169               	movf	___lwmod@divisor& (0+255),w,b
 25691  0152FA  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 25692  0152FC  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 25693  0152FE  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 25694  015300  A0D8               	btfss	status,0,c
 25695  015302  D004               	goto	l2872
 25696                           
 25697                           ; BSR set to: 0
 25698  015304  5169               	movf	___lwmod@divisor& (0+255),w,b
 25699  015306  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 25700  015308  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 25701  01530A  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 25702  01530C                     l2872:
 25703                           
 25704                           ; BSR set to: 0
 25705                           
 25706                           ; BSR set to: 0
 25707  01530C  90D8               	bcf	status,0,c
 25708  01530E  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 25709  015310  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 25710                           
 25711                           ; BSR set to: 0
 25712  015312  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 25713  015314  D7F1               	goto	u10140
 25714  015316                     l2873:
 25715                           
 25716                           ; BSR set to: 0
 25717                           
 25718                           ; BSR set to: 0
 25719  015316  C067  F067         	movff	___lwmod@dividend,?___lwmod
 25720  01531A  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 25721                           
 25722                           ; BSR set to: 0
 25723  01531E  0012               	return		;funcret
 25724  015320                     __end_of___lwmod:
 25725                           	opt stack 0
 25726                           tosu	equ	0xFFF
 25727                           tosh	equ	0xFFE
 25728                           tosl	equ	0xFFD
 25729                           pclath	equ	0xFFA
 25730                           tblptru	equ	0xFF8
 25731                           tblptrh	equ	0xFF7
 25732                           tblptrl	equ	0xFF6
 25733                           tablat	equ	0xFF5
 25734                           prodh	equ	0xFF4
 25735                           prodl	equ	0xFF3
 25736                           intcon	equ	0xFF2
 25737                           indf0	equ	0xFEF
 25738                           postinc0	equ	0xFEE
 25739                           fsr0h	equ	0xFEA
 25740                           fsr0l	equ	0xFE9
 25741                           wreg	equ	0xFE8
 25742                           indf1	equ	0xFE7
 25743                           postdec1	equ	0xFE5
 25744                           fsr1h	equ	0xFE2
 25745                           fsr1l	equ	0xFE1
 25746                           indf2	equ	0xFDF
 25747                           postinc2	equ	0xFDE
 25748                           postdec2	equ	0xFDD
 25749                           plusw2	equ	0xFDB
 25750                           fsr2h	equ	0xFDA
 25751                           fsr2l	equ	0xFD9
 25752                           status	equ	0xFD8
 25753                           
 25754 ;; *************** function ___lwdiv *****************
 25755 ;; Defined at:
 25756 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 25757 ;; Parameters:    Size  Location     Type
 25758 ;;  dividend        2    0[BANK0 ] unsigned int 
 25759 ;;  divisor         2    2[BANK0 ] unsigned int 
 25760 ;; Auto vars:     Size  Location     Type
 25761 ;;  quotient        2    5[BANK0 ] unsigned int 
 25762 ;;  counter         1    4[BANK0 ] unsigned char 
 25763 ;; Return value:  Size  Location     Type
 25764 ;;                  2    0[BANK0 ] unsigned int 
 25765 ;; Registers used:
 25766 ;;		wreg, status,2, status,0
 25767 ;; Tracked objects:
 25768 ;;		On entry : 0/0
 25769 ;;		On exit  : 0/0
 25770 ;;		Unchanged: 0/0
 25771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25772 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25773 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25775 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25776 ;;Total ram usage:        7 bytes
 25777 ;; Hardware stack levels used:    1
 25778 ;; Hardware stack levels required when called:    7
 25779 ;; This function calls:
 25780 ;;		Nothing
 25781 ;; This function is called by:
 25782 ;;		_itos
 25783 ;;		_printf
 25784 ;; This function uses a non-reentrant model
 25785 ;;
 25786                           
 25787                           	psect	text133
 25788  014F4A                     __ptext133:
 25789                           	opt stack 0
 25790  014F4A                     ___lwdiv:
 25791                           	opt stack 22
 25792                           
 25793                           ; BSR set to: 0
 25794                           ;incstack = 0
 25795  014F4A  0E00               	movlw	0
 25796  014F4C  0100               	movlb	0	; () banked
 25797  014F4E  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 25798  014F50  0E00               	movlw	0
 25799  014F52  6F65               	movwf	___lwdiv@quotient& (0+255),b
 25800                           
 25801                           ; BSR set to: 0
 25802  014F54  5162               	movf	___lwdiv@divisor& (0+255),w,b
 25803  014F56  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 25804  014F58  B4D8               	btfsc	status,2,c
 25805  014F5A  D01C               	goto	l2863
 25806                           
 25807                           ; BSR set to: 0
 25808  014F5C  0E01               	movlw	1
 25809  014F5E  6F64               	movwf	___lwdiv@counter& (0+255),b
 25810  014F60  D004               	goto	l2858
 25811  014F62                     
 25812                           ; BSR set to: 0
 25813                           
 25814                           ; BSR set to: 0
 25815  014F62  90D8               	bcf	status,0,c
 25816  014F64  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 25817  014F66  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 25818  014F68  2B64               	incf	___lwdiv@counter& (0+255),f,b
 25819  014F6A                     l2858:
 25820                           
 25821                           ; BSR set to: 0
 25822                           
 25823                           ; BSR set to: 0
 25824  014F6A  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 25825  014F6C  D7FA               	goto	l2859
 25826  014F6E                     u10110:
 25827                           
 25828                           ; BSR set to: 0
 25829                           
 25830                           ; BSR set to: 0
 25831                           
 25832                           ; BSR set to: 0
 25833  014F6E  90D8               	bcf	status,0,c
 25834  014F70  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 25835  014F72  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 25836                           
 25837                           ; BSR set to: 0
 25838  014F74  5162               	movf	___lwdiv@divisor& (0+255),w,b
 25839  014F76  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 25840  014F78  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 25841  014F7A  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 25842  014F7C  A0D8               	btfss	status,0,c
 25843  014F7E  D005               	goto	l2862
 25844                           
 25845                           ; BSR set to: 0
 25846  014F80  5162               	movf	___lwdiv@divisor& (0+255),w,b
 25847  014F82  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 25848  014F84  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 25849  014F86  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 25850                           
 25851                           ; BSR set to: 0
 25852  014F88  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 25853  014F8A                     l2862:
 25854                           
 25855                           ; BSR set to: 0
 25856                           
 25857                           ; BSR set to: 0
 25858  014F8A  90D8               	bcf	status,0,c
 25859  014F8C  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 25860  014F8E  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 25861                           
 25862                           ; BSR set to: 0
 25863  014F90  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 25864  014F92  D7ED               	goto	u10110
 25865  014F94                     l2863:
 25866                           
 25867                           ; BSR set to: 0
 25868                           
 25869                           ; BSR set to: 0
 25870  014F94  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 25871  014F98  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 25872                           
 25873                           ; BSR set to: 0
 25874  014F9C  0012               	return		;funcret
 25875  014F9E                     __end_of___lwdiv:
 25876                           	opt stack 0
 25877                           tosu	equ	0xFFF
 25878                           tosh	equ	0xFFE
 25879                           tosl	equ	0xFFD
 25880                           pclath	equ	0xFFA
 25881                           tblptru	equ	0xFF8
 25882                           tblptrh	equ	0xFF7
 25883                           tblptrl	equ	0xFF6
 25884                           tablat	equ	0xFF5
 25885                           prodh	equ	0xFF4
 25886                           prodl	equ	0xFF3
 25887                           intcon	equ	0xFF2
 25888                           indf0	equ	0xFEF
 25889                           postinc0	equ	0xFEE
 25890                           fsr0h	equ	0xFEA
 25891                           fsr0l	equ	0xFE9
 25892                           wreg	equ	0xFE8
 25893                           indf1	equ	0xFE7
 25894                           postdec1	equ	0xFE5
 25895                           fsr1h	equ	0xFE2
 25896                           fsr1l	equ	0xFE1
 25897                           indf2	equ	0xFDF
 25898                           postinc2	equ	0xFDE
 25899                           postdec2	equ	0xFDD
 25900                           plusw2	equ	0xFDB
 25901                           fsr2h	equ	0xFDA
 25902                           fsr2l	equ	0xFD9
 25903                           status	equ	0xFD8
 25904                           
 25905 ;; *************** function _HMI_SetSegments *****************
 25906 ;; Defined at:
 25907 ;;		line 226 in file "HMI.c"
 25908 ;; Parameters:    Size  Location     Type
 25909 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 25910 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 25911 ;; Auto vars:     Size  Location     Type
 25912 ;;  in              2    4[BANK0 ] unsigned short 
 25913 ;; Return value:  Size  Location     Type
 25914 ;;                  1    wreg      void 
 25915 ;; Registers used:
 25916 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 25917 ;; Tracked objects:
 25918 ;;		On entry : 0/0
 25919 ;;		On exit  : 0/0
 25920 ;;		Unchanged: 0/0
 25921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25922 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25923 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25925 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25926 ;;Total ram usage:        5 bytes
 25927 ;; Hardware stack levels used:    1
 25928 ;; Hardware stack levels required when called:    8
 25929 ;; This function calls:
 25930 ;;		_ToSegment
 25931 ;; This function is called by:
 25932 ;;		_HMI_SetNumber
 25933 ;; This function uses a non-reentrant model
 25934 ;;
 25935                           
 25936                           	psect	text134
 25937  014056                     __ptext134:
 25938                           	opt stack 0
 25939  014056                     _HMI_SetSegments:
 25940                           	opt stack 21
 25941                           
 25942                           ;HMI.c: 228: UINT16 in=0;
 25943                           
 25944                           ; BSR set to: 0
 25945                           ;incstack = 0
 25946  014056  0E00               	movlw	0
 25947  014058  0100               	movlb	0	; () banked
 25948  01405A  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 25949  01405C  0E00               	movlw	0
 25950  01405E  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 25951                           
 25952                           ;HMI.c: 229: while(*pString)
 25953  014060  D02E               	goto	l1202
 25954  014062                     
 25955                           ; BSR set to: 0
 25956                           ;HMI.c: 230: {
 25957                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 25958                           
 25959                           ; BSR set to: 0
 25960  014062  0E4C               	movlw	low _HMIBoard
 25961  014064  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 25962  014066  6ED9               	movwf	fsr2l,c
 25963  014068  0E01               	movlw	high _HMIBoard
 25964  01406A  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 25965  01406C  6EDA               	movwf	fsr2h,c
 25966  01406E  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 25967  014072  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 25968  014076  50E7               	movf	indf1,w,c
 25969  014078  EC9F  F08A         	call	_ToSegment
 25970  01407C  6EDF               	movwf	indf2,c
 25971                           
 25972                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 25973  01407E  0E4C               	movlw	low _HMIBoard
 25974  014080  0100               	movlb	0	; () banked
 25975  014082  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 25976  014084  6ED9               	movwf	fsr2l,c
 25977  014086  0E01               	movlw	high _HMIBoard
 25978  014088  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 25979  01408A  6EDA               	movwf	fsr2h,c
 25980  01408C  0E80               	movlw	128
 25981  01408E  18DE               	xorwf	postinc2,w,c
 25982  014090  A4D8               	btfss	status,2,c
 25983  014092  D00B               	goto	l1201
 25984                           
 25985                           ; BSR set to: 0
 25986                           ;HMI.c: 234: {
 25987                           ;HMI.c: 235: in--;
 25988  014094  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 25989  014096  A0D8               	btfss	status,0,c
 25990  014098  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 25991                           
 25992                           ; BSR set to: 0
 25993                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 25994  01409A  0E4C               	movlw	low _HMIBoard
 25995  01409C  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 25996  01409E  6ED9               	movwf	fsr2l,c
 25997  0140A0  0E01               	movlw	high _HMIBoard
 25998  0140A2  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 25999  0140A4  6EDA               	movwf	fsr2h,c
 26000  0140A6  0E00               	movlw	0
 26001  0140A8  8EDB               	bsf	plusw2,7,c
 26002  0140AA                     l1201:
 26003                           
 26004                           ; BSR set to: 0
 26005                           ;HMI.c: 237: }
 26006                           ;HMI.c: 239: pString++;
 26007                           
 26008                           ; BSR set to: 0
 26009  0140AA  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 26010  0140AC  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 26011                           
 26012                           ; BSR set to: 0
 26013                           ;HMI.c: 240: in++;
 26014  0140AE  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 26015  0140B0  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 26016                           
 26017                           ; BSR set to: 0
 26018                           ;HMI.c: 241: if (in>=6)
 26019  0140B2  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 26020  0140B4  E116               	bnz	l13345
 26021  0140B6  0E06               	movlw	6
 26022  0140B8  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 26023  0140BA  B0D8               	btfsc	status,0,c
 26024  0140BC  D012               	goto	l1204
 26025  0140BE                     l1202:
 26026                           
 26027                           ; BSR set to: 0
 26028                           
 26029                           ; BSR set to: 0
 26030                           
 26031                           ; BSR set to: 0
 26032  0140BE  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 26033  0140C2  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 26034  0140C6  50DF               	movf	indf2,w,c
 26035  0140C8  B4D8               	btfsc	status,2,c
 26036  0140CA  D00B               	goto	l1204
 26037  0140CC  D7CA               	goto	l1200
 26038  0140CE                     
 26039                           ; BSR set to: 0
 26040                           ;HMI.c: 245: {
 26041                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 26042                           
 26043                           ; BSR set to: 0
 26044  0140CE  0E4C               	movlw	low _HMIBoard
 26045  0140D0  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 26046  0140D2  6ED9               	movwf	fsr2l,c
 26047  0140D4  0E01               	movlw	high _HMIBoard
 26048  0140D6  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 26049  0140D8  6EDA               	movwf	fsr2h,c
 26050  0140DA  0E00               	movlw	0
 26051  0140DC  6EDF               	movwf	indf2,c
 26052                           
 26053                           ; BSR set to: 0
 26054                           ;HMI.c: 247: in++;
 26055  0140DE  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 26056  0140E0  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 26057  0140E2                     l1204:
 26058  0140E2                     l13345:
 26059                           
 26060                           ; BSR set to: 0
 26061  0140E2  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 26062  0140E4  E105               	bnz	l1207
 26063  0140E6  0E06               	movlw	6
 26064  0140E8  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 26065  0140EA  B0D8               	btfsc	status,0,c
 26066  0140EC  0012               	return	
 26067  0140EE  D7EF               	goto	l1205
 26068  0140F0                     l1207:
 26069                           
 26070                           ; BSR set to: 0
 26071  0140F0  0012               	return		;funcret
 26072  0140F2                     __end_of_HMI_SetSegments:
 26073                           	opt stack 0
 26074                           tosu	equ	0xFFF
 26075                           tosh	equ	0xFFE
 26076                           tosl	equ	0xFFD
 26077                           pclath	equ	0xFFA
 26078                           tblptru	equ	0xFF8
 26079                           tblptrh	equ	0xFF7
 26080                           tblptrl	equ	0xFF6
 26081                           tablat	equ	0xFF5
 26082                           prodh	equ	0xFF4
 26083                           prodl	equ	0xFF3
 26084                           intcon	equ	0xFF2
 26085                           indf0	equ	0xFEF
 26086                           postinc0	equ	0xFEE
 26087                           fsr0h	equ	0xFEA
 26088                           fsr0l	equ	0xFE9
 26089                           wreg	equ	0xFE8
 26090                           indf1	equ	0xFE7
 26091                           postdec1	equ	0xFE5
 26092                           fsr1h	equ	0xFE2
 26093                           fsr1l	equ	0xFE1
 26094                           indf2	equ	0xFDF
 26095                           postinc2	equ	0xFDE
 26096                           postdec2	equ	0xFDD
 26097                           plusw2	equ	0xFDB
 26098                           fsr2h	equ	0xFDA
 26099                           fsr2l	equ	0xFD9
 26100                           status	equ	0xFD8
 26101                           
 26102 ;; *************** function _ToSegment *****************
 26103 ;; Defined at:
 26104 ;;		line 284 in file "Library/Types.c"
 26105 ;; Parameters:    Size  Location     Type
 26106 ;;  pCHR            1    wreg     unsigned char 
 26107 ;; Auto vars:     Size  Location     Type
 26108 ;;  pCHR            1    0[BANK0 ] unsigned char 
 26109 ;; Return value:  Size  Location     Type
 26110 ;;                  1    wreg      unsigned char 
 26111 ;; Registers used:
 26112 ;;		wreg, status,2, status,0
 26113 ;; Tracked objects:
 26114 ;;		On entry : 0/0
 26115 ;;		On exit  : 0/0
 26116 ;;		Unchanged: 0/0
 26117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26119 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26121 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26122 ;;Total ram usage:        1 bytes
 26123 ;; Hardware stack levels used:    1
 26124 ;; Hardware stack levels required when called:    7
 26125 ;; This function calls:
 26126 ;;		Nothing
 26127 ;; This function is called by:
 26128 ;;		_HMI_SetSegments
 26129 ;; This function uses a non-reentrant model
 26130 ;;
 26131                           
 26132                           	psect	text135
 26133  01153E                     __ptext135:
 26134                           	opt stack 0
 26135  01153E                     _ToSegment:
 26136                           	opt stack 21
 26137                           
 26138                           ; BSR set to: 0
 26139                           ;incstack = 0
 26140                           ;ToSegment@pCHR stored from wreg
 26141  01153E  0100               	movlb	0	; () banked
 26142  011540  6F60               	movwf	ToSegment@pCHR& (0+255),b
 26143                           
 26144                           ;Types.c: 286: switch(pCHR)
 26145  011542  D07E               	goto	l853
 26146  011544  0E3F               	movlw	63
 26147  011546  0012               	return	
 26148  011548  0E06               	movlw	6
 26149  01154A  0012               	return	
 26150  01154C  0E5B               	movlw	91
 26151  01154E  0012               	return	
 26152  011550  0E4F               	movlw	79
 26153  011552  0012               	return	
 26154  011554  0E66               	movlw	102
 26155  011556  0012               	return	
 26156  011558  0E6D               	movlw	109
 26157  01155A  0012               	return	
 26158  01155C  0E7D               	movlw	125
 26159  01155E  0012               	return	
 26160  011560  0E07               	movlw	7
 26161  011562  0012               	return	
 26162  011564  0E7F               	movlw	127
 26163  011566  0012               	return	
 26164  011568  0E6F               	movlw	111
 26165  01156A  0012               	return	
 26166  01156C  0E5F               	movlw	95
 26167  01156E  0012               	return	
 26168  011570  0E7C               	movlw	124
 26169  011572  0012               	return	
 26170  011574  0E58               	movlw	88
 26171  011576  0012               	return	
 26172  011578  0E5E               	movlw	94
 26173  01157A  0012               	return	
 26174  01157C  0E7B               	movlw	123
 26175  01157E  0012               	return	
 26176  011580  0E71               	movlw	113
 26177  011582  0012               	return	
 26178  011584  0E6F               	movlw	111
 26179  011586  0012               	return	
 26180  011588  0E74               	movlw	116
 26181  01158A  0012               	return	
 26182  01158C  0E04               	movlw	4
 26183  01158E  0012               	return	
 26184  011590  0E0E               	movlw	14
 26185  011592  0012               	return	
 26186  011594  0E7A               	movlw	122
 26187  011596  0012               	return	
 26188  011598  0E06               	movlw	6
 26189  01159A  0012               	return	
 26190  01159C  0E14               	movlw	20
 26191  01159E  0012               	return	
 26192  0115A0  0E54               	movlw	84
 26193  0115A2  0012               	return	
 26194  0115A4  0E5C               	movlw	92
 26195  0115A6  0012               	return	
 26196  0115A8  0E73               	movlw	115
 26197  0115AA  0012               	return	
 26198  0115AC  0E67               	movlw	103
 26199  0115AE  0012               	return	
 26200  0115B0  0E50               	movlw	80
 26201  0115B2  0012               	return	
 26202  0115B4  0E6D               	movlw	109
 26203  0115B6  0012               	return	
 26204  0115B8  0E78               	movlw	120
 26205  0115BA  0012               	return	
 26206  0115BC  0E1C               	movlw	28
 26207  0115BE  0012               	return	
 26208  0115C0  0E62               	movlw	98
 26209  0115C2  0012               	return	
 26210  0115C4  0E2A               	movlw	42
 26211  0115C6  0012               	return	
 26212  0115C8  0E64               	movlw	100
 26213  0115CA  0012               	return	
 26214  0115CC  0E6E               	movlw	110
 26215  0115CE  0012               	return	
 26216  0115D0  0E5B               	movlw	91
 26217  0115D2  0012               	return	
 26218  0115D4  0E77               	movlw	119
 26219  0115D6  0012               	return	
 26220  0115D8  0E7F               	movlw	127
 26221  0115DA  0012               	return	
 26222  0115DC  0E39               	movlw	57
 26223  0115DE  0012               	return	
 26224  0115E0  0E3F               	movlw	63
 26225  0115E2  0012               	return	
 26226  0115E4  0E79               	movlw	121
 26227  0115E6  0012               	return	
 26228  0115E8  0E71               	movlw	113
 26229  0115EA  0012               	return	
 26230  0115EC  0E3D               	movlw	61
 26231  0115EE  0012               	return	
 26232  0115F0  0E76               	movlw	118
 26233  0115F2  0012               	return	
 26234  0115F4  0E06               	movlw	6
 26235  0115F6  0012               	return	
 26236  0115F8  0E1E               	movlw	30
 26237  0115FA  0012               	return	
 26238  0115FC  0E57               	movlw	87
 26239  0115FE  0012               	return	
 26240  011600  0E38               	movlw	56
 26241  011602  0012               	return	
 26242  011604  0E76               	movlw	118
 26243  011606  0012               	return	
 26244  011608  0E76               	movlw	118
 26245  01160A  0012               	return	
 26246  01160C  0E3F               	movlw	63
 26247  01160E  0012               	return	
 26248  011610  0E73               	movlw	115
 26249  011612  0012               	return	
 26250  011614  0E3F               	movlw	63
 26251  011616  0012               	return	
 26252  011618  0E77               	movlw	119
 26253  01161A  0012               	return	
 26254  01161C  0E6D               	movlw	109
 26255  01161E  0012               	return	
 26256  011620  0E31               	movlw	49
 26257  011622  0012               	return	
 26258  011624  0E3E               	movlw	62
 26259  011626  0012               	return	
 26260  011628  0E3E               	movlw	62
 26261  01162A  0012               	return	
 26262  01162C  0E7E               	movlw	126
 26263  01162E  0012               	return	
 26264  011630  0E76               	movlw	118
 26265  011632  0012               	return	
 26266  011634  0E66               	movlw	102
 26267  011636  0012               	return	
 26268  011638  0E5B               	movlw	91
 26269  01163A  0012               	return	
 26270  01163C  0E80               	movlw	128
 26271  01163E  0012               	return	
 26272  011640                     l853:
 26273  011640  0100               	movlb	0	; () banked
 26274  011642  5160               	movf	ToSegment@pCHR& (0+255),w,b
 26275                           
 26276                           ; Switch size 1, requested type "space"
 26277                           ; Number of cases is 63, Range of values is 46 to 122
 26278                           ; switch strategies available:
 26279                           ; Name         Instructions Cycles
 26280                           ; simple_byte          190    96 (average)
 26281                           ;	Chosen strategy is simple_byte
 26282  011644  0A2E               	xorlw	46	; case 46
 26283  011646  B4D8               	btfsc	status,2,c
 26284  011648  D7F9               	goto	l917
 26285  01164A  0A1E               	xorlw	30	; case 48
 26286  01164C  B4D8               	btfsc	status,2,c
 26287  01164E  D77A               	goto	l854
 26288  011650  0A01               	xorlw	1	; case 49
 26289  011652  B4D8               	btfsc	status,2,c
 26290  011654  D779               	goto	l856
 26291  011656  0A03               	xorlw	3	; case 50
 26292  011658  B4D8               	btfsc	status,2,c
 26293  01165A  D778               	goto	l857
 26294  01165C  0A01               	xorlw	1	; case 51
 26295  01165E  B4D8               	btfsc	status,2,c
 26296  011660  D777               	goto	l858
 26297  011662  0A07               	xorlw	7	; case 52
 26298  011664  B4D8               	btfsc	status,2,c
 26299  011666  D776               	goto	l859
 26300  011668  0A01               	xorlw	1	; case 53
 26301  01166A  B4D8               	btfsc	status,2,c
 26302  01166C  D775               	goto	l860
 26303  01166E  0A03               	xorlw	3	; case 54
 26304  011670  B4D8               	btfsc	status,2,c
 26305  011672  D774               	goto	l861
 26306  011674  0A01               	xorlw	1	; case 55
 26307  011676  B4D8               	btfsc	status,2,c
 26308  011678  D773               	goto	l862
 26309  01167A  0A0F               	xorlw	15	; case 56
 26310  01167C  B4D8               	btfsc	status,2,c
 26311  01167E  D772               	goto	l863
 26312  011680  0A01               	xorlw	1	; case 57
 26313  011682  B4D8               	btfsc	status,2,c
 26314  011684  D771               	goto	l864
 26315  011686  0A78               	xorlw	120	; case 65
 26316  011688  B4D8               	btfsc	status,2,c
 26317  01168A  D7A4               	goto	l891
 26318  01168C  0A03               	xorlw	3	; case 66
 26319  01168E  B4D8               	btfsc	status,2,c
 26320  011690  D7A3               	goto	l892
 26321  011692  0A01               	xorlw	1	; case 67
 26322  011694  B4D8               	btfsc	status,2,c
 26323  011696  D7A2               	goto	l893
 26324  011698  0A07               	xorlw	7	; case 68
 26325  01169A  B4D8               	btfsc	status,2,c
 26326  01169C  D7A1               	goto	l894
 26327  01169E  0A01               	xorlw	1	; case 69
 26328  0116A0  B4D8               	btfsc	status,2,c
 26329  0116A2  D7A0               	goto	l895
 26330  0116A4  0A03               	xorlw	3	; case 70
 26331  0116A6  B4D8               	btfsc	status,2,c
 26332  0116A8  D79F               	goto	l896
 26333  0116AA  0A01               	xorlw	1	; case 71
 26334  0116AC  B4D8               	btfsc	status,2,c
 26335  0116AE  D79E               	goto	l897
 26336  0116B0  0A0F               	xorlw	15	; case 72
 26337  0116B2  B4D8               	btfsc	status,2,c
 26338  0116B4  D79D               	goto	l898
 26339  0116B6  0A01               	xorlw	1	; case 73
 26340  0116B8  B4D8               	btfsc	status,2,c
 26341  0116BA  D79C               	goto	l899
 26342  0116BC  0A03               	xorlw	3	; case 74
 26343  0116BE  B4D8               	btfsc	status,2,c
 26344  0116C0  D79B               	goto	l900
 26345  0116C2  0A01               	xorlw	1	; case 75
 26346  0116C4  B4D8               	btfsc	status,2,c
 26347  0116C6  D79A               	goto	l901
 26348  0116C8  0A07               	xorlw	7	; case 76
 26349  0116CA  B4D8               	btfsc	status,2,c
 26350  0116CC  D799               	goto	l902
 26351  0116CE  0A01               	xorlw	1	; case 77
 26352  0116D0  B4D8               	btfsc	status,2,c
 26353  0116D2  D798               	goto	l903
 26354  0116D4  0A03               	xorlw	3	; case 78
 26355  0116D6  B4D8               	btfsc	status,2,c
 26356  0116D8  D797               	goto	l904
 26357  0116DA  0A01               	xorlw	1	; case 79
 26358  0116DC  B4D8               	btfsc	status,2,c
 26359  0116DE  D796               	goto	l905
 26360  0116E0  0A1F               	xorlw	31	; case 80
 26361  0116E2  B4D8               	btfsc	status,2,c
 26362  0116E4  D795               	goto	l906
 26363  0116E6  0A01               	xorlw	1	; case 81
 26364  0116E8  B4D8               	btfsc	status,2,c
 26365  0116EA  D794               	goto	l907
 26366  0116EC  0A03               	xorlw	3	; case 82
 26367  0116EE  B4D8               	btfsc	status,2,c
 26368  0116F0  D793               	goto	l908
 26369  0116F2  0A01               	xorlw	1	; case 83
 26370  0116F4  B4D8               	btfsc	status,2,c
 26371  0116F6  D792               	goto	l909
 26372  0116F8  0A07               	xorlw	7	; case 84
 26373  0116FA  B4D8               	btfsc	status,2,c
 26374  0116FC  D791               	goto	l910
 26375  0116FE  0A01               	xorlw	1	; case 85
 26376  011700  B4D8               	btfsc	status,2,c
 26377  011702  D790               	goto	l911
 26378  011704  0A03               	xorlw	3	; case 86
 26379  011706  B4D8               	btfsc	status,2,c
 26380  011708  D78F               	goto	l912
 26381  01170A  0A01               	xorlw	1	; case 87
 26382  01170C  B4D8               	btfsc	status,2,c
 26383  01170E  D78E               	goto	l913
 26384  011710  0A0F               	xorlw	15	; case 88
 26385  011712  B4D8               	btfsc	status,2,c
 26386  011714  D78D               	goto	l914
 26387  011716  0A01               	xorlw	1	; case 89
 26388  011718  B4D8               	btfsc	status,2,c
 26389  01171A  D78C               	goto	l915
 26390  01171C  0A03               	xorlw	3	; case 90
 26391  01171E  B4D8               	btfsc	status,2,c
 26392  011720  D78B               	goto	l916
 26393  011722  0A3B               	xorlw	59	; case 97
 26394  011724  B4D8               	btfsc	status,2,c
 26395  011726  D722               	goto	l865
 26396  011728  0A03               	xorlw	3	; case 98
 26397  01172A  B4D8               	btfsc	status,2,c
 26398  01172C  D721               	goto	l866
 26399  01172E  0A01               	xorlw	1	; case 99
 26400  011730  B4D8               	btfsc	status,2,c
 26401  011732  D720               	goto	l867
 26402  011734  0A07               	xorlw	7	; case 100
 26403  011736  B4D8               	btfsc	status,2,c
 26404  011738  D71F               	goto	l868
 26405  01173A  0A01               	xorlw	1	; case 101
 26406  01173C  B4D8               	btfsc	status,2,c
 26407  01173E  D71E               	goto	l869
 26408  011740  0A03               	xorlw	3	; case 102
 26409  011742  B4D8               	btfsc	status,2,c
 26410  011744  D71D               	goto	l870
 26411  011746  0A01               	xorlw	1	; case 103
 26412  011748  B4D8               	btfsc	status,2,c
 26413  01174A  D71C               	goto	l871
 26414  01174C  0A0F               	xorlw	15	; case 104
 26415  01174E  B4D8               	btfsc	status,2,c
 26416  011750  D71B               	goto	l872
 26417  011752  0A01               	xorlw	1	; case 105
 26418  011754  B4D8               	btfsc	status,2,c
 26419  011756  D71A               	goto	l873
 26420  011758  0A03               	xorlw	3	; case 106
 26421  01175A  B4D8               	btfsc	status,2,c
 26422  01175C  D719               	goto	l874
 26423  01175E  0A01               	xorlw	1	; case 107
 26424  011760  B4D8               	btfsc	status,2,c
 26425  011762  D718               	goto	l875
 26426  011764  0A07               	xorlw	7	; case 108
 26427  011766  B4D8               	btfsc	status,2,c
 26428  011768  D717               	goto	l876
 26429  01176A  0A01               	xorlw	1	; case 109
 26430  01176C  B4D8               	btfsc	status,2,c
 26431  01176E  D716               	goto	l877
 26432  011770  0A03               	xorlw	3	; case 110
 26433  011772  B4D8               	btfsc	status,2,c
 26434  011774  D715               	goto	l878
 26435  011776  0A01               	xorlw	1	; case 111
 26436  011778  B4D8               	btfsc	status,2,c
 26437  01177A  D714               	goto	l879
 26438  01177C  0A1F               	xorlw	31	; case 112
 26439  01177E  B4D8               	btfsc	status,2,c
 26440  011780  D713               	goto	l880
 26441  011782  0A01               	xorlw	1	; case 113
 26442  011784  B4D8               	btfsc	status,2,c
 26443  011786  D712               	goto	l881
 26444  011788  0A03               	xorlw	3	; case 114
 26445  01178A  B4D8               	btfsc	status,2,c
 26446  01178C  D711               	goto	l882
 26447  01178E  0A01               	xorlw	1	; case 115
 26448  011790  B4D8               	btfsc	status,2,c
 26449  011792  D710               	goto	l883
 26450  011794  0A07               	xorlw	7	; case 116
 26451  011796  B4D8               	btfsc	status,2,c
 26452  011798  D70F               	goto	l884
 26453  01179A  0A01               	xorlw	1	; case 117
 26454  01179C  B4D8               	btfsc	status,2,c
 26455  01179E  D70E               	goto	l885
 26456  0117A0  0A03               	xorlw	3	; case 118
 26457  0117A2  B4D8               	btfsc	status,2,c
 26458  0117A4  D70D               	goto	l886
 26459  0117A6  0A01               	xorlw	1	; case 119
 26460  0117A8  B4D8               	btfsc	status,2,c
 26461  0117AA  D70C               	goto	l887
 26462  0117AC  0A0F               	xorlw	15	; case 120
 26463  0117AE  B4D8               	btfsc	status,2,c
 26464  0117B0  D70B               	goto	l888
 26465  0117B2  0A01               	xorlw	1	; case 121
 26466  0117B4  B4D8               	btfsc	status,2,c
 26467  0117B6  D70A               	goto	l889
 26468  0117B8  0A03               	xorlw	3	; case 122
 26469  0117BA  B4D8               	btfsc	status,2,c
 26470  0117BC  D709               	goto	l890
 26471                           
 26472                           ;Types.c: 354: return 0;
 26473                           
 26474                           ; BSR set to: 0
 26475  0117BE  0E00               	movlw	0
 26476  0117C0  0012               	return	
 26477  0117C2                     __end_of_ToSegment:
 26478                           	opt stack 0
 26479                           tosu	equ	0xFFF
 26480                           tosh	equ	0xFFE
 26481                           tosl	equ	0xFFD
 26482                           pclath	equ	0xFFA
 26483                           tblptru	equ	0xFF8
 26484                           tblptrh	equ	0xFF7
 26485                           tblptrl	equ	0xFF6
 26486                           tablat	equ	0xFF5
 26487                           prodh	equ	0xFF4
 26488                           prodl	equ	0xFF3
 26489                           intcon	equ	0xFF2
 26490                           indf0	equ	0xFEF
 26491                           postinc0	equ	0xFEE
 26492                           fsr0h	equ	0xFEA
 26493                           fsr0l	equ	0xFE9
 26494                           wreg	equ	0xFE8
 26495                           indf1	equ	0xFE7
 26496                           postdec1	equ	0xFE5
 26497                           fsr1h	equ	0xFE2
 26498                           fsr1l	equ	0xFE1
 26499                           indf2	equ	0xFDF
 26500                           postinc2	equ	0xFDE
 26501                           postdec2	equ	0xFDD
 26502                           plusw2	equ	0xFDB
 26503                           fsr2h	equ	0xFDA
 26504                           fsr2l	equ	0xFD9
 26505                           status	equ	0xFD8
 26506                           
 26507 ;; *************** function _HMI_Render *****************
 26508 ;; Defined at:
 26509 ;;		line 138 in file "HMI.c"
 26510 ;; Parameters:    Size  Location     Type
 26511 ;;		None
 26512 ;; Auto vars:     Size  Location     Type
 26513 ;;  a               2    8[BANK0 ] unsigned short 
 26514 ;; Return value:  Size  Location     Type
 26515 ;;                  1    wreg      void 
 26516 ;; Registers used:
 26517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26518 ;; Tracked objects:
 26519 ;;		On entry : 0/0
 26520 ;;		On exit  : 0/0
 26521 ;;		Unchanged: 0/0
 26522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26524 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26526 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26527 ;;Total ram usage:        2 bytes
 26528 ;; Hardware stack levels used:    1
 26529 ;; Hardware stack levels required when called:    9
 26530 ;; This function calls:
 26531 ;;		_OutSeg
 26532 ;; This function is called by:
 26533 ;;		_main
 26534 ;;		_ADCAverage
 26535 ;; This function uses a non-reentrant model
 26536 ;;
 26537                           
 26538                           	psect	text136
 26539  015540                     __ptext136:
 26540                           	opt stack 0
 26541  015540                     _HMI_Render:
 26542                           	opt stack 21
 26543                           
 26544                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 26545                           
 26546                           ;incstack = 0
 26547  015540  0E00               	movlw	0
 26548  015542  0100               	movlb	0	; () banked
 26549  015544  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 26550  015546  0E00               	movlw	0
 26551  015548  6F68               	movwf	HMI_Render@a& (0+255),b
 26552  01554A                     l15123:
 26553                           
 26554                           ; BSR set to: 0
 26555  01554A  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 26556  01554C  E113               	bnz	l1158
 26557  01554E  0E08               	movlw	8
 26558  015550  5D68               	subwf	HMI_Render@a& (0+255),w,b
 26559  015552  B0D8               	btfsc	status,0,c
 26560  015554  0012               	return	
 26561                           
 26562                           ; BSR set to: 0
 26563                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 26564                           
 26565                           ; BSR set to: 0
 26566                           
 26567                           ; BSR set to: 0
 26568  015556  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 26569  01555A  0E4C               	movlw	low _HMIBoard
 26570  01555C  2568               	addwf	HMI_Render@a& (0+255),w,b
 26571  01555E  6ED9               	movwf	fsr2l,c
 26572  015560  0E01               	movlw	high _HMIBoard
 26573  015562  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 26574  015564  6EDA               	movwf	fsr2h,c
 26575  015566  50DF               	movf	indf2,w,c
 26576  015568  EC99  F0A4         	call	_OutSeg
 26577  01556C  0100               	movlb	0	; () banked
 26578  01556E  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 26579  015570  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 26580  015572  D7EB               	goto	l15123
 26581  015574                     l1158:
 26582                           
 26583                           ; BSR set to: 0
 26584  015574  0012               	return		;funcret
 26585  015576                     __end_of_HMI_Render:
 26586                           	opt stack 0
 26587                           tosu	equ	0xFFF
 26588                           tosh	equ	0xFFE
 26589                           tosl	equ	0xFFD
 26590                           pclath	equ	0xFFA
 26591                           tblptru	equ	0xFF8
 26592                           tblptrh	equ	0xFF7
 26593                           tblptrl	equ	0xFF6
 26594                           tablat	equ	0xFF5
 26595                           prodh	equ	0xFF4
 26596                           prodl	equ	0xFF3
 26597                           intcon	equ	0xFF2
 26598                           indf0	equ	0xFEF
 26599                           postinc0	equ	0xFEE
 26600                           fsr0h	equ	0xFEA
 26601                           fsr0l	equ	0xFE9
 26602                           wreg	equ	0xFE8
 26603                           indf1	equ	0xFE7
 26604                           postdec1	equ	0xFE5
 26605                           fsr1h	equ	0xFE2
 26606                           fsr1l	equ	0xFE1
 26607                           indf2	equ	0xFDF
 26608                           postinc2	equ	0xFDE
 26609                           postdec2	equ	0xFDD
 26610                           plusw2	equ	0xFDB
 26611                           fsr2h	equ	0xFDA
 26612                           fsr2l	equ	0xFD9
 26613                           status	equ	0xFD8
 26614                           
 26615 ;; *************** function _OutSeg *****************
 26616 ;; Defined at:
 26617 ;;		line 54 in file "HMI.c"
 26618 ;; Parameters:    Size  Location     Type
 26619 ;;  pInput          1    wreg     unsigned char 
 26620 ;;  pSegment        1    3[BANK0 ] unsigned char 
 26621 ;; Auto vars:     Size  Location     Type
 26622 ;;  pInput          1    6[BANK0 ] unsigned char 
 26623 ;;  out             1    7[BANK0 ] volatile unsigned char 
 26624 ;; Return value:  Size  Location     Type
 26625 ;;                  1    wreg      void 
 26626 ;; Registers used:
 26627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26628 ;; Tracked objects:
 26629 ;;		On entry : 0/0
 26630 ;;		On exit  : 0/0
 26631 ;;		Unchanged: 0/0
 26632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26633 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26634 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26635 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26636 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26637 ;;Total ram usage:        5 bytes
 26638 ;; Hardware stack levels used:    1
 26639 ;; Hardware stack levels required when called:    8
 26640 ;; This function calls:
 26641 ;;		_SPI_Send
 26642 ;; This function is called by:
 26643 ;;		_HMI_Render
 26644 ;;		_HMI_GRender
 26645 ;; This function uses a non-reentrant model
 26646 ;;
 26647                           
 26648                           	psect	text137
 26649  014932                     __ptext137:
 26650                           	opt stack 0
 26651  014932                     _OutSeg:
 26652                           	opt stack 21
 26653                           
 26654                           ; BSR set to: 0
 26655                           ;incstack = 0
 26656                           ;OutSeg@pInput stored from wreg
 26657  014932  0100               	movlb	0	; () banked
 26658  014934  6F66               	movwf	OutSeg@pInput& (0+255),b
 26659                           
 26660                           ;HMI.c: 58: static UINT8 cur;
 26661                           ;HMI.c: 59: volatile UINT8 out;
 26662                           ;HMI.c: 60: static UINT8 segset;
 26663                           ;HMI.c: 61: static UINT8 a;
 26664                           ;HMI.c: 83: if (pSegment <= 8)
 26665  014936  0E09               	movlw	9
 26666  014938  0100               	movlb	0	; () banked
 26667  01493A  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 26668  01493C  0012               	return	
 26669                           
 26670                           ; BSR set to: 0
 26671                           ;HMI.c: 84: {
 26672                           ;HMI.c: 85: cur = pInput;
 26673  01493E  C066  F03C         	movff	OutSeg@pInput,OutSeg@cur
 26674                           
 26675                           ; BSR set to: 0
 26676                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 26677  014942  0E00               	movlw	0
 26678  014944  6E3A               	movwf	OutSeg@a,c
 26679  014946                     l14669:
 26680                           
 26681                           ; BSR set to: 0
 26682  014946  0E07               	movlw	7
 26683  014948  643A               	cpfsgt	OutSeg@a,c
 26684  01494A  D001               	goto	l1146
 26685  01494C  D01F               	goto	u12020
 26686  01494E                     l1146:
 26687                           
 26688                           ;HMI.c: 87: {
 26689                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 26690                           
 26691                           ; BSR set to: 0
 26692  01494E  C03C  F064         	movff	OutSeg@cur,??_OutSeg
 26693  014952  0E01               	movlw	1
 26694  014954  0100               	movlb	0	; () banked
 26695  014956  1764               	andwf	??_OutSeg& (0+255),f,b
 26696  014958  0E06               	movlw	6
 26697  01495A  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 26698  01495C                     u12015:
 26699  01495C  90D8               	bcf	status,0,c
 26700  01495E  3764               	rlcf	??_OutSeg& (0+255),f,b
 26701  014960  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 26702  014962  D7FC               	goto	u12015
 26703  014964  5164               	movf	??_OutSeg& (0+255),w,b
 26704  014966  6E3B               	movwf	OutSeg@segset,c
 26705                           
 26706                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 26707  014968  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 26708  01496A  42E8               	rrncf	wreg,f,c
 26709  01496C  0BF8               	andlw	248
 26710  01496E  103A               	iorwf	OutSeg@a,w,c
 26711  014970  103B               	iorwf	OutSeg@segset,w,c
 26712  014972  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 26713                           
 26714                           ;HMI.c: 90: cur >>= 1;
 26715  014974  90D8               	bcf	status,0,c
 26716  014976  323C               	rrcf	OutSeg@cur,f,c
 26717                           
 26718                           ; BSR set to: 0
 26719                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 26720  014978  0EC8               	movlw	low _SPI1
 26721  01497A  6F60               	movwf	SPI_Send@pInput& (0+255),b
 26722  01497C  0E02               	movlw	high _SPI1
 26723  01497E  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 26724  014980  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 26725  014984  EC06  F0A5         	call	_SPI_Send	;wreg free
 26726  014988  2A3A               	incf	OutSeg@a,f,c
 26727  01498A  D7DD               	goto	l14669
 26728  01498C                     u12020:
 26729                           
 26730                           ;HMI.c: 96: }
 26731                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 26732  01498C  0EC8               	movlw	low _SPI1
 26733  01498E  0100               	movlb	0	; () banked
 26734  014990  6F60               	movwf	SPI_Send@pInput& (0+255),b
 26735  014992  0E02               	movlw	high _SPI1
 26736  014994  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 26737  014996  0E00               	movlw	0
 26738  014998  6F62               	movwf	SPI_Send@pData& (0+255),b
 26739  01499A  EC06  F0A5         	call	_SPI_Send	;wreg free
 26740  01499E  0012               	return	
 26741  0149A0                     __end_of_OutSeg:
 26742                           	opt stack 0
 26743                           tosu	equ	0xFFF
 26744                           tosh	equ	0xFFE
 26745                           tosl	equ	0xFFD
 26746                           pclath	equ	0xFFA
 26747                           tblptru	equ	0xFF8
 26748                           tblptrh	equ	0xFF7
 26749                           tblptrl	equ	0xFF6
 26750                           tablat	equ	0xFF5
 26751                           prodh	equ	0xFF4
 26752                           prodl	equ	0xFF3
 26753                           intcon	equ	0xFF2
 26754                           indf0	equ	0xFEF
 26755                           postinc0	equ	0xFEE
 26756                           fsr0h	equ	0xFEA
 26757                           fsr0l	equ	0xFE9
 26758                           wreg	equ	0xFE8
 26759                           indf1	equ	0xFE7
 26760                           postdec1	equ	0xFE5
 26761                           fsr1h	equ	0xFE2
 26762                           fsr1l	equ	0xFE1
 26763                           indf2	equ	0xFDF
 26764                           postinc2	equ	0xFDE
 26765                           postdec2	equ	0xFDD
 26766                           plusw2	equ	0xFDB
 26767                           fsr2h	equ	0xFDA
 26768                           fsr2l	equ	0xFD9
 26769                           status	equ	0xFD8
 26770                           
 26771 ;; *************** function _SPI_Send *****************
 26772 ;; Defined at:
 26773 ;;		line 226 in file "Library/SPI.c"
 26774 ;; Parameters:    Size  Location     Type
 26775 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 26776 ;;		 -> SPI1(11), SPI2(11), 
 26777 ;;  pData           1    2[BANK0 ] unsigned char 
 26778 ;; Auto vars:     Size  Location     Type
 26779 ;;		None
 26780 ;; Return value:  Size  Location     Type
 26781 ;;                  1    wreg      unsigned char 
 26782 ;; Registers used:
 26783 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26784 ;; Tracked objects:
 26785 ;;		On entry : 0/0
 26786 ;;		On exit  : 0/0
 26787 ;;		Unchanged: 0/0
 26788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26789 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26792 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26793 ;;Total ram usage:        3 bytes
 26794 ;; Hardware stack levels used:    1
 26795 ;; Hardware stack levels required when called:    7
 26796 ;; This function calls:
 26797 ;;		Nothing
 26798 ;; This function is called by:
 26799 ;;		_LCD_Write
 26800 ;;		_OutSeg
 26801 ;; This function uses a non-reentrant model
 26802 ;;
 26803                           
 26804                           	psect	text138
 26805  014A0C                     __ptext138:
 26806                           	opt stack 0
 26807  014A0C                     _SPI_Send:
 26808                           	opt stack 17
 26809                           
 26810                           ;SPI.c: 253: switch (pInput->mChannel)
 26811                           
 26812                           ;incstack = 0
 26813  014A0C  D026               	goto	l678
 26814  014A0E                     
 26815                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 26816  014A0E  C1B3  FFD9         	movff	_PortC+4,fsr2l
 26817  014A12  C1B4  FFDA         	movff	_PortC+5,fsr2h
 26818  014A16  0101               	movlb	1	; () banked
 26819  014A18  94DF               	bcf	indf2,2,c
 26820                           
 26821                           ; BSR set to: 1
 26822                           ;SPI.c: 257: SSP1BUF = pData;
 26823  014A1A  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 26824  014A1E                     
 26825                           ; BSR set to: 1
 26826  014A1E  A0C7               	btfss	4039,0,c	;volatile
 26827  014A20  D7FE               	goto	l681
 26828                           
 26829                           ;SPI.c: 259: pData = SSP1BUF;
 26830  014A22  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 26831                           
 26832                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 26833  014A26  C1B3  FFD9         	movff	_PortC+4,fsr2l
 26834  014A2A  C1B4  FFDA         	movff	_PortC+5,fsr2h
 26835  014A2E  0101               	movlb	1	; () banked
 26836  014A30  84DF               	bsf	indf2,2,c
 26837                           
 26838                           ; BSR set to: 1
 26839                           ;SPI.c: 261: return pData;
 26840                           ;	Return value of _SPI_Send is never used
 26841  014A32  0012               	return	
 26842  014A34                     
 26843                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 26844                           
 26845                           ; BSR set to: 1
 26846  014A34  C19F  FFD9         	movff	_PortD+4,fsr2l
 26847  014A38  C1A0  FFDA         	movff	_PortD+5,fsr2h
 26848  014A3C  0101               	movlb	1	; () banked
 26849  014A3E  9EDF               	bcf	indf2,7,c
 26850                           
 26851                           ; BSR set to: 1
 26852                           ;SPI.c: 264: SSP2BUF = pData;
 26853  014A40  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 26854  014A44                     
 26855                           ; BSR set to: 1
 26856  014A44  A06D               	btfss	3949,0,c	;volatile
 26857  014A46  D7FE               	goto	l686
 26858                           
 26859                           ;SPI.c: 266: pData = SSP2BUF;
 26860  014A48  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 26861                           
 26862                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 26863  014A4C  C19F  FFD9         	movff	_PortD+4,fsr2l
 26864  014A50  C1A0  FFDA         	movff	_PortD+5,fsr2h
 26865  014A54  0101               	movlb	1	; () banked
 26866  014A56  8EDF               	bsf	indf2,7,c
 26867                           
 26868                           ; BSR set to: 1
 26869                           ;SPI.c: 269: };
 26870                           
 26871                           ; BSR set to: 1
 26872                           ;SPI.c: 268: return pData;
 26873                           ;	Return value of _SPI_Send is never used
 26874  014A58  0012               	return	
 26875  014A5A                     l678:
 26876                           
 26877                           ; BSR set to: 1
 26878  014A5A  0100               	movlb	0	; () banked
 26879  014A5C  EE20 F002          	lfsr	2,2
 26880  014A60  5160               	movf	SPI_Send@pInput& (0+255),w,b
 26881  014A62  26D9               	addwf	fsr2l,f,c
 26882  014A64  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 26883  014A66  22DA               	addwfc	fsr2h,f,c
 26884  014A68  50DF               	movf	indf2,w,c
 26885                           
 26886                           ; Switch size 1, requested type "space"
 26887                           ; Number of cases is 2, Range of values is 0 to 1
 26888                           ; switch strategies available:
 26889                           ; Name         Instructions Cycles
 26890                           ; simple_byte            7     4 (average)
 26891                           ;	Chosen strategy is simple_byte
 26892  014A6A  0A00               	xorlw	0	; case 0
 26893  014A6C  B4D8               	btfsc	status,2,c
 26894  014A6E  D7CF               	goto	l679
 26895  014A70  0A01               	xorlw	1	; case 1
 26896  014A72  A4D8               	btfss	status,2,c
 26897  014A74  0012               	return	
 26898  014A76  D7DE               	goto	l684
 26899  014A78                     __end_of_SPI_Send:
 26900                           	opt stack 0
 26901                           tosu	equ	0xFFF
 26902                           tosh	equ	0xFFE
 26903                           tosl	equ	0xFFD
 26904                           pclath	equ	0xFFA
 26905                           tblptru	equ	0xFF8
 26906                           tblptrh	equ	0xFF7
 26907                           tblptrl	equ	0xFF6
 26908                           tablat	equ	0xFF5
 26909                           prodh	equ	0xFF4
 26910                           prodl	equ	0xFF3
 26911                           intcon	equ	0xFF2
 26912                           indf0	equ	0xFEF
 26913                           postinc0	equ	0xFEE
 26914                           fsr0h	equ	0xFEA
 26915                           fsr0l	equ	0xFE9
 26916                           wreg	equ	0xFE8
 26917                           indf1	equ	0xFE7
 26918                           postdec1	equ	0xFE5
 26919                           fsr1h	equ	0xFE2
 26920                           fsr1l	equ	0xFE1
 26921                           indf2	equ	0xFDF
 26922                           postinc2	equ	0xFDE
 26923                           postdec2	equ	0xFDD
 26924                           plusw2	equ	0xFDB
 26925                           fsr2h	equ	0xFDA
 26926                           fsr2l	equ	0xFD9
 26927                           status	equ	0xFD8
 26928                           
 26929 ;; *************** function _FunctReadADC *****************
 26930 ;; Defined at:
 26931 ;;		line 34 in file "dans.c"
 26932 ;; Parameters:    Size  Location     Type
 26933 ;;  channel         2    0[BANK0 ] int 
 26934 ;; Auto vars:     Size  Location     Type
 26935 ;;		None
 26936 ;; Return value:  Size  Location     Type
 26937 ;;                  2    0[BANK0 ] int 
 26938 ;; Registers used:
 26939 ;;		wreg, status,2, status,0
 26940 ;; Tracked objects:
 26941 ;;		On entry : 0/0
 26942 ;;		On exit  : 0/0
 26943 ;;		Unchanged: 0/0
 26944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26945 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26948 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26949 ;;Total ram usage:        2 bytes
 26950 ;; Hardware stack levels used:    1
 26951 ;; Hardware stack levels required when called:    7
 26952 ;; This function calls:
 26953 ;;		Nothing
 26954 ;; This function is called by:
 26955 ;;		_ADCAverage
 26956 ;; This function uses a non-reentrant model
 26957 ;;
 26958                           
 26959                           	psect	text139
 26960  01541E                     __ptext139:
 26961                           	opt stack 0
 26962  01541E                     _FunctReadADC:
 26963                           	opt stack 22
 26964                           
 26965                           ;dans.c: 36: if(channel>4) return 0;
 26966                           
 26967                           ;incstack = 0
 26968  01541E  0100               	movlb	0	; () banked
 26969  015420  BF61               	btfsc	(FunctReadADC@channel+1)& (0+255),7,b
 26970  015422  D00B               	goto	l2303
 26971  015424  5161               	movf	(FunctReadADC@channel+1)& (0+255),w,b
 26972  015426  E104               	bnz	u12530
 26973  015428  0E05               	movlw	5
 26974  01542A  5D60               	subwf	FunctReadADC@channel& (0+255),w,b
 26975  01542C  A0D8               	btfss	status,0,c
 26976  01542E  D005               	goto	l2303
 26977  015430                     u12530:
 26978                           
 26979                           ; BSR set to: 0
 26980  015430  0E00               	movlw	0
 26981  015432  6F61               	movwf	(?_FunctReadADC+1)& (0+255),b
 26982  015434  0E00               	movlw	0
 26983  015436  6F60               	movwf	?_FunctReadADC& (0+255),b
 26984                           
 26985                           ; BSR set to: 0
 26986  015438  0012               	return	
 26987  01543A                     l2303:
 26988                           
 26989                           ; BSR set to: 0
 26990                           ;dans.c: 37: ADCON0=0x00;
 26991                           
 26992                           ; BSR set to: 0
 26993  01543A  0E00               	movlw	0
 26994  01543C  6EC2               	movwf	4034,c	;volatile
 26995                           
 26996                           ; BSR set to: 0
 26997                           ;dans.c: 38: ADCON0=(channel<<2);
 26998  01543E  4560               	rlncf	FunctReadADC@channel& (0+255),w,b
 26999  015440  46E8               	rlncf	wreg,f,c
 27000  015442  0BFC               	andlw	252
 27001  015444  6EC2               	movwf	4034,c	;volatile
 27002                           
 27003                           ; BSR set to: 0
 27004                           ;dans.c: 39: ADON=1;
 27005  015446  80C2               	bsf	4034,0,c	;volatile
 27006                           
 27007                           ; BSR set to: 0
 27008                           ;dans.c: 40: GODONE=1;
 27009  015448  82C2               	bsf	4034,1,c	;volatile
 27010  01544A                     
 27011                           ; BSR set to: 0
 27012  01544A  B2C2               	btfsc	4034,1,c	;volatile
 27013  01544C  D7FE               	goto	l2306
 27014                           
 27015                           ;dans.c: 42: ADON=0;
 27016  01544E  90C2               	bcf	4034,0,c	;volatile
 27017                           
 27018                           ;dans.c: 43: return ADRES;
 27019  015450  CFC3 F060          	movff	4035,?_FunctReadADC	;volatile
 27020  015454  CFC4 F061          	movff	4036,?_FunctReadADC+1	;volatile
 27021  015458  0012               	return		;funcret
 27022  01545A                     __end_of_FunctReadADC:
 27023                           	opt stack 0
 27024                           tosu	equ	0xFFF
 27025                           tosh	equ	0xFFE
 27026                           tosl	equ	0xFFD
 27027                           pclath	equ	0xFFA
 27028                           tblptru	equ	0xFF8
 27029                           tblptrh	equ	0xFF7
 27030                           tblptrl	equ	0xFF6
 27031                           tablat	equ	0xFF5
 27032                           prodh	equ	0xFF4
 27033                           prodl	equ	0xFF3
 27034                           intcon	equ	0xFF2
 27035                           indf0	equ	0xFEF
 27036                           postinc0	equ	0xFEE
 27037                           fsr0h	equ	0xFEA
 27038                           fsr0l	equ	0xFE9
 27039                           wreg	equ	0xFE8
 27040                           indf1	equ	0xFE7
 27041                           postdec1	equ	0xFE5
 27042                           fsr1h	equ	0xFE2
 27043                           fsr1l	equ	0xFE1
 27044                           indf2	equ	0xFDF
 27045                           postinc2	equ	0xFDE
 27046                           postdec2	equ	0xFDD
 27047                           plusw2	equ	0xFDB
 27048                           fsr2h	equ	0xFDA
 27049                           fsr2l	equ	0xFD9
 27050                           status	equ	0xFD8
 27051                           
 27052 ;; *************** function _ISR_Function *****************
 27053 ;; Defined at:
 27054 ;;		line 38 in file "Library/ISR.c"
 27055 ;; Parameters:    Size  Location     Type
 27056 ;;		None
 27057 ;; Auto vars:     Size  Location     Type
 27058 ;;		None
 27059 ;; Return value:  Size  Location     Type
 27060 ;;                  1    wreg      void 
 27061 ;; Registers used:
 27062 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27063 ;; Tracked objects:
 27064 ;;		On entry : 0/0
 27065 ;;		On exit  : 0/0
 27066 ;;		Unchanged: 0/0
 27067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27070 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27071 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27072 ;;Total ram usage:       18 bytes
 27073 ;; Hardware stack levels used:    1
 27074 ;; Hardware stack levels required when called:    6
 27075 ;; This function calls:
 27076 ;;		_Timer0_ISR
 27077 ;; This function is called by:
 27078 ;;		Interrupt level 2
 27079 ;; This function uses a non-reentrant model
 27080 ;;
 27081                           
 27082                           	psect	intcode
 27083  001408                     __pintcode:
 27084                           	opt stack 0
 27085  001408                     _ISR_Function:
 27086                           	opt stack 14
 27087                           
 27088                           ;incstack = 0
 27089  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 27090  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 27091  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 27092  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 27093  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 27094  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 27095  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 27096  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 27097  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 27098  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 27099  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 27100  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 27101  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 27102  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 27103  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 27104  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 27105  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 27106  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 27107  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 27108                           
 27109                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 27110  001452  92F2               	bcf	intcon,1,c	;volatile
 27111                           
 27112                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 27113  001454  B4F2               	btfsc	intcon,2,c	;volatile
 27114  001456  AAF2               	btfss	intcon,5,c	;volatile
 27115  001458  D002               	goto	i2l1590
 27116                           
 27117                           ;ISR.c: 68: Timer0_ISR();
 27118  00145A  ECD8  F0AB         	call	_Timer0_ISR	;wreg free
 27119  00145E                     i2l1590:
 27120  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 27121  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 27122  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 27123  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 27124  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 27125  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 27126  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 27127  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 27128  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 27129  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 27130  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 27131  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 27132  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 27133  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 27134  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 27135  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 27136  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 27137  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 27138  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 27139  0014A8  0011               	retfie		f
 27140  0014AA                     __end_of_ISR_Function:
 27141                           	opt stack 0
 27142                           tosu	equ	0xFFF
 27143                           tosh	equ	0xFFE
 27144                           tosl	equ	0xFFD
 27145                           pclatu	equ	0xFFB
 27146                           pclath	equ	0xFFA
 27147                           tblptru	equ	0xFF8
 27148                           tblptrh	equ	0xFF7
 27149                           tblptrl	equ	0xFF6
 27150                           tablat	equ	0xFF5
 27151                           prodh	equ	0xFF4
 27152                           prodl	equ	0xFF3
 27153                           intcon	equ	0xFF2
 27154                           indf0	equ	0xFEF
 27155                           postinc0	equ	0xFEE
 27156                           fsr0h	equ	0xFEA
 27157                           fsr0l	equ	0xFE9
 27158                           wreg	equ	0xFE8
 27159                           indf1	equ	0xFE7
 27160                           postdec1	equ	0xFE5
 27161                           fsr1h	equ	0xFE2
 27162                           fsr1l	equ	0xFE1
 27163                           indf2	equ	0xFDF
 27164                           postinc2	equ	0xFDE
 27165                           postdec2	equ	0xFDD
 27166                           plusw2	equ	0xFDB
 27167                           fsr2h	equ	0xFDA
 27168                           fsr2l	equ	0xFD9
 27169                           status	equ	0xFD8
 27170                           
 27171 ;; *************** function _Timer0_ISR *****************
 27172 ;; Defined at:
 27173 ;;		line 94 in file "Library/Timer0.c"
 27174 ;; Parameters:    Size  Location     Type
 27175 ;;		None
 27176 ;; Auto vars:     Size  Location     Type
 27177 ;;		None
 27178 ;; Return value:  Size  Location     Type
 27179 ;;                  1    wreg      void 
 27180 ;; Registers used:
 27181 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27182 ;; Tracked objects:
 27183 ;;		On entry : 0/0
 27184 ;;		On exit  : 0/0
 27185 ;;		Unchanged: 0/0
 27186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27191 ;;Total ram usage:        0 bytes
 27192 ;; Hardware stack levels used:    1
 27193 ;; Hardware stack levels required when called:    5
 27194 ;; This function calls:
 27195 ;;		Absolute function
 27196 ;;		i2_Motor_Step
 27197 ;;		i2_Timer0_Stop
 27198 ;; This function is called by:
 27199 ;;		_ISR_Function
 27200 ;; This function uses a non-reentrant model
 27201 ;;
 27202                           
 27203                           	psect	text141
 27204  0157B0                     __ptext141:
 27205                           	opt stack 0
 27206  0157B0                     _Timer0_ISR:
 27207                           	opt stack 14
 27208                           
 27209                           ;Timer0.c: 96: Timer0_Stop();
 27210                           
 27211                           ;incstack = 0
 27212  0157B0  ECA7  F0AD         	call	i2_Timer0_Stop	;wreg free
 27213                           
 27214                           ;Timer0.c: 99: if (gISR != 0)
 27215  0157B4  0101               	movlb	1	; () banked
 27216  0157B6  5108               	movf	_gISR& (0+255),w,b
 27217  0157B8  1109               	iorwf	(_gISR+1)& (0+255),w,b
 27218  0157BA  110A               	iorwf	(_gISR+2)& (0+255),w,b
 27219  0157BC  B4D8               	btfsc	status,2,c
 27220  0157BE  0012               	return	
 27221                           
 27222                           ; BSR set to: 1
 27223                           ;Timer0.c: 100: gISR();
 27224  0157C0  D801               	call	i2u1425_48
 27225  0157C2  0012               	return	
 27226  0157C4                     i2u1425_48:
 27227  0157C4  0005               	push	
 27228  0157C6  6EFA               	movwf	pclath,c
 27229  0157C8  5108               	movf	_gISR& (0+255),w,b
 27230  0157CA  6EFD               	movwf	tosl,c
 27231  0157CC  5109               	movf	(_gISR+1)& (0+255),w,b
 27232  0157CE  6EFE               	movwf	tosh,c
 27233  0157D0  510A               	movf	(_gISR+2)& (0+255),w,b
 27234  0157D2  6EFF               	movwf	tosu,c
 27235  0157D4  50FA               	movf	pclath,w,c
 27236  0157D6  0012               	return		;indir
 27237  0157D8                     __end_of_Timer0_ISR:
 27238                           	opt stack 0
 27239                           tosu	equ	0xFFF
 27240                           tosh	equ	0xFFE
 27241                           tosl	equ	0xFFD
 27242                           pclatu	equ	0xFFB
 27243                           pclath	equ	0xFFA
 27244                           tblptru	equ	0xFF8
 27245                           tblptrh	equ	0xFF7
 27246                           tblptrl	equ	0xFF6
 27247                           tablat	equ	0xFF5
 27248                           prodh	equ	0xFF4
 27249                           prodl	equ	0xFF3
 27250                           intcon	equ	0xFF2
 27251                           indf0	equ	0xFEF
 27252                           postinc0	equ	0xFEE
 27253                           fsr0h	equ	0xFEA
 27254                           fsr0l	equ	0xFE9
 27255                           wreg	equ	0xFE8
 27256                           indf1	equ	0xFE7
 27257                           postdec1	equ	0xFE5
 27258                           fsr1h	equ	0xFE2
 27259                           fsr1l	equ	0xFE1
 27260                           indf2	equ	0xFDF
 27261                           postinc2	equ	0xFDE
 27262                           postdec2	equ	0xFDD
 27263                           plusw2	equ	0xFDB
 27264                           fsr2h	equ	0xFDA
 27265                           fsr2l	equ	0xFD9
 27266                           status	equ	0xFD8
 27267                           
 27268 ;; *************** function i2_Motor_Step *****************
 27269 ;; Defined at:
 27270 ;;		line 75 in file "Library/Motor.c"
 27271 ;; Parameters:    Size  Location     Type
 27272 ;;		None
 27273 ;; Auto vars:     Size  Location     Type
 27274 ;;		None
 27275 ;; Return value:  Size  Location     Type
 27276 ;;                  1    wreg      void 
 27277 ;; Registers used:
 27278 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27279 ;; Tracked objects:
 27280 ;;		On entry : 0/0
 27281 ;;		On exit  : 0/0
 27282 ;;		Unchanged: 0/0
 27283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27286 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27287 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27288 ;;Total ram usage:        2 bytes
 27289 ;; Hardware stack levels used:    1
 27290 ;; Hardware stack levels required when called:    4
 27291 ;; This function calls:
 27292 ;;		i2_MXK_Queue
 27293 ;;		i2_MXK_Release
 27294 ;;		i2_MXK_SwitchTo
 27295 ;;		i2_Port_SetPin
 27296 ;;		i2_Timer0_Restart
 27297 ;;		i2_Timer0_Stop
 27298 ;; This function is called by:
 27299 ;; This function uses a non-reentrant model
 27300 ;;
 27301                           
 27302                           	psect	text142
 27303  0138E4                     __ptext142:
 27304                           	opt stack 0
 27305  0138E4                     i2_Motor_Step:
 27306                           	opt stack 14
 27307                           
 27308                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 27309                           
 27310                           ;incstack = 0
 27311  0138E4  0100               	movlb	0	; () banked
 27312  0138E6  EE20 F004          	lfsr	2,4
 27313  0138EA  51EA               	movf	_lMotor& (0+255),w,b
 27314  0138EC  26D9               	addwf	fsr2l,f,c
 27315  0138EE  51EB               	movf	(_lMotor+1)& (0+255),w,b
 27316  0138F0  22DA               	addwfc	fsr2h,f,c
 27317  0138F2  50DF               	movf	indf2,w,c
 27318  0138F4  ECBB  F0AA         	call	i2_MXK_SwitchTo
 27319  0138F8  0900               	iorlw	0
 27320  0138FA  B4D8               	btfsc	status,2,c
 27321  0138FC  D06A               	goto	i2l1627
 27322                           
 27323                           ;Motor.c: 78: {
 27324                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 27325  0138FE  C0EA  FFD9         	movff	_lMotor,fsr2l
 27326  013902  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 27327  013906  50DE               	movf	postinc2,w,c
 27328  013908  10DE               	iorwf	postinc2,w,c
 27329  01390A  B4D8               	btfsc	status,2,c
 27330  01390C  D05D               	goto	i2l1628
 27331                           
 27332                           ;Motor.c: 80: {
 27333                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 27334  01390E  C0EA  FFD9         	movff	_lMotor,fsr2l
 27335  013912  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 27336  013916  0E01               	movlw	1
 27337  013918  BEDB               	btfsc	plusw2,7,c
 27338  01391A  D022               	goto	i2l1629
 27339  01391C  0E01               	movlw	1
 27340  01391E  50DB               	movf	plusw2,w,c
 27341  013920  E103               	bnz	i2u812_40
 27342  013922  04DE               	decf	postinc2,w,c
 27343  013924  A0D8               	btfss	status,0,c
 27344  013926  D01C               	goto	i2l1629
 27345  013928                     i2u812_40:
 27346                           
 27347                           ;Motor.c: 83: {
 27348                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 27349  013928  C0EA  FFD9         	movff	_lMotor,fsr2l
 27350  01392C  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 27351  013930  28DE               	incf	postinc2,w,c
 27352  013932  E104               	bnz	i2u813_40
 27353  013934  0E7F               	movlw	127
 27354  013936  18DE               	xorwf	postinc2,w,c
 27355  013938  B4D8               	btfsc	status,2,c
 27356  01393A  D007               	goto	i2l1630
 27357  01393C                     i2u813_40:
 27358                           
 27359                           ;Motor.c: 85: lMotor->mDelta --;
 27360  01393C  C0EA  FFD9         	movff	_lMotor,fsr2l
 27361  013940  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 27362  013944  06DE               	decf	postinc2,f,c
 27363  013946  0E00               	movlw	0
 27364  013948  5ADD               	subwfb	postdec2,f,c
 27365  01394A                     i2l1630:
 27366                           
 27367                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 27368  01394A  0E91               	movlw	low _PortE
 27369  01394C  6E10               	movwf	i2Port_SetPin@pInput,c
 27370  01394E  0E01               	movlw	high _PortE
 27371  013950  6E11               	movwf	i2Port_SetPin@pInput+1,c
 27372  013952  0E00               	movlw	0
 27373  013954  6E12               	movwf	i2Port_SetPin@pPin,c
 27374  013956  0E01               	movlw	1
 27375  013958  6E13               	movwf	i2Port_SetPin@pValue,c
 27376  01395A  ECE4  F09E         	call	i2_Port_SetPin	;wreg free
 27377                           
 27378                           ;Motor.c: 88: }
 27379  01395E  D01B               	goto	i2l1631
 27380  013960                     i2l1629:
 27381                           
 27382                           ;Motor.c: 89: else
 27383                           ;Motor.c: 90: {
 27384                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 27385  013960  C0EA  FFD9         	movff	_lMotor,fsr2l
 27386  013964  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 27387  013968  04DE               	decf	postinc2,w,c
 27388  01396A  E104               	bnz	i2u814_40
 27389  01396C  0E80               	movlw	128
 27390  01396E  18DE               	xorwf	postinc2,w,c
 27391  013970  B4D8               	btfsc	status,2,c
 27392  013972  D007               	goto	i2l1632
 27393  013974                     i2u814_40:
 27394                           
 27395                           ;Motor.c: 92: lMotor->mDelta ++;
 27396  013974  C0EA  FFD9         	movff	_lMotor,fsr2l
 27397  013978  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 27398  01397C  2ADE               	incf	postinc2,f,c
 27399  01397E  0E00               	movlw	0
 27400  013980  22DD               	addwfc	postdec2,f,c
 27401  013982                     i2l1632:
 27402                           
 27403                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 27404  013982  0E91               	movlw	low _PortE
 27405  013984  6E10               	movwf	i2Port_SetPin@pInput,c
 27406  013986  0E01               	movlw	high _PortE
 27407  013988  6E11               	movwf	i2Port_SetPin@pInput+1,c
 27408  01398A  0E00               	movlw	0
 27409  01398C  6E12               	movwf	i2Port_SetPin@pPin,c
 27410  01398E  0E00               	movlw	0
 27411  013990  6E13               	movwf	i2Port_SetPin@pValue,c
 27412  013992  ECE4  F09E         	call	i2_Port_SetPin	;wreg free
 27413  013996                     i2l1631:
 27414                           
 27415                           ;Motor.c: 95: }
 27416                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 27417  013996  0E91               	movlw	low _PortE
 27418  013998  6E10               	movwf	i2Port_SetPin@pInput,c
 27419  01399A  0E01               	movlw	high _PortE
 27420  01399C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 27421  01399E  0E01               	movlw	1
 27422  0139A0  6E12               	movwf	i2Port_SetPin@pPin,c
 27423  0139A2  0E01               	movlw	1
 27424  0139A4  6E13               	movwf	i2Port_SetPin@pValue,c
 27425  0139A6  ECE4  F09E         	call	i2_Port_SetPin	;wreg free
 27426                           
 27427                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 27428  0139AA  0E91               	movlw	low _PortE
 27429  0139AC  6E10               	movwf	i2Port_SetPin@pInput,c
 27430  0139AE  0E01               	movlw	high _PortE
 27431  0139B0  6E11               	movwf	i2Port_SetPin@pInput+1,c
 27432  0139B2  0E01               	movlw	1
 27433  0139B4  6E12               	movwf	i2Port_SetPin@pPin,c
 27434  0139B6  0E00               	movlw	0
 27435  0139B8  6E13               	movwf	i2Port_SetPin@pValue,c
 27436  0139BA  ECE4  F09E         	call	i2_Port_SetPin	;wreg free
 27437                           
 27438                           ;Motor.c: 101: MXK_Release();
 27439  0139BE  ECAA  F0AD         	call	i2_MXK_Release	;wreg free
 27440                           
 27441                           ;Motor.c: 102: Timer0_Restart();
 27442  0139C2  EC86  F0AD         	call	i2_Timer0_Restart	;wreg free
 27443                           
 27444                           ;Motor.c: 103: return;
 27445  0139C6  0012               	return	
 27446  0139C8                     i2l1628:
 27447                           
 27448                           ;Motor.c: 104: }
 27449                           ;Motor.c: 105: MXK_Release();
 27450  0139C8  ECAA  F0AD         	call	i2_MXK_Release	;wreg free
 27451                           
 27452                           ;Motor.c: 106: Timer0_Stop();
 27453  0139CC  ECA7  F0AD         	call	i2_Timer0_Stop	;wreg free
 27454                           
 27455                           ;Motor.c: 107: return;
 27456  0139D0  0012               	return	
 27457  0139D2                     i2l1627:
 27458                           
 27459                           ;Motor.c: 108: }
 27460                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 27461  0139D2  C10B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 27462  0139D6  C10C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 27463  0139DA  C10D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 27464  0139DE  EC79  F0AD         	call	i2_MXK_Queue	;wreg free
 27465  0139E2  0012               	return		;funcret
 27466  0139E4                     __end_ofi2_Motor_Step:
 27467                           	opt stack 0
 27468                           tosu	equ	0xFFF
 27469                           tosh	equ	0xFFE
 27470                           tosl	equ	0xFFD
 27471                           pclatu	equ	0xFFB
 27472                           pclath	equ	0xFFA
 27473                           tblptru	equ	0xFF8
 27474                           tblptrh	equ	0xFF7
 27475                           tblptrl	equ	0xFF6
 27476                           tablat	equ	0xFF5
 27477                           prodh	equ	0xFF4
 27478                           prodl	equ	0xFF3
 27479                           intcon	equ	0xFF2
 27480                           indf0	equ	0xFEF
 27481                           postinc0	equ	0xFEE
 27482                           fsr0h	equ	0xFEA
 27483                           fsr0l	equ	0xFE9
 27484                           wreg	equ	0xFE8
 27485                           indf1	equ	0xFE7
 27486                           postdec1	equ	0xFE5
 27487                           fsr1h	equ	0xFE2
 27488                           fsr1l	equ	0xFE1
 27489                           indf2	equ	0xFDF
 27490                           postinc2	equ	0xFDE
 27491                           postdec2	equ	0xFDD
 27492                           plusw2	equ	0xFDB
 27493                           fsr2h	equ	0xFDA
 27494                           fsr2l	equ	0xFD9
 27495                           status	equ	0xFD8
 27496                           
 27497 ;; *************** function i2_Timer0_Stop *****************
 27498 ;; Defined at:
 27499 ;;		line 89 in file "Library/Timer0.c"
 27500 ;; Parameters:    Size  Location     Type
 27501 ;;		None
 27502 ;; Auto vars:     Size  Location     Type
 27503 ;;		None
 27504 ;; Return value:  Size  Location     Type
 27505 ;;                  1    wreg      void 
 27506 ;; Registers used:
 27507 ;;		None
 27508 ;; Tracked objects:
 27509 ;;		On entry : 0/0
 27510 ;;		On exit  : 0/0
 27511 ;;		Unchanged: 0/0
 27512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27517 ;;Total ram usage:        0 bytes
 27518 ;; Hardware stack levels used:    1
 27519 ;; This function calls:
 27520 ;;		Nothing
 27521 ;; This function is called by:
 27522 ;;		_Timer0_ISR
 27523 ;;		i2_Motor_Step
 27524 ;; This function uses a non-reentrant model
 27525 ;;
 27526                           
 27527                           	psect	text143
 27528  015B4E                     __ptext143:
 27529                           	opt stack 0
 27530  015B4E                     i2_Timer0_Stop:
 27531                           	opt stack 18
 27532                           
 27533                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 27534                           
 27535                           ;incstack = 0
 27536  015B4E  9AF2               	bcf	intcon,5,c	;volatile
 27537                           
 27538                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 27539  015B50  94F2               	bcf	intcon,2,c	;volatile
 27540  015B52  0012               	return		;funcret
 27541  015B54                     __end_ofi2_Timer0_Stop:
 27542                           	opt stack 0
 27543                           tosu	equ	0xFFF
 27544                           tosh	equ	0xFFE
 27545                           tosl	equ	0xFFD
 27546                           pclatu	equ	0xFFB
 27547                           pclath	equ	0xFFA
 27548                           tblptru	equ	0xFF8
 27549                           tblptrh	equ	0xFF7
 27550                           tblptrl	equ	0xFF6
 27551                           tablat	equ	0xFF5
 27552                           prodh	equ	0xFF4
 27553                           prodl	equ	0xFF3
 27554                           intcon	equ	0xFF2
 27555                           indf0	equ	0xFEF
 27556                           postinc0	equ	0xFEE
 27557                           fsr0h	equ	0xFEA
 27558                           fsr0l	equ	0xFE9
 27559                           wreg	equ	0xFE8
 27560                           indf1	equ	0xFE7
 27561                           postdec1	equ	0xFE5
 27562                           fsr1h	equ	0xFE2
 27563                           fsr1l	equ	0xFE1
 27564                           indf2	equ	0xFDF
 27565                           postinc2	equ	0xFDE
 27566                           postdec2	equ	0xFDD
 27567                           plusw2	equ	0xFDB
 27568                           fsr2h	equ	0xFDA
 27569                           fsr2l	equ	0xFD9
 27570                           status	equ	0xFD8
 27571                           
 27572 ;; *************** function i2_Timer0_Restart *****************
 27573 ;; Defined at:
 27574 ;;		line 83 in file "Library/Timer0.c"
 27575 ;; Parameters:    Size  Location     Type
 27576 ;;		None
 27577 ;; Auto vars:     Size  Location     Type
 27578 ;;		None
 27579 ;; Return value:  Size  Location     Type
 27580 ;;                  1    wreg      void 
 27581 ;; Registers used:
 27582 ;;		None
 27583 ;; Tracked objects:
 27584 ;;		On entry : 0/0
 27585 ;;		On exit  : 0/0
 27586 ;;		Unchanged: 0/0
 27587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27592 ;;Total ram usage:        0 bytes
 27593 ;; Hardware stack levels used:    1
 27594 ;; This function calls:
 27595 ;;		Nothing
 27596 ;; This function is called by:
 27597 ;;		i2_Motor_Step
 27598 ;; This function uses a non-reentrant model
 27599 ;;
 27600                           
 27601                           	psect	text144
 27602  015B0C                     __ptext144:
 27603                           	opt stack 0
 27604  015B0C                     i2_Timer0_Restart:
 27605                           	opt stack 17
 27606                           
 27607                           ;Timer0.c: 85: TMR0 = COUNTER;
 27608                           
 27609                           ;incstack = 0
 27610  015B0C  C031  FFD6         	movff	_COUNTER,4054	;volatile
 27611  015B10  C032  FFD7         	movff	_COUNTER+1,4055	;volatile
 27612                           
 27613                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 27614  015B14  8AF2               	bsf	intcon,5,c	;volatile
 27615  015B16  0012               	return		;funcret
 27616  015B18                     __end_ofi2_Timer0_Restart:
 27617                           	opt stack 0
 27618                           tosu	equ	0xFFF
 27619                           tosh	equ	0xFFE
 27620                           tosl	equ	0xFFD
 27621                           pclatu	equ	0xFFB
 27622                           pclath	equ	0xFFA
 27623                           tblptru	equ	0xFF8
 27624                           tblptrh	equ	0xFF7
 27625                           tblptrl	equ	0xFF6
 27626                           tablat	equ	0xFF5
 27627                           prodh	equ	0xFF4
 27628                           prodl	equ	0xFF3
 27629                           intcon	equ	0xFF2
 27630                           indf0	equ	0xFEF
 27631                           postinc0	equ	0xFEE
 27632                           fsr0h	equ	0xFEA
 27633                           fsr0l	equ	0xFE9
 27634                           wreg	equ	0xFE8
 27635                           indf1	equ	0xFE7
 27636                           postdec1	equ	0xFE5
 27637                           fsr1h	equ	0xFE2
 27638                           fsr1l	equ	0xFE1
 27639                           indf2	equ	0xFDF
 27640                           postinc2	equ	0xFDE
 27641                           postdec2	equ	0xFDD
 27642                           plusw2	equ	0xFDB
 27643                           fsr2h	equ	0xFDA
 27644                           fsr2l	equ	0xFD9
 27645                           status	equ	0xFD8
 27646                           
 27647 ;; *************** function i2_Port_SetPin *****************
 27648 ;; Defined at:
 27649 ;;		line 247 in file "Library/Port.c"
 27650 ;; Parameters:    Size  Location     Type
 27651 ;;  pInput          2   15[COMRAM] const PTR struct Port
 27652 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 27653 ;;  pPin            1   17[COMRAM] enum E6750
 27654 ;;  pValue          1   18[COMRAM] unsigned char 
 27655 ;; Auto vars:     Size  Location     Type
 27656 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 27657 ;; Return value:  Size  Location     Type
 27658 ;;                  1    wreg      void 
 27659 ;; Registers used:
 27660 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27661 ;; Tracked objects:
 27662 ;;		On entry : 0/0
 27663 ;;		On exit  : 0/0
 27664 ;;		Unchanged: 0/0
 27665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27666 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27667 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27669 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27670 ;;Total ram usage:        5 bytes
 27671 ;; Hardware stack levels used:    1
 27672 ;; Hardware stack levels required when called:    3
 27673 ;; This function calls:
 27674 ;;		i2_Byte_SetBit
 27675 ;;		i2_Word_GetPair
 27676 ;; This function is called by:
 27677 ;;		i2_Motor_Step
 27678 ;; This function uses a non-reentrant model
 27679 ;;
 27680                           
 27681                           	psect	text145
 27682  013DC8                     __ptext145:
 27683                           	opt stack 0
 27684  013DC8                     i2_Port_SetPin:
 27685                           	opt stack 14
 27686                           
 27687                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 27688                           
 27689                           ;incstack = 0
 27690  013DC8  0E08               	movlw	8
 27691  013DCA  2410               	addwf	i2Port_SetPin@pInput,w,c
 27692  013DCC  6E0D               	movwf	i2Word_GetPair@pInput,c
 27693  013DCE  0E00               	movlw	0
 27694  013DD0  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 27695  013DD2  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 27696  013DD4  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 27697  013DD8  EC6B  F0AB         	call	i2_Word_GetPair	;wreg free
 27698  013DDC  6E14               	movwf	i2Port_SetPin@Type,c
 27699                           
 27700                           ;Port.c: 250: switch (Type)
 27701  013DDE  D03B               	goto	i2l427
 27702  013DE0                     
 27703                           ;Port.c: 256: pValue &= 1;
 27704  013DE0  0E01               	movlw	1
 27705  013DE2  1613               	andwf	i2Port_SetPin@pValue,f,c
 27706                           
 27707                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 27708  013DE4  EE20 F002          	lfsr	2,2
 27709  013DE8  5010               	movf	i2Port_SetPin@pInput,w,c
 27710  013DEA  26D9               	addwf	fsr2l,f,c
 27711  013DEC  5011               	movf	i2Port_SetPin@pInput+1,w,c
 27712  013DEE  22DA               	addwfc	fsr2h,f,c
 27713  013DF0  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 27714  013DF4  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 27715  013DF8  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 27716  013DFC  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 27717  013E00  EC70  F0A8         	call	i2_Byte_SetBit	;wreg free
 27718                           
 27719                           ;Port.c: 258: break;
 27720  013E04  0012               	return	
 27721  013E06                     
 27722                           ;Port.c: 261: pValue &= 1;
 27723  013E06  0E01               	movlw	1
 27724  013E08  1613               	andwf	i2Port_SetPin@pValue,f,c
 27725                           
 27726                           ;Port.c: 262: pValue ^= 1;
 27727  013E0A  0E01               	movlw	1
 27728  013E0C  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 27729                           
 27730                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 27731  013E0E  EE20 F002          	lfsr	2,2
 27732  013E12  5010               	movf	i2Port_SetPin@pInput,w,c
 27733  013E14  26D9               	addwf	fsr2l,f,c
 27734  013E16  5011               	movf	i2Port_SetPin@pInput+1,w,c
 27735  013E18  22DA               	addwfc	fsr2h,f,c
 27736  013E1A  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 27737  013E1E  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 27738  013E22  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 27739  013E26  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 27740  013E2A  EC70  F0A8         	call	i2_Byte_SetBit	;wreg free
 27741                           
 27742                           ;Port.c: 264: break;
 27743  013E2E  0012               	return	
 27744  013E30                     
 27745                           ;Port.c: 266: pValue &= 1;
 27746  013E30  0E01               	movlw	1
 27747  013E32  1613               	andwf	i2Port_SetPin@pValue,f,c
 27748                           
 27749                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 27750  013E34  EE20 F004          	lfsr	2,4
 27751  013E38  5010               	movf	i2Port_SetPin@pInput,w,c
 27752  013E3A  26D9               	addwf	fsr2l,f,c
 27753  013E3C  5011               	movf	i2Port_SetPin@pInput+1,w,c
 27754  013E3E  22DA               	addwfc	fsr2h,f,c
 27755  013E40  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 27756  013E44  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 27757  013E48  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 27758  013E4C  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 27759  013E50  EC70  F0A8         	call	i2_Byte_SetBit	;wreg free
 27760                           
 27761                           ;Port.c: 269: }
 27762                           
 27763                           ;Port.c: 268: break;
 27764  013E54  0012               	return	
 27765  013E56                     i2l427:
 27766  013E56  5014               	movf	i2Port_SetPin@Type,w,c
 27767                           
 27768                           ; Switch size 1, requested type "space"
 27769                           ; Number of cases is 4, Range of values is 0 to 3
 27770                           ; switch strategies available:
 27771                           ; Name         Instructions Cycles
 27772                           ; simple_byte           13     7 (average)
 27773                           ;	Chosen strategy is simple_byte
 27774  013E58  0A00               	xorlw	0	; case 0
 27775  013E5A  B4D8               	btfsc	status,2,c
 27776  013E5C  0012               	return	
 27777  013E5E  0A01               	xorlw	1	; case 1
 27778  013E60  B4D8               	btfsc	status,2,c
 27779  013E62  D7BE               	goto	i2l430
 27780  013E64  0A03               	xorlw	3	; case 2
 27781  013E66  B4D8               	btfsc	status,2,c
 27782  013E68  D7CE               	goto	i2l432
 27783  013E6A  0A01               	xorlw	1	; case 3
 27784  013E6C  A4D8               	btfss	status,2,c
 27785  013E6E  0012               	return	
 27786  013E70  D7DF               	goto	i2l433
 27787  013E72                     __end_ofi2_Port_SetPin:
 27788                           	opt stack 0
 27789                           tosu	equ	0xFFF
 27790                           tosh	equ	0xFFE
 27791                           tosl	equ	0xFFD
 27792                           pclatu	equ	0xFFB
 27793                           pclath	equ	0xFFA
 27794                           tblptru	equ	0xFF8
 27795                           tblptrh	equ	0xFF7
 27796                           tblptrl	equ	0xFF6
 27797                           tablat	equ	0xFF5
 27798                           prodh	equ	0xFF4
 27799                           prodl	equ	0xFF3
 27800                           intcon	equ	0xFF2
 27801                           indf0	equ	0xFEF
 27802                           postinc0	equ	0xFEE
 27803                           fsr0h	equ	0xFEA
 27804                           fsr0l	equ	0xFE9
 27805                           wreg	equ	0xFE8
 27806                           indf1	equ	0xFE7
 27807                           postdec1	equ	0xFE5
 27808                           fsr1h	equ	0xFE2
 27809                           fsr1l	equ	0xFE1
 27810                           indf2	equ	0xFDF
 27811                           postinc2	equ	0xFDE
 27812                           postdec2	equ	0xFDD
 27813                           plusw2	equ	0xFDB
 27814                           fsr2h	equ	0xFDA
 27815                           fsr2l	equ	0xFD9
 27816                           status	equ	0xFD8
 27817                           
 27818 ;; *************** function i2_Word_GetPair *****************
 27819 ;; Defined at:
 27820 ;;		line 156 in file "Library/Types.c"
 27821 ;; Parameters:    Size  Location     Type
 27822 ;;  pInput          2   12[COMRAM] PTR struct Word
 27823 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 27824 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 27825 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 27826 ;;		 -> PortC(10), PortF(10), NULL(0), 
 27827 ;;  pPair           1   14[COMRAM] unsigned char 
 27828 ;; Auto vars:     Size  Location     Type
 27829 ;;		None
 27830 ;; Return value:  Size  Location     Type
 27831 ;;                  1    wreg      unsigned char 
 27832 ;; Registers used:
 27833 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27834 ;; Tracked objects:
 27835 ;;		On entry : 0/0
 27836 ;;		On exit  : 0/0
 27837 ;;		Unchanged: 0/0
 27838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27839 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27842 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27843 ;;Total ram usage:        3 bytes
 27844 ;; Hardware stack levels used:    1
 27845 ;; Hardware stack levels required when called:    2
 27846 ;; This function calls:
 27847 ;;		i2_Byte_GetPair
 27848 ;; This function is called by:
 27849 ;;		i2_Port_SetPin
 27850 ;; This function uses a non-reentrant model
 27851 ;;
 27852                           
 27853                           	psect	text146
 27854  0156D6                     __ptext146:
 27855                           	opt stack 0
 27856  0156D6                     i2_Word_GetPair:
 27857                           	opt stack 14
 27858                           
 27859                           ;Types.c: 158: if (pPair >= 4)
 27860                           
 27861                           ;incstack = 0
 27862  0156D6  0E03               	movlw	3
 27863  0156D8  640F               	cpfsgt	i2Word_GetPair@pPair,c
 27864  0156DA  D00C               	goto	i2l781
 27865                           
 27866                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 27867  0156DC  0E01               	movlw	1
 27868  0156DE  240D               	addwf	i2Word_GetPair@pInput,w,c
 27869  0156E0  6E0A               	movwf	i2Byte_GetPair@pInput,c
 27870  0156E2  0E00               	movlw	0
 27871  0156E4  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 27872  0156E6  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 27873  0156E8  500F               	movf	i2Word_GetPair@pPair,w,c
 27874  0156EA  0FFC               	addlw	252
 27875  0156EC  6E0C               	movwf	i2Byte_GetPair@pPair,c
 27876  0156EE  EC9C  F0AC         	call	i2_Byte_GetPair	;wreg free
 27877  0156F2  0012               	return	
 27878  0156F4                     i2l781:
 27879                           
 27880                           ;Types.c: 160: else
 27881                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 27882  0156F4  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 27883  0156F8  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 27884  0156FC  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 27885  015700  EC9C  F0AC         	call	i2_Byte_GetPair	;wreg free
 27886  015704  0012               	return	
 27887  015706                     __end_ofi2_Word_GetPair:
 27888                           	opt stack 0
 27889                           tosu	equ	0xFFF
 27890                           tosh	equ	0xFFE
 27891                           tosl	equ	0xFFD
 27892                           pclatu	equ	0xFFB
 27893                           pclath	equ	0xFFA
 27894                           tblptru	equ	0xFF8
 27895                           tblptrh	equ	0xFF7
 27896                           tblptrl	equ	0xFF6
 27897                           tablat	equ	0xFF5
 27898                           prodh	equ	0xFF4
 27899                           prodl	equ	0xFF3
 27900                           intcon	equ	0xFF2
 27901                           indf0	equ	0xFEF
 27902                           postinc0	equ	0xFEE
 27903                           fsr0h	equ	0xFEA
 27904                           fsr0l	equ	0xFE9
 27905                           wreg	equ	0xFE8
 27906                           indf1	equ	0xFE7
 27907                           postdec1	equ	0xFE5
 27908                           fsr1h	equ	0xFE2
 27909                           fsr1l	equ	0xFE1
 27910                           indf2	equ	0xFDF
 27911                           postinc2	equ	0xFDE
 27912                           postdec2	equ	0xFDD
 27913                           plusw2	equ	0xFDB
 27914                           fsr2h	equ	0xFDA
 27915                           fsr2l	equ	0xFD9
 27916                           status	equ	0xFD8
 27917                           
 27918 ;; *************** function i2_Byte_GetPair *****************
 27919 ;; Defined at:
 27920 ;;		line 87 in file "Library/Types.c"
 27921 ;; Parameters:    Size  Location     Type
 27922 ;;  pInput          2    9[COMRAM] PTR struct Byte
 27923 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 27924 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 27925 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 27926 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 27927 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 27928 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 27929 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 27930 ;;		 -> NULL(0), 
 27931 ;;  pPair           1   11[COMRAM] unsigned char 
 27932 ;; Auto vars:     Size  Location     Type
 27933 ;;		None
 27934 ;; Return value:  Size  Location     Type
 27935 ;;                  1    wreg      unsigned char 
 27936 ;; Registers used:
 27937 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27938 ;; Tracked objects:
 27939 ;;		On entry : 0/0
 27940 ;;		On exit  : 0/0
 27941 ;;		Unchanged: 0/0
 27942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27943 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27946 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27947 ;;Total ram usage:        3 bytes
 27948 ;; Hardware stack levels used:    1
 27949 ;; Hardware stack levels required when called:    1
 27950 ;; This function calls:
 27951 ;;		i2_Byte_GetZone
 27952 ;; This function is called by:
 27953 ;;		i2_Word_GetPair
 27954 ;; This function uses a non-reentrant model
 27955 ;;
 27956                           
 27957                           	psect	text147
 27958  015938                     __ptext147:
 27959                           	opt stack 0
 27960  015938                     i2_Byte_GetPair:
 27961                           	opt stack 14
 27962                           
 27963                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 27964                           
 27965                           ;incstack = 0
 27966  015938  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 27967  01593C  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 27968  015940  0E04               	movlw	4
 27969  015942  6E03               	movwf	i2Byte_GetZone@pMax,c
 27970  015944  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 27971  015948  0E02               	movlw	2
 27972  01594A  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 27973  01594C  EC5E  F0A4         	call	i2_Byte_GetZone	;wreg free
 27974  015950  0012               	return	
 27975  015952                     __end_ofi2_Byte_GetPair:
 27976                           	opt stack 0
 27977                           tosu	equ	0xFFF
 27978                           tosh	equ	0xFFE
 27979                           tosl	equ	0xFFD
 27980                           pclatu	equ	0xFFB
 27981                           pclath	equ	0xFFA
 27982                           tblptru	equ	0xFF8
 27983                           tblptrh	equ	0xFF7
 27984                           tblptrl	equ	0xFF6
 27985                           tablat	equ	0xFF5
 27986                           prodh	equ	0xFF4
 27987                           prodl	equ	0xFF3
 27988                           intcon	equ	0xFF2
 27989                           indf0	equ	0xFEF
 27990                           postinc0	equ	0xFEE
 27991                           fsr0h	equ	0xFEA
 27992                           fsr0l	equ	0xFE9
 27993                           wreg	equ	0xFE8
 27994                           indf1	equ	0xFE7
 27995                           postdec1	equ	0xFE5
 27996                           fsr1h	equ	0xFE2
 27997                           fsr1l	equ	0xFE1
 27998                           indf2	equ	0xFDF
 27999                           postinc2	equ	0xFDE
 28000                           postdec2	equ	0xFDD
 28001                           plusw2	equ	0xFDB
 28002                           fsr2h	equ	0xFDA
 28003                           fsr2l	equ	0xFD9
 28004                           status	equ	0xFD8
 28005                           
 28006 ;; *************** function i2_Byte_GetZone *****************
 28007 ;; Defined at:
 28008 ;;		line 64 in file "Library/Types.c"
 28009 ;; Parameters:    Size  Location     Type
 28010 ;;  pInput          2    0[COMRAM] PTR struct Byte
 28011 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28012 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28013 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28014 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28015 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28016 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28017 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28018 ;;		 -> NULL(0), 
 28019 ;;  pMax            1    2[COMRAM] unsigned char 
 28020 ;;  pChunk          1    3[COMRAM] unsigned char 
 28021 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 28022 ;; Auto vars:     Size  Location     Type
 28023 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 28024 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 28025 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 28026 ;; Return value:  Size  Location     Type
 28027 ;;                  1    wreg      unsigned char 
 28028 ;; Registers used:
 28029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28030 ;; Tracked objects:
 28031 ;;		On entry : 0/0
 28032 ;;		On exit  : 0/0
 28033 ;;		Unchanged: 0/0
 28034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28035 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28036 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28037 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28038 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28039 ;;Total ram usage:        9 bytes
 28040 ;; Hardware stack levels used:    1
 28041 ;; This function calls:
 28042 ;;		Nothing
 28043 ;; This function is called by:
 28044 ;;		i2_Byte_GetPair
 28045 ;; This function uses a non-reentrant model
 28046 ;;
 28047                           
 28048                           	psect	text148
 28049  0148BC                     __ptext148:
 28050                           	opt stack 0
 28051  0148BC                     i2_Byte_GetZone:
 28052                           	opt stack 14
 28053                           
 28054                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 28055                           
 28056                           ;incstack = 0
 28057  0148BC  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 28058  0148C0  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 28059  0148C4  0E00               	movlw	low (__mediumconst shr (0+16))
 28060  0148C6  6EF8               	movwf	tblptru,c
 28061  0148C8  0E0F               	movlw	(high __ramtop+-1)
 28062  0148CA  64F7               	cpfsgt	tblptrh,c
 28063  0148CC  D003               	bra	i2u533_47
 28064  0148CE  0008               	tblrd		*
 28065  0148D0  50F5               	movf	tablat,w,c
 28066  0148D2  D005               	bra	i2u533_40
 28067  0148D4                     i2u533_47:
 28068  0148D4  CFF6 FFE9          	movff	tblptrl,fsr0l
 28069  0148D8  CFF7 FFEA          	movff	tblptrh,fsr0h
 28070  0148DC  50EF               	movf	indf0,w,c
 28071  0148DE                     i2u533_40:
 28072  0148DE  6E09               	movwf	i2Byte_GetZone@Output,c
 28073                           
 28074                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 28075  0148E0  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 28076  0148E2  0D01               	mullw	1
 28077  0148E4  0E6D               	movlw	low _MASKS
 28078  0148E6  24F3               	addwf	prodl,w,c
 28079  0148E8  6EF6               	movwf	tblptrl,c
 28080  0148EA  0EFC               	movlw	high _MASKS
 28081  0148EC  20F4               	addwfc	prodh,w,c
 28082  0148EE  6EF7               	movwf	tblptrh,c
 28083  0148F0                     	if	1	;There are 3 active tblptr bytes
 28084  0148F0  6AF8               	clrf	tblptru,c
 28085  0148F2  0E00               	movlw	low (__mediumconst shr (0+16))
 28086  0148F4  22F8               	addwfc	tblptru,f,c
 28087  0148F6                     	endif
 28088  0148F6  0008               	tblrd		*
 28089  0148F8  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 28090                           
 28091                           ;Types.c: 68: UINT8 Offset = 0;
 28092  0148FC  0E00               	movlw	0
 28093  0148FE  6E08               	movwf	i2Byte_GetZone@Offset,c
 28094                           
 28095                           ;Types.c: 70: while (pChunk >= pMax)
 28096  014900  D003               	goto	i2l732
 28097  014902                     
 28098                           ;Types.c: 71: {
 28099                           ;Types.c: 72: pChunk -= pMax;
 28100  014902  5003               	movf	i2Byte_GetZone@pMax,w,c
 28101  014904  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 28102                           
 28103                           ;Types.c: 73: Offset += 1;
 28104  014906  2A08               	incf	i2Byte_GetZone@Offset,f,c
 28105  014908                     i2l732:
 28106  014908  5003               	movf	i2Byte_GetZone@pMax,w,c
 28107  01490A  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 28108  01490C  B0D8               	btfsc	status,0,c
 28109  01490E  D7F9               	goto	i2l733
 28110                           
 28111                           ;Types.c: 74: }
 28112                           ;Types.c: 75: pChunk *= pChunkSize;
 28113  014910  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 28114  014912  0204               	mulwf	i2Byte_GetZone@pChunk,c
 28115  014914  50F3               	movf	prodl,w,c
 28116  014916  6E04               	movwf	i2Byte_GetZone@pChunk,c
 28117                           
 28118                           ;Types.c: 76: pChunk += Offset;
 28119  014918  5008               	movf	i2Byte_GetZone@Offset,w,c
 28120  01491A  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 28121                           
 28122                           ;Types.c: 78: Output >>= pChunk;
 28123  01491C  2804               	incf	i2Byte_GetZone@pChunk,w,c
 28124  01491E  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 28125  014920  D002               	goto	i2u535_40
 28126  014922                     i2u535_45:
 28127  014922  90D8               	bcf	status,0,c
 28128  014924  3209               	rrcf	i2Byte_GetZone@Output,f,c
 28129  014926                     i2u535_40:
 28130  014926  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 28131  014928  D7FC               	goto	i2u535_45
 28132                           
 28133                           ;Types.c: 79: Output &= MASK;
 28134  01492A  5007               	movf	i2Byte_GetZone@MASK,w,c
 28135  01492C  1609               	andwf	i2Byte_GetZone@Output,f,c
 28136                           
 28137                           ;Types.c: 80: return Output;
 28138  01492E  5009               	movf	i2Byte_GetZone@Output,w,c
 28139  014930  0012               	return	
 28140  014932                     __end_ofi2_Byte_GetZone:
 28141                           	opt stack 0
 28142                           tosu	equ	0xFFF
 28143                           tosh	equ	0xFFE
 28144                           tosl	equ	0xFFD
 28145                           pclatu	equ	0xFFB
 28146                           pclath	equ	0xFFA
 28147                           tblptru	equ	0xFF8
 28148                           tblptrh	equ	0xFF7
 28149                           tblptrl	equ	0xFF6
 28150                           tablat	equ	0xFF5
 28151                           prodh	equ	0xFF4
 28152                           prodl	equ	0xFF3
 28153                           intcon	equ	0xFF2
 28154                           indf0	equ	0xFEF
 28155                           postinc0	equ	0xFEE
 28156                           fsr0h	equ	0xFEA
 28157                           fsr0l	equ	0xFE9
 28158                           wreg	equ	0xFE8
 28159                           indf1	equ	0xFE7
 28160                           postdec1	equ	0xFE5
 28161                           fsr1h	equ	0xFE2
 28162                           fsr1l	equ	0xFE1
 28163                           indf2	equ	0xFDF
 28164                           postinc2	equ	0xFDE
 28165                           postdec2	equ	0xFDD
 28166                           plusw2	equ	0xFDB
 28167                           fsr2h	equ	0xFDA
 28168                           fsr2l	equ	0xFD9
 28169                           status	equ	0xFD8
 28170                           
 28171 ;; *************** function i2_Byte_SetBit *****************
 28172 ;; Defined at:
 28173 ;;		line 32 in file "Library/Types.c"
 28174 ;; Parameters:    Size  Location     Type
 28175 ;;  pInput          2    0[COMRAM] PTR struct Byte
 28176 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 28177 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 28178 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 28179 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 28180 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 28181 ;;		 -> NULL(0), 
 28182 ;;  pBit            1    2[COMRAM] unsigned char 
 28183 ;;  pValue          1    3[COMRAM] unsigned char 
 28184 ;; Auto vars:     Size  Location     Type
 28185 ;;		None
 28186 ;; Return value:  Size  Location     Type
 28187 ;;                  1    wreg      void 
 28188 ;; Registers used:
 28189 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28190 ;; Tracked objects:
 28191 ;;		On entry : 0/0
 28192 ;;		On exit  : 0/0
 28193 ;;		Unchanged: 0/0
 28194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28195 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28197 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28198 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28199 ;;Total ram usage:        7 bytes
 28200 ;; Hardware stack levels used:    1
 28201 ;; This function calls:
 28202 ;;		Nothing
 28203 ;; This function is called by:
 28204 ;;		i2_Port_SetPin
 28205 ;; This function uses a non-reentrant model
 28206 ;;
 28207                           
 28208                           	psect	text149
 28209  0150E0                     __ptext149:
 28210                           	opt stack 0
 28211  0150E0                     i2_Byte_SetBit:
 28212                           	opt stack 16
 28213                           
 28214                           ;Types.c: 34: pValue &= 1;
 28215                           
 28216                           ;incstack = 0
 28217  0150E0  0E01               	movlw	1
 28218  0150E2  1604               	andwf	i2Byte_SetBit@pValue,f,c
 28219                           
 28220                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 28221  0150E4  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 28222  0150E8  0E01               	movlw	1
 28223  0150EA  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 28224  0150EC  2A05               	incf	??i2_Byte_SetBit,f,c
 28225  0150EE  D002               	goto	i2u699_44
 28226  0150F0                     i2u699_45:
 28227  0150F0  90D8               	bcf	status,0,c
 28228  0150F2  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 28229  0150F4                     i2u699_44:
 28230  0150F4  2E05               	decfsz	??i2_Byte_SetBit,f,c
 28231  0150F6  D7FC               	goto	i2u699_45
 28232  0150F8  5006               	movf	??i2_Byte_SetBit+1,w,c
 28233  0150FA  0AFF               	xorlw	255
 28234  0150FC  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 28235  0150FE  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 28236  015102  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 28237  015106  5007               	movf	??i2_Byte_SetBit+2,w,c
 28238  015108  16DF               	andwf	indf2,f,c
 28239                           
 28240                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 28241  01510A  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 28242  01510E  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 28243  015112  2A05               	incf	??i2_Byte_SetBit,f,c
 28244  015114  D002               	goto	i2u700_44
 28245  015116                     i2u700_45:
 28246  015116  90D8               	bcf	status,0,c
 28247  015118  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 28248  01511A                     i2u700_44:
 28249  01511A  2E05               	decfsz	??i2_Byte_SetBit,f,c
 28250  01511C  D7FC               	goto	i2u700_45
 28251  01511E  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 28252  015122  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 28253  015126  5006               	movf	??i2_Byte_SetBit+1,w,c
 28254  015128  12DF               	iorwf	indf2,f,c
 28255  01512A  0012               	return		;funcret
 28256  01512C                     __end_ofi2_Byte_SetBit:
 28257                           	opt stack 0
 28258                           tosu	equ	0xFFF
 28259                           tosh	equ	0xFFE
 28260                           tosl	equ	0xFFD
 28261                           pclatu	equ	0xFFB
 28262                           pclath	equ	0xFFA
 28263                           tblptru	equ	0xFF8
 28264                           tblptrh	equ	0xFF7
 28265                           tblptrl	equ	0xFF6
 28266                           tablat	equ	0xFF5
 28267                           prodh	equ	0xFF4
 28268                           prodl	equ	0xFF3
 28269                           intcon	equ	0xFF2
 28270                           indf0	equ	0xFEF
 28271                           postinc0	equ	0xFEE
 28272                           fsr0h	equ	0xFEA
 28273                           fsr0l	equ	0xFE9
 28274                           wreg	equ	0xFE8
 28275                           indf1	equ	0xFE7
 28276                           postdec1	equ	0xFE5
 28277                           fsr1h	equ	0xFE2
 28278                           fsr1l	equ	0xFE1
 28279                           indf2	equ	0xFDF
 28280                           postinc2	equ	0xFDE
 28281                           postdec2	equ	0xFDD
 28282                           plusw2	equ	0xFDB
 28283                           fsr2h	equ	0xFDA
 28284                           fsr2l	equ	0xFD9
 28285                           status	equ	0xFD8
 28286                           
 28287 ;; *************** function i2_MXK_SwitchTo *****************
 28288 ;; Defined at:
 28289 ;;		line 105 in file "Library/MXK.c"
 28290 ;; Parameters:    Size  Location     Type
 28291 ;;  pModule         1    wreg     enum E6927
 28292 ;; Auto vars:     Size  Location     Type
 28293 ;;  pModule         1    7[COMRAM] enum E6927
 28294 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 28295 ;; Return value:  Size  Location     Type
 28296 ;;                  1    wreg      unsigned char 
 28297 ;; Registers used:
 28298 ;;		wreg, status,2, status,0, cstack
 28299 ;; Tracked objects:
 28300 ;;		On entry : 0/0
 28301 ;;		On exit  : 0/0
 28302 ;;		Unchanged: 0/0
 28303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28305 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28307 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28308 ;;Total ram usage:        2 bytes
 28309 ;; Hardware stack levels used:    1
 28310 ;; Hardware stack levels required when called:    1
 28311 ;; This function calls:
 28312 ;;		i2_delay_us
 28313 ;; This function is called by:
 28314 ;;		i2_Motor_Step
 28315 ;; This function uses a non-reentrant model
 28316 ;;
 28317                           
 28318                           	psect	text150
 28319  015576                     __ptext150:
 28320                           	opt stack 0
 28321  015576                     i2_MXK_SwitchTo:
 28322                           	opt stack 16
 28323                           
 28324                           ;incstack = 0
 28325                           ;i2MXK_SwitchTo@pModule stored from wreg
 28326  015576  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 28327                           
 28328                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 28329  015578  5086               	movf	3974,w,c	;volatile
 28330  01557A  0B0F               	andlw	15
 28331  01557C  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 28332                           
 28333                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 28334  01557E  504B               	movf	_Bus_State,w,c
 28335  015580  A4D8               	btfss	status,2,c
 28336  015582  D002               	goto	i2l1730
 28337                           
 28338                           ;MXK.c: 110: return 0;
 28339  015584  0E00               	movlw	0
 28340  015586  0012               	return	
 28341  015588                     i2l1730:
 28342                           
 28343                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 28344  015588  0E00               	movlw	0
 28345  01558A  6E4B               	movwf	_Bus_State,c
 28346                           
 28347                           ;MXK.c: 114: if (CUR != pModule)
 28348  01558C  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 28349  01558E  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 28350  015590  B4D8               	btfsc	status,2,c
 28351  015592  D00A               	goto	i2l1732
 28352                           
 28353                           ;MXK.c: 115: {
 28354                           ;MXK.c: 116: PORTG &= ~(0xF);
 28355  015594  0EF0               	movlw	240
 28356  015596  1686               	andwf	3974,f,c	;volatile
 28357                           
 28358                           ;MXK.c: 117: PORTG |= pModule;
 28359  015598  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 28360  01559A  1286               	iorwf	3974,f,c	;volatile
 28361                           
 28362                           ;MXK.c: 120: delay_us(10);
 28363  01559C  0E00               	movlw	0
 28364  01559E  6E02               	movwf	i2delay_us@us+1,c
 28365  0155A0  0E0A               	movlw	10
 28366  0155A2  6E01               	movwf	i2delay_us@us,c
 28367  0155A4  ECD0  F0A9         	call	i2_delay_us	;wreg free
 28368  0155A8                     i2l1732:
 28369                           
 28370                           ;MXK.c: 121: }
 28371                           ;MXK.c: 122: return 1;
 28372  0155A8  0E01               	movlw	1
 28373  0155AA  0012               	return	
 28374  0155AC                     __end_ofi2_MXK_SwitchTo:
 28375                           	opt stack 0
 28376                           tosu	equ	0xFFF
 28377                           tosh	equ	0xFFE
 28378                           tosl	equ	0xFFD
 28379                           pclatu	equ	0xFFB
 28380                           pclath	equ	0xFFA
 28381                           tblptru	equ	0xFF8
 28382                           tblptrh	equ	0xFF7
 28383                           tblptrl	equ	0xFF6
 28384                           tablat	equ	0xFF5
 28385                           prodh	equ	0xFF4
 28386                           prodl	equ	0xFF3
 28387                           intcon	equ	0xFF2
 28388                           indf0	equ	0xFEF
 28389                           postinc0	equ	0xFEE
 28390                           fsr0h	equ	0xFEA
 28391                           fsr0l	equ	0xFE9
 28392                           wreg	equ	0xFE8
 28393                           indf1	equ	0xFE7
 28394                           postdec1	equ	0xFE5
 28395                           fsr1h	equ	0xFE2
 28396                           fsr1l	equ	0xFE1
 28397                           indf2	equ	0xFDF
 28398                           postinc2	equ	0xFDE
 28399                           postdec2	equ	0xFDD
 28400                           plusw2	equ	0xFDB
 28401                           fsr2h	equ	0xFDA
 28402                           fsr2l	equ	0xFD9
 28403                           status	equ	0xFD8
 28404                           
 28405 ;; *************** function i2_delay_us *****************
 28406 ;; Defined at:
 28407 ;;		line 255 in file "Library/Types.c"
 28408 ;; Parameters:    Size  Location     Type
 28409 ;;  us              2    0[COMRAM] unsigned short 
 28410 ;; Auto vars:     Size  Location     Type
 28411 ;;  delay_us        4    2[COMRAM] unsigned long 
 28412 ;; Return value:  Size  Location     Type
 28413 ;;                  1    wreg      void 
 28414 ;; Registers used:
 28415 ;;		wreg, status,2, status,0
 28416 ;; Tracked objects:
 28417 ;;		On entry : 0/0
 28418 ;;		On exit  : 0/0
 28419 ;;		Unchanged: 0/0
 28420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28421 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28422 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28424 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28425 ;;Total ram usage:        6 bytes
 28426 ;; Hardware stack levels used:    1
 28427 ;; This function calls:
 28428 ;;		Nothing
 28429 ;; This function is called by:
 28430 ;;		i2_MXK_SwitchTo
 28431 ;; This function uses a non-reentrant model
 28432 ;;
 28433                           
 28434                           	psect	text151
 28435  0153A0                     __ptext151:
 28436                           	opt stack 0
 28437  0153A0                     i2_delay_us:
 28438                           	opt stack 16
 28439                           
 28440                           ;Types.c: 256: unsigned long u;
 28441                           ;Types.c: 257: while (us--) {
 28442                           
 28443                           ;incstack = 0
 28444  0153A0  D016               	goto	i2u703_40
 28445  0153A2                     i2l9791:
 28446                           
 28447                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 28448  0153A2  0E00               	movlw	0
 28449  0153A4  6E03               	movwf	i2delay_us@u,c
 28450  0153A6  0E00               	movlw	0
 28451  0153A8  6E04               	movwf	i2delay_us@u+1,c
 28452  0153AA  0E00               	movlw	0
 28453  0153AC  6E05               	movwf	i2delay_us@u+2,c
 28454  0153AE  0E00               	movlw	0
 28455  0153B0  6E06               	movwf	i2delay_us@u+3,c
 28456  0153B2                     i2l9793:
 28457  0153B2  5003               	movf	i2delay_us@u,w,c
 28458  0153B4  1004               	iorwf	i2delay_us@u+1,w,c
 28459  0153B6  1005               	iorwf	i2delay_us@u+2,w,c
 28460  0153B8  1006               	iorwf	i2delay_us@u+3,w,c
 28461  0153BA  A4D8               	btfss	status,2,c
 28462  0153BC  D008               	goto	i2u703_40
 28463  0153BE  F000               	nop		; ;# 
 28464  0153C0  0E01               	movlw	1
 28465  0153C2  2603               	addwf	i2delay_us@u,f,c
 28466  0153C4  0E00               	movlw	0
 28467  0153C6  2204               	addwfc	i2delay_us@u+1,f,c
 28468  0153C8  2205               	addwfc	i2delay_us@u+2,f,c
 28469  0153CA  2206               	addwfc	i2delay_us@u+3,f,c
 28470  0153CC  D7F2               	goto	i2l9793
 28471  0153CE                     i2u703_40:
 28472  0153CE  0601               	decf	i2delay_us@us,f,c
 28473  0153D0  A0D8               	btfss	status,0,c
 28474  0153D2  0602               	decf	i2delay_us@us+1,f,c
 28475  0153D4  2801               	incf	i2delay_us@us,w,c
 28476  0153D6  E1E5               	bnz	i2l9791
 28477  0153D8  2802               	incf	i2delay_us@us+1,w,c
 28478  0153DA  B4D8               	btfsc	status,2,c
 28479  0153DC  0012               	return	
 28480  0153DE  D7E1               	goto	i2l832
 28481  0153E0                     __end_ofi2_delay_us:
 28482                           	opt stack 0
 28483                           tosu	equ	0xFFF
 28484                           tosh	equ	0xFFE
 28485                           tosl	equ	0xFFD
 28486                           pclatu	equ	0xFFB
 28487                           pclath	equ	0xFFA
 28488                           tblptru	equ	0xFF8
 28489                           tblptrh	equ	0xFF7
 28490                           tblptrl	equ	0xFF6
 28491                           tablat	equ	0xFF5
 28492                           prodh	equ	0xFF4
 28493                           prodl	equ	0xFF3
 28494                           intcon	equ	0xFF2
 28495                           indf0	equ	0xFEF
 28496                           postinc0	equ	0xFEE
 28497                           fsr0h	equ	0xFEA
 28498                           fsr0l	equ	0xFE9
 28499                           wreg	equ	0xFE8
 28500                           indf1	equ	0xFE7
 28501                           postdec1	equ	0xFE5
 28502                           fsr1h	equ	0xFE2
 28503                           fsr1l	equ	0xFE1
 28504                           indf2	equ	0xFDF
 28505                           postinc2	equ	0xFDE
 28506                           postdec2	equ	0xFDD
 28507                           plusw2	equ	0xFDB
 28508                           fsr2h	equ	0xFDA
 28509                           fsr2l	equ	0xFD9
 28510                           status	equ	0xFD8
 28511                           
 28512 ;; *************** function i2_MXK_Release *****************
 28513 ;; Defined at:
 28514 ;;		line 130 in file "Library/MXK.c"
 28515 ;; Parameters:    Size  Location     Type
 28516 ;;		None
 28517 ;; Auto vars:     Size  Location     Type
 28518 ;;		None
 28519 ;; Return value:  Size  Location     Type
 28520 ;;                  1    wreg      unsigned char 
 28521 ;; Registers used:
 28522 ;;		wreg, status,2, status,0
 28523 ;; Tracked objects:
 28524 ;;		On entry : 0/0
 28525 ;;		On exit  : 0/0
 28526 ;;		Unchanged: 0/0
 28527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28532 ;;Total ram usage:        0 bytes
 28533 ;; Hardware stack levels used:    1
 28534 ;; This function calls:
 28535 ;;		Nothing
 28536 ;; This function is called by:
 28537 ;;		i2_Motor_Step
 28538 ;; This function uses a non-reentrant model
 28539 ;;
 28540                           
 28541                           	psect	text152
 28542  015B54                     __ptext152:
 28543                           	opt stack 0
 28544  015B54                     i2_MXK_Release:
 28545                           	opt stack 17
 28546                           
 28547                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 28548                           
 28549                           ;incstack = 0
 28550  015B54  0E01               	movlw	1
 28551  015B56  6E4B               	movwf	_Bus_State,c
 28552                           
 28553                           ;MXK.c: 135: return 1;
 28554                           ;	Return value of i2_MXK_Release is never used
 28555  015B58  0012               	return	
 28556  015B5A                     __end_ofi2_MXK_Release:
 28557                           	opt stack 0
 28558                           tosu	equ	0xFFF
 28559                           tosh	equ	0xFFE
 28560                           tosl	equ	0xFFD
 28561                           pclatu	equ	0xFFB
 28562                           pclath	equ	0xFFA
 28563                           tblptru	equ	0xFF8
 28564                           tblptrh	equ	0xFF7
 28565                           tblptrl	equ	0xFF6
 28566                           tablat	equ	0xFF5
 28567                           prodh	equ	0xFF4
 28568                           prodl	equ	0xFF3
 28569                           intcon	equ	0xFF2
 28570                           indf0	equ	0xFEF
 28571                           postinc0	equ	0xFEE
 28572                           fsr0h	equ	0xFEA
 28573                           fsr0l	equ	0xFE9
 28574                           wreg	equ	0xFE8
 28575                           indf1	equ	0xFE7
 28576                           postdec1	equ	0xFE5
 28577                           fsr1h	equ	0xFE2
 28578                           fsr1l	equ	0xFE1
 28579                           indf2	equ	0xFDF
 28580                           postinc2	equ	0xFDE
 28581                           postdec2	equ	0xFDD
 28582                           plusw2	equ	0xFDB
 28583                           fsr2h	equ	0xFDA
 28584                           fsr2l	equ	0xFD9
 28585                           status	equ	0xFD8
 28586                           
 28587 ;; *************** function i2_MXK_Queue *****************
 28588 ;; Defined at:
 28589 ;;		line 144 in file "Library/MXK.c"
 28590 ;; Parameters:    Size  Location     Type
 28591 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 28592 ;;		 -> Absolute function(1), Motor_Step(1), 
 28593 ;; Auto vars:     Size  Location     Type
 28594 ;;		None
 28595 ;; Return value:  Size  Location     Type
 28596 ;;                  1    wreg      void 
 28597 ;; Registers used:
 28598 ;;		wreg, status,2, status,0
 28599 ;; Tracked objects:
 28600 ;;		On entry : 0/0
 28601 ;;		On exit  : 0/0
 28602 ;;		Unchanged: 0/0
 28603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28604 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28607 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28608 ;;Total ram usage:        3 bytes
 28609 ;; Hardware stack levels used:    1
 28610 ;; This function calls:
 28611 ;;		Nothing
 28612 ;; This function is called by:
 28613 ;;		i2_Motor_Step
 28614 ;; This function uses a non-reentrant model
 28615 ;;
 28616                           
 28617                           	psect	text153
 28618  015AF2                     __ptext153:
 28619                           	opt stack 0
 28620  015AF2                     i2_MXK_Queue:
 28621                           	opt stack 17
 28622                           
 28623                           ;MXK.c: 146: lQueue = pCallback;
 28624                           
 28625                           ;incstack = 0
 28626  015AF2  C001  F0DD         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 28627  015AF6  C002  F0DE         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 28628  015AFA  C003  F0DF         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 28629  015AFE  0012               	return		;funcret
 28630  015B00                     __end_ofi2_MXK_Queue:
 28631                           	opt stack 0
 28632                           tosu	equ	0xFFF
 28633                           tosh	equ	0xFFE
 28634                           tosl	equ	0xFFD
 28635                           pclatu	equ	0xFFB
 28636                           pclath	equ	0xFFA
 28637                           tblptru	equ	0xFF8
 28638                           tblptrh	equ	0xFF7
 28639                           tblptrl	equ	0xFF6
 28640                           tablat	equ	0xFF5
 28641                           prodh	equ	0xFF4
 28642                           prodl	equ	0xFF3
 28643                           intcon	equ	0xFF2
 28644                           indf0	equ	0xFEF
 28645                           postinc0	equ	0xFEE
 28646                           fsr0h	equ	0xFEA
 28647                           fsr0l	equ	0xFE9
 28648                           wreg	equ	0xFE8
 28649                           indf1	equ	0xFE7
 28650                           postdec1	equ	0xFE5
 28651                           fsr1h	equ	0xFE2
 28652                           fsr1l	equ	0xFE1
 28653                           indf2	equ	0xFDF
 28654                           postinc2	equ	0xFDE
 28655                           postdec2	equ	0xFDD
 28656                           plusw2	equ	0xFDB
 28657                           fsr2h	equ	0xFDA
 28658                           fsr2l	equ	0xFD9
 28659                           status	equ	0xFD8
 28660                           tosu	equ	0xFFF
 28661                           tosh	equ	0xFFE
 28662                           tosl	equ	0xFFD
 28663                           pclatu	equ	0xFFB
 28664                           pclath	equ	0xFFA
 28665                           tblptru	equ	0xFF8
 28666                           tblptrh	equ	0xFF7
 28667                           tblptrl	equ	0xFF6
 28668                           tablat	equ	0xFF5
 28669                           prodh	equ	0xFF4
 28670                           prodl	equ	0xFF3
 28671                           intcon	equ	0xFF2
 28672                           indf0	equ	0xFEF
 28673                           postinc0	equ	0xFEE
 28674                           fsr0h	equ	0xFEA
 28675                           fsr0l	equ	0xFE9
 28676                           wreg	equ	0xFE8
 28677                           indf1	equ	0xFE7
 28678                           postdec1	equ	0xFE5
 28679                           fsr1h	equ	0xFE2
 28680                           fsr1l	equ	0xFE1
 28681                           indf2	equ	0xFDF
 28682                           postinc2	equ	0xFDE
 28683                           postdec2	equ	0xFDD
 28684                           plusw2	equ	0xFDB
 28685                           fsr2h	equ	0xFDA
 28686                           fsr2l	equ	0xFD9
 28687                           status	equ	0xFD8
 28688                           
 28689                           	psect	text154
 28690  000000                     __ptext154:
 28691                           	opt stack 0
 28692                           tosu	equ	0xFFF
 28693                           tosh	equ	0xFFE
 28694                           tosl	equ	0xFFD
 28695                           pclatu	equ	0xFFB
 28696                           pclath	equ	0xFFA
 28697                           tblptru	equ	0xFF8
 28698                           tblptrh	equ	0xFF7
 28699                           tblptrl	equ	0xFF6
 28700                           tablat	equ	0xFF5
 28701                           prodh	equ	0xFF4
 28702                           prodl	equ	0xFF3
 28703                           intcon	equ	0xFF2
 28704                           indf0	equ	0xFEF
 28705                           postinc0	equ	0xFEE
 28706                           fsr0h	equ	0xFEA
 28707                           fsr0l	equ	0xFE9
 28708                           wreg	equ	0xFE8
 28709                           indf1	equ	0xFE7
 28710                           postdec1	equ	0xFE5
 28711                           fsr1h	equ	0xFE2
 28712                           fsr1l	equ	0xFE1
 28713                           indf2	equ	0xFDF
 28714                           postinc2	equ	0xFDE
 28715                           postdec2	equ	0xFDD
 28716                           plusw2	equ	0xFDB
 28717                           fsr2h	equ	0xFDA
 28718                           fsr2l	equ	0xFD9
 28719                           status	equ	0xFD8
 28720                           
 28721                           	psect	rparam
 28722  0000                     tosu	equ	0xFFF
 28723                           tosh	equ	0xFFE
 28724                           tosl	equ	0xFFD
 28725                           pclatu	equ	0xFFB
 28726                           pclath	equ	0xFFA
 28727                           tblptru	equ	0xFF8
 28728                           tblptrh	equ	0xFF7
 28729                           tblptrl	equ	0xFF6
 28730                           tablat	equ	0xFF5
 28731                           prodh	equ	0xFF4
 28732                           prodl	equ	0xFF3
 28733                           intcon	equ	0xFF2
 28734                           indf0	equ	0xFEF
 28735                           postinc0	equ	0xFEE
 28736                           fsr0h	equ	0xFEA
 28737                           fsr0l	equ	0xFE9
 28738                           wreg	equ	0xFE8
 28739                           indf1	equ	0xFE7
 28740                           postdec1	equ	0xFE5
 28741                           fsr1h	equ	0xFE2
 28742                           fsr1l	equ	0xFE1
 28743                           indf2	equ	0xFDF
 28744                           postinc2	equ	0xFDE
 28745                           postdec2	equ	0xFDD
 28746                           plusw2	equ	0xFDB
 28747                           fsr2h	equ	0xFDA
 28748                           fsr2l	equ	0xFD9
 28749                           status	equ	0xFD8
 28750                           
 28751                           	psect	temp
 28752  000051                     btemp:
 28753                           	opt stack 0
 28754  000051                     	ds	1
 28755  0000                     int$flags	set	btemp
 28756  0000                     wtemp6	set	btemp+1
 28757                           tosu	equ	0xFFF
 28758                           tosh	equ	0xFFE
 28759                           tosl	equ	0xFFD
 28760                           pclatu	equ	0xFFB
 28761                           pclath	equ	0xFFA
 28762                           tblptru	equ	0xFF8
 28763                           tblptrh	equ	0xFF7
 28764                           tblptrl	equ	0xFF6
 28765                           tablat	equ	0xFF5
 28766                           prodh	equ	0xFF4
 28767                           prodl	equ	0xFF3
 28768                           intcon	equ	0xFF2
 28769                           indf0	equ	0xFEF
 28770                           postinc0	equ	0xFEE
 28771                           fsr0h	equ	0xFEA
 28772                           fsr0l	equ	0xFE9
 28773                           wreg	equ	0xFE8
 28774                           indf1	equ	0xFE7
 28775                           postdec1	equ	0xFE5
 28776                           fsr1h	equ	0xFE2
 28777                           fsr1l	equ	0xFE1
 28778                           indf2	equ	0xFDF
 28779                           postinc2	equ	0xFDE
 28780                           postdec2	equ	0xFDD
 28781                           plusw2	equ	0xFDB
 28782                           fsr2h	equ	0xFDA
 28783                           fsr2l	equ	0xFD9
 28784                           status	equ	0xFD8


Data Sizes:
    Strings     327
    Constant    806
    Data        37
    BSS         830
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160    125     150
    BANK1           256      0     251
    BANK2           256      0     251
    BANK3           256     24      24
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[6]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_33(CODE[10]), STR_32(CODE[3]), STR_31(CODE[24]), STR_30(CODE[3]), 
		 -> STR_29(CODE[12]), STR_28(CODE[12]), STR_27(CODE[12]), STR_26(CODE[12]), 
		 -> STR_25(CODE[16]), STR_24(CODE[3]), STR_23(CODE[12]), STR_22(CODE[5]), 
		 -> STR_21(CODE[3]), STR_20(CODE[8]), STR_19(CODE[3]), STR_18(CODE[2]), 
		 -> STR_17(CODE[4]), STR_16(CODE[3]), STR_15(CODE[39]), STR_14(CODE[42]), 
		 -> STR_13(CODE[16]), STR_12(CODE[3]), STR_11(CODE[21]), STR_10(CODE[3]), 
		 -> STR_9(CODE[19]), STR_8(CODE[28]), STR_7(CODE[20]), STR_6(CODE[3]), 
		 -> STR_5(CODE[17]), STR_4(CODE[12]), STR_3(CODE[3]), STR_2(CODE[19]), 
		 -> STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK1[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortE(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_ADCAverage
    _movement1->_Travel
    _Travel->_Console_Render
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _Turn->_eusartSend
    _Get_VirtualWall_State->_eusartSend
    _Drive->_eusartSend
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _Robot_Init->_UpdateDistance
    _UpdateDistance->_eusartSend
    _Robot_Stop->_eusartSend
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _Create_Maze->___wmul
    _ADCAverage->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->___fladd
    _eval_poly->___fladd
    ___flmul->___xxtofl
    ___flsub->___fladd
    ___fladd->___flneg
    ___flneg->___flmul
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_ADCAverage

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                84    84      0 1456915
                                            121 BANK0      4     4      0
                         _ADCAverage
                       _Console_Init
                     _Console_Render
                        _Create_Maze
                    _FunctInitButton
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                         _HMI_Render
                    _HMI_RightSwitch *
                      _HMI_SetNumber
                       _HMI_UpSwitch *
                         _ISR_Enable
                            _InitADC
            _InitSerialCommunication
                        _Init_Timer0
                           _LCD_Init
                           _LED_Init
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                     _MXK_TestButton *
                         _Robot_Init
                          _movement1
                             _printf
 ---------------------------------------------------------------------------------
 (1) _movement1                                            0     0      0  100151
                     _Console_Render
                             _Travel
                             _printf
 ---------------------------------------------------------------------------------
 (2) _Travel                                              20    12      8   53692
                                             44 BANK0     20    12      8
                     _Console_Render
                              _Drive
              _Get_VirtualWall_State
                         _Robot_Stop
                               _Turn
                     _UpdateDistance
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              23    17      6    9612
                                             21 BANK0     14     8      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Turn                                                10     4      6     778
                                              1 BANK0     10     4      6
                         _Robot_Stop
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _Get_VirtualWall_State                                5     3      2      65
                                              1 BANK0      5     3      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _Drive                                                4     0      4     961
                                              1 BANK0      4     0      4
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _Console_Render                                      11    11      0   36847
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (4) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _LCD_DrawField                                       17     7     10   18040
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (5) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _Robot_Init                                           0     0      0      93
                         _Robot_Stop
                     _UpdateDistance
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _UpdateDistance                                       6     4      2      31
                                              1 BANK0      6     4      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (4) _eusartRec                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Robot_Stop                                           0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (4) _eusartSend                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  363376
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  292948
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (7) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  262877
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   95501
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    2382
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _Init_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSerialCommunication                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0   84709
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84709
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   37341
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Create_Maze                                         94    94      0    2563
                                              6 BANK0     94    94      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2056
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _ADCAverage                                          26    26      0  108759
                                            119 BANK0      2     2      0
                                              0 BANK3     24    24      0
                       _FunctReadADC
                         _HMI_Render
                      _HMI_SetNumber
                            ___awdiv
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 21    13      8   85828
                                             98 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     2      4   27880
                                             79 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 11     7      4   45966
                                             87 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                8     2      6     663
                                             79 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                               10     6      4   11815
                                             73 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4    1844
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4    1097
                                             63 BANK0     10     6      4
                            ___fladd (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flge                                              12     4      8    1482
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           16     8      8   12869
                                             63 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             25    17      8    5761
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    6575
                                             63 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    5942
                                             43 BANK0     20    12      8
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     673
                                             39 BANK0      4     0      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _HMI_SetNumber                                        2     0      2    4246
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (2) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (3) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (3) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (2) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (7) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _FunctReadADC                                         2     0      2     214
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCAverage
     _FunctReadADC
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     ___awdiv
     ___fladd
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flmul
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flneg
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _pow
       ___flge
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _exp
         ___fldiv
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _floor
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flge
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
       _log
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _frexp
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _Create_Maze
     ___wmul
   _FunctInitButton
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_Render *
     _OutSeg
       _SPI_Send
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_SetNumber *
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _HMI_UpSwitch *
     _Port_GetPin
   _ISR_Enable *
   _InitADC *
   _InitSerialCommunication *
   _Init_Timer0 *
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _LED_Init *
     _LED_Set
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_TestButton *
     _Port_GetPin
   _Robot_Init *
     _Robot_Stop
       _eusartSend
     _UpdateDistance
       _eusartRec
       _eusartSend
     _eusartSend
   _movement1 *
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _Travel
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _Drive
         _eusartSend
       _Get_VirtualWall_State
         _eusartRec
         _eusartSend
       _Robot_Stop
         _eusartSend
       _Turn
         _Robot_Stop
           _eusartSend
         _eusartRec
         _eusartSend
       _UpdateDistance
         _eusartRec
         _eusartSend
       ___wmul
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _printf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     18      18      11        9.4%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FB       9       98.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FB       7       98.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     7D      96       5       93.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2F4      12        0.0%
DATA                 0      0     420       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu May 17 17:05:23 2018

                          i2_Timer0_Stop 5B4E                         SPI_Init@pChannel 0091  
             __size_of_MXK_BlockSwitchTo 0038                             i2_Motor_Step 38E4  
                                      _A 004C                                        l8 3D50  
                           ___fldiv@aexp 0078                             ___fldiv@bexp 0077  
                                      _a 004D                                        _i 014B  
                                      _j 014A                                        _l 004F  
                                      _u 0149                                        _w 0050  
                                      _x 0134                             ___fldiv@sign 006C  
                                     l11 32C0                                       l12 32AE  
                                     l90 2E50                                       l87 2DCA  
                    __size_of_ADCAverage 02D4                                       l89 2E2A  
                       ??_UpdateDistance 0063                             ___awdiv@sign 0065  
                    ___wmul@multiplicand 0062                            Travel@Req_Dir 009E  
                          _HMI_DIPSwitch 5A22                       LCD_DrawField@pSize 0078  
                     LCD_DrawField@count 007E                        ?_Event_TestButton 0001  
                       i2_Timer0_Restart 5B0C                                      l120 4252  
                                    l121 4268                                      l122 427E  
                                    l220 4ED8                                      l117 4294  
                                    l221 4EA8                                      l118 423E  
                                    l230 5194                                      l222 4EE8  
                                    l223 4EC0                              ?_LED_Toggle 0001  
                                    l234 538E                                      l235 5366  
                                    l227 51AC                                      l403 2788  
                                    l412 24A8                                      l228 517C  
                                    l340 43DA                                      l404 2728  
                                    l421 2444                                      l413 235A  
                                    l237 537A                                      l341 43E4  
                                    l405 27B8                            ??_Console_Tab 0068  
                                    l414 24C4                                      l430 3C80  
                                    l350 44A8                                      l342 43EE  
                                    l510 1E26                                      l406 2740  
                                    l415 237C                                      l351 4456  
                                    l343 43F8                                      l511 1F1C  
                                    l407 2758                                      l183 464C  
                                    l600 000C                                      l432 3CA6  
                                    l344 4402                                      l512 1E46  
                                    l408 2770                                      l184 462C  
                                    l417 23E0                                      l601 015E  
                                    l433 3CD2                                      l353 4462  
                                    l337 4420                                      l345 440C  
                                    l610 01D6                                      l602 0038  
                                    l354 446C                                      l346 4416  
                                    l338 43CE                                      l370 437A  
                                    l611 021C                                      l603 016E  
                                    l427 3CFA                                      l355 4476  
                                    l363 4398                                      l371 4384  
                                    l531 14DC                              ?_HMI_GetBar 0001  
                                    l612 0262                                      l604 00C8  
                                    l356 4480                                      l372 438E  
                                    l364 4346                                      l532 14FE  
                                    l516 1E86                                      l357 448A  
                                    l509 1F02                                      l614 0334  
                                    l358 4494                                      l366 4352  
                                    l526 151E                                      l615 032C  
                                    l607 02A8                                      l359 449E  
                                    l367 435C                                      l519 1EC6  
                                    l616 0346                                      l608 0190  
                                    l368 4366                                      l528 153C  
                                    l393 50DC                                      l617 0330  
                                    l609 02C6                                      l369 4370  
                                    l529 14BE                                      l483 1AE6  
                                    l900 15F8                                      l732 47A4  
                                    l476 1BAE                                      l901 15FC  
                                    l733 479E                                      l389 4D3C  
                                    l477 1A3E                                      l397 535C  
                                    l910 1620                                      l902 1600  
                                    l726 42DC                                      l478 1BCA  
                                    l486 1B4A                                      l654 576A  
                                    l911 1624                                      l903 1604  
                                    l727 42D6                                      l479 1A82  
                                    l655 5762                                      l912 1628  
                                    l904 1608                                      l824 4DA0  
                                    l832 5298                                      l681 4A1E  
                                    l913 162C                                      l905 160C  
                                    l921 4F36                                      l673 5698  
                                    l657 5766                                      l914 1630  
                                    l906 1610                                      l922 4F06  
                                    l930 3BDE                                      l915 1634  
                                    l907 1614                                      l819 4C16  
                                    l684 4A34                                      l916 1638  
                                    l908 1618                                      l860 1558  
                                    l853 1640                                      l917 163C  
                                    l909 161C                                      l861 155C  
                                    l781 5634                                      l597 0016  
                                    l678 4A5A                                      l686 4A44  
                                    l870 1580                                      l862 1560  
                                    l854 1544                                      l598 0002  
                                    l679 4A0E                                      l871 1584  
                                    l863 1564                                      l599 0026  
                                    l880 15A8                                      l872 1588  
                                    l864 1568                                      l856 1548  
                                    l928 3C50                                      l776 54F2  
                                    l881 15AC                                      l873 158C  
                                    l865 156C                                      l857 154C  
                                    l929 3C28                                      l890 15D0  
                                    l882 15B0                                      l874 1590  
                                    l866 1570                                      l858 1550  
                                    l891 15D4                                      l883 15B4  
                                    l875 1594                                      l867 1574  
                                    l859 1554                                      l892 15D8  
                                    l884 15B8                                      l876 1598  
                                    l868 1578                                      l893 15DC  
                                    l885 15BC                                      l877 159C  
                                    l869 157C                                      l894 15E0  
                                    l886 15C0                                      l878 15A0  
                                    l990 49B6                                      l895 15E4  
                                    l887 15C4                                      l879 15A4  
                                    l983 46BC                                      l896 15E8  
                                    l888 15C8                                      l976 4A8E  
                                    l992 49C2                                      l984 4662  
                                    l897 15EC                                      l889 15CC  
                                    l985 46BA                                      l898 15F0  
                                    l978 4A9A                                      l899 15F4  
                                    l997 5004                                      l999 5022  
                                    _RA2 007C02                                      _RA3 007C03  
                                    _RD5 007C1D                                      _RD7 007C1F  
                                    _PR2 000FCB                                      _exp 17C2  
                                    _log 27D0                                      _mod 012E  
                                    _val 002F                                      _pow 1C48  
                                    _top 0049                              ?_HMI_SetBar 0001  
                     ??_Event_TestButton 0079                             _Word_GetPair 5614  
                                    prod 000FF3                              ?_HMI_Render 0001  
                    MXK_SwitchTo@pModule 0067                                      tosl 000FFD  
                                    wreg 000FE8                       Console_MakeField@x 0070  
                     Console_MakeField@y 0071                               _TXSTA1bits 000FAD  
                           Console_Tab@c 006F                             Console_Tab@i 006E  
                    LCD_DrawField@pField 0072                             Console_Tab@t 006D  
                           ___flmul@aexp 007B                             ___flmul@bexp 0080  
                             i2_delay_us 53A0                     Port_Set@TypeRequired 0082  
                           ___flmul@sign 007A                             ___flmul@temp 0085  
                           ___flmul@prod 0081                        Console_FormFeed@x 0062  
                      Console_FormFeed@y 0063                      LCD_DrawField@pPoint 0074  
                         ?_LCD_DrawField 0072                    Port_SetPinType@Output 008A  
                        Port_SetPin@Type 0073                          Port_SetPin@pPin 0071  
                          ?_Byte_GetPair 0069                          __end_of_LED_Set 51BE  
                __size_ofi2_Word_GetPair 0030                            i2_Port_SetPin 3DC8  
                           ___fltol@exp1 00A8                             _Word_SetPair 54CE  
                                   l1000 503A                                     l1010 41CE  
                                   l1004 4E24                            ?_Byte_GetZone 0060  
                                   l1005 4E4A                                     l1200 4062  
                                   l1040 2C0C                                     l1201 40AA  
                                   l1009 41DA                                     l1041 2C12  
                                   l1202 40BE                                     l1042 2C18  
                                   l1043 2C1E                                     l1204 40E2  
                                   l1036 2D1A                                     l1044 2C24  
                                   l1205 40CE                                     l1045 2C2A  
                                   l1037 2C06                                     l1062 213C  
                                   l1207 40F0                                     l1063 216A  
                                   l1047 2CA8                                     l3000 0604  
                                   l1056 2012                                     l3001 05E6  
                                   l1153 265A                                     l1057 218A  
                                   l2201 2304                                     l1146 494E  
                                   l3010 069E                                     l1082 3ECC  
                                   l1058 2018                                     l2202 232E  
                                   l1059 203C                                     l3012 06C2  
                                   l1084 3ED4                                     l3013 06E0  
                                   l3021 2B2E                                     l1077 3EA0  
                                   l1158 5574                                     l3022 2B22  
                                   l2310 0DA8                                     l2303 543A  
                                   l3007 063C                                     l1079 3EAC  
                                   l3032 2BBC                                     l3024 2B6C  
                                   l3009 0680                                     l3033 2BEE  
                                   l3025 2B54                                     l3017 2AEE  
                                   l2306 544A                                     l3018 2AFE  
                                   l3050 182A                                     l2402 349C  
                                   l3027 2B9E                                     l3019 2B1C  
                                   l3051 1872                                     l3028 2B92  
                                   l3060 35FA                                     l3052 18A8  
                                   l3053 1A24                                     l3062 362A  
                                   l3054 19EE                                     l1630 3742  
                                   l3063 36C4                                     l1631 3792  
                                   l3072 3A04                                     l3048 17E2  
                                   l1632 377C                                     l2361 513E  
                                   l3074 3A52                                     l3090 27F4  
                                   l2290 31C2                                     l1730 5470  
                                   l2362 514E                                     l2450 2A82  
                                   l2442 29B6                                     l2194 21E8  
                                   l3059 360C                                     l1627 37D2  
                                   l2451 2A2E                                     l2443 2968  
                                   l2435 2950                                     l3068 3FE8  
                                   l3076 3A8C                                     l3092 281E  
                                   l2292 31DA                                     l1724 5514  
                                   l1732 5490                                     l1628 37C8  
                                   l2444 297C                                     l2436 2960  
                                   l2380 0B8E                                     l2196 2290  
                                   l3077 3A7C                                     l1629 375A  
                                   l2445 29E0                                     l2437 2984  
                                   l2381 0B10                                     l2197 22A2  
                                   l2630 4546                                     l2622 44EE  
                                   l2286 313C                                     l1726 553C  
                                   l2198 22B4                                     l2631 4554  
                                   l2623 44FE                                     l1735 5966  
                                   l2375 47EA                                     l2199 22C6  
                                   l2288 3154                                     l2384 0B6A  
                                   l2625 451C                                     l2297 5236  
                                   l2449 2A28                                     l2393 0CD6  
                                   l2626 4514                                     l3098 38C8  
                                   l2810 45D0                                     l2298 5216  
                                   l2386 0BA4                                     l3099 3830  
                                   l1827 2EFC                                     l2395 0CE4  
                                   l2387 0CB4                                     l2379 0A84  
                                   l1828 2F18                                     l2388 0C8C  
                                   l2629 453C                                     l2661 56C4  
                                   l2805 458E                                     l2397 0CF4  
                                   l2389 0C42                                     l2910 0848  
                                   l2654 34D4                                     l2806 4582  
                                   l2911 0826                                     l2903 0770  
                                   l2655 3508                                     l2399 0D04  
                                   l2920 0890                                     l2912 0834  
                                   l2904 076C                                     l2656 3546  
                                   l2921 0894                                     l2913 0838  
                                   l2657 3584                                     l2809 45C2  
                                   l1873 560C                                     l2906 07CC  
                                   l2931 0978                                     l2907 0790  
                                   l2924 092E                                     l2916 08A6  
                                   l2692 3B78                                     l2684 3AE8  
                                   l2941 09E8                                     l2933 0982  
                                   l2917 086C                                     l2693 3B6C  
                                   l2862 4F8A                                     l2926 093E  
                                   l2686 3B54                                     l2863 4F94  
                                   l2695 3B94                                     l2687 3B44  
                                   l2872 530C                                     l2960 104C  
                                   l2873 5316                                     l2945 0A0E  
                                   l2929 0962                                     l2858 4F6A  
                                   l2962 1096                                     l2946 0A16  
                                   l2938 09A2                                     l2859 4F62  
                                   l2955 1010                                     l2947 0A18  
                                   l2891 1CC0                                     l2868 52F4  
                                   l2972 11A0                                     l2964 10BE  
                                   l2956 100C                                     l2892 1D62  
                                   l2869 52EC                                     l2981 121C  
                                   l2973 1182                                     l2965 116C  
                                   l2893 1D38                                     l2982 1240  
                                   l2966 111C                                     l2990 03D2  
                                   l2894 1E0C                                     l2983 126A  
                                   l2967 1144                                     l2959 1050  
                                   l2991 03E6                                     l2984 1276  
                                   l2888 1CA2                                     l2985 1278  
                                   l2969 116A                                     l2993 0416  
                                   l2889 1C8E                                     l2898 0728  
                                   l2994 0412                                     l2979 11D8  
                                   l2899 0724                                     l2995 0426  
                                   l2996 0444                                     ?_exp 00B7  
                                   l2989 03D6                                     ?_log 00AF  
                         ??_Console_Init 0060                                     _ADON 007E10  
                  Port_SetPinType@pInput 0086                                     ?_pow 00C2  
                         Travel@Test_ADC 0090                                     STR_1 FFFB  
                                   STR_2 FF65                                     STR_4 FFD4  
                                   STR_5 FF8B                                     STR_7 FF51  
                                   STR_8 FF08                                     STR_9 FF78  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     _LATD 000F8C  
                                   _LATE 000F8D                                     _LATF 000F8E  
            __size_of_MXK_InitTestButton 0018                                     _LATG 000F8F  
                    __end_of_GetPortPORT 44D8                                     _PIR1 000F9E  
                                   _PIR2 000FA1                                     _PIR3 000FA4  
                    __end_of_GetPortTRIS 43C8                                     _SPI1 02C8  
                                   _SPI2 0186                                     u9750 4778  
                                   u9830 49F2                                     u9840 49F6  
                                   u9770 47C2                                     u9914 4FB4  
                                   u9915 4FB0                                     u9924 4FDC  
                                   u9757 476E                                     u9925 4FD8  
                                   u9775 47BE                                     u9855 5AA8  
                                   u9944 4304                                     u9880 4BC4  
                                   u9856 5AAA                                     u9960 4E20  
                                   _TMR0 000FD6                                     u9945 4300  
                                   u9954 432C                                     u9970 4E42  
                                   u9955 4328                                     _gISR 0108  
                     Event_DIPSwitch@Bar 007A                            ??_Byte_GetBit 0063  
                                   _Turn 47D0                       SPI_MaxSpeed@pInput 006F  
                          ?_Byte_SetByte 0060                            ?_Byte_SetPair 006B  
                        __end_of_SPI_DCS 56A6                                     _main 21A2  
                                   _mode 013A                          ??i2_Byte_SetBit 0005  
                          ?_Byte_SetQuad 006B                                     _itos 3BA6  
                                   _test 011C                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     indf0 000FEF  
                                   fsr2h 000FDA                                     fsr0l 000FE9  
                                   indf1 000FE7                                     indf2 000FDF  
                                   fsr1l 000FE1                                     fsr2l 000FD9  
                          ?_Byte_SetZone 0060                                     btemp 0051  
                                   _zero 004E                      __end_of_Create_Maze 324E  
                                   exp@x 00B7                                     log@x 00AF  
                          ??_Byte_SetBit 0064                                     pow@x 00C2  
                                   pow@y 00C6                       __size_of_LCD_Reset 0050  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 14AA                       __size_of_LCD_Write 0020  
                          __CFG_IESO$OFF 000000                          ___fldiv@new_exp 0071  
                        ?_SPI_DisableISR 0060                      HMI_SetButton@pValue 0066  
                             _Cliff_Left 0144                            Console_Init@x 0062  
                          Console_Init@y 0063                           ?i2_Timer0_Stop 0001  
                      i2Byte_SetBit@pBit 0003                             ___param_bank 000000  
                        __end_of_Font5x7 FE5D                          __end_of_InitADC 524E  
                   Set_Rotation@rotation 0066                            ??_Init_Timer0 0060  
                 __size_of_HMI_SetButton 007A                   __size_of_HMI_SetNumber 0026  
                            ?_ISR_Enable 0001                                    ??_exp 00BB  
                                  ??_log 00B3                                    ??_pow 00CA  
           __size_of_Console_ClearCursor 0030                         __end_of_LCD_Fill 5206  
                       __end_of_LCD_Init 2E98                           ?_HMI_DIPSwitch 0001  
                          __CFG_PLLDIV$3 000000                         __end_of_LED_Init 4EF6  
                           _BAUDCON1bits 000F7E                            ??_Button_Init 00A8  
                GetPortProperties@pInput 0062                            ??_Button_Poll 007E  
                       __end_of_HMI_Init 265C                                    l14033 5298  
                                  l14035 52AA                                    l14051 3E98  
                                  l14231 126A                                    l13345 40E2  
                                  l12561 35BC                                    l14057 3EA4  
                                  l12633 49BA                                    l15123 554A  
                                  l12627 49AE                                    l13269 3C3C  
                                  l13349 5ACC                                    ?_Turn 0061  
                                  l15055 51EA                                    l15325 2DCA  
                                  l15093 2720                                    l15229 0A84  
                                  l15335 2E5C                                    l14607 2034  
                                  l15509 2638                                    l13909 4E86  
                       __end_of_HMI_Poll 4CE0                                    l15481 4A86  
                                  l14669 4946                                    l15487 4A92  
                                  l13887 4DA0                                    l13895 4DD6  
                                  l15753 3144                                    l13889 4DB2  
                                  l14947 19EE                                    l15771 31B2  
                                  l15747 312C                                    l13995 2EFC  
                                  l15765 31A4                                    l14797 29E4  
                                  l15791 323C                                    l15777 31CA  
                                  l15769 31AA                                    l15787 3236  
                                  _I2C1T 003D                                    _I2C2T 01C3  
                          ___fltol@sign1 00A7                          __end_of___fladd 0A34  
                                  ?_main 0001                          __end_of___fldiv 1294  
                        __end_of___awdiv 455E                          __end_of___flneg 56D6  
                                  _ADRES 000FC3                                    ?_itos 006C  
                                  STR_11 FF3C                                    STR_12 FFFB  
                                  STR_20 FFEA                                    STR_21 FFFB  
                                  STR_13 FFAC                                    STR_22 FFF2  
                                  STR_14 FEB7                                    STR_23 FFBC  
                                  STR_31 FF24                                    STR_15 FEE1  
                                  STR_24 FFFB                                    STR_17 FFF7  
                                  STR_33 FFE0                                    STR_25 FF9C  
                                  STR_26 FFC8                                    STR_19 FFD1  
                                  STR_27 FFC8                                    STR_28 FFC8  
                                  STR_29 FFC8                          __end_of___flmul 06F6  
                        __end_of___flsub 5296                          __end_of___fltol 3BA6  
                                  u10010 4520                          _Event_DIPSwitch 57D8  
                        __end_of___lldiv 45E2                                    u10110 4F6E  
                                  u10210 3C3C                                    u11010 4592  
                                  u10050 54C0                                    u10140 52F8  
                                  u10055 54BC                                    u10400 080C  
                                  u10410 080E                                    u12020 498C  
                                  u11140 4010                                    u11300 5410  
                                  u10180 5752                                    u11230 4E9E  
                                  u12110 2A16                                    u12015 495C  
                                  u10600 099E                                    u10440 0850  
                                  u11305 540C                                    u10185 574E  
                                  u11090 2BA8                                    u11330 2F5E  
                                  u11410 3F06                                    u12130 2A8C  
                                  u11315 2EB8                                    u11148 4014  
                __size_of_HMI_LeftSwitch 0014                                    u11420 3F0E  
                        ___awdiv@divisor 0062                                    u10390 07FC  
                                  u12230 187A                                    u11190 4DD6  
                                  u12240 187C                                    u13200 323C  
                                  u11360 52C8                                    u10650 09F4  
                                  u10570 0986                                    u11434 472E  
                                  u11435 472A                                    u11620 11D4  
                                  u10820 0638                                    u12420 5202  
                                  u12500 3720                                    u11710 3618  
                                  u13150 31A4                                    u12510 3734  
                                  u10760 0432                                    u13160 31AA  
                                  u12520 376E                                    u12530 5430  
                                  u11650 122A                                    u10850 068E  
                                  u10770 05A8                                    u12338 3DB4  
                                  u12450 27BE                                    u11660 124E  
                                  u10860 06AC                                    u10940 3B06  
                                  u12348 3260                                    u12349 3274  
                                  u11750 3A24                                    u13190 3236  
                                  u12630 0AEC                                    u10775 059E  
                                  u12640 0B46                                    u10945 3AFC  
                                  u11825 12B6                                    u11835 12C8  
                                  u10980 3B7E                                    u11845 12DA  
                                  u11758 3A28                                    u12590 1D1A  
                                  u12398 3366                                    u11855 12F2  
                                  u12760 2E5C                                    u11960 2178  
                                  u14328 2208                                    u11865 13EC  
                                  u14329 221C                                    u14338 2228  
                                  u11875 1440                                    u14339 223C  
                                  u14348 2248                                    u11885 146E  
                                  u14349 225C                                    u14278 55BC  
                                  u14358 2268                                    u14279 55D0  
                                  u11895 149C                                    u14359 227C  
                                  u12980 4ADE                                    _INDEX 0038  
                        __end_of___lwdiv 4F9E                                    _MASKS FC6D  
                        __end_of___lwmod 5320                                    i2l430 3DE0  
                                  i2l432 3E06                                    i2l433 3E30  
                                  i2l427 3E56                                    i2l732 4908  
                                  i2l733 4902                                    i2l832 53A2  
                                  i2l781 56F4                          ___awdiv@counter 0064  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _PORTD 000F83  
                                  _PORTE 000F84                                    _PORTF 000F85  
                                  _PORTG 000F86                  __size_of_HMI_DownSwitch 0014  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _TRISF 000F97  
                                  _TRISG 000F98                                    _T_VAR 0132  
                       ??i2_Byte_GetPair 000D                                    _Drive 512C  
                          ?_FunctReadADC 0060                         ??i2_Byte_GetZone 0006  
                     Port_TogglePin@pPin 0076                                    _X_Pos 00E2  
                                  _Y_Pos 00E0                           __CFG_FCMEN$OFF 000000  
                                  _PortA 02F1                                    _PortB 01A5  
                                  _PortC 01AF                                    _PortD 019B  
                                  _PortE 0191                                    _PortF 01B9  
                                  _PortG 02E7                  __end_of_Port_SetPinType 24E0  
                                  _Steps 0138                          _ADC_Initialised 00F1  
                         ??_Byte_GetPair 006C                           ?i2_Port_SetPin 0010  
                            LED_Set@pLED 0075                           Travel@rev_Dist 009A  
                        __end_of_dpowers FC6D                           ??_Byte_GetZone 0065  
                                  _count 0126                                    _floor 35C0  
                                  _ldexp 39E4                           Button_Poll@Pin 0083  
                                  _frexp 3FB8                                    _errno 011A  
               __size_of_Set_Addr_Window 009A                      __end_of_Console_Tab 4220  
                       __end_of_MXK_Init 311A                                    _stack 0228  
                   i2Byte_GetPair@pInput 000A                                    _putch 5ABA  
                                  _total 0029                         __end_of_SPI_Init 03A4  
                       __end_of_SPI_Send 4A78                               _BumpSensor 0148  
                  __end_ofi2_MXK_Release 5B5A                                    pclath 000FFA  
                                  tablat 000FF5                          __end_of_reverse 4F4A  
                     __size_of_MXK_Queue 000E                           ??_Byte_SetByte 0063  
                         ??_Byte_SetPair 006F                                    pow@yi 00D3  
                         ??_Byte_SetQuad 006F                                    plusw2 000FDB  
                         ??_Byte_SetZone 0066                                    status 000FD8  
                                  wtemp6 0052                          _Configure_GPIOs 4D40  
                   i2MXK_Queue@pCallback 0001                              i2delay_us@u 0003  
                         _LCD_Word_Write 591E                              _Cliff_FLeft 0146  
                    __size_of_LED_Toggle 0040                      __size_of_HMI_GetBar 0006  
                          ?_HMI_UpSwitch 0001                              exp@exponent 00BF  
                             _Event_NULL 1404              __size_of_Port_CheckPairType 0060  
                            ldexp@newexp 00B3                              _Cliff_Right 0145  
                    __size_of_HMI_SetBar 000A                          __initialization 3F18  
                    __size_of_HMI_Render 0036                               _Found_Flag 002D  
                            log@exponent 00B3                      __end_of_Byte_GetBit 5760  
                          _Current_Dist1 013E                            _Current_Dist2 013C  
                           __end_of_Turn 4846                             __end_of_main 2342  
                           __end_of_itos 3C64                     HMI_SetButton@reindex 0062  
                           SPI_Send9@dat 0142                      __end_of_Byte_SetBit 4FF0  
                   Travel@Dist_Travelled 009C                         __end_of_InitList FC43  
            __size_of_Port_CheckQuadType 0050                         __end_of_Mode_Set 5AAC  
            __size_of_Port_CheckPortType 0040                                   ??_Turn 0067  
                            HMI_Render@a 0068                                   ??_main 00D9  
                                 ??_itos 0070                      __end_of_Init_Timer0 59B2  
               __size_of_FunctInitButton 0076                  _Console_MakeField$10974 006E  
                          __activetblptr 000003                        Port_SetPin@pInput 006F  
                      __end_of_LCD_Reset 5090                        Port_SetPin@pValue 0072  
                              ??_LED_Set 0075                        _MXK_InitDIPSwitch 59B2  
                         ??_FunctReadADC 0062                        GetPortPORT@pInput 0062  
                 Port_CheckPairType@Pin1 008A                   Port_CheckPairType@Pin2 008B  
                      __end_of_LCD_Write 5888                              _GetPortPORT 4450  
                           ?i2_MXK_Queue 0001                              _GetPortTRIS 4340  
                        ??_LCD_DrawField 007C                                   ?_Drive 0061  
             __end_of_PortProperty_Valid 4C1A                         __end_of_Port_Set 153E  
                            ?i2_delay_us 0001         __size_of_Console_IncrementCursor 0054  
                        Travel@direction 008C                      __end_of_Button_Init 3DC8  
                    __end_of_Button_Poll 337C                        Word_GetPair@pPair 006E  
                LCD_FillRectangle@pPoint 006B                       ?_MXK_InitDIPSwitch 0001  
                          _HMI_SetButton 46DC                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                             ??_ADCAverage 00D7  
                              ??_SPI_DCS 0062                                   ?_floor 00A9  
                                 ?_ldexp 00AF                                   ?_frexp 0060  
                            _Create_Maze 311A                               _Low_Sensor 01F5  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                          _HMI_SetNumber 57FE                   Port_SetQuadType@Output 009A  
                                 _ANCON0 000FC1                         ___awdiv@dividend 0060  
                                 ?_putch 0001                         ??_Console_Render 0083  
                          ToSegment@pCHR 0060                                   _GODONE 007E11  
                       _Console_FormFeed 49A0                   Port_SetQuadType@pInput 0096  
                                 i2l1630 394A                                   i2l1631 3996  
                                 i2l1632 3982                                   i2l1730 5588  
                                 i2l1627 39D2                                   i2l1732 55A8  
                                 i2l1628 39C8                                   i2l1629 3960  
                                 i2l1590 145E                           __CFG_WDTEN$OFF 000000  
                    __size_of_ISR_Enable 000A                                   i2l9791 53A2  
                                 i2l9793 53B2                                   _RCREG1 000FAF  
                                 _RCSTA1 000FAC                   __end_of_LCD_Word_Write 5938  
                         _Timer0_Restart 5B00                                   _SPBRG1 000FB0  
                    ??_MXK_InitDIPSwitch 009B                        _Current_Direction 01F7  
                                 _TRISA2 007C92                                   _TRISA3 007C93  
                                 _TRISD5 007CAD                                   _TRISD7 007CAF  
                                 _TXREG1 000FAE                         __end_of___xxtofl 2C00  
                              ??_InitADC 0060                           i2_MXK_SwitchTo 5576  
                                 _TXSTA1 000FAD                          Byte_GetBit@pBit 0062  
                             _Reset_High 5982                       Console_Render@temp 0085  
                         ??_HMI_UpSwitch 0066                           OutSeg@pSegment 0063  
                        ??i2_Timer0_Stop 0001                      Port_TogglePin@Value 0077  
                       __end_of_delay_ms 4DFA                             LED_Init@pLED 008D  
                       __end_of_delay_us 52DC                            ??_Timer2_Init 0071  
                          ??_Timer0_Stop 0060                               _Timer0_ISR 57B0  
               __size_of_Console_NewLine 007C                        Timer2_Init@DIVIDE 007A  
                         __CFG_XINST$OFF 000000                                   _OutSeg 4932  
               __size_of_HMI_InitButtons 0006                                   _Travel 0A34  
                                 ___flge 349E                               _Motor_Step 36D6  
                __end_of_Event_DIPSwitch 57FE                                ??___fladd 0093  
                                 ___wmul 5788                          ??_HMI_DIPSwitch 0066  
                              ??___fldiv 0068                                ??___awdiv 0064  
                              ??___flneg 008B                           __CFG_STVREN$ON 000000  
                             _Robot_Init 59F8                                   _change 00F5  
                              ??___flmul 0076                                   _lMotor 00EA  
                              ??___flsub 00A7                                ??___fltol 00A3  
                              ??___lldiv 0068                                   _lQueue 00DD  
                             _TestButton 02DD                               _Robot_Stop 5848  
                              ??___lwdiv 0064                       __size_of_ToSegment 0284  
                              ??___lwmod 006B                 __end_of_Port_SetQuadType 1C48  
               i2Byte_GetZone@pChunkSize 0005                             HMI_GRender@a 0033  
                   __end_of_Console_Init 4AE2                        GetPortTRIS@pInput 0062  
                     __size_of_Reset_Low 0018                                   clear_0 3F72  
                                 clear_1 3F84                                   clear_2 3F90  
                                 clear_3 3F9C                                   clear_4 3FA8  
                     __end_of_ADCAverage 0FDE                         ___awdiv@quotient 0066  
                             Port_Init@i 00A5                        __end_of_MXK_Queue 5AF2  
             __end_ofHMI_SetButton@F7213 FC7A                                   _printf 2944  
              __end_of_MXK_InitDIPSwitch 59CA                                   main@up 00DB  
                         HMI_SetButton@v 0067                                   floor@i 00AD  
                                 floor@x 00A9                   HMI_SetSegments@pString 0061  
                            _Console_Tab 418C                      LCD_Word_Write@value 0065  
                           __pdataCOMRAM 0043                         Create_Maze@count 00BA  
                     __size_of_Port_Init 0174                            ??_Port_GetPin 0063  
               Port_CheckPortType@Output 0099                          ??i2_Port_SetPin 0014  
                           __mediumconst FB90              __end_ofTimer2_Init@PRESCALE FC7D  
               Port_CheckPortType@pDrive 0098                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                           ?_MXK_Dequeue 0001                           ?_HMI_SetButton 0001  
               Port_CheckPortType@pInput 0096                            ??_Port_SetPin 0073  
                              ??_reverse 0064                    Console_MakeField@Fill 0282  
                       ?_Port_SetPinType 0086                                   putch@c 0074  
                         ?_HMI_SetNumber 0076                           i2_Word_GetPair 56D6  
                __end_of_Configure_GPIOs 4D9E                         ??_MXK_TestButton 0066  
                 __end_of_Timer0_Restart 5B0C                            Set_Rotation@m 0065  
                           ?_MXK_Release 0001                               ___flge@ff1 0060  
                             ___flge@ff2 0064                          __CFG_FOSC$HSPLL 000000  
                 __end_ofi2_MXK_SwitchTo 55AC                             ___xxtofl@arg 006A  
                       __end_ofexp@coeff FE85                             i2delay_us@us 0001  
                           ___xxtofl@exp 0069                             ___xxtofl@val 0060  
                       __end_oflog@coeff FEA9                          ?_LCD_Word_Write 0065  
                             __accesstop 0060                  __end_of__initialization 3FAE  
                             Travel@Dist 008E                                ?_LCD_Fill 0069  
                              ?_LCD_Init 0001                             _Cliff_FRight 0147  
                          SPI_Init@pMode 0092                               ___flneg@f1 0087  
                            _Byte_GetBit 5734                                ?_LED_Init 0001  
               __end_ofi2_Timer0_Restart 5B18                                ?_HMI_Init 0001  
                      ??_Set_Addr_Window 0068                                ?_HMI_Poll 0001  
                           eval_poly@res 00AB                            ___rparam_used 000001  
                             ___fltol@f1 009F                              _Byte_SetBit 4F9E  
                          __end_of_MASKS FC76                           _PortA_Property FEB5  
                            ?_Event_NULL 0001                                LCD_Fill@i 006B  
                              LCD_Fill@j 006C                                LCD_Init@i 0097  
                          __end_of_Drive 5176                    _Get_VirtualWall_State 5824  
                         __pcstackCOMRAM 0001                           _PortB_Property FEB3  
                    __size_ofi2_delay_us 0040                             __pidataBANK0 5B5A  
                           __pidataBANK1 59E2                              _Init_Timer0 599A  
                    i2Byte_SetBit@pInput 0001                     __end_of_Byte_GetPair 591E  
                        Console_Render@x 008A                          Console_Render@y 008B  
                    i2Byte_SetBit@pValue 0004                            ?_Set_Rotation 0001  
                    Timer0_Init@PRESCALE FC43                     __end_of_Byte_GetZone 47D0  
                          __end_of_floor 36D6                            __end_of_ldexp 3AC8  
                          __end_of_frexp 4056                      FunctReadADC@channel 0060  
                         _PortC_Property FEB1                            __end_of_putch 5AC8  
                              ?_MXK_Init 0001                      __end_of_Timer2_Init 2FDE  
                    __end_of_Timer0_Stop 5B42                                ?_SPI_Init 008D  
                              ?_SPI_Send 0060                              _Button_Init 3D18  
                      Port_SetType@pType 009C                              _Button_Poll 324E  
                   __end_of_Byte_SetByte 5AE4                     __end_of_Byte_SetPair 58A8  
                         _HMI_LeftSwitch 5A72                           _PortD_Property FEAF  
                   __end_of_Byte_SetQuad 58C8                             ??_LED_Toggle 0078  
                           ??_HMI_GetBar 0060                     __end_of_Byte_SetZone 4340  
                         _HMI_DownSwitch 5A36                            SPI_Send@pData 0062  
                  __end_of_MXK_DIPSwitch 5A22                             ??_HMI_SetBar 0060  
                           ??_HMI_Render 0068                           _PortE_Property FEAD  
               __size_of_HMI_SetSegments 009C                   __end_ofi2_Word_GetPair 5706  
                                ??_Drive 0065                           _PortF_Property FEAB  
                Port_CheckQuadType@Pair1 0093                  Port_CheckQuadType@Pair2 0094  
               MXK_BlockSwitchTo@pModule 0067                                  ??_floor 00AD  
                                ??_ldexp 00B5                                  ??_frexp 0066  
                      ??_FunctInitButton 00A8                        _Console_Backspace 4FF0  
                        ?_Timer0_Restart 0001                                  ??_putch 0074  
               __size_of_HMI_RightSwitch 0014                      _Console_ClearCursor 5646  
                      __end_of_ToSegment 17C2                           _PortG_Property FEA9  
                             __pbssBANK0 00DD                               __pbssBANK1 0100  
                             __pbssBANK2 0200                      __end_of_Port_GetPin 54CE  
                Port_CheckQuadType@pQuad 0091                          reverse@iterator 0065  
                     __size_of_eval_poly 0100                         ??_SPI_DisableISR 0062  
                        ?i2_MXK_SwitchTo 0001                       ?_Console_Backspace 0001  
                      __end_of_Reset_Low 5982                __size_of_Event_TestButton 0034  
                __size_of_Port_TogglePin 002E                               ??_LCD_Fill 006B  
                             ??_LCD_Init 0095                      __end_of_Port_SetPin 3D18  
                 __end_of_PortA_Property FEB7                                ?_Mode_Set 0001  
                     Byte_SetByte@pInput 0060                               ??_LED_Init 008D  
                     Byte_SetByte@pValue 0062                            ?_ISR_Function 0001  
                            ?_Reset_High 0001                               ??_HMI_Init 00A8  
                             ??_HMI_Poll 0084                            ?_Timer2_Clear 0001  
                Port_CheckPairType@Props 008D                   __end_of_PortB_Property FEB5  
                     __size_of_eusartRec 0008                        __end_of_Port_Init 27D0  
                            ?_Timer0_ISR 0001                  Port_CheckPairType@pPair 0088  
                     __end_of_LED_Toggle 53A0                       __end_of_HMI_GetBar 5B48  
               LCD_FillRectangle@pColour 0069                     __end_of_FunctReadADC 545A  
                    ??_Console_Backspace 0062                        Set_Addr_Window@xe 0066  
                      Set_Addr_Window@ye 0067                        Set_Addr_Window@xs 0068  
                      Set_Addr_Window@ys 0065                                  ?_OutSeg 0063  
                     Byte_SetPair@pInput 006B                                  ?_Travel 008C  
                            ?_Motor_Step 0001                       Byte_SetPair@pValue 006E  
                                ?___flge 0060                       __end_of_HMI_SetBar 5B2C  
                 __end_of_PortC_Property FEB3                       Word_GetPair@pInput 006C  
                     __end_of_HMI_Render 5576                           ??_Set_Rotation 0065  
                              ?_Port_Set 006F                                  ?___wmul 0060  
                            ?_Robot_Init 0001                         ?_Event_DIPSwitch 0001  
                      Port_GetPin@Output 0065                             ??_ISR_Enable 0060  
                            ?_Robot_Stop 0001             __size_of_Console_ResetCursor 001C  
                   ?_Console_ClearCursor 0001                   __end_of_HMI_LeftSwitch 5A86  
                 __end_of_PortD_Property FEB1                                  _ADC_AN0 01D8  
                                _ADC_AN1 01D3                                  _ADC_AN2 01CE  
                                _ADC_AN3 01C9                               ??_MXK_Init 00A6  
                      Port_GetPin@pInput 0060                        _Console_MakeField 3E72  
                      ??_Console_NewLine 0060                   __end_of_HMI_DownSwitch 5A4A  
                             ??_SPI_Init 0093                   Event_TestButton@pState 0079  
                             ??_SPI_Send 0063                                  ?_printf 0075  
                      ??_HMI_InitButtons 0060               __size_of_MXK_InitDIPSwitch 0018  
                     __size_of_movement1 0122                   __end_of_PortE_Property FEAF  
                    Console_Render@F6956 01E5                       ?_Console_MakeField 0065  
                                _COUNTER 0031                          ??_HMI_SetButton 0060  
                   __end_of_HMI_UpSwitch 5A5E                                  _LED_Set 5176  
                _Console_IncrementCursor 4DFA                                ?___xxtofl 0060  
                 __end_of_PortF_Property FEAD                              _gBackcolour 0035  
                        ??_HMI_SetNumber 0078                                _I2C1_Done 0117  
                        ?i2_Word_GetPair 000D                                _I2C2_Done 0114  
                              _I2C1_More 0111                                _I2C2_More 010E  
                              ?_delay_ms 0060                __end_of_Console_Backspace 5040  
                              ?_delay_us 0060                      __size_of_Event_NULL 0002  
             __end_of_MXK_InitTestButton 59E2                                  _SSP1ADD 000FC8  
                                _SSP1BUF 000FC9                                  _SSP2BUF 000F6F  
                 __end_of_PortG_Property FEAB                      ??_Console_MakeField 0067  
                                _SPI_DCS 5676                     __size_ofi2_MXK_Queue 000E  
                       ?_Configure_GPIOs 0001                 ?_InitSerialCommunication 0001  
                     eusartSend@sendChar 0060                     i2Byte_GetZone@Offset 0008  
                     __end_of_ISR_Enable 5B22                           ??_ISR_Function 0017  
                   i2Byte_GetZone@Output 0009                        Event_TestButton@j 00EE  
                             ??_Mode_Set 0060                           ??_Timer2_Clear 0060  
                                _Font5x7 FC7D                     i2Byte_GetZone@pChunk 0004  
                                _InitADC 5206                     i2Byte_GetZone@pInput 0001  
                   SPI_DisableISR@pInput 0060                            ?_Port_GetQuad 0060  
                        Byte_SetBit@pBit 0062                     Port_TogglePin@pInput 0074  
                  __end_ofi2_Byte_SetBit 512C                   ?_Get_VirtualWall_State 0061  
                                __Hparam 0000                        Port_GetQuad@pQuad 0062  
                            _Timer2_Init 2E98                                  __Lparam 0000  
                            _Timer0_Stop 5B3C                    __size_of_Console_Init 006A  
                                OutSeg@a 003A          __end_ofPortProperty_Valid@F6830 FC63  
                          LCD_Write@mode 0063                          __size_of_OutSeg 006E  
                            _Motor_Count 002B                               ??_Port_Set 0072  
                        __size_of_Travel 02D6                          __size_of___flge 0122  
              __end_of_Console_MakeField 3F18                        _Console_PrintChar 2C00  
                                ___fladd 06F6                            ?_Port_SetType 009A  
                                _gCursor 0043                                  ___fldiv 0FDE  
                                ___awdiv 44D8                                  ___flneg 56A6  
                  ??_Console_ClearCursor 0060                                  ___flmul 03A4  
                                ___flsub 524E                                  ___fltol 3AC8  
                                _lBuffer 0318                                  ___lldiv 455E  
                        __size_of___wmul 0028                                  ___lwdiv 4F4A  
                                ___lwmod 52DC                                  Turn@Dir 0065  
                                Turn@Rad 0069                          ?_HMI_LeftSwitch 0001  
               __end_of_Console_FormFeed 4A0C                       ?_Console_PrintChar 0001  
                                __pcinit 3F18                        __end_of_eval_poly 38E4  
                        ?_HMI_DownSwitch 0001                                  __ramtop 1000  
                              _CCW_Count 0124                                  __ptext0 21A2  
                                __ptext1 337C                                  __ptext2 0A34  
                                __ptext3 2944                                  __ptext4 5ABA  
                                __ptext5 2C00                                  __ptext6 418C  
                                __ptext7 4DFA                                  __ptext8 4660  
                                __ptext9 49A0                               _eusartSend 5AC8  
                        __size_of_printf 0168                                  _average 00E4  
                              _T0CONbits 000FD5                        i2MXK_SwitchTo@CUR 0007  
                                _countOn 01F3                                  _dpowers FC63  
                              _T2CONbits 000FCA                            LED_Set@pValue 0074  
                           __size_of_exp 0274                             __size_of_log 0174  
                    __size_of_Reset_High 0018                    Event_DIPSwitch@pState 0079  
                           __size_of_pow 01D6                               ??___xxtofl 0064  
                           ?_GetPortPORT 0060                             ?_GetPortTRIS 0060  
                    ??_Console_PrintChar 0070                        __end_of_eusartRec 5B34  
                            _Port_GetPin 5494                        __CFG_MSSPMSK$MSK5 000000  
                    LCD_DrawRectangle@p2 01E1                      LCD_DrawRectangle@p4 01DD  
                           ??i2_delay_us 0003                               ??_delay_ms 0062  
                             ??_delay_us 0062                                  _reverse 4EF6  
                              _DIPSwitch 02D3                      __size_of_Timer0_ISR 0028  
                            _Port_SetPin 3C64                  __size_of_UpdateDistance 0066  
                         LCD_DrawField@i 0082                             ?_Create_Maze 0001  
                              _LCD_Reset 5040                      __size_of_Motor_Step 010E  
                              _LCD_Write 5868                     __size_of_MXK_Dequeue 0034  
                             delay_ms@ms 0060                     end_of_initialization 3FAE  
                    __size_of_Robot_Init 0016                                  exp@sign 00C1  
                             delay_us@us 0060                      __size_of_Robot_Stop 0020  
                      ??_HMI_SetSegments 0063                  Console_PrintChar@pInput 0073  
                           _Console_Init 4A78                     __size_of_MXK_Release 0018  
             __end_of_Port_CheckPairType 4D40                        __end_of_movement1 349E  
                                itos@Out 0074                           ??_Port_GetQuad 0063  
                     _PortProperty_Valid 4BB2                       Byte_SetQuad@pInput 006B  
                              i2u1425_48 57C4                       SPI_MinSpeed@pInput 006F  
                     Byte_SetQuad@pValue 006E                    __size_of_Byte_GetPair 001C  
                        ___lldiv@divisor 0064                    __size_of_Byte_GetZone 007A  
                      ??_HMI_RightSwitch 0066                                  pow@sign 00D2  
                        ___lldiv@counter 006C                __end_of_Console_PrintChar 2D50  
                         ??_Port_SetType 009D               __end_of_Port_CheckQuadType 50E0  
                                printf@c 0082                                  printf@f 0075  
                         Port_Init@pPort 00A2                                  postdec1 000FE5  
                                postdec2 000FDD                    __size_of_Byte_SetByte 000E  
                  __size_of_Byte_SetPair 0020                         _ADCAverage$15800 0308  
                       _ADCAverage$15801 030C                         _ADCAverage$15802 0310  
                       _ADCAverage$15803 0314                   Console_MakeField@Index 0069  
                       _ADCAverage$15798 0300                         _ADCAverage$15799 0304  
                                postinc0 000FEE                                  postinc2 000FDE  
                    ?_PortProperty_Valid 006F                    __size_of_Byte_SetQuad 0020  
             __end_of_Port_CheckPortType 5360                    __size_of_Byte_SetZone 008E  
                     __end_ofi2_delay_us 53E0                       Button_Init@pInitIO 009F  
                      ?_Port_SetQuadType 0096                              _gForecolour 01F9  
              ??_Console_IncrementCursor 0064                   __size_ofi2_MXK_Release 0006  
                              _PORTFbits 000F85                               _timercount 011E  
                     ??_Port_SetQuadType 009A                             ?_Console_Tab 0001  
                       Byte_GetZone@MASK 0066                              ___fladd@grs 009E  
                  Console_Render@lCursor 0086          __end_of_InitSerialCommunication 58E6  
                              _MXK_Queue 5AE4                         __CFG_CPUDIV$OSC1 000000  
                          ___xxtofl@sign 0068                         Byte_GetZone@pMax 0062  
             __size_of_Console_Backspace 0050                                _TRISCbits 000F94  
                            _Square_Dist 0130                          _Set_Addr_Window 40F2  
                         SPI_Init@pClock 008D                         ??_LCD_Word_Write 0067  
                            ___fldiv@grs 0073                              ___fldiv@rem 006D  
                  __end_of_LCD_DrawField 4660                           Port_Set@pInput 006F  
                         SPI_Init@pInput 0093                     ??_PortProperty_Valid 0073  
                         Port_Set@pValue 0071                               ?_LCD_Reset 0001  
                   __end_of_Set_Rotation 42B2                               ?_LCD_Write 0063  
                           _Byte_GetPair 5902                       HMI_SetButton@F7213 FC76  
                           _Byte_GetZone 4756                            ?_MXK_SwitchTo 0001  
                      LCD_DrawField@xmax 0080                        LCD_DrawField@ymax 0081  
Get_VirtualWall_State@Vitual_Wall_Sensor 0064                           _Port_TogglePin 5706  
                       _Event_TestButton 55E0                              ___flmul@grs 007C  
                  __size_of_FunctReadADC 003C                     Port_SetPinType@Props 008B  
                           ?_Byte_GetBit 0060                  __size_ofi2_Byte_GetPair 001A  
                           _Byte_SetByte 5AD6                             _Byte_SetPair 5888  
                           _Byte_SetQuad 58A8                  __size_ofi2_Byte_GetZone 0076  
                           _Byte_SetZone 42B2                     Port_SetPinType@pType 0089  
                      ?i2_Timer0_Restart 0001                             ?_Byte_SetBit 0060  
                          ?_SPI_MaxSpeed 006F                        __size_of_LCD_Fill 0048  
                           ??_Event_NULL 0060                        __size_of_LCD_Init 0148  
                      __size_of_LED_Init 0054                            ?_SPI_MinSpeed 006F  
                  __end_ofi2_Timer0_Stop 5B54                       ??i2_Timer0_Restart 0001  
                      __size_of_HMI_Init 017C                        __size_of_HMI_Poll 0060  
                          ?i2_Motor_Step 0001                             ?_Init_Timer0 0001  
             __size_of_Console_MakeField 00A6                           __end_of_OutSeg 49A0  
                         __end_of_Travel 0D0A                           __end_of___flge 35C0  
                  __size_of_HMI_UpSwitch 0014                                _Close_Pos 0128  
                         __end_of___wmul 57B0                    __end_of_HMI_DIPSwitch 5A36  
                          __pidataCOMRAM 5AAC                             ?_Button_Init 009B  
                        _FunctInitButton 4846                             ?_Button_Poll 007B  
                            ?_eusartSend 0001                                _Bus_State 004B  
                    i2Byte_GetPair@pPair 000C                     __end_of_ISR_Function 14AA  
                      __size_of_MXK_Init 013C                                _BumpState 012C  
                            Turn@C_Angle 0067                               floor@expon 00B1  
                   __end_of_Timer2_Clear 5B3C                           __end_of_printf 2AAC  
                      __size_of_SPI_Init 03A4                        __size_of_SPI_Send 006C  
                          ?_Word_GetPair 006C                         ??_Timer0_Restart 0060  
                     Port_SetType@Output 009F                      start_initialization 3F18  
                             ?_MXK_Queue 0060                               eval_poly@d 00A3  
                             eval_poly@n 00A5                               eval_poly@x 009F  
                             ldexp@value 00AF                             _FunctReadADC 541E  
               PortProperty_Valid@Errors 0075                         ??i2_MXK_SwitchTo 0007  
                      _LCD_FillRectangle 4E4E                       Port_SetType@pInput 009A  
                           _Current_Dist 0140                              __end_of_exp 1A36  
                            __end_of_log 2944                              _ADC_Reading 012A  
                            __end_of_pow 1E1E                               HMI_Init@in 00A8  
                    HMI_SetNumber@pInput 0076                    __end_ofi2_Port_SetPin 3E72  
                     __end_of_Event_NULL 1406                   __end_of_Port_TogglePin 5734  
                          ?_Word_SetPair 006F                        Byte_SetBit@pInput 0060  
                         ??_MXK_SwitchTo 0066                        Byte_SetBit@pValue 0063  
                     ?_LCD_FillRectangle 0069                      _Console_ResetCursor 58E6  
            PortProperty_Valid@pPinDrive 0071                     MXK_BlockSwitchTo@CUR 0066  
               PortProperty_Valid@pInput 006F                            i2_MXK_Release 5B54  
                             frexp@value 0060                   LCD_FillRectangle@pSize 006F  
                         SPI_Send@pInput 0060                             ??_Reset_High 0074  
               __size_of_Port_SetPinType 019E                           ??_SPI_MaxSpeed 0071  
                  Port_SetQuadType@pQuad 0098                                _ToSegment 153E  
                    ??_LCD_FillRectangle 0073                    Port_SetQuadType@pType 0099  
                        _Console_NewLine 4660                           ??_SPI_MinSpeed 0071  
                           _HMI_UpSwitch 5A4A                                _Reset_Low 596A  
                           ??_Timer0_ISR 0017                          _HMI_InitButtons 5B48  
                      __size_of_Mode_Set 0012               __size_of_Console_PrintChar 0150  
                              _gCharSize 01ED                         Timer2_Init@INDEX 00F0  
                              OutSeg@cur 003C                           ??i2_Motor_Step 0015  
                               ??_OutSeg 0064                                OutSeg@out 0067  
                __size_of_Console_Render 01B6                             ??_Motor_Step 0074  
                               ??_Travel 0094                                 ??___flge 0068  
                     Byte_SetZone@Offset 0069                             ??_Robot_Init 0067  
                               ??___wmul 0064                             ??_Robot_Stop 0061  
                   ?_Console_ResetCursor 0001                                _Port_Init 265C  
                            __pdataBANK0 00F5                              __pdataBANK1 01E5  
                        Create_Maze@maze 006A                        __size_of_Port_Set 02AA  
                     Byte_SetZone@pChunk 0063                         ??i2_Word_GetPair 0010  
                     Byte_SetZone@pInput 0060                       Byte_SetZone@pValue 0065  
                          Mode_Set@pMode 0060                                 ??_printf 007B  
                __end_of_Set_Addr_Window 418C                 Port_CheckQuadType@Output 0095  
                              _gLineSize 01E9                 Port_CheckQuadType@pDrive 0092  
                              ___fladd@a 008F                                ___fladd@b 008B  
                         ??_Word_GetPair 006F                 Port_CheckQuadType@pInput 008F  
                              Travel@Dir 0098                     __end_of_Port_GetQuad 541E  
                              ___fldiv@a 0064                                ___fldiv@b 0060  
              __end_of_LCD_FillRectangle 4EA2                              __pbssBIGRAM 0318  
                              Travel@Spd 0092                                 ?_LED_Set 0074  
                              ___flmul@a 0072                                ___flmul@b 006E  
                            __pbssCOMRAM 0029                                ___flsub@a 00A3  
                              ___flsub@b 009F                       __end_of_Reset_High 599A  
                          __pcstackBANK0 0060                            __pcstackBANK3 0300  
                         _UpdateDistance 4C1A                               itos@Length 0072  
                         ??_Word_SetPair 0073                        __size_of___xxtofl 0154  
                     __end_of_Timer0_ISR 57D8                     __size_of_GetPortPORT 0088  
                            ??_LCD_Reset 0079                     __size_of_GetPortTRIS 0088  
                   __end_of_Port_SetType 1FEC                                 ?_SPI_DCS 0060  
                        ?_Port_TogglePin 0074                              ??_LCD_Write 0064  
                      __size_of_delay_ms 005C                        __size_of_delay_us 0046  
                              Turn@Angle 0061                      __CFG_CCP2MX$DEFAULT 000000  
                     __end_of_Motor_Step 37E4                    Timer2_Init@pFrequency 006D  
                         ?i2_MXK_Release 0001                                Turn@Speed 0063  
                     __end_of_Robot_Init 5A0E                     __size_of_Create_Maze 0134  
                     __end_of_Robot_Stop 5868                                _exp$15806 00BB  
                ??_Get_VirtualWall_State 0063                      Init_Pos_Array@F7088 0200  
                               ?_InitADC 0001                 Port_CheckPairType@Output 008C  
                    __size_of_eusartSend 000E                               ?_ToSegment 0001  
               Port_CheckPairType@pDrive 0089                 Port_CheckPairType@pInput 0086  
                         reverse@tempVar 0064                       _MXK_InitTestButton 59CA  
                             ?_Reset_Low 0001                   __size_of_MXK_DIPSwitch 0014  
                           ?_Timer2_Init 006D                         ??_HMI_LeftSwitch 0066  
                           ?_Timer0_Stop 0001                         ___lwdiv@dividend 0060  
                          _lStepFunction 010B                  __size_of_MXK_TestButton 0014  
                      Byte_SetPair@pPair 006D                  __end_of_FunctInitButton 48BC  
                       ??_HMI_DownSwitch 0066         __size_of_InitSerialCommunication 001E  
                              __pintcode 1408                            __pmediumconst FB90  
                  ??_Console_ResetCursor 0060                                 ?___fladd 008B  
                               ?___fldiv 0060                                 ?___awdiv 0060  
                              __ptext100 5888                                __ptext101 5090  
                              __ptext110 5788                                __ptext102 4CE0  
                               ?___flneg 0087                                __ptext111 4A78  
                              __ptext103 4BB2                                __ptext120 3AC8  
                              __ptext112 0D0A                                __ptext104 5614  
                              __ptext121 349E                                __ptext113 1C48  
                              __ptext105 5902                                __ptext130 3BA6  
                              __ptext122 37E4                                __ptext114 27D0  
                              __ptext106 4756                                __ptext131 4EF6  
                              __ptext123 03A4                                __ptext115 17C2  
                              __ptext107 58A8                                __ptext132 52DC  
                              __ptext124 524E                                __ptext116 39E4  
                              __ptext108 42B2                                __ptext141 57B0  
                              __ptext133 4F4A                                __ptext125 06F6  
                              __ptext117 35C0                                __ptext109 311A  
                              __ptext150 5576                                __ptext142 38E4  
                              __ptext134 4056                                __ptext126 56A6  
                              __ptext118 3FB8                                __ptext151 53A0  
                              __ptext143 5B4E                                __ptext135 153E  
                              __ptext127 0FDE                                __ptext119 2AAC  
                              __ptext152 5B54                                __ptext144 5B0C  
                              __ptext136 5540                                __ptext128 44D8  
                              __ptext153 5AF2                                __ptext145 3DC8  
                              __ptext137 4932                                __ptext129 57FE  
                              __ptext154 0000                                __ptext146 56D6  
                              __ptext138 4A0C                                __ptext147 5938  
                              __ptext139 541E                                __ptext148 48BC  
                              __ptext149 50E0                                _pShiftVal 00E8  
                               ?___flmul 006E                                 ?___flsub 009F  
                               ?___fltol 009F                                 ?___lldiv 0060  
                             ?_Port_Init 00A0                                 ?___lwdiv 0060  
                               ?___lwmod 0067                      ?_MXK_InitTestButton 0001  
                      ?_Console_FormFeed 0001                        _GetPortProperties 43C8  
                              _pow$15804 00CA                                _pow$15805 00CE  
            __end_ofTimer0_Init@PRESCALE FC53                       ??_Console_FormFeed 0060  
                        _HMI_SetSegments 4056                       ?_GetPortProperties 0060  
                       Event_NULL@pState 0001                   __end_of_UpdateDistance 4C80  
               __size_of_Event_DIPSwitch 0026                    __size_of_Set_Rotation 0092  
                          ??i2_MXK_Queue 0004                                _eval_poly 37E4  
                            ??_MXK_Queue 0063                             ?_Port_GetPin 0060  
                         __size_of_Drive 004A                    __end_of_HMI_SetButton 4756  
                   __size_of_Console_Tab 0094                                 ?_reverse 0060  
                           ?_Port_SetPin 006F                                _readIndex 00E6  
                  __end_of_HMI_SetNumber 5824                         ___lwdiv@quotient 0065  
                        _HMI_RightSwitch 5A5E                           __size_of_floor 0116  
                         __size_of_ldexp 00E4                           __size_of_frexp 009E  
                    ??_GetPortProperties 0062                  __end_of_Console_NewLine 46DC  
                              _eusartRec 5B2C                     ??_MXK_InitTestButton 008D  
                     Byte_GetPair@pInput 0069                           __size_of_putch 000E  
                __end_of_HMI_InitButtons 5B4E                        i2Port_SetPin@Type 0014  
                      i2Port_SetPin@pPin 0012                           i2_Byte_GetPair 5938  
                               _LCD_Fill 51BE                                 _LCD_Init 2D50  
                         ___wmul@product 0064                                 _HMIBoard 014C  
                         i2_Byte_GetZone 48BC                                 _LED_Init 4EA2  
                              delay_ms@u 0062                       Button_Poll@pButton 007B  
                              delay_us@u 0062                                 _HMI_Init 24E0  
                               _HMI_Poll 4C80                       MXK_Queue@pCallback 0060  
                               _IPR1bits 000F9F                                 _IPR3bits 000FA5  
                               _PIE1bits 000F9D                                 _PIE3bits 000FA3  
            __end_of_Console_ClearCursor 5676                 __size_of_Configure_GPIOs 005E  
                   __size_of_Byte_GetBit 002C                        Byte_SetQuad@pQuad 006D  
                               _PIR1bits 000F9E                                 i2u700_44 511A  
                               i2u700_45 5116                                 i2u533_40 48DE  
                               _PIR3bits 000FA4                                 i2u533_47 48D4  
                               i2u703_40 53CE                                 i2u535_40 4926  
                               i2u535_45 4922                                 _CW_Count 0122  
                               i2u812_40 3928                                 i2u813_40 393C  
                               i2u814_40 3974                                _movement1 337C  
                   __size_of_Byte_SetBit 0052                                 i2u699_44 50F4  
                               i2u699_45 50F0                                 _RCONbits 000FD0  
                   i2Word_GetPair@pInput 000D                       _Sensor_Observe_Fin 0120  
                       __CFG_WDTPS$32768 000000                         HMI_SetBar@pValue 0060  
                      Button_Init@pInput 009B                  __size_of_SPI_DisableISR 0028  
                               _SSP1CON1 000FC6                        ??_Port_SetPinType 008A  
                               _SSP1CON2 000FC5                                 _SSP2CON1 000F6C  
                               _SSP2CON2 000F6B                    __size_of_ISR_Function 00A2  
                               _SSP1STAT 000FC7                __end_of_GetPortProperties 4450  
                               _SSP2STAT 000F6D                             _Set_Rotation 4220  
                  __size_of_Timer2_Clear 0008                     __end_of_MXK_SwitchTo 5494  
                     _Port_CheckPairType 4CE0                                 _MXK_Init 2FDE  
                   __size_of_Init_Timer0 0018                          MXK_SwitchTo@CUR 0066  
                               _SPI_Init 0000                 __end_of_Event_TestButton 5614  
                               _SPI_Send 4A0C                               _ADCON0bits 000FC2  
                             _ADCON1bits 000FC1                         ?_Set_Addr_Window 0065  
                      ___wmul@multiplier 0060                        Byte_GetBit@Output 0064  
                             printf@flag 007C                     Timer2_Init@pCPUClock 0076  
             __size_of_LCD_FillRectangle 0054                     __size_of_Button_Init 00B0  
                        ?_UpdateDistance 0061                     __end_of_SPI_MaxSpeed 4B4A  
                             printf@prec 007D                        Byte_GetBit@pInput 0060  
                    Port_SetPinType@pPin 0088                     __size_of_Button_Poll 012E  
                             ?_eval_poly 009F                       _Port_CheckQuadType 5090  
                          _MXK_DIPSwitch 5A0E                      ?_Port_CheckPairType 0086  
                              main@right 00DA                     __end_of_SPI_MinSpeed 4BB2  
                          ??_MXK_Dequeue 0076                         __size_of_LED_Set 0048  
                 __size_ofi2_Byte_SetBit 004C                       _Port_CheckPortType 5320  
                  Button_Poll@pIncrement 007D                  PortProperty_Valid@F6830 FC53  
                   __end_ofi2_Motor_Step 39E4                          ??i2_MXK_Release 0001  
                             _ADCAverage 0D0A                                copy_data0 3F2C  
                              copy_data1 3F5E                            ??_MXK_Release 0060  
                             ?_eusartRec 0001                   __end_ofi2_Byte_GetPair 5952  
              __size_of_Port_SetQuadType 0212                         __size_of_SPI_DCS 0030  
                    ?_Port_CheckQuadType 008F                   __end_ofi2_Byte_GetZone 4932  
                    __end_ofi2_MXK_Queue 5B00                      ?_Port_CheckPortType 0096  
                        itos@destination 006E                                 _InitList FB91  
                   _Motor_Step$intlevel0 36DC                                 _Mode_Set 5A9A  
                     Port_GetQuad@Output 0065                              ??_ToSegment 0060  
                           _ISR_Function 1408                                frexp@eptr 0064  
                     Port_GetQuad@pInput 0060                             _Timer2_Clear 5B34  
                       __size_of_InitADC 0048                     __end_of_Word_GetPair 5646  
                               _lCBuffer 0250                     ??_Port_CheckPairType 008A  
                            ??_Reset_Low 0074                                 __Hrparam 0000  
                           OutSeg@pInput 0066                           _Console_Render 1FEC  
                               __Lrparam 0000                               ?_movement1 0001  
                        Timer2_Init@RDIV 0072                         ?_FunctInitButton 0001  
                         LCD_Write@value 0064                                 _Port_Set 1294  
                           OutSeg@segset 003B                                rand@screw 0039  
                   __end_of_Word_SetPair 5508                              ??_Port_Init 00A3  
                __end_of_HMI_SetSegments 40F2                     ??_Port_CheckQuadType 0093  
                       __size_of___fladd 033E                         __size_of___fldiv 02B6  
                  __size_of_Port_GetQuad 003E                         __size_of___awdiv 0086  
                       __size_of___flneg 0030                         __size_of___flmul 0352  
                       __size_of___flsub 0048                         __size_of___fltol 00DE  
                       __size_of___lldiv 0084                        _MXK_BlockSwitchTo 5508  
                       __size_of___lwdiv 0054                     ??_Port_CheckPortType 0099  
                       __size_of___lwmod 0044                                 _lBufferX 00F3  
                               _lBufferY 00F2                      Timer2_Init@PRESCALE FC7A  
                           ??_eusartSend 0060                          LCD_Fill@pColour 0069  
                     ?_MXK_BlockSwitchTo 0001                __size_ofi2_Timer0_Restart 000C  
                               _lCurrent 00EC                  __end_of_HMI_RightSwitch 5A72  
                 Byte_GetZone@pChunkSize 0064                           ?_MXK_DIPSwitch 0001  
                 Byte_SetZone@pChunkSize 0064                    __size_of_Port_SetType 01CE  
                           Create_Maze@i 00BC                             Create_Maze@j 00BE  
                          reverse@length 0062                                itos@input 006C  
                  i2MXK_SwitchTo@pModule 0008                                 ___xxtofl 2AAC  
                               _delay_ms 4D9E                                 _delay_us 5296  
                               _clearall 00F4                          ___lwdiv@divisor 0062  
                        ___lwdiv@counter 0064                          Port_GetPin@pPin 0062  
                               __ptext10 58E6                                 __ptext11 4FF0  
                               __ptext20 5734                                 __ptext12 5646  
                               __ptext21 59F8                                 __ptext13 47D0  
                               __ptext30 1294                                 __ptext22 4C1A  
                               __ptext14 5824                                 __ptext31 5AD6  
                               __ptext23 5B2C                                 __ptext15 512C  
                               __ptext40 5B00                                 __ptext32 4340  
                               __ptext24 5848                                 __ptext16 1FEC  
                               __ptext41 545A                                 __ptext33 43C8  
                               __ptext25 5AC8                                 __ptext17 4E4E  
                               __ptext50 591E                                 __ptext42 5952  
                               __ptext34 4450                                 __ptext26 2FDE  
                               __ptext18 45E2                                 __ptext51 5868  
                               __ptext43 5AE4                                 __ptext35 4EA2  
                               __ptext27 265C                                 __ptext19 3E72  
                               __ptext60 58C8                                 __ptext52 5A9A  
                               __ptext44 5508                                 __ptext36 5176  
                               __ptext28 1E1E                                 __ptext61 5206  
                               __ptext53 4D40                                 __ptext45 5296  
                               __ptext37 55AC                                 __ptext29 5320  
                               __ptext70 5A72                                 __ptext62 5B18  
                               __ptext54 4AE2                                 __ptext46 2D50  
                               __ptext38 36D6                                 __ptext71 5A86  
                               __ptext63 4C80                                 __ptext55 5040  
                               __ptext47 4220                                 __ptext39 5B3C  
                    ??_MXK_BlockSwitchTo 0066                                 __ptext80 5494  
                               __ptext72 53E0                                 __ptext64 324E  
                               __ptext56 4D9E                                 __ptext48 51BE  
                               __ptext81 5B22                                 __ptext73 57D8  
                               __ptext65 5A0E                                 __ptext57 596A  
                               __ptext49 40F2                                 __ptext90 5676  
                               __ptext82 5B42                                 __ptext74 1404  
                               __ptext66 5A22                                 __ptext58 5982  
                               __ptext91 4846                                 __ptext83 24E0  
                               __ptext75 55E0                                 __ptext67 5A36  
                               __ptext59 599A                                 __ptext92 3D18  
                               __ptext84 4B4A                                 __ptext76 46DC  
                               __ptext68 5A4A                                 __ptext93 59B2  
                               __ptext85 0000                                 __ptext77 5360  
                               __ptext69 5A5E                                 __ptext94 5B48  
                               __ptext86 2E98                                 __ptext78 5706  
                               __ptext95 59CA                                 __ptext87 455E  
                               __ptext79 3C64                                 __ptext96 2342  
                               __ptext88 5B34                                 __ptext97 4F9E  
                               __ptext89 5760                                 __ptext98 1A36  
                               __ptext99 54CE                             _SSP1CON1bits 000FC6  
                       __size_of_reverse 0054                             _SSP1CON2bits 000FC5  
            __size_of_PortProperty_Valid 0068                       i2Byte_GetZone@MASK 0007  
                           _SSP2CON1bits 000F6C                             _SSP2CON2bits 000F6B  
                        ?i2_Byte_GetPair 000A                         ?_Console_NewLine 0001  
                      ??_Event_DIPSwitch 0079                          ?i2_Byte_GetZone 0001  
                               _countOff 01F1                       i2Byte_GetZone@pMax 0003  
                       ?_HMI_InitButtons 0001                      __end_of_MXK_Dequeue 55E0  
                      HMI_SetSegments@in 0064                    Button_Init@pThreshold 009D  
                          __size_of_Turn 0076                            __size_of_main 01A0  
                          __size_of_itos 00BE                        Byte_GetPair@pPair 006B  
                               _readings 026E                   __end_of_Console_Render 21A2  
                    i2Port_SetPin@pInput 0010                      i2Port_SetPin@pValue 0013  
                     __end_of_eusartSend 5AD6                             _Port_GetQuad 53E0  
                    __end_of_MXK_Release 596A                           _MXK_TestButton 5A86  
                _InitSerialCommunication 58C8                            i2_Byte_SetBit 50E0  
                    i2Word_GetPair@pPair 000F                __end_of_MXK_BlockSwitchTo 5540  
               ?_Console_IncrementCursor 0001                       Create_Maze@i_14045 00C0  
                   __size_of_Timer2_Init 0146                                 int$flags 0051  
                     Create_Maze@j_14046 00C2                     __size_of_Timer0_Stop 0006  
                           _Port_SetType 1E1E                             Port_Set@Type 0086  
             __size_of_GetPortProperties 0088                   __size_of_LCD_DrawField 007E  
                      ??_Configure_GPIOs 0095                                printf@val 0080  
                           _SSP1STATbits 000FC7                                 main@left 00DC  
                               main@down 00D9                           Timer0_Init@DIV 0104  
                         Timer0_Init@PRE 0037                             _SSP2STATbits 000F6D  
                               exp@coeff FE5D                               _LED_Toggle 5360  
                               log@coeff FE85                               _HMI_GetBar 5B42  
                   Button_Init@pGetState 00A2                   PortProperty_Valid@Pair 0085  
                       ??_Port_TogglePin 0077                              _OSCTUNEbits 000F9B  
                             _INTCONbits 000FF2                   PortProperty_Valid@pPin 0072  
                            ??_eval_poly 00A7                               _HMI_SetBar 5B22  
                             _HMI_Render 5540                         Byte_SetZone@MASK 006A  
                            i2_MXK_Queue 5AF2                           Timer2_Init@DIV 0100  
                         Timer2_Init@PRE 00EF                         Byte_SetZone@pMax 0062  
                 __size_ofi2_Timer0_Stop 0006                     __size_of_Port_GetPin 003A  
                            ?_ADCAverage 0001                     Button_Init@pFunction 00A5  
                               itos@Data 0070                              ??_eusartRec 0060  
                     LCD_FillRectangle@i 0075                       LCD_FillRectangle@j 0076  
                   __size_of_Port_SetPin 00B4                                 intlevel2 0000  
                           reverse@input 0060                              _numReadings 0047  
                 __size_of_HMI_DIPSwitch 0014                         ___lwmod@dividend 0067  
                       ___lldiv@dividend 0060                   __end_of_MXK_TestButton 5A9A  
         __size_of_Get_VirtualWall_State 0024                          ?_Console_Render 0001  
          __end_of_Get_VirtualWall_State 5848                  __size_of_LCD_Word_Write 001A  
                         ?i2_Byte_SetBit 0001                    __size_of_MXK_SwitchTo 003A  
                            ??_movement1 00A0                           _SPI_DisableISR 5760  
                        Port_Init@pInput 00A0                                 printf@ap 007E  
                            _thisReading 0136                   __size_ofi2_Port_SetPin 00AA  
                             _ISR_Enable 5B18                         ?_HMI_SetSegments 0061  
                Console_MakeField@Column 006C                    __size_of_SPI_MaxSpeed 0068  
                          SPI_DCS@pInput 0060                    __size_of_SPI_MinSpeed 0068  
                        ??_MXK_DIPSwitch 0066                    __size_ofi2_Motor_Step 0100  
                Console_MakeField@pInput 006B                         ?_HMI_RightSwitch 0001  
                       ___lldiv@quotient 0068                            ??_GetPortPORT 0062  
                        ___lwmod@divisor 0069                            ??_GetPortTRIS 0062  
                     Word_SetPair@pInput 006F                          ___lwmod@counter 006B  
                     Word_SetPair@pValue 0072                              _MXK_Dequeue 55AC  
                          ??_Create_Maze 0066                           LED_Toggle@pLED 0078  
                          ___fladd@signs 009B                            _LCD_DrawField 45E2  
                       _Port_SetQuadType 1A36                              _MXK_Release 5952  
              __size_of_Console_FormFeed 006C                             _MXK_SwitchTo 545A  
                  __size_of_Word_GetPair 0032                       Byte_GetZone@Offset 0067  
                          ?_Console_Init 0001                        Word_SetPair@pPair 0071  
                        _Port_SetPinType 2342                             ___fladd@aexp 009C  
                           ___fladd@bexp 009D                  __size_of_Timer0_Restart 000C  
                     Byte_GetZone@Output 0068                ??_InitSerialCommunication 0060  
                     Byte_GetZone@pChunk 0063                          ?_MXK_TestButton 0001  
            __end_of_Console_ResetCursor 5902                       Byte_GetZone@pInput 0060  
                __size_ofi2_MXK_SwitchTo 0036          __end_of_Console_IncrementCursor 4E4E  
                  __size_of_Word_SetPair 003A                   __end_of_SPI_DisableISR 5788  
                           _SPI_MaxSpeed 4AE2                             _SPI_MinSpeed 4B4A  
                     Port_Set@TypeActual 0084                              Drive@SpeedL 0061  
                            Drive@SpeedR 0063  
