

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon May 21 19:25:40 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1,inline
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1,inline
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1,inline
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1,group=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1,inline
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   152                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   153                           	psect	text132,global,reloc=2,class=CODE,delta=1,group=1
   154                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=1
   155                           	psect	text134,global,reloc=2,class=CODE,delta=1,group=1
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1,group=1
   157                           	psect	text136,global,reloc=2,class=CODE,delta=1,group=1
   158                           	psect	text137,global,reloc=2,class=CODE,delta=1,group=1
   159                           	psect	text138,global,reloc=2,class=CODE,delta=1,group=1
   160                           	psect	text139,global,reloc=2,class=CODE,delta=1,group=1
   161                           	psect	text140,global,reloc=2,class=CODE,delta=1,group=1
   162                           	psect	text141,global,reloc=2,class=CODE,delta=1,group=1
   163                           	psect	text142,global,reloc=2,class=CODE,delta=1,group=1
   164                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=1
   165                           	psect	text144,global,reloc=2,class=CODE,delta=1,group=1
   166                           	psect	text145,global,reloc=2,class=CODE,delta=1
   167                           	psect	text146,global,reloc=2,class=CODE,delta=1
   168                           	psect	text147,global,reloc=2,class=CODE,delta=1
   169                           	psect	text148,global,reloc=2,class=CODE,delta=1,group=1
   170                           	psect	text149,global,reloc=2,class=CODE,delta=1,group=1
   171                           	psect	text150,global,reloc=2,class=CODE,delta=1
   172                           	psect	text151,global,reloc=2,class=CODE,delta=1
   173                           	psect	text152,global,reloc=2,class=CODE,delta=1
   174                           	psect	text153,global,reloc=2,class=CODE,delta=1
   175                           	psect	text154,global,reloc=2,class=CODE,delta=1
   176                           	psect	text155,global,reloc=2,class=CODE,delta=1
   177                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   178                           	psect	text157,global,reloc=2,class=CODE,delta=1
   179                           	psect	text158,global,reloc=2,class=CODE,delta=1
   180                           	psect	text159,global,reloc=2,class=CODE,delta=1
   181                           	psect	text160,global,reloc=2,class=CODE,delta=1
   182                           	psect	text161,global,reloc=2,class=CODE,delta=1
   183                           	psect	text162,global,reloc=2,class=CODE,delta=1
   184                           	psect	text163,global,reloc=2,class=CODE,delta=1
   185                           	psect	text164,global,reloc=2,class=CODE,delta=1,inline
   186                           	psect	text165,global,reloc=2,class=CODE,delta=1
   187                           	psect	text166,global,reloc=2,class=CODE,delta=1
   188                           	psect	text167,global,reloc=2,class=CODE,delta=1
   189                           	psect	text168,global,reloc=2,class=CODE,delta=1
   190                           	psect	text169,global,reloc=2,class=CODE,delta=1
   191                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   192                           	psect	text170,global,reloc=2,class=CODE,delta=1
   193                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   194                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   195  0000                     
   196                           ; Version 1.44
   197                           ; Generated 14/09/2017 GMT
   198                           ; 
   199                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   200                           ; All rights reserved.
   201                           ; 
   202                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   203                           ; 
   204                           ; Redistribution and use in source and binary forms, with or without modification, are
   205                           ; permitted provided that the following conditions are met:
   206                           ; 
   207                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   208                           ;        conditions and the following disclaimer.
   209                           ; 
   210                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   211                           ;        of conditions and the following disclaimer in the documentation and/or other
   212                           ;        materials provided with the distribution.
   213                           ; 
   214                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   215                           ;        software without specific prior written permission.
   216                           ; 
   217                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   218                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   219                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   220                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   221                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   222                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   223                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   224                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   225                           ; 
   226                           ; 
   227                           ; Code-generator required, PIC18F67J50 Definitions
   228                           ; 
   229                           ; SFR Addresses
   230  0000                     
   231                           	psect	idataCOMRAM
   232  018C96                     __pidataCOMRAM:
   233                           	opt stack 0
   234                           
   235                           ;initializer for _gCursor
   236  018C96  0006               	dw	6
   237  018C98  0006               	dw	6
   238                           
   239                           ;initializer for _Bus_State
   240  018C9A  01                 	db	1
   241                           
   242                           ;initializer for _change
   243  018C9B  01                 	db	1
   244                           
   245                           ;initializer for _zero
   246  018C9C  30                 	db	48
   247                           
   248                           ;initializer for _l
   249  018C9D  80                 	db	128
   250                           
   251                           ;initializer for _w
   252  018C9E  80                 	db	128
   253                           
   254                           	psect	idataBANK1
   255  018926                     __pidataBANK1:
   256                           	opt stack 0
   257                           
   258                           ;initializer for Console_Render@F6956
   259  018926  0006               	dw	6
   260  018928  0006               	dw	6
   261                           
   262                           ;initializer for _gLineSize
   263  01892A  0080               	dw	128
   264  01892C  0007               	dw	7
   265                           
   266                           ;initializer for _gCharSize
   267  01892E  0005               	dw	5
   268  018930  0007               	dw	7
   269                           
   270                           ;initializer for _countOff
   271  018932  00F8               	dw	248
   272                           
   273                           ;initializer for _countOn
   274  018934  007C               	dw	124
   275                           
   276                           ;initializer for _Low_Sensor
   277  018936  2710               	dw	10000
   278                           
   279                           ;initializer for _Desired_Level
   280  018938  003C               	dw	60
   281                           
   282                           ;initializer for _Spd
   283  01893A  00C8               	dw	200
   284                           
   285                           ;initializer for _numReadings
   286  01893C  000A               	dw	10
   287                           
   288                           ;initializer for _top
   289  01893E  FFFF               	dw	65535
   290                           
   291                           ;initializer for _Current_Direction
   292  018940  0003               	dw	3
   293                           
   294                           ;initializer for _gForecolour
   295  018942  FFFF               	dw	65535
   296                           
   297                           ;initializer for _A
   298  018944  41                 	db	65
   299                           
   300                           ;initializer for _a
   301  018945  61                 	db	97
   302                           
   303                           	psect	mediumconst
   304  00FB42                     __pmediumconst:
   305                           	opt stack 0
   306  00FB42  00                 	db	0
   307  00FB43                     _InitList:
   308                           	opt stack 0
   309  00FB43  1100               	dw	4352
   310  00FB45  0080               	dw	128
   311  00FB47  012C               	dw	300
   312  00FB49  B100               	dw	45312
   313  00FB4B  0002               	dw	2
   314  00FB4D  0035               	dw	53
   315  00FB4F  0036               	dw	54
   316  00FB51  B200               	dw	45568
   317  00FB53  0002               	dw	2
   318  00FB55  0035               	dw	53
   319  00FB57  0036               	dw	54
   320  00FB59  B300               	dw	45824
   321  00FB5B  0002               	dw	2
   322  00FB5D  0035               	dw	53
   323  00FB5F  0036               	dw	54
   324  00FB61  0002               	dw	2
   325  00FB63  0035               	dw	53
   326  00FB65  0036               	dw	54
   327  00FB67  B400               	dw	46080
   328  00FB69  0000               	dw	0
   329  00FB6B  C000               	dw	49152
   330  00FB6D  00A2               	dw	162
   331  00FB6F  0002               	dw	2
   332  00FB71  0084               	dw	132
   333  00FB73  C100               	dw	49408
   334  00FB75  00C5               	dw	197
   335  00FB77  C200               	dw	49664
   336  00FB79  000D               	dw	13
   337  00FB7B  0000               	dw	0
   338  00FB7D  C300               	dw	49920
   339  00FB7F  008D               	dw	141
   340  00FB81  002A               	dw	42
   341  00FB83  C400               	dw	50176
   342  00FB85  008D               	dw	141
   343  00FB87  00EE               	dw	238
   344  00FB89  C500               	dw	50432
   345  00FB8B  000A               	dw	10
   346  00FB8D  3600               	dw	13824
   347  00FB8F  00C8               	dw	200
   348  00FB91  E000               	dw	57344
   349  00FB93  0012               	dw	18
   350  00FB95  001C               	dw	28
   351  00FB97  0010               	dw	16
   352  00FB99  0018               	dw	24
   353  00FB9B  0033               	dw	51
   354  00FB9D  002C               	dw	44
   355  00FB9F  0025               	dw	37
   356  00FBA1  0028               	dw	40
   357  00FBA3  0028               	dw	40
   358  00FBA5  0027               	dw	39
   359  00FBA7  002F               	dw	47
   360  00FBA9  003C               	dw	60
   361  00FBAB  0000               	dw	0
   362  00FBAD  0003               	dw	3
   363  00FBAF  0003               	dw	3
   364  00FBB1  0010               	dw	16
   365  00FBB3  0080               	dw	128
   366  00FBB5  0078               	dw	120
   367  00FBB7  E100               	dw	57600
   368  00FBB9  0012               	dw	18
   369  00FBBB  001C               	dw	28
   370  00FBBD  0010               	dw	16
   371  00FBBF  0018               	dw	24
   372  00FBC1  002D               	dw	45
   373  00FBC3  0028               	dw	40
   374  00FBC5  0023               	dw	35
   375  00FBC7  0028               	dw	40
   376  00FBC9  0028               	dw	40
   377  00FBCB  0026               	dw	38
   378  00FBCD  002F               	dw	47
   379  00FBCF  003B               	dw	59
   380  00FBD1  0000               	dw	0
   381  00FBD3  0003               	dw	3
   382  00FBD5  0003               	dw	3
   383  00FBD7  0010               	dw	16
   384  00FBD9  3A00               	dw	14848
   385  00FBDB  0005               	dw	5
   386  00FBDD  2A00               	dw	10752
   387  00FBDF  0000               	dw	0
   388  00FBE1  0002               	dw	2
   389  00FBE3  0000               	dw	0
   390  00FBE5  0081               	dw	129
   391  00FBE7  2B00               	dw	11008
   392  00FBE9  0000               	dw	0
   393  00FBEB  0003               	dw	3
   394  00FBED  0000               	dw	0
   395  00FBEF  00A2               	dw	162
   396  00FBF1  2900               	dw	10496
   397  00FBF3  2C00               	dw	11264
   398  00FBF5                     __end_of_InitList:
   399                           	opt stack 0
   400  00FBF5                     Timer0_Init@PRESCALE:
   401                           	opt stack 0
   402  00FBF5  0002               	dw	2
   403  00FBF7  0004               	dw	4
   404  00FBF9  0008               	dw	8
   405  00FBFB  0010               	dw	16
   406  00FBFD  0020               	dw	32
   407  00FBFF  0040               	dw	64
   408  00FC01  0080               	dw	128
   409  00FC03  0100               	dw	256
   410  00FC05                     __end_ofTimer0_Init@PRESCALE:
   411                           	opt stack 0
   412  00FC05                     PortProperty_Valid@F6830:
   413                           	opt stack 0
   414  00FC05  00                 	db	0
   415  00FC06  01                 	db	1
   416  00FC07  02                 	db	2
   417  00FC08  00                 	db	0
   418  00FC09  01                 	db	1
   419  00FC0A  00                 	db	0
   420  00FC0B  01                 	db	1
   421  00FC0C  00                 	db	0
   422  00FC0D  02                 	db	2
   423  00FC0E  02                 	db	2
   424  00FC0F  00                 	db	0
   425  00FC10  00                 	db	0
   426  00FC11  03                 	db	3
   427  00FC12  03                 	db	3
   428  00FC13  03                 	db	3
   429  00FC14  00                 	db	0
   430  00FC15                     __end_ofPortProperty_Valid@F6830:
   431                           	opt stack 0
   432  00FC15                     _dpowers:
   433                           	opt stack 0
   434  00FC15  0001               	dw	1
   435  00FC17  000A               	dw	10
   436  00FC19  0064               	dw	100
   437  00FC1B  03E8               	dw	1000
   438  00FC1D  2710               	dw	10000
   439  00FC1F                     __end_of_dpowers:
   440                           	opt stack 0
   441  00FC1F                     _MASKS:
   442                           	opt stack 0
   443  00FC1F  00                 	db	0
   444  00FC20  01                 	db	1
   445  00FC21  03                 	db	3
   446  00FC22  07                 	db	7
   447  00FC23  0F                 	db	15
   448  00FC24  1F                 	db	31
   449  00FC25  3F                 	db	63
   450  00FC26  7F                 	db	127
   451  00FC27  FF                 	db	255
   452  00FC28                     __end_of_MASKS:
   453                           	opt stack 0
   454  00FC28                     HMI_SetButton@F7213:
   455                           	opt stack 0
   456  00FC28  00                 	db	0
   457  00FC29  02                 	db	2
   458  00FC2A  01                 	db	1
   459  00FC2B  03                 	db	3
   460  00FC2C                     __end_ofHMI_SetButton@F7213:
   461                           	opt stack 0
   462  00FC2C                     Timer2_Init@PRESCALE:
   463                           	opt stack 0
   464  00FC2C  01                 	db	1
   465  00FC2D  04                 	db	4
   466  00FC2E  10                 	db	16
   467  00FC2F                     __end_ofTimer2_Init@PRESCALE:
   468                           	opt stack 0
   469  00FC2F                     _Font5x7:
   470                           	opt stack 0
   471  00FC2F  00                 	db	0
   472  00FC30  00                 	db	0
   473  00FC31  00                 	db	0
   474  00FC32  00                 	db	0
   475  00FC33  00                 	db	0
   476  00FC34  00                 	db	0
   477  00FC35  00                 	db	0
   478  00FC36  5F                 	db	95
   479  00FC37  00                 	db	0
   480  00FC38  00                 	db	0
   481  00FC39  00                 	db	0
   482  00FC3A  07                 	db	7
   483  00FC3B  00                 	db	0
   484  00FC3C  07                 	db	7
   485  00FC3D  00                 	db	0
   486  00FC3E  14                 	db	20
   487  00FC3F  7F                 	db	127
   488  00FC40  14                 	db	20
   489  00FC41  7F                 	db	127
   490  00FC42  14                 	db	20
   491  00FC43  24                 	db	36
   492  00FC44  2A                 	db	42
   493  00FC45  7F                 	db	127
   494  00FC46  2A                 	db	42
   495  00FC47  12                 	db	18
   496  00FC48  23                 	db	35
   497  00FC49  13                 	db	19
   498  00FC4A  08                 	db	8
   499  00FC4B  64                 	db	100
   500  00FC4C  62                 	db	98
   501  00FC4D  36                 	db	54
   502  00FC4E  49                 	db	73
   503  00FC4F  55                 	db	85
   504  00FC50  22                 	db	34
   505  00FC51  50                 	db	80
   506  00FC52  00                 	db	0
   507  00FC53  05                 	db	5
   508  00FC54  03                 	db	3
   509  00FC55  00                 	db	0
   510  00FC56  00                 	db	0
   511  00FC57  00                 	db	0
   512  00FC58  1C                 	db	28
   513  00FC59  22                 	db	34
   514  00FC5A  41                 	db	65
   515  00FC5B  00                 	db	0
   516  00FC5C  00                 	db	0
   517  00FC5D  41                 	db	65
   518  00FC5E  22                 	db	34
   519  00FC5F  1C                 	db	28
   520  00FC60  00                 	db	0
   521  00FC61  08                 	db	8
   522  00FC62  2A                 	db	42
   523  00FC63  1C                 	db	28
   524  00FC64  2A                 	db	42
   525  00FC65  08                 	db	8
   526  00FC66  08                 	db	8
   527  00FC67  08                 	db	8
   528  00FC68  3E                 	db	62
   529  00FC69  08                 	db	8
   530  00FC6A  08                 	db	8
   531  00FC6B  00                 	db	0
   532  00FC6C  50                 	db	80
   533  00FC6D  30                 	db	48
   534  00FC6E  00                 	db	0
   535  00FC6F  00                 	db	0
   536  00FC70  08                 	db	8
   537  00FC71  08                 	db	8
   538  00FC72  08                 	db	8
   539  00FC73  08                 	db	8
   540  00FC74  08                 	db	8
   541  00FC75  00                 	db	0
   542  00FC76  60                 	db	96
   543  00FC77  60                 	db	96
   544  00FC78  00                 	db	0
   545  00FC79  00                 	db	0
   546  00FC7A  20                 	db	32
   547  00FC7B  10                 	db	16
   548  00FC7C  08                 	db	8
   549  00FC7D  04                 	db	4
   550  00FC7E  02                 	db	2
   551  00FC7F  3E                 	db	62
   552  00FC80  51                 	db	81
   553  00FC81  49                 	db	73
   554  00FC82  45                 	db	69
   555  00FC83  3E                 	db	62
   556  00FC84  00                 	db	0
   557  00FC85  42                 	db	66
   558  00FC86  7F                 	db	127
   559  00FC87  40                 	db	64
   560  00FC88  00                 	db	0
   561  00FC89  42                 	db	66
   562  00FC8A  61                 	db	97
   563  00FC8B  51                 	db	81
   564  00FC8C  49                 	db	73
   565  00FC8D  46                 	db	70
   566  00FC8E  21                 	db	33
   567  00FC8F  41                 	db	65
   568  00FC90  45                 	db	69
   569  00FC91  4B                 	db	75
   570  00FC92  31                 	db	49
   571  00FC93  18                 	db	24
   572  00FC94  14                 	db	20
   573  00FC95  12                 	db	18
   574  00FC96  7F                 	db	127
   575  00FC97  10                 	db	16
   576  00FC98  27                 	db	39
   577  00FC99  45                 	db	69
   578  00FC9A  45                 	db	69
   579  00FC9B  45                 	db	69
   580  00FC9C  39                 	db	57
   581  00FC9D  3C                 	db	60
   582  00FC9E  4A                 	db	74
   583  00FC9F  49                 	db	73
   584  00FCA0  49                 	db	73
   585  00FCA1  30                 	db	48
   586  00FCA2  01                 	db	1
   587  00FCA3  71                 	db	113
   588  00FCA4  09                 	db	9
   589  00FCA5  05                 	db	5
   590  00FCA6  03                 	db	3
   591  00FCA7  36                 	db	54
   592  00FCA8  49                 	db	73
   593  00FCA9  49                 	db	73
   594  00FCAA  49                 	db	73
   595  00FCAB  36                 	db	54
   596  00FCAC  06                 	db	6
   597  00FCAD  49                 	db	73
   598  00FCAE  49                 	db	73
   599  00FCAF  29                 	db	41
   600  00FCB0  1E                 	db	30
   601  00FCB1  00                 	db	0
   602  00FCB2  36                 	db	54
   603  00FCB3  36                 	db	54
   604  00FCB4  00                 	db	0
   605  00FCB5  00                 	db	0
   606  00FCB6  00                 	db	0
   607  00FCB7  56                 	db	86
   608  00FCB8  36                 	db	54
   609  00FCB9  00                 	db	0
   610  00FCBA  00                 	db	0
   611  00FCBB  00                 	db	0
   612  00FCBC  08                 	db	8
   613  00FCBD  14                 	db	20
   614  00FCBE  22                 	db	34
   615  00FCBF  41                 	db	65
   616  00FCC0  14                 	db	20
   617  00FCC1  14                 	db	20
   618  00FCC2  14                 	db	20
   619  00FCC3  14                 	db	20
   620  00FCC4  14                 	db	20
   621  00FCC5  41                 	db	65
   622  00FCC6  22                 	db	34
   623  00FCC7  14                 	db	20
   624  00FCC8  08                 	db	8
   625  00FCC9  00                 	db	0
   626  00FCCA  02                 	db	2
   627  00FCCB  01                 	db	1
   628  00FCCC  51                 	db	81
   629  00FCCD  09                 	db	9
   630  00FCCE  06                 	db	6
   631  00FCCF  32                 	db	50
   632  00FCD0  49                 	db	73
   633  00FCD1  79                 	db	121
   634  00FCD2  41                 	db	65
   635  00FCD3  3E                 	db	62
   636  00FCD4  7E                 	db	126
   637  00FCD5  11                 	db	17
   638  00FCD6  11                 	db	17
   639  00FCD7  11                 	db	17
   640  00FCD8  7E                 	db	126
   641  00FCD9  7F                 	db	127
   642  00FCDA  49                 	db	73
   643  00FCDB  49                 	db	73
   644  00FCDC  49                 	db	73
   645  00FCDD  36                 	db	54
   646  00FCDE  3E                 	db	62
   647  00FCDF  41                 	db	65
   648  00FCE0  41                 	db	65
   649  00FCE1  41                 	db	65
   650  00FCE2  22                 	db	34
   651  00FCE3  7F                 	db	127
   652  00FCE4  41                 	db	65
   653  00FCE5  41                 	db	65
   654  00FCE6  22                 	db	34
   655  00FCE7  1C                 	db	28
   656  00FCE8  7F                 	db	127
   657  00FCE9  49                 	db	73
   658  00FCEA  49                 	db	73
   659  00FCEB  49                 	db	73
   660  00FCEC  41                 	db	65
   661  00FCED  7F                 	db	127
   662  00FCEE  09                 	db	9
   663  00FCEF  09                 	db	9
   664  00FCF0  01                 	db	1
   665  00FCF1  01                 	db	1
   666  00FCF2  3E                 	db	62
   667  00FCF3  41                 	db	65
   668  00FCF4  41                 	db	65
   669  00FCF5  51                 	db	81
   670  00FCF6  32                 	db	50
   671  00FCF7  7F                 	db	127
   672  00FCF8  08                 	db	8
   673  00FCF9  08                 	db	8
   674  00FCFA  08                 	db	8
   675  00FCFB  7F                 	db	127
   676  00FCFC  00                 	db	0
   677  00FCFD  41                 	db	65
   678  00FCFE  7F                 	db	127
   679  00FCFF  41                 	db	65
   680  00FD00  00                 	db	0
   681  00FD01  20                 	db	32
   682  00FD02  40                 	db	64
   683  00FD03  41                 	db	65
   684  00FD04  3F                 	db	63
   685  00FD05  01                 	db	1
   686  00FD06  7F                 	db	127
   687  00FD07  08                 	db	8
   688  00FD08  14                 	db	20
   689  00FD09  22                 	db	34
   690  00FD0A  41                 	db	65
   691  00FD0B  7F                 	db	127
   692  00FD0C  40                 	db	64
   693  00FD0D  40                 	db	64
   694  00FD0E  40                 	db	64
   695  00FD0F  40                 	db	64
   696  00FD10  7F                 	db	127
   697  00FD11  02                 	db	2
   698  00FD12  04                 	db	4
   699  00FD13  02                 	db	2
   700  00FD14  7F                 	db	127
   701  00FD15  7F                 	db	127
   702  00FD16  04                 	db	4
   703  00FD17  08                 	db	8
   704  00FD18  10                 	db	16
   705  00FD19  7F                 	db	127
   706  00FD1A  3E                 	db	62
   707  00FD1B  41                 	db	65
   708  00FD1C  41                 	db	65
   709  00FD1D  41                 	db	65
   710  00FD1E  3E                 	db	62
   711  00FD1F  7F                 	db	127
   712  00FD20  09                 	db	9
   713  00FD21  09                 	db	9
   714  00FD22  09                 	db	9
   715  00FD23  06                 	db	6
   716  00FD24  3E                 	db	62
   717  00FD25  41                 	db	65
   718  00FD26  51                 	db	81
   719  00FD27  21                 	db	33
   720  00FD28  5E                 	db	94
   721  00FD29  7F                 	db	127
   722  00FD2A  09                 	db	9
   723  00FD2B  19                 	db	25
   724  00FD2C  29                 	db	41
   725  00FD2D  46                 	db	70
   726  00FD2E  46                 	db	70
   727  00FD2F  49                 	db	73
   728  00FD30  49                 	db	73
   729  00FD31  49                 	db	73
   730  00FD32  31                 	db	49
   731  00FD33  01                 	db	1
   732  00FD34  01                 	db	1
   733  00FD35  7F                 	db	127
   734  00FD36  01                 	db	1
   735  00FD37  01                 	db	1
   736  00FD38  3F                 	db	63
   737  00FD39  40                 	db	64
   738  00FD3A  40                 	db	64
   739  00FD3B  40                 	db	64
   740  00FD3C  3F                 	db	63
   741  00FD3D  1F                 	db	31
   742  00FD3E  20                 	db	32
   743  00FD3F  40                 	db	64
   744  00FD40  20                 	db	32
   745  00FD41  1F                 	db	31
   746  00FD42  7F                 	db	127
   747  00FD43  20                 	db	32
   748  00FD44  18                 	db	24
   749  00FD45  20                 	db	32
   750  00FD46  7F                 	db	127
   751  00FD47  63                 	db	99
   752  00FD48  14                 	db	20
   753  00FD49  08                 	db	8
   754  00FD4A  14                 	db	20
   755  00FD4B  63                 	db	99
   756  00FD4C  03                 	db	3
   757  00FD4D  04                 	db	4
   758  00FD4E  78                 	db	120
   759  00FD4F  04                 	db	4
   760  00FD50  03                 	db	3
   761  00FD51  61                 	db	97
   762  00FD52  51                 	db	81
   763  00FD53  49                 	db	73
   764  00FD54  45                 	db	69
   765  00FD55  43                 	db	67
   766  00FD56  00                 	db	0
   767  00FD57  00                 	db	0
   768  00FD58  7F                 	db	127
   769  00FD59  41                 	db	65
   770  00FD5A  41                 	db	65
   771  00FD5B  02                 	db	2
   772  00FD5C  04                 	db	4
   773  00FD5D  08                 	db	8
   774  00FD5E  10                 	db	16
   775  00FD5F  20                 	db	32
   776  00FD60  41                 	db	65
   777  00FD61  41                 	db	65
   778  00FD62  7F                 	db	127
   779  00FD63  00                 	db	0
   780  00FD64  00                 	db	0
   781  00FD65  04                 	db	4
   782  00FD66  02                 	db	2
   783  00FD67  01                 	db	1
   784  00FD68  02                 	db	2
   785  00FD69  04                 	db	4
   786  00FD6A  40                 	db	64
   787  00FD6B  40                 	db	64
   788  00FD6C  40                 	db	64
   789  00FD6D  40                 	db	64
   790  00FD6E  40                 	db	64
   791  00FD6F  00                 	db	0
   792  00FD70  01                 	db	1
   793  00FD71  02                 	db	2
   794  00FD72  04                 	db	4
   795  00FD73  00                 	db	0
   796  00FD74  20                 	db	32
   797  00FD75  54                 	db	84
   798  00FD76  54                 	db	84
   799  00FD77  54                 	db	84
   800  00FD78  78                 	db	120
   801  00FD79  7F                 	db	127
   802  00FD7A  48                 	db	72
   803  00FD7B  44                 	db	68
   804  00FD7C  44                 	db	68
   805  00FD7D  38                 	db	56
   806  00FD7E  38                 	db	56
   807  00FD7F  44                 	db	68
   808  00FD80  44                 	db	68
   809  00FD81  44                 	db	68
   810  00FD82  20                 	db	32
   811  00FD83  38                 	db	56
   812  00FD84  44                 	db	68
   813  00FD85  44                 	db	68
   814  00FD86  48                 	db	72
   815  00FD87  7F                 	db	127
   816  00FD88  38                 	db	56
   817  00FD89  54                 	db	84
   818  00FD8A  54                 	db	84
   819  00FD8B  54                 	db	84
   820  00FD8C  18                 	db	24
   821  00FD8D  08                 	db	8
   822  00FD8E  7E                 	db	126
   823  00FD8F  09                 	db	9
   824  00FD90  01                 	db	1
   825  00FD91  02                 	db	2
   826  00FD92  08                 	db	8
   827  00FD93  14                 	db	20
   828  00FD94  54                 	db	84
   829  00FD95  54                 	db	84
   830  00FD96  3C                 	db	60
   831  00FD97  7F                 	db	127
   832  00FD98  08                 	db	8
   833  00FD99  04                 	db	4
   834  00FD9A  04                 	db	4
   835  00FD9B  78                 	db	120
   836  00FD9C  00                 	db	0
   837  00FD9D  44                 	db	68
   838  00FD9E  7D                 	db	125
   839  00FD9F  40                 	db	64
   840  00FDA0  00                 	db	0
   841  00FDA1  20                 	db	32
   842  00FDA2  40                 	db	64
   843  00FDA3  44                 	db	68
   844  00FDA4  3D                 	db	61
   845  00FDA5  00                 	db	0
   846  00FDA6  00                 	db	0
   847  00FDA7  7F                 	db	127
   848  00FDA8  10                 	db	16
   849  00FDA9  28                 	db	40
   850  00FDAA  44                 	db	68
   851  00FDAB  00                 	db	0
   852  00FDAC  41                 	db	65
   853  00FDAD  7F                 	db	127
   854  00FDAE  40                 	db	64
   855  00FDAF  00                 	db	0
   856  00FDB0  7C                 	db	124
   857  00FDB1  04                 	db	4
   858  00FDB2  18                 	db	24
   859  00FDB3  04                 	db	4
   860  00FDB4  78                 	db	120
   861  00FDB5  7C                 	db	124
   862  00FDB6  08                 	db	8
   863  00FDB7  04                 	db	4
   864  00FDB8  04                 	db	4
   865  00FDB9  78                 	db	120
   866  00FDBA  38                 	db	56
   867  00FDBB  44                 	db	68
   868  00FDBC  44                 	db	68
   869  00FDBD  44                 	db	68
   870  00FDBE  38                 	db	56
   871  00FDBF  7C                 	db	124
   872  00FDC0  14                 	db	20
   873  00FDC1  14                 	db	20
   874  00FDC2  14                 	db	20
   875  00FDC3  08                 	db	8
   876  00FDC4  08                 	db	8
   877  00FDC5  14                 	db	20
   878  00FDC6  14                 	db	20
   879  00FDC7  18                 	db	24
   880  00FDC8  7C                 	db	124
   881  00FDC9  7C                 	db	124
   882  00FDCA  08                 	db	8
   883  00FDCB  04                 	db	4
   884  00FDCC  04                 	db	4
   885  00FDCD  08                 	db	8
   886  00FDCE  48                 	db	72
   887  00FDCF  54                 	db	84
   888  00FDD0  54                 	db	84
   889  00FDD1  54                 	db	84
   890  00FDD2  20                 	db	32
   891  00FDD3  04                 	db	4
   892  00FDD4  3F                 	db	63
   893  00FDD5  44                 	db	68
   894  00FDD6  40                 	db	64
   895  00FDD7  20                 	db	32
   896  00FDD8  3C                 	db	60
   897  00FDD9  40                 	db	64
   898  00FDDA  40                 	db	64
   899  00FDDB  20                 	db	32
   900  00FDDC  7C                 	db	124
   901  00FDDD  1C                 	db	28
   902  00FDDE  20                 	db	32
   903  00FDDF  40                 	db	64
   904  00FDE0  20                 	db	32
   905  00FDE1  1C                 	db	28
   906  00FDE2  3C                 	db	60
   907  00FDE3  40                 	db	64
   908  00FDE4  30                 	db	48
   909  00FDE5  40                 	db	64
   910  00FDE6  3C                 	db	60
   911  00FDE7  44                 	db	68
   912  00FDE8  28                 	db	40
   913  00FDE9  10                 	db	16
   914  00FDEA  28                 	db	40
   915  00FDEB  44                 	db	68
   916  00FDEC  0C                 	db	12
   917  00FDED  50                 	db	80
   918  00FDEE  50                 	db	80
   919  00FDEF  50                 	db	80
   920  00FDF0  3C                 	db	60
   921  00FDF1  44                 	db	68
   922  00FDF2  64                 	db	100
   923  00FDF3  54                 	db	84
   924  00FDF4  4C                 	db	76
   925  00FDF5  44                 	db	68
   926  00FDF6  00                 	db	0
   927  00FDF7  08                 	db	8
   928  00FDF8  36                 	db	54
   929  00FDF9  41                 	db	65
   930  00FDFA  00                 	db	0
   931  00FDFB  00                 	db	0
   932  00FDFC  00                 	db	0
   933  00FDFD  7F                 	db	127
   934  00FDFE  00                 	db	0
   935  00FDFF  00                 	db	0
   936  00FE00  00                 	db	0
   937  00FE01  41                 	db	65
   938  00FE02  36                 	db	54
   939  00FE03  08                 	db	8
   940  00FE04  00                 	db	0
   941  00FE05  08                 	db	8
   942  00FE06  08                 	db	8
   943  00FE07  2A                 	db	42
   944  00FE08  1C                 	db	28
   945  00FE09  08                 	db	8
   946  00FE0A  08                 	db	8
   947  00FE0B  1C                 	db	28
   948  00FE0C  2A                 	db	42
   949  00FE0D  08                 	db	8
   950  00FE0E  08                 	db	8
   951  00FE0F                     __end_of_Font5x7:
   952                           	opt stack 0
   953  00FE0F                     exp@coeff:
   954                           	opt stack 0
   955  00FE0F  0000               	dw	0
   956  00FE11  3F80               	dw	16256
   957  00FE13  7218               	dw	29208
   958  00FE15  3F31               	dw	16177
   959  00FE17  FDF0               	dw	65008
   960  00FE19  3E75               	dw	15989
   961  00FE1B  5847               	dw	22599
   962  00FE1D  3D63               	dw	15715
   963  00FE1F  9558               	dw	38232
   964  00FE21  3C1D               	dw	15389
   965  00FE23  C482               	dw	50306
   966  00FE25  3AAE               	dw	15022
   967  00FE27  78A8               	dw	30888
   968  00FE29  3921               	dw	14625
   969  00FE2B  93EF               	dw	37871
   970  00FE2D  3780               	dw	14208
   971  00FE2F  92A0               	dw	37536
   972  00FE31  35A7               	dw	13735
   973  00FE33  5646               	dw	22086
   974  00FE35  3415               	dw	13333
   975  00FE37                     __end_ofexp@coeff:
   976                           	opt stack 0
   977  00FE37                     log@coeff:
   978                           	opt stack 0
   979  00FE37  0000               	dw	0
   980  00FE39  0000               	dw	0
   981  00FE3B  FFC4               	dw	65476
   982  00FE3D  3F7F               	dw	16255
   983  00FE3F  EF80               	dw	61312
   984  00FE41  BEFF               	dw	48895
   985  00FE43  E190               	dw	57744
   986  00FE45  3EA9               	dw	16041
   987  00FE47  82EC               	dw	33516
   988  00FE49  BE76               	dw	48758
   989  00FE4B  AD82               	dw	44418
   990  00FE4D  3E2B               	dw	15915
   991  00FE4F  3C0E               	dw	15374
   992  00FE51  BDC3               	dw	48579
   993  00FE53  D187               	dw	53639
   994  00FE55  3D13               	dw	15635
   995  00FE57  7841               	dw	30785
   996  00FE59  BBD3               	dw	48083
   997  00FE5B                     __end_oflog@coeff:
   998                           	opt stack 0
   999  00FE5B                     _PortG_Property:
  1000                           	opt stack 0
  1001  00FE5B  FC00               	dw	64512
  1002  00FE5D                     __end_of_PortG_Property:
  1003                           	opt stack 0
  1004  00FE5D                     _PortF_Property:
  1005                           	opt stack 0
  1006  00FE5D  0FFF               	dw	4095
  1007  00FE5F                     __end_of_PortF_Property:
  1008                           	opt stack 0
  1009  00FE5F                     _PortE_Property:
  1010                           	opt stack 0
  1011  00FE5F  0000               	dw	0
  1012  00FE61                     __end_of_PortE_Property:
  1013                           	opt stack 0
  1014  00FE61                     _PortD_Property:
  1015                           	opt stack 0
  1016  00FE61  FFFF               	dw	65535
  1017  00FE63                     __end_of_PortD_Property:
  1018                           	opt stack 0
  1019  00FE63                     _PortC_Property:
  1020                           	opt stack 0
  1021  00FE63  FFF0               	dw	65520
  1022  00FE65                     __end_of_PortC_Property:
  1023                           	opt stack 0
  1024  00FE65                     _PortB_Property:
  1025                           	opt stack 0
  1026  00FE65  FF00               	dw	65280
  1027  00FE67                     __end_of_PortB_Property:
  1028                           	opt stack 0
  1029  00FE67                     _PortA_Property:
  1030                           	opt stack 0
  1031  00FE67  00FF               	dw	255
  1032  00FE69                     __end_of_PortA_Property:
  1033                           	opt stack 0
  1034  0000                     _ADRES	set	4035
  1035  0000                     _TMR0	set	4054
  1036  0000                     _TXREG1	set	4014
  1037  0000                     _ADCON0	set	4034
  1038  0000                     _ADCON1	set	4033
  1039  0000                     _RCREG1	set	4015
  1040  0000                     _SPBRG1	set	4016
  1041  0000                     _TXSTA1bits	set	4013
  1042  0000                     _BAUDCON1bits	set	3966
  1043  0000                     _RCSTA1	set	4012
  1044  0000                     _TXSTA1	set	4013
  1045  0000                     _TRISCbits	set	3988
  1046  0000                     _PR2	set	4043
  1047  0000                     _T2CONbits	set	4042
  1048  0000                     _T0CONbits	set	4053
  1049  0000                     _RCONbits	set	4048
  1050  0000                     _OSCTUNEbits	set	3995
  1051  0000                     _PIR3	set	4004
  1052  0000                     _PIR2	set	4001
  1053  0000                     _PIR1	set	3998
  1054  0000                     _INTCONbits	set	4082
  1055  0000                     _SSP2CON2bits	set	3947
  1056  0000                     _SSP1CON2bits	set	4037
  1057  0000                     _SSP1ADD	set	4040
  1058  0000                     _ANCON0	set	4033
  1059  0000                     _ADRESL	set	4035
  1060  0000                     _ADRESH	set	4036
  1061  0000                     _ADCON1bits	set	4033
  1062  0000                     _ADCON0bits	set	4034
  1063  0000                     _SSP2CON1bits	set	3948
  1064  0000                     _SSP1CON1bits	set	4038
  1065  0000                     _SSP2STATbits	set	3949
  1066  0000                     _SSP1STATbits	set	4039
  1067  0000                     _PIE3bits	set	4003
  1068  0000                     _PIE1bits	set	3997
  1069  0000                     _PIR3bits	set	4004
  1070  0000                     _PIR1bits	set	3998
  1071  0000                     _IPR3bits	set	4005
  1072  0000                     _IPR1bits	set	3999
  1073  0000                     _PORTFbits	set	3973
  1074  0000                     _SSP2CON2	set	3947
  1075  0000                     _SSP1CON2	set	4037
  1076  0000                     _SSP2BUF	set	3951
  1077  0000                     _SSP2CON1	set	3948
  1078  0000                     _SSP2STAT	set	3949
  1079  0000                     _SSP1BUF	set	4041
  1080  0000                     _SSP1CON1	set	4038
  1081  0000                     _SSP1STAT	set	4039
  1082  0000                     _LATG	set	3983
  1083  0000                     _LATF	set	3982
  1084  0000                     _LATE	set	3981
  1085  0000                     _LATD	set	3980
  1086  0000                     _LATC	set	3979
  1087  0000                     _LATB	set	3978
  1088  0000                     _LATA	set	3977
  1089  0000                     _TRISG	set	3992
  1090  0000                     _TRISF	set	3991
  1091  0000                     _TRISE	set	3990
  1092  0000                     _TRISD	set	3989
  1093  0000                     _TRISC	set	3988
  1094  0000                     _TRISB	set	3987
  1095  0000                     _TRISA	set	3986
  1096  0000                     _PORTG	set	3974
  1097  0000                     _PORTF	set	3973
  1098  0000                     _PORTE	set	3972
  1099  0000                     _PORTD	set	3971
  1100  0000                     _PORTC	set	3970
  1101  0000                     _PORTB	set	3969
  1102  0000                     _PORTA	set	3968
  1103  0000                     _GODONE	set	32273
  1104  0000                     _ADON	set	32272
  1105  0000                     _RA3	set	31747
  1106  0000                     _RA2	set	31746
  1107  0000                     _RD7	set	31775
  1108  0000                     _RD5	set	31773
  1109  0000                     _TRISD7	set	31919
  1110  0000                     _TRISD5	set	31917
  1111  0000                     _TRISA3	set	31891
  1112  0000                     _TRISA2	set	31890
  1113  00FE69                     STR_22:
  1114  00FE69  43                 	db	67	;'C'
  1115  00FE6A  6F                 	db	111	;'o'
  1116  00FE6B  75                 	db	117	;'u'
  1117  00FE6C  6C                 	db	108	;'l'
  1118  00FE6D  64                 	db	100	;'d'
  1119  00FE6E  20                 	db	32
  1120  00FE6F  6E                 	db	110	;'n'
  1121  00FE70  6F                 	db	111	;'o'
  1122  00FE71  74                 	db	116	;'t'
  1123  00FE72  20                 	db	32
  1124  00FE73  72                 	db	114	;'r'
  1125  00FE74  65                 	db	101	;'e'
  1126  00FE75  74                 	db	116	;'t'
  1127  00FE76  72                 	db	114	;'r'
  1128  00FE77  69                 	db	105	;'i'
  1129  00FE78  65                 	db	101	;'e'
  1130  00FE79  76                 	db	118	;'v'
  1131  00FE7A  65                 	db	101	;'e'
  1132  00FE7B  20                 	db	32
  1133  00FE7C  64                 	db	100	;'d'
  1134  00FE7D  61                 	db	97	;'a'
  1135  00FE7E  74                 	db	116	;'t'
  1136  00FE7F  61                 	db	97	;'a'
  1137  00FE80  2C                 	db	44
  1138  00FE81  20                 	db	32
  1139  00FE82  53                 	db	83	;'S'
  1140  00FE83  74                 	db	116	;'t'
  1141  00FE84  61                 	db	97	;'a'
  1142  00FE85  63                 	db	99	;'c'
  1143  00FE86  6B                 	db	107	;'k'
  1144  00FE87  20                 	db	32
  1145  00FE88  69                 	db	105	;'i'
  1146  00FE89  73                 	db	115	;'s'
  1147  00FE8A  20                 	db	32
  1148  00FE8B  65                 	db	101	;'e'
  1149  00FE8C  6D                 	db	109	;'m'
  1150  00FE8D  70                 	db	112	;'p'
  1151  00FE8E  74                 	db	116	;'t'
  1152  00FE8F  79                 	db	121	;'y'
  1153  00FE90  2E                 	db	46
  1154  00FE91  0A                 	db	10
  1155  00FE92  00                 	db	0
  1156  00FE93                     STR_23:
  1157  00FE93  43                 	db	67	;'C'
  1158  00FE94  6F                 	db	111	;'o'
  1159  00FE95  75                 	db	117	;'u'
  1160  00FE96  6C                 	db	108	;'l'
  1161  00FE97  64                 	db	100	;'d'
  1162  00FE98  20                 	db	32
  1163  00FE99  6E                 	db	110	;'n'
  1164  00FE9A  6F                 	db	111	;'o'
  1165  00FE9B  74                 	db	116	;'t'
  1166  00FE9C  20                 	db	32
  1167  00FE9D  69                 	db	105	;'i'
  1168  00FE9E  6E                 	db	110	;'n'
  1169  00FE9F  73                 	db	115	;'s'
  1170  00FEA0  65                 	db	101	;'e'
  1171  00FEA1  72                 	db	114	;'r'
  1172  00FEA2  74                 	db	116	;'t'
  1173  00FEA3  20                 	db	32
  1174  00FEA4  64                 	db	100	;'d'
  1175  00FEA5  61                 	db	97	;'a'
  1176  00FEA6  74                 	db	116	;'t'
  1177  00FEA7  61                 	db	97	;'a'
  1178  00FEA8  2C                 	db	44
  1179  00FEA9  20                 	db	32
  1180  00FEAA  53                 	db	83	;'S'
  1181  00FEAB  74                 	db	116	;'t'
  1182  00FEAC  61                 	db	97	;'a'
  1183  00FEAD  63                 	db	99	;'c'
  1184  00FEAE  6B                 	db	107	;'k'
  1185  00FEAF  20                 	db	32
  1186  00FEB0  69                 	db	105	;'i'
  1187  00FEB1  73                 	db	115	;'s'
  1188  00FEB2  20                 	db	32
  1189  00FEB3  66                 	db	102	;'f'
  1190  00FEB4  75                 	db	117	;'u'
  1191  00FEB5  6C                 	db	108	;'l'
  1192  00FEB6  6C                 	db	108	;'l'
  1193  00FEB7  2E                 	db	46
  1194  00FEB8  0A                 	db	10
  1195  00FEB9  00                 	db	0
  1196  00FEBA                     STR_8:
  1197  00FEBA  0A                 	db	10
  1198  00FEBB  54                 	db	84	;'T'
  1199  00FEBC  68                 	db	104	;'h'
  1200  00FEBD  65                 	db	101	;'e'
  1201  00FEBE  20                 	db	32
  1202  00FEBF  43                 	db	67	;'C'
  1203  00FEC0  6C                 	db	108	;'l'
  1204  00FEC1  6F                 	db	111	;'o'
  1205  00FEC2  73                 	db	115	;'s'
  1206  00FEC3  65                 	db	101	;'e'
  1207  00FEC4  73                 	db	115	;'s'
  1208  00FEC5  20                 	db	32
  1209  00FEC6  6F                 	db	111	;'o'
  1210  00FEC7  62                 	db	98	;'b'
  1211  00FEC8  6A                 	db	106	;'j'
  1212  00FEC9  65                 	db	101	;'e'
  1213  00FECA  63                 	db	99	;'c'
  1214  00FECB  74                 	db	116	;'t'
  1215  00FECC  20                 	db	32
  1216  00FECD  28                 	db	40
  1217  00FECE  6D                 	db	109	;'m'
  1218  00FECF  6D                 	db	109	;'m'
  1219  00FED0  29                 	db	41
  1220  00FED1  3A                 	db	58	;':'
  1221  00FED2  20                 	db	32
  1222  00FED3  25                 	db	37
  1223  00FED4  64                 	db	100	;'d'
  1224  00FED5  00                 	db	0
  1225  00FED6  0A                 	db	10
  1226  00FED7  53                 	db	83	;'S'
  1227  00FED8  74                 	db	116	;'t'
  1228  00FED9  65                 	db	101	;'e'
  1229  00FEDA  70                 	db	112	;'p'
  1230  00FEDB  73                 	db	115	;'s'
  1231  00FEDC  20                 	db	32
  1232  00FEDD  54                 	db	84	;'T'
  1233  00FEDE  72                 	db	114	;'r'
  1234  00FEDF  61                 	db	97	;'a'
  1235  00FEE0  76                 	db	118	;'v'
  1236  00FEE1  65                 	db	101	;'e'
  1237  00FEE2  6C                 	db	108	;'l'
  1238  00FEE3  6C                 	db	108	;'l'
  1239  00FEE4  65                 	db	101	;'e'
  1240  00FEE5  64                 	db	100	;'d'
  1241  00FEE6  3A                 	db	58	;':'
  1242  00FEE7  20                 	db	32
  1243  00FEE8  25                 	db	37
  1244  00FEE9  64                 	db	100	;'d'
  1245  00FEEA  20                 	db	32
  1246  00FEEB  0A                 	db	10
  1247  00FEEC  0A                 	db	10
  1248  00FEED  00                 	db	0
  1249  00FEEE                     STR_11:
  1250  00FEEE  0A                 	db	10
  1251  00FEEF  53                 	db	83	;'S'
  1252  00FEF0  74                 	db	116	;'t'
  1253  00FEF1  65                 	db	101	;'e'
  1254  00FEF2  70                 	db	112	;'p'
  1255  00FEF3  73                 	db	115	;'s'
  1256  00FEF4  20                 	db	32
  1257  00FEF5  54                 	db	84	;'T'
  1258  00FEF6  72                 	db	114	;'r'
  1259  00FEF7  61                 	db	97	;'a'
  1260  00FEF8  76                 	db	118	;'v'
  1261  00FEF9  65                 	db	101	;'e'
  1262  00FEFA  6C                 	db	108	;'l'
  1263  00FEFB  6C                 	db	108	;'l'
  1264  00FEFC  65                 	db	101	;'e'
  1265  00FEFD  64                 	db	100	;'d'
  1266  00FEFE  3A                 	db	58	;':'
  1267  00FEFF  20                 	db	32
  1268  00FF00  25                 	db	37
  1269  00FF01  64                 	db	100	;'d'
  1270  00FF02  00                 	db	0
  1271  00FF03                     STR_7:
  1272  00FF03  53                 	db	83	;'S'
  1273  00FF04  74                 	db	116	;'t'
  1274  00FF05  65                 	db	101	;'e'
  1275  00FF06  70                 	db	112	;'p'
  1276  00FF07  70                 	db	112	;'p'
  1277  00FF08  65                 	db	101	;'e'
  1278  00FF09  64                 	db	100	;'d'
  1279  00FF0A  20                 	db	32
  1280  00FF0B  33                 	db	51	;'3'
  1281  00FF0C  36                 	db	54	;'6'
  1282  00FF0D  30                 	db	48	;'0'
  1283  00FF0E  20                 	db	32
  1284  00FF0F  64                 	db	100	;'d'
  1285  00FF10  65                 	db	101	;'e'
  1286  00FF11  67                 	db	103	;'g'
  1287  00FF12  72                 	db	114	;'r'
  1288  00FF13  65                 	db	101	;'e'
  1289  00FF14  65                 	db	101	;'e'
  1290  00FF15  73                 	db	115	;'s'
  1291  00FF16  00                 	db	0
  1292  00FF17                     STR_2:
  1293  00FF17  53                 	db	83	;'S'
  1294  00FF18  65                 	db	101	;'e'
  1295  00FF19  6E                 	db	110	;'n'
  1296  00FF1A  73                 	db	115	;'s'
  1297  00FF1B  6F                 	db	111	;'o'
  1298  00FF1C  72                 	db	114	;'r'
  1299  00FF1D  20                 	db	32
  1300  00FF1E  4D                 	db	77	;'M'
  1301  00FF1F  6F                 	db	111	;'o'
  1302  00FF20  76                 	db	118	;'v'
  1303  00FF21  69                 	db	105	;'i'
  1304  00FF22  6E                 	db	110	;'n'
  1305  00FF23  67                 	db	103	;'g'
  1306  00FF24  21                 	db	33
  1307  00FF25  20                 	db	32
  1308  00FF26  20                 	db	32
  1309  00FF27  20                 	db	32
  1310  00FF28  0A                 	db	10
  1311  00FF29  00                 	db	0
  1312  00FF2A                     STR_9:
  1313  00FF2A  0A                 	db	10
  1314  00FF2B  47                 	db	71	;'G'
  1315  00FF2C  6F                 	db	111	;'o'
  1316  00FF2D  69                 	db	105	;'i'
  1317  00FF2E  6E                 	db	110	;'n'
  1318  00FF2F  67                 	db	103	;'g'
  1319  00FF30  20                 	db	32
  1320  00FF31  62                 	db	98	;'b'
  1321  00FF32  61                 	db	97	;'a'
  1322  00FF33  63                 	db	99	;'c'
  1323  00FF34  6B                 	db	107	;'k'
  1324  00FF35  20                 	db	32
  1325  00FF36  74                 	db	116	;'t'
  1326  00FF37  6F                 	db	111	;'o'
  1327  00FF38  3A                 	db	58	;':'
  1328  00FF39  20                 	db	32
  1329  00FF3A  25                 	db	37
  1330  00FF3B  64                 	db	100	;'d'
  1331  00FF3C  00                 	db	0
  1332  00FF3D                     STR_17:
  1333  00FF3D  0A                 	db	10
  1334  00FF3E  0A                 	db	10
  1335  00FF3F  0A                 	db	10
  1336  00FF40  4F                 	db	79	;'O'
  1337  00FF41  70                 	db	112	;'p'
  1338  00FF42  74                 	db	116	;'t'
  1339  00FF43  69                 	db	105	;'i'
  1340  00FF44  6F                 	db	111	;'o'
  1341  00FF45  6E                 	db	110	;'n'
  1342  00FF46  73                 	db	115	;'s'
  1343  00FF47  3A                 	db	58	;':'
  1344  00FF48  20                 	db	32
  1345  00FF49  25                 	db	37
  1346  00FF4A  64                 	db	100	;'d'
  1347  00FF4B  0A                 	db	10
  1348  00FF4C  0A                 	db	10
  1349  00FF4D  0A                 	db	10
  1350  00FF4E  00                 	db	0
  1351  00FF4F                     STR_5:
  1352  00FF4F  0A                 	db	10
  1353  00FF50  20                 	db	32
  1354  00FF51  46                 	db	70	;'F'
  1355  00FF52  6F                 	db	111	;'o'
  1356  00FF53  75                 	db	117	;'u'
  1357  00FF54  6E                 	db	110	;'n'
  1358  00FF55  64                 	db	100	;'d'
  1359  00FF56  20                 	db	32
  1360  00FF57  46                 	db	70	;'F'
  1361  00FF58  6C                 	db	108	;'l'
  1362  00FF59  61                 	db	97	;'a'
  1363  00FF5A  67                 	db	103	;'g'
  1364  00FF5B  3A                 	db	58	;':'
  1365  00FF5C  20                 	db	32
  1366  00FF5D  25                 	db	37
  1367  00FF5E  64                 	db	100	;'d'
  1368  00FF5F  00                 	db	0
  1369  00FF60                     STR_27:
  1370  00FF60  72                 	db	114	;'r'
  1371  00FF61  65                 	db	101	;'e'
  1372  00FF62  76                 	db	118	;'v'
  1373  00FF63  3A                 	db	58	;':'
  1374  00FF64  25                 	db	37
  1375  00FF65  64                 	db	100	;'d'
  1376  00FF66  20                 	db	32
  1377  00FF67  54                 	db	84	;'T'
  1378  00FF68  61                 	db	97	;'a'
  1379  00FF69  72                 	db	114	;'r'
  1380  00FF6A  3A                 	db	58	;':'
  1381  00FF6B  20                 	db	32
  1382  00FF6C  25                 	db	37
  1383  00FF6D  64                 	db	100	;'d'
  1384  00FF6E  0A                 	db	10
  1385  00FF6F  00                 	db	0
  1386  00FF70                     STR_13:
  1387  00FF70  52                 	db	82	;'R'
  1388  00FF71  6F                 	db	111	;'o'
  1389  00FF72  62                 	db	98	;'b'
  1390  00FF73  6F                 	db	111	;'o'
  1391  00FF74  74                 	db	116	;'t'
  1392  00FF75  20                 	db	32
  1393  00FF76  52                 	db	82	;'R'
  1394  00FF77  65                 	db	101	;'e'
  1395  00FF78  61                 	db	97	;'a'
  1396  00FF79  64                 	db	100	;'d'
  1397  00FF7A  79                 	db	121	;'y'
  1398  00FF7B  21                 	db	33
  1399  00FF7C  20                 	db	32
  1400  00FF7D  0A                 	db	10
  1401  00FF7E  0A                 	db	10
  1402  00FF7F  00                 	db	0
  1403  00FF80                     STR_25:
  1404  00FF80  57                 	db	87	;'W'
  1405  00FF81  41                 	db	65	;'A'
  1406  00FF82  4C                 	db	76	;'L'
  1407  00FF83  4C                 	db	76	;'L'
  1408  00FF84  20                 	db	32
  1409  00FF85  46                 	db	70	;'F'
  1410  00FF86  4F                 	db	79	;'O'
  1411  00FF87  55                 	db	85	;'U'
  1412  00FF88  4E                 	db	78	;'N'
  1413  00FF89  44                 	db	68	;'D'
  1414  00FF8A  0A                 	db	10
  1415  00FF8B  00                 	db	0
  1416  00FF8C                     STR_33:
  1417  00FF8C  58                 	db	88	;'X'
  1418  00FF8D  3D                 	db	61	;'='
  1419  00FF8E  25                 	db	37
  1420  00FF8F  64                 	db	100	;'d'
  1421  00FF90  2C                 	db	44
  1422  00FF91  20                 	db	32
  1423  00FF92  59                 	db	89	;'Y'
  1424  00FF93  3D                 	db	61	;'='
  1425  00FF94  25                 	db	37
  1426  00FF95  64                 	db	100	;'d'
  1427  00FF96  0A                 	db	10
  1428  00FF97  00                 	db	0
  1429  00FF98                     STR_35:
  1430  00FF98  6E                 	db	110	;'n'
  1431  00FF99  6F                 	db	111	;'o'
  1432  00FF9A  20                 	db	32
  1433  00FF9B  6F                 	db	111	;'o'
  1434  00FF9C  70                 	db	112	;'p'
  1435  00FF9D  74                 	db	116	;'t'
  1436  00FF9E  69                 	db	105	;'i'
  1437  00FF9F  6F                 	db	111	;'o'
  1438  00FFA0  6E                 	db	110	;'n'
  1439  00FFA1  73                 	db	115	;'s'
  1440  00FFA2  0A                 	db	10
  1441  00FFA3  00                 	db	0
  1442  00FFA4                     STR_24:
  1443  00FFA4  0A                 	db	10
  1444  00FFA5  4E                 	db	78	;'N'
  1445  00FFA6  4F                 	db	79	;'O'
  1446  00FFA7  54                 	db	84	;'T'
  1447  00FFA8  48                 	db	72	;'H'
  1448  00FFA9  49                 	db	73	;'I'
  1449  00FFAA  4E                 	db	78	;'N'
  1450  00FFAB  47                 	db	71	;'G'
  1451  00FFAC  21                 	db	33
  1452  00FFAD  21                 	db	33
  1453  00FFAE  21                 	db	33
  1454  00FFAF  00                 	db	0
  1455  00FFB0                     STR_4:
  1456  00FFB0  0A                 	db	10
  1457  00FFB1  41                 	db	65	;'A'
  1458  00FFB2  44                 	db	68	;'D'
  1459  00FFB3  43                 	db	67	;'C'
  1460  00FFB4  3A                 	db	58	;':'
  1461  00FFB5  20                 	db	32
  1462  00FFB6  25                 	db	37
  1463  00FFB7  64                 	db	100	;'d'
  1464  00FFB8  20                 	db	32
  1465  00FFB9  0A                 	db	10
  1466  00FFBA  0A                 	db	10
  1467  00FFBB  00                 	db	0
  1468  00FFBC                     STR_20:
  1469  00FFBC  47                 	db	71	;'G'
  1470  00FFBD  6F                 	db	111	;'o'
  1471  00FFBE  69                 	db	105	;'i'
  1472  00FFBF  6E                 	db	110	;'n'
  1473  00FFC0  67                 	db	103	;'g'
  1474  00FFC1  20                 	db	32
  1475  00FFC2  48                 	db	72	;'H'
  1476  00FFC3  6F                 	db	111	;'o'
  1477  00FFC4  6D                 	db	109	;'m'
  1478  00FFC5  65                 	db	101	;'e'
  1479  00FFC6  00                 	db	0
  1480  00FFC7                     STR_31:
  1481  00FFC7  0A                 	db	10
  1482  00FFC8  53                 	db	83	;'S'
  1483  00FFC9  74                 	db	116	;'t'
  1484  00FFCA  65                 	db	101	;'e'
  1485  00FFCB  70                 	db	112	;'p'
  1486  00FFCC  73                 	db	115	;'s'
  1487  00FFCD  20                 	db	32
  1488  00FFCE  25                 	db	37
  1489  00FFCF  64                 	db	100	;'d'
  1490  00FFD0  00                 	db	0
  1491  00FFD1                     STR_15:
  1492  00FFD1  0A                 	db	10
  1493  00FFD2  20                 	db	32
  1494  00FFD3  20                 	db	32
  1495  00FFD4  20                 	db	32
  1496  00FFD5  20                 	db	32
  1497  00FFD6  20                 	db	32
  1498  00FFD7  20                 	db	32
  1499  00FFD8  20                 	db	32
  1500  00FFD9  0A                 	db	10
  1501  00FFDA  00                 	db	0
  1502  00FFDB                     STR_32:
  1503  00FFDB  0A                 	db	10
  1504  00FFDC  46                 	db	70	;'F'
  1505  00FFDD  6C                 	db	108	;'l'
  1506  00FFDE  61                 	db	97	;'a'
  1507  00FFDF  67                 	db	103	;'g'
  1508  00FFE0  20                 	db	32
  1509  00FFE1  25                 	db	37
  1510  00FFE2  64                 	db	100	;'d'
  1511  00FFE3  00                 	db	0
  1512  00FFE4                     STR_21:
  1513  00FFE4  48                 	db	72	;'H'
  1514  00FFE5  4F                 	db	79	;'O'
  1515  00FFE6  4D                 	db	77	;'M'
  1516  00FFE7  45                 	db	69	;'E'
  1517  00FFE8  21                 	db	33
  1518  00FFE9  21                 	db	33
  1519  00FFEA  21                 	db	33
  1520  00FFEB  40                 	db	64	;'@'
  1521  00FFEC  00                 	db	0
  1522  00FFED                     STR_16:
  1523  00FFED  76                 	db	118	;'v'
  1524  00FFEE  63                 	db	99	;'c'
  1525  00FFEF  3A                 	db	58	;':'
  1526  00FFF0  20                 	db	32
  1527  00FFF1  25                 	db	37
  1528  00FFF2  64                 	db	100	;'d'
  1529  00FFF3  0A                 	db	10
  1530  00FFF4  00                 	db	0
  1531  00FFF5                     STR_34:
  1532  00FFF5  26                 	db	38
  1533  00FFF6  26                 	db	38
  1534  00FFF7  26                 	db	38
  1535  00FFF8  26                 	db	38
  1536  00FFF9  26                 	db	38
  1537  00FFFA  0A                 	db	10
  1538  00FFFB  00                 	db	0
  1539  00FFFC                     STR_1:
  1540  00FFFC  25                 	db	37
  1541  00FFFD  63                 	db	99	;'c'
  1542  00FFFE  00                 	db	0
  1543  0000                     
  1544                           ; #config settings
  1545  00FFFF  00                 	db	0	; dummy byte at the end
  1546  0000                     
  1547                           	psect	cinit
  1548  017184                     __pcinit:
  1549                           	opt stack 0
  1550  017184                     start_initialization:
  1551                           	opt stack 0
  1552  017184                     __initialization:
  1553                           	opt stack 0
  1554                           
  1555                           ; Initialize objects allocated to BANK1 (32 bytes)
  1556                           ; load TBLPTR registers with __pidataBANK1
  1557  017184  0E26               	movlw	low __pidataBANK1
  1558  017186  6EF6               	movwf	tblptrl,c
  1559  017188  0E89               	movlw	high __pidataBANK1
  1560  01718A  6EF7               	movwf	tblptrh,c
  1561  01718C  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1562  01718E  6EF8               	movwf	tblptru,c
  1563  017190  EE01  F0C8         	lfsr	0,__pdataBANK1
  1564  017194  EE10 F020          	lfsr	1,32
  1565  017198                     copy_data0:
  1566  017198  0009               	tblrd		*+
  1567  01719A  CFF5 FFEE          	movff	tablat,postinc0
  1568  01719E  50E5               	movf	postdec1,w,c
  1569  0171A0  50E1               	movf	fsr1l,w,c
  1570  0171A2  E1FA               	bnz	copy_data0
  1571                           
  1572                           ; Initialize objects allocated to COMRAM (9 bytes)
  1573                           ; load TBLPTR registers with __pidataCOMRAM
  1574  0171A4  0E96               	movlw	low __pidataCOMRAM
  1575  0171A6  6EF6               	movwf	tblptrl,c
  1576  0171A8  0E8C               	movlw	high __pidataCOMRAM
  1577  0171AA  6EF7               	movwf	tblptrh,c
  1578  0171AC  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1579  0171AE  6EF8               	movwf	tblptru,c
  1580  0171B0  EE00  F048         	lfsr	0,__pdataCOMRAM
  1581  0171B4  EE10 F009          	lfsr	1,9
  1582  0171B8                     copy_data1:
  1583  0171B8  0009               	tblrd		*+
  1584  0171BA  CFF5 FFEE          	movff	tablat,postinc0
  1585  0171BE  50E5               	movf	postdec1,w,c
  1586  0171C0  50E1               	movf	fsr1l,w,c
  1587  0171C2  E1FA               	bnz	copy_data1
  1588                           
  1589                           ; Clear objects allocated to BIGRAM (300 bytes)
  1590  0171C4  EE03  F0E2         	lfsr	0,__pbssBIGRAM
  1591  0171C8  EE11 F02C          	lfsr	1,300
  1592  0171CC                     clear_0:
  1593  0171CC  6AEE               	clrf	postinc0,c
  1594  0171CE  50E5               	movf	postdec1,w,c
  1595  0171D0  50E1               	movf	fsr1l,w,c
  1596  0171D2  E1FC               	bnz	clear_0
  1597  0171D4  50E2               	movf	fsr1h,w,c
  1598  0171D6  E1FA               	bnz	clear_0
  1599                           
  1600                           ; Clear objects allocated to BANK3 (218 bytes)
  1601  0171D8  EE03  F000         	lfsr	0,__pbssBANK3
  1602  0171DC  0EDA               	movlw	218
  1603  0171DE                     clear_1:
  1604  0171DE  6AEE               	clrf	postinc0,c
  1605  0171E0  06E8               	decf	wreg,f,c
  1606  0171E2  E1FD               	bnz	clear_1
  1607                           
  1608                           ; Clear objects allocated to BANK2 (251 bytes)
  1609  0171E4  EE02  F000         	lfsr	0,__pbssBANK2
  1610  0171E8  0EFB               	movlw	251
  1611  0171EA                     clear_2:
  1612  0171EA  6AEE               	clrf	postinc0,c
  1613  0171EC  06E8               	decf	wreg,f,c
  1614  0171EE  E1FD               	bnz	clear_2
  1615                           
  1616                           ; Clear objects allocated to BANK1 (200 bytes)
  1617  0171F0  EE01  F000         	lfsr	0,__pbssBANK1
  1618  0171F4  0EC8               	movlw	200
  1619  0171F6                     clear_3:
  1620  0171F6  6AEE               	clrf	postinc0,c
  1621  0171F8  06E8               	decf	wreg,f,c
  1622  0171FA  E1FD               	bnz	clear_3
  1623                           
  1624                           ; Clear objects allocated to COMRAM (31 bytes)
  1625  0171FC  EE00  F029         	lfsr	0,__pbssCOMRAM
  1626  017200  0E1F               	movlw	31
  1627  017202                     clear_4:
  1628  017202  6AEE               	clrf	postinc0,c
  1629  017204  06E8               	decf	wreg,f,c
  1630  017206  E1FD               	bnz	clear_4
  1631  017208                     end_of_initialization:
  1632                           	opt stack 0
  1633  017208                     __end_of__initialization:
  1634                           	opt stack 0
  1635  017208  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1636  01720A  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1637  01720C  0100               	movlb	0
  1638  01720E  EF15  F097         	goto	_main	;jump to C main() function
  1639                           tblptru	equ	0xFF8
  1640                           tblptrh	equ	0xFF7
  1641                           tblptrl	equ	0xFF6
  1642                           tablat	equ	0xFF5
  1643                           postinc0	equ	0xFEE
  1644                           wreg	equ	0xFE8
  1645                           postdec1	equ	0xFE5
  1646                           fsr1h	equ	0xFE2
  1647                           fsr1l	equ	0xFE1
  1648                           
  1649                           	psect	bssCOMRAM
  1650  000029                     __pbssCOMRAM:
  1651                           	opt stack 0
  1652  000029                     _lQueue:
  1653                           	opt stack 0
  1654  000029                     	ds	3
  1655  00002C                     _flag:
  1656                           	opt stack 0
  1657  00002C                     	ds	2
  1658  00002E                     _average:
  1659                           	opt stack 0
  1660  00002E                     	ds	2
  1661  000030                     _readIndex:
  1662                           	opt stack 0
  1663  000030                     	ds	2
  1664  000032                     _Found_Flag:
  1665                           	opt stack 0
  1666  000032                     	ds	2
  1667  000034                     _pShiftVal:
  1668                           	opt stack 0
  1669  000034                     	ds	2
  1670  000036                     _COUNTER:
  1671                           	opt stack 0
  1672  000036                     	ds	2
  1673  000038                     _lMotor:
  1674                           	opt stack 0
  1675  000038                     	ds	2
  1676  00003A                     _lCurrent:
  1677                           	opt stack 0
  1678  00003A                     	ds	2
  1679  00003C                     Event_TestButton@j:
  1680                           	opt stack 0
  1681  00003C                     	ds	1
  1682  00003D                     Timer2_Init@PRE:
  1683                           	opt stack 0
  1684  00003D                     	ds	1
  1685  00003E                     Timer2_Init@INDEX:
  1686                           	opt stack 0
  1687  00003E                     	ds	1
  1688  00003F                     Timer0_Init@PRE:
  1689                           	opt stack 0
  1690  00003F                     	ds	1
  1691  000040                     _INDEX:
  1692                           	opt stack 0
  1693  000040                     	ds	1
  1694  000041                     rand@screw:
  1695                           	opt stack 0
  1696  000041                     	ds	1
  1697  000042                     OutSeg@a:
  1698                           	opt stack 0
  1699  000042                     	ds	1
  1700  000043                     OutSeg@segset:
  1701                           	opt stack 0
  1702  000043                     	ds	1
  1703  000044                     OutSeg@cur:
  1704                           	opt stack 0
  1705  000044                     	ds	1
  1706  000045                     _lBufferY:
  1707                           	opt stack 0
  1708  000045                     	ds	1
  1709  000046                     _lBufferX:
  1710                           	opt stack 0
  1711  000046                     	ds	1
  1712  000047                     _clearall:
  1713                           	opt stack 0
  1714  000047                     	ds	1
  1715                           tblptru	equ	0xFF8
  1716                           tblptrh	equ	0xFF7
  1717                           tblptrl	equ	0xFF6
  1718                           tablat	equ	0xFF5
  1719                           postinc0	equ	0xFEE
  1720                           wreg	equ	0xFE8
  1721                           postdec1	equ	0xFE5
  1722                           fsr1h	equ	0xFE2
  1723                           fsr1l	equ	0xFE1
  1724                           
  1725                           	psect	dataCOMRAM
  1726  000048                     __pdataCOMRAM:
  1727                           	opt stack 0
  1728  000048                     _gCursor:
  1729                           	opt stack 0
  1730  000048                     	ds	4
  1731  00004C                     _Bus_State:
  1732                           	opt stack 0
  1733  00004C                     	ds	1
  1734  00004D                     _change:
  1735                           	opt stack 0
  1736  00004D                     	ds	1
  1737  00004E                     	ds	1
  1738  00004F                     _l:
  1739                           	opt stack 0
  1740  00004F                     	ds	1
  1741  000050                     _w:
  1742                           	opt stack 0
  1743  000050                     	ds	1
  1744                           tblptru	equ	0xFF8
  1745                           tblptrh	equ	0xFF7
  1746                           tblptrl	equ	0xFF6
  1747                           tablat	equ	0xFF5
  1748                           postinc0	equ	0xFEE
  1749                           wreg	equ	0xFE8
  1750                           postdec1	equ	0xFE5
  1751                           fsr1h	equ	0xFE2
  1752                           fsr1l	equ	0xFE1
  1753                           
  1754                           	psect	bssBANK1
  1755  000100                     __pbssBANK1:
  1756                           	opt stack 0
  1757  000100                     Timer2_Init@DIV:
  1758                           	opt stack 0
  1759  000100                     	ds	4
  1760  000104                     Timer0_Init@DIV:
  1761                           	opt stack 0
  1762  000104                     	ds	4
  1763  000108                     _gISR:
  1764                           	opt stack 0
  1765  000108                     	ds	3
  1766  00010B                     _lStepFunction:
  1767                           	opt stack 0
  1768  00010B                     	ds	3
  1769  00010E                     _I2C2_More:
  1770                           	opt stack 0
  1771  00010E                     	ds	3
  1772  000111                     _I2C1_More:
  1773                           	opt stack 0
  1774  000111                     	ds	3
  1775  000114                     _I2C2_Done:
  1776                           	opt stack 0
  1777  000114                     	ds	3
  1778  000117                     _I2C1_Done:
  1779                           	opt stack 0
  1780  000117                     	ds	3
  1781  00011A                     _errno:
  1782                           	opt stack 0
  1783  00011A                     	ds	2
  1784  00011C                     _test:
  1785                           	opt stack 0
  1786  00011C                     	ds	2
  1787  00011E                     _timercount:
  1788                           	opt stack 0
  1789  00011E                     	ds	2
  1790  000120                     _Sensor_Observe_Fin:
  1791                           	opt stack 0
  1792  000120                     	ds	2
  1793  000122                     _CW_Count:
  1794                           	opt stack 0
  1795  000122                     	ds	2
  1796  000124                     _CCW_Count:
  1797                           	opt stack 0
  1798  000124                     	ds	2
  1799  000126                     _count:
  1800                           	opt stack 0
  1801  000126                     	ds	2
  1802  000128                     _Close_Pos:
  1803                           	opt stack 0
  1804  000128                     	ds	2
  1805  00012A                     _ADC_Reading:
  1806                           	opt stack 0
  1807  00012A                     	ds	2
  1808  00012C                     _BumpState:
  1809                           	opt stack 0
  1810  00012C                     	ds	2
  1811  00012E                     _mod:
  1812                           	opt stack 0
  1813  00012E                     	ds	2
  1814  000130                     _Square_Dist:
  1815                           	opt stack 0
  1816  000130                     	ds	2
  1817  000132                     _T_VAR:
  1818                           	opt stack 0
  1819  000132                     	ds	2
  1820  000134                     _VictimCount:
  1821                           	opt stack 0
  1822  000134                     	ds	2
  1823  000136                     _Previous_Angle:
  1824                           	opt stack 0
  1825  000136                     	ds	2
  1826  000138                     _k:
  1827                           	opt stack 0
  1828  000138                     	ds	2
  1829  00013A                     _Y_Pos:
  1830                           	opt stack 0
  1831  00013A                     	ds	2
  1832  00013C                     _X_Pos:
  1833                           	opt stack 0
  1834  00013C                     	ds	2
  1835  00013E                     _x:
  1836                           	opt stack 0
  1837  00013E                     	ds	2
  1838  000140                     _total:
  1839                           	opt stack 0
  1840  000140                     	ds	2
  1841  000142                     _thisReading:
  1842                           	opt stack 0
  1843  000142                     	ds	2
  1844  000144                     _Steps:
  1845                           	opt stack 0
  1846  000144                     	ds	2
  1847  000146                     _Motor_Count:
  1848                           	opt stack 0
  1849  000146                     	ds	2
  1850  000148                     _mode:
  1851                           	opt stack 0
  1852  000148                     	ds	2
  1853  00014A                     _Current_Dist2:
  1854                           	opt stack 0
  1855  00014A                     	ds	2
  1856  00014C                     _Current_Dist1:
  1857                           	opt stack 0
  1858  00014C                     	ds	2
  1859  00014E                     _Current_Dist:
  1860                           	opt stack 0
  1861  00014E                     	ds	2
  1862  000150                     _val:
  1863                           	opt stack 0
  1864  000150                     	ds	2
  1865  000152                     HMI_GRender@a:
  1866                           	opt stack 0
  1867  000152                     	ds	2
  1868  000154                     _gBackcolour:
  1869                           	opt stack 0
  1870  000154                     	ds	2
  1871  000156                     SPI_Send9@dat:
  1872                           	opt stack 0
  1873  000156                     	ds	2
  1874  000158                     _Cliff_Left:
  1875                           	opt stack 0
  1876  000158                     	ds	1
  1877  000159                     _Cliff_Right:
  1878                           	opt stack 0
  1879  000159                     	ds	1
  1880  00015A                     _Cliff_FLeft:
  1881                           	opt stack 0
  1882  00015A                     	ds	1
  1883  00015B                     _Cliff_FRight:
  1884                           	opt stack 0
  1885  00015B                     	ds	1
  1886  00015C                     _BumpSensor:
  1887                           	opt stack 0
  1888  00015C                     	ds	1
  1889  00015D                     _u:
  1890                           	opt stack 0
  1891  00015D                     	ds	1
  1892  00015E                     _j:
  1893                           	opt stack 0
  1894  00015E                     	ds	1
  1895  00015F                     _i:
  1896                           	opt stack 0
  1897  00015F                     	ds	1
  1898  000160                     _ADC_Initialised:
  1899                           	opt stack 0
  1900  000160                     	ds	1
  1901  000161                     _SPI2:
  1902                           	opt stack 0
  1903  000161                     	ds	11
  1904  00016C                     _PortE:
  1905                           	opt stack 0
  1906  00016C                     	ds	10
  1907  000176                     _PortD:
  1908                           	opt stack 0
  1909  000176                     	ds	10
  1910  000180                     _PortB:
  1911                           	opt stack 0
  1912  000180                     	ds	10
  1913  00018A                     _PortC:
  1914                           	opt stack 0
  1915  00018A                     	ds	10
  1916  000194                     _PortF:
  1917                           	opt stack 0
  1918  000194                     	ds	10
  1919  00019E                     _I2C2T:
  1920                           	opt stack 0
  1921  00019E                     	ds	7
  1922  0001A5                     _I2C1T:
  1923                           	opt stack 0
  1924  0001A5                     	ds	7
  1925  0001AC                     _ADC_AN3:
  1926                           	opt stack 0
  1927  0001AC                     	ds	5
  1928  0001B1                     _ADC_AN2:
  1929                           	opt stack 0
  1930  0001B1                     	ds	5
  1931  0001B6                     _ADC_AN1:
  1932                           	opt stack 0
  1933  0001B6                     	ds	5
  1934  0001BB                     _ADC_AN0:
  1935                           	opt stack 0
  1936  0001BB                     	ds	5
  1937  0001C0                     LCD_DrawRectangle@p4:
  1938                           	opt stack 0
  1939  0001C0                     	ds	4
  1940  0001C4                     LCD_DrawRectangle@p2:
  1941                           	opt stack 0
  1942  0001C4                     	ds	4
  1943                           tblptru	equ	0xFF8
  1944                           tblptrh	equ	0xFF7
  1945                           tblptrl	equ	0xFF6
  1946                           tablat	equ	0xFF5
  1947                           postinc0	equ	0xFEE
  1948                           wreg	equ	0xFE8
  1949                           postdec1	equ	0xFE5
  1950                           fsr1h	equ	0xFE2
  1951                           fsr1l	equ	0xFE1
  1952                           
  1953                           	psect	dataBANK1
  1954  0001C8                     __pdataBANK1:
  1955                           	opt stack 0
  1956  0001C8                     Console_Render@F6956:
  1957                           	opt stack 0
  1958  0001C8                     	ds	4
  1959  0001CC                     _gLineSize:
  1960                           	opt stack 0
  1961  0001CC                     	ds	4
  1962  0001D0                     _gCharSize:
  1963                           	opt stack 0
  1964  0001D0                     	ds	4
  1965  0001D4                     _countOff:
  1966                           	opt stack 0
  1967  0001D4                     	ds	2
  1968  0001D6                     _countOn:
  1969                           	opt stack 0
  1970  0001D6                     	ds	2
  1971  0001D8                     _Low_Sensor:
  1972                           	opt stack 0
  1973  0001D8                     	ds	2
  1974  0001DA                     _Desired_Level:
  1975                           	opt stack 0
  1976  0001DA                     	ds	2
  1977  0001DC                     _Spd:
  1978                           	opt stack 0
  1979  0001DC                     	ds	2
  1980  0001DE                     _numReadings:
  1981                           	opt stack 0
  1982  0001DE                     	ds	2
  1983  0001E0                     _top:
  1984                           	opt stack 0
  1985  0001E0                     	ds	2
  1986  0001E2                     _Current_Direction:
  1987                           	opt stack 0
  1988  0001E2                     	ds	2
  1989  0001E4                     _gForecolour:
  1990                           	opt stack 0
  1991  0001E4                     	ds	2
  1992  0001E6                     	ds	1
  1993  0001E7                     	ds	1
  1994                           tblptru	equ	0xFF8
  1995                           tblptrh	equ	0xFF7
  1996                           tblptrl	equ	0xFF6
  1997                           tablat	equ	0xFF5
  1998                           postinc0	equ	0xFEE
  1999                           wreg	equ	0xFE8
  2000                           postdec1	equ	0xFE5
  2001                           fsr1h	equ	0xFE2
  2002                           fsr1l	equ	0xFE1
  2003                           
  2004                           	psect	bssBANK2
  2005  000200                     __pbssBANK2:
  2006                           	opt stack 0
  2007  000200                     _maze:
  2008                           	opt stack 0
  2009  000200                     	ds	200
  2010  0002C8                     _SPI1:
  2011                           	opt stack 0
  2012  0002C8                     	ds	11
  2013  0002D3                     _DIPSwitch:
  2014                           	opt stack 0
  2015  0002D3                     	ds	10
  2016  0002DD                     _TestButton:
  2017                           	opt stack 0
  2018  0002DD                     	ds	10
  2019  0002E7                     _PortG:
  2020                           	opt stack 0
  2021  0002E7                     	ds	10
  2022  0002F1                     _PortA:
  2023                           	opt stack 0
  2024  0002F1                     	ds	10
  2025                           tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           tblptrl	equ	0xFF6
  2028                           tablat	equ	0xFF5
  2029                           postinc0	equ	0xFEE
  2030                           wreg	equ	0xFE8
  2031                           postdec1	equ	0xFE5
  2032                           fsr1h	equ	0xFE2
  2033                           fsr1l	equ	0xFE1
  2034                           
  2035                           	psect	bssBANK3
  2036  000300                     __pbssBANK3:
  2037                           	opt stack 0
  2038  000300                     _stack:
  2039                           	opt stack 0
  2040  000300                     	ds	40
  2041  000328                     _lCBuffer:
  2042                           	opt stack 0
  2043  000328                     	ds	30
  2044  000346                     _readings:
  2045                           	opt stack 0
  2046  000346                     	ds	20
  2047  00035A                     Console_MakeField@Fill:
  2048                           	opt stack 0
  2049  00035A                     	ds	70
  2050  0003A0                     _HMIBoard:
  2051                           	opt stack 0
  2052  0003A0                     	ds	58
  2053                           tblptru	equ	0xFF8
  2054                           tblptrh	equ	0xFF7
  2055                           tblptrl	equ	0xFF6
  2056                           tablat	equ	0xFF5
  2057                           postinc0	equ	0xFEE
  2058                           wreg	equ	0xFE8
  2059                           postdec1	equ	0xFE5
  2060                           fsr1h	equ	0xFE2
  2061                           fsr1l	equ	0xFE1
  2062                           
  2063                           	psect	bssBIGRAM
  2064  0003E2                     __pbssBIGRAM:
  2065                           	opt stack 0
  2066  0003E2                     _lBuffer:
  2067                           	opt stack 0
  2068  0003E2                     	ds	300
  2069                           tblptru	equ	0xFF8
  2070                           tblptrh	equ	0xFF7
  2071                           tblptrl	equ	0xFF6
  2072                           tablat	equ	0xFF5
  2073                           postinc0	equ	0xFEE
  2074                           wreg	equ	0xFE8
  2075                           postdec1	equ	0xFE5
  2076                           fsr1h	equ	0xFE2
  2077                           fsr1l	equ	0xFE1
  2078                           
  2079                           	psect	cstackBANK3
  2080  0003DA                     __pcstackBANK3:
  2081                           	opt stack 0
  2082  0003DA                     ??_main:
  2083                           
  2084                           ; 1 bytes @ 0x0
  2085  0003DA                     	ds	4
  2086  0003DE                     main@down:
  2087                           	opt stack 0
  2088                           
  2089                           ; 1 bytes @ 0x4
  2090  0003DE                     	ds	1
  2091  0003DF                     main@right:
  2092                           	opt stack 0
  2093                           
  2094                           ; 1 bytes @ 0x5
  2095  0003DF                     	ds	1
  2096  0003E0                     main@left:
  2097                           	opt stack 0
  2098                           
  2099                           ; 1 bytes @ 0x6
  2100  0003E0                     	ds	1
  2101  0003E1                     main@up:
  2102                           	opt stack 0
  2103                           
  2104                           ; 1 bytes @ 0x7
  2105  0003E1                     	ds	1
  2106                           tblptru	equ	0xFF8
  2107                           tblptrh	equ	0xFF7
  2108                           tblptrl	equ	0xFF6
  2109                           tablat	equ	0xFF5
  2110                           postinc0	equ	0xFEE
  2111                           wreg	equ	0xFE8
  2112                           postdec1	equ	0xFE5
  2113                           fsr1h	equ	0xFE2
  2114                           fsr1l	equ	0xFE1
  2115                           
  2116                           	psect	cstackBANK2
  2117  0002FB                     __pcstackBANK2:
  2118                           	opt stack 0
  2119  0002FB                     ??_Navigate_Maze:
  2120                           
  2121                           ; 1 bytes @ 0x0
  2122  0002FB                     	ds	4
  2123                           tblptru	equ	0xFF8
  2124                           tblptrh	equ	0xFF7
  2125                           tblptrl	equ	0xFF6
  2126                           tablat	equ	0xFF5
  2127                           postinc0	equ	0xFEE
  2128                           wreg	equ	0xFE8
  2129                           postdec1	equ	0xFE5
  2130                           fsr1h	equ	0xFE2
  2131                           fsr1l	equ	0xFE1
  2132                           
  2133                           	psect	cstackBANK1
  2134  0001E8                     __pcstackBANK1:
  2135                           	opt stack 0
  2136  0001E8                     Travel@Dir:
  2137                           	opt stack 0
  2138                           
  2139                           ; 2 bytes @ 0x0
  2140  0001E8                     	ds	2
  2141  0001EA                     Travel@spd1:
  2142                           	opt stack 0
  2143                           
  2144                           ; 2 bytes @ 0x2
  2145  0001EA                     	ds	2
  2146  0001EC                     Travel@spd2:
  2147                           	opt stack 0
  2148                           
  2149                           ; 2 bytes @ 0x4
  2150  0001EC                     	ds	2
  2151  0001EE                     Travel@rev_Dist:
  2152                           	opt stack 0
  2153                           
  2154                           ; 2 bytes @ 0x6
  2155  0001EE                     	ds	2
  2156  0001F0                     Travel@Prev_Angle:
  2157                           	opt stack 0
  2158                           
  2159                           ; 1 bytes @ 0x8
  2160  0001F0                     	ds	1
  2161  0001F1                     Travel@Dist_Travelled:
  2162                           	opt stack 0
  2163                           
  2164                           ; 2 bytes @ 0x9
  2165  0001F1                     	ds	2
  2166  0001F3                     Travel@Req_Dir:
  2167                           	opt stack 0
  2168                           
  2169                           ; 2 bytes @ 0xB
  2170  0001F3                     	ds	2
  2171  0001F5                     Travel@error:
  2172                           	opt stack 0
  2173                           
  2174                           ; 2 bytes @ 0xD
  2175  0001F5                     	ds	2
  2176  0001F7                     Go_Backward@direction:
  2177                           	opt stack 0
  2178                           
  2179                           ; 2 bytes @ 0xF
  2180  0001F7                     	ds	2
  2181  0001F9                     Go_Backward@spd:
  2182                           	opt stack 0
  2183                           
  2184                           ; 2 bytes @ 0x11
  2185  0001F9                     	ds	2
  2186  0001FB                     ??_Go_Backward:
  2187                           
  2188                           ; 1 bytes @ 0x13
  2189  0001FB                     	ds	2
  2190  0001FD                     Navigate_Maze@Direction:
  2191                           	opt stack 0
  2192                           
  2193                           ; 2 bytes @ 0x15
  2194  0001FD                     	ds	2
  2195                           tblptru	equ	0xFF8
  2196                           tblptrh	equ	0xFF7
  2197                           tblptrl	equ	0xFF6
  2198                           tablat	equ	0xFF5
  2199                           postinc0	equ	0xFEE
  2200                           wreg	equ	0xFE8
  2201                           postdec1	equ	0xFE5
  2202                           fsr1h	equ	0xFE2
  2203                           fsr1l	equ	0xFE1
  2204                           
  2205                           	psect	cstackBANK0
  2206  000060                     __pcstackBANK0:
  2207                           	opt stack 0
  2208  000060                     ??_Console_ClearCursor:
  2209  000060                     ??_InitADC:
  2210  000060                     ??_Console_Init:
  2211  000060                     ??_Console_NewLine:
  2212  000060                     ??_Console_FormFeed:
  2213  000060                     ??_HMI_SetButton:
  2214  000060                     ?_GetPortProperties:
  2215                           	opt stack 0
  2216  000060                     ?_GetPortPORT:
  2217                           	opt stack 0
  2218  000060                     ?_GetPortTRIS:
  2219                           	opt stack 0
  2220  000060                     ?_FunctReadADC:
  2221                           	opt stack 0
  2222  000060                     ?___wmul:
  2223                           	opt stack 0
  2224  000060                     ?___awdiv:
  2225                           	opt stack 0
  2226  000060                     ?___lwdiv:
  2227                           	opt stack 0
  2228  000060                     ?___fldiv:
  2229                           	opt stack 0
  2230  000060                     ?_frexp:
  2231                           	opt stack 0
  2232  000060                     ?___lldiv:
  2233                           	opt stack 0
  2234  000060                     ?___xxtofl:
  2235                           	opt stack 0
  2236  000060                     Mode_Set@pMode:
  2237                           	opt stack 0
  2238  000060                     ToSegment@pCHR:
  2239                           	opt stack 0
  2240  000060                     HMI_SetBar@pValue:
  2241                           	opt stack 0
  2242  000060                     eusartSend@sendChar:
  2243                           	opt stack 0
  2244  000060                     Port_GetPin@pInput:
  2245                           	opt stack 0
  2246  000060                     Port_GetQuad@pInput:
  2247                           	opt stack 0
  2248  000060                     SPI_DisableISR@pInput:
  2249                           	opt stack 0
  2250  000060                     SPI_DCS@pInput:
  2251                           	opt stack 0
  2252  000060                     SPI_Send@pInput:
  2253                           	opt stack 0
  2254  000060                     Byte_SetBit@pInput:
  2255                           	opt stack 0
  2256  000060                     Byte_GetBit@pInput:
  2257                           	opt stack 0
  2258  000060                     Byte_SetZone@pInput:
  2259                           	opt stack 0
  2260  000060                     Byte_GetZone@pInput:
  2261                           	opt stack 0
  2262  000060                     Byte_SetByte@pInput:
  2263                           	opt stack 0
  2264  000060                     delay_ms@ms:
  2265                           	opt stack 0
  2266  000060                     delay_us@us:
  2267                           	opt stack 0
  2268  000060                     reverse@input:
  2269                           	opt stack 0
  2270  000060                     FunctReadADC@channel:
  2271                           	opt stack 0
  2272  000060                     ___wmul@multiplier:
  2273                           	opt stack 0
  2274  000060                     ___awdiv@dividend:
  2275                           	opt stack 0
  2276  000060                     ___lwdiv@dividend:
  2277                           	opt stack 0
  2278  000060                     MXK_Queue@pCallback:
  2279                           	opt stack 0
  2280  000060                     ___flge@ff1:
  2281                           	opt stack 0
  2282  000060                     ___lldiv@dividend:
  2283                           	opt stack 0
  2284  000060                     ___fldiv@b:
  2285                           	opt stack 0
  2286  000060                     ___xxtofl@val:
  2287                           	opt stack 0
  2288  000060                     frexp@value:
  2289                           	opt stack 0
  2290                           
  2291                           ; 4 bytes @ 0x0
  2292  000060                     	ds	1
  2293  000061                     ?_UpdateDistance:
  2294                           	opt stack 0
  2295  000061                     ?_Get_VirtualWall_State:
  2296                           	opt stack 0
  2297  000061                     HMI_SetSegments@pString:
  2298                           	opt stack 0
  2299  000061                     Drive@SpeedL:
  2300                           	opt stack 0
  2301  000061                     Turn@Angle:
  2302                           	opt stack 0
  2303                           
  2304                           ; 2 bytes @ 0x1
  2305  000061                     	ds	1
  2306  000062                     GetPortProperties@pInput:
  2307                           	opt stack 0
  2308  000062                     GetPortPORT@pInput:
  2309                           	opt stack 0
  2310  000062                     GetPortTRIS@pInput:
  2311                           	opt stack 0
  2312  000062                     Port_GetPin@pPin:
  2313                           	opt stack 0
  2314  000062                     Port_GetQuad@pQuad:
  2315                           	opt stack 0
  2316  000062                     SPI_Send@pData:
  2317                           	opt stack 0
  2318  000062                     Byte_SetBit@pBit:
  2319                           	opt stack 0
  2320  000062                     Byte_GetBit@pBit:
  2321                           	opt stack 0
  2322  000062                     Byte_SetZone@pMax:
  2323                           	opt stack 0
  2324  000062                     Byte_GetZone@pMax:
  2325                           	opt stack 0
  2326  000062                     Byte_SetByte@pValue:
  2327                           	opt stack 0
  2328  000062                     Console_Init@x:
  2329                           	opt stack 0
  2330  000062                     Console_FormFeed@x:
  2331                           	opt stack 0
  2332  000062                     reverse@length:
  2333                           	opt stack 0
  2334  000062                     ___wmul@multiplicand:
  2335                           	opt stack 0
  2336  000062                     ___awdiv@divisor:
  2337                           	opt stack 0
  2338  000062                     ___lwdiv@divisor:
  2339                           	opt stack 0
  2340  000062                     delay_ms@u:
  2341                           	opt stack 0
  2342  000062                     delay_us@u:
  2343                           	opt stack 0
  2344  000062                     HMI_SetButton@reindex:
  2345                           	opt stack 0
  2346                           
  2347                           ; 4 bytes @ 0x2
  2348  000062                     	ds	1
  2349  000063                     ??_UpdateDistance:
  2350  000063                     ??_Port_GetPin:
  2351  000063                     ??_Port_GetQuad:
  2352  000063                     ??_Byte_GetBit:
  2353  000063                     ??_Get_VirtualWall_State:
  2354  000063                     LCD_Write@mode:
  2355                           	opt stack 0
  2356  000063                     Byte_SetBit@pValue:
  2357                           	opt stack 0
  2358  000063                     Byte_SetZone@pChunk:
  2359                           	opt stack 0
  2360  000063                     Byte_GetZone@pChunk:
  2361                           	opt stack 0
  2362  000063                     Console_Init@y:
  2363                           	opt stack 0
  2364  000063                     Console_FormFeed@y:
  2365                           	opt stack 0
  2366  000063                     OutSeg@pSegment:
  2367                           	opt stack 0
  2368  000063                     Drive@SpeedR:
  2369                           	opt stack 0
  2370  000063                     Turn@Speed:
  2371                           	opt stack 0
  2372                           
  2373                           ; 2 bytes @ 0x3
  2374  000063                     	ds	1
  2375  000064                     ??_Byte_SetBit:
  2376  000064                     ??_Console_IncrementCursor:
  2377  000064                     ??_OutSeg:
  2378  000064                     ??___xxtofl:
  2379  000064                     LCD_Write@value:
  2380                           	opt stack 0
  2381  000064                     Byte_GetBit@Output:
  2382                           	opt stack 0
  2383  000064                     Byte_SetZone@pChunkSize:
  2384                           	opt stack 0
  2385  000064                     Byte_GetZone@pChunkSize:
  2386                           	opt stack 0
  2387  000064                     reverse@tempVar:
  2388                           	opt stack 0
  2389  000064                     ___awdiv@counter:
  2390                           	opt stack 0
  2391  000064                     ___lwdiv@counter:
  2392                           	opt stack 0
  2393  000064                     HMI_SetSegments@in:
  2394                           	opt stack 0
  2395  000064                     Get_VirtualWall_State@Vitual_Wall_Sensor:
  2396                           	opt stack 0
  2397  000064                     ___wmul@product:
  2398                           	opt stack 0
  2399  000064                     frexp@eptr:
  2400                           	opt stack 0
  2401  000064                     ___flge@ff2:
  2402                           	opt stack 0
  2403  000064                     ___lldiv@divisor:
  2404                           	opt stack 0
  2405  000064                     ___fldiv@a:
  2406                           	opt stack 0
  2407                           
  2408                           ; 4 bytes @ 0x4
  2409  000064                     	ds	1
  2410  000065                     ??_Byte_GetZone:
  2411  000065                     ?_Console_MakeField:
  2412                           	opt stack 0
  2413  000065                     Set_Addr_Window@ys:
  2414                           	opt stack 0
  2415  000065                     Set_Rotation@m:
  2416                           	opt stack 0
  2417  000065                     Port_GetPin@Output:
  2418                           	opt stack 0
  2419  000065                     Port_GetQuad@Output:
  2420                           	opt stack 0
  2421  000065                     Byte_SetZone@pValue:
  2422                           	opt stack 0
  2423  000065                     ___awdiv@sign:
  2424                           	opt stack 0
  2425  000065                     LCD_Word_Write@value:
  2426                           	opt stack 0
  2427  000065                     reverse@iterator:
  2428                           	opt stack 0
  2429  000065                     Turn@Dir:
  2430                           	opt stack 0
  2431  000065                     ___lwdiv@quotient:
  2432                           	opt stack 0
  2433                           
  2434                           ; 2 bytes @ 0x5
  2435  000065                     	ds	1
  2436  000066                     ??_Create_Maze:
  2437  000066                     ??_frexp:
  2438  000066                     ??_Byte_SetZone:
  2439  000066                     Set_Addr_Window@xe:
  2440                           	opt stack 0
  2441  000066                     Set_Rotation@rotation:
  2442                           	opt stack 0
  2443  000066                     Byte_GetZone@MASK:
  2444                           	opt stack 0
  2445  000066                     OutSeg@pInput:
  2446                           	opt stack 0
  2447  000066                     HMI_SetButton@pValue:
  2448                           	opt stack 0
  2449  000066                     MXK_BlockSwitchTo@CUR:
  2450                           	opt stack 0
  2451  000066                     MXK_SwitchTo@CUR:
  2452                           	opt stack 0
  2453  000066                     ___awdiv@quotient:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0x6
  2457  000066                     	ds	1
  2458  000067                     ??_Console_MakeField:
  2459  000067                     ?___lwmod:
  2460                           	opt stack 0
  2461  000067                     Set_Addr_Window@ye:
  2462                           	opt stack 0
  2463  000067                     Byte_GetZone@Offset:
  2464                           	opt stack 0
  2465  000067                     OutSeg@out:
  2466                           	opt stack 0
  2467  000067                     HMI_SetButton@v:
  2468                           	opt stack 0
  2469  000067                     MXK_BlockSwitchTo@pModule:
  2470                           	opt stack 0
  2471  000067                     MXK_SwitchTo@pModule:
  2472                           	opt stack 0
  2473  000067                     Turn@C_Angle:
  2474                           	opt stack 0
  2475  000067                     ___lwmod@dividend:
  2476                           	opt stack 0
  2477                           
  2478                           ; 2 bytes @ 0x7
  2479  000067                     	ds	1
  2480  000068                     ??___fldiv:
  2481  000068                     ??_Console_Tab:
  2482  000068                     ??___flge:
  2483  000068                     Set_Addr_Window@xs:
  2484                           	opt stack 0
  2485  000068                     Byte_GetZone@Output:
  2486                           	opt stack 0
  2487  000068                     ___xxtofl@sign:
  2488                           	opt stack 0
  2489  000068                     HMI_Render@a:
  2490                           	opt stack 0
  2491  000068                     Create_Maze@count:
  2492                           	opt stack 0
  2493  000068                     ___lldiv@quotient:
  2494                           	opt stack 0
  2495                           
  2496                           ; 4 bytes @ 0x8
  2497  000068                     	ds	1
  2498  000069                     Byte_SetZone@Offset:
  2499                           	opt stack 0
  2500  000069                     ___xxtofl@exp:
  2501                           	opt stack 0
  2502  000069                     LCD_Fill@pColour:
  2503                           	opt stack 0
  2504  000069                     LCD_FillRectangle@pColour:
  2505                           	opt stack 0
  2506  000069                     Byte_GetPair@pInput:
  2507                           	opt stack 0
  2508  000069                     Console_MakeField@Index:
  2509                           	opt stack 0
  2510  000069                     Turn@Rad:
  2511                           	opt stack 0
  2512  000069                     ___lwmod@divisor:
  2513                           	opt stack 0
  2514                           
  2515                           ; 2 bytes @ 0x9
  2516  000069                     	ds	1
  2517  00006A                     Byte_SetZone@MASK:
  2518                           	opt stack 0
  2519  00006A                     Create_Maze@p:
  2520                           	opt stack 0
  2521  00006A                     ___xxtofl@arg:
  2522                           	opt stack 0
  2523                           
  2524                           ; 4 bytes @ 0xA
  2525  00006A                     	ds	1
  2526  00006B                     LCD_Fill@i:
  2527                           	opt stack 0
  2528  00006B                     Byte_GetPair@pPair:
  2529                           	opt stack 0
  2530  00006B                     Console_MakeField@pInput:
  2531                           	opt stack 0
  2532  00006B                     ___lwmod@counter:
  2533                           	opt stack 0
  2534  00006B                     Byte_SetPair@pInput:
  2535                           	opt stack 0
  2536  00006B                     Byte_SetQuad@pInput:
  2537                           	opt stack 0
  2538  00006B                     LCD_FillRectangle@pPoint:
  2539                           	opt stack 0
  2540                           
  2541                           ; 4 bytes @ 0xB
  2542  00006B                     	ds	1
  2543  00006C                     LCD_Fill@j:
  2544                           	opt stack 0
  2545  00006C                     ___lldiv@counter:
  2546                           	opt stack 0
  2547  00006C                     ___fldiv@sign:
  2548                           	opt stack 0
  2549  00006C                     Word_GetPair@pInput:
  2550                           	opt stack 0
  2551  00006C                     itos@input:
  2552                           	opt stack 0
  2553  00006C                     Console_MakeField@Column:
  2554                           	opt stack 0
  2555  00006C                     Create_Maze@x:
  2556                           	opt stack 0
  2557                           
  2558                           ; 2 bytes @ 0xC
  2559  00006C                     	ds	1
  2560  00006D                     Byte_SetPair@pPair:
  2561                           	opt stack 0
  2562  00006D                     Byte_SetQuad@pQuad:
  2563                           	opt stack 0
  2564  00006D                     Console_Tab@t:
  2565                           	opt stack 0
  2566  00006D                     Timer2_Init@pFrequency:
  2567                           	opt stack 0
  2568  00006D                     ___fldiv@rem:
  2569                           	opt stack 0
  2570                           
  2571                           ; 4 bytes @ 0xD
  2572  00006D                     	ds	1
  2573  00006E                     ?___flmul:
  2574                           	opt stack 0
  2575  00006E                     Byte_SetPair@pValue:
  2576                           	opt stack 0
  2577  00006E                     Byte_SetQuad@pValue:
  2578                           	opt stack 0
  2579  00006E                     Word_GetPair@pPair:
  2580                           	opt stack 0
  2581  00006E                     Console_Tab@i:
  2582                           	opt stack 0
  2583  00006E                     itos@destination:
  2584                           	opt stack 0
  2585  00006E                     _Console_MakeField$10974:
  2586                           	opt stack 0
  2587  00006E                     Create_Maze@y:
  2588                           	opt stack 0
  2589  00006E                     ___flmul@b:
  2590                           	opt stack 0
  2591                           
  2592                           ; 4 bytes @ 0xE
  2593  00006E                     	ds	1
  2594  00006F                     Console_Tab@c:
  2595                           	opt stack 0
  2596  00006F                     Port_SetPin@pInput:
  2597                           	opt stack 0
  2598  00006F                     Port_Set@pInput:
  2599                           	opt stack 0
  2600  00006F                     SPI_MinSpeed@pInput:
  2601                           	opt stack 0
  2602  00006F                     SPI_MaxSpeed@pInput:
  2603                           	opt stack 0
  2604  00006F                     Word_SetPair@pInput:
  2605                           	opt stack 0
  2606  00006F                     PortProperty_Valid@pInput:
  2607                           	opt stack 0
  2608  00006F                     LCD_FillRectangle@pSize:
  2609                           	opt stack 0
  2610                           
  2611                           ; 4 bytes @ 0xF
  2612  00006F                     	ds	1
  2613  000070                     ??_Console_PrintChar:
  2614  000070                     Console_MakeField@x:
  2615                           	opt stack 0
  2616  000070                     itos@Data:
  2617                           	opt stack 0
  2618                           
  2619                           ; 2 bytes @ 0x10
  2620  000070                     	ds	1
  2621  000071                     ??_Timer2_Init:
  2622  000071                     Port_SetPin@pPin:
  2623                           	opt stack 0
  2624  000071                     Port_Set@pValue:
  2625                           	opt stack 0
  2626  000071                     Word_SetPair@pPair:
  2627                           	opt stack 0
  2628  000071                     PortProperty_Valid@pPinDrive:
  2629                           	opt stack 0
  2630  000071                     Console_MakeField@y:
  2631                           	opt stack 0
  2632  000071                     ___fldiv@new_exp:
  2633                           	opt stack 0
  2634                           
  2635                           ; 2 bytes @ 0x11
  2636  000071                     	ds	1
  2637  000072                     ??_Port_Set:
  2638  000072                     Port_SetPin@pValue:
  2639                           	opt stack 0
  2640  000072                     Word_SetPair@pValue:
  2641                           	opt stack 0
  2642  000072                     PortProperty_Valid@pPin:
  2643                           	opt stack 0
  2644  000072                     LCD_DrawField@pField:
  2645                           	opt stack 0
  2646  000072                     itos@Length:
  2647                           	opt stack 0
  2648  000072                     Timer2_Init@RDIV:
  2649                           	opt stack 0
  2650  000072                     ___flmul@a:
  2651                           	opt stack 0
  2652                           
  2653                           ; 4 bytes @ 0x12
  2654  000072                     	ds	1
  2655  000073                     ??_PortProperty_Valid:
  2656  000073                     ??_LCD_FillRectangle:
  2657  000073                     Port_SetPin@Type:
  2658                           	opt stack 0
  2659  000073                     Console_PrintChar@pInput:
  2660                           	opt stack 0
  2661  000073                     ___fldiv@grs:
  2662                           	opt stack 0
  2663                           
  2664                           ; 4 bytes @ 0x13
  2665  000073                     	ds	1
  2666  000074                     LED_Set@pValue:
  2667                           	opt stack 0
  2668  000074                     putch@c:
  2669                           	opt stack 0
  2670  000074                     Port_TogglePin@pInput:
  2671                           	opt stack 0
  2672  000074                     itos@Out:
  2673                           	opt stack 0
  2674  000074                     LCD_DrawField@pPoint:
  2675                           	opt stack 0
  2676                           
  2677                           ; 4 bytes @ 0x14
  2678  000074                     	ds	1
  2679  000075                     ?_printf:
  2680                           	opt stack 0
  2681  000075                     LCD_FillRectangle@i:
  2682                           	opt stack 0
  2683  000075                     LED_Set@pLED:
  2684                           	opt stack 0
  2685  000075                     printf@f:
  2686                           	opt stack 0
  2687  000075                     PortProperty_Valid@Errors:
  2688                           	opt stack 0
  2689                           
  2690                           ; 16 bytes @ 0x15
  2691  000075                     	ds	1
  2692  000076                     ??___flmul:
  2693  000076                     LCD_FillRectangle@j:
  2694                           	opt stack 0
  2695  000076                     Port_TogglePin@pPin:
  2696                           	opt stack 0
  2697  000076                     HMI_SetNumber@pInput:
  2698                           	opt stack 0
  2699  000076                     Timer2_Init@pCPUClock:
  2700                           	opt stack 0
  2701                           
  2702                           ; 4 bytes @ 0x16
  2703  000076                     	ds	1
  2704  000077                     Port_TogglePin@Value:
  2705                           	opt stack 0
  2706  000077                     ___fldiv@bexp:
  2707                           	opt stack 0
  2708                           
  2709                           ; 1 bytes @ 0x17
  2710  000077                     	ds	1
  2711  000078                     LED_Toggle@pLED:
  2712                           	opt stack 0
  2713  000078                     ___fldiv@aexp:
  2714                           	opt stack 0
  2715  000078                     LCD_DrawField@pSize:
  2716                           	opt stack 0
  2717                           
  2718                           ; 4 bytes @ 0x18
  2719  000078                     	ds	1
  2720  000079                     Event_DIPSwitch@pState:
  2721                           	opt stack 0
  2722  000079                     Event_TestButton@pState:
  2723                           	opt stack 0
  2724                           
  2725                           ; 1 bytes @ 0x19
  2726  000079                     	ds	1
  2727  00007A                     Event_DIPSwitch@Bar:
  2728                           	opt stack 0
  2729  00007A                     ___flmul@sign:
  2730                           	opt stack 0
  2731  00007A                     Timer2_Init@DIVIDE:
  2732                           	opt stack 0
  2733                           
  2734                           ; 4 bytes @ 0x1A
  2735  00007A                     	ds	1
  2736  00007B                     ??_printf:
  2737  00007B                     ___flmul@aexp:
  2738                           	opt stack 0
  2739  00007B                     Button_Poll@pButton:
  2740                           	opt stack 0
  2741                           
  2742                           ; 2 bytes @ 0x1B
  2743  00007B                     	ds	1
  2744  00007C                     ??_LCD_DrawField:
  2745  00007C                     printf@flag:
  2746                           	opt stack 0
  2747  00007C                     ___flmul@grs:
  2748                           	opt stack 0
  2749                           
  2750                           ; 4 bytes @ 0x1C
  2751  00007C                     	ds	1
  2752  00007D                     Button_Poll@pIncrement:
  2753                           	opt stack 0
  2754  00007D                     printf@prec:
  2755                           	opt stack 0
  2756                           
  2757                           ; 1 bytes @ 0x1D
  2758  00007D                     	ds	1
  2759  00007E                     ??_Button_Poll:
  2760  00007E                     LCD_DrawField@count:
  2761                           	opt stack 0
  2762  00007E                     printf@ap:
  2763                           	opt stack 0
  2764                           
  2765                           ; 2 bytes @ 0x1E
  2766  00007E                     	ds	2
  2767  000080                     LCD_DrawField@xmax:
  2768                           	opt stack 0
  2769  000080                     ___flmul@bexp:
  2770                           	opt stack 0
  2771  000080                     printf@val:
  2772                           	opt stack 0
  2773                           
  2774                           ; 2 bytes @ 0x20
  2775  000080                     	ds	1
  2776  000081                     LCD_DrawField@ymax:
  2777                           	opt stack 0
  2778  000081                     ___flmul@prod:
  2779                           	opt stack 0
  2780                           
  2781                           ; 4 bytes @ 0x21
  2782  000081                     	ds	1
  2783  000082                     LCD_DrawField@i:
  2784                           	opt stack 0
  2785  000082                     printf@c:
  2786                           	opt stack 0
  2787  000082                     Port_Set@TypeRequired:
  2788                           	opt stack 0
  2789                           
  2790                           ; 2 bytes @ 0x22
  2791  000082                     	ds	1
  2792  000083                     ??_Console_Render:
  2793  000083                     ?_pop:
  2794                           	opt stack 0
  2795  000083                     Button_Poll@Pin:
  2796                           	opt stack 0
  2797  000083                     push@data:
  2798                           	opt stack 0
  2799                           
  2800                           ; 2 bytes @ 0x23
  2801  000083                     	ds	1
  2802  000084                     Port_Set@TypeActual:
  2803                           	opt stack 0
  2804                           
  2805                           ; 2 bytes @ 0x24
  2806  000084                     	ds	1
  2807  000085                     PortProperty_Valid@Pair:
  2808                           	opt stack 0
  2809  000085                     Console_Render@temp:
  2810                           	opt stack 0
  2811  000085                     pop@data:
  2812                           	opt stack 0
  2813  000085                     ___flmul@temp:
  2814                           	opt stack 0
  2815                           
  2816                           ; 2 bytes @ 0x25
  2817  000085                     	ds	1
  2818  000086                     Port_Set@Type:
  2819                           	opt stack 0
  2820  000086                     Port_CheckPairType@pInput:
  2821                           	opt stack 0
  2822  000086                     Port_SetPinType@pInput:
  2823                           	opt stack 0
  2824  000086                     Console_Render@lCursor:
  2825                           	opt stack 0
  2826                           
  2827                           ; 4 bytes @ 0x26
  2828  000086                     	ds	1
  2829  000087                     ?___flneg:
  2830                           	opt stack 0
  2831  000087                     ___flneg@f1:
  2832                           	opt stack 0
  2833                           
  2834                           ; 4 bytes @ 0x27
  2835  000087                     	ds	1
  2836  000088                     Port_CheckPairType@pPair:
  2837                           	opt stack 0
  2838  000088                     Port_SetPinType@pPin:
  2839                           	opt stack 0
  2840                           
  2841                           ; 1 bytes @ 0x28
  2842  000088                     	ds	1
  2843  000089                     Port_CheckPairType@pDrive:
  2844                           	opt stack 0
  2845  000089                     Port_SetPinType@pType:
  2846                           	opt stack 0
  2847                           
  2848                           ; 1 bytes @ 0x29
  2849  000089                     	ds	1
  2850  00008A                     Port_CheckPairType@Pin1:
  2851                           	opt stack 0
  2852  00008A                     Port_SetPinType@Output:
  2853                           	opt stack 0
  2854  00008A                     Console_Render@x:
  2855                           	opt stack 0
  2856                           
  2857                           ; 1 bytes @ 0x2A
  2858  00008A                     	ds	1
  2859  00008B                     ?___fladd:
  2860                           	opt stack 0
  2861  00008B                     Port_CheckPairType@Pin2:
  2862                           	opt stack 0
  2863  00008B                     Console_Render@y:
  2864                           	opt stack 0
  2865  00008B                     Port_SetPinType@Props:
  2866                           	opt stack 0
  2867  00008B                     ___fladd@b:
  2868                           	opt stack 0
  2869                           
  2870                           ; 4 bytes @ 0x2B
  2871  00008B                     	ds	1
  2872  00008C                     ?_Detect_Victim:
  2873                           	opt stack 0
  2874  00008C                     Port_CheckPairType@Output:
  2875                           	opt stack 0
  2876                           
  2877                           ; 1 bytes @ 0x2C
  2878  00008C                     	ds	1
  2879  00008D                     LED_Init@pLED:
  2880                           	opt stack 0
  2881  00008D                     Port_CheckPairType@Props:
  2882                           	opt stack 0
  2883  00008D                     SPI_Init@pClock:
  2884                           	opt stack 0
  2885                           
  2886                           ; 4 bytes @ 0x2D
  2887  00008D                     	ds	1
  2888  00008E                     ??_Detect_Victim:
  2889                           
  2890                           ; 1 bytes @ 0x2E
  2891  00008E                     	ds	1
  2892  00008F                     Port_CheckQuadType@pInput:
  2893                           	opt stack 0
  2894  00008F                     Detect_Victim@Home_Base_State:
  2895                           	opt stack 0
  2896  00008F                     ___fladd@a:
  2897                           	opt stack 0
  2898                           
  2899                           ; 4 bytes @ 0x2F
  2900  00008F                     	ds	2
  2901  000091                     Port_CheckQuadType@pQuad:
  2902                           	opt stack 0
  2903  000091                     SPI_Init@pChannel:
  2904                           	opt stack 0
  2905                           
  2906                           ; 1 bytes @ 0x31
  2907  000091                     	ds	1
  2908  000092                     Port_CheckQuadType@pDrive:
  2909                           	opt stack 0
  2910  000092                     SPI_Init@pMode:
  2911                           	opt stack 0
  2912                           
  2913                           ; 1 bytes @ 0x32
  2914  000092                     	ds	1
  2915  000093                     ??___fladd:
  2916  000093                     Port_CheckQuadType@Pair1:
  2917                           	opt stack 0
  2918  000093                     SPI_Init@pInput:
  2919                           	opt stack 0
  2920                           
  2921                           ; 2 bytes @ 0x33
  2922  000093                     	ds	1
  2923  000094                     Port_CheckQuadType@Pair2:
  2924                           	opt stack 0
  2925                           
  2926                           ; 1 bytes @ 0x34
  2927  000094                     	ds	1
  2928  000095                     ??_LCD_Init:
  2929  000095                     Port_CheckQuadType@Output:
  2930                           	opt stack 0
  2931                           
  2932                           ; 1 bytes @ 0x35
  2933  000095                     	ds	1
  2934  000096                     Port_CheckPortType@pInput:
  2935                           	opt stack 0
  2936  000096                     Port_SetQuadType@pInput:
  2937                           	opt stack 0
  2938                           
  2939                           ; 2 bytes @ 0x36
  2940  000096                     	ds	1
  2941  000097                     LCD_Init@i:
  2942                           	opt stack 0
  2943                           
  2944                           ; 2 bytes @ 0x37
  2945  000097                     	ds	1
  2946  000098                     Port_CheckPortType@pDrive:
  2947                           	opt stack 0
  2948  000098                     Port_SetQuadType@pQuad:
  2949                           	opt stack 0
  2950                           
  2951                           ; 1 bytes @ 0x38
  2952  000098                     	ds	1
  2953  000099                     Port_CheckPortType@Output:
  2954                           	opt stack 0
  2955  000099                     Port_SetQuadType@pType:
  2956                           	opt stack 0
  2957                           
  2958                           ; 1 bytes @ 0x39
  2959  000099                     	ds	1
  2960  00009A                     Port_SetQuadType@Output:
  2961                           	opt stack 0
  2962  00009A                     Port_SetType@pInput:
  2963                           	opt stack 0
  2964                           
  2965                           ; 2 bytes @ 0x3A
  2966  00009A                     	ds	1
  2967  00009B                     ___fladd@signs:
  2968                           	opt stack 0
  2969  00009B                     Button_Init@pInput:
  2970                           	opt stack 0
  2971                           
  2972                           ; 2 bytes @ 0x3B
  2973  00009B                     	ds	1
  2974  00009C                     Port_SetType@pType:
  2975                           	opt stack 0
  2976  00009C                     ___fladd@aexp:
  2977                           	opt stack 0
  2978                           
  2979                           ; 1 bytes @ 0x3C
  2980  00009C                     	ds	1
  2981  00009D                     ??_Port_SetType:
  2982  00009D                     ___fladd@bexp:
  2983                           	opt stack 0
  2984  00009D                     Button_Init@pThreshold:
  2985                           	opt stack 0
  2986                           
  2987                           ; 2 bytes @ 0x3D
  2988  00009D                     	ds	1
  2989  00009E                     ___fladd@grs:
  2990                           	opt stack 0
  2991                           
  2992                           ; 1 bytes @ 0x3E
  2993  00009E                     	ds	1
  2994  00009F                     ?___flsub:
  2995                           	opt stack 0
  2996  00009F                     ?_eval_poly:
  2997                           	opt stack 0
  2998  00009F                     ?___fltol:
  2999                           	opt stack 0
  3000  00009F                     Port_SetType@Output:
  3001                           	opt stack 0
  3002  00009F                     Button_Init@pInitIO:
  3003                           	opt stack 0
  3004  00009F                     ___fltol@f1:
  3005                           	opt stack 0
  3006  00009F                     ___flsub@b:
  3007                           	opt stack 0
  3008  00009F                     eval_poly@x:
  3009                           	opt stack 0
  3010                           
  3011                           ; 4 bytes @ 0x3F
  3012  00009F                     	ds	1
  3013  0000A0                     Port_Init@pInput:
  3014                           	opt stack 0
  3015                           
  3016                           ; 2 bytes @ 0x40
  3017  0000A0                     	ds	2
  3018  0000A2                     Port_Init@pPort:
  3019                           	opt stack 0
  3020  0000A2                     Button_Init@pGetState:
  3021                           	opt stack 0
  3022                           
  3023                           ; 3 bytes @ 0x42
  3024  0000A2                     	ds	1
  3025  0000A3                     ??_Port_Init:
  3026  0000A3                     ??___fltol:
  3027  0000A3                     eval_poly@d:
  3028                           	opt stack 0
  3029  0000A3                     ___flsub@a:
  3030                           	opt stack 0
  3031                           
  3032                           ; 4 bytes @ 0x43
  3033  0000A3                     	ds	2
  3034  0000A5                     Port_Init@i:
  3035                           	opt stack 0
  3036  0000A5                     eval_poly@n:
  3037                           	opt stack 0
  3038  0000A5                     Button_Init@pFunction:
  3039                           	opt stack 0
  3040                           
  3041                           ; 3 bytes @ 0x45
  3042  0000A5                     	ds	1
  3043  0000A6                     
  3044                           ; 1 bytes @ 0x46
  3045  0000A6                     	ds	1
  3046  0000A7                     ??_eval_poly:
  3047  0000A7                     ___fltol@sign1:
  3048                           	opt stack 0
  3049                           
  3050                           ; 1 bytes @ 0x47
  3051  0000A7                     	ds	1
  3052  0000A8                     ___fltol@exp1:
  3053                           	opt stack 0
  3054  0000A8                     HMI_Init@in:
  3055                           	opt stack 0
  3056                           
  3057                           ; 2 bytes @ 0x48
  3058  0000A8                     	ds	1
  3059  0000A9                     ?_floor:
  3060                           	opt stack 0
  3061  0000A9                     Move_ADC_To@Angle:
  3062                           	opt stack 0
  3063  0000A9                     floor@x:
  3064                           	opt stack 0
  3065                           
  3066                           ; 4 bytes @ 0x49
  3067  0000A9                     	ds	2
  3068  0000AB                     eval_poly@res:
  3069                           	opt stack 0
  3070                           
  3071                           ; 4 bytes @ 0x4B
  3072  0000AB                     	ds	2
  3073  0000AD                     floor@i:
  3074                           	opt stack 0
  3075                           
  3076                           ; 4 bytes @ 0x4D
  3077  0000AD                     	ds	2
  3078  0000AF                     ?_log:
  3079                           	opt stack 0
  3080  0000AF                     ?_ldexp:
  3081                           	opt stack 0
  3082  0000AF                     ldexp@value:
  3083                           	opt stack 0
  3084  0000AF                     log@x:
  3085                           	opt stack 0
  3086                           
  3087                           ; 4 bytes @ 0x4F
  3088  0000AF                     	ds	2
  3089  0000B1                     floor@expon:
  3090                           	opt stack 0
  3091                           
  3092                           ; 2 bytes @ 0x51
  3093  0000B1                     	ds	2
  3094  0000B3                     ldexp@newexp:
  3095                           	opt stack 0
  3096  0000B3                     log@exponent:
  3097                           	opt stack 0
  3098                           
  3099                           ; 2 bytes @ 0x53
  3100  0000B3                     	ds	2
  3101  0000B5                     ??_ldexp:
  3102                           
  3103                           ; 1 bytes @ 0x55
  3104  0000B5                     	ds	2
  3105  0000B7                     ?_exp:
  3106                           	opt stack 0
  3107  0000B7                     exp@x:
  3108                           	opt stack 0
  3109                           
  3110                           ; 4 bytes @ 0x57
  3111  0000B7                     	ds	4
  3112  0000BB                     _exp$15841:
  3113                           	opt stack 0
  3114                           
  3115                           ; 4 bytes @ 0x5B
  3116  0000BB                     	ds	4
  3117  0000BF                     exp@exponent:
  3118                           	opt stack 0
  3119                           
  3120                           ; 2 bytes @ 0x5F
  3121  0000BF                     	ds	2
  3122  0000C1                     exp@sign:
  3123                           	opt stack 0
  3124                           
  3125                           ; 1 bytes @ 0x61
  3126  0000C1                     	ds	1
  3127  0000C2                     ?_pow:
  3128                           	opt stack 0
  3129  0000C2                     pow@x:
  3130                           	opt stack 0
  3131                           
  3132                           ; 4 bytes @ 0x62
  3133  0000C2                     	ds	4
  3134  0000C6                     pow@y:
  3135                           	opt stack 0
  3136                           
  3137                           ; 4 bytes @ 0x66
  3138  0000C6                     	ds	4
  3139  0000CA                     _pow$15839:
  3140                           	opt stack 0
  3141                           
  3142                           ; 4 bytes @ 0x6A
  3143  0000CA                     	ds	4
  3144  0000CE                     _pow$15840:
  3145                           	opt stack 0
  3146                           
  3147                           ; 4 bytes @ 0x6E
  3148  0000CE                     	ds	4
  3149  0000D2                     pow@sign:
  3150                           	opt stack 0
  3151                           
  3152                           ; 1 bytes @ 0x72
  3153  0000D2                     	ds	1
  3154  0000D3                     pow@yi:
  3155                           	opt stack 0
  3156                           
  3157                           ; 4 bytes @ 0x73
  3158  0000D3                     	ds	4
  3159  0000D7                     ??_ADCAverage:
  3160                           
  3161                           ; 1 bytes @ 0x77
  3162  0000D7                     	ds	2
  3163  0000D9                     _ADCAverage$15833:
  3164                           	opt stack 0
  3165                           
  3166                           ; 4 bytes @ 0x79
  3167  0000D9                     	ds	4
  3168  0000DD                     _ADCAverage$15834:
  3169                           	opt stack 0
  3170                           
  3171                           ; 4 bytes @ 0x7D
  3172  0000DD                     	ds	4
  3173  0000E1                     _ADCAverage$15835:
  3174                           	opt stack 0
  3175                           
  3176                           ; 4 bytes @ 0x81
  3177  0000E1                     	ds	4
  3178  0000E5                     _ADCAverage$15836:
  3179                           	opt stack 0
  3180                           
  3181                           ; 4 bytes @ 0x85
  3182  0000E5                     	ds	4
  3183  0000E9                     _ADCAverage$15837:
  3184                           	opt stack 0
  3185                           
  3186                           ; 4 bytes @ 0x89
  3187  0000E9                     	ds	4
  3188  0000ED                     _ADCAverage$15838:
  3189                           	opt stack 0
  3190                           
  3191                           ; 4 bytes @ 0x8D
  3192  0000ED                     	ds	4
  3193  0000F1                     ??_Sensor_Observe:
  3194  0000F1                     Travel@direction:
  3195                           	opt stack 0
  3196                           
  3197                           ; 2 bytes @ 0x91
  3198  0000F1                     	ds	2
  3199  0000F3                     Sensor_Observe@High_Sensor:
  3200                           	opt stack 0
  3201  0000F3                     Travel@Dist:
  3202                           	opt stack 0
  3203                           
  3204                           ; 2 bytes @ 0x93
  3205  0000F3                     	ds	2
  3206  0000F5                     Sensor_Observe@Low_Sensor:
  3207                           	opt stack 0
  3208  0000F5                     Travel@Test_ADC:
  3209                           	opt stack 0
  3210                           
  3211                           ; 2 bytes @ 0x95
  3212  0000F5                     	ds	2
  3213  0000F7                     Travel@Spd:
  3214                           	opt stack 0
  3215                           
  3216                           ; 2 bytes @ 0x97
  3217  0000F7                     	ds	2
  3218  0000F9                     Travel@Wall:
  3219                           	opt stack 0
  3220                           
  3221                           ; 2 bytes @ 0x99
  3222  0000F9                     	ds	2
  3223  0000FB                     ??_Travel:
  3224                           
  3225                           ; 1 bytes @ 0x9B
  3226  0000FB                     	ds	4
  3227  0000FF                     tblptru	equ	0xFF8
  3228                           tblptrh	equ	0xFF7
  3229                           tblptrl	equ	0xFF6
  3230                           tablat	equ	0xFF5
  3231                           postinc0	equ	0xFEE
  3232                           wreg	equ	0xFE8
  3233                           postdec1	equ	0xFE5
  3234                           fsr1h	equ	0xFE2
  3235                           fsr1l	equ	0xFE1
  3236                           
  3237                           ; 1 bytes @ 0x9F
  3238                           
  3239                           	psect	cstackCOMRAM
  3240  000001                     __pcstackCOMRAM:
  3241                           	opt stack 0
  3242  000001                     i2Byte_SetBit@pInput:
  3243                           	opt stack 0
  3244  000001                     i2Byte_GetZone@pInput:
  3245                           	opt stack 0
  3246  000001                     i2delay_us@us:
  3247                           	opt stack 0
  3248  000001                     i2MXK_Queue@pCallback:
  3249                           	opt stack 0
  3250                           
  3251                           ; 3 bytes @ 0x0
  3252  000001                     	ds	2
  3253  000003                     i2Byte_SetBit@pBit:
  3254                           	opt stack 0
  3255  000003                     i2Byte_GetZone@pMax:
  3256                           	opt stack 0
  3257  000003                     i2delay_us@u:
  3258                           	opt stack 0
  3259                           
  3260                           ; 4 bytes @ 0x2
  3261  000003                     	ds	1
  3262  000004                     i2Byte_SetBit@pValue:
  3263                           	opt stack 0
  3264  000004                     i2Byte_GetZone@pChunk:
  3265                           	opt stack 0
  3266                           
  3267                           ; 1 bytes @ 0x3
  3268  000004                     	ds	1
  3269  000005                     ??i2_Byte_SetBit:
  3270  000005                     i2Byte_GetZone@pChunkSize:
  3271                           	opt stack 0
  3272                           
  3273                           ; 1 bytes @ 0x4
  3274  000005                     	ds	1
  3275  000006                     ??i2_Byte_GetZone:
  3276                           
  3277                           ; 1 bytes @ 0x5
  3278  000006                     	ds	1
  3279  000007                     i2Byte_GetZone@MASK:
  3280                           	opt stack 0
  3281  000007                     i2MXK_SwitchTo@CUR:
  3282                           	opt stack 0
  3283                           
  3284                           ; 1 bytes @ 0x6
  3285  000007                     	ds	1
  3286  000008                     i2Byte_GetZone@Offset:
  3287                           	opt stack 0
  3288  000008                     i2MXK_SwitchTo@pModule:
  3289                           	opt stack 0
  3290                           
  3291                           ; 1 bytes @ 0x7
  3292  000008                     	ds	1
  3293  000009                     i2Byte_GetZone@Output:
  3294                           	opt stack 0
  3295                           
  3296                           ; 1 bytes @ 0x8
  3297  000009                     	ds	1
  3298  00000A                     i2Byte_GetPair@pInput:
  3299                           	opt stack 0
  3300                           
  3301                           ; 2 bytes @ 0x9
  3302  00000A                     	ds	2
  3303  00000C                     i2Byte_GetPair@pPair:
  3304                           	opt stack 0
  3305                           
  3306                           ; 1 bytes @ 0xB
  3307  00000C                     	ds	1
  3308  00000D                     i2Word_GetPair@pInput:
  3309                           	opt stack 0
  3310                           
  3311                           ; 2 bytes @ 0xC
  3312  00000D                     	ds	2
  3313  00000F                     i2Word_GetPair@pPair:
  3314                           	opt stack 0
  3315                           
  3316                           ; 1 bytes @ 0xE
  3317  00000F                     	ds	1
  3318  000010                     i2Port_SetPin@pInput:
  3319                           	opt stack 0
  3320                           
  3321                           ; 2 bytes @ 0xF
  3322  000010                     	ds	2
  3323  000012                     i2Port_SetPin@pPin:
  3324                           	opt stack 0
  3325                           
  3326                           ; 1 bytes @ 0x11
  3327  000012                     	ds	1
  3328  000013                     i2Port_SetPin@pValue:
  3329                           	opt stack 0
  3330                           
  3331                           ; 1 bytes @ 0x12
  3332  000013                     	ds	1
  3333  000014                     i2Port_SetPin@Type:
  3334                           	opt stack 0
  3335                           
  3336                           ; 1 bytes @ 0x13
  3337  000014                     	ds	1
  3338  000015                     
  3339                           ; 1 bytes @ 0x14
  3340  000015                     	ds	2
  3341  000017                     ??_ISR_Function:
  3342                           
  3343                           ; 1 bytes @ 0x16
  3344  000017                     	ds	18
  3345                           tblptru	equ	0xFF8
  3346                           tblptrh	equ	0xFF7
  3347                           tblptrl	equ	0xFF6
  3348                           tablat	equ	0xFF5
  3349                           postinc0	equ	0xFEE
  3350                           wreg	equ	0xFE8
  3351                           postdec1	equ	0xFE5
  3352                           fsr1h	equ	0xFE2
  3353                           fsr1l	equ	0xFE1
  3354                           
  3355 ;;
  3356 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  3357 ;;
  3358 ;; *************** function _main *****************
  3359 ;; Defined at:
  3360 ;;		line 327 in file "main.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;		None
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;  up              1    7[BANK3 ] unsigned char 
  3365 ;;  left            1    6[BANK3 ] unsigned char 
  3366 ;;  right           1    5[BANK3 ] unsigned char 
  3367 ;;  down            1    4[BANK3 ] unsigned char 
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  1    wreg      void 
  3370 ;; Registers used:
  3371 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3379 ;;      Temps:          0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3380 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3381 ;;Total ram usage:        8 bytes
  3382 ;; Hardware stack levels required when called:   17
  3383 ;; This function calls:
  3384 ;;		_ADCAverage
  3385 ;;		_Closest_Object
  3386 ;;		_Console_Init
  3387 ;;		_Console_Render
  3388 ;;		_Create_Maze
  3389 ;;		_Detect_Victim
  3390 ;;		_FunctInitButton
  3391 ;;		_Go_Home
  3392 ;;		_HMI_DIPSwitch
  3393 ;;		_HMI_DownSwitch
  3394 ;;		_HMI_Init
  3395 ;;		_HMI_LeftSwitch
  3396 ;;		_HMI_Poll
  3397 ;;		_HMI_Render
  3398 ;;		_HMI_RightSwitch
  3399 ;;		_HMI_SetNumber
  3400 ;;		_HMI_UpSwitch
  3401 ;;		_ISR_Enable
  3402 ;;		_InitADC
  3403 ;;		_InitSerialCommunication
  3404 ;;		_Init_Timer0
  3405 ;;		_LCD_Init
  3406 ;;		_LED_Init
  3407 ;;		_MXK_BlockSwitchTo
  3408 ;;		_MXK_DIPSwitch
  3409 ;;		_MXK_Dequeue
  3410 ;;		_MXK_Init
  3411 ;;		_MXK_Release
  3412 ;;		_MXK_TestButton
  3413 ;;		_Navigate_Maze
  3414 ;;		_Robot_Init
  3415 ;;		_Sensor_Observe
  3416 ;;		_Travel
  3417 ;;		___wmul
  3418 ;;		_delay_ms
  3419 ;;		_printf
  3420 ;; This function is called by:
  3421 ;;		Startup code after reset
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           	psect	text0
  3426  012E2A                     __ptext0:
  3427                           	opt stack 0
  3428  012E2A                     _main:
  3429                           	opt stack 14
  3430                           
  3431                           ;main.c: 332: MXK_Init();
  3432                           
  3433                           ;incstack = 0
  3434  012E2A  EC11  F0B0         	call	_MXK_Init	;wreg free
  3435                           
  3436                           ;main.c: 333: Init_Timer0();
  3437  012E2E  EC4D  F0C5         	call	_Init_Timer0	;wreg free
  3438                           
  3439                           ;main.c: 334: InitSerialCommunication();
  3440  012E32  ECE3  F0C4         	call	_InitSerialCommunication	;wreg free
  3441                           
  3442                           ;main.c: 335: Robot_Init();
  3443  012E36  EC71  F0C5         	call	_Robot_Init	;wreg free
  3444                           
  3445                           ;main.c: 336: ISR_Enable();
  3446  012E3A  EC41  F0C6         	call	_ISR_Enable	;wreg free
  3447                           
  3448                           ;main.c: 337: FunctInitButton();
  3449  012E3E  ECD2  F0BB         	call	_FunctInitButton	;wreg free
  3450                           
  3451                           ;main.c: 338: InitADC();
  3452  012E42  EC4D  F0C0         	call	_InitADC	;wreg free
  3453                           
  3454                           ;main.c: 339: LED_Init(eLED2);
  3455  012E46  0E01               	movlw	1
  3456  012E48  ECDB  F0BE         	call	_LED_Init
  3457                           
  3458                           ;main.c: 340: Create_Maze();
  3459  012E4C  EC00  F080         	call	_Create_Maze	;wreg free
  3460                           
  3461                           ;main.c: 348: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3462  012E50  0E01               	movlw	1
  3463  012E52  ECF5  F0C2         	call	_MXK_BlockSwitchTo
  3464  012E56  0900               	iorlw	0
  3465  012E58  B4D8               	btfsc	status,2,c
  3466  012E5A  D00C               	goto	l2216
  3467                           
  3468                           ;main.c: 349: HMI_Init();
  3469  012E5C  EC45  F0A9         	call	_HMI_Init	;wreg free
  3470                           
  3471                           ;main.c: 350: LCD_Init();
  3472  012E60  EC2A  F0AE         	call	_LCD_Init	;wreg free
  3473                           
  3474                           ;main.c: 351: Console_Init();
  3475  012E64  ECEB  F0BC         	call	_Console_Init	;wreg free
  3476                           
  3477                           ;main.c: 352: if (MXK_Release())
  3478  012E68  EC7C  F0C5         	call	_MXK_Release	;wreg free
  3479  012E6C  0900               	iorlw	0
  3480  012E6E  A4D8               	btfss	status,2,c
  3481                           
  3482                           ;main.c: 353: MXK_Dequeue();
  3483  012E70  EC7A  F0C3         	call	_MXK_Dequeue	;wreg free
  3484  012E74                     l2216:
  3485                           
  3486                           ;main.c: 359: ADCAverage();
  3487                           
  3488                           ;main.c: 354: }
  3489                           ;main.c: 357: for(;;){
  3490  012E74  EC1C  F09E         	call	_ADCAverage	;wreg free
  3491                           
  3492                           ;main.c: 361: HMI_SetNumber(average);
  3493  012E78  C02E  F076         	movff	_average,HMI_SetNumber@pInput
  3494  012E7C  C02F  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  3495  012E80  EC6E  F0C4         	call	_HMI_SetNumber	;wreg free
  3496                           
  3497                           ;main.c: 363: HMI_Render();
  3498  012E84  EC11  F0C3         	call	_HMI_Render	;wreg free
  3499                           
  3500                           ;main.c: 365: HMI_Poll();
  3501  012E88  ECEF  F0BD         	call	_HMI_Poll	;wreg free
  3502                           
  3503                           ;main.c: 369: bool down = HMIBoard.mDown.mGetState();
  3504  012E8C  EE23  F0CD         	lfsr	2,_HMIBoard+45
  3505  012E90  D801               	call	u15528
  3506  012E92  D00A               	goto	u15529
  3507  012E94                     u15528:
  3508  012E94  0005               	push	
  3509  012E96  6EFA               	movwf	pclath,c
  3510  012E98  50DE               	movf	postinc2,w,c
  3511  012E9A  6EFD               	movwf	tosl,c
  3512  012E9C  50DE               	movf	postinc2,w,c
  3513  012E9E  6EFE               	movwf	tosh,c
  3514  012EA0  50DE               	movf	postinc2,w,c
  3515  012EA2  6EFF               	movwf	tosu,c
  3516  012EA4  50FA               	movf	pclath,w,c
  3517  012EA6  0012               	return		;indir
  3518  012EA8                     u15529:
  3519  012EA8  0103               	movlb	3	; () banked
  3520  012EAA  6FDE               	movwf	main@down& (0+255),b
  3521                           
  3522                           ; BSR set to: 3
  3523                           ;main.c: 370: bool right = HMIBoard.mRight.mGetState();
  3524  012EAC  EE23  F0AF         	lfsr	2,_HMIBoard+15
  3525  012EB0  D801               	call	u15538
  3526  012EB2  D00A               	goto	u15539
  3527  012EB4                     u15538:
  3528  012EB4  0005               	push	
  3529  012EB6  6EFA               	movwf	pclath,c
  3530  012EB8  50DE               	movf	postinc2,w,c
  3531  012EBA  6EFD               	movwf	tosl,c
  3532  012EBC  50DE               	movf	postinc2,w,c
  3533  012EBE  6EFE               	movwf	tosh,c
  3534  012EC0  50DE               	movf	postinc2,w,c
  3535  012EC2  6EFF               	movwf	tosu,c
  3536  012EC4  50FA               	movf	pclath,w,c
  3537  012EC6  0012               	return		;indir
  3538  012EC8                     u15539:
  3539  012EC8  0103               	movlb	3	; () banked
  3540  012ECA  6FDF               	movwf	main@right& (0+255),b
  3541                           
  3542                           ; BSR set to: 3
  3543                           ;main.c: 371: bool up = HMIBoard.mUp.mGetState();
  3544  012ECC  EE23  F0C3         	lfsr	2,_HMIBoard+35
  3545  012ED0  D801               	call	u15548
  3546  012ED2  D00A               	goto	u15549
  3547  012ED4                     u15548:
  3548  012ED4  0005               	push	
  3549  012ED6  6EFA               	movwf	pclath,c
  3550  012ED8  50DE               	movf	postinc2,w,c
  3551  012EDA  6EFD               	movwf	tosl,c
  3552  012EDC  50DE               	movf	postinc2,w,c
  3553  012EDE  6EFE               	movwf	tosh,c
  3554  012EE0  50DE               	movf	postinc2,w,c
  3555  012EE2  6EFF               	movwf	tosu,c
  3556  012EE4  50FA               	movf	pclath,w,c
  3557  012EE6  0012               	return		;indir
  3558  012EE8                     u15549:
  3559  012EE8  0103               	movlb	3	; () banked
  3560  012EEA  6FE1               	movwf	main@up& (0+255),b
  3561                           
  3562                           ; BSR set to: 3
  3563                           ;main.c: 372: bool left = HMIBoard.mLeft.mGetState();
  3564  012EEC  EE23  F0B9         	lfsr	2,_HMIBoard+25
  3565  012EF0  D801               	call	u15558
  3566  012EF2  D00A               	goto	u15559
  3567  012EF4                     u15558:
  3568  012EF4  0005               	push	
  3569  012EF6  6EFA               	movwf	pclath,c
  3570  012EF8  50DE               	movf	postinc2,w,c
  3571  012EFA  6EFD               	movwf	tosl,c
  3572  012EFC  50DE               	movf	postinc2,w,c
  3573  012EFE  6EFE               	movwf	tosh,c
  3574  012F00  50DE               	movf	postinc2,w,c
  3575  012F02  6EFF               	movwf	tosu,c
  3576  012F04  50FA               	movf	pclath,w,c
  3577  012F06  0012               	return		;indir
  3578  012F08                     u15559:
  3579  012F08  0103               	movlb	3	; () banked
  3580  012F0A  6FE0               	movwf	main@left& (0+255),b
  3581                           
  3582                           ; BSR set to: 3
  3583                           ;main.c: 373: if (down) {mode=3;}
  3584  012F0C  51DE               	movf	main@down& (0+255),w,b
  3585  012F0E  B4D8               	btfsc	status,2,c
  3586  012F10  D005               	goto	l2218
  3587                           
  3588                           ; BSR set to: 3
  3589  012F12  0E00               	movlw	0
  3590  012F14  0101               	movlb	1	; () banked
  3591  012F16  6F49               	movwf	(_mode+1)& (0+255),b
  3592  012F18  0E03               	movlw	3
  3593  012F1A  6F48               	movwf	_mode& (0+255),b
  3594  012F1C                     l2218:
  3595                           
  3596                           ;main.c: 374: if (right) {mode =1;}
  3597  012F1C  0103               	movlb	3	; () banked
  3598  012F1E  51DF               	movf	main@right& (0+255),w,b
  3599  012F20  B4D8               	btfsc	status,2,c
  3600  012F22  D005               	goto	l2219
  3601                           
  3602                           ; BSR set to: 3
  3603  012F24  0E00               	movlw	0
  3604  012F26  0101               	movlb	1	; () banked
  3605  012F28  6F49               	movwf	(_mode+1)& (0+255),b
  3606  012F2A  0E01               	movlw	1
  3607  012F2C  6F48               	movwf	_mode& (0+255),b
  3608  012F2E                     l2219:
  3609                           
  3610                           ;main.c: 375: if (up) {mode=2;}
  3611  012F2E  0103               	movlb	3	; () banked
  3612  012F30  51E1               	movf	main@up& (0+255),w,b
  3613  012F32  B4D8               	btfsc	status,2,c
  3614  012F34  D005               	goto	l2220
  3615                           
  3616                           ; BSR set to: 3
  3617  012F36  0E00               	movlw	0
  3618  012F38  0101               	movlb	1	; () banked
  3619  012F3A  6F49               	movwf	(_mode+1)& (0+255),b
  3620  012F3C  0E02               	movlw	2
  3621  012F3E  6F48               	movwf	_mode& (0+255),b
  3622  012F40                     l2220:
  3623                           
  3624                           ;main.c: 376: if (left) {mode=4;}
  3625  012F40  0103               	movlb	3	; () banked
  3626  012F42  51E0               	movf	main@left& (0+255),w,b
  3627  012F44  B4D8               	btfsc	status,2,c
  3628  012F46  D005               	goto	l2221
  3629                           
  3630                           ; BSR set to: 3
  3631  012F48  0E00               	movlw	0
  3632  012F4A  0101               	movlb	1	; () banked
  3633  012F4C  6F49               	movwf	(_mode+1)& (0+255),b
  3634  012F4E  0E04               	movlw	4
  3635  012F50  6F48               	movwf	_mode& (0+255),b
  3636  012F52                     l2221:
  3637                           
  3638                           ;main.c: 381: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3639                           
  3640                           ; BSR set to: 1
  3641  012F52  0E01               	movlw	1
  3642  012F54  ECF5  F0C2         	call	_MXK_BlockSwitchTo
  3643  012F58  0900               	iorlw	0
  3644  012F5A  B4D8               	btfsc	status,2,c
  3645  012F5C  D78B               	goto	l2216
  3646                           
  3647                           ;main.c: 383: if (mode==0){
  3648  012F5E  0101               	movlb	1	; () banked
  3649  012F60  5148               	movf	_mode& (0+255),w,b
  3650  012F62  1149               	iorwf	(_mode+1)& (0+255),w,b
  3651  012F64  A4D8               	btfss	status,2,c
  3652  012F66  D014               	goto	l2223
  3653                           
  3654                           ; BSR set to: 1
  3655                           ;main.c: 386: printf("%c", (char)35);
  3656  012F68  0EFC               	movlw	low STR_1
  3657  012F6A  0100               	movlb	0	; () banked
  3658  012F6C  6F75               	movwf	printf@f& (0+255),b
  3659  012F6E  0EFF               	movlw	high STR_1
  3660  012F70  6F76               	movwf	(printf@f+1)& (0+255),b
  3661  012F72  0E00               	movlw	0
  3662  012F74  6F78               	movwf	(?_printf+3)& (0+255),b
  3663  012F76  0E23               	movlw	35
  3664  012F78  6F77               	movwf	(?_printf+2)& (0+255),b
  3665  012F7A  EC77  F0AB         	call	_printf	;wreg free
  3666                           
  3667                           ;main.c: 387: printf("Robot Ready! \n\n");
  3668  012F7E  0E70               	movlw	low STR_13
  3669  012F80  0100               	movlb	0	; () banked
  3670  012F82  6F75               	movwf	printf@f& (0+255),b
  3671  012F84  0EFF               	movlw	high STR_13
  3672  012F86  6F76               	movwf	(printf@f+1)& (0+255),b
  3673  012F88  EC77  F0AB         	call	_printf	;wreg free
  3674                           
  3675                           ;main.c: 389: Console_Render();
  3676  012F8C  EC9B  F0A7         	call	_Console_Render	;wreg free
  3677  012F90                     l2223:
  3678                           
  3679                           ;main.c: 391: }
  3680                           ;main.c: 392: if (mode == 3){
  3681  012F90  0E03               	movlw	3
  3682  012F92  0101               	movlb	1	; () banked
  3683  012F94  1948               	xorwf	_mode& (0+255),w,b
  3684  012F96  1149               	iorwf	(_mode+1)& (0+255),w,b
  3685  012F98  B4D8               	btfsc	status,2,c
  3686  012F9A  D0D7               	goto	l2225
  3687  012F9C  D10A               	goto	l2234
  3688  012F9E                     
  3689                           ; BSR set to: 1
  3690                           ;main.c: 398: printf("%c", (char)35);
  3691                           
  3692                           ; BSR set to: 1
  3693  012F9E  0EFC               	movlw	low STR_1
  3694  012FA0  0100               	movlb	0	; () banked
  3695  012FA2  6F75               	movwf	printf@f& (0+255),b
  3696  012FA4  0EFF               	movlw	high STR_1
  3697  012FA6  6F76               	movwf	(printf@f+1)& (0+255),b
  3698  012FA8  0E00               	movlw	0
  3699  012FAA  6F78               	movwf	(?_printf+3)& (0+255),b
  3700  012FAC  0E23               	movlw	35
  3701  012FAE  6F77               	movwf	(?_printf+2)& (0+255),b
  3702  012FB0  EC77  F0AB         	call	_printf	;wreg free
  3703                           
  3704                           ;main.c: 399: printf("\n       \n");
  3705  012FB4  0ED1               	movlw	low STR_15
  3706  012FB6  0100               	movlb	0	; () banked
  3707  012FB8  6F75               	movwf	printf@f& (0+255),b
  3708  012FBA  0EFF               	movlw	high STR_15
  3709  012FBC  6F76               	movwf	(printf@f+1)& (0+255),b
  3710  012FBE  EC77  F0AB         	call	_printf	;wreg free
  3711                           
  3712                           ;main.c: 400: printf("vc: %d\n", VictimCount);
  3713  012FC2  0EED               	movlw	low STR_16
  3714  012FC4  0100               	movlb	0	; () banked
  3715  012FC6  6F75               	movwf	printf@f& (0+255),b
  3716  012FC8  0EFF               	movlw	high STR_16
  3717  012FCA  6F76               	movwf	(printf@f+1)& (0+255),b
  3718  012FCC  C134  F077         	movff	_VictimCount,?_printf+2
  3719  012FD0  C135  F078         	movff	_VictimCount+1,?_printf+3
  3720  012FD4  EC77  F0AB         	call	_printf	;wreg free
  3721                           
  3722                           ;main.c: 401: printf("\n\n\nOptions: %d\n\n\n", maze[X_Pos][Y_Pos].Options);
  3723  012FD8  0E3D               	movlw	low STR_17
  3724  012FDA  0100               	movlb	0	; () banked
  3725  012FDC  6F75               	movwf	printf@f& (0+255),b
  3726  012FDE  0EFF               	movlw	high STR_17
  3727  012FE0  6F76               	movwf	(printf@f+1)& (0+255),b
  3728  012FE2  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  3729  012FE6  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  3730  012FEA  0E00               	movlw	0
  3731  012FEC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3732  012FEE  0E32               	movlw	50
  3733  012FF0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3734  012FF2  EC33  F0C4         	call	___wmul	;wreg free
  3735  012FF6  0E00               	movlw	low _maze
  3736  012FF8  0103               	movlb	3	; () banked
  3737  012FFA  6FDA               	movwf	??_main& (0+255),b
  3738  012FFC  0E02               	movlw	high _maze
  3739  012FFE  6FDB               	movwf	(??_main+1)& (0+255),b
  3740  013000  0100               	movlb	0	; () banked
  3741  013002  5160               	movf	?___wmul& (0+255),w,b
  3742  013004  0103               	movlb	3	; () banked
  3743  013006  27DA               	addwf	??_main& (0+255),f,b
  3744  013008  0100               	movlb	0	; () banked
  3745  01300A  5161               	movf	(?___wmul+1)& (0+255),w,b
  3746  01300C  0103               	movlb	3	; () banked
  3747  01300E  23DB               	addwfc	(??_main+1)& (0+255),f,b
  3748  013010  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  3749  013014  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  3750  013018  0E00               	movlw	0
  3751  01301A  0100               	movlb	0	; () banked
  3752  01301C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3753  01301E  0E0A               	movlw	10
  3754  013020  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3755  013022  EC33  F0C4         	call	___wmul	;wreg free
  3756  013026  0100               	movlb	0	; () banked
  3757  013028  5160               	movf	?___wmul& (0+255),w,b
  3758  01302A  0103               	movlb	3	; () banked
  3759  01302C  27DA               	addwf	??_main& (0+255),f,b
  3760  01302E  0100               	movlb	0	; () banked
  3761  013030  5161               	movf	(?___wmul+1)& (0+255),w,b
  3762  013032  0103               	movlb	3	; () banked
  3763  013034  23DB               	addwfc	(??_main+1)& (0+255),f,b
  3764  013036  0E08               	movlw	8
  3765  013038  25DA               	addwf	??_main& (0+255),w,b
  3766  01303A  6ED9               	movwf	fsr2l,c
  3767  01303C  0E00               	movlw	0
  3768  01303E  21DB               	addwfc	(??_main+1)& (0+255),w,b
  3769  013040  6EDA               	movwf	fsr2h,c
  3770  013042  CFDE F077          	movff	postinc2,?_printf+2
  3771  013046  CFDD F078          	movff	postdec2,?_printf+3
  3772  01304A  EC77  F0AB         	call	_printf	;wreg free
  3773                           
  3774                           ;main.c: 402: Navigate_Maze();
  3775  01304E  EC78  F094         	call	_Navigate_Maze	;wreg free
  3776                           
  3777                           ;main.c: 404: if(Detect_Victim() == 1 && maze[X_Pos][Y_Pos].victim == 0){
  3778  013052  EC7E  F0BE         	call	_Detect_Victim	;wreg free
  3779  013056  0100               	movlb	0	; () banked
  3780  013058  058C               	decf	?_Detect_Victim& (0+255),w,b
  3781  01305A  118D               	iorwf	(?_Detect_Victim+1)& (0+255),w,b
  3782  01305C  A4D8               	btfss	status,2,c
  3783  01305E  D06C               	goto	l2227
  3784                           
  3785                           ; BSR set to: 0
  3786  013060  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  3787  013064  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  3788  013068  0E00               	movlw	0
  3789  01306A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3790  01306C  0E32               	movlw	50
  3791  01306E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3792  013070  EC33  F0C4         	call	___wmul	;wreg free
  3793  013074  0E00               	movlw	low _maze
  3794  013076  0103               	movlb	3	; () banked
  3795  013078  6FDA               	movwf	??_main& (0+255),b
  3796  01307A  0E02               	movlw	high _maze
  3797  01307C  6FDB               	movwf	(??_main+1)& (0+255),b
  3798  01307E  0100               	movlb	0	; () banked
  3799  013080  5160               	movf	?___wmul& (0+255),w,b
  3800  013082  0103               	movlb	3	; () banked
  3801  013084  27DA               	addwf	??_main& (0+255),f,b
  3802  013086  0100               	movlb	0	; () banked
  3803  013088  5161               	movf	(?___wmul+1)& (0+255),w,b
  3804  01308A  0103               	movlb	3	; () banked
  3805  01308C  23DB               	addwfc	(??_main+1)& (0+255),f,b
  3806  01308E  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  3807  013092  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  3808  013096  0E00               	movlw	0
  3809  013098  0100               	movlb	0	; () banked
  3810  01309A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3811  01309C  0E0A               	movlw	10
  3812  01309E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3813  0130A0  EC33  F0C4         	call	___wmul	;wreg free
  3814  0130A4  0100               	movlb	0	; () banked
  3815  0130A6  5160               	movf	?___wmul& (0+255),w,b
  3816  0130A8  0103               	movlb	3	; () banked
  3817  0130AA  27DA               	addwf	??_main& (0+255),f,b
  3818  0130AC  0100               	movlb	0	; () banked
  3819  0130AE  5161               	movf	(?___wmul+1)& (0+255),w,b
  3820  0130B0  0103               	movlb	3	; () banked
  3821  0130B2  23DB               	addwfc	(??_main+1)& (0+255),f,b
  3822  0130B4  0E02               	movlw	2
  3823  0130B6  25DA               	addwf	??_main& (0+255),w,b
  3824  0130B8  6ED9               	movwf	fsr2l,c
  3825  0130BA  0E00               	movlw	0
  3826  0130BC  21DB               	addwfc	(??_main+1)& (0+255),w,b
  3827  0130BE  6EDA               	movwf	fsr2h,c
  3828  0130C0  50DE               	movf	postinc2,w,c
  3829  0130C2  10DE               	iorwf	postinc2,w,c
  3830  0130C4  A4D8               	btfss	status,2,c
  3831  0130C6  D038               	goto	l2227
  3832                           
  3833                           ; BSR set to: 3
  3834                           ;main.c: 405: maze[X_Pos][Y_Pos].victim = 1;
  3835  0130C8  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  3836  0130CC  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  3837  0130D0  0E00               	movlw	0
  3838  0130D2  0100               	movlb	0	; () banked
  3839  0130D4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3840  0130D6  0E32               	movlw	50
  3841  0130D8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3842  0130DA  EC33  F0C4         	call	___wmul	;wreg free
  3843  0130DE  0E00               	movlw	low _maze
  3844  0130E0  0103               	movlb	3	; () banked
  3845  0130E2  6FDA               	movwf	??_main& (0+255),b
  3846  0130E4  0E02               	movlw	high _maze
  3847  0130E6  6FDB               	movwf	(??_main+1)& (0+255),b
  3848  0130E8  0100               	movlb	0	; () banked
  3849  0130EA  5160               	movf	?___wmul& (0+255),w,b
  3850  0130EC  0103               	movlb	3	; () banked
  3851  0130EE  27DA               	addwf	??_main& (0+255),f,b
  3852  0130F0  0100               	movlb	0	; () banked
  3853  0130F2  5161               	movf	(?___wmul+1)& (0+255),w,b
  3854  0130F4  0103               	movlb	3	; () banked
  3855  0130F6  23DB               	addwfc	(??_main+1)& (0+255),f,b
  3856  0130F8  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  3857  0130FC  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  3858  013100  0E00               	movlw	0
  3859  013102  0100               	movlb	0	; () banked
  3860  013104  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3861  013106  0E0A               	movlw	10
  3862  013108  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3863  01310A  EC33  F0C4         	call	___wmul	;wreg free
  3864  01310E  0100               	movlb	0	; () banked
  3865  013110  5160               	movf	?___wmul& (0+255),w,b
  3866  013112  0103               	movlb	3	; () banked
  3867  013114  27DA               	addwf	??_main& (0+255),f,b
  3868  013116  0100               	movlb	0	; () banked
  3869  013118  5161               	movf	(?___wmul+1)& (0+255),w,b
  3870  01311A  0103               	movlb	3	; () banked
  3871  01311C  23DB               	addwfc	(??_main+1)& (0+255),f,b
  3872  01311E  0E02               	movlw	2
  3873  013120  25DA               	addwf	??_main& (0+255),w,b
  3874  013122  6ED9               	movwf	fsr2l,c
  3875  013124  0E00               	movlw	0
  3876  013126  21DB               	addwfc	(??_main+1)& (0+255),w,b
  3877  013128  6EDA               	movwf	fsr2h,c
  3878  01312A  0E01               	movlw	1
  3879  01312C  6EDE               	movwf	postinc2,c
  3880  01312E  0E00               	movlw	0
  3881  013130  6EDD               	movwf	postdec2,c
  3882                           
  3883                           ; BSR set to: 3
  3884                           ;main.c: 406: VictimCount++;
  3885  013132  0101               	movlb	1	; () banked
  3886  013134  4B34               	infsnz	_VictimCount& (0+255),f,b
  3887  013136  2B35               	incf	(_VictimCount+1)& (0+255),f,b
  3888  013138                     l2227:
  3889                           
  3890                           ;main.c: 408: }
  3891                           ;main.c: 409: Console_Render();
  3892                           
  3893                           ; BSR set to: 1
  3894  013138  EC9B  F0A7         	call	_Console_Render	;wreg free
  3895                           
  3896                           ;main.c: 410: delay_ms(350);
  3897  01313C  0E01               	movlw	1
  3898  01313E  0100               	movlb	0	; () banked
  3899  013140  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  3900  013142  0E5E               	movlw	94
  3901  013144  6F60               	movwf	delay_ms@ms& (0+255),b
  3902  013146  ECAD  F0BE         	call	_delay_ms	;wreg free
  3903  01314A                     l2225:
  3904  01314A  0101               	movlb	1	; () banked
  3905  01314C  BF35               	btfsc	(_VictimCount+1)& (0+255),7,b
  3906  01314E  D727               	goto	l2226
  3907  013150  5135               	movf	(_VictimCount+1)& (0+255),w,b
  3908  013152  E122               	bnz	l17983
  3909  013154  0E02               	movlw	2
  3910  013156  5D34               	subwf	_VictimCount& (0+255),w,b
  3911  013158  B0D8               	btfsc	status,0,c
  3912  01315A  D01E               	goto	l2229
  3913  01315C  D720               	goto	l2226
  3914  01315E                     
  3915                           ; BSR set to: 1
  3916                           ;main.c: 413: printf("%c", (char)35);
  3917                           
  3918                           ; BSR set to: 1
  3919  01315E  0EFC               	movlw	low STR_1
  3920  013160  0100               	movlb	0	; () banked
  3921  013162  6F75               	movwf	printf@f& (0+255),b
  3922  013164  0EFF               	movlw	high STR_1
  3923  013166  6F76               	movwf	(printf@f+1)& (0+255),b
  3924  013168  0E00               	movlw	0
  3925  01316A  6F78               	movwf	(?_printf+3)& (0+255),b
  3926  01316C  0E23               	movlw	35
  3927  01316E  6F77               	movwf	(?_printf+2)& (0+255),b
  3928  013170  EC77  F0AB         	call	_printf	;wreg free
  3929                           
  3930                           ;main.c: 414: printf("\n       \n");
  3931  013174  0ED1               	movlw	low STR_15
  3932  013176  0100               	movlb	0	; () banked
  3933  013178  6F75               	movwf	printf@f& (0+255),b
  3934  01317A  0EFF               	movlw	high STR_15
  3935  01317C  6F76               	movwf	(printf@f+1)& (0+255),b
  3936  01317E  EC77  F0AB         	call	_printf	;wreg free
  3937                           
  3938                           ;main.c: 415: printf("Going Home");
  3939  013182  0EBC               	movlw	low STR_20
  3940  013184  0100               	movlb	0	; () banked
  3941  013186  6F75               	movwf	printf@f& (0+255),b
  3942  013188  0EFF               	movlw	high STR_20
  3943  01318A  6F76               	movwf	(printf@f+1)& (0+255),b
  3944  01318C  EC77  F0AB         	call	_printf	;wreg free
  3945                           
  3946                           ;main.c: 416: Console_Render();
  3947  013190  EC9B  F0A7         	call	_Console_Render	;wreg free
  3948                           
  3949                           ;main.c: 417: Go_Home();
  3950  013194  ECF2  F0C4         	call	_Go_Home	;wreg free
  3951  013198                     l2229:
  3952  013198                     l17983:
  3953  013198  0101               	movlb	1	; () banked
  3954  01319A  AFE1               	btfss	(_top+1)& (0+255),7,b
  3955  01319C  D7E0               	goto	l2230
  3956                           
  3957                           ; BSR set to: 1
  3958                           ;main.c: 419: }
  3959                           ;main.c: 421: printf("HOME!!!@");
  3960                           
  3961                           ; BSR set to: 1
  3962  01319E  0EE4               	movlw	low STR_21
  3963  0131A0  0100               	movlb	0	; () banked
  3964  0131A2  6F75               	movwf	printf@f& (0+255),b
  3965  0131A4  0EFF               	movlw	high STR_21
  3966  0131A6  6F76               	movwf	(printf@f+1)& (0+255),b
  3967  0131A8  EC77  F0AB         	call	_printf	;wreg free
  3968                           
  3969                           ;main.c: 422: Console_Render();
  3970  0131AC  EC9B  F0A7         	call	_Console_Render	;wreg free
  3971  0131B0                     l2232:
  3972  0131B0  D7FF               	goto	l2232
  3973  0131B2                     l2234:
  3974                           
  3975                           ;main.c: 424: }
  3976                           ;main.c: 426: if (up){
  3977  0131B2  0103               	movlb	3	; () banked
  3978  0131B4  51E1               	movf	main@up& (0+255),w,b
  3979  0131B6  B4D8               	btfsc	status,2,c
  3980  0131B8  D01B               	goto	l2235
  3981                           
  3982                           ; BSR set to: 3
  3983                           ;main.c: 427: Sensor_Observe();
  3984  0131BA  EC71  F0AF         	call	_Sensor_Observe	;wreg free
  3985                           
  3986                           ;main.c: 428: Closest_Object();
  3987  0131BE  EC48  F0B6         	call	_Closest_Object	;wreg free
  3988                           
  3989                           ;main.c: 429: Travel(3,970,0,200,0);
  3990  0131C2  0E00               	movlw	0
  3991  0131C4  0100               	movlb	0	; () banked
  3992  0131C6  6FF2               	movwf	(Travel@direction+1)& (0+255),b
  3993  0131C8  0E03               	movlw	3
  3994  0131CA  6FF1               	movwf	Travel@direction& (0+255),b
  3995  0131CC  0E03               	movlw	3
  3996  0131CE  6FF4               	movwf	(Travel@Dist+1)& (0+255),b
  3997  0131D0  0ECA               	movlw	202
  3998  0131D2  6FF3               	movwf	Travel@Dist& (0+255),b
  3999  0131D4  0E00               	movlw	0
  4000  0131D6  6FF6               	movwf	(Travel@Test_ADC+1)& (0+255),b
  4001  0131D8  0E00               	movlw	0
  4002  0131DA  6FF5               	movwf	Travel@Test_ADC& (0+255),b
  4003  0131DC  0E00               	movlw	0
  4004  0131DE  6FF8               	movwf	(Travel@Spd+1)& (0+255),b
  4005  0131E0  0EC8               	movlw	200
  4006  0131E2  6FF7               	movwf	Travel@Spd& (0+255),b
  4007  0131E4  0E00               	movlw	0
  4008  0131E6  6FFA               	movwf	(Travel@Wall+1)& (0+255),b
  4009  0131E8  0E00               	movlw	0
  4010  0131EA  6FF9               	movwf	Travel@Wall& (0+255),b
  4011  0131EC  EC76  F091         	call	_Travel	;wreg free
  4012  0131F0                     l2235:
  4013                           
  4014                           ;main.c: 430: }
  4015                           ;main.c: 432: Console_Render();
  4016  0131F0  EC9B  F0A7         	call	_Console_Render	;wreg free
  4017                           
  4018                           ;main.c: 433: if (MXK_Release())
  4019  0131F4  EC7C  F0C5         	call	_MXK_Release	;wreg free
  4020  0131F8  0900               	iorlw	0
  4021  0131FA  B4D8               	btfsc	status,2,c
  4022  0131FC  D63B               	goto	l2216
  4023                           
  4024                           ;main.c: 434: MXK_Dequeue();
  4025  0131FE  EC7A  F0C3         	call	_MXK_Dequeue	;wreg free
  4026                           
  4027                           ;main.c: 435: }
  4028                           ;main.c: 436: }
  4029  013202  D638               	goto	l2216
  4030  013204                     __end_of_main:
  4031                           	opt stack 0
  4032                           tosu	equ	0xFFF
  4033                           tosh	equ	0xFFE
  4034                           tosl	equ	0xFFD
  4035                           pclath	equ	0xFFA
  4036                           tblptru	equ	0xFF8
  4037                           tblptrh	equ	0xFF7
  4038                           tblptrl	equ	0xFF6
  4039                           tablat	equ	0xFF5
  4040                           postinc0	equ	0xFEE
  4041                           wreg	equ	0xFE8
  4042                           postdec1	equ	0xFE5
  4043                           fsr1h	equ	0xFE2
  4044                           fsr1l	equ	0xFE1
  4045                           postinc2	equ	0xFDE
  4046                           postdec2	equ	0xFDD
  4047                           fsr2h	equ	0xFDA
  4048                           fsr2l	equ	0xFD9
  4049                           status	equ	0xFD8
  4050                           
  4051 ;; *************** function _Sensor_Observe *****************
  4052 ;; Defined at:
  4053 ;;		line 239 in file "main.c"
  4054 ;; Parameters:    Size  Location     Type
  4055 ;;		None
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;  Low_Sensor      2  149[BANK0 ] int 
  4058 ;;  High_Sensor     2  147[BANK0 ] int 
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  1    wreg      void 
  4061 ;; Registers used:
  4062 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4070 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4071 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4072 ;;Total ram usage:        6 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:   13
  4075 ;; This function calls:
  4076 ;;		_ADCAverage
  4077 ;;		_Console_Render
  4078 ;;		_SteppingCW
  4079 ;;		_printf
  4080 ;; This function is called by:
  4081 ;;		_main
  4082 ;;		_Find_Flag
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085                           
  4086                           	psect	text1
  4087  015EE2                     __ptext1:
  4088                           	opt stack 0
  4089  015EE2                     _Sensor_Observe:
  4090                           	opt stack 17
  4091                           
  4092                           ;main.c: 240: int High_Sensor = 0;
  4093                           
  4094                           ;incstack = 0
  4095  015EE2  0E00               	movlw	0
  4096  015EE4  0100               	movlb	0	; () banked
  4097  015EE6  6FF4               	movwf	(Sensor_Observe@High_Sensor+1)& (0+255),b
  4098  015EE8  0E00               	movlw	0
  4099  015EEA  6FF3               	movwf	Sensor_Observe@High_Sensor& (0+255),b
  4100                           
  4101                           ;main.c: 241: int Low_Sensor = 10000;
  4102  015EEC  0E27               	movlw	39
  4103  015EEE  6FF6               	movwf	(Sensor_Observe@Low_Sensor+1)& (0+255),b
  4104  015EF0  0E10               	movlw	16
  4105  015EF2  6FF5               	movwf	Sensor_Observe@Low_Sensor& (0+255),b
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;main.c: 243: printf("%c", (char)35);
  4109  015EF4  0EFC               	movlw	low STR_1
  4110  015EF6  6F75               	movwf	printf@f& (0+255),b
  4111  015EF8  0EFF               	movlw	high STR_1
  4112  015EFA  6F76               	movwf	(printf@f+1)& (0+255),b
  4113  015EFC  0E00               	movlw	0
  4114  015EFE  6F78               	movwf	(?_printf+3)& (0+255),b
  4115  015F00  0E23               	movlw	35
  4116  015F02  6F77               	movwf	(?_printf+2)& (0+255),b
  4117  015F04  EC77  F0AB         	call	_printf	;wreg free
  4118                           
  4119                           ;main.c: 245: printf("Sensor Moving!   \n");
  4120  015F08  0E17               	movlw	low STR_2
  4121  015F0A  0100               	movlb	0	; () banked
  4122  015F0C  6F75               	movwf	printf@f& (0+255),b
  4123  015F0E  0EFF               	movlw	high STR_2
  4124  015F10  6F76               	movwf	(printf@f+1)& (0+255),b
  4125  015F12  EC77  F0AB         	call	_printf	;wreg free
  4126                           
  4127                           ;main.c: 247: Console_Render();
  4128  015F16  EC9B  F0A7         	call	_Console_Render	;wreg free
  4129                           
  4130                           ;main.c: 249: while (Motor_Count <= 512) {
  4131  015F1A  D051               	goto	l2195
  4132  015F1C                     
  4133                           ;main.c: 250: printf("%c",(char)35);
  4134  015F1C  0EFC               	movlw	low STR_1
  4135  015F1E  0100               	movlb	0	; () banked
  4136  015F20  6F75               	movwf	printf@f& (0+255),b
  4137  015F22  0EFF               	movlw	high STR_1
  4138  015F24  6F76               	movwf	(printf@f+1)& (0+255),b
  4139  015F26  0E00               	movlw	0
  4140  015F28  6F78               	movwf	(?_printf+3)& (0+255),b
  4141  015F2A  0E23               	movlw	35
  4142  015F2C  6F77               	movwf	(?_printf+2)& (0+255),b
  4143  015F2E  EC77  F0AB         	call	_printf	;wreg free
  4144                           
  4145                           ;main.c: 251: Motor_Count++;
  4146  015F32  0101               	movlb	1	; () banked
  4147  015F34  4B46               	infsnz	_Motor_Count& (0+255),f,b
  4148  015F36  2B47               	incf	(_Motor_Count+1)& (0+255),f,b
  4149                           
  4150                           ; BSR set to: 1
  4151                           ;main.c: 252: ADCAverage();
  4152  015F38  EC1C  F09E         	call	_ADCAverage	;wreg free
  4153                           
  4154                           ;main.c: 253: printf("\nADC: %d \n\n", average);
  4155  015F3C  0EB0               	movlw	low STR_4
  4156  015F3E  0100               	movlb	0	; () banked
  4157  015F40  6F75               	movwf	printf@f& (0+255),b
  4158  015F42  0EFF               	movlw	high STR_4
  4159  015F44  6F76               	movwf	(printf@f+1)& (0+255),b
  4160  015F46  C02E  F077         	movff	_average,?_printf+2
  4161  015F4A  C02F  F078         	movff	_average+1,?_printf+3
  4162  015F4E  EC77  F0AB         	call	_printf	;wreg free
  4163                           
  4164                           ;main.c: 254: Console_Render();
  4165  015F52  EC9B  F0A7         	call	_Console_Render	;wreg free
  4166                           
  4167                           ;main.c: 255: if (Low_Sensor > average) {
  4168  015F56  0100               	movlb	0	; () banked
  4169  015F58  51F5               	movf	Sensor_Observe@Low_Sensor& (0+255),w,b
  4170  015F5A  5C2E               	subwf	_average,w,c
  4171  015F5C  502F               	movf	_average+1,w,c
  4172  015F5E  0A80               	xorlw	128
  4173  015F60  6FF1               	movwf	??_Sensor_Observe& (0+255),b
  4174  015F62  51F6               	movf	(Sensor_Observe@Low_Sensor+1)& (0+255),w,b
  4175  015F64  0A80               	xorlw	128
  4176  015F66  59F1               	subwfb	??_Sensor_Observe& (0+255),w,b
  4177  015F68  B0D8               	btfsc	status,0,c
  4178  015F6A  D009               	goto	l2197
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;main.c: 256: Low_Sensor = average;
  4182  015F6C  C02E  F0F5         	movff	_average,Sensor_Observe@Low_Sensor
  4183  015F70  C02F  F0F6         	movff	_average+1,Sensor_Observe@Low_Sensor+1
  4184                           
  4185                           ;main.c: 257: Close_Pos = Motor_Count;
  4186  015F74  C146  F128         	movff	_Motor_Count,_Close_Pos
  4187  015F78  C147  F129         	movff	_Motor_Count+1,_Close_Pos+1
  4188                           
  4189                           ;main.c: 258: }
  4190  015F7C  D01E               	goto	l2199
  4191  015F7E                     l2197:
  4192                           
  4193                           ; BSR set to: 0
  4194                           ;main.c: 259: else if (average > High_Sensor){
  4195                           
  4196                           ; BSR set to: 0
  4197  015F7E  502E               	movf	_average,w,c
  4198  015F80  5DF3               	subwf	Sensor_Observe@High_Sensor& (0+255),w,b
  4199  015F82  51F4               	movf	(Sensor_Observe@High_Sensor+1)& (0+255),w,b
  4200  015F84  0A80               	xorlw	128
  4201  015F86  6FF1               	movwf	??_Sensor_Observe& (0+255),b
  4202  015F88  502F               	movf	_average+1,w,c
  4203  015F8A  0A80               	xorlw	128
  4204  015F8C  59F1               	subwfb	??_Sensor_Observe& (0+255),w,b
  4205  015F8E  B0D8               	btfsc	status,0,c
  4206  015F90  D014               	goto	l2199
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;main.c: 260: High_Sensor = average;
  4210  015F92  C02E  F0F3         	movff	_average,Sensor_Observe@High_Sensor
  4211  015F96  C02F  F0F4         	movff	_average+1,Sensor_Observe@High_Sensor+1
  4212                           
  4213                           ;main.c: 261: Found_Flag = Motor_Count;
  4214  015F9A  C146  F032         	movff	_Motor_Count,_Found_Flag
  4215  015F9E  C147  F033         	movff	_Motor_Count+1,_Found_Flag+1
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;main.c: 262: printf ("\n Found Flag: %d", Found_Flag);
  4219  015FA2  0E4F               	movlw	low STR_5
  4220  015FA4  6F75               	movwf	printf@f& (0+255),b
  4221  015FA6  0EFF               	movlw	high STR_5
  4222  015FA8  6F76               	movwf	(printf@f+1)& (0+255),b
  4223  015FAA  C032  F077         	movff	_Found_Flag,?_printf+2
  4224  015FAE  C033  F078         	movff	_Found_Flag+1,?_printf+3
  4225  015FB2  EC77  F0AB         	call	_printf	;wreg free
  4226                           
  4227                           ;main.c: 263: Console_Render();
  4228  015FB6  EC9B  F0A7         	call	_Console_Render	;wreg free
  4229  015FBA                     l2199:
  4230                           
  4231                           ;main.c: 264: }
  4232                           ;main.c: 265: SteppingCW();
  4233  015FBA  ECBF  F0C0         	call	_SteppingCW	;wreg free
  4234  015FBE                     l2195:
  4235  015FBE  0101               	movlb	1	; () banked
  4236  015FC0  BF47               	btfsc	(_Motor_Count+1)& (0+255),7,b
  4237  015FC2  D7AC               	goto	l2196
  4238  015FC4  0546               	decf	_Motor_Count& (0+255),w,b
  4239  015FC6  0E02               	movlw	2
  4240  015FC8  5947               	subwfb	(_Motor_Count+1)& (0+255),w,b
  4241  015FCA  A0D8               	btfss	status,0,c
  4242  015FCC  D7A7               	goto	l2196
  4243                           
  4244                           ; BSR set to: 1
  4245                           ;main.c: 266: }
  4246                           ;main.c: 267: RD5 = 0;
  4247  015FCE  9A83               	bcf	3971,5,c	;volatile
  4248                           
  4249                           ;main.c: 268: RD7 = 0;
  4250  015FD0  9E83               	bcf	3971,7,c	;volatile
  4251                           
  4252                           ;main.c: 269: RA2 = 0;
  4253  015FD2  9480               	bcf	3968,2,c	;volatile
  4254                           
  4255                           ;main.c: 270: RA3 = 0;
  4256  015FD4  9680               	bcf	3968,3,c	;volatile
  4257                           
  4258                           ; BSR set to: 1
  4259                           ;main.c: 271: Sensor_Observe_Fin = 1;
  4260  015FD6  0E00               	movlw	0
  4261  015FD8  6F21               	movwf	(_Sensor_Observe_Fin+1)& (0+255),b
  4262  015FDA  0E01               	movlw	1
  4263  015FDC  6F20               	movwf	_Sensor_Observe_Fin& (0+255),b
  4264                           
  4265                           ; BSR set to: 1
  4266                           ;main.c: 274: CCW_Count = 512 - Close_Pos;
  4267  015FDE  C128  F0F1         	movff	_Close_Pos,??_Sensor_Observe
  4268  015FE2  C129  F0F2         	movff	_Close_Pos+1,??_Sensor_Observe+1
  4269  015FE6  0100               	movlb	0	; () banked
  4270  015FE8  1FF1               	comf	??_Sensor_Observe& (0+255),f,b
  4271  015FEA  1FF2               	comf	(??_Sensor_Observe+1)& (0+255),f,b
  4272  015FEC  4BF1               	infsnz	??_Sensor_Observe& (0+255),f,b
  4273  015FEE  2BF2               	incf	(??_Sensor_Observe+1)& (0+255),f,b
  4274  015FF0  0E00               	movlw	0
  4275  015FF2  25F1               	addwf	??_Sensor_Observe& (0+255),w,b
  4276  015FF4  0101               	movlb	1	; () banked
  4277  015FF6  6F24               	movwf	_CCW_Count& (0+255),b
  4278  015FF8  0E02               	movlw	2
  4279  015FFA  0100               	movlb	0	; () banked
  4280  015FFC  21F2               	addwfc	(??_Sensor_Observe+1)& (0+255),w,b
  4281  015FFE  0101               	movlb	1	; () banked
  4282  016000  6F25               	movwf	(_CCW_Count+1)& (0+255),b
  4283                           
  4284                           ; BSR set to: 1
  4285                           ;main.c: 275: Found_Flag = 512 - Found_Flag;
  4286  016002  C032  F0F1         	movff	_Found_Flag,??_Sensor_Observe
  4287  016006  C033  F0F2         	movff	_Found_Flag+1,??_Sensor_Observe+1
  4288  01600A  0100               	movlb	0	; () banked
  4289  01600C  1FF1               	comf	??_Sensor_Observe& (0+255),f,b
  4290  01600E  1FF2               	comf	(??_Sensor_Observe+1)& (0+255),f,b
  4291  016010  4BF1               	infsnz	??_Sensor_Observe& (0+255),f,b
  4292  016012  2BF2               	incf	(??_Sensor_Observe+1)& (0+255),f,b
  4293  016014  0E00               	movlw	0
  4294  016016  25F1               	addwf	??_Sensor_Observe& (0+255),w,b
  4295  016018  6E32               	movwf	_Found_Flag,c
  4296  01601A  0E02               	movlw	2
  4297  01601C  21F2               	addwfc	(??_Sensor_Observe+1)& (0+255),w,b
  4298  01601E  6E33               	movwf	_Found_Flag+1,c
  4299  016020  0012               	return	
  4300  016022                     __end_of_Sensor_Observe:
  4301                           	opt stack 0
  4302                           tosu	equ	0xFFF
  4303                           tosh	equ	0xFFE
  4304                           tosl	equ	0xFFD
  4305                           pclath	equ	0xFFA
  4306                           tblptru	equ	0xFF8
  4307                           tblptrh	equ	0xFF7
  4308                           tblptrl	equ	0xFF6
  4309                           tablat	equ	0xFF5
  4310                           postinc0	equ	0xFEE
  4311                           wreg	equ	0xFE8
  4312                           postdec1	equ	0xFE5
  4313                           fsr1h	equ	0xFE2
  4314                           fsr1l	equ	0xFE1
  4315                           postinc2	equ	0xFDE
  4316                           postdec2	equ	0xFDD
  4317                           fsr2h	equ	0xFDA
  4318                           fsr2l	equ	0xFD9
  4319                           status	equ	0xFD8
  4320                           
  4321 ;; *************** function _Robot_Init *****************
  4322 ;; Defined at:
  4323 ;;		line 152 in file "main.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;		None
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;		None
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      void 
  4330 ;; Registers used:
  4331 ;;		wreg, status,2, status,0, cstack
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;Total ram usage:        0 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    9
  4344 ;; This function calls:
  4345 ;;		_Robot_Stop
  4346 ;;		_UpdateDistance
  4347 ;;		_eusartSend
  4348 ;; This function is called by:
  4349 ;;		_main
  4350 ;; This function uses a non-reentrant model
  4351 ;;
  4352                           
  4353                           	psect	text2
  4354  018AE2                     __ptext2:
  4355                           	opt stack 0
  4356  018AE2                     _Robot_Init:
  4357                           	opt stack 21
  4358                           
  4359                           ;main.c: 153: eusartSend(128);
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;incstack = 0
  4363  018AE2  0E80               	movlw	128
  4364  018AE4  EC20  F0C6         	call	_eusartSend
  4365                           
  4366                           ;main.c: 154: eusartSend(132);
  4367  018AE8  0E84               	movlw	132
  4368  018AEA  EC20  F0C6         	call	_eusartSend
  4369                           
  4370                           ;main.c: 155: Robot_Stop();
  4371  018AEE  ECA3  F0C4         	call	_Robot_Stop	;wreg free
  4372                           
  4373                           ;main.c: 156: UpdateDistance();
  4374  018AF2  ECBC  F0BD         	call	_UpdateDistance	;wreg free
  4375  018AF6  0012               	return		;funcret
  4376  018AF8                     __end_of_Robot_Init:
  4377                           	opt stack 0
  4378                           tosu	equ	0xFFF
  4379                           tosh	equ	0xFFE
  4380                           tosl	equ	0xFFD
  4381                           pclath	equ	0xFFA
  4382                           tblptru	equ	0xFF8
  4383                           tblptrh	equ	0xFF7
  4384                           tblptrl	equ	0xFF6
  4385                           tablat	equ	0xFF5
  4386                           postinc0	equ	0xFEE
  4387                           wreg	equ	0xFE8
  4388                           postdec1	equ	0xFE5
  4389                           fsr1h	equ	0xFE2
  4390                           fsr1l	equ	0xFE1
  4391                           postinc2	equ	0xFDE
  4392                           postdec2	equ	0xFDD
  4393                           fsr2h	equ	0xFDA
  4394                           fsr2l	equ	0xFD9
  4395                           status	equ	0xFD8
  4396                           
  4397 ;; *************** function _Navigate_Maze *****************
  4398 ;; Defined at:
  4399 ;;		line 594 in file "dans.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;		None
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;  Direction       2   21[BANK1 ] int 
  4404 ;;  Follow          2    0        int 
  4405 ;; Return value:  Size  Location     Type
  4406 ;;                  1    wreg      void 
  4407 ;; Registers used:
  4408 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4417 ;;      Totals:         0       0       2       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4418 ;;Total ram usage:        6 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; Hardware stack levels required when called:   16
  4421 ;; This function calls:
  4422 ;;		_Console_Render
  4423 ;;		_Go_Backward
  4424 ;;		_Travel
  4425 ;;		___wmul
  4426 ;;		_pop
  4427 ;;		_printf
  4428 ;; This function is called by:
  4429 ;;		_main
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           	psect	text3
  4434  0128F0                     __ptext3:
  4435                           	opt stack 0
  4436  0128F0                     _Navigate_Maze:
  4437                           	opt stack 14
  4438                           
  4439                           ;dans.c: 595: int Direction;
  4440                           ;dans.c: 596: int Follow;
  4441                           ;dans.c: 597: printf("X=%d, Y=%d\n", X_Pos, Y_Pos);
  4442                           
  4443                           ;incstack = 0
  4444  0128F0  0E8C               	movlw	low STR_33
  4445  0128F2  0100               	movlb	0	; () banked
  4446  0128F4  6F75               	movwf	printf@f& (0+255),b
  4447  0128F6  0EFF               	movlw	high STR_33
  4448  0128F8  6F76               	movwf	(printf@f+1)& (0+255),b
  4449  0128FA  C13C  F077         	movff	_X_Pos,?_printf+2
  4450  0128FE  C13D  F078         	movff	_X_Pos+1,?_printf+3
  4451  012902  C13A  F079         	movff	_Y_Pos,?_printf+4
  4452  012906  C13B  F07A         	movff	_Y_Pos+1,?_printf+5
  4453  01290A  EC77  F0AB         	call	_printf	;wreg free
  4454                           
  4455                           ;dans.c: 598: Console_Render();
  4456  01290E  EC9B  F0A7         	call	_Console_Render	;wreg free
  4457                           
  4458                           ;dans.c: 599: if(maze[X_Pos][Y_Pos].Options > 0){
  4459  012912  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  4460  012916  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4461  01291A  0E00               	movlw	0
  4462  01291C  0100               	movlb	0	; () banked
  4463  01291E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4464  012920  0E32               	movlw	50
  4465  012922  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4466  012924  EC33  F0C4         	call	___wmul	;wreg free
  4467  012928  0E00               	movlw	low _maze
  4468  01292A  0102               	movlb	2	; () banked
  4469  01292C  6FFB               	movwf	??_Navigate_Maze& (0+255),b
  4470  01292E  0E02               	movlw	high _maze
  4471  012930  6FFC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4472  012932  0100               	movlb	0	; () banked
  4473  012934  5160               	movf	?___wmul& (0+255),w,b
  4474  012936  0102               	movlb	2	; () banked
  4475  012938  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4476  01293A  0100               	movlb	0	; () banked
  4477  01293C  5161               	movf	(?___wmul+1)& (0+255),w,b
  4478  01293E  0102               	movlb	2	; () banked
  4479  012940  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4480  012942  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  4481  012946  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4482  01294A  0E00               	movlw	0
  4483  01294C  0100               	movlb	0	; () banked
  4484  01294E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4485  012950  0E0A               	movlw	10
  4486  012952  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4487  012954  EC33  F0C4         	call	___wmul	;wreg free
  4488  012958  0100               	movlb	0	; () banked
  4489  01295A  5160               	movf	?___wmul& (0+255),w,b
  4490  01295C  0102               	movlb	2	; () banked
  4491  01295E  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4492  012960  0100               	movlb	0	; () banked
  4493  012962  5161               	movf	(?___wmul+1)& (0+255),w,b
  4494  012964  0102               	movlb	2	; () banked
  4495  012966  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4496  012968  0E08               	movlw	8
  4497  01296A  25FB               	addwf	??_Navigate_Maze& (0+255),w,b
  4498  01296C  6ED9               	movwf	fsr2l,c
  4499  01296E  0E00               	movlw	0
  4500  012970  21FC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4501  012972  6EDA               	movwf	fsr2h,c
  4502  012974  0E01               	movlw	1
  4503  012976  BEDB               	btfsc	plusw2,7,c
  4504  012978  D23D               	goto	l2501
  4505  01297A  0E01               	movlw	1
  4506  01297C  50DB               	movf	plusw2,w,c
  4507  01297E  E103               	bnz	u14240
  4508  012980  04DE               	decf	postinc2,w,c
  4509  012982  A0D8               	btfss	status,0,c
  4510  012984  D237               	goto	l2501
  4511  012986                     u14240:
  4512                           
  4513                           ; BSR set to: 2
  4514                           ;dans.c: 600: if(maze[X_Pos][Y_Pos].walls[1] == 0 && maze[X_Pos][Y_Pos+1].Options > 0){
  4515  012986  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  4516  01298A  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4517  01298E  0E00               	movlw	0
  4518  012990  0100               	movlb	0	; () banked
  4519  012992  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4520  012994  0E32               	movlw	50
  4521  012996  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4522  012998  EC33  F0C4         	call	___wmul	;wreg free
  4523  01299C  0E00               	movlw	low _maze
  4524  01299E  0102               	movlb	2	; () banked
  4525  0129A0  6FFB               	movwf	??_Navigate_Maze& (0+255),b
  4526  0129A2  0E02               	movlw	high _maze
  4527  0129A4  6FFC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4528  0129A6  0100               	movlb	0	; () banked
  4529  0129A8  5160               	movf	?___wmul& (0+255),w,b
  4530  0129AA  0102               	movlb	2	; () banked
  4531  0129AC  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4532  0129AE  0100               	movlb	0	; () banked
  4533  0129B0  5161               	movf	(?___wmul+1)& (0+255),w,b
  4534  0129B2  0102               	movlb	2	; () banked
  4535  0129B4  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4536  0129B6  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  4537  0129BA  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4538  0129BE  0E00               	movlw	0
  4539  0129C0  0100               	movlb	0	; () banked
  4540  0129C2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4541  0129C4  0E0A               	movlw	10
  4542  0129C6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4543  0129C8  EC33  F0C4         	call	___wmul	;wreg free
  4544  0129CC  0100               	movlb	0	; () banked
  4545  0129CE  5160               	movf	?___wmul& (0+255),w,b
  4546  0129D0  0102               	movlb	2	; () banked
  4547  0129D2  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4548  0129D4  0100               	movlb	0	; () banked
  4549  0129D6  5161               	movf	(?___wmul+1)& (0+255),w,b
  4550  0129D8  0102               	movlb	2	; () banked
  4551  0129DA  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4552  0129DC  0E05               	movlw	5
  4553  0129DE  25FB               	addwf	??_Navigate_Maze& (0+255),w,b
  4554  0129E0  6ED9               	movwf	fsr2l,c
  4555  0129E2  0E00               	movlw	0
  4556  0129E4  21FC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4557  0129E6  6EDA               	movwf	fsr2h,c
  4558  0129E8  50DF               	movf	indf2,w,c
  4559  0129EA  A4D8               	btfss	status,2,c
  4560  0129EC  D044               	goto	l2502
  4561                           
  4562                           ; BSR set to: 2
  4563  0129EE  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  4564  0129F2  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4565  0129F6  0E00               	movlw	0
  4566  0129F8  0100               	movlb	0	; () banked
  4567  0129FA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4568  0129FC  0E32               	movlw	50
  4569  0129FE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4570  012A00  EC33  F0C4         	call	___wmul	;wreg free
  4571  012A04  0E00               	movlw	low _maze
  4572  012A06  0102               	movlb	2	; () banked
  4573  012A08  6FFB               	movwf	??_Navigate_Maze& (0+255),b
  4574  012A0A  0E02               	movlw	high _maze
  4575  012A0C  6FFC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4576  012A0E  0100               	movlb	0	; () banked
  4577  012A10  5160               	movf	?___wmul& (0+255),w,b
  4578  012A12  0102               	movlb	2	; () banked
  4579  012A14  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4580  012A16  0100               	movlb	0	; () banked
  4581  012A18  5161               	movf	(?___wmul+1)& (0+255),w,b
  4582  012A1A  0102               	movlb	2	; () banked
  4583  012A1C  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4584  012A1E  0E01               	movlw	1
  4585  012A20  0101               	movlb	1	; () banked
  4586  012A22  253A               	addwf	_Y_Pos& (0+255),w,b
  4587  012A24  0100               	movlb	0	; () banked
  4588  012A26  6F60               	movwf	___wmul@multiplier& (0+255),b
  4589  012A28  0E00               	movlw	0
  4590  012A2A  0101               	movlb	1	; () banked
  4591  012A2C  213B               	addwfc	(_Y_Pos+1)& (0+255),w,b
  4592  012A2E  0100               	movlb	0	; () banked
  4593  012A30  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  4594  012A32  0E00               	movlw	0
  4595  012A34  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4596  012A36  0E0A               	movlw	10
  4597  012A38  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4598  012A3A  EC33  F0C4         	call	___wmul	;wreg free
  4599  012A3E  0100               	movlb	0	; () banked
  4600  012A40  5160               	movf	?___wmul& (0+255),w,b
  4601  012A42  0102               	movlb	2	; () banked
  4602  012A44  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4603  012A46  0100               	movlb	0	; () banked
  4604  012A48  5161               	movf	(?___wmul+1)& (0+255),w,b
  4605  012A4A  0102               	movlb	2	; () banked
  4606  012A4C  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4607  012A4E  0E08               	movlw	8
  4608  012A50  25FB               	addwf	??_Navigate_Maze& (0+255),w,b
  4609  012A52  6ED9               	movwf	fsr2l,c
  4610  012A54  0E00               	movlw	0
  4611  012A56  21FC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4612  012A58  6EDA               	movwf	fsr2h,c
  4613  012A5A  0E01               	movlw	1
  4614  012A5C  BEDB               	btfsc	plusw2,7,c
  4615  012A5E  D00B               	goto	l2502
  4616  012A60  0E01               	movlw	1
  4617  012A62  50DB               	movf	plusw2,w,c
  4618  012A64  E103               	bnz	u14260
  4619  012A66  04DE               	decf	postinc2,w,c
  4620  012A68  A0D8               	btfss	status,0,c
  4621  012A6A  D005               	goto	l2502
  4622  012A6C                     u14260:
  4623                           
  4624                           ; BSR set to: 2
  4625                           ;dans.c: 601: Direction = 1;
  4626  012A6C  0E00               	movlw	0
  4627  012A6E  0101               	movlb	1	; () banked
  4628  012A70  6FFE               	movwf	(Navigate_Maze@Direction+1)& (0+255),b
  4629  012A72  0E01               	movlw	1
  4630  012A74  D167               	goto	L3
  4631  012A76                     l2502:
  4632                           
  4633                           ;dans.c: 603: else if(maze[X_Pos][Y_Pos].walls[2] == 0 && maze[X_Pos+1][Y_Pos].Options >
      +                           0){
  4634                           
  4635                           ; BSR set to: 1
  4636  012A76  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  4637  012A7A  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4638  012A7E  0E00               	movlw	0
  4639  012A80  0100               	movlb	0	; () banked
  4640  012A82  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4641  012A84  0E32               	movlw	50
  4642  012A86  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4643  012A88  EC33  F0C4         	call	___wmul	;wreg free
  4644  012A8C  0E00               	movlw	low _maze
  4645  012A8E  0102               	movlb	2	; () banked
  4646  012A90  6FFB               	movwf	??_Navigate_Maze& (0+255),b
  4647  012A92  0E02               	movlw	high _maze
  4648  012A94  6FFC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4649  012A96  0100               	movlb	0	; () banked
  4650  012A98  5160               	movf	?___wmul& (0+255),w,b
  4651  012A9A  0102               	movlb	2	; () banked
  4652  012A9C  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4653  012A9E  0100               	movlb	0	; () banked
  4654  012AA0  5161               	movf	(?___wmul+1)& (0+255),w,b
  4655  012AA2  0102               	movlb	2	; () banked
  4656  012AA4  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4657  012AA6  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  4658  012AAA  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4659  012AAE  0E00               	movlw	0
  4660  012AB0  0100               	movlb	0	; () banked
  4661  012AB2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4662  012AB4  0E0A               	movlw	10
  4663  012AB6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4664  012AB8  EC33  F0C4         	call	___wmul	;wreg free
  4665  012ABC  0100               	movlb	0	; () banked
  4666  012ABE  5160               	movf	?___wmul& (0+255),w,b
  4667  012AC0  0102               	movlb	2	; () banked
  4668  012AC2  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4669  012AC4  0100               	movlb	0	; () banked
  4670  012AC6  5161               	movf	(?___wmul+1)& (0+255),w,b
  4671  012AC8  0102               	movlb	2	; () banked
  4672  012ACA  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4673  012ACC  0E06               	movlw	6
  4674  012ACE  25FB               	addwf	??_Navigate_Maze& (0+255),w,b
  4675  012AD0  6ED9               	movwf	fsr2l,c
  4676  012AD2  0E00               	movlw	0
  4677  012AD4  21FC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4678  012AD6  6EDA               	movwf	fsr2h,c
  4679  012AD8  50DF               	movf	indf2,w,c
  4680  012ADA  A4D8               	btfss	status,2,c
  4681  012ADC  D044               	goto	l2504
  4682                           
  4683                           ; BSR set to: 2
  4684  012ADE  0E01               	movlw	1
  4685  012AE0  0101               	movlb	1	; () banked
  4686  012AE2  253C               	addwf	_X_Pos& (0+255),w,b
  4687  012AE4  0100               	movlb	0	; () banked
  4688  012AE6  6F60               	movwf	___wmul@multiplier& (0+255),b
  4689  012AE8  0E00               	movlw	0
  4690  012AEA  0101               	movlb	1	; () banked
  4691  012AEC  213D               	addwfc	(_X_Pos+1)& (0+255),w,b
  4692  012AEE  0100               	movlb	0	; () banked
  4693  012AF0  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  4694  012AF2  0E00               	movlw	0
  4695  012AF4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4696  012AF6  0E32               	movlw	50
  4697  012AF8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4698  012AFA  EC33  F0C4         	call	___wmul	;wreg free
  4699  012AFE  0E00               	movlw	low _maze
  4700  012B00  0102               	movlb	2	; () banked
  4701  012B02  6FFB               	movwf	??_Navigate_Maze& (0+255),b
  4702  012B04  0E02               	movlw	high _maze
  4703  012B06  6FFC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4704  012B08  0100               	movlb	0	; () banked
  4705  012B0A  5160               	movf	?___wmul& (0+255),w,b
  4706  012B0C  0102               	movlb	2	; () banked
  4707  012B0E  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4708  012B10  0100               	movlb	0	; () banked
  4709  012B12  5161               	movf	(?___wmul+1)& (0+255),w,b
  4710  012B14  0102               	movlb	2	; () banked
  4711  012B16  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4712  012B18  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  4713  012B1C  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4714  012B20  0E00               	movlw	0
  4715  012B22  0100               	movlb	0	; () banked
  4716  012B24  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4717  012B26  0E0A               	movlw	10
  4718  012B28  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4719  012B2A  EC33  F0C4         	call	___wmul	;wreg free
  4720  012B2E  0100               	movlb	0	; () banked
  4721  012B30  5160               	movf	?___wmul& (0+255),w,b
  4722  012B32  0102               	movlb	2	; () banked
  4723  012B34  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4724  012B36  0100               	movlb	0	; () banked
  4725  012B38  5161               	movf	(?___wmul+1)& (0+255),w,b
  4726  012B3A  0102               	movlb	2	; () banked
  4727  012B3C  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4728  012B3E  0E08               	movlw	8
  4729  012B40  25FB               	addwf	??_Navigate_Maze& (0+255),w,b
  4730  012B42  6ED9               	movwf	fsr2l,c
  4731  012B44  0E00               	movlw	0
  4732  012B46  21FC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4733  012B48  6EDA               	movwf	fsr2h,c
  4734  012B4A  0E01               	movlw	1
  4735  012B4C  BEDB               	btfsc	plusw2,7,c
  4736  012B4E  D00B               	goto	l2504
  4737  012B50  0E01               	movlw	1
  4738  012B52  50DB               	movf	plusw2,w,c
  4739  012B54  E103               	bnz	u14280
  4740  012B56  04DE               	decf	postinc2,w,c
  4741  012B58  A0D8               	btfss	status,0,c
  4742  012B5A  D005               	goto	l2504
  4743  012B5C                     u14280:
  4744                           
  4745                           ; BSR set to: 2
  4746                           ;dans.c: 604: Direction = 2;
  4747  012B5C  0E00               	movlw	0
  4748  012B5E  0101               	movlb	1	; () banked
  4749  012B60  6FFE               	movwf	(Navigate_Maze@Direction+1)& (0+255),b
  4750  012B62  0E02               	movlw	2
  4751  012B64  D0EF               	goto	L3
  4752  012B66                     l2504:
  4753                           
  4754                           ;dans.c: 606: else if(maze[X_Pos][Y_Pos].walls[3] == 0 && maze[X_Pos][Y_Pos-1].Options >
      +                           0){
  4755                           
  4756                           ; BSR set to: 1
  4757  012B66  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  4758  012B6A  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4759  012B6E  0E00               	movlw	0
  4760  012B70  0100               	movlb	0	; () banked
  4761  012B72  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4762  012B74  0E32               	movlw	50
  4763  012B76  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4764  012B78  EC33  F0C4         	call	___wmul	;wreg free
  4765  012B7C  0E00               	movlw	low _maze
  4766  012B7E  0102               	movlb	2	; () banked
  4767  012B80  6FFB               	movwf	??_Navigate_Maze& (0+255),b
  4768  012B82  0E02               	movlw	high _maze
  4769  012B84  6FFC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4770  012B86  0100               	movlb	0	; () banked
  4771  012B88  5160               	movf	?___wmul& (0+255),w,b
  4772  012B8A  0102               	movlb	2	; () banked
  4773  012B8C  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4774  012B8E  0100               	movlb	0	; () banked
  4775  012B90  5161               	movf	(?___wmul+1)& (0+255),w,b
  4776  012B92  0102               	movlb	2	; () banked
  4777  012B94  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4778  012B96  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  4779  012B9A  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4780  012B9E  0E00               	movlw	0
  4781  012BA0  0100               	movlb	0	; () banked
  4782  012BA2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4783  012BA4  0E0A               	movlw	10
  4784  012BA6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4785  012BA8  EC33  F0C4         	call	___wmul	;wreg free
  4786  012BAC  0100               	movlb	0	; () banked
  4787  012BAE  5160               	movf	?___wmul& (0+255),w,b
  4788  012BB0  0102               	movlb	2	; () banked
  4789  012BB2  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4790  012BB4  0100               	movlb	0	; () banked
  4791  012BB6  5161               	movf	(?___wmul+1)& (0+255),w,b
  4792  012BB8  0102               	movlb	2	; () banked
  4793  012BBA  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4794  012BBC  0E07               	movlw	7
  4795  012BBE  25FB               	addwf	??_Navigate_Maze& (0+255),w,b
  4796  012BC0  6ED9               	movwf	fsr2l,c
  4797  012BC2  0E00               	movlw	0
  4798  012BC4  21FC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4799  012BC6  6EDA               	movwf	fsr2h,c
  4800  012BC8  50DF               	movf	indf2,w,c
  4801  012BCA  A4D8               	btfss	status,2,c
  4802  012BCC  D044               	goto	l2506
  4803                           
  4804                           ; BSR set to: 2
  4805  012BCE  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  4806  012BD2  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4807  012BD6  0E00               	movlw	0
  4808  012BD8  0100               	movlb	0	; () banked
  4809  012BDA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4810  012BDC  0E32               	movlw	50
  4811  012BDE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4812  012BE0  EC33  F0C4         	call	___wmul	;wreg free
  4813  012BE4  0E00               	movlw	low _maze
  4814  012BE6  0102               	movlb	2	; () banked
  4815  012BE8  6FFB               	movwf	??_Navigate_Maze& (0+255),b
  4816  012BEA  0E02               	movlw	high _maze
  4817  012BEC  6FFC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4818  012BEE  0100               	movlb	0	; () banked
  4819  012BF0  5160               	movf	?___wmul& (0+255),w,b
  4820  012BF2  0102               	movlb	2	; () banked
  4821  012BF4  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4822  012BF6  0100               	movlb	0	; () banked
  4823  012BF8  5161               	movf	(?___wmul+1)& (0+255),w,b
  4824  012BFA  0102               	movlb	2	; () banked
  4825  012BFC  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4826  012BFE  0EFF               	movlw	255
  4827  012C00  0101               	movlb	1	; () banked
  4828  012C02  253A               	addwf	_Y_Pos& (0+255),w,b
  4829  012C04  0100               	movlb	0	; () banked
  4830  012C06  6F60               	movwf	___wmul@multiplier& (0+255),b
  4831  012C08  0EFF               	movlw	255
  4832  012C0A  0101               	movlb	1	; () banked
  4833  012C0C  213B               	addwfc	(_Y_Pos+1)& (0+255),w,b
  4834  012C0E  0100               	movlb	0	; () banked
  4835  012C10  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  4836  012C12  0E00               	movlw	0
  4837  012C14  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4838  012C16  0E0A               	movlw	10
  4839  012C18  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4840  012C1A  EC33  F0C4         	call	___wmul	;wreg free
  4841  012C1E  0100               	movlb	0	; () banked
  4842  012C20  5160               	movf	?___wmul& (0+255),w,b
  4843  012C22  0102               	movlb	2	; () banked
  4844  012C24  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4845  012C26  0100               	movlb	0	; () banked
  4846  012C28  5161               	movf	(?___wmul+1)& (0+255),w,b
  4847  012C2A  0102               	movlb	2	; () banked
  4848  012C2C  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4849  012C2E  0E08               	movlw	8
  4850  012C30  25FB               	addwf	??_Navigate_Maze& (0+255),w,b
  4851  012C32  6ED9               	movwf	fsr2l,c
  4852  012C34  0E00               	movlw	0
  4853  012C36  21FC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4854  012C38  6EDA               	movwf	fsr2h,c
  4855  012C3A  0E01               	movlw	1
  4856  012C3C  BEDB               	btfsc	plusw2,7,c
  4857  012C3E  D00B               	goto	l2506
  4858  012C40  0E01               	movlw	1
  4859  012C42  50DB               	movf	plusw2,w,c
  4860  012C44  E103               	bnz	u14300
  4861  012C46  04DE               	decf	postinc2,w,c
  4862  012C48  A0D8               	btfss	status,0,c
  4863  012C4A  D005               	goto	l2506
  4864  012C4C                     u14300:
  4865                           
  4866                           ; BSR set to: 2
  4867                           ;dans.c: 607: Direction = 3;
  4868  012C4C  0E00               	movlw	0
  4869  012C4E  0101               	movlb	1	; () banked
  4870  012C50  6FFE               	movwf	(Navigate_Maze@Direction+1)& (0+255),b
  4871  012C52  0E03               	movlw	3
  4872  012C54  D077               	goto	L3
  4873  012C56                     l2506:
  4874                           
  4875                           ;dans.c: 609: else if(maze[X_Pos][Y_Pos].walls[0] == 0 && maze[X_Pos-1][Y_Pos].Options >
      +                           0){
  4876                           
  4877                           ; BSR set to: 1
  4878  012C56  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  4879  012C5A  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4880  012C5E  0E00               	movlw	0
  4881  012C60  0100               	movlb	0	; () banked
  4882  012C62  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4883  012C64  0E32               	movlw	50
  4884  012C66  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4885  012C68  EC33  F0C4         	call	___wmul	;wreg free
  4886  012C6C  0E00               	movlw	low _maze
  4887  012C6E  0102               	movlb	2	; () banked
  4888  012C70  6FFB               	movwf	??_Navigate_Maze& (0+255),b
  4889  012C72  0E02               	movlw	high _maze
  4890  012C74  6FFC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4891  012C76  0100               	movlb	0	; () banked
  4892  012C78  5160               	movf	?___wmul& (0+255),w,b
  4893  012C7A  0102               	movlb	2	; () banked
  4894  012C7C  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4895  012C7E  0100               	movlb	0	; () banked
  4896  012C80  5161               	movf	(?___wmul+1)& (0+255),w,b
  4897  012C82  0102               	movlb	2	; () banked
  4898  012C84  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4899  012C86  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  4900  012C8A  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4901  012C8E  0E00               	movlw	0
  4902  012C90  0100               	movlb	0	; () banked
  4903  012C92  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4904  012C94  0E0A               	movlw	10
  4905  012C96  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4906  012C98  EC33  F0C4         	call	___wmul	;wreg free
  4907  012C9C  0100               	movlb	0	; () banked
  4908  012C9E  5160               	movf	?___wmul& (0+255),w,b
  4909  012CA0  0102               	movlb	2	; () banked
  4910  012CA2  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4911  012CA4  0100               	movlb	0	; () banked
  4912  012CA6  5161               	movf	(?___wmul+1)& (0+255),w,b
  4913  012CA8  0102               	movlb	2	; () banked
  4914  012CAA  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4915  012CAC  0E04               	movlw	4
  4916  012CAE  25FB               	addwf	??_Navigate_Maze& (0+255),w,b
  4917  012CB0  6ED9               	movwf	fsr2l,c
  4918  012CB2  0E00               	movlw	0
  4919  012CB4  21FC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4920  012CB6  6EDA               	movwf	fsr2h,c
  4921  012CB8  50DF               	movf	indf2,w,c
  4922  012CBA  A4D8               	btfss	status,2,c
  4923  012CBC  D045               	goto	l2508
  4924                           
  4925                           ; BSR set to: 2
  4926  012CBE  0EFF               	movlw	255
  4927  012CC0  0101               	movlb	1	; () banked
  4928  012CC2  253C               	addwf	_X_Pos& (0+255),w,b
  4929  012CC4  0100               	movlb	0	; () banked
  4930  012CC6  6F60               	movwf	___wmul@multiplier& (0+255),b
  4931  012CC8  0EFF               	movlw	255
  4932  012CCA  0101               	movlb	1	; () banked
  4933  012CCC  213D               	addwfc	(_X_Pos+1)& (0+255),w,b
  4934  012CCE  0100               	movlb	0	; () banked
  4935  012CD0  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  4936  012CD2  0E00               	movlw	0
  4937  012CD4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4938  012CD6  0E32               	movlw	50
  4939  012CD8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4940  012CDA  EC33  F0C4         	call	___wmul	;wreg free
  4941  012CDE  0E00               	movlw	low _maze
  4942  012CE0  0102               	movlb	2	; () banked
  4943  012CE2  6FFB               	movwf	??_Navigate_Maze& (0+255),b
  4944  012CE4  0E02               	movlw	high _maze
  4945  012CE6  6FFC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4946  012CE8  0100               	movlb	0	; () banked
  4947  012CEA  5160               	movf	?___wmul& (0+255),w,b
  4948  012CEC  0102               	movlb	2	; () banked
  4949  012CEE  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4950  012CF0  0100               	movlb	0	; () banked
  4951  012CF2  5161               	movf	(?___wmul+1)& (0+255),w,b
  4952  012CF4  0102               	movlb	2	; () banked
  4953  012CF6  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4954  012CF8  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  4955  012CFC  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4956  012D00  0E00               	movlw	0
  4957  012D02  0100               	movlb	0	; () banked
  4958  012D04  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4959  012D06  0E0A               	movlw	10
  4960  012D08  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4961  012D0A  EC33  F0C4         	call	___wmul	;wreg free
  4962  012D0E  0100               	movlb	0	; () banked
  4963  012D10  5160               	movf	?___wmul& (0+255),w,b
  4964  012D12  0102               	movlb	2	; () banked
  4965  012D14  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  4966  012D16  0100               	movlb	0	; () banked
  4967  012D18  5161               	movf	(?___wmul+1)& (0+255),w,b
  4968  012D1A  0102               	movlb	2	; () banked
  4969  012D1C  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4970  012D1E  0E08               	movlw	8
  4971  012D20  25FB               	addwf	??_Navigate_Maze& (0+255),w,b
  4972  012D22  6ED9               	movwf	fsr2l,c
  4973  012D24  0E00               	movlw	0
  4974  012D26  21FC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4975  012D28  6EDA               	movwf	fsr2h,c
  4976  012D2A  0E01               	movlw	1
  4977  012D2C  BEDB               	btfsc	plusw2,7,c
  4978  012D2E  D00C               	goto	l2508
  4979  012D30  0E01               	movlw	1
  4980  012D32  50DB               	movf	plusw2,w,c
  4981  012D34  E103               	bnz	u14320
  4982  012D36  04DE               	decf	postinc2,w,c
  4983  012D38  A0D8               	btfss	status,0,c
  4984  012D3A  D006               	goto	l2508
  4985  012D3C                     u14320:
  4986                           
  4987                           ; BSR set to: 2
  4988                           ;dans.c: 610: Direction = 0;
  4989  012D3C  0E00               	movlw	0
  4990  012D3E  0101               	movlb	1	; () banked
  4991  012D40  6FFE               	movwf	(Navigate_Maze@Direction+1)& (0+255),b
  4992  012D42  0E00               	movlw	0
  4993  012D44                     L3:
  4994  012D44  6FFD               	movwf	Navigate_Maze@Direction& (0+255),b
  4995                           
  4996                           ;dans.c: 611: }
  4997  012D46  D00A               	goto	l2512
  4998  012D48                     l2508:
  4999                           
  5000                           ;dans.c: 612: else{
  5001                           ;dans.c: 613: printf("&&&&&\n");
  5002                           
  5003                           ; BSR set to: 1
  5004  012D48  0EF5               	movlw	low STR_34
  5005  012D4A  0100               	movlb	0	; () banked
  5006  012D4C  6F75               	movwf	printf@f& (0+255),b
  5007  012D4E  0EFF               	movlw	high STR_34
  5008  012D50  6F76               	movwf	(printf@f+1)& (0+255),b
  5009  012D52  EC77  F0AB         	call	_printf	;wreg free
  5010                           
  5011                           ;dans.c: 614: Console_Render();
  5012  012D56  EC9B  F0A7         	call	_Console_Render	;wreg free
  5013  012D5A                     l2510:
  5014  012D5A  D7FF               	goto	l2510
  5015  012D5C                     l2512:
  5016                           
  5017                           ;dans.c: 616: }
  5018                           ;dans.c: 618: maze[X_Pos][Y_Pos].Options -= 1;
  5019  012D5C  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  5020  012D60  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  5021  012D64  0E00               	movlw	0
  5022  012D66  0100               	movlb	0	; () banked
  5023  012D68  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5024  012D6A  0E32               	movlw	50
  5025  012D6C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5026  012D6E  EC33  F0C4         	call	___wmul	;wreg free
  5027  012D72  0E00               	movlw	low _maze
  5028  012D74  0102               	movlb	2	; () banked
  5029  012D76  6FFB               	movwf	??_Navigate_Maze& (0+255),b
  5030  012D78  0E02               	movlw	high _maze
  5031  012D7A  6FFC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  5032  012D7C  0100               	movlb	0	; () banked
  5033  012D7E  5160               	movf	?___wmul& (0+255),w,b
  5034  012D80  0102               	movlb	2	; () banked
  5035  012D82  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  5036  012D84  0100               	movlb	0	; () banked
  5037  012D86  5161               	movf	(?___wmul+1)& (0+255),w,b
  5038  012D88  0102               	movlb	2	; () banked
  5039  012D8A  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  5040  012D8C  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  5041  012D90  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  5042  012D94  0E00               	movlw	0
  5043  012D96  0100               	movlb	0	; () banked
  5044  012D98  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5045  012D9A  0E0A               	movlw	10
  5046  012D9C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5047  012D9E  EC33  F0C4         	call	___wmul	;wreg free
  5048  012DA2  0100               	movlb	0	; () banked
  5049  012DA4  5160               	movf	?___wmul& (0+255),w,b
  5050  012DA6  0102               	movlb	2	; () banked
  5051  012DA8  27FB               	addwf	??_Navigate_Maze& (0+255),f,b
  5052  012DAA  0100               	movlb	0	; () banked
  5053  012DAC  5161               	movf	(?___wmul+1)& (0+255),w,b
  5054  012DAE  0102               	movlb	2	; () banked
  5055  012DB0  23FC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  5056  012DB2  0E08               	movlw	8
  5057  012DB4  25FB               	addwf	??_Navigate_Maze& (0+255),w,b
  5058  012DB6  6ED9               	movwf	fsr2l,c
  5059  012DB8  0E00               	movlw	0
  5060  012DBA  21FC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  5061  012DBC  6EDA               	movwf	fsr2h,c
  5062  012DBE  06DE               	decf	postinc2,f,c
  5063  012DC0  0E00               	movlw	0
  5064  012DC2  5ADD               	subwfb	postdec2,f,c
  5065                           
  5066                           ; BSR set to: 2
  5067                           ;dans.c: 619: Travel(Direction, 970, 0, 200, 0);
  5068  012DC4  C1FD  F0F1         	movff	Navigate_Maze@Direction,Travel@direction
  5069  012DC8  C1FE  F0F2         	movff	Navigate_Maze@Direction+1,Travel@direction+1
  5070  012DCC  0E03               	movlw	3
  5071  012DCE  0100               	movlb	0	; () banked
  5072  012DD0  6FF4               	movwf	(Travel@Dist+1)& (0+255),b
  5073  012DD2  0ECA               	movlw	202
  5074  012DD4  6FF3               	movwf	Travel@Dist& (0+255),b
  5075  012DD6  0E00               	movlw	0
  5076  012DD8  6FF6               	movwf	(Travel@Test_ADC+1)& (0+255),b
  5077  012DDA  0E00               	movlw	0
  5078  012DDC  6FF5               	movwf	Travel@Test_ADC& (0+255),b
  5079  012DDE  0E00               	movlw	0
  5080  012DE0  6FF8               	movwf	(Travel@Spd+1)& (0+255),b
  5081  012DE2  0EC8               	movlw	200
  5082  012DE4  6FF7               	movwf	Travel@Spd& (0+255),b
  5083  012DE6  0E00               	movlw	0
  5084  012DE8  6FFA               	movwf	(Travel@Wall+1)& (0+255),b
  5085  012DEA  0E00               	movlw	0
  5086  012DEC  6FF9               	movwf	Travel@Wall& (0+255),b
  5087  012DEE  EC76  F091         	call	_Travel	;wreg free
  5088                           
  5089                           ;dans.c: 621: }
  5090  012DF2  0012               	return	
  5091  012DF4                     l2501:
  5092                           
  5093                           ;dans.c: 622: else {
  5094                           ;dans.c: 623: printf("no options\n");
  5095  012DF4  0E98               	movlw	low STR_35
  5096  012DF6  0100               	movlb	0	; () banked
  5097  012DF8  6F75               	movwf	printf@f& (0+255),b
  5098  012DFA  0EFF               	movlw	high STR_35
  5099  012DFC  6F76               	movwf	(printf@f+1)& (0+255),b
  5100  012DFE  EC77  F0AB         	call	_printf	;wreg free
  5101                           
  5102                           ;dans.c: 624: Console_Render();
  5103  012E02  EC9B  F0A7         	call	_Console_Render	;wreg free
  5104                           
  5105                           ;dans.c: 625: Go_Backward(pop(), 200);
  5106  012E06  EC73  F0C0         	call	_pop	;wreg free
  5107  012E0A  C083  F1F7         	movff	?_pop,Go_Backward@direction
  5108  012E0E  C084  F1F8         	movff	?_pop+1,Go_Backward@direction+1
  5109  012E12  0E00               	movlw	0
  5110  012E14  0101               	movlb	1	; () banked
  5111  012E16  6FFA               	movwf	(Go_Backward@spd+1)& (0+255),b
  5112  012E18  0EC8               	movlw	200
  5113  012E1A  6FF9               	movwf	Go_Backward@spd& (0+255),b
  5114  012E1C  EC59  F0B4         	call	_Go_Backward	;wreg free
  5115                           
  5116                           ;dans.c: 626: top -= 1;
  5117  012E20  0101               	movlb	1	; () banked
  5118  012E22  07E0               	decf	_top& (0+255),f,b
  5119  012E24  A0D8               	btfss	status,0,c
  5120  012E26  07E1               	decf	(_top+1)& (0+255),f,b
  5121  012E28  0012               	return	
  5122  012E2A                     __end_of_Navigate_Maze:
  5123                           	opt stack 0
  5124                           tosu	equ	0xFFF
  5125                           tosh	equ	0xFFE
  5126                           tosl	equ	0xFFD
  5127                           pclath	equ	0xFFA
  5128                           tblptru	equ	0xFF8
  5129                           tblptrh	equ	0xFF7
  5130                           tblptrl	equ	0xFF6
  5131                           tablat	equ	0xFF5
  5132                           postinc0	equ	0xFEE
  5133                           wreg	equ	0xFE8
  5134                           postdec1	equ	0xFE5
  5135                           fsr1h	equ	0xFE2
  5136                           fsr1l	equ	0xFE1
  5137                           indf2	equ	0xFDF
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           plusw2	equ	0xFDB
  5141                           fsr2h	equ	0xFDA
  5142                           fsr2l	equ	0xFD9
  5143                           status	equ	0xFD8
  5144                           
  5145 ;; *************** function _MXK_Init *****************
  5146 ;; Defined at:
  5147 ;;		line 33 in file "Library/MXK.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;		None
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;		None
  5152 ;; Return value:  Size  Location     Type
  5153 ;;                  1    wreg      void 
  5154 ;; Registers used:
  5155 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5165 ;;Total ram usage:        0 bytes
  5166 ;; Hardware stack levels used:    1
  5167 ;; Hardware stack levels required when called:   16
  5168 ;; This function calls:
  5169 ;;		_LED_Init
  5170 ;;		_Port_Init
  5171 ;;		_Port_SetPin
  5172 ;;		_Port_SetPinType
  5173 ;;		_Port_SetQuadType
  5174 ;;		_Port_SetType
  5175 ;;		_delay_ms
  5176 ;; This function is called by:
  5177 ;;		_main
  5178 ;; This function uses a non-reentrant model
  5179 ;;
  5180                           
  5181                           	psect	text4
  5182  016022                     __ptext4:
  5183                           	opt stack 0
  5184  016022                     _MXK_Init:
  5185                           	opt stack 14
  5186                           
  5187                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  5188                           
  5189                           ;incstack = 0
  5190  016022  0E01               	movlw	1
  5191  016024  6E4C               	movwf	_Bus_State,c
  5192                           
  5193                           ;MXK.c: 36: lQueue = (Function)0;
  5194  016026  0E00               	movlw	0
  5195  016028  6E29               	movwf	_lQueue,c	;volatile
  5196  01602A  0E00               	movlw	0
  5197  01602C  6E2A               	movwf	_lQueue+1,c	;volatile
  5198  01602E  0E00               	movlw	0
  5199  016030  6E2B               	movwf	_lQueue+2,c	;volatile
  5200                           
  5201                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  5202  016032  0EF1               	movlw	low _PortA
  5203  016034  0100               	movlb	0	; () banked
  5204  016036  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5205  016038  0E02               	movlw	high _PortA
  5206  01603A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5207  01603C  0E00               	movlw	0
  5208  01603E  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5209  016040  EC03  F0AA         	call	_Port_Init	;wreg free
  5210                           
  5211                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  5212  016044  0E80               	movlw	low _PortB
  5213  016046  0100               	movlb	0	; () banked
  5214  016048  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5215  01604A  0E01               	movlw	high _PortB
  5216  01604C  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5217  01604E  0E01               	movlw	1
  5218  016050  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5219  016052  EC03  F0AA         	call	_Port_Init	;wreg free
  5220                           
  5221                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  5222  016056  0E8A               	movlw	low _PortC
  5223  016058  0100               	movlb	0	; () banked
  5224  01605A  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5225  01605C  0E01               	movlw	high _PortC
  5226  01605E  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5227  016060  0E02               	movlw	2
  5228  016062  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5229  016064  EC03  F0AA         	call	_Port_Init	;wreg free
  5230                           
  5231                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  5232  016068  0E76               	movlw	low _PortD
  5233  01606A  0100               	movlb	0	; () banked
  5234  01606C  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5235  01606E  0E01               	movlw	high _PortD
  5236  016070  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5237  016072  0E03               	movlw	3
  5238  016074  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5239  016076  EC03  F0AA         	call	_Port_Init	;wreg free
  5240                           
  5241                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  5242  01607A  0E6C               	movlw	low _PortE
  5243  01607C  0100               	movlb	0	; () banked
  5244  01607E  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5245  016080  0E01               	movlw	high _PortE
  5246  016082  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5247  016084  0E04               	movlw	4
  5248  016086  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5249  016088  EC03  F0AA         	call	_Port_Init	;wreg free
  5250                           
  5251                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  5252  01608C  0E94               	movlw	low _PortF
  5253  01608E  0100               	movlb	0	; () banked
  5254  016090  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5255  016092  0E01               	movlw	high _PortF
  5256  016094  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5257  016096  0E05               	movlw	5
  5258  016098  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5259  01609A  EC03  F0AA         	call	_Port_Init	;wreg free
  5260                           
  5261                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  5262  01609E  0EE7               	movlw	low _PortG
  5263  0160A0  0100               	movlb	0	; () banked
  5264  0160A2  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5265  0160A4  0E02               	movlw	high _PortG
  5266  0160A6  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5267  0160A8  0E06               	movlw	6
  5268  0160AA  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5269  0160AC  EC03  F0AA         	call	_Port_Init	;wreg free
  5270                           
  5271                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  5272  0160B0  0E94               	movlw	low _PortF
  5273  0160B2  0100               	movlb	0	; () banked
  5274  0160B4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  5275  0160B6  0E01               	movlw	high _PortF
  5276  0160B8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5277  0160BA  0E05               	movlw	5
  5278  0160BC  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  5279  0160BE  0E00               	movlw	0
  5280  0160C0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5281  0160C2  EC76  F0A8         	call	_Port_SetPinType	;wreg free
  5282                           
  5283                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  5284  0160C6  0E80               	movlw	low _PortB
  5285  0160C8  0100               	movlb	0	; () banked
  5286  0160CA  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
  5287  0160CC  0E01               	movlw	high _PortB
  5288  0160CE  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  5289  0160D0  0E00               	movlw	0
  5290  0160D2  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
  5291  0160D4  0E00               	movlw	0
  5292  0160D6  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
  5293  0160D8  ECC0  F0A4         	call	_Port_SetQuadType	;wreg free
  5294                           
  5295                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  5296  0160DC  0E94               	movlw	low _PortF
  5297  0160DE  0100               	movlb	0	; () banked
  5298  0160E0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  5299  0160E2  0E01               	movlw	high _PortF
  5300  0160E4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5301  0160E6  0E06               	movlw	6
  5302  0160E8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  5303  0160EA  0E03               	movlw	3
  5304  0160EC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5305  0160EE  EC76  F0A8         	call	_Port_SetPinType	;wreg free
  5306                           
  5307                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  5308  0160F2  0EE7               	movlw	low _PortG
  5309  0160F4  0100               	movlb	0	; () banked
  5310  0160F6  6F9A               	movwf	Port_SetType@pInput& (0+255),b
  5311  0160F8  0E02               	movlw	high _PortG
  5312  0160FA  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
  5313  0160FC  0E03               	movlw	3
  5314  0160FE  6F9C               	movwf	Port_SetType@pType& (0+255),b
  5315  016100  ECB4  F0A6         	call	_Port_SetType	;wreg free
  5316                           
  5317                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  5318  016104  0EE7               	movlw	low _PortG
  5319  016106  0100               	movlb	0	; () banked
  5320  016108  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  5321  01610A  0E02               	movlw	high _PortG
  5322  01610C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5323  01610E  0E04               	movlw	4
  5324  016110  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  5325  016112  0E00               	movlw	0
  5326  016114  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  5327  016116  EC96  F0B5         	call	_Port_SetPin	;wreg free
  5328                           
  5329                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  5330  01611A  0E94               	movlw	low _PortF
  5331  01611C  0100               	movlb	0	; () banked
  5332  01611E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  5333  016120  0E01               	movlw	high _PortF
  5334  016122  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5335  016124  0E06               	movlw	6
  5336  016126  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  5337  016128  0E01               	movlw	1
  5338  01612A  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  5339  01612C  EC96  F0B5         	call	_Port_SetPin	;wreg free
  5340                           
  5341                           ;MXK.c: 55: LED_Init(eLED1);
  5342  016130  0E00               	movlw	0
  5343  016132  ECDB  F0BE         	call	_LED_Init
  5344                           
  5345                           ;MXK.c: 56: LED_Init(eLED2);
  5346  016136  0E01               	movlw	1
  5347  016138  ECDB  F0BE         	call	_LED_Init
  5348                           
  5349                           ;MXK.c: 58: PIR1 = 0;
  5350  01613C  0E00               	movlw	0
  5351  01613E  6E9E               	movwf	3998,c	;volatile
  5352                           
  5353                           ;MXK.c: 59: PIR2 = 0;
  5354  016140  0E00               	movlw	0
  5355  016142  6EA1               	movwf	4001,c	;volatile
  5356                           
  5357                           ;MXK.c: 60: PIR3 = 0;
  5358  016144  0E00               	movlw	0
  5359  016146  6EA4               	movwf	4004,c	;volatile
  5360                           
  5361                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  5362  016148  8E9B               	bsf	3995,7,c	;volatile
  5363                           
  5364                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  5365  01614A  8C9B               	bsf	3995,6,c	;volatile
  5366                           
  5367                           ;MXK.c: 66: delay_ms(100);
  5368  01614C  0E00               	movlw	0
  5369  01614E  0100               	movlb	0	; () banked
  5370  016150  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  5371  016152  0E64               	movlw	100
  5372  016154  6F60               	movwf	delay_ms@ms& (0+255),b
  5373  016156  ECAD  F0BE         	call	_delay_ms	;wreg free
  5374                           
  5375                           ;MXK.c: 68: RCONbits.IPEN = 1;
  5376  01615A  8ED0               	bsf	4048,7,c	;volatile
  5377  01615C  0012               	return		;funcret
  5378  01615E                     __end_of_MXK_Init:
  5379                           	opt stack 0
  5380                           tosu	equ	0xFFF
  5381                           tosh	equ	0xFFE
  5382                           tosl	equ	0xFFD
  5383                           pclath	equ	0xFFA
  5384                           tblptru	equ	0xFF8
  5385                           tblptrh	equ	0xFF7
  5386                           tblptrl	equ	0xFF6
  5387                           tablat	equ	0xFF5
  5388                           postinc0	equ	0xFEE
  5389                           wreg	equ	0xFE8
  5390                           postdec1	equ	0xFE5
  5391                           fsr1h	equ	0xFE2
  5392                           fsr1l	equ	0xFE1
  5393                           indf2	equ	0xFDF
  5394                           postinc2	equ	0xFDE
  5395                           postdec2	equ	0xFDD
  5396                           plusw2	equ	0xFDB
  5397                           fsr2h	equ	0xFDA
  5398                           fsr2l	equ	0xFD9
  5399                           status	equ	0xFD8
  5400                           
  5401 ;; *************** function _Port_Init *****************
  5402 ;; Defined at:
  5403 ;;		line 150 in file "Library/Port.c"
  5404 ;; Parameters:    Size  Location     Type
  5405 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  5406 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5407 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5408 ;;  pPort           1   66[BANK0 ] enum E6786
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  i               1   69[BANK0 ] unsigned char 
  5411 ;; Return value:  Size  Location     Type
  5412 ;;                  1    wreg      void 
  5413 ;; Registers used:
  5414 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5415 ;; Tracked objects:
  5416 ;;		On entry : 0/0
  5417 ;;		On exit  : 0/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5420 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5423 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5424 ;;Total ram usage:        6 bytes
  5425 ;; Hardware stack levels used:    1
  5426 ;; Hardware stack levels required when called:   15
  5427 ;; This function calls:
  5428 ;;		_GetPortPORT
  5429 ;;		_GetPortProperties
  5430 ;;		_GetPortTRIS
  5431 ;;		_Port_Set
  5432 ;;		_Port_SetPinType
  5433 ;;		_Port_SetType
  5434 ;;		_Word_GetPair
  5435 ;; This function is called by:
  5436 ;;		_MXK_Init
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text5
  5441  015406                     __ptext5:
  5442                           	opt stack 0
  5443  015406                     _Port_Init:
  5444                           	opt stack 14
  5445                           
  5446                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  5447                           
  5448                           ;incstack = 0
  5449  015406  0100               	movlb	0	; () banked
  5450  015408  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5451  01540A  EC94  F0B9         	call	_GetPortProperties
  5452  01540E  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  5453  015412  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5454  015416  0100               	movlb	0	; () banked
  5455  015418  C060  FFDE         	movff	?_GetPortProperties,postinc2
  5456  01541C  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
  5457                           
  5458                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  5459  015420  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5460  015422  ECD8  F0B9         	call	_GetPortPORT
  5461  015426  0100               	movlb	0	; () banked
  5462  015428  EE20 F006          	lfsr	2,6
  5463  01542C  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5464  01542E  26D9               	addwf	fsr2l,f,c
  5465  015430  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5466  015432  22DA               	addwfc	fsr2h,f,c
  5467  015434  C060  FFDE         	movff	?_GetPortPORT,postinc2
  5468  015438  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  5469                           
  5470                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  5471  01543C  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5472  01543E  ECD8  F0B9         	call	_GetPortPORT
  5473  015442  0100               	movlb	0	; () banked
  5474  015444  EE20 F004          	lfsr	2,4
  5475  015448  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5476  01544A  26D9               	addwf	fsr2l,f,c
  5477  01544C  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5478  01544E  22DA               	addwfc	fsr2h,f,c
  5479  015450  C060  FFDE         	movff	?_GetPortPORT,postinc2
  5480  015454  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  5481                           
  5482                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  5483  015458  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5484  01545A  EC50  F0B9         	call	_GetPortTRIS
  5485  01545E  0100               	movlb	0	; () banked
  5486  015460  EE20 F002          	lfsr	2,2
  5487  015464  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5488  015466  26D9               	addwf	fsr2l,f,c
  5489  015468  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5490  01546A  22DA               	addwfc	fsr2h,f,c
  5491  01546C  C060  FFDE         	movff	?_GetPortTRIS,postinc2
  5492  015470  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  5496  015474  EE20 F004          	lfsr	2,4
  5497  015478  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5498  01547A  26D9               	addwf	fsr2l,f,c
  5499  01547C  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5500  01547E  22DA               	addwfc	fsr2h,f,c
  5501  015480  CFDE F0A3          	movff	postinc2,??_Port_Init
  5502  015484  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  5503  015488  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  5504  01548C  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  5505  015490  0E00               	movlw	0
  5506  015492  6EDF               	movwf	indf2,c
  5507                           
  5508                           ; BSR set to: 0
  5509                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  5510  015494  EE20 F002          	lfsr	2,2
  5511  015498  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5512  01549A  26D9               	addwf	fsr2l,f,c
  5513  01549C  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5514  01549E  22DA               	addwfc	fsr2h,f,c
  5515  0154A0  CFDE F0A3          	movff	postinc2,??_Port_Init
  5516  0154A4  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  5517  0154A8  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  5518  0154AC  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  5519  0154B0  0EFF               	movlw	255
  5520  0154B2  6EDF               	movwf	indf2,c
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  5524  0154B4  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
  5525  0154B8  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  5526  0154BC  0E00               	movlw	0
  5527  0154BE  6F9C               	movwf	Port_SetType@pType& (0+255),b
  5528  0154C0  ECB4  F0A6         	call	_Port_SetType	;wreg free
  5529                           
  5530                           ;Port.c: 166: UINT8 i;
  5531                           ;Port.c: 167: for (i=0; i<8; i++)
  5532  0154C4  0E00               	movlw	0
  5533  0154C6  0100               	movlb	0	; () banked
  5534  0154C8  6FA5               	movwf	Port_Init@i& (0+255),b
  5535  0154CA                     l16295:
  5536                           
  5537                           ; BSR set to: 0
  5538  0154CA  0E07               	movlw	7
  5539  0154CC  65A5               	cpfsgt	Port_Init@i& (0+255),b
  5540  0154CE  D031               	goto	l403
  5541  0154D0  D04B               	goto	u13660
  5542  0154D2                     
  5543                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  5544                           
  5545                           ; BSR set to: 0
  5546  0154D2  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5547  0154D6  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5548  0154DA  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5549  0154DE  0E03               	movlw	3
  5550  0154E0  0100               	movlb	0	; () banked
  5551  0154E2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5552  0154E4  EC76  F0A8         	call	_Port_SetPinType	;wreg free
  5553                           
  5554                           ;Port.c: 173: break;
  5555  0154E8  D03C               	goto	l405
  5556  0154EA                     
  5557                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  5558  0154EA  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5559  0154EE  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5560  0154F2  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5561  0154F6  0E02               	movlw	2
  5562  0154F8  0100               	movlb	0	; () banked
  5563  0154FA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5564  0154FC  EC76  F0A8         	call	_Port_SetPinType	;wreg free
  5565                           
  5566                           ;Port.c: 176: break;
  5567  015500  D030               	goto	l405
  5568  015502                     
  5569                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  5570  015502  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5571  015506  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5572  01550A  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5573  01550E  0E01               	movlw	1
  5574  015510  0100               	movlb	0	; () banked
  5575  015512  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5576  015514  EC76  F0A8         	call	_Port_SetPinType	;wreg free
  5577                           
  5578                           ;Port.c: 179: break;
  5579  015518  D024               	goto	l405
  5580  01551A                     
  5581                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  5582  01551A  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5583  01551E  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5584  015522  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5585  015526  0E00               	movlw	0
  5586  015528  0100               	movlb	0	; () banked
  5587  01552A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5588  01552C  EC76  F0A8         	call	_Port_SetPinType	;wreg free
  5589                           
  5590                           ;Port.c: 183: }
  5591                           
  5592                           ;Port.c: 182: break;
  5593  015530  D018               	goto	l405
  5594  015532                     l403:
  5595  015532  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  5596  015536  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5597  01553A  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
  5598  01553E  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
  5599  015542  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
  5600  015546  EC61  F0C3         	call	_Word_GetPair	;wreg free
  5601                           
  5602                           ; Switch size 1, requested type "space"
  5603                           ; Number of cases is 4, Range of values is 0 to 3
  5604                           ; switch strategies available:
  5605                           ; Name         Instructions Cycles
  5606                           ; simple_byte           13     7 (average)
  5607                           ;	Chosen strategy is simple_byte
  5608  01554A  0A00               	xorlw	0	; case 0
  5609  01554C  B4D8               	btfsc	status,2,c
  5610  01554E  D7C1               	goto	l404
  5611  015550  0A01               	xorlw	1	; case 1
  5612  015552  B4D8               	btfsc	status,2,c
  5613  015554  D7D6               	goto	l407
  5614  015556  0A03               	xorlw	3	; case 2
  5615  015558  B4D8               	btfsc	status,2,c
  5616  01555A  D7C7               	goto	l406
  5617  01555C  0A01               	xorlw	1	; case 3
  5618  01555E  B4D8               	btfsc	status,2,c
  5619  015560  D7DC               	goto	l408
  5620  015562                     l405:
  5621  015562  0100               	movlb	0	; () banked
  5622  015564  2BA5               	incf	Port_Init@i& (0+255),f,b
  5623  015566  D7B1               	goto	l16295
  5624  015568                     u13660:
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;Port.c: 184: }
  5628                           ;Port.c: 185: Port_Set(pInput, 0x00);
  5629                           
  5630                           ; BSR set to: 0
  5631  015568  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
  5632  01556C  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  5633  015570  0E00               	movlw	0
  5634  015572  6F71               	movwf	Port_Set@pValue& (0+255),b
  5635  015574  ECEF  F0A0         	call	_Port_Set	;wreg free
  5636  015578  0012               	return		;funcret
  5637  01557A                     __end_of_Port_Init:
  5638                           	opt stack 0
  5639                           tosu	equ	0xFFF
  5640                           tosh	equ	0xFFE
  5641                           tosl	equ	0xFFD
  5642                           pclath	equ	0xFFA
  5643                           tblptru	equ	0xFF8
  5644                           tblptrh	equ	0xFF7
  5645                           tblptrl	equ	0xFF6
  5646                           tablat	equ	0xFF5
  5647                           postinc0	equ	0xFEE
  5648                           wreg	equ	0xFE8
  5649                           postdec1	equ	0xFE5
  5650                           fsr1h	equ	0xFE2
  5651                           fsr1l	equ	0xFE1
  5652                           indf2	equ	0xFDF
  5653                           postinc2	equ	0xFDE
  5654                           postdec2	equ	0xFDD
  5655                           plusw2	equ	0xFDB
  5656                           fsr2h	equ	0xFDA
  5657                           fsr2l	equ	0xFD9
  5658                           status	equ	0xFD8
  5659                           
  5660 ;; *************** function _Port_SetType *****************
  5661 ;; Defined at:
  5662 ;;		line 513 in file "Library/Port.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  5665 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5666 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5667 ;;  pType           1   60[BANK0 ] enum E6795
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;  Output          1   63[BANK0 ] enum E6475
  5670 ;; Return value:  Size  Location     Type
  5671 ;;                  1    wreg      enum E6475
  5672 ;; Registers used:
  5673 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5674 ;; Tracked objects:
  5675 ;;		On entry : 0/0
  5676 ;;		On exit  : 0/0
  5677 ;;		Unchanged: 0/0
  5678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5679 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5680 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5681 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5682 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5683 ;;Total ram usage:        6 bytes
  5684 ;; Hardware stack levels used:    1
  5685 ;; Hardware stack levels required when called:   14
  5686 ;; This function calls:
  5687 ;;		_Port_CheckPortType
  5688 ;;		_Word_SetPair
  5689 ;; This function is called by:
  5690 ;;		_Port_Init
  5691 ;;		_MXK_Init
  5692 ;; This function uses a non-reentrant model
  5693 ;;
  5694                           
  5695                           	psect	text6
  5696  014D68                     __ptext6:
  5697                           	opt stack 0
  5698  014D68                     _Port_SetType:
  5699                           	opt stack 15
  5700                           
  5701                           ;Port.c: 515: ePinError Output = ePinErrorState;
  5702                           
  5703                           ;incstack = 0
  5704  014D68  0E05               	movlw	5
  5705  014D6A  0100               	movlb	0	; () banked
  5706  014D6C  6F9F               	movwf	Port_SetType@Output& (0+255),b
  5707                           
  5708                           ;Port.c: 517: switch (pType)
  5709  014D6E  D06E               	goto	l509
  5710  014D70                     
  5711                           ; BSR set to: 0
  5712                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  5713                           
  5714                           ; BSR set to: 0
  5715  014D70  EE20 F002          	lfsr	2,2
  5716  014D74  519A               	movf	Port_SetType@pInput& (0+255),w,b
  5717  014D76  26D9               	addwf	fsr2l,f,c
  5718  014D78  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5719  014D7A  22DA               	addwfc	fsr2h,f,c
  5720  014D7C  CFDE F09D          	movff	postinc2,??_Port_SetType
  5721  014D80  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  5722  014D84  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  5723  014D88  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  5724  014D8C  0EFF               	movlw	255
  5725  014D8E  D05C               	goto	L6
  5726  014D90                     
  5727                           ; BSR set to: 0
  5728                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  5729                           
  5730                           ; BSR set to: 0
  5731  014D90  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  5732  014D94  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  5733  014D98  0E01               	movlw	1
  5734  014D9A  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  5735  014D9C  EC01  F0C2         	call	_Port_CheckPortType	;wreg free
  5736  014DA0  0100               	movlb	0	; () banked
  5737  014DA2  6F9F               	movwf	Port_SetType@Output& (0+255),b
  5738  014DA4  519F               	movf	Port_SetType@Output& (0+255),w,b
  5739  014DA6  A4D8               	btfss	status,2,c
  5740  014DA8  0012               	return	
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;Port.c: 527: {
  5744                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  5745  014DAA  EE20 F002          	lfsr	2,2
  5746  014DAE  519A               	movf	Port_SetType@pInput& (0+255),w,b
  5747  014DB0  26D9               	addwf	fsr2l,f,c
  5748  014DB2  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5749  014DB4  22DA               	addwfc	fsr2h,f,c
  5750  014DB6  CFDE F09D          	movff	postinc2,??_Port_SetType
  5751  014DBA  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  5752  014DBE  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  5753  014DC2  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  5754  014DC6  0E00               	movlw	0
  5755  014DC8  6EDF               	movwf	indf2,c
  5756                           
  5757                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  5758  014DCA  EE20 F004          	lfsr	2,4
  5759  014DCE  D02F               	goto	L25
  5760  014DD0                     
  5761                           ; BSR set to: 0
  5762                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  5763                           
  5764                           ; BSR set to: 0
  5765  014DD0  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  5766  014DD4  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  5767  014DD8  0E02               	movlw	2
  5768  014DDA  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  5769  014DDC  EC01  F0C2         	call	_Port_CheckPortType	;wreg free
  5770  014DE0  0100               	movlb	0	; () banked
  5771  014DE2  6F9F               	movwf	Port_SetType@Output& (0+255),b
  5772  014DE4  519F               	movf	Port_SetType@Output& (0+255),w,b
  5773  014DE6  A4D8               	btfss	status,2,c
  5774  014DE8  0012               	return	
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;Port.c: 538: {
  5778                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  5779  014DEA  EE20 F002          	lfsr	2,2
  5780  014DEE  519A               	movf	Port_SetType@pInput& (0+255),w,b
  5781  014DF0  26D9               	addwf	fsr2l,f,c
  5782  014DF2  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5783  014DF4  22DA               	addwfc	fsr2h,f,c
  5784  014DF6  CFDE F09D          	movff	postinc2,??_Port_SetType
  5785  014DFA  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  5786  014DFE  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  5787  014E02  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  5788  014E06  0EFF               	movlw	255
  5789  014E08  6EDF               	movwf	indf2,c
  5790                           
  5791                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  5792  014E0A  EE20 F004          	lfsr	2,4
  5793  014E0E  D7B2               	goto	L7
  5794  014E10                     
  5795                           ; BSR set to: 0
  5796                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  5797                           
  5798                           ; BSR set to: 0
  5799  014E10  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  5800  014E14  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  5801  014E18  0E00               	movlw	0
  5802  014E1A  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  5803  014E1C  EC01  F0C2         	call	_Port_CheckPortType	;wreg free
  5804  014E20  0100               	movlb	0	; () banked
  5805  014E22  6F9F               	movwf	Port_SetType@Output& (0+255),b
  5806  014E24  519F               	movf	Port_SetType@Output& (0+255),w,b
  5807  014E26  A4D8               	btfss	status,2,c
  5808  014E28  0012               	return	
  5809                           
  5810                           ; BSR set to: 0
  5811                           ;Port.c: 549: {
  5812                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  5813  014E2A  EE20 F002          	lfsr	2,2
  5814  014E2E                     L25:
  5815  014E2E  519A               	movf	Port_SetType@pInput& (0+255),w,b
  5816  014E30  26D9               	addwf	fsr2l,f,c
  5817  014E32  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5818  014E34  22DA               	addwfc	fsr2h,f,c
  5819  014E36  CFDE F09D          	movff	postinc2,??_Port_SetType
  5820  014E3A  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  5821  014E3E  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  5822  014E42  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  5823  014E46  0E00               	movlw	0
  5824  014E48                     L6:
  5825  014E48  6EDF               	movwf	indf2,c
  5826                           
  5827                           ;Port.c: 552: }
  5828  014E4A  D00D               	goto	l511
  5829  014E4C                     l509:
  5830                           
  5831                           ; BSR set to: 0
  5832                           
  5833                           ; BSR set to: 0
  5834  014E4C  519C               	movf	Port_SetType@pType& (0+255),w,b
  5835                           
  5836                           ; Switch size 1, requested type "space"
  5837                           ; Number of cases is 4, Range of values is 0 to 3
  5838                           ; switch strategies available:
  5839                           ; Name         Instructions Cycles
  5840                           ; simple_byte           13     7 (average)
  5841                           ;	Chosen strategy is simple_byte
  5842  014E4E  0A00               	xorlw	0	; case 0
  5843  014E50  B4D8               	btfsc	status,2,c
  5844  014E52  D78E               	goto	l510
  5845  014E54  0A01               	xorlw	1	; case 1
  5846  014E56  B4D8               	btfsc	status,2,c
  5847  014E58  D79B               	goto	l512
  5848  014E5A  0A03               	xorlw	3	; case 2
  5849  014E5C  B4D8               	btfsc	status,2,c
  5850  014E5E  D7B8               	goto	l516
  5851  014E60  0A01               	xorlw	1	; case 3
  5852  014E62  B4D8               	btfsc	status,2,c
  5853  014E64  D7D5               	goto	l519
  5854  014E66                     l511:
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  5858                           
  5859                           ; BSR set to: 0
  5860  014E66  0E08               	movlw	8
  5861  014E68  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5862  014E6A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5863  014E6C  0E00               	movlw	0
  5864  014E6E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5865  014E70  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5866  014E72  0E00               	movlw	0
  5867  014E74  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5868  014E76  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5869  014E7A  ECD8  F0C2         	call	_Word_SetPair	;wreg free
  5870                           
  5871                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  5872  014E7E  0E08               	movlw	8
  5873  014E80  0100               	movlb	0	; () banked
  5874  014E82  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5875  014E84  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5876  014E86  0E00               	movlw	0
  5877  014E88  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5878  014E8A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5879  014E8C  0E01               	movlw	1
  5880  014E8E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5881  014E90  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5882  014E94  ECD8  F0C2         	call	_Word_SetPair	;wreg free
  5883                           
  5884                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  5885  014E98  0E08               	movlw	8
  5886  014E9A  0100               	movlb	0	; () banked
  5887  014E9C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5888  014E9E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5889  014EA0  0E00               	movlw	0
  5890  014EA2  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5891  014EA4  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5892  014EA6  0E02               	movlw	2
  5893  014EA8  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5894  014EAA  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5895  014EAE  ECD8  F0C2         	call	_Word_SetPair	;wreg free
  5896                           
  5897                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  5898  014EB2  0E08               	movlw	8
  5899  014EB4  0100               	movlb	0	; () banked
  5900  014EB6  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5901  014EB8  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5902  014EBA  0E00               	movlw	0
  5903  014EBC  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5904  014EBE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5905  014EC0  0E03               	movlw	3
  5906  014EC2  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5907  014EC4  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5908  014EC8  ECD8  F0C2         	call	_Word_SetPair	;wreg free
  5909                           
  5910                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  5911  014ECC  0E08               	movlw	8
  5912  014ECE  0100               	movlb	0	; () banked
  5913  014ED0  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5914  014ED2  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5915  014ED4  0E00               	movlw	0
  5916  014ED6  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5917  014ED8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5918  014EDA  0E04               	movlw	4
  5919  014EDC  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5920  014EDE  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5921  014EE2  ECD8  F0C2         	call	_Word_SetPair	;wreg free
  5922                           
  5923                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  5924  014EE6  0E08               	movlw	8
  5925  014EE8  0100               	movlb	0	; () banked
  5926  014EEA  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5927  014EEC  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5928  014EEE  0E00               	movlw	0
  5929  014EF0  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5930  014EF2  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5931  014EF4  0E05               	movlw	5
  5932  014EF6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5933  014EF8  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5934  014EFC  ECD8  F0C2         	call	_Word_SetPair	;wreg free
  5935                           
  5936                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  5937  014F00  0E08               	movlw	8
  5938  014F02  0100               	movlb	0	; () banked
  5939  014F04  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5940  014F06  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5941  014F08  0E00               	movlw	0
  5942  014F0A  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5943  014F0C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5944  014F0E  0E06               	movlw	6
  5945  014F10  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5946  014F12  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5947  014F16  ECD8  F0C2         	call	_Word_SetPair	;wreg free
  5948                           
  5949                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  5950  014F1A  0E08               	movlw	8
  5951  014F1C  0100               	movlb	0	; () banked
  5952  014F1E  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5953  014F20  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5954  014F22  0E00               	movlw	0
  5955  014F24  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5956  014F26  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5957  014F28  0E07               	movlw	7
  5958  014F2A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5959  014F2C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5960  014F30  ECD8  F0C2         	call	_Word_SetPair	;wreg free
  5961  014F34  0012               	return	
  5962  014F36                     __end_of_Port_SetType:
  5963                           	opt stack 0
  5964                           tosu	equ	0xFFF
  5965                           tosh	equ	0xFFE
  5966                           tosl	equ	0xFFD
  5967                           pclath	equ	0xFFA
  5968                           tblptru	equ	0xFF8
  5969                           tblptrh	equ	0xFF7
  5970                           tblptrl	equ	0xFF6
  5971                           tablat	equ	0xFF5
  5972                           postinc0	equ	0xFEE
  5973                           wreg	equ	0xFE8
  5974                           postdec1	equ	0xFE5
  5975                           fsr1h	equ	0xFE2
  5976                           fsr1l	equ	0xFE1
  5977                           indf2	equ	0xFDF
  5978                           postinc2	equ	0xFDE
  5979                           postdec2	equ	0xFDD
  5980                           plusw2	equ	0xFDB
  5981                           fsr2h	equ	0xFDA
  5982                           fsr2l	equ	0xFD9
  5983                           status	equ	0xFD8
  5984                           
  5985 ;; *************** function _Port_CheckPortType *****************
  5986 ;; Defined at:
  5987 ;;		line 138 in file "Library/Port.c"
  5988 ;; Parameters:    Size  Location     Type
  5989 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  5990 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5991 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5992 ;;  pDrive          1   56[BANK0 ] enum E6469
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;  Output          1   57[BANK0 ] enum E6475
  5995 ;; Return value:  Size  Location     Type
  5996 ;;                  1    wreg      enum E6475
  5997 ;; Registers used:
  5998 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5999 ;; Tracked objects:
  6000 ;;		On entry : 0/0
  6001 ;;		On exit  : 0/0
  6002 ;;		Unchanged: 0/0
  6003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6004 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;Total ram usage:        4 bytes
  6009 ;; Hardware stack levels used:    1
  6010 ;; Hardware stack levels required when called:   13
  6011 ;; This function calls:
  6012 ;;		_Port_CheckQuadType
  6013 ;; This function is called by:
  6014 ;;		_Port_SetType
  6015 ;; This function uses a non-reentrant model
  6016 ;;
  6017                           
  6018                           	psect	text7
  6019  018402                     __ptext7:
  6020                           	opt stack 0
  6021  018402                     _Port_CheckPortType:
  6022                           	opt stack 15
  6023                           
  6024                           ;Port.c: 140: ePinError Output = ePinErrorState;
  6025                           
  6026                           ;incstack = 0
  6027  018402  0E05               	movlw	5
  6028  018404  0100               	movlb	0	; () banked
  6029  018406  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  6033  018408  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6034  01840C  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6035  018410  0E00               	movlw	0
  6036  018412  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6037  018414  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6038  018418  ECFE  F0BF         	call	_Port_CheckQuadType	;wreg free
  6039  01841C  0100               	movlb	0	; () banked
  6040  01841E  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6041  018420  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  6042  018422  A4D8               	btfss	status,2,c
  6043  018424  D00C               	goto	l397
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  6047  018426  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6048  01842A  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6049  01842E  0E01               	movlw	1
  6050  018430  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6051  018432  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6052  018436  ECFE  F0BF         	call	_Port_CheckQuadType	;wreg free
  6053  01843A  0100               	movlb	0	; () banked
  6054  01843C  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6055  01843E                     l397:
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;Port.c: 146: return Output;
  6059                           
  6060                           ; BSR set to: 0
  6061  01843E  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  6062  018440  0012               	return	
  6063  018442                     __end_of_Port_CheckPortType:
  6064                           	opt stack 0
  6065                           tosu	equ	0xFFF
  6066                           tosh	equ	0xFFE
  6067                           tosl	equ	0xFFD
  6068                           pclath	equ	0xFFA
  6069                           tblptru	equ	0xFF8
  6070                           tblptrh	equ	0xFF7
  6071                           tblptrl	equ	0xFF6
  6072                           tablat	equ	0xFF5
  6073                           postinc0	equ	0xFEE
  6074                           wreg	equ	0xFE8
  6075                           postdec1	equ	0xFE5
  6076                           fsr1h	equ	0xFE2
  6077                           fsr1l	equ	0xFE1
  6078                           indf2	equ	0xFDF
  6079                           postinc2	equ	0xFDE
  6080                           postdec2	equ	0xFDD
  6081                           plusw2	equ	0xFDB
  6082                           fsr2h	equ	0xFDA
  6083                           fsr2l	equ	0xFD9
  6084                           status	equ	0xFD8
  6085                           
  6086 ;; *************** function _Port_Set *****************
  6087 ;; Defined at:
  6088 ;;		line 570 in file "Library/Port.c"
  6089 ;; Parameters:    Size  Location     Type
  6090 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  6091 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6092 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6093 ;;  pValue          1   17[BANK0 ] unsigned char 
  6094 ;; Auto vars:     Size  Location     Type
  6095 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  6096 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  6097 ;;  Type            1   38[BANK0 ] enum E6795
  6098 ;; Return value:  Size  Location     Type
  6099 ;;                  1    wreg      void 
  6100 ;; Registers used:
  6101 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6107 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;Total ram usage:       24 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; Hardware stack levels required when called:   10
  6114 ;; This function calls:
  6115 ;;		_Byte_SetByte
  6116 ;;		_Word_GetPair
  6117 ;; This function is called by:
  6118 ;;		_Port_Init
  6119 ;;		_Port_Toggle
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           	psect	text8
  6124  0141DE                     __ptext8:
  6125                           	opt stack 0
  6126  0141DE                     _Port_Set:
  6127                           	opt stack 18
  6128                           
  6129                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;incstack = 0
  6133  0141DE  0E08               	movlw	8
  6134  0141E0  0100               	movlb	0	; () banked
  6135  0141E2  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6136  0141E4  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6137  0141E6  0E00               	movlw	0
  6138  0141E8  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6139  0141EA  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6140  0141EC  0E00               	movlw	0
  6141  0141EE  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6142  0141F0  EC61  F0C3         	call	_Word_GetPair	;wreg free
  6143  0141F4  0100               	movlb	0	; () banked
  6144  0141F6  6F86               	movwf	Port_Set@Type& (0+255),b
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  6148  0141F8  5186               	movf	Port_Set@Type& (0+255),w,b
  6149  0141FA  6F72               	movwf	??_Port_Set& (0+255),b
  6150  0141FC  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6151  0141FE  0E0E               	movlw	14
  6152  014200                     u13045:
  6153  014200  90D8               	bcf	status,0,c
  6154  014202  3772               	rlcf	??_Port_Set& (0+255),f,b
  6155  014204  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6156  014206  2EE8               	decfsz	wreg,f,c
  6157  014208  D7FB               	goto	u13045
  6158  01420A  5186               	movf	Port_Set@Type& (0+255),w,b
  6159  01420C  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  6160  01420E  6B75               	clrf	(??_Port_Set+3)& (0+255),b
  6161  014210  0E0C               	movlw	12
  6162  014212                     u13055:
  6163  014212  90D8               	bcf	status,0,c
  6164  014214  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
  6165  014216  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
  6166  014218  2EE8               	decfsz	wreg,f,c
  6167  01421A  D7FB               	goto	u13055
  6168  01421C  5186               	movf	Port_Set@Type& (0+255),w,b
  6169  01421E  6F76               	movwf	(??_Port_Set+4)& (0+255),b
  6170  014220  6B77               	clrf	(??_Port_Set+5)& (0+255),b
  6171  014222  0E0A               	movlw	10
  6172  014224                     u13065:
  6173  014224  90D8               	bcf	status,0,c
  6174  014226  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
  6175  014228  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
  6176  01422A  2EE8               	decfsz	wreg,f,c
  6177  01422C  D7FB               	goto	u13065
  6178  01422E  5186               	movf	Port_Set@Type& (0+255),w,b
  6179  014230  6F79               	movwf	(??_Port_Set+7)& (0+255),b
  6180  014232  6B78               	clrf	(??_Port_Set+6)& (0+255),b
  6181  014234  5186               	movf	Port_Set@Type& (0+255),w,b
  6182  014236  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
  6183  014238  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
  6184  01423A  0E06               	movlw	6
  6185  01423C                     u13075:
  6186  01423C  90D8               	bcf	status,0,c
  6187  01423E  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
  6188  014240  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
  6189  014242  2EE8               	decfsz	wreg,f,c
  6190  014244  D7FB               	goto	u13075
  6191  014246  5186               	movf	Port_Set@Type& (0+255),w,b
  6192  014248  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
  6193  01424A  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
  6194  01424C  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
  6195  01424E  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
  6196  014250  0EF0               	movlw	240
  6197  014252  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
  6198  014254  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  6199  014256  0B0F               	andlw	15
  6200  014258  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
  6201  01425A  0EF0               	movlw	240
  6202  01425C  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
  6203  01425E  5186               	movf	Port_Set@Type& (0+255),w,b
  6204  014260  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
  6205  014262  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
  6206  014264  90D8               	bcf	status,0,c
  6207  014266  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6208  014268  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6209  01426A  90D8               	bcf	status,0,c
  6210  01426C  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6211  01426E  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6212  014270  5186               	movf	Port_Set@Type& (0+255),w,b
  6213  014272  6F80               	movwf	(??_Port_Set+14)& (0+255),b
  6214  014274  6B81               	clrf	(??_Port_Set+15)& (0+255),b
  6215  014276  517E               	movf	(??_Port_Set+12)& (0+255),w,b
  6216  014278  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6217  01427A  517F               	movf	(??_Port_Set+13)& (0+255),w,b
  6218  01427C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6219  01427E  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  6220  014280  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6221  014282  517D               	movf	(??_Port_Set+11)& (0+255),w,b
  6222  014284  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6223  014286  517A               	movf	(??_Port_Set+8)& (0+255),w,b
  6224  014288  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6225  01428A  517B               	movf	(??_Port_Set+9)& (0+255),w,b
  6226  01428C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6227  01428E  5178               	movf	(??_Port_Set+6)& (0+255),w,b
  6228  014290  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6229  014292  5179               	movf	(??_Port_Set+7)& (0+255),w,b
  6230  014294  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6231  014296  5176               	movf	(??_Port_Set+4)& (0+255),w,b
  6232  014298  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6233  01429A  5177               	movf	(??_Port_Set+5)& (0+255),w,b
  6234  01429C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6235  01429E  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  6236  0142A0  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6237  0142A2  5175               	movf	(??_Port_Set+3)& (0+255),w,b
  6238  0142A4  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6239  0142A6  5172               	movf	??_Port_Set& (0+255),w,b
  6240  0142A8  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
  6241  0142AA  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
  6242  0142AC  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6243  0142AE  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
  6244  0142B0  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;Port.c: 574: UINT16 TypeActual = Type;
  6248  0142B2  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
  6249  0142B6  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  6253  0142B8  0E08               	movlw	8
  6254  0142BA  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6255  0142BC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6256  0142BE  0E00               	movlw	0
  6257  0142C0  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6258  0142C2  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6259  0142C4  0E01               	movlw	1
  6260  0142C6  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6261  0142C8  EC61  F0C3         	call	_Word_GetPair	;wreg free
  6262  0142CC  0100               	movlb	0	; () banked
  6263  0142CE  6F72               	movwf	??_Port_Set& (0+255),b
  6264  0142D0  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6265  0142D2  90D8               	bcf	status,0,c
  6266  0142D4  3772               	rlcf	??_Port_Set& (0+255),f,b
  6267  0142D6  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6268  0142D8  90D8               	bcf	status,0,c
  6269  0142DA  3772               	rlcf	??_Port_Set& (0+255),f,b
  6270  0142DC  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6271  0142DE  5172               	movf	??_Port_Set& (0+255),w,b
  6272  0142E0  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6273  0142E2  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6274  0142E4  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  6278  0142E6  0E08               	movlw	8
  6279  0142E8  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6280  0142EA  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6281  0142EC  0E00               	movlw	0
  6282  0142EE  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6283  0142F0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6284  0142F2  0E02               	movlw	2
  6285  0142F4  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6286  0142F6  EC61  F0C3         	call	_Word_GetPair	;wreg free
  6287  0142FA  0100               	movlb	0	; () banked
  6288  0142FC  6F72               	movwf	??_Port_Set& (0+255),b
  6289  0142FE  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6290  014300  3B72               	swapf	??_Port_Set& (0+255),f,b
  6291  014302  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
  6292  014304  0EF0               	movlw	240
  6293  014306  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
  6294  014308  5172               	movf	??_Port_Set& (0+255),w,b
  6295  01430A  0B0F               	andlw	15
  6296  01430C  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
  6297  01430E  0EF0               	movlw	240
  6298  014310  1772               	andwf	??_Port_Set& (0+255),f,b
  6299  014312  5172               	movf	??_Port_Set& (0+255),w,b
  6300  014314  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6301  014316  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6302  014318  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  6306  01431A  0E08               	movlw	8
  6307  01431C  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6308  01431E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6309  014320  0E00               	movlw	0
  6310  014322  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6311  014324  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6312  014326  0E03               	movlw	3
  6313  014328  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6314  01432A  EC61  F0C3         	call	_Word_GetPair	;wreg free
  6315  01432E  0100               	movlb	0	; () banked
  6316  014330  6F72               	movwf	??_Port_Set& (0+255),b
  6317  014332  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6318  014334  0E06               	movlw	6
  6319  014336                     u13085:
  6320  014336  90D8               	bcf	status,0,c
  6321  014338  3772               	rlcf	??_Port_Set& (0+255),f,b
  6322  01433A  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6323  01433C  2EE8               	decfsz	wreg,f,c
  6324  01433E  D7FB               	goto	u13085
  6325  014340  5172               	movf	??_Port_Set& (0+255),w,b
  6326  014342  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6327  014344  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6328  014346  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6329                           
  6330                           ; BSR set to: 0
  6331                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  6332  014348  0E08               	movlw	8
  6333  01434A  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6334  01434C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6335  01434E  0E00               	movlw	0
  6336  014350  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6337  014352  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6338  014354  0E04               	movlw	4
  6339  014356  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6340  014358  EC61  F0C3         	call	_Word_GetPair	;wreg free
  6341  01435C  0100               	movlb	0	; () banked
  6342  01435E  6F72               	movwf	??_Port_Set& (0+255),b
  6343  014360  5172               	movf	??_Port_Set& (0+255),w,b
  6344  014362  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  6345  014364  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6346  014366  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6347  014368  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6348  01436A  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  6349  01436C  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  6353  01436E  0E08               	movlw	8
  6354  014370  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6355  014372  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6356  014374  0E00               	movlw	0
  6357  014376  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6358  014378  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6359  01437A  0E05               	movlw	5
  6360  01437C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6361  01437E  EC61  F0C3         	call	_Word_GetPair	;wreg free
  6362  014382  0100               	movlb	0	; () banked
  6363  014384  6F72               	movwf	??_Port_Set& (0+255),b
  6364  014386  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6365  014388  0E0A               	movlw	10
  6366  01438A                     u13095:
  6367  01438A  90D8               	bcf	status,0,c
  6368  01438C  3772               	rlcf	??_Port_Set& (0+255),f,b
  6369  01438E  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6370  014390  2EE8               	decfsz	wreg,f,c
  6371  014392  D7FB               	goto	u13095
  6372  014394  5172               	movf	??_Port_Set& (0+255),w,b
  6373  014396  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6374  014398  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6375  01439A  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6376                           
  6377                           ; BSR set to: 0
  6378                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  6379  01439C  0E08               	movlw	8
  6380  01439E  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6381  0143A0  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6382  0143A2  0E00               	movlw	0
  6383  0143A4  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6384  0143A6  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6385  0143A8  0E06               	movlw	6
  6386  0143AA  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6387  0143AC  EC61  F0C3         	call	_Word_GetPair	;wreg free
  6388  0143B0  0100               	movlb	0	; () banked
  6389  0143B2  6F72               	movwf	??_Port_Set& (0+255),b
  6390  0143B4  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6391  0143B6  0E0C               	movlw	12
  6392  0143B8                     u13105:
  6393  0143B8  90D8               	bcf	status,0,c
  6394  0143BA  3772               	rlcf	??_Port_Set& (0+255),f,b
  6395  0143BC  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6396  0143BE  2EE8               	decfsz	wreg,f,c
  6397  0143C0  D7FB               	goto	u13105
  6398  0143C2  5172               	movf	??_Port_Set& (0+255),w,b
  6399  0143C4  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6400  0143C6  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6401  0143C8  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6402                           
  6403                           ; BSR set to: 0
  6404                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  6405  0143CA  0E08               	movlw	8
  6406  0143CC  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6407  0143CE  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6408  0143D0  0E00               	movlw	0
  6409  0143D2  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6410  0143D4  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6411  0143D6  0E07               	movlw	7
  6412  0143D8  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6413  0143DA  EC61  F0C3         	call	_Word_GetPair	;wreg free
  6414  0143DE  0100               	movlb	0	; () banked
  6415  0143E0  6F72               	movwf	??_Port_Set& (0+255),b
  6416  0143E2  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6417  0143E4  0E0E               	movlw	14
  6418  0143E6                     u13115:
  6419  0143E6  90D8               	bcf	status,0,c
  6420  0143E8  3772               	rlcf	??_Port_Set& (0+255),f,b
  6421  0143EA  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6422  0143EC  2EE8               	decfsz	wreg,f,c
  6423  0143EE  D7FB               	goto	u13115
  6424  0143F0  5172               	movf	??_Port_Set& (0+255),w,b
  6425  0143F2  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6426  0143F4  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6427  0143F6  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6428                           
  6429                           ;Port.c: 584: if (TypeRequired == TypeActual)
  6430  0143F8  5184               	movf	Port_Set@TypeActual& (0+255),w,b
  6431  0143FA  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  6432  0143FC  E144               	bnz	l528
  6433  0143FE  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  6434  014400  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  6435  014402  A4D8               	btfss	status,2,c
  6436  014404  0012               	return	
  6437  014406  D030               	goto	l526
  6438  014408                     
  6439                           ; BSR set to: 0
  6440                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  6441                           
  6442                           ; BSR set to: 0
  6443  014408  EE20 F002          	lfsr	2,2
  6444  01440C  516F               	movf	Port_Set@pInput& (0+255),w,b
  6445  01440E  26D9               	addwf	fsr2l,f,c
  6446  014410  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6447  014412  22DA               	addwfc	fsr2h,f,c
  6448  014414  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6449  014418  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6450  01441C  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6451  014420  EC12  F0C6         	call	_Byte_SetByte	;wreg free
  6452                           
  6453                           ;Port.c: 594: break;
  6454  014424  0012               	return	
  6455  014426                     
  6456                           ;Port.c: 597: pValue = ~pValue;
  6457  014426  0100               	movlb	0	; () banked
  6458  014428  1F71               	comf	Port_Set@pValue& (0+255),f,b
  6459                           
  6460                           ; BSR set to: 0
  6461                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  6462  01442A  EE20 F002          	lfsr	2,2
  6463  01442E  516F               	movf	Port_Set@pInput& (0+255),w,b
  6464  014430  26D9               	addwf	fsr2l,f,c
  6465  014432  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6466  014434  22DA               	addwfc	fsr2h,f,c
  6467  014436  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6468  01443A  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6469  01443E  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6470  014442  EC12  F0C6         	call	_Byte_SetByte	;wreg free
  6471                           
  6472                           ;Port.c: 599: break;
  6473  014446  0012               	return	
  6474  014448                     
  6475                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  6476  014448  0100               	movlb	0	; () banked
  6477  01444A  EE20 F004          	lfsr	2,4
  6478  01444E  516F               	movf	Port_Set@pInput& (0+255),w,b
  6479  014450  26D9               	addwf	fsr2l,f,c
  6480  014452  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6481  014454  22DA               	addwfc	fsr2h,f,c
  6482  014456  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6483  01445A  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6484  01445E  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6485  014462  EC12  F0C6         	call	_Byte_SetByte	;wreg free
  6486                           
  6487                           ;Port.c: 606: }
  6488                           
  6489                           ;Port.c: 605: break;
  6490                           
  6491                           ;Port.c: 604: default:
  6492                           
  6493                           ;Port.c: 603: break;
  6494  014466  0012               	return	
  6495  014468                     l526:
  6496  014468  0100               	movlb	0	; () banked
  6497  01446A  5186               	movf	Port_Set@Type& (0+255),w,b
  6498                           
  6499                           ; Switch size 1, requested type "space"
  6500                           ; Number of cases is 4, Range of values is 0 to 3
  6501                           ; switch strategies available:
  6502                           ; Name         Instructions Cycles
  6503                           ; simple_byte           13     7 (average)
  6504                           ;	Chosen strategy is simple_byte
  6505  01446C  0A00               	xorlw	0	; case 0
  6506  01446E  B4D8               	btfsc	status,2,c
  6507  014470  0012               	return	
  6508  014472  0A01               	xorlw	1	; case 1
  6509  014474  B4D8               	btfsc	status,2,c
  6510  014476  D7C8               	goto	l529
  6511  014478  0A03               	xorlw	3	; case 2
  6512  01447A  B4D8               	btfsc	status,2,c
  6513  01447C  D7D4               	goto	l531
  6514  01447E  0A01               	xorlw	1	; case 3
  6515  014480  A4D8               	btfss	status,2,c
  6516                           
  6517                           ; BSR set to: 0
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;Port.c: 607: }
  6521  014482  0012               	return	
  6522  014484  D7E1               	goto	l532
  6523  014486                     l528:
  6524  014486  0012               	return		;funcret
  6525  014488                     __end_of_Port_Set:
  6526                           	opt stack 0
  6527                           tosu	equ	0xFFF
  6528                           tosh	equ	0xFFE
  6529                           tosl	equ	0xFFD
  6530                           pclath	equ	0xFFA
  6531                           tblptru	equ	0xFF8
  6532                           tblptrh	equ	0xFF7
  6533                           tblptrl	equ	0xFF6
  6534                           tablat	equ	0xFF5
  6535                           postinc0	equ	0xFEE
  6536                           wreg	equ	0xFE8
  6537                           postdec1	equ	0xFE5
  6538                           fsr1h	equ	0xFE2
  6539                           fsr1l	equ	0xFE1
  6540                           indf2	equ	0xFDF
  6541                           postinc2	equ	0xFDE
  6542                           postdec2	equ	0xFDD
  6543                           plusw2	equ	0xFDB
  6544                           fsr2h	equ	0xFDA
  6545                           fsr2l	equ	0xFD9
  6546                           status	equ	0xFD8
  6547                           
  6548 ;; *************** function _Byte_SetByte *****************
  6549 ;; Defined at:
  6550 ;;		line 110 in file "Library/Types.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  6553 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  6554 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  6555 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  6556 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  6557 ;;		 -> NULL(0), 
  6558 ;;  pValue          1    2[BANK0 ] unsigned char 
  6559 ;; Auto vars:     Size  Location     Type
  6560 ;;		None
  6561 ;; Return value:  Size  Location     Type
  6562 ;;                  1    wreg      void 
  6563 ;; Registers used:
  6564 ;;		fsr2l, fsr2h
  6565 ;; Tracked objects:
  6566 ;;		On entry : 0/0
  6567 ;;		On exit  : 0/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6570 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6573 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6574 ;;Total ram usage:        3 bytes
  6575 ;; Hardware stack levels used:    1
  6576 ;; Hardware stack levels required when called:    7
  6577 ;; This function calls:
  6578 ;;		Nothing
  6579 ;; This function is called by:
  6580 ;;		_Port_Set
  6581 ;;		_I2C_Init
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           	psect	text9
  6586  018C24                     __ptext9:
  6587                           	opt stack 0
  6588  018C24                     _Byte_SetByte:
  6589                           	opt stack 20
  6590                           
  6591                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  6592                           
  6593                           ;incstack = 0
  6594  018C24  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  6595  018C28  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  6596  018C2C  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
  6597  018C30  0012               	return		;funcret
  6598  018C32                     __end_of_Byte_SetByte:
  6599                           	opt stack 0
  6600                           tosu	equ	0xFFF
  6601                           tosh	equ	0xFFE
  6602                           tosl	equ	0xFFD
  6603                           pclath	equ	0xFFA
  6604                           tblptru	equ	0xFF8
  6605                           tblptrh	equ	0xFF7
  6606                           tblptrl	equ	0xFF6
  6607                           tablat	equ	0xFF5
  6608                           postinc0	equ	0xFEE
  6609                           wreg	equ	0xFE8
  6610                           postdec1	equ	0xFE5
  6611                           fsr1h	equ	0xFE2
  6612                           fsr1l	equ	0xFE1
  6613                           indf2	equ	0xFDF
  6614                           postinc2	equ	0xFDE
  6615                           postdec2	equ	0xFDD
  6616                           plusw2	equ	0xFDB
  6617                           fsr2h	equ	0xFDA
  6618                           fsr2l	equ	0xFD9
  6619                           status	equ	0xFD8
  6620                           
  6621 ;; *************** function _GetPortTRIS *****************
  6622 ;; Defined at:
  6623 ;;		line 67 in file "Library/Port.c"
  6624 ;; Parameters:    Size  Location     Type
  6625 ;;  pInput          1    wreg     enum E6786
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;  pInput          1    2[BANK0 ] enum E6786
  6628 ;; Return value:  Size  Location     Type
  6629 ;;                  2    0[BANK0 ] PTR struct Byte
  6630 ;; Registers used:
  6631 ;;		wreg, status,2, status,0
  6632 ;; Tracked objects:
  6633 ;;		On entry : 0/0
  6634 ;;		On exit  : 0/0
  6635 ;;		Unchanged: 0/0
  6636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6637 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6638 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6640 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6641 ;;Total ram usage:        3 bytes
  6642 ;; Hardware stack levels used:    1
  6643 ;; Hardware stack levels required when called:    7
  6644 ;; This function calls:
  6645 ;;		Nothing
  6646 ;; This function is called by:
  6647 ;;		_Port_Init
  6648 ;; This function uses a non-reentrant model
  6649 ;;
  6650                           
  6651                           	psect	text10
  6652  0172A0                     __ptext10:
  6653                           	opt stack 0
  6654  0172A0                     _GetPortTRIS:
  6655                           	opt stack 21
  6656                           
  6657                           ;incstack = 0
  6658                           ;GetPortTRIS@pInput stored from wreg
  6659  0172A0  0100               	movlb	0	; () banked
  6660  0172A2  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
  6661                           
  6662                           ;Port.c: 69: switch (pInput)
  6663  0172A4  D029               	goto	l363
  6664  0172A6                     
  6665                           ;Port.c: 72: return (BytePtr)&TRISA;
  6666  0172A6  0E92               	movlw	146
  6667  0172A8  0100               	movlb	0	; () banked
  6668  0172AA  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6669  0172AC  0E0F               	movlw	15
  6670  0172AE  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6671                           
  6672                           ; BSR set to: 0
  6673  0172B0  0012               	return	
  6674  0172B2                     
  6675                           ; BSR set to: 0
  6676                           ;Port.c: 74: return (BytePtr)&TRISB;
  6677                           
  6678                           ; BSR set to: 0
  6679  0172B2  0E93               	movlw	147
  6680  0172B4  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6681  0172B6  0E0F               	movlw	15
  6682  0172B8  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6683                           
  6684                           ; BSR set to: 0
  6685  0172BA  0012               	return	
  6686  0172BC                     
  6687                           ; BSR set to: 0
  6688                           ;Port.c: 76: return (BytePtr)&TRISC;
  6689                           
  6690                           ; BSR set to: 0
  6691  0172BC  0E94               	movlw	148
  6692  0172BE  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6693  0172C0  0E0F               	movlw	15
  6694  0172C2  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6695                           
  6696                           ; BSR set to: 0
  6697  0172C4  0012               	return	
  6698  0172C6                     
  6699                           ; BSR set to: 0
  6700                           ;Port.c: 78: return (BytePtr)&TRISD;
  6701                           
  6702                           ; BSR set to: 0
  6703  0172C6  0E95               	movlw	149
  6704  0172C8  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6705  0172CA  0E0F               	movlw	15
  6706  0172CC  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6707                           
  6708                           ; BSR set to: 0
  6709  0172CE  0012               	return	
  6710  0172D0                     
  6711                           ; BSR set to: 0
  6712                           ;Port.c: 80: return (BytePtr)&TRISE;
  6713                           
  6714                           ; BSR set to: 0
  6715  0172D0  0E96               	movlw	150
  6716  0172D2  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6717  0172D4  0E0F               	movlw	15
  6718  0172D6  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6719                           
  6720                           ; BSR set to: 0
  6721  0172D8  0012               	return	
  6722  0172DA                     
  6723                           ; BSR set to: 0
  6724                           ;Port.c: 82: return (BytePtr)&TRISF;
  6725                           
  6726                           ; BSR set to: 0
  6727  0172DA  0E97               	movlw	151
  6728  0172DC  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6729  0172DE  0E0F               	movlw	15
  6730  0172E0  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6731                           
  6732                           ; BSR set to: 0
  6733  0172E2  0012               	return	
  6734  0172E4                     
  6735                           ; BSR set to: 0
  6736                           ;Port.c: 84: return (BytePtr)&TRISG;
  6737                           
  6738                           ; BSR set to: 0
  6739  0172E4  0E98               	movlw	152
  6740  0172E6  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6741  0172E8  0E0F               	movlw	15
  6742  0172EA  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6743                           
  6744                           ; BSR set to: 0
  6745  0172EC  0012               	return	
  6746  0172EE                     
  6747                           ; BSR set to: 0
  6748                           ;Port.c: 86: return (void*)0;
  6749                           
  6750                           ; BSR set to: 0
  6751  0172EE  0E00               	movlw	0
  6752  0172F0  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6753  0172F2  0E00               	movlw	0
  6754  0172F4  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6755                           
  6756                           ; BSR set to: 0
  6757                           ;Port.c: 87: }
  6758                           
  6759                           ; BSR set to: 0
  6760  0172F6  0012               	return	
  6761  0172F8                     l363:
  6762                           
  6763                           ; BSR set to: 0
  6764  0172F8  0100               	movlb	0	; () banked
  6765  0172FA  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
  6766                           
  6767                           ; Switch size 1, requested type "space"
  6768                           ; Number of cases is 7, Range of values is 0 to 6
  6769                           ; switch strategies available:
  6770                           ; Name         Instructions Cycles
  6771                           ; simple_byte           22    12 (average)
  6772                           ;	Chosen strategy is simple_byte
  6773  0172FC  0A00               	xorlw	0	; case 0
  6774  0172FE  B4D8               	btfsc	status,2,c
  6775  017300  D7D2               	goto	l364
  6776  017302  0A01               	xorlw	1	; case 1
  6777  017304  B4D8               	btfsc	status,2,c
  6778  017306  D7D5               	goto	l366
  6779  017308  0A03               	xorlw	3	; case 2
  6780  01730A  B4D8               	btfsc	status,2,c
  6781  01730C  D7D7               	goto	l367
  6782  01730E  0A01               	xorlw	1	; case 3
  6783  017310  B4D8               	btfsc	status,2,c
  6784  017312  D7D9               	goto	l368
  6785  017314  0A07               	xorlw	7	; case 4
  6786  017316  B4D8               	btfsc	status,2,c
  6787  017318  D7DB               	goto	l369
  6788  01731A  0A01               	xorlw	1	; case 5
  6789  01731C  B4D8               	btfsc	status,2,c
  6790  01731E  D7DD               	goto	l370
  6791  017320  0A03               	xorlw	3	; case 6
  6792  017322  B4D8               	btfsc	status,2,c
  6793  017324  D7DF               	goto	l371
  6794  017326  D7E3               	goto	l372
  6795  017328                     __end_of_GetPortTRIS:
  6796                           	opt stack 0
  6797                           tosu	equ	0xFFF
  6798                           tosh	equ	0xFFE
  6799                           tosl	equ	0xFFD
  6800                           pclath	equ	0xFFA
  6801                           tblptru	equ	0xFF8
  6802                           tblptrh	equ	0xFF7
  6803                           tblptrl	equ	0xFF6
  6804                           tablat	equ	0xFF5
  6805                           postinc0	equ	0xFEE
  6806                           wreg	equ	0xFE8
  6807                           postdec1	equ	0xFE5
  6808                           fsr1h	equ	0xFE2
  6809                           fsr1l	equ	0xFE1
  6810                           indf2	equ	0xFDF
  6811                           postinc2	equ	0xFDE
  6812                           postdec2	equ	0xFDD
  6813                           plusw2	equ	0xFDB
  6814                           fsr2h	equ	0xFDA
  6815                           fsr2l	equ	0xFD9
  6816                           status	equ	0xFD8
  6817                           
  6818 ;; *************** function _GetPortProperties *****************
  6819 ;; Defined at:
  6820 ;;		line 21 in file "Library/Port.c"
  6821 ;; Parameters:    Size  Location     Type
  6822 ;;  pInput          1    wreg     enum E6786
  6823 ;; Auto vars:     Size  Location     Type
  6824 ;;  pInput          1    2[BANK0 ] enum E6786
  6825 ;; Return value:  Size  Location     Type
  6826 ;;                  2    0[BANK0 ] PTR struct PortProperty
  6827 ;; Registers used:
  6828 ;;		wreg, status,2, status,0
  6829 ;; Tracked objects:
  6830 ;;		On entry : 0/0
  6831 ;;		On exit  : 0/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6834 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6837 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6838 ;;Total ram usage:        3 bytes
  6839 ;; Hardware stack levels used:    1
  6840 ;; Hardware stack levels required when called:    7
  6841 ;; This function calls:
  6842 ;;		Nothing
  6843 ;; This function is called by:
  6844 ;;		_Port_Init
  6845 ;; This function uses a non-reentrant model
  6846 ;;
  6847                           
  6848                           	psect	text11
  6849  017328                     __ptext11:
  6850                           	opt stack 0
  6851  017328                     _GetPortProperties:
  6852                           	opt stack 21
  6853                           
  6854                           ; BSR set to: 0
  6855                           ;incstack = 0
  6856                           ;GetPortProperties@pInput stored from wreg
  6857  017328  0100               	movlb	0	; () banked
  6858  01732A  6F62               	movwf	GetPortProperties@pInput& (0+255),b
  6859                           
  6860                           ;Port.c: 23: switch (pInput)
  6861  01732C  D029               	goto	l337
  6862  01732E                     
  6863                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  6864  01732E  0E67               	movlw	low _PortA_Property
  6865  017330  0100               	movlb	0	; () banked
  6866  017332  6F60               	movwf	?_GetPortProperties& (0+255),b
  6867  017334  0EFE               	movlw	high _PortA_Property
  6868  017336  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6869                           
  6870                           ; BSR set to: 0
  6871  017338  0012               	return	
  6872  01733A                     
  6873                           ; BSR set to: 0
  6874                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  6875                           
  6876                           ; BSR set to: 0
  6877  01733A  0E65               	movlw	low _PortB_Property
  6878  01733C  6F60               	movwf	?_GetPortProperties& (0+255),b
  6879  01733E  0EFE               	movlw	high _PortB_Property
  6880  017340  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6881                           
  6882                           ; BSR set to: 0
  6883  017342  0012               	return	
  6884  017344                     
  6885                           ; BSR set to: 0
  6886                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  6887                           
  6888                           ; BSR set to: 0
  6889  017344  0E63               	movlw	low _PortC_Property
  6890  017346  6F60               	movwf	?_GetPortProperties& (0+255),b
  6891  017348  0EFE               	movlw	high _PortC_Property
  6892  01734A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6893                           
  6894                           ; BSR set to: 0
  6895  01734C  0012               	return	
  6896  01734E                     
  6897                           ; BSR set to: 0
  6898                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  6899                           
  6900                           ; BSR set to: 0
  6901  01734E  0E61               	movlw	low _PortD_Property
  6902  017350  6F60               	movwf	?_GetPortProperties& (0+255),b
  6903  017352  0EFE               	movlw	high _PortD_Property
  6904  017354  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6905                           
  6906                           ; BSR set to: 0
  6907  017356  0012               	return	
  6908  017358                     
  6909                           ; BSR set to: 0
  6910                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  6911                           
  6912                           ; BSR set to: 0
  6913  017358  0E5F               	movlw	low _PortE_Property
  6914  01735A  6F60               	movwf	?_GetPortProperties& (0+255),b
  6915  01735C  0EFE               	movlw	high _PortE_Property
  6916  01735E  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6917                           
  6918                           ; BSR set to: 0
  6919  017360  0012               	return	
  6920  017362                     
  6921                           ; BSR set to: 0
  6922                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  6923                           
  6924                           ; BSR set to: 0
  6925  017362  0E5D               	movlw	low _PortF_Property
  6926  017364  6F60               	movwf	?_GetPortProperties& (0+255),b
  6927  017366  0EFE               	movlw	high _PortF_Property
  6928  017368  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6929                           
  6930                           ; BSR set to: 0
  6931  01736A  0012               	return	
  6932  01736C                     
  6933                           ; BSR set to: 0
  6934                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  6935                           
  6936                           ; BSR set to: 0
  6937  01736C  0E5B               	movlw	low _PortG_Property
  6938  01736E  6F60               	movwf	?_GetPortProperties& (0+255),b
  6939  017370  0EFE               	movlw	high _PortG_Property
  6940  017372  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6941                           
  6942                           ; BSR set to: 0
  6943  017374  0012               	return	
  6944  017376                     
  6945                           ; BSR set to: 0
  6946                           ;Port.c: 40: return (void*)0;
  6947                           
  6948                           ; BSR set to: 0
  6949  017376  0E00               	movlw	0
  6950  017378  6F60               	movwf	?_GetPortProperties& (0+255),b
  6951  01737A  0E00               	movlw	0
  6952  01737C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;Port.c: 41: }
  6956                           
  6957                           ; BSR set to: 0
  6958  01737E  0012               	return	
  6959  017380                     l337:
  6960                           
  6961                           ; BSR set to: 0
  6962  017380  0100               	movlb	0	; () banked
  6963  017382  5162               	movf	GetPortProperties@pInput& (0+255),w,b
  6964                           
  6965                           ; Switch size 1, requested type "space"
  6966                           ; Number of cases is 7, Range of values is 0 to 6
  6967                           ; switch strategies available:
  6968                           ; Name         Instructions Cycles
  6969                           ; simple_byte           22    12 (average)
  6970                           ;	Chosen strategy is simple_byte
  6971  017384  0A00               	xorlw	0	; case 0
  6972  017386  B4D8               	btfsc	status,2,c
  6973  017388  D7D2               	goto	l338
  6974  01738A  0A01               	xorlw	1	; case 1
  6975  01738C  B4D8               	btfsc	status,2,c
  6976  01738E  D7D5               	goto	l340
  6977  017390  0A03               	xorlw	3	; case 2
  6978  017392  B4D8               	btfsc	status,2,c
  6979  017394  D7D7               	goto	l341
  6980  017396  0A01               	xorlw	1	; case 3
  6981  017398  B4D8               	btfsc	status,2,c
  6982  01739A  D7D9               	goto	l342
  6983  01739C  0A07               	xorlw	7	; case 4
  6984  01739E  B4D8               	btfsc	status,2,c
  6985  0173A0  D7DB               	goto	l343
  6986  0173A2  0A01               	xorlw	1	; case 5
  6987  0173A4  B4D8               	btfsc	status,2,c
  6988  0173A6  D7DD               	goto	l344
  6989  0173A8  0A03               	xorlw	3	; case 6
  6990  0173AA  B4D8               	btfsc	status,2,c
  6991  0173AC  D7DF               	goto	l345
  6992  0173AE  D7E3               	goto	l346
  6993  0173B0                     __end_of_GetPortProperties:
  6994                           	opt stack 0
  6995                           tosu	equ	0xFFF
  6996                           tosh	equ	0xFFE
  6997                           tosl	equ	0xFFD
  6998                           pclath	equ	0xFFA
  6999                           tblptru	equ	0xFF8
  7000                           tblptrh	equ	0xFF7
  7001                           tblptrl	equ	0xFF6
  7002                           tablat	equ	0xFF5
  7003                           postinc0	equ	0xFEE
  7004                           wreg	equ	0xFE8
  7005                           postdec1	equ	0xFE5
  7006                           fsr1h	equ	0xFE2
  7007                           fsr1l	equ	0xFE1
  7008                           indf2	equ	0xFDF
  7009                           postinc2	equ	0xFDE
  7010                           postdec2	equ	0xFDD
  7011                           plusw2	equ	0xFDB
  7012                           fsr2h	equ	0xFDA
  7013                           fsr2l	equ	0xFD9
  7014                           status	equ	0xFD8
  7015                           
  7016 ;; *************** function _GetPortPORT *****************
  7017 ;; Defined at:
  7018 ;;		line 44 in file "Library/Port.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;  pInput          1    wreg     enum E6786
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;  pInput          1    2[BANK0 ] enum E6786
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  2    0[BANK0 ] PTR struct Byte
  7025 ;; Registers used:
  7026 ;;		wreg, status,2, status,0
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7032 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7035 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7036 ;;Total ram usage:        3 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    7
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		_Port_Init
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           	psect	text12
  7047  0173B0                     __ptext12:
  7048                           	opt stack 0
  7049  0173B0                     _GetPortPORT:
  7050                           	opt stack 21
  7051                           
  7052                           ; BSR set to: 0
  7053                           ;incstack = 0
  7054                           ;GetPortPORT@pInput stored from wreg
  7055  0173B0  0100               	movlb	0	; () banked
  7056  0173B2  6F62               	movwf	GetPortPORT@pInput& (0+255),b
  7057                           
  7058                           ;Port.c: 46: switch (pInput)
  7059  0173B4  D029               	goto	l350
  7060  0173B6                     
  7061                           ;Port.c: 49: return (BytePtr)&PORTA;
  7062  0173B6  0E80               	movlw	128
  7063  0173B8  0100               	movlb	0	; () banked
  7064  0173BA  6F60               	movwf	?_GetPortPORT& (0+255),b
  7065  0173BC  0E0F               	movlw	15
  7066  0173BE  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7067                           
  7068                           ; BSR set to: 0
  7069  0173C0  0012               	return	
  7070  0173C2                     
  7071                           ; BSR set to: 0
  7072                           ;Port.c: 51: return (BytePtr)&PORTB;
  7073                           
  7074                           ; BSR set to: 0
  7075  0173C2  0E81               	movlw	129
  7076  0173C4  6F60               	movwf	?_GetPortPORT& (0+255),b
  7077  0173C6  0E0F               	movlw	15
  7078  0173C8  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7079                           
  7080                           ; BSR set to: 0
  7081  0173CA  0012               	return	
  7082  0173CC                     
  7083                           ; BSR set to: 0
  7084                           ;Port.c: 53: return (BytePtr)&PORTC;
  7085                           
  7086                           ; BSR set to: 0
  7087  0173CC  0E82               	movlw	130
  7088  0173CE  6F60               	movwf	?_GetPortPORT& (0+255),b
  7089  0173D0  0E0F               	movlw	15
  7090  0173D2  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7091                           
  7092                           ; BSR set to: 0
  7093  0173D4  0012               	return	
  7094  0173D6                     
  7095                           ; BSR set to: 0
  7096                           ;Port.c: 55: return (BytePtr)&PORTD;
  7097                           
  7098                           ; BSR set to: 0
  7099  0173D6  0E83               	movlw	131
  7100  0173D8  6F60               	movwf	?_GetPortPORT& (0+255),b
  7101  0173DA  0E0F               	movlw	15
  7102  0173DC  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7103                           
  7104                           ; BSR set to: 0
  7105  0173DE  0012               	return	
  7106  0173E0                     
  7107                           ; BSR set to: 0
  7108                           ;Port.c: 57: return (BytePtr)&PORTE;
  7109                           
  7110                           ; BSR set to: 0
  7111  0173E0  0E84               	movlw	132
  7112  0173E2  6F60               	movwf	?_GetPortPORT& (0+255),b
  7113  0173E4  0E0F               	movlw	15
  7114  0173E6  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7115                           
  7116                           ; BSR set to: 0
  7117  0173E8  0012               	return	
  7118  0173EA                     
  7119                           ; BSR set to: 0
  7120                           ;Port.c: 59: return (BytePtr)&PORTF;
  7121                           
  7122                           ; BSR set to: 0
  7123  0173EA  0E85               	movlw	133
  7124  0173EC  6F60               	movwf	?_GetPortPORT& (0+255),b
  7125  0173EE  0E0F               	movlw	15
  7126  0173F0  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7127                           
  7128                           ; BSR set to: 0
  7129  0173F2  0012               	return	
  7130  0173F4                     
  7131                           ; BSR set to: 0
  7132                           ;Port.c: 61: return (BytePtr)&PORTG;
  7133                           
  7134                           ; BSR set to: 0
  7135  0173F4  0E86               	movlw	134
  7136  0173F6  6F60               	movwf	?_GetPortPORT& (0+255),b
  7137  0173F8  0E0F               	movlw	15
  7138  0173FA  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7139                           
  7140                           ; BSR set to: 0
  7141  0173FC  0012               	return	
  7142  0173FE                     
  7143                           ; BSR set to: 0
  7144                           ;Port.c: 63: return (void*)0;
  7145                           
  7146                           ; BSR set to: 0
  7147  0173FE  0E00               	movlw	0
  7148  017400  6F60               	movwf	?_GetPortPORT& (0+255),b
  7149  017402  0E00               	movlw	0
  7150  017404  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7151                           
  7152                           ; BSR set to: 0
  7153                           ;Port.c: 64: }
  7154                           
  7155                           ; BSR set to: 0
  7156  017406  0012               	return	
  7157  017408                     l350:
  7158                           
  7159                           ; BSR set to: 0
  7160  017408  0100               	movlb	0	; () banked
  7161  01740A  5162               	movf	GetPortPORT@pInput& (0+255),w,b
  7162                           
  7163                           ; Switch size 1, requested type "space"
  7164                           ; Number of cases is 7, Range of values is 0 to 6
  7165                           ; switch strategies available:
  7166                           ; Name         Instructions Cycles
  7167                           ; simple_byte           22    12 (average)
  7168                           ;	Chosen strategy is simple_byte
  7169  01740C  0A00               	xorlw	0	; case 0
  7170  01740E  B4D8               	btfsc	status,2,c
  7171  017410  D7D2               	goto	l351
  7172  017412  0A01               	xorlw	1	; case 1
  7173  017414  B4D8               	btfsc	status,2,c
  7174  017416  D7D5               	goto	l353
  7175  017418  0A03               	xorlw	3	; case 2
  7176  01741A  B4D8               	btfsc	status,2,c
  7177  01741C  D7D7               	goto	l354
  7178  01741E  0A01               	xorlw	1	; case 3
  7179  017420  B4D8               	btfsc	status,2,c
  7180  017422  D7D9               	goto	l355
  7181  017424  0A07               	xorlw	7	; case 4
  7182  017426  B4D8               	btfsc	status,2,c
  7183  017428  D7DB               	goto	l356
  7184  01742A  0A01               	xorlw	1	; case 5
  7185  01742C  B4D8               	btfsc	status,2,c
  7186  01742E  D7DD               	goto	l357
  7187  017430  0A03               	xorlw	3	; case 6
  7188  017432  B4D8               	btfsc	status,2,c
  7189  017434  D7DF               	goto	l358
  7190  017436  D7E3               	goto	l359
  7191  017438                     __end_of_GetPortPORT:
  7192                           	opt stack 0
  7193                           tosu	equ	0xFFF
  7194                           tosh	equ	0xFFE
  7195                           tosl	equ	0xFFD
  7196                           pclath	equ	0xFFA
  7197                           tblptru	equ	0xFF8
  7198                           tblptrh	equ	0xFF7
  7199                           tblptrl	equ	0xFF6
  7200                           tablat	equ	0xFF5
  7201                           postinc0	equ	0xFEE
  7202                           wreg	equ	0xFE8
  7203                           postdec1	equ	0xFE5
  7204                           fsr1h	equ	0xFE2
  7205                           fsr1l	equ	0xFE1
  7206                           indf2	equ	0xFDF
  7207                           postinc2	equ	0xFDE
  7208                           postdec2	equ	0xFDD
  7209                           plusw2	equ	0xFDB
  7210                           fsr2h	equ	0xFDA
  7211                           fsr2l	equ	0xFD9
  7212                           status	equ	0xFD8
  7213                           
  7214 ;; *************** function _LED_Init *****************
  7215 ;; Defined at:
  7216 ;;		line 15 in file "Library/LED.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;  pLED            1    wreg     enum E6739
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;  pLED            1   45[BANK0 ] enum E6739
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  1    wreg      void 
  7223 ;; Registers used:
  7224 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7233 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7234 ;;Total ram usage:        1 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:   12
  7237 ;; This function calls:
  7238 ;;		_LED_Set
  7239 ;;		_Port_SetPinType
  7240 ;; This function is called by:
  7241 ;;		_MXK_Init
  7242 ;;		_main
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           	psect	text13
  7247  017DB6                     __ptext13:
  7248                           	opt stack 0
  7249  017DB6                     _LED_Init:
  7250                           	opt stack 17
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;incstack = 0
  7254                           ;LED_Init@pLED stored from wreg
  7255  017DB6  0100               	movlb	0	; () banked
  7256  017DB8  6F8D               	movwf	LED_Init@pLED& (0+255),b
  7257                           
  7258                           ;LED.c: 17: switch (pLED)
  7259  017DBA  D018               	goto	l220
  7260  017DBC                     
  7261                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  7262  017DBC  0E8A               	movlw	low _PortC
  7263  017DBE  0100               	movlb	0	; () banked
  7264  017DC0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7265  017DC2  0E01               	movlw	high _PortC
  7266  017DC4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7267  017DC6  0E00               	movlw	0
  7268  017DC8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7269  017DCA  0E03               	movlw	3
  7270  017DCC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7271  017DCE  EC76  F0A8         	call	_Port_SetPinType	;wreg free
  7272                           
  7273                           ;LED.c: 21: break;
  7274  017DD2  D014               	goto	l222
  7275  017DD4                     
  7276                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  7277  017DD4  0E8A               	movlw	low _PortC
  7278  017DD6  0100               	movlb	0	; () banked
  7279  017DD8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7280  017DDA  0E01               	movlw	high _PortC
  7281  017DDC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7282  017DDE  0E01               	movlw	1
  7283  017DE0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7284  017DE2  0E03               	movlw	3
  7285  017DE4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7286  017DE6  EC76  F0A8         	call	_Port_SetPinType	;wreg free
  7287                           
  7288                           ;LED.c: 25: }
  7289                           
  7290                           ;LED.c: 24: break;
  7291  017DEA  D008               	goto	l222
  7292  017DEC                     l220:
  7293  017DEC  0100               	movlb	0	; () banked
  7294  017DEE  518D               	movf	LED_Init@pLED& (0+255),w,b
  7295                           
  7296                           ; Switch size 1, requested type "space"
  7297                           ; Number of cases is 2, Range of values is 0 to 1
  7298                           ; switch strategies available:
  7299                           ; Name         Instructions Cycles
  7300                           ; simple_byte            7     4 (average)
  7301                           ;	Chosen strategy is simple_byte
  7302  017DF0  0A00               	xorlw	0	; case 0
  7303  017DF2  B4D8               	btfsc	status,2,c
  7304  017DF4  D7E3               	goto	l221
  7305  017DF6  0A01               	xorlw	1	; case 1
  7306  017DF8  B4D8               	btfsc	status,2,c
  7307  017DFA  D7EC               	goto	l223
  7308  017DFC                     l222:
  7309                           
  7310                           ;LED.c: 26: LED_Set(pLED, 0);
  7311                           
  7312                           ; BSR set to: 0
  7313  017DFC  0E00               	movlw	0
  7314  017DFE  0100               	movlb	0	; () banked
  7315  017E00  6F74               	movwf	LED_Set@pValue& (0+255),b
  7316  017E02  518D               	movf	LED_Init@pLED& (0+255),w,b
  7317  017E04  EC2E  F0C1         	call	_LED_Set
  7318  017E08  0012               	return		;funcret
  7319  017E0A                     __end_of_LED_Init:
  7320                           	opt stack 0
  7321                           tosu	equ	0xFFF
  7322                           tosh	equ	0xFFE
  7323                           tosl	equ	0xFFD
  7324                           pclath	equ	0xFFA
  7325                           tblptru	equ	0xFF8
  7326                           tblptrh	equ	0xFF7
  7327                           tblptrl	equ	0xFF6
  7328                           tablat	equ	0xFF5
  7329                           postinc0	equ	0xFEE
  7330                           wreg	equ	0xFE8
  7331                           postdec1	equ	0xFE5
  7332                           fsr1h	equ	0xFE2
  7333                           fsr1l	equ	0xFE1
  7334                           indf2	equ	0xFDF
  7335                           postinc2	equ	0xFDE
  7336                           postdec2	equ	0xFDD
  7337                           plusw2	equ	0xFDB
  7338                           fsr2h	equ	0xFDA
  7339                           fsr2l	equ	0xFD9
  7340                           status	equ	0xFD8
  7341                           
  7342 ;; *************** function _LED_Set *****************
  7343 ;; Defined at:
  7344 ;;		line 33 in file "Library/LED.c"
  7345 ;; Parameters:    Size  Location     Type
  7346 ;;  pLED            1    wreg     enum E6739
  7347 ;;  pValue          1   20[BANK0 ] unsigned char 
  7348 ;; Auto vars:     Size  Location     Type
  7349 ;;  pLED            1   21[BANK0 ] enum E6739
  7350 ;; Return value:  Size  Location     Type
  7351 ;;                  1    wreg      void 
  7352 ;; Registers used:
  7353 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7354 ;; Tracked objects:
  7355 ;;		On entry : 0/0
  7356 ;;		On exit  : 0/0
  7357 ;;		Unchanged: 0/0
  7358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7359 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7360 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7362 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7363 ;;Total ram usage:        2 bytes
  7364 ;; Hardware stack levels used:    1
  7365 ;; Hardware stack levels required when called:   11
  7366 ;; This function calls:
  7367 ;;		_Port_SetPin
  7368 ;; This function is called by:
  7369 ;;		_LED_Init
  7370 ;;		_SYSTEM_Initialize
  7371 ;; This function uses a non-reentrant model
  7372 ;;
  7373                           
  7374                           	psect	text14
  7375  01825C                     __ptext14:
  7376                           	opt stack 0
  7377  01825C                     _LED_Set:
  7378                           	opt stack 17
  7379                           
  7380                           ;incstack = 0
  7381                           ;LED_Set@pLED stored from wreg
  7382  01825C  0100               	movlb	0	; () banked
  7383  01825E  6F75               	movwf	LED_Set@pLED& (0+255),b
  7384                           
  7385                           ;LED.c: 35: switch (pLED)
  7386  018260  D018               	goto	l227
  7387  018262                     
  7388                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  7389  018262  0E8A               	movlw	low _PortC
  7390  018264  0100               	movlb	0	; () banked
  7391  018266  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7392  018268  0E01               	movlw	high _PortC
  7393  01826A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7394  01826C  0E00               	movlw	0
  7395  01826E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7396  018270  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  7397  018274  EC96  F0B5         	call	_Port_SetPin	;wreg free
  7398                           
  7399                           ;LED.c: 39: break;
  7400  018278  0012               	return	
  7401  01827A                     
  7402                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  7403  01827A  0E8A               	movlw	low _PortC
  7404  01827C  0100               	movlb	0	; () banked
  7405  01827E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7406  018280  0E01               	movlw	high _PortC
  7407  018282  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7408  018284  0E01               	movlw	1
  7409  018286  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7410  018288  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  7411  01828C  EC96  F0B5         	call	_Port_SetPin	;wreg free
  7412                           
  7413                           ;LED.c: 43: }
  7414                           
  7415                           ;LED.c: 42: break;
  7416  018290  0012               	return	
  7417  018292                     l227:
  7418  018292  0100               	movlb	0	; () banked
  7419  018294  5175               	movf	LED_Set@pLED& (0+255),w,b
  7420                           
  7421                           ; Switch size 1, requested type "space"
  7422                           ; Number of cases is 2, Range of values is 0 to 1
  7423                           ; switch strategies available:
  7424                           ; Name         Instructions Cycles
  7425                           ; simple_byte            7     4 (average)
  7426                           ;	Chosen strategy is simple_byte
  7427  018296  0A00               	xorlw	0	; case 0
  7428  018298  B4D8               	btfsc	status,2,c
  7429  01829A  D7E3               	goto	l228
  7430  01829C  0A01               	xorlw	1	; case 1
  7431  01829E  A4D8               	btfss	status,2,c
  7432  0182A0  0012               	return	
  7433  0182A2  D7EB               	goto	l230
  7434  0182A4                     __end_of_LED_Set:
  7435                           	opt stack 0
  7436                           tosu	equ	0xFFF
  7437                           tosh	equ	0xFFE
  7438                           tosl	equ	0xFFD
  7439                           pclath	equ	0xFFA
  7440                           tblptru	equ	0xFF8
  7441                           tblptrh	equ	0xFF7
  7442                           tblptrl	equ	0xFF6
  7443                           tablat	equ	0xFF5
  7444                           postinc0	equ	0xFEE
  7445                           wreg	equ	0xFE8
  7446                           postdec1	equ	0xFE5
  7447                           fsr1h	equ	0xFE2
  7448                           fsr1l	equ	0xFE1
  7449                           indf2	equ	0xFDF
  7450                           postinc2	equ	0xFDE
  7451                           postdec2	equ	0xFDD
  7452                           plusw2	equ	0xFDB
  7453                           fsr2h	equ	0xFDA
  7454                           fsr2l	equ	0xFD9
  7455                           status	equ	0xFD8
  7456                           
  7457 ;; *************** function _MXK_Dequeue *****************
  7458 ;; Defined at:
  7459 ;;		line 153 in file "Library/MXK.c"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;		None
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;		None
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  1    wreg      void 
  7466 ;; Registers used:
  7467 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;Total ram usage:        0 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; Hardware stack levels required when called:   12
  7480 ;; This function calls:
  7481 ;;		Absolute function
  7482 ;;		_Motor_Step
  7483 ;; This function is called by:
  7484 ;;		_main
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           	psect	text15
  7489  0186F4                     __ptext15:
  7490                           	opt stack 0
  7491  0186F4                     _MXK_Dequeue:
  7492                           	opt stack 18
  7493                           
  7494                           ;MXK.c: 155: if (lQueue)
  7495                           
  7496                           ;incstack = 0
  7497  0186F4  5029               	movf	_lQueue,w,c	;volatile
  7498  0186F6  102A               	iorwf	_lQueue+1,w,c	;volatile
  7499  0186F8  102B               	iorwf	_lQueue+2,w,c	;volatile
  7500  0186FA  B4D8               	btfsc	status,2,c
  7501  0186FC  D00C               	goto	u15479
  7502                           
  7503                           ;MXK.c: 156: lQueue();
  7504  0186FE  D801               	call	u15478
  7505  018700  D00A               	goto	u15479
  7506  018702                     u15478:
  7507  018702  0005               	push	
  7508  018704  6EFA               	movwf	pclath,c
  7509  018706  5029               	movf	_lQueue,w,c	;volatile
  7510  018708  6EFD               	movwf	tosl,c
  7511  01870A  502A               	movf	_lQueue+1,w,c	;volatile
  7512  01870C  6EFE               	movwf	tosh,c
  7513  01870E  502B               	movf	_lQueue+2,w,c	;volatile
  7514  018710  6EFF               	movwf	tosu,c
  7515  018712  50FA               	movf	pclath,w,c
  7516  018714  0012               	return		;indir
  7517  018716                     u15479:
  7518                           
  7519                           ;MXK.c: 157: lQueue = 0;
  7520  018716  0E00               	movlw	0
  7521  018718  6E29               	movwf	_lQueue,c	;volatile
  7522  01871A  0E00               	movlw	0
  7523  01871C  6E2A               	movwf	_lQueue+1,c	;volatile
  7524  01871E  0E00               	movlw	0
  7525  018720  6E2B               	movwf	_lQueue+2,c	;volatile
  7526  018722  0012               	return		;funcret
  7527  018724                     __end_of_MXK_Dequeue:
  7528                           	opt stack 0
  7529                           tosu	equ	0xFFF
  7530                           tosh	equ	0xFFE
  7531                           tosl	equ	0xFFD
  7532                           pclath	equ	0xFFA
  7533                           tblptru	equ	0xFF8
  7534                           tblptrh	equ	0xFF7
  7535                           tblptrl	equ	0xFF6
  7536                           tablat	equ	0xFF5
  7537                           postinc0	equ	0xFEE
  7538                           wreg	equ	0xFE8
  7539                           postdec1	equ	0xFE5
  7540                           fsr1h	equ	0xFE2
  7541                           fsr1l	equ	0xFE1
  7542                           indf2	equ	0xFDF
  7543                           postinc2	equ	0xFDE
  7544                           postdec2	equ	0xFDD
  7545                           plusw2	equ	0xFDB
  7546                           fsr2h	equ	0xFDA
  7547                           fsr2l	equ	0xFD9
  7548                           status	equ	0xFD8
  7549                           
  7550 ;; *************** function _Motor_Step *****************
  7551 ;; Defined at:
  7552 ;;		line 75 in file "Library/Motor.c"
  7553 ;; Parameters:    Size  Location     Type
  7554 ;;		None
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;		None
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  1    wreg      void 
  7559 ;; Registers used:
  7560 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7568 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7569 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7570 ;;Total ram usage:        2 bytes
  7571 ;; Hardware stack levels used:    1
  7572 ;; Hardware stack levels required when called:   11
  7573 ;; This function calls:
  7574 ;;		_MXK_Queue
  7575 ;;		_MXK_Release
  7576 ;;		_MXK_SwitchTo
  7577 ;;		_Port_SetPin
  7578 ;;		_Timer0_Restart
  7579 ;;		_Timer0_Stop
  7580 ;; This function is called by:
  7581 ;;		_Motor_Init
  7582 ;;		_Timer0_ISR
  7583 ;;		_MXK_Dequeue
  7584 ;; This function uses a non-reentrant model
  7585 ;;
  7586                           
  7587                           	psect	text16
  7588  0164C4                     __ptext16:
  7589                           	opt stack 0
  7590  0164C4                     _Motor_Step:
  7591                           	opt stack 0
  7592                           
  7593                           ;Skip over the trampoline to the duplicate function for level 2
  7594  0164C4  B251               	btfsc	btemp,1,c
  7595  0164C6  EF68  F0B3         	goto	i2_Motor_Step
  7596  0164CA                     _Motor_Step$intlevel0:
  7597                           	opt stack 18
  7598                           
  7599                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
  7600                           
  7601                           ;incstack = 0
  7602  0164CA  EE20 F004          	lfsr	2,4
  7603  0164CE  5038               	movf	_lMotor,w,c
  7604  0164D0  26D9               	addwf	fsr2l,f,c
  7605  0164D2  5039               	movf	_lMotor+1,w,c
  7606  0164D4  22DA               	addwfc	fsr2h,f,c
  7607  0164D6  50DF               	movf	indf2,w,c
  7608  0164D8  EC9E  F0C2         	call	_MXK_SwitchTo
  7609  0164DC  0900               	iorlw	0
  7610  0164DE  B4D8               	btfsc	status,2,c
  7611  0164E0  D06E               	goto	l1627
  7612                           
  7613                           ;Motor.c: 78: {
  7614                           ;Motor.c: 79: if (lMotor->mDelta != 0)
  7615  0164E2  C038  FFD9         	movff	_lMotor,fsr2l
  7616  0164E6  C039  FFDA         	movff	_lMotor+1,fsr2h
  7617  0164EA  50DE               	movf	postinc2,w,c
  7618  0164EC  10DE               	iorwf	postinc2,w,c
  7619  0164EE  B4D8               	btfsc	status,2,c
  7620  0164F0  D061               	goto	l1628
  7621                           
  7622                           ;Motor.c: 80: {
  7623                           ;Motor.c: 82: if (lMotor->mDelta > 0)
  7624  0164F2  C038  FFD9         	movff	_lMotor,fsr2l
  7625  0164F6  C039  FFDA         	movff	_lMotor+1,fsr2h
  7626  0164FA  0E01               	movlw	1
  7627  0164FC  BEDB               	btfsc	plusw2,7,c
  7628  0164FE  D023               	goto	l1629
  7629  016500  0E01               	movlw	1
  7630  016502  50DB               	movf	plusw2,w,c
  7631  016504  E103               	bnz	u13690
  7632  016506  04DE               	decf	postinc2,w,c
  7633  016508  A0D8               	btfss	status,0,c
  7634  01650A  D01D               	goto	l1629
  7635  01650C                     u13690:
  7636                           
  7637                           ;Motor.c: 83: {
  7638                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
  7639  01650C  C038  FFD9         	movff	_lMotor,fsr2l
  7640  016510  C039  FFDA         	movff	_lMotor+1,fsr2h
  7641  016514  28DE               	incf	postinc2,w,c
  7642  016516  E104               	bnz	u13700
  7643  016518  0E7F               	movlw	127
  7644  01651A  18DE               	xorwf	postinc2,w,c
  7645  01651C  B4D8               	btfsc	status,2,c
  7646  01651E  D007               	goto	l1630
  7647  016520                     u13700:
  7648                           
  7649                           ;Motor.c: 85: lMotor->mDelta --;
  7650  016520  C038  FFD9         	movff	_lMotor,fsr2l
  7651  016524  C039  FFDA         	movff	_lMotor+1,fsr2h
  7652  016528  06DE               	decf	postinc2,f,c
  7653  01652A  0E00               	movlw	0
  7654  01652C  5ADD               	subwfb	postdec2,f,c
  7655  01652E                     l1630:
  7656                           
  7657                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
  7658  01652E  0E6C               	movlw	low _PortE
  7659  016530  0100               	movlb	0	; () banked
  7660  016532  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7661  016534  0E01               	movlw	high _PortE
  7662  016536  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7663  016538  0E00               	movlw	0
  7664  01653A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7665  01653C  0E01               	movlw	1
  7666  01653E  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7667  016540  EC96  F0B5         	call	_Port_SetPin	;wreg free
  7668                           
  7669                           ;Motor.c: 88: }
  7670  016544  D01C               	goto	l1631
  7671  016546                     l1629:
  7672                           
  7673                           ;Motor.c: 89: else
  7674                           ;Motor.c: 90: {
  7675                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
  7676  016546  C038  FFD9         	movff	_lMotor,fsr2l
  7677  01654A  C039  FFDA         	movff	_lMotor+1,fsr2h
  7678  01654E  04DE               	decf	postinc2,w,c
  7679  016550  E104               	bnz	u13710
  7680  016552  0E80               	movlw	128
  7681  016554  18DE               	xorwf	postinc2,w,c
  7682  016556  B4D8               	btfsc	status,2,c
  7683  016558  D007               	goto	l1632
  7684  01655A                     u13710:
  7685                           
  7686                           ;Motor.c: 92: lMotor->mDelta ++;
  7687  01655A  C038  FFD9         	movff	_lMotor,fsr2l
  7688  01655E  C039  FFDA         	movff	_lMotor+1,fsr2h
  7689  016562  2ADE               	incf	postinc2,f,c
  7690  016564  0E00               	movlw	0
  7691  016566  22DD               	addwfc	postdec2,f,c
  7692  016568                     l1632:
  7693                           
  7694                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
  7695  016568  0E6C               	movlw	low _PortE
  7696  01656A  0100               	movlb	0	; () banked
  7697  01656C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7698  01656E  0E01               	movlw	high _PortE
  7699  016570  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7700  016572  0E00               	movlw	0
  7701  016574  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7702  016576  0E00               	movlw	0
  7703  016578  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7704  01657A  EC96  F0B5         	call	_Port_SetPin	;wreg free
  7705  01657E                     l1631:
  7706                           
  7707                           ;Motor.c: 95: }
  7708                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
  7709  01657E  0E6C               	movlw	low _PortE
  7710  016580  0100               	movlb	0	; () banked
  7711  016582  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7712  016584  0E01               	movlw	high _PortE
  7713  016586  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7714  016588  0E01               	movlw	1
  7715  01658A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7716  01658C  0E01               	movlw	1
  7717  01658E  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7718  016590  EC96  F0B5         	call	_Port_SetPin	;wreg free
  7719                           
  7720                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
  7721  016594  0E6C               	movlw	low _PortE
  7722  016596  0100               	movlb	0	; () banked
  7723  016598  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7724  01659A  0E01               	movlw	high _PortE
  7725  01659C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7726  01659E  0E01               	movlw	1
  7727  0165A0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7728  0165A2  0E00               	movlw	0
  7729  0165A4  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7730  0165A6  EC96  F0B5         	call	_Port_SetPin	;wreg free
  7731                           
  7732                           ;Motor.c: 101: MXK_Release();
  7733  0165AA  EC7C  F0C5         	call	_MXK_Release	;wreg free
  7734                           
  7735                           ;Motor.c: 102: Timer0_Restart();
  7736  0165AE  EC35  F0C6         	call	_Timer0_Restart	;wreg free
  7737                           
  7738                           ;Motor.c: 103: return;
  7739  0165B2  0012               	return	
  7740  0165B4                     l1628:
  7741                           
  7742                           ;Motor.c: 104: }
  7743                           ;Motor.c: 105: MXK_Release();
  7744  0165B4  EC7C  F0C5         	call	_MXK_Release	;wreg free
  7745                           
  7746                           ;Motor.c: 106: Timer0_Stop();
  7747  0165B8  EC58  F0C6         	call	_Timer0_Stop	;wreg free
  7748                           
  7749                           ;Motor.c: 107: return;
  7750  0165BC  0012               	return	
  7751  0165BE                     l1627:
  7752                           
  7753                           ;Motor.c: 108: }
  7754                           ;Motor.c: 111: MXK_Queue(lStepFunction);
  7755  0165BE  C10B  F060         	movff	_lStepFunction,MXK_Queue@pCallback
  7756  0165C2  C10C  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
  7757  0165C6  C10D  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
  7758  0165CA  EC19  F0C6         	call	_MXK_Queue	;wreg free
  7759  0165CE  0012               	return		;funcret
  7760  0165D0                     __end_of_Motor_Step:
  7761                           	opt stack 0
  7762                           tosu	equ	0xFFF
  7763                           tosh	equ	0xFFE
  7764                           tosl	equ	0xFFD
  7765                           pclath	equ	0xFFA
  7766                           tblptru	equ	0xFF8
  7767                           tblptrh	equ	0xFF7
  7768                           tblptrl	equ	0xFF6
  7769                           tablat	equ	0xFF5
  7770                           postinc0	equ	0xFEE
  7771                           wreg	equ	0xFE8
  7772                           postdec1	equ	0xFE5
  7773                           fsr1h	equ	0xFE2
  7774                           fsr1l	equ	0xFE1
  7775                           indf2	equ	0xFDF
  7776                           postinc2	equ	0xFDE
  7777                           postdec2	equ	0xFDD
  7778                           plusw2	equ	0xFDB
  7779                           fsr2h	equ	0xFDA
  7780                           fsr2l	equ	0xFD9
  7781                           status	equ	0xFD8
  7782                           
  7783 ;; *************** function _Timer0_Stop *****************
  7784 ;; Defined at:
  7785 ;;		line 89 in file "Library/Timer0.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;		None
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;		None
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  1    wreg      void 
  7792 ;; Registers used:
  7793 ;;		None
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;Total ram usage:        0 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    7
  7806 ;; This function calls:
  7807 ;;		Nothing
  7808 ;; This function is called by:
  7809 ;;		_Motor_Step
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           	psect	text17
  7814  018CB0                     __ptext17:
  7815                           	opt stack 0
  7816  018CB0                     _Timer0_Stop:
  7817                           	opt stack 21
  7818                           
  7819                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
  7820                           
  7821                           ;incstack = 0
  7822  018CB0  9AF2               	bcf	intcon,5,c	;volatile
  7823                           
  7824                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
  7825  018CB2  94F2               	bcf	intcon,2,c	;volatile
  7826  018CB4  0012               	return		;funcret
  7827  018CB6                     __end_of_Timer0_Stop:
  7828                           	opt stack 0
  7829                           tosu	equ	0xFFF
  7830                           tosh	equ	0xFFE
  7831                           tosl	equ	0xFFD
  7832                           pclath	equ	0xFFA
  7833                           tblptru	equ	0xFF8
  7834                           tblptrh	equ	0xFF7
  7835                           tblptrl	equ	0xFF6
  7836                           tablat	equ	0xFF5
  7837                           intcon	equ	0xFF2
  7838                           postinc0	equ	0xFEE
  7839                           wreg	equ	0xFE8
  7840                           postdec1	equ	0xFE5
  7841                           fsr1h	equ	0xFE2
  7842                           fsr1l	equ	0xFE1
  7843                           indf2	equ	0xFDF
  7844                           postinc2	equ	0xFDE
  7845                           postdec2	equ	0xFDD
  7846                           plusw2	equ	0xFDB
  7847                           fsr2h	equ	0xFDA
  7848                           fsr2l	equ	0xFD9
  7849                           status	equ	0xFD8
  7850                           
  7851 ;; *************** function _Timer0_Restart *****************
  7852 ;; Defined at:
  7853 ;;		line 83 in file "Library/Timer0.c"
  7854 ;; Parameters:    Size  Location     Type
  7855 ;;		None
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;		None
  7858 ;; Return value:  Size  Location     Type
  7859 ;;                  1    wreg      void 
  7860 ;; Registers used:
  7861 ;;		None
  7862 ;; Tracked objects:
  7863 ;;		On entry : 0/0
  7864 ;;		On exit  : 0/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7871 ;;Total ram usage:        0 bytes
  7872 ;; Hardware stack levels used:    1
  7873 ;; Hardware stack levels required when called:    7
  7874 ;; This function calls:
  7875 ;;		Nothing
  7876 ;; This function is called by:
  7877 ;;		_Motor_Step
  7878 ;; This function uses a non-reentrant model
  7879 ;;
  7880                           
  7881                           	psect	text18
  7882  018C6A                     __ptext18:
  7883                           	opt stack 0
  7884  018C6A                     _Timer0_Restart:
  7885                           	opt stack 21
  7886                           
  7887                           ;Timer0.c: 85: TMR0 = COUNTER;
  7888                           
  7889                           ;incstack = 0
  7890  018C6A  C036  FFD6         	movff	_COUNTER,4054	;volatile
  7891  018C6E  C037  FFD7         	movff	_COUNTER+1,4055	;volatile
  7892                           
  7893                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
  7894  018C72  8AF2               	bsf	intcon,5,c	;volatile
  7895  018C74  0012               	return		;funcret
  7896  018C76                     __end_of_Timer0_Restart:
  7897                           	opt stack 0
  7898                           tosu	equ	0xFFF
  7899                           tosh	equ	0xFFE
  7900                           tosl	equ	0xFFD
  7901                           pclath	equ	0xFFA
  7902                           tblptru	equ	0xFF8
  7903                           tblptrh	equ	0xFF7
  7904                           tblptrl	equ	0xFF6
  7905                           tablat	equ	0xFF5
  7906                           intcon	equ	0xFF2
  7907                           postinc0	equ	0xFEE
  7908                           wreg	equ	0xFE8
  7909                           postdec1	equ	0xFE5
  7910                           fsr1h	equ	0xFE2
  7911                           fsr1l	equ	0xFE1
  7912                           indf2	equ	0xFDF
  7913                           postinc2	equ	0xFDE
  7914                           postdec2	equ	0xFDD
  7915                           plusw2	equ	0xFDB
  7916                           fsr2h	equ	0xFDA
  7917                           fsr2l	equ	0xFD9
  7918                           status	equ	0xFD8
  7919                           
  7920 ;; *************** function _MXK_SwitchTo *****************
  7921 ;; Defined at:
  7922 ;;		line 105 in file "Library/MXK.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;  pModule         1    wreg     enum E6927
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;  pModule         1    7[BANK0 ] enum E6927
  7927 ;;  CUR             1    6[BANK0 ] unsigned char 
  7928 ;; Return value:  Size  Location     Type
  7929 ;;                  1    wreg      unsigned char 
  7930 ;; Registers used:
  7931 ;;		wreg, status,2, status,0, cstack
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7938 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7941 ;;Total ram usage:        2 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; Hardware stack levels required when called:    8
  7944 ;; This function calls:
  7945 ;;		_delay_us
  7946 ;; This function is called by:
  7947 ;;		_Motor_Step
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           	psect	text19
  7952  01853C                     __ptext19:
  7953                           	opt stack 0
  7954  01853C                     _MXK_SwitchTo:
  7955                           	opt stack 20
  7956                           
  7957                           ;incstack = 0
  7958                           ;MXK_SwitchTo@pModule stored from wreg
  7959  01853C  0100               	movlb	0	; () banked
  7960  01853E  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
  7961                           
  7962                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
  7963  018540  5086               	movf	3974,w,c	;volatile
  7964  018542  0B0F               	andlw	15
  7965  018544  0100               	movlb	0	; () banked
  7966  018546  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
  7967                           
  7968                           ; BSR set to: 0
  7969                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
  7970  018548  504C               	movf	_Bus_State,w,c
  7971  01854A  A4D8               	btfss	status,2,c
  7972  01854C  D002               	goto	l1730
  7973                           
  7974                           ; BSR set to: 0
  7975                           ;MXK.c: 110: return 0;
  7976  01854E  0E00               	movlw	0
  7977                           
  7978                           ; BSR set to: 0
  7979  018550  0012               	return	
  7980  018552                     l1730:
  7981                           
  7982                           ; BSR set to: 0
  7983                           ;MXK.c: 112: Bus_State = eMXK_Busy;
  7984                           
  7985                           ; BSR set to: 0
  7986  018552  0E00               	movlw	0
  7987  018554  6E4C               	movwf	_Bus_State,c
  7988                           
  7989                           ; BSR set to: 0
  7990                           ;MXK.c: 114: if (CUR != pModule)
  7991  018556  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  7992  018558  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
  7993  01855A  B4D8               	btfsc	status,2,c
  7994  01855C  D00A               	goto	l1732
  7995                           
  7996                           ; BSR set to: 0
  7997                           ;MXK.c: 115: {
  7998                           ;MXK.c: 116: PORTG &= ~(0xF);
  7999  01855E  0EF0               	movlw	240
  8000  018560  1686               	andwf	3974,f,c	;volatile
  8001                           
  8002                           ;MXK.c: 117: PORTG |= pModule;
  8003  018562  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8004  018564  1286               	iorwf	3974,f,c	;volatile
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;MXK.c: 120: delay_us(10);
  8008  018566  0E00               	movlw	0
  8009  018568  6F61               	movwf	(delay_us@us+1)& (0+255),b
  8010  01856A  0E0A               	movlw	10
  8011  01856C  6F60               	movwf	delay_us@us& (0+255),b
  8012  01856E  EC9A  F0C1         	call	_delay_us	;wreg free
  8013  018572                     l1732:
  8014                           
  8015                           ;MXK.c: 121: }
  8016                           ;MXK.c: 122: return 1;
  8017  018572  0E01               	movlw	1
  8018  018574  0012               	return	
  8019  018576                     __end_of_MXK_SwitchTo:
  8020                           	opt stack 0
  8021                           tosu	equ	0xFFF
  8022                           tosh	equ	0xFFE
  8023                           tosl	equ	0xFFD
  8024                           pclath	equ	0xFFA
  8025                           tblptru	equ	0xFF8
  8026                           tblptrh	equ	0xFF7
  8027                           tblptrl	equ	0xFF6
  8028                           tablat	equ	0xFF5
  8029                           intcon	equ	0xFF2
  8030                           postinc0	equ	0xFEE
  8031                           wreg	equ	0xFE8
  8032                           postdec1	equ	0xFE5
  8033                           fsr1h	equ	0xFE2
  8034                           fsr1l	equ	0xFE1
  8035                           indf2	equ	0xFDF
  8036                           postinc2	equ	0xFDE
  8037                           postdec2	equ	0xFDD
  8038                           plusw2	equ	0xFDB
  8039                           fsr2h	equ	0xFDA
  8040                           fsr2l	equ	0xFD9
  8041                           status	equ	0xFD8
  8042                           
  8043 ;; *************** function _MXK_Release *****************
  8044 ;; Defined at:
  8045 ;;		line 130 in file "Library/MXK.c"
  8046 ;; Parameters:    Size  Location     Type
  8047 ;;		None
  8048 ;; Auto vars:     Size  Location     Type
  8049 ;;		None
  8050 ;; Return value:  Size  Location     Type
  8051 ;;                  1    wreg      unsigned char 
  8052 ;; Registers used:
  8053 ;;		wreg, status,2, status,0
  8054 ;; Tracked objects:
  8055 ;;		On entry : 0/0
  8056 ;;		On exit  : 0/0
  8057 ;;		Unchanged: 0/0
  8058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8063 ;;Total ram usage:        0 bytes
  8064 ;; Hardware stack levels used:    1
  8065 ;; Hardware stack levels required when called:    7
  8066 ;; This function calls:
  8067 ;;		Nothing
  8068 ;; This function is called by:
  8069 ;;		_Motor_Step
  8070 ;;		_main
  8071 ;; This function uses a non-reentrant model
  8072 ;;
  8073                           
  8074                           	psect	text20
  8075  018AF8                     __ptext20:
  8076                           	opt stack 0
  8077  018AF8                     _MXK_Release:
  8078                           	opt stack 23
  8079                           
  8080                           ;MXK.c: 132: Bus_State = eMXK_Idle;
  8081                           
  8082                           ;incstack = 0
  8083  018AF8  0E01               	movlw	1
  8084  018AFA  6E4C               	movwf	_Bus_State,c
  8085                           
  8086                           ;MXK.c: 134: if (lQueue != 0)
  8087  018AFC  5029               	movf	_lQueue,w,c	;volatile
  8088  018AFE  102A               	iorwf	_lQueue+1,w,c	;volatile
  8089  018B00  102B               	iorwf	_lQueue+2,w,c	;volatile
  8090  018B02  B4D8               	btfsc	status,2,c
  8091  018B04  D002               	goto	l1735
  8092                           
  8093                           ;MXK.c: 135: return 1;
  8094  018B06  0E01               	movlw	1
  8095  018B08  0012               	return	
  8096  018B0A                     l1735:
  8097                           
  8098                           ;MXK.c: 137: return 0;
  8099  018B0A  0E00               	movlw	0
  8100  018B0C  0012               	return	
  8101  018B0E                     __end_of_MXK_Release:
  8102                           	opt stack 0
  8103                           tosu	equ	0xFFF
  8104                           tosh	equ	0xFFE
  8105                           tosl	equ	0xFFD
  8106                           pclath	equ	0xFFA
  8107                           tblptru	equ	0xFF8
  8108                           tblptrh	equ	0xFF7
  8109                           tblptrl	equ	0xFF6
  8110                           tablat	equ	0xFF5
  8111                           intcon	equ	0xFF2
  8112                           postinc0	equ	0xFEE
  8113                           wreg	equ	0xFE8
  8114                           postdec1	equ	0xFE5
  8115                           fsr1h	equ	0xFE2
  8116                           fsr1l	equ	0xFE1
  8117                           indf2	equ	0xFDF
  8118                           postinc2	equ	0xFDE
  8119                           postdec2	equ	0xFDD
  8120                           plusw2	equ	0xFDB
  8121                           fsr2h	equ	0xFDA
  8122                           fsr2l	equ	0xFD9
  8123                           status	equ	0xFD8
  8124                           
  8125 ;; *************** function _MXK_Queue *****************
  8126 ;; Defined at:
  8127 ;;		line 144 in file "Library/MXK.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
  8130 ;;		 -> Absolute function(1), Motor_Step(1), 
  8131 ;; Auto vars:     Size  Location     Type
  8132 ;;		None
  8133 ;; Return value:  Size  Location     Type
  8134 ;;                  1    wreg      void 
  8135 ;; Registers used:
  8136 ;;		wreg, status,2, status,0
  8137 ;; Tracked objects:
  8138 ;;		On entry : 0/0
  8139 ;;		On exit  : 0/0
  8140 ;;		Unchanged: 0/0
  8141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8142 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8145 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8146 ;;Total ram usage:        3 bytes
  8147 ;; Hardware stack levels used:    1
  8148 ;; Hardware stack levels required when called:    7
  8149 ;; This function calls:
  8150 ;;		Nothing
  8151 ;; This function is called by:
  8152 ;;		_Motor_Step
  8153 ;; This function uses a non-reentrant model
  8154 ;;
  8155                           
  8156                           	psect	text21
  8157  018C32                     __ptext21:
  8158                           	opt stack 0
  8159  018C32                     _MXK_Queue:
  8160                           	opt stack 21
  8161                           
  8162                           ;MXK.c: 146: lQueue = pCallback;
  8163                           
  8164                           ;incstack = 0
  8165  018C32  C060  F029         	movff	MXK_Queue@pCallback,_lQueue	;volatile
  8166  018C36  C061  F02A         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
  8167  018C3A  C062  F02B         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
  8168  018C3E  0012               	return		;funcret
  8169  018C40                     __end_of_MXK_Queue:
  8170                           	opt stack 0
  8171                           tosu	equ	0xFFF
  8172                           tosh	equ	0xFFE
  8173                           tosl	equ	0xFFD
  8174                           pclath	equ	0xFFA
  8175                           tblptru	equ	0xFF8
  8176                           tblptrh	equ	0xFF7
  8177                           tblptrl	equ	0xFF6
  8178                           tablat	equ	0xFF5
  8179                           intcon	equ	0xFF2
  8180                           postinc0	equ	0xFEE
  8181                           wreg	equ	0xFE8
  8182                           postdec1	equ	0xFE5
  8183                           fsr1h	equ	0xFE2
  8184                           fsr1l	equ	0xFE1
  8185                           indf2	equ	0xFDF
  8186                           postinc2	equ	0xFDE
  8187                           postdec2	equ	0xFDD
  8188                           plusw2	equ	0xFDB
  8189                           fsr2h	equ	0xFDA
  8190                           fsr2l	equ	0xFD9
  8191                           status	equ	0xFD8
  8192                           
  8193 ;; *************** function _MXK_BlockSwitchTo *****************
  8194 ;; Defined at:
  8195 ;;		line 82 in file "Library/MXK.c"
  8196 ;; Parameters:    Size  Location     Type
  8197 ;;  pModule         1    wreg     enum E6927
  8198 ;; Auto vars:     Size  Location     Type
  8199 ;;  pModule         1    7[BANK0 ] enum E6927
  8200 ;;  CUR             1    6[BANK0 ] unsigned char 
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  1    wreg      unsigned char 
  8203 ;; Registers used:
  8204 ;;		wreg, status,2, status,0, cstack
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8211 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8213 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8214 ;;Total ram usage:        2 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    8
  8217 ;; This function calls:
  8218 ;;		_delay_us
  8219 ;; This function is called by:
  8220 ;;		_main
  8221 ;; This function uses a non-reentrant model
  8222 ;;
  8223                           
  8224                           	psect	text22
  8225  0185EA                     __ptext22:
  8226                           	opt stack 0
  8227  0185EA                     _MXK_BlockSwitchTo:
  8228                           	opt stack 22
  8229                           
  8230                           ;incstack = 0
  8231                           ;MXK_BlockSwitchTo@pModule stored from wreg
  8232  0185EA  0100               	movlb	0	; () banked
  8233  0185EC  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
  8234                           
  8235                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
  8236  0185EE  5086               	movf	3974,w,c	;volatile
  8237  0185F0  0B0F               	andlw	15
  8238  0185F2  0100               	movlb	0	; () banked
  8239  0185F4  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
  8240  0185F6                     
  8241                           ; BSR set to: 0
  8242                           
  8243                           ; BSR set to: 0
  8244  0185F6  504C               	movf	_Bus_State,w,c
  8245  0185F8  B4D8               	btfsc	status,2,c
  8246  0185FA  D7FD               	goto	l1724
  8247                           
  8248                           ;MXK.c: 88: Bus_State = eMXK_Busy;
  8249  0185FC  0E00               	movlw	0
  8250  0185FE  6E4C               	movwf	_Bus_State,c
  8251                           
  8252                           ;MXK.c: 90: if (CUR != pModule)
  8253  018600  0100               	movlb	0	; () banked
  8254  018602  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8255  018604  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
  8256  018606  B4D8               	btfsc	status,2,c
  8257  018608  D00A               	goto	l1726
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;MXK.c: 91: {
  8261                           ;MXK.c: 92: PORTG &= ~(0xF);
  8262  01860A  0EF0               	movlw	240
  8263  01860C  1686               	andwf	3974,f,c	;volatile
  8264                           
  8265                           ;MXK.c: 93: PORTG |= pModule;
  8266  01860E  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8267  018610  1286               	iorwf	3974,f,c	;volatile
  8268                           
  8269                           ; BSR set to: 0
  8270                           ;MXK.c: 96: delay_us(10);
  8271  018612  0E00               	movlw	0
  8272  018614  6F61               	movwf	(delay_us@us+1)& (0+255),b
  8273  018616  0E0A               	movlw	10
  8274  018618  6F60               	movwf	delay_us@us& (0+255),b
  8275  01861A  EC9A  F0C1         	call	_delay_us	;wreg free
  8276  01861E                     l1726:
  8277                           
  8278                           ;MXK.c: 97: }
  8279                           ;MXK.c: 98: return 1;
  8280  01861E  0E01               	movlw	1
  8281  018620  0012               	return	
  8282  018622                     __end_of_MXK_BlockSwitchTo:
  8283                           	opt stack 0
  8284                           tosu	equ	0xFFF
  8285                           tosh	equ	0xFFE
  8286                           tosl	equ	0xFFD
  8287                           pclath	equ	0xFFA
  8288                           tblptru	equ	0xFF8
  8289                           tblptrh	equ	0xFF7
  8290                           tblptrl	equ	0xFF6
  8291                           tablat	equ	0xFF5
  8292                           intcon	equ	0xFF2
  8293                           postinc0	equ	0xFEE
  8294                           wreg	equ	0xFE8
  8295                           postdec1	equ	0xFE5
  8296                           fsr1h	equ	0xFE2
  8297                           fsr1l	equ	0xFE1
  8298                           indf2	equ	0xFDF
  8299                           postinc2	equ	0xFDE
  8300                           postdec2	equ	0xFDD
  8301                           plusw2	equ	0xFDB
  8302                           fsr2h	equ	0xFDA
  8303                           fsr2l	equ	0xFD9
  8304                           status	equ	0xFD8
  8305                           
  8306 ;; *************** function _delay_us *****************
  8307 ;; Defined at:
  8308 ;;		line 255 in file "Library/Types.c"
  8309 ;; Parameters:    Size  Location     Type
  8310 ;;  us              2    0[BANK0 ] unsigned short 
  8311 ;; Auto vars:     Size  Location     Type
  8312 ;;  u               4    2[BANK0 ] unsigned long 
  8313 ;; Return value:  Size  Location     Type
  8314 ;;                  1    wreg      void 
  8315 ;; Registers used:
  8316 ;;		wreg, status,2, status,0
  8317 ;; Tracked objects:
  8318 ;;		On entry : 0/0
  8319 ;;		On exit  : 0/0
  8320 ;;		Unchanged: 0/0
  8321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8322 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8326 ;;Total ram usage:        6 bytes
  8327 ;; Hardware stack levels used:    1
  8328 ;; Hardware stack levels required when called:    7
  8329 ;; This function calls:
  8330 ;;		Nothing
  8331 ;; This function is called by:
  8332 ;;		_MXK_BlockSwitchTo
  8333 ;;		_MXK_SwitchTo
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337                           	psect	text23
  8338  018334                     __ptext23:
  8339                           	opt stack 0
  8340  018334                     _delay_us:
  8341                           	opt stack 20
  8342                           
  8343                           ;Types.c: 256: unsigned long u;
  8344                           ;Types.c: 257: while (us--) {
  8345                           
  8346                           ;incstack = 0
  8347  018334  D018               	goto	u12890
  8348  018336                     l15439:
  8349                           
  8350                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
  8351  018336  0E00               	movlw	0
  8352  018338  0100               	movlb	0	; () banked
  8353  01833A  6F62               	movwf	delay_us@u& (0+255),b
  8354  01833C  0E00               	movlw	0
  8355  01833E  6F63               	movwf	(delay_us@u+1)& (0+255),b
  8356  018340  0E00               	movlw	0
  8357  018342  6F64               	movwf	(delay_us@u+2)& (0+255),b
  8358  018344  0E00               	movlw	0
  8359  018346  6F65               	movwf	(delay_us@u+3)& (0+255),b
  8360  018348                     l15441:
  8361                           
  8362                           ; BSR set to: 0
  8363  018348  5162               	movf	delay_us@u& (0+255),w,b
  8364  01834A  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
  8365  01834C  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
  8366  01834E  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
  8367  018350  A4D8               	btfss	status,2,c
  8368  018352  D009               	goto	u12890
  8369                           
  8370                           ; BSR set to: 0
  8371                           
  8372                           ; BSR set to: 0
  8373  018354  F000               	nop		; ;# 
  8374  018356  0E01               	movlw	1
  8375  018358  0100               	movlb	0	; () banked
  8376  01835A  2762               	addwf	delay_us@u& (0+255),f,b
  8377  01835C  0E00               	movlw	0
  8378  01835E  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
  8379  018360  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
  8380  018362  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
  8381  018364  D7F1               	goto	l15441
  8382  018366                     u12890:
  8383                           
  8384                           ; BSR set to: 0
  8385                           
  8386                           ; BSR set to: 0
  8387  018366  0100               	movlb	0	; () banked
  8388  018368  0760               	decf	delay_us@us& (0+255),f,b
  8389  01836A  A0D8               	btfss	status,0,c
  8390  01836C  0761               	decf	(delay_us@us+1)& (0+255),f,b
  8391  01836E  2960               	incf	delay_us@us& (0+255),w,b
  8392  018370  E1E2               	bnz	l15439
  8393  018372  2961               	incf	(delay_us@us+1)& (0+255),w,b
  8394  018374  B4D8               	btfsc	status,2,c
  8395  018376  0012               	return	
  8396  018378  D7DE               	goto	l832
  8397  01837A                     __end_of_delay_us:
  8398                           	opt stack 0
  8399                           tosu	equ	0xFFF
  8400                           tosh	equ	0xFFE
  8401                           tosl	equ	0xFFD
  8402                           pclath	equ	0xFFA
  8403                           tblptru	equ	0xFF8
  8404                           tblptrh	equ	0xFF7
  8405                           tblptrl	equ	0xFF6
  8406                           tablat	equ	0xFF5
  8407                           intcon	equ	0xFF2
  8408                           postinc0	equ	0xFEE
  8409                           wreg	equ	0xFE8
  8410                           postdec1	equ	0xFE5
  8411                           fsr1h	equ	0xFE2
  8412                           fsr1l	equ	0xFE1
  8413                           indf2	equ	0xFDF
  8414                           postinc2	equ	0xFDE
  8415                           postdec2	equ	0xFDD
  8416                           plusw2	equ	0xFDB
  8417                           fsr2h	equ	0xFDA
  8418                           fsr2l	equ	0xFD9
  8419                           status	equ	0xFD8
  8420                           
  8421 ;; *************** function _LCD_Init *****************
  8422 ;; Defined at:
  8423 ;;		line 172 in file "Library/LCD.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;		None
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;  i               2   55[BANK0 ] unsigned short 
  8428 ;; Return value:  Size  Location     Type
  8429 ;;                  1    wreg      void 
  8430 ;; Registers used:
  8431 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8438 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8439 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8441 ;;Total ram usage:        4 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:   15
  8444 ;; This function calls:
  8445 ;;		_Configure_GPIOs
  8446 ;;		_LCD_Fill
  8447 ;;		_LCD_Write
  8448 ;;		_Set_Rotation
  8449 ;;		_delay_ms
  8450 ;; This function is called by:
  8451 ;;		_main
  8452 ;; This function uses a non-reentrant model
  8453 ;;
  8454                           
  8455                           	psect	text24
  8456  015C54                     __ptext24:
  8457                           	opt stack 0
  8458  015C54                     _LCD_Init:
  8459                           	opt stack 15
  8460                           
  8461                           ;LCD.c: 174: UINT16 i;
  8462                           ;LCD.c: 175: Configure_GPIOs();
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;incstack = 0
  8466  015C54  EC4F  F0BE         	call	_Configure_GPIOs	;wreg free
  8467                           
  8468                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  8469  015C58  0E00               	movlw	0
  8470  015C5A  0100               	movlb	0	; () banked
  8471  015C5C  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
  8472  015C5E  0E00               	movlw	0
  8473  015C60  6F97               	movwf	LCD_Init@i& (0+255),b
  8474                           
  8475                           ; BSR set to: 0
  8476  015C62  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  8477  015C64  E17D               	bnz	u13810
  8478  015C66  0E59               	movlw	89
  8479  015C68  5D97               	subwf	LCD_Init@i& (0+255),w,b
  8480  015C6A  B0D8               	btfsc	status,0,c
  8481  015C6C  D079               	goto	u13810
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;LCD.c: 178: {
  8485                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  8486                           
  8487                           ; BSR set to: 0
  8488                           
  8489                           ; BSR set to: 0
  8490  015C6E  90D8               	bcf	status,0,c
  8491  015C70  3597               	rlcf	LCD_Init@i& (0+255),w,b
  8492  015C72  6EF6               	movwf	tblptrl,c
  8493  015C74  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8494  015C76  6EF7               	movwf	tblptrh,c
  8495  015C78  0E43               	movlw	low _InitList
  8496  015C7A  26F6               	addwf	tblptrl,f,c
  8497  015C7C  0EFB               	movlw	high _InitList
  8498  015C7E  22F7               	addwfc	tblptrh,f,c
  8499  015C80                     	if	1	;There are 3 active tblptr bytes
  8500  015C80  6AF8               	clrf	tblptru,c
  8501  015C82  0E00               	movlw	low (__mediumconst shr (0+16))
  8502  015C84  22F8               	addwfc	tblptru,f,c
  8503  015C86                     	endif
  8504  015C86  0009               	tblrd		*+
  8505  015C88  0E80               	movlw	128
  8506  015C8A  18F5               	xorwf	tablat,w,c
  8507  015C8C  0009               	tblrd		*+
  8508  015C8E  10F5               	iorwf	tablat,w,c
  8509  015C90  A4D8               	btfss	status,2,c
  8510  015C92  D01D               	goto	l87
  8511                           
  8512                           ; BSR set to: 0
  8513  015C94  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  8514  015C96  E11B               	bnz	l16407
  8515  015C98  0E58               	movlw	88
  8516  015C9A  5D97               	subwf	LCD_Init@i& (0+255),w,b
  8517  015C9C  B0D8               	btfsc	status,0,c
  8518  015C9E  D017               	goto	l87
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;LCD.c: 180: delay_ms(InitList[++i]);
  8522  015CA0  4B97               	infsnz	LCD_Init@i& (0+255),f,b
  8523  015CA2  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
  8524  015CA4  90D8               	bcf	status,0,c
  8525  015CA6  3597               	rlcf	LCD_Init@i& (0+255),w,b
  8526  015CA8  6EF6               	movwf	tblptrl,c
  8527  015CAA  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8528  015CAC  6EF7               	movwf	tblptrh,c
  8529  015CAE  0E43               	movlw	low _InitList
  8530  015CB0  26F6               	addwf	tblptrl,f,c
  8531  015CB2  0EFB               	movlw	high _InitList
  8532  015CB4  22F7               	addwfc	tblptrh,f,c
  8533  015CB6                     	if	1	;There are 3 active tblptr bytes
  8534  015CB6  6AF8               	clrf	tblptru,c
  8535  015CB8  0E00               	movlw	low (__mediumconst shr (0+16))
  8536  015CBA  22F8               	addwfc	tblptru,f,c
  8537  015CBC                     	endif
  8538  015CBC  0009               	tblrd		*+
  8539  015CBE  CFF5 F060          	movff	tablat,delay_ms@ms
  8540  015CC2  000A               	tblrd		*-
  8541  015CC4  CFF5 F061          	movff	tablat,delay_ms@ms+1
  8542  015CC8  ECAD  F0BE         	call	_delay_ms	;wreg free
  8543  015CCC  D043               	goto	l90
  8544  015CCE                     l87:
  8545  015CCE                     l16407:
  8546                           
  8547                           ;LCD.c: 181: else
  8548                           ;LCD.c: 182: {
  8549                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  8550  015CCE  90D8               	bcf	status,0,c
  8551  015CD0  0100               	movlb	0	; () banked
  8552  015CD2  3597               	rlcf	LCD_Init@i& (0+255),w,b
  8553  015CD4  6EF6               	movwf	tblptrl,c
  8554  015CD6  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8555  015CD8  6EF7               	movwf	tblptrh,c
  8556  015CDA  0E43               	movlw	low _InitList
  8557  015CDC  26F6               	addwf	tblptrl,f,c
  8558  015CDE  0EFB               	movlw	high _InitList
  8559  015CE0  22F7               	addwfc	tblptrh,f,c
  8560  015CE2                     	if	1	;There are 3 active tblptr bytes
  8561  015CE2  6AF8               	clrf	tblptru,c
  8562  015CE4  0E00               	movlw	low (__mediumconst shr (0+16))
  8563  015CE6  22F8               	addwfc	tblptru,f,c
  8564  015CE8                     	endif
  8565  015CE8  0009               	tblrd		*+
  8566  015CEA  0E00               	movlw	0
  8567  015CEC  5EF5               	subwf	tablat,f,c
  8568  015CEE  0009               	tblrd		*+
  8569  015CF0  0E01               	movlw	1
  8570  015CF2  5AF5               	subwfb	tablat,f,c
  8571  015CF4  A0D8               	btfss	status,0,c
  8572  015CF6  D01B               	goto	l89
  8573                           
  8574                           ; BSR set to: 0
  8575  015CF8  0E00               	movlw	0
  8576  015CFA  6F63               	movwf	LCD_Write@mode& (0+255),b
  8577  015CFC  90D8               	bcf	status,0,c
  8578  015CFE  3597               	rlcf	LCD_Init@i& (0+255),w,b
  8579  015D00  6EF6               	movwf	tblptrl,c
  8580  015D02  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8581  015D04  6EF7               	movwf	tblptrh,c
  8582  015D06  0E43               	movlw	low _InitList
  8583  015D08  26F6               	addwf	tblptrl,f,c
  8584  015D0A  0EFB               	movlw	high _InitList
  8585  015D0C  22F7               	addwfc	tblptrh,f,c
  8586  015D0E                     	if	1	;There are 3 active tblptr bytes
  8587  015D0E  6AF8               	clrf	tblptru,c
  8588  015D10  0E00               	movlw	low (__mediumconst shr (0+16))
  8589  015D12  22F8               	addwfc	tblptru,f,c
  8590  015D14                     	endif
  8591  015D14  0009               	tblrd		*+
  8592  015D16  CFF5 F095          	movff	tablat,??_LCD_Init
  8593  015D1A  0009               	tblrd		*+
  8594  015D1C  CFF5 F096          	movff	tablat,??_LCD_Init+1
  8595  015D20  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
  8596  015D24  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
  8597  015D26  5195               	movf	??_LCD_Init& (0+255),w,b
  8598  015D28  ECD3  F0C4         	call	_LCD_Write
  8599  015D2C  D013               	goto	l90
  8600  015D2E                     l89:
  8601                           
  8602                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
  8603  015D2E  0E01               	movlw	1
  8604  015D30  0100               	movlb	0	; () banked
  8605  015D32  6F63               	movwf	LCD_Write@mode& (0+255),b
  8606  015D34  90D8               	bcf	status,0,c
  8607  015D36  3597               	rlcf	LCD_Init@i& (0+255),w,b
  8608  015D38  6EF6               	movwf	tblptrl,c
  8609  015D3A  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8610  015D3C  6EF7               	movwf	tblptrh,c
  8611  015D3E  0E43               	movlw	low _InitList
  8612  015D40  26F6               	addwf	tblptrl,f,c
  8613  015D42  0EFB               	movlw	high _InitList
  8614  015D44  22F7               	addwfc	tblptrh,f,c
  8615  015D46                     	if	1	;There are 3 active tblptr bytes
  8616  015D46  6AF8               	clrf	tblptru,c
  8617  015D48  0E00               	movlw	low (__mediumconst shr (0+16))
  8618  015D4A  22F8               	addwfc	tblptru,f,c
  8619  015D4C                     	endif
  8620  015D4C  0008               	tblrd		*
  8621  015D4E  50F5               	movf	tablat,w,c
  8622  015D50  ECD3  F0C4         	call	_LCD_Write
  8623  015D54                     l90:
  8624  015D54  0100               	movlb	0	; () banked
  8625  015D56  4B97               	infsnz	LCD_Init@i& (0+255),f,b
  8626  015D58  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
  8627                           
  8628                           ; BSR set to: 0
  8629  015D5A  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  8630  015D5C  E101               	bnz	l16417
  8631  015D5E  D783               	goto	L8
  8632  015D60                     u13810:
  8633  015D60                     l16417:
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;LCD.c: 185: }
  8637                           ;LCD.c: 186: }
  8638                           ;LCD.c: 187: delay_ms(100);
  8639  015D60  0E00               	movlw	0
  8640  015D62  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  8641  015D64  0E64               	movlw	100
  8642  015D66  6F60               	movwf	delay_ms@ms& (0+255),b
  8643  015D68  ECAD  F0BE         	call	_delay_ms	;wreg free
  8644                           
  8645                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
  8646  015D6C  0E00               	movlw	0
  8647  015D6E  0100               	movlb	0	; () banked
  8648  015D70  6F63               	movwf	LCD_Write@mode& (0+255),b
  8649  015D72  0E29               	movlw	41
  8650  015D74  ECD3  F0C4         	call	_LCD_Write
  8651                           
  8652                           ;LCD.c: 189: Set_Rotation(1);
  8653  015D78  0E01               	movlw	1
  8654  015D7A  EC79  F0B8         	call	_Set_Rotation
  8655                           
  8656                           ;LCD.c: 191: delay_ms(100);
  8657  015D7E  0E00               	movlw	0
  8658  015D80  0100               	movlb	0	; () banked
  8659  015D82  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  8660  015D84  0E64               	movlw	100
  8661  015D86  6F60               	movwf	delay_ms@ms& (0+255),b
  8662  015D88  ECAD  F0BE         	call	_delay_ms	;wreg free
  8663                           
  8664                           ;LCD.c: 192: LCD_Fill(0x0000);
  8665  015D8C  0E00               	movlw	0
  8666  015D8E  0100               	movlb	0	; () banked
  8667  015D90  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
  8668  015D92  0E00               	movlw	0
  8669  015D94  6F69               	movwf	LCD_Fill@pColour& (0+255),b
  8670  015D96  EC52  F0C1         	call	_LCD_Fill	;wreg free
  8671  015D9A  0012               	return		;funcret
  8672  015D9C                     __end_of_LCD_Init:
  8673                           	opt stack 0
  8674                           tosu	equ	0xFFF
  8675                           tosh	equ	0xFFE
  8676                           tosl	equ	0xFFD
  8677                           pclath	equ	0xFFA
  8678                           tblptru	equ	0xFF8
  8679                           tblptrh	equ	0xFF7
  8680                           tblptrl	equ	0xFF6
  8681                           tablat	equ	0xFF5
  8682                           intcon	equ	0xFF2
  8683                           postinc0	equ	0xFEE
  8684                           wreg	equ	0xFE8
  8685                           postdec1	equ	0xFE5
  8686                           fsr1h	equ	0xFE2
  8687                           fsr1l	equ	0xFE1
  8688                           indf2	equ	0xFDF
  8689                           postinc2	equ	0xFDE
  8690                           postdec2	equ	0xFDD
  8691                           plusw2	equ	0xFDB
  8692                           fsr2h	equ	0xFDA
  8693                           fsr2l	equ	0xFD9
  8694                           status	equ	0xFD8
  8695                           
  8696 ;; *************** function _Set_Rotation *****************
  8697 ;; Defined at:
  8698 ;;		line 248 in file "Library/LCD.c"
  8699 ;; Parameters:    Size  Location     Type
  8700 ;;  m               1    wreg     unsigned char 
  8701 ;; Auto vars:     Size  Location     Type
  8702 ;;  m               1    5[BANK0 ] unsigned char 
  8703 ;;  rotation        1    6[BANK0 ] unsigned char 
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  1    wreg      void 
  8706 ;; Registers used:
  8707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8714 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;Total ram usage:        2 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    9
  8720 ;; This function calls:
  8721 ;;		_LCD_Write
  8722 ;; This function is called by:
  8723 ;;		_LCD_Init
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           	psect	text25
  8728  0170F2                     __ptext25:
  8729                           	opt stack 0
  8730  0170F2                     _Set_Rotation:
  8731                           	opt stack 20
  8732                           
  8733                           ;incstack = 0
  8734                           ;Set_Rotation@m stored from wreg
  8735  0170F2  0100               	movlb	0	; () banked
  8736  0170F4  6F65               	movwf	Set_Rotation@m& (0+255),b
  8737                           
  8738                           ;LCD.c: 250: UINT8 rotation = 0x00;
  8739  0170F6  0E00               	movlw	0
  8740  0170F8  0100               	movlb	0	; () banked
  8741  0170FA  6F66               	movwf	Set_Rotation@rotation& (0+255),b
  8742                           
  8743                           ; BSR set to: 0
  8744                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
  8745  0170FC  0E00               	movlw	0
  8746  0170FE  6F63               	movwf	LCD_Write@mode& (0+255),b
  8747  017100  0E36               	movlw	54
  8748  017102  ECD3  F0C4         	call	_LCD_Write
  8749                           
  8750                           ;LCD.c: 253: rotation = (m % 4);
  8751  017106  0100               	movlb	0	; () banked
  8752  017108  5165               	movf	Set_Rotation@m& (0+255),w,b
  8753  01710A  0B03               	andlw	3
  8754  01710C  6F66               	movwf	Set_Rotation@rotation& (0+255),b
  8755                           
  8756                           ;LCD.c: 255: switch(rotation)
  8757  01710E  D02B               	goto	l117
  8758  017110                     
  8759                           ; BSR set to: 0
  8760                           ;LCD.c: 258: {
  8761                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
  8762                           
  8763                           ; BSR set to: 0
  8764  017110  0E01               	movlw	1
  8765  017112  6F63               	movwf	LCD_Write@mode& (0+255),b
  8766  017114  0EC8               	movlw	200
  8767  017116  ECD3  F0C4         	call	_LCD_Write
  8768                           
  8769                           ;LCD.c: 260: w = 128;
  8770  01711A  0E80               	movlw	128
  8771  01711C  6E50               	movwf	_w,c
  8772                           
  8773                           ;LCD.c: 261: l = 128;
  8774  01711E  0E80               	movlw	128
  8775  017120  6E4F               	movwf	_l,c
  8776                           
  8777                           ;LCD.c: 262: break;
  8778  017122  0012               	return	
  8779  017124                     
  8780                           ;LCD.c: 265: {
  8781                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
  8782  017124  0E01               	movlw	1
  8783  017126  0100               	movlb	0	; () banked
  8784  017128  6F63               	movwf	LCD_Write@mode& (0+255),b
  8785  01712A  0EA8               	movlw	168
  8786  01712C  ECD3  F0C4         	call	_LCD_Write
  8787                           
  8788                           ;LCD.c: 267: w = 128;
  8789  017130  0E80               	movlw	128
  8790  017132  6E50               	movwf	_w,c
  8791                           
  8792                           ;LCD.c: 268: l = 128;
  8793  017134  0E80               	movlw	128
  8794  017136  6E4F               	movwf	_l,c
  8795                           
  8796                           ;LCD.c: 269: break;
  8797  017138  0012               	return	
  8798  01713A                     
  8799                           ;LCD.c: 272: {
  8800                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
  8801  01713A  0E01               	movlw	1
  8802  01713C  0100               	movlb	0	; () banked
  8803  01713E  6F63               	movwf	LCD_Write@mode& (0+255),b
  8804  017140  0E08               	movlw	8
  8805  017142  ECD3  F0C4         	call	_LCD_Write
  8806                           
  8807                           ;LCD.c: 274: w = 128;
  8808  017146  0E80               	movlw	128
  8809  017148  6E50               	movwf	_w,c
  8810                           
  8811                           ;LCD.c: 275: l = 128;
  8812  01714A  0E80               	movlw	128
  8813  01714C  6E4F               	movwf	_l,c
  8814                           
  8815                           ;LCD.c: 276: break;
  8816  01714E  0012               	return	
  8817  017150                     
  8818                           ;LCD.c: 279: {
  8819                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
  8820  017150  0E01               	movlw	1
  8821  017152  0100               	movlb	0	; () banked
  8822  017154  6F63               	movwf	LCD_Write@mode& (0+255),b
  8823  017156  0E68               	movlw	104
  8824  017158  ECD3  F0C4         	call	_LCD_Write
  8825                           
  8826                           ;LCD.c: 281: w = 128;
  8827  01715C  0E80               	movlw	128
  8828  01715E  6E50               	movwf	_w,c
  8829                           
  8830                           ;LCD.c: 282: l = 128;
  8831  017160  0E80               	movlw	128
  8832  017162  6E4F               	movwf	_l,c
  8833                           
  8834                           ;LCD.c: 284: }
  8835                           ;LCD.c: 285: }
  8836                           
  8837                           ;LCD.c: 283: break;
  8838  017164  0012               	return	
  8839  017166                     l117:
  8840  017166  0100               	movlb	0	; () banked
  8841  017168  5166               	movf	Set_Rotation@rotation& (0+255),w,b
  8842                           
  8843                           ; Switch size 1, requested type "space"
  8844                           ; Number of cases is 4, Range of values is 0 to 3
  8845                           ; switch strategies available:
  8846                           ; Name         Instructions Cycles
  8847                           ; simple_byte           13     7 (average)
  8848                           ;	Chosen strategy is simple_byte
  8849  01716A  0A00               	xorlw	0	; case 0
  8850  01716C  B4D8               	btfsc	status,2,c
  8851  01716E  D7D0               	goto	l118
  8852  017170  0A01               	xorlw	1	; case 1
  8853  017172  B4D8               	btfsc	status,2,c
  8854  017174  D7D7               	goto	l120
  8855  017176  0A03               	xorlw	3	; case 2
  8856  017178  B4D8               	btfsc	status,2,c
  8857  01717A  D7DF               	goto	l121
  8858  01717C  0A01               	xorlw	1	; case 3
  8859  01717E  A4D8               	btfss	status,2,c
  8860  017180  0012               	return	
  8861  017182  D7E6               	goto	l122
  8862  017184                     __end_of_Set_Rotation:
  8863                           	opt stack 0
  8864                           tosu	equ	0xFFF
  8865                           tosh	equ	0xFFE
  8866                           tosl	equ	0xFFD
  8867                           pclath	equ	0xFFA
  8868                           tblptru	equ	0xFF8
  8869                           tblptrh	equ	0xFF7
  8870                           tblptrl	equ	0xFF6
  8871                           tablat	equ	0xFF5
  8872                           intcon	equ	0xFF2
  8873                           postinc0	equ	0xFEE
  8874                           wreg	equ	0xFE8
  8875                           postdec1	equ	0xFE5
  8876                           fsr1h	equ	0xFE2
  8877                           fsr1l	equ	0xFE1
  8878                           indf2	equ	0xFDF
  8879                           postinc2	equ	0xFDE
  8880                           postdec2	equ	0xFDD
  8881                           plusw2	equ	0xFDB
  8882                           fsr2h	equ	0xFDA
  8883                           fsr2l	equ	0xFD9
  8884                           status	equ	0xFD8
  8885                           
  8886 ;; *************** function _LCD_Fill *****************
  8887 ;; Defined at:
  8888 ;;		line 287 in file "Library/LCD.c"
  8889 ;; Parameters:    Size  Location     Type
  8890 ;;  pColour         2    9[BANK0 ] unsigned short 
  8891 ;; Auto vars:     Size  Location     Type
  8892 ;;  j               1   12[BANK0 ] unsigned char 
  8893 ;;  i               1   11[BANK0 ] unsigned char 
  8894 ;; Return value:  Size  Location     Type
  8895 ;;                  1    wreg      void 
  8896 ;; Registers used:
  8897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8898 ;; Tracked objects:
  8899 ;;		On entry : 0/0
  8900 ;;		On exit  : 0/0
  8901 ;;		Unchanged: 0/0
  8902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8903 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8904 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8906 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8907 ;;Total ram usage:        4 bytes
  8908 ;; Hardware stack levels used:    1
  8909 ;; Hardware stack levels required when called:   10
  8910 ;; This function calls:
  8911 ;;		_LCD_Word_Write
  8912 ;;		_Set_Addr_Window
  8913 ;; This function is called by:
  8914 ;;		_LCD_Init
  8915 ;; This function uses a non-reentrant model
  8916 ;;
  8917                           
  8918                           	psect	text26
  8919  0182A4                     __ptext26:
  8920                           	opt stack 0
  8921  0182A4                     _LCD_Fill:
  8922                           	opt stack 19
  8923                           
  8924                           ;LCD.c: 296: UINT8 i = 0x00;
  8925                           
  8926                           ;incstack = 0
  8927  0182A4  0E00               	movlw	0
  8928  0182A6  0100               	movlb	0	; () banked
  8929  0182A8  6F6B               	movwf	LCD_Fill@i& (0+255),b
  8930                           
  8931                           ;LCD.c: 297: UINT8 j = 0x00;
  8932  0182AA  0E00               	movlw	0
  8933  0182AC  6F6C               	movwf	LCD_Fill@j& (0+255),b
  8934                           
  8935                           ; BSR set to: 0
  8936                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
  8937  0182AE  0E00               	movlw	0
  8938  0182B0  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
  8939  0182B2  0450               	decf	_w,w,c
  8940  0182B4  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  8941  0182B6  044F               	decf	_l,w,c
  8942  0182B8  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  8943  0182BA  0E00               	movlw	0
  8944  0182BC  ECE2  F0B7         	call	_Set_Addr_Window
  8945                           
  8946                           ;LCD.c: 299: for (j = l; j > 0; j--)
  8947  0182C0  C04F  F06C         	movff	_l,LCD_Fill@j
  8948  0182C4  0100               	movlb	0	; () banked
  8949  0182C6  516C               	movf	LCD_Fill@j& (0+255),w,b
  8950  0182C8  B4D8               	btfsc	status,2,c
  8951  0182CA  0012               	return	
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;LCD.c: 300: for (i = w; i > 0; i--)
  8955                           
  8956                           ; BSR set to: 0
  8957  0182CC  C050  F06B         	movff	_w,LCD_Fill@i
  8958  0182D0                     l16257:
  8959                           
  8960                           ; BSR set to: 0
  8961  0182D0  516B               	movf	LCD_Fill@i& (0+255),w,b
  8962  0182D2  B4D8               	btfsc	status,2,c
  8963  0182D4  D009               	goto	u13630
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;LCD.c: 301: LCD_Word_Write(pColour);
  8967                           
  8968                           ; BSR set to: 0
  8969                           
  8970                           ; BSR set to: 0
  8971  0182D6  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
  8972  0182DA  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
  8973  0182DE  EC1B  F0C5         	call	_LCD_Word_Write	;wreg free
  8974  0182E2  0100               	movlb	0	; () banked
  8975  0182E4  076B               	decf	LCD_Fill@i& (0+255),f,b
  8976  0182E6  D7F4               	goto	l16257
  8977  0182E8                     u13630:
  8978                           
  8979                           ; BSR set to: 0
  8980                           
  8981                           ; BSR set to: 0
  8982  0182E8  076C               	decf	LCD_Fill@j& (0+255),f,b
  8983  0182EA  D7ED               	goto	L9
  8984  0182EC                     __end_of_LCD_Fill:
  8985                           	opt stack 0
  8986                           tosu	equ	0xFFF
  8987                           tosh	equ	0xFFE
  8988                           tosl	equ	0xFFD
  8989                           pclath	equ	0xFFA
  8990                           tblptru	equ	0xFF8
  8991                           tblptrh	equ	0xFF7
  8992                           tblptrl	equ	0xFF6
  8993                           tablat	equ	0xFF5
  8994                           intcon	equ	0xFF2
  8995                           postinc0	equ	0xFEE
  8996                           wreg	equ	0xFE8
  8997                           postdec1	equ	0xFE5
  8998                           fsr1h	equ	0xFE2
  8999                           fsr1l	equ	0xFE1
  9000                           indf2	equ	0xFDF
  9001                           postinc2	equ	0xFDE
  9002                           postdec2	equ	0xFDD
  9003                           plusw2	equ	0xFDB
  9004                           fsr2h	equ	0xFDA
  9005                           fsr2l	equ	0xFD9
  9006                           status	equ	0xFD8
  9007                           
  9008 ;; *************** function _Configure_GPIOs *****************
  9009 ;; Defined at:
  9010 ;;		line 46 in file "Library/LCD.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;		None
  9013 ;; Auto vars:     Size  Location     Type
  9014 ;;		None
  9015 ;; Return value:  Size  Location     Type
  9016 ;;                  1    wreg      void 
  9017 ;; Registers used:
  9018 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9019 ;; Tracked objects:
  9020 ;;		On entry : 0/0
  9021 ;;		On exit  : 0/0
  9022 ;;		Unchanged: 0/0
  9023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9028 ;;Total ram usage:        0 bytes
  9029 ;; Hardware stack levels used:    1
  9030 ;; Hardware stack levels required when called:   14
  9031 ;; This function calls:
  9032 ;;		_LCD_Reset
  9033 ;;		_Port_SetPinType
  9034 ;;		_SPI_Init
  9035 ;;		_SPI_MaxSpeed
  9036 ;; This function is called by:
  9037 ;;		_LCD_Init
  9038 ;; This function uses a non-reentrant model
  9039 ;;
  9040                           
  9041                           	psect	text27
  9042  017C9E                     __ptext27:
  9043                           	opt stack 0
  9044  017C9E                     _Configure_GPIOs:
  9045                           	opt stack 15
  9046                           
  9047                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
  9048                           
  9049                           ; BSR set to: 0
  9050                           ;incstack = 0
  9051  017C9E  0E94               	movlw	low _PortF
  9052  017CA0  0100               	movlb	0	; () banked
  9053  017CA2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9054  017CA4  0E01               	movlw	high _PortF
  9055  017CA6  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9056  017CA8  0E07               	movlw	7
  9057  017CAA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9058  017CAC  0E03               	movlw	3
  9059  017CAE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9060  017CB0  EC76  F0A8         	call	_Port_SetPinType	;wreg free
  9061                           
  9062                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
  9063  017CB4  0E94               	movlw	low _PortF
  9064  017CB6  0100               	movlb	0	; () banked
  9065  017CB8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9066  017CBA  0E01               	movlw	high _PortF
  9067  017CBC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9068  017CBE  0E06               	movlw	6
  9069  017CC0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9070  017CC2  0E03               	movlw	3
  9071  017CC4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9072  017CC6  EC76  F0A8         	call	_Port_SetPinType	;wreg free
  9073                           
  9074                           ;LCD.c: 55: LCD_Reset();
  9075  017CCA  ECD6  F0BF         	call	_LCD_Reset	;wreg free
  9076                           
  9077                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
  9078  017CCE  0EC0               	movlw	192
  9079  017CD0  0100               	movlb	0	; () banked
  9080  017CD2  6F8D               	movwf	SPI_Init@pClock& (0+255),b
  9081  017CD4  0EC6               	movlw	198
  9082  017CD6  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
  9083  017CD8  0E2D               	movlw	45
  9084  017CDA  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
  9085  017CDC  0E00               	movlw	0
  9086  017CDE  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
  9087  017CE0  0E01               	movlw	1
  9088  017CE2  6F91               	movwf	SPI_Init@pChannel& (0+255),b
  9089  017CE4  0E01               	movlw	1
  9090  017CE6  6F92               	movwf	SPI_Init@pMode& (0+255),b
  9091  017CE8  EC02  F099         	call	_SPI_Init	;wreg free
  9092                           
  9093                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
  9094  017CEC  0E61               	movlw	low _SPI2
  9095  017CEE  0100               	movlb	0	; () banked
  9096  017CF0  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
  9097  017CF2  0E01               	movlw	high _SPI2
  9098  017CF4  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
  9099  017CF6  EC20  F0BD         	call	_SPI_MaxSpeed	;wreg free
  9100  017CFA  0012               	return		;funcret
  9101  017CFC                     __end_of_Configure_GPIOs:
  9102                           	opt stack 0
  9103                           tosu	equ	0xFFF
  9104                           tosh	equ	0xFFE
  9105                           tosl	equ	0xFFD
  9106                           pclath	equ	0xFFA
  9107                           tblptru	equ	0xFF8
  9108                           tblptrh	equ	0xFF7
  9109                           tblptrl	equ	0xFF6
  9110                           tablat	equ	0xFF5
  9111                           intcon	equ	0xFF2
  9112                           postinc0	equ	0xFEE
  9113                           wreg	equ	0xFE8
  9114                           postdec1	equ	0xFE5
  9115                           fsr1h	equ	0xFE2
  9116                           fsr1l	equ	0xFE1
  9117                           indf2	equ	0xFDF
  9118                           postinc2	equ	0xFDE
  9119                           postdec2	equ	0xFDD
  9120                           plusw2	equ	0xFDB
  9121                           fsr2h	equ	0xFDA
  9122                           fsr2l	equ	0xFD9
  9123                           status	equ	0xFD8
  9124                           
  9125 ;; *************** function _SPI_MaxSpeed *****************
  9126 ;; Defined at:
  9127 ;;		line 201 in file "Library/SPI.c"
  9128 ;; Parameters:    Size  Location     Type
  9129 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  9130 ;;		 -> SPI2(11), 
  9131 ;; Auto vars:     Size  Location     Type
  9132 ;;		None
  9133 ;; Return value:  Size  Location     Type
  9134 ;;                  1    wreg      void 
  9135 ;; Registers used:
  9136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9137 ;; Tracked objects:
  9138 ;;		On entry : 0/0
  9139 ;;		On exit  : 0/0
  9140 ;;		Unchanged: 0/0
  9141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9142 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9145 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9146 ;;Total ram usage:        2 bytes
  9147 ;; Hardware stack levels used:    1
  9148 ;; Hardware stack levels required when called:    9
  9149 ;; This function calls:
  9150 ;;		_Byte_SetBit
  9151 ;;		_Byte_SetQuad
  9152 ;; This function is called by:
  9153 ;;		_Configure_GPIOs
  9154 ;; This function uses a non-reentrant model
  9155 ;;
  9156                           
  9157                           	psect	text28
  9158  017A40                     __ptext28:
  9159                           	opt stack 0
  9160  017A40                     _SPI_MaxSpeed:
  9161                           	opt stack 19
  9162                           
  9163                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  9164                           
  9165                           ;incstack = 0
  9166  017A40  0100               	movlb	0	; () banked
  9167  017A42  EE20 F006          	lfsr	2,6
  9168  017A46  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9169  017A48  26D9               	addwf	fsr2l,f,c
  9170  017A4A  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9171  017A4C  22DA               	addwfc	fsr2h,f,c
  9172  017A4E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
  9173  017A52  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
  9174  017A56  0E05               	movlw	5
  9175  017A58  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
  9176  017A5A  0E00               	movlw	0
  9177  017A5C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
  9178  017A5E  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
  9179                           
  9180                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
  9181  017A62  0100               	movlb	0	; () banked
  9182  017A64  EE20 F006          	lfsr	2,6
  9183  017A68  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9184  017A6A  26D9               	addwf	fsr2l,f,c
  9185  017A6C  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9186  017A6E  22DA               	addwfc	fsr2h,f,c
  9187  017A70  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
  9188  017A74  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
  9189  017A78  0E00               	movlw	0
  9190  017A7A  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
  9191  017A7C  0E00               	movlw	0
  9192  017A7E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
  9193  017A80  ECC3  F0C4         	call	_Byte_SetQuad	;wreg free
  9194                           
  9195                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  9196  017A84  0100               	movlb	0	; () banked
  9197  017A86  EE20 F006          	lfsr	2,6
  9198  017A8A  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9199  017A8C  26D9               	addwf	fsr2l,f,c
  9200  017A8E  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9201  017A90  22DA               	addwfc	fsr2h,f,c
  9202  017A92  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
  9203  017A96  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
  9204  017A9A  0E05               	movlw	5
  9205  017A9C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
  9206  017A9E  0E01               	movlw	1
  9207  017AA0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
  9208  017AA2  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
  9209  017AA6  0012               	return		;funcret
  9210  017AA8                     __end_of_SPI_MaxSpeed:
  9211                           	opt stack 0
  9212                           tosu	equ	0xFFF
  9213                           tosh	equ	0xFFE
  9214                           tosl	equ	0xFFD
  9215                           pclath	equ	0xFFA
  9216                           tblptru	equ	0xFF8
  9217                           tblptrh	equ	0xFF7
  9218                           tblptrl	equ	0xFF6
  9219                           tablat	equ	0xFF5
  9220                           intcon	equ	0xFF2
  9221                           postinc0	equ	0xFEE
  9222                           wreg	equ	0xFE8
  9223                           postdec1	equ	0xFE5
  9224                           fsr1h	equ	0xFE2
  9225                           fsr1l	equ	0xFE1
  9226                           indf2	equ	0xFDF
  9227                           postinc2	equ	0xFDE
  9228                           postdec2	equ	0xFDD
  9229                           plusw2	equ	0xFDB
  9230                           fsr2h	equ	0xFDA
  9231                           fsr2l	equ	0xFD9
  9232                           status	equ	0xFD8
  9233                           
  9234 ;; *************** function _LCD_Reset *****************
  9235 ;; Defined at:
  9236 ;;		line 95 in file "Library/LCD.c"
  9237 ;; Parameters:    Size  Location     Type
  9238 ;;		None
  9239 ;; Auto vars:     Size  Location     Type
  9240 ;;		None
  9241 ;; Return value:  Size  Location     Type
  9242 ;;                  1    wreg      void 
  9243 ;; Registers used:
  9244 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9245 ;; Tracked objects:
  9246 ;;		On entry : 0/0
  9247 ;;		On exit  : 0/0
  9248 ;;		Unchanged: 0/0
  9249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9254 ;;Total ram usage:        0 bytes
  9255 ;; Hardware stack levels used:    1
  9256 ;; Hardware stack levels required when called:   13
  9257 ;; This function calls:
  9258 ;;		_LED_Toggle
  9259 ;;		_Reset_High
  9260 ;;		_Reset_Low
  9261 ;;		_delay_ms
  9262 ;; This function is called by:
  9263 ;;		_Configure_GPIOs
  9264 ;; This function uses a non-reentrant model
  9265 ;;
  9266                           
  9267                           	psect	text29
  9268  017FAC                     __ptext29:
  9269                           	opt stack 0
  9270  017FAC                     _LCD_Reset:
  9271                           	opt stack 15
  9272                           
  9273                           ;LCD.c: 97: Reset_High();
  9274                           
  9275                           ;incstack = 0
  9276  017FAC  EC41  F0C5         	call	_Reset_High	;wreg free
  9277                           
  9278                           ;LCD.c: 98: LED_Toggle(eLED2);
  9279  017FB0  0E01               	movlw	1
  9280  017FB2  EC21  F0C2         	call	_LED_Toggle
  9281                           
  9282                           ;LCD.c: 99: delay_ms(0x80);
  9283  017FB6  0E00               	movlw	0
  9284  017FB8  0100               	movlb	0	; () banked
  9285  017FBA  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9286  017FBC  0E80               	movlw	128
  9287  017FBE  6F60               	movwf	delay_ms@ms& (0+255),b
  9288  017FC0  ECAD  F0BE         	call	_delay_ms	;wreg free
  9289                           
  9290                           ;LCD.c: 100: LED_Toggle(eLED2);
  9291  017FC4  0E01               	movlw	1
  9292  017FC6  EC21  F0C2         	call	_LED_Toggle
  9293                           
  9294                           ;LCD.c: 101: Reset_Low();
  9295  017FCA  EC35  F0C5         	call	_Reset_Low	;wreg free
  9296                           
  9297                           ;LCD.c: 102: delay_ms(0x80);
  9298  017FCE  0E00               	movlw	0
  9299  017FD0  0100               	movlb	0	; () banked
  9300  017FD2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9301  017FD4  0E80               	movlw	128
  9302  017FD6  6F60               	movwf	delay_ms@ms& (0+255),b
  9303  017FD8  ECAD  F0BE         	call	_delay_ms	;wreg free
  9304                           
  9305                           ;LCD.c: 103: LED_Toggle(eLED2);
  9306  017FDC  0E01               	movlw	1
  9307  017FDE  EC21  F0C2         	call	_LED_Toggle
  9308                           
  9309                           ;LCD.c: 104: Reset_High();
  9310  017FE2  EC41  F0C5         	call	_Reset_High	;wreg free
  9311                           
  9312                           ;LCD.c: 105: delay_ms(0x80);
  9313  017FE6  0E00               	movlw	0
  9314  017FE8  0100               	movlb	0	; () banked
  9315  017FEA  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9316  017FEC  0E80               	movlw	128
  9317  017FEE  6F60               	movwf	delay_ms@ms& (0+255),b
  9318  017FF0  ECAD  F0BE         	call	_delay_ms	;wreg free
  9319                           
  9320                           ;LCD.c: 106: LED_Toggle(eLED2);
  9321  017FF4  0E01               	movlw	1
  9322  017FF6  EC21  F0C2         	call	_LED_Toggle
  9323  017FFA  0012               	return		;funcret
  9324  017FFC                     __end_of_LCD_Reset:
  9325                           	opt stack 0
  9326                           tosu	equ	0xFFF
  9327                           tosh	equ	0xFFE
  9328                           tosl	equ	0xFFD
  9329                           pclath	equ	0xFFA
  9330                           tblptru	equ	0xFF8
  9331                           tblptrh	equ	0xFF7
  9332                           tblptrl	equ	0xFF6
  9333                           tablat	equ	0xFF5
  9334                           intcon	equ	0xFF2
  9335                           postinc0	equ	0xFEE
  9336                           wreg	equ	0xFE8
  9337                           postdec1	equ	0xFE5
  9338                           fsr1h	equ	0xFE2
  9339                           fsr1l	equ	0xFE1
  9340                           indf2	equ	0xFDF
  9341                           postinc2	equ	0xFDE
  9342                           postdec2	equ	0xFDD
  9343                           plusw2	equ	0xFDB
  9344                           fsr2h	equ	0xFDA
  9345                           fsr2l	equ	0xFD9
  9346                           status	equ	0xFD8
  9347                           
  9348 ;; *************** function _Reset_Low *****************
  9349 ;; Defined at:
  9350 ;;		line 32 in file "Library/LCD.c"
  9351 ;; Parameters:    Size  Location     Type
  9352 ;;		None
  9353 ;; Auto vars:     Size  Location     Type
  9354 ;;		None
  9355 ;; Return value:  Size  Location     Type
  9356 ;;                  1    wreg      void 
  9357 ;; Registers used:
  9358 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9359 ;; Tracked objects:
  9360 ;;		On entry : 0/0
  9361 ;;		On exit  : 0/0
  9362 ;;		Unchanged: 0/0
  9363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9368 ;;Total ram usage:        0 bytes
  9369 ;; Hardware stack levels used:    1
  9370 ;; Hardware stack levels required when called:   11
  9371 ;; This function calls:
  9372 ;;		_Port_SetPin
  9373 ;; This function is called by:
  9374 ;;		_LCD_Reset
  9375 ;; This function uses a non-reentrant model
  9376 ;;
  9377                           
  9378                           	psect	text30
  9379  018A6A                     __ptext30:
  9380                           	opt stack 0
  9381  018A6A                     _Reset_Low:
  9382                           	opt stack 16
  9383                           
  9384                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
  9385                           
  9386                           ;incstack = 0
  9387  018A6A  0E94               	movlw	low _PortF
  9388  018A6C  0100               	movlb	0	; () banked
  9389  018A6E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9390  018A70  0E01               	movlw	high _PortF
  9391  018A72  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9392  018A74  0E06               	movlw	6
  9393  018A76  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9394  018A78  0E01               	movlw	1
  9395  018A7A  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9396  018A7C  EC96  F0B5         	call	_Port_SetPin	;wreg free
  9397  018A80  0012               	return		;funcret
  9398  018A82                     __end_of_Reset_Low:
  9399                           	opt stack 0
  9400                           tosu	equ	0xFFF
  9401                           tosh	equ	0xFFE
  9402                           tosl	equ	0xFFD
  9403                           pclath	equ	0xFFA
  9404                           tblptru	equ	0xFF8
  9405                           tblptrh	equ	0xFF7
  9406                           tblptrl	equ	0xFF6
  9407                           tablat	equ	0xFF5
  9408                           intcon	equ	0xFF2
  9409                           postinc0	equ	0xFEE
  9410                           wreg	equ	0xFE8
  9411                           postdec1	equ	0xFE5
  9412                           fsr1h	equ	0xFE2
  9413                           fsr1l	equ	0xFE1
  9414                           indf2	equ	0xFDF
  9415                           postinc2	equ	0xFDE
  9416                           postdec2	equ	0xFDD
  9417                           plusw2	equ	0xFDB
  9418                           fsr2h	equ	0xFDA
  9419                           fsr2l	equ	0xFD9
  9420                           status	equ	0xFD8
  9421                           
  9422 ;; *************** function _Reset_High *****************
  9423 ;; Defined at:
  9424 ;;		line 36 in file "Library/LCD.c"
  9425 ;; Parameters:    Size  Location     Type
  9426 ;;		None
  9427 ;; Auto vars:     Size  Location     Type
  9428 ;;		None
  9429 ;; Return value:  Size  Location     Type
  9430 ;;                  1    wreg      void 
  9431 ;; Registers used:
  9432 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9433 ;; Tracked objects:
  9434 ;;		On entry : 0/0
  9435 ;;		On exit  : 0/0
  9436 ;;		Unchanged: 0/0
  9437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9442 ;;Total ram usage:        0 bytes
  9443 ;; Hardware stack levels used:    1
  9444 ;; Hardware stack levels required when called:   11
  9445 ;; This function calls:
  9446 ;;		_Port_SetPin
  9447 ;; This function is called by:
  9448 ;;		_LCD_Reset
  9449 ;; This function uses a non-reentrant model
  9450 ;;
  9451                           
  9452                           	psect	text31
  9453  018A82                     __ptext31:
  9454                           	opt stack 0
  9455  018A82                     _Reset_High:
  9456                           	opt stack 16
  9457                           
  9458                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
  9459                           
  9460                           ;incstack = 0
  9461  018A82  0E94               	movlw	low _PortF
  9462  018A84  0100               	movlb	0	; () banked
  9463  018A86  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9464  018A88  0E01               	movlw	high _PortF
  9465  018A8A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9466  018A8C  0E06               	movlw	6
  9467  018A8E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9468  018A90  0E00               	movlw	0
  9469  018A92  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9470  018A94  EC96  F0B5         	call	_Port_SetPin	;wreg free
  9471  018A98  0012               	return		;funcret
  9472  018A9A                     __end_of_Reset_High:
  9473                           	opt stack 0
  9474                           tosu	equ	0xFFF
  9475                           tosh	equ	0xFFE
  9476                           tosl	equ	0xFFD
  9477                           pclath	equ	0xFFA
  9478                           tblptru	equ	0xFF8
  9479                           tblptrh	equ	0xFF7
  9480                           tblptrl	equ	0xFF6
  9481                           tablat	equ	0xFF5
  9482                           intcon	equ	0xFF2
  9483                           postinc0	equ	0xFEE
  9484                           wreg	equ	0xFE8
  9485                           postdec1	equ	0xFE5
  9486                           fsr1h	equ	0xFE2
  9487                           fsr1l	equ	0xFE1
  9488                           indf2	equ	0xFDF
  9489                           postinc2	equ	0xFDE
  9490                           postdec2	equ	0xFDD
  9491                           plusw2	equ	0xFDB
  9492                           fsr2h	equ	0xFDA
  9493                           fsr2l	equ	0xFD9
  9494                           status	equ	0xFD8
  9495                           
  9496 ;; *************** function _Init_Timer0 *****************
  9497 ;; Defined at:
  9498 ;;		line 66 in file "main.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;		None
  9501 ;; Auto vars:     Size  Location     Type
  9502 ;;		None
  9503 ;; Return value:  Size  Location     Type
  9504 ;;                  2  2140[None  ] int 
  9505 ;; Registers used:
  9506 ;;		None
  9507 ;; Tracked objects:
  9508 ;;		On entry : 0/0
  9509 ;;		On exit  : 0/0
  9510 ;;		Unchanged: 0/0
  9511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;Total ram usage:        0 bytes
  9517 ;; Hardware stack levels used:    1
  9518 ;; Hardware stack levels required when called:    7
  9519 ;; This function calls:
  9520 ;;		Nothing
  9521 ;; This function is called by:
  9522 ;;		_main
  9523 ;; This function uses a non-reentrant model
  9524 ;;
  9525                           
  9526                           	psect	text32
  9527  018A9A                     __ptext32:
  9528                           	opt stack 0
  9529  018A9A                     _Init_Timer0:
  9530                           	opt stack 23
  9531                           
  9532                           ;main.c: 68: T0CONbits.TMR0ON = 1;
  9533                           
  9534                           ;incstack = 0
  9535  018A9A  8ED5               	bsf	4053,7,c	;volatile
  9536                           
  9537                           ;main.c: 69: T0CONbits.T08BIT = 1;
  9538  018A9C  8CD5               	bsf	4053,6,c	;volatile
  9539                           
  9540                           ;main.c: 70: T0CONbits.T0CS=0;
  9541  018A9E  9AD5               	bcf	4053,5,c	;volatile
  9542                           
  9543                           ;main.c: 71: T0CONbits.T0SE=0;
  9544  018AA0  98D5               	bcf	4053,4,c	;volatile
  9545                           
  9546                           ;main.c: 72: T0CONbits.PSA=0;
  9547  018AA2  96D5               	bcf	4053,3,c	;volatile
  9548                           
  9549                           ;main.c: 73: T0CONbits.T0PS2=1;
  9550  018AA4  84D5               	bsf	4053,2,c	;volatile
  9551                           
  9552                           ;main.c: 74: T0CONbits.T0PS1=1;
  9553  018AA6  82D5               	bsf	4053,1,c	;volatile
  9554                           
  9555                           ;main.c: 75: T0CONbits.T0PS0=1;
  9556  018AA8  80D5               	bsf	4053,0,c	;volatile
  9557                           
  9558                           ;main.c: 77: INTCONbits.TMR0IE = 1;
  9559  018AAA  8AF2               	bsf	intcon,5,c	;volatile
  9560                           
  9561                           ;main.c: 78: INTCONbits.PEIE = 1;
  9562  018AAC  8CF2               	bsf	intcon,6,c	;volatile
  9563                           
  9564                           ;main.c: 79: INTCONbits.GIE = 1;
  9565  018AAE  8EF2               	bsf	intcon,7,c	;volatile
  9566  018AB0  0012               	return		;funcret
  9567  018AB2                     __end_of_Init_Timer0:
  9568                           	opt stack 0
  9569                           tosu	equ	0xFFF
  9570                           tosh	equ	0xFFE
  9571                           tosl	equ	0xFFD
  9572                           pclath	equ	0xFFA
  9573                           tblptru	equ	0xFF8
  9574                           tblptrh	equ	0xFF7
  9575                           tblptrl	equ	0xFF6
  9576                           tablat	equ	0xFF5
  9577                           intcon	equ	0xFF2
  9578                           postinc0	equ	0xFEE
  9579                           wreg	equ	0xFE8
  9580                           postdec1	equ	0xFE5
  9581                           fsr1h	equ	0xFE2
  9582                           fsr1l	equ	0xFE1
  9583                           indf2	equ	0xFDF
  9584                           postinc2	equ	0xFDE
  9585                           postdec2	equ	0xFDD
  9586                           plusw2	equ	0xFDB
  9587                           fsr2h	equ	0xFDA
  9588                           fsr2l	equ	0xFD9
  9589                           status	equ	0xFD8
  9590                           
  9591 ;; *************** function _InitSerialCommunication *****************
  9592 ;; Defined at:
  9593 ;;		line 89 in file "main.c"
  9594 ;; Parameters:    Size  Location     Type
  9595 ;;		None
  9596 ;; Auto vars:     Size  Location     Type
  9597 ;;		None
  9598 ;; Return value:  Size  Location     Type
  9599 ;;                  1    wreg      void 
  9600 ;; Registers used:
  9601 ;;		wreg, status,2
  9602 ;; Tracked objects:
  9603 ;;		On entry : 0/0
  9604 ;;		On exit  : 0/0
  9605 ;;		Unchanged: 0/0
  9606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9611 ;;Total ram usage:        0 bytes
  9612 ;; Hardware stack levels used:    1
  9613 ;; Hardware stack levels required when called:    7
  9614 ;; This function calls:
  9615 ;;		Nothing
  9616 ;; This function is called by:
  9617 ;;		_main
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621                           	psect	text33
  9622  0189C6                     __ptext33:
  9623                           	opt stack 0
  9624  0189C6                     _InitSerialCommunication:
  9625                           	opt stack 23
  9626                           
  9627                           ;main.c: 91: TRISCbits.TRISC6 = 0;
  9628                           
  9629                           ;incstack = 0
  9630  0189C6  9C94               	bcf	3988,6,c	;volatile
  9631                           
  9632                           ;main.c: 92: TRISCbits.TRISC7 = 1;
  9633  0189C8  8E94               	bsf	3988,7,c	;volatile
  9634                           
  9635                           ;main.c: 94: TXSTA1 = 0b00100100;
  9636  0189CA  0E24               	movlw	36
  9637  0189CC  6EAD               	movwf	4013,c	;volatile
  9638                           
  9639                           ;main.c: 95: RCSTA1 = 0b10010000;
  9640  0189CE  0E90               	movlw	144
  9641  0189D0  6EAC               	movwf	4012,c	;volatile
  9642                           
  9643                           ;main.c: 97: BAUDCON1bits.DTRXP = 0;
  9644  0189D2  9A7E               	bcf	3966,5,c	;volatile
  9645                           
  9646                           ;main.c: 98: BAUDCON1bits.SCKP = 0;
  9647  0189D4  987E               	bcf	3966,4,c	;volatile
  9648                           
  9649                           ;main.c: 99: BAUDCON1bits.WUE = 0;
  9650  0189D6  927E               	bcf	3966,1,c	;volatile
  9651                           
  9652                           ;main.c: 100: BAUDCON1bits.ABDEN = 0;
  9653  0189D8  907E               	bcf	3966,0,c	;volatile
  9654                           
  9655                           ;main.c: 103: TXSTA1bits.BRGH = 1;
  9656  0189DA  84AD               	bsf	4013,2,c	;volatile
  9657                           
  9658                           ;main.c: 104: BAUDCON1bits.BRG16 = 0;
  9659  0189DC  967E               	bcf	3966,3,c	;volatile
  9660                           
  9661                           ;main.c: 105: SPBRG1 = 51;
  9662  0189DE  0E33               	movlw	51
  9663  0189E0  6EB0               	movwf	4016,c	;volatile
  9664  0189E2  0012               	return		;funcret
  9665  0189E4                     __end_of_InitSerialCommunication:
  9666                           	opt stack 0
  9667                           tosu	equ	0xFFF
  9668                           tosh	equ	0xFFE
  9669                           tosl	equ	0xFFD
  9670                           pclath	equ	0xFFA
  9671                           tblptru	equ	0xFF8
  9672                           tblptrh	equ	0xFF7
  9673                           tblptrl	equ	0xFF6
  9674                           tablat	equ	0xFF5
  9675                           intcon	equ	0xFF2
  9676                           postinc0	equ	0xFEE
  9677                           wreg	equ	0xFE8
  9678                           postdec1	equ	0xFE5
  9679                           fsr1h	equ	0xFE2
  9680                           fsr1l	equ	0xFE1
  9681                           indf2	equ	0xFDF
  9682                           postinc2	equ	0xFDE
  9683                           postdec2	equ	0xFDD
  9684                           plusw2	equ	0xFDB
  9685                           fsr2h	equ	0xFDA
  9686                           fsr2l	equ	0xFD9
  9687                           status	equ	0xFD8
  9688                           
  9689 ;; *************** function _InitADC *****************
  9690 ;; Defined at:
  9691 ;;		line 178 in file "dans.c"
  9692 ;; Parameters:    Size  Location     Type
  9693 ;;		None
  9694 ;; Auto vars:     Size  Location     Type
  9695 ;;		None
  9696 ;; Return value:  Size  Location     Type
  9697 ;;                  1    wreg      void 
  9698 ;; Registers used:
  9699 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9700 ;; Tracked objects:
  9701 ;;		On entry : 0/0
  9702 ;;		On exit  : 0/0
  9703 ;;		Unchanged: 0/0
  9704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9708 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9709 ;;Total ram usage:        1 bytes
  9710 ;; Hardware stack levels used:    1
  9711 ;; Hardware stack levels required when called:    7
  9712 ;; This function calls:
  9713 ;;		Nothing
  9714 ;; This function is called by:
  9715 ;;		_main
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           	psect	text34
  9720  01809A                     __ptext34:
  9721                           	opt stack 0
  9722  01809A                     _InitADC:
  9723                           	opt stack 23
  9724                           
  9725                           ;dans.c: 180: ADCON1 = 0b10101101;
  9726                           
  9727                           ;incstack = 0
  9728  01809A  0EAD               	movlw	173
  9729  01809C  6EC1               	movwf	4033,c	;volatile
  9730                           
  9731                           ;dans.c: 181: for (thisReading = 0; thisReading < numReadings; thisReading++) {
  9732  01809E  0E00               	movlw	0
  9733  0180A0  0101               	movlb	1	; () banked
  9734  0180A2  6F43               	movwf	(_thisReading+1)& (0+255),b
  9735  0180A4  0E00               	movlw	0
  9736  0180A6  6F42               	movwf	_thisReading& (0+255),b
  9737  0180A8  D010               	goto	l2344
  9738  0180AA                     
  9739                           ;dans.c: 182: readings[thisReading] = 0;
  9740                           
  9741                           ; BSR set to: 1
  9742  0180AA  90D8               	bcf	status,0,c
  9743  0180AC  0101               	movlb	1	; () banked
  9744  0180AE  3542               	rlcf	_thisReading& (0+255),w,b
  9745  0180B0  6ED9               	movwf	fsr2l,c
  9746  0180B2  3543               	rlcf	(_thisReading+1)& (0+255),w,b
  9747  0180B4  6EDA               	movwf	fsr2h,c
  9748  0180B6  0E46               	movlw	low _readings
  9749  0180B8  26D9               	addwf	fsr2l,f,c
  9750  0180BA  0E03               	movlw	high _readings
  9751  0180BC  22DA               	addwfc	fsr2h,f,c
  9752  0180BE  0E00               	movlw	0
  9753  0180C0  6EDE               	movwf	postinc2,c
  9754  0180C2  0E00               	movlw	0
  9755  0180C4  6EDD               	movwf	postdec2,c
  9756                           
  9757                           ; BSR set to: 1
  9758  0180C6  4B42               	infsnz	_thisReading& (0+255),f,b
  9759  0180C8  2B43               	incf	(_thisReading+1)& (0+255),f,b
  9760  0180CA                     l2344:
  9761                           
  9762                           ; BSR set to: 1
  9763                           
  9764                           ; BSR set to: 1
  9765  0180CA  51DE               	movf	_numReadings& (0+255),w,b
  9766  0180CC  5D42               	subwf	_thisReading& (0+255),w,b
  9767  0180CE  5143               	movf	(_thisReading+1)& (0+255),w,b
  9768  0180D0  0A80               	xorlw	128
  9769  0180D2  0100               	movlb	0	; () banked
  9770  0180D4  6F60               	movwf	??_InitADC& (0+255),b
  9771  0180D6  0101               	movlb	1	; () banked
  9772  0180D8  51DF               	movf	(_numReadings+1)& (0+255),w,b
  9773  0180DA  0A80               	xorlw	128
  9774  0180DC  0100               	movlb	0	; () banked
  9775  0180DE  5960               	subwfb	??_InitADC& (0+255),w,b
  9776  0180E0  B0D8               	btfsc	status,0,c
  9777  0180E2  0012               	return	
  9778  0180E4  D7E2               	goto	l2345
  9779  0180E6                     __end_of_InitADC:
  9780                           	opt stack 0
  9781                           tosu	equ	0xFFF
  9782                           tosh	equ	0xFFE
  9783                           tosl	equ	0xFFD
  9784                           pclath	equ	0xFFA
  9785                           tblptru	equ	0xFF8
  9786                           tblptrh	equ	0xFF7
  9787                           tblptrl	equ	0xFF6
  9788                           tablat	equ	0xFF5
  9789                           intcon	equ	0xFF2
  9790                           postinc0	equ	0xFEE
  9791                           wreg	equ	0xFE8
  9792                           postdec1	equ	0xFE5
  9793                           fsr1h	equ	0xFE2
  9794                           fsr1l	equ	0xFE1
  9795                           indf2	equ	0xFDF
  9796                           postinc2	equ	0xFDE
  9797                           postdec2	equ	0xFDD
  9798                           plusw2	equ	0xFDB
  9799                           fsr2h	equ	0xFDA
  9800                           fsr2l	equ	0xFD9
  9801                           status	equ	0xFD8
  9802                           
  9803 ;; *************** function _ISR_Enable *****************
  9804 ;; Defined at:
  9805 ;;		line 27 in file "Library/ISR.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;		None
  9808 ;; Auto vars:     Size  Location     Type
  9809 ;;		None
  9810 ;; Return value:  Size  Location     Type
  9811 ;;                  1    wreg      void 
  9812 ;; Registers used:
  9813 ;;		None
  9814 ;; Tracked objects:
  9815 ;;		On entry : 0/0
  9816 ;;		On exit  : 0/0
  9817 ;;		Unchanged: 0/0
  9818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9823 ;;Total ram usage:        0 bytes
  9824 ;; Hardware stack levels used:    1
  9825 ;; Hardware stack levels required when called:    7
  9826 ;; This function calls:
  9827 ;;		Nothing
  9828 ;; This function is called by:
  9829 ;;		_main
  9830 ;; This function uses a non-reentrant model
  9831 ;;
  9832                           
  9833                           	psect	text35
  9834  018C82                     __ptext35:
  9835                           	opt stack 0
  9836  018C82                     _ISR_Enable:
  9837                           	opt stack 23
  9838                           
  9839                           ;ISR.c: 29: INTCONbits.PEIE = 1;
  9840                           
  9841                           ; BSR set to: 0
  9842                           ;incstack = 0
  9843  018C82  8CF2               	bsf	intcon,6,c	;volatile
  9844                           
  9845                           ;ISR.c: 30: INTCONbits.GIE = 1;
  9846  018C84  8EF2               	bsf	intcon,7,c	;volatile
  9847                           
  9848                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
  9849  018C86  88F2               	bsf	intcon,4,c	;volatile
  9850                           
  9851                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
  9852  018C88  92F2               	bcf	intcon,1,c	;volatile
  9853  018C8A  0012               	return		;funcret
  9854  018C8C                     __end_of_ISR_Enable:
  9855                           	opt stack 0
  9856                           tosu	equ	0xFFF
  9857                           tosh	equ	0xFFE
  9858                           tosl	equ	0xFFD
  9859                           pclath	equ	0xFFA
  9860                           tblptru	equ	0xFF8
  9861                           tblptrh	equ	0xFF7
  9862                           tblptrl	equ	0xFF6
  9863                           tablat	equ	0xFF5
  9864                           intcon	equ	0xFF2
  9865                           postinc0	equ	0xFEE
  9866                           wreg	equ	0xFE8
  9867                           postdec1	equ	0xFE5
  9868                           fsr1h	equ	0xFE2
  9869                           fsr1l	equ	0xFE1
  9870                           indf2	equ	0xFDF
  9871                           postinc2	equ	0xFDE
  9872                           postdec2	equ	0xFDD
  9873                           plusw2	equ	0xFDB
  9874                           fsr2h	equ	0xFDA
  9875                           fsr2l	equ	0xFD9
  9876                           status	equ	0xFD8
  9877                           
  9878 ;; *************** function _HMI_Poll *****************
  9879 ;; Defined at:
  9880 ;;		line 252 in file "HMI.c"
  9881 ;; Parameters:    Size  Location     Type
  9882 ;;		None
  9883 ;; Auto vars:     Size  Location     Type
  9884 ;;		None
  9885 ;; Return value:  Size  Location     Type
  9886 ;;                  1    wreg      void 
  9887 ;; Registers used:
  9888 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  9889 ;; Tracked objects:
  9890 ;;		On entry : 0/0
  9891 ;;		On exit  : 0/0
  9892 ;;		Unchanged: 0/0
  9893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9898 ;;Total ram usage:        0 bytes
  9899 ;; Hardware stack levels used:    1
  9900 ;; Hardware stack levels required when called:   15
  9901 ;; This function calls:
  9902 ;;		_Button_Poll
  9903 ;; This function is called by:
  9904 ;;		_main
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908                           	psect	text36
  9909  017BDE                     __ptext36:
  9910                           	opt stack 0
  9911  017BDE                     _HMI_Poll:
  9912                           	opt stack 15
  9913                           
  9914                           ;HMI.c: 254: TRISE = 0xFC;
  9915                           
  9916                           ;incstack = 0
  9917  017BDE  0EFC               	movlw	252
  9918  017BE0  6E96               	movwf	3990,c	;volatile
  9919                           
  9920                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  9921  017BE2  0ED0               	movlw	low (_HMIBoard+48)
  9922  017BE4  0100               	movlb	0	; () banked
  9923  017BE6  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9924  017BE8  0E03               	movlw	high (_HMIBoard+48)
  9925  017BEA  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9926  017BEC  0E01               	movlw	1
  9927  017BEE  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9928  017BF0  ECAF  F0B0         	call	_Button_Poll	;wreg free
  9929                           
  9930                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  9931  017BF4  0EB2               	movlw	low (_HMIBoard+18)
  9932  017BF6  0100               	movlb	0	; () banked
  9933  017BF8  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9934  017BFA  0E03               	movlw	high (_HMIBoard+18)
  9935  017BFC  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9936  017BFE  0E01               	movlw	1
  9937  017C00  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9938  017C02  ECAF  F0B0         	call	_Button_Poll	;wreg free
  9939                           
  9940                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  9941  017C06  0EA8               	movlw	low (_HMIBoard+8)
  9942  017C08  0100               	movlb	0	; () banked
  9943  017C0A  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9944  017C0C  0E03               	movlw	high (_HMIBoard+8)
  9945  017C0E  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9946  017C10  0E01               	movlw	1
  9947  017C12  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9948  017C14  ECAF  F0B0         	call	_Button_Poll	;wreg free
  9949                           
  9950                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  9951  017C18  0EBC               	movlw	low (_HMIBoard+28)
  9952  017C1A  0100               	movlb	0	; () banked
  9953  017C1C  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9954  017C1E  0E03               	movlw	high (_HMIBoard+28)
  9955  017C20  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9956  017C22  0E01               	movlw	1
  9957  017C24  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9958  017C26  ECAF  F0B0         	call	_Button_Poll	;wreg free
  9959                           
  9960                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  9961  017C2A  0EC6               	movlw	low (_HMIBoard+38)
  9962  017C2C  0100               	movlb	0	; () banked
  9963  017C2E  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9964  017C30  0E03               	movlw	high (_HMIBoard+38)
  9965  017C32  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9966  017C34  0E01               	movlw	1
  9967  017C36  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9968  017C38  ECAF  F0B0         	call	_Button_Poll	;wreg free
  9969  017C3C  0012               	return		;funcret
  9970  017C3E                     __end_of_HMI_Poll:
  9971                           	opt stack 0
  9972                           tosu	equ	0xFFF
  9973                           tosh	equ	0xFFE
  9974                           tosl	equ	0xFFD
  9975                           pclath	equ	0xFFA
  9976                           tblptru	equ	0xFF8
  9977                           tblptrh	equ	0xFF7
  9978                           tblptrl	equ	0xFF6
  9979                           tablat	equ	0xFF5
  9980                           intcon	equ	0xFF2
  9981                           postinc0	equ	0xFEE
  9982                           wreg	equ	0xFE8
  9983                           postdec1	equ	0xFE5
  9984                           fsr1h	equ	0xFE2
  9985                           fsr1l	equ	0xFE1
  9986                           indf2	equ	0xFDF
  9987                           postinc2	equ	0xFDE
  9988                           postdec2	equ	0xFDD
  9989                           plusw2	equ	0xFDB
  9990                           fsr2h	equ	0xFDA
  9991                           fsr2l	equ	0xFD9
  9992                           status	equ	0xFD8
  9993                           
  9994 ;; *************** function _Button_Poll *****************
  9995 ;; Defined at:
  9996 ;;		line 57 in file "Library/Button.c"
  9997 ;; Parameters:    Size  Location     Type
  9998 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  9999 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 10000 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 10001 ;; Auto vars:     Size  Location     Type
 10002 ;;  Pin             1   35[BANK0 ] unsigned char 
 10003 ;; Return value:  Size  Location     Type
 10004 ;;                  1    wreg      unsigned char 
 10005 ;; Registers used:
 10006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10007 ;; Tracked objects:
 10008 ;;		On entry : 0/0
 10009 ;;		On exit  : 0/0
 10010 ;;		Unchanged: 0/0
 10011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10012 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10013 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10014 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10015 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10016 ;;Total ram usage:        9 bytes
 10017 ;; Hardware stack levels used:    1
 10018 ;; Hardware stack levels required when called:   14
 10019 ;; This function calls:
 10020 ;;		_Event_DIPSwitch
 10021 ;;		_Event_NULL
 10022 ;;		_Event_TestButton
 10023 ;;		_HMI_DIPSwitch
 10024 ;;		_HMI_DownSwitch
 10025 ;;		_HMI_LeftSwitch
 10026 ;;		_HMI_RightSwitch
 10027 ;;		_HMI_UpSwitch
 10028 ;;		_MXK_DIPSwitch
 10029 ;;		_MXK_TestButton
 10030 ;; This function is called by:
 10031 ;;		_HMI_Poll
 10032 ;;		_MXK_Poll
 10033 ;; This function uses a non-reentrant model
 10034 ;;
 10035                           
 10036                           	psect	text37
 10037  01615E                     __ptext37:
 10038                           	opt stack 0
 10039  01615E                     _Button_Poll:
 10040                           	opt stack 15
 10041                           
 10042                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 10043                           
 10044                           ;incstack = 0
 10045  01615E  0100               	movlb	0	; () banked
 10046  016160  EE20 F007          	lfsr	2,7
 10047  016164  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10048  016166  26D9               	addwf	fsr2l,f,c
 10049  016168  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10050  01616A  22DA               	addwfc	fsr2h,f,c
 10051  01616C  D801               	call	u13558
 10052  01616E  D00A               	goto	u13559
 10053  016170                     u13558:
 10054  016170  0005               	push	
 10055  016172  6EFA               	movwf	pclath,c
 10056  016174  50DE               	movf	postinc2,w,c
 10057  016176  6EFD               	movwf	tosl,c
 10058  016178  50DE               	movf	postinc2,w,c
 10059  01617A  6EFE               	movwf	tosh,c
 10060  01617C  50DE               	movf	postinc2,w,c
 10061  01617E  6EFF               	movwf	tosu,c
 10062  016180  50FA               	movf	pclath,w,c
 10063  016182  0012               	return		;indir
 10064  016184                     u13559:
 10065  016184  0100               	movlb	0	; () banked
 10066  016186  6F83               	movwf	Button_Poll@Pin& (0+255),b
 10067                           
 10068                           ; BSR set to: 0
 10069                           ;Button.c: 61: if (pButton->mState == Pin)
 10070  016188  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 10071  01618C  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10072  016190  5183               	movf	Button_Poll@Pin& (0+255),w,b
 10073  016192  18DE               	xorwf	postinc2,w,c
 10074  016194  A4D8               	btfss	status,2,c
 10075  016196  D01C               	goto	l11
 10076                           
 10077                           ; BSR set to: 0
 10078                           ;Button.c: 62: {
 10079                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 10080  016198  EE20 F001          	lfsr	2,1
 10081  01619C  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10082  01619E  26D9               	addwf	fsr2l,f,c
 10083  0161A0  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10084  0161A2  22DA               	addwfc	fsr2h,f,c
 10085  0161A4  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10086  0161A6  5CDE               	subwf	postinc2,w,c
 10087  0161A8  B0D8               	btfsc	status,0,c
 10088  0161AA  D009               	goto	l12
 10089                           
 10090                           ; BSR set to: 0
 10091                           ;Button.c: 66: pButton->mCount = 0;
 10092  0161AC  EE20 F001          	lfsr	2,1
 10093  0161B0  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10094  0161B2  26D9               	addwf	fsr2l,f,c
 10095  0161B4  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10096  0161B6  22DA               	addwfc	fsr2h,f,c
 10097  0161B8  0E00               	movlw	0
 10098  0161BA  6EDF               	movwf	indf2,c
 10099  0161BC  0012               	return	
 10100  0161BE                     l12:
 10101                           
 10102                           ; BSR set to: 0
 10103                           ;Button.c: 67: else
 10104                           ;Button.c: 68: pButton->mCount -= pIncrement;
 10105                           
 10106                           ; BSR set to: 0
 10107  0161BE  EE20 F001          	lfsr	2,1
 10108  0161C2  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10109  0161C4  26D9               	addwf	fsr2l,f,c
 10110  0161C6  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10111  0161C8  22DA               	addwfc	fsr2h,f,c
 10112  0161CA  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10113  0161CC  5EDF               	subwf	indf2,f,c
 10114                           
 10115                           ; BSR set to: 0
 10116                           ;Button.c: 69: }
 10117  0161CE  0012               	return	
 10118  0161D0                     l11:
 10119                           
 10120                           ; BSR set to: 0
 10121                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 10122                           
 10123                           ; BSR set to: 0
 10124  0161D0  EE20 F001          	lfsr	2,1
 10125  0161D4  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10126  0161D6  26D9               	addwf	fsr2l,f,c
 10127  0161D8  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10128  0161DA  22DA               	addwfc	fsr2h,f,c
 10129  0161DC  50DF               	movf	indf2,w,c
 10130  0161DE  6F7E               	movwf	??_Button_Poll& (0+255),b
 10131  0161E0  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 10132  0161E2  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10133  0161E4  277E               	addwf	??_Button_Poll& (0+255),f,b
 10134  0161E6  0E00               	movlw	0
 10135  0161E8  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 10136  0161EA  EE20 F001          	lfsr	2,1
 10137  0161EE  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10138  0161F0  26D9               	addwf	fsr2l,f,c
 10139  0161F2  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10140  0161F4  22DA               	addwfc	fsr2h,f,c
 10141  0161F6  50DF               	movf	indf2,w,c
 10142  0161F8  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 10143  0161FA  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 10144  0161FC  517E               	movf	??_Button_Poll& (0+255),w,b
 10145  0161FE  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10146  016200  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 10147  016202  0A80               	xorlw	128
 10148  016204  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 10149  016206  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 10150  016208  0A80               	xorlw	128
 10151  01620A  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 10152  01620C  B0D8               	btfsc	status,0,c
 10153  01620E  0012               	return	
 10154                           
 10155                           ; BSR set to: 0
 10156                           ;Button.c: 73: {
 10157                           ;Button.c: 75: pButton->mCount += pIncrement;
 10158  016210  EE20 F001          	lfsr	2,1
 10159  016214  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10160  016216  26D9               	addwf	fsr2l,f,c
 10161  016218  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10162  01621A  22DA               	addwfc	fsr2h,f,c
 10163  01621C  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10164  01621E  26DF               	addwf	indf2,f,c
 10165                           
 10166                           ; BSR set to: 0
 10167                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 10168  016220  EE20 F002          	lfsr	2,2
 10169  016224  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10170  016226  26D9               	addwf	fsr2l,f,c
 10171  016228  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10172  01622A  22DA               	addwfc	fsr2h,f,c
 10173  01622C  EE10 F001          	lfsr	1,1
 10174  016230  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10175  016232  26E1               	addwf	fsr1l,f,c
 10176  016234  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10177  016236  22E2               	addwfc	fsr1h,f,c
 10178  016238  50E7               	movf	indf1,w,c
 10179  01623A  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 10180  01623C  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 10181  01623E  50DE               	movf	postinc2,w,c
 10182  016240  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10183  016242  50DE               	movf	postinc2,w,c
 10184  016244  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 10185  016246  A0D8               	btfss	status,0,c
 10186  016248  0012               	return	
 10187                           
 10188                           ; BSR set to: 0
 10189                           ;Button.c: 77: {
 10190                           ;Button.c: 79: pButton->mState = Pin;
 10191  01624A  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 10192  01624E  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10193  016252  C083  FFDF         	movff	Button_Poll@Pin,indf2
 10194                           
 10195                           ; BSR set to: 0
 10196                           ;Button.c: 80: pButton->mCount = 0;
 10197  016256  EE20 F001          	lfsr	2,1
 10198  01625A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10199  01625C  26D9               	addwf	fsr2l,f,c
 10200  01625E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10201  016260  22DA               	addwfc	fsr2h,f,c
 10202  016262  0E00               	movlw	0
 10203  016264  6EDF               	movwf	indf2,c
 10204                           
 10205                           ; BSR set to: 0
 10206                           ;Button.c: 83: pButton->mFunction(Pin);
 10207  016266  EE20 F004          	lfsr	2,4
 10208  01626A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10209  01626C  26D9               	addwf	fsr2l,f,c
 10210  01626E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10211  016270  22DA               	addwfc	fsr2h,f,c
 10212  016272  D801               	call	u13608
 10213  016274  0012               	return	
 10214  016276                     u13608:
 10215  016276  0005               	push	
 10216  016278  6EFA               	movwf	pclath,c
 10217  01627A  50DE               	movf	postinc2,w,c
 10218  01627C  6EFD               	movwf	tosl,c
 10219  01627E  50DE               	movf	postinc2,w,c
 10220  016280  6EFE               	movwf	tosh,c
 10221  016282  50DE               	movf	postinc2,w,c
 10222  016284  6EFF               	movwf	tosu,c
 10223  016286  50FA               	movf	pclath,w,c
 10224  016288  5183               	movf	Button_Poll@Pin& (0+255),w,b
 10225  01628A  0012               	return		;indir
 10226  01628C                     __end_of_Button_Poll:
 10227                           	opt stack 0
 10228                           tosu	equ	0xFFF
 10229                           tosh	equ	0xFFE
 10230                           tosl	equ	0xFFD
 10231                           pclath	equ	0xFFA
 10232                           tblptru	equ	0xFF8
 10233                           tblptrh	equ	0xFF7
 10234                           tblptrl	equ	0xFF6
 10235                           tablat	equ	0xFF5
 10236                           intcon	equ	0xFF2
 10237                           postinc0	equ	0xFEE
 10238                           wreg	equ	0xFE8
 10239                           indf1	equ	0xFE7
 10240                           postdec1	equ	0xFE5
 10241                           fsr1h	equ	0xFE2
 10242                           fsr1l	equ	0xFE1
 10243                           indf2	equ	0xFDF
 10244                           postinc2	equ	0xFDE
 10245                           postdec2	equ	0xFDD
 10246                           plusw2	equ	0xFDB
 10247                           fsr2h	equ	0xFDA
 10248                           fsr2l	equ	0xFD9
 10249                           status	equ	0xFD8
 10250                           
 10251 ;; *************** function _MXK_DIPSwitch *****************
 10252 ;; Defined at:
 10253 ;;		line 24 in file "Library/MXK.c"
 10254 ;; Parameters:    Size  Location     Type
 10255 ;;		None
 10256 ;; Auto vars:     Size  Location     Type
 10257 ;;		None
 10258 ;; Return value:  Size  Location     Type
 10259 ;;                  1    wreg      unsigned char 
 10260 ;; Registers used:
 10261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10262 ;; Tracked objects:
 10263 ;;		On entry : 0/0
 10264 ;;		On exit  : 0/0
 10265 ;;		Unchanged: 0/0
 10266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10271 ;;Total ram usage:        0 bytes
 10272 ;; Hardware stack levels used:    1
 10273 ;; Hardware stack levels required when called:    8
 10274 ;; This function calls:
 10275 ;;		_Port_GetQuad
 10276 ;; This function is called by:
 10277 ;;		_FunctInitButton
 10278 ;;		_Button_Poll
 10279 ;;		_main
 10280 ;; This function uses a non-reentrant model
 10281 ;;
 10282                           
 10283                           	psect	text38
 10284  018B0E                     __ptext38:
 10285                           	opt stack 0
 10286  018B0E                     _MXK_DIPSwitch:
 10287                           	opt stack 22
 10288                           
 10289                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 10290                           
 10291                           ;incstack = 0
 10292  018B0E  0E76               	movlw	low _PortD
 10293  018B10  0100               	movlb	0	; () banked
 10294  018B12  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 10295  018B14  0E01               	movlw	high _PortD
 10296  018B16  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 10297  018B18  0E00               	movlw	0
 10298  018B1A  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 10299  018B1C  EC61  F0C2         	call	_Port_GetQuad
 10300  018B20  0012               	return	
 10301  018B22                     __end_of_MXK_DIPSwitch:
 10302                           	opt stack 0
 10303                           tosu	equ	0xFFF
 10304                           tosh	equ	0xFFE
 10305                           tosl	equ	0xFFD
 10306                           pclath	equ	0xFFA
 10307                           tblptru	equ	0xFF8
 10308                           tblptrh	equ	0xFF7
 10309                           tblptrl	equ	0xFF6
 10310                           tablat	equ	0xFF5
 10311                           intcon	equ	0xFF2
 10312                           postinc0	equ	0xFEE
 10313                           wreg	equ	0xFE8
 10314                           indf1	equ	0xFE7
 10315                           postdec1	equ	0xFE5
 10316                           fsr1h	equ	0xFE2
 10317                           fsr1l	equ	0xFE1
 10318                           indf2	equ	0xFDF
 10319                           postinc2	equ	0xFDE
 10320                           postdec2	equ	0xFDD
 10321                           plusw2	equ	0xFDB
 10322                           fsr2h	equ	0xFDA
 10323                           fsr2l	equ	0xFD9
 10324                           status	equ	0xFD8
 10325                           
 10326 ;; *************** function _HMI_DIPSwitch *****************
 10327 ;; Defined at:
 10328 ;;		line 47 in file "HMI.c"
 10329 ;; Parameters:    Size  Location     Type
 10330 ;;		None
 10331 ;; Auto vars:     Size  Location     Type
 10332 ;;		None
 10333 ;; Return value:  Size  Location     Type
 10334 ;;                  1    wreg      unsigned char 
 10335 ;; Registers used:
 10336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10337 ;; Tracked objects:
 10338 ;;		On entry : 0/0
 10339 ;;		On exit  : 0/0
 10340 ;;		Unchanged: 0/0
 10341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10346 ;;Total ram usage:        0 bytes
 10347 ;; Hardware stack levels used:    1
 10348 ;; Hardware stack levels required when called:    8
 10349 ;; This function calls:
 10350 ;;		_Port_GetQuad
 10351 ;; This function is called by:
 10352 ;;		_HMI_Init
 10353 ;;		_Button_Poll
 10354 ;;		_main
 10355 ;; This function uses a non-reentrant model
 10356 ;;
 10357                           
 10358                           	psect	text39
 10359  018B22                     __ptext39:
 10360                           	opt stack 0
 10361  018B22                     _HMI_DIPSwitch:
 10362                           	opt stack 20
 10363                           
 10364                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 10365                           
 10366                           ;incstack = 0
 10367  018B22  0E6C               	movlw	low _PortE
 10368  018B24  0100               	movlb	0	; () banked
 10369  018B26  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 10370  018B28  0E01               	movlw	high _PortE
 10371  018B2A  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 10372  018B2C  0E00               	movlw	0
 10373  018B2E  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 10374  018B30  EC61  F0C2         	call	_Port_GetQuad	;wreg free
 10375  018B34  0012               	return	
 10376  018B36                     __end_of_HMI_DIPSwitch:
 10377                           	opt stack 0
 10378                           tosu	equ	0xFFF
 10379                           tosh	equ	0xFFE
 10380                           tosl	equ	0xFFD
 10381                           pclath	equ	0xFFA
 10382                           tblptru	equ	0xFF8
 10383                           tblptrh	equ	0xFF7
 10384                           tblptrl	equ	0xFF6
 10385                           tablat	equ	0xFF5
 10386                           intcon	equ	0xFF2
 10387                           postinc0	equ	0xFEE
 10388                           wreg	equ	0xFE8
 10389                           indf1	equ	0xFE7
 10390                           postdec1	equ	0xFE5
 10391                           fsr1h	equ	0xFE2
 10392                           fsr1l	equ	0xFE1
 10393                           indf2	equ	0xFDF
 10394                           postinc2	equ	0xFDE
 10395                           postdec2	equ	0xFDD
 10396                           plusw2	equ	0xFDB
 10397                           fsr2h	equ	0xFDA
 10398                           fsr2l	equ	0xFD9
 10399                           status	equ	0xFD8
 10400                           
 10401 ;; *************** function _HMI_DownSwitch *****************
 10402 ;; Defined at:
 10403 ;;		line 42 in file "HMI.c"
 10404 ;; Parameters:    Size  Location     Type
 10405 ;;		None
 10406 ;; Auto vars:     Size  Location     Type
 10407 ;;		None
 10408 ;; Return value:  Size  Location     Type
 10409 ;;                  1    wreg      unsigned char 
 10410 ;; Registers used:
 10411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10412 ;; Tracked objects:
 10413 ;;		On entry : 0/0
 10414 ;;		On exit  : 0/0
 10415 ;;		Unchanged: 0/0
 10416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10421 ;;Total ram usage:        0 bytes
 10422 ;; Hardware stack levels used:    1
 10423 ;; Hardware stack levels required when called:    8
 10424 ;; This function calls:
 10425 ;;		_Port_GetPin
 10426 ;; This function is called by:
 10427 ;;		_HMI_Init
 10428 ;;		_Button_Poll
 10429 ;;		_main
 10430 ;; This function uses a non-reentrant model
 10431 ;;
 10432                           
 10433                           	psect	text40
 10434  018B36                     __ptext40:
 10435                           	opt stack 0
 10436  018B36                     _HMI_DownSwitch:
 10437                           	opt stack 20
 10438                           
 10439                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 10440                           
 10441                           ;incstack = 0
 10442  018B36  0E6C               	movlw	low _PortE
 10443  018B38  0100               	movlb	0	; () banked
 10444  018B3A  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 10445  018B3C  0E01               	movlw	high _PortE
 10446  018B3E  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 10447  018B40  0E06               	movlw	6
 10448  018B42  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 10449  018B44  ECBB  F0C2         	call	_Port_GetPin	;wreg free
 10450  018B48  0012               	return	
 10451  018B4A                     __end_of_HMI_DownSwitch:
 10452                           	opt stack 0
 10453                           tosu	equ	0xFFF
 10454                           tosh	equ	0xFFE
 10455                           tosl	equ	0xFFD
 10456                           pclath	equ	0xFFA
 10457                           tblptru	equ	0xFF8
 10458                           tblptrh	equ	0xFF7
 10459                           tblptrl	equ	0xFF6
 10460                           tablat	equ	0xFF5
 10461                           intcon	equ	0xFF2
 10462                           postinc0	equ	0xFEE
 10463                           wreg	equ	0xFE8
 10464                           indf1	equ	0xFE7
 10465                           postdec1	equ	0xFE5
 10466                           fsr1h	equ	0xFE2
 10467                           fsr1l	equ	0xFE1
 10468                           indf2	equ	0xFDF
 10469                           postinc2	equ	0xFDE
 10470                           postdec2	equ	0xFDD
 10471                           plusw2	equ	0xFDB
 10472                           fsr2h	equ	0xFDA
 10473                           fsr2l	equ	0xFD9
 10474                           status	equ	0xFD8
 10475                           
 10476 ;; *************** function _HMI_UpSwitch *****************
 10477 ;; Defined at:
 10478 ;;		line 37 in file "HMI.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;		None
 10481 ;; Auto vars:     Size  Location     Type
 10482 ;;		None
 10483 ;; Return value:  Size  Location     Type
 10484 ;;                  1    wreg      unsigned char 
 10485 ;; Registers used:
 10486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10487 ;; Tracked objects:
 10488 ;;		On entry : 0/0
 10489 ;;		On exit  : 0/0
 10490 ;;		Unchanged: 0/0
 10491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;Total ram usage:        0 bytes
 10497 ;; Hardware stack levels used:    1
 10498 ;; Hardware stack levels required when called:    8
 10499 ;; This function calls:
 10500 ;;		_Port_GetPin
 10501 ;; This function is called by:
 10502 ;;		_HMI_Init
 10503 ;;		_Button_Poll
 10504 ;;		_main
 10505 ;; This function uses a non-reentrant model
 10506 ;;
 10507                           
 10508                           	psect	text41
 10509  018B4A                     __ptext41:
 10510                           	opt stack 0
 10511  018B4A                     _HMI_UpSwitch:
 10512                           	opt stack 22
 10513                           
 10514                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 10515                           
 10516                           ;incstack = 0
 10517  018B4A  0E6C               	movlw	low _PortE
 10518  018B4C  0100               	movlb	0	; () banked
 10519  018B4E  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 10520  018B50  0E01               	movlw	high _PortE
 10521  018B52  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 10522  018B54  0E07               	movlw	7
 10523  018B56  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 10524  018B58  ECBB  F0C2         	call	_Port_GetPin	;wreg free
 10525  018B5C  0012               	return	
 10526  018B5E                     __end_of_HMI_UpSwitch:
 10527                           	opt stack 0
 10528                           tosu	equ	0xFFF
 10529                           tosh	equ	0xFFE
 10530                           tosl	equ	0xFFD
 10531                           pclath	equ	0xFFA
 10532                           tblptru	equ	0xFF8
 10533                           tblptrh	equ	0xFF7
 10534                           tblptrl	equ	0xFF6
 10535                           tablat	equ	0xFF5
 10536                           intcon	equ	0xFF2
 10537                           postinc0	equ	0xFEE
 10538                           wreg	equ	0xFE8
 10539                           indf1	equ	0xFE7
 10540                           postdec1	equ	0xFE5
 10541                           fsr1h	equ	0xFE2
 10542                           fsr1l	equ	0xFE1
 10543                           indf2	equ	0xFDF
 10544                           postinc2	equ	0xFDE
 10545                           postdec2	equ	0xFDD
 10546                           plusw2	equ	0xFDB
 10547                           fsr2h	equ	0xFDA
 10548                           fsr2l	equ	0xFD9
 10549                           status	equ	0xFD8
 10550                           
 10551 ;; *************** function _HMI_RightSwitch *****************
 10552 ;; Defined at:
 10553 ;;		line 32 in file "HMI.c"
 10554 ;; Parameters:    Size  Location     Type
 10555 ;;		None
 10556 ;; Auto vars:     Size  Location     Type
 10557 ;;		None
 10558 ;; Return value:  Size  Location     Type
 10559 ;;                  1    wreg      unsigned char 
 10560 ;; Registers used:
 10561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10562 ;; Tracked objects:
 10563 ;;		On entry : 0/0
 10564 ;;		On exit  : 0/0
 10565 ;;		Unchanged: 0/0
 10566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10571 ;;Total ram usage:        0 bytes
 10572 ;; Hardware stack levels used:    1
 10573 ;; Hardware stack levels required when called:    8
 10574 ;; This function calls:
 10575 ;;		_Port_GetPin
 10576 ;; This function is called by:
 10577 ;;		_HMI_Init
 10578 ;;		_Button_Poll
 10579 ;;		_main
 10580 ;; This function uses a non-reentrant model
 10581 ;;
 10582                           
 10583                           	psect	text42
 10584  018B5E                     __ptext42:
 10585                           	opt stack 0
 10586  018B5E                     _HMI_RightSwitch:
 10587                           	opt stack 22
 10588                           
 10589                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 10590                           
 10591                           ;incstack = 0
 10592  018B5E  0E6C               	movlw	low _PortE
 10593  018B60  0100               	movlb	0	; () banked
 10594  018B62  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 10595  018B64  0E01               	movlw	high _PortE
 10596  018B66  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 10597  018B68  0E04               	movlw	4
 10598  018B6A  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 10599  018B6C  ECBB  F0C2         	call	_Port_GetPin	;wreg free
 10600  018B70  0012               	return	
 10601  018B72                     __end_of_HMI_RightSwitch:
 10602                           	opt stack 0
 10603                           tosu	equ	0xFFF
 10604                           tosh	equ	0xFFE
 10605                           tosl	equ	0xFFD
 10606                           pclath	equ	0xFFA
 10607                           tblptru	equ	0xFF8
 10608                           tblptrh	equ	0xFF7
 10609                           tblptrl	equ	0xFF6
 10610                           tablat	equ	0xFF5
 10611                           intcon	equ	0xFF2
 10612                           postinc0	equ	0xFEE
 10613                           wreg	equ	0xFE8
 10614                           indf1	equ	0xFE7
 10615                           postdec1	equ	0xFE5
 10616                           fsr1h	equ	0xFE2
 10617                           fsr1l	equ	0xFE1
 10618                           indf2	equ	0xFDF
 10619                           postinc2	equ	0xFDE
 10620                           postdec2	equ	0xFDD
 10621                           plusw2	equ	0xFDB
 10622                           fsr2h	equ	0xFDA
 10623                           fsr2l	equ	0xFD9
 10624                           status	equ	0xFD8
 10625                           
 10626 ;; *************** function _HMI_LeftSwitch *****************
 10627 ;; Defined at:
 10628 ;;		line 27 in file "HMI.c"
 10629 ;; Parameters:    Size  Location     Type
 10630 ;;		None
 10631 ;; Auto vars:     Size  Location     Type
 10632 ;;		None
 10633 ;; Return value:  Size  Location     Type
 10634 ;;                  1    wreg      unsigned char 
 10635 ;; Registers used:
 10636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10637 ;; Tracked objects:
 10638 ;;		On entry : 0/0
 10639 ;;		On exit  : 0/0
 10640 ;;		Unchanged: 0/0
 10641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10646 ;;Total ram usage:        0 bytes
 10647 ;; Hardware stack levels used:    1
 10648 ;; Hardware stack levels required when called:    8
 10649 ;; This function calls:
 10650 ;;		_Port_GetPin
 10651 ;; This function is called by:
 10652 ;;		_HMI_Init
 10653 ;;		_Button_Poll
 10654 ;;		_main
 10655 ;; This function uses a non-reentrant model
 10656 ;;
 10657                           
 10658                           	psect	text43
 10659  018B72                     __ptext43:
 10660                           	opt stack 0
 10661  018B72                     _HMI_LeftSwitch:
 10662                           	opt stack 20
 10663                           
 10664                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 10665                           
 10666                           ;incstack = 0
 10667  018B72  0E6C               	movlw	low _PortE
 10668  018B74  0100               	movlb	0	; () banked
 10669  018B76  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 10670  018B78  0E01               	movlw	high _PortE
 10671  018B7A  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 10672  018B7C  0E05               	movlw	5
 10673  018B7E  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 10674  018B80  ECBB  F0C2         	call	_Port_GetPin	;wreg free
 10675  018B84  0012               	return	
 10676  018B86                     __end_of_HMI_LeftSwitch:
 10677                           	opt stack 0
 10678                           tosu	equ	0xFFF
 10679                           tosh	equ	0xFFE
 10680                           tosl	equ	0xFFD
 10681                           pclath	equ	0xFFA
 10682                           tblptru	equ	0xFF8
 10683                           tblptrh	equ	0xFF7
 10684                           tblptrl	equ	0xFF6
 10685                           tablat	equ	0xFF5
 10686                           intcon	equ	0xFF2
 10687                           postinc0	equ	0xFEE
 10688                           wreg	equ	0xFE8
 10689                           indf1	equ	0xFE7
 10690                           postdec1	equ	0xFE5
 10691                           fsr1h	equ	0xFE2
 10692                           fsr1l	equ	0xFE1
 10693                           indf2	equ	0xFDF
 10694                           postinc2	equ	0xFDE
 10695                           postdec2	equ	0xFDD
 10696                           plusw2	equ	0xFDB
 10697                           fsr2h	equ	0xFDA
 10698                           fsr2l	equ	0xFD9
 10699                           status	equ	0xFD8
 10700                           
 10701 ;; *************** function _MXK_TestButton *****************
 10702 ;; Defined at:
 10703 ;;		line 14 in file "Library/MXK.c"
 10704 ;; Parameters:    Size  Location     Type
 10705 ;;		None
 10706 ;; Auto vars:     Size  Location     Type
 10707 ;;		None
 10708 ;; Return value:  Size  Location     Type
 10709 ;;                  1    wreg      unsigned char 
 10710 ;; Registers used:
 10711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10712 ;; Tracked objects:
 10713 ;;		On entry : 0/0
 10714 ;;		On exit  : 0/0
 10715 ;;		Unchanged: 0/0
 10716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10721 ;;Total ram usage:        0 bytes
 10722 ;; Hardware stack levels used:    1
 10723 ;; Hardware stack levels required when called:    8
 10724 ;; This function calls:
 10725 ;;		_Port_GetPin
 10726 ;; This function is called by:
 10727 ;;		_FunctInitButton
 10728 ;;		_Button_Poll
 10729 ;;		_main
 10730 ;; This function uses a non-reentrant model
 10731 ;;
 10732                           
 10733                           	psect	text44
 10734  018B86                     __ptext44:
 10735                           	opt stack 0
 10736  018B86                     _MXK_TestButton:
 10737                           	opt stack 22
 10738                           
 10739                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 10740                           
 10741                           ;incstack = 0
 10742  018B86  0E80               	movlw	low _PortB
 10743  018B88  0100               	movlb	0	; () banked
 10744  018B8A  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 10745  018B8C  0E01               	movlw	high _PortB
 10746  018B8E  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 10747  018B90  0E04               	movlw	4
 10748  018B92  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 10749  018B94  ECBB  F0C2         	call	_Port_GetPin	;wreg free
 10750  018B98  0012               	return	
 10751  018B9A                     __end_of_MXK_TestButton:
 10752                           	opt stack 0
 10753                           tosu	equ	0xFFF
 10754                           tosh	equ	0xFFE
 10755                           tosl	equ	0xFFD
 10756                           pclath	equ	0xFFA
 10757                           tblptru	equ	0xFF8
 10758                           tblptrh	equ	0xFF7
 10759                           tblptrl	equ	0xFF6
 10760                           tablat	equ	0xFF5
 10761                           intcon	equ	0xFF2
 10762                           postinc0	equ	0xFEE
 10763                           wreg	equ	0xFE8
 10764                           indf1	equ	0xFE7
 10765                           postdec1	equ	0xFE5
 10766                           fsr1h	equ	0xFE2
 10767                           fsr1l	equ	0xFE1
 10768                           indf2	equ	0xFDF
 10769                           postinc2	equ	0xFDE
 10770                           postdec2	equ	0xFDD
 10771                           plusw2	equ	0xFDB
 10772                           fsr2h	equ	0xFDA
 10773                           fsr2l	equ	0xFD9
 10774                           status	equ	0xFD8
 10775                           
 10776 ;; *************** function _Port_GetQuad *****************
 10777 ;; Defined at:
 10778 ;;		line 498 in file "Library/Port.c"
 10779 ;; Parameters:    Size  Location     Type
 10780 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 10781 ;;		 -> PortE(10), PortD(10), 
 10782 ;;  pQuad           1    2[BANK0 ] enum E6776
 10783 ;; Auto vars:     Size  Location     Type
 10784 ;;  Output          1    5[BANK0 ] unsigned char 
 10785 ;; Return value:  Size  Location     Type
 10786 ;;                  1    wreg      unsigned char 
 10787 ;; Registers used:
 10788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10789 ;; Tracked objects:
 10790 ;;		On entry : 0/0
 10791 ;;		On exit  : 0/0
 10792 ;;		Unchanged: 0/0
 10793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10794 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10796 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10797 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10798 ;;Total ram usage:        6 bytes
 10799 ;; Hardware stack levels used:    1
 10800 ;; Hardware stack levels required when called:    7
 10801 ;; This function calls:
 10802 ;;		Nothing
 10803 ;; This function is called by:
 10804 ;;		_HMI_DIPSwitch
 10805 ;;		_MXK_DIPSwitch
 10806 ;;		_Port_ToggleQuad
 10807 ;; This function uses a non-reentrant model
 10808 ;;
 10809                           
 10810                           	psect	text45
 10811  0184C2                     __ptext45:
 10812                           	opt stack 0
 10813  0184C2                     _Port_GetQuad:
 10814                           	opt stack 22
 10815                           
 10816                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 10817                           
 10818                           ;incstack = 0
 10819  0184C2  0100               	movlb	0	; () banked
 10820  0184C4  EE20 F006          	lfsr	2,6
 10821  0184C8  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 10822  0184CA  26D9               	addwf	fsr2l,f,c
 10823  0184CC  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 10824  0184CE  22DA               	addwfc	fsr2h,f,c
 10825  0184D0  CFDE F063          	movff	postinc2,??_Port_GetQuad
 10826  0184D4  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 10827  0184D8  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 10828  0184DC  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 10829  0184E0  50DF               	movf	indf2,w,c
 10830  0184E2  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 10834  0184E4  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 10835  0184E6  0D04               	mullw	4
 10836  0184E8  28F3               	incf	prodl,w,c
 10837  0184EA  6F63               	movwf	??_Port_GetQuad& (0+255),b
 10838  0184EC  D002               	goto	u12830
 10839  0184EE                     u12835:
 10840  0184EE  90D8               	bcf	status,0,c
 10841  0184F0  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 10842  0184F2                     u12830:
 10843  0184F2  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 10844  0184F4  D7FC               	goto	u12835
 10845                           
 10846                           ;Port.c: 502: Output &= 0xF;
 10847  0184F6  0E0F               	movlw	15
 10848  0184F8  0100               	movlb	0	; () banked
 10849  0184FA  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 10850                           
 10851                           ; BSR set to: 0
 10852                           ;Port.c: 503: return Output;
 10853  0184FC  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 10854  0184FE  0012               	return	
 10855  018500                     __end_of_Port_GetQuad:
 10856                           	opt stack 0
 10857                           tosu	equ	0xFFF
 10858                           tosh	equ	0xFFE
 10859                           tosl	equ	0xFFD
 10860                           pclath	equ	0xFFA
 10861                           tblptru	equ	0xFF8
 10862                           tblptrh	equ	0xFF7
 10863                           tblptrl	equ	0xFF6
 10864                           tablat	equ	0xFF5
 10865                           prodl	equ	0xFF3
 10866                           intcon	equ	0xFF2
 10867                           postinc0	equ	0xFEE
 10868                           wreg	equ	0xFE8
 10869                           indf1	equ	0xFE7
 10870                           postdec1	equ	0xFE5
 10871                           fsr1h	equ	0xFE2
 10872                           fsr1l	equ	0xFE1
 10873                           indf2	equ	0xFDF
 10874                           postinc2	equ	0xFDE
 10875                           postdec2	equ	0xFDD
 10876                           plusw2	equ	0xFDB
 10877                           fsr2h	equ	0xFDA
 10878                           fsr2l	equ	0xFD9
 10879                           status	equ	0xFD8
 10880                           
 10881 ;; *************** function _Event_DIPSwitch *****************
 10882 ;; Defined at:
 10883 ;;		line 22 in file "Events.c"
 10884 ;; Parameters:    Size  Location     Type
 10885 ;;  pState          1    wreg     unsigned char 
 10886 ;; Auto vars:     Size  Location     Type
 10887 ;;  pState          1   25[BANK0 ] unsigned char 
 10888 ;;  Bar             1   26[BANK0 ] unsigned char 
 10889 ;; Return value:  Size  Location     Type
 10890 ;;                  1    wreg      void 
 10891 ;; Registers used:
 10892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10893 ;; Tracked objects:
 10894 ;;		On entry : 0/0
 10895 ;;		On exit  : 0/0
 10896 ;;		Unchanged: 0/0
 10897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10899 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10901 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10902 ;;Total ram usage:        2 bytes
 10903 ;; Hardware stack levels used:    1
 10904 ;; Hardware stack levels required when called:   13
 10905 ;; This function calls:
 10906 ;;		_HMI_GetBar
 10907 ;;		_HMI_SetBar
 10908 ;;		_LED_Toggle
 10909 ;; This function is called by:
 10910 ;;		_FunctInitButton
 10911 ;;		_Button_Poll
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915                           	psect	text46
 10916  0188B6                     __ptext46:
 10917                           	opt stack 0
 10918  0188B6                     _Event_DIPSwitch:
 10919                           	opt stack 15
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;incstack = 0
 10923                           ;Event_DIPSwitch@pState stored from wreg
 10924  0188B6  0100               	movlb	0	; () banked
 10925  0188B8  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 10926                           
 10927                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 10928  0188BA  EC5B  F0C6         	call	_HMI_GetBar	;wreg free
 10929  0188BE  0100               	movlb	0	; () banked
 10930  0188C0  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;Events.c: 25: Bar &= 0x0F;
 10934  0188C2  0E0F               	movlw	15
 10935  0188C4  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;Events.c: 26: pState <<= 4;
 10939  0188C6  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 10940  0188C8  0EF0               	movlw	240
 10941  0188CA  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 10942                           
 10943                           ; BSR set to: 0
 10944                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 10945  0188CC  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 10946  0188CE  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 10947  0188D0  EC46  F0C6         	call	_HMI_SetBar
 10948                           
 10949                           ;Events.c: 32: LED_Toggle(eLED1);
 10950  0188D4  0E00               	movlw	0
 10951  0188D6  EC21  F0C2         	call	_LED_Toggle
 10952  0188DA  0012               	return		;funcret
 10953  0188DC                     __end_of_Event_DIPSwitch:
 10954                           	opt stack 0
 10955                           tosu	equ	0xFFF
 10956                           tosh	equ	0xFFE
 10957                           tosl	equ	0xFFD
 10958                           pclath	equ	0xFFA
 10959                           tblptru	equ	0xFF8
 10960                           tblptrh	equ	0xFF7
 10961                           tblptrl	equ	0xFF6
 10962                           tablat	equ	0xFF5
 10963                           prodl	equ	0xFF3
 10964                           intcon	equ	0xFF2
 10965                           postinc0	equ	0xFEE
 10966                           wreg	equ	0xFE8
 10967                           indf1	equ	0xFE7
 10968                           postdec1	equ	0xFE5
 10969                           fsr1h	equ	0xFE2
 10970                           fsr1l	equ	0xFE1
 10971                           indf2	equ	0xFDF
 10972                           postinc2	equ	0xFDE
 10973                           postdec2	equ	0xFDD
 10974                           plusw2	equ	0xFDB
 10975                           fsr2h	equ	0xFDA
 10976                           fsr2l	equ	0xFD9
 10977                           status	equ	0xFD8
 10978                           
 10979 ;; *************** function _Event_NULL *****************
 10980 ;; Defined at:
 10981 ;;		line 9 in file "Events.c"
 10982 ;; Parameters:    Size  Location     Type
 10983 ;;  pState          1    wreg     unsigned char 
 10984 ;; Auto vars:     Size  Location     Type
 10985 ;;  pState          1    0[COMRAM] unsigned char 
 10986 ;; Return value:  Size  Location     Type
 10987 ;;                  1    wreg      void 
 10988 ;; Registers used:
 10989 ;;		wreg
 10990 ;; Tracked objects:
 10991 ;;		On entry : 0/0
 10992 ;;		On exit  : 0/0
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10999 ;;Total ram usage:        0 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; Hardware stack levels required when called:    7
 11002 ;; This function calls:
 11003 ;;		Nothing
 11004 ;; This function is called by:
 11005 ;;		_HMI_Init
 11006 ;;		_Button_Poll
 11007 ;; This function uses a non-reentrant model
 11008 ;;
 11009                           
 11010                           	psect	text47
 11011  001404                     __ptext47:
 11012                           	opt stack 0
 11013  001404                     _Event_NULL:
 11014                           	opt stack 21
 11015                           
 11016                           ;incstack = 0
 11017  001404  0012               	return		;funcret
 11018  001406                     __end_of_Event_NULL:
 11019                           	opt stack 0
 11020                           tosu	equ	0xFFF
 11021                           tosh	equ	0xFFE
 11022                           tosl	equ	0xFFD
 11023                           pclath	equ	0xFFA
 11024                           tblptru	equ	0xFF8
 11025                           tblptrh	equ	0xFF7
 11026                           tblptrl	equ	0xFF6
 11027                           tablat	equ	0xFF5
 11028                           prodl	equ	0xFF3
 11029                           intcon	equ	0xFF2
 11030                           postinc0	equ	0xFEE
 11031                           wreg	equ	0xFE8
 11032                           indf1	equ	0xFE7
 11033                           postdec1	equ	0xFE5
 11034                           fsr1h	equ	0xFE2
 11035                           fsr1l	equ	0xFE1
 11036                           indf2	equ	0xFDF
 11037                           postinc2	equ	0xFDE
 11038                           postdec2	equ	0xFDD
 11039                           plusw2	equ	0xFDB
 11040                           fsr2h	equ	0xFDA
 11041                           fsr2l	equ	0xFD9
 11042                           status	equ	0xFD8
 11043                           
 11044 ;; *************** function _Event_TestButton *****************
 11045 ;; Defined at:
 11046 ;;		line 52 in file "Events.c"
 11047 ;; Parameters:    Size  Location     Type
 11048 ;;  pState          1    wreg     unsigned char 
 11049 ;; Auto vars:     Size  Location     Type
 11050 ;;  pState          1   25[BANK0 ] unsigned char 
 11051 ;; Return value:  Size  Location     Type
 11052 ;;                  1    wreg      void 
 11053 ;; Registers used:
 11054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11055 ;; Tracked objects:
 11056 ;;		On entry : 0/0
 11057 ;;		On exit  : 0/0
 11058 ;;		Unchanged: 0/0
 11059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11061 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11063 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11064 ;;Total ram usage:        1 bytes
 11065 ;; Hardware stack levels used:    1
 11066 ;; Hardware stack levels required when called:   13
 11067 ;; This function calls:
 11068 ;;		_HMI_SetButton
 11069 ;;		_HMI_SetNumber
 11070 ;;		_LED_Toggle
 11071 ;; This function is called by:
 11072 ;;		_FunctInitButton
 11073 ;;		_Button_Poll
 11074 ;; This function uses a non-reentrant model
 11075 ;;
 11076                           
 11077                           	psect	text48
 11078  01868E                     __ptext48:
 11079                           	opt stack 0
 11080  01868E                     _Event_TestButton:
 11081                           	opt stack 15
 11082                           
 11083                           ;incstack = 0
 11084                           ;Event_TestButton@pState stored from wreg
 11085  01868E  0100               	movlb	0	; () banked
 11086  018690  6F79               	movwf	Event_TestButton@pState& (0+255),b
 11087                           
 11088                           ;Events.c: 56: static UINT8 j = 0;
 11089                           ;Events.c: 60: if (pState == 0)
 11090  018692  0100               	movlb	0	; () banked
 11091  018694  5179               	movf	Event_TestButton@pState& (0+255),w,b
 11092  018696  A4D8               	btfss	status,2,c
 11093  018698  D010               	goto	l1873
 11094                           
 11095                           ; BSR set to: 0
 11096                           ;Events.c: 61: {
 11097                           ;Events.c: 62: j++;
 11098  01869A  2A3C               	incf	Event_TestButton@j,f,c
 11099                           
 11100                           ; BSR set to: 0
 11101                           ;Events.c: 63: val += j;
 11102  01869C  503C               	movf	Event_TestButton@j,w,c
 11103  01869E  0101               	movlb	1	; () banked
 11104  0186A0  2750               	addwf	_val& (0+255),f,b
 11105  0186A2  0E00               	movlw	0
 11106  0186A4  2351               	addwfc	(_val+1)& (0+255),f,b
 11107                           
 11108                           ; BSR set to: 1
 11109                           ;Events.c: 64: HMI_SetNumber( val );
 11110  0186A6  C150  F076         	movff	_val,HMI_SetNumber@pInput
 11111  0186AA  C151  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 11112  0186AE  EC6E  F0C4         	call	_HMI_SetNumber	;wreg free
 11113                           
 11114                           ;Events.c: 67: HMI_SetButton( j & 3 );
 11115  0186B2  503C               	movf	Event_TestButton@j,w,c
 11116  0186B4  0B03               	andlw	3
 11117  0186B6  ECE0  F0BA         	call	_HMI_SetButton
 11118  0186BA                     l1873:
 11119                           
 11120                           ;Events.c: 68: }
 11121                           ;Events.c: 72: LED_Toggle(eLED1);
 11122  0186BA  0E00               	movlw	0
 11123  0186BC  EC21  F0C2         	call	_LED_Toggle
 11124  0186C0  0012               	return		;funcret
 11125  0186C2                     __end_of_Event_TestButton:
 11126                           	opt stack 0
 11127                           tosu	equ	0xFFF
 11128                           tosh	equ	0xFFE
 11129                           tosl	equ	0xFFD
 11130                           pclath	equ	0xFFA
 11131                           tblptru	equ	0xFF8
 11132                           tblptrh	equ	0xFF7
 11133                           tblptrl	equ	0xFF6
 11134                           tablat	equ	0xFF5
 11135                           prodl	equ	0xFF3
 11136                           intcon	equ	0xFF2
 11137                           postinc0	equ	0xFEE
 11138                           wreg	equ	0xFE8
 11139                           indf1	equ	0xFE7
 11140                           postdec1	equ	0xFE5
 11141                           fsr1h	equ	0xFE2
 11142                           fsr1l	equ	0xFE1
 11143                           indf2	equ	0xFDF
 11144                           postinc2	equ	0xFDE
 11145                           postdec2	equ	0xFDD
 11146                           plusw2	equ	0xFDB
 11147                           fsr2h	equ	0xFDA
 11148                           fsr2l	equ	0xFD9
 11149                           status	equ	0xFD8
 11150                           
 11151 ;; *************** function _HMI_SetButton *****************
 11152 ;; Defined at:
 11153 ;;		line 186 in file "HMI.c"
 11154 ;; Parameters:    Size  Location     Type
 11155 ;;  pValue          1    wreg     unsigned char 
 11156 ;; Auto vars:     Size  Location     Type
 11157 ;;  pValue          1    6[BANK0 ] unsigned char 
 11158 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 11159 ;;  v               1    7[BANK0 ] unsigned char 
 11160 ;; Return value:  Size  Location     Type
 11161 ;;                  1    wreg      void 
 11162 ;; Registers used:
 11163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11164 ;; Tracked objects:
 11165 ;;		On entry : 0/0
 11166 ;;		On exit  : 0/0
 11167 ;;		Unchanged: 0/0
 11168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11170 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11171 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;Total ram usage:        8 bytes
 11174 ;; Hardware stack levels used:    1
 11175 ;; Hardware stack levels required when called:    7
 11176 ;; This function calls:
 11177 ;;		Nothing
 11178 ;; This function is called by:
 11179 ;;		_Event_TestButton
 11180 ;; This function uses a non-reentrant model
 11181 ;;
 11182                           
 11183                           	psect	text49
 11184  0175C0                     __ptext49:
 11185                           	opt stack 0
 11186  0175C0                     _HMI_SetButton:
 11187                           	opt stack 20
 11188                           
 11189                           ;incstack = 0
 11190                           ;HMI_SetButton@pValue stored from wreg
 11191  0175C0  0100               	movlb	0	; () banked
 11192  0175C2  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 11193                           
 11194                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 11195  0175C4  0E28               	movlw	low HMI_SetButton@F7213
 11196  0175C6  6EF6               	movwf	tblptrl,c
 11197  0175C8                     	if	1	;There is more than 1 active tblptr byte
 11198  0175C8  0EFC               	movlw	high HMI_SetButton@F7213
 11199  0175CA  6EF7               	movwf	tblptrh,c
 11200  0175CC                     	endif
 11201  0175CC                     	if	1	;There are 3 active tblptr bytes
 11202  0175CC  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 11203  0175CE  6EF8               	movwf	tblptru,c
 11204  0175D0                     	endif
 11205  0175D0  0009               	tblrd		*+
 11206  0175D2  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 11207  0175D6  0009               	tblrd		*+
 11208  0175D8  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 11209  0175DC  0009               	tblrd		*+
 11210  0175DE  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 11211  0175E2  000A               	tblrd		*-
 11212  0175E4  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 11213                           
 11214                           ;HMI.c: 189: UINT8 v = 0b00010001;
 11215  0175E8  0E11               	movlw	17
 11216  0175EA  0100               	movlb	0	; () banked
 11217  0175EC  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11218                           
 11219                           ; BSR set to: 0
 11220                           ;HMI.c: 190: pValue &= 3;
 11221  0175EE  0E03               	movlw	3
 11222  0175F0  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 11223                           
 11224                           ; BSR set to: 0
 11225                           ;HMI.c: 191: v = v << reindex[pValue];
 11226  0175F2  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 11227  0175F4  0D01               	mullw	1
 11228  0175F6  0E62               	movlw	low HMI_SetButton@reindex
 11229  0175F8  24F3               	addwf	prodl,w,c
 11230  0175FA  6ED9               	movwf	fsr2l,c
 11231  0175FC  0E00               	movlw	high HMI_SetButton@reindex
 11232  0175FE  20F4               	addwfc	prodh,w,c
 11233  017600  6EDA               	movwf	fsr2h,c
 11234  017602  50DF               	movf	indf2,w,c
 11235  017604  6F60               	movwf	??_HMI_SetButton& (0+255),b
 11236  017606  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 11237  01760A  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 11238  01760C  D002               	goto	u12914
 11239  01760E                     u12915:
 11240  01760E  90D8               	bcf	status,0,c
 11241  017610  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 11242  017612                     u12914:
 11243  017612  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 11244  017614  D7FC               	goto	u12915
 11245  017616  0100               	movlb	0	; () banked
 11246  017618  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 11247  01761A  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11248                           
 11249                           ; BSR set to: 0
 11250                           ;HMI.c: 192: v = v >> 4;
 11251  01761C  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 11252  01761E  0B0F               	andlw	15
 11253  017620  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11254                           
 11255                           ; BSR set to: 0
 11256                           ;HMI.c: 193: v = v & 0x0F;
 11257  017622  5167               	movf	HMI_SetButton@v& (0+255),w,b
 11258  017624  0B0F               	andlw	15
 11259  017626  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11260                           
 11261                           ; BSR set to: 0
 11262                           ;HMI.c: 194: HMIBoard.pButton = v;
 11263  017628  0103               	movlb	3	; () banked
 11264  01762A  51A6               	movf	(_HMIBoard+6)& (0+255),w,b
 11265  01762C  0100               	movlb	0	; () banked
 11266  01762E  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11267  017630  0BF0               	andlw	-16
 11268  017632  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11269  017634  0103               	movlb	3	; () banked
 11270  017636  6FA6               	movwf	(_HMIBoard+6)& (0+255),b
 11271                           
 11272                           ; BSR set to: 3
 11273  017638  0012               	return		;funcret
 11274  01763A                     __end_of_HMI_SetButton:
 11275                           	opt stack 0
 11276                           tosu	equ	0xFFF
 11277                           tosh	equ	0xFFE
 11278                           tosl	equ	0xFFD
 11279                           pclath	equ	0xFFA
 11280                           tblptru	equ	0xFF8
 11281                           tblptrh	equ	0xFF7
 11282                           tblptrl	equ	0xFF6
 11283                           tablat	equ	0xFF5
 11284                           prodh	equ	0xFF4
 11285                           prodl	equ	0xFF3
 11286                           intcon	equ	0xFF2
 11287                           postinc0	equ	0xFEE
 11288                           wreg	equ	0xFE8
 11289                           indf1	equ	0xFE7
 11290                           postdec1	equ	0xFE5
 11291                           fsr1h	equ	0xFE2
 11292                           fsr1l	equ	0xFE1
 11293                           indf2	equ	0xFDF
 11294                           postinc2	equ	0xFDE
 11295                           postdec2	equ	0xFDD
 11296                           plusw2	equ	0xFDB
 11297                           fsr2h	equ	0xFDA
 11298                           fsr2l	equ	0xFD9
 11299                           status	equ	0xFD8
 11300                           
 11301 ;; *************** function _LED_Toggle *****************
 11302 ;; Defined at:
 11303 ;;		line 50 in file "Library/LED.c"
 11304 ;; Parameters:    Size  Location     Type
 11305 ;;  pLED            1    wreg     enum E6739
 11306 ;; Auto vars:     Size  Location     Type
 11307 ;;  pLED            1   24[BANK0 ] enum E6739
 11308 ;; Return value:  Size  Location     Type
 11309 ;;                  1    wreg      void 
 11310 ;; Registers used:
 11311 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11312 ;; Tracked objects:
 11313 ;;		On entry : 0/0
 11314 ;;		On exit  : 0/0
 11315 ;;		Unchanged: 0/0
 11316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11318 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11320 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11321 ;;Total ram usage:        1 bytes
 11322 ;; Hardware stack levels used:    1
 11323 ;; Hardware stack levels required when called:   12
 11324 ;; This function calls:
 11325 ;;		_Port_TogglePin
 11326 ;; This function is called by:
 11327 ;;		_LCD_Reset
 11328 ;;		_Event_DIPSwitch
 11329 ;;		_Event_TestButton
 11330 ;;		_Event_ADCSequenceComplete
 11331 ;;		_Event_HMI_DIPSwitch
 11332 ;;		_Event_HMI_LeftButton
 11333 ;;		_Event_HMI_RightButton
 11334 ;;		_Event_HMI_UpButton
 11335 ;;		_Event_HMI_DownButton
 11336 ;; This function uses a non-reentrant model
 11337 ;;
 11338                           
 11339                           	psect	text50
 11340  018442                     __ptext50:
 11341                           	opt stack 0
 11342  018442                     _LED_Toggle:
 11343                           	opt stack 15
 11344                           
 11345                           ; BSR set to: 3
 11346                           ;incstack = 0
 11347                           ;LED_Toggle@pLED stored from wreg
 11348  018442  0100               	movlb	0	; () banked
 11349  018444  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 11350                           
 11351                           ;LED.c: 52: switch (pLED)
 11352  018446  D014               	goto	l234
 11353  018448                     
 11354                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 11355  018448  0E8A               	movlw	low _PortC
 11356  01844A  0100               	movlb	0	; () banked
 11357  01844C  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 11358  01844E  0E01               	movlw	high _PortC
 11359  018450  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 11360  018452  0E00               	movlw	0
 11361  018454  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 11362  018456  ECF2  F0C3         	call	_Port_TogglePin	;wreg free
 11363                           
 11364                           ;LED.c: 56: break;
 11365  01845A  0012               	return	
 11366  01845C                     
 11367                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 11368  01845C  0E8A               	movlw	low _PortC
 11369  01845E  0100               	movlb	0	; () banked
 11370  018460  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 11371  018462  0E01               	movlw	high _PortC
 11372  018464  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 11373  018466  0E01               	movlw	1
 11374  018468  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 11375  01846A  ECF2  F0C3         	call	_Port_TogglePin	;wreg free
 11376                           
 11377                           ;LED.c: 60: }
 11378                           
 11379                           ;LED.c: 59: break;
 11380  01846E  0012               	return	
 11381  018470                     l234:
 11382  018470  0100               	movlb	0	; () banked
 11383  018472  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 11384                           
 11385                           ; Switch size 1, requested type "space"
 11386                           ; Number of cases is 2, Range of values is 0 to 1
 11387                           ; switch strategies available:
 11388                           ; Name         Instructions Cycles
 11389                           ; simple_byte            7     4 (average)
 11390                           ;	Chosen strategy is simple_byte
 11391  018474  0A00               	xorlw	0	; case 0
 11392  018476  B4D8               	btfsc	status,2,c
 11393  018478  D7E7               	goto	l235
 11394  01847A  0A01               	xorlw	1	; case 1
 11395  01847C  A4D8               	btfss	status,2,c
 11396  01847E  0012               	return	
 11397  018480  D7ED               	goto	l237
 11398  018482                     __end_of_LED_Toggle:
 11399                           	opt stack 0
 11400                           tosu	equ	0xFFF
 11401                           tosh	equ	0xFFE
 11402                           tosl	equ	0xFFD
 11403                           pclath	equ	0xFFA
 11404                           tblptru	equ	0xFF8
 11405                           tblptrh	equ	0xFF7
 11406                           tblptrl	equ	0xFF6
 11407                           tablat	equ	0xFF5
 11408                           prodh	equ	0xFF4
 11409                           prodl	equ	0xFF3
 11410                           intcon	equ	0xFF2
 11411                           postinc0	equ	0xFEE
 11412                           wreg	equ	0xFE8
 11413                           indf1	equ	0xFE7
 11414                           postdec1	equ	0xFE5
 11415                           fsr1h	equ	0xFE2
 11416                           fsr1l	equ	0xFE1
 11417                           indf2	equ	0xFDF
 11418                           postinc2	equ	0xFDE
 11419                           postdec2	equ	0xFDD
 11420                           plusw2	equ	0xFDB
 11421                           fsr2h	equ	0xFDA
 11422                           fsr2l	equ	0xFD9
 11423                           status	equ	0xFD8
 11424                           
 11425 ;; *************** function _Port_TogglePin *****************
 11426 ;; Defined at:
 11427 ;;		line 278 in file "Library/Port.c"
 11428 ;; Parameters:    Size  Location     Type
 11429 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 11430 ;;		 -> PortC(10), 
 11431 ;;  pPin            1   22[BANK0 ] enum E6750
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;  Value           1   23[BANK0 ] unsigned char 
 11434 ;; Return value:  Size  Location     Type
 11435 ;;                  1    wreg      void 
 11436 ;; Registers used:
 11437 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11438 ;; Tracked objects:
 11439 ;;		On entry : 0/0
 11440 ;;		On exit  : 0/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11443 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11446 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11447 ;;Total ram usage:        4 bytes
 11448 ;; Hardware stack levels used:    1
 11449 ;; Hardware stack levels required when called:   11
 11450 ;; This function calls:
 11451 ;;		_Port_GetPin
 11452 ;;		_Port_SetPin
 11453 ;; This function is called by:
 11454 ;;		_LED_Toggle
 11455 ;; This function uses a non-reentrant model
 11456 ;;
 11457                           
 11458                           	psect	text51
 11459  0187E4                     __ptext51:
 11460                           	opt stack 0
 11461  0187E4                     _Port_TogglePin:
 11462                           	opt stack 15
 11463                           
 11464                           ;Port.c: 280: UINT8 Value;
 11465                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 11466                           
 11467                           ;incstack = 0
 11468  0187E4  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 11469  0187E8  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 11470  0187EC  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 11471  0187F0  ECBB  F0C2         	call	_Port_GetPin	;wreg free
 11472  0187F4  0100               	movlb	0	; () banked
 11473  0187F6  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 11474                           
 11475                           ; BSR set to: 0
 11476                           ;Port.c: 282: Value ^= 0x01;
 11477  0187F8  0E01               	movlw	1
 11478  0187FA  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 11479                           
 11480                           ; BSR set to: 0
 11481                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 11482  0187FC  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 11483  018800  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 11484  018804  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 11485  018808  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 11486  01880C  EC96  F0B5         	call	_Port_SetPin	;wreg free
 11487  018810  0012               	return		;funcret
 11488  018812                     __end_of_Port_TogglePin:
 11489                           	opt stack 0
 11490                           tosu	equ	0xFFF
 11491                           tosh	equ	0xFFE
 11492                           tosl	equ	0xFFD
 11493                           pclath	equ	0xFFA
 11494                           tblptru	equ	0xFF8
 11495                           tblptrh	equ	0xFF7
 11496                           tblptrl	equ	0xFF6
 11497                           tablat	equ	0xFF5
 11498                           prodh	equ	0xFF4
 11499                           prodl	equ	0xFF3
 11500                           intcon	equ	0xFF2
 11501                           postinc0	equ	0xFEE
 11502                           wreg	equ	0xFE8
 11503                           indf1	equ	0xFE7
 11504                           postdec1	equ	0xFE5
 11505                           fsr1h	equ	0xFE2
 11506                           fsr1l	equ	0xFE1
 11507                           indf2	equ	0xFDF
 11508                           postinc2	equ	0xFDE
 11509                           postdec2	equ	0xFDD
 11510                           plusw2	equ	0xFDB
 11511                           fsr2h	equ	0xFDA
 11512                           fsr2l	equ	0xFD9
 11513                           status	equ	0xFD8
 11514                           
 11515 ;; *************** function _Port_SetPin *****************
 11516 ;; Defined at:
 11517 ;;		line 247 in file "Library/Port.c"
 11518 ;; Parameters:    Size  Location     Type
 11519 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 11520 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 11521 ;;  pPin            1   17[BANK0 ] enum E6750
 11522 ;;  pValue          1   18[BANK0 ] unsigned char 
 11523 ;; Auto vars:     Size  Location     Type
 11524 ;;  Type            1   19[BANK0 ] enum E6795
 11525 ;; Return value:  Size  Location     Type
 11526 ;;                  1    wreg      void 
 11527 ;; Registers used:
 11528 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11529 ;; Tracked objects:
 11530 ;;		On entry : 0/0
 11531 ;;		On exit  : 0/0
 11532 ;;		Unchanged: 0/0
 11533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11534 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11537 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11538 ;;Total ram usage:        5 bytes
 11539 ;; Hardware stack levels used:    1
 11540 ;; Hardware stack levels required when called:   10
 11541 ;; This function calls:
 11542 ;;		_Byte_SetBit
 11543 ;;		_Word_GetPair
 11544 ;; This function is called by:
 11545 ;;		_Reset_Low
 11546 ;;		_Reset_High
 11547 ;;		_LED_Set
 11548 ;;		_Port_TogglePin
 11549 ;;		_Motor_Step
 11550 ;;		_MXK_Init
 11551 ;;		_Motor_Init
 11552 ;; This function uses a non-reentrant model
 11553 ;;
 11554                           
 11555                           	psect	text52
 11556  016B2C                     __ptext52:
 11557                           	opt stack 0
 11558  016B2C                     _Port_SetPin:
 11559                           	opt stack 19
 11560                           
 11561                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 11562                           
 11563                           ;incstack = 0
 11564  016B2C  0E08               	movlw	8
 11565  016B2E  0100               	movlb	0	; () banked
 11566  016B30  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 11567  016B32  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11568  016B34  0E00               	movlw	0
 11569  016B36  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 11570  016B38  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11571  016B3A  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 11572  016B3E  EC61  F0C3         	call	_Word_GetPair	;wreg free
 11573  016B42  0100               	movlb	0	; () banked
 11574  016B44  6F73               	movwf	Port_SetPin@Type& (0+255),b
 11575                           
 11576                           ;Port.c: 250: switch (Type)
 11577  016B46  D03D               	goto	l427
 11578  016B48                     
 11579                           ; BSR set to: 0
 11580                           ;Port.c: 256: pValue &= 1;
 11581                           
 11582                           ; BSR set to: 0
 11583  016B48  0E01               	movlw	1
 11584  016B4A  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 11585                           
 11586                           ; BSR set to: 0
 11587                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 11588  016B4C  EE20 F002          	lfsr	2,2
 11589  016B50  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 11590  016B52  26D9               	addwf	fsr2l,f,c
 11591  016B54  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 11592  016B56  22DA               	addwfc	fsr2h,f,c
 11593  016B58  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 11594  016B5C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 11595  016B60  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 11596  016B64  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 11597  016B68  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 11598                           
 11599                           ;Port.c: 258: break;
 11600  016B6C  0012               	return	
 11601  016B6E                     
 11602                           ;Port.c: 261: pValue &= 1;
 11603  016B6E  0E01               	movlw	1
 11604  016B70  0100               	movlb	0	; () banked
 11605  016B72  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 11606                           
 11607                           ;Port.c: 262: pValue ^= 1;
 11608  016B74  0E01               	movlw	1
 11609  016B76  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 11610                           
 11611                           ; BSR set to: 0
 11612                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 11613  016B78  EE20 F002          	lfsr	2,2
 11614  016B7C  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 11615  016B7E  26D9               	addwf	fsr2l,f,c
 11616  016B80  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 11617  016B82  22DA               	addwfc	fsr2h,f,c
 11618  016B84  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 11619  016B88  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 11620  016B8C  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 11621  016B90  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 11622  016B94  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 11623                           
 11624                           ;Port.c: 264: break;
 11625  016B98  0012               	return	
 11626  016B9A                     
 11627                           ;Port.c: 266: pValue &= 1;
 11628  016B9A  0E01               	movlw	1
 11629  016B9C  0100               	movlb	0	; () banked
 11630  016B9E  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 11631                           
 11632                           ; BSR set to: 0
 11633                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 11634  016BA0  EE20 F004          	lfsr	2,4
 11635  016BA4  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 11636  016BA6  26D9               	addwf	fsr2l,f,c
 11637  016BA8  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 11638  016BAA  22DA               	addwfc	fsr2h,f,c
 11639  016BAC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 11640  016BB0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 11641  016BB4  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 11642  016BB8  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 11643  016BBC  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 11644                           
 11645                           ;Port.c: 269: }
 11646                           
 11647                           ;Port.c: 268: break;
 11648  016BC0  0012               	return	
 11649  016BC2                     l427:
 11650  016BC2  0100               	movlb	0	; () banked
 11651  016BC4  5173               	movf	Port_SetPin@Type& (0+255),w,b
 11652                           
 11653                           ; Switch size 1, requested type "space"
 11654                           ; Number of cases is 4, Range of values is 0 to 3
 11655                           ; switch strategies available:
 11656                           ; Name         Instructions Cycles
 11657                           ; simple_byte           13     7 (average)
 11658                           ;	Chosen strategy is simple_byte
 11659  016BC6  0A00               	xorlw	0	; case 0
 11660  016BC8  B4D8               	btfsc	status,2,c
 11661  016BCA  0012               	return	
 11662  016BCC  0A01               	xorlw	1	; case 1
 11663  016BCE  B4D8               	btfsc	status,2,c
 11664  016BD0  D7BB               	goto	l430
 11665  016BD2  0A03               	xorlw	3	; case 2
 11666  016BD4  B4D8               	btfsc	status,2,c
 11667  016BD6  D7CB               	goto	l432
 11668  016BD8  0A01               	xorlw	1	; case 3
 11669  016BDA  A4D8               	btfss	status,2,c
 11670  016BDC  0012               	return	
 11671  016BDE  D7DD               	goto	l433
 11672  016BE0                     __end_of_Port_SetPin:
 11673                           	opt stack 0
 11674                           tosu	equ	0xFFF
 11675                           tosh	equ	0xFFE
 11676                           tosl	equ	0xFFD
 11677                           pclath	equ	0xFFA
 11678                           tblptru	equ	0xFF8
 11679                           tblptrh	equ	0xFF7
 11680                           tblptrl	equ	0xFF6
 11681                           tablat	equ	0xFF5
 11682                           prodh	equ	0xFF4
 11683                           prodl	equ	0xFF3
 11684                           intcon	equ	0xFF2
 11685                           postinc0	equ	0xFEE
 11686                           wreg	equ	0xFE8
 11687                           indf1	equ	0xFE7
 11688                           postdec1	equ	0xFE5
 11689                           fsr1h	equ	0xFE2
 11690                           fsr1l	equ	0xFE1
 11691                           indf2	equ	0xFDF
 11692                           postinc2	equ	0xFDE
 11693                           postdec2	equ	0xFDD
 11694                           plusw2	equ	0xFDB
 11695                           fsr2h	equ	0xFDA
 11696                           fsr2l	equ	0xFD9
 11697                           status	equ	0xFD8
 11698                           
 11699 ;; *************** function _Port_GetPin *****************
 11700 ;; Defined at:
 11701 ;;		line 271 in file "Library/Port.c"
 11702 ;; Parameters:    Size  Location     Type
 11703 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 11704 ;;		 -> PortB(10), PortE(10), PortC(10), 
 11705 ;;  pPin            1    2[BANK0 ] enum E6750
 11706 ;; Auto vars:     Size  Location     Type
 11707 ;;  Output          1    5[BANK0 ] unsigned char 
 11708 ;; Return value:  Size  Location     Type
 11709 ;;                  1    wreg      unsigned char 
 11710 ;; Registers used:
 11711 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11712 ;; Tracked objects:
 11713 ;;		On entry : 0/0
 11714 ;;		On exit  : 0/0
 11715 ;;		Unchanged: 0/0
 11716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11717 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11718 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11719 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11720 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11721 ;;Total ram usage:        6 bytes
 11722 ;; Hardware stack levels used:    1
 11723 ;; Hardware stack levels required when called:    7
 11724 ;; This function calls:
 11725 ;;		Nothing
 11726 ;; This function is called by:
 11727 ;;		_Port_TogglePin
 11728 ;;		_HMI_LeftSwitch
 11729 ;;		_HMI_RightSwitch
 11730 ;;		_HMI_UpSwitch
 11731 ;;		_HMI_DownSwitch
 11732 ;;		_MXK_TestButton
 11733 ;; This function uses a non-reentrant model
 11734 ;;
 11735                           
 11736                           	psect	text53
 11737  018576                     __ptext53:
 11738                           	opt stack 0
 11739  018576                     _Port_GetPin:
 11740                           	opt stack 22
 11741                           
 11742                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 11743                           
 11744                           ;incstack = 0
 11745  018576  0100               	movlb	0	; () banked
 11746  018578  EE20 F006          	lfsr	2,6
 11747  01857C  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 11748  01857E  26D9               	addwf	fsr2l,f,c
 11749  018580  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 11750  018582  22DA               	addwfc	fsr2h,f,c
 11751  018584  CFDE F063          	movff	postinc2,??_Port_GetPin
 11752  018588  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 11753  01858C  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 11754  018590  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 11755  018594  50DF               	movf	indf2,w,c
 11756  018596  6F65               	movwf	Port_GetPin@Output& (0+255),b
 11757                           
 11758                           ; BSR set to: 0
 11759                           ;Port.c: 274: Output >>= (UINT8)pPin;
 11760  018598  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 11761  01859A  6F63               	movwf	??_Port_GetPin& (0+255),b
 11762  01859C  D002               	goto	u12150
 11763  01859E                     u12155:
 11764  01859E  90D8               	bcf	status,0,c
 11765  0185A0  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 11766  0185A2                     u12150:
 11767  0185A2  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 11768  0185A4  D7FC               	goto	u12155
 11769                           
 11770                           ;Port.c: 275: Output &= 1;
 11771  0185A6  0E01               	movlw	1
 11772  0185A8  0100               	movlb	0	; () banked
 11773  0185AA  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 11774                           
 11775                           ; BSR set to: 0
 11776                           ;Port.c: 276: return Output;
 11777  0185AC  5165               	movf	Port_GetPin@Output& (0+255),w,b
 11778  0185AE  0012               	return	
 11779  0185B0                     __end_of_Port_GetPin:
 11780                           	opt stack 0
 11781                           tosu	equ	0xFFF
 11782                           tosh	equ	0xFFE
 11783                           tosl	equ	0xFFD
 11784                           pclath	equ	0xFFA
 11785                           tblptru	equ	0xFF8
 11786                           tblptrh	equ	0xFF7
 11787                           tblptrl	equ	0xFF6
 11788                           tablat	equ	0xFF5
 11789                           prodh	equ	0xFF4
 11790                           prodl	equ	0xFF3
 11791                           intcon	equ	0xFF2
 11792                           postinc0	equ	0xFEE
 11793                           wreg	equ	0xFE8
 11794                           indf1	equ	0xFE7
 11795                           postdec1	equ	0xFE5
 11796                           fsr1h	equ	0xFE2
 11797                           fsr1l	equ	0xFE1
 11798                           indf2	equ	0xFDF
 11799                           postinc2	equ	0xFDE
 11800                           postdec2	equ	0xFDD
 11801                           plusw2	equ	0xFDB
 11802                           fsr2h	equ	0xFDA
 11803                           fsr2l	equ	0xFD9
 11804                           status	equ	0xFD8
 11805                           
 11806 ;; *************** function _HMI_SetBar *****************
 11807 ;; Defined at:
 11808 ;;		line 205 in file "HMI.c"
 11809 ;; Parameters:    Size  Location     Type
 11810 ;;  pValue          1    wreg     unsigned char 
 11811 ;; Auto vars:     Size  Location     Type
 11812 ;;  pValue          1    0[BANK0 ] unsigned char 
 11813 ;; Return value:  Size  Location     Type
 11814 ;;                  1    wreg      void 
 11815 ;; Registers used:
 11816 ;;		wreg
 11817 ;; Tracked objects:
 11818 ;;		On entry : 0/0
 11819 ;;		On exit  : 0/0
 11820 ;;		Unchanged: 0/0
 11821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11823 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11825 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11826 ;;Total ram usage:        1 bytes
 11827 ;; Hardware stack levels used:    1
 11828 ;; Hardware stack levels required when called:    7
 11829 ;; This function calls:
 11830 ;;		Nothing
 11831 ;; This function is called by:
 11832 ;;		_Event_DIPSwitch
 11833 ;;		_Event_HMI_DIPSwitch
 11834 ;;		_Event_HMI_LeftButton
 11835 ;;		_Event_HMI_RightButton
 11836 ;; This function uses a non-reentrant model
 11837 ;;
 11838                           
 11839                           	psect	text54
 11840  018C8C                     __ptext54:
 11841                           	opt stack 0
 11842  018C8C                     _HMI_SetBar:
 11843                           	opt stack 20
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;incstack = 0
 11847                           ;HMI_SetBar@pValue stored from wreg
 11848  018C8C  0100               	movlb	0	; () banked
 11849  018C8E  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 11850                           
 11851                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 11852  018C90  C060  F3A7         	movff	HMI_SetBar@pValue,_HMIBoard+7
 11853  018C94  0012               	return		;funcret
 11854  018C96                     __end_of_HMI_SetBar:
 11855                           	opt stack 0
 11856                           tosu	equ	0xFFF
 11857                           tosh	equ	0xFFE
 11858                           tosl	equ	0xFFD
 11859                           pclath	equ	0xFFA
 11860                           tblptru	equ	0xFF8
 11861                           tblptrh	equ	0xFF7
 11862                           tblptrl	equ	0xFF6
 11863                           tablat	equ	0xFF5
 11864                           prodh	equ	0xFF4
 11865                           prodl	equ	0xFF3
 11866                           intcon	equ	0xFF2
 11867                           postinc0	equ	0xFEE
 11868                           wreg	equ	0xFE8
 11869                           indf1	equ	0xFE7
 11870                           postdec1	equ	0xFE5
 11871                           fsr1h	equ	0xFE2
 11872                           fsr1l	equ	0xFE1
 11873                           indf2	equ	0xFDF
 11874                           postinc2	equ	0xFDE
 11875                           postdec2	equ	0xFDD
 11876                           plusw2	equ	0xFDB
 11877                           fsr2h	equ	0xFDA
 11878                           fsr2l	equ	0xFD9
 11879                           status	equ	0xFD8
 11880                           
 11881 ;; *************** function _HMI_GetBar *****************
 11882 ;; Defined at:
 11883 ;;		line 209 in file "HMI.c"
 11884 ;; Parameters:    Size  Location     Type
 11885 ;;		None
 11886 ;; Auto vars:     Size  Location     Type
 11887 ;;		None
 11888 ;; Return value:  Size  Location     Type
 11889 ;;                  1    wreg      unsigned char 
 11890 ;; Registers used:
 11891 ;;		wreg, status,2
 11892 ;; Tracked objects:
 11893 ;;		On entry : 0/0
 11894 ;;		On exit  : 0/0
 11895 ;;		Unchanged: 0/0
 11896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11901 ;;Total ram usage:        0 bytes
 11902 ;; Hardware stack levels used:    1
 11903 ;; Hardware stack levels required when called:    7
 11904 ;; This function calls:
 11905 ;;		Nothing
 11906 ;; This function is called by:
 11907 ;;		_Event_DIPSwitch
 11908 ;;		_Event_HMI_DIPSwitch
 11909 ;; This function uses a non-reentrant model
 11910 ;;
 11911                           
 11912                           	psect	text55
 11913  018CB6                     __ptext55:
 11914                           	opt stack 0
 11915  018CB6                     _HMI_GetBar:
 11916                           	opt stack 20
 11917                           
 11918                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 11919                           
 11920                           ;incstack = 0
 11921  018CB6  0103               	movlb	3	; () banked
 11922  018CB8  51A7               	movf	(_HMIBoard+7)& (0+255),w,b
 11923  018CBA  0012               	return	
 11924  018CBC                     __end_of_HMI_GetBar:
 11925                           	opt stack 0
 11926                           tosu	equ	0xFFF
 11927                           tosh	equ	0xFFE
 11928                           tosl	equ	0xFFD
 11929                           pclath	equ	0xFFA
 11930                           tblptru	equ	0xFF8
 11931                           tblptrh	equ	0xFF7
 11932                           tblptrl	equ	0xFF6
 11933                           tablat	equ	0xFF5
 11934                           prodh	equ	0xFF4
 11935                           prodl	equ	0xFF3
 11936                           intcon	equ	0xFF2
 11937                           postinc0	equ	0xFEE
 11938                           wreg	equ	0xFE8
 11939                           indf1	equ	0xFE7
 11940                           postdec1	equ	0xFE5
 11941                           fsr1h	equ	0xFE2
 11942                           fsr1l	equ	0xFE1
 11943                           indf2	equ	0xFDF
 11944                           postinc2	equ	0xFDE
 11945                           postdec2	equ	0xFDD
 11946                           plusw2	equ	0xFDB
 11947                           fsr2h	equ	0xFDA
 11948                           fsr2l	equ	0xFD9
 11949                           status	equ	0xFD8
 11950                           
 11951 ;; *************** function _HMI_Init *****************
 11952 ;; Defined at:
 11953 ;;		line 104 in file "HMI.c"
 11954 ;; Parameters:    Size  Location     Type
 11955 ;;		None
 11956 ;; Auto vars:     Size  Location     Type
 11957 ;;  in              2   72[BANK0 ] unsigned short 
 11958 ;; Return value:  Size  Location     Type
 11959 ;;                  1    wreg      void 
 11960 ;; Registers used:
 11961 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11962 ;; Tracked objects:
 11963 ;;		On entry : 0/0
 11964 ;;		On exit  : 0/0
 11965 ;;		Unchanged: 0/0
 11966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11968 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11970 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11971 ;;Total ram usage:        2 bytes
 11972 ;; Hardware stack levels used:    1
 11973 ;; Hardware stack levels required when called:   16
 11974 ;; This function calls:
 11975 ;;		_Button_Init
 11976 ;;		_SPI_Init
 11977 ;;		_SPI_MinSpeed
 11978 ;; This function is called by:
 11979 ;;		_main
 11980 ;; This function uses a non-reentrant model
 11981 ;;
 11982                           
 11983                           	psect	text56
 11984  01528A                     __ptext56:
 11985                           	opt stack 0
 11986  01528A                     _HMI_Init:
 11987                           	opt stack 14
 11988                           
 11989                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 11990                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 11991                           
 11992                           ; BSR set to: 3
 11993                           ;incstack = 0
 11994  01528A  0ED0               	movlw	low (_HMIBoard+48)
 11995  01528C  0100               	movlb	0	; () banked
 11996  01528E  6F9B               	movwf	Button_Init@pInput& (0+255),b
 11997  015290  0E03               	movlw	high (_HMIBoard+48)
 11998  015292  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 11999  015294  0E00               	movlw	0
 12000  015296  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12001  015298  0E02               	movlw	2
 12002  01529A  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12003  01529C  0EBC               	movlw	low _HMI_InitButtons
 12004  01529E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12005  0152A0  0E8C               	movlw	high _HMI_InitButtons
 12006  0152A2  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12007  0152A4  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12008  0152A6  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12009  0152A8  0E22               	movlw	low _HMI_DIPSwitch
 12010  0152AA  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12011  0152AC  0E8B               	movlw	high _HMI_DIPSwitch
 12012  0152AE  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12013  0152B0  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 12014  0152B2  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12015  0152B4  0E04               	movlw	low _Event_NULL
 12016  0152B6  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12017  0152B8  0E14               	movlw	high _Event_NULL
 12018  0152BA  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12019  0152BC  0E00               	movlw	low (_Event_NULL shr (0+16))
 12020  0152BE  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12021  0152C0  ECF0  F0B5         	call	_Button_Init	;wreg free
 12022                           
 12023                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 12024                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 12025  0152C4  0EB2               	movlw	low (_HMIBoard+18)
 12026  0152C6  0100               	movlb	0	; () banked
 12027  0152C8  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12028  0152CA  0E03               	movlw	high (_HMIBoard+18)
 12029  0152CC  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12030  0152CE  0E00               	movlw	0
 12031  0152D0  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12032  0152D2  0E02               	movlw	2
 12033  0152D4  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12034  0152D6  0EBC               	movlw	low _HMI_InitButtons
 12035  0152D8  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12036  0152DA  0E8C               	movlw	high _HMI_InitButtons
 12037  0152DC  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12038  0152DE  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12039  0152E0  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12040  0152E2  0E72               	movlw	low _HMI_LeftSwitch
 12041  0152E4  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12042  0152E6  0E8B               	movlw	high _HMI_LeftSwitch
 12043  0152E8  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12044  0152EA  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 12045  0152EC  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12046  0152EE  0E04               	movlw	low _Event_NULL
 12047  0152F0  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12048  0152F2  0E14               	movlw	high _Event_NULL
 12049  0152F4  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12050  0152F6  0E00               	movlw	low (_Event_NULL shr (0+16))
 12051  0152F8  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12052  0152FA  ECF0  F0B5         	call	_Button_Init	;wreg free
 12053                           
 12054                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 12055                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 12056  0152FE  0EA8               	movlw	low (_HMIBoard+8)
 12057  015300  0100               	movlb	0	; () banked
 12058  015302  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12059  015304  0E03               	movlw	high (_HMIBoard+8)
 12060  015306  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12061  015308  0E00               	movlw	0
 12062  01530A  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12063  01530C  0E02               	movlw	2
 12064  01530E  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12065  015310  0EBC               	movlw	low _HMI_InitButtons
 12066  015312  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12067  015314  0E8C               	movlw	high _HMI_InitButtons
 12068  015316  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12069  015318  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12070  01531A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12071  01531C  0E5E               	movlw	low _HMI_RightSwitch
 12072  01531E  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12073  015320  0E8B               	movlw	high _HMI_RightSwitch
 12074  015322  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12075  015324  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 12076  015326  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12077  015328  0E04               	movlw	low _Event_NULL
 12078  01532A  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12079  01532C  0E14               	movlw	high _Event_NULL
 12080  01532E  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12081  015330  0E00               	movlw	low (_Event_NULL shr (0+16))
 12082  015332  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12083  015334  ECF0  F0B5         	call	_Button_Init	;wreg free
 12084                           
 12085                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 12086                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 12087  015338  0EBC               	movlw	low (_HMIBoard+28)
 12088  01533A  0100               	movlb	0	; () banked
 12089  01533C  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12090  01533E  0E03               	movlw	high (_HMIBoard+28)
 12091  015340  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12092  015342  0E00               	movlw	0
 12093  015344  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12094  015346  0E02               	movlw	2
 12095  015348  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12096  01534A  0EBC               	movlw	low _HMI_InitButtons
 12097  01534C  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12098  01534E  0E8C               	movlw	high _HMI_InitButtons
 12099  015350  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12100  015352  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12101  015354  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12102  015356  0E4A               	movlw	low _HMI_UpSwitch
 12103  015358  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12104  01535A  0E8B               	movlw	high _HMI_UpSwitch
 12105  01535C  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12106  01535E  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 12107  015360  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12108  015362  0E04               	movlw	low _Event_NULL
 12109  015364  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12110  015366  0E14               	movlw	high _Event_NULL
 12111  015368  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12112  01536A  0E00               	movlw	low (_Event_NULL shr (0+16))
 12113  01536C  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12114  01536E  ECF0  F0B5         	call	_Button_Init	;wreg free
 12115                           
 12116                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 12117                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 12118  015372  0EC6               	movlw	low (_HMIBoard+38)
 12119  015374  0100               	movlb	0	; () banked
 12120  015376  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12121  015378  0E03               	movlw	high (_HMIBoard+38)
 12122  01537A  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12123  01537C  0E00               	movlw	0
 12124  01537E  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12125  015380  0E02               	movlw	2
 12126  015382  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12127  015384  0EBC               	movlw	low _HMI_InitButtons
 12128  015386  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12129  015388  0E8C               	movlw	high _HMI_InitButtons
 12130  01538A  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12131  01538C  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12132  01538E  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12133  015390  0E36               	movlw	low _HMI_DownSwitch
 12134  015392  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12135  015394  0E8B               	movlw	high _HMI_DownSwitch
 12136  015396  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12137  015398  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 12138  01539A  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12139  01539C  0E04               	movlw	low _Event_NULL
 12140  01539E  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12141  0153A0  0E14               	movlw	high _Event_NULL
 12142  0153A2  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12143  0153A4  0E00               	movlw	low (_Event_NULL shr (0+16))
 12144  0153A6  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12145  0153A8  ECF0  F0B5         	call	_Button_Init	;wreg free
 12146                           
 12147                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 12148  0153AC  0EA0               	movlw	160
 12149  0153AE  0100               	movlb	0	; () banked
 12150  0153B0  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 12151  0153B2  0E86               	movlw	134
 12152  0153B4  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 12153  0153B6  0E01               	movlw	1
 12154  0153B8  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 12155  0153BA  0E00               	movlw	0
 12156  0153BC  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 12157  0153BE  0E00               	movlw	0
 12158  0153C0  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 12159  0153C2  0E02               	movlw	2
 12160  0153C4  6F92               	movwf	SPI_Init@pMode& (0+255),b
 12161  0153C6  EC02  F099         	call	_SPI_Init	;wreg free
 12162                           
 12163                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 12164  0153CA  0EC8               	movlw	low _SPI1
 12165  0153CC  0100               	movlb	0	; () banked
 12166  0153CE  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 12167  0153D0  0E02               	movlw	high _SPI1
 12168  0153D2  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 12169  0153D4  EC54  F0BD         	call	_SPI_MinSpeed	;wreg free
 12170                           
 12171                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 12172  0153D8  0E00               	movlw	0
 12173  0153DA  0100               	movlb	0	; () banked
 12174  0153DC  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 12175  0153DE  0E00               	movlw	0
 12176  0153E0  6FA8               	movwf	HMI_Init@in& (0+255),b
 12177  0153E2                     l16591:
 12178                           
 12179                           ; BSR set to: 0
 12180  0153E2  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 12181  0153E4  E10F               	bnz	l1153
 12182  0153E6  0E08               	movlw	8
 12183  0153E8  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 12184  0153EA  B0D8               	btfsc	status,0,c
 12185  0153EC  0012               	return	
 12186                           
 12187                           ; BSR set to: 0
 12188                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 12189                           
 12190                           ; BSR set to: 0
 12191                           
 12192                           ; BSR set to: 0
 12193  0153EE  0EA0               	movlw	low _HMIBoard
 12194  0153F0  25A8               	addwf	HMI_Init@in& (0+255),w,b
 12195  0153F2  6ED9               	movwf	fsr2l,c
 12196  0153F4  0E03               	movlw	high _HMIBoard
 12197  0153F6  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 12198  0153F8  6EDA               	movwf	fsr2h,c
 12199  0153FA  0E00               	movlw	0
 12200  0153FC  6EDF               	movwf	indf2,c
 12201                           
 12202                           ; BSR set to: 0
 12203  0153FE  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 12204  015400  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 12205  015402  D7EF               	goto	l16591
 12206  015404                     l1153:
 12207                           
 12208                           ; BSR set to: 0
 12209  015404  0012               	return		;funcret
 12210  015406                     __end_of_HMI_Init:
 12211                           	opt stack 0
 12212                           tosu	equ	0xFFF
 12213                           tosh	equ	0xFFE
 12214                           tosl	equ	0xFFD
 12215                           pclath	equ	0xFFA
 12216                           tblptru	equ	0xFF8
 12217                           tblptrh	equ	0xFF7
 12218                           tblptrl	equ	0xFF6
 12219                           tablat	equ	0xFF5
 12220                           prodh	equ	0xFF4
 12221                           prodl	equ	0xFF3
 12222                           intcon	equ	0xFF2
 12223                           postinc0	equ	0xFEE
 12224                           wreg	equ	0xFE8
 12225                           indf1	equ	0xFE7
 12226                           postdec1	equ	0xFE5
 12227                           fsr1h	equ	0xFE2
 12228                           fsr1l	equ	0xFE1
 12229                           indf2	equ	0xFDF
 12230                           postinc2	equ	0xFDE
 12231                           postdec2	equ	0xFDD
 12232                           plusw2	equ	0xFDB
 12233                           fsr2h	equ	0xFDA
 12234                           fsr2l	equ	0xFD9
 12235                           status	equ	0xFD8
 12236                           
 12237 ;; *************** function _SPI_MinSpeed *****************
 12238 ;; Defined at:
 12239 ;;		line 190 in file "Library/SPI.c"
 12240 ;; Parameters:    Size  Location     Type
 12241 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 12242 ;;		 -> SPI1(11), 
 12243 ;; Auto vars:     Size  Location     Type
 12244 ;;		None
 12245 ;; Return value:  Size  Location     Type
 12246 ;;                  1    wreg      void 
 12247 ;; Registers used:
 12248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12249 ;; Tracked objects:
 12250 ;;		On entry : 0/0
 12251 ;;		On exit  : 0/0
 12252 ;;		Unchanged: 0/0
 12253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12254 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12257 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12258 ;;Total ram usage:        2 bytes
 12259 ;; Hardware stack levels used:    1
 12260 ;; Hardware stack levels required when called:    9
 12261 ;; This function calls:
 12262 ;;		_Byte_SetBit
 12263 ;;		_Byte_SetQuad
 12264 ;; This function is called by:
 12265 ;;		_HMI_Init
 12266 ;; This function uses a non-reentrant model
 12267 ;;
 12268                           
 12269                           	psect	text57
 12270  017AA8                     __ptext57:
 12271                           	opt stack 0
 12272  017AA8                     _SPI_MinSpeed:
 12273                           	opt stack 20
 12274                           
 12275                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 12276                           
 12277                           ; BSR set to: 0
 12278                           ;incstack = 0
 12279  017AA8  0100               	movlb	0	; () banked
 12280  017AAA  EE20 F006          	lfsr	2,6
 12281  017AAE  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12282  017AB0  26D9               	addwf	fsr2l,f,c
 12283  017AB2  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12284  017AB4  22DA               	addwfc	fsr2h,f,c
 12285  017AB6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12286  017ABA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12287  017ABE  0E05               	movlw	5
 12288  017AC0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12289  017AC2  0E00               	movlw	0
 12290  017AC4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12291  017AC6  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 12292                           
 12293                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 12294  017ACA  0100               	movlb	0	; () banked
 12295  017ACC  EE20 F006          	lfsr	2,6
 12296  017AD0  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12297  017AD2  26D9               	addwf	fsr2l,f,c
 12298  017AD4  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12299  017AD6  22DA               	addwfc	fsr2h,f,c
 12300  017AD8  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 12301  017ADC  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 12302  017AE0  0E00               	movlw	0
 12303  017AE2  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 12304  017AE4  0E02               	movlw	2
 12305  017AE6  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 12306  017AE8  ECC3  F0C4         	call	_Byte_SetQuad	;wreg free
 12307                           
 12308                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 12309  017AEC  0100               	movlb	0	; () banked
 12310  017AEE  EE20 F006          	lfsr	2,6
 12311  017AF2  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12312  017AF4  26D9               	addwf	fsr2l,f,c
 12313  017AF6  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12314  017AF8  22DA               	addwfc	fsr2h,f,c
 12315  017AFA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12316  017AFE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12317  017B02  0E05               	movlw	5
 12318  017B04  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12319  017B06  0E01               	movlw	1
 12320  017B08  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12321  017B0A  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 12322  017B0E  0012               	return		;funcret
 12323  017B10                     __end_of_SPI_MinSpeed:
 12324                           	opt stack 0
 12325                           tosu	equ	0xFFF
 12326                           tosh	equ	0xFFE
 12327                           tosl	equ	0xFFD
 12328                           pclath	equ	0xFFA
 12329                           tblptru	equ	0xFF8
 12330                           tblptrh	equ	0xFF7
 12331                           tblptrl	equ	0xFF6
 12332                           tablat	equ	0xFF5
 12333                           prodh	equ	0xFF4
 12334                           prodl	equ	0xFF3
 12335                           intcon	equ	0xFF2
 12336                           postinc0	equ	0xFEE
 12337                           wreg	equ	0xFE8
 12338                           indf1	equ	0xFE7
 12339                           postdec1	equ	0xFE5
 12340                           fsr1h	equ	0xFE2
 12341                           fsr1l	equ	0xFE1
 12342                           indf2	equ	0xFDF
 12343                           postinc2	equ	0xFDE
 12344                           postdec2	equ	0xFDD
 12345                           plusw2	equ	0xFDB
 12346                           fsr2h	equ	0xFDA
 12347                           fsr2l	equ	0xFD9
 12348                           status	equ	0xFD8
 12349                           
 12350 ;; *************** function _SPI_Init *****************
 12351 ;; Defined at:
 12352 ;;		line 12 in file "Library/SPI.c"
 12353 ;; Parameters:    Size  Location     Type
 12354 ;;  pClock          4   45[BANK0 ] unsigned long 
 12355 ;;  pChannel        1   49[BANK0 ] enum E6744
 12356 ;;  pMode           1   50[BANK0 ] enum E6748
 12357 ;; Auto vars:     Size  Location     Type
 12358 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 12359 ;;		 -> SPI1(11), SPI2(11), 
 12360 ;; Return value:  Size  Location     Type
 12361 ;;                  1    wreg      void 
 12362 ;; Registers used:
 12363 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12364 ;; Tracked objects:
 12365 ;;		On entry : 0/0
 12366 ;;		On exit  : 0/0
 12367 ;;		Unchanged: 0/0
 12368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12369 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12370 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12372 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12373 ;;Total ram usage:        8 bytes
 12374 ;; Hardware stack levels used:    1
 12375 ;; Hardware stack levels required when called:   12
 12376 ;; This function calls:
 12377 ;;		_Byte_SetBit
 12378 ;;		_Byte_SetQuad
 12379 ;;		_Port_SetPinType
 12380 ;;		_SPI_DCS
 12381 ;;		_SPI_DisableISR
 12382 ;;		_Timer2_Init
 12383 ;; This function is called by:
 12384 ;;		_Configure_GPIOs
 12385 ;;		_HMI_Init
 12386 ;; This function uses a non-reentrant model
 12387 ;;
 12388                           
 12389                           	psect	text58
 12390  013204                     __ptext58:
 12391                           	opt stack 0
 12392  013204                     _SPI_Init:
 12393                           	opt stack 16
 12394                           
 12395                           ;SPI.c: 14: SPIPtr pInput;
 12396                           ;SPI.c: 16: switch (pChannel)
 12397                           
 12398                           ;incstack = 0
 12399  013204  D00A               	goto	l597
 12400  013206                     
 12401                           ;SPI.c: 19: pInput = &SPI1;
 12402  013206  0EC8               	movlw	low _SPI1
 12403  013208  0100               	movlb	0	; () banked
 12404  01320A  6F93               	movwf	SPI_Init@pInput& (0+255),b
 12405  01320C  0E02               	movlw	high _SPI1
 12406  01320E  D003               	goto	L10
 12407  013210                     
 12408                           ; BSR set to: 0
 12409                           ;SPI.c: 22: pInput = &SPI2;
 12410                           
 12411                           ; BSR set to: 0
 12412  013210  0E61               	movlw	low _SPI2
 12413  013212  6F93               	movwf	SPI_Init@pInput& (0+255),b
 12414  013214  0E01               	movlw	high _SPI2
 12415  013216                     L10:
 12416  013216  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 12417                           
 12418                           ; BSR set to: 0
 12419                           ;SPI.c: 24: };
 12420                           
 12421                           ;SPI.c: 23: break;
 12422  013218  D008               	goto	l599
 12423  01321A                     l597:
 12424                           
 12425                           ; BSR set to: 0
 12426  01321A  0100               	movlb	0	; () banked
 12427  01321C  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 12428                           
 12429                           ; Switch size 1, requested type "space"
 12430                           ; Number of cases is 2, Range of values is 0 to 1
 12431                           ; switch strategies available:
 12432                           ; Name         Instructions Cycles
 12433                           ; simple_byte            7     4 (average)
 12434                           ;	Chosen strategy is simple_byte
 12435  01321E  0A00               	xorlw	0	; case 0
 12436  013220  B4D8               	btfsc	status,2,c
 12437  013222  D7F1               	goto	l598
 12438  013224  0A01               	xorlw	1	; case 1
 12439  013226  B4D8               	btfsc	status,2,c
 12440  013228  D7F3               	goto	l600
 12441  01322A                     l599:
 12442                           
 12443                           ; BSR set to: 0
 12444                           ;SPI.c: 26: pInput->mChannel = pChannel;
 12445                           
 12446                           ; BSR set to: 0
 12447  01322A  EE20 F002          	lfsr	2,2
 12448  01322E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12449  013230  26D9               	addwf	fsr2l,f,c
 12450  013232  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12451  013234  22DA               	addwfc	fsr2h,f,c
 12452  013236  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 12453                           
 12454                           ;SPI.c: 35: switch (pChannel)
 12455  01323A  D093               	goto	l601
 12456  01323C                     
 12457                           ; BSR set to: 0
 12458                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 12459                           
 12460                           ; BSR set to: 0
 12461  01323C  0E8A               	movlw	low _PortC
 12462  01323E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12463  013240  0E01               	movlw	high _PortC
 12464  013242  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12465  013244  0E02               	movlw	2
 12466  013246  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12467  013248  0E03               	movlw	3
 12468  01324A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12469  01324C  EC76  F0A8         	call	_Port_SetPinType	;wreg free
 12470                           
 12471                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 12472  013250  0E8A               	movlw	low _PortC
 12473  013252  0100               	movlb	0	; () banked
 12474  013254  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12475  013256  0E01               	movlw	high _PortC
 12476  013258  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12477  01325A  0E03               	movlw	3
 12478  01325C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12479  01325E  0E03               	movlw	3
 12480  013260  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12481  013262  EC76  F0A8         	call	_Port_SetPinType	;wreg free
 12482                           
 12483                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 12484  013266  0E8A               	movlw	low _PortC
 12485  013268  0100               	movlb	0	; () banked
 12486  01326A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12487  01326C  0E01               	movlw	high _PortC
 12488  01326E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12489  013270  0E05               	movlw	5
 12490  013272  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12491  013274  0E03               	movlw	3
 12492  013276  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12493  013278  EC76  F0A8         	call	_Port_SetPinType	;wreg free
 12494                           
 12495                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 12496  01327C  0E8A               	movlw	low _PortC
 12497  01327E  0100               	movlb	0	; () banked
 12498  013280  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12499  013282  0E01               	movlw	high _PortC
 12500  013284  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12501  013286  0E04               	movlw	4
 12502  013288  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12503  01328A  0E00               	movlw	0
 12504  01328C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12505  01328E  EC76  F0A8         	call	_Port_SetPinType	;wreg free
 12506                           
 12507                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 12508  013292  0100               	movlb	0	; () banked
 12509  013294  EE20 F003          	lfsr	2,3
 12510  013298  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12511  01329A  26D9               	addwf	fsr2l,f,c
 12512  01329C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12513  01329E  22DA               	addwfc	fsr2h,f,c
 12514  0132A0  0EC7               	movlw	199
 12515  0132A2  6EDE               	movwf	postinc2,c
 12516  0132A4  0E0F               	movlw	15
 12517  0132A6  6EDD               	movwf	postdec2,c
 12518                           
 12519                           ; BSR set to: 0
 12520                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 12521  0132A8  EE20 F006          	lfsr	2,6
 12522  0132AC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12523  0132AE  26D9               	addwf	fsr2l,f,c
 12524  0132B0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12525  0132B2  22DA               	addwfc	fsr2h,f,c
 12526  0132B4  0EC6               	movlw	198
 12527  0132B6  6EDE               	movwf	postinc2,c
 12528  0132B8  0E0F               	movlw	15
 12529  0132BA  6EDD               	movwf	postdec2,c
 12530                           
 12531                           ; BSR set to: 0
 12532                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 12533  0132BC  EE20 F009          	lfsr	2,9
 12534  0132C0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12535  0132C2  26D9               	addwf	fsr2l,f,c
 12536  0132C4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12537  0132C6  22DA               	addwfc	fsr2h,f,c
 12538  0132C8  0EC9               	movlw	201
 12539  0132CA  D047               	goto	L11
 12540  0132CC                     
 12541                           ; BSR set to: 0
 12542                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 12543                           
 12544                           ; BSR set to: 0
 12545  0132CC  0E76               	movlw	low _PortD
 12546  0132CE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12547  0132D0  0E01               	movlw	high _PortD
 12548  0132D2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12549  0132D4  0E07               	movlw	7
 12550  0132D6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12551  0132D8  0E03               	movlw	3
 12552  0132DA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12553  0132DC  EC76  F0A8         	call	_Port_SetPinType	;wreg free
 12554                           
 12555                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 12556  0132E0  0E76               	movlw	low _PortD
 12557  0132E2  0100               	movlb	0	; () banked
 12558  0132E4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12559  0132E6  0E01               	movlw	high _PortD
 12560  0132E8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12561  0132EA  0E06               	movlw	6
 12562  0132EC  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12563  0132EE  0E03               	movlw	3
 12564  0132F0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12565  0132F2  EC76  F0A8         	call	_Port_SetPinType	;wreg free
 12566                           
 12567                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 12568  0132F6  0E76               	movlw	low _PortD
 12569  0132F8  0100               	movlb	0	; () banked
 12570  0132FA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12571  0132FC  0E01               	movlw	high _PortD
 12572  0132FE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12573  013300  0E04               	movlw	4
 12574  013302  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12575  013304  0E03               	movlw	3
 12576  013306  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12577  013308  EC76  F0A8         	call	_Port_SetPinType	;wreg free
 12578                           
 12579                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 12580  01330C  0E76               	movlw	low _PortD
 12581  01330E  0100               	movlb	0	; () banked
 12582  013310  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12583  013312  0E01               	movlw	high _PortD
 12584  013314  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12585  013316  0E05               	movlw	5
 12586  013318  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12587  01331A  0E00               	movlw	0
 12588  01331C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12589  01331E  EC76  F0A8         	call	_Port_SetPinType	;wreg free
 12590                           
 12591                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 12592  013322  0100               	movlb	0	; () banked
 12593  013324  EE20 F003          	lfsr	2,3
 12594  013328  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12595  01332A  26D9               	addwf	fsr2l,f,c
 12596  01332C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12597  01332E  22DA               	addwfc	fsr2h,f,c
 12598  013330  0E6D               	movlw	109
 12599  013332  6EDE               	movwf	postinc2,c
 12600  013334  0E0F               	movlw	15
 12601  013336  6EDD               	movwf	postdec2,c
 12602                           
 12603                           ; BSR set to: 0
 12604                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 12605  013338  EE20 F006          	lfsr	2,6
 12606  01333C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12607  01333E  26D9               	addwf	fsr2l,f,c
 12608  013340  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12609  013342  22DA               	addwfc	fsr2h,f,c
 12610  013344  0E6C               	movlw	108
 12611  013346  6EDE               	movwf	postinc2,c
 12612  013348  0E0F               	movlw	15
 12613  01334A  6EDD               	movwf	postdec2,c
 12614                           
 12615                           ; BSR set to: 0
 12616                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 12617  01334C  EE20 F009          	lfsr	2,9
 12618  013350  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12619  013352  26D9               	addwf	fsr2l,f,c
 12620  013354  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12621  013356  22DA               	addwfc	fsr2h,f,c
 12622  013358  0E6F               	movlw	111
 12623  01335A                     L11:
 12624  01335A  6EDE               	movwf	postinc2,c
 12625  01335C  0E0F               	movlw	15
 12626  01335E  6EDD               	movwf	postdec2,c
 12627                           
 12628                           ;SPI.c: 68: break;
 12629  013360  D008               	goto	l603
 12630  013362                     l601:
 12631                           
 12632                           ; BSR set to: 0
 12633                           
 12634                           ; BSR set to: 0
 12635  013362  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 12636                           
 12637                           ; Switch size 1, requested type "space"
 12638                           ; Number of cases is 2, Range of values is 0 to 1
 12639                           ; switch strategies available:
 12640                           ; Name         Instructions Cycles
 12641                           ; simple_byte            7     4 (average)
 12642                           ;	Chosen strategy is simple_byte
 12643  013364  0A00               	xorlw	0	; case 0
 12644  013366  B4D8               	btfsc	status,2,c
 12645  013368  D769               	goto	l602
 12646  01336A  0A01               	xorlw	1	; case 1
 12647  01336C  A4D8               	btfss	status,2,c
 12648  01336E  0012               	return	
 12649  013370  D7AD               	goto	l604
 12650  013372                     l603:
 12651                           
 12652                           ; BSR set to: 0
 12653                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 12654                           
 12655                           ; BSR set to: 0
 12656  013372  EE20 F006          	lfsr	2,6
 12657  013376  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12658  013378  26D9               	addwf	fsr2l,f,c
 12659  01337A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12660  01337C  22DA               	addwfc	fsr2h,f,c
 12661  01337E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12662  013382  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12663  013386  0E05               	movlw	5
 12664  013388  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12665  01338A  0E00               	movlw	0
 12666  01338C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12667  01338E  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 12668                           
 12669                           ;SPI.c: 77: switch(pMode)
 12670  013392  D08C               	goto	l607
 12671  013394                     
 12672                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 12673  013394  0100               	movlb	0	; () banked
 12674  013396  EE20 F006          	lfsr	2,6
 12675  01339A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12676  01339C  26D9               	addwf	fsr2l,f,c
 12677  01339E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12678  0133A0  22DA               	addwfc	fsr2h,f,c
 12679  0133A2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12680  0133A6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12681  0133AA  0E04               	movlw	4
 12682  0133AC  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12683  0133AE  0E00               	movlw	0
 12684  0133B0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12685  0133B2  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 12686                           
 12687                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 12688  0133B6  0100               	movlb	0	; () banked
 12689  0133B8  EE20 F003          	lfsr	2,3
 12690  0133BC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12691  0133BE  26D9               	addwf	fsr2l,f,c
 12692  0133C0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12693  0133C2  22DA               	addwfc	fsr2h,f,c
 12694  0133C4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12695  0133C8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12696  0133CC  0E06               	movlw	6
 12697  0133CE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12698  0133D0  0E00               	movlw	0
 12699  0133D2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12700  0133D4  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 12701                           
 12702                           ;SPI.c: 82: break;
 12703  0133D8  D078               	goto	l609
 12704  0133DA                     
 12705                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 12706  0133DA  0100               	movlb	0	; () banked
 12707  0133DC  EE20 F006          	lfsr	2,6
 12708  0133E0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12709  0133E2  26D9               	addwf	fsr2l,f,c
 12710  0133E4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12711  0133E6  22DA               	addwfc	fsr2h,f,c
 12712  0133E8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12713  0133EC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12714  0133F0  0E04               	movlw	4
 12715  0133F2  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12716  0133F4  0E00               	movlw	0
 12717  0133F6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12718  0133F8  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 12719                           
 12720                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 12721  0133FC  0100               	movlb	0	; () banked
 12722  0133FE  EE20 F003          	lfsr	2,3
 12723  013402  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12724  013404  26D9               	addwf	fsr2l,f,c
 12725  013406  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12726  013408  22DA               	addwfc	fsr2h,f,c
 12727  01340A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12728  01340E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12729  013412  0E06               	movlw	6
 12730  013414  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12731  013416  0E01               	movlw	1
 12732  013418  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12733  01341A  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 12734                           
 12735                           ;SPI.c: 86: break;
 12736  01341E  D055               	goto	l609
 12737  013420                     
 12738                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 12739  013420  0100               	movlb	0	; () banked
 12740  013422  EE20 F006          	lfsr	2,6
 12741  013426  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12742  013428  26D9               	addwf	fsr2l,f,c
 12743  01342A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12744  01342C  22DA               	addwfc	fsr2h,f,c
 12745  01342E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12746  013432  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12747  013436  0E04               	movlw	4
 12748  013438  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12749  01343A  0E01               	movlw	1
 12750  01343C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12751  01343E  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 12752                           
 12753                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 12754  013442  0100               	movlb	0	; () banked
 12755  013444  EE20 F003          	lfsr	2,3
 12756  013448  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12757  01344A  26D9               	addwf	fsr2l,f,c
 12758  01344C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12759  01344E  22DA               	addwfc	fsr2h,f,c
 12760  013450  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12761  013454  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12762  013458  0E06               	movlw	6
 12763  01345A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12764  01345C  0E00               	movlw	0
 12765  01345E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12766  013460  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 12767                           
 12768                           ;SPI.c: 90: break;
 12769  013464  D032               	goto	l609
 12770  013466                     
 12771                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 12772  013466  0100               	movlb	0	; () banked
 12773  013468  EE20 F006          	lfsr	2,6
 12774  01346C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12775  01346E  26D9               	addwf	fsr2l,f,c
 12776  013470  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12777  013472  22DA               	addwfc	fsr2h,f,c
 12778  013474  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12779  013478  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12780  01347C  0E04               	movlw	4
 12781  01347E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12782  013480  0E01               	movlw	1
 12783  013482  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12784  013484  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 12785                           
 12786                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 12787  013488  0100               	movlb	0	; () banked
 12788  01348A  EE20 F003          	lfsr	2,3
 12789  01348E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12790  013490  26D9               	addwf	fsr2l,f,c
 12791  013492  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12792  013494  22DA               	addwfc	fsr2h,f,c
 12793  013496  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12794  01349A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12795  01349E  0E06               	movlw	6
 12796  0134A0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12797  0134A2  0E01               	movlw	1
 12798  0134A4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12799  0134A6  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 12800                           
 12801                           ;SPI.c: 94: break;
 12802  0134AA  D00F               	goto	l609
 12803  0134AC                     l607:
 12804  0134AC  0100               	movlb	0	; () banked
 12805  0134AE  5192               	movf	SPI_Init@pMode& (0+255),w,b
 12806                           
 12807                           ; Switch size 1, requested type "space"
 12808                           ; Number of cases is 4, Range of values is 0 to 3
 12809                           ; switch strategies available:
 12810                           ; Name         Instructions Cycles
 12811                           ; simple_byte           13     7 (average)
 12812                           ;	Chosen strategy is simple_byte
 12813  0134B0  0A00               	xorlw	0	; case 0
 12814  0134B2  B4D8               	btfsc	status,2,c
 12815  0134B4  D76F               	goto	l608
 12816  0134B6  0A01               	xorlw	1	; case 1
 12817  0134B8  B4D8               	btfsc	status,2,c
 12818  0134BA  D78F               	goto	l610
 12819  0134BC  0A03               	xorlw	3	; case 2
 12820  0134BE  B4D8               	btfsc	status,2,c
 12821  0134C0  D7AF               	goto	l611
 12822  0134C2  0A01               	xorlw	1	; case 3
 12823  0134C4  A4D8               	btfss	status,2,c
 12824  0134C6  0012               	return	
 12825  0134C8  D7CE               	goto	l612
 12826  0134CA                     l609:
 12827                           
 12828                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 12829                           
 12830                           ; BSR set to: 0
 12831  0134CA  0100               	movlb	0	; () banked
 12832  0134CC  EE20 F006          	lfsr	2,6
 12833  0134D0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12834  0134D2  26D9               	addwf	fsr2l,f,c
 12835  0134D4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12836  0134D6  22DA               	addwfc	fsr2h,f,c
 12837  0134D8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12838  0134DC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12839  0134E0  0E07               	movlw	7
 12840  0134E2  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12841  0134E4  0E00               	movlw	0
 12842  0134E6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12843  0134E8  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 12844                           
 12845                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 12846  0134EC  0100               	movlb	0	; () banked
 12847  0134EE  EE20 F006          	lfsr	2,6
 12848  0134F2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12849  0134F4  26D9               	addwf	fsr2l,f,c
 12850  0134F6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12851  0134F8  22DA               	addwfc	fsr2h,f,c
 12852  0134FA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12853  0134FE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12854  013502  0E06               	movlw	6
 12855  013504  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12856  013506  0E00               	movlw	0
 12857  013508  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12858  01350A  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 12859                           
 12860                           ;SPI.c: 106: Timer2_Init(pClock);
 12861  01350E  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 12862  013512  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 12863  013516  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 12864  01351A  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 12865  01351E  ECCE  F0AE         	call	_Timer2_Init	;wreg free
 12866                           
 12867                           ;SPI.c: 112: SPI_DisableISR(pInput);
 12868  013522  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 12869  013526  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 12870  01352A  EC1F  F0C4         	call	_SPI_DisableISR	;wreg free
 12871                           
 12872                           ;SPI.c: 116: switch (pChannel)
 12873  01352E  D004               	goto	l614
 12874  013530                     l615:
 12875                           
 12876                           ; BSR set to: 0
 12877  013530  869F               	bsf	3999,3,c	;volatile
 12878  013532  D00B               	goto	l616
 12879  013534                     l617:
 12880                           
 12881                           ; BSR set to: 0
 12882  013534  8EA5               	bsf	4005,7,c	;volatile
 12883  013536  D009               	goto	l616
 12884  013538                     l614:
 12885                           
 12886                           ; BSR set to: 0
 12887  013538  0100               	movlb	0	; () banked
 12888  01353A  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 12889                           
 12890                           ; Switch size 1, requested type "space"
 12891                           ; Number of cases is 2, Range of values is 0 to 1
 12892                           ; switch strategies available:
 12893                           ; Name         Instructions Cycles
 12894                           ; simple_byte            7     4 (average)
 12895                           ;	Chosen strategy is simple_byte
 12896  01353C  0A00               	xorlw	0	; case 0
 12897  01353E  B4D8               	btfsc	status,2,c
 12898  013540  D7F7               	goto	l615
 12899  013542  0A01               	xorlw	1	; case 1
 12900  013544  A4D8               	btfss	status,2,c
 12901  013546  0012               	return	
 12902  013548  D7F5               	goto	l617
 12903  01354A                     l616:
 12904                           
 12905                           ; BSR set to: 0
 12906                           ;SPI.c: 124: SPI_DCS(pInput);
 12907                           
 12908                           ; BSR set to: 0
 12909  01354A  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 12910  01354E  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 12911  013552  EC92  F0C3         	call	_SPI_DCS	;wreg free
 12912                           
 12913                           ;SPI.c: 126: pInput->mBusy = 0;
 12914  013556  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 12915  01355A  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 12916  01355E  0E00               	movlw	0
 12917  013560  6EDF               	movwf	indf2,c
 12918                           
 12919                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 12920  013562  0100               	movlb	0	; () banked
 12921  013564  EE20 F006          	lfsr	2,6
 12922  013568  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12923  01356A  26D9               	addwf	fsr2l,f,c
 12924  01356C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12925  01356E  22DA               	addwfc	fsr2h,f,c
 12926  013570  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 12927  013574  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 12928  013578  0E00               	movlw	0
 12929  01357A  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 12930  01357C  0E03               	movlw	3
 12931  01357E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 12932  013580  ECC3  F0C4         	call	_Byte_SetQuad	;wreg free
 12933                           
 12934                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 12935  013584  0100               	movlb	0	; () banked
 12936  013586  EE20 F006          	lfsr	2,6
 12937  01358A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12938  01358C  26D9               	addwf	fsr2l,f,c
 12939  01358E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12940  013590  22DA               	addwfc	fsr2h,f,c
 12941  013592  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12942  013596  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12943  01359A  0E05               	movlw	5
 12944  01359C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12945  01359E  0E01               	movlw	1
 12946  0135A0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12947  0135A2  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 12948  0135A6  0012               	return		;funcret
 12949  0135A8                     __end_of_SPI_Init:
 12950                           	opt stack 0
 12951                           tosu	equ	0xFFF
 12952                           tosh	equ	0xFFE
 12953                           tosl	equ	0xFFD
 12954                           pclath	equ	0xFFA
 12955                           tblptru	equ	0xFF8
 12956                           tblptrh	equ	0xFF7
 12957                           tblptrl	equ	0xFF6
 12958                           tablat	equ	0xFF5
 12959                           prodh	equ	0xFF4
 12960                           prodl	equ	0xFF3
 12961                           intcon	equ	0xFF2
 12962                           postinc0	equ	0xFEE
 12963                           wreg	equ	0xFE8
 12964                           indf1	equ	0xFE7
 12965                           postdec1	equ	0xFE5
 12966                           fsr1h	equ	0xFE2
 12967                           fsr1l	equ	0xFE1
 12968                           indf2	equ	0xFDF
 12969                           postinc2	equ	0xFDE
 12970                           postdec2	equ	0xFDD
 12971                           plusw2	equ	0xFDB
 12972                           fsr2h	equ	0xFDA
 12973                           fsr2l	equ	0xFD9
 12974                           status	equ	0xFD8
 12975                           
 12976 ;; *************** function _Timer2_Init *****************
 12977 ;; Defined at:
 12978 ;;		line 10 in file "Library/Timer2.c"
 12979 ;; Parameters:    Size  Location     Type
 12980 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 12981 ;; Auto vars:     Size  Location     Type
 12982 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 12983 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 12984 ;;  RDIV            4   18[BANK0 ] unsigned long 
 12985 ;; Return value:  Size  Location     Type
 12986 ;;                  1    wreg      void 
 12987 ;; Registers used:
 12988 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12989 ;; Tracked objects:
 12990 ;;		On entry : 0/0
 12991 ;;		On exit  : 0/0
 12992 ;;		Unchanged: 0/0
 12993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12994 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12995 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12997 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12998 ;;Total ram usage:       17 bytes
 12999 ;; Hardware stack levels used:    1
 13000 ;; Hardware stack levels required when called:    8
 13001 ;; This function calls:
 13002 ;;		_Timer2_Clear
 13003 ;;		___lldiv
 13004 ;; This function is called by:
 13005 ;;		_SPI_Init
 13006 ;; This function uses a non-reentrant model
 13007 ;;
 13008                           
 13009                           	psect	text59
 13010  015D9C                     __ptext59:
 13011                           	opt stack 0
 13012  015D9C                     _Timer2_Init:
 13013                           	opt stack 19
 13014                           
 13015                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 13016                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 13017                           ;Timer2.c: 14: static UINT8 PRE = 0;
 13018                           ;Timer2.c: 15: static UINT32 DIV = 0;
 13019                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 13020                           
 13021                           ;incstack = 0
 13022  015D9C  0E00               	movlw	0
 13023  015D9E  0100               	movlb	0	; () banked
 13024  015DA0  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 13025  015DA2  0E6C               	movlw	108
 13026  015DA4  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 13027  015DA6  0EDC               	movlw	220
 13028  015DA8  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 13029  015DAA  0E02               	movlw	2
 13030  015DAC  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 13031                           
 13032                           ; BSR set to: 0
 13033                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 13034                           ;Timer2.c: 20: pFrequency *= 2;
 13035  015DAE  90D8               	bcf	status,0,c
 13036  015DB0  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 13037  015DB2  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 13038  015DB4  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 13039  015DB6  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 13040                           
 13041                           ; BSR set to: 0
 13042                           ;Timer2.c: 23: pCPUClock /= 4;
 13043  015DB8  0E02               	movlw	2
 13044  015DBA  6F71               	movwf	??_Timer2_Init& (0+255),b
 13045  015DBC                     u12845:
 13046  015DBC  90D8               	bcf	status,0,c
 13047  015DBE  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 13048  015DC0  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 13049  015DC2  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 13050  015DC4  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 13051  015DC6  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 13052  015DC8  D7F9               	goto	u12845
 13053                           
 13054                           ; BSR set to: 0
 13055                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 13056  015DCA  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 13057  015DCE  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 13058  015DD2  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 13059  015DD6  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 13060  015DDA  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 13061  015DDE  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 13062  015DE2  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 13063  015DE6  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 13064  015DEA  EC5F  F0BA         	call	___lldiv	;wreg free
 13065  015DEE  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 13066  015DF2  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 13067  015DF6  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 13068  015DFA  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 13069                           
 13070                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 13071  015DFE  D00E               	goto	l1828
 13072  015E00                     l15401:
 13073                           
 13074                           ;Timer2.c: 28: {
 13075                           ;Timer2.c: 29: RDIV = 0;
 13076  015E00  0E00               	movlw	0
 13077  015E02  0100               	movlb	0	; () banked
 13078  015E04  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 13079  015E06  0E00               	movlw	0
 13080  015E08  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 13081  015E0A  0E00               	movlw	0
 13082  015E0C  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 13083  015E0E  0E00               	movlw	0
 13084  015E10  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 13085                           
 13086                           ; BSR set to: 0
 13087                           ;Timer2.c: 30: INDEX ++;
 13088  015E12  2A3E               	incf	Timer2_Init@INDEX,f,c
 13089                           
 13090                           ; BSR set to: 0
 13091                           ;Timer2.c: 31: if (INDEX >= 3)
 13092  015E14  0E02               	movlw	2
 13093  015E16  643E               	cpfsgt	Timer2_Init@INDEX,c
 13094  015E18  D001               	goto	l1828
 13095  015E1A  D023               	goto	u12860
 13096  015E1C                     l1828:
 13097                           
 13098                           ; BSR set to: 0
 13099                           
 13100                           ; BSR set to: 0
 13101  015E1C  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 13102  015E20  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 13103  015E24  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 13104  015E28  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 13105  015E2C  503E               	movf	Timer2_Init@INDEX,w,c
 13106  015E2E  0D01               	mullw	1
 13107  015E30  0E2C               	movlw	low Timer2_Init@PRESCALE
 13108  015E32  24F3               	addwf	prodl,w,c
 13109  015E34  6EF6               	movwf	tblptrl,c
 13110  015E36  0EFC               	movlw	high Timer2_Init@PRESCALE
 13111  015E38  20F4               	addwfc	prodh,w,c
 13112  015E3A  6EF7               	movwf	tblptrh,c
 13113  015E3C                     	if	1	;There are 3 active tblptr bytes
 13114  015E3C  6AF8               	clrf	tblptru,c
 13115  015E3E  0E00               	movlw	low (__mediumconst shr (0+16))
 13116  015E40  22F8               	addwfc	tblptru,f,c
 13117  015E42                     	endif
 13118  015E42  0008               	tblrd		*
 13119  015E44  50F5               	movf	tablat,w,c
 13120  015E46  0100               	movlb	0	; () banked
 13121  015E48  6F64               	movwf	___lldiv@divisor& (0+255),b
 13122  015E4A  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13123  015E4C  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13124  015E4E  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13125  015E50  EC5F  F0BA         	call	___lldiv	;wreg free
 13126  015E54  0100               	movlb	0	; () banked
 13127  015E56  5163               	movf	(?___lldiv+3)& (0+255),w,b
 13128  015E58  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 13129  015E5A  E1D2               	bnz	l15401
 13130  015E5C  0561               	decf	(?___lldiv+1)& (0+255),w,b
 13131  015E5E  B0D8               	btfsc	status,0,c
 13132  015E60  D7CF               	goto	l1827
 13133  015E62                     u12860:
 13134                           
 13135                           ; BSR set to: 0
 13136                           ;Timer2.c: 33: }
 13137                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 13138                           
 13139                           ; BSR set to: 0
 13140  015E62  50CA               	movf	4042,w,c	;volatile
 13141  015E64  183E               	xorwf	Timer2_Init@INDEX,w,c
 13142  015E66  0BFC               	andlw	-4
 13143  015E68  183E               	xorwf	Timer2_Init@INDEX,w,c
 13144  015E6A  6ECA               	movwf	4042,c	;volatile
 13145                           
 13146                           ; BSR set to: 0
 13147                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 13148  015E6C  84CA               	bsf	4042,2,c	;volatile
 13149                           
 13150                           ; BSR set to: 0
 13151                           ;Timer2.c: 44: Timer2_Clear();
 13152  015E6E  EC50  F0C6         	call	_Timer2_Clear	;wreg free
 13153                           
 13154                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 13155  015E72  503E               	movf	Timer2_Init@INDEX,w,c
 13156  015E74  0D01               	mullw	1
 13157  015E76  0E2C               	movlw	low Timer2_Init@PRESCALE
 13158  015E78  24F3               	addwf	prodl,w,c
 13159  015E7A  6EF6               	movwf	tblptrl,c
 13160  015E7C  0EFC               	movlw	high Timer2_Init@PRESCALE
 13161  015E7E  20F4               	addwfc	prodh,w,c
 13162  015E80  6EF7               	movwf	tblptrh,c
 13163  015E82                     	if	1	;There are 3 active tblptr bytes
 13164  015E82  6AF8               	clrf	tblptru,c
 13165  015E84  0E00               	movlw	low (__mediumconst shr (0+16))
 13166  015E86  22F8               	addwfc	tblptru,f,c
 13167  015E88                     	endif
 13168  015E88  0008               	tblrd		*
 13169  015E8A  CFF5 F03D          	movff	tablat,Timer2_Init@PRE
 13170                           
 13171                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 13172  015E8E  0EFF               	movlw	255
 13173  015E90  0100               	movlb	0	; () banked
 13174  015E92  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 13175  015E94  0101               	movlb	1	; () banked
 13176  015E96  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 13177  015E98  0EFF               	movlw	255
 13178  015E9A  0100               	movlb	0	; () banked
 13179  015E9C  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 13180  015E9E  0101               	movlb	1	; () banked
 13181  015EA0  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 13182  015EA2  0EFF               	movlw	255
 13183  015EA4  0100               	movlb	0	; () banked
 13184  015EA6  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 13185  015EA8  0101               	movlb	1	; () banked
 13186  015EAA  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 13187  015EAC  0EFF               	movlw	255
 13188  015EAE  0100               	movlb	0	; () banked
 13189  015EB0  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 13190  015EB2  0101               	movlb	1	; () banked
 13191  015EB4  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 13192                           
 13193                           ; BSR set to: 1
 13194                           ;Timer2.c: 48: INDEX = DIV/PRE;
 13195  015EB6  C100  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 13196  015EBA  C101  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 13197  015EBE  C102  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 13198  015EC2  C103  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 13199  015EC6  503D               	movf	Timer2_Init@PRE,w,c
 13200  015EC8  0100               	movlb	0	; () banked
 13201  015ECA  6F64               	movwf	___lldiv@divisor& (0+255),b
 13202  015ECC  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13203  015ECE  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13204  015ED0  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13205  015ED2  EC5F  F0BA         	call	___lldiv	;wreg free
 13206  015ED6  0100               	movlb	0	; () banked
 13207  015ED8  5160               	movf	?___lldiv& (0+255),w,b
 13208  015EDA  6E3E               	movwf	Timer2_Init@INDEX,c
 13209                           
 13210                           ; BSR set to: 0
 13211                           ;Timer2.c: 49: PR2 = INDEX;
 13212  015EDC  C03E  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 13213                           
 13214                           ; BSR set to: 0
 13215  015EE0  0012               	return		;funcret
 13216  015EE2                     __end_of_Timer2_Init:
 13217                           	opt stack 0
 13218                           tosu	equ	0xFFF
 13219                           tosh	equ	0xFFE
 13220                           tosl	equ	0xFFD
 13221                           pclath	equ	0xFFA
 13222                           tblptru	equ	0xFF8
 13223                           tblptrh	equ	0xFF7
 13224                           tblptrl	equ	0xFF6
 13225                           tablat	equ	0xFF5
 13226                           prodh	equ	0xFF4
 13227                           prodl	equ	0xFF3
 13228                           intcon	equ	0xFF2
 13229                           postinc0	equ	0xFEE
 13230                           wreg	equ	0xFE8
 13231                           indf1	equ	0xFE7
 13232                           postdec1	equ	0xFE5
 13233                           fsr1h	equ	0xFE2
 13234                           fsr1l	equ	0xFE1
 13235                           indf2	equ	0xFDF
 13236                           postinc2	equ	0xFDE
 13237                           postdec2	equ	0xFDD
 13238                           plusw2	equ	0xFDB
 13239                           fsr2h	equ	0xFDA
 13240                           fsr2l	equ	0xFD9
 13241                           status	equ	0xFD8
 13242                           
 13243 ;; *************** function ___lldiv *****************
 13244 ;; Defined at:
 13245 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
 13246 ;; Parameters:    Size  Location     Type
 13247 ;;  dividend        4    0[BANK0 ] unsigned long 
 13248 ;;  divisor         4    4[BANK0 ] unsigned long 
 13249 ;; Auto vars:     Size  Location     Type
 13250 ;;  quotient        4    8[BANK0 ] unsigned long 
 13251 ;;  counter         1   12[BANK0 ] unsigned char 
 13252 ;; Return value:  Size  Location     Type
 13253 ;;                  4    0[BANK0 ] unsigned long 
 13254 ;; Registers used:
 13255 ;;		wreg, status,2, status,0
 13256 ;; Tracked objects:
 13257 ;;		On entry : 0/0
 13258 ;;		On exit  : 0/0
 13259 ;;		Unchanged: 0/0
 13260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13261 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13262 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13264 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13265 ;;Total ram usage:       13 bytes
 13266 ;; Hardware stack levels used:    1
 13267 ;; Hardware stack levels required when called:    7
 13268 ;; This function calls:
 13269 ;;		Nothing
 13270 ;; This function is called by:
 13271 ;;		_Timer2_Init
 13272 ;;		_rand_between
 13273 ;;		_I2C_Init
 13274 ;;		_Timer0_Init
 13275 ;; This function uses a non-reentrant model
 13276 ;;
 13277                           
 13278                           	psect	text60
 13279  0174BE                     __ptext60:
 13280                           	opt stack 0
 13281  0174BE                     ___lldiv:
 13282                           	opt stack 19
 13283                           
 13284                           ; BSR set to: 0
 13285                           ;incstack = 0
 13286  0174BE  0E00               	movlw	0
 13287  0174C0  0100               	movlb	0	; () banked
 13288  0174C2  6F68               	movwf	___lldiv@quotient& (0+255),b
 13289  0174C4  0E00               	movlw	0
 13290  0174C6  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 13291  0174C8  0E00               	movlw	0
 13292  0174CA  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 13293  0174CC  0E00               	movlw	0
 13294  0174CE  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 13295                           
 13296                           ; BSR set to: 0
 13297  0174D0  5164               	movf	___lldiv@divisor& (0+255),w,b
 13298  0174D2  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 13299  0174D4  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 13300  0174D6  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 13301  0174D8  B4D8               	btfsc	status,2,c
 13302  0174DA  D02A               	goto	l2904
 13303                           
 13304                           ; BSR set to: 0
 13305  0174DC  0E01               	movlw	1
 13306  0174DE  6F6C               	movwf	___lldiv@counter& (0+255),b
 13307  0174E0  D006               	goto	l2899
 13308  0174E2                     
 13309                           ; BSR set to: 0
 13310                           
 13311                           ; BSR set to: 0
 13312  0174E2  90D8               	bcf	status,0,c
 13313  0174E4  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 13314  0174E6  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 13315  0174E8  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 13316  0174EA  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 13317  0174EC  2B6C               	incf	___lldiv@counter& (0+255),f,b
 13318  0174EE                     l2899:
 13319                           
 13320                           ; BSR set to: 0
 13321                           
 13322                           ; BSR set to: 0
 13323  0174EE  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 13324  0174F0  D7F8               	goto	l2900
 13325  0174F2                     u12740:
 13326                           
 13327                           ; BSR set to: 0
 13328                           
 13329                           ; BSR set to: 0
 13330                           
 13331                           ; BSR set to: 0
 13332  0174F2  90D8               	bcf	status,0,c
 13333  0174F4  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 13334  0174F6  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 13335  0174F8  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 13336  0174FA  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 13337                           
 13338                           ; BSR set to: 0
 13339  0174FC  5164               	movf	___lldiv@divisor& (0+255),w,b
 13340  0174FE  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 13341  017500  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 13342  017502  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 13343  017504  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 13344  017506  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 13345  017508  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 13346  01750A  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 13347  01750C  A0D8               	btfss	status,0,c
 13348  01750E  D009               	goto	l2903
 13349                           
 13350                           ; BSR set to: 0
 13351  017510  5164               	movf	___lldiv@divisor& (0+255),w,b
 13352  017512  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 13353  017514  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 13354  017516  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 13355  017518  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 13356  01751A  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 13357  01751C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 13358  01751E  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 13359                           
 13360                           ; BSR set to: 0
 13361  017520  8168               	bsf	___lldiv@quotient& (0+255),0,b
 13362  017522                     l2903:
 13363                           
 13364                           ; BSR set to: 0
 13365                           
 13366                           ; BSR set to: 0
 13367  017522  90D8               	bcf	status,0,c
 13368  017524  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 13369  017526  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 13370  017528  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 13371  01752A  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 13372                           
 13373                           ; BSR set to: 0
 13374  01752C  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 13375  01752E  D7E1               	goto	u12740
 13376  017530                     l2904:
 13377                           
 13378                           ; BSR set to: 0
 13379                           
 13380                           ; BSR set to: 0
 13381  017530  C068  F060         	movff	___lldiv@quotient,?___lldiv
 13382  017534  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 13383  017538  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 13384  01753C  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 13385                           
 13386                           ; BSR set to: 0
 13387  017540  0012               	return		;funcret
 13388  017542                     __end_of___lldiv:
 13389                           	opt stack 0
 13390                           tosu	equ	0xFFF
 13391                           tosh	equ	0xFFE
 13392                           tosl	equ	0xFFD
 13393                           pclath	equ	0xFFA
 13394                           tblptru	equ	0xFF8
 13395                           tblptrh	equ	0xFF7
 13396                           tblptrl	equ	0xFF6
 13397                           tablat	equ	0xFF5
 13398                           prodh	equ	0xFF4
 13399                           prodl	equ	0xFF3
 13400                           intcon	equ	0xFF2
 13401                           postinc0	equ	0xFEE
 13402                           wreg	equ	0xFE8
 13403                           indf1	equ	0xFE7
 13404                           postdec1	equ	0xFE5
 13405                           fsr1h	equ	0xFE2
 13406                           fsr1l	equ	0xFE1
 13407                           indf2	equ	0xFDF
 13408                           postinc2	equ	0xFDE
 13409                           postdec2	equ	0xFDD
 13410                           plusw2	equ	0xFDB
 13411                           fsr2h	equ	0xFDA
 13412                           fsr2l	equ	0xFD9
 13413                           status	equ	0xFD8
 13414                           
 13415 ;; *************** function _Timer2_Clear *****************
 13416 ;; Defined at:
 13417 ;;		line 3 in file "Library/Timer2.c"
 13418 ;; Parameters:    Size  Location     Type
 13419 ;;		None
 13420 ;; Auto vars:     Size  Location     Type
 13421 ;;		None
 13422 ;; Return value:  Size  Location     Type
 13423 ;;                  1    wreg      void 
 13424 ;; Registers used:
 13425 ;;		None
 13426 ;; Tracked objects:
 13427 ;;		On entry : 0/0
 13428 ;;		On exit  : 0/0
 13429 ;;		Unchanged: 0/0
 13430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13435 ;;Total ram usage:        0 bytes
 13436 ;; Hardware stack levels used:    1
 13437 ;; Hardware stack levels required when called:    7
 13438 ;; This function calls:
 13439 ;;		Nothing
 13440 ;; This function is called by:
 13441 ;;		_Timer2_Init
 13442 ;; This function uses a non-reentrant model
 13443 ;;
 13444                           
 13445                           	psect	text61
 13446  018CA0                     __ptext61:
 13447                           	opt stack 0
 13448  018CA0                     _Timer2_Clear:
 13449                           	opt stack 19
 13450                           
 13451                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;incstack = 0
 13455  018CA0  929E               	bcf	3998,1,c	;volatile
 13456                           
 13457                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 13458  018CA2  929D               	bcf	3997,1,c	;volatile
 13459                           
 13460                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 13461  018CA4  929F               	bcf	3999,1,c	;volatile
 13462  018CA6  0012               	return		;funcret
 13463  018CA8                     __end_of_Timer2_Clear:
 13464                           	opt stack 0
 13465                           tosu	equ	0xFFF
 13466                           tosh	equ	0xFFE
 13467                           tosl	equ	0xFFD
 13468                           pclath	equ	0xFFA
 13469                           tblptru	equ	0xFF8
 13470                           tblptrh	equ	0xFF7
 13471                           tblptrl	equ	0xFF6
 13472                           tablat	equ	0xFF5
 13473                           prodh	equ	0xFF4
 13474                           prodl	equ	0xFF3
 13475                           intcon	equ	0xFF2
 13476                           postinc0	equ	0xFEE
 13477                           wreg	equ	0xFE8
 13478                           indf1	equ	0xFE7
 13479                           postdec1	equ	0xFE5
 13480                           fsr1h	equ	0xFE2
 13481                           fsr1l	equ	0xFE1
 13482                           indf2	equ	0xFDF
 13483                           postinc2	equ	0xFDE
 13484                           postdec2	equ	0xFDD
 13485                           plusw2	equ	0xFDB
 13486                           fsr2h	equ	0xFDA
 13487                           fsr2l	equ	0xFD9
 13488                           status	equ	0xFD8
 13489                           
 13490 ;; *************** function _SPI_DisableISR *****************
 13491 ;; Defined at:
 13492 ;;		line 181 in file "Library/SPI.c"
 13493 ;; Parameters:    Size  Location     Type
 13494 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 13495 ;;		 -> SPI1(11), SPI2(11), 
 13496 ;; Auto vars:     Size  Location     Type
 13497 ;;		None
 13498 ;; Return value:  Size  Location     Type
 13499 ;;                  1    wreg      void 
 13500 ;; Registers used:
 13501 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13502 ;; Tracked objects:
 13503 ;;		On entry : 0/0
 13504 ;;		On exit  : 0/0
 13505 ;;		Unchanged: 0/0
 13506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13507 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13510 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13511 ;;Total ram usage:        2 bytes
 13512 ;; Hardware stack levels used:    1
 13513 ;; Hardware stack levels required when called:    7
 13514 ;; This function calls:
 13515 ;;		Nothing
 13516 ;; This function is called by:
 13517 ;;		_SPI_Init
 13518 ;; This function uses a non-reentrant model
 13519 ;;
 13520                           
 13521                           	psect	text62
 13522  01883E                     __ptext62:
 13523                           	opt stack 0
 13524  01883E                     _SPI_DisableISR:
 13525                           	opt stack 20
 13526                           
 13527                           ;SPI.c: 183: switch (pInput->mChannel)
 13528                           
 13529                           ;incstack = 0
 13530  01883E  D004               	goto	l654
 13531  018840                     l655:
 13532                           
 13533                           ; BSR set to: 0
 13534  018840  969D               	bcf	3997,3,c	;volatile
 13535  018842  0012               	return	
 13536  018844                     l657:
 13537                           
 13538                           ; BSR set to: 0
 13539  018844  9EA3               	bcf	4003,7,c	;volatile
 13540                           
 13541                           ; BSR set to: 0
 13542                           ;SPI.c: 188: };
 13543                           
 13544                           ; BSR set to: 0
 13545                           
 13546                           ;SPI.c: 187: default: return;
 13547  018846  0012               	return	
 13548  018848                     l654:
 13549                           
 13550                           ; BSR set to: 0
 13551  018848  0100               	movlb	0	; () banked
 13552  01884A  EE20 F002          	lfsr	2,2
 13553  01884E  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 13554  018850  26D9               	addwf	fsr2l,f,c
 13555  018852  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 13556  018854  22DA               	addwfc	fsr2h,f,c
 13557  018856  50DF               	movf	indf2,w,c
 13558                           
 13559                           ; Switch size 1, requested type "space"
 13560                           ; Number of cases is 2, Range of values is 0 to 1
 13561                           ; switch strategies available:
 13562                           ; Name         Instructions Cycles
 13563                           ; simple_byte            7     4 (average)
 13564                           ;	Chosen strategy is simple_byte
 13565  018858  0A00               	xorlw	0	; case 0
 13566  01885A  B4D8               	btfsc	status,2,c
 13567  01885C  D7F1               	goto	l655
 13568  01885E  0A01               	xorlw	1	; case 1
 13569  018860  A4D8               	btfss	status,2,c
 13570  018862  0012               	return	
 13571  018864  D7EF               	goto	l657
 13572  018866                     __end_of_SPI_DisableISR:
 13573                           	opt stack 0
 13574                           tosu	equ	0xFFF
 13575                           tosh	equ	0xFFE
 13576                           tosl	equ	0xFFD
 13577                           pclath	equ	0xFFA
 13578                           tblptru	equ	0xFF8
 13579                           tblptrh	equ	0xFF7
 13580                           tblptrl	equ	0xFF6
 13581                           tablat	equ	0xFF5
 13582                           prodh	equ	0xFF4
 13583                           prodl	equ	0xFF3
 13584                           intcon	equ	0xFF2
 13585                           postinc0	equ	0xFEE
 13586                           wreg	equ	0xFE8
 13587                           indf1	equ	0xFE7
 13588                           postdec1	equ	0xFE5
 13589                           fsr1h	equ	0xFE2
 13590                           fsr1l	equ	0xFE1
 13591                           indf2	equ	0xFDF
 13592                           postinc2	equ	0xFDE
 13593                           postdec2	equ	0xFDD
 13594                           plusw2	equ	0xFDB
 13595                           fsr2h	equ	0xFDA
 13596                           fsr2l	equ	0xFD9
 13597                           status	equ	0xFD8
 13598                           
 13599 ;; *************** function _SPI_DCS *****************
 13600 ;; Defined at:
 13601 ;;		line 219 in file "Library/SPI.c"
 13602 ;; Parameters:    Size  Location     Type
 13603 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 13604 ;;		 -> SPI1(11), SPI2(11), 
 13605 ;; Auto vars:     Size  Location     Type
 13606 ;;		None
 13607 ;; Return value:  Size  Location     Type
 13608 ;;                  1    wreg      void 
 13609 ;; Registers used:
 13610 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13611 ;; Tracked objects:
 13612 ;;		On entry : 0/0
 13613 ;;		On exit  : 0/0
 13614 ;;		Unchanged: 0/0
 13615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13616 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13620 ;;Total ram usage:        2 bytes
 13621 ;; Hardware stack levels used:    1
 13622 ;; Hardware stack levels required when called:    7
 13623 ;; This function calls:
 13624 ;;		Nothing
 13625 ;; This function is called by:
 13626 ;;		_SPI_Init
 13627 ;; This function uses a non-reentrant model
 13628 ;;
 13629                           
 13630                           	psect	text63
 13631  018724                     __ptext63:
 13632                           	opt stack 0
 13633  018724                     _SPI_DCS:
 13634                           	opt stack 20
 13635                           
 13636                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 13637                           
 13638                           ; BSR set to: 0
 13639                           ;incstack = 0
 13640  018724  0100               	movlb	0	; () banked
 13641  018726  EE20 F002          	lfsr	2,2
 13642  01872A  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 13643  01872C  26D9               	addwf	fsr2l,f,c
 13644  01872E  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 13645  018730  22DA               	addwfc	fsr2h,f,c
 13646  018732  50DF               	movf	indf2,w,c
 13647  018734  A4D8               	btfss	status,2,c
 13648  018736  D007               	goto	l673
 13649                           
 13650                           ; BSR set to: 0
 13651                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 13652  018738  C18E  FFD9         	movff	_PortC+4,fsr2l
 13653  01873C  C18F  FFDA         	movff	_PortC+5,fsr2h
 13654  018740  0101               	movlb	1	; () banked
 13655  018742  84DF               	bsf	indf2,2,c
 13656  018744  0012               	return	
 13657  018746                     l673:
 13658                           
 13659                           ;SPI.c: 223: else
 13660                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 13661                           
 13662                           ; BSR set to: 1
 13663  018746  C17A  FFD9         	movff	_PortD+4,fsr2l
 13664  01874A  C17B  FFDA         	movff	_PortD+5,fsr2h
 13665  01874E  0101               	movlb	1	; () banked
 13666  018750  8EDF               	bsf	indf2,7,c
 13667  018752  0012               	return	
 13668  018754                     __end_of_SPI_DCS:
 13669                           	opt stack 0
 13670                           tosu	equ	0xFFF
 13671                           tosh	equ	0xFFE
 13672                           tosl	equ	0xFFD
 13673                           pclath	equ	0xFFA
 13674                           tblptru	equ	0xFF8
 13675                           tblptrh	equ	0xFF7
 13676                           tblptrl	equ	0xFF6
 13677                           tablat	equ	0xFF5
 13678                           prodh	equ	0xFF4
 13679                           prodl	equ	0xFF3
 13680                           intcon	equ	0xFF2
 13681                           postinc0	equ	0xFEE
 13682                           wreg	equ	0xFE8
 13683                           indf1	equ	0xFE7
 13684                           postdec1	equ	0xFE5
 13685                           fsr1h	equ	0xFE2
 13686                           fsr1l	equ	0xFE1
 13687                           indf2	equ	0xFDF
 13688                           postinc2	equ	0xFDE
 13689                           postdec2	equ	0xFDD
 13690                           plusw2	equ	0xFDB
 13691                           fsr2h	equ	0xFDA
 13692                           fsr2l	equ	0xFD9
 13693                           status	equ	0xFD8
 13694                           
 13695 ;; *************** function _Go_Home *****************
 13696 ;; Defined at:
 13697 ;;		line 631 in file "dans.c"
 13698 ;; Parameters:    Size  Location     Type
 13699 ;;		None
 13700 ;; Auto vars:     Size  Location     Type
 13701 ;;		None
 13702 ;; Return value:  Size  Location     Type
 13703 ;;                  1    wreg      void 
 13704 ;; Registers used:
 13705 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13706 ;; Tracked objects:
 13707 ;;		On entry : 0/0
 13708 ;;		On exit  : 0/0
 13709 ;;		Unchanged: 0/0
 13710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13715 ;;Total ram usage:        0 bytes
 13716 ;; Hardware stack levels used:    1
 13717 ;; Hardware stack levels required when called:   16
 13718 ;; This function calls:
 13719 ;;		_Go_Backward
 13720 ;;		_pop
 13721 ;; This function is called by:
 13722 ;;		_main
 13723 ;; This function uses a non-reentrant model
 13724 ;;
 13725                           
 13726                           	psect	text64
 13727  0189E4                     __ptext64:
 13728                           	opt stack 0
 13729  0189E4                     _Go_Home:
 13730                           	opt stack 14
 13731                           
 13732                           ;dans.c: 632: Go_Backward(pop(), 200);
 13733                           
 13734                           ; BSR set to: 1
 13735                           ;incstack = 0
 13736  0189E4  EC73  F0C0         	call	_pop	;wreg free
 13737  0189E8  C083  F1F7         	movff	?_pop,Go_Backward@direction
 13738  0189EC  C084  F1F8         	movff	?_pop+1,Go_Backward@direction+1
 13739  0189F0  0E00               	movlw	0
 13740  0189F2  0101               	movlb	1	; () banked
 13741  0189F4  6FFA               	movwf	(Go_Backward@spd+1)& (0+255),b
 13742  0189F6  0EC8               	movlw	200
 13743  0189F8  6FF9               	movwf	Go_Backward@spd& (0+255),b
 13744  0189FA  EC59  F0B4         	call	_Go_Backward	;wreg free
 13745  0189FE  0012               	return		;funcret
 13746  018A00                     __end_of_Go_Home:
 13747                           	opt stack 0
 13748                           tosu	equ	0xFFF
 13749                           tosh	equ	0xFFE
 13750                           tosl	equ	0xFFD
 13751                           pclath	equ	0xFFA
 13752                           tblptru	equ	0xFF8
 13753                           tblptrh	equ	0xFF7
 13754                           tblptrl	equ	0xFF6
 13755                           tablat	equ	0xFF5
 13756                           prodh	equ	0xFF4
 13757                           prodl	equ	0xFF3
 13758                           intcon	equ	0xFF2
 13759                           postinc0	equ	0xFEE
 13760                           wreg	equ	0xFE8
 13761                           indf1	equ	0xFE7
 13762                           postdec1	equ	0xFE5
 13763                           fsr1h	equ	0xFE2
 13764                           fsr1l	equ	0xFE1
 13765                           indf2	equ	0xFDF
 13766                           postinc2	equ	0xFDE
 13767                           postdec2	equ	0xFDD
 13768                           plusw2	equ	0xFDB
 13769                           fsr2h	equ	0xFDA
 13770                           fsr2l	equ	0xFD9
 13771                           status	equ	0xFD8
 13772                           
 13773 ;; *************** function _pop *****************
 13774 ;; Defined at:
 13775 ;;		line 248 in file "dans.c"
 13776 ;; Parameters:    Size  Location     Type
 13777 ;;		None
 13778 ;; Auto vars:     Size  Location     Type
 13779 ;;  data            2   37[BANK0 ] int 
 13780 ;; Return value:  Size  Location     Type
 13781 ;;                  2   35[BANK0 ] int 
 13782 ;; Registers used:
 13783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13784 ;; Tracked objects:
 13785 ;;		On entry : 0/0
 13786 ;;		On exit  : 0/0
 13787 ;;		Unchanged: 0/0
 13788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13789 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13790 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13792 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13793 ;;Total ram usage:        4 bytes
 13794 ;; Hardware stack levels used:    1
 13795 ;; Hardware stack levels required when called:   13
 13796 ;; This function calls:
 13797 ;;		_isempty
 13798 ;;		_printf
 13799 ;; This function is called by:
 13800 ;;		_Navigate_Maze
 13801 ;;		_Go_Home
 13802 ;; This function uses a non-reentrant model
 13803 ;;
 13804                           
 13805                           	psect	text65
 13806  0180E6                     __ptext65:
 13807                           	opt stack 0
 13808  0180E6                     _pop:
 13809                           	opt stack 16
 13810                           
 13811                           ;dans.c: 249: int data;
 13812                           ;dans.c: 251: if(!isempty()) {
 13813                           
 13814                           ;incstack = 0
 13815  0180E6  ECCD  F0C5         	call	_isempty	;wreg free
 13816  0180EA  0900               	iorlw	0
 13817  0180EC  A4D8               	btfss	status,2,c
 13818  0180EE  D019               	goto	l2386
 13819                           
 13820                           ;dans.c: 252: data = stack[top];
 13821  0180F0  90D8               	bcf	status,0,c
 13822  0180F2  0101               	movlb	1	; () banked
 13823  0180F4  35E0               	rlcf	_top& (0+255),w,b
 13824  0180F6  6ED9               	movwf	fsr2l,c
 13825  0180F8  35E1               	rlcf	(_top+1)& (0+255),w,b
 13826  0180FA  6EDA               	movwf	fsr2h,c
 13827  0180FC  0E00               	movlw	low _stack
 13828  0180FE  26D9               	addwf	fsr2l,f,c
 13829  018100  0E03               	movlw	high _stack
 13830  018102  22DA               	addwfc	fsr2h,f,c
 13831  018104  CFDE F085          	movff	postinc2,pop@data
 13832  018108  CFDD F086          	movff	postdec2,pop@data+1
 13833                           
 13834                           ; BSR set to: 1
 13835                           ;dans.c: 253: top = top - 1;
 13836  01810C  0EFF               	movlw	255
 13837  01810E  25E0               	addwf	_top& (0+255),w,b
 13838  018110  6FE0               	movwf	_top& (0+255),b
 13839  018112  0EFF               	movlw	255
 13840  018114  21E1               	addwfc	(_top+1)& (0+255),w,b
 13841  018116  6FE1               	movwf	(_top+1)& (0+255),b
 13842                           
 13843                           ; BSR set to: 1
 13844                           ;dans.c: 254: return data;
 13845  018118  C085  F083         	movff	pop@data,?_pop
 13846  01811C  C086  F084         	movff	pop@data+1,?_pop+1
 13847                           
 13848                           ; BSR set to: 1
 13849                           ;dans.c: 255: } else {
 13850                           
 13851                           ; BSR set to: 1
 13852  018120  0012               	return	
 13853  018122                     l2386:
 13854                           
 13855                           ;dans.c: 256: printf("Could not retrieve data, Stack is empty.\n");
 13856                           
 13857                           ; BSR set to: 1
 13858  018122  0E69               	movlw	low STR_22
 13859  018124  0100               	movlb	0	; () banked
 13860  018126  6F75               	movwf	printf@f& (0+255),b
 13861  018128  0EFE               	movlw	high STR_22
 13862  01812A  6F76               	movwf	(printf@f+1)& (0+255),b
 13863  01812C  EC77  F0AB         	call	_printf	;wreg free
 13864  018130  0012               	return	
 13865  018132                     __end_of_pop:
 13866                           	opt stack 0
 13867                           tosu	equ	0xFFF
 13868                           tosh	equ	0xFFE
 13869                           tosl	equ	0xFFD
 13870                           pclath	equ	0xFFA
 13871                           tblptru	equ	0xFF8
 13872                           tblptrh	equ	0xFF7
 13873                           tblptrl	equ	0xFF6
 13874                           tablat	equ	0xFF5
 13875                           prodh	equ	0xFF4
 13876                           prodl	equ	0xFF3
 13877                           intcon	equ	0xFF2
 13878                           postinc0	equ	0xFEE
 13879                           wreg	equ	0xFE8
 13880                           indf1	equ	0xFE7
 13881                           postdec1	equ	0xFE5
 13882                           fsr1h	equ	0xFE2
 13883                           fsr1l	equ	0xFE1
 13884                           indf2	equ	0xFDF
 13885                           postinc2	equ	0xFDE
 13886                           postdec2	equ	0xFDD
 13887                           plusw2	equ	0xFDB
 13888                           fsr2h	equ	0xFDA
 13889                           fsr2l	equ	0xFD9
 13890                           status	equ	0xFD8
 13891                           
 13892 ;; *************** function _isempty *****************
 13893 ;; Defined at:
 13894 ;;		line 231 in file "dans.c"
 13895 ;; Parameters:    Size  Location     Type
 13896 ;;		None
 13897 ;; Auto vars:     Size  Location     Type
 13898 ;;		None
 13899 ;; Return value:  Size  Location     Type
 13900 ;;                  1    wreg      unsigned char 
 13901 ;; Registers used:
 13902 ;;		wreg, status,2, status,0
 13903 ;; Tracked objects:
 13904 ;;		On entry : 0/0
 13905 ;;		On exit  : 0/0
 13906 ;;		Unchanged: 0/0
 13907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13912 ;;Total ram usage:        0 bytes
 13913 ;; Hardware stack levels used:    1
 13914 ;; Hardware stack levels required when called:    7
 13915 ;; This function calls:
 13916 ;;		Nothing
 13917 ;; This function is called by:
 13918 ;;		_pop
 13919 ;; This function uses a non-reentrant model
 13920 ;;
 13921                           
 13922                           	psect	text66
 13923  018B9A                     __ptext66:
 13924                           	opt stack 0
 13925  018B9A                     _isempty:
 13926                           	opt stack 21
 13927                           
 13928                           ;dans.c: 233: if(top == -1)
 13929                           
 13930                           ;incstack = 0
 13931  018B9A  0101               	movlb	1	; () banked
 13932  018B9C  29E0               	incf	_top& (0+255),w,b
 13933  018B9E  E105               	bnz	l16149
 13934  018BA0  29E1               	incf	(_top+1)& (0+255),w,b
 13935  018BA2  A4D8               	btfss	status,2,c
 13936  018BA4  D002               	goto	l2373
 13937                           
 13938                           ; BSR set to: 1
 13939                           ;dans.c: 234: return 1;
 13940  018BA6  0E01               	movlw	1
 13941                           
 13942                           ; BSR set to: 1
 13943                           
 13944                           ; BSR set to: 1
 13945  018BA8  0012               	return	
 13946  018BAA                     l2373:
 13947  018BAA                     l16149:
 13948                           
 13949                           ; BSR set to: 1
 13950                           ;dans.c: 235: else
 13951                           ;dans.c: 236: return 0;
 13952  018BAA  0E00               	movlw	0
 13953                           
 13954                           ; BSR set to: 1
 13955  018BAC  0012               	return	
 13956  018BAE                     __end_of_isempty:
 13957                           	opt stack 0
 13958                           tosu	equ	0xFFF
 13959                           tosh	equ	0xFFE
 13960                           tosl	equ	0xFFD
 13961                           pclath	equ	0xFFA
 13962                           tblptru	equ	0xFF8
 13963                           tblptrh	equ	0xFF7
 13964                           tblptrl	equ	0xFF6
 13965                           tablat	equ	0xFF5
 13966                           prodh	equ	0xFF4
 13967                           prodl	equ	0xFF3
 13968                           intcon	equ	0xFF2
 13969                           postinc0	equ	0xFEE
 13970                           wreg	equ	0xFE8
 13971                           indf1	equ	0xFE7
 13972                           postdec1	equ	0xFE5
 13973                           fsr1h	equ	0xFE2
 13974                           fsr1l	equ	0xFE1
 13975                           indf2	equ	0xFDF
 13976                           postinc2	equ	0xFDE
 13977                           postdec2	equ	0xFDD
 13978                           plusw2	equ	0xFDB
 13979                           fsr2h	equ	0xFDA
 13980                           fsr2l	equ	0xFD9
 13981                           status	equ	0xFD8
 13982                           
 13983 ;; *************** function _Go_Backward *****************
 13984 ;; Defined at:
 13985 ;;		line 576 in file "dans.c"
 13986 ;; Parameters:    Size  Location     Type
 13987 ;;  direction       2   15[BANK1 ] int 
 13988 ;;  spd             2   17[BANK1 ] int 
 13989 ;; Auto vars:     Size  Location     Type
 13990 ;;		None
 13991 ;; Return value:  Size  Location     Type
 13992 ;;                  1    wreg      void 
 13993 ;; Registers used:
 13994 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13995 ;; Tracked objects:
 13996 ;;		On entry : 0/0
 13997 ;;		On exit  : 0/0
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14000 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14002 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14003 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14004 ;;Total ram usage:        6 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; Hardware stack levels required when called:   15
 14007 ;; This function calls:
 14008 ;;		_Travel
 14009 ;;		___wmul
 14010 ;; This function is called by:
 14011 ;;		_Navigate_Maze
 14012 ;;		_Go_Home
 14013 ;; This function uses a non-reentrant model
 14014 ;;
 14015                           
 14016                           	psect	text67
 14017  0168B2                     __ptext67:
 14018                           	opt stack 0
 14019  0168B2                     _Go_Backward:
 14020                           	opt stack 14
 14021                           
 14022                           ;dans.c: 577: if(direction == 1)
 14023                           
 14024                           ; BSR set to: 1
 14025                           ;incstack = 0
 14026  0168B2  0101               	movlb	1	; () banked
 14027  0168B4  05F7               	decf	Go_Backward@direction& (0+255),w,b
 14028  0168B6  11F8               	iorwf	(Go_Backward@direction+1)& (0+255),w,b
 14029  0168B8  A4D8               	btfss	status,2,c
 14030  0168BA  D004               	goto	l2491
 14031                           
 14032                           ; BSR set to: 1
 14033                           ;dans.c: 578: direction = 3;
 14034  0168BC  0E00               	movlw	0
 14035  0168BE  6FF8               	movwf	(Go_Backward@direction+1)& (0+255),b
 14036  0168C0  0E03               	movlw	3
 14037  0168C2  D019               	goto	L14
 14038  0168C4                     l2491:
 14039                           
 14040                           ; BSR set to: 1
 14041                           ;dans.c: 579: else if(direction == 3)
 14042                           
 14043                           ; BSR set to: 1
 14044  0168C4  0E03               	movlw	3
 14045  0168C6  19F7               	xorwf	Go_Backward@direction& (0+255),w,b
 14046  0168C8  11F8               	iorwf	(Go_Backward@direction+1)& (0+255),w,b
 14047  0168CA  A4D8               	btfss	status,2,c
 14048  0168CC  D004               	goto	l2493
 14049                           
 14050                           ; BSR set to: 1
 14051                           ;dans.c: 580: direction =1;
 14052  0168CE  0E00               	movlw	0
 14053  0168D0  6FF8               	movwf	(Go_Backward@direction+1)& (0+255),b
 14054  0168D2  0E01               	movlw	1
 14055  0168D4  D010               	goto	L14
 14056  0168D6                     l2493:
 14057                           
 14058                           ; BSR set to: 1
 14059                           ;dans.c: 582: else if(direction == 0)
 14060                           
 14061                           ; BSR set to: 1
 14062  0168D6  51F7               	movf	Go_Backward@direction& (0+255),w,b
 14063  0168D8  11F8               	iorwf	(Go_Backward@direction+1)& (0+255),w,b
 14064  0168DA  A4D8               	btfss	status,2,c
 14065  0168DC  D004               	goto	l2495
 14066                           
 14067                           ; BSR set to: 1
 14068                           ;dans.c: 583: direction = 2;
 14069  0168DE  0E00               	movlw	0
 14070  0168E0  6FF8               	movwf	(Go_Backward@direction+1)& (0+255),b
 14071  0168E2  0E02               	movlw	2
 14072  0168E4  D008               	goto	L14
 14073  0168E6                     l2495:
 14074                           
 14075                           ; BSR set to: 1
 14076                           ;dans.c: 584: else if(direction == 2)
 14077                           
 14078                           ; BSR set to: 1
 14079  0168E6  0E02               	movlw	2
 14080  0168E8  19F7               	xorwf	Go_Backward@direction& (0+255),w,b
 14081  0168EA  11F8               	iorwf	(Go_Backward@direction+1)& (0+255),w,b
 14082  0168EC  A4D8               	btfss	status,2,c
 14083  0168EE  D004               	goto	l2497
 14084                           
 14085                           ; BSR set to: 1
 14086                           ;dans.c: 585: direction = 0;
 14087  0168F0  0E00               	movlw	0
 14088  0168F2  6FF8               	movwf	(Go_Backward@direction+1)& (0+255),b
 14089  0168F4  0E00               	movlw	0
 14090  0168F6                     L14:
 14091  0168F6  6FF7               	movwf	Go_Backward@direction& (0+255),b
 14092  0168F8                     l2497:
 14093                           
 14094                           ; BSR set to: 1
 14095                           ;dans.c: 587: Travel(direction, 970, 0, spd, 0);
 14096                           
 14097                           ; BSR set to: 1
 14098                           
 14099                           ; BSR set to: 1
 14100                           
 14101                           ; BSR set to: 1
 14102                           
 14103                           ; BSR set to: 1
 14104  0168F8  C1F7  F0F1         	movff	Go_Backward@direction,Travel@direction
 14105  0168FC  C1F8  F0F2         	movff	Go_Backward@direction+1,Travel@direction+1
 14106  016900  0E03               	movlw	3
 14107  016902  0100               	movlb	0	; () banked
 14108  016904  6FF4               	movwf	(Travel@Dist+1)& (0+255),b
 14109  016906  0ECA               	movlw	202
 14110  016908  6FF3               	movwf	Travel@Dist& (0+255),b
 14111  01690A  0E00               	movlw	0
 14112  01690C  6FF6               	movwf	(Travel@Test_ADC+1)& (0+255),b
 14113  01690E  0E00               	movlw	0
 14114  016910  6FF5               	movwf	Travel@Test_ADC& (0+255),b
 14115  016912  C1F9  F0F7         	movff	Go_Backward@spd,Travel@Spd
 14116  016916  C1FA  F0F8         	movff	Go_Backward@spd+1,Travel@Spd+1
 14117  01691A  0E00               	movlw	0
 14118  01691C  6FFA               	movwf	(Travel@Wall+1)& (0+255),b
 14119  01691E  0E00               	movlw	0
 14120  016920  6FF9               	movwf	Travel@Wall& (0+255),b
 14121  016922  EC76  F091         	call	_Travel	;wreg free
 14122                           
 14123                           ;dans.c: 588: maze[X_Pos][Y_Pos].Options += 1;
 14124  016926  C13C  F060         	movff	_X_Pos,___wmul@multiplier
 14125  01692A  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
 14126  01692E  0E00               	movlw	0
 14127  016930  0100               	movlb	0	; () banked
 14128  016932  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14129  016934  0E32               	movlw	50
 14130  016936  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14131  016938  EC33  F0C4         	call	___wmul	;wreg free
 14132  01693C  0E00               	movlw	low _maze
 14133  01693E  0101               	movlb	1	; () banked
 14134  016940  6FFB               	movwf	??_Go_Backward& (0+255),b
 14135  016942  0E02               	movlw	high _maze
 14136  016944  6FFC               	movwf	(??_Go_Backward+1)& (0+255),b
 14137  016946  0100               	movlb	0	; () banked
 14138  016948  5160               	movf	?___wmul& (0+255),w,b
 14139  01694A  0101               	movlb	1	; () banked
 14140  01694C  27FB               	addwf	??_Go_Backward& (0+255),f,b
 14141  01694E  0100               	movlb	0	; () banked
 14142  016950  5161               	movf	(?___wmul+1)& (0+255),w,b
 14143  016952  0101               	movlb	1	; () banked
 14144  016954  23FC               	addwfc	(??_Go_Backward+1)& (0+255),f,b
 14145  016956  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
 14146  01695A  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
 14147  01695E  0E00               	movlw	0
 14148  016960  0100               	movlb	0	; () banked
 14149  016962  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14150  016964  0E0A               	movlw	10
 14151  016966  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14152  016968  EC33  F0C4         	call	___wmul	;wreg free
 14153  01696C  0100               	movlb	0	; () banked
 14154  01696E  5160               	movf	?___wmul& (0+255),w,b
 14155  016970  0101               	movlb	1	; () banked
 14156  016972  27FB               	addwf	??_Go_Backward& (0+255),f,b
 14157  016974  0100               	movlb	0	; () banked
 14158  016976  5161               	movf	(?___wmul+1)& (0+255),w,b
 14159  016978  0101               	movlb	1	; () banked
 14160  01697A  23FC               	addwfc	(??_Go_Backward+1)& (0+255),f,b
 14161  01697C  0E08               	movlw	8
 14162  01697E  25FB               	addwf	??_Go_Backward& (0+255),w,b
 14163  016980  6ED9               	movwf	fsr2l,c
 14164  016982  0E00               	movlw	0
 14165  016984  21FC               	addwfc	(??_Go_Backward+1)& (0+255),w,b
 14166  016986  6EDA               	movwf	fsr2h,c
 14167  016988  2ADE               	incf	postinc2,f,c
 14168  01698A  0E00               	movlw	0
 14169  01698C  22DD               	addwfc	postdec2,f,c
 14170                           
 14171                           ; BSR set to: 1
 14172  01698E  0012               	return		;funcret
 14173  016990                     __end_of_Go_Backward:
 14174                           	opt stack 0
 14175                           tosu	equ	0xFFF
 14176                           tosh	equ	0xFFE
 14177                           tosl	equ	0xFFD
 14178                           pclath	equ	0xFFA
 14179                           tblptru	equ	0xFF8
 14180                           tblptrh	equ	0xFF7
 14181                           tblptrl	equ	0xFF6
 14182                           tablat	equ	0xFF5
 14183                           prodh	equ	0xFF4
 14184                           prodl	equ	0xFF3
 14185                           intcon	equ	0xFF2
 14186                           postinc0	equ	0xFEE
 14187                           wreg	equ	0xFE8
 14188                           indf1	equ	0xFE7
 14189                           postdec1	equ	0xFE5
 14190                           fsr1h	equ	0xFE2
 14191                           fsr1l	equ	0xFE1
 14192                           indf2	equ	0xFDF
 14193                           postinc2	equ	0xFDE
 14194                           postdec2	equ	0xFDD
 14195                           plusw2	equ	0xFDB
 14196                           fsr2h	equ	0xFDA
 14197                           fsr2l	equ	0xFD9
 14198                           status	equ	0xFD8
 14199                           
 14200 ;; *************** function _Travel *****************
 14201 ;; Defined at:
 14202 ;;		line 347 in file "dans.c"
 14203 ;; Parameters:    Size  Location     Type
 14204 ;;  direction       2  145[BANK0 ] int 
 14205 ;;  Dist            2  147[BANK0 ] int 
 14206 ;;  Test_ADC        2  149[BANK0 ] int 
 14207 ;;  Spd             2  151[BANK0 ] int 
 14208 ;;  Wall            2  153[BANK0 ] int 
 14209 ;; Auto vars:     Size  Location     Type
 14210 ;;  rev_Dist        2    6[BANK1 ] int 
 14211 ;;  error           2   13[BANK1 ] int 
 14212 ;;  Req_Dir         2   11[BANK1 ] int 
 14213 ;;  Dist_Travell    2    9[BANK1 ] int 
 14214 ;;  spd2            2    4[BANK1 ] int 
 14215 ;;  spd1            2    2[BANK1 ] int 
 14216 ;;  Dir             2    0[BANK1 ] int 
 14217 ;;  Prev_Angle      1    8[BANK1 ] unsigned char 
 14218 ;; Return value:  Size  Location     Type
 14219 ;;                  2  145[BANK0 ] int 
 14220 ;; Registers used:
 14221 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14222 ;; Tracked objects:
 14223 ;;		On entry : 0/0
 14224 ;;		On exit  : 0/0
 14225 ;;		Unchanged: 0/0
 14226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14227 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14228 ;;      Locals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14229 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14230 ;;      Totals:         0      14      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14231 ;;Total ram usage:       29 bytes
 14232 ;; Hardware stack levels used:    1
 14233 ;; Hardware stack levels required when called:   14
 14234 ;; This function calls:
 14235 ;;		_ADCAverage
 14236 ;;		_Console_Render
 14237 ;;		_Drive
 14238 ;;		_Get_VirtualWall_State
 14239 ;;		_Move_ADC_To
 14240 ;;		_Robot_Stop
 14241 ;;		_Turn
 14242 ;;		_UpdateDistance
 14243 ;;		___wmul
 14244 ;;		_printf
 14245 ;;		_push
 14246 ;; This function is called by:
 14247 ;;		_main
 14248 ;;		_Go_Backward
 14249 ;;		_Navigate_Maze
 14250 ;; This function uses a non-reentrant model
 14251 ;;
 14252                           
 14253                           	psect	text68
 14254  0122EC                     __ptext68:
 14255                           	opt stack 0
 14256  0122EC                     _Travel:
 14257                           	opt stack 16
 14258                           
 14259                           ;dans.c: 348: int Dist_Travelled = 0;
 14260                           
 14261                           ; BSR set to: 1
 14262                           ;incstack = 0
 14263  0122EC  0E00               	movlw	0
 14264  0122EE  0101               	movlb	1	; () banked
 14265  0122F0  6FF2               	movwf	(Travel@Dist_Travelled+1)& (0+255),b
 14266  0122F2  0E00               	movlw	0
 14267  0122F4  6FF1               	movwf	Travel@Dist_Travelled& (0+255),b
 14268                           
 14269                           ;dans.c: 349: int Req_Dir = 0;
 14270  0122F6  0E00               	movlw	0
 14271  0122F8  6FF4               	movwf	(Travel@Req_Dir+1)& (0+255),b
 14272  0122FA  0E00               	movlw	0
 14273  0122FC  6FF3               	movwf	Travel@Req_Dir& (0+255),b
 14274                           
 14275                           ; BSR set to: 1
 14276                           ;dans.c: 350: int Dir;
 14277                           ;dans.c: 351: bool Prev_Angle;
 14278                           ;dans.c: 352: if (Wall == 0 && flag == 0){
 14279  0122FE  0100               	movlb	0	; () banked
 14280  012300  51F9               	movf	Travel@Wall& (0+255),w,b
 14281  012302  11FA               	iorwf	(Travel@Wall+1)& (0+255),w,b
 14282  012304  A4D8               	btfss	status,2,c
 14283  012306  D004               	goto	l2419
 14284                           
 14285                           ; BSR set to: 0
 14286  012308  502C               	movf	_flag,w,c
 14287  01230A  102D               	iorwf	_flag+1,w,c
 14288  01230C  B4D8               	btfsc	status,2,c
 14289  01230E  D014               	goto	l2422
 14290  012310                     l2419:
 14291                           
 14292                           ;dans.c: 359: else if (Wall == 0 && flag != 0){
 14293                           
 14294                           ; BSR set to: 1
 14295  012310  0100               	movlb	0	; () banked
 14296  012312  51F9               	movf	Travel@Wall& (0+255),w,b
 14297  012314  11FA               	iorwf	(Travel@Wall+1)& (0+255),w,b
 14298  012316  A4D8               	btfss	status,2,c
 14299  012318  D012               	goto	l2421
 14300                           
 14301                           ; BSR set to: 0
 14302  01231A  502C               	movf	_flag,w,c
 14303  01231C  102D               	iorwf	_flag+1,w,c
 14304  01231E  B4D8               	btfsc	status,2,c
 14305  012320  D00E               	goto	l2421
 14306                           
 14307                           ; BSR set to: 0
 14308                           ;dans.c: 360: if (Prev_Angle != 0)
 14309  012322  0101               	movlb	1	; () banked
 14310  012324  51F0               	movf	Travel@Prev_Angle& (0+255),w,b
 14311  012326  B4D8               	btfsc	status,2,c
 14312  012328  D007               	goto	l2422
 14313                           
 14314                           ; BSR set to: 1
 14315                           ;dans.c: 361: Move_ADC_To(-90);
 14316  01232A  0EFF               	movlw	255
 14317  01232C  0100               	movlb	0	; () banked
 14318  01232E  6FAA               	movwf	(Move_ADC_To@Angle+1)& (0+255),b
 14319  012330  0EA6               	movlw	166
 14320  012332  6FA9               	movwf	Move_ADC_To@Angle& (0+255),b
 14321  012334  EC2B  F0AC         	call	_Move_ADC_To	;wreg free
 14322  012338                     l2422:
 14323                           
 14324                           ;dans.c: 362: Prev_Angle = 0;
 14325  012338  0E00               	movlw	0
 14326  01233A  0101               	movlb	1	; () banked
 14327  01233C  6FF0               	movwf	Travel@Prev_Angle& (0+255),b
 14328  01233E                     l2421:
 14329                           
 14330                           ;dans.c: 363: }
 14331                           ;dans.c: 365: if (Wall == 1 && flag != 0){
 14332                           
 14333                           ; BSR set to: 1
 14334                           
 14335                           ; BSR set to: 1
 14336  01233E  0100               	movlb	0	; () banked
 14337  012340  05F9               	decf	Travel@Wall& (0+255),w,b
 14338  012342  11FA               	iorwf	(Travel@Wall+1)& (0+255),w,b
 14339  012344  A4D8               	btfss	status,2,c
 14340  012346  D012               	goto	l2423
 14341                           
 14342                           ; BSR set to: 0
 14343  012348  502C               	movf	_flag,w,c
 14344  01234A  102D               	iorwf	_flag+1,w,c
 14345  01234C  B4D8               	btfsc	status,2,c
 14346  01234E  D00E               	goto	l2423
 14347                           
 14348                           ; BSR set to: 0
 14349                           ;dans.c: 366: if (Prev_Angle != 1)
 14350  012350  0101               	movlb	1	; () banked
 14351  012352  05F0               	decf	Travel@Prev_Angle& (0+255),w,b
 14352  012354  B4D8               	btfsc	status,2,c
 14353  012356  D007               	goto	l2424
 14354                           
 14355                           ; BSR set to: 1
 14356                           ;dans.c: 367: Move_ADC_To(90);
 14357  012358  0E00               	movlw	0
 14358  01235A  0100               	movlb	0	; () banked
 14359  01235C  6FAA               	movwf	(Move_ADC_To@Angle+1)& (0+255),b
 14360  01235E  0E5A               	movlw	90
 14361  012360  6FA9               	movwf	Move_ADC_To@Angle& (0+255),b
 14362  012362  EC2B  F0AC         	call	_Move_ADC_To	;wreg free
 14363  012366                     l2424:
 14364                           
 14365                           ;dans.c: 368: Prev_Angle = 1;
 14366  012366  0E01               	movlw	1
 14367  012368  0101               	movlb	1	; () banked
 14368  01236A  6FF0               	movwf	Travel@Prev_Angle& (0+255),b
 14369  01236C                     l2423:
 14370                           
 14371                           ;dans.c: 369: }
 14372                           ;dans.c: 371: if(direction == Current_Direction){
 14373                           
 14374                           ; BSR set to: 1
 14375  01236C  0101               	movlb	1	; () banked
 14376  01236E  51E2               	movf	_Current_Direction& (0+255),w,b
 14377  012370  0100               	movlb	0	; () banked
 14378  012372  19F1               	xorwf	Travel@direction& (0+255),w,b
 14379  012374  E106               	bnz	l16005
 14380  012376  0101               	movlb	1	; () banked
 14381  012378  51E3               	movf	(_Current_Direction+1)& (0+255),w,b
 14382  01237A  0100               	movlb	0	; () banked
 14383  01237C  19F2               	xorwf	(Travel@direction+1)& (0+255),w,b
 14384  01237E  B4D8               	btfsc	status,2,c
 14385  012380  D092               	goto	l2426
 14386  012382                     l16005:
 14387                           
 14388                           ; BSR set to: 0
 14389                           ;dans.c: 374: else {
 14390                           ;dans.c: 375: Req_Dir = direction - Current_Direction;
 14391  012382  C1E2  F0FB         	movff	_Current_Direction,??_Travel
 14392  012386  C1E3  F0FC         	movff	_Current_Direction+1,??_Travel+1
 14393  01238A  1FFB               	comf	??_Travel& (0+255),f,b
 14394  01238C  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 14395  01238E  4BFB               	infsnz	??_Travel& (0+255),f,b
 14396  012390  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 14397  012392  51F1               	movf	Travel@direction& (0+255),w,b
 14398  012394  25FB               	addwf	??_Travel& (0+255),w,b
 14399  012396  0101               	movlb	1	; () banked
 14400  012398  6FF3               	movwf	Travel@Req_Dir& (0+255),b
 14401  01239A  0100               	movlb	0	; () banked
 14402  01239C  51F2               	movf	(Travel@direction+1)& (0+255),w,b
 14403  01239E  21FC               	addwfc	(??_Travel+1)& (0+255),w,b
 14404  0123A0  0101               	movlb	1	; () banked
 14405  0123A2  6FF4               	movwf	(Travel@Req_Dir+1)& (0+255),b
 14406                           
 14407                           ;dans.c: 377: if (Req_Dir < 0){
 14408  0123A4  AFF4               	btfss	(Travel@Req_Dir+1)& (0+255),7,b
 14409  0123A6  D03A               	goto	l2427
 14410                           
 14411                           ; BSR set to: 1
 14412                           ;dans.c: 378: Req_Dir = 83*Req_Dir*-1;
 14413  0123A8  C1F3  F0FB         	movff	Travel@Req_Dir,??_Travel
 14414  0123AC  C1F4  F0FC         	movff	Travel@Req_Dir+1,??_Travel+1
 14415  0123B0  0100               	movlb	0	; () banked
 14416  0123B2  1FFB               	comf	??_Travel& (0+255),f,b
 14417  0123B4  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 14418  0123B6  4BFB               	infsnz	??_Travel& (0+255),f,b
 14419  0123B8  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 14420  0123BA  C0FB  F060         	movff	??_Travel,___wmul@multiplier
 14421  0123BE  C0FC  F061         	movff	??_Travel+1,___wmul@multiplier+1
 14422  0123C2  0E00               	movlw	0
 14423  0123C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14424  0123C6  0E53               	movlw	83
 14425  0123C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14426  0123CA  EC33  F0C4         	call	___wmul	;wreg free
 14427  0123CE  C060  F1F3         	movff	?___wmul,Travel@Req_Dir
 14428  0123D2  C061  F1F4         	movff	?___wmul+1,Travel@Req_Dir+1
 14429                           
 14430                           ;dans.c: 379: Dir = 1;
 14431  0123D6  0E00               	movlw	0
 14432  0123D8  0101               	movlb	1	; () banked
 14433  0123DA  6FE9               	movwf	(Travel@Dir+1)& (0+255),b
 14434  0123DC  0E01               	movlw	1
 14435  0123DE  6FE8               	movwf	Travel@Dir& (0+255),b
 14436                           
 14437                           ; BSR set to: 1
 14438                           ;dans.c: 380: if(Req_Dir > 166){
 14439  0123E0  BFF4               	btfsc	(Travel@Req_Dir+1)& (0+255),7,b
 14440  0123E2  D04E               	goto	l2430
 14441  0123E4  51F4               	movf	(Travel@Req_Dir+1)& (0+255),w,b
 14442  0123E6  E104               	bnz	u13270
 14443  0123E8  0EA7               	movlw	167
 14444  0123EA  5DF3               	subwf	Travel@Req_Dir& (0+255),w,b
 14445  0123EC  A0D8               	btfss	status,0,c
 14446  0123EE  D048               	goto	l2430
 14447  0123F0                     u13270:
 14448                           
 14449                           ; BSR set to: 1
 14450                           ;dans.c: 381: Req_Dir = 332 - Req_Dir;
 14451  0123F0  C1F3  F0FB         	movff	Travel@Req_Dir,??_Travel
 14452  0123F4  C1F4  F0FC         	movff	Travel@Req_Dir+1,??_Travel+1
 14453  0123F8  0100               	movlb	0	; () banked
 14454  0123FA  1FFB               	comf	??_Travel& (0+255),f,b
 14455  0123FC  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 14456  0123FE  4BFB               	infsnz	??_Travel& (0+255),f,b
 14457  012400  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 14458  012402  0E4C               	movlw	76
 14459  012404  25FB               	addwf	??_Travel& (0+255),w,b
 14460  012406  0101               	movlb	1	; () banked
 14461  012408  6FF3               	movwf	Travel@Req_Dir& (0+255),b
 14462  01240A  0E01               	movlw	1
 14463  01240C  0100               	movlb	0	; () banked
 14464  01240E  21FC               	addwfc	(??_Travel+1)& (0+255),w,b
 14465  012410  0101               	movlb	1	; () banked
 14466  012412  6FF4               	movwf	(Travel@Req_Dir+1)& (0+255),b
 14467                           
 14468                           ; BSR set to: 1
 14469                           ;dans.c: 382: Dir = 0;
 14470  012414  0E00               	movlw	0
 14471  012416  6FE9               	movwf	(Travel@Dir+1)& (0+255),b
 14472  012418  0E00               	movlw	0
 14473  01241A  D031               	goto	L15
 14474  01241C                     l2427:
 14475                           
 14476                           ; BSR set to: 1
 14477                           ;dans.c: 385: else{
 14478                           ;dans.c: 386: Req_Dir = 83*Req_Dir;
 14479                           
 14480                           ; BSR set to: 1
 14481  01241C  C1F3  F060         	movff	Travel@Req_Dir,___wmul@multiplier
 14482  012420  C1F4  F061         	movff	Travel@Req_Dir+1,___wmul@multiplier+1
 14483  012424  0E00               	movlw	0
 14484  012426  0100               	movlb	0	; () banked
 14485  012428  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14486  01242A  0E53               	movlw	83
 14487  01242C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14488  01242E  EC33  F0C4         	call	___wmul	;wreg free
 14489  012432  C060  F1F3         	movff	?___wmul,Travel@Req_Dir
 14490  012436  C061  F1F4         	movff	?___wmul+1,Travel@Req_Dir+1
 14491                           
 14492                           ;dans.c: 387: Dir = 0;
 14493  01243A  0E00               	movlw	0
 14494  01243C  0101               	movlb	1	; () banked
 14495  01243E  6FE9               	movwf	(Travel@Dir+1)& (0+255),b
 14496  012440  0E00               	movlw	0
 14497  012442  6FE8               	movwf	Travel@Dir& (0+255),b
 14498                           
 14499                           ; BSR set to: 1
 14500                           ;dans.c: 388: if(Req_Dir > 166){
 14501  012444  BFF4               	btfsc	(Travel@Req_Dir+1)& (0+255),7,b
 14502  012446  D01C               	goto	l2430
 14503  012448  51F4               	movf	(Travel@Req_Dir+1)& (0+255),w,b
 14504  01244A  E104               	bnz	u13280
 14505  01244C  0EA7               	movlw	167
 14506  01244E  5DF3               	subwf	Travel@Req_Dir& (0+255),w,b
 14507  012450  A0D8               	btfss	status,0,c
 14508  012452  D016               	goto	l2430
 14509  012454                     u13280:
 14510                           
 14511                           ; BSR set to: 1
 14512                           ;dans.c: 389: Req_Dir = 332 - Req_Dir;
 14513  012454  C1F3  F0FB         	movff	Travel@Req_Dir,??_Travel
 14514  012458  C1F4  F0FC         	movff	Travel@Req_Dir+1,??_Travel+1
 14515  01245C  0100               	movlb	0	; () banked
 14516  01245E  1FFB               	comf	??_Travel& (0+255),f,b
 14517  012460  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 14518  012462  4BFB               	infsnz	??_Travel& (0+255),f,b
 14519  012464  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 14520  012466  0E4C               	movlw	76
 14521  012468  25FB               	addwf	??_Travel& (0+255),w,b
 14522  01246A  0101               	movlb	1	; () banked
 14523  01246C  6FF3               	movwf	Travel@Req_Dir& (0+255),b
 14524  01246E  0E01               	movlw	1
 14525  012470  0100               	movlb	0	; () banked
 14526  012472  21FC               	addwfc	(??_Travel+1)& (0+255),w,b
 14527  012474  0101               	movlb	1	; () banked
 14528  012476  6FF4               	movwf	(Travel@Req_Dir+1)& (0+255),b
 14529                           
 14530                           ; BSR set to: 1
 14531                           ;dans.c: 390: Dir = 1;
 14532  012478  0E00               	movlw	0
 14533  01247A  6FE9               	movwf	(Travel@Dir+1)& (0+255),b
 14534  01247C  0E01               	movlw	1
 14535  01247E                     L15:
 14536  01247E  6FE8               	movwf	Travel@Dir& (0+255),b
 14537  012480                     l2430:
 14538                           
 14539                           ; BSR set to: 1
 14540                           ;dans.c: 391: }
 14541                           ;dans.c: 392: }
 14542                           ;dans.c: 393: Turn(Req_Dir, 200, Dir);
 14543                           
 14544                           ; BSR set to: 1
 14545                           
 14546                           ; BSR set to: 1
 14547  012480  C1F3  F061         	movff	Travel@Req_Dir,Turn@Angle
 14548  012484  C1F4  F062         	movff	Travel@Req_Dir+1,Turn@Angle+1
 14549  012488  0E00               	movlw	0
 14550  01248A  0100               	movlb	0	; () banked
 14551  01248C  6F64               	movwf	(Turn@Speed+1)& (0+255),b
 14552  01248E  0EC8               	movlw	200
 14553  012490  6F63               	movwf	Turn@Speed& (0+255),b
 14554  012492  C1E8  F065         	movff	Travel@Dir,Turn@Dir
 14555  012496  C1E9  F066         	movff	Travel@Dir+1,Turn@Dir+1
 14556  01249A  EC97  F0BB         	call	_Turn	;wreg free
 14557                           
 14558                           ;dans.c: 394: Current_Direction = direction;
 14559  01249E  C0F1  F1E2         	movff	Travel@direction,_Current_Direction
 14560  0124A2  C0F2  F1E3         	movff	Travel@direction+1,_Current_Direction+1
 14561  0124A6                     l2426:
 14562                           
 14563                           ;dans.c: 395: }
 14564                           ;dans.c: 397: Drive(Spd,Spd);
 14565  0124A6  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
 14566  0124AA  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
 14567  0124AE  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
 14568  0124B2  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
 14569  0124B6  ECE4  F0C0         	call	_Drive	;wreg free
 14570                           
 14571                           ;dans.c: 400: ADCAverage();
 14572  0124BA  EC1C  F09E         	call	_ADCAverage	;wreg free
 14573                           
 14574                           ;dans.c: 402: k = 4;
 14575  0124BE  0E00               	movlw	0
 14576  0124C0  0101               	movlb	1	; () banked
 14577  0124C2  6F39               	movwf	(_k+1)& (0+255),b
 14578  0124C4  0E04               	movlw	4
 14579  0124C6  6F38               	movwf	_k& (0+255),b
 14580                           
 14581                           ; BSR set to: 1
 14582                           ;dans.c: 403: int error;
 14583                           ;dans.c: 404: int spd1 =0 ;
 14584  0124C8  0E00               	movlw	0
 14585  0124CA  6FEB               	movwf	(Travel@spd1+1)& (0+255),b
 14586  0124CC  0E00               	movlw	0
 14587  0124CE  6FEA               	movwf	Travel@spd1& (0+255),b
 14588                           
 14589                           ; BSR set to: 1
 14590                           ;dans.c: 405: int spd2=0;
 14591  0124D0  0E00               	movlw	0
 14592  0124D2  6FED               	movwf	(Travel@spd2+1)& (0+255),b
 14593  0124D4  0E00               	movlw	0
 14594  0124D6  6FEC               	movwf	Travel@spd2& (0+255),b
 14595                           
 14596                           ;dans.c: 407: while (Dist_Travelled<Dist){
 14597  0124D8  D1A3               	goto	l2452
 14598  0124DA                     
 14599                           ;dans.c: 410: ADCAverage();
 14600                           
 14601                           ; BSR set to: 1
 14602  0124DA  EC1C  F09E         	call	_ADCAverage	;wreg free
 14603                           
 14604                           ;dans.c: 411: error = Desired_Level - average;
 14605  0124DE  C02E  F0FB         	movff	_average,??_Travel
 14606  0124E2  C02F  F0FC         	movff	_average+1,??_Travel+1
 14607  0124E6  0100               	movlb	0	; () banked
 14608  0124E8  1FFB               	comf	??_Travel& (0+255),f,b
 14609  0124EA  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 14610  0124EC  4BFB               	infsnz	??_Travel& (0+255),f,b
 14611  0124EE  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 14612  0124F0  0101               	movlb	1	; () banked
 14613  0124F2  51DA               	movf	_Desired_Level& (0+255),w,b
 14614  0124F4  0100               	movlb	0	; () banked
 14615  0124F6  25FB               	addwf	??_Travel& (0+255),w,b
 14616  0124F8  0101               	movlb	1	; () banked
 14617  0124FA  6FF5               	movwf	Travel@error& (0+255),b
 14618  0124FC  51DB               	movf	(_Desired_Level+1)& (0+255),w,b
 14619  0124FE  0100               	movlb	0	; () banked
 14620  012500  21FC               	addwfc	(??_Travel+1)& (0+255),w,b
 14621  012502  0101               	movlb	1	; () banked
 14622  012504  6FF6               	movwf	(Travel@error+1)& (0+255),b
 14623                           
 14624                           ; BSR set to: 1
 14625                           ;dans.c: 412: error*=k;
 14626  012506  C1F5  F060         	movff	Travel@error,___wmul@multiplier
 14627  01250A  C1F6  F061         	movff	Travel@error+1,___wmul@multiplier+1
 14628  01250E  C138  F062         	movff	_k,___wmul@multiplicand
 14629  012512  C139  F063         	movff	_k+1,___wmul@multiplicand+1
 14630  012516  EC33  F0C4         	call	___wmul	;wreg free
 14631  01251A  C060  F1F5         	movff	?___wmul,Travel@error
 14632  01251E  C061  F1F6         	movff	?___wmul+1,Travel@error+1
 14633                           
 14634                           ;dans.c: 414: if (average<= 90){
 14635  012522  BE2F               	btfsc	_average+1,7,c
 14636  012524  D006               	goto	u13290
 14637  012526  502F               	movf	_average+1,w,c
 14638  012528  E103               	bnz	u13291
 14639  01252A  0E5B               	movlw	91
 14640  01252C  5C2E               	subwf	_average,w,c
 14641  01252E  B0D8               	btfsc	status,0,c
 14642  012530                     u13291:
 14643  012530  D0C2               	goto	l2433
 14644  012532                     u13290:
 14645                           
 14646                           ;dans.c: 416: if (error > 300){
 14647  012532  0101               	movlb	1	; () banked
 14648  012534  BFF6               	btfsc	(Travel@error+1)& (0+255),7,b
 14649  012536  D00A               	goto	l2434
 14650  012538  0E2D               	movlw	45
 14651  01253A  5DF5               	subwf	Travel@error& (0+255),w,b
 14652  01253C  0E01               	movlw	1
 14653  01253E  59F6               	subwfb	(Travel@error+1)& (0+255),w,b
 14654  012540  A0D8               	btfss	status,0,c
 14655  012542  D004               	goto	l2434
 14656                           
 14657                           ; BSR set to: 1
 14658                           ;dans.c: 417: error=30;
 14659  012544  0E00               	movlw	0
 14660  012546  6FF6               	movwf	(Travel@error+1)& (0+255),b
 14661  012548  0E1E               	movlw	30
 14662  01254A  6FF5               	movwf	Travel@error& (0+255),b
 14663  01254C                     l2434:
 14664                           
 14665                           ; BSR set to: 1
 14666                           ;dans.c: 418: }
 14667                           ;dans.c: 419: if (error < -30){
 14668                           
 14669                           ; BSR set to: 1
 14670  01254C  AFF6               	btfss	(Travel@error+1)& (0+255),7,b
 14671  01254E  D00A               	goto	l2435
 14672  012550  0EE2               	movlw	226
 14673  012552  5DF5               	subwf	Travel@error& (0+255),w,b
 14674  012554  0EFF               	movlw	255
 14675  012556  59F6               	subwfb	(Travel@error+1)& (0+255),w,b
 14676  012558  B0D8               	btfsc	status,0,c
 14677  01255A  D004               	goto	l2435
 14678                           
 14679                           ; BSR set to: 1
 14680                           ;dans.c: 420: error = -30;
 14681  01255C  0EFF               	movlw	255
 14682  01255E  6FF6               	movwf	(Travel@error+1)& (0+255),b
 14683  012560  0EE2               	movlw	226
 14684  012562  6FF5               	movwf	Travel@error& (0+255),b
 14685  012564                     l2435:
 14686                           
 14687                           ; BSR set to: 1
 14688                           ;dans.c: 421: }
 14689                           ;dans.c: 422: if (error == Desired_Level + 4 || error == Desired_Level - 4){
 14690                           
 14691                           ; BSR set to: 1
 14692  012564  0E04               	movlw	4
 14693  012566  25DA               	addwf	_Desired_Level& (0+255),w,b
 14694  012568  0100               	movlb	0	; () banked
 14695  01256A  6FFB               	movwf	??_Travel& (0+255),b
 14696  01256C  0E00               	movlw	0
 14697  01256E  0101               	movlb	1	; () banked
 14698  012570  21DB               	addwfc	(_Desired_Level+1)& (0+255),w,b
 14699  012572  0100               	movlb	0	; () banked
 14700  012574  6FFC               	movwf	(??_Travel+1)& (0+255),b
 14701  012576  0101               	movlb	1	; () banked
 14702  012578  51F5               	movf	Travel@error& (0+255),w,b
 14703  01257A  0100               	movlb	0	; () banked
 14704  01257C  19FB               	xorwf	??_Travel& (0+255),w,b
 14705  01257E  E106               	bnz	u13320
 14706  012580  0101               	movlb	1	; () banked
 14707  012582  51F6               	movf	(Travel@error+1)& (0+255),w,b
 14708  012584  0100               	movlb	0	; () banked
 14709  012586  19FC               	xorwf	(??_Travel+1)& (0+255),w,b
 14710  012588  B4D8               	btfsc	status,2,c
 14711  01258A  D017               	goto	u13330
 14712  01258C                     u13320:
 14713                           
 14714                           ; BSR set to: 0
 14715  01258C  0EFC               	movlw	252
 14716  01258E  6FFB               	movwf	??_Travel& (0+255),b
 14717  012590  0EFF               	movlw	255
 14718  012592  6FFC               	movwf	(??_Travel+1)& (0+255),b
 14719  012594  C1DA  F0FD         	movff	_Desired_Level,??_Travel+2
 14720  012598  C1DB  F0FE         	movff	_Desired_Level+1,??_Travel+3
 14721  01259C  51FB               	movf	??_Travel& (0+255),w,b
 14722  01259E  27FD               	addwf	(??_Travel+2)& (0+255),f,b
 14723  0125A0  51FC               	movf	(??_Travel+1)& (0+255),w,b
 14724  0125A2  23FE               	addwfc	(??_Travel+3)& (0+255),f,b
 14725  0125A4  0101               	movlb	1	; () banked
 14726  0125A6  51F5               	movf	Travel@error& (0+255),w,b
 14727  0125A8  0100               	movlb	0	; () banked
 14728  0125AA  19FD               	xorwf	(??_Travel+2)& (0+255),w,b
 14729  0125AC  E110               	bnz	l16063
 14730  0125AE  0101               	movlb	1	; () banked
 14731  0125B0  51F6               	movf	(Travel@error+1)& (0+255),w,b
 14732  0125B2  0100               	movlb	0	; () banked
 14733  0125B4  19FE               	xorwf	(??_Travel+3)& (0+255),w,b
 14734  0125B6  A4D8               	btfss	status,2,c
 14735  0125B8  D00A               	goto	l2436
 14736  0125BA                     u13330:
 14737                           
 14738                           ; BSR set to: 0
 14739                           ;dans.c: 423: Drive(Spd,Spd);
 14740                           
 14741                           ; BSR set to: 0
 14742  0125BA  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
 14743  0125BE  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
 14744  0125C2  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
 14745  0125C6  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
 14746  0125CA  ECE4  F0C0         	call	_Drive	;wreg free
 14747  0125CE                     l2436:
 14748  0125CE                     l16063:
 14749                           
 14750                           ;dans.c: 424: }
 14751                           ;dans.c: 425: if (error >= 0){
 14752  0125CE  0101               	movlb	1	; () banked
 14753  0125D0  BFF6               	btfsc	(Travel@error+1)& (0+255),7,b
 14754  0125D2  D031               	goto	l2442
 14755                           
 14756                           ; BSR set to: 1
 14757                           ;dans.c: 427: spd1 = Spd - error;
 14758  0125D4  C1F5  F0FB         	movff	Travel@error,??_Travel
 14759  0125D8  C1F6  F0FC         	movff	Travel@error+1,??_Travel+1
 14760  0125DC  0100               	movlb	0	; () banked
 14761  0125DE  1FFB               	comf	??_Travel& (0+255),f,b
 14762  0125E0  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 14763  0125E2  4BFB               	infsnz	??_Travel& (0+255),f,b
 14764  0125E4  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 14765  0125E6  51F7               	movf	Travel@Spd& (0+255),w,b
 14766  0125E8  25FB               	addwf	??_Travel& (0+255),w,b
 14767  0125EA  0101               	movlb	1	; () banked
 14768  0125EC  6FEA               	movwf	Travel@spd1& (0+255),b
 14769  0125EE  0100               	movlb	0	; () banked
 14770  0125F0  51F8               	movf	(Travel@Spd+1)& (0+255),w,b
 14771  0125F2  21FC               	addwfc	(??_Travel+1)& (0+255),w,b
 14772  0125F4  0101               	movlb	1	; () banked
 14773  0125F6  6FEB               	movwf	(Travel@spd1+1)& (0+255),b
 14774                           
 14775                           ;dans.c: 428: if (Wall ==0){
 14776  0125F8  0100               	movlb	0	; () banked
 14777  0125FA  51F9               	movf	Travel@Wall& (0+255),w,b
 14778  0125FC  11FA               	iorwf	(Travel@Wall+1)& (0+255),w,b
 14779  0125FE  A4D8               	btfss	status,2,c
 14780  012600  D00B               	goto	l2440
 14781                           
 14782                           ; BSR set to: 0
 14783                           ;dans.c: 429: Drive(spd1,Spd);
 14784  012602  C1EA  F061         	movff	Travel@spd1,Drive@SpeedL
 14785  012606  C1EB  F062         	movff	Travel@spd1+1,Drive@SpeedL+1
 14786  01260A  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
 14787  01260E  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
 14788  012612  ECE4  F0C0         	call	_Drive	;wreg free
 14789                           
 14790                           ;dans.c: 430: }
 14791  012616  D00F               	goto	l2442
 14792  012618                     l2440:
 14793                           
 14794                           ;dans.c: 431: else if (Wall == 1){
 14795  012618  0100               	movlb	0	; () banked
 14796  01261A  05F9               	decf	Travel@Wall& (0+255),w,b
 14797  01261C  11FA               	iorwf	(Travel@Wall+1)& (0+255),w,b
 14798  01261E  A4D8               	btfss	status,2,c
 14799  012620  D00A               	goto	l2442
 14800                           
 14801                           ; BSR set to: 0
 14802                           ;dans.c: 432: Drive(Spd,spd1);
 14803  012622  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
 14804  012626  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
 14805  01262A  C1EA  F063         	movff	Travel@spd1,Drive@SpeedR
 14806  01262E  C1EB  F064         	movff	Travel@spd1+1,Drive@SpeedR+1
 14807  012632  ECE4  F0C0         	call	_Drive	;wreg free
 14808  012636                     l2442:
 14809                           
 14810                           ;dans.c: 433: }
 14811                           ;dans.c: 435: }
 14812                           ;dans.c: 436: if (error <= 0){
 14813  012636  0101               	movlb	1	; () banked
 14814  012638  BFF6               	btfsc	(Travel@error+1)& (0+255),7,b
 14815  01263A  D005               	goto	u13370
 14816  01263C  51F6               	movf	(Travel@error+1)& (0+255),w,b
 14817  01263E  E145               	bnz	l2451
 14818  012640  05F5               	decf	Travel@error& (0+255),w,b
 14819  012642  B0D8               	btfsc	status,0,c
 14820  012644  D042               	goto	l2451
 14821  012646                     u13370:
 14822                           
 14823                           ; BSR set to: 1
 14824                           ;dans.c: 437: error=((error<0)?-error:error);
 14825  012646  AFF6               	btfss	(Travel@error+1)& (0+255),7,b
 14826  012648  D004               	goto	l2447
 14827                           
 14828                           ; BSR set to: 1
 14829                           
 14830                           ; BSR set to: 1
 14831                           
 14832                           ; BSR set to: 1
 14833  01264A  6DF5               	negf	Travel@error& (0+255),b
 14834  01264C  1FF6               	comf	(Travel@error+1)& (0+255),f,b
 14835  01264E  B0D8               	btfsc	status,0,c
 14836  012650  2BF6               	incf	(Travel@error+1)& (0+255),f,b
 14837  012652                     l2447:
 14838                           
 14839                           ; BSR set to: 1
 14840                           ;dans.c: 438: spd2= Spd - error;
 14841                           
 14842                           ; BSR set to: 1
 14843  012652  C1F5  F0FB         	movff	Travel@error,??_Travel
 14844  012656  C1F6  F0FC         	movff	Travel@error+1,??_Travel+1
 14845  01265A  0100               	movlb	0	; () banked
 14846  01265C  1FFB               	comf	??_Travel& (0+255),f,b
 14847  01265E  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 14848  012660  4BFB               	infsnz	??_Travel& (0+255),f,b
 14849  012662  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 14850  012664  51F7               	movf	Travel@Spd& (0+255),w,b
 14851  012666  25FB               	addwf	??_Travel& (0+255),w,b
 14852  012668  0101               	movlb	1	; () banked
 14853  01266A  6FEC               	movwf	Travel@spd2& (0+255),b
 14854  01266C  0100               	movlb	0	; () banked
 14855  01266E  51F8               	movf	(Travel@Spd+1)& (0+255),w,b
 14856  012670  21FC               	addwfc	(??_Travel+1)& (0+255),w,b
 14857  012672  0101               	movlb	1	; () banked
 14858  012674  6FED               	movwf	(Travel@spd2+1)& (0+255),b
 14859                           
 14860                           ; BSR set to: 1
 14861                           ;dans.c: 440: if (Wall == 0){
 14862  012676  0100               	movlb	0	; () banked
 14863  012678  51F9               	movf	Travel@Wall& (0+255),w,b
 14864  01267A  11FA               	iorwf	(Travel@Wall+1)& (0+255),w,b
 14865  01267C  A4D8               	btfss	status,2,c
 14866  01267E  D00B               	goto	l2448
 14867                           
 14868                           ; BSR set to: 0
 14869                           ;dans.c: 441: Drive(Spd,spd2);
 14870  012680  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
 14871  012684  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
 14872  012688  C1EC  F063         	movff	Travel@spd2,Drive@SpeedR
 14873  01268C  C1ED  F064         	movff	Travel@spd2+1,Drive@SpeedR+1
 14874  012690  ECE4  F0C0         	call	_Drive	;wreg free
 14875                           
 14876                           ;dans.c: 442: }
 14877  012694  D01A               	goto	l2451
 14878  012696                     l2448:
 14879                           
 14880                           ;dans.c: 443: else if (Wall == 1){
 14881  012696  0100               	movlb	0	; () banked
 14882  012698  05F9               	decf	Travel@Wall& (0+255),w,b
 14883  01269A  11FA               	iorwf	(Travel@Wall+1)& (0+255),w,b
 14884  01269C  A4D8               	btfss	status,2,c
 14885  01269E  D015               	goto	l2451
 14886                           
 14887                           ; BSR set to: 0
 14888                           ;dans.c: 444: Drive(spd2,Spd);
 14889  0126A0  C1EC  F061         	movff	Travel@spd2,Drive@SpeedL
 14890  0126A4  C1ED  F062         	movff	Travel@spd2+1,Drive@SpeedL+1
 14891  0126A8  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
 14892  0126AC  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
 14893  0126B0  ECE4  F0C0         	call	_Drive	;wreg free
 14894                           
 14895                           ;dans.c: 445: }
 14896                           ;dans.c: 446: }
 14897                           ;dans.c: 448: }
 14898  0126B4  D00A               	goto	l2451
 14899  0126B6                     l2433:
 14900                           
 14901                           ;dans.c: 449: else
 14902                           ;dans.c: 450: Drive(Spd,Spd);
 14903  0126B6  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
 14904  0126BA  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
 14905  0126BE  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
 14906  0126C2  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
 14907  0126C6  ECE4  F0C0         	call	_Drive	;wreg free
 14908  0126CA                     l2451:
 14909                           
 14910                           ;dans.c: 452: Dist_Travelled += UpdateDistance();
 14911  0126CA  ECBC  F0BD         	call	_UpdateDistance	;wreg free
 14912  0126CE  0100               	movlb	0	; () banked
 14913  0126D0  5161               	movf	?_UpdateDistance& (0+255),w,b
 14914  0126D2  0101               	movlb	1	; () banked
 14915  0126D4  27F1               	addwf	Travel@Dist_Travelled& (0+255),f,b
 14916  0126D6  0100               	movlb	0	; () banked
 14917  0126D8  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
 14918  0126DA  0101               	movlb	1	; () banked
 14919  0126DC  23F2               	addwfc	(Travel@Dist_Travelled+1)& (0+255),f,b
 14920                           
 14921                           ;dans.c: 460: if (Get_VirtualWall_State()){
 14922  0126DE  EC81  F0C4         	call	_Get_VirtualWall_State	;wreg free
 14923  0126E2  0100               	movlb	0	; () banked
 14924  0126E4  5161               	movf	?_Get_VirtualWall_State& (0+255),w,b
 14925  0126E6  1162               	iorwf	(?_Get_VirtualWall_State+1)& (0+255),w,b
 14926  0126E8  B4D8               	btfsc	status,2,c
 14927  0126EA  D09A               	goto	l2452
 14928                           
 14929                           ; BSR set to: 0
 14930                           ;dans.c: 461: maze[X_Pos][Y_Pos].walls[direction] = 1;
 14931  0126EC  C13C  F060         	movff	_X_Pos,___wmul@multiplier
 14932  0126F0  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
 14933  0126F4  0E00               	movlw	0
 14934  0126F6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14935  0126F8  0E32               	movlw	50
 14936  0126FA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14937  0126FC  EC33  F0C4         	call	___wmul	;wreg free
 14938  012700  0E04               	movlw	4
 14939  012702  0100               	movlb	0	; () banked
 14940  012704  25F1               	addwf	Travel@direction& (0+255),w,b
 14941  012706  6FFB               	movwf	??_Travel& (0+255),b
 14942  012708  0E00               	movlw	0
 14943  01270A  21F2               	addwfc	(Travel@direction+1)& (0+255),w,b
 14944  01270C  6FFC               	movwf	(??_Travel+1)& (0+255),b
 14945  01270E  0E00               	movlw	low _maze
 14946  012710  6FFD               	movwf	(??_Travel+2)& (0+255),b
 14947  012712  0E02               	movlw	high _maze
 14948  012714  6FFE               	movwf	(??_Travel+3)& (0+255),b
 14949  012716  51FB               	movf	??_Travel& (0+255),w,b
 14950  012718  27FD               	addwf	(??_Travel+2)& (0+255),f,b
 14951  01271A  51FC               	movf	(??_Travel+1)& (0+255),w,b
 14952  01271C  23FE               	addwfc	(??_Travel+3)& (0+255),f,b
 14953  01271E  5160               	movf	?___wmul& (0+255),w,b
 14954  012720  27FD               	addwf	(??_Travel+2)& (0+255),f,b
 14955  012722  5161               	movf	(?___wmul+1)& (0+255),w,b
 14956  012724  23FE               	addwfc	(??_Travel+3)& (0+255),f,b
 14957  012726  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
 14958  01272A  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
 14959  01272E  0E00               	movlw	0
 14960  012730  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14961  012732  0E0A               	movlw	10
 14962  012734  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14963  012736  EC33  F0C4         	call	___wmul	;wreg free
 14964  01273A  0100               	movlb	0	; () banked
 14965  01273C  5160               	movf	?___wmul& (0+255),w,b
 14966  01273E  25FD               	addwf	(??_Travel+2)& (0+255),w,b
 14967  012740  6ED9               	movwf	fsr2l,c
 14968  012742  5161               	movf	(?___wmul+1)& (0+255),w,b
 14969  012744  21FE               	addwfc	(??_Travel+3)& (0+255),w,b
 14970  012746  6EDA               	movwf	fsr2h,c
 14971  012748  0E01               	movlw	1
 14972  01274A  6EDF               	movwf	indf2,c
 14973                           
 14974                           ; BSR set to: 0
 14975                           ;dans.c: 463: int rev_Dist = 0;
 14976  01274C  0E00               	movlw	0
 14977  01274E  0101               	movlb	1	; () banked
 14978  012750  6FEF               	movwf	(Travel@rev_Dist+1)& (0+255),b
 14979  012752  0E00               	movlw	0
 14980  012754  6FEE               	movwf	Travel@rev_Dist& (0+255),b
 14981                           
 14982                           ; BSR set to: 1
 14983                           ;dans.c: 465: printf("WALL FOUND\n");
 14984  012756  0E80               	movlw	low STR_25
 14985  012758  0100               	movlb	0	; () banked
 14986  01275A  6F75               	movwf	printf@f& (0+255),b
 14987  01275C  0EFF               	movlw	high STR_25
 14988  01275E  6F76               	movwf	(printf@f+1)& (0+255),b
 14989  012760  EC77  F0AB         	call	_printf	;wreg free
 14990                           
 14991                           ;dans.c: 466: Console_Render();
 14992  012764  EC9B  F0A7         	call	_Console_Render	;wreg free
 14993                           
 14994                           ;dans.c: 467: Drive(-Spd,-Spd);
 14995  012768  C0F7  F0FB         	movff	Travel@Spd,??_Travel
 14996  01276C  C0F8  F0FC         	movff	Travel@Spd+1,??_Travel+1
 14997  012770  0100               	movlb	0	; () banked
 14998  012772  1FFB               	comf	??_Travel& (0+255),f,b
 14999  012774  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 15000  012776  4BFB               	infsnz	??_Travel& (0+255),f,b
 15001  012778  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 15002  01277A  C0FB  F061         	movff	??_Travel,Drive@SpeedL
 15003  01277E  C0FC  F062         	movff	??_Travel+1,Drive@SpeedL+1
 15004  012782  C0F7  F0FD         	movff	Travel@Spd,??_Travel+2
 15005  012786  C0F8  F0FE         	movff	Travel@Spd+1,??_Travel+3
 15006  01278A  1FFD               	comf	(??_Travel+2)& (0+255),f,b
 15007  01278C  1FFE               	comf	(??_Travel+3)& (0+255),f,b
 15008  01278E  4BFD               	infsnz	(??_Travel+2)& (0+255),f,b
 15009  012790  2BFE               	incf	(??_Travel+3)& (0+255),f,b
 15010  012792  C0FD  F063         	movff	??_Travel+2,Drive@SpeedR
 15011  012796  C0FE  F064         	movff	??_Travel+3,Drive@SpeedR+1
 15012  01279A  ECE4  F0C0         	call	_Drive	;wreg free
 15013                           
 15014                           ;dans.c: 468: UpdateDistance();
 15015  01279E  ECBC  F0BD         	call	_UpdateDistance	;wreg free
 15016                           
 15017                           ;dans.c: 469: while(rev_Dist >= -Dist_Travelled){
 15018  0127A2  D028               	goto	l2453
 15019  0127A4                     
 15020                           ;dans.c: 471: rev_Dist += UpdateDistance();
 15021  0127A4  ECBC  F0BD         	call	_UpdateDistance	;wreg free
 15022  0127A8  0100               	movlb	0	; () banked
 15023  0127AA  5161               	movf	?_UpdateDistance& (0+255),w,b
 15024  0127AC  0101               	movlb	1	; () banked
 15025  0127AE  27EE               	addwf	Travel@rev_Dist& (0+255),f,b
 15026  0127B0  0100               	movlb	0	; () banked
 15027  0127B2  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
 15028  0127B4  0101               	movlb	1	; () banked
 15029  0127B6  23EF               	addwfc	(Travel@rev_Dist+1)& (0+255),f,b
 15030                           
 15031                           ; BSR set to: 1
 15032                           ;dans.c: 472: Console_Render();
 15033  0127B8  EC9B  F0A7         	call	_Console_Render	;wreg free
 15034                           
 15035                           ;dans.c: 473: printf("%c", (char)35);
 15036  0127BC  0EFC               	movlw	low STR_1
 15037  0127BE  0100               	movlb	0	; () banked
 15038  0127C0  6F75               	movwf	printf@f& (0+255),b
 15039  0127C2  0EFF               	movlw	high STR_1
 15040  0127C4  6F76               	movwf	(printf@f+1)& (0+255),b
 15041  0127C6  0E00               	movlw	0
 15042  0127C8  6F78               	movwf	(?_printf+3)& (0+255),b
 15043  0127CA  0E23               	movlw	35
 15044  0127CC  6F77               	movwf	(?_printf+2)& (0+255),b
 15045  0127CE  EC77  F0AB         	call	_printf	;wreg free
 15046                           
 15047                           ;dans.c: 474: printf("rev:%d Tar: %d\n", rev_Dist, Dist_Travelled);
 15048  0127D2  0E60               	movlw	low STR_27
 15049  0127D4  0100               	movlb	0	; () banked
 15050  0127D6  6F75               	movwf	printf@f& (0+255),b
 15051  0127D8  0EFF               	movlw	high STR_27
 15052  0127DA  6F76               	movwf	(printf@f+1)& (0+255),b
 15053  0127DC  C1EE  F077         	movff	Travel@rev_Dist,?_printf+2
 15054  0127E0  C1EF  F078         	movff	Travel@rev_Dist+1,?_printf+3
 15055  0127E4  C1F1  F079         	movff	Travel@Dist_Travelled,?_printf+4
 15056  0127E8  C1F2  F07A         	movff	Travel@Dist_Travelled+1,?_printf+5
 15057  0127EC  EC77  F0AB         	call	_printf	;wreg free
 15058                           
 15059                           ;dans.c: 475: Console_Render();
 15060  0127F0  EC9B  F0A7         	call	_Console_Render	;wreg free
 15061  0127F4                     l2453:
 15062  0127F4  C1F1  F0FB         	movff	Travel@Dist_Travelled,??_Travel
 15063  0127F8  C1F2  F0FC         	movff	Travel@Dist_Travelled+1,??_Travel+1
 15064  0127FC  0100               	movlb	0	; () banked
 15065  0127FE  1FFB               	comf	??_Travel& (0+255),f,b
 15066  012800  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 15067  012802  4BFB               	infsnz	??_Travel& (0+255),f,b
 15068  012804  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 15069  012806  51FB               	movf	??_Travel& (0+255),w,b
 15070  012808  0101               	movlb	1	; () banked
 15071  01280A  5DEE               	subwf	Travel@rev_Dist& (0+255),w,b
 15072  01280C  51EF               	movf	(Travel@rev_Dist+1)& (0+255),w,b
 15073  01280E  0A80               	xorlw	128
 15074  012810  0100               	movlb	0	; () banked
 15075  012812  6FFD               	movwf	(??_Travel+2)& (0+255),b
 15076  012814  51FC               	movf	(??_Travel+1)& (0+255),w,b
 15077  012816  0A80               	xorlw	128
 15078  012818  59FD               	subwfb	(??_Travel+2)& (0+255),w,b
 15079  01281A  A0D8               	btfss	status,0,c
 15080  01281C  0012               	return	
 15081  01281E  D7C2               	goto	l2454
 15082  012820                     l2452:
 15083                           
 15084                           ; BSR set to: 0
 15085                           
 15086                           ; BSR set to: 0
 15087  012820  0100               	movlb	0	; () banked
 15088  012822  51F3               	movf	Travel@Dist& (0+255),w,b
 15089  012824  0101               	movlb	1	; () banked
 15090  012826  5DF1               	subwf	Travel@Dist_Travelled& (0+255),w,b
 15091  012828  51F2               	movf	(Travel@Dist_Travelled+1)& (0+255),w,b
 15092  01282A  0A80               	xorlw	128
 15093  01282C  0100               	movlb	0	; () banked
 15094  01282E  6FFB               	movwf	??_Travel& (0+255),b
 15095  012830  51F4               	movf	(Travel@Dist+1)& (0+255),w,b
 15096  012832  0A80               	xorlw	128
 15097  012834  59FB               	subwfb	??_Travel& (0+255),w,b
 15098  012836  A0D8               	btfss	status,0,c
 15099  012838  D650               	goto	l2432
 15100                           
 15101                           ; BSR set to: 0
 15102                           ;dans.c: 478: }
 15103                           ;dans.c: 482: }
 15104                           ;dans.c: 483: if (direction == 0){
 15105                           
 15106                           ; BSR set to: 0
 15107  01283A  51F1               	movf	Travel@direction& (0+255),w,b
 15108  01283C  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
 15109  01283E  A4D8               	btfss	status,2,c
 15110  012840  D005               	goto	l2458
 15111                           
 15112                           ; BSR set to: 0
 15113                           ;dans.c: 484: X_Pos -= 1;
 15114  012842  0101               	movlb	1	; () banked
 15115  012844  073C               	decf	_X_Pos& (0+255),f,b
 15116  012846  A0D8               	btfss	status,0,c
 15117  012848  073D               	decf	(_X_Pos+1)& (0+255),f,b
 15118                           
 15119                           ;dans.c: 485: }
 15120  01284A  D01D               	goto	l2464
 15121  01284C                     l2458:
 15122                           
 15123                           ;dans.c: 486: else if (direction == 1){
 15124                           
 15125                           ; BSR set to: 1
 15126  01284C  0100               	movlb	0	; () banked
 15127  01284E  05F1               	decf	Travel@direction& (0+255),w,b
 15128  012850  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
 15129  012852  A4D8               	btfss	status,2,c
 15130  012854  D004               	goto	l2460
 15131                           
 15132                           ; BSR set to: 0
 15133                           ;dans.c: 487: Y_Pos += 1;
 15134  012856  0101               	movlb	1	; () banked
 15135  012858  4B3A               	infsnz	_Y_Pos& (0+255),f,b
 15136  01285A  2B3B               	incf	(_Y_Pos+1)& (0+255),f,b
 15137                           
 15138                           ;dans.c: 488: }
 15139  01285C  D014               	goto	l2464
 15140  01285E                     l2460:
 15141                           
 15142                           ;dans.c: 489: else if (direction == 2){
 15143                           
 15144                           ; BSR set to: 1
 15145  01285E  0E02               	movlw	2
 15146  012860  0100               	movlb	0	; () banked
 15147  012862  19F1               	xorwf	Travel@direction& (0+255),w,b
 15148  012864  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
 15149  012866  A4D8               	btfss	status,2,c
 15150  012868  D004               	goto	l2462
 15151                           
 15152                           ; BSR set to: 0
 15153                           ;dans.c: 490: X_Pos += 1;
 15154  01286A  0101               	movlb	1	; () banked
 15155  01286C  4B3C               	infsnz	_X_Pos& (0+255),f,b
 15156  01286E  2B3D               	incf	(_X_Pos+1)& (0+255),f,b
 15157                           
 15158                           ;dans.c: 491: }
 15159  012870  D00A               	goto	l2464
 15160  012872                     l2462:
 15161                           
 15162                           ;dans.c: 492: else if (direction == 3){
 15163                           
 15164                           ; BSR set to: 1
 15165  012872  0E03               	movlw	3
 15166  012874  0100               	movlb	0	; () banked
 15167  012876  19F1               	xorwf	Travel@direction& (0+255),w,b
 15168  012878  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
 15169  01287A  A4D8               	btfss	status,2,c
 15170  01287C  D004               	goto	l2464
 15171                           
 15172                           ; BSR set to: 0
 15173                           ;dans.c: 493: Y_Pos -= 1;
 15174  01287E  0101               	movlb	1	; () banked
 15175  012880  073A               	decf	_Y_Pos& (0+255),f,b
 15176  012882  A0D8               	btfss	status,0,c
 15177  012884  073B               	decf	(_Y_Pos+1)& (0+255),f,b
 15178  012886                     l2464:
 15179                           
 15180                           ;dans.c: 494: }
 15181                           ;dans.c: 495: push(direction);
 15182                           
 15183                           ; BSR set to: 1
 15184                           
 15185                           ; BSR set to: 1
 15186                           
 15187                           ; BSR set to: 1
 15188                           
 15189                           ; BSR set to: 1
 15190  012886  C0F1  F083         	movff	Travel@direction,push@data
 15191  01288A  C0F2  F084         	movff	Travel@direction+1,push@data+1
 15192  01288E  ECBD  F0C1         	call	_push	;wreg free
 15193                           
 15194                           ;dans.c: 498: maze[X_Pos][Y_Pos].Options -= 1;
 15195  012892  C13C  F060         	movff	_X_Pos,___wmul@multiplier
 15196  012896  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
 15197  01289A  0E00               	movlw	0
 15198  01289C  0100               	movlb	0	; () banked
 15199  01289E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15200  0128A0  0E32               	movlw	50
 15201  0128A2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15202  0128A4  EC33  F0C4         	call	___wmul	;wreg free
 15203  0128A8  0E00               	movlw	low _maze
 15204  0128AA  0100               	movlb	0	; () banked
 15205  0128AC  6FFB               	movwf	??_Travel& (0+255),b
 15206  0128AE  0E02               	movlw	high _maze
 15207  0128B0  6FFC               	movwf	(??_Travel+1)& (0+255),b
 15208  0128B2  5160               	movf	?___wmul& (0+255),w,b
 15209  0128B4  27FB               	addwf	??_Travel& (0+255),f,b
 15210  0128B6  5161               	movf	(?___wmul+1)& (0+255),w,b
 15211  0128B8  23FC               	addwfc	(??_Travel+1)& (0+255),f,b
 15212  0128BA  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
 15213  0128BE  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
 15214  0128C2  0E00               	movlw	0
 15215  0128C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15216  0128C6  0E0A               	movlw	10
 15217  0128C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15218  0128CA  EC33  F0C4         	call	___wmul	;wreg free
 15219  0128CE  0100               	movlb	0	; () banked
 15220  0128D0  5160               	movf	?___wmul& (0+255),w,b
 15221  0128D2  27FB               	addwf	??_Travel& (0+255),f,b
 15222  0128D4  5161               	movf	(?___wmul+1)& (0+255),w,b
 15223  0128D6  23FC               	addwfc	(??_Travel+1)& (0+255),f,b
 15224  0128D8  0E08               	movlw	8
 15225  0128DA  25FB               	addwf	??_Travel& (0+255),w,b
 15226  0128DC  6ED9               	movwf	fsr2l,c
 15227  0128DE  0E00               	movlw	0
 15228  0128E0  21FC               	addwfc	(??_Travel+1)& (0+255),w,b
 15229  0128E2  6EDA               	movwf	fsr2h,c
 15230  0128E4  06DE               	decf	postinc2,f,c
 15231  0128E6  0E00               	movlw	0
 15232  0128E8  5ADD               	subwfb	postdec2,f,c
 15233                           
 15234                           ; BSR set to: 0
 15235                           ;dans.c: 499: Robot_Stop();
 15236  0128EA  ECA3  F0C4         	call	_Robot_Stop	;wreg free
 15237  0128EE  0012               	return		;funcret
 15238  0128F0                     __end_of_Travel:
 15239                           	opt stack 0
 15240                           tosu	equ	0xFFF
 15241                           tosh	equ	0xFFE
 15242                           tosl	equ	0xFFD
 15243                           pclath	equ	0xFFA
 15244                           tblptru	equ	0xFF8
 15245                           tblptrh	equ	0xFF7
 15246                           tblptrl	equ	0xFF6
 15247                           tablat	equ	0xFF5
 15248                           prodh	equ	0xFF4
 15249                           prodl	equ	0xFF3
 15250                           intcon	equ	0xFF2
 15251                           postinc0	equ	0xFEE
 15252                           wreg	equ	0xFE8
 15253                           indf1	equ	0xFE7
 15254                           postdec1	equ	0xFE5
 15255                           fsr1h	equ	0xFE2
 15256                           fsr1l	equ	0xFE1
 15257                           indf2	equ	0xFDF
 15258                           postinc2	equ	0xFDE
 15259                           postdec2	equ	0xFDD
 15260                           plusw2	equ	0xFDB
 15261                           fsr2h	equ	0xFDA
 15262                           fsr2l	equ	0xFD9
 15263                           status	equ	0xFD8
 15264                           
 15265 ;; *************** function _push *****************
 15266 ;; Defined at:
 15267 ;;		line 260 in file "dans.c"
 15268 ;; Parameters:    Size  Location     Type
 15269 ;;  data            2   35[BANK0 ] int 
 15270 ;; Auto vars:     Size  Location     Type
 15271 ;;		None
 15272 ;; Return value:  Size  Location     Type
 15273 ;;                  2   35[BANK0 ] int 
 15274 ;; Registers used:
 15275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15276 ;; Tracked objects:
 15277 ;;		On entry : 0/0
 15278 ;;		On exit  : 0/0
 15279 ;;		Unchanged: 0/0
 15280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15281 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15284 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15285 ;;Total ram usage:        2 bytes
 15286 ;; Hardware stack levels used:    1
 15287 ;; Hardware stack levels required when called:   13
 15288 ;; This function calls:
 15289 ;;		_isfull
 15290 ;;		_printf
 15291 ;; This function is called by:
 15292 ;;		_Travel
 15293 ;; This function uses a non-reentrant model
 15294 ;;
 15295                           
 15296                           	psect	text69
 15297  01837A                     __ptext69:
 15298                           	opt stack 0
 15299  01837A                     _push:
 15300                           	opt stack 16
 15301                           
 15302                           ;dans.c: 262: if(!isfull()) {
 15303                           
 15304                           ;incstack = 0
 15305  01837A  ECD7  F0C5         	call	_isfull	;wreg free
 15306  01837E  0900               	iorlw	0
 15307  018380  A4D8               	btfss	status,2,c
 15308  018382  D015               	goto	l2391
 15309                           
 15310                           ;dans.c: 263: top = top + 1;
 15311  018384  0E01               	movlw	1
 15312  018386  0101               	movlb	1	; () banked
 15313  018388  25E0               	addwf	_top& (0+255),w,b
 15314  01838A  6FE0               	movwf	_top& (0+255),b
 15315  01838C  0E00               	movlw	0
 15316  01838E  21E1               	addwfc	(_top+1)& (0+255),w,b
 15317  018390  6FE1               	movwf	(_top+1)& (0+255),b
 15318                           
 15319                           ; BSR set to: 1
 15320                           ;dans.c: 264: stack[top] = data;
 15321  018392  90D8               	bcf	status,0,c
 15322  018394  35E0               	rlcf	_top& (0+255),w,b
 15323  018396  6ED9               	movwf	fsr2l,c
 15324  018398  35E1               	rlcf	(_top+1)& (0+255),w,b
 15325  01839A  6EDA               	movwf	fsr2h,c
 15326  01839C  0E00               	movlw	low _stack
 15327  01839E  26D9               	addwf	fsr2l,f,c
 15328  0183A0  0E03               	movlw	high _stack
 15329  0183A2  22DA               	addwfc	fsr2h,f,c
 15330  0183A4  C083  FFDE         	movff	push@data,postinc2
 15331  0183A8  C084  FFDD         	movff	push@data+1,postdec2
 15332                           
 15333                           ;dans.c: 265: } else {
 15334  0183AC  0012               	return	
 15335  0183AE                     l2391:
 15336                           
 15337                           ;dans.c: 266: printf("Could not insert data, Stack is full.\n");
 15338                           
 15339                           ; BSR set to: 1
 15340  0183AE  0E93               	movlw	low STR_23
 15341  0183B0  0100               	movlb	0	; () banked
 15342  0183B2  6F75               	movwf	printf@f& (0+255),b
 15343  0183B4  0EFE               	movlw	high STR_23
 15344  0183B6  6F76               	movwf	(printf@f+1)& (0+255),b
 15345  0183B8  EC77  F0AB         	call	_printf	;wreg free
 15346  0183BC  0012               	return	
 15347  0183BE                     __end_of_push:
 15348                           	opt stack 0
 15349                           tosu	equ	0xFFF
 15350                           tosh	equ	0xFFE
 15351                           tosl	equ	0xFFD
 15352                           pclath	equ	0xFFA
 15353                           tblptru	equ	0xFF8
 15354                           tblptrh	equ	0xFF7
 15355                           tblptrl	equ	0xFF6
 15356                           tablat	equ	0xFF5
 15357                           prodh	equ	0xFF4
 15358                           prodl	equ	0xFF3
 15359                           intcon	equ	0xFF2
 15360                           postinc0	equ	0xFEE
 15361                           wreg	equ	0xFE8
 15362                           indf1	equ	0xFE7
 15363                           postdec1	equ	0xFE5
 15364                           fsr1h	equ	0xFE2
 15365                           fsr1l	equ	0xFE1
 15366                           indf2	equ	0xFDF
 15367                           postinc2	equ	0xFDE
 15368                           postdec2	equ	0xFDD
 15369                           plusw2	equ	0xFDB
 15370                           fsr2h	equ	0xFDA
 15371                           fsr2l	equ	0xFD9
 15372                           status	equ	0xFD8
 15373                           
 15374 ;; *************** function _isfull *****************
 15375 ;; Defined at:
 15376 ;;		line 238 in file "dans.c"
 15377 ;; Parameters:    Size  Location     Type
 15378 ;;		None
 15379 ;; Auto vars:     Size  Location     Type
 15380 ;;		None
 15381 ;; Return value:  Size  Location     Type
 15382 ;;                  1    wreg      unsigned char 
 15383 ;; Registers used:
 15384 ;;		wreg, status,2, status,0
 15385 ;; Tracked objects:
 15386 ;;		On entry : 0/0
 15387 ;;		On exit  : 0/0
 15388 ;;		Unchanged: 0/0
 15389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15394 ;;Total ram usage:        0 bytes
 15395 ;; Hardware stack levels used:    1
 15396 ;; Hardware stack levels required when called:    7
 15397 ;; This function calls:
 15398 ;;		Nothing
 15399 ;; This function is called by:
 15400 ;;		_push
 15401 ;; This function uses a non-reentrant model
 15402 ;;
 15403                           
 15404                           	psect	text70
 15405  018BAE                     __ptext70:
 15406                           	opt stack 0
 15407  018BAE                     _isfull:
 15408                           	opt stack 21
 15409                           
 15410                           ;dans.c: 240: if(top == 20)
 15411                           
 15412                           ;incstack = 0
 15413  018BAE  0E14               	movlw	20
 15414  018BB0  0101               	movlb	1	; () banked
 15415  018BB2  19E0               	xorwf	_top& (0+255),w,b
 15416  018BB4  11E1               	iorwf	(_top+1)& (0+255),w,b
 15417  018BB6  A4D8               	btfss	status,2,c
 15418  018BB8  D002               	goto	l2378
 15419                           
 15420                           ; BSR set to: 1
 15421                           ;dans.c: 241: return 1;
 15422  018BBA  0E01               	movlw	1
 15423                           
 15424                           ; BSR set to: 1
 15425                           
 15426                           ; BSR set to: 1
 15427  018BBC  0012               	return	
 15428  018BBE                     l2378:
 15429                           
 15430                           ; BSR set to: 1
 15431                           ;dans.c: 242: else
 15432                           ;dans.c: 243: return 0;
 15433                           
 15434                           ; BSR set to: 1
 15435  018BBE  0E00               	movlw	0
 15436                           
 15437                           ; BSR set to: 1
 15438  018BC0  0012               	return	
 15439  018BC2                     __end_of_isfull:
 15440                           	opt stack 0
 15441                           tosu	equ	0xFFF
 15442                           tosh	equ	0xFFE
 15443                           tosl	equ	0xFFD
 15444                           pclath	equ	0xFFA
 15445                           tblptru	equ	0xFF8
 15446                           tblptrh	equ	0xFF7
 15447                           tblptrl	equ	0xFF6
 15448                           tablat	equ	0xFF5
 15449                           prodh	equ	0xFF4
 15450                           prodl	equ	0xFF3
 15451                           intcon	equ	0xFF2
 15452                           postinc0	equ	0xFEE
 15453                           wreg	equ	0xFE8
 15454                           indf1	equ	0xFE7
 15455                           postdec1	equ	0xFE5
 15456                           fsr1h	equ	0xFE2
 15457                           fsr1l	equ	0xFE1
 15458                           indf2	equ	0xFDF
 15459                           postinc2	equ	0xFDE
 15460                           postdec2	equ	0xFDD
 15461                           plusw2	equ	0xFDB
 15462                           fsr2h	equ	0xFDA
 15463                           fsr2l	equ	0xFD9
 15464                           status	equ	0xFD8
 15465                           
 15466 ;; *************** function _UpdateDistance *****************
 15467 ;; Defined at:
 15468 ;;		line 286 in file "dans.c"
 15469 ;; Parameters:    Size  Location     Type
 15470 ;;		None
 15471 ;; Auto vars:     Size  Location     Type
 15472 ;;		None
 15473 ;; Return value:  Size  Location     Type
 15474 ;;                  2    1[BANK0 ] int 
 15475 ;; Registers used:
 15476 ;;		wreg, status,2, status,0, cstack
 15477 ;; Tracked objects:
 15478 ;;		On entry : 0/0
 15479 ;;		On exit  : 0/0
 15480 ;;		Unchanged: 0/0
 15481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15482 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15484 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15485 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15486 ;;Total ram usage:        6 bytes
 15487 ;; Hardware stack levels used:    1
 15488 ;; Hardware stack levels required when called:    8
 15489 ;; This function calls:
 15490 ;;		_eusartRec
 15491 ;;		_eusartSend
 15492 ;; This function is called by:
 15493 ;;		_Robot_Init
 15494 ;;		_Travel
 15495 ;; This function uses a non-reentrant model
 15496 ;;
 15497                           
 15498                           	psect	text71
 15499  017B78                     __ptext71:
 15500                           	opt stack 0
 15501  017B78                     _UpdateDistance:
 15502                           	opt stack 21
 15503                           
 15504                           ;dans.c: 287: eusartSend(142);
 15505                           
 15506                           ; BSR set to: 1
 15507                           ;incstack = 0
 15508  017B78  0E8E               	movlw	142
 15509  017B7A  EC20  F0C6         	call	_eusartSend
 15510                           
 15511                           ;dans.c: 288: eusartSend(19);
 15512  017B7E  0E13               	movlw	19
 15513  017B80  EC20  F0C6         	call	_eusartSend
 15514                           
 15515                           ;dans.c: 289: Current_Dist1 = eusartRec();
 15516  017B84  EC54  F0C6         	call	_eusartRec	;wreg free
 15517  017B88  0100               	movlb	0	; () banked
 15518  017B8A  6F63               	movwf	??_UpdateDistance& (0+255),b
 15519  017B8C  5163               	movf	??_UpdateDistance& (0+255),w,b
 15520  017B8E  0101               	movlb	1	; () banked
 15521  017B90  6F4C               	movwf	_Current_Dist1& (0+255),b
 15522  017B92  6B4D               	clrf	(_Current_Dist1+1)& (0+255),b
 15523                           
 15524                           ; BSR set to: 1
 15525                           ;dans.c: 290: Current_Dist2 = eusartRec();
 15526  017B94  EC54  F0C6         	call	_eusartRec	;wreg free
 15527  017B98  0100               	movlb	0	; () banked
 15528  017B9A  6F63               	movwf	??_UpdateDistance& (0+255),b
 15529  017B9C  5163               	movf	??_UpdateDistance& (0+255),w,b
 15530  017B9E  0101               	movlb	1	; () banked
 15531  017BA0  6F4A               	movwf	_Current_Dist2& (0+255),b
 15532  017BA2  6B4B               	clrf	(_Current_Dist2+1)& (0+255),b
 15533                           
 15534                           ; BSR set to: 1
 15535                           ;dans.c: 292: Current_Dist = ((Current_Dist1 <<(8)) & 0b1111111100000000 | (Current_Dist
      +                          2 & 255));
 15536  017BA4  0E00               	movlw	0
 15537  017BA6  0100               	movlb	0	; () banked
 15538  017BA8  6F63               	movwf	??_UpdateDistance& (0+255),b
 15539  017BAA  0EFF               	movlw	255
 15540  017BAC  6F64               	movwf	(??_UpdateDistance+1)& (0+255),b
 15541  017BAE  0101               	movlb	1	; () banked
 15542  017BB0  514C               	movf	_Current_Dist1& (0+255),w,b
 15543  017BB2  0100               	movlb	0	; () banked
 15544  017BB4  6F66               	movwf	(??_UpdateDistance+3)& (0+255),b
 15545  017BB6  6B65               	clrf	(??_UpdateDistance+2)& (0+255),b
 15546  017BB8  5163               	movf	??_UpdateDistance& (0+255),w,b
 15547  017BBA  1765               	andwf	(??_UpdateDistance+2)& (0+255),f,b
 15548  017BBC  5164               	movf	(??_UpdateDistance+1)& (0+255),w,b
 15549  017BBE  1766               	andwf	(??_UpdateDistance+3)& (0+255),f,b
 15550  017BC0  0101               	movlb	1	; () banked
 15551  017BC2  514A               	movf	_Current_Dist2& (0+255),w,b
 15552  017BC4  0100               	movlb	0	; () banked
 15553  017BC6  1165               	iorwf	(??_UpdateDistance+2)& (0+255),w,b
 15554  017BC8  0101               	movlb	1	; () banked
 15555  017BCA  6F4E               	movwf	_Current_Dist& (0+255),b
 15556  017BCC  0100               	movlb	0	; () banked
 15557  017BCE  5166               	movf	(??_UpdateDistance+3)& (0+255),w,b
 15558  017BD0  0101               	movlb	1	; () banked
 15559  017BD2  6F4F               	movwf	(_Current_Dist+1)& (0+255),b
 15560                           
 15561                           ; BSR set to: 1
 15562                           ;dans.c: 293: return Current_Dist;
 15563  017BD4  C14E  F061         	movff	_Current_Dist,?_UpdateDistance
 15564  017BD8  C14F  F062         	movff	_Current_Dist+1,?_UpdateDistance+1
 15565  017BDC  0012               	return	
 15566  017BDE                     __end_of_UpdateDistance:
 15567                           	opt stack 0
 15568                           tosu	equ	0xFFF
 15569                           tosh	equ	0xFFE
 15570                           tosl	equ	0xFFD
 15571                           pclath	equ	0xFFA
 15572                           tblptru	equ	0xFF8
 15573                           tblptrh	equ	0xFF7
 15574                           tblptrl	equ	0xFF6
 15575                           tablat	equ	0xFF5
 15576                           prodh	equ	0xFF4
 15577                           prodl	equ	0xFF3
 15578                           intcon	equ	0xFF2
 15579                           postinc0	equ	0xFEE
 15580                           wreg	equ	0xFE8
 15581                           indf1	equ	0xFE7
 15582                           postdec1	equ	0xFE5
 15583                           fsr1h	equ	0xFE2
 15584                           fsr1l	equ	0xFE1
 15585                           indf2	equ	0xFDF
 15586                           postinc2	equ	0xFDE
 15587                           postdec2	equ	0xFDD
 15588                           plusw2	equ	0xFDB
 15589                           fsr2h	equ	0xFDA
 15590                           fsr2l	equ	0xFD9
 15591                           status	equ	0xFD8
 15592                           
 15593 ;; *************** function _Turn *****************
 15594 ;; Defined at:
 15595 ;;		line 324 in file "dans.c"
 15596 ;; Parameters:    Size  Location     Type
 15597 ;;  Angle           2    1[BANK0 ] int 
 15598 ;;  Speed           2    3[BANK0 ] int 
 15599 ;;  Dir             2    5[BANK0 ] int 
 15600 ;; Auto vars:     Size  Location     Type
 15601 ;;  Rad             2    9[BANK0 ] int 
 15602 ;;  C_Angle         2    7[BANK0 ] int 
 15603 ;; Return value:  Size  Location     Type
 15604 ;;                  2    1[BANK0 ] int 
 15605 ;; Registers used:
 15606 ;;		wreg, status,2, status,0, cstack
 15607 ;; Tracked objects:
 15608 ;;		On entry : 0/0
 15609 ;;		On exit  : 0/0
 15610 ;;		Unchanged: 0/0
 15611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15612 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15613 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15615 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15616 ;;Total ram usage:       10 bytes
 15617 ;; Hardware stack levels used:    1
 15618 ;; Hardware stack levels required when called:    9
 15619 ;; This function calls:
 15620 ;;		_Robot_Stop
 15621 ;;		_eusartRec
 15622 ;;		_eusartSend
 15623 ;; This function is called by:
 15624 ;;		_Travel
 15625 ;; This function uses a non-reentrant model
 15626 ;;
 15627                           
 15628                           	psect	text72
 15629  01772E                     __ptext72:
 15630                           	opt stack 0
 15631  01772E                     _Turn:
 15632                           	opt stack 20
 15633                           
 15634                           ;dans.c: 325: int Rad = 1;
 15635                           
 15636                           ; BSR set to: 1
 15637                           ;incstack = 0
 15638  01772E  0E00               	movlw	0
 15639  017730  0100               	movlb	0	; () banked
 15640  017732  6F6A               	movwf	(Turn@Rad+1)& (0+255),b
 15641  017734  0E01               	movlw	1
 15642  017736  6F69               	movwf	Turn@Rad& (0+255),b
 15643                           
 15644                           ; BSR set to: 0
 15645                           ;dans.c: 326: if (Dir == 0){
 15646  017738  5165               	movf	Turn@Dir& (0+255),w,b
 15647  01773A  1166               	iorwf	(Turn@Dir+1)& (0+255),w,b
 15648  01773C  A4D8               	btfss	status,2,c
 15649  01773E  D004               	goto	l2415
 15650                           
 15651                           ; BSR set to: 0
 15652                           ;dans.c: 327: Rad = 65535;
 15653  017740  6969               	setf	Turn@Rad& (0+255),b
 15654  017742  696A               	setf	(Turn@Rad+1)& (0+255),b
 15655                           
 15656                           ; BSR set to: 0
 15657                           ;dans.c: 328: Angle = ~Angle;
 15658  017744  1F61               	comf	Turn@Angle& (0+255),f,b
 15659  017746  1F62               	comf	(Turn@Angle+1)& (0+255),f,b
 15660  017748                     l2415:
 15661                           
 15662                           ; BSR set to: 0
 15663                           ;dans.c: 329: }
 15664                           ;dans.c: 331: eusartSend(137);
 15665                           
 15666                           ; BSR set to: 0
 15667  017748  0E89               	movlw	137
 15668  01774A  EC20  F0C6         	call	_eusartSend
 15669                           
 15670                           ;dans.c: 332: eusartSend(((unsigned char)(((Speed)>>8)&0xFF)));
 15671  01774E  0100               	movlb	0	; () banked
 15672  017750  5164               	movf	(Turn@Speed+1)& (0+255),w,b
 15673  017752  EC20  F0C6         	call	_eusartSend
 15674                           
 15675                           ;dans.c: 333: eusartSend(((unsigned char)((Speed)&0xFF)));
 15676  017756  0100               	movlb	0	; () banked
 15677  017758  5163               	movf	Turn@Speed& (0+255),w,b
 15678  01775A  EC20  F0C6         	call	_eusartSend
 15679                           
 15680                           ;dans.c: 334: eusartSend(((unsigned char)(((Rad)>>8)&0xFF)));
 15681  01775E  0100               	movlb	0	; () banked
 15682  017760  516A               	movf	(Turn@Rad+1)& (0+255),w,b
 15683  017762  EC20  F0C6         	call	_eusartSend
 15684                           
 15685                           ;dans.c: 335: eusartSend(((unsigned char)((Rad)&0xFF)));
 15686  017766  0100               	movlb	0	; () banked
 15687  017768  5169               	movf	Turn@Rad& (0+255),w,b
 15688  01776A  EC20  F0C6         	call	_eusartSend
 15689                           
 15690                           ;dans.c: 336: int C_Angle = 0;
 15691  01776E  0E00               	movlw	0
 15692  017770  0100               	movlb	0	; () banked
 15693  017772  6F68               	movwf	(Turn@C_Angle+1)& (0+255),b
 15694  017774  0E00               	movlw	0
 15695  017776  6F67               	movwf	Turn@C_Angle& (0+255),b
 15696                           
 15697                           ; BSR set to: 0
 15698                           ;dans.c: 337: eusartSend(157);
 15699  017778  0E9D               	movlw	157
 15700  01777A  EC20  F0C6         	call	_eusartSend
 15701                           
 15702                           ;dans.c: 338: eusartSend(((unsigned char)(((Angle)>>8)&0xFF)));
 15703  01777E  0100               	movlb	0	; () banked
 15704  017780  5162               	movf	(Turn@Angle+1)& (0+255),w,b
 15705  017782  EC20  F0C6         	call	_eusartSend
 15706                           
 15707                           ;dans.c: 339: eusartSend(((unsigned char)((Angle)&0xFF)));
 15708  017786  0100               	movlb	0	; () banked
 15709  017788  5161               	movf	Turn@Angle& (0+255),w,b
 15710  01778A  EC20  F0C6         	call	_eusartSend
 15711                           
 15712                           ;dans.c: 341: Robot_Stop();
 15713  01778E  ECA3  F0C4         	call	_Robot_Stop	;wreg free
 15714                           
 15715                           ;dans.c: 343: eusartSend(142);
 15716  017792  0E8E               	movlw	142
 15717  017794  EC20  F0C6         	call	_eusartSend
 15718                           
 15719                           ;dans.c: 344: eusartSend(7);
 15720  017798  0E07               	movlw	7
 15721  01779A  EC20  F0C6         	call	_eusartSend
 15722                           
 15723                           ;dans.c: 345: eusartRec();
 15724  01779E  EC54  F0C6         	call	_eusartRec	;wreg free
 15725  0177A2  0012               	return		;funcret
 15726  0177A4                     __end_of_Turn:
 15727                           	opt stack 0
 15728                           tosu	equ	0xFFF
 15729                           tosh	equ	0xFFE
 15730                           tosl	equ	0xFFD
 15731                           pclath	equ	0xFFA
 15732                           tblptru	equ	0xFF8
 15733                           tblptrh	equ	0xFF7
 15734                           tblptrl	equ	0xFF6
 15735                           tablat	equ	0xFF5
 15736                           prodh	equ	0xFF4
 15737                           prodl	equ	0xFF3
 15738                           intcon	equ	0xFF2
 15739                           postinc0	equ	0xFEE
 15740                           wreg	equ	0xFE8
 15741                           indf1	equ	0xFE7
 15742                           postdec1	equ	0xFE5
 15743                           fsr1h	equ	0xFE2
 15744                           fsr1l	equ	0xFE1
 15745                           indf2	equ	0xFDF
 15746                           postinc2	equ	0xFDE
 15747                           postdec2	equ	0xFDD
 15748                           plusw2	equ	0xFDB
 15749                           fsr2h	equ	0xFDA
 15750                           fsr2l	equ	0xFD9
 15751                           status	equ	0xFD8
 15752                           
 15753 ;; *************** function _Robot_Stop *****************
 15754 ;; Defined at:
 15755 ;;		line 295 in file "dans.c"
 15756 ;; Parameters:    Size  Location     Type
 15757 ;;		None
 15758 ;; Auto vars:     Size  Location     Type
 15759 ;;		None
 15760 ;; Return value:  Size  Location     Type
 15761 ;;                  1    wreg      void 
 15762 ;; Registers used:
 15763 ;;		wreg, cstack
 15764 ;; Tracked objects:
 15765 ;;		On entry : 0/0
 15766 ;;		On exit  : 0/0
 15767 ;;		Unchanged: 0/0
 15768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15773 ;;Total ram usage:        0 bytes
 15774 ;; Hardware stack levels used:    1
 15775 ;; Hardware stack levels required when called:    8
 15776 ;; This function calls:
 15777 ;;		_eusartSend
 15778 ;; This function is called by:
 15779 ;;		_Robot_Init
 15780 ;;		_Turn
 15781 ;;		_Travel
 15782 ;; This function uses a non-reentrant model
 15783 ;;
 15784                           
 15785                           	psect	text73
 15786  018946                     __ptext73:
 15787                           	opt stack 0
 15788  018946                     _Robot_Stop:
 15789                           	opt stack 20
 15790                           
 15791                           ;dans.c: 296: eusartSend(137);
 15792                           
 15793                           ;incstack = 0
 15794  018946  0E89               	movlw	137
 15795  018948  EC20  F0C6         	call	_eusartSend
 15796                           
 15797                           ;dans.c: 297: eusartSend(0);
 15798  01894C  0E00               	movlw	0
 15799  01894E  EC20  F0C6         	call	_eusartSend
 15800                           
 15801                           ;dans.c: 298: eusartSend(0);
 15802  018952  0E00               	movlw	0
 15803  018954  EC20  F0C6         	call	_eusartSend
 15804                           
 15805                           ;dans.c: 299: eusartSend(0);
 15806  018958  0E00               	movlw	0
 15807  01895A  EC20  F0C6         	call	_eusartSend
 15808                           
 15809                           ;dans.c: 300: eusartSend(0);
 15810  01895E  0E00               	movlw	0
 15811  018960  EC20  F0C6         	call	_eusartSend
 15812  018964  0012               	return		;funcret
 15813  018966                     __end_of_Robot_Stop:
 15814                           	opt stack 0
 15815                           tosu	equ	0xFFF
 15816                           tosh	equ	0xFFE
 15817                           tosl	equ	0xFFD
 15818                           pclath	equ	0xFFA
 15819                           tblptru	equ	0xFF8
 15820                           tblptrh	equ	0xFF7
 15821                           tblptrl	equ	0xFF6
 15822                           tablat	equ	0xFF5
 15823                           prodh	equ	0xFF4
 15824                           prodl	equ	0xFF3
 15825                           intcon	equ	0xFF2
 15826                           postinc0	equ	0xFEE
 15827                           wreg	equ	0xFE8
 15828                           indf1	equ	0xFE7
 15829                           postdec1	equ	0xFE5
 15830                           fsr1h	equ	0xFE2
 15831                           fsr1l	equ	0xFE1
 15832                           indf2	equ	0xFDF
 15833                           postinc2	equ	0xFDE
 15834                           postdec2	equ	0xFDD
 15835                           plusw2	equ	0xFDB
 15836                           fsr2h	equ	0xFDA
 15837                           fsr2l	equ	0xFD9
 15838                           status	equ	0xFD8
 15839                           
 15840 ;; *************** function _Move_ADC_To *****************
 15841 ;; Defined at:
 15842 ;;		line 551 in file "dans.c"
 15843 ;; Parameters:    Size  Location     Type
 15844 ;;  Angle           2   73[BANK0 ] int 
 15845 ;; Auto vars:     Size  Location     Type
 15846 ;;		None
 15847 ;; Return value:  Size  Location     Type
 15848 ;;                  1    wreg      void 
 15849 ;; Registers used:
 15850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15851 ;; Tracked objects:
 15852 ;;		On entry : 0/0
 15853 ;;		On exit  : 0/0
 15854 ;;		Unchanged: 0/0
 15855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15856 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15859 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15860 ;;Total ram usage:        2 bytes
 15861 ;; Hardware stack levels used:    1
 15862 ;; Hardware stack levels required when called:   13
 15863 ;; This function calls:
 15864 ;;		_Console_Render
 15865 ;;		_SteppingCCW
 15866 ;;		_SteppingCW
 15867 ;;		___fladd
 15868 ;;		___flmul
 15869 ;;		___fltol
 15870 ;;		___xxtofl
 15871 ;;		_printf
 15872 ;; This function is called by:
 15873 ;;		_Travel
 15874 ;; This function uses a non-reentrant model
 15875 ;;
 15876                           
 15877                           	psect	text74
 15878  015856                     __ptext74:
 15879                           	opt stack 0
 15880  015856                     _Move_ADC_To:
 15881                           	opt stack 16
 15882                           
 15883                           ;dans.c: 553: if (flag==0){
 15884                           
 15885                           ;incstack = 0
 15886  015856  502C               	movf	_flag,w,c
 15887  015858  102D               	iorwf	_flag+1,w,c
 15888  01585A  A4D8               	btfss	status,2,c
 15889  01585C  D042               	goto	l2479
 15890                           
 15891                           ;dans.c: 555: Steps = (Angle * 1.42222)+200;
 15892  01585E  0E00               	movlw	0
 15893  015860  0100               	movlb	0	; () banked
 15894  015862  6F8F               	movwf	___fladd@a& (0+255),b
 15895  015864  0E00               	movlw	0
 15896  015866  6F90               	movwf	(___fladd@a+1)& (0+255),b
 15897  015868  0E48               	movlw	72
 15898  01586A  6F91               	movwf	(___fladd@a+2)& (0+255),b
 15899  01586C  0E43               	movlw	67
 15900  01586E  6F92               	movwf	(___fladd@a+3)& (0+255),b
 15901  015870  0E4E               	movlw	78
 15902  015872  6F72               	movwf	___flmul@a& (0+255),b
 15903  015874  0E0B               	movlw	11
 15904  015876  6F73               	movwf	(___flmul@a+1)& (0+255),b
 15905  015878  0EB6               	movlw	182
 15906  01587A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 15907  01587C  0E3F               	movlw	63
 15908  01587E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 15909  015880  C0A9  F060         	movff	Move_ADC_To@Angle,___xxtofl@val
 15910  015884  C0AA  F061         	movff	Move_ADC_To@Angle+1,___xxtofl@val+1
 15911  015888  0E00               	movlw	0
 15912  01588A  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 15913  01588C  0EFF               	movlw	-1
 15914  01588E  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 15915  015890  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 15916  015892  0E01               	movlw	1
 15917  015894  ECD8  F0AC         	call	___xxtofl
 15918  015898  C060  F06E         	movff	?___xxtofl,___flmul@b
 15919  01589C  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 15920  0158A0  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 15921  0158A4  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 15922  0158A8  ECD4  F09A         	call	___flmul	;wreg free
 15923  0158AC  C06E  F08B         	movff	?___flmul,___fladd@b
 15924  0158B0  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 15925  0158B4  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 15926  0158B8  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 15927  0158BC  EC7D  F09C         	call	___fladd	;wreg free
 15928  0158C0  C08B  F09F         	movff	?___fladd,___fltol@f1
 15929  0158C4  C08C  F0A0         	movff	?___fladd+1,___fltol@f1+1
 15930  0158C8  C08D  F0A1         	movff	?___fladd+2,___fltol@f1+2
 15931  0158CC  C08E  F0A2         	movff	?___fladd+3,___fltol@f1+3
 15932  0158D0  ECC8  F0B4         	call	___fltol	;wreg free
 15933  0158D4  C09F  F144         	movff	?___fltol,_Steps
 15934  0158D8  C0A0  F145         	movff	?___fltol+1,_Steps+1
 15935                           
 15936                           ;dans.c: 556: flag++;
 15937  0158DC  4A2C               	infsnz	_flag,f,c
 15938  0158DE  2A2D               	incf	_flag+1,f,c
 15939                           
 15940                           ;dans.c: 557: }
 15941  0158E0  D031               	goto	l2481
 15942  0158E2                     l2479:
 15943                           
 15944                           ;dans.c: 558: else if (!flag==0){
 15945  0158E2  502C               	movf	_flag,w,c
 15946  0158E4  102D               	iorwf	_flag+1,w,c
 15947  0158E6  B4D8               	btfsc	status,2,c
 15948  0158E8  D02D               	goto	l2481
 15949                           
 15950                           ;dans.c: 559: Steps = (Angle * 1.42222);
 15951  0158EA  0E4E               	movlw	78
 15952  0158EC  0100               	movlb	0	; () banked
 15953  0158EE  6F72               	movwf	___flmul@a& (0+255),b
 15954  0158F0  0E0B               	movlw	11
 15955  0158F2  6F73               	movwf	(___flmul@a+1)& (0+255),b
 15956  0158F4  0EB6               	movlw	182
 15957  0158F6  6F74               	movwf	(___flmul@a+2)& (0+255),b
 15958  0158F8  0E3F               	movlw	63
 15959  0158FA  6F75               	movwf	(___flmul@a+3)& (0+255),b
 15960  0158FC  C0A9  F060         	movff	Move_ADC_To@Angle,___xxtofl@val
 15961  015900  C0AA  F061         	movff	Move_ADC_To@Angle+1,___xxtofl@val+1
 15962  015904  0E00               	movlw	0
 15963  015906  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 15964  015908  0EFF               	movlw	-1
 15965  01590A  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 15966  01590C  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 15967  01590E  0E01               	movlw	1
 15968  015910  ECD8  F0AC         	call	___xxtofl
 15969  015914  C060  F06E         	movff	?___xxtofl,___flmul@b
 15970  015918  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 15971  01591C  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 15972  015920  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 15973  015924  ECD4  F09A         	call	___flmul	;wreg free
 15974  015928  C06E  F09F         	movff	?___flmul,___fltol@f1
 15975  01592C  C06F  F0A0         	movff	?___flmul+1,___fltol@f1+1
 15976  015930  C070  F0A1         	movff	?___flmul+2,___fltol@f1+2
 15977  015934  C071  F0A2         	movff	?___flmul+3,___fltol@f1+3
 15978  015938  ECC8  F0B4         	call	___fltol	;wreg free
 15979  01593C  C09F  F144         	movff	?___fltol,_Steps
 15980  015940  C0A0  F145         	movff	?___fltol+1,_Steps+1
 15981  015944                     l2481:
 15982                           
 15983                           ;dans.c: 560: }
 15984                           ;dans.c: 562: printf("%c", (char)35);
 15985  015944  0EFC               	movlw	low STR_1
 15986  015946  0100               	movlb	0	; () banked
 15987  015948  6F75               	movwf	printf@f& (0+255),b
 15988  01594A  0EFF               	movlw	high STR_1
 15989  01594C  6F76               	movwf	(printf@f+1)& (0+255),b
 15990  01594E  0E00               	movlw	0
 15991  015950  6F78               	movwf	(?_printf+3)& (0+255),b
 15992  015952  0E23               	movlw	35
 15993  015954  6F77               	movwf	(?_printf+2)& (0+255),b
 15994  015956  EC77  F0AB         	call	_printf	;wreg free
 15995                           
 15996                           ;dans.c: 563: printf("\nSteps %d", Steps);
 15997  01595A  0EC7               	movlw	low STR_31
 15998  01595C  0100               	movlb	0	; () banked
 15999  01595E  6F75               	movwf	printf@f& (0+255),b
 16000  015960  0EFF               	movlw	high STR_31
 16001  015962  6F76               	movwf	(printf@f+1)& (0+255),b
 16002  015964  C144  F077         	movff	_Steps,?_printf+2
 16003  015968  C145  F078         	movff	_Steps+1,?_printf+3
 16004  01596C  EC77  F0AB         	call	_printf	;wreg free
 16005                           
 16006                           ;dans.c: 564: printf("\nFlag %d", flag);
 16007  015970  0EDB               	movlw	low STR_32
 16008  015972  0100               	movlb	0	; () banked
 16009  015974  6F75               	movwf	printf@f& (0+255),b
 16010  015976  0EFF               	movlw	high STR_32
 16011  015978  6F76               	movwf	(printf@f+1)& (0+255),b
 16012  01597A  C02C  F077         	movff	_flag,?_printf+2
 16013  01597E  C02D  F078         	movff	_flag+1,?_printf+3
 16014  015982  EC77  F0AB         	call	_printf	;wreg free
 16015                           
 16016                           ;dans.c: 565: Console_Render();
 16017  015986  EC9B  F0A7         	call	_Console_Render	;wreg free
 16018                           
 16019                           ;dans.c: 566: while (Steps >= 0){
 16020  01598A  D006               	goto	l2482
 16021  01598C                     
 16022                           ;dans.c: 567: Steps --;
 16023  01598C  0101               	movlb	1	; () banked
 16024  01598E  0744               	decf	_Steps& (0+255),f,b
 16025  015990  A0D8               	btfss	status,0,c
 16026  015992  0745               	decf	(_Steps+1)& (0+255),f,b
 16027                           
 16028                           ; BSR set to: 1
 16029                           ;dans.c: 568: SteppingCW();
 16030  015994  ECBF  F0C0         	call	_SteppingCW	;wreg free
 16031  015998                     l2482:
 16032  015998  0101               	movlb	1	; () banked
 16033  01599A  BF45               	btfsc	(_Steps+1)& (0+255),7,b
 16034  01599C  D005               	goto	l2485
 16035  01599E  D7F6               	goto	l2483
 16036  0159A0                     
 16037                           ; BSR set to: 1
 16038                           ;dans.c: 571: Steps ++;
 16039                           
 16040                           ; BSR set to: 1
 16041  0159A0  4B44               	infsnz	_Steps& (0+255),f,b
 16042  0159A2  2B45               	incf	(_Steps+1)& (0+255),f,b
 16043                           
 16044                           ; BSR set to: 1
 16045                           ;dans.c: 572: SteppingCCW();
 16046  0159A4  EC09  F0C1         	call	_SteppingCCW	;wreg free
 16047  0159A8                     l2485:
 16048  0159A8  0101               	movlb	1	; () banked
 16049  0159AA  AF45               	btfss	(_Steps+1)& (0+255),7,b
 16050  0159AC  0012               	return	
 16051  0159AE  D7F8               	goto	l2486
 16052  0159B0                     __end_of_Move_ADC_To:
 16053                           	opt stack 0
 16054                           tosu	equ	0xFFF
 16055                           tosh	equ	0xFFE
 16056                           tosl	equ	0xFFD
 16057                           pclath	equ	0xFFA
 16058                           tblptru	equ	0xFF8
 16059                           tblptrh	equ	0xFF7
 16060                           tblptrl	equ	0xFF6
 16061                           tablat	equ	0xFF5
 16062                           prodh	equ	0xFF4
 16063                           prodl	equ	0xFF3
 16064                           intcon	equ	0xFF2
 16065                           postinc0	equ	0xFEE
 16066                           wreg	equ	0xFE8
 16067                           indf1	equ	0xFE7
 16068                           postdec1	equ	0xFE5
 16069                           fsr1h	equ	0xFE2
 16070                           fsr1l	equ	0xFE1
 16071                           indf2	equ	0xFDF
 16072                           postinc2	equ	0xFDE
 16073                           postdec2	equ	0xFDD
 16074                           plusw2	equ	0xFDB
 16075                           fsr2h	equ	0xFDA
 16076                           fsr2l	equ	0xFD9
 16077                           status	equ	0xFD8
 16078                           
 16079 ;; *************** function _SteppingCW *****************
 16080 ;; Defined at:
 16081 ;;		line 524 in file "dans.c"
 16082 ;; Parameters:    Size  Location     Type
 16083 ;;		None
 16084 ;; Auto vars:     Size  Location     Type
 16085 ;;		None
 16086 ;; Return value:  Size  Location     Type
 16087 ;;                  2  2002[None  ] int 
 16088 ;; Registers used:
 16089 ;;		wreg, status,2, status,0, cstack
 16090 ;; Tracked objects:
 16091 ;;		On entry : 0/0
 16092 ;;		On exit  : 0/0
 16093 ;;		Unchanged: 0/0
 16094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16099 ;;Total ram usage:        0 bytes
 16100 ;; Hardware stack levels used:    1
 16101 ;; Hardware stack levels required when called:    8
 16102 ;; This function calls:
 16103 ;;		_STP1
 16104 ;;		_STP2
 16105 ;;		_STP3
 16106 ;;		_STP4
 16107 ;;		_delay_ms
 16108 ;; This function is called by:
 16109 ;;		_Sensor_Observe
 16110 ;;		_Move_ADC_To
 16111 ;; This function uses a non-reentrant model
 16112 ;;
 16113                           
 16114                           	psect	text75
 16115  01817E                     __ptext75:
 16116                           	opt stack 0
 16117  01817E                     _SteppingCW:
 16118                           	opt stack 20
 16119                           
 16120                           ;dans.c: 525: STP1();
 16121                           
 16122                           ; BSR set to: 1
 16123                           ;incstack = 0
 16124  01817E  ECFF  F0C5         	call	_STP1	;wreg free
 16125                           
 16126                           ;dans.c: 526: delay_ms(2);
 16127  018182  0E00               	movlw	0
 16128  018184  0100               	movlb	0	; () banked
 16129  018186  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 16130  018188  0E02               	movlw	2
 16131  01818A  6F60               	movwf	delay_ms@ms& (0+255),b
 16132  01818C  ECAD  F0BE         	call	_delay_ms	;wreg free
 16133                           
 16134                           ;dans.c: 527: STP2();
 16135  018190  ECF5  F0C5         	call	_STP2	;wreg free
 16136                           
 16137                           ;dans.c: 528: delay_ms(2);
 16138  018194  0E00               	movlw	0
 16139  018196  0100               	movlb	0	; () banked
 16140  018198  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 16141  01819A  0E02               	movlw	2
 16142  01819C  6F60               	movwf	delay_ms@ms& (0+255),b
 16143  01819E  ECAD  F0BE         	call	_delay_ms	;wreg free
 16144                           
 16145                           ;dans.c: 529: STP3();
 16146  0181A2  ECEB  F0C5         	call	_STP3	;wreg free
 16147                           
 16148                           ;dans.c: 530: delay_ms(2);
 16149  0181A6  0E00               	movlw	0
 16150  0181A8  0100               	movlb	0	; () banked
 16151  0181AA  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 16152  0181AC  0E02               	movlw	2
 16153  0181AE  6F60               	movwf	delay_ms@ms& (0+255),b
 16154  0181B0  ECAD  F0BE         	call	_delay_ms	;wreg free
 16155                           
 16156                           ;dans.c: 531: STP4();
 16157  0181B4  ECE1  F0C5         	call	_STP4	;wreg free
 16158                           
 16159                           ;dans.c: 532: delay_ms(2);
 16160  0181B8  0E00               	movlw	0
 16161  0181BA  0100               	movlb	0	; () banked
 16162  0181BC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 16163  0181BE  0E02               	movlw	2
 16164  0181C0  6F60               	movwf	delay_ms@ms& (0+255),b
 16165  0181C2  ECAD  F0BE         	call	_delay_ms	;wreg free
 16166  0181C6  0012               	return		;funcret
 16167  0181C8                     __end_of_SteppingCW:
 16168                           	opt stack 0
 16169                           tosu	equ	0xFFF
 16170                           tosh	equ	0xFFE
 16171                           tosl	equ	0xFFD
 16172                           pclath	equ	0xFFA
 16173                           tblptru	equ	0xFF8
 16174                           tblptrh	equ	0xFF7
 16175                           tblptrl	equ	0xFF6
 16176                           tablat	equ	0xFF5
 16177                           prodh	equ	0xFF4
 16178                           prodl	equ	0xFF3
 16179                           intcon	equ	0xFF2
 16180                           postinc0	equ	0xFEE
 16181                           wreg	equ	0xFE8
 16182                           indf1	equ	0xFE7
 16183                           postdec1	equ	0xFE5
 16184                           fsr1h	equ	0xFE2
 16185                           fsr1l	equ	0xFE1
 16186                           indf2	equ	0xFDF
 16187                           postinc2	equ	0xFDE
 16188                           postdec2	equ	0xFDD
 16189                           plusw2	equ	0xFDB
 16190                           fsr2h	equ	0xFDA
 16191                           fsr2l	equ	0xFD9
 16192                           status	equ	0xFD8
 16193                           
 16194 ;; *************** function _Get_VirtualWall_State *****************
 16195 ;; Defined at:
 16196 ;;		line 302 in file "dans.c"
 16197 ;; Parameters:    Size  Location     Type
 16198 ;;		None
 16199 ;; Auto vars:     Size  Location     Type
 16200 ;;  Vitual_Wall_    2    4[BANK0 ] int 
 16201 ;; Return value:  Size  Location     Type
 16202 ;;                  2    1[BANK0 ] int 
 16203 ;; Registers used:
 16204 ;;		wreg, status,2, status,0, cstack
 16205 ;; Tracked objects:
 16206 ;;		On entry : 0/0
 16207 ;;		On exit  : 0/0
 16208 ;;		Unchanged: 0/0
 16209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16210 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16211 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16213 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16214 ;;Total ram usage:        5 bytes
 16215 ;; Hardware stack levels used:    1
 16216 ;; Hardware stack levels required when called:    8
 16217 ;; This function calls:
 16218 ;;		_eusartRec
 16219 ;;		_eusartSend
 16220 ;; This function is called by:
 16221 ;;		_Travel
 16222 ;; This function uses a non-reentrant model
 16223 ;;
 16224                           
 16225                           	psect	text76
 16226  018902                     __ptext76:
 16227                           	opt stack 0
 16228  018902                     _Get_VirtualWall_State:
 16229                           	opt stack 21
 16230                           
 16231                           ;dans.c: 303: eusartSend(142);
 16232                           
 16233                           ;incstack = 0
 16234  018902  0E8E               	movlw	142
 16235  018904  EC20  F0C6         	call	_eusartSend
 16236                           
 16237                           ;dans.c: 304: eusartSend(13);
 16238  018908  0E0D               	movlw	13
 16239  01890A  EC20  F0C6         	call	_eusartSend
 16240                           
 16241                           ;dans.c: 305: int Vitual_Wall_Sensor = (eusartRec());
 16242  01890E  EC54  F0C6         	call	_eusartRec	;wreg free
 16243  018912  0100               	movlb	0	; () banked
 16244  018914  6F63               	movwf	??_Get_VirtualWall_State& (0+255),b
 16245  018916  5163               	movf	??_Get_VirtualWall_State& (0+255),w,b
 16246  018918  6F64               	movwf	Get_VirtualWall_State@Vitual_Wall_Sensor& (0+255),b
 16247  01891A  6B65               	clrf	(Get_VirtualWall_State@Vitual_Wall_Sensor+1)& (0+255),b
 16248                           
 16249                           ; BSR set to: 0
 16250                           ;dans.c: 306: return Vitual_Wall_Sensor;
 16251  01891C  C064  F061         	movff	Get_VirtualWall_State@Vitual_Wall_Sensor,?_Get_VirtualWall_State
 16252  018920  C065  F062         	movff	Get_VirtualWall_State@Vitual_Wall_Sensor+1,?_Get_VirtualWall_State+1
 16253  018924  0012               	return	
 16254  018926                     __end_of_Get_VirtualWall_State:
 16255                           	opt stack 0
 16256                           tosu	equ	0xFFF
 16257                           tosh	equ	0xFFE
 16258                           tosl	equ	0xFFD
 16259                           pclath	equ	0xFFA
 16260                           tblptru	equ	0xFF8
 16261                           tblptrh	equ	0xFF7
 16262                           tblptrl	equ	0xFF6
 16263                           tablat	equ	0xFF5
 16264                           prodh	equ	0xFF4
 16265                           prodl	equ	0xFF3
 16266                           intcon	equ	0xFF2
 16267                           postinc0	equ	0xFEE
 16268                           wreg	equ	0xFE8
 16269                           indf1	equ	0xFE7
 16270                           postdec1	equ	0xFE5
 16271                           fsr1h	equ	0xFE2
 16272                           fsr1l	equ	0xFE1
 16273                           indf2	equ	0xFDF
 16274                           postinc2	equ	0xFDE
 16275                           postdec2	equ	0xFDD
 16276                           plusw2	equ	0xFDB
 16277                           fsr2h	equ	0xFDA
 16278                           fsr2l	equ	0xFD9
 16279                           status	equ	0xFD8
 16280                           
 16281 ;; *************** function _Drive *****************
 16282 ;; Defined at:
 16283 ;;		line 270 in file "dans.c"
 16284 ;; Parameters:    Size  Location     Type
 16285 ;;  SpeedL          2    1[BANK0 ] int 
 16286 ;;  SpeedR          2    3[BANK0 ] int 
 16287 ;; Auto vars:     Size  Location     Type
 16288 ;;		None
 16289 ;; Return value:  Size  Location     Type
 16290 ;;                  1    wreg      void 
 16291 ;; Registers used:
 16292 ;;		wreg, status,2, status,0, cstack
 16293 ;; Tracked objects:
 16294 ;;		On entry : 0/0
 16295 ;;		On exit  : 0/0
 16296 ;;		Unchanged: 0/0
 16297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16298 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16301 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16302 ;;Total ram usage:        4 bytes
 16303 ;; Hardware stack levels used:    1
 16304 ;; Hardware stack levels required when called:    8
 16305 ;; This function calls:
 16306 ;;		_eusartSend
 16307 ;; This function is called by:
 16308 ;;		_Travel
 16309 ;; This function uses a non-reentrant model
 16310 ;;
 16311                           
 16312                           	psect	text77
 16313  0181C8                     __ptext77:
 16314                           	opt stack 0
 16315  0181C8                     _Drive:
 16316                           	opt stack 21
 16317                           
 16318                           ;dans.c: 271: if (SpeedL < 0){
 16319                           
 16320                           ; BSR set to: 0
 16321                           ;incstack = 0
 16322  0181C8  0100               	movlb	0	; () banked
 16323  0181CA  AF62               	btfss	(Drive@SpeedL+1)& (0+255),7,b
 16324  0181CC  D006               	goto	l2396
 16325                           
 16326                           ; BSR set to: 0
 16327                           ;dans.c: 272: SpeedL = -1*SpeedL;
 16328  0181CE  6D61               	negf	Drive@SpeedL& (0+255),b
 16329  0181D0  1F62               	comf	(Drive@SpeedL+1)& (0+255),f,b
 16330  0181D2  B0D8               	btfsc	status,0,c
 16331  0181D4  2B62               	incf	(Drive@SpeedL+1)& (0+255),f,b
 16332                           
 16333                           ;dans.c: 273: SpeedL = ~SpeedL;
 16334  0181D6  1F61               	comf	Drive@SpeedL& (0+255),f,b
 16335  0181D8  1F62               	comf	(Drive@SpeedL+1)& (0+255),f,b
 16336  0181DA                     l2396:
 16337                           
 16338                           ; BSR set to: 0
 16339                           ;dans.c: 274: }
 16340                           ;dans.c: 275: if (SpeedR < 0){
 16341                           
 16342                           ; BSR set to: 0
 16343  0181DA  AF64               	btfss	(Drive@SpeedR+1)& (0+255),7,b
 16344  0181DC  D006               	goto	l2397
 16345                           
 16346                           ; BSR set to: 0
 16347                           ;dans.c: 276: SpeedR = -1*SpeedR;
 16348  0181DE  6D63               	negf	Drive@SpeedR& (0+255),b
 16349  0181E0  1F64               	comf	(Drive@SpeedR+1)& (0+255),f,b
 16350  0181E2  B0D8               	btfsc	status,0,c
 16351  0181E4  2B64               	incf	(Drive@SpeedR+1)& (0+255),f,b
 16352                           
 16353                           ;dans.c: 277: SpeedR = ~SpeedR;
 16354  0181E6  1F63               	comf	Drive@SpeedR& (0+255),f,b
 16355  0181E8  1F64               	comf	(Drive@SpeedR+1)& (0+255),f,b
 16356  0181EA                     l2397:
 16357                           
 16358                           ; BSR set to: 0
 16359                           ;dans.c: 278: }
 16360                           ;dans.c: 280: eusartSend(145);
 16361                           
 16362                           ; BSR set to: 0
 16363  0181EA  0E91               	movlw	145
 16364  0181EC  EC20  F0C6         	call	_eusartSend
 16365                           
 16366                           ;dans.c: 281: eusartSend(((unsigned char)(((SpeedL)>>8)&0xFF)));
 16367  0181F0  0100               	movlb	0	; () banked
 16368  0181F2  5162               	movf	(Drive@SpeedL+1)& (0+255),w,b
 16369  0181F4  EC20  F0C6         	call	_eusartSend
 16370                           
 16371                           ;dans.c: 282: eusartSend(((unsigned char)((SpeedL)&0xFF)));
 16372  0181F8  0100               	movlb	0	; () banked
 16373  0181FA  5161               	movf	Drive@SpeedL& (0+255),w,b
 16374  0181FC  EC20  F0C6         	call	_eusartSend
 16375                           
 16376                           ;dans.c: 283: eusartSend(((unsigned char)(((SpeedR)>>8)&0xFF)));
 16377  018200  0100               	movlb	0	; () banked
 16378  018202  5164               	movf	(Drive@SpeedR+1)& (0+255),w,b
 16379  018204  EC20  F0C6         	call	_eusartSend
 16380                           
 16381                           ;dans.c: 284: eusartSend(((unsigned char)((SpeedR)&0xFF)));
 16382  018208  0100               	movlb	0	; () banked
 16383  01820A  5163               	movf	Drive@SpeedR& (0+255),w,b
 16384  01820C  EC20  F0C6         	call	_eusartSend
 16385  018210  0012               	return		;funcret
 16386  018212                     __end_of_Drive:
 16387                           	opt stack 0
 16388                           tosu	equ	0xFFF
 16389                           tosh	equ	0xFFE
 16390                           tosl	equ	0xFFD
 16391                           pclath	equ	0xFFA
 16392                           tblptru	equ	0xFF8
 16393                           tblptrh	equ	0xFF7
 16394                           tblptrl	equ	0xFF6
 16395                           tablat	equ	0xFF5
 16396                           prodh	equ	0xFF4
 16397                           prodl	equ	0xFF3
 16398                           intcon	equ	0xFF2
 16399                           postinc0	equ	0xFEE
 16400                           wreg	equ	0xFE8
 16401                           indf1	equ	0xFE7
 16402                           postdec1	equ	0xFE5
 16403                           fsr1h	equ	0xFE2
 16404                           fsr1l	equ	0xFE1
 16405                           indf2	equ	0xFDF
 16406                           postinc2	equ	0xFDE
 16407                           postdec2	equ	0xFDD
 16408                           plusw2	equ	0xFDB
 16409                           fsr2h	equ	0xFDA
 16410                           fsr2l	equ	0xFD9
 16411                           status	equ	0xFD8
 16412                           
 16413 ;; *************** function _FunctInitButton *****************
 16414 ;; Defined at:
 16415 ;;		line 16 in file "Functions.c"
 16416 ;; Parameters:    Size  Location     Type
 16417 ;;		None
 16418 ;; Auto vars:     Size  Location     Type
 16419 ;;		None
 16420 ;; Return value:  Size  Location     Type
 16421 ;;                  1    wreg      void 
 16422 ;; Registers used:
 16423 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16424 ;; Tracked objects:
 16425 ;;		On entry : 0/0
 16426 ;;		On exit  : 0/0
 16427 ;;		Unchanged: 0/0
 16428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16433 ;;Total ram usage:        0 bytes
 16434 ;; Hardware stack levels used:    1
 16435 ;; Hardware stack levels required when called:   16
 16436 ;; This function calls:
 16437 ;;		_Button_Init
 16438 ;; This function is called by:
 16439 ;;		_main
 16440 ;; This function uses a non-reentrant model
 16441 ;;
 16442                           
 16443                           	psect	text78
 16444  0177A4                     __ptext78:
 16445                           	opt stack 0
 16446  0177A4                     _FunctInitButton:
 16447                           	opt stack 14
 16448                           
 16449                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 16450                           
 16451                           ;incstack = 0
 16452  0177A4  0EDD               	movlw	low _TestButton
 16453  0177A6  0100               	movlb	0	; () banked
 16454  0177A8  6F9B               	movwf	Button_Init@pInput& (0+255),b
 16455  0177AA  0E02               	movlw	high _TestButton
 16456  0177AC  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 16457  0177AE  0E00               	movlw	0
 16458  0177B0  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16459  0177B2  0E02               	movlw	2
 16460  0177B4  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16461  0177B6  0ECA               	movlw	low _MXK_InitTestButton
 16462  0177B8  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 16463  0177BA  0E8A               	movlw	high _MXK_InitTestButton
 16464  0177BC  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16465  0177BE  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 16466  0177C0  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16467  0177C2  0E86               	movlw	low _MXK_TestButton
 16468  0177C4  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 16469  0177C6  0E8B               	movlw	high _MXK_TestButton
 16470  0177C8  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16471  0177CA  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 16472  0177CC  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16473  0177CE  0E8E               	movlw	low _Event_TestButton
 16474  0177D0  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 16475  0177D2  0E86               	movlw	high _Event_TestButton
 16476  0177D4  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16477  0177D6  0E01               	movlw	low (_Event_TestButton shr (0+16))
 16478  0177D8  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16479  0177DA  ECF0  F0B5         	call	_Button_Init	;wreg free
 16480                           
 16481                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 16482  0177DE  0ED3               	movlw	low _DIPSwitch
 16483  0177E0  0100               	movlb	0	; () banked
 16484  0177E2  6F9B               	movwf	Button_Init@pInput& (0+255),b
 16485  0177E4  0E02               	movlw	high _DIPSwitch
 16486  0177E6  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 16487  0177E8  0E00               	movlw	0
 16488  0177EA  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16489  0177EC  0E02               	movlw	2
 16490  0177EE  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16491  0177F0  0EB2               	movlw	low _MXK_InitDIPSwitch
 16492  0177F2  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 16493  0177F4  0E8A               	movlw	high _MXK_InitDIPSwitch
 16494  0177F6  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16495  0177F8  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 16496  0177FA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16497  0177FC  0E0E               	movlw	low _MXK_DIPSwitch
 16498  0177FE  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 16499  017800  0E8B               	movlw	high _MXK_DIPSwitch
 16500  017802  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16501  017804  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 16502  017806  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16503  017808  0EB6               	movlw	low _Event_DIPSwitch
 16504  01780A  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 16505  01780C  0E88               	movlw	high _Event_DIPSwitch
 16506  01780E  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16507  017810  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 16508  017812  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16509  017814  ECF0  F0B5         	call	_Button_Init	;wreg free
 16510  017818  0012               	return		;funcret
 16511  01781A                     __end_of_FunctInitButton:
 16512                           	opt stack 0
 16513                           tosu	equ	0xFFF
 16514                           tosh	equ	0xFFE
 16515                           tosl	equ	0xFFD
 16516                           pclath	equ	0xFFA
 16517                           tblptru	equ	0xFF8
 16518                           tblptrh	equ	0xFF7
 16519                           tblptrl	equ	0xFF6
 16520                           tablat	equ	0xFF5
 16521                           prodh	equ	0xFF4
 16522                           prodl	equ	0xFF3
 16523                           intcon	equ	0xFF2
 16524                           postinc0	equ	0xFEE
 16525                           wreg	equ	0xFE8
 16526                           indf1	equ	0xFE7
 16527                           postdec1	equ	0xFE5
 16528                           fsr1h	equ	0xFE2
 16529                           fsr1l	equ	0xFE1
 16530                           indf2	equ	0xFDF
 16531                           postinc2	equ	0xFDE
 16532                           postdec2	equ	0xFDD
 16533                           plusw2	equ	0xFDB
 16534                           fsr2h	equ	0xFDA
 16535                           fsr2l	equ	0xFD9
 16536                           status	equ	0xFD8
 16537                           
 16538 ;; *************** function _Button_Init *****************
 16539 ;; Defined at:
 16540 ;;		line 18 in file "Library/Button.c"
 16541 ;; Parameters:    Size  Location     Type
 16542 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 16543 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 16544 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 16545 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 16546 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 16547 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 16548 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 16549 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 16550 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 16551 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 16552 ;; Auto vars:     Size  Location     Type
 16553 ;;		None
 16554 ;; Return value:  Size  Location     Type
 16555 ;;                  1    wreg      void 
 16556 ;; Registers used:
 16557 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16558 ;; Tracked objects:
 16559 ;;		On entry : 0/0
 16560 ;;		On exit  : 0/0
 16561 ;;		Unchanged: 0/0
 16562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16563 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16566 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16567 ;;Total ram usage:       13 bytes
 16568 ;; Hardware stack levels used:    1
 16569 ;; Hardware stack levels required when called:   15
 16570 ;; This function calls:
 16571 ;;		_HMI_InitButtons
 16572 ;;		_MXK_InitDIPSwitch
 16573 ;;		_MXK_InitTestButton
 16574 ;; This function is called by:
 16575 ;;		_HMI_Init
 16576 ;;		_FunctInitButton
 16577 ;; This function uses a non-reentrant model
 16578 ;;
 16579                           
 16580                           	psect	text79
 16581  016BE0                     __ptext79:
 16582                           	opt stack 0
 16583  016BE0                     _Button_Init:
 16584                           	opt stack 14
 16585                           
 16586                           ;Button.c: 21: if(pInput==(void*)0)
 16587                           
 16588                           ;incstack = 0
 16589  016BE0  0100               	movlb	0	; () banked
 16590  016BE2  519B               	movf	Button_Init@pInput& (0+255),w,b
 16591  016BE4  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 16592  016BE6  B4D8               	btfsc	status,2,c
 16593  016BE8  0012               	return	
 16594                           
 16595                           ; BSR set to: 0
 16596                           ;Button.c: 23: if(pInitIO==(void*)0)
 16597                           
 16598                           ; BSR set to: 0
 16599                           
 16600                           ; BSR set to: 0
 16601                           ;Button.c: 22: return;
 16602  016BEA  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 16603  016BEC  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 16604  016BEE  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 16605  016BF0  B4D8               	btfsc	status,2,c
 16606  016BF2  0012               	return	
 16607                           
 16608                           ; BSR set to: 0
 16609                           ;Button.c: 25: if(pGetState==(void*)0)
 16610                           
 16611                           ; BSR set to: 0
 16612                           
 16613                           ; BSR set to: 0
 16614                           ;Button.c: 24: return;
 16615  016BF4  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 16616  016BF6  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 16617  016BF8  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 16618  016BFA  B4D8               	btfsc	status,2,c
 16619  016BFC  0012               	return	
 16620                           
 16621                           ; BSR set to: 0
 16622                           ;Button.c: 27: if(pFunction==(void*)0)
 16623                           
 16624                           ; BSR set to: 0
 16625                           
 16626                           ; BSR set to: 0
 16627                           ;Button.c: 26: return;
 16628  016BFE  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 16629  016C00  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 16630  016C02  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 16631  016C04  B4D8               	btfsc	status,2,c
 16632  016C06  0012               	return	
 16633                           
 16634                           ; BSR set to: 0
 16635                           ;Button.c: 30: if(pThreshold == 0)
 16636                           
 16637                           ; BSR set to: 0
 16638                           
 16639                           ; BSR set to: 0
 16640                           ;Button.c: 28: return;
 16641  016C08  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 16642  016C0A  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 16643  016C0C  A4D8               	btfss	status,2,c
 16644  016C0E  D004               	goto	l8
 16645                           
 16646                           ; BSR set to: 0
 16647                           ;Button.c: 31: pThreshold = 1;
 16648  016C10  0E00               	movlw	0
 16649  016C12  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16650  016C14  0E01               	movlw	1
 16651  016C16  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16652  016C18                     l8:
 16653                           
 16654                           ; BSR set to: 0
 16655                           ;Button.c: 34: pInput->mState = 0;
 16656                           
 16657                           ; BSR set to: 0
 16658  016C18  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 16659  016C1C  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 16660  016C20  0E00               	movlw	0
 16661  016C22  6EDF               	movwf	indf2,c
 16662                           
 16663                           ; BSR set to: 0
 16664                           ;Button.c: 35: pInput->mCount = 0;
 16665  016C24  EE20 F001          	lfsr	2,1
 16666  016C28  519B               	movf	Button_Init@pInput& (0+255),w,b
 16667  016C2A  26D9               	addwf	fsr2l,f,c
 16668  016C2C  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16669  016C2E  22DA               	addwfc	fsr2h,f,c
 16670  016C30  0E00               	movlw	0
 16671  016C32  6EDF               	movwf	indf2,c
 16672                           
 16673                           ; BSR set to: 0
 16674                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 16675  016C34  EE20 F002          	lfsr	2,2
 16676  016C38  519B               	movf	Button_Init@pInput& (0+255),w,b
 16677  016C3A  26D9               	addwf	fsr2l,f,c
 16678  016C3C  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16679  016C3E  22DA               	addwfc	fsr2h,f,c
 16680  016C40  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 16681  016C44  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 16682                           
 16683                           ; BSR set to: 0
 16684                           ;Button.c: 37: pInput->mFunction = pFunction;
 16685  016C48  EE20 F004          	lfsr	2,4
 16686  016C4C  519B               	movf	Button_Init@pInput& (0+255),w,b
 16687  016C4E  26D9               	addwf	fsr2l,f,c
 16688  016C50  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16689  016C52  22DA               	addwfc	fsr2h,f,c
 16690  016C54  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 16691  016C58  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 16692  016C5C  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 16693                           
 16694                           ; BSR set to: 0
 16695                           ;Button.c: 38: pInput->mGetState = pGetState;
 16696  016C60  EE20 F007          	lfsr	2,7
 16697  016C64  519B               	movf	Button_Init@pInput& (0+255),w,b
 16698  016C66  26D9               	addwf	fsr2l,f,c
 16699  016C68  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16700  016C6A  22DA               	addwfc	fsr2h,f,c
 16701  016C6C  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 16702  016C70  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 16703  016C74  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 16704                           
 16705                           ; BSR set to: 0
 16706                           ;Button.c: 41: pInitIO();
 16707  016C78  D801               	call	u13548
 16708  016C7A  0012               	return	
 16709  016C7C                     u13548:
 16710  016C7C  0005               	push	
 16711  016C7E  6EFA               	movwf	pclath,c
 16712  016C80  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 16713  016C82  6EFD               	movwf	tosl,c
 16714  016C84  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 16715  016C86  6EFE               	movwf	tosh,c
 16716  016C88  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 16717  016C8A  6EFF               	movwf	tosu,c
 16718  016C8C  50FA               	movf	pclath,w,c
 16719  016C8E  0012               	return		;indir
 16720  016C90                     __end_of_Button_Init:
 16721                           	opt stack 0
 16722                           tosu	equ	0xFFF
 16723                           tosh	equ	0xFFE
 16724                           tosl	equ	0xFFD
 16725                           pclath	equ	0xFFA
 16726                           tblptru	equ	0xFF8
 16727                           tblptrh	equ	0xFF7
 16728                           tblptrl	equ	0xFF6
 16729                           tablat	equ	0xFF5
 16730                           prodh	equ	0xFF4
 16731                           prodl	equ	0xFF3
 16732                           intcon	equ	0xFF2
 16733                           postinc0	equ	0xFEE
 16734                           wreg	equ	0xFE8
 16735                           indf1	equ	0xFE7
 16736                           postdec1	equ	0xFE5
 16737                           fsr1h	equ	0xFE2
 16738                           fsr1l	equ	0xFE1
 16739                           indf2	equ	0xFDF
 16740                           postinc2	equ	0xFDE
 16741                           postdec2	equ	0xFDD
 16742                           plusw2	equ	0xFDB
 16743                           fsr2h	equ	0xFDA
 16744                           fsr2l	equ	0xFD9
 16745                           status	equ	0xFD8
 16746                           
 16747 ;; *************** function _MXK_InitDIPSwitch *****************
 16748 ;; Defined at:
 16749 ;;		line 20 in file "Library/MXK.c"
 16750 ;; Parameters:    Size  Location     Type
 16751 ;;		None
 16752 ;; Auto vars:     Size  Location     Type
 16753 ;;		None
 16754 ;; Return value:  Size  Location     Type
 16755 ;;                  1    wreg      void 
 16756 ;; Registers used:
 16757 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16758 ;; Tracked objects:
 16759 ;;		On entry : 0/0
 16760 ;;		On exit  : 0/0
 16761 ;;		Unchanged: 0/0
 16762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16767 ;;Total ram usage:        0 bytes
 16768 ;; Hardware stack levels used:    1
 16769 ;; Hardware stack levels required when called:   14
 16770 ;; This function calls:
 16771 ;;		_Port_SetQuadType
 16772 ;; This function is called by:
 16773 ;;		_FunctInitButton
 16774 ;;		_Button_Init
 16775 ;; This function uses a non-reentrant model
 16776 ;;
 16777                           
 16778                           	psect	text80
 16779  018AB2                     __ptext80:
 16780                           	opt stack 0
 16781  018AB2                     _MXK_InitDIPSwitch:
 16782                           	opt stack 14
 16783                           
 16784                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 16785                           
 16786                           ;incstack = 0
 16787  018AB2  0E76               	movlw	low _PortD
 16788  018AB4  0100               	movlb	0	; () banked
 16789  018AB6  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 16790  018AB8  0E01               	movlw	high _PortD
 16791  018ABA  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 16792  018ABC  0E00               	movlw	0
 16793  018ABE  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 16794  018AC0  0E00               	movlw	0
 16795  018AC2  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 16796  018AC4  ECC0  F0A4         	call	_Port_SetQuadType	;wreg free
 16797  018AC8  0012               	return		;funcret
 16798  018ACA                     __end_of_MXK_InitDIPSwitch:
 16799                           	opt stack 0
 16800                           tosu	equ	0xFFF
 16801                           tosh	equ	0xFFE
 16802                           tosl	equ	0xFFD
 16803                           pclath	equ	0xFFA
 16804                           tblptru	equ	0xFF8
 16805                           tblptrh	equ	0xFF7
 16806                           tblptrl	equ	0xFF6
 16807                           tablat	equ	0xFF5
 16808                           prodh	equ	0xFF4
 16809                           prodl	equ	0xFF3
 16810                           intcon	equ	0xFF2
 16811                           postinc0	equ	0xFEE
 16812                           wreg	equ	0xFE8
 16813                           indf1	equ	0xFE7
 16814                           postdec1	equ	0xFE5
 16815                           fsr1h	equ	0xFE2
 16816                           fsr1l	equ	0xFE1
 16817                           indf2	equ	0xFDF
 16818                           postinc2	equ	0xFDE
 16819                           postdec2	equ	0xFDD
 16820                           plusw2	equ	0xFDB
 16821                           fsr2h	equ	0xFDA
 16822                           fsr2l	equ	0xFD9
 16823                           status	equ	0xFD8
 16824                           
 16825 ;; *************** function _HMI_InitButtons *****************
 16826 ;; Defined at:
 16827 ;;		line 21 in file "HMI.c"
 16828 ;; Parameters:    Size  Location     Type
 16829 ;;		None
 16830 ;; Auto vars:     Size  Location     Type
 16831 ;;		None
 16832 ;; Return value:  Size  Location     Type
 16833 ;;                  1    wreg      void 
 16834 ;; Registers used:
 16835 ;;		wreg, status,2
 16836 ;; Tracked objects:
 16837 ;;		On entry : 0/0
 16838 ;;		On exit  : 0/0
 16839 ;;		Unchanged: 0/0
 16840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16845 ;;Total ram usage:        0 bytes
 16846 ;; Hardware stack levels used:    1
 16847 ;; Hardware stack levels required when called:    7
 16848 ;; This function calls:
 16849 ;;		Nothing
 16850 ;; This function is called by:
 16851 ;;		_HMI_Init
 16852 ;;		_Button_Init
 16853 ;; This function uses a non-reentrant model
 16854 ;;
 16855                           
 16856                           	psect	text81
 16857  018CBC                     __ptext81:
 16858                           	opt stack 0
 16859  018CBC                     _HMI_InitButtons:
 16860                           	opt stack 21
 16861                           
 16862                           ;HMI.c: 23: TRISE = 0xFC;
 16863                           
 16864                           ;incstack = 0
 16865  018CBC  0EFC               	movlw	252
 16866  018CBE  6E96               	movwf	3990,c	;volatile
 16867  018CC0  0012               	return		;funcret
 16868  018CC2                     __end_of_HMI_InitButtons:
 16869                           	opt stack 0
 16870                           tosu	equ	0xFFF
 16871                           tosh	equ	0xFFE
 16872                           tosl	equ	0xFFD
 16873                           pclath	equ	0xFFA
 16874                           tblptru	equ	0xFF8
 16875                           tblptrh	equ	0xFF7
 16876                           tblptrl	equ	0xFF6
 16877                           tablat	equ	0xFF5
 16878                           prodh	equ	0xFF4
 16879                           prodl	equ	0xFF3
 16880                           intcon	equ	0xFF2
 16881                           postinc0	equ	0xFEE
 16882                           wreg	equ	0xFE8
 16883                           indf1	equ	0xFE7
 16884                           postdec1	equ	0xFE5
 16885                           fsr1h	equ	0xFE2
 16886                           fsr1l	equ	0xFE1
 16887                           indf2	equ	0xFDF
 16888                           postinc2	equ	0xFDE
 16889                           postdec2	equ	0xFDD
 16890                           plusw2	equ	0xFDB
 16891                           fsr2h	equ	0xFDA
 16892                           fsr2l	equ	0xFD9
 16893                           status	equ	0xFD8
 16894                           
 16895 ;; *************** function _MXK_InitTestButton *****************
 16896 ;; Defined at:
 16897 ;;		line 10 in file "Library/MXK.c"
 16898 ;; Parameters:    Size  Location     Type
 16899 ;;		None
 16900 ;; Auto vars:     Size  Location     Type
 16901 ;;		None
 16902 ;; Return value:  Size  Location     Type
 16903 ;;                  1    wreg      void 
 16904 ;; Registers used:
 16905 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16906 ;; Tracked objects:
 16907 ;;		On entry : 0/0
 16908 ;;		On exit  : 0/0
 16909 ;;		Unchanged: 0/0
 16910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16915 ;;Total ram usage:        0 bytes
 16916 ;; Hardware stack levels used:    1
 16917 ;; Hardware stack levels required when called:   12
 16918 ;; This function calls:
 16919 ;;		_Port_SetPinType
 16920 ;; This function is called by:
 16921 ;;		_FunctInitButton
 16922 ;;		_Button_Init
 16923 ;; This function uses a non-reentrant model
 16924 ;;
 16925                           
 16926                           	psect	text82
 16927  018ACA                     __ptext82:
 16928                           	opt stack 0
 16929  018ACA                     _MXK_InitTestButton:
 16930                           	opt stack 16
 16931                           
 16932                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 16933                           
 16934                           ;incstack = 0
 16935  018ACA  0E80               	movlw	low _PortB
 16936  018ACC  0100               	movlb	0	; () banked
 16937  018ACE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16938  018AD0  0E01               	movlw	high _PortB
 16939  018AD2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16940  018AD4  0E04               	movlw	4
 16941  018AD6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16942  018AD8  0E00               	movlw	0
 16943  018ADA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16944  018ADC  EC76  F0A8         	call	_Port_SetPinType	;wreg free
 16945  018AE0  0012               	return		;funcret
 16946  018AE2                     __end_of_MXK_InitTestButton:
 16947                           	opt stack 0
 16948                           tosu	equ	0xFFF
 16949                           tosh	equ	0xFFE
 16950                           tosl	equ	0xFFD
 16951                           pclath	equ	0xFFA
 16952                           tblptru	equ	0xFF8
 16953                           tblptrh	equ	0xFF7
 16954                           tblptrl	equ	0xFF6
 16955                           tablat	equ	0xFF5
 16956                           prodh	equ	0xFF4
 16957                           prodl	equ	0xFF3
 16958                           intcon	equ	0xFF2
 16959                           postinc0	equ	0xFEE
 16960                           wreg	equ	0xFE8
 16961                           indf1	equ	0xFE7
 16962                           postdec1	equ	0xFE5
 16963                           fsr1h	equ	0xFE2
 16964                           fsr1l	equ	0xFE1
 16965                           indf2	equ	0xFDF
 16966                           postinc2	equ	0xFDE
 16967                           postdec2	equ	0xFDD
 16968                           plusw2	equ	0xFDB
 16969                           fsr2h	equ	0xFDA
 16970                           fsr2l	equ	0xFD9
 16971                           status	equ	0xFD8
 16972                           
 16973 ;; *************** function _Port_SetPinType *****************
 16974 ;; Defined at:
 16975 ;;		line 189 in file "Library/Port.c"
 16976 ;; Parameters:    Size  Location     Type
 16977 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 16978 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16979 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16980 ;;  pPin            1   40[BANK0 ] enum E6750
 16981 ;;  pType           1   41[BANK0 ] enum E6795
 16982 ;; Auto vars:     Size  Location     Type
 16983 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 16984 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 16985 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 16986 ;;  Output          1   42[BANK0 ] enum E6475
 16987 ;; Return value:  Size  Location     Type
 16988 ;;                  1    wreg      enum E6475
 16989 ;; Registers used:
 16990 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16991 ;; Tracked objects:
 16992 ;;		On entry : 0/0
 16993 ;;		On exit  : 0/0
 16994 ;;		Unchanged: 0/0
 16995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16996 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16997 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16999 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17000 ;;Total ram usage:        7 bytes
 17001 ;; Hardware stack levels used:    1
 17002 ;; Hardware stack levels required when called:   11
 17003 ;; This function calls:
 17004 ;;		_Byte_SetBit
 17005 ;;		_PortProperty_Valid
 17006 ;;		_Word_SetPair
 17007 ;; This function is called by:
 17008 ;;		_Configure_GPIOs
 17009 ;;		_LED_Init
 17010 ;;		_Port_Init
 17011 ;;		_SPI_Init
 17012 ;;		_MXK_InitTestButton
 17013 ;;		_MXK_Init
 17014 ;;		_I2C_Init
 17015 ;;		_Motor_Init
 17016 ;; This function uses a non-reentrant model
 17017 ;;
 17018                           
 17019                           	psect	text83
 17020  0150EC                     __ptext83:
 17021                           	opt stack 0
 17022  0150EC                     _Port_SetPinType:
 17023                           	opt stack 18
 17024                           
 17025                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 17026                           
 17027                           ;incstack = 0
 17028  0150EC  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 17029  0150F0  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 17030  0150F4  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 17031  0150F8  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 17032                           
 17033                           ;Port.c: 192: ePinError Output = ePinErrorState;
 17034  0150FC  0E05               	movlw	5
 17035  0150FE  0100               	movlb	0	; () banked
 17036  015100  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17037                           
 17038                           ;Port.c: 193: switch (pType)
 17039  015102  D0A7               	goto	l412
 17040  015104                     
 17041                           ; BSR set to: 0
 17042                           ;Port.c: 197: {
 17043                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 17044                           
 17045                           ; BSR set to: 0
 17046  015104  EE20 F002          	lfsr	2,2
 17047  015108  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17048  01510A  26D9               	addwf	fsr2l,f,c
 17049  01510C  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17050  01510E  22DA               	addwfc	fsr2h,f,c
 17051  015110  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17052  015114  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17053  015118  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17054  01511C  0E01               	movlw	1
 17055  01511E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17056  015120  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 17057                           
 17058                           ;Port.c: 203: break;
 17059  015124  D0A4               	goto	l414
 17060  015126                     
 17061                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 17062  015126  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17063  01512A  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17064  01512E  0E01               	movlw	1
 17065  015130  0100               	movlb	0	; () banked
 17066  015132  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17067  015134  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17068  015138  EC88  F0BD         	call	_PortProperty_Valid	;wreg free
 17069  01513C  0100               	movlb	0	; () banked
 17070  01513E  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17071  015140  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 17072  015142  A4D8               	btfss	status,2,c
 17073  015144  0012               	return	
 17074                           
 17075                           ; BSR set to: 0
 17076                           ;Port.c: 208: {
 17077                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 17078  015146  EE20 F002          	lfsr	2,2
 17079  01514A  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17080  01514C  26D9               	addwf	fsr2l,f,c
 17081  01514E  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17082  015150  22DA               	addwfc	fsr2h,f,c
 17083  015152  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17084  015156  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17085  01515A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17086  01515E  0E00               	movlw	0
 17087  015160  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17088  015162  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 17089                           
 17090                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 17091  015166  0100               	movlb	0	; () banked
 17092  015168  EE20 F004          	lfsr	2,4
 17093  01516C  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17094  01516E  26D9               	addwf	fsr2l,f,c
 17095  015170  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17096  015172  22DA               	addwfc	fsr2h,f,c
 17097  015174  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17098  015178  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17099  01517C  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17100  015180  0E00               	movlw	0
 17101  015182  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17102  015184  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 17103                           
 17104                           ;Port.c: 214: break;
 17105  015188  D072               	goto	l414
 17106  01518A                     
 17107                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 17108                           
 17109                           ;Port.c: 218: case eTypeOutputOpenSource:
 17110  01518A  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17111  01518E  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17112  015192  0E02               	movlw	2
 17113  015194  0100               	movlb	0	; () banked
 17114  015196  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17115  015198  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17116  01519C  EC88  F0BD         	call	_PortProperty_Valid	;wreg free
 17117  0151A0  0100               	movlb	0	; () banked
 17118  0151A2  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17119  0151A4  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 17120  0151A6  A4D8               	btfss	status,2,c
 17121  0151A8  0012               	return	
 17122                           
 17123                           ; BSR set to: 0
 17124                           ;Port.c: 220: {
 17125                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 17126  0151AA  EE20 F002          	lfsr	2,2
 17127  0151AE  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17128  0151B0  26D9               	addwf	fsr2l,f,c
 17129  0151B2  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17130  0151B4  22DA               	addwfc	fsr2h,f,c
 17131  0151B6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17132  0151BA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17133  0151BE  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17134  0151C2  0E01               	movlw	1
 17135  0151C4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17136  0151C6  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 17137                           
 17138                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 17139  0151CA  0100               	movlb	0	; () banked
 17140  0151CC  EE20 F004          	lfsr	2,4
 17141  0151D0  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17142  0151D2  26D9               	addwf	fsr2l,f,c
 17143  0151D4  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17144  0151D6  22DA               	addwfc	fsr2h,f,c
 17145  0151D8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17146  0151DC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17147  0151E0  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17148  0151E4  0E01               	movlw	1
 17149  0151E6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17150  0151E8  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 17151                           
 17152                           ;Port.c: 226: break;
 17153  0151EC  D040               	goto	l414
 17154  0151EE                     
 17155                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 17156                           
 17157                           ;Port.c: 230: case eTypeOutputPushPull:
 17158  0151EE  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17159  0151F2  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17160  0151F6  0E00               	movlw	0
 17161  0151F8  0100               	movlb	0	; () banked
 17162  0151FA  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17163  0151FC  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17164  015200  EC88  F0BD         	call	_PortProperty_Valid	;wreg free
 17165  015204  0100               	movlb	0	; () banked
 17166  015206  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17167  015208  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 17168  01520A  A4D8               	btfss	status,2,c
 17169  01520C  0012               	return	
 17170                           
 17171                           ; BSR set to: 0
 17172                           ;Port.c: 232: {
 17173                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 17174  01520E  EE20 F002          	lfsr	2,2
 17175  015212  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17176  015214  26D9               	addwf	fsr2l,f,c
 17177  015216  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17178  015218  22DA               	addwfc	fsr2h,f,c
 17179  01521A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17180  01521E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17181  015222  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17182  015226  0E00               	movlw	0
 17183  015228  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17184  01522A  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 17185                           
 17186                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 17187  01522E  0100               	movlb	0	; () banked
 17188  015230  EE20 F004          	lfsr	2,4
 17189  015234  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17190  015236  26D9               	addwf	fsr2l,f,c
 17191  015238  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17192  01523A  22DA               	addwfc	fsr2h,f,c
 17193  01523C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17194  015240  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17195  015244  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17196  015248  0E00               	movlw	0
 17197  01524A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17198  01524C  ECAD  F0BF         	call	_Byte_SetBit	;wreg free
 17199                           
 17200                           ;Port.c: 239: }
 17201                           
 17202                           ;Port.c: 238: break;
 17203  015250  D00E               	goto	l414
 17204  015252                     l412:
 17205  015252  0100               	movlb	0	; () banked
 17206  015254  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 17207                           
 17208                           ; Switch size 1, requested type "space"
 17209                           ; Number of cases is 4, Range of values is 0 to 3
 17210                           ; switch strategies available:
 17211                           ; Name         Instructions Cycles
 17212                           ; simple_byte           13     7 (average)
 17213                           ;	Chosen strategy is simple_byte
 17214  015256  0A00               	xorlw	0	; case 0
 17215  015258  B4D8               	btfsc	status,2,c
 17216  01525A  D754               	goto	l413
 17217  01525C  0A01               	xorlw	1	; case 1
 17218  01525E  B4D8               	btfsc	status,2,c
 17219  015260  D762               	goto	l415
 17220  015262  0A03               	xorlw	3	; case 2
 17221  015264  B4D8               	btfsc	status,2,c
 17222  015266  D791               	goto	l417
 17223  015268  0A01               	xorlw	1	; case 3
 17224  01526A  B4D8               	btfsc	status,2,c
 17225  01526C  D7C0               	goto	l421
 17226  01526E                     l414:
 17227                           
 17228                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 17229                           
 17230                           ; BSR set to: 0
 17231  01526E  0E08               	movlw	8
 17232  015270  0100               	movlb	0	; () banked
 17233  015272  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 17234  015274  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17235  015276  0E00               	movlw	0
 17236  015278  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 17237  01527A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17238  01527C  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 17239  015280  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 17240  015284  ECD8  F0C2         	call	_Word_SetPair	;wreg free
 17241  015288  0012               	return	
 17242  01528A                     __end_of_Port_SetPinType:
 17243                           	opt stack 0
 17244                           tosu	equ	0xFFF
 17245                           tosh	equ	0xFFE
 17246                           tosl	equ	0xFFD
 17247                           pclath	equ	0xFFA
 17248                           tblptru	equ	0xFF8
 17249                           tblptrh	equ	0xFF7
 17250                           tblptrl	equ	0xFF6
 17251                           tablat	equ	0xFF5
 17252                           prodh	equ	0xFF4
 17253                           prodl	equ	0xFF3
 17254                           intcon	equ	0xFF2
 17255                           postinc0	equ	0xFEE
 17256                           wreg	equ	0xFE8
 17257                           indf1	equ	0xFE7
 17258                           postdec1	equ	0xFE5
 17259                           fsr1h	equ	0xFE2
 17260                           fsr1l	equ	0xFE1
 17261                           indf2	equ	0xFDF
 17262                           postinc2	equ	0xFDE
 17263                           postdec2	equ	0xFDD
 17264                           plusw2	equ	0xFDB
 17265                           fsr2h	equ	0xFDA
 17266                           fsr2l	equ	0xFD9
 17267                           status	equ	0xFD8
 17268                           
 17269 ;; *************** function _Byte_SetBit *****************
 17270 ;; Defined at:
 17271 ;;		line 32 in file "Library/Types.c"
 17272 ;; Parameters:    Size  Location     Type
 17273 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17274 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 17275 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 17276 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17277 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17278 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17279 ;;		 -> NULL(0), 
 17280 ;;  pBit            1    2[BANK0 ] unsigned char 
 17281 ;;  pValue          1    3[BANK0 ] unsigned char 
 17282 ;; Auto vars:     Size  Location     Type
 17283 ;;		None
 17284 ;; Return value:  Size  Location     Type
 17285 ;;                  1    wreg      void 
 17286 ;; Registers used:
 17287 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17288 ;; Tracked objects:
 17289 ;;		On entry : 0/0
 17290 ;;		On exit  : 0/0
 17291 ;;		Unchanged: 0/0
 17292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17293 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17295 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17296 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17297 ;;Total ram usage:        7 bytes
 17298 ;; Hardware stack levels used:    1
 17299 ;; Hardware stack levels required when called:    7
 17300 ;; This function calls:
 17301 ;;		Nothing
 17302 ;; This function is called by:
 17303 ;;		_Port_SetPinType
 17304 ;;		_Port_SetPin
 17305 ;;		_SPI_Init
 17306 ;;		_SPI_MinSpeed
 17307 ;;		_SPI_MaxSpeed
 17308 ;;		_Word_SetBit
 17309 ;;		_I2C_Init
 17310 ;; This function uses a non-reentrant model
 17311 ;;
 17312                           
 17313                           	psect	text84
 17314  017F5A                     __ptext84:
 17315                           	opt stack 0
 17316  017F5A                     _Byte_SetBit:
 17317                           	opt stack 21
 17318                           
 17319                           ;Types.c: 34: pValue &= 1;
 17320                           
 17321                           ;incstack = 0
 17322  017F5A  0E01               	movlw	1
 17323  017F5C  0100               	movlb	0	; () banked
 17324  017F5E  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 17325                           
 17326                           ; BSR set to: 0
 17327                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 17328  017F60  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 17329  017F64  0E01               	movlw	1
 17330  017F66  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 17331  017F68  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 17332  017F6A  D002               	goto	u11564
 17333  017F6C                     u11565:
 17334  017F6C  90D8               	bcf	status,0,c
 17335  017F6E  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 17336  017F70                     u11564:
 17337  017F70  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 17338  017F72  D7FC               	goto	u11565
 17339  017F74  0100               	movlb	0	; () banked
 17340  017F76  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 17341  017F78  0AFF               	xorlw	255
 17342  017F7A  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 17343  017F7C  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 17344  017F80  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 17345  017F84  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 17346  017F86  16DF               	andwf	indf2,f,c
 17347                           
 17348                           ; BSR set to: 0
 17349                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 17350  017F88  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 17351  017F8C  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 17352  017F90  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 17353  017F92  D002               	goto	u11574
 17354  017F94                     u11575:
 17355  017F94  90D8               	bcf	status,0,c
 17356  017F96  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 17357  017F98                     u11574:
 17358  017F98  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 17359  017F9A  D7FC               	goto	u11575
 17360  017F9C  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 17361  017FA0  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 17362  017FA4  0100               	movlb	0	; () banked
 17363  017FA6  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 17364  017FA8  12DF               	iorwf	indf2,f,c
 17365                           
 17366                           ; BSR set to: 0
 17367  017FAA  0012               	return		;funcret
 17368  017FAC                     __end_of_Byte_SetBit:
 17369                           	opt stack 0
 17370                           tosu	equ	0xFFF
 17371                           tosh	equ	0xFFE
 17372                           tosl	equ	0xFFD
 17373                           pclath	equ	0xFFA
 17374                           tblptru	equ	0xFF8
 17375                           tblptrh	equ	0xFF7
 17376                           tblptrl	equ	0xFF6
 17377                           tablat	equ	0xFF5
 17378                           prodh	equ	0xFF4
 17379                           prodl	equ	0xFF3
 17380                           intcon	equ	0xFF2
 17381                           postinc0	equ	0xFEE
 17382                           wreg	equ	0xFE8
 17383                           indf1	equ	0xFE7
 17384                           postdec1	equ	0xFE5
 17385                           fsr1h	equ	0xFE2
 17386                           fsr1l	equ	0xFE1
 17387                           indf2	equ	0xFDF
 17388                           postinc2	equ	0xFDE
 17389                           postdec2	equ	0xFDD
 17390                           plusw2	equ	0xFDB
 17391                           fsr2h	equ	0xFDA
 17392                           fsr2l	equ	0xFD9
 17393                           status	equ	0xFD8
 17394                           
 17395 ;; *************** function _Port_SetQuadType *****************
 17396 ;; Defined at:
 17397 ;;		line 399 in file "Library/Port.c"
 17398 ;; Parameters:    Size  Location     Type
 17399 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 17400 ;;		 -> PortB(10), PortD(10), 
 17401 ;;  pQuad           1   56[BANK0 ] enum E6776
 17402 ;;  pType           1   57[BANK0 ] enum E6795
 17403 ;; Auto vars:     Size  Location     Type
 17404 ;;  Output          1   58[BANK0 ] enum E6475
 17405 ;; Return value:  Size  Location     Type
 17406 ;;                  1    wreg      enum E6475
 17407 ;; Registers used:
 17408 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17409 ;; Tracked objects:
 17410 ;;		On entry : 0/0
 17411 ;;		On exit  : 0/0
 17412 ;;		Unchanged: 0/0
 17413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17414 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17417 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17418 ;;Total ram usage:        5 bytes
 17419 ;; Hardware stack levels used:    1
 17420 ;; Hardware stack levels required when called:   13
 17421 ;; This function calls:
 17422 ;;		_Byte_SetQuad
 17423 ;;		_Port_CheckQuadType
 17424 ;;		_Word_SetPair
 17425 ;; This function is called by:
 17426 ;;		_MXK_InitDIPSwitch
 17427 ;;		_MXK_Init
 17428 ;; This function uses a non-reentrant model
 17429 ;;
 17430                           
 17431                           	psect	text85
 17432  014980                     __ptext85:
 17433                           	opt stack 0
 17434  014980                     _Port_SetQuadType:
 17435                           	opt stack 16
 17436                           
 17437                           ;Port.c: 401: ePinError Output = ePinErrorState;
 17438                           
 17439                           ; BSR set to: 0
 17440                           ;incstack = 0
 17441  014980  0E05               	movlw	5
 17442  014982  0100               	movlb	0	; () banked
 17443  014984  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17444                           
 17445                           ;Port.c: 403: switch (pType)
 17446  014986  D0B8               	goto	l476
 17447  014988                     
 17448                           ; BSR set to: 0
 17449                           ;Port.c: 407: {
 17450                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 17451                           
 17452                           ; BSR set to: 0
 17453  014988  EE20 F002          	lfsr	2,2
 17454  01498C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17455  01498E  26D9               	addwf	fsr2l,f,c
 17456  014990  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17457  014992  22DA               	addwfc	fsr2h,f,c
 17458  014994  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17459  014998  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17460  01499C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17461  0149A0  0E0F               	movlw	15
 17462  0149A2  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17463  0149A4  ECC3  F0C4         	call	_Byte_SetQuad	;wreg free
 17464                           
 17465                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 17466  0149A8  0100               	movlb	0	; () banked
 17467  0149AA  EE20 F004          	lfsr	2,4
 17468  0149AE  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17469  0149B0  26D9               	addwf	fsr2l,f,c
 17470  0149B2  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17471  0149B4  22DA               	addwfc	fsr2h,f,c
 17472  0149B6  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17473  0149BA  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17474  0149BE  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17475  0149C2  0E00               	movlw	0
 17476  0149C4  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17477  0149C6  ECC3  F0C4         	call	_Byte_SetQuad	;wreg free
 17478                           
 17479                           ;Port.c: 413: }
 17480                           ;Port.c: 415: break;
 17481  0149CA  D0A4               	goto	l478
 17482  0149CC                     
 17483                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 17484  0149CC  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 17485  0149D0  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 17486  0149D4  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 17487  0149D8  0E03               	movlw	3
 17488  0149DA  0100               	movlb	0	; () banked
 17489  0149DC  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 17490  0149DE  ECFE  F0BF         	call	_Port_CheckQuadType	;wreg free
 17491  0149E2  0100               	movlb	0	; () banked
 17492  0149E4  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17493  0149E6  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 17494  0149E8  A4D8               	btfss	status,2,c
 17495  0149EA  0012               	return	
 17496                           
 17497                           ; BSR set to: 0
 17498                           ;Port.c: 418: {
 17499                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 17500  0149EC  EE20 F002          	lfsr	2,2
 17501  0149F0  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17502  0149F2  26D9               	addwf	fsr2l,f,c
 17503  0149F4  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17504  0149F6  22DA               	addwfc	fsr2h,f,c
 17505  0149F8  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17506  0149FC  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17507  014A00  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17508  014A04  0E00               	movlw	0
 17509  014A06  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17510  014A08  ECC3  F0C4         	call	_Byte_SetQuad	;wreg free
 17511                           
 17512                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 17513  014A0C  0100               	movlb	0	; () banked
 17514  014A0E  EE20 F004          	lfsr	2,4
 17515  014A12  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17516  014A14  26D9               	addwf	fsr2l,f,c
 17517  014A16  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17518  014A18  22DA               	addwfc	fsr2h,f,c
 17519  014A1A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17520  014A1E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17521  014A22  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17522  014A26  0E00               	movlw	0
 17523  014A28  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17524  014A2A  ECC3  F0C4         	call	_Byte_SetQuad	;wreg free
 17525                           
 17526                           ;Port.c: 424: }
 17527  014A2E  D072               	goto	l478
 17528  014A30                     
 17529                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 17530  014A30  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 17531  014A34  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 17532  014A38  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 17533  014A3C  0E03               	movlw	3
 17534  014A3E  0100               	movlb	0	; () banked
 17535  014A40  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 17536  014A42  ECFE  F0BF         	call	_Port_CheckQuadType	;wreg free
 17537  014A46  0100               	movlb	0	; () banked
 17538  014A48  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17539  014A4A  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 17540  014A4C  A4D8               	btfss	status,2,c
 17541  014A4E  0012               	return	
 17542                           
 17543                           ; BSR set to: 0
 17544                           ;Port.c: 429: {
 17545                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 17546  014A50  EE20 F002          	lfsr	2,2
 17547  014A54  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17548  014A56  26D9               	addwf	fsr2l,f,c
 17549  014A58  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17550  014A5A  22DA               	addwfc	fsr2h,f,c
 17551  014A5C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17552  014A60  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17553  014A64  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17554  014A68  0E0F               	movlw	15
 17555  014A6A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17556  014A6C  ECC3  F0C4         	call	_Byte_SetQuad	;wreg free
 17557                           
 17558                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 17559  014A70  0100               	movlb	0	; () banked
 17560  014A72  EE20 F004          	lfsr	2,4
 17561  014A76  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17562  014A78  26D9               	addwf	fsr2l,f,c
 17563  014A7A  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17564  014A7C  22DA               	addwfc	fsr2h,f,c
 17565  014A7E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17566  014A82  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17567  014A86  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17568  014A8A  0E0F               	movlw	15
 17569  014A8C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17570  014A8E  ECC3  F0C4         	call	_Byte_SetQuad	;wreg free
 17571                           
 17572                           ;Port.c: 435: }
 17573  014A92  D040               	goto	l478
 17574  014A94                     
 17575                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 17576  014A94  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 17577  014A98  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 17578  014A9C  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 17579  014AA0  0E03               	movlw	3
 17580  014AA2  0100               	movlb	0	; () banked
 17581  014AA4  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 17582  014AA6  ECFE  F0BF         	call	_Port_CheckQuadType	;wreg free
 17583  014AAA  0100               	movlb	0	; () banked
 17584  014AAC  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17585  014AAE  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 17586  014AB0  A4D8               	btfss	status,2,c
 17587  014AB2  0012               	return	
 17588                           
 17589                           ; BSR set to: 0
 17590                           ;Port.c: 440: {
 17591                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 17592  014AB4  EE20 F002          	lfsr	2,2
 17593  014AB8  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17594  014ABA  26D9               	addwf	fsr2l,f,c
 17595  014ABC  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17596  014ABE  22DA               	addwfc	fsr2h,f,c
 17597  014AC0  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17598  014AC4  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17599  014AC8  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17600  014ACC  0E00               	movlw	0
 17601  014ACE  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17602  014AD0  ECC3  F0C4         	call	_Byte_SetQuad	;wreg free
 17603                           
 17604                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 17605  014AD4  0100               	movlb	0	; () banked
 17606  014AD6  EE20 F004          	lfsr	2,4
 17607  014ADA  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17608  014ADC  26D9               	addwf	fsr2l,f,c
 17609  014ADE  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17610  014AE0  22DA               	addwfc	fsr2h,f,c
 17611  014AE2  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17612  014AE6  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17613  014AEA  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17614  014AEE  0E00               	movlw	0
 17615  014AF0  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17616  014AF2  ECC3  F0C4         	call	_Byte_SetQuad	;wreg free
 17617                           
 17618                           ;Port.c: 446: }
 17619  014AF6  D00E               	goto	l478
 17620  014AF8                     l476:
 17621  014AF8  0100               	movlb	0	; () banked
 17622  014AFA  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 17623                           
 17624                           ; Switch size 1, requested type "space"
 17625                           ; Number of cases is 4, Range of values is 0 to 3
 17626                           ; switch strategies available:
 17627                           ; Name         Instructions Cycles
 17628                           ; simple_byte           13     7 (average)
 17629                           ;	Chosen strategy is simple_byte
 17630  014AFC  0A00               	xorlw	0	; case 0
 17631  014AFE  B4D8               	btfsc	status,2,c
 17632  014B00  D743               	goto	l477
 17633  014B02  0A01               	xorlw	1	; case 1
 17634  014B04  B4D8               	btfsc	status,2,c
 17635  014B06  D762               	goto	l479
 17636  014B08  0A03               	xorlw	3	; case 2
 17637  014B0A  B4D8               	btfsc	status,2,c
 17638  014B0C  D791               	goto	l483
 17639  014B0E  0A01               	xorlw	1	; case 3
 17640  014B10  B4D8               	btfsc	status,2,c
 17641  014B12  D7C0               	goto	l486
 17642  014B14                     l478:
 17643                           
 17644                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 17645                           
 17646                           ; BSR set to: 0
 17647  014B14  0E08               	movlw	8
 17648  014B16  0100               	movlb	0	; () banked
 17649  014B18  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17650  014B1A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17651  014B1C  0E00               	movlw	0
 17652  014B1E  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17653  014B20  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17654  014B22  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17655  014B24  0D04               	mullw	4
 17656  014B26  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 17657  014B2A  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17658  014B2E  ECD8  F0C2         	call	_Word_SetPair	;wreg free
 17659                           
 17660                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 17661  014B32  0E08               	movlw	8
 17662  014B34  0100               	movlb	0	; () banked
 17663  014B36  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17664  014B38  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17665  014B3A  0E00               	movlw	0
 17666  014B3C  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17667  014B3E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17668  014B40  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17669  014B42  0D04               	mullw	4
 17670  014B44  28F3               	incf	prodl,w,c
 17671  014B46  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17672  014B48  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17673  014B4C  ECD8  F0C2         	call	_Word_SetPair	;wreg free
 17674                           
 17675                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 17676  014B50  0E08               	movlw	8
 17677  014B52  0100               	movlb	0	; () banked
 17678  014B54  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17679  014B56  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17680  014B58  0E00               	movlw	0
 17681  014B5A  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17682  014B5C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17683  014B5E  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17684  014B60  0D04               	mullw	4
 17685  014B62  50F3               	movf	prodl,w,c
 17686  014B64  0F02               	addlw	2
 17687  014B66  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17688  014B68  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17689  014B6C  ECD8  F0C2         	call	_Word_SetPair	;wreg free
 17690                           
 17691                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 17692  014B70  0E08               	movlw	8
 17693  014B72  0100               	movlb	0	; () banked
 17694  014B74  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17695  014B76  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17696  014B78  0E00               	movlw	0
 17697  014B7A  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17698  014B7C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17699  014B7E  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17700  014B80  0D04               	mullw	4
 17701  014B82  50F3               	movf	prodl,w,c
 17702  014B84  0F03               	addlw	3
 17703  014B86  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17704  014B88  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17705  014B8C  ECD8  F0C2         	call	_Word_SetPair	;wreg free
 17706  014B90  0012               	return	
 17707  014B92                     __end_of_Port_SetQuadType:
 17708                           	opt stack 0
 17709                           tosu	equ	0xFFF
 17710                           tosh	equ	0xFFE
 17711                           tosl	equ	0xFFD
 17712                           pclath	equ	0xFFA
 17713                           tblptru	equ	0xFF8
 17714                           tblptrh	equ	0xFF7
 17715                           tblptrl	equ	0xFF6
 17716                           tablat	equ	0xFF5
 17717                           prodh	equ	0xFF4
 17718                           prodl	equ	0xFF3
 17719                           intcon	equ	0xFF2
 17720                           postinc0	equ	0xFEE
 17721                           wreg	equ	0xFE8
 17722                           indf1	equ	0xFE7
 17723                           postdec1	equ	0xFE5
 17724                           fsr1h	equ	0xFE2
 17725                           fsr1l	equ	0xFE1
 17726                           indf2	equ	0xFDF
 17727                           postinc2	equ	0xFDE
 17728                           postdec2	equ	0xFDD
 17729                           plusw2	equ	0xFDB
 17730                           fsr2h	equ	0xFDA
 17731                           fsr2l	equ	0xFD9
 17732                           status	equ	0xFD8
 17733                           
 17734 ;; *************** function _Word_SetPair *****************
 17735 ;; Defined at:
 17736 ;;		line 149 in file "Library/Types.c"
 17737 ;; Parameters:    Size  Location     Type
 17738 ;;  pInput          2   15[BANK0 ] PTR struct Word
 17739 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17740 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17741 ;;  pPair           1   17[BANK0 ] unsigned char 
 17742 ;;  pValue          1   18[BANK0 ] unsigned char 
 17743 ;; Auto vars:     Size  Location     Type
 17744 ;;		None
 17745 ;; Return value:  Size  Location     Type
 17746 ;;                  1    wreg      void 
 17747 ;; Registers used:
 17748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17749 ;; Tracked objects:
 17750 ;;		On entry : 0/0
 17751 ;;		On exit  : 0/0
 17752 ;;		Unchanged: 0/0
 17753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17754 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17757 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17758 ;;Total ram usage:        4 bytes
 17759 ;; Hardware stack levels used:    1
 17760 ;; Hardware stack levels required when called:    9
 17761 ;; This function calls:
 17762 ;;		_Byte_SetPair
 17763 ;; This function is called by:
 17764 ;;		_Port_SetPinType
 17765 ;;		_Port_SetQuadType
 17766 ;;		_Port_SetType
 17767 ;;		_Port_SetPairType
 17768 ;;		_PortProperty_Init
 17769 ;; This function uses a non-reentrant model
 17770 ;;
 17771                           
 17772                           	psect	text86
 17773  0185B0                     __ptext86:
 17774                           	opt stack 0
 17775  0185B0                     _Word_SetPair:
 17776                           	opt stack 19
 17777                           
 17778                           ;Types.c: 151: if (pPair >= 4)
 17779                           
 17780                           ;incstack = 0
 17781  0185B0  0E03               	movlw	3
 17782  0185B2  0100               	movlb	0	; () banked
 17783  0185B4  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 17784  0185B6  D00E               	goto	l776
 17785                           
 17786                           ; BSR set to: 0
 17787                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 17788  0185B8  0E01               	movlw	1
 17789  0185BA  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 17790  0185BC  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 17791  0185BE  0E00               	movlw	0
 17792  0185C0  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 17793  0185C2  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 17794  0185C4  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 17795  0185C6  0FFC               	addlw	252
 17796  0185C8  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 17797  0185CA  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 17798  0185CE  ECB3  F0C4         	call	_Byte_SetPair	;wreg free
 17799  0185D2  0012               	return	
 17800  0185D4                     l776:
 17801                           
 17802                           ;Types.c: 153: else
 17803                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 17804  0185D4  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 17805  0185D8  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 17806  0185DC  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 17807  0185E0  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 17808  0185E4  ECB3  F0C4         	call	_Byte_SetPair	;wreg free
 17809  0185E8  0012               	return	
 17810  0185EA                     __end_of_Word_SetPair:
 17811                           	opt stack 0
 17812                           tosu	equ	0xFFF
 17813                           tosh	equ	0xFFE
 17814                           tosl	equ	0xFFD
 17815                           pclath	equ	0xFFA
 17816                           tblptru	equ	0xFF8
 17817                           tblptrh	equ	0xFF7
 17818                           tblptrl	equ	0xFF6
 17819                           tablat	equ	0xFF5
 17820                           prodh	equ	0xFF4
 17821                           prodl	equ	0xFF3
 17822                           intcon	equ	0xFF2
 17823                           postinc0	equ	0xFEE
 17824                           wreg	equ	0xFE8
 17825                           indf1	equ	0xFE7
 17826                           postdec1	equ	0xFE5
 17827                           fsr1h	equ	0xFE2
 17828                           fsr1l	equ	0xFE1
 17829                           indf2	equ	0xFDF
 17830                           postinc2	equ	0xFDE
 17831                           postdec2	equ	0xFDD
 17832                           plusw2	equ	0xFDB
 17833                           fsr2h	equ	0xFDA
 17834                           fsr2l	equ	0xFD9
 17835                           status	equ	0xFD8
 17836                           
 17837 ;; *************** function _Byte_SetPair *****************
 17838 ;; Defined at:
 17839 ;;		line 83 in file "Library/Types.c"
 17840 ;; Parameters:    Size  Location     Type
 17841 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 17842 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 17843 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 17844 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 17845 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 17846 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 17847 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 17848 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 17849 ;;		 -> NULL(0), 
 17850 ;;  pPair           1   13[BANK0 ] unsigned char 
 17851 ;;  pValue          1   14[BANK0 ] unsigned char 
 17852 ;; Auto vars:     Size  Location     Type
 17853 ;;		None
 17854 ;; Return value:  Size  Location     Type
 17855 ;;                  1    wreg      void 
 17856 ;; Registers used:
 17857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17858 ;; Tracked objects:
 17859 ;;		On entry : 0/0
 17860 ;;		On exit  : 0/0
 17861 ;;		Unchanged: 0/0
 17862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17863 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17866 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17867 ;;Total ram usage:        4 bytes
 17868 ;; Hardware stack levels used:    1
 17869 ;; Hardware stack levels required when called:    8
 17870 ;; This function calls:
 17871 ;;		_Byte_SetZone
 17872 ;; This function is called by:
 17873 ;;		_Word_SetPair
 17874 ;;		_Port_SetPairType
 17875 ;;		_Port_SetPair
 17876 ;; This function uses a non-reentrant model
 17877 ;;
 17878                           
 17879                           	psect	text87
 17880  018966                     __ptext87:
 17881                           	opt stack 0
 17882  018966                     _Byte_SetPair:
 17883                           	opt stack 19
 17884                           
 17885                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 17886                           
 17887                           ;incstack = 0
 17888  018966  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 17889  01896A  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 17890  01896E  0E04               	movlw	4
 17891  018970  0100               	movlb	0	; () banked
 17892  018972  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 17893  018974  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 17894  018978  0E02               	movlw	2
 17895  01897A  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 17896  01897C  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 17897  018980  EC09  F0B9         	call	_Byte_SetZone	;wreg free
 17898  018984  0012               	return		;funcret
 17899  018986                     __end_of_Byte_SetPair:
 17900                           	opt stack 0
 17901                           tosu	equ	0xFFF
 17902                           tosh	equ	0xFFE
 17903                           tosl	equ	0xFFD
 17904                           pclath	equ	0xFFA
 17905                           tblptru	equ	0xFF8
 17906                           tblptrh	equ	0xFF7
 17907                           tblptrl	equ	0xFF6
 17908                           tablat	equ	0xFF5
 17909                           prodh	equ	0xFF4
 17910                           prodl	equ	0xFF3
 17911                           intcon	equ	0xFF2
 17912                           postinc0	equ	0xFEE
 17913                           wreg	equ	0xFE8
 17914                           indf1	equ	0xFE7
 17915                           postdec1	equ	0xFE5
 17916                           fsr1h	equ	0xFE2
 17917                           fsr1l	equ	0xFE1
 17918                           indf2	equ	0xFDF
 17919                           postinc2	equ	0xFDE
 17920                           postdec2	equ	0xFDD
 17921                           plusw2	equ	0xFDB
 17922                           fsr2h	equ	0xFDA
 17923                           fsr2l	equ	0xFD9
 17924                           status	equ	0xFD8
 17925                           
 17926 ;; *************** function _Port_CheckQuadType *****************
 17927 ;; Defined at:
 17928 ;;		line 126 in file "Library/Port.c"
 17929 ;; Parameters:    Size  Location     Type
 17930 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 17931 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17932 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17933 ;;  pQuad           1   49[BANK0 ] enum E6776
 17934 ;;  pDrive          1   50[BANK0 ] enum E6469
 17935 ;; Auto vars:     Size  Location     Type
 17936 ;;  Output          1   53[BANK0 ] enum E6475
 17937 ;;  Pair2           1   52[BANK0 ] enum E6760
 17938 ;;  Pair1           1   51[BANK0 ] enum E6760
 17939 ;; Return value:  Size  Location     Type
 17940 ;;                  1    wreg      enum E6475
 17941 ;; Registers used:
 17942 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17943 ;; Tracked objects:
 17944 ;;		On entry : 0/0
 17945 ;;		On exit  : 0/0
 17946 ;;		Unchanged: 0/0
 17947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17948 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17949 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17951 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17952 ;;Total ram usage:        7 bytes
 17953 ;; Hardware stack levels used:    1
 17954 ;; Hardware stack levels required when called:   12
 17955 ;; This function calls:
 17956 ;;		_Port_CheckPairType
 17957 ;; This function is called by:
 17958 ;;		_Port_CheckPortType
 17959 ;;		_Port_SetQuadType
 17960 ;; This function uses a non-reentrant model
 17961 ;;
 17962                           
 17963                           	psect	text88
 17964  017FFC                     __ptext88:
 17965                           	opt stack 0
 17966  017FFC                     _Port_CheckQuadType:
 17967                           	opt stack 15
 17968                           
 17969                           ;Port.c: 128: ePinError Output = ePinErrorState;
 17970                           
 17971                           ;incstack = 0
 17972  017FFC  0E05               	movlw	5
 17973  017FFE  0100               	movlb	0	; () banked
 17974  018000  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 17975                           
 17976                           ; BSR set to: 0
 17977                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 17978  018002  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 17979  018004  0D02               	mullw	2
 17980  018006  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 17981                           
 17982                           ; BSR set to: 0
 17983                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 17984  01800A  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 17985  01800C  0D02               	mullw	2
 17986  01800E  28F3               	incf	prodl,w,c
 17987  018010  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 17988                           
 17989                           ; BSR set to: 0
 17990                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 17991  018012  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 17992  018016  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 17993  01801A  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 17994  01801E  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 17995  018022  EC1F  F0BE         	call	_Port_CheckPairType	;wreg free
 17996  018026  0100               	movlb	0	; () banked
 17997  018028  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 17998  01802A  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 17999  01802C  A4D8               	btfss	status,2,c
 18000  01802E  D00C               	goto	l393
 18001                           
 18002                           ; BSR set to: 0
 18003                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 18004  018030  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 18005  018034  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 18006  018038  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 18007  01803C  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 18008  018040  EC1F  F0BE         	call	_Port_CheckPairType	;wreg free
 18009  018044  0100               	movlb	0	; () banked
 18010  018046  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 18011  018048                     l393:
 18012                           
 18013                           ; BSR set to: 0
 18014                           ;Port.c: 136: return Output;
 18015                           
 18016                           ; BSR set to: 0
 18017  018048  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 18018  01804A  0012               	return	
 18019  01804C                     __end_of_Port_CheckQuadType:
 18020                           	opt stack 0
 18021                           tosu	equ	0xFFF
 18022                           tosh	equ	0xFFE
 18023                           tosl	equ	0xFFD
 18024                           pclath	equ	0xFFA
 18025                           tblptru	equ	0xFF8
 18026                           tblptrh	equ	0xFF7
 18027                           tblptrl	equ	0xFF6
 18028                           tablat	equ	0xFF5
 18029                           prodh	equ	0xFF4
 18030                           prodl	equ	0xFF3
 18031                           intcon	equ	0xFF2
 18032                           postinc0	equ	0xFEE
 18033                           wreg	equ	0xFE8
 18034                           indf1	equ	0xFE7
 18035                           postdec1	equ	0xFE5
 18036                           fsr1h	equ	0xFE2
 18037                           fsr1l	equ	0xFE1
 18038                           indf2	equ	0xFDF
 18039                           postinc2	equ	0xFDE
 18040                           postdec2	equ	0xFDD
 18041                           plusw2	equ	0xFDB
 18042                           fsr2h	equ	0xFDA
 18043                           fsr2l	equ	0xFD9
 18044                           status	equ	0xFD8
 18045                           
 18046 ;; *************** function _Port_CheckPairType *****************
 18047 ;; Defined at:
 18048 ;;		line 112 in file "Library/Port.c"
 18049 ;; Parameters:    Size  Location     Type
 18050 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 18051 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18052 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18053 ;;  pPair           1   40[BANK0 ] enum E6760
 18054 ;;  pDrive          1   41[BANK0 ] enum E6469
 18055 ;; Auto vars:     Size  Location     Type
 18056 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 18057 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18058 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18059 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18060 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18061 ;;  Output          1   44[BANK0 ] enum E6475
 18062 ;;  Pin2            1   43[BANK0 ] enum E6750
 18063 ;;  Pin1            1   42[BANK0 ] enum E6750
 18064 ;; Return value:  Size  Location     Type
 18065 ;;                  1    wreg      enum E6475
 18066 ;; Registers used:
 18067 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18068 ;; Tracked objects:
 18069 ;;		On entry : 0/0
 18070 ;;		On exit  : 0/0
 18071 ;;		Unchanged: 0/0
 18072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18073 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18074 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18076 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18077 ;;Total ram usage:        9 bytes
 18078 ;; Hardware stack levels used:    1
 18079 ;; Hardware stack levels required when called:   11
 18080 ;; This function calls:
 18081 ;;		_PortProperty_Valid
 18082 ;; This function is called by:
 18083 ;;		_Port_CheckQuadType
 18084 ;;		_Port_SetPairType
 18085 ;; This function uses a non-reentrant model
 18086 ;;
 18087                           
 18088                           	psect	text89
 18089  017C3E                     __ptext89:
 18090                           	opt stack 0
 18091  017C3E                     _Port_CheckPairType:
 18092                           	opt stack 15
 18093                           
 18094                           ;Port.c: 114: ePinError Output = ePinErrorState;
 18095                           
 18096                           ; BSR set to: 0
 18097                           ;incstack = 0
 18098  017C3E  0E05               	movlw	5
 18099  017C40  0100               	movlb	0	; () banked
 18100  017C42  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 18101                           
 18102                           ; BSR set to: 0
 18103                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 18104  017C44  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 18105  017C48  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 18106  017C4C  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 18107  017C50  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 18108                           
 18109                           ; BSR set to: 0
 18110                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 18111  017C54  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 18112  017C56  0D02               	mullw	2
 18113  017C58  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 18114                           
 18115                           ; BSR set to: 0
 18116                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 18117  017C5C  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 18118  017C5E  0D02               	mullw	2
 18119  017C60  28F3               	incf	prodl,w,c
 18120  017C62  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 18121                           
 18122                           ; BSR set to: 0
 18123                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 18124  017C64  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 18125  017C68  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 18126  017C6C  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 18127  017C70  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 18128  017C74  EC88  F0BD         	call	_PortProperty_Valid	;wreg free
 18129  017C78  0100               	movlb	0	; () banked
 18130  017C7A  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 18131  017C7C  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 18132  017C7E  A4D8               	btfss	status,2,c
 18133  017C80  D00C               	goto	l389
 18134                           
 18135                           ; BSR set to: 0
 18136                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 18137  017C82  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 18138  017C86  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 18139  017C8A  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 18140  017C8E  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 18141  017C92  EC88  F0BD         	call	_PortProperty_Valid	;wreg free
 18142  017C96  0100               	movlb	0	; () banked
 18143  017C98  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 18144  017C9A                     l389:
 18145                           
 18146                           ; BSR set to: 0
 18147                           ;Port.c: 124: return Output;
 18148                           
 18149                           ; BSR set to: 0
 18150  017C9A  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 18151  017C9C  0012               	return	
 18152  017C9E                     __end_of_Port_CheckPairType:
 18153                           	opt stack 0
 18154                           tosu	equ	0xFFF
 18155                           tosh	equ	0xFFE
 18156                           tosl	equ	0xFFD
 18157                           pclath	equ	0xFFA
 18158                           tblptru	equ	0xFF8
 18159                           tblptrh	equ	0xFF7
 18160                           tblptrl	equ	0xFF6
 18161                           tablat	equ	0xFF5
 18162                           prodh	equ	0xFF4
 18163                           prodl	equ	0xFF3
 18164                           intcon	equ	0xFF2
 18165                           postinc0	equ	0xFEE
 18166                           wreg	equ	0xFE8
 18167                           indf1	equ	0xFE7
 18168                           postdec1	equ	0xFE5
 18169                           fsr1h	equ	0xFE2
 18170                           fsr1l	equ	0xFE1
 18171                           indf2	equ	0xFDF
 18172                           postinc2	equ	0xFDE
 18173                           postdec2	equ	0xFDD
 18174                           plusw2	equ	0xFDB
 18175                           fsr2h	equ	0xFDA
 18176                           fsr2l	equ	0xFD9
 18177                           status	equ	0xFD8
 18178                           
 18179 ;; *************** function _PortProperty_Valid *****************
 18180 ;; Defined at:
 18181 ;;		line 220 in file "Library/Types.c"
 18182 ;; Parameters:    Size  Location     Type
 18183 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 18184 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18185 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18186 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18187 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18188 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 18189 ;;  pPin            1   18[BANK0 ] unsigned char 
 18190 ;; Auto vars:     Size  Location     Type
 18191 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 18192 ;;  Pair            1   37[BANK0 ] enum E6469
 18193 ;; Return value:  Size  Location     Type
 18194 ;;                  1    wreg      enum E6475
 18195 ;; Registers used:
 18196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18197 ;; Tracked objects:
 18198 ;;		On entry : 0/0
 18199 ;;		On exit  : 0/0
 18200 ;;		Unchanged: 0/0
 18201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18202 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18203 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18204 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18205 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18206 ;;Total ram usage:       23 bytes
 18207 ;; Hardware stack levels used:    1
 18208 ;; Hardware stack levels required when called:   10
 18209 ;; This function calls:
 18210 ;;		_Word_GetPair
 18211 ;; This function is called by:
 18212 ;;		_Port_CheckPairType
 18213 ;;		_Port_SetPinType
 18214 ;; This function uses a non-reentrant model
 18215 ;;
 18216                           
 18217                           	psect	text90
 18218  017B10                     __ptext90:
 18219                           	opt stack 0
 18220  017B10                     _PortProperty_Valid:
 18221                           	opt stack 15
 18222                           
 18223                           ;Types.c: 222: ePinDrive Pair;
 18224                           ;Types.c: 223: const ePinError Errors[4][4] =
 18225                           ;Types.c: 224: {
 18226                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 18227                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 18228                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 18229                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 18230                           ;Types.c: 230: };
 18231                           
 18232                           ; BSR set to: 0
 18233                           ;incstack = 0
 18234  017B10  0E05               	movlw	low PortProperty_Valid@F6830
 18235  017B12  6EF6               	movwf	tblptrl,c
 18236  017B14                     	if	1	;There is more than 1 active tblptr byte
 18237  017B14  0EFC               	movlw	high PortProperty_Valid@F6830
 18238  017B16  6EF7               	movwf	tblptrh,c
 18239  017B18                     	endif
 18240  017B18                     	if	1	;There are 3 active tblptr bytes
 18241  017B18  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 18242  017B1A  6EF8               	movwf	tblptru,c
 18243  017B1C                     	endif
 18244  017B1C  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 18245  017B20  0E0F               	movlw	15
 18246  017B22                     u11530:
 18247  017B22  0009               	tblrd		*+
 18248  017B24  CFF5 FFDE          	movff	tablat,postinc2
 18249  017B28  06E8               	decf	wreg,f,c
 18250  017B2A  E2FB               	bc	u11530
 18251                           
 18252                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 18253  017B2C  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 18254  017B30  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 18255  017B34  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 18256  017B38  EC61  F0C3         	call	_Word_GetPair	;wreg free
 18257  017B3C  0100               	movlb	0	; () banked
 18258  017B3E  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 18259                           
 18260                           ; BSR set to: 0
 18261                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 18262  017B40  0E04               	movlw	4
 18263  017B42  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 18264  017B44  D017               	goto	l819
 18265                           
 18266                           ; BSR set to: 0
 18267  017B46  0E04               	movlw	4
 18268  017B48  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 18269  017B4A  D014               	goto	l819
 18270                           
 18271                           ; BSR set to: 0
 18272                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 18273  017B4C  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 18274  017B4E  0D04               	mullw	4
 18275  017B50  0E75               	movlw	low PortProperty_Valid@Errors
 18276  017B52  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 18277  017B54  0E00               	movlw	high PortProperty_Valid@Errors
 18278  017B56  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 18279  017B58  50F3               	movf	prodl,w,c
 18280  017B5A  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 18281  017B5C  50F4               	movf	prodh,w,c
 18282  017B5E  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 18283  017B60  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 18284  017B62  0D01               	mullw	1
 18285  017B64  50F3               	movf	prodl,w,c
 18286  017B66  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 18287  017B68  6ED9               	movwf	fsr2l,c
 18288  017B6A  50F4               	movf	prodh,w,c
 18289  017B6C  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 18290  017B6E  6EDA               	movwf	fsr2h,c
 18291  017B70  50DF               	movf	indf2,w,c
 18292                           
 18293                           ; BSR set to: 0
 18294  017B72  0012               	return	
 18295  017B74                     l819:
 18296                           
 18297                           ; BSR set to: 0
 18298                           ;Types.c: 237: return ePinErrorState;
 18299                           
 18300                           ; BSR set to: 0
 18301  017B74  0E05               	movlw	5
 18302  017B76  0012               	return	
 18303  017B78                     __end_of_PortProperty_Valid:
 18304                           	opt stack 0
 18305                           tosu	equ	0xFFF
 18306                           tosh	equ	0xFFE
 18307                           tosl	equ	0xFFD
 18308                           pclath	equ	0xFFA
 18309                           tblptru	equ	0xFF8
 18310                           tblptrh	equ	0xFF7
 18311                           tblptrl	equ	0xFF6
 18312                           tablat	equ	0xFF5
 18313                           prodh	equ	0xFF4
 18314                           prodl	equ	0xFF3
 18315                           intcon	equ	0xFF2
 18316                           postinc0	equ	0xFEE
 18317                           wreg	equ	0xFE8
 18318                           indf1	equ	0xFE7
 18319                           postdec1	equ	0xFE5
 18320                           fsr1h	equ	0xFE2
 18321                           fsr1l	equ	0xFE1
 18322                           indf2	equ	0xFDF
 18323                           postinc2	equ	0xFDE
 18324                           postdec2	equ	0xFDD
 18325                           plusw2	equ	0xFDB
 18326                           fsr2h	equ	0xFDA
 18327                           fsr2l	equ	0xFD9
 18328                           status	equ	0xFD8
 18329                           
 18330 ;; *************** function _Word_GetPair *****************
 18331 ;; Defined at:
 18332 ;;		line 156 in file "Library/Types.c"
 18333 ;; Parameters:    Size  Location     Type
 18334 ;;  pInput          2   12[BANK0 ] PTR struct Word
 18335 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18336 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18337 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18338 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18339 ;;  pPair           1   14[BANK0 ] unsigned char 
 18340 ;; Auto vars:     Size  Location     Type
 18341 ;;		None
 18342 ;; Return value:  Size  Location     Type
 18343 ;;                  1    wreg      unsigned char 
 18344 ;; Registers used:
 18345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18346 ;; Tracked objects:
 18347 ;;		On entry : 0/0
 18348 ;;		On exit  : 0/0
 18349 ;;		Unchanged: 0/0
 18350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18351 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18354 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18355 ;;Total ram usage:        3 bytes
 18356 ;; Hardware stack levels used:    1
 18357 ;; Hardware stack levels required when called:    9
 18358 ;; This function calls:
 18359 ;;		_Byte_GetPair
 18360 ;; This function is called by:
 18361 ;;		_Port_Init
 18362 ;;		_Port_SetPin
 18363 ;;		_Port_Set
 18364 ;;		_PortProperty_Valid
 18365 ;;		_Port_SetPair
 18366 ;;		_Port_SetQuad
 18367 ;; This function uses a non-reentrant model
 18368 ;;
 18369                           
 18370                           	psect	text91
 18371  0186C2                     __ptext91:
 18372                           	opt stack 0
 18373  0186C2                     _Word_GetPair:
 18374                           	opt stack 15
 18375                           
 18376                           ;Types.c: 158: if (pPair >= 4)
 18377                           
 18378                           ; BSR set to: 0
 18379                           ;incstack = 0
 18380  0186C2  0E03               	movlw	3
 18381  0186C4  0100               	movlb	0	; () banked
 18382  0186C6  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 18383  0186C8  D00C               	goto	l781
 18384                           
 18385                           ; BSR set to: 0
 18386                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 18387  0186CA  0E01               	movlw	1
 18388  0186CC  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 18389  0186CE  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 18390  0186D0  0E00               	movlw	0
 18391  0186D2  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 18392  0186D4  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 18393  0186D6  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 18394  0186D8  0FFC               	addlw	252
 18395  0186DA  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 18396  0186DC  EC00  F0C5         	call	_Byte_GetPair	;wreg free
 18397  0186E0  0012               	return	
 18398  0186E2                     l781:
 18399                           
 18400                           ;Types.c: 160: else
 18401                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 18402  0186E2  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 18403  0186E6  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 18404  0186EA  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 18405  0186EE  EC00  F0C5         	call	_Byte_GetPair	;wreg free
 18406  0186F2  0012               	return	
 18407  0186F4                     __end_of_Word_GetPair:
 18408                           	opt stack 0
 18409                           tosu	equ	0xFFF
 18410                           tosh	equ	0xFFE
 18411                           tosl	equ	0xFFD
 18412                           pclath	equ	0xFFA
 18413                           tblptru	equ	0xFF8
 18414                           tblptrh	equ	0xFF7
 18415                           tblptrl	equ	0xFF6
 18416                           tablat	equ	0xFF5
 18417                           prodh	equ	0xFF4
 18418                           prodl	equ	0xFF3
 18419                           intcon	equ	0xFF2
 18420                           postinc0	equ	0xFEE
 18421                           wreg	equ	0xFE8
 18422                           indf1	equ	0xFE7
 18423                           postdec1	equ	0xFE5
 18424                           fsr1h	equ	0xFE2
 18425                           fsr1l	equ	0xFE1
 18426                           indf2	equ	0xFDF
 18427                           postinc2	equ	0xFDE
 18428                           postdec2	equ	0xFDD
 18429                           plusw2	equ	0xFDB
 18430                           fsr2h	equ	0xFDA
 18431                           fsr2l	equ	0xFD9
 18432                           status	equ	0xFD8
 18433                           
 18434 ;; *************** function _Byte_GetPair *****************
 18435 ;; Defined at:
 18436 ;;		line 87 in file "Library/Types.c"
 18437 ;; Parameters:    Size  Location     Type
 18438 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 18439 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 18440 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 18441 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 18442 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 18443 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 18444 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 18445 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 18446 ;;		 -> NULL(0), 
 18447 ;;  pPair           1   11[BANK0 ] unsigned char 
 18448 ;; Auto vars:     Size  Location     Type
 18449 ;;		None
 18450 ;; Return value:  Size  Location     Type
 18451 ;;                  1    wreg      unsigned char 
 18452 ;; Registers used:
 18453 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18454 ;; Tracked objects:
 18455 ;;		On entry : 0/0
 18456 ;;		On exit  : 0/0
 18457 ;;		Unchanged: 0/0
 18458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18459 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18462 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18463 ;;Total ram usage:        3 bytes
 18464 ;; Hardware stack levels used:    1
 18465 ;; Hardware stack levels required when called:    8
 18466 ;; This function calls:
 18467 ;;		_Byte_GetZone
 18468 ;; This function is called by:
 18469 ;;		_Word_GetPair
 18470 ;; This function uses a non-reentrant model
 18471 ;;
 18472                           
 18473                           	psect	text92
 18474  018A00                     __ptext92:
 18475                           	opt stack 0
 18476  018A00                     _Byte_GetPair:
 18477                           	opt stack 15
 18478                           
 18479                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 18480                           
 18481                           ;incstack = 0
 18482  018A00  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 18483  018A04  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 18484  018A08  0E04               	movlw	4
 18485  018A0A  0100               	movlb	0	; () banked
 18486  018A0C  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 18487  018A0E  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 18488  018A12  0E02               	movlw	2
 18489  018A14  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 18490  018A16  EC1D  F0BB         	call	_Byte_GetZone	;wreg free
 18491  018A1A  0012               	return	
 18492  018A1C                     __end_of_Byte_GetPair:
 18493                           	opt stack 0
 18494                           tosu	equ	0xFFF
 18495                           tosh	equ	0xFFE
 18496                           tosl	equ	0xFFD
 18497                           pclath	equ	0xFFA
 18498                           tblptru	equ	0xFF8
 18499                           tblptrh	equ	0xFF7
 18500                           tblptrl	equ	0xFF6
 18501                           tablat	equ	0xFF5
 18502                           prodh	equ	0xFF4
 18503                           prodl	equ	0xFF3
 18504                           intcon	equ	0xFF2
 18505                           postinc0	equ	0xFEE
 18506                           wreg	equ	0xFE8
 18507                           indf1	equ	0xFE7
 18508                           postdec1	equ	0xFE5
 18509                           fsr1h	equ	0xFE2
 18510                           fsr1l	equ	0xFE1
 18511                           indf2	equ	0xFDF
 18512                           postinc2	equ	0xFDE
 18513                           postdec2	equ	0xFDD
 18514                           plusw2	equ	0xFDB
 18515                           fsr2h	equ	0xFDA
 18516                           fsr2l	equ	0xFD9
 18517                           status	equ	0xFD8
 18518                           
 18519 ;; *************** function _Byte_GetZone *****************
 18520 ;; Defined at:
 18521 ;;		line 64 in file "Library/Types.c"
 18522 ;; Parameters:    Size  Location     Type
 18523 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 18524 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 18525 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 18526 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 18527 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 18528 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 18529 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 18530 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 18531 ;;		 -> NULL(0), 
 18532 ;;  pMax            1    2[BANK0 ] unsigned char 
 18533 ;;  pChunk          1    3[BANK0 ] unsigned char 
 18534 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 18535 ;; Auto vars:     Size  Location     Type
 18536 ;;  Output          1    8[BANK0 ] unsigned char 
 18537 ;;  Offset          1    7[BANK0 ] unsigned char 
 18538 ;;  MASK            1    6[BANK0 ] unsigned char 
 18539 ;; Return value:  Size  Location     Type
 18540 ;;                  1    wreg      unsigned char 
 18541 ;; Registers used:
 18542 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18543 ;; Tracked objects:
 18544 ;;		On entry : 0/0
 18545 ;;		On exit  : 0/0
 18546 ;;		Unchanged: 0/0
 18547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18548 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18549 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18550 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18551 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18552 ;;Total ram usage:        9 bytes
 18553 ;; Hardware stack levels used:    1
 18554 ;; Hardware stack levels required when called:    7
 18555 ;; This function calls:
 18556 ;;		Nothing
 18557 ;; This function is called by:
 18558 ;;		_Byte_GetPair
 18559 ;;		_Byte_GetTriple
 18560 ;;		_Byte_GetQuad
 18561 ;; This function uses a non-reentrant model
 18562 ;;
 18563                           
 18564                           	psect	text93
 18565  01763A                     __ptext93:
 18566                           	opt stack 0
 18567  01763A                     _Byte_GetZone:
 18568                           	opt stack 15
 18569                           
 18570                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 18571                           
 18572                           ;incstack = 0
 18573  01763A  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 18574  01763E  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 18575  017642  0E00               	movlw	low (__mediumconst shr (0+16))
 18576  017644  6EF8               	movwf	tblptru,c
 18577  017646  0E0F               	movlw	(high __ramtop+-1)
 18578  017648  64F7               	cpfsgt	tblptrh,c
 18579  01764A  D003               	bra	u10477
 18580  01764C  0008               	tblrd		*
 18581  01764E  50F5               	movf	tablat,w,c
 18582  017650  D005               	bra	u10470
 18583  017652                     u10477:
 18584  017652  CFF6 FFE9          	movff	tblptrl,fsr0l
 18585  017656  CFF7 FFEA          	movff	tblptrh,fsr0h
 18586  01765A  50EF               	movf	indf0,w,c
 18587  01765C                     u10470:
 18588  01765C  0100               	movlb	0	; () banked
 18589  01765E  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 18590                           
 18591                           ; BSR set to: 0
 18592                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 18593  017660  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 18594  017662  0D01               	mullw	1
 18595  017664  0E1F               	movlw	low _MASKS
 18596  017666  24F3               	addwf	prodl,w,c
 18597  017668  6EF6               	movwf	tblptrl,c
 18598  01766A  0EFC               	movlw	high _MASKS
 18599  01766C  20F4               	addwfc	prodh,w,c
 18600  01766E  6EF7               	movwf	tblptrh,c
 18601  017670                     	if	1	;There are 3 active tblptr bytes
 18602  017670  6AF8               	clrf	tblptru,c
 18603  017672  0E00               	movlw	low (__mediumconst shr (0+16))
 18604  017674  22F8               	addwfc	tblptru,f,c
 18605  017676                     	endif
 18606  017676  0008               	tblrd		*
 18607  017678  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 18608                           
 18609                           ; BSR set to: 0
 18610                           ;Types.c: 68: UINT8 Offset = 0;
 18611  01767C  0E00               	movlw	0
 18612  01767E  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 18613                           
 18614                           ;Types.c: 70: while (pChunk >= pMax)
 18615  017680  D003               	goto	l732
 18616  017682                     
 18617                           ; BSR set to: 0
 18618                           ;Types.c: 71: {
 18619                           ;Types.c: 72: pChunk -= pMax;
 18620                           
 18621                           ; BSR set to: 0
 18622  017682  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 18623  017684  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 18624                           
 18625                           ; BSR set to: 0
 18626                           ;Types.c: 73: Offset += 1;
 18627  017686  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 18628  017688                     l732:
 18629                           
 18630                           ; BSR set to: 0
 18631                           
 18632                           ; BSR set to: 0
 18633  017688  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 18634  01768A  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 18635  01768C  B0D8               	btfsc	status,0,c
 18636  01768E  D7F9               	goto	l733
 18637                           
 18638                           ; BSR set to: 0
 18639                           ;Types.c: 74: }
 18640                           ;Types.c: 75: pChunk *= pChunkSize;
 18641                           
 18642                           ; BSR set to: 0
 18643  017690  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 18644  017692  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 18645  017694  50F3               	movf	prodl,w,c
 18646  017696  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 18647                           
 18648                           ; BSR set to: 0
 18649                           ;Types.c: 76: pChunk += Offset;
 18650  017698  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 18651  01769A  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 18652                           
 18653                           ; BSR set to: 0
 18654                           ;Types.c: 78: Output >>= pChunk;
 18655  01769C  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 18656  01769E  6F65               	movwf	??_Byte_GetZone& (0+255),b
 18657  0176A0  D002               	goto	u10490
 18658  0176A2                     u10495:
 18659  0176A2  90D8               	bcf	status,0,c
 18660  0176A4  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 18661  0176A6                     u10490:
 18662  0176A6  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 18663  0176A8  D7FC               	goto	u10495
 18664                           
 18665                           ;Types.c: 79: Output &= MASK;
 18666  0176AA  0100               	movlb	0	; () banked
 18667  0176AC  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 18668  0176AE  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 18669                           
 18670                           ; BSR set to: 0
 18671                           ;Types.c: 80: return Output;
 18672  0176B0  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 18673  0176B2  0012               	return	
 18674  0176B4                     __end_of_Byte_GetZone:
 18675                           	opt stack 0
 18676                           tosu	equ	0xFFF
 18677                           tosh	equ	0xFFE
 18678                           tosl	equ	0xFFD
 18679                           pclath	equ	0xFFA
 18680                           tblptru	equ	0xFF8
 18681                           tblptrh	equ	0xFF7
 18682                           tblptrl	equ	0xFF6
 18683                           tablat	equ	0xFF5
 18684                           prodh	equ	0xFF4
 18685                           prodl	equ	0xFF3
 18686                           intcon	equ	0xFF2
 18687                           indf0	equ	0xFEF
 18688                           postinc0	equ	0xFEE
 18689                           fsr0h	equ	0xFEA
 18690                           fsr0l	equ	0xFE9
 18691                           wreg	equ	0xFE8
 18692                           indf1	equ	0xFE7
 18693                           postdec1	equ	0xFE5
 18694                           fsr1h	equ	0xFE2
 18695                           fsr1l	equ	0xFE1
 18696                           indf2	equ	0xFDF
 18697                           postinc2	equ	0xFDE
 18698                           postdec2	equ	0xFDD
 18699                           plusw2	equ	0xFDB
 18700                           fsr2h	equ	0xFDA
 18701                           fsr2l	equ	0xFD9
 18702                           status	equ	0xFD8
 18703                           
 18704 ;; *************** function _Byte_SetQuad *****************
 18705 ;; Defined at:
 18706 ;;		line 101 in file "Library/Types.c"
 18707 ;; Parameters:    Size  Location     Type
 18708 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 18709 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 18710 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 18711 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 18712 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 18713 ;;		 -> NULL(0), 
 18714 ;;  pQuad           1   13[BANK0 ] unsigned char 
 18715 ;;  pValue          1   14[BANK0 ] unsigned char 
 18716 ;; Auto vars:     Size  Location     Type
 18717 ;;		None
 18718 ;; Return value:  Size  Location     Type
 18719 ;;                  1    wreg      void 
 18720 ;; Registers used:
 18721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18722 ;; Tracked objects:
 18723 ;;		On entry : 0/0
 18724 ;;		On exit  : 0/0
 18725 ;;		Unchanged: 0/0
 18726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18727 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18730 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18731 ;;Total ram usage:        4 bytes
 18732 ;; Hardware stack levels used:    1
 18733 ;; Hardware stack levels required when called:    8
 18734 ;; This function calls:
 18735 ;;		_Byte_SetZone
 18736 ;; This function is called by:
 18737 ;;		_Port_SetQuadType
 18738 ;;		_SPI_Init
 18739 ;;		_SPI_MinSpeed
 18740 ;;		_SPI_MaxSpeed
 18741 ;;		_Port_SetQuad
 18742 ;;		_Word_SetQuad
 18743 ;;		_I2C_Init
 18744 ;; This function uses a non-reentrant model
 18745 ;;
 18746                           
 18747                           	psect	text94
 18748  018986                     __ptext94:
 18749                           	opt stack 0
 18750  018986                     _Byte_SetQuad:
 18751                           	opt stack 20
 18752                           
 18753                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 18754                           
 18755                           ; BSR set to: 0
 18756                           ;incstack = 0
 18757  018986  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 18758  01898A  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 18759  01898E  0E02               	movlw	2
 18760  018990  0100               	movlb	0	; () banked
 18761  018992  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 18762  018994  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 18763  018998  0E04               	movlw	4
 18764  01899A  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 18765  01899C  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 18766  0189A0  EC09  F0B9         	call	_Byte_SetZone	;wreg free
 18767  0189A4  0012               	return		;funcret
 18768  0189A6                     __end_of_Byte_SetQuad:
 18769                           	opt stack 0
 18770                           tosu	equ	0xFFF
 18771                           tosh	equ	0xFFE
 18772                           tosl	equ	0xFFD
 18773                           pclath	equ	0xFFA
 18774                           tblptru	equ	0xFF8
 18775                           tblptrh	equ	0xFF7
 18776                           tblptrl	equ	0xFF6
 18777                           tablat	equ	0xFF5
 18778                           prodh	equ	0xFF4
 18779                           prodl	equ	0xFF3
 18780                           intcon	equ	0xFF2
 18781                           indf0	equ	0xFEF
 18782                           postinc0	equ	0xFEE
 18783                           fsr0h	equ	0xFEA
 18784                           fsr0l	equ	0xFE9
 18785                           wreg	equ	0xFE8
 18786                           indf1	equ	0xFE7
 18787                           postdec1	equ	0xFE5
 18788                           fsr1h	equ	0xFE2
 18789                           fsr1l	equ	0xFE1
 18790                           indf2	equ	0xFDF
 18791                           postinc2	equ	0xFDE
 18792                           postdec2	equ	0xFDD
 18793                           plusw2	equ	0xFDB
 18794                           fsr2h	equ	0xFDA
 18795                           fsr2l	equ	0xFD9
 18796                           status	equ	0xFD8
 18797                           
 18798 ;; *************** function _Byte_SetZone *****************
 18799 ;; Defined at:
 18800 ;;		line 47 in file "Library/Types.c"
 18801 ;; Parameters:    Size  Location     Type
 18802 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 18803 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 18804 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 18805 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 18806 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 18807 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 18808 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 18809 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 18810 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18811 ;;  pMax            1    2[BANK0 ] unsigned char 
 18812 ;;  pChunk          1    3[BANK0 ] unsigned char 
 18813 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 18814 ;;  pValue          1    5[BANK0 ] unsigned char 
 18815 ;; Auto vars:     Size  Location     Type
 18816 ;;  MASK            1   10[BANK0 ] unsigned char 
 18817 ;;  Offset          1    9[BANK0 ] unsigned char 
 18818 ;; Return value:  Size  Location     Type
 18819 ;;                  1    wreg      void 
 18820 ;; Registers used:
 18821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18822 ;; Tracked objects:
 18823 ;;		On entry : 0/0
 18824 ;;		On exit  : 0/0
 18825 ;;		Unchanged: 0/0
 18826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18827 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18828 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18829 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18830 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18831 ;;Total ram usage:       11 bytes
 18832 ;; Hardware stack levels used:    1
 18833 ;; Hardware stack levels required when called:    7
 18834 ;; This function calls:
 18835 ;;		Nothing
 18836 ;; This function is called by:
 18837 ;;		_Byte_SetPair
 18838 ;;		_Byte_SetQuad
 18839 ;;		_Byte_SetTriple
 18840 ;; This function uses a non-reentrant model
 18841 ;;
 18842                           
 18843                           	psect	text95
 18844  017212                     __ptext95:
 18845                           	opt stack 0
 18846  017212                     _Byte_SetZone:
 18847                           	opt stack 19
 18848                           
 18849                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 18850                           
 18851                           ;incstack = 0
 18852  017212  0100               	movlb	0	; () banked
 18853  017214  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 18854  017216  0D01               	mullw	1
 18855  017218  0E1F               	movlw	low _MASKS
 18856  01721A  24F3               	addwf	prodl,w,c
 18857  01721C  6EF6               	movwf	tblptrl,c
 18858  01721E  0EFC               	movlw	high _MASKS
 18859  017220  20F4               	addwfc	prodh,w,c
 18860  017222  6EF7               	movwf	tblptrh,c
 18861  017224                     	if	1	;There are 3 active tblptr bytes
 18862  017224  6AF8               	clrf	tblptru,c
 18863  017226  0E00               	movlw	low (__mediumconst shr (0+16))
 18864  017228  22F8               	addwfc	tblptru,f,c
 18865  01722A                     	endif
 18866  01722A  0008               	tblrd		*
 18867  01722C  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 18868                           
 18869                           ; BSR set to: 0
 18870                           ;Types.c: 50: UINT8 Offset = 0;
 18871  017230  0E00               	movlw	0
 18872  017232  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 18873                           
 18874                           ;Types.c: 52: while (pChunk >= pMax)
 18875  017234  D003               	goto	l726
 18876  017236                     
 18877                           ; BSR set to: 0
 18878                           ;Types.c: 53: {
 18879                           ;Types.c: 54: pChunk -= pMax;
 18880                           
 18881                           ; BSR set to: 0
 18882  017236  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 18883  017238  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 18884                           
 18885                           ; BSR set to: 0
 18886                           ;Types.c: 55: Offset += 1;
 18887  01723A  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 18888  01723C                     l726:
 18889                           
 18890                           ; BSR set to: 0
 18891                           
 18892                           ; BSR set to: 0
 18893  01723C  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 18894  01723E  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 18895  017240  B0D8               	btfsc	status,0,c
 18896  017242  D7F9               	goto	l727
 18897                           
 18898                           ; BSR set to: 0
 18899                           ;Types.c: 56: }
 18900                           ;Types.c: 57: pChunk *= pChunkSize;
 18901                           
 18902                           ; BSR set to: 0
 18903  017244  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 18904  017246  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 18905  017248  50F3               	movf	prodl,w,c
 18906  01724A  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 18907                           
 18908                           ; BSR set to: 0
 18909                           ;Types.c: 58: pChunk += Offset;
 18910  01724C  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 18911  01724E  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 18912                           
 18913                           ; BSR set to: 0
 18914                           ;Types.c: 60: pValue &= MASK;
 18915  017250  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 18916  017252  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 18917                           
 18918                           ; BSR set to: 0
 18919                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 18920  017254  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 18921  017258  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 18922  01725C  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 18923  01725E  D002               	goto	u11604
 18924  017260                     u11605:
 18925  017260  90D8               	bcf	status,0,c
 18926  017262  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 18927  017264                     u11604:
 18928  017264  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 18929  017266  D7FC               	goto	u11605
 18930  017268  0100               	movlb	0	; () banked
 18931  01726A  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 18932  01726C  0AFF               	xorlw	255
 18933  01726E  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 18934  017270  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 18935  017274  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 18936  017278  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 18937  01727A  16DF               	andwf	indf2,f,c
 18938                           
 18939                           ; BSR set to: 0
 18940                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 18941  01727C  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 18942  017280  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 18943  017284  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 18944  017286  D002               	goto	u11614
 18945  017288                     u11615:
 18946  017288  90D8               	bcf	status,0,c
 18947  01728A  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 18948  01728C                     u11614:
 18949  01728C  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 18950  01728E  D7FC               	goto	u11615
 18951  017290  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 18952  017294  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 18953  017298  0100               	movlb	0	; () banked
 18954  01729A  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 18955  01729C  12DF               	iorwf	indf2,f,c
 18956                           
 18957                           ; BSR set to: 0
 18958  01729E  0012               	return		;funcret
 18959  0172A0                     __end_of_Byte_SetZone:
 18960                           	opt stack 0
 18961                           tosu	equ	0xFFF
 18962                           tosh	equ	0xFFE
 18963                           tosl	equ	0xFFD
 18964                           pclath	equ	0xFFA
 18965                           tblptru	equ	0xFF8
 18966                           tblptrh	equ	0xFF7
 18967                           tblptrl	equ	0xFF6
 18968                           tablat	equ	0xFF5
 18969                           prodh	equ	0xFF4
 18970                           prodl	equ	0xFF3
 18971                           intcon	equ	0xFF2
 18972                           indf0	equ	0xFEF
 18973                           postinc0	equ	0xFEE
 18974                           fsr0h	equ	0xFEA
 18975                           fsr0l	equ	0xFE9
 18976                           wreg	equ	0xFE8
 18977                           indf1	equ	0xFE7
 18978                           postdec1	equ	0xFE5
 18979                           fsr1h	equ	0xFE2
 18980                           fsr1l	equ	0xFE1
 18981                           indf2	equ	0xFDF
 18982                           postinc2	equ	0xFDE
 18983                           postdec2	equ	0xFDD
 18984                           plusw2	equ	0xFDB
 18985                           fsr2h	equ	0xFDA
 18986                           fsr2l	equ	0xFD9
 18987                           status	equ	0xFD8
 18988                           
 18989 ;; *************** function _Detect_Victim *****************
 18990 ;; Defined at:
 18991 ;;		line 308 in file "dans.c"
 18992 ;; Parameters:    Size  Location     Type
 18993 ;;		None
 18994 ;; Auto vars:     Size  Location     Type
 18995 ;;  Home_Base_St    2   47[BANK0 ] int 
 18996 ;; Return value:  Size  Location     Type
 18997 ;;                  2   44[BANK0 ] int 
 18998 ;; Registers used:
 18999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19000 ;; Tracked objects:
 19001 ;;		On entry : 0/0
 19002 ;;		On exit  : 0/0
 19003 ;;		Unchanged: 0/0
 19004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19005 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19006 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19007 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19008 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19009 ;;Total ram usage:        5 bytes
 19010 ;; Hardware stack levels used:    1
 19011 ;; Hardware stack levels required when called:   13
 19012 ;; This function calls:
 19013 ;;		_Console_Render
 19014 ;;		_eusartRec
 19015 ;;		_eusartSend
 19016 ;;		_printf
 19017 ;; This function is called by:
 19018 ;;		_main
 19019 ;; This function uses a non-reentrant model
 19020 ;;
 19021                           
 19022                           	psect	text96
 19023  017CFC                     __ptext96:
 19024                           	opt stack 0
 19025  017CFC                     _Detect_Victim:
 19026                           	opt stack 17
 19027                           
 19028                           ;dans.c: 309: eusartSend(142);
 19029                           
 19030                           ; BSR set to: 0
 19031                           ;incstack = 0
 19032  017CFC  0E8E               	movlw	142
 19033  017CFE  EC20  F0C6         	call	_eusartSend
 19034                           
 19035                           ;dans.c: 310: eusartSend(17);
 19036  017D02  0E11               	movlw	17
 19037  017D04  EC20  F0C6         	call	_eusartSend
 19038                           
 19039                           ;dans.c: 311: int Home_Base_State = (eusartRec());
 19040  017D08  EC54  F0C6         	call	_eusartRec	;wreg free
 19041  017D0C  0100               	movlb	0	; () banked
 19042  017D0E  6F8E               	movwf	??_Detect_Victim& (0+255),b
 19043  017D10  518E               	movf	??_Detect_Victim& (0+255),w,b
 19044  017D12  6F8F               	movwf	Detect_Victim@Home_Base_State& (0+255),b
 19045  017D14  6B90               	clrf	(Detect_Victim@Home_Base_State+1)& (0+255),b
 19046                           
 19047                           ; BSR set to: 0
 19048                           ;dans.c: 312: if(Home_Base_State >= 240 && Home_Base_State <= 254){
 19049  017D16  BF90               	btfsc	(Detect_Victim@Home_Base_State+1)& (0+255),7,b
 19050  017D18  D012               	goto	l2410
 19051  017D1A  5190               	movf	(Detect_Victim@Home_Base_State+1)& (0+255),w,b
 19052  017D1C  E104               	bnz	u14330
 19053  017D1E  0EF0               	movlw	240
 19054  017D20  5D8F               	subwf	Detect_Victim@Home_Base_State& (0+255),w,b
 19055  017D22  A0D8               	btfss	status,0,c
 19056  017D24  D00C               	goto	l2410
 19057  017D26                     u14330:
 19058                           
 19059                           ; BSR set to: 0
 19060  017D26  BF90               	btfsc	(Detect_Victim@Home_Base_State+1)& (0+255),7,b
 19061  017D28  D005               	goto	u14340
 19062  017D2A  5190               	movf	(Detect_Victim@Home_Base_State+1)& (0+255),w,b
 19063  017D2C  E108               	bnz	l17085
 19064  017D2E  298F               	incf	Detect_Victim@Home_Base_State& (0+255),w,b
 19065  017D30  B0D8               	btfsc	status,0,c
 19066  017D32  D005               	goto	l2410
 19067  017D34                     u14340:
 19068                           
 19069                           ; BSR set to: 0
 19070                           ;dans.c: 313: return 1;
 19071  017D34  0E00               	movlw	0
 19072  017D36  6F8D               	movwf	(?_Detect_Victim+1)& (0+255),b
 19073  017D38  0E01               	movlw	1
 19074  017D3A  6F8C               	movwf	?_Detect_Victim& (0+255),b
 19075                           
 19076                           ; BSR set to: 0
 19077  017D3C  0012               	return	
 19078  017D3E                     l2410:
 19079  017D3E                     l17085:
 19080                           
 19081                           ; BSR set to: 0
 19082                           ;dans.c: 316: else{
 19083                           ;dans.c: 317: printf("\nNOTHING!!!");
 19084  017D3E  0EA4               	movlw	low STR_24
 19085  017D40  6F75               	movwf	printf@f& (0+255),b
 19086  017D42  0EFF               	movlw	high STR_24
 19087  017D44  6F76               	movwf	(printf@f+1)& (0+255),b
 19088  017D46  EC77  F0AB         	call	_printf	;wreg free
 19089                           
 19090                           ;dans.c: 318: Console_Render();
 19091  017D4A  EC9B  F0A7         	call	_Console_Render	;wreg free
 19092                           
 19093                           ;dans.c: 319: }
 19094                           ;dans.c: 320: return 0;
 19095  017D4E  0E00               	movlw	0
 19096  017D50  0100               	movlb	0	; () banked
 19097  017D52  6F8D               	movwf	(?_Detect_Victim+1)& (0+255),b
 19098  017D54  0E00               	movlw	0
 19099  017D56  6F8C               	movwf	?_Detect_Victim& (0+255),b
 19100  017D58  0012               	return	
 19101  017D5A                     __end_of_Detect_Victim:
 19102                           	opt stack 0
 19103                           tosu	equ	0xFFF
 19104                           tosh	equ	0xFFE
 19105                           tosl	equ	0xFFD
 19106                           pclath	equ	0xFFA
 19107                           tblptru	equ	0xFF8
 19108                           tblptrh	equ	0xFF7
 19109                           tblptrl	equ	0xFF6
 19110                           tablat	equ	0xFF5
 19111                           prodh	equ	0xFF4
 19112                           prodl	equ	0xFF3
 19113                           intcon	equ	0xFF2
 19114                           indf0	equ	0xFEF
 19115                           postinc0	equ	0xFEE
 19116                           fsr0h	equ	0xFEA
 19117                           fsr0l	equ	0xFE9
 19118                           wreg	equ	0xFE8
 19119                           indf1	equ	0xFE7
 19120                           postdec1	equ	0xFE5
 19121                           fsr1h	equ	0xFE2
 19122                           fsr1l	equ	0xFE1
 19123                           indf2	equ	0xFDF
 19124                           postinc2	equ	0xFDE
 19125                           postdec2	equ	0xFDD
 19126                           plusw2	equ	0xFDB
 19127                           fsr2h	equ	0xFDA
 19128                           fsr2l	equ	0xFD9
 19129                           status	equ	0xFD8
 19130                           
 19131 ;; *************** function _eusartSend *****************
 19132 ;; Defined at:
 19133 ;;		line 223 in file "dans.c"
 19134 ;; Parameters:    Size  Location     Type
 19135 ;;  sendChar        1    wreg     unsigned char 
 19136 ;; Auto vars:     Size  Location     Type
 19137 ;;  sendChar        1    0[BANK0 ] unsigned char 
 19138 ;; Return value:  Size  Location     Type
 19139 ;;                  1    wreg      void 
 19140 ;; Registers used:
 19141 ;;		wreg
 19142 ;; Tracked objects:
 19143 ;;		On entry : 0/0
 19144 ;;		On exit  : 0/0
 19145 ;;		Unchanged: 0/0
 19146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19150 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19151 ;;Total ram usage:        1 bytes
 19152 ;; Hardware stack levels used:    1
 19153 ;; Hardware stack levels required when called:    7
 19154 ;; This function calls:
 19155 ;;		Nothing
 19156 ;; This function is called by:
 19157 ;;		_Robot_Init
 19158 ;;		_Drive
 19159 ;;		_UpdateDistance
 19160 ;;		_Robot_Stop
 19161 ;;		_Get_VirtualWall_State
 19162 ;;		_Detect_Victim
 19163 ;;		_Turn
 19164 ;;		_Get_Sensor_State
 19165 ;;		_BangBang
 19166 ;;		_LEDOn
 19167 ;;		_LEDOff
 19168 ;; This function uses a non-reentrant model
 19169 ;;
 19170                           
 19171                           	psect	text97
 19172  018C40                     __ptext97:
 19173                           	opt stack 0
 19174  018C40                     _eusartSend:
 19175                           	opt stack 21
 19176                           
 19177                           ; BSR set to: 0
 19178                           ;incstack = 0
 19179                           ;eusartSend@sendChar stored from wreg
 19180  018C40  0100               	movlb	0	; () banked
 19181  018C42  6F60               	movwf	eusartSend@sendChar& (0+255),b
 19182  018C44                     
 19183                           ;dans.c: 224: while(!TXSTA1bits.TRMT){};
 19184  018C44  A2AD               	btfss	4013,1,c	;volatile
 19185  018C46  D7FE               	goto	l14955
 19186                           
 19187                           ;dans.c: 225: TXREG1 = sendChar;
 19188  018C48  C060  FFAE         	movff	eusartSend@sendChar,4014	;volatile
 19189  018C4C  0012               	return		;funcret
 19190  018C4E                     __end_of_eusartSend:
 19191                           	opt stack 0
 19192                           tosu	equ	0xFFF
 19193                           tosh	equ	0xFFE
 19194                           tosl	equ	0xFFD
 19195                           pclath	equ	0xFFA
 19196                           tblptru	equ	0xFF8
 19197                           tblptrh	equ	0xFF7
 19198                           tblptrl	equ	0xFF6
 19199                           tablat	equ	0xFF5
 19200                           prodh	equ	0xFF4
 19201                           prodl	equ	0xFF3
 19202                           intcon	equ	0xFF2
 19203                           indf0	equ	0xFEF
 19204                           postinc0	equ	0xFEE
 19205                           fsr0h	equ	0xFEA
 19206                           fsr0l	equ	0xFE9
 19207                           wreg	equ	0xFE8
 19208                           indf1	equ	0xFE7
 19209                           postdec1	equ	0xFE5
 19210                           fsr1h	equ	0xFE2
 19211                           fsr1l	equ	0xFE1
 19212                           indf2	equ	0xFDF
 19213                           postinc2	equ	0xFDE
 19214                           postdec2	equ	0xFDD
 19215                           plusw2	equ	0xFDB
 19216                           fsr2h	equ	0xFDA
 19217                           fsr2l	equ	0xFD9
 19218                           status	equ	0xFD8
 19219                           
 19220 ;; *************** function _eusartRec *****************
 19221 ;; Defined at:
 19222 ;;		line 227 in file "dans.c"
 19223 ;; Parameters:    Size  Location     Type
 19224 ;;		None
 19225 ;; Auto vars:     Size  Location     Type
 19226 ;;		None
 19227 ;; Return value:  Size  Location     Type
 19228 ;;                  1    wreg      unsigned char 
 19229 ;; Registers used:
 19230 ;;		wreg, status,2
 19231 ;; Tracked objects:
 19232 ;;		On entry : 0/0
 19233 ;;		On exit  : 0/0
 19234 ;;		Unchanged: 0/0
 19235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19240 ;;Total ram usage:        0 bytes
 19241 ;; Hardware stack levels used:    1
 19242 ;; Hardware stack levels required when called:    7
 19243 ;; This function calls:
 19244 ;;		Nothing
 19245 ;; This function is called by:
 19246 ;;		_UpdateDistance
 19247 ;;		_Get_VirtualWall_State
 19248 ;;		_Detect_Victim
 19249 ;;		_Turn
 19250 ;; This function uses a non-reentrant model
 19251 ;;
 19252                           
 19253                           	psect	text98
 19254  018CA8                     __ptext98:
 19255                           	opt stack 0
 19256  018CA8                     _eusartRec:
 19257                           	opt stack 21
 19258                           
 19259                           ;dans.c: 228: while(!PIR1bits.RC1IF){}
 19260                           
 19261                           ;incstack = 0
 19262  018CA8  AA9E               	btfss	3998,5,c	;volatile
 19263  018CAA  D7FE               	goto	_eusartRec
 19264                           
 19265                           ;dans.c: 229: return (int) RCREG1;
 19266  018CAC  50AF               	movf	4015,w,c	;volatile
 19267  018CAE  0012               	return	
 19268  018CB0                     __end_of_eusartRec:
 19269                           	opt stack 0
 19270                           tosu	equ	0xFFF
 19271                           tosh	equ	0xFFE
 19272                           tosl	equ	0xFFD
 19273                           pclath	equ	0xFFA
 19274                           tblptru	equ	0xFF8
 19275                           tblptrh	equ	0xFF7
 19276                           tblptrl	equ	0xFF6
 19277                           tablat	equ	0xFF5
 19278                           prodh	equ	0xFF4
 19279                           prodl	equ	0xFF3
 19280                           intcon	equ	0xFF2
 19281                           indf0	equ	0xFEF
 19282                           postinc0	equ	0xFEE
 19283                           fsr0h	equ	0xFEA
 19284                           fsr0l	equ	0xFE9
 19285                           wreg	equ	0xFE8
 19286                           indf1	equ	0xFE7
 19287                           postdec1	equ	0xFE5
 19288                           fsr1h	equ	0xFE2
 19289                           fsr1l	equ	0xFE1
 19290                           indf2	equ	0xFDF
 19291                           postinc2	equ	0xFDE
 19292                           postdec2	equ	0xFDD
 19293                           plusw2	equ	0xFDB
 19294                           fsr2h	equ	0xFDA
 19295                           fsr2l	equ	0xFD9
 19296                           status	equ	0xFD8
 19297                           
 19298 ;; *************** function _Create_Maze *****************
 19299 ;; Defined at:
 19300 ;;		line 11 in file "dans.c"
 19301 ;; Parameters:    Size  Location     Type
 19302 ;;		None
 19303 ;; Auto vars:     Size  Location     Type
 19304 ;;  p               2   10[BANK0 ] int 
 19305 ;;  y               2   14[BANK0 ] int 
 19306 ;;  x               2   12[BANK0 ] int 
 19307 ;;  count           2    8[BANK0 ] int 
 19308 ;; Return value:  Size  Location     Type
 19309 ;;                  2  2016[None  ] int 
 19310 ;; Registers used:
 19311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19312 ;; Tracked objects:
 19313 ;;		On entry : 0/0
 19314 ;;		On exit  : 0/0
 19315 ;;		Unchanged: 0/0
 19316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19318 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19319 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19320 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19321 ;;Total ram usage:       10 bytes
 19322 ;; Hardware stack levels used:    1
 19323 ;; Hardware stack levels required when called:    8
 19324 ;; This function calls:
 19325 ;;		___wmul
 19326 ;; This function is called by:
 19327 ;;		_main
 19328 ;; This function uses a non-reentrant model
 19329 ;;
 19330                           
 19331                           	psect	text99
 19332  010000                     __ptext99:
 19333                           	opt stack 0
 19334  010000                     _Create_Maze:
 19335                           	opt stack 22
 19336                           
 19337                           ;dans.c: 13: int count = 0;
 19338                           
 19339                           ;incstack = 0
 19340  010000  0E00               	movlw	0
 19341  010002  0100               	movlb	0	; () banked
 19342  010004  6F69               	movwf	(Create_Maze@count+1)& (0+255),b
 19343  010006  0E00               	movlw	0
 19344  010008  6F68               	movwf	Create_Maze@count& (0+255),b
 19345                           
 19346                           ;dans.c: 14: int x = 0;
 19347  01000A  0E00               	movlw	0
 19348  01000C  6F6D               	movwf	(Create_Maze@x+1)& (0+255),b
 19349  01000E  0E00               	movlw	0
 19350  010010  6F6C               	movwf	Create_Maze@x& (0+255),b
 19351                           
 19352                           ;dans.c: 15: int y = 0;
 19353  010012  0E00               	movlw	0
 19354  010014  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 19355  010016  0E00               	movlw	0
 19356  010018  6F6E               	movwf	Create_Maze@y& (0+255),b
 19357                           
 19358                           ;dans.c: 16: for (int p = 0; p < 20; p++){
 19359  01001A  0E00               	movlw	0
 19360  01001C  6F6B               	movwf	(Create_Maze@p+1)& (0+255),b
 19361  01001E  0E00               	movlw	0
 19362  010020  6F6A               	movwf	Create_Maze@p& (0+255),b
 19363  010022                     l16787:
 19364                           
 19365                           ; BSR set to: 0
 19366  010022  BF6B               	btfsc	(Create_Maze@p+1)& (0+255),7,b
 19367  010024  D006               	goto	l2335
 19368  010026  516B               	movf	(Create_Maze@p+1)& (0+255),w,b
 19369  010028  E114               	bnz	l16797
 19370  01002A  0E14               	movlw	20
 19371  01002C  5D6A               	subwf	Create_Maze@p& (0+255),w,b
 19372  01002E  B0D8               	btfsc	status,0,c
 19373  010030  D010               	goto	u14190
 19374  010032                     l2335:
 19375                           
 19376                           ; BSR set to: 0
 19377                           ;dans.c: 17: stack[p]=4;
 19378                           
 19379                           ; BSR set to: 0
 19380  010032  90D8               	bcf	status,0,c
 19381  010034  356A               	rlcf	Create_Maze@p& (0+255),w,b
 19382  010036  6ED9               	movwf	fsr2l,c
 19383  010038  356B               	rlcf	(Create_Maze@p+1)& (0+255),w,b
 19384  01003A  6EDA               	movwf	fsr2h,c
 19385  01003C  0E00               	movlw	low _stack
 19386  01003E  26D9               	addwf	fsr2l,f,c
 19387  010040  0E03               	movlw	high _stack
 19388  010042  22DA               	addwfc	fsr2h,f,c
 19389  010044  0E04               	movlw	4
 19390  010046  6EDE               	movwf	postinc2,c
 19391  010048  0E00               	movlw	0
 19392  01004A  6EDD               	movwf	postdec2,c
 19393                           
 19394                           ; BSR set to: 0
 19395  01004C  4B6A               	infsnz	Create_Maze@p& (0+255),f,b
 19396  01004E  2B6B               	incf	(Create_Maze@p+1)& (0+255),f,b
 19397  010050  D7E8               	goto	l16787
 19398  010052                     u14190:
 19399  010052                     l16797:
 19400                           
 19401                           ; BSR set to: 0
 19402                           ;dans.c: 18: }
 19403                           ;dans.c: 19: for(x = 0 ; x < 4; ++x){
 19404  010052  0E00               	movlw	0
 19405  010054  6F6D               	movwf	(Create_Maze@x+1)& (0+255),b
 19406  010056  0E00               	movlw	0
 19407  010058  6F6C               	movwf	Create_Maze@x& (0+255),b
 19408                           
 19409                           ; BSR set to: 0
 19410  01005A  BF6D               	btfsc	(Create_Maze@x+1)& (0+255),7,b
 19411  01005C  D006               	goto	l2337
 19412  01005E  516D               	movf	(Create_Maze@x+1)& (0+255),w,b
 19413  010060  E170               	bnz	l2338
 19414  010062  0E04               	movlw	4
 19415  010064  5D6C               	subwf	Create_Maze@x& (0+255),w,b
 19416  010066  B0D8               	btfsc	status,0,c
 19417  010068  D06C               	goto	u14230
 19418  01006A                     l2337:
 19419                           
 19420                           ; BSR set to: 0
 19421                           ;dans.c: 20: for(y = 0 ; y < 5; ++y){
 19422                           
 19423                           ; BSR set to: 0
 19424  01006A  0E00               	movlw	0
 19425  01006C  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 19426  01006E  0E00               	movlw	0
 19427  010070  6F6E               	movwf	Create_Maze@y& (0+255),b
 19428  010072                     l16805:
 19429                           
 19430                           ; BSR set to: 0
 19431  010072  BF6F               	btfsc	(Create_Maze@y+1)& (0+255),7,b
 19432  010074  D006               	goto	l2339
 19433  010076  516F               	movf	(Create_Maze@y+1)& (0+255),w,b
 19434  010078  E15D               	bnz	l16817
 19435  01007A  0E05               	movlw	5
 19436  01007C  5D6E               	subwf	Create_Maze@y& (0+255),w,b
 19437  01007E  B0D8               	btfsc	status,0,c
 19438  010080  D059               	goto	u14220
 19439  010082                     l2339:
 19440                           
 19441                           ; BSR set to: 0
 19442                           ;dans.c: 21: maze[x][y].id = count;
 19443                           
 19444                           ; BSR set to: 0
 19445  010082  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19446  010086  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19447  01008A  0E00               	movlw	0
 19448  01008C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19449  01008E  0E32               	movlw	50
 19450  010090  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19451  010092  EC33  F0C4         	call	___wmul	;wreg free
 19452  010096  0E00               	movlw	low _maze
 19453  010098  0100               	movlb	0	; () banked
 19454  01009A  6F66               	movwf	??_Create_Maze& (0+255),b
 19455  01009C  0E02               	movlw	high _maze
 19456  01009E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19457  0100A0  5160               	movf	?___wmul& (0+255),w,b
 19458  0100A2  2766               	addwf	??_Create_Maze& (0+255),f,b
 19459  0100A4  5161               	movf	(?___wmul+1)& (0+255),w,b
 19460  0100A6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19461  0100A8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19462  0100AC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19463  0100B0  0E00               	movlw	0
 19464  0100B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19465  0100B4  0E0A               	movlw	10
 19466  0100B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19467  0100B8  EC33  F0C4         	call	___wmul	;wreg free
 19468  0100BC  0100               	movlb	0	; () banked
 19469  0100BE  5160               	movf	?___wmul& (0+255),w,b
 19470  0100C0  2566               	addwf	??_Create_Maze& (0+255),w,b
 19471  0100C2  6ED9               	movwf	fsr2l,c
 19472  0100C4  5161               	movf	(?___wmul+1)& (0+255),w,b
 19473  0100C6  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19474  0100C8  6EDA               	movwf	fsr2h,c
 19475  0100CA  C068  FFDE         	movff	Create_Maze@count,postinc2
 19476  0100CE  C069  FFDD         	movff	Create_Maze@count+1,postdec2
 19477                           
 19478                           ;dans.c: 22: maze[x][y].victim = 0;
 19479  0100D2  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19480  0100D6  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19481  0100DA  0E00               	movlw	0
 19482  0100DC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19483  0100DE  0E32               	movlw	50
 19484  0100E0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19485  0100E2  EC33  F0C4         	call	___wmul	;wreg free
 19486  0100E6  0E00               	movlw	low _maze
 19487  0100E8  0100               	movlb	0	; () banked
 19488  0100EA  6F66               	movwf	??_Create_Maze& (0+255),b
 19489  0100EC  0E02               	movlw	high _maze
 19490  0100EE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19491  0100F0  5160               	movf	?___wmul& (0+255),w,b
 19492  0100F2  2766               	addwf	??_Create_Maze& (0+255),f,b
 19493  0100F4  5161               	movf	(?___wmul+1)& (0+255),w,b
 19494  0100F6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19495  0100F8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19496  0100FC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19497  010100  0E00               	movlw	0
 19498  010102  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19499  010104  0E0A               	movlw	10
 19500  010106  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19501  010108  EC33  F0C4         	call	___wmul	;wreg free
 19502  01010C  0100               	movlb	0	; () banked
 19503  01010E  5160               	movf	?___wmul& (0+255),w,b
 19504  010110  2766               	addwf	??_Create_Maze& (0+255),f,b
 19505  010112  5161               	movf	(?___wmul+1)& (0+255),w,b
 19506  010114  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19507  010116  0E02               	movlw	2
 19508  010118  2566               	addwf	??_Create_Maze& (0+255),w,b
 19509  01011A  6ED9               	movwf	fsr2l,c
 19510  01011C  0E00               	movlw	0
 19511  01011E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19512  010120  6EDA               	movwf	fsr2h,c
 19513  010122  0E00               	movlw	0
 19514  010124  6EDE               	movwf	postinc2,c
 19515  010126  0E00               	movlw	0
 19516  010128  6EDD               	movwf	postdec2,c
 19517                           
 19518                           ; BSR set to: 0
 19519                           ;dans.c: 23: ++count;
 19520  01012A  4B68               	infsnz	Create_Maze@count& (0+255),f,b
 19521  01012C  2B69               	incf	(Create_Maze@count+1)& (0+255),f,b
 19522                           
 19523                           ; BSR set to: 0
 19524  01012E  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 19525  010130  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 19526  010132  D79F               	goto	l16805
 19527  010134                     u14220:
 19528  010134                     l16817:
 19529                           
 19530                           ; BSR set to: 0
 19531  010134  4B6C               	infsnz	Create_Maze@x& (0+255),f,b
 19532  010136  2B6D               	incf	(Create_Maze@x+1)& (0+255),f,b
 19533                           
 19534                           ; BSR set to: 0
 19535  010138  BF6D               	btfsc	(Create_Maze@x+1)& (0+255),7,b
 19536  01013A  D797               	goto	l2337
 19537  01013C  516D               	movf	(Create_Maze@x+1)& (0+255),w,b
 19538  01013E  E101               	bnz	l16821
 19539  010140  D790               	goto	L16
 19540  010142                     u14230:
 19541  010142                     l2338:
 19542  010142                     l16821:
 19543                           
 19544                           ; BSR set to: 0
 19545                           ;dans.c: 24: }
 19546                           ;dans.c: 25: }
 19547                           ;dans.c: 26: x = 0;
 19548  010142  0E00               	movlw	0
 19549  010144  6F6D               	movwf	(Create_Maze@x+1)& (0+255),b
 19550  010146  0E00               	movlw	0
 19551  010148  6F6C               	movwf	Create_Maze@x& (0+255),b
 19552                           
 19553                           ;dans.c: 27: y = 0;
 19554  01014A  0E00               	movlw	0
 19555  01014C  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 19556  01014E  0E00               	movlw	0
 19557  010150  6F6E               	movwf	Create_Maze@y& (0+255),b
 19558                           
 19559                           ;dans.c: 29: X_Pos = 3;
 19560  010152  0E00               	movlw	0
 19561  010154  0101               	movlb	1	; () banked
 19562  010156  6F3D               	movwf	(_X_Pos+1)& (0+255),b
 19563  010158  0E03               	movlw	3
 19564  01015A  6F3C               	movwf	_X_Pos& (0+255),b
 19565                           
 19566                           ;dans.c: 30: Y_Pos = 1;
 19567  01015C  0E00               	movlw	0
 19568  01015E  6F3B               	movwf	(_Y_Pos+1)& (0+255),b
 19569  010160  0E01               	movlw	1
 19570  010162  6F3A               	movwf	_Y_Pos& (0+255),b
 19571                           
 19572                           ; BSR set to: 1
 19573                           ;dans.c: 32: maze[x][y].walls[0] = 1;
 19574  010164  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19575  010168  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19576  01016C  0E00               	movlw	0
 19577  01016E  0100               	movlb	0	; () banked
 19578  010170  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19579  010172  0E32               	movlw	50
 19580  010174  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19581  010176  EC33  F0C4         	call	___wmul	;wreg free
 19582  01017A  0E00               	movlw	low _maze
 19583  01017C  0100               	movlb	0	; () banked
 19584  01017E  6F66               	movwf	??_Create_Maze& (0+255),b
 19585  010180  0E02               	movlw	high _maze
 19586  010182  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19587  010184  5160               	movf	?___wmul& (0+255),w,b
 19588  010186  2766               	addwf	??_Create_Maze& (0+255),f,b
 19589  010188  5161               	movf	(?___wmul+1)& (0+255),w,b
 19590  01018A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19591  01018C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19592  010190  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19593  010194  0E00               	movlw	0
 19594  010196  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19595  010198  0E0A               	movlw	10
 19596  01019A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19597  01019C  EC33  F0C4         	call	___wmul	;wreg free
 19598  0101A0  0100               	movlb	0	; () banked
 19599  0101A2  5160               	movf	?___wmul& (0+255),w,b
 19600  0101A4  2766               	addwf	??_Create_Maze& (0+255),f,b
 19601  0101A6  5161               	movf	(?___wmul+1)& (0+255),w,b
 19602  0101A8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19603  0101AA  0E04               	movlw	4
 19604  0101AC  2566               	addwf	??_Create_Maze& (0+255),w,b
 19605  0101AE  6ED9               	movwf	fsr2l,c
 19606  0101B0  0E00               	movlw	0
 19607  0101B2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19608  0101B4  6EDA               	movwf	fsr2h,c
 19609  0101B6  0E01               	movlw	1
 19610  0101B8  6EDF               	movwf	indf2,c
 19611                           
 19612                           ; BSR set to: 0
 19613                           ;dans.c: 33: maze[x][y].walls[1] = 0;
 19614  0101BA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19615  0101BE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19616  0101C2  0E00               	movlw	0
 19617  0101C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19618  0101C6  0E32               	movlw	50
 19619  0101C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19620  0101CA  EC33  F0C4         	call	___wmul	;wreg free
 19621  0101CE  0E00               	movlw	low _maze
 19622  0101D0  0100               	movlb	0	; () banked
 19623  0101D2  6F66               	movwf	??_Create_Maze& (0+255),b
 19624  0101D4  0E02               	movlw	high _maze
 19625  0101D6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19626  0101D8  5160               	movf	?___wmul& (0+255),w,b
 19627  0101DA  2766               	addwf	??_Create_Maze& (0+255),f,b
 19628  0101DC  5161               	movf	(?___wmul+1)& (0+255),w,b
 19629  0101DE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19630  0101E0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19631  0101E4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19632  0101E8  0E00               	movlw	0
 19633  0101EA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19634  0101EC  0E0A               	movlw	10
 19635  0101EE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19636  0101F0  EC33  F0C4         	call	___wmul	;wreg free
 19637  0101F4  0100               	movlb	0	; () banked
 19638  0101F6  5160               	movf	?___wmul& (0+255),w,b
 19639  0101F8  2766               	addwf	??_Create_Maze& (0+255),f,b
 19640  0101FA  5161               	movf	(?___wmul+1)& (0+255),w,b
 19641  0101FC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19642  0101FE  0E05               	movlw	5
 19643  010200  2566               	addwf	??_Create_Maze& (0+255),w,b
 19644  010202  6ED9               	movwf	fsr2l,c
 19645  010204  0E00               	movlw	0
 19646  010206  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19647  010208  6EDA               	movwf	fsr2h,c
 19648  01020A  0E00               	movlw	0
 19649  01020C  6EDF               	movwf	indf2,c
 19650                           
 19651                           ; BSR set to: 0
 19652                           ;dans.c: 34: maze[x][y].walls[2] = 0;
 19653  01020E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19654  010212  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19655  010216  0E00               	movlw	0
 19656  010218  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19657  01021A  0E32               	movlw	50
 19658  01021C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19659  01021E  EC33  F0C4         	call	___wmul	;wreg free
 19660  010222  0E00               	movlw	low _maze
 19661  010224  0100               	movlb	0	; () banked
 19662  010226  6F66               	movwf	??_Create_Maze& (0+255),b
 19663  010228  0E02               	movlw	high _maze
 19664  01022A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19665  01022C  5160               	movf	?___wmul& (0+255),w,b
 19666  01022E  2766               	addwf	??_Create_Maze& (0+255),f,b
 19667  010230  5161               	movf	(?___wmul+1)& (0+255),w,b
 19668  010232  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19669  010234  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19670  010238  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19671  01023C  0E00               	movlw	0
 19672  01023E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19673  010240  0E0A               	movlw	10
 19674  010242  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19675  010244  EC33  F0C4         	call	___wmul	;wreg free
 19676  010248  0100               	movlb	0	; () banked
 19677  01024A  5160               	movf	?___wmul& (0+255),w,b
 19678  01024C  2766               	addwf	??_Create_Maze& (0+255),f,b
 19679  01024E  5161               	movf	(?___wmul+1)& (0+255),w,b
 19680  010250  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19681  010252  0E06               	movlw	6
 19682  010254  2566               	addwf	??_Create_Maze& (0+255),w,b
 19683  010256  6ED9               	movwf	fsr2l,c
 19684  010258  0E00               	movlw	0
 19685  01025A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19686  01025C  6EDA               	movwf	fsr2h,c
 19687  01025E  0E00               	movlw	0
 19688  010260  6EDF               	movwf	indf2,c
 19689                           
 19690                           ; BSR set to: 0
 19691                           ;dans.c: 35: maze[x][y].walls[3] = 1;
 19692  010262  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19693  010266  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19694  01026A  0E00               	movlw	0
 19695  01026C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19696  01026E  0E32               	movlw	50
 19697  010270  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19698  010272  EC33  F0C4         	call	___wmul	;wreg free
 19699  010276  0E00               	movlw	low _maze
 19700  010278  0100               	movlb	0	; () banked
 19701  01027A  6F66               	movwf	??_Create_Maze& (0+255),b
 19702  01027C  0E02               	movlw	high _maze
 19703  01027E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19704  010280  5160               	movf	?___wmul& (0+255),w,b
 19705  010282  2766               	addwf	??_Create_Maze& (0+255),f,b
 19706  010284  5161               	movf	(?___wmul+1)& (0+255),w,b
 19707  010286  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19708  010288  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19709  01028C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19710  010290  0E00               	movlw	0
 19711  010292  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19712  010294  0E0A               	movlw	10
 19713  010296  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19714  010298  EC33  F0C4         	call	___wmul	;wreg free
 19715  01029C  0100               	movlb	0	; () banked
 19716  01029E  5160               	movf	?___wmul& (0+255),w,b
 19717  0102A0  2766               	addwf	??_Create_Maze& (0+255),f,b
 19718  0102A2  5161               	movf	(?___wmul+1)& (0+255),w,b
 19719  0102A4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19720  0102A6  0E07               	movlw	7
 19721  0102A8  2566               	addwf	??_Create_Maze& (0+255),w,b
 19722  0102AA  6ED9               	movwf	fsr2l,c
 19723  0102AC  0E00               	movlw	0
 19724  0102AE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19725  0102B0  6EDA               	movwf	fsr2h,c
 19726  0102B2  0E01               	movlw	1
 19727  0102B4  6EDF               	movwf	indf2,c
 19728                           
 19729                           ; BSR set to: 0
 19730                           ;dans.c: 36: maze[x][y].Options = 2;
 19731  0102B6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19732  0102BA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19733  0102BE  0E00               	movlw	0
 19734  0102C0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19735  0102C2  0E32               	movlw	50
 19736  0102C4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19737  0102C6  EC33  F0C4         	call	___wmul	;wreg free
 19738  0102CA  0E00               	movlw	low _maze
 19739  0102CC  0100               	movlb	0	; () banked
 19740  0102CE  6F66               	movwf	??_Create_Maze& (0+255),b
 19741  0102D0  0E02               	movlw	high _maze
 19742  0102D2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19743  0102D4  5160               	movf	?___wmul& (0+255),w,b
 19744  0102D6  2766               	addwf	??_Create_Maze& (0+255),f,b
 19745  0102D8  5161               	movf	(?___wmul+1)& (0+255),w,b
 19746  0102DA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19747  0102DC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19748  0102E0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19749  0102E4  0E00               	movlw	0
 19750  0102E6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19751  0102E8  0E0A               	movlw	10
 19752  0102EA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19753  0102EC  EC33  F0C4         	call	___wmul	;wreg free
 19754  0102F0  0100               	movlb	0	; () banked
 19755  0102F2  5160               	movf	?___wmul& (0+255),w,b
 19756  0102F4  2766               	addwf	??_Create_Maze& (0+255),f,b
 19757  0102F6  5161               	movf	(?___wmul+1)& (0+255),w,b
 19758  0102F8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19759  0102FA  0E08               	movlw	8
 19760  0102FC  2566               	addwf	??_Create_Maze& (0+255),w,b
 19761  0102FE  6ED9               	movwf	fsr2l,c
 19762  010300  0E00               	movlw	0
 19763  010302  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19764  010304  6EDA               	movwf	fsr2h,c
 19765  010306  0E02               	movlw	2
 19766  010308  6EDE               	movwf	postinc2,c
 19767  01030A  0E00               	movlw	0
 19768  01030C  6EDD               	movwf	postdec2,c
 19769                           
 19770                           ; BSR set to: 0
 19771                           ;dans.c: 38: ++y;
 19772  01030E  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 19773  010310  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 19774                           
 19775                           ; BSR set to: 0
 19776                           ;dans.c: 39: maze[x][y].walls[0] = 1;
 19777  010312  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19778  010316  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19779  01031A  0E00               	movlw	0
 19780  01031C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19781  01031E  0E32               	movlw	50
 19782  010320  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19783  010322  EC33  F0C4         	call	___wmul	;wreg free
 19784  010326  0E00               	movlw	low _maze
 19785  010328  0100               	movlb	0	; () banked
 19786  01032A  6F66               	movwf	??_Create_Maze& (0+255),b
 19787  01032C  0E02               	movlw	high _maze
 19788  01032E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19789  010330  5160               	movf	?___wmul& (0+255),w,b
 19790  010332  2766               	addwf	??_Create_Maze& (0+255),f,b
 19791  010334  5161               	movf	(?___wmul+1)& (0+255),w,b
 19792  010336  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19793  010338  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19794  01033C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19795  010340  0E00               	movlw	0
 19796  010342  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19797  010344  0E0A               	movlw	10
 19798  010346  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19799  010348  EC33  F0C4         	call	___wmul	;wreg free
 19800  01034C  0100               	movlb	0	; () banked
 19801  01034E  5160               	movf	?___wmul& (0+255),w,b
 19802  010350  2766               	addwf	??_Create_Maze& (0+255),f,b
 19803  010352  5161               	movf	(?___wmul+1)& (0+255),w,b
 19804  010354  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19805  010356  0E04               	movlw	4
 19806  010358  2566               	addwf	??_Create_Maze& (0+255),w,b
 19807  01035A  6ED9               	movwf	fsr2l,c
 19808  01035C  0E00               	movlw	0
 19809  01035E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19810  010360  6EDA               	movwf	fsr2h,c
 19811  010362  0E01               	movlw	1
 19812  010364  6EDF               	movwf	indf2,c
 19813                           
 19814                           ; BSR set to: 0
 19815                           ;dans.c: 40: maze[x][y].walls[1] = 0;
 19816  010366  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19817  01036A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19818  01036E  0E00               	movlw	0
 19819  010370  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19820  010372  0E32               	movlw	50
 19821  010374  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19822  010376  EC33  F0C4         	call	___wmul	;wreg free
 19823  01037A  0E00               	movlw	low _maze
 19824  01037C  0100               	movlb	0	; () banked
 19825  01037E  6F66               	movwf	??_Create_Maze& (0+255),b
 19826  010380  0E02               	movlw	high _maze
 19827  010382  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19828  010384  5160               	movf	?___wmul& (0+255),w,b
 19829  010386  2766               	addwf	??_Create_Maze& (0+255),f,b
 19830  010388  5161               	movf	(?___wmul+1)& (0+255),w,b
 19831  01038A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19832  01038C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19833  010390  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19834  010394  0E00               	movlw	0
 19835  010396  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19836  010398  0E0A               	movlw	10
 19837  01039A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19838  01039C  EC33  F0C4         	call	___wmul	;wreg free
 19839  0103A0  0100               	movlb	0	; () banked
 19840  0103A2  5160               	movf	?___wmul& (0+255),w,b
 19841  0103A4  2766               	addwf	??_Create_Maze& (0+255),f,b
 19842  0103A6  5161               	movf	(?___wmul+1)& (0+255),w,b
 19843  0103A8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19844  0103AA  0E05               	movlw	5
 19845  0103AC  2566               	addwf	??_Create_Maze& (0+255),w,b
 19846  0103AE  6ED9               	movwf	fsr2l,c
 19847  0103B0  0E00               	movlw	0
 19848  0103B2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19849  0103B4  6EDA               	movwf	fsr2h,c
 19850  0103B6  0E00               	movlw	0
 19851  0103B8  6EDF               	movwf	indf2,c
 19852                           
 19853                           ; BSR set to: 0
 19854                           ;dans.c: 41: maze[x][y].walls[2] = 1;
 19855  0103BA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19856  0103BE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19857  0103C2  0E00               	movlw	0
 19858  0103C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19859  0103C6  0E32               	movlw	50
 19860  0103C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19861  0103CA  EC33  F0C4         	call	___wmul	;wreg free
 19862  0103CE  0E00               	movlw	low _maze
 19863  0103D0  0100               	movlb	0	; () banked
 19864  0103D2  6F66               	movwf	??_Create_Maze& (0+255),b
 19865  0103D4  0E02               	movlw	high _maze
 19866  0103D6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19867  0103D8  5160               	movf	?___wmul& (0+255),w,b
 19868  0103DA  2766               	addwf	??_Create_Maze& (0+255),f,b
 19869  0103DC  5161               	movf	(?___wmul+1)& (0+255),w,b
 19870  0103DE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19871  0103E0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19872  0103E4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19873  0103E8  0E00               	movlw	0
 19874  0103EA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19875  0103EC  0E0A               	movlw	10
 19876  0103EE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19877  0103F0  EC33  F0C4         	call	___wmul	;wreg free
 19878  0103F4  0100               	movlb	0	; () banked
 19879  0103F6  5160               	movf	?___wmul& (0+255),w,b
 19880  0103F8  2766               	addwf	??_Create_Maze& (0+255),f,b
 19881  0103FA  5161               	movf	(?___wmul+1)& (0+255),w,b
 19882  0103FC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19883  0103FE  0E06               	movlw	6
 19884  010400  2566               	addwf	??_Create_Maze& (0+255),w,b
 19885  010402  6ED9               	movwf	fsr2l,c
 19886  010404  0E00               	movlw	0
 19887  010406  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19888  010408  6EDA               	movwf	fsr2h,c
 19889  01040A  0E01               	movlw	1
 19890  01040C  6EDF               	movwf	indf2,c
 19891                           
 19892                           ; BSR set to: 0
 19893                           ;dans.c: 42: maze[x][y].walls[3] = 0;
 19894  01040E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19895  010412  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19896  010416  0E00               	movlw	0
 19897  010418  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19898  01041A  0E32               	movlw	50
 19899  01041C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19900  01041E  EC33  F0C4         	call	___wmul	;wreg free
 19901  010422  0E00               	movlw	low _maze
 19902  010424  0100               	movlb	0	; () banked
 19903  010426  6F66               	movwf	??_Create_Maze& (0+255),b
 19904  010428  0E02               	movlw	high _maze
 19905  01042A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19906  01042C  5160               	movf	?___wmul& (0+255),w,b
 19907  01042E  2766               	addwf	??_Create_Maze& (0+255),f,b
 19908  010430  5161               	movf	(?___wmul+1)& (0+255),w,b
 19909  010432  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19910  010434  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19911  010438  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19912  01043C  0E00               	movlw	0
 19913  01043E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19914  010440  0E0A               	movlw	10
 19915  010442  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19916  010444  EC33  F0C4         	call	___wmul	;wreg free
 19917  010448  0100               	movlb	0	; () banked
 19918  01044A  5160               	movf	?___wmul& (0+255),w,b
 19919  01044C  2766               	addwf	??_Create_Maze& (0+255),f,b
 19920  01044E  5161               	movf	(?___wmul+1)& (0+255),w,b
 19921  010450  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19922  010452  0E07               	movlw	7
 19923  010454  2566               	addwf	??_Create_Maze& (0+255),w,b
 19924  010456  6ED9               	movwf	fsr2l,c
 19925  010458  0E00               	movlw	0
 19926  01045A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19927  01045C  6EDA               	movwf	fsr2h,c
 19928  01045E  0E00               	movlw	0
 19929  010460  6EDF               	movwf	indf2,c
 19930                           
 19931                           ; BSR set to: 0
 19932                           ;dans.c: 43: maze[x][y].Options = 2;
 19933  010462  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19934  010466  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19935  01046A  0E00               	movlw	0
 19936  01046C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19937  01046E  0E32               	movlw	50
 19938  010470  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19939  010472  EC33  F0C4         	call	___wmul	;wreg free
 19940  010476  0E00               	movlw	low _maze
 19941  010478  0100               	movlb	0	; () banked
 19942  01047A  6F66               	movwf	??_Create_Maze& (0+255),b
 19943  01047C  0E02               	movlw	high _maze
 19944  01047E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19945  010480  5160               	movf	?___wmul& (0+255),w,b
 19946  010482  2766               	addwf	??_Create_Maze& (0+255),f,b
 19947  010484  5161               	movf	(?___wmul+1)& (0+255),w,b
 19948  010486  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19949  010488  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19950  01048C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19951  010490  0E00               	movlw	0
 19952  010492  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19953  010494  0E0A               	movlw	10
 19954  010496  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19955  010498  EC33  F0C4         	call	___wmul	;wreg free
 19956  01049C  0100               	movlb	0	; () banked
 19957  01049E  5160               	movf	?___wmul& (0+255),w,b
 19958  0104A0  2766               	addwf	??_Create_Maze& (0+255),f,b
 19959  0104A2  5161               	movf	(?___wmul+1)& (0+255),w,b
 19960  0104A4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19961  0104A6  0E08               	movlw	8
 19962  0104A8  2566               	addwf	??_Create_Maze& (0+255),w,b
 19963  0104AA  6ED9               	movwf	fsr2l,c
 19964  0104AC  0E00               	movlw	0
 19965  0104AE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19966  0104B0  6EDA               	movwf	fsr2h,c
 19967  0104B2  0E02               	movlw	2
 19968  0104B4  6EDE               	movwf	postinc2,c
 19969  0104B6  0E00               	movlw	0
 19970  0104B8  6EDD               	movwf	postdec2,c
 19971                           
 19972                           ; BSR set to: 0
 19973                           ;dans.c: 45: ++y;
 19974  0104BA  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 19975  0104BC  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 19976                           
 19977                           ; BSR set to: 0
 19978                           ;dans.c: 46: maze[x][y].walls[0] = 1;
 19979  0104BE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19980  0104C2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19981  0104C6  0E00               	movlw	0
 19982  0104C8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19983  0104CA  0E32               	movlw	50
 19984  0104CC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19985  0104CE  EC33  F0C4         	call	___wmul	;wreg free
 19986  0104D2  0E00               	movlw	low _maze
 19987  0104D4  0100               	movlb	0	; () banked
 19988  0104D6  6F66               	movwf	??_Create_Maze& (0+255),b
 19989  0104D8  0E02               	movlw	high _maze
 19990  0104DA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19991  0104DC  5160               	movf	?___wmul& (0+255),w,b
 19992  0104DE  2766               	addwf	??_Create_Maze& (0+255),f,b
 19993  0104E0  5161               	movf	(?___wmul+1)& (0+255),w,b
 19994  0104E2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19995  0104E4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19996  0104E8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19997  0104EC  0E00               	movlw	0
 19998  0104EE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19999  0104F0  0E0A               	movlw	10
 20000  0104F2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20001  0104F4  EC33  F0C4         	call	___wmul	;wreg free
 20002  0104F8  0100               	movlb	0	; () banked
 20003  0104FA  5160               	movf	?___wmul& (0+255),w,b
 20004  0104FC  2766               	addwf	??_Create_Maze& (0+255),f,b
 20005  0104FE  5161               	movf	(?___wmul+1)& (0+255),w,b
 20006  010500  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20007  010502  0E04               	movlw	4
 20008  010504  2566               	addwf	??_Create_Maze& (0+255),w,b
 20009  010506  6ED9               	movwf	fsr2l,c
 20010  010508  0E00               	movlw	0
 20011  01050A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20012  01050C  6EDA               	movwf	fsr2h,c
 20013  01050E  0E01               	movlw	1
 20014  010510  6EDF               	movwf	indf2,c
 20015                           
 20016                           ; BSR set to: 0
 20017                           ;dans.c: 47: maze[x][y].walls[1] = 0;
 20018  010512  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20019  010516  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20020  01051A  0E00               	movlw	0
 20021  01051C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20022  01051E  0E32               	movlw	50
 20023  010520  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20024  010522  EC33  F0C4         	call	___wmul	;wreg free
 20025  010526  0E00               	movlw	low _maze
 20026  010528  0100               	movlb	0	; () banked
 20027  01052A  6F66               	movwf	??_Create_Maze& (0+255),b
 20028  01052C  0E02               	movlw	high _maze
 20029  01052E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20030  010530  5160               	movf	?___wmul& (0+255),w,b
 20031  010532  2766               	addwf	??_Create_Maze& (0+255),f,b
 20032  010534  5161               	movf	(?___wmul+1)& (0+255),w,b
 20033  010536  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20034  010538  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20035  01053C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20036  010540  0E00               	movlw	0
 20037  010542  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20038  010544  0E0A               	movlw	10
 20039  010546  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20040  010548  EC33  F0C4         	call	___wmul	;wreg free
 20041  01054C  0100               	movlb	0	; () banked
 20042  01054E  5160               	movf	?___wmul& (0+255),w,b
 20043  010550  2766               	addwf	??_Create_Maze& (0+255),f,b
 20044  010552  5161               	movf	(?___wmul+1)& (0+255),w,b
 20045  010554  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20046  010556  0E05               	movlw	5
 20047  010558  2566               	addwf	??_Create_Maze& (0+255),w,b
 20048  01055A  6ED9               	movwf	fsr2l,c
 20049  01055C  0E00               	movlw	0
 20050  01055E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20051  010560  6EDA               	movwf	fsr2h,c
 20052  010562  0E00               	movlw	0
 20053  010564  6EDF               	movwf	indf2,c
 20054                           
 20055                           ; BSR set to: 0
 20056                           ;dans.c: 48: maze[x][y].walls[2] = 0;
 20057  010566  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20058  01056A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20059  01056E  0E00               	movlw	0
 20060  010570  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20061  010572  0E32               	movlw	50
 20062  010574  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20063  010576  EC33  F0C4         	call	___wmul	;wreg free
 20064  01057A  0E00               	movlw	low _maze
 20065  01057C  0100               	movlb	0	; () banked
 20066  01057E  6F66               	movwf	??_Create_Maze& (0+255),b
 20067  010580  0E02               	movlw	high _maze
 20068  010582  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20069  010584  5160               	movf	?___wmul& (0+255),w,b
 20070  010586  2766               	addwf	??_Create_Maze& (0+255),f,b
 20071  010588  5161               	movf	(?___wmul+1)& (0+255),w,b
 20072  01058A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20073  01058C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20074  010590  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20075  010594  0E00               	movlw	0
 20076  010596  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20077  010598  0E0A               	movlw	10
 20078  01059A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20079  01059C  EC33  F0C4         	call	___wmul	;wreg free
 20080  0105A0  0100               	movlb	0	; () banked
 20081  0105A2  5160               	movf	?___wmul& (0+255),w,b
 20082  0105A4  2766               	addwf	??_Create_Maze& (0+255),f,b
 20083  0105A6  5161               	movf	(?___wmul+1)& (0+255),w,b
 20084  0105A8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20085  0105AA  0E06               	movlw	6
 20086  0105AC  2566               	addwf	??_Create_Maze& (0+255),w,b
 20087  0105AE  6ED9               	movwf	fsr2l,c
 20088  0105B0  0E00               	movlw	0
 20089  0105B2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20090  0105B4  6EDA               	movwf	fsr2h,c
 20091  0105B6  0E00               	movlw	0
 20092  0105B8  6EDF               	movwf	indf2,c
 20093                           
 20094                           ; BSR set to: 0
 20095                           ;dans.c: 49: maze[x][y].walls[3] = 0;
 20096  0105BA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20097  0105BE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20098  0105C2  0E00               	movlw	0
 20099  0105C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20100  0105C6  0E32               	movlw	50
 20101  0105C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20102  0105CA  EC33  F0C4         	call	___wmul	;wreg free
 20103  0105CE  0E00               	movlw	low _maze
 20104  0105D0  0100               	movlb	0	; () banked
 20105  0105D2  6F66               	movwf	??_Create_Maze& (0+255),b
 20106  0105D4  0E02               	movlw	high _maze
 20107  0105D6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20108  0105D8  5160               	movf	?___wmul& (0+255),w,b
 20109  0105DA  2766               	addwf	??_Create_Maze& (0+255),f,b
 20110  0105DC  5161               	movf	(?___wmul+1)& (0+255),w,b
 20111  0105DE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20112  0105E0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20113  0105E4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20114  0105E8  0E00               	movlw	0
 20115  0105EA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20116  0105EC  0E0A               	movlw	10
 20117  0105EE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20118  0105F0  EC33  F0C4         	call	___wmul	;wreg free
 20119  0105F4  0100               	movlb	0	; () banked
 20120  0105F6  5160               	movf	?___wmul& (0+255),w,b
 20121  0105F8  2766               	addwf	??_Create_Maze& (0+255),f,b
 20122  0105FA  5161               	movf	(?___wmul+1)& (0+255),w,b
 20123  0105FC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20124  0105FE  0E07               	movlw	7
 20125  010600  2566               	addwf	??_Create_Maze& (0+255),w,b
 20126  010602  6ED9               	movwf	fsr2l,c
 20127  010604  0E00               	movlw	0
 20128  010606  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20129  010608  6EDA               	movwf	fsr2h,c
 20130  01060A  0E00               	movlw	0
 20131  01060C  6EDF               	movwf	indf2,c
 20132                           
 20133                           ; BSR set to: 0
 20134                           ;dans.c: 50: maze[x][y].Options = 3;
 20135  01060E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20136  010612  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20137  010616  0E00               	movlw	0
 20138  010618  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20139  01061A  0E32               	movlw	50
 20140  01061C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20141  01061E  EC33  F0C4         	call	___wmul	;wreg free
 20142  010622  0E00               	movlw	low _maze
 20143  010624  0100               	movlb	0	; () banked
 20144  010626  6F66               	movwf	??_Create_Maze& (0+255),b
 20145  010628  0E02               	movlw	high _maze
 20146  01062A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20147  01062C  5160               	movf	?___wmul& (0+255),w,b
 20148  01062E  2766               	addwf	??_Create_Maze& (0+255),f,b
 20149  010630  5161               	movf	(?___wmul+1)& (0+255),w,b
 20150  010632  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20151  010634  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20152  010638  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20153  01063C  0E00               	movlw	0
 20154  01063E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20155  010640  0E0A               	movlw	10
 20156  010642  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20157  010644  EC33  F0C4         	call	___wmul	;wreg free
 20158  010648  0100               	movlb	0	; () banked
 20159  01064A  5160               	movf	?___wmul& (0+255),w,b
 20160  01064C  2766               	addwf	??_Create_Maze& (0+255),f,b
 20161  01064E  5161               	movf	(?___wmul+1)& (0+255),w,b
 20162  010650  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20163  010652  0E08               	movlw	8
 20164  010654  2566               	addwf	??_Create_Maze& (0+255),w,b
 20165  010656  6ED9               	movwf	fsr2l,c
 20166  010658  0E00               	movlw	0
 20167  01065A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20168  01065C  6EDA               	movwf	fsr2h,c
 20169  01065E  0E03               	movlw	3
 20170  010660  6EDE               	movwf	postinc2,c
 20171  010662  0E00               	movlw	0
 20172  010664  6EDD               	movwf	postdec2,c
 20173                           
 20174                           ; BSR set to: 0
 20175                           ;dans.c: 52: ++y;
 20176  010666  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 20177  010668  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 20178                           
 20179                           ; BSR set to: 0
 20180                           ;dans.c: 53: maze[x][y].walls[0] = 1;
 20181  01066A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20182  01066E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20183  010672  0E00               	movlw	0
 20184  010674  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20185  010676  0E32               	movlw	50
 20186  010678  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20187  01067A  EC33  F0C4         	call	___wmul	;wreg free
 20188  01067E  0E00               	movlw	low _maze
 20189  010680  0100               	movlb	0	; () banked
 20190  010682  6F66               	movwf	??_Create_Maze& (0+255),b
 20191  010684  0E02               	movlw	high _maze
 20192  010686  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20193  010688  5160               	movf	?___wmul& (0+255),w,b
 20194  01068A  2766               	addwf	??_Create_Maze& (0+255),f,b
 20195  01068C  5161               	movf	(?___wmul+1)& (0+255),w,b
 20196  01068E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20197  010690  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20198  010694  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20199  010698  0E00               	movlw	0
 20200  01069A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20201  01069C  0E0A               	movlw	10
 20202  01069E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20203  0106A0  EC33  F0C4         	call	___wmul	;wreg free
 20204  0106A4  0100               	movlb	0	; () banked
 20205  0106A6  5160               	movf	?___wmul& (0+255),w,b
 20206  0106A8  2766               	addwf	??_Create_Maze& (0+255),f,b
 20207  0106AA  5161               	movf	(?___wmul+1)& (0+255),w,b
 20208  0106AC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20209  0106AE  0E04               	movlw	4
 20210  0106B0  2566               	addwf	??_Create_Maze& (0+255),w,b
 20211  0106B2  6ED9               	movwf	fsr2l,c
 20212  0106B4  0E00               	movlw	0
 20213  0106B6  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20214  0106B8  6EDA               	movwf	fsr2h,c
 20215  0106BA  0E01               	movlw	1
 20216  0106BC  6EDF               	movwf	indf2,c
 20217                           
 20218                           ; BSR set to: 0
 20219                           ;dans.c: 54: maze[x][y].walls[1] = 1;
 20220  0106BE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20221  0106C2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20222  0106C6  0E00               	movlw	0
 20223  0106C8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20224  0106CA  0E32               	movlw	50
 20225  0106CC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20226  0106CE  EC33  F0C4         	call	___wmul	;wreg free
 20227  0106D2  0E00               	movlw	low _maze
 20228  0106D4  0100               	movlb	0	; () banked
 20229  0106D6  6F66               	movwf	??_Create_Maze& (0+255),b
 20230  0106D8  0E02               	movlw	high _maze
 20231  0106DA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20232  0106DC  5160               	movf	?___wmul& (0+255),w,b
 20233  0106DE  2766               	addwf	??_Create_Maze& (0+255),f,b
 20234  0106E0  5161               	movf	(?___wmul+1)& (0+255),w,b
 20235  0106E2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20236  0106E4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20237  0106E8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20238  0106EC  0E00               	movlw	0
 20239  0106EE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20240  0106F0  0E0A               	movlw	10
 20241  0106F2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20242  0106F4  EC33  F0C4         	call	___wmul	;wreg free
 20243  0106F8  0100               	movlb	0	; () banked
 20244  0106FA  5160               	movf	?___wmul& (0+255),w,b
 20245  0106FC  2766               	addwf	??_Create_Maze& (0+255),f,b
 20246  0106FE  5161               	movf	(?___wmul+1)& (0+255),w,b
 20247  010700  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20248  010702  0E05               	movlw	5
 20249  010704  2566               	addwf	??_Create_Maze& (0+255),w,b
 20250  010706  6ED9               	movwf	fsr2l,c
 20251  010708  0E00               	movlw	0
 20252  01070A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20253  01070C  6EDA               	movwf	fsr2h,c
 20254  01070E  0E01               	movlw	1
 20255  010710  6EDF               	movwf	indf2,c
 20256                           
 20257                           ; BSR set to: 0
 20258                           ;dans.c: 55: maze[x][y].walls[2] = 0;
 20259  010712  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20260  010716  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20261  01071A  0E00               	movlw	0
 20262  01071C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20263  01071E  0E32               	movlw	50
 20264  010720  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20265  010722  EC33  F0C4         	call	___wmul	;wreg free
 20266  010726  0E00               	movlw	low _maze
 20267  010728  0100               	movlb	0	; () banked
 20268  01072A  6F66               	movwf	??_Create_Maze& (0+255),b
 20269  01072C  0E02               	movlw	high _maze
 20270  01072E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20271  010730  5160               	movf	?___wmul& (0+255),w,b
 20272  010732  2766               	addwf	??_Create_Maze& (0+255),f,b
 20273  010734  5161               	movf	(?___wmul+1)& (0+255),w,b
 20274  010736  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20275  010738  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20276  01073C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20277  010740  0E00               	movlw	0
 20278  010742  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20279  010744  0E0A               	movlw	10
 20280  010746  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20281  010748  EC33  F0C4         	call	___wmul	;wreg free
 20282  01074C  0100               	movlb	0	; () banked
 20283  01074E  5160               	movf	?___wmul& (0+255),w,b
 20284  010750  2766               	addwf	??_Create_Maze& (0+255),f,b
 20285  010752  5161               	movf	(?___wmul+1)& (0+255),w,b
 20286  010754  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20287  010756  0E06               	movlw	6
 20288  010758  2566               	addwf	??_Create_Maze& (0+255),w,b
 20289  01075A  6ED9               	movwf	fsr2l,c
 20290  01075C  0E00               	movlw	0
 20291  01075E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20292  010760  6EDA               	movwf	fsr2h,c
 20293  010762  0E00               	movlw	0
 20294  010764  6EDF               	movwf	indf2,c
 20295                           
 20296                           ; BSR set to: 0
 20297                           ;dans.c: 56: maze[x][y].walls[3] = 0;
 20298  010766  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20299  01076A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20300  01076E  0E00               	movlw	0
 20301  010770  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20302  010772  0E32               	movlw	50
 20303  010774  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20304  010776  EC33  F0C4         	call	___wmul	;wreg free
 20305  01077A  0E00               	movlw	low _maze
 20306  01077C  0100               	movlb	0	; () banked
 20307  01077E  6F66               	movwf	??_Create_Maze& (0+255),b
 20308  010780  0E02               	movlw	high _maze
 20309  010782  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20310  010784  5160               	movf	?___wmul& (0+255),w,b
 20311  010786  2766               	addwf	??_Create_Maze& (0+255),f,b
 20312  010788  5161               	movf	(?___wmul+1)& (0+255),w,b
 20313  01078A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20314  01078C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20315  010790  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20316  010794  0E00               	movlw	0
 20317  010796  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20318  010798  0E0A               	movlw	10
 20319  01079A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20320  01079C  EC33  F0C4         	call	___wmul	;wreg free
 20321  0107A0  0100               	movlb	0	; () banked
 20322  0107A2  5160               	movf	?___wmul& (0+255),w,b
 20323  0107A4  2766               	addwf	??_Create_Maze& (0+255),f,b
 20324  0107A6  5161               	movf	(?___wmul+1)& (0+255),w,b
 20325  0107A8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20326  0107AA  0E07               	movlw	7
 20327  0107AC  2566               	addwf	??_Create_Maze& (0+255),w,b
 20328  0107AE  6ED9               	movwf	fsr2l,c
 20329  0107B0  0E00               	movlw	0
 20330  0107B2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20331  0107B4  6EDA               	movwf	fsr2h,c
 20332  0107B6  0E00               	movlw	0
 20333  0107B8  6EDF               	movwf	indf2,c
 20334                           
 20335                           ; BSR set to: 0
 20336                           ;dans.c: 57: maze[x][y].Options = 2;
 20337  0107BA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20338  0107BE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20339  0107C2  0E00               	movlw	0
 20340  0107C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20341  0107C6  0E32               	movlw	50
 20342  0107C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20343  0107CA  EC33  F0C4         	call	___wmul	;wreg free
 20344  0107CE  0E00               	movlw	low _maze
 20345  0107D0  0100               	movlb	0	; () banked
 20346  0107D2  6F66               	movwf	??_Create_Maze& (0+255),b
 20347  0107D4  0E02               	movlw	high _maze
 20348  0107D6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20349  0107D8  5160               	movf	?___wmul& (0+255),w,b
 20350  0107DA  2766               	addwf	??_Create_Maze& (0+255),f,b
 20351  0107DC  5161               	movf	(?___wmul+1)& (0+255),w,b
 20352  0107DE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20353  0107E0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20354  0107E4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20355  0107E8  0E00               	movlw	0
 20356  0107EA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20357  0107EC  0E0A               	movlw	10
 20358  0107EE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20359  0107F0  EC33  F0C4         	call	___wmul	;wreg free
 20360  0107F4  0100               	movlb	0	; () banked
 20361  0107F6  5160               	movf	?___wmul& (0+255),w,b
 20362  0107F8  2766               	addwf	??_Create_Maze& (0+255),f,b
 20363  0107FA  5161               	movf	(?___wmul+1)& (0+255),w,b
 20364  0107FC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20365  0107FE  0E08               	movlw	8
 20366  010800  2566               	addwf	??_Create_Maze& (0+255),w,b
 20367  010802  6ED9               	movwf	fsr2l,c
 20368  010804  0E00               	movlw	0
 20369  010806  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20370  010808  6EDA               	movwf	fsr2h,c
 20371  01080A  0E02               	movlw	2
 20372  01080C  6EDE               	movwf	postinc2,c
 20373  01080E  0E00               	movlw	0
 20374  010810  6EDD               	movwf	postdec2,c
 20375                           
 20376                           ; BSR set to: 0
 20377                           ;dans.c: 59: ++y;
 20378  010812  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 20379  010814  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 20380                           
 20381                           ; BSR set to: 0
 20382                           ;dans.c: 60: maze[x][y].walls[0] = 1;
 20383  010816  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20384  01081A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20385  01081E  0E00               	movlw	0
 20386  010820  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20387  010822  0E32               	movlw	50
 20388  010824  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20389  010826  EC33  F0C4         	call	___wmul	;wreg free
 20390  01082A  0E00               	movlw	low _maze
 20391  01082C  0100               	movlb	0	; () banked
 20392  01082E  6F66               	movwf	??_Create_Maze& (0+255),b
 20393  010830  0E02               	movlw	high _maze
 20394  010832  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20395  010834  5160               	movf	?___wmul& (0+255),w,b
 20396  010836  2766               	addwf	??_Create_Maze& (0+255),f,b
 20397  010838  5161               	movf	(?___wmul+1)& (0+255),w,b
 20398  01083A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20399  01083C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20400  010840  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20401  010844  0E00               	movlw	0
 20402  010846  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20403  010848  0E0A               	movlw	10
 20404  01084A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20405  01084C  EC33  F0C4         	call	___wmul	;wreg free
 20406  010850  0100               	movlb	0	; () banked
 20407  010852  5160               	movf	?___wmul& (0+255),w,b
 20408  010854  2766               	addwf	??_Create_Maze& (0+255),f,b
 20409  010856  5161               	movf	(?___wmul+1)& (0+255),w,b
 20410  010858  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20411  01085A  0E04               	movlw	4
 20412  01085C  2566               	addwf	??_Create_Maze& (0+255),w,b
 20413  01085E  6ED9               	movwf	fsr2l,c
 20414  010860  0E00               	movlw	0
 20415  010862  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20416  010864  6EDA               	movwf	fsr2h,c
 20417  010866  0E01               	movlw	1
 20418  010868  6EDF               	movwf	indf2,c
 20419                           
 20420                           ; BSR set to: 0
 20421                           ;dans.c: 61: maze[x][y].walls[1] = 1;
 20422  01086A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20423  01086E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20424  010872  0E00               	movlw	0
 20425  010874  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20426  010876  0E32               	movlw	50
 20427  010878  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20428  01087A  EC33  F0C4         	call	___wmul	;wreg free
 20429  01087E  0E00               	movlw	low _maze
 20430  010880  0100               	movlb	0	; () banked
 20431  010882  6F66               	movwf	??_Create_Maze& (0+255),b
 20432  010884  0E02               	movlw	high _maze
 20433  010886  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20434  010888  5160               	movf	?___wmul& (0+255),w,b
 20435  01088A  2766               	addwf	??_Create_Maze& (0+255),f,b
 20436  01088C  5161               	movf	(?___wmul+1)& (0+255),w,b
 20437  01088E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20438  010890  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20439  010894  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20440  010898  0E00               	movlw	0
 20441  01089A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20442  01089C  0E0A               	movlw	10
 20443  01089E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20444  0108A0  EC33  F0C4         	call	___wmul	;wreg free
 20445  0108A4  0100               	movlb	0	; () banked
 20446  0108A6  5160               	movf	?___wmul& (0+255),w,b
 20447  0108A8  2766               	addwf	??_Create_Maze& (0+255),f,b
 20448  0108AA  5161               	movf	(?___wmul+1)& (0+255),w,b
 20449  0108AC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20450  0108AE  0E05               	movlw	5
 20451  0108B0  2566               	addwf	??_Create_Maze& (0+255),w,b
 20452  0108B2  6ED9               	movwf	fsr2l,c
 20453  0108B4  0E00               	movlw	0
 20454  0108B6  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20455  0108B8  6EDA               	movwf	fsr2h,c
 20456  0108BA  0E01               	movlw	1
 20457  0108BC  6EDF               	movwf	indf2,c
 20458                           
 20459                           ; BSR set to: 0
 20460                           ;dans.c: 62: maze[x][y].walls[2] = 0;
 20461  0108BE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20462  0108C2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20463  0108C6  0E00               	movlw	0
 20464  0108C8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20465  0108CA  0E32               	movlw	50
 20466  0108CC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20467  0108CE  EC33  F0C4         	call	___wmul	;wreg free
 20468  0108D2  0E00               	movlw	low _maze
 20469  0108D4  0100               	movlb	0	; () banked
 20470  0108D6  6F66               	movwf	??_Create_Maze& (0+255),b
 20471  0108D8  0E02               	movlw	high _maze
 20472  0108DA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20473  0108DC  5160               	movf	?___wmul& (0+255),w,b
 20474  0108DE  2766               	addwf	??_Create_Maze& (0+255),f,b
 20475  0108E0  5161               	movf	(?___wmul+1)& (0+255),w,b
 20476  0108E2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20477  0108E4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20478  0108E8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20479  0108EC  0E00               	movlw	0
 20480  0108EE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20481  0108F0  0E0A               	movlw	10
 20482  0108F2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20483  0108F4  EC33  F0C4         	call	___wmul	;wreg free
 20484  0108F8  0100               	movlb	0	; () banked
 20485  0108FA  5160               	movf	?___wmul& (0+255),w,b
 20486  0108FC  2766               	addwf	??_Create_Maze& (0+255),f,b
 20487  0108FE  5161               	movf	(?___wmul+1)& (0+255),w,b
 20488  010900  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20489  010902  0E06               	movlw	6
 20490  010904  2566               	addwf	??_Create_Maze& (0+255),w,b
 20491  010906  6ED9               	movwf	fsr2l,c
 20492  010908  0E00               	movlw	0
 20493  01090A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20494  01090C  6EDA               	movwf	fsr2h,c
 20495  01090E  0E00               	movlw	0
 20496  010910  6EDF               	movwf	indf2,c
 20497                           
 20498                           ; BSR set to: 0
 20499                           ;dans.c: 63: maze[x][y].walls[3] = 1;
 20500  010912  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20501  010916  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20502  01091A  0E00               	movlw	0
 20503  01091C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20504  01091E  0E32               	movlw	50
 20505  010920  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20506  010922  EC33  F0C4         	call	___wmul	;wreg free
 20507  010926  0E00               	movlw	low _maze
 20508  010928  0100               	movlb	0	; () banked
 20509  01092A  6F66               	movwf	??_Create_Maze& (0+255),b
 20510  01092C  0E02               	movlw	high _maze
 20511  01092E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20512  010930  5160               	movf	?___wmul& (0+255),w,b
 20513  010932  2766               	addwf	??_Create_Maze& (0+255),f,b
 20514  010934  5161               	movf	(?___wmul+1)& (0+255),w,b
 20515  010936  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20516  010938  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20517  01093C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20518  010940  0E00               	movlw	0
 20519  010942  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20520  010944  0E0A               	movlw	10
 20521  010946  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20522  010948  EC33  F0C4         	call	___wmul	;wreg free
 20523  01094C  0100               	movlb	0	; () banked
 20524  01094E  5160               	movf	?___wmul& (0+255),w,b
 20525  010950  2766               	addwf	??_Create_Maze& (0+255),f,b
 20526  010952  5161               	movf	(?___wmul+1)& (0+255),w,b
 20527  010954  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20528  010956  0E07               	movlw	7
 20529  010958  2566               	addwf	??_Create_Maze& (0+255),w,b
 20530  01095A  6ED9               	movwf	fsr2l,c
 20531  01095C  0E00               	movlw	0
 20532  01095E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20533  010960  6EDA               	movwf	fsr2h,c
 20534  010962  0E01               	movlw	1
 20535  010964  6EDF               	movwf	indf2,c
 20536                           
 20537                           ; BSR set to: 0
 20538                           ;dans.c: 64: maze[x][y].Options = 1;
 20539  010966  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20540  01096A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20541  01096E  0E00               	movlw	0
 20542  010970  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20543  010972  0E32               	movlw	50
 20544  010974  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20545  010976  EC33  F0C4         	call	___wmul	;wreg free
 20546  01097A  0E00               	movlw	low _maze
 20547  01097C  0100               	movlb	0	; () banked
 20548  01097E  6F66               	movwf	??_Create_Maze& (0+255),b
 20549  010980  0E02               	movlw	high _maze
 20550  010982  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20551  010984  5160               	movf	?___wmul& (0+255),w,b
 20552  010986  2766               	addwf	??_Create_Maze& (0+255),f,b
 20553  010988  5161               	movf	(?___wmul+1)& (0+255),w,b
 20554  01098A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20555  01098C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20556  010990  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20557  010994  0E00               	movlw	0
 20558  010996  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20559  010998  0E0A               	movlw	10
 20560  01099A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20561  01099C  EC33  F0C4         	call	___wmul	;wreg free
 20562  0109A0  0100               	movlb	0	; () banked
 20563  0109A2  5160               	movf	?___wmul& (0+255),w,b
 20564  0109A4  2766               	addwf	??_Create_Maze& (0+255),f,b
 20565  0109A6  5161               	movf	(?___wmul+1)& (0+255),w,b
 20566  0109A8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20567  0109AA  0E08               	movlw	8
 20568  0109AC  2566               	addwf	??_Create_Maze& (0+255),w,b
 20569  0109AE  6ED9               	movwf	fsr2l,c
 20570  0109B0  0E00               	movlw	0
 20571  0109B2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20572  0109B4  6EDA               	movwf	fsr2h,c
 20573  0109B6  0E01               	movlw	1
 20574  0109B8  6EDE               	movwf	postinc2,c
 20575  0109BA  0E00               	movlw	0
 20576  0109BC  6EDD               	movwf	postdec2,c
 20577                           
 20578                           ; BSR set to: 0
 20579                           ;dans.c: 66: ++x;
 20580  0109BE  4B6C               	infsnz	Create_Maze@x& (0+255),f,b
 20581  0109C0  2B6D               	incf	(Create_Maze@x+1)& (0+255),f,b
 20582                           
 20583                           ; BSR set to: 0
 20584                           ;dans.c: 67: y=0;
 20585  0109C2  0E00               	movlw	0
 20586  0109C4  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 20587  0109C6  0E00               	movlw	0
 20588  0109C8  6F6E               	movwf	Create_Maze@y& (0+255),b
 20589                           
 20590                           ; BSR set to: 0
 20591                           ;dans.c: 68: maze[x][y].walls[0] = 0;
 20592  0109CA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20593  0109CE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20594  0109D2  0E00               	movlw	0
 20595  0109D4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20596  0109D6  0E32               	movlw	50
 20597  0109D8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20598  0109DA  EC33  F0C4         	call	___wmul	;wreg free
 20599  0109DE  0E00               	movlw	low _maze
 20600  0109E0  0100               	movlb	0	; () banked
 20601  0109E2  6F66               	movwf	??_Create_Maze& (0+255),b
 20602  0109E4  0E02               	movlw	high _maze
 20603  0109E6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20604  0109E8  5160               	movf	?___wmul& (0+255),w,b
 20605  0109EA  2766               	addwf	??_Create_Maze& (0+255),f,b
 20606  0109EC  5161               	movf	(?___wmul+1)& (0+255),w,b
 20607  0109EE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20608  0109F0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20609  0109F4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20610  0109F8  0E00               	movlw	0
 20611  0109FA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20612  0109FC  0E0A               	movlw	10
 20613  0109FE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20614  010A00  EC33  F0C4         	call	___wmul	;wreg free
 20615  010A04  0100               	movlb	0	; () banked
 20616  010A06  5160               	movf	?___wmul& (0+255),w,b
 20617  010A08  2766               	addwf	??_Create_Maze& (0+255),f,b
 20618  010A0A  5161               	movf	(?___wmul+1)& (0+255),w,b
 20619  010A0C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20620  010A0E  0E04               	movlw	4
 20621  010A10  2566               	addwf	??_Create_Maze& (0+255),w,b
 20622  010A12  6ED9               	movwf	fsr2l,c
 20623  010A14  0E00               	movlw	0
 20624  010A16  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20625  010A18  6EDA               	movwf	fsr2h,c
 20626  010A1A  0E00               	movlw	0
 20627  010A1C  6EDF               	movwf	indf2,c
 20628                           
 20629                           ; BSR set to: 0
 20630                           ;dans.c: 69: maze[x][y].walls[1] = 0;
 20631  010A1E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20632  010A22  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20633  010A26  0E00               	movlw	0
 20634  010A28  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20635  010A2A  0E32               	movlw	50
 20636  010A2C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20637  010A2E  EC33  F0C4         	call	___wmul	;wreg free
 20638  010A32  0E00               	movlw	low _maze
 20639  010A34  0100               	movlb	0	; () banked
 20640  010A36  6F66               	movwf	??_Create_Maze& (0+255),b
 20641  010A38  0E02               	movlw	high _maze
 20642  010A3A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20643  010A3C  5160               	movf	?___wmul& (0+255),w,b
 20644  010A3E  2766               	addwf	??_Create_Maze& (0+255),f,b
 20645  010A40  5161               	movf	(?___wmul+1)& (0+255),w,b
 20646  010A42  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20647  010A44  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20648  010A48  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20649  010A4C  0E00               	movlw	0
 20650  010A4E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20651  010A50  0E0A               	movlw	10
 20652  010A52  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20653  010A54  EC33  F0C4         	call	___wmul	;wreg free
 20654  010A58  0100               	movlb	0	; () banked
 20655  010A5A  5160               	movf	?___wmul& (0+255),w,b
 20656  010A5C  2766               	addwf	??_Create_Maze& (0+255),f,b
 20657  010A5E  5161               	movf	(?___wmul+1)& (0+255),w,b
 20658  010A60  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20659  010A62  0E05               	movlw	5
 20660  010A64  2566               	addwf	??_Create_Maze& (0+255),w,b
 20661  010A66  6ED9               	movwf	fsr2l,c
 20662  010A68  0E00               	movlw	0
 20663  010A6A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20664  010A6C  6EDA               	movwf	fsr2h,c
 20665  010A6E  0E00               	movlw	0
 20666  010A70  6EDF               	movwf	indf2,c
 20667                           
 20668                           ; BSR set to: 0
 20669                           ;dans.c: 70: maze[x][y].walls[2] = 0;
 20670  010A72  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20671  010A76  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20672  010A7A  0E00               	movlw	0
 20673  010A7C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20674  010A7E  0E32               	movlw	50
 20675  010A80  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20676  010A82  EC33  F0C4         	call	___wmul	;wreg free
 20677  010A86  0E00               	movlw	low _maze
 20678  010A88  0100               	movlb	0	; () banked
 20679  010A8A  6F66               	movwf	??_Create_Maze& (0+255),b
 20680  010A8C  0E02               	movlw	high _maze
 20681  010A8E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20682  010A90  5160               	movf	?___wmul& (0+255),w,b
 20683  010A92  2766               	addwf	??_Create_Maze& (0+255),f,b
 20684  010A94  5161               	movf	(?___wmul+1)& (0+255),w,b
 20685  010A96  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20686  010A98  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20687  010A9C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20688  010AA0  0E00               	movlw	0
 20689  010AA2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20690  010AA4  0E0A               	movlw	10
 20691  010AA6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20692  010AA8  EC33  F0C4         	call	___wmul	;wreg free
 20693  010AAC  0100               	movlb	0	; () banked
 20694  010AAE  5160               	movf	?___wmul& (0+255),w,b
 20695  010AB0  2766               	addwf	??_Create_Maze& (0+255),f,b
 20696  010AB2  5161               	movf	(?___wmul+1)& (0+255),w,b
 20697  010AB4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20698  010AB6  0E06               	movlw	6
 20699  010AB8  2566               	addwf	??_Create_Maze& (0+255),w,b
 20700  010ABA  6ED9               	movwf	fsr2l,c
 20701  010ABC  0E00               	movlw	0
 20702  010ABE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20703  010AC0  6EDA               	movwf	fsr2h,c
 20704  010AC2  0E00               	movlw	0
 20705  010AC4  6EDF               	movwf	indf2,c
 20706                           
 20707                           ; BSR set to: 0
 20708                           ;dans.c: 71: maze[x][y].walls[3] = 1;
 20709  010AC6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20710  010ACA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20711  010ACE  0E00               	movlw	0
 20712  010AD0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20713  010AD2  0E32               	movlw	50
 20714  010AD4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20715  010AD6  EC33  F0C4         	call	___wmul	;wreg free
 20716  010ADA  0E00               	movlw	low _maze
 20717  010ADC  0100               	movlb	0	; () banked
 20718  010ADE  6F66               	movwf	??_Create_Maze& (0+255),b
 20719  010AE0  0E02               	movlw	high _maze
 20720  010AE2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20721  010AE4  5160               	movf	?___wmul& (0+255),w,b
 20722  010AE6  2766               	addwf	??_Create_Maze& (0+255),f,b
 20723  010AE8  5161               	movf	(?___wmul+1)& (0+255),w,b
 20724  010AEA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20725  010AEC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20726  010AF0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20727  010AF4  0E00               	movlw	0
 20728  010AF6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20729  010AF8  0E0A               	movlw	10
 20730  010AFA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20731  010AFC  EC33  F0C4         	call	___wmul	;wreg free
 20732  010B00  0100               	movlb	0	; () banked
 20733  010B02  5160               	movf	?___wmul& (0+255),w,b
 20734  010B04  2766               	addwf	??_Create_Maze& (0+255),f,b
 20735  010B06  5161               	movf	(?___wmul+1)& (0+255),w,b
 20736  010B08  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20737  010B0A  0E07               	movlw	7
 20738  010B0C  2566               	addwf	??_Create_Maze& (0+255),w,b
 20739  010B0E  6ED9               	movwf	fsr2l,c
 20740  010B10  0E00               	movlw	0
 20741  010B12  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20742  010B14  6EDA               	movwf	fsr2h,c
 20743  010B16  0E01               	movlw	1
 20744  010B18  6EDF               	movwf	indf2,c
 20745                           
 20746                           ; BSR set to: 0
 20747                           ;dans.c: 72: maze[x][y].Options = 3;
 20748  010B1A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20749  010B1E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20750  010B22  0E00               	movlw	0
 20751  010B24  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20752  010B26  0E32               	movlw	50
 20753  010B28  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20754  010B2A  EC33  F0C4         	call	___wmul	;wreg free
 20755  010B2E  0E00               	movlw	low _maze
 20756  010B30  0100               	movlb	0	; () banked
 20757  010B32  6F66               	movwf	??_Create_Maze& (0+255),b
 20758  010B34  0E02               	movlw	high _maze
 20759  010B36  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20760  010B38  5160               	movf	?___wmul& (0+255),w,b
 20761  010B3A  2766               	addwf	??_Create_Maze& (0+255),f,b
 20762  010B3C  5161               	movf	(?___wmul+1)& (0+255),w,b
 20763  010B3E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20764  010B40  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20765  010B44  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20766  010B48  0E00               	movlw	0
 20767  010B4A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20768  010B4C  0E0A               	movlw	10
 20769  010B4E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20770  010B50  EC33  F0C4         	call	___wmul	;wreg free
 20771  010B54  0100               	movlb	0	; () banked
 20772  010B56  5160               	movf	?___wmul& (0+255),w,b
 20773  010B58  2766               	addwf	??_Create_Maze& (0+255),f,b
 20774  010B5A  5161               	movf	(?___wmul+1)& (0+255),w,b
 20775  010B5C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20776  010B5E  0E08               	movlw	8
 20777  010B60  2566               	addwf	??_Create_Maze& (0+255),w,b
 20778  010B62  6ED9               	movwf	fsr2l,c
 20779  010B64  0E00               	movlw	0
 20780  010B66  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20781  010B68  6EDA               	movwf	fsr2h,c
 20782  010B6A  0E03               	movlw	3
 20783  010B6C  6EDE               	movwf	postinc2,c
 20784  010B6E  0E00               	movlw	0
 20785  010B70  6EDD               	movwf	postdec2,c
 20786                           
 20787                           ;dans.c: 74: ++y;
 20788  010B72  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 20789  010B74  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 20790                           
 20791                           ; BSR set to: 0
 20792                           ;dans.c: 75: maze[x][y].walls[0] = 1;
 20793  010B76  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20794  010B7A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20795  010B7E  0E00               	movlw	0
 20796  010B80  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20797  010B82  0E32               	movlw	50
 20798  010B84  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20799  010B86  EC33  F0C4         	call	___wmul	;wreg free
 20800  010B8A  0E00               	movlw	low _maze
 20801  010B8C  0100               	movlb	0	; () banked
 20802  010B8E  6F66               	movwf	??_Create_Maze& (0+255),b
 20803  010B90  0E02               	movlw	high _maze
 20804  010B92  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20805  010B94  5160               	movf	?___wmul& (0+255),w,b
 20806  010B96  2766               	addwf	??_Create_Maze& (0+255),f,b
 20807  010B98  5161               	movf	(?___wmul+1)& (0+255),w,b
 20808  010B9A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20809  010B9C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20810  010BA0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20811  010BA4  0E00               	movlw	0
 20812  010BA6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20813  010BA8  0E0A               	movlw	10
 20814  010BAA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20815  010BAC  EC33  F0C4         	call	___wmul	;wreg free
 20816  010BB0  0100               	movlb	0	; () banked
 20817  010BB2  5160               	movf	?___wmul& (0+255),w,b
 20818  010BB4  2766               	addwf	??_Create_Maze& (0+255),f,b
 20819  010BB6  5161               	movf	(?___wmul+1)& (0+255),w,b
 20820  010BB8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20821  010BBA  0E04               	movlw	4
 20822  010BBC  2566               	addwf	??_Create_Maze& (0+255),w,b
 20823  010BBE  6ED9               	movwf	fsr2l,c
 20824  010BC0  0E00               	movlw	0
 20825  010BC2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20826  010BC4  6EDA               	movwf	fsr2h,c
 20827  010BC6  0E01               	movlw	1
 20828  010BC8  6EDF               	movwf	indf2,c
 20829                           
 20830                           ; BSR set to: 0
 20831                           ;dans.c: 76: maze[x][y].walls[1] = 1;
 20832  010BCA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20833  010BCE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20834  010BD2  0E00               	movlw	0
 20835  010BD4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20836  010BD6  0E32               	movlw	50
 20837  010BD8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20838  010BDA  EC33  F0C4         	call	___wmul	;wreg free
 20839  010BDE  0E00               	movlw	low _maze
 20840  010BE0  0100               	movlb	0	; () banked
 20841  010BE2  6F66               	movwf	??_Create_Maze& (0+255),b
 20842  010BE4  0E02               	movlw	high _maze
 20843  010BE6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20844  010BE8  5160               	movf	?___wmul& (0+255),w,b
 20845  010BEA  2766               	addwf	??_Create_Maze& (0+255),f,b
 20846  010BEC  5161               	movf	(?___wmul+1)& (0+255),w,b
 20847  010BEE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20848  010BF0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20849  010BF4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20850  010BF8  0E00               	movlw	0
 20851  010BFA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20852  010BFC  0E0A               	movlw	10
 20853  010BFE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20854  010C00  EC33  F0C4         	call	___wmul	;wreg free
 20855  010C04  0100               	movlb	0	; () banked
 20856  010C06  5160               	movf	?___wmul& (0+255),w,b
 20857  010C08  2766               	addwf	??_Create_Maze& (0+255),f,b
 20858  010C0A  5161               	movf	(?___wmul+1)& (0+255),w,b
 20859  010C0C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20860  010C0E  0E05               	movlw	5
 20861  010C10  2566               	addwf	??_Create_Maze& (0+255),w,b
 20862  010C12  6ED9               	movwf	fsr2l,c
 20863  010C14  0E00               	movlw	0
 20864  010C16  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20865  010C18  6EDA               	movwf	fsr2h,c
 20866  010C1A  0E01               	movlw	1
 20867  010C1C  6EDF               	movwf	indf2,c
 20868                           
 20869                           ; BSR set to: 0
 20870                           ;dans.c: 77: maze[x][y].walls[2] = 1;
 20871  010C1E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20872  010C22  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20873  010C26  0E00               	movlw	0
 20874  010C28  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20875  010C2A  0E32               	movlw	50
 20876  010C2C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20877  010C2E  EC33  F0C4         	call	___wmul	;wreg free
 20878  010C32  0E00               	movlw	low _maze
 20879  010C34  0100               	movlb	0	; () banked
 20880  010C36  6F66               	movwf	??_Create_Maze& (0+255),b
 20881  010C38  0E02               	movlw	high _maze
 20882  010C3A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20883  010C3C  5160               	movf	?___wmul& (0+255),w,b
 20884  010C3E  2766               	addwf	??_Create_Maze& (0+255),f,b
 20885  010C40  5161               	movf	(?___wmul+1)& (0+255),w,b
 20886  010C42  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20887  010C44  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20888  010C48  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20889  010C4C  0E00               	movlw	0
 20890  010C4E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20891  010C50  0E0A               	movlw	10
 20892  010C52  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20893  010C54  EC33  F0C4         	call	___wmul	;wreg free
 20894  010C58  0100               	movlb	0	; () banked
 20895  010C5A  5160               	movf	?___wmul& (0+255),w,b
 20896  010C5C  2766               	addwf	??_Create_Maze& (0+255),f,b
 20897  010C5E  5161               	movf	(?___wmul+1)& (0+255),w,b
 20898  010C60  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20899  010C62  0E06               	movlw	6
 20900  010C64  2566               	addwf	??_Create_Maze& (0+255),w,b
 20901  010C66  6ED9               	movwf	fsr2l,c
 20902  010C68  0E00               	movlw	0
 20903  010C6A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20904  010C6C  6EDA               	movwf	fsr2h,c
 20905  010C6E  0E01               	movlw	1
 20906  010C70  6EDF               	movwf	indf2,c
 20907                           
 20908                           ; BSR set to: 0
 20909                           ;dans.c: 78: maze[x][y].walls[3] = 0;
 20910  010C72  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20911  010C76  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20912  010C7A  0E00               	movlw	0
 20913  010C7C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20914  010C7E  0E32               	movlw	50
 20915  010C80  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20916  010C82  EC33  F0C4         	call	___wmul	;wreg free
 20917  010C86  0E00               	movlw	low _maze
 20918  010C88  0100               	movlb	0	; () banked
 20919  010C8A  6F66               	movwf	??_Create_Maze& (0+255),b
 20920  010C8C  0E02               	movlw	high _maze
 20921  010C8E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20922  010C90  5160               	movf	?___wmul& (0+255),w,b
 20923  010C92  2766               	addwf	??_Create_Maze& (0+255),f,b
 20924  010C94  5161               	movf	(?___wmul+1)& (0+255),w,b
 20925  010C96  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20926  010C98  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20927  010C9C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20928  010CA0  0E00               	movlw	0
 20929  010CA2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20930  010CA4  0E0A               	movlw	10
 20931  010CA6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20932  010CA8  EC33  F0C4         	call	___wmul	;wreg free
 20933  010CAC  0100               	movlb	0	; () banked
 20934  010CAE  5160               	movf	?___wmul& (0+255),w,b
 20935  010CB0  2766               	addwf	??_Create_Maze& (0+255),f,b
 20936  010CB2  5161               	movf	(?___wmul+1)& (0+255),w,b
 20937  010CB4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20938  010CB6  0E07               	movlw	7
 20939  010CB8  2566               	addwf	??_Create_Maze& (0+255),w,b
 20940  010CBA  6ED9               	movwf	fsr2l,c
 20941  010CBC  0E00               	movlw	0
 20942  010CBE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20943  010CC0  6EDA               	movwf	fsr2h,c
 20944  010CC2  0E00               	movlw	0
 20945  010CC4  6EDF               	movwf	indf2,c
 20946                           
 20947                           ; BSR set to: 0
 20948                           ;dans.c: 79: maze[x][y].Options = 1;
 20949  010CC6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20950  010CCA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20951  010CCE  0E00               	movlw	0
 20952  010CD0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20953  010CD2  0E32               	movlw	50
 20954  010CD4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20955  010CD6  EC33  F0C4         	call	___wmul	;wreg free
 20956  010CDA  0E00               	movlw	low _maze
 20957  010CDC  0100               	movlb	0	; () banked
 20958  010CDE  6F66               	movwf	??_Create_Maze& (0+255),b
 20959  010CE0  0E02               	movlw	high _maze
 20960  010CE2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20961  010CE4  5160               	movf	?___wmul& (0+255),w,b
 20962  010CE6  2766               	addwf	??_Create_Maze& (0+255),f,b
 20963  010CE8  5161               	movf	(?___wmul+1)& (0+255),w,b
 20964  010CEA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20965  010CEC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20966  010CF0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20967  010CF4  0E00               	movlw	0
 20968  010CF6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20969  010CF8  0E0A               	movlw	10
 20970  010CFA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20971  010CFC  EC33  F0C4         	call	___wmul	;wreg free
 20972  010D00  0100               	movlb	0	; () banked
 20973  010D02  5160               	movf	?___wmul& (0+255),w,b
 20974  010D04  2766               	addwf	??_Create_Maze& (0+255),f,b
 20975  010D06  5161               	movf	(?___wmul+1)& (0+255),w,b
 20976  010D08  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20977  010D0A  0E08               	movlw	8
 20978  010D0C  2566               	addwf	??_Create_Maze& (0+255),w,b
 20979  010D0E  6ED9               	movwf	fsr2l,c
 20980  010D10  0E00               	movlw	0
 20981  010D12  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20982  010D14  6EDA               	movwf	fsr2h,c
 20983  010D16  0E01               	movlw	1
 20984  010D18  6EDE               	movwf	postinc2,c
 20985  010D1A  0E00               	movlw	0
 20986  010D1C  6EDD               	movwf	postdec2,c
 20987                           
 20988                           ; BSR set to: 0
 20989                           ;dans.c: 81: ++y;
 20990  010D1E  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 20991  010D20  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 20992                           
 20993                           ;dans.c: 82: maze[x][y].walls[0] = 0;
 20994  010D22  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20995  010D26  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20996  010D2A  0E00               	movlw	0
 20997  010D2C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20998  010D2E  0E32               	movlw	50
 20999  010D30  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21000  010D32  EC33  F0C4         	call	___wmul	;wreg free
 21001  010D36  0E00               	movlw	low _maze
 21002  010D38  0100               	movlb	0	; () banked
 21003  010D3A  6F66               	movwf	??_Create_Maze& (0+255),b
 21004  010D3C  0E02               	movlw	high _maze
 21005  010D3E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21006  010D40  5160               	movf	?___wmul& (0+255),w,b
 21007  010D42  2766               	addwf	??_Create_Maze& (0+255),f,b
 21008  010D44  5161               	movf	(?___wmul+1)& (0+255),w,b
 21009  010D46  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21010  010D48  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21011  010D4C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21012  010D50  0E00               	movlw	0
 21013  010D52  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21014  010D54  0E0A               	movlw	10
 21015  010D56  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21016  010D58  EC33  F0C4         	call	___wmul	;wreg free
 21017  010D5C  0100               	movlb	0	; () banked
 21018  010D5E  5160               	movf	?___wmul& (0+255),w,b
 21019  010D60  2766               	addwf	??_Create_Maze& (0+255),f,b
 21020  010D62  5161               	movf	(?___wmul+1)& (0+255),w,b
 21021  010D64  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21022  010D66  0E04               	movlw	4
 21023  010D68  2566               	addwf	??_Create_Maze& (0+255),w,b
 21024  010D6A  6ED9               	movwf	fsr2l,c
 21025  010D6C  0E00               	movlw	0
 21026  010D6E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21027  010D70  6EDA               	movwf	fsr2h,c
 21028  010D72  0E00               	movlw	0
 21029  010D74  6EDF               	movwf	indf2,c
 21030                           
 21031                           ;dans.c: 83: maze[x][y].walls[1] = 1;
 21032  010D76  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21033  010D7A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21034  010D7E  0E00               	movlw	0
 21035  010D80  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21036  010D82  0E32               	movlw	50
 21037  010D84  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21038  010D86  EC33  F0C4         	call	___wmul	;wreg free
 21039  010D8A  0E00               	movlw	low _maze
 21040  010D8C  0100               	movlb	0	; () banked
 21041  010D8E  6F66               	movwf	??_Create_Maze& (0+255),b
 21042  010D90  0E02               	movlw	high _maze
 21043  010D92  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21044  010D94  5160               	movf	?___wmul& (0+255),w,b
 21045  010D96  2766               	addwf	??_Create_Maze& (0+255),f,b
 21046  010D98  5161               	movf	(?___wmul+1)& (0+255),w,b
 21047  010D9A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21048  010D9C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21049  010DA0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21050  010DA4  0E00               	movlw	0
 21051  010DA6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21052  010DA8  0E0A               	movlw	10
 21053  010DAA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21054  010DAC  EC33  F0C4         	call	___wmul	;wreg free
 21055  010DB0  0100               	movlb	0	; () banked
 21056  010DB2  5160               	movf	?___wmul& (0+255),w,b
 21057  010DB4  2766               	addwf	??_Create_Maze& (0+255),f,b
 21058  010DB6  5161               	movf	(?___wmul+1)& (0+255),w,b
 21059  010DB8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21060  010DBA  0E05               	movlw	5
 21061  010DBC  2566               	addwf	??_Create_Maze& (0+255),w,b
 21062  010DBE  6ED9               	movwf	fsr2l,c
 21063  010DC0  0E00               	movlw	0
 21064  010DC2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21065  010DC4  6EDA               	movwf	fsr2h,c
 21066  010DC6  0E01               	movlw	1
 21067  010DC8  6EDF               	movwf	indf2,c
 21068                           
 21069                           ;dans.c: 84: maze[x][y].walls[2] = 0;
 21070  010DCA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21071  010DCE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21072  010DD2  0E00               	movlw	0
 21073  010DD4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21074  010DD6  0E32               	movlw	50
 21075  010DD8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21076  010DDA  EC33  F0C4         	call	___wmul	;wreg free
 21077  010DDE  0E00               	movlw	low _maze
 21078  010DE0  0100               	movlb	0	; () banked
 21079  010DE2  6F66               	movwf	??_Create_Maze& (0+255),b
 21080  010DE4  0E02               	movlw	high _maze
 21081  010DE6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21082  010DE8  5160               	movf	?___wmul& (0+255),w,b
 21083  010DEA  2766               	addwf	??_Create_Maze& (0+255),f,b
 21084  010DEC  5161               	movf	(?___wmul+1)& (0+255),w,b
 21085  010DEE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21086  010DF0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21087  010DF4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21088  010DF8  0E00               	movlw	0
 21089  010DFA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21090  010DFC  0E0A               	movlw	10
 21091  010DFE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21092  010E00  EC33  F0C4         	call	___wmul	;wreg free
 21093  010E04  0100               	movlb	0	; () banked
 21094  010E06  5160               	movf	?___wmul& (0+255),w,b
 21095  010E08  2766               	addwf	??_Create_Maze& (0+255),f,b
 21096  010E0A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21097  010E0C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21098  010E0E  0E06               	movlw	6
 21099  010E10  2566               	addwf	??_Create_Maze& (0+255),w,b
 21100  010E12  6ED9               	movwf	fsr2l,c
 21101  010E14  0E00               	movlw	0
 21102  010E16  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21103  010E18  6EDA               	movwf	fsr2h,c
 21104  010E1A  0E00               	movlw	0
 21105  010E1C  6EDF               	movwf	indf2,c
 21106                           
 21107                           ;dans.c: 85: maze[x][y].walls[3] = 1;
 21108  010E1E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21109  010E22  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21110  010E26  0E00               	movlw	0
 21111  010E28  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21112  010E2A  0E32               	movlw	50
 21113  010E2C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21114  010E2E  EC33  F0C4         	call	___wmul	;wreg free
 21115  010E32  0E00               	movlw	low _maze
 21116  010E34  0100               	movlb	0	; () banked
 21117  010E36  6F66               	movwf	??_Create_Maze& (0+255),b
 21118  010E38  0E02               	movlw	high _maze
 21119  010E3A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21120  010E3C  5160               	movf	?___wmul& (0+255),w,b
 21121  010E3E  2766               	addwf	??_Create_Maze& (0+255),f,b
 21122  010E40  5161               	movf	(?___wmul+1)& (0+255),w,b
 21123  010E42  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21124  010E44  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21125  010E48  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21126  010E4C  0E00               	movlw	0
 21127  010E4E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21128  010E50  0E0A               	movlw	10
 21129  010E52  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21130  010E54  EC33  F0C4         	call	___wmul	;wreg free
 21131  010E58  0100               	movlb	0	; () banked
 21132  010E5A  5160               	movf	?___wmul& (0+255),w,b
 21133  010E5C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21134  010E5E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21135  010E60  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21136  010E62  0E07               	movlw	7
 21137  010E64  2566               	addwf	??_Create_Maze& (0+255),w,b
 21138  010E66  6ED9               	movwf	fsr2l,c
 21139  010E68  0E00               	movlw	0
 21140  010E6A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21141  010E6C  6EDA               	movwf	fsr2h,c
 21142  010E6E  0E01               	movlw	1
 21143  010E70  6EDF               	movwf	indf2,c
 21144                           
 21145                           ;dans.c: 86: maze[x][y].Options = 2;
 21146  010E72  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21147  010E76  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21148  010E7A  0E00               	movlw	0
 21149  010E7C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21150  010E7E  0E32               	movlw	50
 21151  010E80  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21152  010E82  EC33  F0C4         	call	___wmul	;wreg free
 21153  010E86  0E00               	movlw	low _maze
 21154  010E88  0100               	movlb	0	; () banked
 21155  010E8A  6F66               	movwf	??_Create_Maze& (0+255),b
 21156  010E8C  0E02               	movlw	high _maze
 21157  010E8E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21158  010E90  5160               	movf	?___wmul& (0+255),w,b
 21159  010E92  2766               	addwf	??_Create_Maze& (0+255),f,b
 21160  010E94  5161               	movf	(?___wmul+1)& (0+255),w,b
 21161  010E96  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21162  010E98  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21163  010E9C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21164  010EA0  0E00               	movlw	0
 21165  010EA2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21166  010EA4  0E0A               	movlw	10
 21167  010EA6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21168  010EA8  EC33  F0C4         	call	___wmul	;wreg free
 21169  010EAC  0100               	movlb	0	; () banked
 21170  010EAE  5160               	movf	?___wmul& (0+255),w,b
 21171  010EB0  2766               	addwf	??_Create_Maze& (0+255),f,b
 21172  010EB2  5161               	movf	(?___wmul+1)& (0+255),w,b
 21173  010EB4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21174  010EB6  0E08               	movlw	8
 21175  010EB8  2566               	addwf	??_Create_Maze& (0+255),w,b
 21176  010EBA  6ED9               	movwf	fsr2l,c
 21177  010EBC  0E00               	movlw	0
 21178  010EBE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21179  010EC0  6EDA               	movwf	fsr2h,c
 21180  010EC2  0E02               	movlw	2
 21181  010EC4  6EDE               	movwf	postinc2,c
 21182  010EC6  0E00               	movlw	0
 21183  010EC8  6EDD               	movwf	postdec2,c
 21184                           
 21185                           ; BSR set to: 0
 21186                           ;dans.c: 88: ++y;
 21187  010ECA  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 21188  010ECC  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 21189                           
 21190                           ; BSR set to: 0
 21191                           ;dans.c: 89: maze[x][y].walls[0] = 0;
 21192  010ECE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21193  010ED2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21194  010ED6  0E00               	movlw	0
 21195  010ED8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21196  010EDA  0E32               	movlw	50
 21197  010EDC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21198  010EDE  EC33  F0C4         	call	___wmul	;wreg free
 21199  010EE2  0E00               	movlw	low _maze
 21200  010EE4  0100               	movlb	0	; () banked
 21201  010EE6  6F66               	movwf	??_Create_Maze& (0+255),b
 21202  010EE8  0E02               	movlw	high _maze
 21203  010EEA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21204  010EEC  5160               	movf	?___wmul& (0+255),w,b
 21205  010EEE  2766               	addwf	??_Create_Maze& (0+255),f,b
 21206  010EF0  5161               	movf	(?___wmul+1)& (0+255),w,b
 21207  010EF2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21208  010EF4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21209  010EF8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21210  010EFC  0E00               	movlw	0
 21211  010EFE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21212  010F00  0E0A               	movlw	10
 21213  010F02  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21214  010F04  EC33  F0C4         	call	___wmul	;wreg free
 21215  010F08  0100               	movlb	0	; () banked
 21216  010F0A  5160               	movf	?___wmul& (0+255),w,b
 21217  010F0C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21218  010F0E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21219  010F10  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21220  010F12  0E04               	movlw	4
 21221  010F14  2566               	addwf	??_Create_Maze& (0+255),w,b
 21222  010F16  6ED9               	movwf	fsr2l,c
 21223  010F18  0E00               	movlw	0
 21224  010F1A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21225  010F1C  6EDA               	movwf	fsr2h,c
 21226  010F1E  0E00               	movlw	0
 21227  010F20  6EDF               	movwf	indf2,c
 21228                           
 21229                           ; BSR set to: 0
 21230                           ;dans.c: 90: maze[x][y].walls[1] = 0;
 21231  010F22  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21232  010F26  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21233  010F2A  0E00               	movlw	0
 21234  010F2C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21235  010F2E  0E32               	movlw	50
 21236  010F30  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21237  010F32  EC33  F0C4         	call	___wmul	;wreg free
 21238  010F36  0E00               	movlw	low _maze
 21239  010F38  0100               	movlb	0	; () banked
 21240  010F3A  6F66               	movwf	??_Create_Maze& (0+255),b
 21241  010F3C  0E02               	movlw	high _maze
 21242  010F3E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21243  010F40  5160               	movf	?___wmul& (0+255),w,b
 21244  010F42  2766               	addwf	??_Create_Maze& (0+255),f,b
 21245  010F44  5161               	movf	(?___wmul+1)& (0+255),w,b
 21246  010F46  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21247  010F48  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21248  010F4C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21249  010F50  0E00               	movlw	0
 21250  010F52  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21251  010F54  0E0A               	movlw	10
 21252  010F56  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21253  010F58  EC33  F0C4         	call	___wmul	;wreg free
 21254  010F5C  0100               	movlb	0	; () banked
 21255  010F5E  5160               	movf	?___wmul& (0+255),w,b
 21256  010F60  2766               	addwf	??_Create_Maze& (0+255),f,b
 21257  010F62  5161               	movf	(?___wmul+1)& (0+255),w,b
 21258  010F64  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21259  010F66  0E05               	movlw	5
 21260  010F68  2566               	addwf	??_Create_Maze& (0+255),w,b
 21261  010F6A  6ED9               	movwf	fsr2l,c
 21262  010F6C  0E00               	movlw	0
 21263  010F6E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21264  010F70  6EDA               	movwf	fsr2h,c
 21265  010F72  0E00               	movlw	0
 21266  010F74  6EDF               	movwf	indf2,c
 21267                           
 21268                           ; BSR set to: 0
 21269                           ;dans.c: 91: maze[x][y].walls[2] = 1;
 21270  010F76  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21271  010F7A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21272  010F7E  0E00               	movlw	0
 21273  010F80  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21274  010F82  0E32               	movlw	50
 21275  010F84  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21276  010F86  EC33  F0C4         	call	___wmul	;wreg free
 21277  010F8A  0E00               	movlw	low _maze
 21278  010F8C  0100               	movlb	0	; () banked
 21279  010F8E  6F66               	movwf	??_Create_Maze& (0+255),b
 21280  010F90  0E02               	movlw	high _maze
 21281  010F92  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21282  010F94  5160               	movf	?___wmul& (0+255),w,b
 21283  010F96  2766               	addwf	??_Create_Maze& (0+255),f,b
 21284  010F98  5161               	movf	(?___wmul+1)& (0+255),w,b
 21285  010F9A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21286  010F9C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21287  010FA0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21288  010FA4  0E00               	movlw	0
 21289  010FA6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21290  010FA8  0E0A               	movlw	10
 21291  010FAA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21292  010FAC  EC33  F0C4         	call	___wmul	;wreg free
 21293  010FB0  0100               	movlb	0	; () banked
 21294  010FB2  5160               	movf	?___wmul& (0+255),w,b
 21295  010FB4  2766               	addwf	??_Create_Maze& (0+255),f,b
 21296  010FB6  5161               	movf	(?___wmul+1)& (0+255),w,b
 21297  010FB8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21298  010FBA  0E06               	movlw	6
 21299  010FBC  2566               	addwf	??_Create_Maze& (0+255),w,b
 21300  010FBE  6ED9               	movwf	fsr2l,c
 21301  010FC0  0E00               	movlw	0
 21302  010FC2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21303  010FC4  6EDA               	movwf	fsr2h,c
 21304  010FC6  0E01               	movlw	1
 21305  010FC8  6EDF               	movwf	indf2,c
 21306                           
 21307                           ; BSR set to: 0
 21308                           ;dans.c: 92: maze[x][y].walls[3] = 1;
 21309  010FCA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21310  010FCE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21311  010FD2  0E00               	movlw	0
 21312  010FD4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21313  010FD6  0E32               	movlw	50
 21314  010FD8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21315  010FDA  EC33  F0C4         	call	___wmul	;wreg free
 21316  010FDE  0E00               	movlw	low _maze
 21317  010FE0  0100               	movlb	0	; () banked
 21318  010FE2  6F66               	movwf	??_Create_Maze& (0+255),b
 21319  010FE4  0E02               	movlw	high _maze
 21320  010FE6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21321  010FE8  5160               	movf	?___wmul& (0+255),w,b
 21322  010FEA  2766               	addwf	??_Create_Maze& (0+255),f,b
 21323  010FEC  5161               	movf	(?___wmul+1)& (0+255),w,b
 21324  010FEE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21325  010FF0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21326  010FF4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21327  010FF8  0E00               	movlw	0
 21328  010FFA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21329  010FFC  0E0A               	movlw	10
 21330  010FFE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21331  011000  EC33  F0C4         	call	___wmul	;wreg free
 21332  011004  0100               	movlb	0	; () banked
 21333  011006  5160               	movf	?___wmul& (0+255),w,b
 21334  011008  2766               	addwf	??_Create_Maze& (0+255),f,b
 21335  01100A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21336  01100C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21337  01100E  0E07               	movlw	7
 21338  011010  2566               	addwf	??_Create_Maze& (0+255),w,b
 21339  011012  6ED9               	movwf	fsr2l,c
 21340  011014  0E00               	movlw	0
 21341  011016  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21342  011018  6EDA               	movwf	fsr2h,c
 21343  01101A  0E01               	movlw	1
 21344  01101C  6EDF               	movwf	indf2,c
 21345                           
 21346                           ; BSR set to: 0
 21347                           ;dans.c: 93: maze[x][y].Options = 2;
 21348  01101E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21349  011022  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21350  011026  0E00               	movlw	0
 21351  011028  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21352  01102A  0E32               	movlw	50
 21353  01102C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21354  01102E  EC33  F0C4         	call	___wmul	;wreg free
 21355  011032  0E00               	movlw	low _maze
 21356  011034  0100               	movlb	0	; () banked
 21357  011036  6F66               	movwf	??_Create_Maze& (0+255),b
 21358  011038  0E02               	movlw	high _maze
 21359  01103A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21360  01103C  5160               	movf	?___wmul& (0+255),w,b
 21361  01103E  2766               	addwf	??_Create_Maze& (0+255),f,b
 21362  011040  5161               	movf	(?___wmul+1)& (0+255),w,b
 21363  011042  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21364  011044  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21365  011048  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21366  01104C  0E00               	movlw	0
 21367  01104E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21368  011050  0E0A               	movlw	10
 21369  011052  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21370  011054  EC33  F0C4         	call	___wmul	;wreg free
 21371  011058  0100               	movlb	0	; () banked
 21372  01105A  5160               	movf	?___wmul& (0+255),w,b
 21373  01105C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21374  01105E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21375  011060  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21376  011062  0E08               	movlw	8
 21377  011064  2566               	addwf	??_Create_Maze& (0+255),w,b
 21378  011066  6ED9               	movwf	fsr2l,c
 21379  011068  0E00               	movlw	0
 21380  01106A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21381  01106C  6EDA               	movwf	fsr2h,c
 21382  01106E  0E02               	movlw	2
 21383  011070  6EDE               	movwf	postinc2,c
 21384  011072  0E00               	movlw	0
 21385  011074  6EDD               	movwf	postdec2,c
 21386                           
 21387                           ;dans.c: 95: ++y;
 21388  011076  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 21389  011078  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 21390                           
 21391                           ; BSR set to: 0
 21392                           ;dans.c: 96: maze[x][y].walls[0] = 0;
 21393  01107A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21394  01107E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21395  011082  0E00               	movlw	0
 21396  011084  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21397  011086  0E32               	movlw	50
 21398  011088  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21399  01108A  EC33  F0C4         	call	___wmul	;wreg free
 21400  01108E  0E00               	movlw	low _maze
 21401  011090  0100               	movlb	0	; () banked
 21402  011092  6F66               	movwf	??_Create_Maze& (0+255),b
 21403  011094  0E02               	movlw	high _maze
 21404  011096  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21405  011098  5160               	movf	?___wmul& (0+255),w,b
 21406  01109A  2766               	addwf	??_Create_Maze& (0+255),f,b
 21407  01109C  5161               	movf	(?___wmul+1)& (0+255),w,b
 21408  01109E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21409  0110A0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21410  0110A4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21411  0110A8  0E00               	movlw	0
 21412  0110AA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21413  0110AC  0E0A               	movlw	10
 21414  0110AE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21415  0110B0  EC33  F0C4         	call	___wmul	;wreg free
 21416  0110B4  0100               	movlb	0	; () banked
 21417  0110B6  5160               	movf	?___wmul& (0+255),w,b
 21418  0110B8  2766               	addwf	??_Create_Maze& (0+255),f,b
 21419  0110BA  5161               	movf	(?___wmul+1)& (0+255),w,b
 21420  0110BC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21421  0110BE  0E04               	movlw	4
 21422  0110C0  2566               	addwf	??_Create_Maze& (0+255),w,b
 21423  0110C2  6ED9               	movwf	fsr2l,c
 21424  0110C4  0E00               	movlw	0
 21425  0110C6  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21426  0110C8  6EDA               	movwf	fsr2h,c
 21427  0110CA  0E00               	movlw	0
 21428  0110CC  6EDF               	movwf	indf2,c
 21429                           
 21430                           ; BSR set to: 0
 21431                           ;dans.c: 97: maze[x][y].walls[1] = 1;
 21432  0110CE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21433  0110D2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21434  0110D6  0E00               	movlw	0
 21435  0110D8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21436  0110DA  0E32               	movlw	50
 21437  0110DC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21438  0110DE  EC33  F0C4         	call	___wmul	;wreg free
 21439  0110E2  0E00               	movlw	low _maze
 21440  0110E4  0100               	movlb	0	; () banked
 21441  0110E6  6F66               	movwf	??_Create_Maze& (0+255),b
 21442  0110E8  0E02               	movlw	high _maze
 21443  0110EA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21444  0110EC  5160               	movf	?___wmul& (0+255),w,b
 21445  0110EE  2766               	addwf	??_Create_Maze& (0+255),f,b
 21446  0110F0  5161               	movf	(?___wmul+1)& (0+255),w,b
 21447  0110F2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21448  0110F4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21449  0110F8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21450  0110FC  0E00               	movlw	0
 21451  0110FE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21452  011100  0E0A               	movlw	10
 21453  011102  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21454  011104  EC33  F0C4         	call	___wmul	;wreg free
 21455  011108  0100               	movlb	0	; () banked
 21456  01110A  5160               	movf	?___wmul& (0+255),w,b
 21457  01110C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21458  01110E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21459  011110  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21460  011112  0E05               	movlw	5
 21461  011114  2566               	addwf	??_Create_Maze& (0+255),w,b
 21462  011116  6ED9               	movwf	fsr2l,c
 21463  011118  0E00               	movlw	0
 21464  01111A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21465  01111C  6EDA               	movwf	fsr2h,c
 21466  01111E  0E01               	movlw	1
 21467  011120  6EDF               	movwf	indf2,c
 21468                           
 21469                           ; BSR set to: 0
 21470                           ;dans.c: 98: maze[x][y].walls[2] = 1;
 21471  011122  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21472  011126  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21473  01112A  0E00               	movlw	0
 21474  01112C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21475  01112E  0E32               	movlw	50
 21476  011130  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21477  011132  EC33  F0C4         	call	___wmul	;wreg free
 21478  011136  0E00               	movlw	low _maze
 21479  011138  0100               	movlb	0	; () banked
 21480  01113A  6F66               	movwf	??_Create_Maze& (0+255),b
 21481  01113C  0E02               	movlw	high _maze
 21482  01113E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21483  011140  5160               	movf	?___wmul& (0+255),w,b
 21484  011142  2766               	addwf	??_Create_Maze& (0+255),f,b
 21485  011144  5161               	movf	(?___wmul+1)& (0+255),w,b
 21486  011146  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21487  011148  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21488  01114C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21489  011150  0E00               	movlw	0
 21490  011152  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21491  011154  0E0A               	movlw	10
 21492  011156  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21493  011158  EC33  F0C4         	call	___wmul	;wreg free
 21494  01115C  0100               	movlb	0	; () banked
 21495  01115E  5160               	movf	?___wmul& (0+255),w,b
 21496  011160  2766               	addwf	??_Create_Maze& (0+255),f,b
 21497  011162  5161               	movf	(?___wmul+1)& (0+255),w,b
 21498  011164  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21499  011166  0E06               	movlw	6
 21500  011168  2566               	addwf	??_Create_Maze& (0+255),w,b
 21501  01116A  6ED9               	movwf	fsr2l,c
 21502  01116C  0E00               	movlw	0
 21503  01116E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21504  011170  6EDA               	movwf	fsr2h,c
 21505  011172  0E01               	movlw	1
 21506  011174  6EDF               	movwf	indf2,c
 21507                           
 21508                           ; BSR set to: 0
 21509                           ;dans.c: 99: maze[x][y].walls[3] = 0;
 21510  011176  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21511  01117A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21512  01117E  0E00               	movlw	0
 21513  011180  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21514  011182  0E32               	movlw	50
 21515  011184  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21516  011186  EC33  F0C4         	call	___wmul	;wreg free
 21517  01118A  0E00               	movlw	low _maze
 21518  01118C  0100               	movlb	0	; () banked
 21519  01118E  6F66               	movwf	??_Create_Maze& (0+255),b
 21520  011190  0E02               	movlw	high _maze
 21521  011192  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21522  011194  5160               	movf	?___wmul& (0+255),w,b
 21523  011196  2766               	addwf	??_Create_Maze& (0+255),f,b
 21524  011198  5161               	movf	(?___wmul+1)& (0+255),w,b
 21525  01119A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21526  01119C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21527  0111A0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21528  0111A4  0E00               	movlw	0
 21529  0111A6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21530  0111A8  0E0A               	movlw	10
 21531  0111AA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21532  0111AC  EC33  F0C4         	call	___wmul	;wreg free
 21533  0111B0  0100               	movlb	0	; () banked
 21534  0111B2  5160               	movf	?___wmul& (0+255),w,b
 21535  0111B4  2766               	addwf	??_Create_Maze& (0+255),f,b
 21536  0111B6  5161               	movf	(?___wmul+1)& (0+255),w,b
 21537  0111B8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21538  0111BA  0E07               	movlw	7
 21539  0111BC  2566               	addwf	??_Create_Maze& (0+255),w,b
 21540  0111BE  6ED9               	movwf	fsr2l,c
 21541  0111C0  0E00               	movlw	0
 21542  0111C2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21543  0111C4  6EDA               	movwf	fsr2h,c
 21544  0111C6  0E00               	movlw	0
 21545  0111C8  6EDF               	movwf	indf2,c
 21546                           
 21547                           ; BSR set to: 0
 21548                           ;dans.c: 100: maze[x][y].Options = 2;
 21549  0111CA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21550  0111CE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21551  0111D2  0E00               	movlw	0
 21552  0111D4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21553  0111D6  0E32               	movlw	50
 21554  0111D8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21555  0111DA  EC33  F0C4         	call	___wmul	;wreg free
 21556  0111DE  0E00               	movlw	low _maze
 21557  0111E0  0100               	movlb	0	; () banked
 21558  0111E2  6F66               	movwf	??_Create_Maze& (0+255),b
 21559  0111E4  0E02               	movlw	high _maze
 21560  0111E6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21561  0111E8  5160               	movf	?___wmul& (0+255),w,b
 21562  0111EA  2766               	addwf	??_Create_Maze& (0+255),f,b
 21563  0111EC  5161               	movf	(?___wmul+1)& (0+255),w,b
 21564  0111EE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21565  0111F0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21566  0111F4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21567  0111F8  0E00               	movlw	0
 21568  0111FA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21569  0111FC  0E0A               	movlw	10
 21570  0111FE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21571  011200  EC33  F0C4         	call	___wmul	;wreg free
 21572  011204  0100               	movlb	0	; () banked
 21573  011206  5160               	movf	?___wmul& (0+255),w,b
 21574  011208  2766               	addwf	??_Create_Maze& (0+255),f,b
 21575  01120A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21576  01120C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21577  01120E  0E08               	movlw	8
 21578  011210  2566               	addwf	??_Create_Maze& (0+255),w,b
 21579  011212  6ED9               	movwf	fsr2l,c
 21580  011214  0E00               	movlw	0
 21581  011216  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21582  011218  6EDA               	movwf	fsr2h,c
 21583  01121A  0E02               	movlw	2
 21584  01121C  6EDE               	movwf	postinc2,c
 21585  01121E  0E00               	movlw	0
 21586  011220  6EDD               	movwf	postdec2,c
 21587                           
 21588                           ; BSR set to: 0
 21589                           ;dans.c: 102: ++x;
 21590  011222  4B6C               	infsnz	Create_Maze@x& (0+255),f,b
 21591  011224  2B6D               	incf	(Create_Maze@x+1)& (0+255),f,b
 21592                           
 21593                           ; BSR set to: 0
 21594                           ;dans.c: 103: y=0;
 21595  011226  0E00               	movlw	0
 21596  011228  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 21597  01122A  0E00               	movlw	0
 21598  01122C  6F6E               	movwf	Create_Maze@y& (0+255),b
 21599                           
 21600                           ; BSR set to: 0
 21601                           ;dans.c: 104: maze[x][y].walls[0] = 0;
 21602  01122E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21603  011232  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21604  011236  0E00               	movlw	0
 21605  011238  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21606  01123A  0E32               	movlw	50
 21607  01123C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21608  01123E  EC33  F0C4         	call	___wmul	;wreg free
 21609  011242  0E00               	movlw	low _maze
 21610  011244  0100               	movlb	0	; () banked
 21611  011246  6F66               	movwf	??_Create_Maze& (0+255),b
 21612  011248  0E02               	movlw	high _maze
 21613  01124A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21614  01124C  5160               	movf	?___wmul& (0+255),w,b
 21615  01124E  2766               	addwf	??_Create_Maze& (0+255),f,b
 21616  011250  5161               	movf	(?___wmul+1)& (0+255),w,b
 21617  011252  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21618  011254  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21619  011258  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21620  01125C  0E00               	movlw	0
 21621  01125E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21622  011260  0E0A               	movlw	10
 21623  011262  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21624  011264  EC33  F0C4         	call	___wmul	;wreg free
 21625  011268  0100               	movlb	0	; () banked
 21626  01126A  5160               	movf	?___wmul& (0+255),w,b
 21627  01126C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21628  01126E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21629  011270  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21630  011272  0E04               	movlw	4
 21631  011274  2566               	addwf	??_Create_Maze& (0+255),w,b
 21632  011276  6ED9               	movwf	fsr2l,c
 21633  011278  0E00               	movlw	0
 21634  01127A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21635  01127C  6EDA               	movwf	fsr2h,c
 21636  01127E  0E00               	movlw	0
 21637  011280  6EDF               	movwf	indf2,c
 21638                           
 21639                           ; BSR set to: 0
 21640                           ;dans.c: 105: maze[x][y].walls[1] = 0;
 21641  011282  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21642  011286  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21643  01128A  0E00               	movlw	0
 21644  01128C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21645  01128E  0E32               	movlw	50
 21646  011290  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21647  011292  EC33  F0C4         	call	___wmul	;wreg free
 21648  011296  0E00               	movlw	low _maze
 21649  011298  0100               	movlb	0	; () banked
 21650  01129A  6F66               	movwf	??_Create_Maze& (0+255),b
 21651  01129C  0E02               	movlw	high _maze
 21652  01129E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21653  0112A0  5160               	movf	?___wmul& (0+255),w,b
 21654  0112A2  2766               	addwf	??_Create_Maze& (0+255),f,b
 21655  0112A4  5161               	movf	(?___wmul+1)& (0+255),w,b
 21656  0112A6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21657  0112A8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21658  0112AC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21659  0112B0  0E00               	movlw	0
 21660  0112B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21661  0112B4  0E0A               	movlw	10
 21662  0112B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21663  0112B8  EC33  F0C4         	call	___wmul	;wreg free
 21664  0112BC  0100               	movlb	0	; () banked
 21665  0112BE  5160               	movf	?___wmul& (0+255),w,b
 21666  0112C0  2766               	addwf	??_Create_Maze& (0+255),f,b
 21667  0112C2  5161               	movf	(?___wmul+1)& (0+255),w,b
 21668  0112C4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21669  0112C6  0E05               	movlw	5
 21670  0112C8  2566               	addwf	??_Create_Maze& (0+255),w,b
 21671  0112CA  6ED9               	movwf	fsr2l,c
 21672  0112CC  0E00               	movlw	0
 21673  0112CE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21674  0112D0  6EDA               	movwf	fsr2h,c
 21675  0112D2  0E00               	movlw	0
 21676  0112D4  6EDF               	movwf	indf2,c
 21677                           
 21678                           ; BSR set to: 0
 21679                           ;dans.c: 106: maze[x][y].walls[2] = 0;
 21680  0112D6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21681  0112DA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21682  0112DE  0E00               	movlw	0
 21683  0112E0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21684  0112E2  0E32               	movlw	50
 21685  0112E4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21686  0112E6  EC33  F0C4         	call	___wmul	;wreg free
 21687  0112EA  0E00               	movlw	low _maze
 21688  0112EC  0100               	movlb	0	; () banked
 21689  0112EE  6F66               	movwf	??_Create_Maze& (0+255),b
 21690  0112F0  0E02               	movlw	high _maze
 21691  0112F2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21692  0112F4  5160               	movf	?___wmul& (0+255),w,b
 21693  0112F6  2766               	addwf	??_Create_Maze& (0+255),f,b
 21694  0112F8  5161               	movf	(?___wmul+1)& (0+255),w,b
 21695  0112FA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21696  0112FC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21697  011300  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21698  011304  0E00               	movlw	0
 21699  011306  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21700  011308  0E0A               	movlw	10
 21701  01130A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21702  01130C  EC33  F0C4         	call	___wmul	;wreg free
 21703  011310  0100               	movlb	0	; () banked
 21704  011312  5160               	movf	?___wmul& (0+255),w,b
 21705  011314  2766               	addwf	??_Create_Maze& (0+255),f,b
 21706  011316  5161               	movf	(?___wmul+1)& (0+255),w,b
 21707  011318  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21708  01131A  0E06               	movlw	6
 21709  01131C  2566               	addwf	??_Create_Maze& (0+255),w,b
 21710  01131E  6ED9               	movwf	fsr2l,c
 21711  011320  0E00               	movlw	0
 21712  011322  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21713  011324  6EDA               	movwf	fsr2h,c
 21714  011326  0E00               	movlw	0
 21715  011328  6EDF               	movwf	indf2,c
 21716                           
 21717                           ; BSR set to: 0
 21718                           ;dans.c: 107: maze[x][y].walls[3] = 1;
 21719  01132A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21720  01132E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21721  011332  0E00               	movlw	0
 21722  011334  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21723  011336  0E32               	movlw	50
 21724  011338  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21725  01133A  EC33  F0C4         	call	___wmul	;wreg free
 21726  01133E  0E00               	movlw	low _maze
 21727  011340  0100               	movlb	0	; () banked
 21728  011342  6F66               	movwf	??_Create_Maze& (0+255),b
 21729  011344  0E02               	movlw	high _maze
 21730  011346  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21731  011348  5160               	movf	?___wmul& (0+255),w,b
 21732  01134A  2766               	addwf	??_Create_Maze& (0+255),f,b
 21733  01134C  5161               	movf	(?___wmul+1)& (0+255),w,b
 21734  01134E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21735  011350  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21736  011354  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21737  011358  0E00               	movlw	0
 21738  01135A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21739  01135C  0E0A               	movlw	10
 21740  01135E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21741  011360  EC33  F0C4         	call	___wmul	;wreg free
 21742  011364  0100               	movlb	0	; () banked
 21743  011366  5160               	movf	?___wmul& (0+255),w,b
 21744  011368  2766               	addwf	??_Create_Maze& (0+255),f,b
 21745  01136A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21746  01136C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21747  01136E  0E07               	movlw	7
 21748  011370  2566               	addwf	??_Create_Maze& (0+255),w,b
 21749  011372  6ED9               	movwf	fsr2l,c
 21750  011374  0E00               	movlw	0
 21751  011376  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21752  011378  6EDA               	movwf	fsr2h,c
 21753  01137A  0E01               	movlw	1
 21754  01137C  6EDF               	movwf	indf2,c
 21755                           
 21756                           ; BSR set to: 0
 21757                           ;dans.c: 108: maze[x][y].Options = 3;
 21758  01137E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21759  011382  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21760  011386  0E00               	movlw	0
 21761  011388  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21762  01138A  0E32               	movlw	50
 21763  01138C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21764  01138E  EC33  F0C4         	call	___wmul	;wreg free
 21765  011392  0E00               	movlw	low _maze
 21766  011394  0100               	movlb	0	; () banked
 21767  011396  6F66               	movwf	??_Create_Maze& (0+255),b
 21768  011398  0E02               	movlw	high _maze
 21769  01139A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21770  01139C  5160               	movf	?___wmul& (0+255),w,b
 21771  01139E  2766               	addwf	??_Create_Maze& (0+255),f,b
 21772  0113A0  5161               	movf	(?___wmul+1)& (0+255),w,b
 21773  0113A2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21774  0113A4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21775  0113A8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21776  0113AC  0E00               	movlw	0
 21777  0113AE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21778  0113B0  0E0A               	movlw	10
 21779  0113B2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21780  0113B4  EC33  F0C4         	call	___wmul	;wreg free
 21781  0113B8  0100               	movlb	0	; () banked
 21782  0113BA  5160               	movf	?___wmul& (0+255),w,b
 21783  0113BC  2766               	addwf	??_Create_Maze& (0+255),f,b
 21784  0113BE  5161               	movf	(?___wmul+1)& (0+255),w,b
 21785  0113C0  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21786  0113C2  0E08               	movlw	8
 21787  0113C4  2566               	addwf	??_Create_Maze& (0+255),w,b
 21788  0113C6  6ED9               	movwf	fsr2l,c
 21789  0113C8  0E00               	movlw	0
 21790  0113CA  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21791  0113CC  6EDA               	movwf	fsr2h,c
 21792  0113CE  0E03               	movlw	3
 21793  0113D0  6EDE               	movwf	postinc2,c
 21794  0113D2  0E00               	movlw	0
 21795  0113D4  6EDD               	movwf	postdec2,c
 21796                           
 21797                           ; BSR set to: 0
 21798                           ;dans.c: 110: ++y;
 21799  0113D6  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 21800  0113D8  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 21801                           
 21802                           ; BSR set to: 0
 21803                           ;dans.c: 111: maze[x][y].walls[0] = 1;
 21804  0113DA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21805  0113DE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21806  0113E2  0E00               	movlw	0
 21807  0113E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21808  0113E6  0E32               	movlw	50
 21809  0113E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21810  0113EA  EC33  F0C4         	call	___wmul	;wreg free
 21811  0113EE  0E00               	movlw	low _maze
 21812  0113F0  0100               	movlb	0	; () banked
 21813  0113F2  6F66               	movwf	??_Create_Maze& (0+255),b
 21814  0113F4  0E02               	movlw	high _maze
 21815  0113F6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21816  0113F8  5160               	movf	?___wmul& (0+255),w,b
 21817  0113FA  2766               	addwf	??_Create_Maze& (0+255),f,b
 21818  0113FC  5161               	movf	(?___wmul+1)& (0+255),w,b
 21819  0113FE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21820  011400  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21821  011404  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21822  011408  0E00               	movlw	0
 21823  01140A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21824  01140C  0E0A               	movlw	10
 21825  01140E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21826  011410  EC33  F0C4         	call	___wmul	;wreg free
 21827  011414  0100               	movlb	0	; () banked
 21828  011416  5160               	movf	?___wmul& (0+255),w,b
 21829  011418  2766               	addwf	??_Create_Maze& (0+255),f,b
 21830  01141A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21831  01141C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21832  01141E  0E04               	movlw	4
 21833  011420  2566               	addwf	??_Create_Maze& (0+255),w,b
 21834  011422  6ED9               	movwf	fsr2l,c
 21835  011424  0E00               	movlw	0
 21836  011426  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21837  011428  6EDA               	movwf	fsr2h,c
 21838  01142A  0E01               	movlw	1
 21839  01142C  6EDF               	movwf	indf2,c
 21840                           
 21841                           ; BSR set to: 0
 21842                           ;dans.c: 112: maze[x][y].walls[1] = 0;
 21843  01142E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21844  011432  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21845  011436  0E00               	movlw	0
 21846  011438  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21847  01143A  0E32               	movlw	50
 21848  01143C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21849  01143E  EC33  F0C4         	call	___wmul	;wreg free
 21850  011442  0E00               	movlw	low _maze
 21851  011444  0100               	movlb	0	; () banked
 21852  011446  6F66               	movwf	??_Create_Maze& (0+255),b
 21853  011448  0E02               	movlw	high _maze
 21854  01144A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21855  01144C  5160               	movf	?___wmul& (0+255),w,b
 21856  01144E  2766               	addwf	??_Create_Maze& (0+255),f,b
 21857  011450  5161               	movf	(?___wmul+1)& (0+255),w,b
 21858  011452  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21859  011454  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21860  011458  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21861  01145C  0E00               	movlw	0
 21862  01145E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21863  011460  0E0A               	movlw	10
 21864  011462  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21865  011464  EC33  F0C4         	call	___wmul	;wreg free
 21866  011468  0100               	movlb	0	; () banked
 21867  01146A  5160               	movf	?___wmul& (0+255),w,b
 21868  01146C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21869  01146E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21870  011470  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21871  011472  0E05               	movlw	5
 21872  011474  2566               	addwf	??_Create_Maze& (0+255),w,b
 21873  011476  6ED9               	movwf	fsr2l,c
 21874  011478  0E00               	movlw	0
 21875  01147A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21876  01147C  6EDA               	movwf	fsr2h,c
 21877  01147E  0E00               	movlw	0
 21878  011480  6EDF               	movwf	indf2,c
 21879                           
 21880                           ; BSR set to: 0
 21881                           ;dans.c: 113: maze[x][y].walls[2] = 1;
 21882  011482  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21883  011486  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21884  01148A  0E00               	movlw	0
 21885  01148C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21886  01148E  0E32               	movlw	50
 21887  011490  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21888  011492  EC33  F0C4         	call	___wmul	;wreg free
 21889  011496  0E00               	movlw	low _maze
 21890  011498  0100               	movlb	0	; () banked
 21891  01149A  6F66               	movwf	??_Create_Maze& (0+255),b
 21892  01149C  0E02               	movlw	high _maze
 21893  01149E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21894  0114A0  5160               	movf	?___wmul& (0+255),w,b
 21895  0114A2  2766               	addwf	??_Create_Maze& (0+255),f,b
 21896  0114A4  5161               	movf	(?___wmul+1)& (0+255),w,b
 21897  0114A6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21898  0114A8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21899  0114AC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21900  0114B0  0E00               	movlw	0
 21901  0114B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21902  0114B4  0E0A               	movlw	10
 21903  0114B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21904  0114B8  EC33  F0C4         	call	___wmul	;wreg free
 21905  0114BC  0100               	movlb	0	; () banked
 21906  0114BE  5160               	movf	?___wmul& (0+255),w,b
 21907  0114C0  2766               	addwf	??_Create_Maze& (0+255),f,b
 21908  0114C2  5161               	movf	(?___wmul+1)& (0+255),w,b
 21909  0114C4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21910  0114C6  0E06               	movlw	6
 21911  0114C8  2566               	addwf	??_Create_Maze& (0+255),w,b
 21912  0114CA  6ED9               	movwf	fsr2l,c
 21913  0114CC  0E00               	movlw	0
 21914  0114CE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21915  0114D0  6EDA               	movwf	fsr2h,c
 21916  0114D2  0E01               	movlw	1
 21917  0114D4  6EDF               	movwf	indf2,c
 21918                           
 21919                           ; BSR set to: 0
 21920                           ;dans.c: 114: maze[x][y].walls[3] = 0;
 21921  0114D6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21922  0114DA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21923  0114DE  0E00               	movlw	0
 21924  0114E0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21925  0114E2  0E32               	movlw	50
 21926  0114E4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21927  0114E6  EC33  F0C4         	call	___wmul	;wreg free
 21928  0114EA  0E00               	movlw	low _maze
 21929  0114EC  0100               	movlb	0	; () banked
 21930  0114EE  6F66               	movwf	??_Create_Maze& (0+255),b
 21931  0114F0  0E02               	movlw	high _maze
 21932  0114F2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21933  0114F4  5160               	movf	?___wmul& (0+255),w,b
 21934  0114F6  2766               	addwf	??_Create_Maze& (0+255),f,b
 21935  0114F8  5161               	movf	(?___wmul+1)& (0+255),w,b
 21936  0114FA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21937  0114FC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21938  011500  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21939  011504  0E00               	movlw	0
 21940  011506  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21941  011508  0E0A               	movlw	10
 21942  01150A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21943  01150C  EC33  F0C4         	call	___wmul	;wreg free
 21944  011510  0100               	movlb	0	; () banked
 21945  011512  5160               	movf	?___wmul& (0+255),w,b
 21946  011514  2766               	addwf	??_Create_Maze& (0+255),f,b
 21947  011516  5161               	movf	(?___wmul+1)& (0+255),w,b
 21948  011518  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21949  01151A  0E07               	movlw	7
 21950  01151C  2566               	addwf	??_Create_Maze& (0+255),w,b
 21951  01151E  6ED9               	movwf	fsr2l,c
 21952  011520  0E00               	movlw	0
 21953  011522  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21954  011524  6EDA               	movwf	fsr2h,c
 21955  011526  0E00               	movlw	0
 21956  011528  6EDF               	movwf	indf2,c
 21957                           
 21958                           ; BSR set to: 0
 21959                           ;dans.c: 115: maze[x][y].Options = 2;
 21960  01152A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21961  01152E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21962  011532  0E00               	movlw	0
 21963  011534  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21964  011536  0E32               	movlw	50
 21965  011538  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21966  01153A  EC33  F0C4         	call	___wmul	;wreg free
 21967  01153E  0E00               	movlw	low _maze
 21968  011540  0100               	movlb	0	; () banked
 21969  011542  6F66               	movwf	??_Create_Maze& (0+255),b
 21970  011544  0E02               	movlw	high _maze
 21971  011546  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21972  011548  5160               	movf	?___wmul& (0+255),w,b
 21973  01154A  2766               	addwf	??_Create_Maze& (0+255),f,b
 21974  01154C  5161               	movf	(?___wmul+1)& (0+255),w,b
 21975  01154E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21976  011550  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21977  011554  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21978  011558  0E00               	movlw	0
 21979  01155A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21980  01155C  0E0A               	movlw	10
 21981  01155E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21982  011560  EC33  F0C4         	call	___wmul	;wreg free
 21983  011564  0100               	movlb	0	; () banked
 21984  011566  5160               	movf	?___wmul& (0+255),w,b
 21985  011568  2766               	addwf	??_Create_Maze& (0+255),f,b
 21986  01156A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21987  01156C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21988  01156E  0E08               	movlw	8
 21989  011570  2566               	addwf	??_Create_Maze& (0+255),w,b
 21990  011572  6ED9               	movwf	fsr2l,c
 21991  011574  0E00               	movlw	0
 21992  011576  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21993  011578  6EDA               	movwf	fsr2h,c
 21994  01157A  0E02               	movlw	2
 21995  01157C  6EDE               	movwf	postinc2,c
 21996  01157E  0E00               	movlw	0
 21997  011580  6EDD               	movwf	postdec2,c
 21998                           
 21999                           ; BSR set to: 0
 22000                           ;dans.c: 117: ++y;
 22001  011582  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 22002  011584  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 22003                           
 22004                           ; BSR set to: 0
 22005                           ;dans.c: 118: maze[x][y].walls[0] = 0;
 22006  011586  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22007  01158A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22008  01158E  0E00               	movlw	0
 22009  011590  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22010  011592  0E32               	movlw	50
 22011  011594  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22012  011596  EC33  F0C4         	call	___wmul	;wreg free
 22013  01159A  0E00               	movlw	low _maze
 22014  01159C  0100               	movlb	0	; () banked
 22015  01159E  6F66               	movwf	??_Create_Maze& (0+255),b
 22016  0115A0  0E02               	movlw	high _maze
 22017  0115A2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22018  0115A4  5160               	movf	?___wmul& (0+255),w,b
 22019  0115A6  2766               	addwf	??_Create_Maze& (0+255),f,b
 22020  0115A8  5161               	movf	(?___wmul+1)& (0+255),w,b
 22021  0115AA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22022  0115AC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22023  0115B0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22024  0115B4  0E00               	movlw	0
 22025  0115B6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22026  0115B8  0E0A               	movlw	10
 22027  0115BA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22028  0115BC  EC33  F0C4         	call	___wmul	;wreg free
 22029  0115C0  0100               	movlb	0	; () banked
 22030  0115C2  5160               	movf	?___wmul& (0+255),w,b
 22031  0115C4  2766               	addwf	??_Create_Maze& (0+255),f,b
 22032  0115C6  5161               	movf	(?___wmul+1)& (0+255),w,b
 22033  0115C8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22034  0115CA  0E04               	movlw	4
 22035  0115CC  2566               	addwf	??_Create_Maze& (0+255),w,b
 22036  0115CE  6ED9               	movwf	fsr2l,c
 22037  0115D0  0E00               	movlw	0
 22038  0115D2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22039  0115D4  6EDA               	movwf	fsr2h,c
 22040  0115D6  0E00               	movlw	0
 22041  0115D8  6EDF               	movwf	indf2,c
 22042                           
 22043                           ; BSR set to: 0
 22044                           ;dans.c: 119: maze[x][y].walls[1] = 0;
 22045  0115DA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22046  0115DE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22047  0115E2  0E00               	movlw	0
 22048  0115E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22049  0115E6  0E32               	movlw	50
 22050  0115E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22051  0115EA  EC33  F0C4         	call	___wmul	;wreg free
 22052  0115EE  0E00               	movlw	low _maze
 22053  0115F0  0100               	movlb	0	; () banked
 22054  0115F2  6F66               	movwf	??_Create_Maze& (0+255),b
 22055  0115F4  0E02               	movlw	high _maze
 22056  0115F6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22057  0115F8  5160               	movf	?___wmul& (0+255),w,b
 22058  0115FA  2766               	addwf	??_Create_Maze& (0+255),f,b
 22059  0115FC  5161               	movf	(?___wmul+1)& (0+255),w,b
 22060  0115FE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22061  011600  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22062  011604  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22063  011608  0E00               	movlw	0
 22064  01160A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22065  01160C  0E0A               	movlw	10
 22066  01160E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22067  011610  EC33  F0C4         	call	___wmul	;wreg free
 22068  011614  0100               	movlb	0	; () banked
 22069  011616  5160               	movf	?___wmul& (0+255),w,b
 22070  011618  2766               	addwf	??_Create_Maze& (0+255),f,b
 22071  01161A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22072  01161C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22073  01161E  0E05               	movlw	5
 22074  011620  2566               	addwf	??_Create_Maze& (0+255),w,b
 22075  011622  6ED9               	movwf	fsr2l,c
 22076  011624  0E00               	movlw	0
 22077  011626  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22078  011628  6EDA               	movwf	fsr2h,c
 22079  01162A  0E00               	movlw	0
 22080  01162C  6EDF               	movwf	indf2,c
 22081                           
 22082                           ; BSR set to: 0
 22083                           ;dans.c: 120: maze[x][y].walls[2] = 0;
 22084  01162E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22085  011632  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22086  011636  0E00               	movlw	0
 22087  011638  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22088  01163A  0E32               	movlw	50
 22089  01163C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22090  01163E  EC33  F0C4         	call	___wmul	;wreg free
 22091  011642  0E00               	movlw	low _maze
 22092  011644  0100               	movlb	0	; () banked
 22093  011646  6F66               	movwf	??_Create_Maze& (0+255),b
 22094  011648  0E02               	movlw	high _maze
 22095  01164A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22096  01164C  5160               	movf	?___wmul& (0+255),w,b
 22097  01164E  2766               	addwf	??_Create_Maze& (0+255),f,b
 22098  011650  5161               	movf	(?___wmul+1)& (0+255),w,b
 22099  011652  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22100  011654  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22101  011658  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22102  01165C  0E00               	movlw	0
 22103  01165E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22104  011660  0E0A               	movlw	10
 22105  011662  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22106  011664  EC33  F0C4         	call	___wmul	;wreg free
 22107  011668  0100               	movlb	0	; () banked
 22108  01166A  5160               	movf	?___wmul& (0+255),w,b
 22109  01166C  2766               	addwf	??_Create_Maze& (0+255),f,b
 22110  01166E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22111  011670  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22112  011672  0E06               	movlw	6
 22113  011674  2566               	addwf	??_Create_Maze& (0+255),w,b
 22114  011676  6ED9               	movwf	fsr2l,c
 22115  011678  0E00               	movlw	0
 22116  01167A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22117  01167C  6EDA               	movwf	fsr2h,c
 22118  01167E  0E00               	movlw	0
 22119  011680  6EDF               	movwf	indf2,c
 22120                           
 22121                           ; BSR set to: 0
 22122                           ;dans.c: 121: maze[x][y].walls[3] = 0;
 22123  011682  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22124  011686  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22125  01168A  0E00               	movlw	0
 22126  01168C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22127  01168E  0E32               	movlw	50
 22128  011690  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22129  011692  EC33  F0C4         	call	___wmul	;wreg free
 22130  011696  0E00               	movlw	low _maze
 22131  011698  0100               	movlb	0	; () banked
 22132  01169A  6F66               	movwf	??_Create_Maze& (0+255),b
 22133  01169C  0E02               	movlw	high _maze
 22134  01169E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22135  0116A0  5160               	movf	?___wmul& (0+255),w,b
 22136  0116A2  2766               	addwf	??_Create_Maze& (0+255),f,b
 22137  0116A4  5161               	movf	(?___wmul+1)& (0+255),w,b
 22138  0116A6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22139  0116A8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22140  0116AC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22141  0116B0  0E00               	movlw	0
 22142  0116B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22143  0116B4  0E0A               	movlw	10
 22144  0116B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22145  0116B8  EC33  F0C4         	call	___wmul	;wreg free
 22146  0116BC  0100               	movlb	0	; () banked
 22147  0116BE  5160               	movf	?___wmul& (0+255),w,b
 22148  0116C0  2766               	addwf	??_Create_Maze& (0+255),f,b
 22149  0116C2  5161               	movf	(?___wmul+1)& (0+255),w,b
 22150  0116C4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22151  0116C6  0E07               	movlw	7
 22152  0116C8  2566               	addwf	??_Create_Maze& (0+255),w,b
 22153  0116CA  6ED9               	movwf	fsr2l,c
 22154  0116CC  0E00               	movlw	0
 22155  0116CE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22156  0116D0  6EDA               	movwf	fsr2h,c
 22157  0116D2  0E00               	movlw	0
 22158  0116D4  6EDF               	movwf	indf2,c
 22159                           
 22160                           ; BSR set to: 0
 22161                           ;dans.c: 122: maze[x][y].Options = 4;
 22162  0116D6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22163  0116DA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22164  0116DE  0E00               	movlw	0
 22165  0116E0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22166  0116E2  0E32               	movlw	50
 22167  0116E4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22168  0116E6  EC33  F0C4         	call	___wmul	;wreg free
 22169  0116EA  0E00               	movlw	low _maze
 22170  0116EC  0100               	movlb	0	; () banked
 22171  0116EE  6F66               	movwf	??_Create_Maze& (0+255),b
 22172  0116F0  0E02               	movlw	high _maze
 22173  0116F2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22174  0116F4  5160               	movf	?___wmul& (0+255),w,b
 22175  0116F6  2766               	addwf	??_Create_Maze& (0+255),f,b
 22176  0116F8  5161               	movf	(?___wmul+1)& (0+255),w,b
 22177  0116FA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22178  0116FC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22179  011700  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22180  011704  0E00               	movlw	0
 22181  011706  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22182  011708  0E0A               	movlw	10
 22183  01170A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22184  01170C  EC33  F0C4         	call	___wmul	;wreg free
 22185  011710  0100               	movlb	0	; () banked
 22186  011712  5160               	movf	?___wmul& (0+255),w,b
 22187  011714  2766               	addwf	??_Create_Maze& (0+255),f,b
 22188  011716  5161               	movf	(?___wmul+1)& (0+255),w,b
 22189  011718  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22190  01171A  0E08               	movlw	8
 22191  01171C  2566               	addwf	??_Create_Maze& (0+255),w,b
 22192  01171E  6ED9               	movwf	fsr2l,c
 22193  011720  0E00               	movlw	0
 22194  011722  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22195  011724  6EDA               	movwf	fsr2h,c
 22196  011726  0E04               	movlw	4
 22197  011728  6EDE               	movwf	postinc2,c
 22198  01172A  0E00               	movlw	0
 22199  01172C  6EDD               	movwf	postdec2,c
 22200                           
 22201                           ; BSR set to: 0
 22202                           ;dans.c: 124: ++y;
 22203  01172E  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 22204  011730  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 22205                           
 22206                           ; BSR set to: 0
 22207                           ;dans.c: 125: maze[x][y].walls[0] = 1;
 22208  011732  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22209  011736  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22210  01173A  0E00               	movlw	0
 22211  01173C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22212  01173E  0E32               	movlw	50
 22213  011740  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22214  011742  EC33  F0C4         	call	___wmul	;wreg free
 22215  011746  0E00               	movlw	low _maze
 22216  011748  0100               	movlb	0	; () banked
 22217  01174A  6F66               	movwf	??_Create_Maze& (0+255),b
 22218  01174C  0E02               	movlw	high _maze
 22219  01174E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22220  011750  5160               	movf	?___wmul& (0+255),w,b
 22221  011752  2766               	addwf	??_Create_Maze& (0+255),f,b
 22222  011754  5161               	movf	(?___wmul+1)& (0+255),w,b
 22223  011756  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22224  011758  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22225  01175C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22226  011760  0E00               	movlw	0
 22227  011762  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22228  011764  0E0A               	movlw	10
 22229  011766  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22230  011768  EC33  F0C4         	call	___wmul	;wreg free
 22231  01176C  0100               	movlb	0	; () banked
 22232  01176E  5160               	movf	?___wmul& (0+255),w,b
 22233  011770  2766               	addwf	??_Create_Maze& (0+255),f,b
 22234  011772  5161               	movf	(?___wmul+1)& (0+255),w,b
 22235  011774  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22236  011776  0E04               	movlw	4
 22237  011778  2566               	addwf	??_Create_Maze& (0+255),w,b
 22238  01177A  6ED9               	movwf	fsr2l,c
 22239  01177C  0E00               	movlw	0
 22240  01177E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22241  011780  6EDA               	movwf	fsr2h,c
 22242  011782  0E01               	movlw	1
 22243  011784  6EDF               	movwf	indf2,c
 22244                           
 22245                           ; BSR set to: 0
 22246                           ;dans.c: 126: maze[x][y].walls[1] = 0;
 22247  011786  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22248  01178A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22249  01178E  0E00               	movlw	0
 22250  011790  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22251  011792  0E32               	movlw	50
 22252  011794  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22253  011796  EC33  F0C4         	call	___wmul	;wreg free
 22254  01179A  0E00               	movlw	low _maze
 22255  01179C  0100               	movlb	0	; () banked
 22256  01179E  6F66               	movwf	??_Create_Maze& (0+255),b
 22257  0117A0  0E02               	movlw	high _maze
 22258  0117A2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22259  0117A4  5160               	movf	?___wmul& (0+255),w,b
 22260  0117A6  2766               	addwf	??_Create_Maze& (0+255),f,b
 22261  0117A8  5161               	movf	(?___wmul+1)& (0+255),w,b
 22262  0117AA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22263  0117AC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22264  0117B0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22265  0117B4  0E00               	movlw	0
 22266  0117B6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22267  0117B8  0E0A               	movlw	10
 22268  0117BA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22269  0117BC  EC33  F0C4         	call	___wmul	;wreg free
 22270  0117C0  0100               	movlb	0	; () banked
 22271  0117C2  5160               	movf	?___wmul& (0+255),w,b
 22272  0117C4  2766               	addwf	??_Create_Maze& (0+255),f,b
 22273  0117C6  5161               	movf	(?___wmul+1)& (0+255),w,b
 22274  0117C8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22275  0117CA  0E05               	movlw	5
 22276  0117CC  2566               	addwf	??_Create_Maze& (0+255),w,b
 22277  0117CE  6ED9               	movwf	fsr2l,c
 22278  0117D0  0E00               	movlw	0
 22279  0117D2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22280  0117D4  6EDA               	movwf	fsr2h,c
 22281  0117D6  0E00               	movlw	0
 22282  0117D8  6EDF               	movwf	indf2,c
 22283                           
 22284                           ; BSR set to: 0
 22285                           ;dans.c: 127: maze[x][y].walls[2] = 1;
 22286  0117DA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22287  0117DE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22288  0117E2  0E00               	movlw	0
 22289  0117E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22290  0117E6  0E32               	movlw	50
 22291  0117E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22292  0117EA  EC33  F0C4         	call	___wmul	;wreg free
 22293  0117EE  0E00               	movlw	low _maze
 22294  0117F0  0100               	movlb	0	; () banked
 22295  0117F2  6F66               	movwf	??_Create_Maze& (0+255),b
 22296  0117F4  0E02               	movlw	high _maze
 22297  0117F6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22298  0117F8  5160               	movf	?___wmul& (0+255),w,b
 22299  0117FA  2766               	addwf	??_Create_Maze& (0+255),f,b
 22300  0117FC  5161               	movf	(?___wmul+1)& (0+255),w,b
 22301  0117FE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22302  011800  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22303  011804  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22304  011808  0E00               	movlw	0
 22305  01180A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22306  01180C  0E0A               	movlw	10
 22307  01180E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22308  011810  EC33  F0C4         	call	___wmul	;wreg free
 22309  011814  0100               	movlb	0	; () banked
 22310  011816  5160               	movf	?___wmul& (0+255),w,b
 22311  011818  2766               	addwf	??_Create_Maze& (0+255),f,b
 22312  01181A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22313  01181C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22314  01181E  0E06               	movlw	6
 22315  011820  2566               	addwf	??_Create_Maze& (0+255),w,b
 22316  011822  6ED9               	movwf	fsr2l,c
 22317  011824  0E00               	movlw	0
 22318  011826  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22319  011828  6EDA               	movwf	fsr2h,c
 22320  01182A  0E01               	movlw	1
 22321  01182C  6EDF               	movwf	indf2,c
 22322                           
 22323                           ; BSR set to: 0
 22324                           ;dans.c: 128: maze[x][y].walls[3] = 0;
 22325  01182E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22326  011832  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22327  011836  0E00               	movlw	0
 22328  011838  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22329  01183A  0E32               	movlw	50
 22330  01183C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22331  01183E  EC33  F0C4         	call	___wmul	;wreg free
 22332  011842  0E00               	movlw	low _maze
 22333  011844  0100               	movlb	0	; () banked
 22334  011846  6F66               	movwf	??_Create_Maze& (0+255),b
 22335  011848  0E02               	movlw	high _maze
 22336  01184A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22337  01184C  5160               	movf	?___wmul& (0+255),w,b
 22338  01184E  2766               	addwf	??_Create_Maze& (0+255),f,b
 22339  011850  5161               	movf	(?___wmul+1)& (0+255),w,b
 22340  011852  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22341  011854  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22342  011858  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22343  01185C  0E00               	movlw	0
 22344  01185E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22345  011860  0E0A               	movlw	10
 22346  011862  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22347  011864  EC33  F0C4         	call	___wmul	;wreg free
 22348  011868  0100               	movlb	0	; () banked
 22349  01186A  5160               	movf	?___wmul& (0+255),w,b
 22350  01186C  2766               	addwf	??_Create_Maze& (0+255),f,b
 22351  01186E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22352  011870  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22353  011872  0E07               	movlw	7
 22354  011874  2566               	addwf	??_Create_Maze& (0+255),w,b
 22355  011876  6ED9               	movwf	fsr2l,c
 22356  011878  0E00               	movlw	0
 22357  01187A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22358  01187C  6EDA               	movwf	fsr2h,c
 22359  01187E  0E00               	movlw	0
 22360  011880  6EDF               	movwf	indf2,c
 22361                           
 22362                           ; BSR set to: 0
 22363                           ;dans.c: 129: maze[x][y].Options = 2;
 22364  011882  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22365  011886  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22366  01188A  0E00               	movlw	0
 22367  01188C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22368  01188E  0E32               	movlw	50
 22369  011890  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22370  011892  EC33  F0C4         	call	___wmul	;wreg free
 22371  011896  0E00               	movlw	low _maze
 22372  011898  0100               	movlb	0	; () banked
 22373  01189A  6F66               	movwf	??_Create_Maze& (0+255),b
 22374  01189C  0E02               	movlw	high _maze
 22375  01189E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22376  0118A0  5160               	movf	?___wmul& (0+255),w,b
 22377  0118A2  2766               	addwf	??_Create_Maze& (0+255),f,b
 22378  0118A4  5161               	movf	(?___wmul+1)& (0+255),w,b
 22379  0118A6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22380  0118A8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22381  0118AC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22382  0118B0  0E00               	movlw	0
 22383  0118B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22384  0118B4  0E0A               	movlw	10
 22385  0118B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22386  0118B8  EC33  F0C4         	call	___wmul	;wreg free
 22387  0118BC  0100               	movlb	0	; () banked
 22388  0118BE  5160               	movf	?___wmul& (0+255),w,b
 22389  0118C0  2766               	addwf	??_Create_Maze& (0+255),f,b
 22390  0118C2  5161               	movf	(?___wmul+1)& (0+255),w,b
 22391  0118C4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22392  0118C6  0E08               	movlw	8
 22393  0118C8  2566               	addwf	??_Create_Maze& (0+255),w,b
 22394  0118CA  6ED9               	movwf	fsr2l,c
 22395  0118CC  0E00               	movlw	0
 22396  0118CE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22397  0118D0  6EDA               	movwf	fsr2h,c
 22398  0118D2  0E02               	movlw	2
 22399  0118D4  6EDE               	movwf	postinc2,c
 22400  0118D6  0E00               	movlw	0
 22401  0118D8  6EDD               	movwf	postdec2,c
 22402                           
 22403                           ; BSR set to: 0
 22404                           ;dans.c: 131: ++y;
 22405  0118DA  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 22406  0118DC  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 22407                           
 22408                           ; BSR set to: 0
 22409                           ;dans.c: 132: maze[x][y].walls[0] = 1;
 22410  0118DE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22411  0118E2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22412  0118E6  0E00               	movlw	0
 22413  0118E8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22414  0118EA  0E32               	movlw	50
 22415  0118EC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22416  0118EE  EC33  F0C4         	call	___wmul	;wreg free
 22417  0118F2  0E00               	movlw	low _maze
 22418  0118F4  0100               	movlb	0	; () banked
 22419  0118F6  6F66               	movwf	??_Create_Maze& (0+255),b
 22420  0118F8  0E02               	movlw	high _maze
 22421  0118FA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22422  0118FC  5160               	movf	?___wmul& (0+255),w,b
 22423  0118FE  2766               	addwf	??_Create_Maze& (0+255),f,b
 22424  011900  5161               	movf	(?___wmul+1)& (0+255),w,b
 22425  011902  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22426  011904  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22427  011908  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22428  01190C  0E00               	movlw	0
 22429  01190E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22430  011910  0E0A               	movlw	10
 22431  011912  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22432  011914  EC33  F0C4         	call	___wmul	;wreg free
 22433  011918  0100               	movlb	0	; () banked
 22434  01191A  5160               	movf	?___wmul& (0+255),w,b
 22435  01191C  2766               	addwf	??_Create_Maze& (0+255),f,b
 22436  01191E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22437  011920  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22438  011922  0E04               	movlw	4
 22439  011924  2566               	addwf	??_Create_Maze& (0+255),w,b
 22440  011926  6ED9               	movwf	fsr2l,c
 22441  011928  0E00               	movlw	0
 22442  01192A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22443  01192C  6EDA               	movwf	fsr2h,c
 22444  01192E  0E01               	movlw	1
 22445  011930  6EDF               	movwf	indf2,c
 22446                           
 22447                           ; BSR set to: 0
 22448                           ;dans.c: 133: maze[x][y].walls[1] = 1;
 22449  011932  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22450  011936  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22451  01193A  0E00               	movlw	0
 22452  01193C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22453  01193E  0E32               	movlw	50
 22454  011940  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22455  011942  EC33  F0C4         	call	___wmul	;wreg free
 22456  011946  0E00               	movlw	low _maze
 22457  011948  0100               	movlb	0	; () banked
 22458  01194A  6F66               	movwf	??_Create_Maze& (0+255),b
 22459  01194C  0E02               	movlw	high _maze
 22460  01194E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22461  011950  5160               	movf	?___wmul& (0+255),w,b
 22462  011952  2766               	addwf	??_Create_Maze& (0+255),f,b
 22463  011954  5161               	movf	(?___wmul+1)& (0+255),w,b
 22464  011956  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22465  011958  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22466  01195C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22467  011960  0E00               	movlw	0
 22468  011962  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22469  011964  0E0A               	movlw	10
 22470  011966  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22471  011968  EC33  F0C4         	call	___wmul	;wreg free
 22472  01196C  0100               	movlb	0	; () banked
 22473  01196E  5160               	movf	?___wmul& (0+255),w,b
 22474  011970  2766               	addwf	??_Create_Maze& (0+255),f,b
 22475  011972  5161               	movf	(?___wmul+1)& (0+255),w,b
 22476  011974  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22477  011976  0E05               	movlw	5
 22478  011978  2566               	addwf	??_Create_Maze& (0+255),w,b
 22479  01197A  6ED9               	movwf	fsr2l,c
 22480  01197C  0E00               	movlw	0
 22481  01197E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22482  011980  6EDA               	movwf	fsr2h,c
 22483  011982  0E01               	movlw	1
 22484  011984  6EDF               	movwf	indf2,c
 22485                           
 22486                           ; BSR set to: 0
 22487                           ;dans.c: 134: maze[x][y].walls[2] = 0;
 22488  011986  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22489  01198A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22490  01198E  0E00               	movlw	0
 22491  011990  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22492  011992  0E32               	movlw	50
 22493  011994  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22494  011996  EC33  F0C4         	call	___wmul	;wreg free
 22495  01199A  0E00               	movlw	low _maze
 22496  01199C  0100               	movlb	0	; () banked
 22497  01199E  6F66               	movwf	??_Create_Maze& (0+255),b
 22498  0119A0  0E02               	movlw	high _maze
 22499  0119A2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22500  0119A4  5160               	movf	?___wmul& (0+255),w,b
 22501  0119A6  2766               	addwf	??_Create_Maze& (0+255),f,b
 22502  0119A8  5161               	movf	(?___wmul+1)& (0+255),w,b
 22503  0119AA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22504  0119AC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22505  0119B0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22506  0119B4  0E00               	movlw	0
 22507  0119B6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22508  0119B8  0E0A               	movlw	10
 22509  0119BA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22510  0119BC  EC33  F0C4         	call	___wmul	;wreg free
 22511  0119C0  0100               	movlb	0	; () banked
 22512  0119C2  5160               	movf	?___wmul& (0+255),w,b
 22513  0119C4  2766               	addwf	??_Create_Maze& (0+255),f,b
 22514  0119C6  5161               	movf	(?___wmul+1)& (0+255),w,b
 22515  0119C8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22516  0119CA  0E06               	movlw	6
 22517  0119CC  2566               	addwf	??_Create_Maze& (0+255),w,b
 22518  0119CE  6ED9               	movwf	fsr2l,c
 22519  0119D0  0E00               	movlw	0
 22520  0119D2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22521  0119D4  6EDA               	movwf	fsr2h,c
 22522  0119D6  0E00               	movlw	0
 22523  0119D8  6EDF               	movwf	indf2,c
 22524                           
 22525                           ; BSR set to: 0
 22526                           ;dans.c: 135: maze[x][y].walls[3] = 0;
 22527  0119DA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22528  0119DE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22529  0119E2  0E00               	movlw	0
 22530  0119E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22531  0119E6  0E32               	movlw	50
 22532  0119E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22533  0119EA  EC33  F0C4         	call	___wmul	;wreg free
 22534  0119EE  0E00               	movlw	low _maze
 22535  0119F0  0100               	movlb	0	; () banked
 22536  0119F2  6F66               	movwf	??_Create_Maze& (0+255),b
 22537  0119F4  0E02               	movlw	high _maze
 22538  0119F6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22539  0119F8  5160               	movf	?___wmul& (0+255),w,b
 22540  0119FA  2766               	addwf	??_Create_Maze& (0+255),f,b
 22541  0119FC  5161               	movf	(?___wmul+1)& (0+255),w,b
 22542  0119FE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22543  011A00  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22544  011A04  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22545  011A08  0E00               	movlw	0
 22546  011A0A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22547  011A0C  0E0A               	movlw	10
 22548  011A0E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22549  011A10  EC33  F0C4         	call	___wmul	;wreg free
 22550  011A14  0100               	movlb	0	; () banked
 22551  011A16  5160               	movf	?___wmul& (0+255),w,b
 22552  011A18  2766               	addwf	??_Create_Maze& (0+255),f,b
 22553  011A1A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22554  011A1C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22555  011A1E  0E07               	movlw	7
 22556  011A20  2566               	addwf	??_Create_Maze& (0+255),w,b
 22557  011A22  6ED9               	movwf	fsr2l,c
 22558  011A24  0E00               	movlw	0
 22559  011A26  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22560  011A28  6EDA               	movwf	fsr2h,c
 22561  011A2A  0E00               	movlw	0
 22562  011A2C  6EDF               	movwf	indf2,c
 22563                           
 22564                           ; BSR set to: 0
 22565                           ;dans.c: 136: maze[x][y].Options = 2;
 22566  011A2E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22567  011A32  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22568  011A36  0E00               	movlw	0
 22569  011A38  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22570  011A3A  0E32               	movlw	50
 22571  011A3C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22572  011A3E  EC33  F0C4         	call	___wmul	;wreg free
 22573  011A42  0E00               	movlw	low _maze
 22574  011A44  0100               	movlb	0	; () banked
 22575  011A46  6F66               	movwf	??_Create_Maze& (0+255),b
 22576  011A48  0E02               	movlw	high _maze
 22577  011A4A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22578  011A4C  5160               	movf	?___wmul& (0+255),w,b
 22579  011A4E  2766               	addwf	??_Create_Maze& (0+255),f,b
 22580  011A50  5161               	movf	(?___wmul+1)& (0+255),w,b
 22581  011A52  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22582  011A54  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22583  011A58  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22584  011A5C  0E00               	movlw	0
 22585  011A5E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22586  011A60  0E0A               	movlw	10
 22587  011A62  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22588  011A64  EC33  F0C4         	call	___wmul	;wreg free
 22589  011A68  0100               	movlb	0	; () banked
 22590  011A6A  5160               	movf	?___wmul& (0+255),w,b
 22591  011A6C  2766               	addwf	??_Create_Maze& (0+255),f,b
 22592  011A6E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22593  011A70  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22594  011A72  0E08               	movlw	8
 22595  011A74  2566               	addwf	??_Create_Maze& (0+255),w,b
 22596  011A76  6ED9               	movwf	fsr2l,c
 22597  011A78  0E00               	movlw	0
 22598  011A7A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22599  011A7C  6EDA               	movwf	fsr2h,c
 22600  011A7E  0E02               	movlw	2
 22601  011A80  6EDE               	movwf	postinc2,c
 22602  011A82  0E00               	movlw	0
 22603  011A84  6EDD               	movwf	postdec2,c
 22604                           
 22605                           ; BSR set to: 0
 22606                           ;dans.c: 138: ++x;
 22607  011A86  4B6C               	infsnz	Create_Maze@x& (0+255),f,b
 22608  011A88  2B6D               	incf	(Create_Maze@x+1)& (0+255),f,b
 22609                           
 22610                           ; BSR set to: 0
 22611                           ;dans.c: 139: y=0;
 22612  011A8A  0E00               	movlw	0
 22613  011A8C  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 22614  011A8E  0E00               	movlw	0
 22615  011A90  6F6E               	movwf	Create_Maze@y& (0+255),b
 22616                           
 22617                           ; BSR set to: 0
 22618                           ;dans.c: 140: maze[x][y].walls[0] = 0;
 22619  011A92  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22620  011A96  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22621  011A9A  0E00               	movlw	0
 22622  011A9C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22623  011A9E  0E32               	movlw	50
 22624  011AA0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22625  011AA2  EC33  F0C4         	call	___wmul	;wreg free
 22626  011AA6  0E00               	movlw	low _maze
 22627  011AA8  0100               	movlb	0	; () banked
 22628  011AAA  6F66               	movwf	??_Create_Maze& (0+255),b
 22629  011AAC  0E02               	movlw	high _maze
 22630  011AAE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22631  011AB0  5160               	movf	?___wmul& (0+255),w,b
 22632  011AB2  2766               	addwf	??_Create_Maze& (0+255),f,b
 22633  011AB4  5161               	movf	(?___wmul+1)& (0+255),w,b
 22634  011AB6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22635  011AB8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22636  011ABC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22637  011AC0  0E00               	movlw	0
 22638  011AC2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22639  011AC4  0E0A               	movlw	10
 22640  011AC6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22641  011AC8  EC33  F0C4         	call	___wmul	;wreg free
 22642  011ACC  0100               	movlb	0	; () banked
 22643  011ACE  5160               	movf	?___wmul& (0+255),w,b
 22644  011AD0  2766               	addwf	??_Create_Maze& (0+255),f,b
 22645  011AD2  5161               	movf	(?___wmul+1)& (0+255),w,b
 22646  011AD4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22647  011AD6  0E04               	movlw	4
 22648  011AD8  2566               	addwf	??_Create_Maze& (0+255),w,b
 22649  011ADA  6ED9               	movwf	fsr2l,c
 22650  011ADC  0E00               	movlw	0
 22651  011ADE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22652  011AE0  6EDA               	movwf	fsr2h,c
 22653  011AE2  0E00               	movlw	0
 22654  011AE4  6EDF               	movwf	indf2,c
 22655                           
 22656                           ; BSR set to: 0
 22657                           ;dans.c: 141: maze[x][y].walls[1] = 0;
 22658  011AE6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22659  011AEA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22660  011AEE  0E00               	movlw	0
 22661  011AF0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22662  011AF2  0E32               	movlw	50
 22663  011AF4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22664  011AF6  EC33  F0C4         	call	___wmul	;wreg free
 22665  011AFA  0E00               	movlw	low _maze
 22666  011AFC  0100               	movlb	0	; () banked
 22667  011AFE  6F66               	movwf	??_Create_Maze& (0+255),b
 22668  011B00  0E02               	movlw	high _maze
 22669  011B02  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22670  011B04  5160               	movf	?___wmul& (0+255),w,b
 22671  011B06  2766               	addwf	??_Create_Maze& (0+255),f,b
 22672  011B08  5161               	movf	(?___wmul+1)& (0+255),w,b
 22673  011B0A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22674  011B0C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22675  011B10  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22676  011B14  0E00               	movlw	0
 22677  011B16  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22678  011B18  0E0A               	movlw	10
 22679  011B1A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22680  011B1C  EC33  F0C4         	call	___wmul	;wreg free
 22681  011B20  0100               	movlb	0	; () banked
 22682  011B22  5160               	movf	?___wmul& (0+255),w,b
 22683  011B24  2766               	addwf	??_Create_Maze& (0+255),f,b
 22684  011B26  5161               	movf	(?___wmul+1)& (0+255),w,b
 22685  011B28  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22686  011B2A  0E05               	movlw	5
 22687  011B2C  2566               	addwf	??_Create_Maze& (0+255),w,b
 22688  011B2E  6ED9               	movwf	fsr2l,c
 22689  011B30  0E00               	movlw	0
 22690  011B32  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22691  011B34  6EDA               	movwf	fsr2h,c
 22692  011B36  0E00               	movlw	0
 22693  011B38  6EDF               	movwf	indf2,c
 22694                           
 22695                           ; BSR set to: 0
 22696                           ;dans.c: 142: maze[x][y].walls[2] = 1;
 22697  011B3A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22698  011B3E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22699  011B42  0E00               	movlw	0
 22700  011B44  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22701  011B46  0E32               	movlw	50
 22702  011B48  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22703  011B4A  EC33  F0C4         	call	___wmul	;wreg free
 22704  011B4E  0E00               	movlw	low _maze
 22705  011B50  0100               	movlb	0	; () banked
 22706  011B52  6F66               	movwf	??_Create_Maze& (0+255),b
 22707  011B54  0E02               	movlw	high _maze
 22708  011B56  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22709  011B58  5160               	movf	?___wmul& (0+255),w,b
 22710  011B5A  2766               	addwf	??_Create_Maze& (0+255),f,b
 22711  011B5C  5161               	movf	(?___wmul+1)& (0+255),w,b
 22712  011B5E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22713  011B60  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22714  011B64  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22715  011B68  0E00               	movlw	0
 22716  011B6A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22717  011B6C  0E0A               	movlw	10
 22718  011B6E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22719  011B70  EC33  F0C4         	call	___wmul	;wreg free
 22720  011B74  0100               	movlb	0	; () banked
 22721  011B76  5160               	movf	?___wmul& (0+255),w,b
 22722  011B78  2766               	addwf	??_Create_Maze& (0+255),f,b
 22723  011B7A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22724  011B7C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22725  011B7E  0E06               	movlw	6
 22726  011B80  2566               	addwf	??_Create_Maze& (0+255),w,b
 22727  011B82  6ED9               	movwf	fsr2l,c
 22728  011B84  0E00               	movlw	0
 22729  011B86  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22730  011B88  6EDA               	movwf	fsr2h,c
 22731  011B8A  0E01               	movlw	1
 22732  011B8C  6EDF               	movwf	indf2,c
 22733                           
 22734                           ; BSR set to: 0
 22735                           ;dans.c: 143: maze[x][y].walls[3] = 1;
 22736  011B8E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22737  011B92  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22738  011B96  0E00               	movlw	0
 22739  011B98  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22740  011B9A  0E32               	movlw	50
 22741  011B9C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22742  011B9E  EC33  F0C4         	call	___wmul	;wreg free
 22743  011BA2  0E00               	movlw	low _maze
 22744  011BA4  0100               	movlb	0	; () banked
 22745  011BA6  6F66               	movwf	??_Create_Maze& (0+255),b
 22746  011BA8  0E02               	movlw	high _maze
 22747  011BAA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22748  011BAC  5160               	movf	?___wmul& (0+255),w,b
 22749  011BAE  2766               	addwf	??_Create_Maze& (0+255),f,b
 22750  011BB0  5161               	movf	(?___wmul+1)& (0+255),w,b
 22751  011BB2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22752  011BB4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22753  011BB8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22754  011BBC  0E00               	movlw	0
 22755  011BBE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22756  011BC0  0E0A               	movlw	10
 22757  011BC2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22758  011BC4  EC33  F0C4         	call	___wmul	;wreg free
 22759  011BC8  0100               	movlb	0	; () banked
 22760  011BCA  5160               	movf	?___wmul& (0+255),w,b
 22761  011BCC  2766               	addwf	??_Create_Maze& (0+255),f,b
 22762  011BCE  5161               	movf	(?___wmul+1)& (0+255),w,b
 22763  011BD0  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22764  011BD2  0E07               	movlw	7
 22765  011BD4  2566               	addwf	??_Create_Maze& (0+255),w,b
 22766  011BD6  6ED9               	movwf	fsr2l,c
 22767  011BD8  0E00               	movlw	0
 22768  011BDA  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22769  011BDC  6EDA               	movwf	fsr2h,c
 22770  011BDE  0E01               	movlw	1
 22771  011BE0  6EDF               	movwf	indf2,c
 22772                           
 22773                           ; BSR set to: 0
 22774                           ;dans.c: 144: maze[x][y].Options = 2;
 22775  011BE2  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22776  011BE6  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22777  011BEA  0E00               	movlw	0
 22778  011BEC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22779  011BEE  0E32               	movlw	50
 22780  011BF0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22781  011BF2  EC33  F0C4         	call	___wmul	;wreg free
 22782  011BF6  0E00               	movlw	low _maze
 22783  011BF8  0100               	movlb	0	; () banked
 22784  011BFA  6F66               	movwf	??_Create_Maze& (0+255),b
 22785  011BFC  0E02               	movlw	high _maze
 22786  011BFE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22787  011C00  5160               	movf	?___wmul& (0+255),w,b
 22788  011C02  2766               	addwf	??_Create_Maze& (0+255),f,b
 22789  011C04  5161               	movf	(?___wmul+1)& (0+255),w,b
 22790  011C06  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22791  011C08  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22792  011C0C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22793  011C10  0E00               	movlw	0
 22794  011C12  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22795  011C14  0E0A               	movlw	10
 22796  011C16  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22797  011C18  EC33  F0C4         	call	___wmul	;wreg free
 22798  011C1C  0100               	movlb	0	; () banked
 22799  011C1E  5160               	movf	?___wmul& (0+255),w,b
 22800  011C20  2766               	addwf	??_Create_Maze& (0+255),f,b
 22801  011C22  5161               	movf	(?___wmul+1)& (0+255),w,b
 22802  011C24  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22803  011C26  0E08               	movlw	8
 22804  011C28  2566               	addwf	??_Create_Maze& (0+255),w,b
 22805  011C2A  6ED9               	movwf	fsr2l,c
 22806  011C2C  0E00               	movlw	0
 22807  011C2E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22808  011C30  6EDA               	movwf	fsr2h,c
 22809  011C32  0E02               	movlw	2
 22810  011C34  6EDE               	movwf	postinc2,c
 22811  011C36  0E00               	movlw	0
 22812  011C38  6EDD               	movwf	postdec2,c
 22813                           
 22814                           ; BSR set to: 0
 22815                           ;dans.c: 146: ++y;
 22816  011C3A  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 22817  011C3C  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 22818                           
 22819                           ;dans.c: 147: maze[x][y].walls[0] = 1;
 22820  011C3E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22821  011C42  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22822  011C46  0E00               	movlw	0
 22823  011C48  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22824  011C4A  0E32               	movlw	50
 22825  011C4C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22826  011C4E  EC33  F0C4         	call	___wmul	;wreg free
 22827  011C52  0E00               	movlw	low _maze
 22828  011C54  0100               	movlb	0	; () banked
 22829  011C56  6F66               	movwf	??_Create_Maze& (0+255),b
 22830  011C58  0E02               	movlw	high _maze
 22831  011C5A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22832  011C5C  5160               	movf	?___wmul& (0+255),w,b
 22833  011C5E  2766               	addwf	??_Create_Maze& (0+255),f,b
 22834  011C60  5161               	movf	(?___wmul+1)& (0+255),w,b
 22835  011C62  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22836  011C64  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22837  011C68  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22838  011C6C  0E00               	movlw	0
 22839  011C6E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22840  011C70  0E0A               	movlw	10
 22841  011C72  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22842  011C74  EC33  F0C4         	call	___wmul	;wreg free
 22843  011C78  0100               	movlb	0	; () banked
 22844  011C7A  5160               	movf	?___wmul& (0+255),w,b
 22845  011C7C  2766               	addwf	??_Create_Maze& (0+255),f,b
 22846  011C7E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22847  011C80  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22848  011C82  0E04               	movlw	4
 22849  011C84  2566               	addwf	??_Create_Maze& (0+255),w,b
 22850  011C86  6ED9               	movwf	fsr2l,c
 22851  011C88  0E00               	movlw	0
 22852  011C8A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22853  011C8C  6EDA               	movwf	fsr2h,c
 22854  011C8E  0E01               	movlw	1
 22855  011C90  6EDF               	movwf	indf2,c
 22856                           
 22857                           ;dans.c: 148: maze[x][y].walls[1] = 1;
 22858  011C92  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22859  011C96  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22860  011C9A  0E00               	movlw	0
 22861  011C9C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22862  011C9E  0E32               	movlw	50
 22863  011CA0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22864  011CA2  EC33  F0C4         	call	___wmul	;wreg free
 22865  011CA6  0E00               	movlw	low _maze
 22866  011CA8  0100               	movlb	0	; () banked
 22867  011CAA  6F66               	movwf	??_Create_Maze& (0+255),b
 22868  011CAC  0E02               	movlw	high _maze
 22869  011CAE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22870  011CB0  5160               	movf	?___wmul& (0+255),w,b
 22871  011CB2  2766               	addwf	??_Create_Maze& (0+255),f,b
 22872  011CB4  5161               	movf	(?___wmul+1)& (0+255),w,b
 22873  011CB6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22874  011CB8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22875  011CBC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22876  011CC0  0E00               	movlw	0
 22877  011CC2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22878  011CC4  0E0A               	movlw	10
 22879  011CC6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22880  011CC8  EC33  F0C4         	call	___wmul	;wreg free
 22881  011CCC  0100               	movlb	0	; () banked
 22882  011CCE  5160               	movf	?___wmul& (0+255),w,b
 22883  011CD0  2766               	addwf	??_Create_Maze& (0+255),f,b
 22884  011CD2  5161               	movf	(?___wmul+1)& (0+255),w,b
 22885  011CD4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22886  011CD6  0E05               	movlw	5
 22887  011CD8  2566               	addwf	??_Create_Maze& (0+255),w,b
 22888  011CDA  6ED9               	movwf	fsr2l,c
 22889  011CDC  0E00               	movlw	0
 22890  011CDE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22891  011CE0  6EDA               	movwf	fsr2h,c
 22892  011CE2  0E01               	movlw	1
 22893  011CE4  6EDF               	movwf	indf2,c
 22894                           
 22895                           ;dans.c: 149: maze[x][y].walls[2] = 1;
 22896  011CE6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22897  011CEA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22898  011CEE  0E00               	movlw	0
 22899  011CF0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22900  011CF2  0E32               	movlw	50
 22901  011CF4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22902  011CF6  EC33  F0C4         	call	___wmul	;wreg free
 22903  011CFA  0E00               	movlw	low _maze
 22904  011CFC  0100               	movlb	0	; () banked
 22905  011CFE  6F66               	movwf	??_Create_Maze& (0+255),b
 22906  011D00  0E02               	movlw	high _maze
 22907  011D02  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22908  011D04  5160               	movf	?___wmul& (0+255),w,b
 22909  011D06  2766               	addwf	??_Create_Maze& (0+255),f,b
 22910  011D08  5161               	movf	(?___wmul+1)& (0+255),w,b
 22911  011D0A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22912  011D0C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22913  011D10  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22914  011D14  0E00               	movlw	0
 22915  011D16  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22916  011D18  0E0A               	movlw	10
 22917  011D1A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22918  011D1C  EC33  F0C4         	call	___wmul	;wreg free
 22919  011D20  0100               	movlb	0	; () banked
 22920  011D22  5160               	movf	?___wmul& (0+255),w,b
 22921  011D24  2766               	addwf	??_Create_Maze& (0+255),f,b
 22922  011D26  5161               	movf	(?___wmul+1)& (0+255),w,b
 22923  011D28  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22924  011D2A  0E06               	movlw	6
 22925  011D2C  2566               	addwf	??_Create_Maze& (0+255),w,b
 22926  011D2E  6ED9               	movwf	fsr2l,c
 22927  011D30  0E00               	movlw	0
 22928  011D32  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22929  011D34  6EDA               	movwf	fsr2h,c
 22930  011D36  0E01               	movlw	1
 22931  011D38  6EDF               	movwf	indf2,c
 22932                           
 22933                           ;dans.c: 150: maze[x][y].walls[3] = 0;
 22934  011D3A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22935  011D3E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22936  011D42  0E00               	movlw	0
 22937  011D44  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22938  011D46  0E32               	movlw	50
 22939  011D48  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22940  011D4A  EC33  F0C4         	call	___wmul	;wreg free
 22941  011D4E  0E00               	movlw	low _maze
 22942  011D50  0100               	movlb	0	; () banked
 22943  011D52  6F66               	movwf	??_Create_Maze& (0+255),b
 22944  011D54  0E02               	movlw	high _maze
 22945  011D56  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22946  011D58  5160               	movf	?___wmul& (0+255),w,b
 22947  011D5A  2766               	addwf	??_Create_Maze& (0+255),f,b
 22948  011D5C  5161               	movf	(?___wmul+1)& (0+255),w,b
 22949  011D5E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22950  011D60  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22951  011D64  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22952  011D68  0E00               	movlw	0
 22953  011D6A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22954  011D6C  0E0A               	movlw	10
 22955  011D6E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22956  011D70  EC33  F0C4         	call	___wmul	;wreg free
 22957  011D74  0100               	movlb	0	; () banked
 22958  011D76  5160               	movf	?___wmul& (0+255),w,b
 22959  011D78  2766               	addwf	??_Create_Maze& (0+255),f,b
 22960  011D7A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22961  011D7C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22962  011D7E  0E07               	movlw	7
 22963  011D80  2566               	addwf	??_Create_Maze& (0+255),w,b
 22964  011D82  6ED9               	movwf	fsr2l,c
 22965  011D84  0E00               	movlw	0
 22966  011D86  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22967  011D88  6EDA               	movwf	fsr2h,c
 22968  011D8A  0E00               	movlw	0
 22969  011D8C  6EDF               	movwf	indf2,c
 22970                           
 22971                           ;dans.c: 151: maze[x][y].Options = 1;
 22972  011D8E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22973  011D92  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22974  011D96  0E00               	movlw	0
 22975  011D98  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22976  011D9A  0E32               	movlw	50
 22977  011D9C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22978  011D9E  EC33  F0C4         	call	___wmul	;wreg free
 22979  011DA2  0E00               	movlw	low _maze
 22980  011DA4  0100               	movlb	0	; () banked
 22981  011DA6  6F66               	movwf	??_Create_Maze& (0+255),b
 22982  011DA8  0E02               	movlw	high _maze
 22983  011DAA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22984  011DAC  5160               	movf	?___wmul& (0+255),w,b
 22985  011DAE  2766               	addwf	??_Create_Maze& (0+255),f,b
 22986  011DB0  5161               	movf	(?___wmul+1)& (0+255),w,b
 22987  011DB2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22988  011DB4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22989  011DB8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22990  011DBC  0E00               	movlw	0
 22991  011DBE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22992  011DC0  0E0A               	movlw	10
 22993  011DC2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22994  011DC4  EC33  F0C4         	call	___wmul	;wreg free
 22995  011DC8  0100               	movlb	0	; () banked
 22996  011DCA  5160               	movf	?___wmul& (0+255),w,b
 22997  011DCC  2766               	addwf	??_Create_Maze& (0+255),f,b
 22998  011DCE  5161               	movf	(?___wmul+1)& (0+255),w,b
 22999  011DD0  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23000  011DD2  0E08               	movlw	8
 23001  011DD4  2566               	addwf	??_Create_Maze& (0+255),w,b
 23002  011DD6  6ED9               	movwf	fsr2l,c
 23003  011DD8  0E00               	movlw	0
 23004  011DDA  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23005  011DDC  6EDA               	movwf	fsr2h,c
 23006  011DDE  0E01               	movlw	1
 23007  011DE0  6EDE               	movwf	postinc2,c
 23008  011DE2  0E00               	movlw	0
 23009  011DE4  6EDD               	movwf	postdec2,c
 23010                           
 23011                           ; BSR set to: 0
 23012                           ;dans.c: 153: ++y;
 23013  011DE6  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 23014  011DE8  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 23015                           
 23016                           ; BSR set to: 0
 23017                           ;dans.c: 154: maze[x][y].walls[0] = 0;
 23018  011DEA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23019  011DEE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23020  011DF2  0E00               	movlw	0
 23021  011DF4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23022  011DF6  0E32               	movlw	50
 23023  011DF8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23024  011DFA  EC33  F0C4         	call	___wmul	;wreg free
 23025  011DFE  0E00               	movlw	low _maze
 23026  011E00  0100               	movlb	0	; () banked
 23027  011E02  6F66               	movwf	??_Create_Maze& (0+255),b
 23028  011E04  0E02               	movlw	high _maze
 23029  011E06  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23030  011E08  5160               	movf	?___wmul& (0+255),w,b
 23031  011E0A  2766               	addwf	??_Create_Maze& (0+255),f,b
 23032  011E0C  5161               	movf	(?___wmul+1)& (0+255),w,b
 23033  011E0E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23034  011E10  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23035  011E14  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23036  011E18  0E00               	movlw	0
 23037  011E1A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23038  011E1C  0E0A               	movlw	10
 23039  011E1E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23040  011E20  EC33  F0C4         	call	___wmul	;wreg free
 23041  011E24  0100               	movlb	0	; () banked
 23042  011E26  5160               	movf	?___wmul& (0+255),w,b
 23043  011E28  2766               	addwf	??_Create_Maze& (0+255),f,b
 23044  011E2A  5161               	movf	(?___wmul+1)& (0+255),w,b
 23045  011E2C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23046  011E2E  0E04               	movlw	4
 23047  011E30  2566               	addwf	??_Create_Maze& (0+255),w,b
 23048  011E32  6ED9               	movwf	fsr2l,c
 23049  011E34  0E00               	movlw	0
 23050  011E36  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23051  011E38  6EDA               	movwf	fsr2h,c
 23052  011E3A  0E00               	movlw	0
 23053  011E3C  6EDF               	movwf	indf2,c
 23054                           
 23055                           ; BSR set to: 0
 23056                           ;dans.c: 155: maze[x][y].walls[1] = 1;
 23057  011E3E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23058  011E42  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23059  011E46  0E00               	movlw	0
 23060  011E48  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23061  011E4A  0E32               	movlw	50
 23062  011E4C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23063  011E4E  EC33  F0C4         	call	___wmul	;wreg free
 23064  011E52  0E00               	movlw	low _maze
 23065  011E54  0100               	movlb	0	; () banked
 23066  011E56  6F66               	movwf	??_Create_Maze& (0+255),b
 23067  011E58  0E02               	movlw	high _maze
 23068  011E5A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23069  011E5C  5160               	movf	?___wmul& (0+255),w,b
 23070  011E5E  2766               	addwf	??_Create_Maze& (0+255),f,b
 23071  011E60  5161               	movf	(?___wmul+1)& (0+255),w,b
 23072  011E62  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23073  011E64  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23074  011E68  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23075  011E6C  0E00               	movlw	0
 23076  011E6E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23077  011E70  0E0A               	movlw	10
 23078  011E72  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23079  011E74  EC33  F0C4         	call	___wmul	;wreg free
 23080  011E78  0100               	movlb	0	; () banked
 23081  011E7A  5160               	movf	?___wmul& (0+255),w,b
 23082  011E7C  2766               	addwf	??_Create_Maze& (0+255),f,b
 23083  011E7E  5161               	movf	(?___wmul+1)& (0+255),w,b
 23084  011E80  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23085  011E82  0E05               	movlw	5
 23086  011E84  2566               	addwf	??_Create_Maze& (0+255),w,b
 23087  011E86  6ED9               	movwf	fsr2l,c
 23088  011E88  0E00               	movlw	0
 23089  011E8A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23090  011E8C  6EDA               	movwf	fsr2h,c
 23091  011E8E  0E01               	movlw	1
 23092  011E90  6EDF               	movwf	indf2,c
 23093                           
 23094                           ; BSR set to: 0
 23095                           ;dans.c: 156: maze[x][y].walls[2] = 1;
 23096  011E92  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23097  011E96  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23098  011E9A  0E00               	movlw	0
 23099  011E9C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23100  011E9E  0E32               	movlw	50
 23101  011EA0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23102  011EA2  EC33  F0C4         	call	___wmul	;wreg free
 23103  011EA6  0E00               	movlw	low _maze
 23104  011EA8  0100               	movlb	0	; () banked
 23105  011EAA  6F66               	movwf	??_Create_Maze& (0+255),b
 23106  011EAC  0E02               	movlw	high _maze
 23107  011EAE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23108  011EB0  5160               	movf	?___wmul& (0+255),w,b
 23109  011EB2  2766               	addwf	??_Create_Maze& (0+255),f,b
 23110  011EB4  5161               	movf	(?___wmul+1)& (0+255),w,b
 23111  011EB6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23112  011EB8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23113  011EBC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23114  011EC0  0E00               	movlw	0
 23115  011EC2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23116  011EC4  0E0A               	movlw	10
 23117  011EC6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23118  011EC8  EC33  F0C4         	call	___wmul	;wreg free
 23119  011ECC  0100               	movlb	0	; () banked
 23120  011ECE  5160               	movf	?___wmul& (0+255),w,b
 23121  011ED0  2766               	addwf	??_Create_Maze& (0+255),f,b
 23122  011ED2  5161               	movf	(?___wmul+1)& (0+255),w,b
 23123  011ED4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23124  011ED6  0E06               	movlw	6
 23125  011ED8  2566               	addwf	??_Create_Maze& (0+255),w,b
 23126  011EDA  6ED9               	movwf	fsr2l,c
 23127  011EDC  0E00               	movlw	0
 23128  011EDE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23129  011EE0  6EDA               	movwf	fsr2h,c
 23130  011EE2  0E01               	movlw	1
 23131  011EE4  6EDF               	movwf	indf2,c
 23132                           
 23133                           ; BSR set to: 0
 23134                           ;dans.c: 157: maze[x][y].walls[3] = 1;
 23135  011EE6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23136  011EEA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23137  011EEE  0E00               	movlw	0
 23138  011EF0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23139  011EF2  0E32               	movlw	50
 23140  011EF4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23141  011EF6  EC33  F0C4         	call	___wmul	;wreg free
 23142  011EFA  0E00               	movlw	low _maze
 23143  011EFC  0100               	movlb	0	; () banked
 23144  011EFE  6F66               	movwf	??_Create_Maze& (0+255),b
 23145  011F00  0E02               	movlw	high _maze
 23146  011F02  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23147  011F04  5160               	movf	?___wmul& (0+255),w,b
 23148  011F06  2766               	addwf	??_Create_Maze& (0+255),f,b
 23149  011F08  5161               	movf	(?___wmul+1)& (0+255),w,b
 23150  011F0A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23151  011F0C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23152  011F10  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23153  011F14  0E00               	movlw	0
 23154  011F16  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23155  011F18  0E0A               	movlw	10
 23156  011F1A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23157  011F1C  EC33  F0C4         	call	___wmul	;wreg free
 23158  011F20  0100               	movlb	0	; () banked
 23159  011F22  5160               	movf	?___wmul& (0+255),w,b
 23160  011F24  2766               	addwf	??_Create_Maze& (0+255),f,b
 23161  011F26  5161               	movf	(?___wmul+1)& (0+255),w,b
 23162  011F28  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23163  011F2A  0E07               	movlw	7
 23164  011F2C  2566               	addwf	??_Create_Maze& (0+255),w,b
 23165  011F2E  6ED9               	movwf	fsr2l,c
 23166  011F30  0E00               	movlw	0
 23167  011F32  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23168  011F34  6EDA               	movwf	fsr2h,c
 23169  011F36  0E01               	movlw	1
 23170  011F38  6EDF               	movwf	indf2,c
 23171                           
 23172                           ; BSR set to: 0
 23173                           ;dans.c: 158: maze[x][y].Options = 1;
 23174  011F3A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23175  011F3E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23176  011F42  0E00               	movlw	0
 23177  011F44  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23178  011F46  0E32               	movlw	50
 23179  011F48  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23180  011F4A  EC33  F0C4         	call	___wmul	;wreg free
 23181  011F4E  0E00               	movlw	low _maze
 23182  011F50  0100               	movlb	0	; () banked
 23183  011F52  6F66               	movwf	??_Create_Maze& (0+255),b
 23184  011F54  0E02               	movlw	high _maze
 23185  011F56  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23186  011F58  5160               	movf	?___wmul& (0+255),w,b
 23187  011F5A  2766               	addwf	??_Create_Maze& (0+255),f,b
 23188  011F5C  5161               	movf	(?___wmul+1)& (0+255),w,b
 23189  011F5E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23190  011F60  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23191  011F64  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23192  011F68  0E00               	movlw	0
 23193  011F6A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23194  011F6C  0E0A               	movlw	10
 23195  011F6E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23196  011F70  EC33  F0C4         	call	___wmul	;wreg free
 23197  011F74  0100               	movlb	0	; () banked
 23198  011F76  5160               	movf	?___wmul& (0+255),w,b
 23199  011F78  2766               	addwf	??_Create_Maze& (0+255),f,b
 23200  011F7A  5161               	movf	(?___wmul+1)& (0+255),w,b
 23201  011F7C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23202  011F7E  0E08               	movlw	8
 23203  011F80  2566               	addwf	??_Create_Maze& (0+255),w,b
 23204  011F82  6ED9               	movwf	fsr2l,c
 23205  011F84  0E00               	movlw	0
 23206  011F86  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23207  011F88  6EDA               	movwf	fsr2h,c
 23208  011F8A  0E01               	movlw	1
 23209  011F8C  6EDE               	movwf	postinc2,c
 23210  011F8E  0E00               	movlw	0
 23211  011F90  6EDD               	movwf	postdec2,c
 23212                           
 23213                           ;dans.c: 160: ++y;
 23214  011F92  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 23215  011F94  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 23216                           
 23217                           ; BSR set to: 0
 23218                           ;dans.c: 161: maze[x][y].walls[0] = 1;
 23219  011F96  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23220  011F9A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23221  011F9E  0E00               	movlw	0
 23222  011FA0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23223  011FA2  0E32               	movlw	50
 23224  011FA4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23225  011FA6  EC33  F0C4         	call	___wmul	;wreg free
 23226  011FAA  0E00               	movlw	low _maze
 23227  011FAC  0100               	movlb	0	; () banked
 23228  011FAE  6F66               	movwf	??_Create_Maze& (0+255),b
 23229  011FB0  0E02               	movlw	high _maze
 23230  011FB2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23231  011FB4  5160               	movf	?___wmul& (0+255),w,b
 23232  011FB6  2766               	addwf	??_Create_Maze& (0+255),f,b
 23233  011FB8  5161               	movf	(?___wmul+1)& (0+255),w,b
 23234  011FBA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23235  011FBC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23236  011FC0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23237  011FC4  0E00               	movlw	0
 23238  011FC6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23239  011FC8  0E0A               	movlw	10
 23240  011FCA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23241  011FCC  EC33  F0C4         	call	___wmul	;wreg free
 23242  011FD0  0100               	movlb	0	; () banked
 23243  011FD2  5160               	movf	?___wmul& (0+255),w,b
 23244  011FD4  2766               	addwf	??_Create_Maze& (0+255),f,b
 23245  011FD6  5161               	movf	(?___wmul+1)& (0+255),w,b
 23246  011FD8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23247  011FDA  0E04               	movlw	4
 23248  011FDC  2566               	addwf	??_Create_Maze& (0+255),w,b
 23249  011FDE  6ED9               	movwf	fsr2l,c
 23250  011FE0  0E00               	movlw	0
 23251  011FE2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23252  011FE4  6EDA               	movwf	fsr2h,c
 23253  011FE6  0E01               	movlw	1
 23254  011FE8  6EDF               	movwf	indf2,c
 23255                           
 23256                           ; BSR set to: 0
 23257                           ;dans.c: 162: maze[x][y].walls[1] = 0;
 23258  011FEA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23259  011FEE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23260  011FF2  0E00               	movlw	0
 23261  011FF4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23262  011FF6  0E32               	movlw	50
 23263  011FF8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23264  011FFA  EC33  F0C4         	call	___wmul	;wreg free
 23265  011FFE  0E00               	movlw	low _maze
 23266  012000  0100               	movlb	0	; () banked
 23267  012002  6F66               	movwf	??_Create_Maze& (0+255),b
 23268  012004  0E02               	movlw	high _maze
 23269  012006  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23270  012008  5160               	movf	?___wmul& (0+255),w,b
 23271  01200A  2766               	addwf	??_Create_Maze& (0+255),f,b
 23272  01200C  5161               	movf	(?___wmul+1)& (0+255),w,b
 23273  01200E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23274  012010  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23275  012014  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23276  012018  0E00               	movlw	0
 23277  01201A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23278  01201C  0E0A               	movlw	10
 23279  01201E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23280  012020  EC33  F0C4         	call	___wmul	;wreg free
 23281  012024  0100               	movlb	0	; () banked
 23282  012026  5160               	movf	?___wmul& (0+255),w,b
 23283  012028  2766               	addwf	??_Create_Maze& (0+255),f,b
 23284  01202A  5161               	movf	(?___wmul+1)& (0+255),w,b
 23285  01202C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23286  01202E  0E05               	movlw	5
 23287  012030  2566               	addwf	??_Create_Maze& (0+255),w,b
 23288  012032  6ED9               	movwf	fsr2l,c
 23289  012034  0E00               	movlw	0
 23290  012036  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23291  012038  6EDA               	movwf	fsr2h,c
 23292  01203A  0E00               	movlw	0
 23293  01203C  6EDF               	movwf	indf2,c
 23294                           
 23295                           ; BSR set to: 0
 23296                           ;dans.c: 163: maze[x][y].walls[2] = 1;
 23297  01203E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23298  012042  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23299  012046  0E00               	movlw	0
 23300  012048  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23301  01204A  0E32               	movlw	50
 23302  01204C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23303  01204E  EC33  F0C4         	call	___wmul	;wreg free
 23304  012052  0E00               	movlw	low _maze
 23305  012054  0100               	movlb	0	; () banked
 23306  012056  6F66               	movwf	??_Create_Maze& (0+255),b
 23307  012058  0E02               	movlw	high _maze
 23308  01205A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23309  01205C  5160               	movf	?___wmul& (0+255),w,b
 23310  01205E  2766               	addwf	??_Create_Maze& (0+255),f,b
 23311  012060  5161               	movf	(?___wmul+1)& (0+255),w,b
 23312  012062  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23313  012064  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23314  012068  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23315  01206C  0E00               	movlw	0
 23316  01206E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23317  012070  0E0A               	movlw	10
 23318  012072  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23319  012074  EC33  F0C4         	call	___wmul	;wreg free
 23320  012078  0100               	movlb	0	; () banked
 23321  01207A  5160               	movf	?___wmul& (0+255),w,b
 23322  01207C  2766               	addwf	??_Create_Maze& (0+255),f,b
 23323  01207E  5161               	movf	(?___wmul+1)& (0+255),w,b
 23324  012080  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23325  012082  0E06               	movlw	6
 23326  012084  2566               	addwf	??_Create_Maze& (0+255),w,b
 23327  012086  6ED9               	movwf	fsr2l,c
 23328  012088  0E00               	movlw	0
 23329  01208A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23330  01208C  6EDA               	movwf	fsr2h,c
 23331  01208E  0E01               	movlw	1
 23332  012090  6EDF               	movwf	indf2,c
 23333                           
 23334                           ; BSR set to: 0
 23335                           ;dans.c: 164: maze[x][y].walls[3] = 1;
 23336  012092  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23337  012096  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23338  01209A  0E00               	movlw	0
 23339  01209C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23340  01209E  0E32               	movlw	50
 23341  0120A0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23342  0120A2  EC33  F0C4         	call	___wmul	;wreg free
 23343  0120A6  0E00               	movlw	low _maze
 23344  0120A8  0100               	movlb	0	; () banked
 23345  0120AA  6F66               	movwf	??_Create_Maze& (0+255),b
 23346  0120AC  0E02               	movlw	high _maze
 23347  0120AE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23348  0120B0  5160               	movf	?___wmul& (0+255),w,b
 23349  0120B2  2766               	addwf	??_Create_Maze& (0+255),f,b
 23350  0120B4  5161               	movf	(?___wmul+1)& (0+255),w,b
 23351  0120B6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23352  0120B8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23353  0120BC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23354  0120C0  0E00               	movlw	0
 23355  0120C2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23356  0120C4  0E0A               	movlw	10
 23357  0120C6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23358  0120C8  EC33  F0C4         	call	___wmul	;wreg free
 23359  0120CC  0100               	movlb	0	; () banked
 23360  0120CE  5160               	movf	?___wmul& (0+255),w,b
 23361  0120D0  2766               	addwf	??_Create_Maze& (0+255),f,b
 23362  0120D2  5161               	movf	(?___wmul+1)& (0+255),w,b
 23363  0120D4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23364  0120D6  0E07               	movlw	7
 23365  0120D8  2566               	addwf	??_Create_Maze& (0+255),w,b
 23366  0120DA  6ED9               	movwf	fsr2l,c
 23367  0120DC  0E00               	movlw	0
 23368  0120DE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23369  0120E0  6EDA               	movwf	fsr2h,c
 23370  0120E2  0E01               	movlw	1
 23371  0120E4  6EDF               	movwf	indf2,c
 23372                           
 23373                           ; BSR set to: 0
 23374                           ;dans.c: 165: maze[x][y].Options = 1;
 23375  0120E6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23376  0120EA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23377  0120EE  0E00               	movlw	0
 23378  0120F0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23379  0120F2  0E32               	movlw	50
 23380  0120F4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23381  0120F6  EC33  F0C4         	call	___wmul	;wreg free
 23382  0120FA  0E00               	movlw	low _maze
 23383  0120FC  0100               	movlb	0	; () banked
 23384  0120FE  6F66               	movwf	??_Create_Maze& (0+255),b
 23385  012100  0E02               	movlw	high _maze
 23386  012102  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23387  012104  5160               	movf	?___wmul& (0+255),w,b
 23388  012106  2766               	addwf	??_Create_Maze& (0+255),f,b
 23389  012108  5161               	movf	(?___wmul+1)& (0+255),w,b
 23390  01210A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23391  01210C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23392  012110  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23393  012114  0E00               	movlw	0
 23394  012116  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23395  012118  0E0A               	movlw	10
 23396  01211A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23397  01211C  EC33  F0C4         	call	___wmul	;wreg free
 23398  012120  0100               	movlb	0	; () banked
 23399  012122  5160               	movf	?___wmul& (0+255),w,b
 23400  012124  2766               	addwf	??_Create_Maze& (0+255),f,b
 23401  012126  5161               	movf	(?___wmul+1)& (0+255),w,b
 23402  012128  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23403  01212A  0E08               	movlw	8
 23404  01212C  2566               	addwf	??_Create_Maze& (0+255),w,b
 23405  01212E  6ED9               	movwf	fsr2l,c
 23406  012130  0E00               	movlw	0
 23407  012132  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23408  012134  6EDA               	movwf	fsr2h,c
 23409  012136  0E01               	movlw	1
 23410  012138  6EDE               	movwf	postinc2,c
 23411  01213A  0E00               	movlw	0
 23412  01213C  6EDD               	movwf	postdec2,c
 23413                           
 23414                           ; BSR set to: 0
 23415                           ;dans.c: 167: ++y;
 23416  01213E  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 23417  012140  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 23418                           
 23419                           ;dans.c: 168: maze[x][y].walls[0] = 0;
 23420  012142  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23421  012146  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23422  01214A  0E00               	movlw	0
 23423  01214C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23424  01214E  0E32               	movlw	50
 23425  012150  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23426  012152  EC33  F0C4         	call	___wmul	;wreg free
 23427  012156  0E00               	movlw	low _maze
 23428  012158  0100               	movlb	0	; () banked
 23429  01215A  6F66               	movwf	??_Create_Maze& (0+255),b
 23430  01215C  0E02               	movlw	high _maze
 23431  01215E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23432  012160  5160               	movf	?___wmul& (0+255),w,b
 23433  012162  2766               	addwf	??_Create_Maze& (0+255),f,b
 23434  012164  5161               	movf	(?___wmul+1)& (0+255),w,b
 23435  012166  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23436  012168  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23437  01216C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23438  012170  0E00               	movlw	0
 23439  012172  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23440  012174  0E0A               	movlw	10
 23441  012176  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23442  012178  EC33  F0C4         	call	___wmul	;wreg free
 23443  01217C  0100               	movlb	0	; () banked
 23444  01217E  5160               	movf	?___wmul& (0+255),w,b
 23445  012180  2766               	addwf	??_Create_Maze& (0+255),f,b
 23446  012182  5161               	movf	(?___wmul+1)& (0+255),w,b
 23447  012184  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23448  012186  0E04               	movlw	4
 23449  012188  2566               	addwf	??_Create_Maze& (0+255),w,b
 23450  01218A  6ED9               	movwf	fsr2l,c
 23451  01218C  0E00               	movlw	0
 23452  01218E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23453  012190  6EDA               	movwf	fsr2h,c
 23454  012192  0E00               	movlw	0
 23455  012194  6EDF               	movwf	indf2,c
 23456                           
 23457                           ;dans.c: 169: maze[x][y].walls[1] = 1;
 23458  012196  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23459  01219A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23460  01219E  0E00               	movlw	0
 23461  0121A0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23462  0121A2  0E32               	movlw	50
 23463  0121A4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23464  0121A6  EC33  F0C4         	call	___wmul	;wreg free
 23465  0121AA  0E00               	movlw	low _maze
 23466  0121AC  0100               	movlb	0	; () banked
 23467  0121AE  6F66               	movwf	??_Create_Maze& (0+255),b
 23468  0121B0  0E02               	movlw	high _maze
 23469  0121B2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23470  0121B4  5160               	movf	?___wmul& (0+255),w,b
 23471  0121B6  2766               	addwf	??_Create_Maze& (0+255),f,b
 23472  0121B8  5161               	movf	(?___wmul+1)& (0+255),w,b
 23473  0121BA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23474  0121BC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23475  0121C0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23476  0121C4  0E00               	movlw	0
 23477  0121C6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23478  0121C8  0E0A               	movlw	10
 23479  0121CA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23480  0121CC  EC33  F0C4         	call	___wmul	;wreg free
 23481  0121D0  0100               	movlb	0	; () banked
 23482  0121D2  5160               	movf	?___wmul& (0+255),w,b
 23483  0121D4  2766               	addwf	??_Create_Maze& (0+255),f,b
 23484  0121D6  5161               	movf	(?___wmul+1)& (0+255),w,b
 23485  0121D8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23486  0121DA  0E05               	movlw	5
 23487  0121DC  2566               	addwf	??_Create_Maze& (0+255),w,b
 23488  0121DE  6ED9               	movwf	fsr2l,c
 23489  0121E0  0E00               	movlw	0
 23490  0121E2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23491  0121E4  6EDA               	movwf	fsr2h,c
 23492  0121E6  0E01               	movlw	1
 23493  0121E8  6EDF               	movwf	indf2,c
 23494                           
 23495                           ;dans.c: 170: maze[x][y].walls[2] = 1;
 23496  0121EA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23497  0121EE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23498  0121F2  0E00               	movlw	0
 23499  0121F4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23500  0121F6  0E32               	movlw	50
 23501  0121F8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23502  0121FA  EC33  F0C4         	call	___wmul	;wreg free
 23503  0121FE  0E00               	movlw	low _maze
 23504  012200  0100               	movlb	0	; () banked
 23505  012202  6F66               	movwf	??_Create_Maze& (0+255),b
 23506  012204  0E02               	movlw	high _maze
 23507  012206  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23508  012208  5160               	movf	?___wmul& (0+255),w,b
 23509  01220A  2766               	addwf	??_Create_Maze& (0+255),f,b
 23510  01220C  5161               	movf	(?___wmul+1)& (0+255),w,b
 23511  01220E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23512  012210  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23513  012214  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23514  012218  0E00               	movlw	0
 23515  01221A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23516  01221C  0E0A               	movlw	10
 23517  01221E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23518  012220  EC33  F0C4         	call	___wmul	;wreg free
 23519  012224  0100               	movlb	0	; () banked
 23520  012226  5160               	movf	?___wmul& (0+255),w,b
 23521  012228  2766               	addwf	??_Create_Maze& (0+255),f,b
 23522  01222A  5161               	movf	(?___wmul+1)& (0+255),w,b
 23523  01222C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23524  01222E  0E06               	movlw	6
 23525  012230  2566               	addwf	??_Create_Maze& (0+255),w,b
 23526  012232  6ED9               	movwf	fsr2l,c
 23527  012234  0E00               	movlw	0
 23528  012236  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23529  012238  6EDA               	movwf	fsr2h,c
 23530  01223A  0E01               	movlw	1
 23531  01223C  6EDF               	movwf	indf2,c
 23532                           
 23533                           ;dans.c: 171: maze[x][y].walls[3] = 0;
 23534  01223E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23535  012242  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23536  012246  0E00               	movlw	0
 23537  012248  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23538  01224A  0E32               	movlw	50
 23539  01224C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23540  01224E  EC33  F0C4         	call	___wmul	;wreg free
 23541  012252  0E00               	movlw	low _maze
 23542  012254  0100               	movlb	0	; () banked
 23543  012256  6F66               	movwf	??_Create_Maze& (0+255),b
 23544  012258  0E02               	movlw	high _maze
 23545  01225A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23546  01225C  5160               	movf	?___wmul& (0+255),w,b
 23547  01225E  2766               	addwf	??_Create_Maze& (0+255),f,b
 23548  012260  5161               	movf	(?___wmul+1)& (0+255),w,b
 23549  012262  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23550  012264  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23551  012268  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23552  01226C  0E00               	movlw	0
 23553  01226E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23554  012270  0E0A               	movlw	10
 23555  012272  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23556  012274  EC33  F0C4         	call	___wmul	;wreg free
 23557  012278  0100               	movlb	0	; () banked
 23558  01227A  5160               	movf	?___wmul& (0+255),w,b
 23559  01227C  2766               	addwf	??_Create_Maze& (0+255),f,b
 23560  01227E  5161               	movf	(?___wmul+1)& (0+255),w,b
 23561  012280  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23562  012282  0E07               	movlw	7
 23563  012284  2566               	addwf	??_Create_Maze& (0+255),w,b
 23564  012286  6ED9               	movwf	fsr2l,c
 23565  012288  0E00               	movlw	0
 23566  01228A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23567  01228C  6EDA               	movwf	fsr2h,c
 23568  01228E  0E00               	movlw	0
 23569  012290  6EDF               	movwf	indf2,c
 23570                           
 23571                           ;dans.c: 172: maze[x][y].Options = 2;
 23572  012292  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23573  012296  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23574  01229A  0E00               	movlw	0
 23575  01229C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23576  01229E  0E32               	movlw	50
 23577  0122A0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23578  0122A2  EC33  F0C4         	call	___wmul	;wreg free
 23579  0122A6  0E00               	movlw	low _maze
 23580  0122A8  0100               	movlb	0	; () banked
 23581  0122AA  6F66               	movwf	??_Create_Maze& (0+255),b
 23582  0122AC  0E02               	movlw	high _maze
 23583  0122AE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23584  0122B0  5160               	movf	?___wmul& (0+255),w,b
 23585  0122B2  2766               	addwf	??_Create_Maze& (0+255),f,b
 23586  0122B4  5161               	movf	(?___wmul+1)& (0+255),w,b
 23587  0122B6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23588  0122B8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23589  0122BC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23590  0122C0  0E00               	movlw	0
 23591  0122C2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23592  0122C4  0E0A               	movlw	10
 23593  0122C6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23594  0122C8  EC33  F0C4         	call	___wmul	;wreg free
 23595  0122CC  0100               	movlb	0	; () banked
 23596  0122CE  5160               	movf	?___wmul& (0+255),w,b
 23597  0122D0  2766               	addwf	??_Create_Maze& (0+255),f,b
 23598  0122D2  5161               	movf	(?___wmul+1)& (0+255),w,b
 23599  0122D4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23600  0122D6  0E08               	movlw	8
 23601  0122D8  2566               	addwf	??_Create_Maze& (0+255),w,b
 23602  0122DA  6ED9               	movwf	fsr2l,c
 23603  0122DC  0E00               	movlw	0
 23604  0122DE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23605  0122E0  6EDA               	movwf	fsr2h,c
 23606  0122E2  0E02               	movlw	2
 23607  0122E4  6EDE               	movwf	postinc2,c
 23608  0122E6  0E00               	movlw	0
 23609  0122E8  6EDD               	movwf	postdec2,c
 23610                           
 23611                           ; BSR set to: 0
 23612  0122EA  0012               	return		;funcret
 23613  0122EC                     __end_of_Create_Maze:
 23614                           	opt stack 0
 23615                           tosu	equ	0xFFF
 23616                           tosh	equ	0xFFE
 23617                           tosl	equ	0xFFD
 23618                           pclath	equ	0xFFA
 23619                           tblptru	equ	0xFF8
 23620                           tblptrh	equ	0xFF7
 23621                           tblptrl	equ	0xFF6
 23622                           tablat	equ	0xFF5
 23623                           prodh	equ	0xFF4
 23624                           prodl	equ	0xFF3
 23625                           intcon	equ	0xFF2
 23626                           indf0	equ	0xFEF
 23627                           postinc0	equ	0xFEE
 23628                           fsr0h	equ	0xFEA
 23629                           fsr0l	equ	0xFE9
 23630                           wreg	equ	0xFE8
 23631                           indf1	equ	0xFE7
 23632                           postdec1	equ	0xFE5
 23633                           fsr1h	equ	0xFE2
 23634                           fsr1l	equ	0xFE1
 23635                           indf2	equ	0xFDF
 23636                           postinc2	equ	0xFDE
 23637                           postdec2	equ	0xFDD
 23638                           plusw2	equ	0xFDB
 23639                           fsr2h	equ	0xFDA
 23640                           fsr2l	equ	0xFD9
 23641                           status	equ	0xFD8
 23642                           
 23643 ;; *************** function _Console_Init *****************
 23644 ;; Defined at:
 23645 ;;		line 157 in file "Library/Console.c"
 23646 ;; Parameters:    Size  Location     Type
 23647 ;;		None
 23648 ;; Auto vars:     Size  Location     Type
 23649 ;;  y               1    3[BANK0 ] unsigned char 
 23650 ;;  x               1    2[BANK0 ] unsigned char 
 23651 ;; Return value:  Size  Location     Type
 23652 ;;                  1    wreg      void 
 23653 ;; Registers used:
 23654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23655 ;; Tracked objects:
 23656 ;;		On entry : 0/0
 23657 ;;		On exit  : 0/0
 23658 ;;		Unchanged: 0/0
 23659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23661 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23662 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23663 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23664 ;;Total ram usage:        4 bytes
 23665 ;; Hardware stack levels used:    1
 23666 ;; Hardware stack levels required when called:    7
 23667 ;; This function calls:
 23668 ;;		Nothing
 23669 ;; This function is called by:
 23670 ;;		_main
 23671 ;; This function uses a non-reentrant model
 23672 ;;
 23673                           
 23674                           	psect	text100
 23675  0179D6                     __ptext100:
 23676                           	opt stack 0
 23677  0179D6                     _Console_Init:
 23678                           	opt stack 23
 23679                           
 23680                           ;Console.c: 160: lBufferX = 0;
 23681                           
 23682                           ; BSR set to: 0
 23683                           ;incstack = 0
 23684  0179D6  0E00               	movlw	0
 23685  0179D8  6E46               	movwf	_lBufferX,c
 23686                           
 23687                           ;Console.c: 161: lBufferY = 0;
 23688  0179DA  0E00               	movlw	0
 23689  0179DC  6E45               	movwf	_lBufferY,c
 23690                           
 23691                           ;Console.c: 163: UINT8 x, y;
 23692                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 23693  0179DE  0E00               	movlw	0
 23694  0179E0  0100               	movlb	0	; () banked
 23695  0179E2  6F62               	movwf	Console_Init@x& (0+255),b
 23696  0179E4                     l16563:
 23697                           
 23698                           ; BSR set to: 0
 23699  0179E4  0E13               	movlw	19
 23700  0179E6  6562               	cpfsgt	Console_Init@x& (0+255),b
 23701  0179E8  D001               	goto	l976
 23702  0179EA  0012               	return	
 23703  0179EC                     l976:
 23704                           
 23705                           ; BSR set to: 0
 23706                           ;Console.c: 165: {
 23707                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 23708                           
 23709                           ; BSR set to: 0
 23710  0179EC  0E00               	movlw	0
 23711  0179EE  6F63               	movwf	Console_Init@y& (0+255),b
 23712  0179F0                     l16569:
 23713                           
 23714                           ; BSR set to: 0
 23715  0179F0  0E0E               	movlw	14
 23716  0179F2  6563               	cpfsgt	Console_Init@y& (0+255),b
 23717  0179F4  D001               	goto	l978
 23718  0179F6  D022               	goto	u14030
 23719  0179F8                     l978:
 23720                           
 23721                           ; BSR set to: 0
 23722                           ;Console.c: 167: {
 23723                           ;Console.c: 168: lBuffer[y][x] = '\0';
 23724                           
 23725                           ; BSR set to: 0
 23726  0179F8  5163               	movf	Console_Init@y& (0+255),w,b
 23727  0179FA  0D14               	mullw	20
 23728  0179FC  0EE2               	movlw	low _lBuffer
 23729  0179FE  6F60               	movwf	??_Console_Init& (0+255),b
 23730  017A00  0E03               	movlw	high _lBuffer
 23731  017A02  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 23732  017A04  50F3               	movf	prodl,w,c
 23733  017A06  2760               	addwf	??_Console_Init& (0+255),f,b
 23734  017A08  50F4               	movf	prodh,w,c
 23735  017A0A  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 23736  017A0C  5162               	movf	Console_Init@x& (0+255),w,b
 23737  017A0E  0D01               	mullw	1
 23738  017A10  50F3               	movf	prodl,w,c
 23739  017A12  2560               	addwf	??_Console_Init& (0+255),w,b
 23740  017A14  6ED9               	movwf	fsr2l,c
 23741  017A16  50F4               	movf	prodh,w,c
 23742  017A18  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 23743  017A1A  6EDA               	movwf	fsr2h,c
 23744  017A1C  0E00               	movlw	0
 23745  017A1E  6EDF               	movwf	indf2,c
 23746                           
 23747                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 23748  017A20  5163               	movf	Console_Init@y& (0+255),w,b
 23749  017A22  0D02               	mullw	2
 23750  017A24  0E28               	movlw	low _lCBuffer
 23751  017A26  24F3               	addwf	prodl,w,c
 23752  017A28  6ED9               	movwf	fsr2l,c
 23753  017A2A  0E03               	movlw	high _lCBuffer
 23754  017A2C  20F4               	addwfc	prodh,w,c
 23755  017A2E  6EDA               	movwf	fsr2h,c
 23756  017A30  0EFF               	movlw	255
 23757  017A32  6EDE               	movwf	postinc2,c
 23758  017A34  0EFF               	movlw	255
 23759  017A36  6EDD               	movwf	postdec2,c
 23760                           
 23761                           ; BSR set to: 0
 23762  017A38  2B63               	incf	Console_Init@y& (0+255),f,b
 23763  017A3A  D7DA               	goto	l16569
 23764  017A3C                     u14030:
 23765                           
 23766                           ; BSR set to: 0
 23767                           
 23768                           ; BSR set to: 0
 23769  017A3C  2B62               	incf	Console_Init@x& (0+255),f,b
 23770  017A3E  D7D2               	goto	l16563
 23771  017A40                     __end_of_Console_Init:
 23772                           	opt stack 0
 23773                           tosu	equ	0xFFF
 23774                           tosh	equ	0xFFE
 23775                           tosl	equ	0xFFD
 23776                           pclath	equ	0xFFA
 23777                           tblptru	equ	0xFF8
 23778                           tblptrh	equ	0xFF7
 23779                           tblptrl	equ	0xFF6
 23780                           tablat	equ	0xFF5
 23781                           prodh	equ	0xFF4
 23782                           prodl	equ	0xFF3
 23783                           intcon	equ	0xFF2
 23784                           indf0	equ	0xFEF
 23785                           postinc0	equ	0xFEE
 23786                           fsr0h	equ	0xFEA
 23787                           fsr0l	equ	0xFE9
 23788                           wreg	equ	0xFE8
 23789                           indf1	equ	0xFE7
 23790                           postdec1	equ	0xFE5
 23791                           fsr1h	equ	0xFE2
 23792                           fsr1l	equ	0xFE1
 23793                           indf2	equ	0xFDF
 23794                           postinc2	equ	0xFDE
 23795                           postdec2	equ	0xFDD
 23796                           plusw2	equ	0xFDB
 23797                           fsr2h	equ	0xFDA
 23798                           fsr2l	equ	0xFD9
 23799                           status	equ	0xFD8
 23800                           
 23801 ;; *************** function _Closest_Object *****************
 23802 ;; Defined at:
 23803 ;;		line 281 in file "main.c"
 23804 ;; Parameters:    Size  Location     Type
 23805 ;;		None
 23806 ;; Auto vars:     Size  Location     Type
 23807 ;;		None
 23808 ;; Return value:  Size  Location     Type
 23809 ;;                  1    wreg      void 
 23810 ;; Registers used:
 23811 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23812 ;; Tracked objects:
 23813 ;;		On entry : 0/0
 23814 ;;		On exit  : 0/0
 23815 ;;		Unchanged: 0/0
 23816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23821 ;;Total ram usage:        0 bytes
 23822 ;; Hardware stack levels used:    1
 23823 ;; Hardware stack levels required when called:   13
 23824 ;; This function calls:
 23825 ;;		_ADCAverage
 23826 ;;		_Console_Render
 23827 ;;		_SteppingCCW
 23828 ;;		_printf
 23829 ;; This function is called by:
 23830 ;;		_main
 23831 ;; This function uses a non-reentrant model
 23832 ;;
 23833                           
 23834                           	psect	text101
 23835  016C90                     __ptext101:
 23836                           	opt stack 0
 23837  016C90                     _Closest_Object:
 23838                           	opt stack 17
 23839                           
 23840                           ;main.c: 282: printf("%c", (char)35);
 23841                           
 23842                           ; BSR set to: 0
 23843                           ;incstack = 0
 23844  016C90  0EFC               	movlw	low STR_1
 23845  016C92  0100               	movlb	0	; () banked
 23846  016C94  6F75               	movwf	printf@f& (0+255),b
 23847  016C96  0EFF               	movlw	high STR_1
 23848  016C98  6F76               	movwf	(printf@f+1)& (0+255),b
 23849  016C9A  0E00               	movlw	0
 23850  016C9C  6F78               	movwf	(?_printf+3)& (0+255),b
 23851  016C9E  0E23               	movlw	35
 23852  016CA0  6F77               	movwf	(?_printf+2)& (0+255),b
 23853  016CA2  EC77  F0AB         	call	_printf	;wreg free
 23854                           
 23855                           ;main.c: 283: printf("Stepped 360 degrees");
 23856  016CA6  0E03               	movlw	low STR_7
 23857  016CA8  0100               	movlb	0	; () banked
 23858  016CAA  6F75               	movwf	printf@f& (0+255),b
 23859  016CAC  0EFF               	movlw	high STR_7
 23860  016CAE  6F76               	movwf	(printf@f+1)& (0+255),b
 23861  016CB0  EC77  F0AB         	call	_printf	;wreg free
 23862                           
 23863                           ;main.c: 284: printf("\nThe Closes object (mm): %d", Low_Sensor);
 23864  016CB4  0EBA               	movlw	low STR_8
 23865  016CB6  0100               	movlb	0	; () banked
 23866  016CB8  6F75               	movwf	printf@f& (0+255),b
 23867  016CBA  0EFE               	movlw	high STR_8
 23868  016CBC  6F76               	movwf	(printf@f+1)& (0+255),b
 23869  016CBE  C1D8  F077         	movff	_Low_Sensor,?_printf+2
 23870  016CC2  C1D9  F078         	movff	_Low_Sensor+1,?_printf+3
 23871  016CC6  EC77  F0AB         	call	_printf	;wreg free
 23872                           
 23873                           ;main.c: 285: printf("\nGoing back to: %d", Close_Pos);
 23874  016CCA  0E2A               	movlw	low STR_9
 23875  016CCC  0100               	movlb	0	; () banked
 23876  016CCE  6F75               	movwf	printf@f& (0+255),b
 23877  016CD0  0EFF               	movlw	high STR_9
 23878  016CD2  6F76               	movwf	(printf@f+1)& (0+255),b
 23879  016CD4  C128  F077         	movff	_Close_Pos,?_printf+2
 23880  016CD8  C129  F078         	movff	_Close_Pos+1,?_printf+3
 23881  016CDC  EC77  F0AB         	call	_printf	;wreg free
 23882                           
 23883                           ;main.c: 286: Console_Render();
 23884  016CE0  EC9B  F0A7         	call	_Console_Render	;wreg free
 23885                           
 23886                           ;main.c: 287: while (!CCW_Count<=0){
 23887  016CE4  D020               	goto	l2204
 23888  016CE6                     
 23889                           ;main.c: 288: CCW_Count--;
 23890  016CE6  0101               	movlb	1	; () banked
 23891  016CE8  0724               	decf	_CCW_Count& (0+255),f,b
 23892  016CEA  A0D8               	btfss	status,0,c
 23893  016CEC  0725               	decf	(_CCW_Count+1)& (0+255),f,b
 23894                           
 23895                           ; BSR set to: 1
 23896                           ;main.c: 289: printf("%c", (char)35);
 23897  016CEE  0EFC               	movlw	low STR_1
 23898  016CF0  0100               	movlb	0	; () banked
 23899  016CF2  6F75               	movwf	printf@f& (0+255),b
 23900  016CF4  0EFF               	movlw	high STR_1
 23901  016CF6  6F76               	movwf	(printf@f+1)& (0+255),b
 23902  016CF8  0E00               	movlw	0
 23903  016CFA  6F78               	movwf	(?_printf+3)& (0+255),b
 23904  016CFC  0E23               	movlw	35
 23905  016CFE  6F77               	movwf	(?_printf+2)& (0+255),b
 23906  016D00  EC77  F0AB         	call	_printf	;wreg free
 23907                           
 23908                           ;main.c: 290: printf("\nSteps Travelled: %d",CCW_Count);
 23909  016D04  0EEE               	movlw	low STR_11
 23910  016D06  0100               	movlb	0	; () banked
 23911  016D08  6F75               	movwf	printf@f& (0+255),b
 23912  016D0A  0EFE               	movlw	high STR_11
 23913  016D0C  6F76               	movwf	(printf@f+1)& (0+255),b
 23914  016D0E  C124  F077         	movff	_CCW_Count,?_printf+2
 23915  016D12  C125  F078         	movff	_CCW_Count+1,?_printf+3
 23916  016D16  EC77  F0AB         	call	_printf	;wreg free
 23917                           
 23918                           ;main.c: 291: Console_Render();
 23919  016D1A  EC9B  F0A7         	call	_Console_Render	;wreg free
 23920                           
 23921                           ;main.c: 292: ADCAverage ();
 23922  016D1E  EC1C  F09E         	call	_ADCAverage	;wreg free
 23923                           
 23924                           ;main.c: 293: SteppingCCW();
 23925  016D22  EC09  F0C1         	call	_SteppingCCW	;wreg free
 23926  016D26                     l2204:
 23927  016D26  0101               	movlb	1	; () banked
 23928  016D28  5124               	movf	_CCW_Count& (0+255),w,b
 23929  016D2A  1125               	iorwf	(_CCW_Count+1)& (0+255),w,b
 23930  016D2C  A4D8               	btfss	status,2,c
 23931  016D2E  D7DB               	goto	l2205
 23932                           
 23933                           ; BSR set to: 1
 23934                           ;main.c: 294: }
 23935                           ;main.c: 295: RD5=0;
 23936  016D30  9A83               	bcf	3971,5,c	;volatile
 23937                           
 23938                           ;main.c: 296: RD7=0;
 23939  016D32  9E83               	bcf	3971,7,c	;volatile
 23940                           
 23941                           ;main.c: 297: RA2=0;
 23942  016D34  9480               	bcf	3968,2,c	;volatile
 23943                           
 23944                           ;main.c: 298: RA3=0;
 23945  016D36  9680               	bcf	3968,3,c	;volatile
 23946                           
 23947                           ; BSR set to: 1
 23948                           
 23949                           ;main.c: 299: return;
 23950  016D38  0012               	return		;funcret
 23951  016D3A                     __end_of_Closest_Object:
 23952                           	opt stack 0
 23953                           tosu	equ	0xFFF
 23954                           tosh	equ	0xFFE
 23955                           tosl	equ	0xFFD
 23956                           pclath	equ	0xFFA
 23957                           tblptru	equ	0xFF8
 23958                           tblptrh	equ	0xFF7
 23959                           tblptrl	equ	0xFF6
 23960                           tablat	equ	0xFF5
 23961                           prodh	equ	0xFF4
 23962                           prodl	equ	0xFF3
 23963                           intcon	equ	0xFF2
 23964                           indf0	equ	0xFEF
 23965                           postinc0	equ	0xFEE
 23966                           fsr0h	equ	0xFEA
 23967                           fsr0l	equ	0xFE9
 23968                           wreg	equ	0xFE8
 23969                           indf1	equ	0xFE7
 23970                           postdec1	equ	0xFE5
 23971                           fsr1h	equ	0xFE2
 23972                           fsr1l	equ	0xFE1
 23973                           indf2	equ	0xFDF
 23974                           postinc2	equ	0xFDE
 23975                           postdec2	equ	0xFDD
 23976                           plusw2	equ	0xFDB
 23977                           fsr2h	equ	0xFDA
 23978                           fsr2l	equ	0xFD9
 23979                           status	equ	0xFD8
 23980                           
 23981 ;; *************** function _printf *****************
 23982 ;; Defined at:
 23983 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
 23984 ;; Parameters:    Size  Location     Type
 23985 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 23986 ;;		 -> STR_35(12), STR_34(7), STR_33(12), STR_32(9), 
 23987 ;;		 -> STR_31(10), STR_30(3), STR_29(24), STR_28(3), 
 23988 ;;		 -> STR_27(16), STR_26(3), STR_25(12), STR_24(12), 
 23989 ;;		 -> STR_23(39), STR_22(42), STR_21(9), STR_20(11), 
 23990 ;;		 -> STR_19(10), STR_18(3), STR_17(18), STR_16(8), 
 23991 ;;		 -> STR_15(10), STR_14(3), STR_13(16), STR_12(3), 
 23992 ;;		 -> STR_11(21), STR_10(3), STR_9(19), STR_8(28), 
 23993 ;;		 -> STR_7(20), STR_6(3), STR_5(17), STR_4(12), 
 23994 ;;		 -> STR_3(3), STR_2(19), STR_1(3), 
 23995 ;; Auto vars:     Size  Location     Type
 23996 ;;  tmpval          4    0        struct .
 23997 ;;  cp              3    0        PTR const unsigned char 
 23998 ;;  val             2   32[BANK0 ] unsigned int 
 23999 ;;  ap              2   30[BANK0 ] PTR void [1]
 24000 ;;		 -> ?_printf(2), 
 24001 ;;  len             2    0        unsigned int 
 24002 ;;  c               1   34[BANK0 ] char 
 24003 ;;  prec            1   29[BANK0 ] char 
 24004 ;;  flag            1   28[BANK0 ] unsigned char 
 24005 ;; Return value:  Size  Location     Type
 24006 ;;                  2   21[BANK0 ] int 
 24007 ;; Registers used:
 24008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24009 ;; Tracked objects:
 24010 ;;		On entry : 0/0
 24011 ;;		On exit  : 0/0
 24012 ;;		Unchanged: 0/0
 24013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24014 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24015 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24016 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24017 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24018 ;;Total ram usage:       14 bytes
 24019 ;; Hardware stack levels used:    1
 24020 ;; Hardware stack levels required when called:   12
 24021 ;; This function calls:
 24022 ;;		___lwdiv
 24023 ;;		___lwmod
 24024 ;;		_putch
 24025 ;; This function is called by:
 24026 ;;		_Sensor_Observe
 24027 ;;		_Closest_Object
 24028 ;;		_main
 24029 ;;		_pop
 24030 ;;		_push
 24031 ;;		_Detect_Victim
 24032 ;;		_Travel
 24033 ;;		_Move_ADC_To
 24034 ;;		_Navigate_Maze
 24035 ;;		_Find_Flag
 24036 ;; This function uses a non-reentrant model
 24037 ;;
 24038                           
 24039                           	psect	text102
 24040  0156EE                     __ptext102:
 24041                           	opt stack 0
 24042  0156EE                     _printf:
 24043                           	opt stack 18
 24044                           
 24045                           ;doprnt.c: 466: va_list ap;
 24046                           ;doprnt.c: 499: signed char c;
 24047                           ;doprnt.c: 506: signed char prec;
 24048                           ;doprnt.c: 508: unsigned char flag;
 24049                           ;doprnt.c: 523: union {
 24050                           ;doprnt.c: 524: unsigned long vd;
 24051                           ;doprnt.c: 525: double integ;
 24052                           ;doprnt.c: 526: } tmpval;
 24053                           ;doprnt.c: 528: unsigned int val;
 24054                           ;doprnt.c: 529: unsigned len;
 24055                           ;doprnt.c: 530: const char * cp;
 24056                           ;doprnt.c: 533: *ap = __va_start();
 24057                           
 24058                           ; BSR set to: 1
 24059                           ;incstack = 0
 24060  0156EE  0E77               	movlw	low (?_printf+2)
 24061  0156F0  0100               	movlb	0	; () banked
 24062  0156F2  6F7E               	movwf	printf@ap& (0+255),b
 24063  0156F4  0E00               	movlw	high (?_printf+2)
 24064  0156F6  6F7F               	movwf	(printf@ap+1)& (0+255),b
 24065                           
 24066                           ;doprnt.c: 536: while(c = *f++) {
 24067  0156F8  D09E               	goto	u12610
 24068  0156FA                     
 24069                           ; BSR set to: 0
 24070                           ;doprnt.c: 538: if(c != '%')
 24071                           
 24072                           ; BSR set to: 0
 24073  0156FA  0E25               	movlw	37
 24074  0156FC  1982               	xorwf	printf@c& (0+255),w,b
 24075  0156FE  B4D8               	btfsc	status,2,c
 24076  015700  D004               	goto	l2530
 24077                           
 24078                           ; BSR set to: 0
 24079                           ;doprnt.c: 540: {
 24080                           ;doprnt.c: 541: (putch(c) );
 24081  015702  5182               	movf	printf@c& (0+255),w,b
 24082  015704  EC27  F0C6         	call	_putch
 24083                           
 24084                           ;doprnt.c: 542: continue;
 24085  015708  D096               	goto	u12610
 24086  01570A                     l2530:
 24087                           
 24088                           ;doprnt.c: 543: }
 24089                           ;doprnt.c: 548: flag = 0;
 24090  01570A  0E00               	movlw	0
 24091  01570C  0100               	movlb	0	; () banked
 24092  01570E  6F7C               	movwf	printf@flag& (0+255),b
 24093                           
 24094                           ;doprnt.c: 635: switch(c = *f++) {
 24095  015710  D00E               	goto	l2531
 24096  015712                     
 24097                           ; BSR set to: 0
 24098                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 24099                           
 24100                           ; BSR set to: 0
 24101  015712  C07E  FFD9         	movff	printf@ap,fsr2l
 24102  015716  C07F  FFDA         	movff	printf@ap+1,fsr2h
 24103  01571A  50DF               	movf	indf2,w,c
 24104  01571C  6F82               	movwf	printf@c& (0+255),b
 24105                           
 24106                           ; BSR set to: 0
 24107  01571E  0E02               	movlw	2
 24108  015720  277E               	addwf	printf@ap& (0+255),f,b
 24109  015722  0E00               	movlw	0
 24110  015724  237F               	addwfc	(printf@ap+1)& (0+255),f,b
 24111  015726                     
 24112                           ; BSR set to: 0
 24113                           ;doprnt.c: 809: (putch(c) );
 24114                           
 24115                           ; BSR set to: 0
 24116  015726  5182               	movf	printf@c& (0+255),w,b
 24117  015728  EC27  F0C6         	call	_putch
 24118                           
 24119                           ;doprnt.c: 810: continue;
 24120  01572C  D084               	goto	u12610
 24121  01572E                     l2531:
 24122  01572E  C075  FFF6         	movff	printf@f,tblptrl
 24123  015732  C076  FFF7         	movff	printf@f+1,tblptrh
 24124  015736  0100               	movlb	0	; () banked
 24125  015738  4B75               	infsnz	printf@f& (0+255),f,b
 24126  01573A  2B76               	incf	(printf@f+1)& (0+255),f,b
 24127  01573C                     	if	0	;tblptru may be non-zero
 24128  01573C                     	endif
 24129  01573C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 24130  01573C  0E00               	movlw	low (__mediumconst shr (0+16))
 24131  01573E  6EF8               	movwf	tblptru,c
 24132  015740                     	endif
 24133  015740  0008               	tblrd		*
 24134  015742  CFF5 F082          	movff	tablat,printf@c
 24135  015746  5182               	movf	printf@c& (0+255),w,b
 24136                           
 24137                           ; Switch size 1, requested type "space"
 24138                           ; Number of cases is 4, Range of values is 0 to 105
 24139                           ; switch strategies available:
 24140                           ; Name         Instructions Cycles
 24141                           ; simple_byte           13     7 (average)
 24142                           ;	Chosen strategy is simple_byte
 24143  015748  0A00               	xorlw	0	; case 0
 24144  01574A  B4D8               	btfsc	status,2,c
 24145  01574C  0012               	return	
 24146  01574E  0A63               	xorlw	99	; case 99
 24147  015750  B4D8               	btfsc	status,2,c
 24148  015752  D7DF               	goto	l2537
 24149  015754  0A07               	xorlw	7	; case 100
 24150  015756  B4D8               	btfsc	status,2,c
 24151  015758  D003               	goto	l2536
 24152  01575A  0A0D               	xorlw	13	; case 105
 24153  01575C  A4D8               	btfss	status,2,c
 24154  01575E  D7E3               	goto	l2538
 24155  015760                     l2536:
 24156                           
 24157                           ;doprnt.c: 1253: {
 24158                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24159                           
 24160                           ; BSR set to: 0
 24161  015760  C07E  FFD9         	movff	printf@ap,fsr2l
 24162  015764  C07F  FFDA         	movff	printf@ap+1,fsr2h
 24163  015768  CFDE F080          	movff	postinc2,printf@val
 24164  01576C  CFDD F081          	movff	postdec2,printf@val+1
 24165  015770  0E02               	movlw	2
 24166  015772  0100               	movlb	0	; () banked
 24167  015774  277E               	addwf	printf@ap& (0+255),f,b
 24168  015776  0E00               	movlw	0
 24169  015778  237F               	addwfc	(printf@ap+1)& (0+255),f,b
 24170                           
 24171                           ; BSR set to: 0
 24172                           ;doprnt.c: 1261: if((int)val < 0) {
 24173  01577A  AF81               	btfss	(printf@val+1)& (0+255),7,b
 24174  01577C  D006               	goto	l2539
 24175                           
 24176                           ; BSR set to: 0
 24177                           ;doprnt.c: 1262: flag |= 0x03;
 24178  01577E  0E03               	movlw	3
 24179  015780  137C               	iorwf	printf@flag& (0+255),f,b
 24180                           
 24181                           ; BSR set to: 0
 24182                           ;doprnt.c: 1263: val = -val;
 24183  015782  6D80               	negf	printf@val& (0+255),b
 24184  015784  1F81               	comf	(printf@val+1)& (0+255),f,b
 24185  015786  B0D8               	btfsc	status,0,c
 24186  015788  2B81               	incf	(printf@val+1)& (0+255),f,b
 24187  01578A                     l2539:
 24188                           
 24189                           ; BSR set to: 0
 24190                           ;doprnt.c: 1264: }
 24191                           ;doprnt.c: 1266: }
 24192                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24193                           
 24194                           ; BSR set to: 0
 24195  01578A  0E01               	movlw	1
 24196  01578C  6F82               	movwf	printf@c& (0+255),b
 24197  01578E                     l15159:
 24198                           
 24199                           ; BSR set to: 0
 24200  01578E  0E05               	movlw	5
 24201  015790  1982               	xorwf	printf@c& (0+255),w,b
 24202  015792  B4D8               	btfsc	status,2,c
 24203  015794  D015               	goto	u12590
 24204                           
 24205                           ; BSR set to: 0
 24206                           ;doprnt.c: 1306: if(val < dpowers[c])
 24207                           
 24208                           ; BSR set to: 0
 24209                           
 24210                           ; BSR set to: 0
 24211  015796  5182               	movf	printf@c& (0+255),w,b
 24212  015798  0D02               	mullw	2
 24213  01579A  0E15               	movlw	low _dpowers
 24214  01579C  24F3               	addwf	prodl,w,c
 24215  01579E  6EF6               	movwf	tblptrl,c
 24216  0157A0  0EFC               	movlw	high _dpowers
 24217  0157A2  20F4               	addwfc	prodh,w,c
 24218  0157A4  6EF7               	movwf	tblptrh,c
 24219  0157A6                     	if	1	;There are 3 active tblptr bytes
 24220  0157A6  6AF8               	clrf	tblptru,c
 24221  0157A8  0E00               	movlw	low (__mediumconst shr (0+16))
 24222  0157AA  22F8               	addwfc	tblptru,f,c
 24223  0157AC                     	endif
 24224  0157AC  0009               	tblrd		*+
 24225  0157AE  50F5               	movf	tablat,w,c
 24226  0157B0  5D80               	subwf	printf@val& (0+255),w,b
 24227  0157B2  0009               	tblrd		*+
 24228  0157B4  50F5               	movf	tablat,w,c
 24229  0157B6  5981               	subwfb	(printf@val+1)& (0+255),w,b
 24230  0157B8  A0D8               	btfss	status,0,c
 24231  0157BA  D002               	goto	u12590
 24232                           
 24233                           ; BSR set to: 0
 24234                           
 24235                           ; BSR set to: 0
 24236                           
 24237                           ; BSR set to: 0
 24238                           ;doprnt.c: 1307: break;
 24239  0157BC  2B82               	incf	printf@c& (0+255),f,b
 24240  0157BE  D7E7               	goto	l15159
 24241  0157C0                     u12590:
 24242                           
 24243                           ; BSR set to: 0
 24244                           ;doprnt.c: 1422: {
 24245                           ;doprnt.c: 1438: if(flag & 0x03)
 24246                           
 24247                           ; BSR set to: 0
 24248  0157C0  C07C  F07B         	movff	printf@flag,??_printf
 24249  0157C4  0E03               	movlw	3
 24250  0157C6  177B               	andwf	??_printf& (0+255),f,b
 24251  0157C8  B4D8               	btfsc	status,2,c
 24252  0157CA  D003               	goto	l2543
 24253                           
 24254                           ; BSR set to: 0
 24255                           ;doprnt.c: 1439: (putch('-') );
 24256  0157CC  0E2D               	movlw	45
 24257  0157CE  EC27  F0C6         	call	_putch
 24258  0157D2                     l2543:
 24259                           
 24260                           ;doprnt.c: 1469: }
 24261                           ;doprnt.c: 1472: prec = c;
 24262  0157D2  C082  F07D         	movff	printf@c,printf@prec
 24263                           
 24264                           ;doprnt.c: 1474: while(prec--) {
 24265  0157D6  D02A               	goto	l2544
 24266  0157D8                     
 24267                           ;doprnt.c: 1478: {
 24268                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24269  0157D8  0100               	movlb	0	; () banked
 24270  0157DA  517D               	movf	printf@prec& (0+255),w,b
 24271  0157DC  0D02               	mullw	2
 24272  0157DE  0E15               	movlw	low _dpowers
 24273  0157E0  24F3               	addwf	prodl,w,c
 24274  0157E2  6EF6               	movwf	tblptrl,c
 24275  0157E4  0EFC               	movlw	high _dpowers
 24276  0157E6  20F4               	addwfc	prodh,w,c
 24277  0157E8  6EF7               	movwf	tblptrh,c
 24278  0157EA                     	if	1	;There are 3 active tblptr bytes
 24279  0157EA  6AF8               	clrf	tblptru,c
 24280  0157EC  0E00               	movlw	low (__mediumconst shr (0+16))
 24281  0157EE  22F8               	addwfc	tblptru,f,c
 24282  0157F0                     	endif
 24283  0157F0  0009               	tblrd		*+
 24284  0157F2  CFF5 F062          	movff	tablat,___lwdiv@divisor
 24285  0157F6  000A               	tblrd		*-
 24286  0157F8  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
 24287  0157FC  C080  F060         	movff	printf@val,___lwdiv@dividend
 24288  015800  C081  F061         	movff	printf@val+1,___lwdiv@dividend+1
 24289  015804  EC83  F0BF         	call	___lwdiv	;wreg free
 24290  015808  C060  F067         	movff	?___lwdiv,___lwmod@dividend
 24291  01580C  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
 24292  015810  0E00               	movlw	0
 24293  015812  0100               	movlb	0	; () banked
 24294  015814  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 24295  015816  0E0A               	movlw	10
 24296  015818  6F69               	movwf	___lwmod@divisor& (0+255),b
 24297  01581A  ECDF  F0C1         	call	___lwmod	;wreg free
 24298  01581E  0100               	movlb	0	; () banked
 24299  015820  5167               	movf	?___lwmod& (0+255),w,b
 24300  015822  0F30               	addlw	48
 24301  015824  6F82               	movwf	printf@c& (0+255),b
 24302                           
 24303                           ; BSR set to: 0
 24304                           ;doprnt.c: 1523: }
 24305                           ;doprnt.c: 1524: (putch(c) );
 24306  015826  5182               	movf	printf@c& (0+255),w,b
 24307  015828  EC27  F0C6         	call	_putch
 24308  01582C                     l2544:
 24309  01582C  0100               	movlb	0	; () banked
 24310  01582E  077D               	decf	printf@prec& (0+255),f,b
 24311  015830  297D               	incf	printf@prec& (0+255),w,b
 24312  015832  A4D8               	btfss	status,2,c
 24313  015834  D7D1               	goto	l2545
 24314  015836                     u12610:
 24315                           
 24316                           ; BSR set to: 0
 24317                           
 24318                           ; BSR set to: 0
 24319  015836  C075  FFF6         	movff	printf@f,tblptrl
 24320  01583A  C076  FFF7         	movff	printf@f+1,tblptrh
 24321  01583E  0100               	movlb	0	; () banked
 24322  015840  4B75               	infsnz	printf@f& (0+255),f,b
 24323  015842  2B76               	incf	(printf@f+1)& (0+255),f,b
 24324  015844                     	if	0	;tblptru may be non-zero
 24325  015844                     	endif
 24326  015844                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 24327  015844  0E00               	movlw	low (__mediumconst shr (0+16))
 24328  015846  6EF8               	movwf	tblptru,c
 24329  015848                     	endif
 24330  015848  0008               	tblrd		*
 24331  01584A  CFF5 F082          	movff	tablat,printf@c
 24332  01584E  5182               	movf	printf@c& (0+255),w,b
 24333  015850  B4D8               	btfsc	status,2,c
 24334  015852  0012               	return	
 24335  015854  D752               	goto	l2529
 24336  015856                     __end_of_printf:
 24337                           	opt stack 0
 24338                           tosu	equ	0xFFF
 24339                           tosh	equ	0xFFE
 24340                           tosl	equ	0xFFD
 24341                           pclath	equ	0xFFA
 24342                           tblptru	equ	0xFF8
 24343                           tblptrh	equ	0xFF7
 24344                           tblptrl	equ	0xFF6
 24345                           tablat	equ	0xFF5
 24346                           prodh	equ	0xFF4
 24347                           prodl	equ	0xFF3
 24348                           intcon	equ	0xFF2
 24349                           indf0	equ	0xFEF
 24350                           postinc0	equ	0xFEE
 24351                           fsr0h	equ	0xFEA
 24352                           fsr0l	equ	0xFE9
 24353                           wreg	equ	0xFE8
 24354                           indf1	equ	0xFE7
 24355                           postdec1	equ	0xFE5
 24356                           fsr1h	equ	0xFE2
 24357                           fsr1l	equ	0xFE1
 24358                           indf2	equ	0xFDF
 24359                           postinc2	equ	0xFDE
 24360                           postdec2	equ	0xFDD
 24361                           plusw2	equ	0xFDB
 24362                           fsr2h	equ	0xFDA
 24363                           fsr2l	equ	0xFD9
 24364                           status	equ	0xFD8
 24365                           
 24366 ;; *************** function _putch *****************
 24367 ;; Defined at:
 24368 ;;		line 454 in file "Library/Console.c"
 24369 ;; Parameters:    Size  Location     Type
 24370 ;;  c               1    wreg     unsigned char 
 24371 ;; Auto vars:     Size  Location     Type
 24372 ;;  c               1   20[BANK0 ] unsigned char 
 24373 ;; Return value:  Size  Location     Type
 24374 ;;                  1    wreg      void 
 24375 ;; Registers used:
 24376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24377 ;; Tracked objects:
 24378 ;;		On entry : 0/0
 24379 ;;		On exit  : 0/0
 24380 ;;		Unchanged: 0/0
 24381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24383 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24385 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24386 ;;Total ram usage:        1 bytes
 24387 ;; Hardware stack levels used:    1
 24388 ;; Hardware stack levels required when called:   11
 24389 ;; This function calls:
 24390 ;;		_Console_PrintChar
 24391 ;; This function is called by:
 24392 ;;		_printf
 24393 ;; This function uses a non-reentrant model
 24394 ;;
 24395                           
 24396                           	psect	text103
 24397  018C4E                     __ptext103:
 24398                           	opt stack 0
 24399  018C4E                     _putch:
 24400                           	opt stack 18
 24401                           
 24402                           ; BSR set to: 0
 24403                           ;incstack = 0
 24404                           ;putch@c stored from wreg
 24405  018C4E  0100               	movlb	0	; () banked
 24406  018C50  6F74               	movwf	putch@c& (0+255),b
 24407                           
 24408                           ;Console.c: 456: Console_PrintChar(c);
 24409  018C52  0100               	movlb	0	; () banked
 24410  018C54  5174               	movf	putch@c& (0+255),w,b
 24411  018C56  EC82  F0AD         	call	_Console_PrintChar
 24412  018C5A  0012               	return		;funcret
 24413  018C5C                     __end_of_putch:
 24414                           	opt stack 0
 24415                           tosu	equ	0xFFF
 24416                           tosh	equ	0xFFE
 24417                           tosl	equ	0xFFD
 24418                           pclath	equ	0xFFA
 24419                           tblptru	equ	0xFF8
 24420                           tblptrh	equ	0xFF7
 24421                           tblptrl	equ	0xFF6
 24422                           tablat	equ	0xFF5
 24423                           prodh	equ	0xFF4
 24424                           prodl	equ	0xFF3
 24425                           intcon	equ	0xFF2
 24426                           indf0	equ	0xFEF
 24427                           postinc0	equ	0xFEE
 24428                           fsr0h	equ	0xFEA
 24429                           fsr0l	equ	0xFE9
 24430                           wreg	equ	0xFE8
 24431                           indf1	equ	0xFE7
 24432                           postdec1	equ	0xFE5
 24433                           fsr1h	equ	0xFE2
 24434                           fsr1l	equ	0xFE1
 24435                           indf2	equ	0xFDF
 24436                           postinc2	equ	0xFDE
 24437                           postdec2	equ	0xFDD
 24438                           plusw2	equ	0xFDB
 24439                           fsr2h	equ	0xFDA
 24440                           fsr2l	equ	0xFD9
 24441                           status	equ	0xFD8
 24442                           
 24443 ;; *************** function _Console_PrintChar *****************
 24444 ;; Defined at:
 24445 ;;		line 322 in file "Library/Console.c"
 24446 ;; Parameters:    Size  Location     Type
 24447 ;;  pInput          1    wreg     unsigned char 
 24448 ;; Auto vars:     Size  Location     Type
 24449 ;;  pInput          1   19[BANK0 ] unsigned char 
 24450 ;; Return value:  Size  Location     Type
 24451 ;;                  1    wreg      void 
 24452 ;; Registers used:
 24453 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24454 ;; Tracked objects:
 24455 ;;		On entry : 0/0
 24456 ;;		On exit  : 0/0
 24457 ;;		Unchanged: 0/0
 24458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24461 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24462 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24463 ;;Total ram usage:        4 bytes
 24464 ;; Hardware stack levels used:    1
 24465 ;; Hardware stack levels required when called:   10
 24466 ;; This function calls:
 24467 ;;		_Console_Backspace
 24468 ;;		_Console_FormFeed
 24469 ;;		_Console_IncrementCursor
 24470 ;;		_Console_NewLine
 24471 ;;		_Console_ResetCursor
 24472 ;;		_Console_Tab
 24473 ;; This function is called by:
 24474 ;;		_putch
 24475 ;;		_Console_PrintString
 24476 ;; This function uses a non-reentrant model
 24477 ;;
 24478                           
 24479                           	psect	text104
 24480  015B04                     __ptext104:
 24481                           	opt stack 0
 24482  015B04                     _Console_PrintChar:
 24483                           	opt stack 18
 24484                           
 24485                           ;incstack = 0
 24486                           ;Console_PrintChar@pInput stored from wreg
 24487  015B04  0100               	movlb	0	; () banked
 24488  015B06  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
 24489                           
 24490                           ;Console.c: 324: switch(pInput)
 24491  015B08  D08A               	goto	l1036
 24492  015B0A                     
 24493                           ;Console.c: 327: case '\n':
 24494                           ;Console.c: 328: Console_NewLine();
 24495  015B0A  EC5A  F0BB         	call	_Console_NewLine	;wreg free
 24496                           
 24497                           ;Console.c: 329: return;
 24498  015B0E  0012               	return	
 24499  015B10                     
 24500                           ;Console.c: 331: Console_Backspace();
 24501  015B10  EC26  F0C0         	call	_Console_Backspace	;wreg free
 24502                           
 24503                           ;Console.c: 332: return;
 24504  015B14  0012               	return	
 24505  015B16                     
 24506                           ;Console.c: 334: Console_FormFeed();
 24507  015B16  EC7F  F0BC         	call	_Console_FormFeed	;wreg free
 24508                           
 24509                           ;Console.c: 335: return;
 24510  015B1A  0012               	return	
 24511  015B1C                     
 24512                           ;Console.c: 337: Console_Tab();
 24513  015B1C  EC2F  F0B8         	call	_Console_Tab	;wreg free
 24514                           
 24515                           ;Console.c: 338: return;
 24516  015B20  0012               	return	
 24517  015B22                     
 24518                           ;Console.c: 340: Console_IncrementCursor();
 24519  015B22  EC05  F0BF         	call	_Console_IncrementCursor	;wreg free
 24520                           
 24521                           ;Console.c: 341: return;
 24522  015B26  0012               	return	
 24523  015B28                     
 24524                           ;Console.c: 343: Console_ResetCursor();
 24525  015B28  EC0E  F0C5         	call	_Console_ResetCursor	;wreg free
 24526                           
 24527                           ;Console.c: 344: return;
 24528  015B2C  0012               	return	
 24529  015B2E                     
 24530                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 24531                           
 24532                           ;Console.c: 349: default:
 24533  015B2E  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 24534  015B32  0E7F               	movlw	127
 24535  015B34  0100               	movlb	0	; () banked
 24536  015B36  1770               	andwf	??_Console_PrintChar& (0+255),f,b
 24537  015B38  5045               	movf	_lBufferY,w,c
 24538  015B3A  0D14               	mullw	20
 24539  015B3C  0EE2               	movlw	low _lBuffer
 24540  015B3E  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 24541  015B40  0E03               	movlw	high _lBuffer
 24542  015B42  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
 24543  015B44  50F3               	movf	prodl,w,c
 24544  015B46  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 24545  015B48  50F4               	movf	prodh,w,c
 24546  015B4A  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 24547  015B4C  5046               	movf	_lBufferX,w,c
 24548  015B4E  0D01               	mullw	1
 24549  015B50  50F3               	movf	prodl,w,c
 24550  015B52  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 24551  015B54  6ED9               	movwf	fsr2l,c
 24552  015B56  50F4               	movf	prodh,w,c
 24553  015B58  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 24554  015B5A  6EDA               	movwf	fsr2h,c
 24555  015B5C  50DF               	movf	indf2,w,c
 24556  015B5E  0B7F               	andlw	127
 24557  015B60  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
 24558  015B62  B4D8               	btfsc	status,2,c
 24559  015B64  D023               	goto	l1047
 24560                           
 24561                           ; BSR set to: 0
 24562                           ;Console.c: 351: {
 24563                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 24564  015B66  0E01               	movlw	1
 24565  015B68  6E4D               	movwf	_change,c
 24566                           
 24567                           ; BSR set to: 0
 24568  015B6A  5045               	movf	_lBufferY,w,c
 24569  015B6C  0D14               	mullw	20
 24570  015B6E  0EE2               	movlw	low _lBuffer
 24571  015B70  6F70               	movwf	??_Console_PrintChar& (0+255),b
 24572  015B72  0E03               	movlw	high _lBuffer
 24573  015B74  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 24574  015B76  50F3               	movf	prodl,w,c
 24575  015B78  2770               	addwf	??_Console_PrintChar& (0+255),f,b
 24576  015B7A  50F4               	movf	prodh,w,c
 24577  015B7C  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 24578  015B7E  5046               	movf	_lBufferX,w,c
 24579  015B80  0D01               	mullw	1
 24580  015B82  50F3               	movf	prodl,w,c
 24581  015B84  2570               	addwf	??_Console_PrintChar& (0+255),w,b
 24582  015B86  6ED9               	movwf	fsr2l,c
 24583  015B88  50F4               	movf	prodh,w,c
 24584  015B8A  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 24585  015B8C  6EDA               	movwf	fsr2h,c
 24586  015B8E  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 24587  015B90  0980               	iorlw	128
 24588  015B92  6EDF               	movwf	indf2,c
 24589                           
 24590                           ; BSR set to: 0
 24591                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
 24592  015B94  5045               	movf	_lBufferY,w,c
 24593  015B96  0D02               	mullw	2
 24594  015B98  0E28               	movlw	low _lCBuffer
 24595  015B9A  24F3               	addwf	prodl,w,c
 24596  015B9C  6ED9               	movwf	fsr2l,c
 24597  015B9E  0E03               	movlw	high _lCBuffer
 24598  015BA0  20F4               	addwfc	prodh,w,c
 24599  015BA2  6EDA               	movwf	fsr2h,c
 24600  015BA4  C1E4  FFDE         	movff	_gForecolour,postinc2
 24601  015BA8  C1E5  FFDD         	movff	_gForecolour+1,postdec2
 24602  015BAC                     l1047:
 24603                           
 24604                           ; BSR set to: 0
 24605                           ;Console.c: 354: }
 24606                           ;Console.c: 368: if(Console_IncrementCursor())
 24607                           
 24608                           ; BSR set to: 0
 24609  015BAC  EC05  F0BF         	call	_Console_IncrementCursor	;wreg free
 24610  015BB0  0900               	iorlw	0
 24611  015BB2  B4D8               	btfsc	status,2,c
 24612  015BB4  0012               	return	
 24613                           
 24614                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 24615  015BB6  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 24616  015BBA  0E7F               	movlw	127
 24617  015BBC  0100               	movlb	0	; () banked
 24618  015BBE  1770               	andwf	??_Console_PrintChar& (0+255),f,b
 24619  015BC0  5045               	movf	_lBufferY,w,c
 24620  015BC2  0D14               	mullw	20
 24621  015BC4  0EE2               	movlw	low _lBuffer
 24622  015BC6  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 24623  015BC8  0E03               	movlw	high _lBuffer
 24624  015BCA  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
 24625  015BCC  50F3               	movf	prodl,w,c
 24626  015BCE  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 24627  015BD0  50F4               	movf	prodh,w,c
 24628  015BD2  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 24629  015BD4  5046               	movf	_lBufferX,w,c
 24630  015BD6  0D01               	mullw	1
 24631  015BD8  50F3               	movf	prodl,w,c
 24632  015BDA  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 24633  015BDC  6ED9               	movwf	fsr2l,c
 24634  015BDE  50F4               	movf	prodh,w,c
 24635  015BE0  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 24636  015BE2  6EDA               	movwf	fsr2h,c
 24637  015BE4  50DF               	movf	indf2,w,c
 24638  015BE6  0B7F               	andlw	127
 24639  015BE8  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
 24640  015BEA  B4D8               	btfsc	status,2,c
 24641  015BEC  0012               	return	
 24642                           
 24643                           ; BSR set to: 0
 24644                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 24645  015BEE  0E01               	movlw	1
 24646  015BF0  6E4D               	movwf	_change,c
 24647                           
 24648                           ; BSR set to: 0
 24649  015BF2  5045               	movf	_lBufferY,w,c
 24650  015BF4  0D14               	mullw	20
 24651  015BF6  0EE2               	movlw	low _lBuffer
 24652  015BF8  6F70               	movwf	??_Console_PrintChar& (0+255),b
 24653  015BFA  0E03               	movlw	high _lBuffer
 24654  015BFC  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 24655  015BFE  50F3               	movf	prodl,w,c
 24656  015C00  2770               	addwf	??_Console_PrintChar& (0+255),f,b
 24657  015C02  50F4               	movf	prodh,w,c
 24658  015C04  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 24659  015C06  5046               	movf	_lBufferX,w,c
 24660  015C08  0D01               	mullw	1
 24661  015C0A  50F3               	movf	prodl,w,c
 24662  015C0C  2570               	addwf	??_Console_PrintChar& (0+255),w,b
 24663  015C0E  6ED9               	movwf	fsr2l,c
 24664  015C10  50F4               	movf	prodh,w,c
 24665  015C12  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 24666  015C14  6EDA               	movwf	fsr2h,c
 24667  015C16  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 24668  015C18  0980               	iorlw	128
 24669  015C1A  6EDF               	movwf	indf2,c
 24670                           
 24671                           ; BSR set to: 0
 24672                           ;Console.c: 372: };
 24673                           
 24674                           ; BSR set to: 0
 24675                           ;Console.c: 371: return;
 24676                           
 24677                           ; BSR set to: 0
 24678                           
 24679                           ; BSR set to: 0
 24680  015C1C  0012               	return	
 24681  015C1E                     l1036:
 24682                           
 24683                           ; BSR set to: 0
 24684  015C1E  0100               	movlb	0	; () banked
 24685  015C20  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 24686                           
 24687                           ; Switch size 1, requested type "space"
 24688                           ; Number of cases is 8, Range of values is 7 to 35
 24689                           ; switch strategies available:
 24690                           ; Name         Instructions Cycles
 24691                           ; simple_byte           25    13 (average)
 24692                           ;	Chosen strategy is simple_byte
 24693  015C22  0A07               	xorlw	7	; case 7
 24694  015C24  B4D8               	btfsc	status,2,c
 24695  015C26  D77D               	goto	l1043
 24696  015C28  0A0F               	xorlw	15	; case 8
 24697  015C2A  B4D8               	btfsc	status,2,c
 24698  015C2C  D771               	goto	l1040
 24699  015C2E  0A01               	xorlw	1	; case 9
 24700  015C30  B4D8               	btfsc	status,2,c
 24701  015C32  D774               	goto	l1042
 24702  015C34  0A03               	xorlw	3	; case 10
 24703  015C36  B4D8               	btfsc	status,2,c
 24704  015C38  D768               	goto	l1037
 24705  015C3A  0A06               	xorlw	6	; case 12
 24706  015C3C  B4D8               	btfsc	status,2,c
 24707  015C3E  D76B               	goto	l1041
 24708  015C40  0A01               	xorlw	1	; case 13
 24709  015C42  B4D8               	btfsc	status,2,c
 24710  015C44  D762               	goto	l1037
 24711  015C46  0A2D               	xorlw	45	; case 32
 24712  015C48  B4D8               	btfsc	status,2,c
 24713  015C4A  D771               	goto	l1045
 24714  015C4C  0A03               	xorlw	3	; case 35
 24715  015C4E  B4D8               	btfsc	status,2,c
 24716  015C50  D76B               	goto	l1044
 24717  015C52  D76D               	goto	l1045
 24718  015C54                     __end_of_Console_PrintChar:
 24719                           	opt stack 0
 24720                           tosu	equ	0xFFF
 24721                           tosh	equ	0xFFE
 24722                           tosl	equ	0xFFD
 24723                           pclath	equ	0xFFA
 24724                           tblptru	equ	0xFF8
 24725                           tblptrh	equ	0xFF7
 24726                           tblptrl	equ	0xFF6
 24727                           tablat	equ	0xFF5
 24728                           prodh	equ	0xFF4
 24729                           prodl	equ	0xFF3
 24730                           intcon	equ	0xFF2
 24731                           indf0	equ	0xFEF
 24732                           postinc0	equ	0xFEE
 24733                           fsr0h	equ	0xFEA
 24734                           fsr0l	equ	0xFE9
 24735                           wreg	equ	0xFE8
 24736                           indf1	equ	0xFE7
 24737                           postdec1	equ	0xFE5
 24738                           fsr1h	equ	0xFE2
 24739                           fsr1l	equ	0xFE1
 24740                           indf2	equ	0xFDF
 24741                           postinc2	equ	0xFDE
 24742                           postdec2	equ	0xFDD
 24743                           plusw2	equ	0xFDB
 24744                           fsr2h	equ	0xFDA
 24745                           fsr2l	equ	0xFD9
 24746                           status	equ	0xFD8
 24747                           
 24748 ;; *************** function _Console_Tab *****************
 24749 ;; Defined at:
 24750 ;;		line 260 in file "Library/Console.c"
 24751 ;; Parameters:    Size  Location     Type
 24752 ;;		None
 24753 ;; Auto vars:     Size  Location     Type
 24754 ;;  c               1   15[BANK0 ] unsigned char 
 24755 ;;  i               1   14[BANK0 ] unsigned char 
 24756 ;;  t               1   13[BANK0 ] unsigned char 
 24757 ;; Return value:  Size  Location     Type
 24758 ;;                  1    wreg      void 
 24759 ;; Registers used:
 24760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24761 ;; Tracked objects:
 24762 ;;		On entry : 0/0
 24763 ;;		On exit  : 0/0
 24764 ;;		Unchanged: 0/0
 24765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24767 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24768 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24769 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24770 ;;Total ram usage:        8 bytes
 24771 ;; Hardware stack levels used:    1
 24772 ;; Hardware stack levels required when called:    9
 24773 ;; This function calls:
 24774 ;;		_Console_ClearCursor
 24775 ;;		_Console_IncrementCursor
 24776 ;;		___awdiv
 24777 ;; This function is called by:
 24778 ;;		_Console_PrintChar
 24779 ;; This function uses a non-reentrant model
 24780 ;;
 24781                           
 24782                           	psect	text105
 24783  01705E                     __ptext105:
 24784                           	opt stack 0
 24785  01705E                     _Console_Tab:
 24786                           	opt stack 18
 24787                           
 24788                           ;Console.c: 262: UINT8 i = 0;
 24789                           
 24790                           ;incstack = 0
 24791  01705E  0E00               	movlw	0
 24792  017060  0100               	movlb	0	; () banked
 24793  017062  6F6E               	movwf	Console_Tab@i& (0+255),b
 24794                           
 24795                           ; BSR set to: 0
 24796                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
 24797  017064  0EFA               	movlw	250
 24798  017066  2448               	addwf	_gCursor,w,c
 24799  017068  6F60               	movwf	___awdiv@dividend& (0+255),b
 24800  01706A  0EFF               	movlw	255
 24801  01706C  2049               	addwfc	_gCursor+1,w,c
 24802  01706E  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
 24803  017070  0E00               	movlw	0
 24804  017072  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 24805  017074  0E06               	movlw	6
 24806  017076  6F62               	movwf	___awdiv@divisor& (0+255),b
 24807  017078  EC1C  F0BA         	call	___awdiv	;wreg free
 24808  01707C  0100               	movlb	0	; () banked
 24809  01707E  5160               	movf	?___awdiv& (0+255),w,b
 24810  017080  6F6F               	movwf	Console_Tab@c& (0+255),b
 24811                           
 24812                           ; BSR set to: 0
 24813                           ;Console.c: 264: UINT8 t = c/4;
 24814  017082  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
 24815  017086  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
 24816  017088  0E00               	movlw	0
 24817  01708A  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 24818  01708C  0E04               	movlw	4
 24819  01708E  6F62               	movwf	___awdiv@divisor& (0+255),b
 24820  017090  EC1C  F0BA         	call	___awdiv	;wreg free
 24821  017094  0100               	movlb	0	; () banked
 24822  017096  5160               	movf	?___awdiv& (0+255),w,b
 24823  017098  6F6D               	movwf	Console_Tab@t& (0+255),b
 24824                           
 24825                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
 24826  01709A  0E00               	movlw	0
 24827  01709C  6F6E               	movwf	Console_Tab@i& (0+255),b
 24828  01709E  D006               	goto	l1009
 24829  0170A0                     
 24830                           ; BSR set to: 0
 24831                           ;Console.c: 266: {
 24832                           ;Console.c: 267: Console_ClearCursor();
 24833                           
 24834                           ; BSR set to: 0
 24835  0170A0  ECAA  F0C3         	call	_Console_ClearCursor	;wreg free
 24836                           
 24837                           ;Console.c: 268: Console_IncrementCursor();
 24838  0170A4  EC05  F0BF         	call	_Console_IncrementCursor	;wreg free
 24839  0170A8  0100               	movlb	0	; () banked
 24840  0170AA  2B6E               	incf	Console_Tab@i& (0+255),f,b
 24841  0170AC                     l1009:
 24842                           
 24843                           ; BSR set to: 0
 24844                           
 24845                           ; BSR set to: 0
 24846  0170AC  516D               	movf	Console_Tab@t& (0+255),w,b
 24847  0170AE  0D04               	mullw	4
 24848  0170B0  1EF3               	comf	prodl,f,c
 24849  0170B2  1EF4               	comf	prodh,f,c
 24850  0170B4  4AF3               	infsnz	prodl,f,c
 24851  0170B6  2AF4               	incf	prodh,f,c
 24852  0170B8  516F               	movf	Console_Tab@c& (0+255),w,b
 24853  0170BA  6F68               	movwf	??_Console_Tab& (0+255),b
 24854  0170BC  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
 24855  0170BE  50F3               	movf	prodl,w,c
 24856  0170C0  2768               	addwf	??_Console_Tab& (0+255),f,b
 24857  0170C2  50F4               	movf	prodh,w,c
 24858  0170C4  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 24859  0170C6  1F68               	comf	??_Console_Tab& (0+255),f,b
 24860  0170C8  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
 24861  0170CA  4B68               	infsnz	??_Console_Tab& (0+255),f,b
 24862  0170CC  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
 24863  0170CE  0E04               	movlw	4
 24864  0170D0  2768               	addwf	??_Console_Tab& (0+255),f,b
 24865  0170D2  0E00               	movlw	0
 24866  0170D4  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 24867  0170D6  516E               	movf	Console_Tab@i& (0+255),w,b
 24868  0170D8  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
 24869  0170DA  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
 24870  0170DC  5168               	movf	??_Console_Tab& (0+255),w,b
 24871  0170DE  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
 24872  0170E0  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
 24873  0170E2  0A80               	xorlw	128
 24874  0170E4  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
 24875  0170E6  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
 24876  0170E8  0A80               	xorlw	128
 24877  0170EA  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
 24878  0170EC  B0D8               	btfsc	status,0,c
 24879  0170EE  0012               	return	
 24880  0170F0  D7D7               	goto	l1010
 24881  0170F2                     __end_of_Console_Tab:
 24882                           	opt stack 0
 24883                           tosu	equ	0xFFF
 24884                           tosh	equ	0xFFE
 24885                           tosl	equ	0xFFD
 24886                           pclath	equ	0xFFA
 24887                           tblptru	equ	0xFF8
 24888                           tblptrh	equ	0xFF7
 24889                           tblptrl	equ	0xFF6
 24890                           tablat	equ	0xFF5
 24891                           prodh	equ	0xFF4
 24892                           prodl	equ	0xFF3
 24893                           intcon	equ	0xFF2
 24894                           indf0	equ	0xFEF
 24895                           postinc0	equ	0xFEE
 24896                           fsr0h	equ	0xFEA
 24897                           fsr0l	equ	0xFE9
 24898                           wreg	equ	0xFE8
 24899                           indf1	equ	0xFE7
 24900                           postdec1	equ	0xFE5
 24901                           fsr1h	equ	0xFE2
 24902                           fsr1l	equ	0xFE1
 24903                           indf2	equ	0xFDF
 24904                           postinc2	equ	0xFDE
 24905                           postdec2	equ	0xFDD
 24906                           plusw2	equ	0xFDB
 24907                           fsr2h	equ	0xFDA
 24908                           fsr2l	equ	0xFD9
 24909                           status	equ	0xFD8
 24910                           
 24911 ;; *************** function _Console_IncrementCursor *****************
 24912 ;; Defined at:
 24913 ;;		line 243 in file "Library/Console.c"
 24914 ;; Parameters:    Size  Location     Type
 24915 ;;		None
 24916 ;; Auto vars:     Size  Location     Type
 24917 ;;		None
 24918 ;; Return value:  Size  Location     Type
 24919 ;;                  1    wreg      unsigned char 
 24920 ;; Registers used:
 24921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24922 ;; Tracked objects:
 24923 ;;		On entry : 0/0
 24924 ;;		On exit  : 0/0
 24925 ;;		Unchanged: 0/0
 24926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24929 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24930 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24931 ;;Total ram usage:        2 bytes
 24932 ;; Hardware stack levels used:    1
 24933 ;; Hardware stack levels required when called:    8
 24934 ;; This function calls:
 24935 ;;		_Console_FormFeed
 24936 ;;		_Console_NewLine
 24937 ;; This function is called by:
 24938 ;;		_Console_Tab
 24939 ;;		_Console_PrintChar
 24940 ;; This function uses a non-reentrant model
 24941 ;;
 24942                           
 24943                           	psect	text106
 24944  017E0A                     __ptext106:
 24945                           	opt stack 0
 24946  017E0A                     _Console_IncrementCursor:
 24947                           	opt stack 18
 24948                           
 24949                           ;Console.c: 246: lBufferX += 1;
 24950                           
 24951                           ; BSR set to: 0
 24952                           ;incstack = 0
 24953  017E0A  2A46               	incf	_lBufferX,f,c
 24954                           
 24955                           ;Console.c: 248: gCursor.x += 6;
 24956  017E0C  0E06               	movlw	6
 24957  017E0E  2648               	addwf	_gCursor,f,c
 24958  017E10  0E00               	movlw	0
 24959  017E12  2249               	addwfc	_gCursor+1,f,c
 24960                           
 24961                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
 24962  017E14  0E06               	movlw	6
 24963  017E16  2448               	addwf	_gCursor,w,c
 24964  017E18  0100               	movlb	0	; () banked
 24965  017E1A  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 24966  017E1C  0E00               	movlw	0
 24967  017E1E  2049               	addwfc	_gCursor+1,w,c
 24968  017E20  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 24969  017E22  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 24970  017E24  D007               	goto	l1004
 24971  017E26  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 24972  017E28  E103               	bnz	u10590
 24973  017E2A  0E80               	movlw	128
 24974  017E2C  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 24975  017E2E  B0D8               	btfsc	status,0,c
 24976  017E30                     u10590:
 24977                           
 24978                           ; BSR set to: 0
 24979                           ;Console.c: 250: Console_NewLine();
 24980  017E30  EC5A  F0BB         	call	_Console_NewLine	;wreg free
 24981  017E34                     l1004:
 24982                           
 24983                           ;Console.c: 251: if (gCursor.y + 8>= 128)
 24984  017E34  0E08               	movlw	8
 24985  017E36  244A               	addwf	_gCursor+2,w,c
 24986  017E38  0100               	movlb	0	; () banked
 24987  017E3A  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 24988  017E3C  0E00               	movlw	0
 24989  017E3E  204B               	addwfc	_gCursor+3,w,c
 24990  017E40  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 24991  017E42  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 24992  017E44  D00A               	goto	l1005
 24993  017E46  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 24994  017E48  E104               	bnz	u10600
 24995  017E4A  0E80               	movlw	128
 24996  017E4C  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 24997  017E4E  A0D8               	btfss	status,0,c
 24998  017E50  D004               	goto	l1005
 24999  017E52                     u10600:
 25000                           
 25001                           ; BSR set to: 0
 25002                           ;Console.c: 252: {
 25003                           ;Console.c: 253: Console_FormFeed();
 25004  017E52  EC7F  F0BC         	call	_Console_FormFeed	;wreg free
 25005                           
 25006                           ;Console.c: 254: return 1;
 25007  017E56  0E01               	movlw	1
 25008  017E58  0012               	return	
 25009  017E5A                     l1005:
 25010                           
 25011                           ;Console.c: 255: }
 25012                           ;Console.c: 257: return 0;
 25013  017E5A  0E00               	movlw	0
 25014  017E5C  0012               	return	
 25015  017E5E                     __end_of_Console_IncrementCursor:
 25016                           	opt stack 0
 25017                           tosu	equ	0xFFF
 25018                           tosh	equ	0xFFE
 25019                           tosl	equ	0xFFD
 25020                           pclath	equ	0xFFA
 25021                           tblptru	equ	0xFF8
 25022                           tblptrh	equ	0xFF7
 25023                           tblptrl	equ	0xFF6
 25024                           tablat	equ	0xFF5
 25025                           prodh	equ	0xFF4
 25026                           prodl	equ	0xFF3
 25027                           intcon	equ	0xFF2
 25028                           indf0	equ	0xFEF
 25029                           postinc0	equ	0xFEE
 25030                           fsr0h	equ	0xFEA
 25031                           fsr0l	equ	0xFE9
 25032                           wreg	equ	0xFE8
 25033                           indf1	equ	0xFE7
 25034                           postdec1	equ	0xFE5
 25035                           fsr1h	equ	0xFE2
 25036                           fsr1l	equ	0xFE1
 25037                           indf2	equ	0xFDF
 25038                           postinc2	equ	0xFDE
 25039                           postdec2	equ	0xFDD
 25040                           plusw2	equ	0xFDB
 25041                           fsr2h	equ	0xFDA
 25042                           fsr2l	equ	0xFD9
 25043                           status	equ	0xFD8
 25044                           
 25045 ;; *************** function _Console_NewLine *****************
 25046 ;; Defined at:
 25047 ;;		line 175 in file "Library/Console.c"
 25048 ;; Parameters:    Size  Location     Type
 25049 ;;		None
 25050 ;; Auto vars:     Size  Location     Type
 25051 ;;		None
 25052 ;; Return value:  Size  Location     Type
 25053 ;;                  1    wreg      void 
 25054 ;; Registers used:
 25055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 25056 ;; Tracked objects:
 25057 ;;		On entry : 0/0
 25058 ;;		On exit  : 0/0
 25059 ;;		Unchanged: 0/0
 25060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25063 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25064 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25065 ;;Total ram usage:        2 bytes
 25066 ;; Hardware stack levels used:    1
 25067 ;; Hardware stack levels required when called:    7
 25068 ;; This function calls:
 25069 ;;		Nothing
 25070 ;; This function is called by:
 25071 ;;		_Console_IncrementCursor
 25072 ;;		_Console_PrintChar
 25073 ;; This function uses a non-reentrant model
 25074 ;;
 25075                           
 25076                           	psect	text107
 25077  0176B4                     __ptext107:
 25078                           	opt stack 0
 25079  0176B4                     _Console_NewLine:
 25080                           	opt stack 18
 25081                           
 25082                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
 25083                           
 25084                           ;incstack = 0
 25085  0176B4  D02D               	goto	l983
 25086  0176B6                     
 25087                           ;Console.c: 179: {
 25088                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
 25089  0176B6  5045               	movf	_lBufferY,w,c
 25090  0176B8  0D14               	mullw	20
 25091  0176BA  0EE2               	movlw	low _lBuffer
 25092  0176BC  0100               	movlb	0	; () banked
 25093  0176BE  6F60               	movwf	??_Console_NewLine& (0+255),b
 25094  0176C0  0E03               	movlw	high _lBuffer
 25095  0176C2  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 25096  0176C4  50F3               	movf	prodl,w,c
 25097  0176C6  2760               	addwf	??_Console_NewLine& (0+255),f,b
 25098  0176C8  50F4               	movf	prodh,w,c
 25099  0176CA  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 25100  0176CC  5046               	movf	_lBufferX,w,c
 25101  0176CE  0D01               	mullw	1
 25102  0176D0  50F3               	movf	prodl,w,c
 25103  0176D2  2560               	addwf	??_Console_NewLine& (0+255),w,b
 25104  0176D4  6ED9               	movwf	fsr2l,c
 25105  0176D6  50F4               	movf	prodh,w,c
 25106  0176D8  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 25107  0176DA  6EDA               	movwf	fsr2h,c
 25108  0176DC  50DF               	movf	indf2,w,c
 25109  0176DE  B4D8               	btfsc	status,2,c
 25110  0176E0  D016               	goto	l985
 25111                           
 25112                           ; BSR set to: 0
 25113                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
 25114  0176E2  0E01               	movlw	1
 25115  0176E4  6E4D               	movwf	_change,c
 25116                           
 25117                           ; BSR set to: 0
 25118  0176E6  5045               	movf	_lBufferY,w,c
 25119  0176E8  0D14               	mullw	20
 25120  0176EA  0EE2               	movlw	low _lBuffer
 25121  0176EC  6F60               	movwf	??_Console_NewLine& (0+255),b
 25122  0176EE  0E03               	movlw	high _lBuffer
 25123  0176F0  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 25124  0176F2  50F3               	movf	prodl,w,c
 25125  0176F4  2760               	addwf	??_Console_NewLine& (0+255),f,b
 25126  0176F6  50F4               	movf	prodh,w,c
 25127  0176F8  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 25128  0176FA  5046               	movf	_lBufferX,w,c
 25129  0176FC  0D01               	mullw	1
 25130  0176FE  50F3               	movf	prodl,w,c
 25131  017700  2560               	addwf	??_Console_NewLine& (0+255),w,b
 25132  017702  6ED9               	movwf	fsr2l,c
 25133  017704  50F4               	movf	prodh,w,c
 25134  017706  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 25135  017708  6EDA               	movwf	fsr2h,c
 25136  01770A  0E80               	movlw	128
 25137  01770C  6EDF               	movwf	indf2,c
 25138  01770E                     l985:
 25139                           
 25140                           ; BSR set to: 0
 25141                           ;Console.c: 182: lBufferX ++;
 25142                           
 25143                           ; BSR set to: 0
 25144  01770E  2A46               	incf	_lBufferX,f,c
 25145  017710                     l983:
 25146                           
 25147                           ; BSR set to: 0
 25148  017710  0E13               	movlw	19
 25149  017712  6446               	cpfsgt	_lBufferX,c
 25150  017714  D7D0               	goto	l984
 25151                           
 25152                           ;Console.c: 183: }
 25153                           ;Console.c: 185: lBufferX = 0;
 25154  017716  0E00               	movlw	0
 25155  017718  6E46               	movwf	_lBufferX,c
 25156                           
 25157                           ;Console.c: 186: lBufferY ++;
 25158  01771A  2A45               	incf	_lBufferY,f,c
 25159                           
 25160                           ;Console.c: 188: gCursor.y += 8;
 25161  01771C  0E08               	movlw	8
 25162  01771E  264A               	addwf	_gCursor+2,f,c
 25163  017720  0E00               	movlw	0
 25164  017722  224B               	addwfc	_gCursor+3,f,c
 25165                           
 25166                           ;Console.c: 189: gCursor.x = 6;
 25167  017724  0E00               	movlw	0
 25168  017726  6E49               	movwf	_gCursor+1,c
 25169  017728  0E06               	movlw	6
 25170  01772A  6E48               	movwf	_gCursor,c
 25171  01772C  0012               	return		;funcret
 25172  01772E                     __end_of_Console_NewLine:
 25173                           	opt stack 0
 25174                           tosu	equ	0xFFF
 25175                           tosh	equ	0xFFE
 25176                           tosl	equ	0xFFD
 25177                           pclath	equ	0xFFA
 25178                           tblptru	equ	0xFF8
 25179                           tblptrh	equ	0xFF7
 25180                           tblptrl	equ	0xFF6
 25181                           tablat	equ	0xFF5
 25182                           prodh	equ	0xFF4
 25183                           prodl	equ	0xFF3
 25184                           intcon	equ	0xFF2
 25185                           indf0	equ	0xFEF
 25186                           postinc0	equ	0xFEE
 25187                           fsr0h	equ	0xFEA
 25188                           fsr0l	equ	0xFE9
 25189                           wreg	equ	0xFE8
 25190                           indf1	equ	0xFE7
 25191                           postdec1	equ	0xFE5
 25192                           fsr1h	equ	0xFE2
 25193                           fsr1l	equ	0xFE1
 25194                           indf2	equ	0xFDF
 25195                           postinc2	equ	0xFDE
 25196                           postdec2	equ	0xFDD
 25197                           plusw2	equ	0xFDB
 25198                           fsr2h	equ	0xFDA
 25199                           fsr2l	equ	0xFD9
 25200                           status	equ	0xFD8
 25201                           
 25202 ;; *************** function _Console_FormFeed *****************
 25203 ;; Defined at:
 25204 ;;		line 192 in file "Library/Console.c"
 25205 ;; Parameters:    Size  Location     Type
 25206 ;;		None
 25207 ;; Auto vars:     Size  Location     Type
 25208 ;;  y               1    3[BANK0 ] unsigned char 
 25209 ;;  x               1    2[BANK0 ] unsigned char 
 25210 ;; Return value:  Size  Location     Type
 25211 ;;                  1    wreg      void 
 25212 ;; Registers used:
 25213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 25214 ;; Tracked objects:
 25215 ;;		On entry : 0/0
 25216 ;;		On exit  : 0/0
 25217 ;;		Unchanged: 0/0
 25218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25220 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25222 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25223 ;;Total ram usage:        4 bytes
 25224 ;; Hardware stack levels used:    1
 25225 ;; Hardware stack levels required when called:    7
 25226 ;; This function calls:
 25227 ;;		Nothing
 25228 ;; This function is called by:
 25229 ;;		_Console_IncrementCursor
 25230 ;;		_Console_PrintChar
 25231 ;; This function uses a non-reentrant model
 25232 ;;
 25233                           
 25234                           	psect	text108
 25235  0178FE                     __ptext108:
 25236                           	opt stack 0
 25237  0178FE                     _Console_FormFeed:
 25238                           	opt stack 18
 25239                           
 25240                           ;Console.c: 195: lBufferX = 0;
 25241                           
 25242                           ;incstack = 0
 25243  0178FE  0E00               	movlw	0
 25244  017900  6E46               	movwf	_lBufferX,c
 25245                           
 25246                           ;Console.c: 196: lBufferY = 0;
 25247  017902  0E00               	movlw	0
 25248  017904  6E45               	movwf	_lBufferY,c
 25249                           
 25250                           ;Console.c: 197: UINT8 x, y;
 25251                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
 25252  017906  0E00               	movlw	0
 25253  017908  0100               	movlb	0	; () banked
 25254  01790A  6F63               	movwf	Console_FormFeed@y& (0+255),b
 25255  01790C                     l13451:
 25256                           
 25257                           ; BSR set to: 0
 25258  01790C  0E0E               	movlw	14
 25259  01790E  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
 25260  017910  D001               	goto	l990
 25261  017912  D020               	goto	u10550
 25262  017914                     l990:
 25263                           
 25264                           ; BSR set to: 0
 25265                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
 25266                           
 25267                           ; BSR set to: 0
 25268  017914  0E00               	movlw	0
 25269  017916  6F62               	movwf	Console_FormFeed@x& (0+255),b
 25270  017918                     l13457:
 25271                           
 25272                           ; BSR set to: 0
 25273  017918  0E13               	movlw	19
 25274  01791A  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
 25275  01791C  D001               	goto	l992
 25276  01791E  D018               	goto	u10540
 25277  017920                     l992:
 25278                           
 25279                           ; BSR set to: 0
 25280                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
 25281                           
 25282                           ; BSR set to: 0
 25283  017920  0E01               	movlw	1
 25284  017922  6E4D               	movwf	_change,c
 25285                           
 25286                           ; BSR set to: 0
 25287  017924  5163               	movf	Console_FormFeed@y& (0+255),w,b
 25288  017926  0D14               	mullw	20
 25289  017928  0EE2               	movlw	low _lBuffer
 25290  01792A  6F60               	movwf	??_Console_FormFeed& (0+255),b
 25291  01792C  0E03               	movlw	high _lBuffer
 25292  01792E  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
 25293  017930  50F3               	movf	prodl,w,c
 25294  017932  2760               	addwf	??_Console_FormFeed& (0+255),f,b
 25295  017934  50F4               	movf	prodh,w,c
 25296  017936  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
 25297  017938  5162               	movf	Console_FormFeed@x& (0+255),w,b
 25298  01793A  0D01               	mullw	1
 25299  01793C  50F3               	movf	prodl,w,c
 25300  01793E  2560               	addwf	??_Console_FormFeed& (0+255),w,b
 25301  017940  6ED9               	movwf	fsr2l,c
 25302  017942  50F4               	movf	prodh,w,c
 25303  017944  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
 25304  017946  6EDA               	movwf	fsr2h,c
 25305  017948  0E80               	movlw	128
 25306  01794A  6EDF               	movwf	indf2,c
 25307                           
 25308                           ; BSR set to: 0
 25309  01794C  2B62               	incf	Console_FormFeed@x& (0+255),f,b
 25310  01794E  D7E4               	goto	l13457
 25311  017950                     u10540:
 25312                           
 25313                           ; BSR set to: 0
 25314                           
 25315                           ; BSR set to: 0
 25316  017950  2B63               	incf	Console_FormFeed@y& (0+255),f,b
 25317  017952  D7DC               	goto	l13451
 25318  017954                     u10550:
 25319                           
 25320                           ; BSR set to: 0
 25321                           ;Console.c: 204: clearall = 1;
 25322                           
 25323                           ; BSR set to: 0
 25324  017954  0E01               	movlw	1
 25325  017956  6E47               	movwf	_clearall,c
 25326                           
 25327                           ;Console.c: 205: gCursor.x = 6;
 25328  017958  0E00               	movlw	0
 25329  01795A  6E49               	movwf	_gCursor+1,c
 25330  01795C  0E06               	movlw	6
 25331  01795E  6E48               	movwf	_gCursor,c
 25332                           
 25333                           ;Console.c: 206: gCursor.y = 6;
 25334  017960  0E00               	movlw	0
 25335  017962  6E4B               	movwf	_gCursor+3,c
 25336  017964  0E06               	movlw	6
 25337  017966  6E4A               	movwf	_gCursor+2,c
 25338                           
 25339                           ; BSR set to: 0
 25340  017968  0012               	return		;funcret
 25341  01796A                     __end_of_Console_FormFeed:
 25342                           	opt stack 0
 25343                           tosu	equ	0xFFF
 25344                           tosh	equ	0xFFE
 25345                           tosl	equ	0xFFD
 25346                           pclath	equ	0xFFA
 25347                           tblptru	equ	0xFF8
 25348                           tblptrh	equ	0xFF7
 25349                           tblptrl	equ	0xFF6
 25350                           tablat	equ	0xFF5
 25351                           prodh	equ	0xFF4
 25352                           prodl	equ	0xFF3
 25353                           intcon	equ	0xFF2
 25354                           indf0	equ	0xFEF
 25355                           postinc0	equ	0xFEE
 25356                           fsr0h	equ	0xFEA
 25357                           fsr0l	equ	0xFE9
 25358                           wreg	equ	0xFE8
 25359                           indf1	equ	0xFE7
 25360                           postdec1	equ	0xFE5
 25361                           fsr1h	equ	0xFE2
 25362                           fsr1l	equ	0xFE1
 25363                           indf2	equ	0xFDF
 25364                           postinc2	equ	0xFDE
 25365                           postdec2	equ	0xFDD
 25366                           plusw2	equ	0xFDB
 25367                           fsr2h	equ	0xFDA
 25368                           fsr2l	equ	0xFD9
 25369                           status	equ	0xFD8
 25370                           
 25371 ;; *************** function _Console_ResetCursor *****************
 25372 ;; Defined at:
 25373 ;;		line 297 in file "Library/Console.c"
 25374 ;; Parameters:    Size  Location     Type
 25375 ;;		None
 25376 ;; Auto vars:     Size  Location     Type
 25377 ;;		None
 25378 ;; Return value:  Size  Location     Type
 25379 ;;                  1    wreg      void 
 25380 ;; Registers used:
 25381 ;;		wreg, status,2
 25382 ;; Tracked objects:
 25383 ;;		On entry : 0/0
 25384 ;;		On exit  : 0/0
 25385 ;;		Unchanged: 0/0
 25386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25391 ;;Total ram usage:        0 bytes
 25392 ;; Hardware stack levels used:    1
 25393 ;; Hardware stack levels required when called:    7
 25394 ;; This function calls:
 25395 ;;		Nothing
 25396 ;; This function is called by:
 25397 ;;		_Console_PrintChar
 25398 ;; This function uses a non-reentrant model
 25399 ;;
 25400                           
 25401                           	psect	text109
 25402  018A1C                     __ptext109:
 25403                           	opt stack 0
 25404  018A1C                     _Console_ResetCursor:
 25405                           	opt stack 20
 25406                           
 25407                           ;Console.c: 299: gCursor.x = 6;
 25408                           
 25409                           ; BSR set to: 0
 25410                           ;incstack = 0
 25411  018A1C  0E00               	movlw	0
 25412  018A1E  6E49               	movwf	_gCursor+1,c
 25413  018A20  0E06               	movlw	6
 25414  018A22  6E48               	movwf	_gCursor,c
 25415                           
 25416                           ;Console.c: 300: gCursor.y = 6;
 25417  018A24  0E00               	movlw	0
 25418  018A26  6E4B               	movwf	_gCursor+3,c
 25419  018A28  0E06               	movlw	6
 25420  018A2A  6E4A               	movwf	_gCursor+2,c
 25421                           
 25422                           ;Console.c: 303: lBufferX = 0;
 25423  018A2C  0E00               	movlw	0
 25424  018A2E  6E46               	movwf	_lBufferX,c
 25425                           
 25426                           ;Console.c: 304: lBufferY = 0;
 25427  018A30  0E00               	movlw	0
 25428  018A32  6E45               	movwf	_lBufferY,c
 25429  018A34  0012               	return		;funcret
 25430  018A36                     __end_of_Console_ResetCursor:
 25431                           	opt stack 0
 25432                           tosu	equ	0xFFF
 25433                           tosh	equ	0xFFE
 25434                           tosl	equ	0xFFD
 25435                           pclath	equ	0xFFA
 25436                           tblptru	equ	0xFF8
 25437                           tblptrh	equ	0xFF7
 25438                           tblptrl	equ	0xFF6
 25439                           tablat	equ	0xFF5
 25440                           prodh	equ	0xFF4
 25441                           prodl	equ	0xFF3
 25442                           intcon	equ	0xFF2
 25443                           indf0	equ	0xFEF
 25444                           postinc0	equ	0xFEE
 25445                           fsr0h	equ	0xFEA
 25446                           fsr0l	equ	0xFE9
 25447                           wreg	equ	0xFE8
 25448                           indf1	equ	0xFE7
 25449                           postdec1	equ	0xFE5
 25450                           fsr1h	equ	0xFE2
 25451                           fsr1l	equ	0xFE1
 25452                           indf2	equ	0xFDF
 25453                           postinc2	equ	0xFDE
 25454                           postdec2	equ	0xFDD
 25455                           plusw2	equ	0xFDB
 25456                           fsr2h	equ	0xFDA
 25457                           fsr2l	equ	0xFD9
 25458                           status	equ	0xFD8
 25459                           
 25460 ;; *************** function _Console_Backspace *****************
 25461 ;; Defined at:
 25462 ;;		line 209 in file "Library/Console.c"
 25463 ;; Parameters:    Size  Location     Type
 25464 ;;		None
 25465 ;; Auto vars:     Size  Location     Type
 25466 ;;		None
 25467 ;; Return value:  Size  Location     Type
 25468 ;;                  1    wreg      void 
 25469 ;; Registers used:
 25470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25471 ;; Tracked objects:
 25472 ;;		On entry : 0/0
 25473 ;;		On exit  : 0/0
 25474 ;;		Unchanged: 0/0
 25475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25480 ;;Total ram usage:        0 bytes
 25481 ;; Hardware stack levels used:    1
 25482 ;; Hardware stack levels required when called:    8
 25483 ;; This function calls:
 25484 ;;		_Console_ClearCursor
 25485 ;; This function is called by:
 25486 ;;		_Console_PrintChar
 25487 ;; This function uses a non-reentrant model
 25488 ;;
 25489                           
 25490                           	psect	text110
 25491  01804C                     __ptext110:
 25492                           	opt stack 0
 25493  01804C                     _Console_Backspace:
 25494                           	opt stack 19
 25495                           
 25496                           ;Console.c: 211: if (lBufferX > 0)
 25497                           
 25498                           ;incstack = 0
 25499  01804C  5046               	movf	_lBufferX,w,c
 25500  01804E  B4D8               	btfsc	status,2,c
 25501  018050  D006               	goto	l997
 25502                           
 25503                           ;Console.c: 212: {
 25504                           ;Console.c: 213: gCursor.x -= 6;
 25505  018052  0EFA               	movlw	250
 25506  018054  2648               	addwf	_gCursor,f,c
 25507  018056  0EFF               	movlw	255
 25508  018058  2249               	addwfc	_gCursor+1,f,c
 25509                           
 25510                           ;Console.c: 216: lBufferX --;
 25511  01805A  0646               	decf	_lBufferX,f,c
 25512                           
 25513                           ;Console.c: 218: }
 25514  01805C  D01B               	goto	l1000
 25515  01805E                     l997:
 25516                           
 25517                           ;Console.c: 219: else if (lBufferY > 0)
 25518  01805E  5045               	movf	_lBufferY,w,c
 25519  018060  B4D8               	btfsc	status,2,c
 25520  018062  D00C               	goto	l999
 25521                           
 25522                           ;Console.c: 220: {
 25523                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
 25524  018064  0E00               	movlw	0
 25525  018066  6E49               	movwf	_gCursor+1,c
 25526  018068  0E72               	movlw	114
 25527  01806A  6E48               	movwf	_gCursor,c
 25528                           
 25529                           ;Console.c: 222: gCursor.y -= 8;
 25530  01806C  0EF8               	movlw	248
 25531  01806E  264A               	addwf	_gCursor+2,f,c
 25532  018070  0EFF               	movlw	255
 25533  018072  224B               	addwfc	_gCursor+3,f,c
 25534                           
 25535                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
 25536  018074  0E13               	movlw	19
 25537  018076  6E46               	movwf	_lBufferX,c
 25538                           
 25539                           ;Console.c: 226: lBufferY --;
 25540  018078  0645               	decf	_lBufferY,f,c
 25541                           
 25542                           ;Console.c: 228: }
 25543  01807A  D00C               	goto	l1000
 25544  01807C                     l999:
 25545                           
 25546                           ;Console.c: 229: else
 25547                           ;Console.c: 230: {
 25548                           ;Console.c: 231: gCursor.x = 6;
 25549  01807C  0E00               	movlw	0
 25550  01807E  6E49               	movwf	_gCursor+1,c
 25551  018080  0E06               	movlw	6
 25552  018082  6E48               	movwf	_gCursor,c
 25553                           
 25554                           ;Console.c: 232: gCursor.y = 6;
 25555  018084  0E00               	movlw	0
 25556  018086  6E4B               	movwf	_gCursor+3,c
 25557  018088  0E06               	movlw	6
 25558  01808A  6E4A               	movwf	_gCursor+2,c
 25559                           
 25560                           ;Console.c: 235: lBufferX = 0;
 25561  01808C  0E00               	movlw	0
 25562  01808E  6E46               	movwf	_lBufferX,c
 25563                           
 25564                           ;Console.c: 236: lBufferY = 0;
 25565  018090  0E00               	movlw	0
 25566  018092  6E45               	movwf	_lBufferY,c
 25567  018094                     l1000:
 25568                           
 25569                           ;Console.c: 238: }
 25570                           ;Console.c: 240: Console_ClearCursor();
 25571  018094  ECAA  F0C3         	call	_Console_ClearCursor	;wreg free
 25572  018098  0012               	return		;funcret
 25573  01809A                     __end_of_Console_Backspace:
 25574                           	opt stack 0
 25575                           tosu	equ	0xFFF
 25576                           tosh	equ	0xFFE
 25577                           tosl	equ	0xFFD
 25578                           pclath	equ	0xFFA
 25579                           tblptru	equ	0xFF8
 25580                           tblptrh	equ	0xFF7
 25581                           tblptrl	equ	0xFF6
 25582                           tablat	equ	0xFF5
 25583                           prodh	equ	0xFF4
 25584                           prodl	equ	0xFF3
 25585                           intcon	equ	0xFF2
 25586                           indf0	equ	0xFEF
 25587                           postinc0	equ	0xFEE
 25588                           fsr0h	equ	0xFEA
 25589                           fsr0l	equ	0xFE9
 25590                           wreg	equ	0xFE8
 25591                           indf1	equ	0xFE7
 25592                           postdec1	equ	0xFE5
 25593                           fsr1h	equ	0xFE2
 25594                           fsr1l	equ	0xFE1
 25595                           indf2	equ	0xFDF
 25596                           postinc2	equ	0xFDE
 25597                           postdec2	equ	0xFDD
 25598                           plusw2	equ	0xFDB
 25599                           fsr2h	equ	0xFDA
 25600                           fsr2l	equ	0xFD9
 25601                           status	equ	0xFD8
 25602                           
 25603 ;; *************** function _Console_ClearCursor *****************
 25604 ;; Defined at:
 25605 ;;		line 308 in file "Library/Console.c"
 25606 ;; Parameters:    Size  Location     Type
 25607 ;;		None
 25608 ;; Auto vars:     Size  Location     Type
 25609 ;;		None
 25610 ;; Return value:  Size  Location     Type
 25611 ;;                  1    wreg      void 
 25612 ;; Registers used:
 25613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 25614 ;; Tracked objects:
 25615 ;;		On entry : 0/0
 25616 ;;		On exit  : 0/0
 25617 ;;		Unchanged: 0/0
 25618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25621 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25622 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25623 ;;Total ram usage:        2 bytes
 25624 ;; Hardware stack levels used:    1
 25625 ;; Hardware stack levels required when called:    7
 25626 ;; This function calls:
 25627 ;;		Nothing
 25628 ;; This function is called by:
 25629 ;;		_Console_Backspace
 25630 ;;		_Console_Tab
 25631 ;; This function uses a non-reentrant model
 25632 ;;
 25633                           
 25634                           	psect	text111
 25635  018754                     __ptext111:
 25636                           	opt stack 0
 25637  018754                     _Console_ClearCursor:
 25638                           	opt stack 19
 25639                           
 25640                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
 25641                           
 25642                           ;incstack = 0
 25643  018754  0E01               	movlw	1
 25644  018756  6E4D               	movwf	_change,c
 25645  018758  5045               	movf	_lBufferY,w,c
 25646  01875A  0D14               	mullw	20
 25647  01875C  0EE2               	movlw	low _lBuffer
 25648  01875E  0100               	movlb	0	; () banked
 25649  018760  6F60               	movwf	??_Console_ClearCursor& (0+255),b
 25650  018762  0E03               	movlw	high _lBuffer
 25651  018764  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
 25652  018766  50F3               	movf	prodl,w,c
 25653  018768  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
 25654  01876A  50F4               	movf	prodh,w,c
 25655  01876C  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
 25656  01876E  5046               	movf	_lBufferX,w,c
 25657  018770  0D01               	mullw	1
 25658  018772  50F3               	movf	prodl,w,c
 25659  018774  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
 25660  018776  6ED9               	movwf	fsr2l,c
 25661  018778  50F4               	movf	prodh,w,c
 25662  01877A  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
 25663  01877C  6EDA               	movwf	fsr2h,c
 25664  01877E  0E80               	movlw	128
 25665  018780  6EDF               	movwf	indf2,c
 25666                           
 25667                           ; BSR set to: 0
 25668  018782  0012               	return		;funcret
 25669  018784                     __end_of_Console_ClearCursor:
 25670                           	opt stack 0
 25671                           tosu	equ	0xFFF
 25672                           tosh	equ	0xFFE
 25673                           tosl	equ	0xFFD
 25674                           pclath	equ	0xFFA
 25675                           tblptru	equ	0xFF8
 25676                           tblptrh	equ	0xFF7
 25677                           tblptrl	equ	0xFF6
 25678                           tablat	equ	0xFF5
 25679                           prodh	equ	0xFF4
 25680                           prodl	equ	0xFF3
 25681                           intcon	equ	0xFF2
 25682                           indf0	equ	0xFEF
 25683                           postinc0	equ	0xFEE
 25684                           fsr0h	equ	0xFEA
 25685                           fsr0l	equ	0xFE9
 25686                           wreg	equ	0xFE8
 25687                           indf1	equ	0xFE7
 25688                           postdec1	equ	0xFE5
 25689                           fsr1h	equ	0xFE2
 25690                           fsr1l	equ	0xFE1
 25691                           indf2	equ	0xFDF
 25692                           postinc2	equ	0xFDE
 25693                           postdec2	equ	0xFDD
 25694                           plusw2	equ	0xFDB
 25695                           fsr2h	equ	0xFDA
 25696                           fsr2l	equ	0xFD9
 25697                           status	equ	0xFD8
 25698                           
 25699 ;; *************** function _SteppingCCW *****************
 25700 ;; Defined at:
 25701 ;;		line 511 in file "dans.c"
 25702 ;; Parameters:    Size  Location     Type
 25703 ;;		None
 25704 ;; Auto vars:     Size  Location     Type
 25705 ;;		None
 25706 ;; Return value:  Size  Location     Type
 25707 ;;                  2  2004[None  ] int 
 25708 ;; Registers used:
 25709 ;;		wreg, status,2, status,0, cstack
 25710 ;; Tracked objects:
 25711 ;;		On entry : 0/0
 25712 ;;		On exit  : 0/0
 25713 ;;		Unchanged: 0/0
 25714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25719 ;;Total ram usage:        0 bytes
 25720 ;; Hardware stack levels used:    1
 25721 ;; Hardware stack levels required when called:    8
 25722 ;; This function calls:
 25723 ;;		_STP1
 25724 ;;		_STP2
 25725 ;;		_STP3
 25726 ;;		_STP4
 25727 ;;		_delay_ms
 25728 ;; This function is called by:
 25729 ;;		_Closest_Object
 25730 ;;		_Move_ADC_To
 25731 ;;		_Find_Flag
 25732 ;; This function uses a non-reentrant model
 25733 ;;
 25734                           
 25735                           	psect	text112
 25736  018212                     __ptext112:
 25737                           	opt stack 0
 25738  018212                     _SteppingCCW:
 25739                           	opt stack 20
 25740                           
 25741                           ;dans.c: 512: STP4();
 25742                           
 25743                           ; BSR set to: 0
 25744                           ;incstack = 0
 25745  018212  ECE1  F0C5         	call	_STP4	;wreg free
 25746                           
 25747                           ;dans.c: 513: delay_ms(2);
 25748  018216  0E00               	movlw	0
 25749  018218  0100               	movlb	0	; () banked
 25750  01821A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 25751  01821C  0E02               	movlw	2
 25752  01821E  6F60               	movwf	delay_ms@ms& (0+255),b
 25753  018220  ECAD  F0BE         	call	_delay_ms	;wreg free
 25754                           
 25755                           ;dans.c: 514: STP3();
 25756  018224  ECEB  F0C5         	call	_STP3	;wreg free
 25757                           
 25758                           ;dans.c: 515: delay_ms(2);
 25759  018228  0E00               	movlw	0
 25760  01822A  0100               	movlb	0	; () banked
 25761  01822C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 25762  01822E  0E02               	movlw	2
 25763  018230  6F60               	movwf	delay_ms@ms& (0+255),b
 25764  018232  ECAD  F0BE         	call	_delay_ms	;wreg free
 25765                           
 25766                           ;dans.c: 516: STP2();
 25767  018236  ECF5  F0C5         	call	_STP2	;wreg free
 25768                           
 25769                           ;dans.c: 517: delay_ms(2);
 25770  01823A  0E00               	movlw	0
 25771  01823C  0100               	movlb	0	; () banked
 25772  01823E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 25773  018240  0E02               	movlw	2
 25774  018242  6F60               	movwf	delay_ms@ms& (0+255),b
 25775  018244  ECAD  F0BE         	call	_delay_ms	;wreg free
 25776                           
 25777                           ;dans.c: 518: STP1();
 25778  018248  ECFF  F0C5         	call	_STP1	;wreg free
 25779                           
 25780                           ;dans.c: 519: delay_ms(2);
 25781  01824C  0E00               	movlw	0
 25782  01824E  0100               	movlb	0	; () banked
 25783  018250  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 25784  018252  0E02               	movlw	2
 25785  018254  6F60               	movwf	delay_ms@ms& (0+255),b
 25786  018256  ECAD  F0BE         	call	_delay_ms	;wreg free
 25787  01825A  0012               	return		;funcret
 25788  01825C                     __end_of_SteppingCCW:
 25789                           	opt stack 0
 25790                           tosu	equ	0xFFF
 25791                           tosh	equ	0xFFE
 25792                           tosl	equ	0xFFD
 25793                           pclath	equ	0xFFA
 25794                           tblptru	equ	0xFF8
 25795                           tblptrh	equ	0xFF7
 25796                           tblptrl	equ	0xFF6
 25797                           tablat	equ	0xFF5
 25798                           prodh	equ	0xFF4
 25799                           prodl	equ	0xFF3
 25800                           intcon	equ	0xFF2
 25801                           indf0	equ	0xFEF
 25802                           postinc0	equ	0xFEE
 25803                           fsr0h	equ	0xFEA
 25804                           fsr0l	equ	0xFE9
 25805                           wreg	equ	0xFE8
 25806                           indf1	equ	0xFE7
 25807                           postdec1	equ	0xFE5
 25808                           fsr1h	equ	0xFE2
 25809                           fsr1l	equ	0xFE1
 25810                           indf2	equ	0xFDF
 25811                           postinc2	equ	0xFDE
 25812                           postdec2	equ	0xFDD
 25813                           plusw2	equ	0xFDB
 25814                           fsr2h	equ	0xFDA
 25815                           fsr2l	equ	0xFD9
 25816                           status	equ	0xFD8
 25817                           
 25818 ;; *************** function _delay_ms *****************
 25819 ;; Defined at:
 25820 ;;		line 240 in file "Library/Types.c"
 25821 ;; Parameters:    Size  Location     Type
 25822 ;;  ms              2    0[BANK0 ] unsigned short 
 25823 ;; Auto vars:     Size  Location     Type
 25824 ;;  u               4    2[BANK0 ] volatile unsigned long 
 25825 ;; Return value:  Size  Location     Type
 25826 ;;                  1    wreg      void 
 25827 ;; Registers used:
 25828 ;;		wreg, status,2, status,0
 25829 ;; Tracked objects:
 25830 ;;		On entry : 0/0
 25831 ;;		On exit  : 0/0
 25832 ;;		Unchanged: 0/0
 25833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25834 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25835 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25837 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25838 ;;Total ram usage:        6 bytes
 25839 ;; Hardware stack levels used:    1
 25840 ;; Hardware stack levels required when called:    7
 25841 ;; This function calls:
 25842 ;;		Nothing
 25843 ;; This function is called by:
 25844 ;;		_LCD_Reset
 25845 ;;		_LCD_Init
 25846 ;;		_MXK_Init
 25847 ;;		_main
 25848 ;;		_SteppingCCW
 25849 ;;		_SteppingCW
 25850 ;; This function uses a non-reentrant model
 25851 ;;
 25852                           
 25853                           	psect	text113
 25854  017D5A                     __ptext113:
 25855                           	opt stack 0
 25856  017D5A                     _delay_ms:
 25857                           	opt stack 23
 25858                           
 25859                           ;Types.c: 242: volatile unsigned long u;
 25860                           ;Types.c: 243: while (ms--)
 25861                           
 25862                           ;incstack = 0
 25863  017D5A  D01B               	goto	u12070
 25864  017D5C                     l14761:
 25865                           
 25866                           ;Types.c: 244: {
 25867                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 25868  017D5C  0E00               	movlw	0
 25869  017D5E  0100               	movlb	0	; () banked
 25870  017D60  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 25871  017D62  0E00               	movlw	0
 25872  017D64  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 25873  017D66  0E00               	movlw	0
 25874  017D68  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 25875  017D6A  0E00               	movlw	0
 25876  017D6C  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 25877  017D6E                     l14763:
 25878                           
 25879                           ; BSR set to: 0
 25880  017D6E  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 25881  017D70  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 25882  017D72  E10F               	bnz	l14769
 25883  017D74  0EB0               	movlw	176
 25884  017D76  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 25885  017D78  0E04               	movlw	4
 25886  017D7A  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 25887  017D7C  B0D8               	btfsc	status,0,c
 25888  017D7E  D009               	goto	u12070
 25889                           
 25890                           ; BSR set to: 0
 25891                           
 25892                           ; BSR set to: 0
 25893  017D80  F000               	nop		; ;# 
 25894  017D82  0E01               	movlw	1
 25895  017D84  0100               	movlb	0	; () banked
 25896  017D86  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 25897  017D88  0E00               	movlw	0
 25898  017D8A  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 25899  017D8C  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 25900  017D8E  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 25901  017D90  D7EE               	goto	l14763
 25902  017D92                     u12070:
 25903  017D92                     l14769:
 25904  017D92  0100               	movlb	0	; () banked
 25905  017D94  0760               	decf	delay_ms@ms& (0+255),f,b
 25906  017D96  A0D8               	btfss	status,0,c
 25907  017D98  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 25908  017D9A  2960               	incf	delay_ms@ms& (0+255),w,b
 25909  017D9C  E1DF               	bnz	l14761
 25910  017D9E  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 25911  017DA0  A4D8               	btfss	status,2,c
 25912  017DA2  D7DC               	goto	l824
 25913                           
 25914                           ; BSR set to: 0
 25915                           ;Types.c: 251: }
 25916                           ;Types.c: 252: }
 25917                           ;Types.c: 253: u = 0x8008;
 25918                           
 25919                           ; BSR set to: 0
 25920  017DA4  0E08               	movlw	8
 25921  017DA6  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 25922  017DA8  0E80               	movlw	128
 25923  017DAA  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 25924  017DAC  0E00               	movlw	0
 25925  017DAE  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 25926  017DB0  0E00               	movlw	0
 25927  017DB2  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 25928                           
 25929                           ; BSR set to: 0
 25930  017DB4  0012               	return		;funcret
 25931  017DB6                     __end_of_delay_ms:
 25932                           	opt stack 0
 25933                           tosu	equ	0xFFF
 25934                           tosh	equ	0xFFE
 25935                           tosl	equ	0xFFD
 25936                           pclath	equ	0xFFA
 25937                           tblptru	equ	0xFF8
 25938                           tblptrh	equ	0xFF7
 25939                           tblptrl	equ	0xFF6
 25940                           tablat	equ	0xFF5
 25941                           prodh	equ	0xFF4
 25942                           prodl	equ	0xFF3
 25943                           intcon	equ	0xFF2
 25944                           indf0	equ	0xFEF
 25945                           postinc0	equ	0xFEE
 25946                           fsr0h	equ	0xFEA
 25947                           fsr0l	equ	0xFE9
 25948                           wreg	equ	0xFE8
 25949                           indf1	equ	0xFE7
 25950                           postdec1	equ	0xFE5
 25951                           fsr1h	equ	0xFE2
 25952                           fsr1l	equ	0xFE1
 25953                           indf2	equ	0xFDF
 25954                           postinc2	equ	0xFDE
 25955                           postdec2	equ	0xFDD
 25956                           plusw2	equ	0xFDB
 25957                           fsr2h	equ	0xFDA
 25958                           fsr2l	equ	0xFD9
 25959                           status	equ	0xFD8
 25960                           
 25961 ;; *************** function _STP4 *****************
 25962 ;; Defined at:
 25963 ;;		line 227 in file "main.c"
 25964 ;; Parameters:    Size  Location     Type
 25965 ;;		None
 25966 ;; Auto vars:     Size  Location     Type
 25967 ;;		None
 25968 ;; Return value:  Size  Location     Type
 25969 ;;                  2  2191[None  ] int 
 25970 ;; Registers used:
 25971 ;;		None
 25972 ;; Tracked objects:
 25973 ;;		On entry : 0/0
 25974 ;;		On exit  : 0/0
 25975 ;;		Unchanged: 0/0
 25976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25981 ;;Total ram usage:        0 bytes
 25982 ;; Hardware stack levels used:    1
 25983 ;; Hardware stack levels required when called:    7
 25984 ;; This function calls:
 25985 ;;		Nothing
 25986 ;; This function is called by:
 25987 ;;		_SteppingCCW
 25988 ;;		_SteppingCW
 25989 ;; This function uses a non-reentrant model
 25990 ;;
 25991                           
 25992                           	psect	text114
 25993  018BC2                     __ptext114:
 25994                           	opt stack 0
 25995  018BC2                     _STP4:
 25996                           	opt stack 20
 25997                           
 25998                           ;main.c: 228: TRISA2=0;
 25999                           
 26000                           ; BSR set to: 0
 26001                           ;incstack = 0
 26002  018BC2  9492               	bcf	3986,2,c	;volatile
 26003                           
 26004                           ;main.c: 229: TRISA3=0;
 26005  018BC4  9692               	bcf	3986,3,c	;volatile
 26006                           
 26007                           ;main.c: 230: TRISD5=0;
 26008  018BC6  9A95               	bcf	3989,5,c	;volatile
 26009                           
 26010                           ;main.c: 231: TRISD7=0;
 26011  018BC8  9E95               	bcf	3989,7,c	;volatile
 26012                           
 26013                           ;main.c: 232: RD5=0;
 26014  018BCA  9A83               	bcf	3971,5,c	;volatile
 26015                           
 26016                           ;main.c: 233: RD7=0;
 26017  018BCC  9E83               	bcf	3971,7,c	;volatile
 26018                           
 26019                           ;main.c: 234: RA2=0;
 26020  018BCE  9480               	bcf	3968,2,c	;volatile
 26021                           
 26022                           ;main.c: 235: RA3=0;
 26023  018BD0  9680               	bcf	3968,3,c	;volatile
 26024                           
 26025                           ;main.c: 236: RD7 = 1;
 26026  018BD2  8E83               	bsf	3971,7,c	;volatile
 26027  018BD4  0012               	return		;funcret
 26028  018BD6                     __end_of_STP4:
 26029                           	opt stack 0
 26030                           tosu	equ	0xFFF
 26031                           tosh	equ	0xFFE
 26032                           tosl	equ	0xFFD
 26033                           pclath	equ	0xFFA
 26034                           tblptru	equ	0xFF8
 26035                           tblptrh	equ	0xFF7
 26036                           tblptrl	equ	0xFF6
 26037                           tablat	equ	0xFF5
 26038                           prodh	equ	0xFF4
 26039                           prodl	equ	0xFF3
 26040                           intcon	equ	0xFF2
 26041                           indf0	equ	0xFEF
 26042                           postinc0	equ	0xFEE
 26043                           fsr0h	equ	0xFEA
 26044                           fsr0l	equ	0xFE9
 26045                           wreg	equ	0xFE8
 26046                           indf1	equ	0xFE7
 26047                           postdec1	equ	0xFE5
 26048                           fsr1h	equ	0xFE2
 26049                           fsr1l	equ	0xFE1
 26050                           indf2	equ	0xFDF
 26051                           postinc2	equ	0xFDE
 26052                           postdec2	equ	0xFDD
 26053                           plusw2	equ	0xFDB
 26054                           fsr2h	equ	0xFDA
 26055                           fsr2l	equ	0xFD9
 26056                           status	equ	0xFD8
 26057                           
 26058 ;; *************** function _STP3 *****************
 26059 ;; Defined at:
 26060 ;;		line 216 in file "main.c"
 26061 ;; Parameters:    Size  Location     Type
 26062 ;;		None
 26063 ;; Auto vars:     Size  Location     Type
 26064 ;;		None
 26065 ;; Return value:  Size  Location     Type
 26066 ;;                  2  2188[None  ] int 
 26067 ;; Registers used:
 26068 ;;		None
 26069 ;; Tracked objects:
 26070 ;;		On entry : 0/0
 26071 ;;		On exit  : 0/0
 26072 ;;		Unchanged: 0/0
 26073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26078 ;;Total ram usage:        0 bytes
 26079 ;; Hardware stack levels used:    1
 26080 ;; Hardware stack levels required when called:    7
 26081 ;; This function calls:
 26082 ;;		Nothing
 26083 ;; This function is called by:
 26084 ;;		_SteppingCCW
 26085 ;;		_SteppingCW
 26086 ;; This function uses a non-reentrant model
 26087 ;;
 26088                           
 26089                           	psect	text115
 26090  018BD6                     __ptext115:
 26091                           	opt stack 0
 26092  018BD6                     _STP3:
 26093                           	opt stack 20
 26094                           
 26095                           ;main.c: 217: TRISA2=0;
 26096                           
 26097                           ;incstack = 0
 26098  018BD6  9492               	bcf	3986,2,c	;volatile
 26099                           
 26100                           ;main.c: 218: TRISA3=0;
 26101  018BD8  9692               	bcf	3986,3,c	;volatile
 26102                           
 26103                           ;main.c: 219: TRISD5=0;
 26104  018BDA  9A95               	bcf	3989,5,c	;volatile
 26105                           
 26106                           ;main.c: 220: TRISD7=0;
 26107  018BDC  9E95               	bcf	3989,7,c	;volatile
 26108                           
 26109                           ;main.c: 221: RD5=0;
 26110  018BDE  9A83               	bcf	3971,5,c	;volatile
 26111                           
 26112                           ;main.c: 222: RD7=0;
 26113  018BE0  9E83               	bcf	3971,7,c	;volatile
 26114                           
 26115                           ;main.c: 223: RA2=0;
 26116  018BE2  9480               	bcf	3968,2,c	;volatile
 26117                           
 26118                           ;main.c: 224: RA3=0;
 26119  018BE4  9680               	bcf	3968,3,c	;volatile
 26120                           
 26121                           ;main.c: 225: RD5 = 1;
 26122  018BE6  8A83               	bsf	3971,5,c	;volatile
 26123  018BE8  0012               	return		;funcret
 26124  018BEA                     __end_of_STP3:
 26125                           	opt stack 0
 26126                           tosu	equ	0xFFF
 26127                           tosh	equ	0xFFE
 26128                           tosl	equ	0xFFD
 26129                           pclath	equ	0xFFA
 26130                           tblptru	equ	0xFF8
 26131                           tblptrh	equ	0xFF7
 26132                           tblptrl	equ	0xFF6
 26133                           tablat	equ	0xFF5
 26134                           prodh	equ	0xFF4
 26135                           prodl	equ	0xFF3
 26136                           intcon	equ	0xFF2
 26137                           indf0	equ	0xFEF
 26138                           postinc0	equ	0xFEE
 26139                           fsr0h	equ	0xFEA
 26140                           fsr0l	equ	0xFE9
 26141                           wreg	equ	0xFE8
 26142                           indf1	equ	0xFE7
 26143                           postdec1	equ	0xFE5
 26144                           fsr1h	equ	0xFE2
 26145                           fsr1l	equ	0xFE1
 26146                           indf2	equ	0xFDF
 26147                           postinc2	equ	0xFDE
 26148                           postdec2	equ	0xFDD
 26149                           plusw2	equ	0xFDB
 26150                           fsr2h	equ	0xFDA
 26151                           fsr2l	equ	0xFD9
 26152                           status	equ	0xFD8
 26153                           
 26154 ;; *************** function _STP2 *****************
 26155 ;; Defined at:
 26156 ;;		line 205 in file "main.c"
 26157 ;; Parameters:    Size  Location     Type
 26158 ;;		None
 26159 ;; Auto vars:     Size  Location     Type
 26160 ;;		None
 26161 ;; Return value:  Size  Location     Type
 26162 ;;                  2  2185[None  ] int 
 26163 ;; Registers used:
 26164 ;;		None
 26165 ;; Tracked objects:
 26166 ;;		On entry : 0/0
 26167 ;;		On exit  : 0/0
 26168 ;;		Unchanged: 0/0
 26169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26174 ;;Total ram usage:        0 bytes
 26175 ;; Hardware stack levels used:    1
 26176 ;; Hardware stack levels required when called:    7
 26177 ;; This function calls:
 26178 ;;		Nothing
 26179 ;; This function is called by:
 26180 ;;		_SteppingCCW
 26181 ;;		_SteppingCW
 26182 ;; This function uses a non-reentrant model
 26183 ;;
 26184                           
 26185                           	psect	text116
 26186  018BEA                     __ptext116:
 26187                           	opt stack 0
 26188  018BEA                     _STP2:
 26189                           	opt stack 20
 26190                           
 26191                           ;main.c: 206: TRISA2=0;
 26192                           
 26193                           ;incstack = 0
 26194  018BEA  9492               	bcf	3986,2,c	;volatile
 26195                           
 26196                           ;main.c: 207: TRISA3=0;
 26197  018BEC  9692               	bcf	3986,3,c	;volatile
 26198                           
 26199                           ;main.c: 208: TRISD5=0;
 26200  018BEE  9A95               	bcf	3989,5,c	;volatile
 26201                           
 26202                           ;main.c: 209: TRISD7=0;
 26203  018BF0  9E95               	bcf	3989,7,c	;volatile
 26204                           
 26205                           ;main.c: 210: RD5=0;
 26206  018BF2  9A83               	bcf	3971,5,c	;volatile
 26207                           
 26208                           ;main.c: 211: RD7=0;
 26209  018BF4  9E83               	bcf	3971,7,c	;volatile
 26210                           
 26211                           ;main.c: 212: RA2=0;
 26212  018BF6  9480               	bcf	3968,2,c	;volatile
 26213                           
 26214                           ;main.c: 213: RA3=0;
 26215  018BF8  9680               	bcf	3968,3,c	;volatile
 26216                           
 26217                           ;main.c: 214: RA3 = 1;
 26218  018BFA  8680               	bsf	3968,3,c	;volatile
 26219  018BFC  0012               	return		;funcret
 26220  018BFE                     __end_of_STP2:
 26221                           	opt stack 0
 26222                           tosu	equ	0xFFF
 26223                           tosh	equ	0xFFE
 26224                           tosl	equ	0xFFD
 26225                           pclath	equ	0xFFA
 26226                           tblptru	equ	0xFF8
 26227                           tblptrh	equ	0xFF7
 26228                           tblptrl	equ	0xFF6
 26229                           tablat	equ	0xFF5
 26230                           prodh	equ	0xFF4
 26231                           prodl	equ	0xFF3
 26232                           intcon	equ	0xFF2
 26233                           indf0	equ	0xFEF
 26234                           postinc0	equ	0xFEE
 26235                           fsr0h	equ	0xFEA
 26236                           fsr0l	equ	0xFE9
 26237                           wreg	equ	0xFE8
 26238                           indf1	equ	0xFE7
 26239                           postdec1	equ	0xFE5
 26240                           fsr1h	equ	0xFE2
 26241                           fsr1l	equ	0xFE1
 26242                           indf2	equ	0xFDF
 26243                           postinc2	equ	0xFDE
 26244                           postdec2	equ	0xFDD
 26245                           plusw2	equ	0xFDB
 26246                           fsr2h	equ	0xFDA
 26247                           fsr2l	equ	0xFD9
 26248                           status	equ	0xFD8
 26249                           
 26250 ;; *************** function _STP1 *****************
 26251 ;; Defined at:
 26252 ;;		line 193 in file "main.c"
 26253 ;; Parameters:    Size  Location     Type
 26254 ;;		None
 26255 ;; Auto vars:     Size  Location     Type
 26256 ;;		None
 26257 ;; Return value:  Size  Location     Type
 26258 ;;                  2  2182[None  ] int 
 26259 ;; Registers used:
 26260 ;;		None
 26261 ;; Tracked objects:
 26262 ;;		On entry : 0/0
 26263 ;;		On exit  : 0/0
 26264 ;;		Unchanged: 0/0
 26265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26270 ;;Total ram usage:        0 bytes
 26271 ;; Hardware stack levels used:    1
 26272 ;; Hardware stack levels required when called:    7
 26273 ;; This function calls:
 26274 ;;		Nothing
 26275 ;; This function is called by:
 26276 ;;		_SteppingCCW
 26277 ;;		_SteppingCW
 26278 ;; This function uses a non-reentrant model
 26279 ;;
 26280                           
 26281                           	psect	text117
 26282  018BFE                     __ptext117:
 26283                           	opt stack 0
 26284  018BFE                     _STP1:
 26285                           	opt stack 20
 26286                           
 26287                           ;main.c: 194: TRISA2=0;
 26288                           
 26289                           ;incstack = 0
 26290  018BFE  9492               	bcf	3986,2,c	;volatile
 26291                           
 26292                           ;main.c: 195: TRISA3=0;
 26293  018C00  9692               	bcf	3986,3,c	;volatile
 26294                           
 26295                           ;main.c: 196: TRISD5=0;
 26296  018C02  9A95               	bcf	3989,5,c	;volatile
 26297                           
 26298                           ;main.c: 197: TRISD7=0;
 26299  018C04  9E95               	bcf	3989,7,c	;volatile
 26300                           
 26301                           ;main.c: 198: RD5=0;
 26302  018C06  9A83               	bcf	3971,5,c	;volatile
 26303                           
 26304                           ;main.c: 199: RD7=0;
 26305  018C08  9E83               	bcf	3971,7,c	;volatile
 26306                           
 26307                           ;main.c: 200: RA2=0;
 26308  018C0A  9480               	bcf	3968,2,c	;volatile
 26309                           
 26310                           ;main.c: 201: RA3=0;
 26311  018C0C  9680               	bcf	3968,3,c	;volatile
 26312                           
 26313                           ;main.c: 202: RA2 = 1;
 26314  018C0E  8480               	bsf	3968,2,c	;volatile
 26315  018C10  0012               	return		;funcret
 26316  018C12                     __end_of_STP1:
 26317                           	opt stack 0
 26318                           tosu	equ	0xFFF
 26319                           tosh	equ	0xFFE
 26320                           tosl	equ	0xFFD
 26321                           pclath	equ	0xFFA
 26322                           tblptru	equ	0xFF8
 26323                           tblptrh	equ	0xFF7
 26324                           tblptrl	equ	0xFF6
 26325                           tablat	equ	0xFF5
 26326                           prodh	equ	0xFF4
 26327                           prodl	equ	0xFF3
 26328                           intcon	equ	0xFF2
 26329                           indf0	equ	0xFEF
 26330                           postinc0	equ	0xFEE
 26331                           fsr0h	equ	0xFEA
 26332                           fsr0l	equ	0xFE9
 26333                           wreg	equ	0xFE8
 26334                           indf1	equ	0xFE7
 26335                           postdec1	equ	0xFE5
 26336                           fsr1h	equ	0xFE2
 26337                           fsr1l	equ	0xFE1
 26338                           indf2	equ	0xFDF
 26339                           postinc2	equ	0xFDE
 26340                           postdec2	equ	0xFDD
 26341                           plusw2	equ	0xFDB
 26342                           fsr2h	equ	0xFDA
 26343                           fsr2l	equ	0xFD9
 26344                           status	equ	0xFD8
 26345                           
 26346 ;; *************** function _Console_Render *****************
 26347 ;; Defined at:
 26348 ;;		line 377 in file "Library/Console.c"
 26349 ;; Parameters:    Size  Location     Type
 26350 ;;		None
 26351 ;; Auto vars:     Size  Location     Type
 26352 ;;  lCursor         4   38[BANK0 ] struct Point
 26353 ;;  y               1   43[BANK0 ] unsigned char 
 26354 ;;  x               1   42[BANK0 ] unsigned char 
 26355 ;;  temp            1   37[BANK0 ] unsigned char 
 26356 ;;  Temp            2    0        unsigned short 
 26357 ;; Return value:  Size  Location     Type
 26358 ;;                  1    wreg      void 
 26359 ;; Registers used:
 26360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26361 ;; Tracked objects:
 26362 ;;		On entry : 0/0
 26363 ;;		On exit  : 0/0
 26364 ;;		Unchanged: 0/0
 26365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26367 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26368 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26369 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26370 ;;Total ram usage:        9 bytes
 26371 ;; Hardware stack levels used:    1
 26372 ;; Hardware stack levels required when called:   11
 26373 ;; This function calls:
 26374 ;;		_Console_MakeField
 26375 ;;		_LCD_DrawField
 26376 ;;		_LCD_FillRectangle
 26377 ;; This function is called by:
 26378 ;;		_Sensor_Observe
 26379 ;;		_Closest_Object
 26380 ;;		_main
 26381 ;;		_Detect_Victim
 26382 ;;		_Travel
 26383 ;;		_Move_ADC_To
 26384 ;;		_Navigate_Maze
 26385 ;;		_Find_Flag
 26386 ;; This function uses a non-reentrant model
 26387 ;;
 26388                           
 26389                           	psect	text118
 26390  014F36                     __ptext118:
 26391                           	opt stack 0
 26392  014F36                     _Console_Render:
 26393                           	opt stack 17
 26394                           
 26395                           ;Console.c: 379: Colour Temp;
 26396                           ;Console.c: 380: if (change)
 26397                           
 26398                           ;incstack = 0
 26399  014F36  504D               	movf	_change,w,c
 26400  014F38  B4D8               	btfsc	status,2,c
 26401  014F3A  0012               	return	
 26402                           
 26403                           ;Console.c: 381: {
 26404                           ;Console.c: 382: UINT8 x, y, temp;
 26405                           ;Console.c: 383: Point lCursor = {6,6};
 26406  014F3C  C1C8  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 26407  014F40  C1C9  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 26408  014F44  C1CA  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 26409  014F48  C1CB  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 26410                           
 26411                           ;Console.c: 385: if (clearall)
 26412  014F4C  5047               	movf	_clearall,w,c
 26413  014F4E  B4D8               	btfsc	status,2,c
 26414  014F50  D004               	goto	l1056
 26415                           
 26416                           ;Console.c: 386: {
 26417                           ;Console.c: 389: temp = lBufferY;
 26418  014F52  C045  F085         	movff	_lBufferY,Console_Render@temp
 26419                           
 26420                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 26421  014F56  0E0F               	movlw	15
 26422  014F58  6E45               	movwf	_lBufferY,c
 26423  014F5A                     l1056:
 26424                           
 26425                           ;Console.c: 391: }
 26426                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 26427  014F5A  0E00               	movlw	0
 26428  014F5C  0100               	movlb	0	; () banked
 26429  014F5E  6F8B               	movwf	Console_Render@y& (0+255),b
 26430  014F60  D0B9               	goto	l1057
 26431  014F62                     
 26432                           ; BSR set to: 0
 26433                           ;Console.c: 394: {
 26434                           ;Console.c: 395: gForecolour = lCBuffer[y];
 26435                           
 26436                           ; BSR set to: 0
 26437  014F62  518B               	movf	Console_Render@y& (0+255),w,b
 26438  014F64  0D02               	mullw	2
 26439  014F66  0E28               	movlw	low _lCBuffer
 26440  014F68  24F3               	addwf	prodl,w,c
 26441  014F6A  6ED9               	movwf	fsr2l,c
 26442  014F6C  0E03               	movlw	high _lCBuffer
 26443  014F6E  20F4               	addwfc	prodh,w,c
 26444  014F70  6EDA               	movwf	fsr2h,c
 26445  014F72  CFDE F1E4          	movff	postinc2,_gForecolour
 26446  014F76  CFDD F1E5          	movff	postdec2,_gForecolour+1
 26447                           
 26448                           ; BSR set to: 0
 26449                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 26450  014F7A  0E00               	movlw	0
 26451  014F7C  6F8A               	movwf	Console_Render@x& (0+255),b
 26452  014F7E                     l15077:
 26453                           
 26454                           ; BSR set to: 0
 26455  014F7E  0E13               	movlw	19
 26456  014F80  658A               	cpfsgt	Console_Render@x& (0+255),b
 26457  014F82  D001               	goto	l1059
 26458  014F84  D09E               	goto	u12500
 26459  014F86                     l1059:
 26460                           
 26461                           ; BSR set to: 0
 26462                           ;Console.c: 397: {
 26463                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 26464                           
 26465                           ; BSR set to: 0
 26466  014F86  518B               	movf	Console_Render@y& (0+255),w,b
 26467  014F88  0D14               	mullw	20
 26468  014F8A  0EE2               	movlw	low _lBuffer
 26469  014F8C  6F83               	movwf	??_Console_Render& (0+255),b
 26470  014F8E  0E03               	movlw	high _lBuffer
 26471  014F90  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 26472  014F92  50F3               	movf	prodl,w,c
 26473  014F94  2783               	addwf	??_Console_Render& (0+255),f,b
 26474  014F96  50F4               	movf	prodh,w,c
 26475  014F98  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 26476  014F9A  518A               	movf	Console_Render@x& (0+255),w,b
 26477  014F9C  0D01               	mullw	1
 26478  014F9E  50F3               	movf	prodl,w,c
 26479  014FA0  2583               	addwf	??_Console_Render& (0+255),w,b
 26480  014FA2  6ED9               	movwf	fsr2l,c
 26481  014FA4  50F4               	movf	prodh,w,c
 26482  014FA6  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 26483  014FA8  6EDA               	movwf	fsr2h,c
 26484  014FAA  AEDF               	btfss	indf2,7,c
 26485  014FAC  D083               	goto	l1063
 26486                           
 26487                           ; BSR set to: 0
 26488                           ;Console.c: 399: {
 26489                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 26490  014FAE  518B               	movf	Console_Render@y& (0+255),w,b
 26491  014FB0  0D14               	mullw	20
 26492  014FB2  0EE2               	movlw	low _lBuffer
 26493  014FB4  6F83               	movwf	??_Console_Render& (0+255),b
 26494  014FB6  0E03               	movlw	high _lBuffer
 26495  014FB8  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 26496  014FBA  50F3               	movf	prodl,w,c
 26497  014FBC  2783               	addwf	??_Console_Render& (0+255),f,b
 26498  014FBE  50F4               	movf	prodh,w,c
 26499  014FC0  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 26500  014FC2  518A               	movf	Console_Render@x& (0+255),w,b
 26501  014FC4  0D01               	mullw	1
 26502  014FC6  50F3               	movf	prodl,w,c
 26503  014FC8  2583               	addwf	??_Console_Render& (0+255),w,b
 26504  014FCA  6ED9               	movwf	fsr2l,c
 26505  014FCC  50F4               	movf	prodh,w,c
 26506  014FCE  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 26507  014FD0  6EDA               	movwf	fsr2h,c
 26508  014FD2  0E7F               	movlw	127
 26509  014FD4  16DF               	andwf	indf2,f,c
 26510                           
 26511                           ;Console.c: 401: if (lBuffer[y][x])
 26512  014FD6  518B               	movf	Console_Render@y& (0+255),w,b
 26513  014FD8  0D14               	mullw	20
 26514  014FDA  0EE2               	movlw	low _lBuffer
 26515  014FDC  6F83               	movwf	??_Console_Render& (0+255),b
 26516  014FDE  0E03               	movlw	high _lBuffer
 26517  014FE0  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 26518  014FE2  50F3               	movf	prodl,w,c
 26519  014FE4  2783               	addwf	??_Console_Render& (0+255),f,b
 26520  014FE6  50F4               	movf	prodh,w,c
 26521  014FE8  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 26522  014FEA  518A               	movf	Console_Render@x& (0+255),w,b
 26523  014FEC  0D01               	mullw	1
 26524  014FEE  50F3               	movf	prodl,w,c
 26525  014FF0  2583               	addwf	??_Console_Render& (0+255),w,b
 26526  014FF2  6ED9               	movwf	fsr2l,c
 26527  014FF4  50F4               	movf	prodh,w,c
 26528  014FF6  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 26529  014FF8  6EDA               	movwf	fsr2h,c
 26530  014FFA  50DF               	movf	indf2,w,c
 26531  014FFC  B4D8               	btfsc	status,2,c
 26532  014FFE  D043               	goto	l1062
 26533                           
 26534                           ; BSR set to: 0
 26535                           ;Console.c: 402: {
 26536                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 26537  015000  C154  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 26538  015004  C155  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 26539  015008  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 26540  01500C  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 26541  015010  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 26542  015014  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 26543  015018  C1D0  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 26544  01501C  C1D1  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 26545  015020  C1D2  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 26546  015024  C1D3  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 26547  015028  EC2F  F0BF         	call	_LCD_FillRectangle	;wreg free
 26548                           
 26549                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 26550  01502C  0100               	movlb	0	; () banked
 26551  01502E  518B               	movf	Console_Render@y& (0+255),w,b
 26552  015030  0D14               	mullw	20
 26553  015032  0EE2               	movlw	low _lBuffer
 26554  015034  6F83               	movwf	??_Console_Render& (0+255),b
 26555  015036  0E03               	movlw	high _lBuffer
 26556  015038  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 26557  01503A  50F3               	movf	prodl,w,c
 26558  01503C  2783               	addwf	??_Console_Render& (0+255),f,b
 26559  01503E  50F4               	movf	prodh,w,c
 26560  015040  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 26561  015042  518A               	movf	Console_Render@x& (0+255),w,b
 26562  015044  0D01               	mullw	1
 26563  015046  50F3               	movf	prodl,w,c
 26564  015048  2583               	addwf	??_Console_Render& (0+255),w,b
 26565  01504A  6ED9               	movwf	fsr2l,c
 26566  01504C  50F4               	movf	prodh,w,c
 26567  01504E  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 26568  015050  6EDA               	movwf	fsr2h,c
 26569  015052  50DF               	movf	indf2,w,c
 26570  015054  ECF2  F0B6         	call	_Console_MakeField
 26571  015058  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 26572  01505C  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 26573  015060  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 26574  015064  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 26575  015068  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 26576  01506C  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 26577  015070  C1D0  F078         	movff	_gCharSize,LCD_DrawField@pSize
 26578  015074  C1D1  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 26579  015078  C1D2  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 26580  01507C  C1D3  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 26581  015080  ECA1  F0BA         	call	_LCD_DrawField	;wreg free
 26582                           
 26583                           ;Console.c: 405: }
 26584  015084  D017               	goto	l1063
 26585  015086                     l1062:
 26586                           
 26587                           ;Console.c: 406: else
 26588                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 26589  015086  0E00               	movlw	0
 26590  015088  0100               	movlb	0	; () banked
 26591  01508A  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 26592  01508C  0E00               	movlw	0
 26593  01508E  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 26594  015090  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 26595  015094  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 26596  015098  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 26597  01509C  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 26598  0150A0  C1D0  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 26599  0150A4  C1D1  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 26600  0150A8  C1D2  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 26601  0150AC  C1D3  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 26602  0150B0  EC2F  F0BF         	call	_LCD_FillRectangle	;wreg free
 26603  0150B4                     l1063:
 26604                           
 26605                           ;Console.c: 408: }
 26606                           ;Console.c: 409: lCursor.x += (5 + 1);
 26607  0150B4  0E06               	movlw	6
 26608  0150B6  0100               	movlb	0	; () banked
 26609  0150B8  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 26610  0150BA  0E00               	movlw	0
 26611  0150BC  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 26612                           
 26613                           ; BSR set to: 0
 26614  0150BE  2B8A               	incf	Console_Render@x& (0+255),f,b
 26615  0150C0  D75E               	goto	l15077
 26616  0150C2                     u12500:
 26617                           
 26618                           ; BSR set to: 0
 26619                           ;Console.c: 410: }
 26620                           ;Console.c: 411: lCursor.y += (7 + 1);
 26621                           
 26622                           ; BSR set to: 0
 26623  0150C2  0E08               	movlw	8
 26624  0150C4  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 26625  0150C6  0E00               	movlw	0
 26626  0150C8  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 26627                           
 26628                           ; BSR set to: 0
 26629                           ;Console.c: 412: lCursor.x = 6;
 26630  0150CA  0E00               	movlw	0
 26631  0150CC  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 26632  0150CE  0E06               	movlw	6
 26633  0150D0  6F86               	movwf	Console_Render@lCursor& (0+255),b
 26634                           
 26635                           ; BSR set to: 0
 26636  0150D2  2B8B               	incf	Console_Render@y& (0+255),f,b
 26637  0150D4                     l1057:
 26638                           
 26639                           ; BSR set to: 0
 26640                           
 26641                           ; BSR set to: 0
 26642  0150D4  518B               	movf	Console_Render@y& (0+255),w,b
 26643  0150D6  5C45               	subwf	_lBufferY,w,c
 26644  0150D8  B0D8               	btfsc	status,0,c
 26645  0150DA  D743               	goto	l1058
 26646                           
 26647                           ; BSR set to: 0
 26648                           ;Console.c: 413: }
 26649                           ;Console.c: 415: if (clearall)
 26650                           
 26651                           ; BSR set to: 0
 26652  0150DC  5047               	movf	_clearall,w,c
 26653  0150DE  B4D8               	btfsc	status,2,c
 26654  0150E0  0012               	return	
 26655                           
 26656                           ; BSR set to: 0
 26657                           ;Console.c: 416: {
 26658                           ;Console.c: 417: clearall = 0;
 26659  0150E2  0E00               	movlw	0
 26660  0150E4  6E47               	movwf	_clearall,c
 26661                           
 26662                           ; BSR set to: 0
 26663                           ;Console.c: 418: lBufferY = temp;
 26664  0150E6  C085  F045         	movff	Console_Render@temp,_lBufferY
 26665                           
 26666                           ; BSR set to: 0
 26667  0150EA  0012               	return	
 26668  0150EC                     __end_of_Console_Render:
 26669                           	opt stack 0
 26670                           tosu	equ	0xFFF
 26671                           tosh	equ	0xFFE
 26672                           tosl	equ	0xFFD
 26673                           pclath	equ	0xFFA
 26674                           tblptru	equ	0xFF8
 26675                           tblptrh	equ	0xFF7
 26676                           tblptrl	equ	0xFF6
 26677                           tablat	equ	0xFF5
 26678                           prodh	equ	0xFF4
 26679                           prodl	equ	0xFF3
 26680                           intcon	equ	0xFF2
 26681                           indf0	equ	0xFEF
 26682                           postinc0	equ	0xFEE
 26683                           fsr0h	equ	0xFEA
 26684                           fsr0l	equ	0xFE9
 26685                           wreg	equ	0xFE8
 26686                           indf1	equ	0xFE7
 26687                           postdec1	equ	0xFE5
 26688                           fsr1h	equ	0xFE2
 26689                           fsr1l	equ	0xFE1
 26690                           indf2	equ	0xFDF
 26691                           postinc2	equ	0xFDE
 26692                           postdec2	equ	0xFDD
 26693                           plusw2	equ	0xFDB
 26694                           fsr2h	equ	0xFDA
 26695                           fsr2l	equ	0xFD9
 26696                           status	equ	0xFD8
 26697                           
 26698 ;; *************** function _LCD_FillRectangle *****************
 26699 ;; Defined at:
 26700 ;;		line 318 in file "Library/LCD.c"
 26701 ;; Parameters:    Size  Location     Type
 26702 ;;  pColour         2    9[BANK0 ] unsigned short 
 26703 ;;  pPoint          4   11[BANK0 ] struct Point
 26704 ;;  pSize           4   15[BANK0 ] struct Point
 26705 ;; Auto vars:     Size  Location     Type
 26706 ;;  j               1   22[BANK0 ] unsigned char 
 26707 ;;  i               1   21[BANK0 ] unsigned char 
 26708 ;; Return value:  Size  Location     Type
 26709 ;;                  1    wreg      void 
 26710 ;; Registers used:
 26711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26712 ;; Tracked objects:
 26713 ;;		On entry : 0/0
 26714 ;;		On exit  : 0/0
 26715 ;;		Unchanged: 0/0
 26716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26717 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26718 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26719 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26720 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26721 ;;Total ram usage:       14 bytes
 26722 ;; Hardware stack levels used:    1
 26723 ;; Hardware stack levels required when called:   10
 26724 ;; This function calls:
 26725 ;;		_LCD_Word_Write
 26726 ;;		_Set_Addr_Window
 26727 ;; This function is called by:
 26728 ;;		_Console_Render
 26729 ;;		_Console_ClearLine
 26730 ;; This function uses a non-reentrant model
 26731 ;;
 26732                           
 26733                           	psect	text119
 26734  017E5E                     __ptext119:
 26735                           	opt stack 0
 26736  017E5E                     _LCD_FillRectangle:
 26737                           	opt stack 17
 26738                           
 26739                           ;LCD.c: 320: UINT8 i = 0x00;
 26740                           
 26741                           ;incstack = 0
 26742  017E5E  0E00               	movlw	0
 26743  017E60  0100               	movlb	0	; () banked
 26744  017E62  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 26745                           
 26746                           ;LCD.c: 321: UINT8 j = 0x00;
 26747  017E64  0E00               	movlw	0
 26748  017E66  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 26749                           
 26750                           ; BSR set to: 0
 26751                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 26752  017E68  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 26753  017E6C  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 26754  017E6E  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 26755  017E70  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 26756  017E72  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 26757  017E74  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 26758  017E76  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 26759  017E78  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 26760  017E7A  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 26761  017E7C  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 26762  017E7E  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 26763  017E80  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 26764  017E82  ECE2  F0B7         	call	_Set_Addr_Window
 26765                           
 26766                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 26767  017E86  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 26768  017E8A  0100               	movlb	0	; () banked
 26769  017E8C  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 26770  017E8E  B4D8               	btfsc	status,2,c
 26771  017E90  0012               	return	
 26772                           
 26773                           ; BSR set to: 0
 26774                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 26775                           
 26776                           ; BSR set to: 0
 26777  017E92  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 26778  017E96                     l14783:
 26779                           
 26780                           ; BSR set to: 0
 26781  017E96  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 26782  017E98  B4D8               	btfsc	status,2,c
 26783  017E9A  D009               	goto	u12110
 26784                           
 26785                           ; BSR set to: 0
 26786                           ;LCD.c: 333: LCD_Word_Write(pColour);
 26787                           
 26788                           ; BSR set to: 0
 26789                           
 26790                           ; BSR set to: 0
 26791  017E9C  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 26792  017EA0  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 26793  017EA4  EC1B  F0C5         	call	_LCD_Word_Write	;wreg free
 26794  017EA8  0100               	movlb	0	; () banked
 26795  017EAA  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 26796  017EAC  D7F4               	goto	l14783
 26797  017EAE                     u12110:
 26798                           
 26799                           ; BSR set to: 0
 26800                           
 26801                           ; BSR set to: 0
 26802  017EAE  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 26803  017EB0  D7ED               	goto	L17
 26804  017EB2                     __end_of_LCD_FillRectangle:
 26805                           	opt stack 0
 26806                           tosu	equ	0xFFF
 26807                           tosh	equ	0xFFE
 26808                           tosl	equ	0xFFD
 26809                           pclath	equ	0xFFA
 26810                           tblptru	equ	0xFF8
 26811                           tblptrh	equ	0xFF7
 26812                           tblptrl	equ	0xFF6
 26813                           tablat	equ	0xFF5
 26814                           prodh	equ	0xFF4
 26815                           prodl	equ	0xFF3
 26816                           intcon	equ	0xFF2
 26817                           indf0	equ	0xFEF
 26818                           postinc0	equ	0xFEE
 26819                           fsr0h	equ	0xFEA
 26820                           fsr0l	equ	0xFE9
 26821                           wreg	equ	0xFE8
 26822                           indf1	equ	0xFE7
 26823                           postdec1	equ	0xFE5
 26824                           fsr1h	equ	0xFE2
 26825                           fsr1l	equ	0xFE1
 26826                           indf2	equ	0xFDF
 26827                           postinc2	equ	0xFDE
 26828                           postdec2	equ	0xFDD
 26829                           plusw2	equ	0xFDB
 26830                           fsr2h	equ	0xFDA
 26831                           fsr2l	equ	0xFD9
 26832                           status	equ	0xFD8
 26833                           
 26834 ;; *************** function _LCD_DrawField *****************
 26835 ;; Defined at:
 26836 ;;		line 393 in file "Library/LCD.c"
 26837 ;; Parameters:    Size  Location     Type
 26838 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 26839 ;;		 -> Console_MakeField@Fill(70), 
 26840 ;;  pPoint          4   20[BANK0 ] struct Point
 26841 ;;  pSize           4   24[BANK0 ] struct Point
 26842 ;; Auto vars:     Size  Location     Type
 26843 ;;  count           2   30[BANK0 ] unsigned short 
 26844 ;;  i               1   34[BANK0 ] unsigned char 
 26845 ;;  ymax            1   33[BANK0 ] unsigned char 
 26846 ;;  xmax            1   32[BANK0 ] unsigned char 
 26847 ;; Return value:  Size  Location     Type
 26848 ;;                  1    wreg      void 
 26849 ;; Registers used:
 26850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26851 ;; Tracked objects:
 26852 ;;		On entry : 0/0
 26853 ;;		On exit  : 0/0
 26854 ;;		Unchanged: 0/0
 26855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26856 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26857 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26858 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26859 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26860 ;;Total ram usage:       17 bytes
 26861 ;; Hardware stack levels used:    1
 26862 ;; Hardware stack levels required when called:   10
 26863 ;; This function calls:
 26864 ;;		_LCD_Word_Write
 26865 ;;		_Set_Addr_Window
 26866 ;;		___wmul
 26867 ;; This function is called by:
 26868 ;;		_Console_Render
 26869 ;; This function uses a non-reentrant model
 26870 ;;
 26871                           
 26872                           	psect	text120
 26873  017542                     __ptext120:
 26874                           	opt stack 0
 26875  017542                     _LCD_DrawField:
 26876                           	opt stack 17
 26877                           
 26878                           ;LCD.c: 396: UINT8 i = 0x00;
 26879                           
 26880                           ; BSR set to: 0
 26881                           ;incstack = 0
 26882  017542  0E00               	movlw	0
 26883  017544  0100               	movlb	0	; () banked
 26884  017546  6F82               	movwf	LCD_DrawField@i& (0+255),b
 26885                           
 26886                           ; BSR set to: 0
 26887                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 26888  017548  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 26889  01754A  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 26890  01754C  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 26891                           
 26892                           ; BSR set to: 0
 26893                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 26894  01754E  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 26895  017550  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 26896  017552  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 26897                           
 26898                           ; BSR set to: 0
 26899                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 26900  017554  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 26901  017558  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 26902  01755C  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 26903  017560  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 26904  017564  EC33  F0C4         	call	___wmul	;wreg free
 26905  017568  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 26906  01756C  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 26907                           
 26908                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 26909  017570  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 26910  017574  0100               	movlb	0	; () banked
 26911  017576  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 26912  017578  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 26913  01757A  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 26914  01757C  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 26915  01757E  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 26916  017580  ECE2  F0B7         	call	_Set_Addr_Window
 26917                           
 26918                           ;LCD.c: 403: for(i = 0; i < count; i++)
 26919  017584  0E00               	movlw	0
 26920  017586  0100               	movlb	0	; () banked
 26921  017588  6F82               	movwf	LCD_DrawField@i& (0+255),b
 26922  01758A  D010               	goto	l183
 26923  01758C                     
 26924                           ; BSR set to: 0
 26925                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 26926                           
 26927                           ; BSR set to: 0
 26928  01758C  5182               	movf	LCD_DrawField@i& (0+255),w,b
 26929  01758E  0D02               	mullw	2
 26930  017590  50F3               	movf	prodl,w,c
 26931  017592  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 26932  017594  6ED9               	movwf	fsr2l,c
 26933  017596  50F4               	movf	prodh,w,c
 26934  017598  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 26935  01759A  6EDA               	movwf	fsr2h,c
 26936  01759C  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 26937  0175A0  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 26938  0175A4  EC1B  F0C5         	call	_LCD_Word_Write	;wreg free
 26939  0175A8  0100               	movlb	0	; () banked
 26940  0175AA  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 26941  0175AC                     l183:
 26942                           
 26943                           ; BSR set to: 0
 26944                           
 26945                           ; BSR set to: 0
 26946  0175AC  5182               	movf	LCD_DrawField@i& (0+255),w,b
 26947  0175AE  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 26948  0175B0  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 26949  0175B2  517E               	movf	LCD_DrawField@count& (0+255),w,b
 26950  0175B4  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 26951  0175B6  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 26952  0175B8  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 26953  0175BA  B0D8               	btfsc	status,0,c
 26954  0175BC  0012               	return	
 26955  0175BE  D7E6               	goto	l184
 26956  0175C0                     __end_of_LCD_DrawField:
 26957                           	opt stack 0
 26958                           tosu	equ	0xFFF
 26959                           tosh	equ	0xFFE
 26960                           tosl	equ	0xFFD
 26961                           pclath	equ	0xFFA
 26962                           tblptru	equ	0xFF8
 26963                           tblptrh	equ	0xFF7
 26964                           tblptrl	equ	0xFF6
 26965                           tablat	equ	0xFF5
 26966                           prodh	equ	0xFF4
 26967                           prodl	equ	0xFF3
 26968                           intcon	equ	0xFF2
 26969                           indf0	equ	0xFEF
 26970                           postinc0	equ	0xFEE
 26971                           fsr0h	equ	0xFEA
 26972                           fsr0l	equ	0xFE9
 26973                           wreg	equ	0xFE8
 26974                           indf1	equ	0xFE7
 26975                           postdec1	equ	0xFE5
 26976                           fsr1h	equ	0xFE2
 26977                           fsr1l	equ	0xFE1
 26978                           indf2	equ	0xFDF
 26979                           postinc2	equ	0xFDE
 26980                           postdec2	equ	0xFDD
 26981                           plusw2	equ	0xFDB
 26982                           fsr2h	equ	0xFDA
 26983                           fsr2l	equ	0xFD9
 26984                           status	equ	0xFD8
 26985                           
 26986 ;; *************** function ___wmul *****************
 26987 ;; Defined at:
 26988 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 26989 ;; Parameters:    Size  Location     Type
 26990 ;;  multiplier      2    0[BANK0 ] unsigned int 
 26991 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 26992 ;; Auto vars:     Size  Location     Type
 26993 ;;  product         2    4[BANK0 ] unsigned int 
 26994 ;; Return value:  Size  Location     Type
 26995 ;;                  2    0[BANK0 ] unsigned int 
 26996 ;; Registers used:
 26997 ;;		wreg, status,2, status,0, prodl, prodh
 26998 ;; Tracked objects:
 26999 ;;		On entry : 0/0
 27000 ;;		On exit  : 0/0
 27001 ;;		Unchanged: 0/0
 27002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27003 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27004 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27006 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27007 ;;Total ram usage:        6 bytes
 27008 ;; Hardware stack levels used:    1
 27009 ;; Hardware stack levels required when called:    7
 27010 ;; This function calls:
 27011 ;;		Nothing
 27012 ;; This function is called by:
 27013 ;;		_LCD_DrawField
 27014 ;;		_main
 27015 ;;		_Create_Maze
 27016 ;;		_Travel
 27017 ;;		_Go_Backward
 27018 ;;		_Navigate_Maze
 27019 ;; This function uses a non-reentrant model
 27020 ;;
 27021                           
 27022                           	psect	text121
 27023  018866                     __ptext121:
 27024                           	opt stack 0
 27025  018866                     ___wmul:
 27026                           	opt stack 23
 27027                           
 27028                           ; BSR set to: 0
 27029                           ;incstack = 0
 27030  018866  0100               	movlb	0	; () banked
 27031  018868  5160               	movf	___wmul@multiplier& (0+255),w,b
 27032  01886A  0362               	mulwf	___wmul@multiplicand& (0+255),b
 27033  01886C  CFF3 F064          	movff	prodl,___wmul@product
 27034  018870  CFF4 F065          	movff	prodh,___wmul@product+1
 27035  018874  5160               	movf	___wmul@multiplier& (0+255),w,b
 27036  018876  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 27037  018878  50F3               	movf	prodl,w,c
 27038  01887A  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 27039  01887C  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 27040  01887E  0362               	mulwf	___wmul@multiplicand& (0+255),b
 27041  018880  50F3               	movf	prodl,w,c
 27042  018882  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 27043                           
 27044                           ; BSR set to: 0
 27045  018884  C064  F060         	movff	___wmul@product,?___wmul
 27046  018888  C065  F061         	movff	___wmul@product+1,?___wmul+1
 27047  01888C  0012               	return	
 27048  01888E                     __end_of___wmul:
 27049                           	opt stack 0
 27050                           tosu	equ	0xFFF
 27051                           tosh	equ	0xFFE
 27052                           tosl	equ	0xFFD
 27053                           pclath	equ	0xFFA
 27054                           tblptru	equ	0xFF8
 27055                           tblptrh	equ	0xFF7
 27056                           tblptrl	equ	0xFF6
 27057                           tablat	equ	0xFF5
 27058                           prodh	equ	0xFF4
 27059                           prodl	equ	0xFF3
 27060                           intcon	equ	0xFF2
 27061                           indf0	equ	0xFEF
 27062                           postinc0	equ	0xFEE
 27063                           fsr0h	equ	0xFEA
 27064                           fsr0l	equ	0xFE9
 27065                           wreg	equ	0xFE8
 27066                           indf1	equ	0xFE7
 27067                           postdec1	equ	0xFE5
 27068                           fsr1h	equ	0xFE2
 27069                           fsr1l	equ	0xFE1
 27070                           indf2	equ	0xFDF
 27071                           postinc2	equ	0xFDE
 27072                           postdec2	equ	0xFDD
 27073                           plusw2	equ	0xFDB
 27074                           fsr2h	equ	0xFDA
 27075                           fsr2l	equ	0xFD9
 27076                           status	equ	0xFD8
 27077                           
 27078 ;; *************** function _Set_Addr_Window *****************
 27079 ;; Defined at:
 27080 ;;		line 214 in file "Library/LCD.c"
 27081 ;; Parameters:    Size  Location     Type
 27082 ;;  xs              1    wreg     unsigned char 
 27083 ;;  ys              1    5[BANK0 ] unsigned char 
 27084 ;;  xe              1    6[BANK0 ] unsigned char 
 27085 ;;  ye              1    7[BANK0 ] unsigned char 
 27086 ;; Auto vars:     Size  Location     Type
 27087 ;;  xs              1    8[BANK0 ] unsigned char 
 27088 ;; Return value:  Size  Location     Type
 27089 ;;                  1    wreg      void 
 27090 ;; Registers used:
 27091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27092 ;; Tracked objects:
 27093 ;;		On entry : 0/0
 27094 ;;		On exit  : 0/0
 27095 ;;		Unchanged: 0/0
 27096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27097 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27100 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27101 ;;Total ram usage:        4 bytes
 27102 ;; Hardware stack levels used:    1
 27103 ;; Hardware stack levels required when called:    9
 27104 ;; This function calls:
 27105 ;;		_LCD_Write
 27106 ;; This function is called by:
 27107 ;;		_LCD_Fill
 27108 ;;		_LCD_FillRectangle
 27109 ;;		_LCD_DrawField
 27110 ;;		_RAM_Address_Set
 27111 ;;		_LCD_DrawPixel
 27112 ;; This function uses a non-reentrant model
 27113 ;;
 27114                           
 27115                           	psect	text122
 27116  016FC4                     __ptext122:
 27117                           	opt stack 0
 27118  016FC4                     _Set_Addr_Window:
 27119                           	opt stack 17
 27120                           
 27121                           ; BSR set to: 0
 27122                           ;incstack = 0
 27123                           ;Set_Addr_Window@xs stored from wreg
 27124  016FC4  0100               	movlb	0	; () banked
 27125  016FC6  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 27126                           
 27127                           ;LCD.c: 216: ys+=2;
 27128  016FC8  0E02               	movlw	2
 27129  016FCA  0100               	movlb	0	; () banked
 27130  016FCC  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 27131                           
 27132                           ;LCD.c: 217: ye+=2;
 27133  016FCE  0E02               	movlw	2
 27134  016FD0  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 27135                           
 27136                           ;LCD.c: 218: xs+=3;
 27137  016FD2  0E03               	movlw	3
 27138  016FD4  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 27139                           
 27140                           ;LCD.c: 219: xe+=3;
 27141  016FD6  0E03               	movlw	3
 27142  016FD8  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 27143                           
 27144                           ; BSR set to: 0
 27145                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 27146  016FDA  0E00               	movlw	0
 27147  016FDC  6F63               	movwf	LCD_Write@mode& (0+255),b
 27148  016FDE  0E2A               	movlw	42
 27149  016FE0  ECD3  F0C4         	call	_LCD_Write
 27150                           
 27151                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 27152  016FE4  0E01               	movlw	1
 27153  016FE6  0100               	movlb	0	; () banked
 27154  016FE8  6F63               	movwf	LCD_Write@mode& (0+255),b
 27155  016FEA  0E00               	movlw	0
 27156  016FEC  ECD3  F0C4         	call	_LCD_Write
 27157                           
 27158                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 27159  016FF0  0E01               	movlw	1
 27160  016FF2  0100               	movlb	0	; () banked
 27161  016FF4  6F63               	movwf	LCD_Write@mode& (0+255),b
 27162  016FF6  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 27163  016FF8  ECD3  F0C4         	call	_LCD_Write
 27164                           
 27165                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 27166  016FFC  0E01               	movlw	1
 27167  016FFE  0100               	movlb	0	; () banked
 27168  017000  6F63               	movwf	LCD_Write@mode& (0+255),b
 27169  017002  0E00               	movlw	0
 27170  017004  ECD3  F0C4         	call	_LCD_Write
 27171                           
 27172                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 27173  017008  0E01               	movlw	1
 27174  01700A  0100               	movlb	0	; () banked
 27175  01700C  6F63               	movwf	LCD_Write@mode& (0+255),b
 27176  01700E  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 27177  017010  ECD3  F0C4         	call	_LCD_Write
 27178                           
 27179                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 27180  017014  0E00               	movlw	0
 27181  017016  0100               	movlb	0	; () banked
 27182  017018  6F63               	movwf	LCD_Write@mode& (0+255),b
 27183  01701A  0E2B               	movlw	43
 27184  01701C  ECD3  F0C4         	call	_LCD_Write
 27185                           
 27186                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 27187  017020  0E01               	movlw	1
 27188  017022  0100               	movlb	0	; () banked
 27189  017024  6F63               	movwf	LCD_Write@mode& (0+255),b
 27190  017026  0E00               	movlw	0
 27191  017028  ECD3  F0C4         	call	_LCD_Write
 27192                           
 27193                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 27194  01702C  0E01               	movlw	1
 27195  01702E  0100               	movlb	0	; () banked
 27196  017030  6F63               	movwf	LCD_Write@mode& (0+255),b
 27197  017032  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 27198  017034  ECD3  F0C4         	call	_LCD_Write
 27199                           
 27200                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 27201  017038  0E01               	movlw	1
 27202  01703A  0100               	movlb	0	; () banked
 27203  01703C  6F63               	movwf	LCD_Write@mode& (0+255),b
 27204  01703E  0E00               	movlw	0
 27205  017040  ECD3  F0C4         	call	_LCD_Write
 27206                           
 27207                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 27208  017044  0E01               	movlw	1
 27209  017046  0100               	movlb	0	; () banked
 27210  017048  6F63               	movwf	LCD_Write@mode& (0+255),b
 27211  01704A  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 27212  01704C  ECD3  F0C4         	call	_LCD_Write
 27213                           
 27214                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 27215  017050  0E00               	movlw	0
 27216  017052  0100               	movlb	0	; () banked
 27217  017054  6F63               	movwf	LCD_Write@mode& (0+255),b
 27218  017056  0E2C               	movlw	44
 27219  017058  ECD3  F0C4         	call	_LCD_Write
 27220  01705C  0012               	return		;funcret
 27221  01705E                     __end_of_Set_Addr_Window:
 27222                           	opt stack 0
 27223                           tosu	equ	0xFFF
 27224                           tosh	equ	0xFFE
 27225                           tosl	equ	0xFFD
 27226                           pclath	equ	0xFFA
 27227                           tblptru	equ	0xFF8
 27228                           tblptrh	equ	0xFF7
 27229                           tblptrl	equ	0xFF6
 27230                           tablat	equ	0xFF5
 27231                           prodh	equ	0xFF4
 27232                           prodl	equ	0xFF3
 27233                           intcon	equ	0xFF2
 27234                           indf0	equ	0xFEF
 27235                           postinc0	equ	0xFEE
 27236                           fsr0h	equ	0xFEA
 27237                           fsr0l	equ	0xFE9
 27238                           wreg	equ	0xFE8
 27239                           indf1	equ	0xFE7
 27240                           postdec1	equ	0xFE5
 27241                           fsr1h	equ	0xFE2
 27242                           fsr1l	equ	0xFE1
 27243                           indf2	equ	0xFDF
 27244                           postinc2	equ	0xFDE
 27245                           postdec2	equ	0xFDD
 27246                           plusw2	equ	0xFDB
 27247                           fsr2h	equ	0xFDA
 27248                           fsr2l	equ	0xFD9
 27249                           status	equ	0xFD8
 27250                           
 27251 ;; *************** function _LCD_Word_Write *****************
 27252 ;; Defined at:
 27253 ;;		line 198 in file "Library/LCD.c"
 27254 ;; Parameters:    Size  Location     Type
 27255 ;;  value           2    5[BANK0 ] unsigned short 
 27256 ;; Auto vars:     Size  Location     Type
 27257 ;;		None
 27258 ;; Return value:  Size  Location     Type
 27259 ;;                  1    wreg      void 
 27260 ;; Registers used:
 27261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27262 ;; Tracked objects:
 27263 ;;		On entry : 0/0
 27264 ;;		On exit  : 0/0
 27265 ;;		Unchanged: 0/0
 27266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27267 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27270 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27271 ;;Total ram usage:        2 bytes
 27272 ;; Hardware stack levels used:    1
 27273 ;; Hardware stack levels required when called:    9
 27274 ;; This function calls:
 27275 ;;		_LCD_Write
 27276 ;; This function is called by:
 27277 ;;		_LCD_Fill
 27278 ;;		_LCD_FillRectangle
 27279 ;;		_LCD_DrawField
 27280 ;;		_LCD_DrawPixel
 27281 ;; This function uses a non-reentrant model
 27282 ;;
 27283                           
 27284                           	psect	text123
 27285  018A36                     __ptext123:
 27286                           	opt stack 0
 27287  018A36                     _LCD_Word_Write:
 27288                           	opt stack 17
 27289                           
 27290                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 27291                           
 27292                           ;incstack = 0
 27293  018A36  0E01               	movlw	1
 27294  018A38  0100               	movlb	0	; () banked
 27295  018A3A  6F63               	movwf	LCD_Write@mode& (0+255),b
 27296  018A3C  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 27297  018A3E  ECD3  F0C4         	call	_LCD_Write
 27298                           
 27299                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 27300  018A42  0E01               	movlw	1
 27301  018A44  0100               	movlb	0	; () banked
 27302  018A46  6F63               	movwf	LCD_Write@mode& (0+255),b
 27303  018A48  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 27304  018A4A  ECD3  F0C4         	call	_LCD_Write
 27305  018A4E  0012               	return		;funcret
 27306  018A50                     __end_of_LCD_Word_Write:
 27307                           	opt stack 0
 27308                           tosu	equ	0xFFF
 27309                           tosh	equ	0xFFE
 27310                           tosl	equ	0xFFD
 27311                           pclath	equ	0xFFA
 27312                           tblptru	equ	0xFF8
 27313                           tblptrh	equ	0xFF7
 27314                           tblptrl	equ	0xFF6
 27315                           tablat	equ	0xFF5
 27316                           prodh	equ	0xFF4
 27317                           prodl	equ	0xFF3
 27318                           intcon	equ	0xFF2
 27319                           indf0	equ	0xFEF
 27320                           postinc0	equ	0xFEE
 27321                           fsr0h	equ	0xFEA
 27322                           fsr0l	equ	0xFE9
 27323                           wreg	equ	0xFE8
 27324                           indf1	equ	0xFE7
 27325                           postdec1	equ	0xFE5
 27326                           fsr1h	equ	0xFE2
 27327                           fsr1l	equ	0xFE1
 27328                           indf2	equ	0xFDF
 27329                           postinc2	equ	0xFDE
 27330                           postdec2	equ	0xFDD
 27331                           plusw2	equ	0xFDB
 27332                           fsr2h	equ	0xFDA
 27333                           fsr2l	equ	0xFD9
 27334                           status	equ	0xFD8
 27335                           
 27336 ;; *************** function _LCD_Write *****************
 27337 ;; Defined at:
 27338 ;;		line 67 in file "Library/LCD.c"
 27339 ;; Parameters:    Size  Location     Type
 27340 ;;  value           1    wreg     unsigned char 
 27341 ;;  mode            1    3[BANK0 ] enum E6761
 27342 ;; Auto vars:     Size  Location     Type
 27343 ;;  value           1    4[BANK0 ] unsigned char 
 27344 ;; Return value:  Size  Location     Type
 27345 ;;                  1    wreg      void 
 27346 ;; Registers used:
 27347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27348 ;; Tracked objects:
 27349 ;;		On entry : 0/0
 27350 ;;		On exit  : 0/0
 27351 ;;		Unchanged: 0/0
 27352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27353 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27356 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27357 ;;Total ram usage:        2 bytes
 27358 ;; Hardware stack levels used:    1
 27359 ;; Hardware stack levels required when called:    8
 27360 ;; This function calls:
 27361 ;;		_Mode_Set
 27362 ;;		_SPI_Send
 27363 ;; This function is called by:
 27364 ;;		_LCD_Init
 27365 ;;		_LCD_Word_Write
 27366 ;;		_Set_Addr_Window
 27367 ;;		_Set_Rotation
 27368 ;;		_LCD_WriteCMD
 27369 ;;		_LCD_WriteData
 27370 ;;		_LCD_Data_Write
 27371 ;;		_LCD_Data_Write_4k
 27372 ;;		_Invert_Display
 27373 ;; This function uses a non-reentrant model
 27374 ;;
 27375                           
 27376                           	psect	text124
 27377  0189A6                     __ptext124:
 27378                           	opt stack 0
 27379  0189A6                     _LCD_Write:
 27380                           	opt stack 17
 27381                           
 27382                           ;incstack = 0
 27383                           ;LCD_Write@value stored from wreg
 27384  0189A6  0100               	movlb	0	; () banked
 27385  0189A8  6F64               	movwf	LCD_Write@value& (0+255),b
 27386                           
 27387                           ;LCD.c: 89: Mode_Set(mode);
 27388  0189AA  0100               	movlb	0	; () banked
 27389  0189AC  5163               	movf	LCD_Write@mode& (0+255),w,b
 27390  0189AE  EC09  F0C6         	call	_Mode_Set
 27391                           
 27392                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 27393  0189B2  0E61               	movlw	low _SPI2
 27394  0189B4  0100               	movlb	0	; () banked
 27395  0189B6  6F60               	movwf	SPI_Send@pInput& (0+255),b
 27396  0189B8  0E01               	movlw	high _SPI2
 27397  0189BA  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 27398  0189BC  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 27399  0189C0  ECB5  F0BC         	call	_SPI_Send	;wreg free
 27400  0189C4  0012               	return		;funcret
 27401  0189C6                     __end_of_LCD_Write:
 27402                           	opt stack 0
 27403                           tosu	equ	0xFFF
 27404                           tosh	equ	0xFFE
 27405                           tosl	equ	0xFFD
 27406                           pclath	equ	0xFFA
 27407                           tblptru	equ	0xFF8
 27408                           tblptrh	equ	0xFF7
 27409                           tblptrl	equ	0xFF6
 27410                           tablat	equ	0xFF5
 27411                           prodh	equ	0xFF4
 27412                           prodl	equ	0xFF3
 27413                           intcon	equ	0xFF2
 27414                           indf0	equ	0xFEF
 27415                           postinc0	equ	0xFEE
 27416                           fsr0h	equ	0xFEA
 27417                           fsr0l	equ	0xFE9
 27418                           wreg	equ	0xFE8
 27419                           indf1	equ	0xFE7
 27420                           postdec1	equ	0xFE5
 27421                           fsr1h	equ	0xFE2
 27422                           fsr1l	equ	0xFE1
 27423                           indf2	equ	0xFDF
 27424                           postinc2	equ	0xFDE
 27425                           postdec2	equ	0xFDD
 27426                           plusw2	equ	0xFDB
 27427                           fsr2h	equ	0xFDA
 27428                           fsr2l	equ	0xFD9
 27429                           status	equ	0xFD8
 27430                           
 27431 ;; *************** function _Mode_Set *****************
 27432 ;; Defined at:
 27433 ;;		line 40 in file "Library/LCD.c"
 27434 ;; Parameters:    Size  Location     Type
 27435 ;;  pMode           1    wreg     enum E6761
 27436 ;; Auto vars:     Size  Location     Type
 27437 ;;  pMode           1    0[BANK0 ] enum E6761
 27438 ;; Return value:  Size  Location     Type
 27439 ;;                  1    wreg      void 
 27440 ;; Registers used:
 27441 ;;		wreg
 27442 ;; Tracked objects:
 27443 ;;		On entry : 0/0
 27444 ;;		On exit  : 0/0
 27445 ;;		Unchanged: 0/0
 27446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27448 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27450 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27451 ;;Total ram usage:        1 bytes
 27452 ;; Hardware stack levels used:    1
 27453 ;; Hardware stack levels required when called:    7
 27454 ;; This function calls:
 27455 ;;		Nothing
 27456 ;; This function is called by:
 27457 ;;		_LCD_Write
 27458 ;; This function uses a non-reentrant model
 27459 ;;
 27460                           
 27461                           	psect	text125
 27462  018C12                     __ptext125:
 27463                           	opt stack 0
 27464  018C12                     _Mode_Set:
 27465                           	opt stack 17
 27466                           
 27467                           ;incstack = 0
 27468                           ;Mode_Set@pMode stored from wreg
 27469  018C12  0100               	movlb	0	; () banked
 27470  018C14  6F60               	movwf	Mode_Set@pMode& (0+255),b
 27471                           
 27472                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 27473  018C16  0100               	movlb	0	; () banked
 27474  018C18  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 27475  018C1A  D002               	bra	u10565
 27476  018C1C  9E85               	bcf	3973,7,c	;volatile
 27477  018C1E  D001               	bra	u10566
 27478  018C20                     u10565:
 27479  018C20  8E85               	bsf	3973,7,c	;volatile
 27480  018C22                     u10566:
 27481  018C22  0012               	return		;funcret
 27482  018C24                     __end_of_Mode_Set:
 27483                           	opt stack 0
 27484                           tosu	equ	0xFFF
 27485                           tosh	equ	0xFFE
 27486                           tosl	equ	0xFFD
 27487                           pclath	equ	0xFFA
 27488                           tblptru	equ	0xFF8
 27489                           tblptrh	equ	0xFF7
 27490                           tblptrl	equ	0xFF6
 27491                           tablat	equ	0xFF5
 27492                           prodh	equ	0xFF4
 27493                           prodl	equ	0xFF3
 27494                           intcon	equ	0xFF2
 27495                           indf0	equ	0xFEF
 27496                           postinc0	equ	0xFEE
 27497                           fsr0h	equ	0xFEA
 27498                           fsr0l	equ	0xFE9
 27499                           wreg	equ	0xFE8
 27500                           indf1	equ	0xFE7
 27501                           postdec1	equ	0xFE5
 27502                           fsr1h	equ	0xFE2
 27503                           fsr1l	equ	0xFE1
 27504                           indf2	equ	0xFDF
 27505                           postinc2	equ	0xFDE
 27506                           postdec2	equ	0xFDD
 27507                           plusw2	equ	0xFDB
 27508                           fsr2h	equ	0xFDA
 27509                           fsr2l	equ	0xFD9
 27510                           status	equ	0xFD8
 27511                           
 27512 ;; *************** function _Console_MakeField *****************
 27513 ;; Defined at:
 27514 ;;		line 435 in file "Library/Console.c"
 27515 ;; Parameters:    Size  Location     Type
 27516 ;;  pInput          1    wreg     unsigned char 
 27517 ;; Auto vars:     Size  Location     Type
 27518 ;;  pInput          1   11[BANK0 ] unsigned char 
 27519 ;;  y               1   17[BANK0 ] unsigned char 
 27520 ;;  x               1   16[BANK0 ] unsigned char 
 27521 ;;  Column          2   12[BANK0 ] PTR struct Byte
 27522 ;;		 -> Font5x7(480), 
 27523 ;;  Index           2    9[BANK0 ] unsigned short 
 27524 ;; Return value:  Size  Location     Type
 27525 ;;                  2    5[BANK0 ] PTR unsigned short 
 27526 ;; Registers used:
 27527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27528 ;; Tracked objects:
 27529 ;;		On entry : 0/0
 27530 ;;		On exit  : 0/0
 27531 ;;		Unchanged: 0/0
 27532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27533 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27534 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27535 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27536 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27537 ;;Total ram usage:       13 bytes
 27538 ;; Hardware stack levels used:    1
 27539 ;; Hardware stack levels required when called:    8
 27540 ;; This function calls:
 27541 ;;		_Byte_GetBit
 27542 ;; This function is called by:
 27543 ;;		_Console_Render
 27544 ;; This function uses a non-reentrant model
 27545 ;;
 27546                           
 27547                           	psect	text126
 27548  016DE4                     __ptext126:
 27549                           	opt stack 0
 27550  016DE4                     _Console_MakeField:
 27551                           	opt stack 19
 27552                           
 27553                           ;incstack = 0
 27554                           ;Console_MakeField@pInput stored from wreg
 27555  016DE4  0100               	movlb	0	; () banked
 27556  016DE6  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 27557                           
 27558                           ;Console.c: 437: static Colour Fill[7][5];
 27559                           ;Console.c: 438: pInput -= 32;
 27560  016DE8  0E20               	movlw	32
 27561  016DEA  0100               	movlb	0	; () banked
 27562  016DEC  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 27563                           
 27564                           ; BSR set to: 0
 27565                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 27566  016DEE  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 27567  016DF0  0D05               	mullw	5
 27568  016DF2  CFF3 F069          	movff	prodl,Console_MakeField@Index
 27569  016DF6  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 27570                           
 27571                           ; BSR set to: 0
 27572                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 27573  016DFA  0E2F               	movlw	low _Font5x7
 27574  016DFC  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 27575  016DFE  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 27576  016E00  0EFC               	movlw	high _Font5x7
 27577  016E02  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 27578  016E04  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 27579                           
 27580                           ; BSR set to: 0
 27581                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 27582  016E06  0E00               	movlw	0
 27583  016E08  6F70               	movwf	Console_MakeField@x& (0+255),b
 27584  016E0A                     l14879:
 27585                           
 27586                           ; BSR set to: 0
 27587  016E0A  0E04               	movlw	4
 27588  016E0C  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 27589  016E0E  D001               	goto	l1077
 27590  016E10  D037               	goto	u12230
 27591  016E12                     l1077:
 27592                           
 27593                           ; BSR set to: 0
 27594                           ;Console.c: 444: {
 27595                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 27596                           
 27597                           ; BSR set to: 0
 27598  016E12  0E00               	movlw	0
 27599  016E14  6F71               	movwf	Console_MakeField@y& (0+255),b
 27600  016E16                     l14885:
 27601                           
 27602                           ; BSR set to: 0
 27603  016E16  0E06               	movlw	6
 27604  016E18  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 27605  016E1A  D001               	goto	l1079
 27606  016E1C  D02D               	goto	u12220
 27607  016E1E                     l1079:
 27608                           
 27609                           ; BSR set to: 0
 27610                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 27611                           
 27612                           ; BSR set to: 0
 27613  016E1E  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 27614  016E22  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 27615  016E26  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 27616  016E2A  EC09  F0C4         	call	_Byte_GetBit	;wreg free
 27617  016E2E  0900               	iorlw	0
 27618  016E30  A4D8               	btfss	status,2,c
 27619  016E32  D005               	goto	l1082
 27620  016E34  C154  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 27621  016E38  C155  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 27622  016E3C  D004               	goto	l1084
 27623  016E3E                     l1082:
 27624  016E3E  C1E4  F06E         	movff	_gForecolour,_Console_MakeField$10974
 27625  016E42  C1E5  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 27626  016E46                     l1084:
 27627  016E46  0100               	movlb	0	; () banked
 27628  016E48  5171               	movf	Console_MakeField@y& (0+255),w,b
 27629  016E4A  0D0A               	mullw	10
 27630  016E4C  0E5A               	movlw	low Console_MakeField@Fill
 27631  016E4E  6F67               	movwf	??_Console_MakeField& (0+255),b
 27632  016E50  0E03               	movlw	high Console_MakeField@Fill
 27633  016E52  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 27634  016E54  50F3               	movf	prodl,w,c
 27635  016E56  2767               	addwf	??_Console_MakeField& (0+255),f,b
 27636  016E58  50F4               	movf	prodh,w,c
 27637  016E5A  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 27638  016E5C  5170               	movf	Console_MakeField@x& (0+255),w,b
 27639  016E5E  0D02               	mullw	2
 27640  016E60  50F3               	movf	prodl,w,c
 27641  016E62  2567               	addwf	??_Console_MakeField& (0+255),w,b
 27642  016E64  6ED9               	movwf	fsr2l,c
 27643  016E66  50F4               	movf	prodh,w,c
 27644  016E68  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 27645  016E6A  6EDA               	movwf	fsr2h,c
 27646  016E6C  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 27647  016E70  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 27648                           
 27649                           ; BSR set to: 0
 27650  016E74  2B71               	incf	Console_MakeField@y& (0+255),f,b
 27651  016E76  D7CF               	goto	l14885
 27652  016E78                     u12220:
 27653                           
 27654                           ; BSR set to: 0
 27655                           ;Console.c: 447: Column += 1;
 27656                           
 27657                           ; BSR set to: 0
 27658  016E78  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 27659  016E7A  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 27660  016E7C  2B70               	incf	Console_MakeField@x& (0+255),f,b
 27661  016E7E  D7C5               	goto	l14879
 27662  016E80                     u12230:
 27663                           
 27664                           ; BSR set to: 0
 27665                           ;Console.c: 448: }
 27666                           ;Console.c: 449: return (ColourPtr)Fill;
 27667                           
 27668                           ; BSR set to: 0
 27669  016E80  0E5A               	movlw	low Console_MakeField@Fill
 27670  016E82  6F65               	movwf	?_Console_MakeField& (0+255),b
 27671  016E84  0E03               	movlw	high Console_MakeField@Fill
 27672  016E86  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 27673  016E88  0012               	return	
 27674  016E8A                     __end_of_Console_MakeField:
 27675                           	opt stack 0
 27676                           tosu	equ	0xFFF
 27677                           tosh	equ	0xFFE
 27678                           tosl	equ	0xFFD
 27679                           pclath	equ	0xFFA
 27680                           tblptru	equ	0xFF8
 27681                           tblptrh	equ	0xFF7
 27682                           tblptrl	equ	0xFF6
 27683                           tablat	equ	0xFF5
 27684                           prodh	equ	0xFF4
 27685                           prodl	equ	0xFF3
 27686                           intcon	equ	0xFF2
 27687                           indf0	equ	0xFEF
 27688                           postinc0	equ	0xFEE
 27689                           fsr0h	equ	0xFEA
 27690                           fsr0l	equ	0xFE9
 27691                           wreg	equ	0xFE8
 27692                           indf1	equ	0xFE7
 27693                           postdec1	equ	0xFE5
 27694                           fsr1h	equ	0xFE2
 27695                           fsr1l	equ	0xFE1
 27696                           indf2	equ	0xFDF
 27697                           postinc2	equ	0xFDE
 27698                           postdec2	equ	0xFDD
 27699                           plusw2	equ	0xFDB
 27700                           fsr2h	equ	0xFDA
 27701                           fsr2l	equ	0xFD9
 27702                           status	equ	0xFD8
 27703                           
 27704 ;; *************** function _Byte_GetBit *****************
 27705 ;; Defined at:
 27706 ;;		line 38 in file "Library/Types.c"
 27707 ;; Parameters:    Size  Location     Type
 27708 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 27709 ;;		 -> Font5x7(480), 
 27710 ;;  pBit            1    2[BANK0 ] unsigned char 
 27711 ;; Auto vars:     Size  Location     Type
 27712 ;;  Output          1    4[BANK0 ] unsigned char 
 27713 ;; Return value:  Size  Location     Type
 27714 ;;                  1    wreg      unsigned char 
 27715 ;; Registers used:
 27716 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 27717 ;; Tracked objects:
 27718 ;;		On entry : 0/0
 27719 ;;		On exit  : 0/0
 27720 ;;		Unchanged: 0/0
 27721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27722 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27723 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27724 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27725 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27726 ;;Total ram usage:        5 bytes
 27727 ;; Hardware stack levels used:    1
 27728 ;; Hardware stack levels required when called:    7
 27729 ;; This function calls:
 27730 ;;		Nothing
 27731 ;; This function is called by:
 27732 ;;		_Console_MakeField
 27733 ;;		_Word_GetBit
 27734 ;; This function uses a non-reentrant model
 27735 ;;
 27736                           
 27737                           	psect	text127
 27738  018812                     __ptext127:
 27739                           	opt stack 0
 27740  018812                     _Byte_GetBit:
 27741                           	opt stack 19
 27742                           
 27743                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 27744                           
 27745                           ; BSR set to: 0
 27746                           ;incstack = 0
 27747  018812  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 27748  018816  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 27749  01881A                     	if	0	;tblptru may be non-zero
 27750  01881A                     	endif
 27751  01881A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 27752  01881A  0E00               	movlw	low (__mediumconst shr (0+16))
 27753  01881C  6EF8               	movwf	tblptru,c
 27754  01881E                     	endif
 27755  01881E  0008               	tblrd		*
 27756  018820  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 27757                           
 27758                           ;Types.c: 42: Output >>= pBit;
 27759  018824  0100               	movlb	0	; () banked
 27760  018826  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 27761  018828  6F63               	movwf	??_Byte_GetBit& (0+255),b
 27762  01882A  D002               	goto	u11580
 27763  01882C                     u11585:
 27764  01882C  90D8               	bcf	status,0,c
 27765  01882E  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 27766  018830                     u11580:
 27767  018830  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 27768  018832  D7FC               	goto	u11585
 27769                           
 27770                           ;Types.c: 43: Output &= 1;
 27771  018834  0E01               	movlw	1
 27772  018836  0100               	movlb	0	; () banked
 27773  018838  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 27774                           
 27775                           ; BSR set to: 0
 27776                           ;Types.c: 44: return Output;
 27777  01883A  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 27778  01883C  0012               	return	
 27779  01883E                     __end_of_Byte_GetBit:
 27780                           	opt stack 0
 27781                           tosu	equ	0xFFF
 27782                           tosh	equ	0xFFE
 27783                           tosl	equ	0xFFD
 27784                           pclath	equ	0xFFA
 27785                           tblptru	equ	0xFF8
 27786                           tblptrh	equ	0xFF7
 27787                           tblptrl	equ	0xFF6
 27788                           tablat	equ	0xFF5
 27789                           prodh	equ	0xFF4
 27790                           prodl	equ	0xFF3
 27791                           intcon	equ	0xFF2
 27792                           indf0	equ	0xFEF
 27793                           postinc0	equ	0xFEE
 27794                           fsr0h	equ	0xFEA
 27795                           fsr0l	equ	0xFE9
 27796                           wreg	equ	0xFE8
 27797                           indf1	equ	0xFE7
 27798                           postdec1	equ	0xFE5
 27799                           fsr1h	equ	0xFE2
 27800                           fsr1l	equ	0xFE1
 27801                           indf2	equ	0xFDF
 27802                           postinc2	equ	0xFDE
 27803                           postdec2	equ	0xFDD
 27804                           plusw2	equ	0xFDB
 27805                           fsr2h	equ	0xFDA
 27806                           fsr2l	equ	0xFD9
 27807                           status	equ	0xFD8
 27808                           
 27809 ;; *************** function _ADCAverage *****************
 27810 ;; Defined at:
 27811 ;;		line 198 in file "dans.c"
 27812 ;; Parameters:    Size  Location     Type
 27813 ;;		None
 27814 ;; Auto vars:     Size  Location     Type
 27815 ;;		None
 27816 ;; Return value:  Size  Location     Type
 27817 ;;                  2  2000[None  ] int 
 27818 ;; Registers used:
 27819 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27820 ;; Tracked objects:
 27821 ;;		On entry : 0/0
 27822 ;;		On exit  : 0/0
 27823 ;;		Unchanged: 0/0
 27824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27826 ;;      Locals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27827 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27828 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27829 ;;Total ram usage:       26 bytes
 27830 ;; Hardware stack levels used:    1
 27831 ;; Hardware stack levels required when called:   11
 27832 ;; This function calls:
 27833 ;;		_FunctReadADC
 27834 ;;		_HMI_Render
 27835 ;;		_HMI_SetNumber
 27836 ;;		___awdiv
 27837 ;;		___fladd
 27838 ;;		___flmul
 27839 ;;		___flneg
 27840 ;;		___fltol
 27841 ;;		___xxtofl
 27842 ;;		_pow
 27843 ;; This function is called by:
 27844 ;;		_Sensor_Observe
 27845 ;;		_Closest_Object
 27846 ;;		_main
 27847 ;;		_Travel
 27848 ;;		_Find_Flag
 27849 ;; This function uses a non-reentrant model
 27850 ;;
 27851                           
 27852                           	psect	text128
 27853  013C38                     __ptext128:
 27854                           	opt stack 0
 27855  013C38                     _ADCAverage:
 27856                           	opt stack 18
 27857                           
 27858                           ;dans.c: 200: total = total - readings[readIndex];
 27859                           
 27860                           ; BSR set to: 0
 27861                           ;incstack = 0
 27862  013C38  90D8               	bcf	status,0,c
 27863  013C3A  3430               	rlcf	_readIndex,w,c
 27864  013C3C  6ED9               	movwf	fsr2l,c
 27865  013C3E  3431               	rlcf	_readIndex+1,w,c
 27866  013C40  6EDA               	movwf	fsr2h,c
 27867  013C42  0E46               	movlw	low _readings
 27868  013C44  26D9               	addwf	fsr2l,f,c
 27869  013C46  0E03               	movlw	high _readings
 27870  013C48  22DA               	addwfc	fsr2h,f,c
 27871  013C4A  CFDE F0D7          	movff	postinc2,??_ADCAverage
 27872  013C4E  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 27873  013C52  0100               	movlb	0	; () banked
 27874  013C54  1FD7               	comf	??_ADCAverage& (0+255),f,b
 27875  013C56  1FD8               	comf	(??_ADCAverage+1)& (0+255),f,b
 27876  013C58  4BD7               	infsnz	??_ADCAverage& (0+255),f,b
 27877  013C5A  2BD8               	incf	(??_ADCAverage+1)& (0+255),f,b
 27878  013C5C  0101               	movlb	1	; () banked
 27879  013C5E  5140               	movf	_total& (0+255),w,b
 27880  013C60  0100               	movlb	0	; () banked
 27881  013C62  25D7               	addwf	??_ADCAverage& (0+255),w,b
 27882  013C64  0101               	movlb	1	; () banked
 27883  013C66  6F40               	movwf	_total& (0+255),b
 27884  013C68  5141               	movf	(_total+1)& (0+255),w,b
 27885  013C6A  0100               	movlb	0	; () banked
 27886  013C6C  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 27887  013C6E  0101               	movlb	1	; () banked
 27888  013C70  6F41               	movwf	(_total+1)& (0+255),b
 27889                           
 27890                           ; BSR set to: 1
 27891                           ;dans.c: 202: readings[readIndex] = (FunctReadADC(0));
 27892  013C72  0E00               	movlw	0
 27893  013C74  0100               	movlb	0	; () banked
 27894  013C76  6F61               	movwf	(FunctReadADC@channel+1)& (0+255),b
 27895  013C78  0E00               	movlw	0
 27896  013C7A  6F60               	movwf	FunctReadADC@channel& (0+255),b
 27897  013C7C  EC80  F0C2         	call	_FunctReadADC	;wreg free
 27898  013C80  90D8               	bcf	status,0,c
 27899  013C82  3430               	rlcf	_readIndex,w,c
 27900  013C84  6ED9               	movwf	fsr2l,c
 27901  013C86  3431               	rlcf	_readIndex+1,w,c
 27902  013C88  6EDA               	movwf	fsr2h,c
 27903  013C8A  0E46               	movlw	low _readings
 27904  013C8C  26D9               	addwf	fsr2l,f,c
 27905  013C8E  0E03               	movlw	high _readings
 27906  013C90  22DA               	addwfc	fsr2h,f,c
 27907  013C92  0100               	movlb	0	; () banked
 27908  013C94  C060  FFDE         	movff	?_FunctReadADC,postinc2
 27909  013C98  C061  FFDD         	movff	?_FunctReadADC+1,postdec2
 27910                           
 27911                           ; BSR set to: 0
 27912                           ;dans.c: 204: total = total + readings[readIndex];
 27913  013C9C  90D8               	bcf	status,0,c
 27914  013C9E  3430               	rlcf	_readIndex,w,c
 27915  013CA0  6ED9               	movwf	fsr2l,c
 27916  013CA2  3431               	rlcf	_readIndex+1,w,c
 27917  013CA4  6EDA               	movwf	fsr2h,c
 27918  013CA6  0E46               	movlw	low _readings
 27919  013CA8  26D9               	addwf	fsr2l,f,c
 27920  013CAA  0E03               	movlw	high _readings
 27921  013CAC  22DA               	addwfc	fsr2h,f,c
 27922  013CAE  CFDE F0D7          	movff	postinc2,??_ADCAverage
 27923  013CB2  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 27924  013CB6  0101               	movlb	1	; () banked
 27925  013CB8  5140               	movf	_total& (0+255),w,b
 27926  013CBA  0100               	movlb	0	; () banked
 27927  013CBC  25D7               	addwf	??_ADCAverage& (0+255),w,b
 27928  013CBE  0101               	movlb	1	; () banked
 27929  013CC0  6F40               	movwf	_total& (0+255),b
 27930  013CC2  5141               	movf	(_total+1)& (0+255),w,b
 27931  013CC4  0100               	movlb	0	; () banked
 27932  013CC6  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 27933  013CC8  0101               	movlb	1	; () banked
 27934  013CCA  6F41               	movwf	(_total+1)& (0+255),b
 27935                           
 27936                           ; BSR set to: 1
 27937                           ;dans.c: 206: readIndex++;
 27938  013CCC  4A30               	infsnz	_readIndex,f,c
 27939  013CCE  2A31               	incf	_readIndex+1,f,c
 27940                           
 27941                           ; BSR set to: 1
 27942                           ;dans.c: 209: if (readIndex >= numReadings) {
 27943  013CD0  51DE               	movf	_numReadings& (0+255),w,b
 27944  013CD2  5C30               	subwf	_readIndex,w,c
 27945  013CD4  5031               	movf	_readIndex+1,w,c
 27946  013CD6  0A80               	xorlw	128
 27947  013CD8  0100               	movlb	0	; () banked
 27948  013CDA  6FD7               	movwf	??_ADCAverage& (0+255),b
 27949  013CDC  0101               	movlb	1	; () banked
 27950  013CDE  51DF               	movf	(_numReadings+1)& (0+255),w,b
 27951  013CE0  0A80               	xorlw	128
 27952  013CE2  0100               	movlb	0	; () banked
 27953  013CE4  59D7               	subwfb	??_ADCAverage& (0+255),w,b
 27954  013CE6  A0D8               	btfss	status,0,c
 27955  013CE8  D004               	goto	l2357
 27956                           
 27957                           ; BSR set to: 0
 27958                           ;dans.c: 211: readIndex = 0;
 27959  013CEA  0E00               	movlw	0
 27960  013CEC  6E31               	movwf	_readIndex+1,c
 27961  013CEE  0E00               	movlw	0
 27962  013CF0  6E30               	movwf	_readIndex,c
 27963  013CF2                     l2357:
 27964                           
 27965                           ; BSR set to: 0
 27966                           ;dans.c: 212: }
 27967                           ;dans.c: 215: average = total / numReadings;
 27968                           
 27969                           ; BSR set to: 0
 27970  013CF2  C140  F060         	movff	_total,___awdiv@dividend
 27971  013CF6  C141  F061         	movff	_total+1,___awdiv@dividend+1
 27972  013CFA  C1DE  F062         	movff	_numReadings,___awdiv@divisor
 27973  013CFE  C1DF  F063         	movff	_numReadings+1,___awdiv@divisor+1
 27974  013D02  EC1C  F0BA         	call	___awdiv	;wreg free
 27975  013D06  C060  F02E         	movff	?___awdiv,_average
 27976  013D0A  C061  F02F         	movff	?___awdiv+1,_average+1
 27977                           
 27978                           ;dans.c: 216: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 27979  013D0E  C02E  F060         	movff	_average,___xxtofl@val
 27980  013D12  C02F  F061         	movff	_average+1,___xxtofl@val+1
 27981  013D16  0100               	movlb	0	; () banked
 27982  013D18  0E00               	movlw	0
 27983  013D1A  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 27984  013D1C  0EFF               	movlw	-1
 27985  013D1E  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 27986  013D20  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 27987  013D22  0E01               	movlw	1
 27988  013D24  ECD8  F0AC         	call	___xxtofl
 27989  013D28  C060  F0D9         	movff	?___xxtofl,_ADCAverage$15833
 27990  013D2C  C061  F0DA         	movff	?___xxtofl+1,_ADCAverage$15833+1
 27991  013D30  C062  F0DB         	movff	?___xxtofl+2,_ADCAverage$15833+2
 27992  013D34  C063  F0DC         	movff	?___xxtofl+3,_ADCAverage$15833+3
 27993                           
 27994                           ;dans.c: 216: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 27995  013D38  0E00               	movlw	0
 27996  013D3A  0100               	movlb	0	; () banked
 27997  013D3C  6FC6               	movwf	pow@y& (0+255),b
 27998  013D3E  0E00               	movlw	0
 27999  013D40  6FC7               	movwf	(pow@y+1)& (0+255),b
 28000  013D42  0E00               	movlw	0
 28001  013D44  6FC8               	movwf	(pow@y+2)& (0+255),b
 28002  013D46  0E40               	movlw	64
 28003  013D48  6FC9               	movwf	(pow@y+3)& (0+255),b
 28004  013D4A  C0D9  F0C2         	movff	_ADCAverage$15833,pow@x
 28005  013D4E  C0DA  F0C3         	movff	_ADCAverage$15833+1,pow@x+1
 28006  013D52  C0DB  F0C4         	movff	_ADCAverage$15833+2,pow@x+2
 28007  013D56  C0DC  F0C5         	movff	_ADCAverage$15833+3,pow@x+3
 28008  013D5A  ECC9  F0A5         	call	_pow	;wreg free
 28009  013D5E  C0C2  F0DD         	movff	?_pow,_ADCAverage$15834
 28010  013D62  C0C3  F0DE         	movff	?_pow+1,_ADCAverage$15834+1
 28011  013D66  C0C4  F0DF         	movff	?_pow+2,_ADCAverage$15834+2
 28012  013D6A  C0C5  F0E0         	movff	?_pow+3,_ADCAverage$15834+3
 28013                           
 28014                           ;dans.c: 216: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 28015  013D6E  C02E  F060         	movff	_average,___xxtofl@val
 28016  013D72  C02F  F061         	movff	_average+1,___xxtofl@val+1
 28017  013D76  0100               	movlb	0	; () banked
 28018  013D78  0E00               	movlw	0
 28019  013D7A  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 28020  013D7C  0EFF               	movlw	-1
 28021  013D7E  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 28022  013D80  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 28023  013D82  0E01               	movlw	1
 28024  013D84  ECD8  F0AC         	call	___xxtofl
 28025  013D88  C060  F0E1         	movff	?___xxtofl,_ADCAverage$15835
 28026  013D8C  C061  F0E2         	movff	?___xxtofl+1,_ADCAverage$15835+1
 28027  013D90  C062  F0E3         	movff	?___xxtofl+2,_ADCAverage$15835+2
 28028  013D94  C063  F0E4         	movff	?___xxtofl+3,_ADCAverage$15835+3
 28029                           
 28030                           ;dans.c: 216: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 28031  013D98  0E00               	movlw	0
 28032  013D9A  0100               	movlb	0	; () banked
 28033  013D9C  6FC6               	movwf	pow@y& (0+255),b
 28034  013D9E  0E00               	movlw	0
 28035  013DA0  6FC7               	movwf	(pow@y+1)& (0+255),b
 28036  013DA2  0E40               	movlw	64
 28037  013DA4  6FC8               	movwf	(pow@y+2)& (0+255),b
 28038  013DA6  0E40               	movlw	64
 28039  013DA8  6FC9               	movwf	(pow@y+3)& (0+255),b
 28040  013DAA  C0E1  F0C2         	movff	_ADCAverage$15835,pow@x
 28041  013DAE  C0E2  F0C3         	movff	_ADCAverage$15835+1,pow@x+1
 28042  013DB2  C0E3  F0C4         	movff	_ADCAverage$15835+2,pow@x+2
 28043  013DB6  C0E4  F0C5         	movff	_ADCAverage$15835+3,pow@x+3
 28044  013DBA  ECC9  F0A5         	call	_pow	;wreg free
 28045  013DBE  C0C2  F0E5         	movff	?_pow,_ADCAverage$15836
 28046  013DC2  C0C3  F0E6         	movff	?_pow+1,_ADCAverage$15836+1
 28047  013DC6  C0C4  F0E7         	movff	?_pow+2,_ADCAverage$15836+2
 28048  013DCA  C0C5  F0E8         	movff	?_pow+3,_ADCAverage$15836+3
 28049                           
 28050                           ;dans.c: 216: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 28051  013DCE  0EA6               	movlw	166
 28052  013DD0  0100               	movlb	0	; () banked
 28053  013DD2  6F72               	movwf	___flmul@a& (0+255),b
 28054  013DD4  0E9B               	movlw	155
 28055  013DD6  6F73               	movwf	(___flmul@a+1)& (0+255),b
 28056  013DD8  0EC4               	movlw	196
 28057  013DDA  6F74               	movwf	(___flmul@a+2)& (0+255),b
 28058  013DDC  0E3A               	movlw	58
 28059  013DDE  6F75               	movwf	(___flmul@a+3)& (0+255),b
 28060  013DE0  C0DD  F06E         	movff	_ADCAverage$15834,___flmul@b
 28061  013DE4  C0DE  F06F         	movff	_ADCAverage$15834+1,___flmul@b+1
 28062  013DE8  C0DF  F070         	movff	_ADCAverage$15834+2,___flmul@b+2
 28063  013DEC  C0E0  F071         	movff	_ADCAverage$15834+3,___flmul@b+3
 28064  013DF0  ECD4  F09A         	call	___flmul	;wreg free
 28065  013DF4  C06E  F08F         	movff	?___flmul,___fladd@a
 28066  013DF8  C06F  F090         	movff	?___flmul+1,___fladd@a+1
 28067  013DFC  C070  F091         	movff	?___flmul+2,___fladd@a+2
 28068  013E00  C071  F092         	movff	?___flmul+3,___fladd@a+3
 28069  013E04  0E87               	movlw	135
 28070  013E06  0100               	movlb	0	; () banked
 28071  013E08  6F72               	movwf	___flmul@a& (0+255),b
 28072  013E0A  0E97               	movlw	151
 28073  013E0C  6F73               	movwf	(___flmul@a+1)& (0+255),b
 28074  013E0E  0E71               	movlw	113
 28075  013E10  6F74               	movwf	(___flmul@a+2)& (0+255),b
 28076  013E12  0EB5               	movlw	181
 28077  013E14  6F75               	movwf	(___flmul@a+3)& (0+255),b
 28078  013E16  C0E5  F06E         	movff	_ADCAverage$15836,___flmul@b
 28079  013E1A  C0E6  F06F         	movff	_ADCAverage$15836+1,___flmul@b+1
 28080  013E1E  C0E7  F070         	movff	_ADCAverage$15836+2,___flmul@b+2
 28081  013E22  C0E8  F071         	movff	_ADCAverage$15836+3,___flmul@b+3
 28082  013E26  ECD4  F09A         	call	___flmul	;wreg free
 28083  013E2A  C06E  F08B         	movff	?___flmul,___fladd@b
 28084  013E2E  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 28085  013E32  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 28086  013E36  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 28087  013E3A  EC7D  F09C         	call	___fladd	;wreg free
 28088  013E3E  C08B  F0E9         	movff	?___fladd,_ADCAverage$15837
 28089  013E42  C08C  F0EA         	movff	?___fladd+1,_ADCAverage$15837+1
 28090  013E46  C08D  F0EB         	movff	?___fladd+2,_ADCAverage$15837+2
 28091  013E4A  C08E  F0EC         	movff	?___fladd+3,_ADCAverage$15837+3
 28092                           
 28093                           ;dans.c: 216: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 28094  013E4E  0E8C               	movlw	140
 28095  013E50  0100               	movlb	0	; () banked
 28096  013E52  6F72               	movwf	___flmul@a& (0+255),b
 28097  013E54  0EB9               	movlw	185
 28098  013E56  6F73               	movwf	(___flmul@a+1)& (0+255),b
 28099  013E58  0E6B               	movlw	107
 28100  013E5A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 28101  013E5C  0E3F               	movlw	63
 28102  013E5E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 28103  013E60  C02E  F060         	movff	_average,___xxtofl@val
 28104  013E64  C02F  F061         	movff	_average+1,___xxtofl@val+1
 28105  013E68  0E00               	movlw	0
 28106  013E6A  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 28107  013E6C  0EFF               	movlw	-1
 28108  013E6E  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 28109  013E70  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 28110  013E72  0E01               	movlw	1
 28111  013E74  ECD8  F0AC         	call	___xxtofl
 28112  013E78  C060  F06E         	movff	?___xxtofl,___flmul@b
 28113  013E7C  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 28114  013E80  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 28115  013E84  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 28116  013E88  ECD4  F09A         	call	___flmul	;wreg free
 28117  013E8C  C06E  F087         	movff	?___flmul,___flneg@f1
 28118  013E90  C06F  F088         	movff	?___flmul+1,___flneg@f1+1
 28119  013E94  C070  F089         	movff	?___flmul+2,___flneg@f1+2
 28120  013E98  C071  F08A         	movff	?___flmul+3,___flneg@f1+3
 28121  013E9C  ECC2  F0C3         	call	___flneg	;wreg free
 28122  013EA0  C087  F08F         	movff	?___flneg,___fladd@a
 28123  013EA4  C088  F090         	movff	?___flneg+1,___fladd@a+1
 28124  013EA8  C089  F091         	movff	?___flneg+2,___fladd@a+2
 28125  013EAC  C08A  F092         	movff	?___flneg+3,___fladd@a+3
 28126  013EB0  C0E9  F08B         	movff	_ADCAverage$15837,___fladd@b
 28127  013EB4  C0EA  F08C         	movff	_ADCAverage$15837+1,___fladd@b+1
 28128  013EB8  C0EB  F08D         	movff	_ADCAverage$15837+2,___fladd@b+2
 28129  013EBC  C0EC  F08E         	movff	_ADCAverage$15837+3,___fladd@b+3
 28130  013EC0  EC7D  F09C         	call	___fladd	;wreg free
 28131  013EC4  C08B  F0ED         	movff	?___fladd,_ADCAverage$15838
 28132  013EC8  C08C  F0EE         	movff	?___fladd+1,_ADCAverage$15838+1
 28133  013ECC  C08D  F0EF         	movff	?___fladd+2,_ADCAverage$15838+2
 28134  013ED0  C08E  F0F0         	movff	?___fladd+3,_ADCAverage$15838+3
 28135                           
 28136                           ;dans.c: 216: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 28137  013ED4  0E7B               	movlw	123
 28138  013ED6  0100               	movlb	0	; () banked
 28139  013ED8  6F8F               	movwf	___fladd@a& (0+255),b
 28140  013EDA  0E54               	movlw	84
 28141  013EDC  6F90               	movwf	(___fladd@a+1)& (0+255),b
 28142  013EDE  0E63               	movlw	99
 28143  013EE0  6F91               	movwf	(___fladd@a+2)& (0+255),b
 28144  013EE2  0E43               	movlw	67
 28145  013EE4  6F92               	movwf	(___fladd@a+3)& (0+255),b
 28146  013EE6  C0ED  F08B         	movff	_ADCAverage$15838,___fladd@b
 28147  013EEA  C0EE  F08C         	movff	_ADCAverage$15838+1,___fladd@b+1
 28148  013EEE  C0EF  F08D         	movff	_ADCAverage$15838+2,___fladd@b+2
 28149  013EF2  C0F0  F08E         	movff	_ADCAverage$15838+3,___fladd@b+3
 28150  013EF6  EC7D  F09C         	call	___fladd	;wreg free
 28151  013EFA  C08B  F09F         	movff	?___fladd,___fltol@f1
 28152  013EFE  C08C  F0A0         	movff	?___fladd+1,___fltol@f1+1
 28153  013F02  C08D  F0A1         	movff	?___fladd+2,___fltol@f1+2
 28154  013F06  C08E  F0A2         	movff	?___fladd+3,___fltol@f1+3
 28155  013F0A  ECC8  F0B4         	call	___fltol	;wreg free
 28156  013F0E  C09F  F02E         	movff	?___fltol,_average
 28157  013F12  C0A0  F02F         	movff	?___fltol+1,_average+1
 28158                           
 28159                           ;dans.c: 219: HMI_SetNumber(average);
 28160  013F16  C02E  F076         	movff	_average,HMI_SetNumber@pInput
 28161  013F1A  C02F  F077         	movff	_average+1,HMI_SetNumber@pInput+1
 28162  013F1E  EC6E  F0C4         	call	_HMI_SetNumber	;wreg free
 28163                           
 28164                           ;dans.c: 220: HMI_Render();
 28165  013F22  EC11  F0C3         	call	_HMI_Render	;wreg free
 28166  013F26  0012               	return	
 28167  013F28                     __end_of_ADCAverage:
 28168                           	opt stack 0
 28169                           tosu	equ	0xFFF
 28170                           tosh	equ	0xFFE
 28171                           tosl	equ	0xFFD
 28172                           pclath	equ	0xFFA
 28173                           tblptru	equ	0xFF8
 28174                           tblptrh	equ	0xFF7
 28175                           tblptrl	equ	0xFF6
 28176                           tablat	equ	0xFF5
 28177                           prodh	equ	0xFF4
 28178                           prodl	equ	0xFF3
 28179                           intcon	equ	0xFF2
 28180                           indf0	equ	0xFEF
 28181                           postinc0	equ	0xFEE
 28182                           fsr0h	equ	0xFEA
 28183                           fsr0l	equ	0xFE9
 28184                           wreg	equ	0xFE8
 28185                           indf1	equ	0xFE7
 28186                           postdec1	equ	0xFE5
 28187                           fsr1h	equ	0xFE2
 28188                           fsr1l	equ	0xFE1
 28189                           indf2	equ	0xFDF
 28190                           postinc2	equ	0xFDE
 28191                           postdec2	equ	0xFDD
 28192                           plusw2	equ	0xFDB
 28193                           fsr2h	equ	0xFDA
 28194                           fsr2l	equ	0xFD9
 28195                           status	equ	0xFD8
 28196                           
 28197 ;; *************** function _pow *****************
 28198 ;; Defined at:
 28199 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\pow.c"
 28200 ;; Parameters:    Size  Location     Type
 28201 ;;  x               4   98[BANK0 ] int 
 28202 ;;  y               4  102[BANK0 ] int 
 28203 ;; Auto vars:     Size  Location     Type
 28204 ;;  yi              4  115[BANK0 ] unsigned long 
 28205 ;;  sign            1  114[BANK0 ] unsigned char 
 28206 ;; Return value:  Size  Location     Type
 28207 ;;                  4   98[BANK0 ] unsigned char 
 28208 ;; Registers used:
 28209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28210 ;; Tracked objects:
 28211 ;;		On entry : 0/0
 28212 ;;		On exit  : 0/0
 28213 ;;		Unchanged: 0/0
 28214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28215 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28216 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28218 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28219 ;;Total ram usage:       21 bytes
 28220 ;; Hardware stack levels used:    1
 28221 ;; Hardware stack levels required when called:   10
 28222 ;; This function calls:
 28223 ;;		___flge
 28224 ;;		___flmul
 28225 ;;		___flneg
 28226 ;;		___fltol
 28227 ;;		___xxtofl
 28228 ;;		_exp
 28229 ;;		_log
 28230 ;; This function is called by:
 28231 ;;		_ADCAverage
 28232 ;; This function uses a non-reentrant model
 28233 ;;
 28234                           
 28235                           	psect	text129
 28236  014B92                     __ptext129:
 28237                           	opt stack 0
 28238  014B92                     _pow:
 28239                           	opt stack 18
 28240                           
 28241                           ;incstack = 0
 28242  014B92  0E00               	movlw	0
 28243  014B94  0100               	movlb	0	; () banked
 28244  014B96  6FD2               	movwf	pow@sign& (0+255),b
 28245                           
 28246                           ; BSR set to: 0
 28247  014B98  51C2               	movf	pow@x& (0+255),w,b
 28248  014B9A  11C3               	iorwf	(pow@x+1)& (0+255),w,b
 28249  014B9C  11C4               	iorwf	(pow@x+2)& (0+255),w,b
 28250  014B9E  11C5               	iorwf	(pow@x+3)& (0+255),w,b
 28251  014BA0  A4D8               	btfss	status,2,c
 28252  014BA2  D024               	goto	l2982
 28253                           
 28254                           ; BSR set to: 0
 28255  014BA4  0E00               	movlw	0
 28256  014BA6  6F60               	movwf	___flge@ff1& (0+255),b
 28257  014BA8  0E00               	movlw	0
 28258  014BAA  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 28259  014BAC  0E00               	movlw	0
 28260  014BAE  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 28261  014BB0  0E00               	movlw	0
 28262  014BB2  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 28263  014BB4  C0C6  F064         	movff	pow@y,___flge@ff2
 28264  014BB8  C0C7  F065         	movff	pow@y+1,___flge@ff2+1
 28265  014BBC  C0C8  F066         	movff	pow@y+2,___flge@ff2+2
 28266  014BC0  C0C9  F067         	movff	pow@y+3,___flge@ff2+3
 28267  014BC4  EC46  F0B1         	call	___flge	;wreg free
 28268  014BC8  0100               	movlb	0	; () banked
 28269  014BCA  A0D8               	btfss	status,0,c
 28270  014BCC  D005               	goto	l2983
 28271                           
 28272                           ; BSR set to: 0
 28273  014BCE  0E00               	movlw	0
 28274  014BD0  0101               	movlb	1	; () banked
 28275  014BD2  6F1B               	movwf	(_errno+1)& (0+255),b
 28276  014BD4  0E21               	movlw	33
 28277  014BD6  6F1A               	movwf	_errno& (0+255),b
 28278  014BD8                     l2983:
 28279  014BD8  0E00               	movlw	0
 28280  014BDA  0100               	movlb	0	; () banked
 28281  014BDC  6FC2               	movwf	?_pow& (0+255),b
 28282  014BDE  0E00               	movlw	0
 28283  014BE0  6FC3               	movwf	(?_pow+1)& (0+255),b
 28284  014BE2  0E00               	movlw	0
 28285  014BE4  6FC4               	movwf	(?_pow+2)& (0+255),b
 28286  014BE6  0E00               	movlw	0
 28287  014BE8  6FC5               	movwf	(?_pow+3)& (0+255),b
 28288                           
 28289                           ; BSR set to: 0
 28290  014BEA  0012               	return	
 28291  014BEC                     l2982:
 28292                           
 28293                           ; BSR set to: 0
 28294                           
 28295                           ; BSR set to: 0
 28296  014BEC  51C6               	movf	pow@y& (0+255),w,b
 28297  014BEE  11C7               	iorwf	(pow@y+1)& (0+255),w,b
 28298  014BF0  11C8               	iorwf	(pow@y+2)& (0+255),w,b
 28299  014BF2  11C9               	iorwf	(pow@y+3)& (0+255),w,b
 28300  014BF4  A4D8               	btfss	status,2,c
 28301  014BF6  D009               	goto	l2985
 28302                           
 28303                           ; BSR set to: 0
 28304  014BF8  0E00               	movlw	0
 28305  014BFA  6FC2               	movwf	?_pow& (0+255),b
 28306  014BFC  0E00               	movlw	0
 28307  014BFE  6FC3               	movwf	(?_pow+1)& (0+255),b
 28308  014C00  0E80               	movlw	128
 28309  014C02  6FC4               	movwf	(?_pow+2)& (0+255),b
 28310  014C04  0E3F               	movlw	63
 28311  014C06  6FC5               	movwf	(?_pow+3)& (0+255),b
 28312                           
 28313                           ; BSR set to: 0
 28314  014C08  0012               	return	
 28315  014C0A                     l2985:
 28316                           
 28317                           ; BSR set to: 0
 28318                           
 28319                           ; BSR set to: 0
 28320  014C0A  AFC5               	btfss	(pow@x+3)& (0+255),7,b
 28321  014C0C  D04F               	goto	l2986
 28322                           
 28323                           ; BSR set to: 0
 28324  014C0E  C0C6  F09F         	movff	pow@y,___fltol@f1
 28325  014C12  C0C7  F0A0         	movff	pow@y+1,___fltol@f1+1
 28326  014C16  C0C8  F0A1         	movff	pow@y+2,___fltol@f1+2
 28327  014C1A  C0C9  F0A2         	movff	pow@y+3,___fltol@f1+3
 28328  014C1E  ECC8  F0B4         	call	___fltol	;wreg free
 28329  014C22  C09F  F0D3         	movff	?___fltol,pow@yi
 28330  014C26  C0A0  F0D4         	movff	?___fltol+1,pow@yi+1
 28331  014C2A  C0A1  F0D5         	movff	?___fltol+2,pow@yi+2
 28332  014C2E  C0A2  F0D6         	movff	?___fltol+3,pow@yi+3
 28333  014C32  C0D3  F060         	movff	pow@yi,___xxtofl@val
 28334  014C36  C0D4  F061         	movff	pow@yi+1,___xxtofl@val+1
 28335  014C3A  C0D5  F062         	movff	pow@yi+2,___xxtofl@val+2
 28336  014C3E  C0D6  F063         	movff	pow@yi+3,___xxtofl@val+3
 28337  014C42  0E00               	movlw	0
 28338  014C44  ECD8  F0AC         	call	___xxtofl
 28339  014C48  0100               	movlb	0	; () banked
 28340  014C4A  51C6               	movf	pow@y& (0+255),w,b
 28341  014C4C  1960               	xorwf	?___xxtofl& (0+255),w,b
 28342  014C4E  E10A               	bnz	u12690
 28343  014C50  51C7               	movf	(pow@y+1)& (0+255),w,b
 28344  014C52  1961               	xorwf	(?___xxtofl+1)& (0+255),w,b
 28345  014C54  E107               	bnz	u12690
 28346  014C56  51C8               	movf	(pow@y+2)& (0+255),w,b
 28347  014C58  1962               	xorwf	(?___xxtofl+2)& (0+255),w,b
 28348  014C5A  E104               	bnz	u12690
 28349  014C5C  51C9               	movf	(pow@y+3)& (0+255),w,b
 28350  014C5E  1963               	xorwf	(?___xxtofl+3)& (0+255),w,b
 28351  014C60  B4D8               	btfsc	status,2,c
 28352  014C62  D00F               	goto	l2987
 28353  014C64                     u12690:
 28354                           
 28355                           ; BSR set to: 0
 28356  014C64  0E00               	movlw	0
 28357  014C66  0101               	movlb	1	; () banked
 28358  014C68  6F1B               	movwf	(_errno+1)& (0+255),b
 28359  014C6A  0E21               	movlw	33
 28360  014C6C  6F1A               	movwf	_errno& (0+255),b
 28361  014C6E  0E00               	movlw	0
 28362  014C70  0100               	movlb	0	; () banked
 28363  014C72  6FC2               	movwf	?_pow& (0+255),b
 28364  014C74  0E00               	movlw	0
 28365  014C76  6FC3               	movwf	(?_pow+1)& (0+255),b
 28366  014C78  0E00               	movlw	0
 28367  014C7A  6FC4               	movwf	(?_pow+2)& (0+255),b
 28368  014C7C  0E00               	movlw	0
 28369  014C7E  6FC5               	movwf	(?_pow+3)& (0+255),b
 28370                           
 28371                           ; BSR set to: 0
 28372  014C80  0012               	return	
 28373  014C82                     l2987:
 28374                           
 28375                           ; BSR set to: 0
 28376                           
 28377                           ; BSR set to: 0
 28378  014C82  51D3               	movf	pow@yi& (0+255),w,b
 28379  014C84  0B01               	andlw	1
 28380  014C86  6FD2               	movwf	pow@sign& (0+255),b
 28381                           
 28382                           ; BSR set to: 0
 28383  014C88  C0C2  F087         	movff	pow@x,___flneg@f1
 28384  014C8C  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 28385  014C90  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 28386  014C94  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 28387  014C98  ECC2  F0C3         	call	___flneg	;wreg free
 28388  014C9C  C087  F0C2         	movff	?___flneg,pow@x
 28389  014CA0  C088  F0C3         	movff	?___flneg+1,pow@x+1
 28390  014CA4  C089  F0C4         	movff	?___flneg+2,pow@x+2
 28391  014CA8  C08A  F0C5         	movff	?___flneg+3,pow@x+3
 28392  014CAC                     l2986:
 28393  014CAC  C0C2  F0AF         	movff	pow@x,log@x
 28394  014CB0  C0C3  F0B0         	movff	pow@x+1,log@x+1
 28395  014CB4  C0C4  F0B1         	movff	pow@x+2,log@x+2
 28396  014CB8  C0C5  F0B2         	movff	pow@x+3,log@x+3
 28397  014CBC  ECBD  F0AA         	call	_log	;wreg free
 28398  014CC0  C0AF  F0CA         	movff	?_log,_pow$15839
 28399  014CC4  C0B0  F0CB         	movff	?_log+1,_pow$15839+1
 28400  014CC8  C0B1  F0CC         	movff	?_log+2,_pow$15839+2
 28401  014CCC  C0B2  F0CD         	movff	?_log+3,_pow$15839+3
 28402  014CD0  C0CA  F06E         	movff	_pow$15839,___flmul@b
 28403  014CD4  C0CB  F06F         	movff	_pow$15839+1,___flmul@b+1
 28404  014CD8  C0CC  F070         	movff	_pow$15839+2,___flmul@b+2
 28405  014CDC  C0CD  F071         	movff	_pow$15839+3,___flmul@b+3
 28406  014CE0  C0C6  F072         	movff	pow@y,___flmul@a
 28407  014CE4  C0C7  F073         	movff	pow@y+1,___flmul@a+1
 28408  014CE8  C0C8  F074         	movff	pow@y+2,___flmul@a+2
 28409  014CEC  C0C9  F075         	movff	pow@y+3,___flmul@a+3
 28410  014CF0  ECD4  F09A         	call	___flmul	;wreg free
 28411  014CF4  C06E  F0CE         	movff	?___flmul,_pow$15840
 28412  014CF8  C06F  F0CF         	movff	?___flmul+1,_pow$15840+1
 28413  014CFC  C070  F0D0         	movff	?___flmul+2,_pow$15840+2
 28414  014D00  C071  F0D1         	movff	?___flmul+3,_pow$15840+3
 28415  014D04  C0CE  F0B7         	movff	_pow$15840,exp@x
 28416  014D08  C0CF  F0B8         	movff	_pow$15840+1,exp@x+1
 28417  014D0C  C0D0  F0B9         	movff	_pow$15840+2,exp@x+2
 28418  014D10  C0D1  F0BA         	movff	_pow$15840+3,exp@x+3
 28419  014D14  EC86  F0A3         	call	_exp	;wreg free
 28420  014D18  C0B7  F0C2         	movff	?_exp,pow@x
 28421  014D1C  C0B8  F0C3         	movff	?_exp+1,pow@x+1
 28422  014D20  C0B9  F0C4         	movff	?_exp+2,pow@x+2
 28423  014D24  C0BA  F0C5         	movff	?_exp+3,pow@x+3
 28424  014D28  0100               	movlb	0	; () banked
 28425  014D2A  51D2               	movf	pow@sign& (0+255),w,b
 28426  014D2C  B4D8               	btfsc	status,2,c
 28427  014D2E  D013               	goto	l2988
 28428                           
 28429                           ; BSR set to: 0
 28430  014D30  C0C2  F087         	movff	pow@x,___flneg@f1
 28431  014D34  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 28432  014D38  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 28433  014D3C  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 28434  014D40  ECC2  F0C3         	call	___flneg	;wreg free
 28435  014D44  C087  F0C2         	movff	?___flneg,?_pow
 28436  014D48  C088  F0C3         	movff	?___flneg+1,?_pow+1
 28437  014D4C  C089  F0C4         	movff	?___flneg+2,?_pow+2
 28438  014D50  C08A  F0C5         	movff	?___flneg+3,?_pow+3
 28439  014D54  0012               	return	
 28440  014D56                     l2988:
 28441                           
 28442                           ; BSR set to: 0
 28443  014D56  C0C2  F0C2         	movff	pow@x,?_pow
 28444  014D5A  C0C3  F0C3         	movff	pow@x+1,?_pow+1
 28445  014D5E  C0C4  F0C4         	movff	pow@x+2,?_pow+2
 28446  014D62  C0C5  F0C5         	movff	pow@x+3,?_pow+3
 28447  014D66  0012               	return		;funcret
 28448  014D68                     __end_of_pow:
 28449                           	opt stack 0
 28450                           tosu	equ	0xFFF
 28451                           tosh	equ	0xFFE
 28452                           tosl	equ	0xFFD
 28453                           pclath	equ	0xFFA
 28454                           tblptru	equ	0xFF8
 28455                           tblptrh	equ	0xFF7
 28456                           tblptrl	equ	0xFF6
 28457                           tablat	equ	0xFF5
 28458                           prodh	equ	0xFF4
 28459                           prodl	equ	0xFF3
 28460                           intcon	equ	0xFF2
 28461                           indf0	equ	0xFEF
 28462                           postinc0	equ	0xFEE
 28463                           fsr0h	equ	0xFEA
 28464                           fsr0l	equ	0xFE9
 28465                           wreg	equ	0xFE8
 28466                           indf1	equ	0xFE7
 28467                           postdec1	equ	0xFE5
 28468                           fsr1h	equ	0xFE2
 28469                           fsr1l	equ	0xFE1
 28470                           indf2	equ	0xFDF
 28471                           postinc2	equ	0xFDE
 28472                           postdec2	equ	0xFDD
 28473                           plusw2	equ	0xFDB
 28474                           fsr2h	equ	0xFDA
 28475                           fsr2l	equ	0xFD9
 28476                           status	equ	0xFD8
 28477                           
 28478 ;; *************** function _log *****************
 28479 ;; Defined at:
 28480 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\log.c"
 28481 ;; Parameters:    Size  Location     Type
 28482 ;;  x               4   79[BANK0 ] unsigned char 
 28483 ;; Auto vars:     Size  Location     Type
 28484 ;;  exponent        2   83[BANK0 ] int 
 28485 ;; Return value:  Size  Location     Type
 28486 ;;                  4   79[BANK0 ] int 
 28487 ;; Registers used:
 28488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28489 ;; Tracked objects:
 28490 ;;		On entry : 0/0
 28491 ;;		On exit  : 0/0
 28492 ;;		Unchanged: 0/0
 28493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28494 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28495 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28497 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28498 ;;Total ram usage:        6 bytes
 28499 ;; Hardware stack levels used:    1
 28500 ;; Hardware stack levels required when called:    9
 28501 ;; This function calls:
 28502 ;;		___fladd
 28503 ;;		___flmul
 28504 ;;		___xxtofl
 28505 ;;		_eval_poly
 28506 ;;		_frexp
 28507 ;; This function is called by:
 28508 ;;		_pow
 28509 ;; This function uses a non-reentrant model
 28510 ;;
 28511                           
 28512                           	psect	text130
 28513  01557A                     __ptext130:
 28514                           	opt stack 0
 28515  01557A                     _log:
 28516                           	opt stack 18
 28517                           
 28518                           ;incstack = 0
 28519  01557A  0100               	movlb	0	; () banked
 28520  01557C  AFB2               	btfss	(log@x+3)& (0+255),7,b
 28521  01557E  D00F               	goto	l3184
 28522                           
 28523                           ; BSR set to: 0
 28524  015580  0E00               	movlw	0
 28525  015582  0101               	movlb	1	; () banked
 28526  015584  6F1B               	movwf	(_errno+1)& (0+255),b
 28527  015586  0E21               	movlw	33
 28528  015588  6F1A               	movwf	_errno& (0+255),b
 28529  01558A  0E00               	movlw	0
 28530  01558C  0100               	movlb	0	; () banked
 28531  01558E  6FAF               	movwf	?_log& (0+255),b
 28532  015590  0E00               	movlw	0
 28533  015592  6FB0               	movwf	(?_log+1)& (0+255),b
 28534  015594  0E00               	movlw	0
 28535  015596  6FB1               	movwf	(?_log+2)& (0+255),b
 28536  015598  0E00               	movlw	0
 28537  01559A  6FB2               	movwf	(?_log+3)& (0+255),b
 28538                           
 28539                           ; BSR set to: 0
 28540  01559C  0012               	return	
 28541  01559E                     l3184:
 28542                           
 28543                           ; BSR set to: 0
 28544                           
 28545                           ; BSR set to: 0
 28546  01559E  51AF               	movf	log@x& (0+255),w,b
 28547  0155A0  11B0               	iorwf	(log@x+1)& (0+255),w,b
 28548  0155A2  11B1               	iorwf	(log@x+2)& (0+255),w,b
 28549  0155A4  11B2               	iorwf	(log@x+3)& (0+255),w,b
 28550  0155A6  A4D8               	btfss	status,2,c
 28551  0155A8  D00F               	goto	l3186
 28552                           
 28553                           ; BSR set to: 0
 28554  0155AA  0E00               	movlw	0
 28555  0155AC  0101               	movlb	1	; () banked
 28556  0155AE  6F1B               	movwf	(_errno+1)& (0+255),b
 28557  0155B0  0E22               	movlw	34
 28558  0155B2  6F1A               	movwf	_errno& (0+255),b
 28559  0155B4  0E00               	movlw	0
 28560  0155B6  0100               	movlb	0	; () banked
 28561  0155B8  6FAF               	movwf	?_log& (0+255),b
 28562  0155BA  0E00               	movlw	0
 28563  0155BC  6FB0               	movwf	(?_log+1)& (0+255),b
 28564  0155BE  0E00               	movlw	0
 28565  0155C0  6FB1               	movwf	(?_log+2)& (0+255),b
 28566  0155C2  0E00               	movlw	0
 28567  0155C4  6FB2               	movwf	(?_log+3)& (0+255),b
 28568                           
 28569                           ; BSR set to: 0
 28570  0155C6  0012               	return	
 28571  0155C8                     l3186:
 28572                           
 28573                           ; BSR set to: 0
 28574                           
 28575                           ; BSR set to: 0
 28576  0155C8  0E00               	movlw	0
 28577  0155CA  6F72               	movwf	___flmul@a& (0+255),b
 28578  0155CC  0E00               	movlw	0
 28579  0155CE  6F73               	movwf	(___flmul@a+1)& (0+255),b
 28580  0155D0  0E00               	movlw	0
 28581  0155D2  6F74               	movwf	(___flmul@a+2)& (0+255),b
 28582  0155D4  0E40               	movlw	64
 28583  0155D6  6F75               	movwf	(___flmul@a+3)& (0+255),b
 28584  0155D8  0EB3               	movlw	low log@exponent
 28585  0155DA  6F64               	movwf	frexp@eptr& (0+255),b
 28586  0155DC  0E00               	movlw	high log@exponent
 28587  0155DE  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 28588  0155E0  C0AF  F060         	movff	log@x,frexp@value
 28589  0155E4  C0B0  F061         	movff	log@x+1,frexp@value+1
 28590  0155E8  C0B1  F062         	movff	log@x+2,frexp@value+2
 28591  0155EC  C0B2  F063         	movff	log@x+3,frexp@value+3
 28592  0155F0  EC45  F0B7         	call	_frexp	;wreg free
 28593  0155F4  C060  F06E         	movff	?_frexp,___flmul@b
 28594  0155F8  C061  F06F         	movff	?_frexp+1,___flmul@b+1
 28595  0155FC  C062  F070         	movff	?_frexp+2,___flmul@b+2
 28596  015600  C063  F071         	movff	?_frexp+3,___flmul@b+3
 28597  015604  ECD4  F09A         	call	___flmul	;wreg free
 28598  015608  C06E  F08B         	movff	?___flmul,___fladd@b
 28599  01560C  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 28600  015610  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 28601  015614  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 28602  015618  0E00               	movlw	0
 28603  01561A  0100               	movlb	0	; () banked
 28604  01561C  6F8F               	movwf	___fladd@a& (0+255),b
 28605  01561E  0E00               	movlw	0
 28606  015620  6F90               	movwf	(___fladd@a+1)& (0+255),b
 28607  015622  0E80               	movlw	128
 28608  015624  6F91               	movwf	(___fladd@a+2)& (0+255),b
 28609  015626  0EBF               	movlw	191
 28610  015628  6F92               	movwf	(___fladd@a+3)& (0+255),b
 28611  01562A  EC7D  F09C         	call	___fladd	;wreg free
 28612  01562E  C08B  F0AF         	movff	?___fladd,log@x
 28613  015632  C08C  F0B0         	movff	?___fladd+1,log@x+1
 28614  015636  C08D  F0B1         	movff	?___fladd+2,log@x+2
 28615  01563A  C08E  F0B2         	movff	?___fladd+3,log@x+3
 28616  01563E  0100               	movlb	0	; () banked
 28617  015640  07B3               	decf	log@exponent& (0+255),f,b
 28618  015642  A0D8               	btfss	status,0,c
 28619  015644  07B4               	decf	(log@exponent+1)& (0+255),f,b
 28620                           
 28621                           ; BSR set to: 0
 28622  015646  C0AF  F09F         	movff	log@x,eval_poly@x
 28623  01564A  C0B0  F0A0         	movff	log@x+1,eval_poly@x+1
 28624  01564E  C0B1  F0A1         	movff	log@x+2,eval_poly@x+2
 28625  015652  C0B2  F0A2         	movff	log@x+3,eval_poly@x+3
 28626  015656  0E37               	movlw	low log@coeff
 28627  015658  6FA3               	movwf	eval_poly@d& (0+255),b
 28628  01565A  0EFE               	movlw	high log@coeff
 28629  01565C  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 28630  01565E  0E00               	movlw	0
 28631  015660  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 28632  015662  0E08               	movlw	8
 28633  015664  6FA5               	movwf	eval_poly@n& (0+255),b
 28634  015666  ECE8  F0B2         	call	_eval_poly	;wreg free
 28635  01566A  C09F  F0AF         	movff	?_eval_poly,log@x
 28636  01566E  C0A0  F0B0         	movff	?_eval_poly+1,log@x+1
 28637  015672  C0A1  F0B1         	movff	?_eval_poly+2,log@x+2
 28638  015676  C0A2  F0B2         	movff	?_eval_poly+3,log@x+3
 28639  01567A  0E18               	movlw	24
 28640  01567C  0100               	movlb	0	; () banked
 28641  01567E  6F72               	movwf	___flmul@a& (0+255),b
 28642  015680  0E72               	movlw	114
 28643  015682  6F73               	movwf	(___flmul@a+1)& (0+255),b
 28644  015684  0E31               	movlw	49
 28645  015686  6F74               	movwf	(___flmul@a+2)& (0+255),b
 28646  015688  0E3F               	movlw	63
 28647  01568A  6F75               	movwf	(___flmul@a+3)& (0+255),b
 28648  01568C  C0B3  F060         	movff	log@exponent,___xxtofl@val
 28649  015690  C0B4  F061         	movff	log@exponent+1,___xxtofl@val+1
 28650  015694  0E00               	movlw	0
 28651  015696  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 28652  015698  0EFF               	movlw	-1
 28653  01569A  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 28654  01569C  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 28655  01569E  0E01               	movlw	1
 28656  0156A0  ECD8  F0AC         	call	___xxtofl
 28657  0156A4  C060  F06E         	movff	?___xxtofl,___flmul@b
 28658  0156A8  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 28659  0156AC  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 28660  0156B0  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 28661  0156B4  ECD4  F09A         	call	___flmul	;wreg free
 28662  0156B8  C06E  F08B         	movff	?___flmul,___fladd@b
 28663  0156BC  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 28664  0156C0  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 28665  0156C4  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 28666  0156C8  C0AF  F08F         	movff	log@x,___fladd@a
 28667  0156CC  C0B0  F090         	movff	log@x+1,___fladd@a+1
 28668  0156D0  C0B1  F091         	movff	log@x+2,___fladd@a+2
 28669  0156D4  C0B2  F092         	movff	log@x+3,___fladd@a+3
 28670  0156D8  EC7D  F09C         	call	___fladd	;wreg free
 28671  0156DC  C08B  F0AF         	movff	?___fladd,?_log
 28672  0156E0  C08C  F0B0         	movff	?___fladd+1,?_log+1
 28673  0156E4  C08D  F0B1         	movff	?___fladd+2,?_log+2
 28674  0156E8  C08E  F0B2         	movff	?___fladd+3,?_log+3
 28675  0156EC  0012               	return	
 28676  0156EE                     __end_of_log:
 28677                           	opt stack 0
 28678                           tosu	equ	0xFFF
 28679                           tosh	equ	0xFFE
 28680                           tosl	equ	0xFFD
 28681                           pclath	equ	0xFFA
 28682                           tblptru	equ	0xFF8
 28683                           tblptrh	equ	0xFF7
 28684                           tblptrl	equ	0xFF6
 28685                           tablat	equ	0xFF5
 28686                           prodh	equ	0xFF4
 28687                           prodl	equ	0xFF3
 28688                           intcon	equ	0xFF2
 28689                           indf0	equ	0xFEF
 28690                           postinc0	equ	0xFEE
 28691                           fsr0h	equ	0xFEA
 28692                           fsr0l	equ	0xFE9
 28693                           wreg	equ	0xFE8
 28694                           indf1	equ	0xFE7
 28695                           postdec1	equ	0xFE5
 28696                           fsr1h	equ	0xFE2
 28697                           fsr1l	equ	0xFE1
 28698                           indf2	equ	0xFDF
 28699                           postinc2	equ	0xFDE
 28700                           postdec2	equ	0xFDD
 28701                           plusw2	equ	0xFDB
 28702                           fsr2h	equ	0xFDA
 28703                           fsr2l	equ	0xFD9
 28704                           status	equ	0xFD8
 28705                           
 28706 ;; *************** function _exp *****************
 28707 ;; Defined at:
 28708 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\exp.c"
 28709 ;; Parameters:    Size  Location     Type
 28710 ;;  x               4   87[BANK0 ] int 
 28711 ;; Auto vars:     Size  Location     Type
 28712 ;;  exponent        2   95[BANK0 ] int 
 28713 ;;  sign            1   97[BANK0 ] unsigned char 
 28714 ;; Return value:  Size  Location     Type
 28715 ;;                  4   87[BANK0 ] unsigned char 
 28716 ;; Registers used:
 28717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28718 ;; Tracked objects:
 28719 ;;		On entry : 0/0
 28720 ;;		On exit  : 0/0
 28721 ;;		Unchanged: 0/0
 28722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28723 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28724 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28726 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28727 ;;Total ram usage:       11 bytes
 28728 ;; Hardware stack levels used:    1
 28729 ;; Hardware stack levels required when called:    9
 28730 ;; This function calls:
 28731 ;;		___fldiv
 28732 ;;		___flge
 28733 ;;		___flmul
 28734 ;;		___flneg
 28735 ;;		___flsub
 28736 ;;		___fltol
 28737 ;;		___xxtofl
 28738 ;;		_eval_poly
 28739 ;;		_floor
 28740 ;;		_ldexp
 28741 ;; This function is called by:
 28742 ;;		_pow
 28743 ;; This function uses a non-reentrant model
 28744 ;;
 28745                           
 28746                           	psect	text131
 28747  01470C                     __ptext131:
 28748                           	opt stack 0
 28749  01470C                     _exp:
 28750                           	opt stack 18
 28751                           
 28752                           ;incstack = 0
 28753  01470C  0100               	movlb	0	; () banked
 28754  01470E  51B7               	movf	exp@x& (0+255),w,b
 28755  014710  11B8               	iorwf	(exp@x+1)& (0+255),w,b
 28756  014712  11B9               	iorwf	(exp@x+2)& (0+255),w,b
 28757  014714  11BA               	iorwf	(exp@x+3)& (0+255),w,b
 28758  014716  A4D8               	btfss	status,2,c
 28759  014718  D009               	goto	l3142
 28760                           
 28761                           ; BSR set to: 0
 28762  01471A  0E00               	movlw	0
 28763  01471C  6FB7               	movwf	?_exp& (0+255),b
 28764  01471E  0E00               	movlw	0
 28765  014720  6FB8               	movwf	(?_exp+1)& (0+255),b
 28766  014722  0E80               	movlw	128
 28767  014724  6FB9               	movwf	(?_exp+2)& (0+255),b
 28768  014726  0E3F               	movlw	63
 28769  014728  6FBA               	movwf	(?_exp+3)& (0+255),b
 28770                           
 28771                           ; BSR set to: 0
 28772  01472A  0012               	return	
 28773  01472C                     l3142:
 28774                           
 28775                           ; BSR set to: 0
 28776                           
 28777                           ; BSR set to: 0
 28778  01472C  0E18               	movlw	24
 28779  01472E  6F60               	movwf	___flge@ff1& (0+255),b
 28780  014730  0E72               	movlw	114
 28781  014732  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 28782  014734  0E31               	movlw	49
 28783  014736  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 28784  014738  0E44               	movlw	68
 28785  01473A  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 28786  01473C  C0B7  F064         	movff	exp@x,___flge@ff2
 28787  014740  C0B8  F065         	movff	exp@x+1,___flge@ff2+1
 28788  014744  C0B9  F066         	movff	exp@x+2,___flge@ff2+2
 28789  014748  C0BA  F067         	movff	exp@x+3,___flge@ff2+3
 28790  01474C  EC46  F0B1         	call	___flge	;wreg free
 28791  014750  0100               	movlb	0	; () banked
 28792  014752  B0D8               	btfsc	status,0,c
 28793  014754  D00F               	goto	l3144
 28794                           
 28795                           ; BSR set to: 0
 28796  014756  0E00               	movlw	0
 28797  014758  0101               	movlb	1	; () banked
 28798  01475A  6F1B               	movwf	(_errno+1)& (0+255),b
 28799  01475C  0E22               	movlw	34
 28800  01475E  6F1A               	movwf	_errno& (0+255),b
 28801  014760  0EFF               	movlw	255
 28802  014762  0100               	movlb	0	; () banked
 28803  014764  6FB7               	movwf	?_exp& (0+255),b
 28804  014766  0EFF               	movlw	255
 28805  014768  6FB8               	movwf	(?_exp+1)& (0+255),b
 28806  01476A  0E7F               	movlw	127
 28807  01476C  6FB9               	movwf	(?_exp+2)& (0+255),b
 28808  01476E  0E7F               	movlw	127
 28809  014770  6FBA               	movwf	(?_exp+3)& (0+255),b
 28810                           
 28811                           ; BSR set to: 0
 28812  014772  0012               	return	
 28813  014774                     l3144:
 28814                           
 28815                           ; BSR set to: 0
 28816                           
 28817                           ; BSR set to: 0
 28818  014774  C0B7  F060         	movff	exp@x,___flge@ff1
 28819  014778  C0B8  F061         	movff	exp@x+1,___flge@ff1+1
 28820  01477C  C0B9  F062         	movff	exp@x+2,___flge@ff1+2
 28821  014780  C0BA  F063         	movff	exp@x+3,___flge@ff1+3
 28822  014784  0E87               	movlw	135
 28823  014786  6F64               	movwf	___flge@ff2& (0+255),b
 28824  014788  0E48               	movlw	72
 28825  01478A  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 28826  01478C  0E3A               	movlw	58
 28827  01478E  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 28828  014790  0EC4               	movlw	196
 28829  014792  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 28830  014794  EC46  F0B1         	call	___flge	;wreg free
 28831  014798  0100               	movlb	0	; () banked
 28832  01479A  B0D8               	btfsc	status,0,c
 28833  01479C  D00F               	goto	l3145
 28834                           
 28835                           ; BSR set to: 0
 28836  01479E  0E00               	movlw	0
 28837  0147A0  0101               	movlb	1	; () banked
 28838  0147A2  6F1B               	movwf	(_errno+1)& (0+255),b
 28839  0147A4  0E22               	movlw	34
 28840  0147A6  6F1A               	movwf	_errno& (0+255),b
 28841  0147A8  0E00               	movlw	0
 28842  0147AA  0100               	movlb	0	; () banked
 28843  0147AC  6FB7               	movwf	?_exp& (0+255),b
 28844  0147AE  0E00               	movlw	0
 28845  0147B0  6FB8               	movwf	(?_exp+1)& (0+255),b
 28846  0147B2  0E00               	movlw	0
 28847  0147B4  6FB9               	movwf	(?_exp+2)& (0+255),b
 28848  0147B6  0E00               	movlw	0
 28849  0147B8  6FBA               	movwf	(?_exp+3)& (0+255),b
 28850                           
 28851                           ; BSR set to: 0
 28852  0147BA  0012               	return	
 28853  0147BC                     l3145:
 28854                           
 28855                           ; BSR set to: 0
 28856                           
 28857                           ; BSR set to: 0
 28858  0147BC  AFBA               	btfss	(exp@x+3)& (0+255),7,b
 28859  0147BE  D002               	goto	u12380
 28860  0147C0  0E01               	movlw	1
 28861  0147C2  D001               	goto	u12390
 28862  0147C4                     u12380:
 28863  0147C4  0E00               	movlw	0
 28864  0147C6                     u12390:
 28865  0147C6  6FC1               	movwf	exp@sign& (0+255),b
 28866                           
 28867                           ; BSR set to: 0
 28868  0147C8  51C1               	movf	exp@sign& (0+255),w,b
 28869  0147CA  B4D8               	btfsc	status,2,c
 28870  0147CC  D012               	goto	l3146
 28871                           
 28872                           ; BSR set to: 0
 28873  0147CE  C0B7  F087         	movff	exp@x,___flneg@f1
 28874  0147D2  C0B8  F088         	movff	exp@x+1,___flneg@f1+1
 28875  0147D6  C0B9  F089         	movff	exp@x+2,___flneg@f1+2
 28876  0147DA  C0BA  F08A         	movff	exp@x+3,___flneg@f1+3
 28877  0147DE  ECC2  F0C3         	call	___flneg	;wreg free
 28878  0147E2  C087  F0B7         	movff	?___flneg,exp@x
 28879  0147E6  C088  F0B8         	movff	?___flneg+1,exp@x+1
 28880  0147EA  C089  F0B9         	movff	?___flneg+2,exp@x+2
 28881  0147EE  C08A  F0BA         	movff	?___flneg+3,exp@x+3
 28882  0147F2                     l3146:
 28883  0147F2  C0B7  F06E         	movff	exp@x,___flmul@b
 28884  0147F6  C0B8  F06F         	movff	exp@x+1,___flmul@b+1
 28885  0147FA  C0B9  F070         	movff	exp@x+2,___flmul@b+2
 28886  0147FE  C0BA  F071         	movff	exp@x+3,___flmul@b+3
 28887  014802  0E3B               	movlw	59
 28888  014804  0100               	movlb	0	; () banked
 28889  014806  6F72               	movwf	___flmul@a& (0+255),b
 28890  014808  0EAA               	movlw	170
 28891  01480A  6F73               	movwf	(___flmul@a+1)& (0+255),b
 28892  01480C  0EB8               	movlw	184
 28893  01480E  6F74               	movwf	(___flmul@a+2)& (0+255),b
 28894  014810  0E3F               	movlw	63
 28895  014812  6F75               	movwf	(___flmul@a+3)& (0+255),b
 28896  014814  ECD4  F09A         	call	___flmul	;wreg free
 28897  014818  C06E  F0B7         	movff	?___flmul,exp@x
 28898  01481C  C06F  F0B8         	movff	?___flmul+1,exp@x+1
 28899  014820  C070  F0B9         	movff	?___flmul+2,exp@x+2
 28900  014824  C071  F0BA         	movff	?___flmul+3,exp@x+3
 28901  014828  C0B7  F0A9         	movff	exp@x,floor@x
 28902  01482C  C0B8  F0AA         	movff	exp@x+1,floor@x+1
 28903  014830  C0B9  F0AB         	movff	exp@x+2,floor@x+2
 28904  014834  C0BA  F0AC         	movff	exp@x+3,floor@x+3
 28905  014838  ECD7  F0B1         	call	_floor	;wreg free
 28906  01483C  C0A9  F0BB         	movff	?_floor,_exp$15841
 28907  014840  C0AA  F0BC         	movff	?_floor+1,_exp$15841+1
 28908  014844  C0AB  F0BD         	movff	?_floor+2,_exp$15841+2
 28909  014848  C0AC  F0BE         	movff	?_floor+3,_exp$15841+3
 28910  01484C  C0BB  F09F         	movff	_exp$15841,___fltol@f1
 28911  014850  C0BC  F0A0         	movff	_exp$15841+1,___fltol@f1+1
 28912  014854  C0BD  F0A1         	movff	_exp$15841+2,___fltol@f1+2
 28913  014858  C0BE  F0A2         	movff	_exp$15841+3,___fltol@f1+3
 28914  01485C  ECC8  F0B4         	call	___fltol	;wreg free
 28915  014860  C09F  F0BF         	movff	?___fltol,exp@exponent
 28916  014864  C0A0  F0C0         	movff	?___fltol+1,exp@exponent+1
 28917  014868  C0B7  F09F         	movff	exp@x,___flsub@b
 28918  01486C  C0B8  F0A0         	movff	exp@x+1,___flsub@b+1
 28919  014870  C0B9  F0A1         	movff	exp@x+2,___flsub@b+2
 28920  014874  C0BA  F0A2         	movff	exp@x+3,___flsub@b+3
 28921  014878  C0BF  F060         	movff	exp@exponent,___xxtofl@val
 28922  01487C  C0C0  F061         	movff	exp@exponent+1,___xxtofl@val+1
 28923  014880  0100               	movlb	0	; () banked
 28924  014882  0E00               	movlw	0
 28925  014884  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 28926  014886  0EFF               	movlw	-1
 28927  014888  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 28928  01488A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 28929  01488C  0E01               	movlw	1
 28930  01488E  ECD8  F0AC         	call	___xxtofl
 28931  014892  C060  F0A3         	movff	?___xxtofl,___flsub@a
 28932  014896  C061  F0A4         	movff	?___xxtofl+1,___flsub@a+1
 28933  01489A  C062  F0A5         	movff	?___xxtofl+2,___flsub@a+2
 28934  01489E  C063  F0A6         	movff	?___xxtofl+3,___flsub@a+3
 28935  0148A2  EC76  F0C1         	call	___flsub	;wreg free
 28936  0148A6  C09F  F0B7         	movff	?___flsub,exp@x
 28937  0148AA  C0A0  F0B8         	movff	?___flsub+1,exp@x+1
 28938  0148AE  C0A1  F0B9         	movff	?___flsub+2,exp@x+2
 28939  0148B2  C0A2  F0BA         	movff	?___flsub+3,exp@x+3
 28940  0148B6  C0B7  F09F         	movff	exp@x,eval_poly@x
 28941  0148BA  C0B8  F0A0         	movff	exp@x+1,eval_poly@x+1
 28942  0148BE  C0B9  F0A1         	movff	exp@x+2,eval_poly@x+2
 28943  0148C2  C0BA  F0A2         	movff	exp@x+3,eval_poly@x+3
 28944  0148C6  0E0F               	movlw	low exp@coeff
 28945  0148C8  0100               	movlb	0	; () banked
 28946  0148CA  6FA3               	movwf	eval_poly@d& (0+255),b
 28947  0148CC  0EFE               	movlw	high exp@coeff
 28948  0148CE  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 28949  0148D0  0E00               	movlw	0
 28950  0148D2  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 28951  0148D4  0E09               	movlw	9
 28952  0148D6  6FA5               	movwf	eval_poly@n& (0+255),b
 28953  0148D8  ECE8  F0B2         	call	_eval_poly	;wreg free
 28954  0148DC  C09F  F0AF         	movff	?_eval_poly,ldexp@value
 28955  0148E0  C0A0  F0B0         	movff	?_eval_poly+1,ldexp@value+1
 28956  0148E4  C0A1  F0B1         	movff	?_eval_poly+2,ldexp@value+2
 28957  0148E8  C0A2  F0B2         	movff	?_eval_poly+3,ldexp@value+3
 28958  0148EC  C0BF  F0B3         	movff	exp@exponent,ldexp@newexp
 28959  0148F0  C0C0  F0B4         	movff	exp@exponent+1,ldexp@newexp+1
 28960  0148F4  ECE7  F0B3         	call	_ldexp	;wreg free
 28961  0148F8  C0AF  F0B7         	movff	?_ldexp,exp@x
 28962  0148FC  C0B0  F0B8         	movff	?_ldexp+1,exp@x+1
 28963  014900  C0B1  F0B9         	movff	?_ldexp+2,exp@x+2
 28964  014904  C0B2  F0BA         	movff	?_ldexp+3,exp@x+3
 28965  014908  0100               	movlb	0	; () banked
 28966  01490A  51C1               	movf	exp@sign& (0+255),w,b
 28967  01490C  B4D8               	btfsc	status,2,c
 28968  01490E  D02F               	goto	l3147
 28969                           
 28970                           ; BSR set to: 0
 28971  014910  29B7               	incf	exp@x& (0+255),w,b
 28972  014912  E112               	bnz	l15031
 28973  014914  29B8               	incf	(exp@x+1)& (0+255),w,b
 28974  014916  E110               	bnz	l15031
 28975  014918  0E7F               	movlw	127
 28976  01491A  19B9               	xorwf	(exp@x+2)& (0+255),w,b
 28977  01491C  E10D               	bnz	l15031
 28978  01491E  0E7F               	movlw	127
 28979  014920  19BA               	xorwf	(exp@x+3)& (0+255),w,b
 28980  014922  A4D8               	btfss	status,2,c
 28981  014924  D009               	goto	l3148
 28982                           
 28983                           ; BSR set to: 0
 28984  014926  0E00               	movlw	0
 28985  014928  6FB7               	movwf	?_exp& (0+255),b
 28986  01492A  0E00               	movlw	0
 28987  01492C  6FB8               	movwf	(?_exp+1)& (0+255),b
 28988  01492E  0E00               	movlw	0
 28989  014930  6FB9               	movwf	(?_exp+2)& (0+255),b
 28990  014932  0E00               	movlw	0
 28991  014934  6FBA               	movwf	(?_exp+3)& (0+255),b
 28992                           
 28993                           ; BSR set to: 0
 28994  014936  0012               	return	
 28995  014938                     l3148:
 28996  014938                     l15031:
 28997                           
 28998                           ; BSR set to: 0
 28999  014938  0E00               	movlw	0
 29000  01493A  6F60               	movwf	___fldiv@b& (0+255),b
 29001  01493C  0E00               	movlw	0
 29002  01493E  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 29003  014940  0E80               	movlw	128
 29004  014942  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 29005  014944  0E3F               	movlw	63
 29006  014946  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 29007  014948  C0B7  F064         	movff	exp@x,___fldiv@a
 29008  01494C  C0B8  F065         	movff	exp@x+1,___fldiv@a+1
 29009  014950  C0B9  F066         	movff	exp@x+2,___fldiv@a+2
 29010  014954  C0BA  F067         	movff	exp@x+3,___fldiv@a+3
 29011  014958  EC94  F09F         	call	___fldiv	;wreg free
 29012  01495C  C060  F0B7         	movff	?___fldiv,?_exp
 29013  014960  C061  F0B8         	movff	?___fldiv+1,?_exp+1
 29014  014964  C062  F0B9         	movff	?___fldiv+2,?_exp+2
 29015  014968  C063  F0BA         	movff	?___fldiv+3,?_exp+3
 29016  01496C  0012               	return	
 29017  01496E                     l3147:
 29018                           
 29019                           ; BSR set to: 0
 29020  01496E  C0B7  F0B7         	movff	exp@x,?_exp
 29021  014972  C0B8  F0B8         	movff	exp@x+1,?_exp+1
 29022  014976  C0B9  F0B9         	movff	exp@x+2,?_exp+2
 29023  01497A  C0BA  F0BA         	movff	exp@x+3,?_exp+3
 29024  01497E  0012               	return		;funcret
 29025  014980                     __end_of_exp:
 29026                           	opt stack 0
 29027                           tosu	equ	0xFFF
 29028                           tosh	equ	0xFFE
 29029                           tosl	equ	0xFFD
 29030                           pclath	equ	0xFFA
 29031                           tblptru	equ	0xFF8
 29032                           tblptrh	equ	0xFF7
 29033                           tblptrl	equ	0xFF6
 29034                           tablat	equ	0xFF5
 29035                           prodh	equ	0xFF4
 29036                           prodl	equ	0xFF3
 29037                           intcon	equ	0xFF2
 29038                           indf0	equ	0xFEF
 29039                           postinc0	equ	0xFEE
 29040                           fsr0h	equ	0xFEA
 29041                           fsr0l	equ	0xFE9
 29042                           wreg	equ	0xFE8
 29043                           indf1	equ	0xFE7
 29044                           postdec1	equ	0xFE5
 29045                           fsr1h	equ	0xFE2
 29046                           fsr1l	equ	0xFE1
 29047                           indf2	equ	0xFDF
 29048                           postinc2	equ	0xFDE
 29049                           postdec2	equ	0xFDD
 29050                           plusw2	equ	0xFDB
 29051                           fsr2h	equ	0xFDA
 29052                           fsr2l	equ	0xFD9
 29053                           status	equ	0xFD8
 29054                           
 29055 ;; *************** function _ldexp *****************
 29056 ;; Defined at:
 29057 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
 29058 ;; Parameters:    Size  Location     Type
 29059 ;;  value           4   79[BANK0 ] unsigned char 
 29060 ;;  newexp          2   83[BANK0 ] int 
 29061 ;; Auto vars:     Size  Location     Type
 29062 ;;		None
 29063 ;; Return value:  Size  Location     Type
 29064 ;;                  4   79[BANK0 ] int 
 29065 ;; Registers used:
 29066 ;;		wreg, status,2, status,0
 29067 ;; Tracked objects:
 29068 ;;		On entry : 0/0
 29069 ;;		On exit  : 0/0
 29070 ;;		Unchanged: 0/0
 29071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29072 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29074 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29075 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29076 ;;Total ram usage:        8 bytes
 29077 ;; Hardware stack levels used:    1
 29078 ;; Hardware stack levels required when called:    7
 29079 ;; This function calls:
 29080 ;;		Nothing
 29081 ;; This function is called by:
 29082 ;;		_exp
 29083 ;; This function uses a non-reentrant model
 29084 ;;
 29085                           
 29086                           	psect	text132
 29087  0167CE                     __ptext132:
 29088                           	opt stack 0
 29089  0167CE                     _ldexp:
 29090                           	opt stack 19
 29091                           
 29092                           ;incstack = 0
 29093  0167CE  0100               	movlb	0	; () banked
 29094  0167D0  51AF               	movf	ldexp@value& (0+255),w,b
 29095  0167D2  11B0               	iorwf	(ldexp@value+1)& (0+255),w,b
 29096  0167D4  11B1               	iorwf	(ldexp@value+2)& (0+255),w,b
 29097  0167D6  11B2               	iorwf	(ldexp@value+3)& (0+255),w,b
 29098  0167D8  A4D8               	btfss	status,2,c
 29099  0167DA  D009               	goto	l3166
 29100                           
 29101                           ; BSR set to: 0
 29102  0167DC  0E00               	movlw	0
 29103  0167DE  6FAF               	movwf	?_ldexp& (0+255),b
 29104  0167E0  0E00               	movlw	0
 29105  0167E2  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 29106  0167E4  0E00               	movlw	0
 29107  0167E6  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 29108  0167E8  0E00               	movlw	0
 29109  0167EA  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 29110                           
 29111                           ; BSR set to: 0
 29112  0167EC  0012               	return	
 29113  0167EE                     l3166:
 29114                           
 29115                           ; BSR set to: 0
 29116                           
 29117                           ; BSR set to: 0
 29118  0167EE  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 29119  0167F0  0B7F               	andlw	127
 29120  0167F2  6FB5               	movwf	??_ldexp& (0+255),b
 29121  0167F4  6BB6               	clrf	(??_ldexp+1)& (0+255),b
 29122  0167F6  90D8               	bcf	status,0,c
 29123  0167F8  37B5               	rlcf	??_ldexp& (0+255),f,b
 29124  0167FA  37B6               	rlcf	(??_ldexp+1)& (0+255),f,b
 29125  0167FC  51B5               	movf	??_ldexp& (0+255),w,b
 29126  0167FE  27B3               	addwf	ldexp@newexp& (0+255),f,b
 29127  016800  51B6               	movf	(??_ldexp+1)& (0+255),w,b
 29128  016802  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 29129  016804  AFB1               	btfss	(ldexp@value+2)& (0+255),7,b
 29130  016806  D003               	goto	u12020
 29131  016808  6BB5               	clrf	??_ldexp& (0+255),b
 29132  01680A  2BB5               	incf	??_ldexp& (0+255),f,b
 29133  01680C  D002               	goto	u12028
 29134  01680E                     u12020:
 29135  01680E  0100               	movlb	0	; () banked
 29136  016810  6BB5               	clrf	??_ldexp& (0+255),b
 29137  016812                     u12028:
 29138  016812  51B5               	movf	??_ldexp& (0+255),w,b
 29139  016814  27B3               	addwf	ldexp@newexp& (0+255),f,b
 29140  016816  0E00               	movlw	0
 29141  016818  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 29142  01681A  AFB4               	btfss	(ldexp@newexp+1)& (0+255),7,b
 29143  01681C  D00F               	goto	l3168
 29144                           
 29145                           ; BSR set to: 0
 29146  01681E  0E00               	movlw	0
 29147  016820  0101               	movlb	1	; () banked
 29148  016822  6F1B               	movwf	(_errno+1)& (0+255),b
 29149  016824  0E22               	movlw	34
 29150  016826  6F1A               	movwf	_errno& (0+255),b
 29151  016828  0E00               	movlw	0
 29152  01682A  0100               	movlb	0	; () banked
 29153  01682C  6FAF               	movwf	?_ldexp& (0+255),b
 29154  01682E  0E00               	movlw	0
 29155  016830  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 29156  016832  0E00               	movlw	0
 29157  016834  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 29158  016836  0E00               	movlw	0
 29159  016838                     L18:
 29160  016838  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 29161                           
 29162                           ; BSR set to: 0
 29163  01683A  0012               	return	
 29164  01683C                     l3168:
 29165                           
 29166                           ; BSR set to: 0
 29167                           
 29168                           ; BSR set to: 0
 29169  01683C  BFB4               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 29170  01683E  D01B               	goto	l3170
 29171  016840  05B4               	decf	(ldexp@newexp+1)& (0+255),w,b
 29172  016842  A0D8               	btfss	status,0,c
 29173  016844  D018               	goto	l3170
 29174                           
 29175                           ; BSR set to: 0
 29176  016846  0E00               	movlw	0
 29177  016848  0101               	movlb	1	; () banked
 29178  01684A  6F1B               	movwf	(_errno+1)& (0+255),b
 29179  01684C  0E22               	movlw	34
 29180  01684E  6F1A               	movwf	_errno& (0+255),b
 29181                           
 29182                           ; BSR set to: 1
 29183  016850  0100               	movlb	0	; () banked
 29184  016852  AFB2               	btfss	(ldexp@value+3)& (0+255),7,b
 29185  016854  D008               	goto	l3171
 29186                           
 29187                           ; BSR set to: 0
 29188  016856  0EFF               	movlw	255
 29189  016858  6FAF               	movwf	?_ldexp& (0+255),b
 29190  01685A  0EFF               	movlw	255
 29191  01685C  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 29192  01685E  0E7F               	movlw	127
 29193  016860  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 29194  016862  0EFF               	movlw	255
 29195  016864  D7E9               	goto	L18
 29196  016866                     l3171:
 29197                           
 29198                           ; BSR set to: 0
 29199                           
 29200                           ; BSR set to: 0
 29201  016866  0EFF               	movlw	255
 29202  016868  6FAF               	movwf	?_ldexp& (0+255),b
 29203  01686A  0EFF               	movlw	255
 29204  01686C  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 29205  01686E  0E7F               	movlw	127
 29206  016870  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 29207  016872  0E7F               	movlw	127
 29208  016874  D7E1               	goto	L18
 29209  016876                     l3170:
 29210                           
 29211                           ; BSR set to: 0
 29212                           
 29213                           ; BSR set to: 0
 29214  016876  35B4               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 29215  016878  31B4               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 29216  01687A  6FB6               	movwf	(??_ldexp+1)& (0+255),b
 29217  01687C  31B3               	rrcf	ldexp@newexp& (0+255),w,b
 29218  01687E  6FB5               	movwf	??_ldexp& (0+255),b
 29219  016880  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 29220  016882  19B5               	xorwf	??_ldexp& (0+255),w,b
 29221  016884  0B80               	andlw	-128
 29222  016886  19B5               	xorwf	??_ldexp& (0+255),w,b
 29223  016888  6FB2               	movwf	(ldexp@value+3)& (0+255),b
 29224  01688A  C0B3  F0B5         	movff	ldexp@newexp,??_ldexp
 29225  01688E  0E01               	movlw	1
 29226  016890  17B5               	andwf	??_ldexp& (0+255),f,b
 29227  016892  33B5               	rrcf	??_ldexp& (0+255),f,b
 29228  016894  33B5               	rrcf	??_ldexp& (0+255),f,b
 29229  016896  51B1               	movf	(ldexp@value+2)& (0+255),w,b
 29230  016898  19B5               	xorwf	??_ldexp& (0+255),w,b
 29231  01689A  0B7F               	andlw	-129
 29232  01689C  19B5               	xorwf	??_ldexp& (0+255),w,b
 29233  01689E  6FB1               	movwf	(ldexp@value+2)& (0+255),b
 29234                           
 29235                           ; BSR set to: 0
 29236                           
 29237                           ; BSR set to: 0
 29238                           
 29239                           ; BSR set to: 0
 29240  0168A0  C0AF  F0AF         	movff	ldexp@value,?_ldexp
 29241  0168A4  C0B0  F0B0         	movff	ldexp@value+1,?_ldexp+1
 29242  0168A8  C0B1  F0B1         	movff	ldexp@value+2,?_ldexp+2
 29243  0168AC  C0B2  F0B2         	movff	ldexp@value+3,?_ldexp+3
 29244  0168B0  0012               	return	
 29245  0168B2                     __end_of_ldexp:
 29246                           	opt stack 0
 29247                           tosu	equ	0xFFF
 29248                           tosh	equ	0xFFE
 29249                           tosl	equ	0xFFD
 29250                           pclath	equ	0xFFA
 29251                           tblptru	equ	0xFF8
 29252                           tblptrh	equ	0xFF7
 29253                           tblptrl	equ	0xFF6
 29254                           tablat	equ	0xFF5
 29255                           prodh	equ	0xFF4
 29256                           prodl	equ	0xFF3
 29257                           intcon	equ	0xFF2
 29258                           indf0	equ	0xFEF
 29259                           postinc0	equ	0xFEE
 29260                           fsr0h	equ	0xFEA
 29261                           fsr0l	equ	0xFE9
 29262                           wreg	equ	0xFE8
 29263                           indf1	equ	0xFE7
 29264                           postdec1	equ	0xFE5
 29265                           fsr1h	equ	0xFE2
 29266                           fsr1l	equ	0xFE1
 29267                           indf2	equ	0xFDF
 29268                           postinc2	equ	0xFDE
 29269                           postdec2	equ	0xFDD
 29270                           plusw2	equ	0xFDB
 29271                           fsr2h	equ	0xFDA
 29272                           fsr2l	equ	0xFD9
 29273                           status	equ	0xFD8
 29274                           
 29275 ;; *************** function _floor *****************
 29276 ;; Defined at:
 29277 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\floor.c"
 29278 ;; Parameters:    Size  Location     Type
 29279 ;;  x               4   73[BANK0 ] int 
 29280 ;; Auto vars:     Size  Location     Type
 29281 ;;  i               4   77[BANK0 ] int 
 29282 ;;  expon           2   81[BANK0 ] int 
 29283 ;; Return value:  Size  Location     Type
 29284 ;;                  4   73[BANK0 ] int 
 29285 ;; Registers used:
 29286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 29287 ;; Tracked objects:
 29288 ;;		On entry : 0/0
 29289 ;;		On exit  : 0/0
 29290 ;;		Unchanged: 0/0
 29291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29292 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29293 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29295 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29296 ;;Total ram usage:       10 bytes
 29297 ;; Hardware stack levels used:    1
 29298 ;; Hardware stack levels required when called:    8
 29299 ;; This function calls:
 29300 ;;		___fladd
 29301 ;;		___flge
 29302 ;;		___fltol
 29303 ;;		___xxtofl
 29304 ;;		_frexp
 29305 ;; This function is called by:
 29306 ;;		_exp
 29307 ;; This function uses a non-reentrant model
 29308 ;;
 29309                           
 29310                           	psect	text133
 29311  0163AE                     __ptext133:
 29312                           	opt stack 0
 29313  0163AE                     _floor:
 29314                           	opt stack 18
 29315                           
 29316                           ; BSR set to: 0
 29317                           ;incstack = 0
 29318  0163AE  C0A9  F060         	movff	floor@x,frexp@value
 29319  0163B2  C0AA  F061         	movff	floor@x+1,frexp@value+1
 29320  0163B6  C0AB  F062         	movff	floor@x+2,frexp@value+2
 29321  0163BA  C0AC  F063         	movff	floor@x+3,frexp@value+3
 29322  0163BE  0EB1               	movlw	low floor@expon
 29323  0163C0  0100               	movlb	0	; () banked
 29324  0163C2  6F64               	movwf	frexp@eptr& (0+255),b
 29325  0163C4  0E00               	movlw	high floor@expon
 29326  0163C6  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 29327  0163C8  EC45  F0B7         	call	_frexp	;wreg free
 29328  0163CC  0100               	movlb	0	; () banked
 29329  0163CE  AFB2               	btfss	(floor@expon+1)& (0+255),7,b
 29330  0163D0  D014               	goto	l3153
 29331                           
 29332                           ; BSR set to: 0
 29333  0163D2  AFAC               	btfss	(floor@x+3)& (0+255),7,b
 29334  0163D4  D009               	goto	l3154
 29335                           
 29336                           ; BSR set to: 0
 29337  0163D6  0E00               	movlw	0
 29338  0163D8  6FA9               	movwf	?_floor& (0+255),b
 29339  0163DA  0E00               	movlw	0
 29340  0163DC  6FAA               	movwf	(?_floor+1)& (0+255),b
 29341  0163DE  0E80               	movlw	128
 29342  0163E0  6FAB               	movwf	(?_floor+2)& (0+255),b
 29343  0163E2  0EBF               	movlw	191
 29344  0163E4  6FAC               	movwf	(?_floor+3)& (0+255),b
 29345                           
 29346                           ; BSR set to: 0
 29347  0163E6  0012               	return	
 29348  0163E8                     l3154:
 29349                           
 29350                           ; BSR set to: 0
 29351                           
 29352                           ; BSR set to: 0
 29353  0163E8  0E00               	movlw	0
 29354  0163EA  6FA9               	movwf	?_floor& (0+255),b
 29355  0163EC  0E00               	movlw	0
 29356  0163EE  6FAA               	movwf	(?_floor+1)& (0+255),b
 29357  0163F0  0E00               	movlw	0
 29358  0163F2  6FAB               	movwf	(?_floor+2)& (0+255),b
 29359  0163F4  0E00               	movlw	0
 29360  0163F6  6FAC               	movwf	(?_floor+3)& (0+255),b
 29361                           
 29362                           ; BSR set to: 0
 29363  0163F8  0012               	return	
 29364  0163FA                     l3153:
 29365                           
 29366                           ; BSR set to: 0
 29367                           
 29368                           ; BSR set to: 0
 29369  0163FA  51B2               	movf	(floor@expon+1)& (0+255),w,b
 29370  0163FC  E104               	bnz	u11980
 29371  0163FE  0E1D               	movlw	29
 29372  016400  5DB1               	subwf	floor@expon& (0+255),w,b
 29373  016402  A0D8               	btfss	status,0,c
 29374  016404  D009               	goto	l3156
 29375  016406                     u11980:
 29376                           
 29377                           ; BSR set to: 0
 29378  016406  C0A9  F0A9         	movff	floor@x,?_floor
 29379  01640A  C0AA  F0AA         	movff	floor@x+1,?_floor+1
 29380  01640E  C0AB  F0AB         	movff	floor@x+2,?_floor+2
 29381  016412  C0AC  F0AC         	movff	floor@x+3,?_floor+3
 29382  016416  0012               	return	
 29383  016418                     l3156:
 29384                           
 29385                           ; BSR set to: 0
 29386                           
 29387                           ; BSR set to: 0
 29388  016418  C0A9  F09F         	movff	floor@x,___fltol@f1
 29389  01641C  C0AA  F0A0         	movff	floor@x+1,___fltol@f1+1
 29390  016420  C0AB  F0A1         	movff	floor@x+2,___fltol@f1+2
 29391  016424  C0AC  F0A2         	movff	floor@x+3,___fltol@f1+3
 29392  016428  ECC8  F0B4         	call	___fltol	;wreg free
 29393  01642C  C09F  F060         	movff	?___fltol,___xxtofl@val
 29394  016430  C0A0  F061         	movff	?___fltol+1,___xxtofl@val+1
 29395  016434  C0A1  F062         	movff	?___fltol+2,___xxtofl@val+2
 29396  016438  C0A2  F063         	movff	?___fltol+3,___xxtofl@val+3
 29397  01643C  0E01               	movlw	1
 29398  01643E  ECD8  F0AC         	call	___xxtofl
 29399  016442  C060  F0AD         	movff	?___xxtofl,floor@i
 29400  016446  C061  F0AE         	movff	?___xxtofl+1,floor@i+1
 29401  01644A  C062  F0AF         	movff	?___xxtofl+2,floor@i+2
 29402  01644E  C063  F0B0         	movff	?___xxtofl+3,floor@i+3
 29403  016452  C0A9  F060         	movff	floor@x,___flge@ff1
 29404  016456  C0AA  F061         	movff	floor@x+1,___flge@ff1+1
 29405  01645A  C0AB  F062         	movff	floor@x+2,___flge@ff1+2
 29406  01645E  C0AC  F063         	movff	floor@x+3,___flge@ff1+3
 29407  016462  C0AD  F064         	movff	floor@i,___flge@ff2
 29408  016466  C0AE  F065         	movff	floor@i+1,___flge@ff2+1
 29409  01646A  C0AF  F066         	movff	floor@i+2,___flge@ff2+2
 29410  01646E  C0B0  F067         	movff	floor@i+3,___flge@ff2+3
 29411  016472  EC46  F0B1         	call	___flge	;wreg free
 29412  016476  0100               	movlb	0	; () banked
 29413  016478  B0D8               	btfsc	status,0,c
 29414  01647A  D01B               	goto	l3157
 29415                           
 29416                           ; BSR set to: 0
 29417  01647C  C0AD  F08B         	movff	floor@i,___fladd@b
 29418  016480  C0AE  F08C         	movff	floor@i+1,___fladd@b+1
 29419  016484  C0AF  F08D         	movff	floor@i+2,___fladd@b+2
 29420  016488  C0B0  F08E         	movff	floor@i+3,___fladd@b+3
 29421  01648C  0E00               	movlw	0
 29422  01648E  6F8F               	movwf	___fladd@a& (0+255),b
 29423  016490  0E00               	movlw	0
 29424  016492  6F90               	movwf	(___fladd@a+1)& (0+255),b
 29425  016494  0E80               	movlw	128
 29426  016496  6F91               	movwf	(___fladd@a+2)& (0+255),b
 29427  016498  0EBF               	movlw	191
 29428  01649A  6F92               	movwf	(___fladd@a+3)& (0+255),b
 29429  01649C  EC7D  F09C         	call	___fladd	;wreg free
 29430  0164A0  C08B  F0A9         	movff	?___fladd,?_floor
 29431  0164A4  C08C  F0AA         	movff	?___fladd+1,?_floor+1
 29432  0164A8  C08D  F0AB         	movff	?___fladd+2,?_floor+2
 29433  0164AC  C08E  F0AC         	movff	?___fladd+3,?_floor+3
 29434  0164B0  0012               	return	
 29435  0164B2                     l3157:
 29436                           
 29437                           ; BSR set to: 0
 29438  0164B2  C0AD  F0A9         	movff	floor@i,?_floor
 29439  0164B6  C0AE  F0AA         	movff	floor@i+1,?_floor+1
 29440  0164BA  C0AF  F0AB         	movff	floor@i+2,?_floor+2
 29441  0164BE  C0B0  F0AC         	movff	floor@i+3,?_floor+3
 29442  0164C2  0012               	return		;funcret
 29443  0164C4                     __end_of_floor:
 29444                           	opt stack 0
 29445                           tosu	equ	0xFFF
 29446                           tosh	equ	0xFFE
 29447                           tosl	equ	0xFFD
 29448                           pclath	equ	0xFFA
 29449                           tblptru	equ	0xFF8
 29450                           tblptrh	equ	0xFF7
 29451                           tblptrl	equ	0xFF6
 29452                           tablat	equ	0xFF5
 29453                           prodh	equ	0xFF4
 29454                           prodl	equ	0xFF3
 29455                           intcon	equ	0xFF2
 29456                           indf0	equ	0xFEF
 29457                           postinc0	equ	0xFEE
 29458                           fsr0h	equ	0xFEA
 29459                           fsr0l	equ	0xFE9
 29460                           wreg	equ	0xFE8
 29461                           indf1	equ	0xFE7
 29462                           postdec1	equ	0xFE5
 29463                           fsr1h	equ	0xFE2
 29464                           fsr1l	equ	0xFE1
 29465                           indf2	equ	0xFDF
 29466                           postinc2	equ	0xFDE
 29467                           postdec2	equ	0xFDD
 29468                           plusw2	equ	0xFDB
 29469                           fsr2h	equ	0xFDA
 29470                           fsr2l	equ	0xFD9
 29471                           status	equ	0xFD8
 29472                           
 29473 ;; *************** function _frexp *****************
 29474 ;; Defined at:
 29475 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
 29476 ;; Parameters:    Size  Location     Type
 29477 ;;  value           4    0[BANK0 ] int 
 29478 ;;  eptr            2    4[BANK0 ] PTR int 
 29479 ;;		 -> log@exponent(2), floor@expon(2), 
 29480 ;; Auto vars:     Size  Location     Type
 29481 ;;		None
 29482 ;; Return value:  Size  Location     Type
 29483 ;;                  4    0[BANK0 ] PTR int 
 29484 ;; Registers used:
 29485 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29486 ;; Tracked objects:
 29487 ;;		On entry : 0/0
 29488 ;;		On exit  : 0/0
 29489 ;;		Unchanged: 0/0
 29490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29491 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29493 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29494 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29495 ;;Total ram usage:        8 bytes
 29496 ;; Hardware stack levels used:    1
 29497 ;; Hardware stack levels required when called:    7
 29498 ;; This function calls:
 29499 ;;		Nothing
 29500 ;; This function is called by:
 29501 ;;		_floor
 29502 ;;		_log
 29503 ;; This function uses a non-reentrant model
 29504 ;;
 29505                           
 29506                           	psect	text134
 29507  016E8A                     __ptext134:
 29508                           	opt stack 0
 29509  016E8A                     _frexp:
 29510                           	opt stack 19
 29511                           
 29512                           ;incstack = 0
 29513  016E8A  0100               	movlb	0	; () banked
 29514  016E8C  5160               	movf	frexp@value& (0+255),w,b
 29515  016E8E  1161               	iorwf	(frexp@value+1)& (0+255),w,b
 29516  016E90  1162               	iorwf	(frexp@value+2)& (0+255),w,b
 29517  016E92  1163               	iorwf	(frexp@value+3)& (0+255),w,b
 29518  016E94  A4D8               	btfss	status,2,c
 29519  016E96  D011               	goto	l3162
 29520                           
 29521                           ; BSR set to: 0
 29522  016E98  C064  FFD9         	movff	frexp@eptr,fsr2l
 29523  016E9C  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 29524  016EA0  0E00               	movlw	0
 29525  016EA2  6EDE               	movwf	postinc2,c
 29526  016EA4  0E00               	movlw	0
 29527  016EA6  6EDD               	movwf	postdec2,c
 29528                           
 29529                           ; BSR set to: 0
 29530  016EA8  0E00               	movlw	0
 29531  016EAA  6F60               	movwf	?_frexp& (0+255),b
 29532  016EAC  0E00               	movlw	0
 29533  016EAE  6F61               	movwf	(?_frexp+1)& (0+255),b
 29534  016EB0  0E00               	movlw	0
 29535  016EB2  6F62               	movwf	(?_frexp+2)& (0+255),b
 29536  016EB4  0E00               	movlw	0
 29537  016EB6  6F63               	movwf	(?_frexp+3)& (0+255),b
 29538                           
 29539                           ; BSR set to: 0
 29540  016EB8  0012               	return	
 29541  016EBA                     l3162:
 29542                           
 29543                           ; BSR set to: 0
 29544                           
 29545                           ; BSR set to: 0
 29546  016EBA  5163               	movf	(frexp@value+3)& (0+255),w,b
 29547  016EBC  0B7F               	andlw	127
 29548  016EBE  6F66               	movwf	??_frexp& (0+255),b
 29549  016EC0  6B67               	clrf	(??_frexp+1)& (0+255),b
 29550  016EC2  90D8               	bcf	status,0,c
 29551  016EC4  3766               	rlcf	??_frexp& (0+255),f,b
 29552  016EC6  3767               	rlcf	(??_frexp+1)& (0+255),f,b
 29553  016EC8  C064  FFD9         	movff	frexp@eptr,fsr2l
 29554  016ECC  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 29555  016ED0  C066  FFDE         	movff	??_frexp,postinc2
 29556  016ED4  C067  FFDD         	movff	??_frexp+1,postdec2
 29557  016ED8  AF62               	btfss	(frexp@value+2)& (0+255),7,b
 29558  016EDA  D003               	goto	u11520
 29559  016EDC  6B66               	clrf	??_frexp& (0+255),b
 29560  016EDE  2B66               	incf	??_frexp& (0+255),f,b
 29561  016EE0  D002               	goto	u11528
 29562  016EE2                     u11520:
 29563  016EE2  0100               	movlb	0	; () banked
 29564  016EE4  6B66               	clrf	??_frexp& (0+255),b
 29565  016EE6                     u11528:
 29566  016EE6  5166               	movf	??_frexp& (0+255),w,b
 29567  016EE8  C064  FFD9         	movff	frexp@eptr,fsr2l
 29568  016EEC  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 29569  016EF0  12DE               	iorwf	postinc2,f,c
 29570  016EF2  0E00               	movlw	0
 29571  016EF4  12DD               	iorwf	postdec2,f,c
 29572                           
 29573                           ; BSR set to: 0
 29574  016EF6  C064  FFD9         	movff	frexp@eptr,fsr2l
 29575  016EFA  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 29576  016EFE  0E82               	movlw	130
 29577  016F00  26DE               	addwf	postinc2,f,c
 29578  016F02  0EFF               	movlw	255
 29579  016F04  22DD               	addwfc	postdec2,f,c
 29580                           
 29581                           ; BSR set to: 0
 29582  016F06  8163               	bsf	(frexp@value+3)& (0+255),0,b
 29583  016F08  8363               	bsf	(frexp@value+3)& (0+255),1,b
 29584  016F0A  8563               	bsf	(frexp@value+3)& (0+255),2,b
 29585  016F0C  8763               	bsf	(frexp@value+3)& (0+255),3,b
 29586  016F0E  8963               	bsf	(frexp@value+3)& (0+255),4,b
 29587  016F10  8B63               	bsf	(frexp@value+3)& (0+255),5,b
 29588  016F12  9D63               	bcf	(frexp@value+3)& (0+255),6,b
 29589                           
 29590                           ; BSR set to: 0
 29591  016F14  9F62               	bcf	(frexp@value+2)& (0+255),7,b
 29592                           
 29593                           ; BSR set to: 0
 29594  016F16  C060  F060         	movff	frexp@value,?_frexp
 29595  016F1A  C061  F061         	movff	frexp@value+1,?_frexp+1
 29596  016F1E  C062  F062         	movff	frexp@value+2,?_frexp+2
 29597  016F22  C063  F063         	movff	frexp@value+3,?_frexp+3
 29598  016F26  0012               	return	
 29599  016F28                     __end_of_frexp:
 29600                           	opt stack 0
 29601                           tosu	equ	0xFFF
 29602                           tosh	equ	0xFFE
 29603                           tosl	equ	0xFFD
 29604                           pclath	equ	0xFFA
 29605                           tblptru	equ	0xFF8
 29606                           tblptrh	equ	0xFF7
 29607                           tblptrl	equ	0xFF6
 29608                           tablat	equ	0xFF5
 29609                           prodh	equ	0xFF4
 29610                           prodl	equ	0xFF3
 29611                           intcon	equ	0xFF2
 29612                           indf0	equ	0xFEF
 29613                           postinc0	equ	0xFEE
 29614                           fsr0h	equ	0xFEA
 29615                           fsr0l	equ	0xFE9
 29616                           wreg	equ	0xFE8
 29617                           indf1	equ	0xFE7
 29618                           postdec1	equ	0xFE5
 29619                           fsr1h	equ	0xFE2
 29620                           fsr1l	equ	0xFE1
 29621                           indf2	equ	0xFDF
 29622                           postinc2	equ	0xFDE
 29623                           postdec2	equ	0xFDD
 29624                           plusw2	equ	0xFDB
 29625                           fsr2h	equ	0xFDA
 29626                           fsr2l	equ	0xFD9
 29627                           status	equ	0xFD8
 29628                           
 29629 ;; *************** function ___xxtofl *****************
 29630 ;; Defined at:
 29631 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\xxtofl.c"
 29632 ;; Parameters:    Size  Location     Type
 29633 ;;  sign            1    wreg     unsigned char 
 29634 ;;  val             4    0[BANK0 ] long 
 29635 ;; Auto vars:     Size  Location     Type
 29636 ;;  sign            1    8[BANK0 ] unsigned char 
 29637 ;;  arg             4   10[BANK0 ] unsigned long 
 29638 ;;  exp             1    9[BANK0 ] unsigned char 
 29639 ;; Return value:  Size  Location     Type
 29640 ;;                  4    0[BANK0 ] unsigned char 
 29641 ;; Registers used:
 29642 ;;		wreg, status,2, status,0
 29643 ;; Tracked objects:
 29644 ;;		On entry : 0/0
 29645 ;;		On exit  : 0/0
 29646 ;;		Unchanged: 0/0
 29647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29648 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29649 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29650 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29651 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29652 ;;Total ram usage:       14 bytes
 29653 ;; Hardware stack levels used:    1
 29654 ;; Hardware stack levels required when called:    7
 29655 ;; This function calls:
 29656 ;;		Nothing
 29657 ;; This function is called by:
 29658 ;;		_ADCAverage
 29659 ;;		_Move_ADC_To
 29660 ;;		_pow
 29661 ;;		_exp
 29662 ;;		_floor
 29663 ;;		_log
 29664 ;;		_ADC_Voltage
 29665 ;; This function uses a non-reentrant model
 29666 ;;
 29667                           
 29668                           	psect	text135
 29669  0159B0                     __ptext135:
 29670                           	opt stack 0
 29671  0159B0                     ___xxtofl:
 29672                           	opt stack 21
 29673                           
 29674                           ; BSR set to: 0
 29675                           ;incstack = 0
 29676                           ;___xxtofl@sign stored from wreg
 29677  0159B0  0100               	movlb	0	; () banked
 29678  0159B2  6F68               	movwf	___xxtofl@sign& (0+255),b
 29679  0159B4  0100               	movlb	0	; () banked
 29680  0159B6  5168               	movf	___xxtofl@sign& (0+255),w,b
 29681  0159B8  A4D8               	btfss	status,2,c
 29682                           
 29683                           ; BSR set to: 0
 29684  0159BA  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 29685  0159BC  D01A               	goto	l3111
 29686                           
 29687                           ; BSR set to: 0
 29688  0159BE  C060  F064         	movff	___xxtofl@val,??___xxtofl
 29689  0159C2  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 29690  0159C6  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 29691  0159CA  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 29692  0159CE  1F64               	comf	??___xxtofl& (0+255),f,b
 29693  0159D0  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 29694  0159D2  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 29695  0159D4  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 29696  0159D6  2B64               	incf	??___xxtofl& (0+255),f,b
 29697  0159D8  0E00               	movlw	0
 29698  0159DA  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 29699  0159DC  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 29700  0159DE  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 29701  0159E0  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 29702  0159E4  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 29703  0159E8  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 29704  0159EC  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 29705  0159F0  D008               	goto	l3112
 29706  0159F2                     l3111:
 29707                           
 29708                           ; BSR set to: 0
 29709  0159F2  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 29710  0159F6  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 29711  0159FA  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 29712  0159FE  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 29713  015A02                     l3112:
 29714                           
 29715                           ; BSR set to: 0
 29716                           
 29717                           ; BSR set to: 0
 29718  015A02  5160               	movf	___xxtofl@val& (0+255),w,b
 29719  015A04  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 29720  015A06  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 29721  015A08  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 29722  015A0A  A4D8               	btfss	status,2,c
 29723  015A0C  D009               	goto	l3113
 29724                           
 29725                           ; BSR set to: 0
 29726  015A0E  0E00               	movlw	0
 29727  015A10  6F60               	movwf	?___xxtofl& (0+255),b
 29728  015A12  0E00               	movlw	0
 29729  015A14  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 29730  015A16  0E00               	movlw	0
 29731  015A18  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 29732  015A1A  0E00               	movlw	0
 29733  015A1C  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 29734                           
 29735                           ; BSR set to: 0
 29736  015A1E  0012               	return	
 29737  015A20                     l3113:
 29738                           
 29739                           ; BSR set to: 0
 29740                           
 29741                           ; BSR set to: 0
 29742  015A20  0E96               	movlw	150
 29743  015A22  6F69               	movwf	___xxtofl@exp& (0+255),b
 29744  015A24  D006               	goto	l3115
 29745  015A26                     
 29746                           ; BSR set to: 0
 29747                           
 29748                           ; BSR set to: 0
 29749  015A26  2B69               	incf	___xxtofl@exp& (0+255),f,b
 29750  015A28  90D8               	bcf	status,0,c
 29751  015A2A  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 29752  015A2C  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 29753  015A2E  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 29754  015A30  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 29755  015A32                     l3115:
 29756                           
 29757                           ; BSR set to: 0
 29758                           
 29759                           ; BSR set to: 0
 29760  015A32  0E00               	movlw	0
 29761  015A34  156A               	andwf	___xxtofl@arg& (0+255),w,b
 29762  015A36  6F64               	movwf	??___xxtofl& (0+255),b
 29763  015A38  0E00               	movlw	0
 29764  015A3A  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 29765  015A3C  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 29766  015A3E  0E00               	movlw	0
 29767  015A40  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 29768  015A42  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 29769  015A44  0EFE               	movlw	254
 29770  015A46  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 29771  015A48  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 29772  015A4A  5164               	movf	??___xxtofl& (0+255),w,b
 29773  015A4C  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 29774  015A4E  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 29775  015A50  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 29776  015A52  B4D8               	btfsc	status,2,c
 29777  015A54  D00D               	goto	l3118
 29778  015A56  D7E7               	goto	l3116
 29779  015A58                     
 29780                           ; BSR set to: 0
 29781                           
 29782                           ; BSR set to: 0
 29783  015A58  2B69               	incf	___xxtofl@exp& (0+255),f,b
 29784                           
 29785                           ; BSR set to: 0
 29786  015A5A  0E01               	movlw	1
 29787  015A5C  276A               	addwf	___xxtofl@arg& (0+255),f,b
 29788  015A5E  0E00               	movlw	0
 29789  015A60  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 29790  015A62  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 29791  015A64  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 29792                           
 29793                           ; BSR set to: 0
 29794  015A66  90D8               	bcf	status,0,c
 29795  015A68  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 29796  015A6A  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 29797  015A6C  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 29798  015A6E  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 29799  015A70                     l3118:
 29800                           
 29801                           ; BSR set to: 0
 29802  015A70  0E00               	movlw	0
 29803  015A72  156A               	andwf	___xxtofl@arg& (0+255),w,b
 29804  015A74  6F64               	movwf	??___xxtofl& (0+255),b
 29805  015A76  0E00               	movlw	0
 29806  015A78  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 29807  015A7A  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 29808  015A7C  0E00               	movlw	0
 29809  015A7E  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 29810  015A80  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 29811  015A82  0EFF               	movlw	255
 29812  015A84  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 29813  015A86  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 29814  015A88  5164               	movf	??___xxtofl& (0+255),w,b
 29815  015A8A  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 29816  015A8C  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 29817  015A8E  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 29818  015A90  B4D8               	btfsc	status,2,c
 29819  015A92  D007               	goto	l3121
 29820  015A94  D7E1               	goto	l3119
 29821  015A96                     
 29822                           ; BSR set to: 0
 29823                           
 29824                           ; BSR set to: 0
 29825  015A96  0769               	decf	___xxtofl@exp& (0+255),f,b
 29826  015A98  90D8               	bcf	status,0,c
 29827  015A9A  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 29828  015A9C  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 29829  015A9E  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 29830  015AA0  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 29831  015AA2                     l3121:
 29832                           
 29833                           ; BSR set to: 0
 29834                           
 29835                           ; BSR set to: 0
 29836  015AA2  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 29837  015AA4  D003               	goto	u11470
 29838                           
 29839                           ; BSR set to: 0
 29840  015AA6  0E02               	movlw	2
 29841  015AA8  6169               	cpfslt	___xxtofl@exp& (0+255),b
 29842  015AAA  D7F5               	goto	l3122
 29843  015AAC                     u11470:
 29844                           
 29845                           ; BSR set to: 0
 29846                           
 29847                           ; BSR set to: 0
 29848  015AAC  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 29849  015AAE  D008               	goto	l3126
 29850                           
 29851                           ; BSR set to: 0
 29852  015AB0  0EFF               	movlw	255
 29853  015AB2  176A               	andwf	___xxtofl@arg& (0+255),f,b
 29854  015AB4  0EFF               	movlw	255
 29855  015AB6  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 29856  015AB8  0E7F               	movlw	127
 29857  015ABA  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 29858  015ABC  0EFF               	movlw	255
 29859  015ABE  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 29860  015AC0                     l3126:
 29861                           
 29862                           ; BSR set to: 0
 29863  015AC0  90D8               	bcf	status,0,c
 29864  015AC2  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 29865  015AC4  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 29866  015AC8  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 29867  015ACA  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 29868  015ACC  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 29869  015ACE  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 29870  015AD2  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 29871  015AD4  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 29872  015AD6  6B64               	clrf	??___xxtofl& (0+255),b
 29873  015AD8  5164               	movf	??___xxtofl& (0+255),w,b
 29874  015ADA  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 29875  015ADC  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 29876  015ADE  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 29877  015AE0  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 29878  015AE2  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 29879  015AE4  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 29880  015AE6  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 29881                           
 29882                           ; BSR set to: 0
 29883  015AE8  5168               	movf	___xxtofl@sign& (0+255),w,b
 29884  015AEA  A4D8               	btfss	status,2,c
 29885                           
 29886                           ; BSR set to: 0
 29887  015AEC  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 29888  015AEE  D001               	goto	l3127
 29889                           
 29890                           ; BSR set to: 0
 29891  015AF0  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 29892  015AF2                     l3127:
 29893                           
 29894                           ; BSR set to: 0
 29895                           
 29896                           ; BSR set to: 0
 29897  015AF2  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 29898  015AF6  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 29899  015AFA  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 29900  015AFE  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 29901  015B02  0012               	return	
 29902  015B04                     __end_of___xxtofl:
 29903                           	opt stack 0
 29904                           tosu	equ	0xFFF
 29905                           tosh	equ	0xFFE
 29906                           tosl	equ	0xFFD
 29907                           pclath	equ	0xFFA
 29908                           tblptru	equ	0xFF8
 29909                           tblptrh	equ	0xFF7
 29910                           tblptrl	equ	0xFF6
 29911                           tablat	equ	0xFF5
 29912                           prodh	equ	0xFF4
 29913                           prodl	equ	0xFF3
 29914                           intcon	equ	0xFF2
 29915                           indf0	equ	0xFEF
 29916                           postinc0	equ	0xFEE
 29917                           fsr0h	equ	0xFEA
 29918                           fsr0l	equ	0xFE9
 29919                           wreg	equ	0xFE8
 29920                           indf1	equ	0xFE7
 29921                           postdec1	equ	0xFE5
 29922                           fsr1h	equ	0xFE2
 29923                           fsr1l	equ	0xFE1
 29924                           indf2	equ	0xFDF
 29925                           postinc2	equ	0xFDE
 29926                           postdec2	equ	0xFDD
 29927                           plusw2	equ	0xFDB
 29928                           fsr2h	equ	0xFDA
 29929                           fsr2l	equ	0xFD9
 29930                           status	equ	0xFD8
 29931                           
 29932 ;; *************** function ___fltol *****************
 29933 ;; Defined at:
 29934 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fltol.c"
 29935 ;; Parameters:    Size  Location     Type
 29936 ;;  f1              4   63[BANK0 ] unsigned char 
 29937 ;; Auto vars:     Size  Location     Type
 29938 ;;  exp1            1   72[BANK0 ] unsigned char 
 29939 ;;  sign1           1   71[BANK0 ] unsigned char 
 29940 ;; Return value:  Size  Location     Type
 29941 ;;                  4   63[BANK0 ] long 
 29942 ;; Registers used:
 29943 ;;		wreg, status,2, status,0
 29944 ;; Tracked objects:
 29945 ;;		On entry : 0/0
 29946 ;;		On exit  : 0/0
 29947 ;;		Unchanged: 0/0
 29948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29949 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29950 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29951 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29952 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29953 ;;Total ram usage:       10 bytes
 29954 ;; Hardware stack levels used:    1
 29955 ;; Hardware stack levels required when called:    7
 29956 ;; This function calls:
 29957 ;;		Nothing
 29958 ;; This function is called by:
 29959 ;;		_ADCAverage
 29960 ;;		_Move_ADC_To
 29961 ;;		_pow
 29962 ;;		_exp
 29963 ;;		_floor
 29964 ;; This function uses a non-reentrant model
 29965 ;;
 29966                           
 29967                           	psect	text136
 29968  016990                     __ptext136:
 29969                           	opt stack 0
 29970  016990                     ___fltol:
 29971                           	opt stack 21
 29972                           
 29973                           ; BSR set to: 0
 29974                           ;incstack = 0
 29975  016990  0100               	movlb	0	; () banked
 29976  016992  35A1               	rlcf	(___fltol@f1+2)& (0+255),w,b
 29977  016994  35A2               	rlcf	(___fltol@f1+3)& (0+255),w,b
 29978  016996  6FA8               	movwf	___fltol@exp1& (0+255),b
 29979  016998  51A8               	movf	___fltol@exp1& (0+255),w,b
 29980  01699A  A4D8               	btfss	status,2,c
 29981  01699C  D009               	goto	l2778
 29982                           
 29983                           ; BSR set to: 0
 29984  01699E  0E00               	movlw	0
 29985  0169A0  6F9F               	movwf	?___fltol& (0+255),b
 29986  0169A2  0E00               	movlw	0
 29987  0169A4  6FA0               	movwf	(?___fltol+1)& (0+255),b
 29988  0169A6  0E00               	movlw	0
 29989  0169A8  6FA1               	movwf	(?___fltol+2)& (0+255),b
 29990  0169AA  0E00               	movlw	0
 29991  0169AC  6FA2               	movwf	(?___fltol+3)& (0+255),b
 29992                           
 29993                           ; BSR set to: 0
 29994  0169AE  0012               	return	
 29995  0169B0                     l2778:
 29996                           
 29997                           ; BSR set to: 0
 29998                           
 29999                           ; BSR set to: 0
 30000  0169B0  C09F  F0A3         	movff	___fltol@f1,??___fltol
 30001  0169B4  C0A0  F0A4         	movff	___fltol@f1+1,??___fltol+1
 30002  0169B8  C0A1  F0A5         	movff	___fltol@f1+2,??___fltol+2
 30003  0169BC  C0A2  F0A6         	movff	___fltol@f1+3,??___fltol+3
 30004  0169C0  0E20               	movlw	32
 30005  0169C2  D005               	goto	u11350
 30006  0169C4                     u11355:
 30007  0169C4  90D8               	bcf	status,0,c
 30008  0169C6  33A6               	rrcf	(??___fltol+3)& (0+255),f,b
 30009  0169C8  33A5               	rrcf	(??___fltol+2)& (0+255),f,b
 30010  0169CA  33A4               	rrcf	(??___fltol+1)& (0+255),f,b
 30011  0169CC  33A3               	rrcf	??___fltol& (0+255),f,b
 30012  0169CE                     u11350:
 30013  0169CE  2EE8               	decfsz	wreg,f,c
 30014  0169D0  D7F9               	goto	u11355
 30015  0169D2  51A3               	movf	??___fltol& (0+255),w,b
 30016  0169D4  6FA7               	movwf	___fltol@sign1& (0+255),b
 30017                           
 30018                           ; BSR set to: 0
 30019  0169D6  8FA1               	bsf	(___fltol@f1+2)& (0+255),7,b
 30020                           
 30021                           ; BSR set to: 0
 30022  0169D8  0EFF               	movlw	255
 30023  0169DA  179F               	andwf	___fltol@f1& (0+255),f,b
 30024  0169DC  0EFF               	movlw	255
 30025  0169DE  17A0               	andwf	(___fltol@f1+1)& (0+255),f,b
 30026  0169E0  0EFF               	movlw	255
 30027  0169E2  17A1               	andwf	(___fltol@f1+2)& (0+255),f,b
 30028  0169E4  0E00               	movlw	0
 30029  0169E6  17A2               	andwf	(___fltol@f1+3)& (0+255),f,b
 30030                           
 30031                           ; BSR set to: 0
 30032  0169E8  0E96               	movlw	150
 30033  0169EA  5FA8               	subwf	___fltol@exp1& (0+255),f,b
 30034                           
 30035                           ; BSR set to: 0
 30036  0169EC  AFA8               	btfss	___fltol@exp1& (0+255),7,b
 30037  0169EE  D016               	goto	l2780
 30038                           
 30039                           ; BSR set to: 0
 30040  0169F0  51A8               	movf	___fltol@exp1& (0+255),w,b
 30041  0169F2  0A80               	xorlw	128
 30042  0169F4  0F97               	addlw	151
 30043  0169F6  B0D8               	btfsc	status,0,c
 30044  0169F8  D009               	goto	l2781
 30045                           
 30046                           ; BSR set to: 0
 30047  0169FA  0E00               	movlw	0
 30048  0169FC  6F9F               	movwf	?___fltol& (0+255),b
 30049  0169FE  0E00               	movlw	0
 30050  016A00  6FA0               	movwf	(?___fltol+1)& (0+255),b
 30051  016A02  0E00               	movlw	0
 30052  016A04  6FA1               	movwf	(?___fltol+2)& (0+255),b
 30053  016A06  0E00               	movlw	0
 30054  016A08  6FA2               	movwf	(?___fltol+3)& (0+255),b
 30055                           
 30056                           ; BSR set to: 0
 30057  016A0A  0012               	return	
 30058  016A0C                     l2781:
 30059                           
 30060                           ; BSR set to: 0
 30061                           
 30062                           ; BSR set to: 0
 30063                           
 30064                           ; BSR set to: 0
 30065  016A0C  90D8               	bcf	status,0,c
 30066  016A0E  33A2               	rrcf	(___fltol@f1+3)& (0+255),f,b
 30067  016A10  33A1               	rrcf	(___fltol@f1+2)& (0+255),f,b
 30068  016A12  33A0               	rrcf	(___fltol@f1+1)& (0+255),f,b
 30069  016A14  339F               	rrcf	___fltol@f1& (0+255),f,b
 30070                           
 30071                           ; BSR set to: 0
 30072  016A16  3FA8               	incfsz	___fltol@exp1& (0+255),f,b
 30073  016A18  D7F9               	goto	l2781
 30074                           
 30075                           ; BSR set to: 0
 30076  016A1A  D015               	goto	u11390
 30077  016A1C                     l2780:
 30078                           
 30079                           ; BSR set to: 0
 30080                           
 30081                           ; BSR set to: 0
 30082  016A1C  0E1F               	movlw	31
 30083  016A1E  65A8               	cpfsgt	___fltol@exp1& (0+255),b
 30084  016A20  D00F               	goto	l2786
 30085                           
 30086                           ; BSR set to: 0
 30087  016A22  0E00               	movlw	0
 30088  016A24  6F9F               	movwf	?___fltol& (0+255),b
 30089  016A26  0E00               	movlw	0
 30090  016A28  6FA0               	movwf	(?___fltol+1)& (0+255),b
 30091  016A2A  0E00               	movlw	0
 30092  016A2C  6FA1               	movwf	(?___fltol+2)& (0+255),b
 30093  016A2E  0E00               	movlw	0
 30094  016A30  6FA2               	movwf	(?___fltol+3)& (0+255),b
 30095                           
 30096                           ; BSR set to: 0
 30097  016A32  0012               	return	
 30098  016A34                     
 30099                           ; BSR set to: 0
 30100                           
 30101                           ; BSR set to: 0
 30102  016A34  90D8               	bcf	status,0,c
 30103  016A36  379F               	rlcf	___fltol@f1& (0+255),f,b
 30104  016A38  37A0               	rlcf	(___fltol@f1+1)& (0+255),f,b
 30105  016A3A  37A1               	rlcf	(___fltol@f1+2)& (0+255),f,b
 30106  016A3C  37A2               	rlcf	(___fltol@f1+3)& (0+255),f,b
 30107  016A3E  07A8               	decf	___fltol@exp1& (0+255),f,b
 30108  016A40                     l2786:
 30109                           
 30110                           ; BSR set to: 0
 30111                           
 30112                           ; BSR set to: 0
 30113  016A40  51A8               	movf	___fltol@exp1& (0+255),w,b
 30114  016A42  A4D8               	btfss	status,2,c
 30115  016A44  D7F7               	goto	l2787
 30116  016A46                     u11390:
 30117                           
 30118                           ; BSR set to: 0
 30119                           
 30120                           ; BSR set to: 0
 30121                           
 30122                           ; BSR set to: 0
 30123  016A46  51A7               	movf	___fltol@sign1& (0+255),w,b
 30124  016A48  B4D8               	btfsc	status,2,c
 30125  016A4A  D008               	goto	l2789
 30126                           
 30127                           ; BSR set to: 0
 30128  016A4C  1FA2               	comf	(___fltol@f1+3)& (0+255),f,b
 30129  016A4E  1FA1               	comf	(___fltol@f1+2)& (0+255),f,b
 30130  016A50  1FA0               	comf	(___fltol@f1+1)& (0+255),f,b
 30131  016A52  6D9F               	negf	___fltol@f1& (0+255),b
 30132  016A54  0E00               	movlw	0
 30133  016A56  23A0               	addwfc	(___fltol@f1+1)& (0+255),f,b
 30134  016A58  23A1               	addwfc	(___fltol@f1+2)& (0+255),f,b
 30135  016A5A  23A2               	addwfc	(___fltol@f1+3)& (0+255),f,b
 30136  016A5C                     l2789:
 30137                           
 30138                           ; BSR set to: 0
 30139                           
 30140                           ; BSR set to: 0
 30141  016A5C  C09F  F09F         	movff	___fltol@f1,?___fltol
 30142  016A60  C0A0  F0A0         	movff	___fltol@f1+1,?___fltol+1
 30143  016A64  C0A1  F0A1         	movff	___fltol@f1+2,?___fltol+2
 30144  016A68  C0A2  F0A2         	movff	___fltol@f1+3,?___fltol+3
 30145  016A6C  0012               	return	
 30146  016A6E                     __end_of___fltol:
 30147                           	opt stack 0
 30148                           tosu	equ	0xFFF
 30149                           tosh	equ	0xFFE
 30150                           tosl	equ	0xFFD
 30151                           pclath	equ	0xFFA
 30152                           tblptru	equ	0xFF8
 30153                           tblptrh	equ	0xFF7
 30154                           tblptrl	equ	0xFF6
 30155                           tablat	equ	0xFF5
 30156                           prodh	equ	0xFF4
 30157                           prodl	equ	0xFF3
 30158                           intcon	equ	0xFF2
 30159                           indf0	equ	0xFEF
 30160                           postinc0	equ	0xFEE
 30161                           fsr0h	equ	0xFEA
 30162                           fsr0l	equ	0xFE9
 30163                           wreg	equ	0xFE8
 30164                           indf1	equ	0xFE7
 30165                           postdec1	equ	0xFE5
 30166                           fsr1h	equ	0xFE2
 30167                           fsr1l	equ	0xFE1
 30168                           indf2	equ	0xFDF
 30169                           postinc2	equ	0xFDE
 30170                           postdec2	equ	0xFDD
 30171                           plusw2	equ	0xFDB
 30172                           fsr2h	equ	0xFDA
 30173                           fsr2l	equ	0xFD9
 30174                           status	equ	0xFD8
 30175                           
 30176 ;; *************** function ___flge *****************
 30177 ;; Defined at:
 30178 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flge.c"
 30179 ;; Parameters:    Size  Location     Type
 30180 ;;  ff1             4    0[BANK0 ] long 
 30181 ;;  ff2             4    4[BANK0 ] long 
 30182 ;; Auto vars:     Size  Location     Type
 30183 ;;		None
 30184 ;; Return value:  Size  Location     Type
 30185 ;;		None               void
 30186 ;; Registers used:
 30187 ;;		wreg, status,2, status,0
 30188 ;; Tracked objects:
 30189 ;;		On entry : 0/0
 30190 ;;		On exit  : 0/0
 30191 ;;		Unchanged: 0/0
 30192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30193 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30195 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30196 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30197 ;;Total ram usage:       12 bytes
 30198 ;; Hardware stack levels used:    1
 30199 ;; Hardware stack levels required when called:    7
 30200 ;; This function calls:
 30201 ;;		Nothing
 30202 ;; This function is called by:
 30203 ;;		_pow
 30204 ;;		_exp
 30205 ;;		_floor
 30206 ;; This function uses a non-reentrant model
 30207 ;;
 30208                           
 30209                           	psect	text137
 30210  01628C                     __ptext137:
 30211                           	opt stack 0
 30212  01628C                     ___flge:
 30213                           	opt stack 18
 30214                           
 30215                           ; BSR set to: 0
 30216                           ;incstack = 0
 30217  01628C  0E00               	movlw	0
 30218  01628E  0100               	movlb	0	; () banked
 30219  016290  1560               	andwf	___flge@ff1& (0+255),w,b
 30220  016292  6F68               	movwf	??___flge& (0+255),b
 30221  016294  0E00               	movlw	0
 30222  016296  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 30223  016298  6F69               	movwf	(??___flge+1)& (0+255),b
 30224  01629A  0E80               	movlw	128
 30225  01629C  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 30226  01629E  6F6A               	movwf	(??___flge+2)& (0+255),b
 30227  0162A0  0E7F               	movlw	127
 30228  0162A2  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 30229  0162A4  6F6B               	movwf	(??___flge+3)& (0+255),b
 30230  0162A6  5168               	movf	??___flge& (0+255),w,b
 30231  0162A8  1169               	iorwf	(??___flge+1)& (0+255),w,b
 30232  0162AA  116A               	iorwf	(??___flge+2)& (0+255),w,b
 30233  0162AC  116B               	iorwf	(??___flge+3)& (0+255),w,b
 30234  0162AE  A4D8               	btfss	status,2,c
 30235  0162B0  D008               	goto	l2748
 30236                           
 30237                           ; BSR set to: 0
 30238  0162B2  0E00               	movlw	0
 30239  0162B4  6F60               	movwf	___flge@ff1& (0+255),b
 30240  0162B6  0E00               	movlw	0
 30241  0162B8  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 30242  0162BA  0E00               	movlw	0
 30243  0162BC  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 30244  0162BE  0E00               	movlw	0
 30245  0162C0  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 30246  0162C2                     l2748:
 30247                           
 30248                           ; BSR set to: 0
 30249                           
 30250                           ; BSR set to: 0
 30251  0162C2  0E00               	movlw	0
 30252  0162C4  1564               	andwf	___flge@ff2& (0+255),w,b
 30253  0162C6  6F68               	movwf	??___flge& (0+255),b
 30254  0162C8  0E00               	movlw	0
 30255  0162CA  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 30256  0162CC  6F69               	movwf	(??___flge+1)& (0+255),b
 30257  0162CE  0E80               	movlw	128
 30258  0162D0  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 30259  0162D2  6F6A               	movwf	(??___flge+2)& (0+255),b
 30260  0162D4  0E7F               	movlw	127
 30261  0162D6  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 30262  0162D8  6F6B               	movwf	(??___flge+3)& (0+255),b
 30263  0162DA  5168               	movf	??___flge& (0+255),w,b
 30264  0162DC  1169               	iorwf	(??___flge+1)& (0+255),w,b
 30265  0162DE  116A               	iorwf	(??___flge+2)& (0+255),w,b
 30266  0162E0  116B               	iorwf	(??___flge+3)& (0+255),w,b
 30267  0162E2  A4D8               	btfss	status,2,c
 30268  0162E4  D008               	goto	l2749
 30269                           
 30270                           ; BSR set to: 0
 30271  0162E6  0E00               	movlw	0
 30272  0162E8  6F64               	movwf	___flge@ff2& (0+255),b
 30273  0162EA  0E00               	movlw	0
 30274  0162EC  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 30275  0162EE  0E00               	movlw	0
 30276  0162F0  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 30277  0162F2  0E00               	movlw	0
 30278  0162F4  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 30279  0162F6                     l2749:
 30280                           
 30281                           ; BSR set to: 0
 30282                           
 30283                           ; BSR set to: 0
 30284  0162F6  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 30285  0162F8  D01D               	goto	l2750
 30286                           
 30287                           ; BSR set to: 0
 30288  0162FA  C060  F068         	movff	___flge@ff1,??___flge
 30289  0162FE  C061  F069         	movff	___flge@ff1+1,??___flge+1
 30290  016302  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 30291  016306  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 30292  01630A  1F68               	comf	??___flge& (0+255),f,b
 30293  01630C  1F69               	comf	(??___flge+1)& (0+255),f,b
 30294  01630E  1F6A               	comf	(??___flge+2)& (0+255),f,b
 30295  016310  1F6B               	comf	(??___flge+3)& (0+255),f,b
 30296  016312  2B68               	incf	??___flge& (0+255),f,b
 30297  016314  0E00               	movlw	0
 30298  016316  2369               	addwfc	(??___flge+1)& (0+255),f,b
 30299  016318  236A               	addwfc	(??___flge+2)& (0+255),f,b
 30300  01631A  236B               	addwfc	(??___flge+3)& (0+255),f,b
 30301  01631C  0E00               	movlw	0
 30302  01631E  2568               	addwf	??___flge& (0+255),w,b
 30303  016320  6F60               	movwf	___flge@ff1& (0+255),b
 30304  016322  0E00               	movlw	0
 30305  016324  2169               	addwfc	(??___flge+1)& (0+255),w,b
 30306  016326  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 30307  016328  0E00               	movlw	0
 30308  01632A  216A               	addwfc	(??___flge+2)& (0+255),w,b
 30309  01632C  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 30310  01632E  0E80               	movlw	128
 30311  016330  216B               	addwfc	(??___flge+3)& (0+255),w,b
 30312  016332  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 30313  016334                     l2750:
 30314                           
 30315                           ; BSR set to: 0
 30316                           
 30317                           ; BSR set to: 0
 30318  016334  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 30319  016336  D01D               	goto	l2751
 30320                           
 30321                           ; BSR set to: 0
 30322  016338  C064  F068         	movff	___flge@ff2,??___flge
 30323  01633C  C065  F069         	movff	___flge@ff2+1,??___flge+1
 30324  016340  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 30325  016344  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 30326  016348  1F68               	comf	??___flge& (0+255),f,b
 30327  01634A  1F69               	comf	(??___flge+1)& (0+255),f,b
 30328  01634C  1F6A               	comf	(??___flge+2)& (0+255),f,b
 30329  01634E  1F6B               	comf	(??___flge+3)& (0+255),f,b
 30330  016350  2B68               	incf	??___flge& (0+255),f,b
 30331  016352  0E00               	movlw	0
 30332  016354  2369               	addwfc	(??___flge+1)& (0+255),f,b
 30333  016356  236A               	addwfc	(??___flge+2)& (0+255),f,b
 30334  016358  236B               	addwfc	(??___flge+3)& (0+255),f,b
 30335  01635A  0E00               	movlw	0
 30336  01635C  2568               	addwf	??___flge& (0+255),w,b
 30337  01635E  6F64               	movwf	___flge@ff2& (0+255),b
 30338  016360  0E00               	movlw	0
 30339  016362  2169               	addwfc	(??___flge+1)& (0+255),w,b
 30340  016364  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 30341  016366  0E00               	movlw	0
 30342  016368  216A               	addwfc	(??___flge+2)& (0+255),w,b
 30343  01636A  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 30344  01636C  0E80               	movlw	128
 30345  01636E  216B               	addwfc	(??___flge+3)& (0+255),w,b
 30346  016370  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 30347  016372                     l2751:
 30348                           
 30349                           ; BSR set to: 0
 30350  016372  0E00               	movlw	0
 30351  016374  1B60               	xorwf	___flge@ff1& (0+255),f,b
 30352  016376  0E00               	movlw	0
 30353  016378  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 30354  01637A  0E00               	movlw	0
 30355  01637C  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 30356  01637E  0E80               	movlw	128
 30357  016380  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 30358  016382  0E00               	movlw	0
 30359  016384  1B64               	xorwf	___flge@ff2& (0+255),f,b
 30360  016386  0E00               	movlw	0
 30361  016388  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 30362  01638A  0E00               	movlw	0
 30363  01638C  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 30364  01638E  0E80               	movlw	128
 30365  016390  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 30366  016392  5164               	movf	___flge@ff2& (0+255),w,b
 30367  016394  5D60               	subwf	___flge@ff1& (0+255),w,b
 30368  016396  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 30369  016398  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 30370  01639A  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 30371  01639C  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 30372  01639E  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 30373  0163A0  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 30374  0163A2  B0D8               	btfsc	status,0,c
 30375  0163A4  D002               	goto	l13401
 30376                           
 30377                           ; BSR set to: 0
 30378  0163A6  90D8               	bcf	status,0,c
 30379  0163A8  0012               	return	
 30380  0163AA                     l13401:
 30381                           
 30382                           ; BSR set to: 0
 30383                           
 30384                           ; BSR set to: 0
 30385  0163AA  80D8               	bsf	status,0,c
 30386                           
 30387                           ; BSR set to: 0
 30388  0163AC  0012               	return	
 30389  0163AE                     __end_of___flge:
 30390                           	opt stack 0
 30391                           tosu	equ	0xFFF
 30392                           tosh	equ	0xFFE
 30393                           tosl	equ	0xFFD
 30394                           pclath	equ	0xFFA
 30395                           tblptru	equ	0xFF8
 30396                           tblptrh	equ	0xFF7
 30397                           tblptrl	equ	0xFF6
 30398                           tablat	equ	0xFF5
 30399                           prodh	equ	0xFF4
 30400                           prodl	equ	0xFF3
 30401                           intcon	equ	0xFF2
 30402                           indf0	equ	0xFEF
 30403                           postinc0	equ	0xFEE
 30404                           fsr0h	equ	0xFEA
 30405                           fsr0l	equ	0xFE9
 30406                           wreg	equ	0xFE8
 30407                           indf1	equ	0xFE7
 30408                           postdec1	equ	0xFE5
 30409                           fsr1h	equ	0xFE2
 30410                           fsr1l	equ	0xFE1
 30411                           indf2	equ	0xFDF
 30412                           postinc2	equ	0xFDE
 30413                           postdec2	equ	0xFDD
 30414                           plusw2	equ	0xFDB
 30415                           fsr2h	equ	0xFDA
 30416                           fsr2l	equ	0xFD9
 30417                           status	equ	0xFD8
 30418                           
 30419 ;; *************** function _eval_poly *****************
 30420 ;; Defined at:
 30421 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
 30422 ;; Parameters:    Size  Location     Type
 30423 ;;  x               4   63[BANK0 ] long 
 30424 ;;  d               2   67[BANK0 ] PTR const 
 30425 ;;		 -> log@coeff(36), exp@coeff(40), 
 30426 ;;  n               2   69[BANK0 ] int 
 30427 ;; Auto vars:     Size  Location     Type
 30428 ;;  res             4   75[BANK0 ] int 
 30429 ;; Return value:  Size  Location     Type
 30430 ;;                  4   63[BANK0 ] int 
 30431 ;; Registers used:
 30432 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30433 ;; Tracked objects:
 30434 ;;		On entry : 0/0
 30435 ;;		On exit  : 0/0
 30436 ;;		Unchanged: 0/0
 30437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30438 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30439 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30440 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30441 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30442 ;;Total ram usage:       16 bytes
 30443 ;; Hardware stack levels used:    1
 30444 ;; Hardware stack levels required when called:    8
 30445 ;; This function calls:
 30446 ;;		___fladd
 30447 ;;		___flmul
 30448 ;; This function is called by:
 30449 ;;		_exp
 30450 ;;		_log
 30451 ;; This function uses a non-reentrant model
 30452 ;;
 30453                           
 30454                           	psect	text138
 30455  0165D0                     __ptext138:
 30456                           	opt stack 0
 30457  0165D0                     _eval_poly:
 30458                           	opt stack 18
 30459                           
 30460                           ; BSR set to: 0
 30461                           ;incstack = 0
 30462  0165D0  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 30463  0165D4  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 30464  0165D8  0100               	movlb	0	; () banked
 30465  0165DA  90D8               	bcf	status,0,c
 30466  0165DC  37A7               	rlcf	??_eval_poly& (0+255),f,b
 30467  0165DE  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 30468  0165E0  90D8               	bcf	status,0,c
 30469  0165E2  37A7               	rlcf	??_eval_poly& (0+255),f,b
 30470  0165E4  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 30471  0165E6  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 30472  0165EA  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 30473  0165EE  51A7               	movf	??_eval_poly& (0+255),w,b
 30474  0165F0  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 30475  0165F2  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 30476  0165F4  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 30477  0165F6  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 30478  0165FA  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 30479  0165FE                     	if	0	;tblptru may be non-zero
 30480  0165FE                     	endif
 30481  0165FE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 30482  0165FE  0E00               	movlw	low (__mediumconst shr (0+16))
 30483  016600  6EF8               	movwf	tblptru,c
 30484  016602                     	endif
 30485  016602  0009               	tblrd		*+
 30486  016604  CFF5 F0AB          	movff	tablat,eval_poly@res
 30487  016608  0009               	tblrd		*+
 30488  01660A  CFF5 F0AC          	movff	tablat,eval_poly@res+1
 30489  01660E  0009               	tblrd		*+
 30490  016610  CFF5 F0AD          	movff	tablat,eval_poly@res+2
 30491  016614  000A               	tblrd		*-
 30492  016616  CFF5 F0AE          	movff	tablat,eval_poly@res+3
 30493  01661A  D04C               	goto	l3192
 30494  01661C                     
 30495                           ; BSR set to: 0
 30496                           
 30497                           ; BSR set to: 0
 30498  01661C  C0AB  F072         	movff	eval_poly@res,___flmul@a
 30499  016620  C0AC  F073         	movff	eval_poly@res+1,___flmul@a+1
 30500  016624  C0AD  F074         	movff	eval_poly@res+2,___flmul@a+2
 30501  016628  C0AE  F075         	movff	eval_poly@res+3,___flmul@a+3
 30502  01662C  C09F  F06E         	movff	eval_poly@x,___flmul@b
 30503  016630  C0A0  F06F         	movff	eval_poly@x+1,___flmul@b+1
 30504  016634  C0A1  F070         	movff	eval_poly@x+2,___flmul@b+2
 30505  016638  C0A2  F071         	movff	eval_poly@x+3,___flmul@b+3
 30506  01663C  ECD4  F09A         	call	___flmul	;wreg free
 30507  016640  C06E  F08B         	movff	?___flmul,___fladd@b
 30508  016644  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 30509  016648  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 30510  01664C  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 30511  016650  0100               	movlb	0	; () banked
 30512  016652  07A5               	decf	eval_poly@n& (0+255),f,b
 30513  016654  A0D8               	btfss	status,0,c
 30514  016656  07A6               	decf	(eval_poly@n+1)& (0+255),f,b
 30515  016658  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 30516  01665C  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 30517  016660  90D8               	bcf	status,0,c
 30518  016662  37A7               	rlcf	??_eval_poly& (0+255),f,b
 30519  016664  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 30520  016666  90D8               	bcf	status,0,c
 30521  016668  37A7               	rlcf	??_eval_poly& (0+255),f,b
 30522  01666A  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 30523  01666C  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 30524  016670  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 30525  016674  51A7               	movf	??_eval_poly& (0+255),w,b
 30526  016676  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 30527  016678  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 30528  01667A  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 30529  01667C  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 30530  016680  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 30531  016684                     	if	0	;tblptru may be non-zero
 30532  016684                     	endif
 30533  016684                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 30534  016684  0E00               	movlw	low (__mediumconst shr (0+16))
 30535  016686  6EF8               	movwf	tblptru,c
 30536  016688                     	endif
 30537  016688  0009               	tblrd		*+
 30538  01668A  CFF5 F08F          	movff	tablat,___fladd@a
 30539  01668E  0009               	tblrd		*+
 30540  016690  CFF5 F090          	movff	tablat,___fladd@a+1
 30541  016694  0009               	tblrd		*+
 30542  016696  CFF5 F091          	movff	tablat,___fladd@a+2
 30543  01669A  000A               	tblrd		*-
 30544  01669C  CFF5 F092          	movff	tablat,___fladd@a+3
 30545  0166A0  EC7D  F09C         	call	___fladd	;wreg free
 30546  0166A4  C08B  F0AB         	movff	?___fladd,eval_poly@res
 30547  0166A8  C08C  F0AC         	movff	?___fladd+1,eval_poly@res+1
 30548  0166AC  C08D  F0AD         	movff	?___fladd+2,eval_poly@res+2
 30549  0166B0  C08E  F0AE         	movff	?___fladd+3,eval_poly@res+3
 30550  0166B4                     l3192:
 30551  0166B4  0100               	movlb	0	; () banked
 30552  0166B6  51A5               	movf	eval_poly@n& (0+255),w,b
 30553  0166B8  11A6               	iorwf	(eval_poly@n+1)& (0+255),w,b
 30554  0166BA  A4D8               	btfss	status,2,c
 30555  0166BC  D7AF               	goto	l3193
 30556                           
 30557                           ; BSR set to: 0
 30558  0166BE  C0AB  F09F         	movff	eval_poly@res,?_eval_poly
 30559  0166C2  C0AC  F0A0         	movff	eval_poly@res+1,?_eval_poly+1
 30560  0166C6  C0AD  F0A1         	movff	eval_poly@res+2,?_eval_poly+2
 30561  0166CA  C0AE  F0A2         	movff	eval_poly@res+3,?_eval_poly+3
 30562                           
 30563                           ; BSR set to: 0
 30564  0166CE  0012               	return		;funcret
 30565  0166D0                     __end_of_eval_poly:
 30566                           	opt stack 0
 30567                           tosu	equ	0xFFF
 30568                           tosh	equ	0xFFE
 30569                           tosl	equ	0xFFD
 30570                           pclath	equ	0xFFA
 30571                           tblptru	equ	0xFF8
 30572                           tblptrh	equ	0xFF7
 30573                           tblptrl	equ	0xFF6
 30574                           tablat	equ	0xFF5
 30575                           prodh	equ	0xFF4
 30576                           prodl	equ	0xFF3
 30577                           intcon	equ	0xFF2
 30578                           indf0	equ	0xFEF
 30579                           postinc0	equ	0xFEE
 30580                           fsr0h	equ	0xFEA
 30581                           fsr0l	equ	0xFE9
 30582                           wreg	equ	0xFE8
 30583                           indf1	equ	0xFE7
 30584                           postdec1	equ	0xFE5
 30585                           fsr1h	equ	0xFE2
 30586                           fsr1l	equ	0xFE1
 30587                           indf2	equ	0xFDF
 30588                           postinc2	equ	0xFDE
 30589                           postdec2	equ	0xFDD
 30590                           plusw2	equ	0xFDB
 30591                           fsr2h	equ	0xFDA
 30592                           fsr2l	equ	0xFD9
 30593                           status	equ	0xFD8
 30594                           
 30595 ;; *************** function ___flmul *****************
 30596 ;; Defined at:
 30597 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcmul.c"
 30598 ;; Parameters:    Size  Location     Type
 30599 ;;  b               4   14[BANK0 ] int 
 30600 ;;  a               4   18[BANK0 ] int 
 30601 ;; Auto vars:     Size  Location     Type
 30602 ;;  prod            4   33[BANK0 ] struct .
 30603 ;;  grs             4   28[BANK0 ] unsigned long 
 30604 ;;  temp            2   37[BANK0 ] struct .
 30605 ;;  bexp            1   32[BANK0 ] unsigned char 
 30606 ;;  aexp            1   27[BANK0 ] unsigned char 
 30607 ;;  sign            1   26[BANK0 ] unsigned char 
 30608 ;; Return value:  Size  Location     Type
 30609 ;;                  4   14[BANK0 ] unsigned char 
 30610 ;; Registers used:
 30611 ;;		wreg, status,2, status,0, prodl, prodh
 30612 ;; Tracked objects:
 30613 ;;		On entry : 0/0
 30614 ;;		On exit  : 0/0
 30615 ;;		Unchanged: 0/0
 30616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30617 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30618 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30619 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30620 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30621 ;;Total ram usage:       25 bytes
 30622 ;; Hardware stack levels used:    1
 30623 ;; Hardware stack levels required when called:    7
 30624 ;; This function calls:
 30625 ;;		Nothing
 30626 ;; This function is called by:
 30627 ;;		_ADCAverage
 30628 ;;		_Move_ADC_To
 30629 ;;		_pow
 30630 ;;		_exp
 30631 ;;		_log
 30632 ;;		_eval_poly
 30633 ;;		_ADC_Voltage
 30634 ;; This function uses a non-reentrant model
 30635 ;;
 30636                           
 30637                           	psect	text139
 30638  0135A8                     __ptext139:
 30639                           	opt stack 0
 30640  0135A8                     ___flmul:
 30641                           	opt stack 21
 30642                           
 30643                           ; BSR set to: 0
 30644                           ;incstack = 0
 30645  0135A8  0100               	movlb	0	; () banked
 30646  0135AA  5171               	movf	(___flmul@b+3)& (0+255),w,b
 30647  0135AC  0B80               	andlw	128
 30648  0135AE  6F7A               	movwf	___flmul@sign& (0+255),b
 30649  0135B0  5171               	movf	(___flmul@b+3)& (0+255),w,b
 30650  0135B2  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 30651  0135B4  6F80               	movwf	___flmul@bexp& (0+255),b
 30652                           
 30653                           ; BSR set to: 0
 30654  0135B6  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 30655                           
 30656                           ; BSR set to: 0
 30657  0135B8  8180               	bsf	___flmul@bexp& (0+255),0,b
 30658                           
 30659                           ; BSR set to: 0
 30660                           
 30661                           ; BSR set to: 0
 30662  0135BA  5180               	movf	___flmul@bexp& (0+255),w,b
 30663  0135BC  B4D8               	btfsc	status,2,c
 30664  0135BE  D00D               	goto	l3083
 30665                           
 30666                           ; BSR set to: 0
 30667  0135C0  2980               	incf	___flmul@bexp& (0+255),w,b
 30668  0135C2  A4D8               	btfss	status,2,c
 30669  0135C4  D008               	goto	l3084
 30670                           
 30671                           ; BSR set to: 0
 30672  0135C6  0E00               	movlw	0
 30673  0135C8  6F6E               	movwf	___flmul@b& (0+255),b
 30674  0135CA  0E00               	movlw	0
 30675  0135CC  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 30676  0135CE  0E00               	movlw	0
 30677  0135D0  6F70               	movwf	(___flmul@b+2)& (0+255),b
 30678  0135D2  0E00               	movlw	0
 30679  0135D4  6F71               	movwf	(___flmul@b+3)& (0+255),b
 30680  0135D6                     l3084:
 30681                           
 30682                           ; BSR set to: 0
 30683                           
 30684                           ; BSR set to: 0
 30685  0135D6  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 30686  0135D8  D008               	goto	l3085
 30687  0135DA                     l3083:
 30688                           
 30689                           ; BSR set to: 0
 30690                           
 30691                           ; BSR set to: 0
 30692  0135DA  0E00               	movlw	0
 30693  0135DC  6F6E               	movwf	___flmul@b& (0+255),b
 30694  0135DE  0E00               	movlw	0
 30695  0135E0  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 30696  0135E2  0E00               	movlw	0
 30697  0135E4  6F70               	movwf	(___flmul@b+2)& (0+255),b
 30698  0135E6  0E00               	movlw	0
 30699  0135E8  6F71               	movwf	(___flmul@b+3)& (0+255),b
 30700  0135EA                     l3085:
 30701                           
 30702                           ; BSR set to: 0
 30703                           
 30704                           ; BSR set to: 0
 30705  0135EA  5175               	movf	(___flmul@a+3)& (0+255),w,b
 30706  0135EC  0B80               	andlw	128
 30707  0135EE  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 30708                           
 30709                           ; BSR set to: 0
 30710  0135F0  5175               	movf	(___flmul@a+3)& (0+255),w,b
 30711  0135F2  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 30712  0135F4  6F7B               	movwf	___flmul@aexp& (0+255),b
 30713                           
 30714                           ; BSR set to: 0
 30715  0135F6  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 30716                           
 30717                           ; BSR set to: 0
 30718  0135F8  817B               	bsf	___flmul@aexp& (0+255),0,b
 30719                           
 30720                           ; BSR set to: 0
 30721                           
 30722                           ; BSR set to: 0
 30723  0135FA  517B               	movf	___flmul@aexp& (0+255),w,b
 30724  0135FC  B4D8               	btfsc	status,2,c
 30725  0135FE  D00D               	goto	l3087
 30726                           
 30727                           ; BSR set to: 0
 30728  013600  297B               	incf	___flmul@aexp& (0+255),w,b
 30729  013602  A4D8               	btfss	status,2,c
 30730  013604  D008               	goto	l3088
 30731                           
 30732                           ; BSR set to: 0
 30733  013606  0E00               	movlw	0
 30734  013608  6F72               	movwf	___flmul@a& (0+255),b
 30735  01360A  0E00               	movlw	0
 30736  01360C  6F73               	movwf	(___flmul@a+1)& (0+255),b
 30737  01360E  0E00               	movlw	0
 30738  013610  6F74               	movwf	(___flmul@a+2)& (0+255),b
 30739  013612  0E00               	movlw	0
 30740  013614  6F75               	movwf	(___flmul@a+3)& (0+255),b
 30741  013616                     l3088:
 30742                           
 30743                           ; BSR set to: 0
 30744                           
 30745                           ; BSR set to: 0
 30746  013616  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 30747  013618  D008               	goto	l3089
 30748  01361A                     l3087:
 30749                           
 30750                           ; BSR set to: 0
 30751                           
 30752                           ; BSR set to: 0
 30753  01361A  0E00               	movlw	0
 30754  01361C  6F72               	movwf	___flmul@a& (0+255),b
 30755  01361E  0E00               	movlw	0
 30756  013620  6F73               	movwf	(___flmul@a+1)& (0+255),b
 30757  013622  0E00               	movlw	0
 30758  013624  6F74               	movwf	(___flmul@a+2)& (0+255),b
 30759  013626  0E00               	movlw	0
 30760  013628  6F75               	movwf	(___flmul@a+3)& (0+255),b
 30761  01362A                     l3089:
 30762                           
 30763                           ; BSR set to: 0
 30764  01362A  517B               	movf	___flmul@aexp& (0+255),w,b
 30765  01362C  B4D8               	btfsc	status,2,c
 30766  01362E  D003               	goto	u11170
 30767                           
 30768                           ; BSR set to: 0
 30769  013630  5180               	movf	___flmul@bexp& (0+255),w,b
 30770  013632  A4D8               	btfss	status,2,c
 30771  013634  D009               	goto	l3090
 30772  013636                     u11170:
 30773                           
 30774                           ; BSR set to: 0
 30775                           
 30776                           ; BSR set to: 0
 30777  013636  0E00               	movlw	0
 30778  013638  6F6E               	movwf	?___flmul& (0+255),b
 30779  01363A  0E00               	movlw	0
 30780  01363C  6F6F               	movwf	(?___flmul+1)& (0+255),b
 30781  01363E  0E00               	movlw	0
 30782  013640  6F70               	movwf	(?___flmul+2)& (0+255),b
 30783  013642  0E00               	movlw	0
 30784  013644  6F71               	movwf	(?___flmul+3)& (0+255),b
 30785                           
 30786                           ; BSR set to: 0
 30787  013646  0012               	return	
 30788  013648                     l3090:
 30789                           
 30790                           ; BSR set to: 0
 30791                           
 30792                           ; BSR set to: 0
 30793  013648  5174               	movf	(___flmul@a+2)& (0+255),w,b
 30794  01364A  036E               	mulwf	___flmul@b& (0+255),b
 30795  01364C  CFF3 F085          	movff	prodl,___flmul@temp
 30796  013650  CFF4 F086          	movff	prodh,___flmul@temp+1
 30797                           
 30798                           ; BSR set to: 0
 30799  013654  5185               	movf	___flmul@temp& (0+255),w,b
 30800  013656  6F7C               	movwf	___flmul@grs& (0+255),b
 30801  013658  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 30802  01365A  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 30803  01365C  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 30804                           
 30805                           ; BSR set to: 0
 30806  01365E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30807  013660  6F81               	movwf	___flmul@prod& (0+255),b
 30808  013662  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 30809  013664  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 30810  013666  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 30811  013668  5173               	movf	(___flmul@a+1)& (0+255),w,b
 30812  01366A  036F               	mulwf	(___flmul@b+1)& (0+255),b
 30813  01366C  CFF3 F085          	movff	prodl,___flmul@temp
 30814  013670  CFF4 F086          	movff	prodh,___flmul@temp+1
 30815                           
 30816                           ; BSR set to: 0
 30817  013674  5185               	movf	___flmul@temp& (0+255),w,b
 30818  013676  277C               	addwf	___flmul@grs& (0+255),f,b
 30819  013678  0E00               	movlw	0
 30820  01367A  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 30821  01367C  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 30822  01367E  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 30823                           
 30824                           ; BSR set to: 0
 30825  013680  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30826  013682  2781               	addwf	___flmul@prod& (0+255),f,b
 30827  013684  0E00               	movlw	0
 30828  013686  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 30829  013688  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 30830  01368A  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 30831  01368C  5172               	movf	___flmul@a& (0+255),w,b
 30832  01368E  0370               	mulwf	(___flmul@b+2)& (0+255),b
 30833  013690  CFF3 F085          	movff	prodl,___flmul@temp
 30834  013694  CFF4 F086          	movff	prodh,___flmul@temp+1
 30835                           
 30836                           ; BSR set to: 0
 30837  013698  5185               	movf	___flmul@temp& (0+255),w,b
 30838  01369A  277C               	addwf	___flmul@grs& (0+255),f,b
 30839  01369C  0E00               	movlw	0
 30840  01369E  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 30841  0136A0  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 30842  0136A2  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 30843                           
 30844                           ; BSR set to: 0
 30845  0136A4  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30846  0136A6  2781               	addwf	___flmul@prod& (0+255),f,b
 30847  0136A8  0E00               	movlw	0
 30848  0136AA  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 30849  0136AC  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 30850  0136AE  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 30851                           
 30852                           ; BSR set to: 0
 30853  0136B0  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 30854  0136B4  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 30855  0136B8  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 30856  0136BC  6B7C               	clrf	___flmul@grs& (0+255),b
 30857                           
 30858                           ; BSR set to: 0
 30859  0136BE  5172               	movf	___flmul@a& (0+255),w,b
 30860  0136C0  036F               	mulwf	(___flmul@b+1)& (0+255),b
 30861  0136C2  CFF3 F085          	movff	prodl,___flmul@temp
 30862  0136C6  CFF4 F086          	movff	prodh,___flmul@temp+1
 30863                           
 30864                           ; BSR set to: 0
 30865  0136CA  5185               	movf	___flmul@temp& (0+255),w,b
 30866  0136CC  277C               	addwf	___flmul@grs& (0+255),f,b
 30867  0136CE  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30868  0136D0  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 30869  0136D2  0E00               	movlw	0
 30870  0136D4  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 30871  0136D6  0E00               	movlw	0
 30872  0136D8  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 30873                           
 30874                           ; BSR set to: 0
 30875  0136DA  5173               	movf	(___flmul@a+1)& (0+255),w,b
 30876  0136DC  036E               	mulwf	___flmul@b& (0+255),b
 30877  0136DE  CFF3 F085          	movff	prodl,___flmul@temp
 30878  0136E2  CFF4 F086          	movff	prodh,___flmul@temp+1
 30879                           
 30880                           ; BSR set to: 0
 30881  0136E6  5185               	movf	___flmul@temp& (0+255),w,b
 30882  0136E8  277C               	addwf	___flmul@grs& (0+255),f,b
 30883  0136EA  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30884  0136EC  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 30885  0136EE  0E00               	movlw	0
 30886  0136F0  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 30887  0136F2  0E00               	movlw	0
 30888  0136F4  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 30889                           
 30890                           ; BSR set to: 0
 30891  0136F6  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 30892  0136FA  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 30893  0136FE  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 30894  013702  6B7C               	clrf	___flmul@grs& (0+255),b
 30895  013704  5172               	movf	___flmul@a& (0+255),w,b
 30896  013706  036E               	mulwf	___flmul@b& (0+255),b
 30897  013708  CFF3 F085          	movff	prodl,___flmul@temp
 30898  01370C  CFF4 F086          	movff	prodh,___flmul@temp+1
 30899                           
 30900                           ; BSR set to: 0
 30901  013710  5185               	movf	___flmul@temp& (0+255),w,b
 30902  013712  277C               	addwf	___flmul@grs& (0+255),f,b
 30903  013714  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30904  013716  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 30905  013718  0E00               	movlw	0
 30906  01371A  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 30907  01371C  0E00               	movlw	0
 30908  01371E  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 30909                           
 30910                           ; BSR set to: 0
 30911  013720  5174               	movf	(___flmul@a+2)& (0+255),w,b
 30912  013722  036F               	mulwf	(___flmul@b+1)& (0+255),b
 30913  013724  CFF3 F085          	movff	prodl,___flmul@temp
 30914  013728  CFF4 F086          	movff	prodh,___flmul@temp+1
 30915  01372C  5185               	movf	___flmul@temp& (0+255),w,b
 30916  01372E  2781               	addwf	___flmul@prod& (0+255),f,b
 30917  013730  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30918  013732  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 30919  013734  0E00               	movlw	0
 30920  013736  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 30921  013738  0E00               	movlw	0
 30922  01373A  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 30923                           
 30924                           ; BSR set to: 0
 30925  01373C  5173               	movf	(___flmul@a+1)& (0+255),w,b
 30926  01373E  0370               	mulwf	(___flmul@b+2)& (0+255),b
 30927  013740  CFF3 F085          	movff	prodl,___flmul@temp
 30928  013744  CFF4 F086          	movff	prodh,___flmul@temp+1
 30929                           
 30930                           ; BSR set to: 0
 30931  013748  5185               	movf	___flmul@temp& (0+255),w,b
 30932  01374A  2781               	addwf	___flmul@prod& (0+255),f,b
 30933  01374C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30934  01374E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 30935  013750  0E00               	movlw	0
 30936  013752  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 30937  013754  0E00               	movlw	0
 30938  013756  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 30939  013758  5174               	movf	(___flmul@a+2)& (0+255),w,b
 30940  01375A  0370               	mulwf	(___flmul@b+2)& (0+255),b
 30941  01375C  CFF3 F085          	movff	prodl,___flmul@temp
 30942  013760  CFF4 F086          	movff	prodh,___flmul@temp+1
 30943                           
 30944                           ; BSR set to: 0
 30945  013764  5185               	movf	___flmul@temp& (0+255),w,b
 30946  013766  6F76               	movwf	??___flmul& (0+255),b
 30947  013768  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30948  01376A  6F77               	movwf	(??___flmul+1)& (0+255),b
 30949  01376C  6B78               	clrf	(??___flmul+2)& (0+255),b
 30950  01376E  6B79               	clrf	(??___flmul+3)& (0+255),b
 30951  013770  C078  F079         	movff	??___flmul+2,??___flmul+3
 30952  013774  C077  F078         	movff	??___flmul+1,??___flmul+2
 30953  013778  C076  F077         	movff	??___flmul,??___flmul+1
 30954  01377C  6B76               	clrf	??___flmul& (0+255),b
 30955  01377E  5176               	movf	??___flmul& (0+255),w,b
 30956  013780  2781               	addwf	___flmul@prod& (0+255),f,b
 30957  013782  5177               	movf	(??___flmul+1)& (0+255),w,b
 30958  013784  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 30959  013786  5178               	movf	(??___flmul+2)& (0+255),w,b
 30960  013788  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 30961  01378A  5179               	movf	(??___flmul+3)& (0+255),w,b
 30962  01378C  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 30963                           
 30964                           ; BSR set to: 0
 30965  01378E  C07C  F076         	movff	___flmul@grs,??___flmul
 30966  013792  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 30967  013796  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 30968  01379A  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 30969  01379E  0E19               	movlw	25
 30970  0137A0  D005               	goto	u11180
 30971  0137A2                     u11185:
 30972  0137A2  90D8               	bcf	status,0,c
 30973  0137A4  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 30974  0137A6  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 30975  0137A8  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 30976  0137AA  3376               	rrcf	??___flmul& (0+255),f,b
 30977  0137AC                     u11180:
 30978  0137AC  2EE8               	decfsz	wreg,f,c
 30979  0137AE  D7F9               	goto	u11185
 30980  0137B0  5176               	movf	??___flmul& (0+255),w,b
 30981  0137B2  2781               	addwf	___flmul@prod& (0+255),f,b
 30982  0137B4  5177               	movf	(??___flmul+1)& (0+255),w,b
 30983  0137B6  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 30984  0137B8  5178               	movf	(??___flmul+2)& (0+255),w,b
 30985  0137BA  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 30986  0137BC  5179               	movf	(??___flmul+3)& (0+255),w,b
 30987  0137BE  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 30988                           
 30989                           ; BSR set to: 0
 30990  0137C0  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 30991  0137C4  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 30992  0137C8  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 30993  0137CC  6B7C               	clrf	___flmul@grs& (0+255),b
 30994                           
 30995                           ; BSR set to: 0
 30996  0137CE  517B               	movf	___flmul@aexp& (0+255),w,b
 30997  0137D0  C080  F076         	movff	___flmul@bexp,??___flmul
 30998  0137D4  6B77               	clrf	(??___flmul+1)& (0+255),b
 30999  0137D6  2776               	addwf	??___flmul& (0+255),f,b
 31000  0137D8  0E00               	movlw	0
 31001  0137DA  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 31002  0137DC  0E82               	movlw	130
 31003  0137DE  2576               	addwf	??___flmul& (0+255),w,b
 31004  0137E0  6F85               	movwf	___flmul@temp& (0+255),b
 31005  0137E2  0EFF               	movlw	255
 31006  0137E4  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 31007  0137E6  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 31008  0137E8  D00F               	goto	l3094
 31009  0137EA                     
 31010                           ; BSR set to: 0
 31011                           
 31012                           ; BSR set to: 0
 31013  0137EA  90D8               	bcf	status,0,c
 31014  0137EC  3781               	rlcf	___flmul@prod& (0+255),f,b
 31015  0137EE  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 31016  0137F0  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 31017  0137F2  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 31018                           
 31019                           ; BSR set to: 0
 31020  0137F4  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 31021                           
 31022                           ; BSR set to: 0
 31023  0137F6  8181               	bsf	___flmul@prod& (0+255),0,b
 31024                           
 31025                           ; BSR set to: 0
 31026  0137F8  90D8               	bcf	status,0,c
 31027  0137FA  377C               	rlcf	___flmul@grs& (0+255),f,b
 31028  0137FC  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 31029  0137FE  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 31030  013800  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 31031  013802  0785               	decf	___flmul@temp& (0+255),f,b
 31032  013804  A0D8               	btfss	status,0,c
 31033  013806  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 31034  013808                     l3094:
 31035                           
 31036                           ; BSR set to: 0
 31037                           
 31038                           ; BSR set to: 0
 31039  013808  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 31040  01380A  D7EF               	goto	l3095
 31041                           
 31042                           ; BSR set to: 0
 31043                           
 31044                           ; BSR set to: 0
 31045  01380C  0E00               	movlw	0
 31046  01380E  6F7B               	movwf	___flmul@aexp& (0+255),b
 31047                           
 31048                           ; BSR set to: 0
 31049  013810  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 31050  013812  D016               	goto	l3101
 31051                           
 31052                           ; BSR set to: 0
 31053  013814  0EFF               	movlw	255
 31054  013816  157C               	andwf	___flmul@grs& (0+255),w,b
 31055  013818  6F76               	movwf	??___flmul& (0+255),b
 31056  01381A  0EFF               	movlw	255
 31057  01381C  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 31058  01381E  6F77               	movwf	(??___flmul+1)& (0+255),b
 31059  013820  0EFF               	movlw	255
 31060  013822  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 31061  013824  6F78               	movwf	(??___flmul+2)& (0+255),b
 31062  013826  0E7F               	movlw	127
 31063  013828  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 31064  01382A  6F79               	movwf	(??___flmul+3)& (0+255),b
 31065  01382C  5176               	movf	??___flmul& (0+255),w,b
 31066  01382E  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 31067  013830  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 31068  013832  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 31069  013834  A4D8               	btfss	status,2,c
 31070  013836  D002               	goto	u11230
 31071                           
 31072                           ; BSR set to: 0
 31073                           
 31074                           ; BSR set to: 0
 31075  013838  A181               	btfss	___flmul@prod& (0+255),0,b
 31076  01383A  D002               	goto	l3101
 31077  01383C                     u11230:
 31078                           
 31079                           ; BSR set to: 0
 31080  01383C  0E01               	movlw	1
 31081  01383E  6F7B               	movwf	___flmul@aexp& (0+255),b
 31082  013840                     l3101:
 31083                           
 31084                           ; BSR set to: 0
 31085                           
 31086                           ; BSR set to: 0
 31087                           
 31088                           ; BSR set to: 0
 31089  013840  517B               	movf	___flmul@aexp& (0+255),w,b
 31090  013842  B4D8               	btfsc	status,2,c
 31091  013844  D01F               	goto	l3103
 31092                           
 31093                           ; BSR set to: 0
 31094  013846  0E01               	movlw	1
 31095  013848  2781               	addwf	___flmul@prod& (0+255),f,b
 31096  01384A  0E00               	movlw	0
 31097  01384C  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 31098  01384E  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 31099  013850  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 31100                           
 31101                           ; BSR set to: 0
 31102  013852  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 31103  013854  D017               	goto	l3103
 31104                           
 31105                           ; BSR set to: 0
 31106  013856  C081  F076         	movff	___flmul@prod,??___flmul
 31107  01385A  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 31108  01385E  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 31109  013862  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 31110  013866  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 31111  013868  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 31112  01386A  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 31113  01386C  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 31114  01386E  3376               	rrcf	??___flmul& (0+255),f,b
 31115  013870  C076  F081         	movff	??___flmul,___flmul@prod
 31116  013874  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 31117  013878  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 31118  01387C  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 31119                           
 31120                           ; BSR set to: 0
 31121  013880  4B85               	infsnz	___flmul@temp& (0+255),f,b
 31122  013882  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 31123  013884                     l3103:
 31124                           
 31125                           ; BSR set to: 0
 31126                           
 31127                           ; BSR set to: 0
 31128                           
 31129                           ; BSR set to: 0
 31130  013884  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 31131  013886  D00D               	goto	l3104
 31132  013888  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31133  01388A  E103               	bnz	u11260
 31134  01388C  2985               	incf	___flmul@temp& (0+255),w,b
 31135  01388E  A0D8               	btfss	status,0,c
 31136  013890  D008               	goto	l3104
 31137  013892                     u11260:
 31138                           
 31139                           ; BSR set to: 0
 31140  013892  0E00               	movlw	0
 31141  013894  6F81               	movwf	___flmul@prod& (0+255),b
 31142  013896  0E00               	movlw	0
 31143  013898  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 31144  01389A  0E80               	movlw	128
 31145  01389C  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 31146  01389E  0E7F               	movlw	127
 31147  0138A0  D020               	goto	L19
 31148  0138A2                     l3104:
 31149                           
 31150                           ; BSR set to: 0
 31151                           
 31152                           ; BSR set to: 0
 31153  0138A2  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 31154  0138A4  D005               	goto	u11270
 31155  0138A6  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31156  0138A8  E10E               	bnz	l3106
 31157  0138AA  0585               	decf	___flmul@temp& (0+255),w,b
 31158  0138AC  B0D8               	btfsc	status,0,c
 31159  0138AE  D00B               	goto	l3106
 31160  0138B0                     u11270:
 31161                           
 31162                           ; BSR set to: 0
 31163  0138B0  0E00               	movlw	0
 31164  0138B2  6F81               	movwf	___flmul@prod& (0+255),b
 31165  0138B4  0E00               	movlw	0
 31166  0138B6  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 31167  0138B8  0E00               	movlw	0
 31168  0138BA  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 31169  0138BC  0E00               	movlw	0
 31170  0138BE  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 31171  0138C0  0E00               	movlw	0
 31172  0138C2  6F7A               	movwf	___flmul@sign& (0+255),b
 31173  0138C4  D00F               	goto	l3107
 31174  0138C6                     l3106:
 31175                           
 31176                           ; BSR set to: 0
 31177  0138C6  C085  F080         	movff	___flmul@temp,___flmul@bexp
 31178                           
 31179                           ; BSR set to: 0
 31180  0138CA  0EFF               	movlw	255
 31181  0138CC  1781               	andwf	___flmul@prod& (0+255),f,b
 31182  0138CE  0EFF               	movlw	255
 31183  0138D0  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 31184  0138D2  0E7F               	movlw	127
 31185  0138D4  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 31186  0138D6  0E00               	movlw	0
 31187  0138D8  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 31188                           
 31189                           ; BSR set to: 0
 31190  0138DA  B180               	btfsc	___flmul@bexp& (0+255),0,b
 31191                           
 31192                           ; BSR set to: 0
 31193  0138DC  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 31194                           
 31195                           ; BSR set to: 0
 31196                           
 31197                           ; BSR set to: 0
 31198  0138DE  90D8               	bcf	status,0,c
 31199  0138E0  3180               	rrcf	___flmul@bexp& (0+255),w,b
 31200  0138E2                     L19:
 31201  0138E2  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 31202  0138E4                     l3107:
 31203                           
 31204                           ; BSR set to: 0
 31205                           
 31206                           ; BSR set to: 0
 31207                           
 31208                           ; BSR set to: 0
 31209  0138E4  517A               	movf	___flmul@sign& (0+255),w,b
 31210  0138E6  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 31211                           
 31212                           ; BSR set to: 0
 31213  0138E8  C081  F06E         	movff	___flmul@prod,?___flmul
 31214  0138EC  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 31215  0138F0  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 31216  0138F4  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 31217  0138F8  0012               	return	
 31218  0138FA                     __end_of___flmul:
 31219                           	opt stack 0
 31220                           tosu	equ	0xFFF
 31221                           tosh	equ	0xFFE
 31222                           tosl	equ	0xFFD
 31223                           pclath	equ	0xFFA
 31224                           tblptru	equ	0xFF8
 31225                           tblptrh	equ	0xFF7
 31226                           tblptrl	equ	0xFF6
 31227                           tablat	equ	0xFF5
 31228                           prodh	equ	0xFF4
 31229                           prodl	equ	0xFF3
 31230                           intcon	equ	0xFF2
 31231                           indf0	equ	0xFEF
 31232                           postinc0	equ	0xFEE
 31233                           fsr0h	equ	0xFEA
 31234                           fsr0l	equ	0xFE9
 31235                           wreg	equ	0xFE8
 31236                           indf1	equ	0xFE7
 31237                           postdec1	equ	0xFE5
 31238                           fsr1h	equ	0xFE2
 31239                           fsr1l	equ	0xFE1
 31240                           indf2	equ	0xFDF
 31241                           postinc2	equ	0xFDE
 31242                           postdec2	equ	0xFDD
 31243                           plusw2	equ	0xFDB
 31244                           fsr2h	equ	0xFDA
 31245                           fsr2l	equ	0xFD9
 31246                           status	equ	0xFD8
 31247                           
 31248 ;; *************** function ___flsub *****************
 31249 ;; Defined at:
 31250 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
 31251 ;; Parameters:    Size  Location     Type
 31252 ;;  b               4   63[BANK0 ] unsigned char 
 31253 ;;  a               4   67[BANK0 ] unsigned char 
 31254 ;; Auto vars:     Size  Location     Type
 31255 ;;		None
 31256 ;; Return value:  Size  Location     Type
 31257 ;;                  4   63[BANK0 ] unsigned char 
 31258 ;; Registers used:
 31259 ;;		wreg, status,2, status,0, cstack
 31260 ;; Tracked objects:
 31261 ;;		On entry : 0/0
 31262 ;;		On exit  : 0/0
 31263 ;;		Unchanged: 0/0
 31264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31265 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31268 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31269 ;;Total ram usage:        8 bytes
 31270 ;; Hardware stack levels used:    1
 31271 ;; Hardware stack levels required when called:    8
 31272 ;; This function calls:
 31273 ;;		___fladd
 31274 ;; This function is called by:
 31275 ;;		_exp
 31276 ;; This function uses a non-reentrant model
 31277 ;;
 31278                           
 31279                           	psect	text140
 31280  0182EC                     __ptext140:
 31281                           	opt stack 0
 31282  0182EC                     ___flsub:
 31283                           	opt stack 18
 31284                           
 31285                           ; BSR set to: 0
 31286                           ;incstack = 0
 31287  0182EC  0E00               	movlw	0
 31288  0182EE  0100               	movlb	0	; () banked
 31289  0182F0  1BA3               	xorwf	___flsub@a& (0+255),f,b
 31290  0182F2  0E00               	movlw	0
 31291  0182F4  1BA4               	xorwf	(___flsub@a+1)& (0+255),f,b
 31292  0182F6  0E00               	movlw	0
 31293  0182F8  1BA5               	xorwf	(___flsub@a+2)& (0+255),f,b
 31294  0182FA  0E80               	movlw	128
 31295  0182FC  1BA6               	xorwf	(___flsub@a+3)& (0+255),f,b
 31296                           
 31297                           ; BSR set to: 0
 31298  0182FE  C09F  F08B         	movff	___flsub@b,___fladd@b
 31299  018302  C0A0  F08C         	movff	___flsub@b+1,___fladd@b+1
 31300  018306  C0A1  F08D         	movff	___flsub@b+2,___fladd@b+2
 31301  01830A  C0A2  F08E         	movff	___flsub@b+3,___fladd@b+3
 31302  01830E  C0A3  F08F         	movff	___flsub@a,___fladd@a
 31303  018312  C0A4  F090         	movff	___flsub@a+1,___fladd@a+1
 31304  018316  C0A5  F091         	movff	___flsub@a+2,___fladd@a+2
 31305  01831A  C0A6  F092         	movff	___flsub@a+3,___fladd@a+3
 31306  01831E  EC7D  F09C         	call	___fladd	;wreg free
 31307  018322  C08B  F09F         	movff	?___fladd,?___flsub
 31308  018326  C08C  F0A0         	movff	?___fladd+1,?___flsub+1
 31309  01832A  C08D  F0A1         	movff	?___fladd+2,?___flsub+2
 31310  01832E  C08E  F0A2         	movff	?___fladd+3,?___flsub+3
 31311  018332  0012               	return	
 31312  018334                     __end_of___flsub:
 31313                           	opt stack 0
 31314                           tosu	equ	0xFFF
 31315                           tosh	equ	0xFFE
 31316                           tosl	equ	0xFFD
 31317                           pclath	equ	0xFFA
 31318                           tblptru	equ	0xFF8
 31319                           tblptrh	equ	0xFF7
 31320                           tblptrl	equ	0xFF6
 31321                           tablat	equ	0xFF5
 31322                           prodh	equ	0xFF4
 31323                           prodl	equ	0xFF3
 31324                           intcon	equ	0xFF2
 31325                           indf0	equ	0xFEF
 31326                           postinc0	equ	0xFEE
 31327                           fsr0h	equ	0xFEA
 31328                           fsr0l	equ	0xFE9
 31329                           wreg	equ	0xFE8
 31330                           indf1	equ	0xFE7
 31331                           postdec1	equ	0xFE5
 31332                           fsr1h	equ	0xFE2
 31333                           fsr1l	equ	0xFE1
 31334                           indf2	equ	0xFDF
 31335                           postinc2	equ	0xFDE
 31336                           postdec2	equ	0xFDD
 31337                           plusw2	equ	0xFDB
 31338                           fsr2h	equ	0xFDA
 31339                           fsr2l	equ	0xFD9
 31340                           status	equ	0xFD8
 31341                           
 31342 ;; *************** function ___fladd *****************
 31343 ;; Defined at:
 31344 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
 31345 ;; Parameters:    Size  Location     Type
 31346 ;;  b               4   43[BANK0 ] unsigned char 
 31347 ;;  a               4   47[BANK0 ] unsigned char 
 31348 ;; Auto vars:     Size  Location     Type
 31349 ;;  grs             1   62[BANK0 ] unsigned char 
 31350 ;;  bexp            1   61[BANK0 ] unsigned char 
 31351 ;;  aexp            1   60[BANK0 ] unsigned char 
 31352 ;;  signs           1   59[BANK0 ] unsigned char 
 31353 ;; Return value:  Size  Location     Type
 31354 ;;                  4   43[BANK0 ] unsigned char 
 31355 ;; Registers used:
 31356 ;;		wreg, status,2, status,0
 31357 ;; Tracked objects:
 31358 ;;		On entry : 0/0
 31359 ;;		On exit  : 0/0
 31360 ;;		Unchanged: 0/0
 31361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31362 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31363 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31364 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31365 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31366 ;;Total ram usage:       20 bytes
 31367 ;; Hardware stack levels used:    1
 31368 ;; Hardware stack levels required when called:    7
 31369 ;; This function calls:
 31370 ;;		Nothing
 31371 ;; This function is called by:
 31372 ;;		_ADCAverage
 31373 ;;		_Move_ADC_To
 31374 ;;		___flsub
 31375 ;;		_floor
 31376 ;;		_log
 31377 ;;		_eval_poly
 31378 ;; This function uses a non-reentrant model
 31379 ;;
 31380                           
 31381                           	psect	text141
 31382  0138FA                     __ptext141:
 31383                           	opt stack 0
 31384  0138FA                     ___fladd:
 31385                           	opt stack 21
 31386                           
 31387                           ;incstack = 0
 31388  0138FA  0100               	movlb	0	; () banked
 31389  0138FC  518E               	movf	(___fladd@b+3)& (0+255),w,b
 31390  0138FE  0B80               	andlw	128
 31391  013900  6F9B               	movwf	___fladd@signs& (0+255),b
 31392  013902  518E               	movf	(___fladd@b+3)& (0+255),w,b
 31393  013904  258E               	addwf	(___fladd@b+3)& (0+255),w,b
 31394  013906  6F9D               	movwf	___fladd@bexp& (0+255),b
 31395                           
 31396                           ; BSR set to: 0
 31397  013908  BF8D               	btfsc	(___fladd@b+2)& (0+255),7,b
 31398                           
 31399                           ; BSR set to: 0
 31400  01390A  819D               	bsf	___fladd@bexp& (0+255),0,b
 31401                           
 31402                           ; BSR set to: 0
 31403                           
 31404                           ; BSR set to: 0
 31405  01390C  519D               	movf	___fladd@bexp& (0+255),w,b
 31406  01390E  B4D8               	btfsc	status,2,c
 31407  013910  D00D               	goto	l2992
 31408                           
 31409                           ; BSR set to: 0
 31410  013912  299D               	incf	___fladd@bexp& (0+255),w,b
 31411  013914  A4D8               	btfss	status,2,c
 31412  013916  D008               	goto	l2993
 31413                           
 31414                           ; BSR set to: 0
 31415  013918  0E00               	movlw	0
 31416  01391A  6F8B               	movwf	___fladd@b& (0+255),b
 31417  01391C  0E00               	movlw	0
 31418  01391E  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 31419  013920  0E00               	movlw	0
 31420  013922  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 31421  013924  0E00               	movlw	0
 31422  013926  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 31423  013928                     l2993:
 31424                           
 31425                           ; BSR set to: 0
 31426                           
 31427                           ; BSR set to: 0
 31428  013928  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 31429  01392A  D006               	goto	L20
 31430  01392C                     l2992:
 31431                           
 31432                           ; BSR set to: 0
 31433                           
 31434                           ; BSR set to: 0
 31435  01392C  0E00               	movlw	0
 31436  01392E  6F8B               	movwf	___fladd@b& (0+255),b
 31437  013930  0E00               	movlw	0
 31438  013932  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 31439  013934  0E00               	movlw	0
 31440  013936  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 31441  013938                     L20:
 31442  013938  0E00               	movlw	0
 31443  01393A  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 31444                           
 31445                           ; BSR set to: 0
 31446                           
 31447                           ; BSR set to: 0
 31448  01393C  5192               	movf	(___fladd@a+3)& (0+255),w,b
 31449  01393E  0B80               	andlw	128
 31450  013940  6F9C               	movwf	___fladd@aexp& (0+255),b
 31451                           
 31452                           ; BSR set to: 0
 31453  013942  519B               	movf	___fladd@signs& (0+255),w,b
 31454  013944  199C               	xorwf	___fladd@aexp& (0+255),w,b
 31455  013946  A4D8               	btfss	status,2,c
 31456                           
 31457                           ; BSR set to: 0
 31458  013948  8D9B               	bsf	___fladd@signs& (0+255),6,b
 31459                           
 31460                           ; BSR set to: 0
 31461                           
 31462                           ; BSR set to: 0
 31463  01394A  5192               	movf	(___fladd@a+3)& (0+255),w,b
 31464  01394C  2592               	addwf	(___fladd@a+3)& (0+255),w,b
 31465  01394E  6F9C               	movwf	___fladd@aexp& (0+255),b
 31466                           
 31467                           ; BSR set to: 0
 31468  013950  BF91               	btfsc	(___fladd@a+2)& (0+255),7,b
 31469                           
 31470                           ; BSR set to: 0
 31471  013952  819C               	bsf	___fladd@aexp& (0+255),0,b
 31472                           
 31473                           ; BSR set to: 0
 31474                           
 31475                           ; BSR set to: 0
 31476  013954  519C               	movf	___fladd@aexp& (0+255),w,b
 31477  013956  B4D8               	btfsc	status,2,c
 31478  013958  D00D               	goto	l2997
 31479                           
 31480                           ; BSR set to: 0
 31481  01395A  299C               	incf	___fladd@aexp& (0+255),w,b
 31482  01395C  A4D8               	btfss	status,2,c
 31483  01395E  D008               	goto	l2998
 31484                           
 31485                           ; BSR set to: 0
 31486  013960  0E00               	movlw	0
 31487  013962  6F8F               	movwf	___fladd@a& (0+255),b
 31488  013964  0E00               	movlw	0
 31489  013966  6F90               	movwf	(___fladd@a+1)& (0+255),b
 31490  013968  0E00               	movlw	0
 31491  01396A  6F91               	movwf	(___fladd@a+2)& (0+255),b
 31492  01396C  0E00               	movlw	0
 31493  01396E  6F92               	movwf	(___fladd@a+3)& (0+255),b
 31494  013970                     l2998:
 31495                           
 31496                           ; BSR set to: 0
 31497                           
 31498                           ; BSR set to: 0
 31499  013970  8F91               	bsf	(___fladd@a+2)& (0+255),7,b
 31500  013972  D006               	goto	L21
 31501  013974                     l2997:
 31502                           
 31503                           ; BSR set to: 0
 31504                           
 31505                           ; BSR set to: 0
 31506  013974  0E00               	movlw	0
 31507  013976  6F8F               	movwf	___fladd@a& (0+255),b
 31508  013978  0E00               	movlw	0
 31509  01397A  6F90               	movwf	(___fladd@a+1)& (0+255),b
 31510  01397C  0E00               	movlw	0
 31511  01397E  6F91               	movwf	(___fladd@a+2)& (0+255),b
 31512  013980                     L21:
 31513  013980  0E00               	movlw	0
 31514  013982  6F92               	movwf	(___fladd@a+3)& (0+255),b
 31515                           
 31516                           ; BSR set to: 0
 31517                           
 31518                           ; BSR set to: 0
 31519  013984  519D               	movf	___fladd@bexp& (0+255),w,b
 31520  013986  5D9C               	subwf	___fladd@aexp& (0+255),w,b
 31521  013988  B0D8               	btfsc	status,0,c
 31522  01398A  D022               	goto	l3000
 31523                           
 31524                           ; BSR set to: 0
 31525  01398C  AD9B               	btfss	___fladd@signs& (0+255),6,b
 31526  01398E  D002               	goto	l3001
 31527                           
 31528                           ; BSR set to: 0
 31529  013990  0E80               	movlw	128
 31530  013992  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 31531  013994                     l3001:
 31532                           
 31533                           ; BSR set to: 0
 31534                           
 31535                           ; BSR set to: 0
 31536  013994  C09D  F09E         	movff	___fladd@bexp,___fladd@grs
 31537                           
 31538                           ; BSR set to: 0
 31539  013998  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 31540                           
 31541                           ; BSR set to: 0
 31542  01399C  C09E  F09C         	movff	___fladd@grs,___fladd@aexp
 31543                           
 31544                           ; BSR set to: 0
 31545  0139A0  C08B  F09E         	movff	___fladd@b,___fladd@grs
 31546                           
 31547                           ; BSR set to: 0
 31548  0139A4  C08F  F08B         	movff	___fladd@a,___fladd@b
 31549                           
 31550                           ; BSR set to: 0
 31551  0139A8  C09E  F08F         	movff	___fladd@grs,___fladd@a
 31552                           
 31553                           ; BSR set to: 0
 31554  0139AC  C08C  F09E         	movff	___fladd@b+1,___fladd@grs
 31555                           
 31556                           ; BSR set to: 0
 31557  0139B0  C090  F08C         	movff	___fladd@a+1,___fladd@b+1
 31558                           
 31559                           ; BSR set to: 0
 31560  0139B4  C09E  F090         	movff	___fladd@grs,___fladd@a+1
 31561                           
 31562                           ; BSR set to: 0
 31563  0139B8  C08D  F09E         	movff	___fladd@b+2,___fladd@grs
 31564                           
 31565                           ; BSR set to: 0
 31566  0139BC  C091  F08D         	movff	___fladd@a+2,___fladd@b+2
 31567                           
 31568                           ; BSR set to: 0
 31569  0139C0  C09E  F091         	movff	___fladd@grs,___fladd@a+2
 31570                           
 31571                           ; BSR set to: 0
 31572  0139C4  C08E  F09E         	movff	___fladd@b+3,___fladd@grs
 31573                           
 31574                           ; BSR set to: 0
 31575  0139C8  C092  F08E         	movff	___fladd@a+3,___fladd@b+3
 31576                           
 31577                           ; BSR set to: 0
 31578  0139CC  C09E  F092         	movff	___fladd@grs,___fladd@a+3
 31579  0139D0                     l3000:
 31580                           
 31581                           ; BSR set to: 0
 31582                           
 31583                           ; BSR set to: 0
 31584  0139D0  0E00               	movlw	0
 31585  0139D2  6F9E               	movwf	___fladd@grs& (0+255),b
 31586                           
 31587                           ; BSR set to: 0
 31588  0139D4  519D               	movf	___fladd@bexp& (0+255),w,b
 31589  0139D6  6F93               	movwf	??___fladd& (0+255),b
 31590  0139D8  6B94               	clrf	(??___fladd+1)& (0+255),b
 31591  0139DA  1F93               	comf	??___fladd& (0+255),f,b
 31592  0139DC  1F94               	comf	(??___fladd+1)& (0+255),f,b
 31593  0139DE  4B93               	infsnz	??___fladd& (0+255),f,b
 31594  0139E0  2B94               	incf	(??___fladd+1)& (0+255),f,b
 31595  0139E2  519C               	movf	___fladd@aexp& (0+255),w,b
 31596  0139E4  6F95               	movwf	(??___fladd+2)& (0+255),b
 31597  0139E6  6B96               	clrf	(??___fladd+3)& (0+255),b
 31598  0139E8  5193               	movf	??___fladd& (0+255),w,b
 31599  0139EA  2795               	addwf	(??___fladd+2)& (0+255),f,b
 31600  0139EC  5194               	movf	(??___fladd+1)& (0+255),w,b
 31601  0139EE  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 31602  0139F0  BF96               	btfsc	(??___fladd+3)& (0+255),7,b
 31603  0139F2  D02C               	goto	l3004
 31604  0139F4  5196               	movf	(??___fladd+3)& (0+255),w,b
 31605  0139F6  E104               	bnz	u10800
 31606  0139F8  0E1A               	movlw	26
 31607  0139FA  5D95               	subwf	(??___fladd+2)& (0+255),w,b
 31608  0139FC  A0D8               	btfss	status,0,c
 31609  0139FE  D026               	goto	l3004
 31610  013A00                     u10800:
 31611                           
 31612                           ; BSR set to: 0
 31613  013A00  518B               	movf	___fladd@b& (0+255),w,b
 31614  013A02  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 31615  013A04  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 31616  013A06  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 31617  013A08  B4D8               	btfsc	status,2,c
 31618  013A0A  D002               	goto	u10810
 31619  013A0C  0E01               	movlw	1
 31620  013A0E  D001               	goto	u10820
 31621  013A10                     u10810:
 31622  013A10  0E00               	movlw	0
 31623  013A12                     u10820:
 31624  013A12  6F9E               	movwf	___fladd@grs& (0+255),b
 31625                           
 31626                           ; BSR set to: 0
 31627  013A14  0E00               	movlw	0
 31628  013A16  6F8B               	movwf	___fladd@b& (0+255),b
 31629  013A18  0E00               	movlw	0
 31630  013A1A  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 31631  013A1C  0E00               	movlw	0
 31632  013A1E  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 31633  013A20  0E00               	movlw	0
 31634  013A22  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 31635                           
 31636                           ; BSR set to: 0
 31637  013A24  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 31638  013A28  D015               	goto	u10850
 31639  013A2A                     l3005:
 31640                           
 31641                           ; BSR set to: 0
 31642  013A2A  A19E               	btfss	___fladd@grs& (0+255),0,b
 31643  013A2C  D005               	goto	l3006
 31644                           
 31645                           ; BSR set to: 0
 31646  013A2E  90D8               	bcf	status,0,c
 31647  013A30  319E               	rrcf	___fladd@grs& (0+255),w,b
 31648  013A32  0901               	iorlw	1
 31649  013A34  6F9E               	movwf	___fladd@grs& (0+255),b
 31650  013A36  D002               	goto	l3007
 31651  013A38                     l3006:
 31652                           
 31653                           ; BSR set to: 0
 31654                           
 31655                           ; BSR set to: 0
 31656  013A38  90D8               	bcf	status,0,c
 31657  013A3A  339E               	rrcf	___fladd@grs& (0+255),f,b
 31658  013A3C                     l3007:
 31659                           
 31660                           ; BSR set to: 0
 31661                           
 31662                           ; BSR set to: 0
 31663  013A3C  B18B               	btfsc	___fladd@b& (0+255),0,b
 31664                           
 31665                           ; BSR set to: 0
 31666  013A3E  8F9E               	bsf	___fladd@grs& (0+255),7,b
 31667                           
 31668                           ; BSR set to: 0
 31669                           
 31670                           ; BSR set to: 0
 31671  013A40  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 31672  013A42  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 31673  013A44  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 31674  013A46  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 31675  013A48  338B               	rrcf	___fladd@b& (0+255),f,b
 31676                           
 31677                           ; BSR set to: 0
 31678  013A4A  2B9D               	incf	___fladd@bexp& (0+255),f,b
 31679  013A4C                     l3004:
 31680                           
 31681                           ; BSR set to: 0
 31682  013A4C  519C               	movf	___fladd@aexp& (0+255),w,b
 31683  013A4E  5D9D               	subwf	___fladd@bexp& (0+255),w,b
 31684  013A50  A0D8               	btfss	status,0,c
 31685  013A52  D7EB               	goto	l3005
 31686  013A54                     u10850:
 31687                           
 31688                           ; BSR set to: 0
 31689                           
 31690                           ; BSR set to: 0
 31691  013A54  BD9B               	btfsc	___fladd@signs& (0+255),6,b
 31692  013A56  D029               	goto	l3010
 31693                           
 31694                           ; BSR set to: 0
 31695  013A58  519D               	movf	___fladd@bexp& (0+255),w,b
 31696  013A5A  A4D8               	btfss	status,2,c
 31697  013A5C  D009               	goto	l3011
 31698                           
 31699                           ; BSR set to: 0
 31700  013A5E  0E00               	movlw	0
 31701  013A60  6F8B               	movwf	?___fladd& (0+255),b
 31702  013A62  0E00               	movlw	0
 31703  013A64  6F8C               	movwf	(?___fladd+1)& (0+255),b
 31704  013A66  0E00               	movlw	0
 31705  013A68  6F8D               	movwf	(?___fladd+2)& (0+255),b
 31706  013A6A  0E00               	movlw	0
 31707  013A6C  6F8E               	movwf	(?___fladd+3)& (0+255),b
 31708                           
 31709                           ; BSR set to: 0
 31710  013A6E  0012               	return	
 31711  013A70                     l3011:
 31712                           
 31713                           ; BSR set to: 0
 31714                           
 31715                           ; BSR set to: 0
 31716  013A70  518F               	movf	___fladd@a& (0+255),w,b
 31717  013A72  278B               	addwf	___fladd@b& (0+255),f,b
 31718  013A74  5190               	movf	(___fladd@a+1)& (0+255),w,b
 31719  013A76  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 31720  013A78  5191               	movf	(___fladd@a+2)& (0+255),w,b
 31721  013A7A  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 31722  013A7C  5192               	movf	(___fladd@a+3)& (0+255),w,b
 31723  013A7E  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 31724                           
 31725                           ; BSR set to: 0
 31726  013A80  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 31727  013A82  D083               	goto	u10980
 31728                           
 31729                           ; BSR set to: 0
 31730  013A84  A19E               	btfss	___fladd@grs& (0+255),0,b
 31731  013A86  D006               	goto	l3014
 31732                           
 31733                           ; BSR set to: 0
 31734  013A88  90D8               	bcf	status,0,c
 31735  013A8A  339E               	rrcf	___fladd@grs& (0+255),f,b
 31736  013A8C  519E               	movf	___fladd@grs& (0+255),w,b
 31737  013A8E  0901               	iorlw	1
 31738  013A90  6F9E               	movwf	___fladd@grs& (0+255),b
 31739  013A92  D002               	goto	l3015
 31740  013A94                     l3014:
 31741                           
 31742                           ; BSR set to: 0
 31743                           
 31744                           ; BSR set to: 0
 31745  013A94  90D8               	bcf	status,0,c
 31746  013A96  339E               	rrcf	___fladd@grs& (0+255),f,b
 31747  013A98                     l3015:
 31748                           
 31749                           ; BSR set to: 0
 31750                           
 31751                           ; BSR set to: 0
 31752  013A98  B18B               	btfsc	___fladd@b& (0+255),0,b
 31753                           
 31754                           ; BSR set to: 0
 31755  013A9A  8F9E               	bsf	___fladd@grs& (0+255),7,b
 31756                           
 31757                           ; BSR set to: 0
 31758                           
 31759                           ; BSR set to: 0
 31760  013A9C  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 31761  013A9E  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 31762  013AA0  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 31763  013AA2  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 31764  013AA4  338B               	rrcf	___fladd@b& (0+255),f,b
 31765                           
 31766                           ; BSR set to: 0
 31767  013AA6  2B9D               	incf	___fladd@bexp& (0+255),f,b
 31768                           
 31769                           ; BSR set to: 0
 31770  013AA8  D070               	goto	u10980
 31771  013AAA                     l3010:
 31772                           
 31773                           ; BSR set to: 0
 31774                           
 31775                           ; BSR set to: 0
 31776  013AAA  518F               	movf	___fladd@a& (0+255),w,b
 31777  013AAC  5D8B               	subwf	___fladd@b& (0+255),w,b
 31778  013AAE  5190               	movf	(___fladd@a+1)& (0+255),w,b
 31779  013AB0  598C               	subwfb	(___fladd@b+1)& (0+255),w,b
 31780  013AB2  5191               	movf	(___fladd@a+2)& (0+255),w,b
 31781  013AB4  598D               	subwfb	(___fladd@b+2)& (0+255),w,b
 31782  013AB6  518E               	movf	(___fladd@b+3)& (0+255),w,b
 31783  013AB8  0A80               	xorlw	128
 31784  013ABA  6F93               	movwf	??___fladd& (0+255),b
 31785  013ABC  5192               	movf	(___fladd@a+3)& (0+255),w,b
 31786  013ABE  0A80               	xorlw	128
 31787  013AC0  5993               	subwfb	??___fladd& (0+255),w,b
 31788  013AC2  B0D8               	btfsc	status,0,c
 31789  013AC4  D036               	goto	l3018
 31790                           
 31791                           ; BSR set to: 0
 31792  013AC6  C08B  F093         	movff	___fladd@b,??___fladd
 31793  013ACA  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 31794  013ACE  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 31795  013AD2  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 31796  013AD6  1F93               	comf	??___fladd& (0+255),f,b
 31797  013AD8  1F94               	comf	(??___fladd+1)& (0+255),f,b
 31798  013ADA  1F95               	comf	(??___fladd+2)& (0+255),f,b
 31799  013ADC  1F96               	comf	(??___fladd+3)& (0+255),f,b
 31800  013ADE  2B93               	incf	??___fladd& (0+255),f,b
 31801  013AE0  0E00               	movlw	0
 31802  013AE2  2394               	addwfc	(??___fladd+1)& (0+255),f,b
 31803  013AE4  2395               	addwfc	(??___fladd+2)& (0+255),f,b
 31804  013AE6  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 31805  013AE8  518F               	movf	___fladd@a& (0+255),w,b
 31806  013AEA  2593               	addwf	??___fladd& (0+255),w,b
 31807  013AEC  6F97               	movwf	(??___fladd+4)& (0+255),b
 31808  013AEE  5190               	movf	(___fladd@a+1)& (0+255),w,b
 31809  013AF0  2194               	addwfc	(??___fladd+1)& (0+255),w,b
 31810  013AF2  6F98               	movwf	(??___fladd+5)& (0+255),b
 31811  013AF4  5191               	movf	(___fladd@a+2)& (0+255),w,b
 31812  013AF6  2195               	addwfc	(??___fladd+2)& (0+255),w,b
 31813  013AF8  6F99               	movwf	(??___fladd+6)& (0+255),b
 31814  013AFA  5192               	movf	(___fladd@a+3)& (0+255),w,b
 31815  013AFC  2196               	addwfc	(??___fladd+3)& (0+255),w,b
 31816  013AFE  6F9A               	movwf	(??___fladd+7)& (0+255),b
 31817  013B00  0EFF               	movlw	255
 31818  013B02  2597               	addwf	(??___fladd+4)& (0+255),w,b
 31819  013B04  6F8B               	movwf	___fladd@b& (0+255),b
 31820  013B06  0EFF               	movlw	255
 31821  013B08  2198               	addwfc	(??___fladd+5)& (0+255),w,b
 31822  013B0A  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 31823  013B0C  0EFF               	movlw	255
 31824  013B0E  2199               	addwfc	(??___fladd+6)& (0+255),w,b
 31825  013B10  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 31826  013B12  0EFF               	movlw	255
 31827  013B14  219A               	addwfc	(??___fladd+7)& (0+255),w,b
 31828  013B16  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 31829  013B18  0E80               	movlw	128
 31830  013B1A  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 31831                           
 31832                           ; BSR set to: 0
 31833  013B1C  6D9E               	negf	___fladd@grs& (0+255),b
 31834                           
 31835                           ; BSR set to: 0
 31836  013B1E  519E               	movf	___fladd@grs& (0+255),w,b
 31837  013B20  A4D8               	btfss	status,2,c
 31838  013B22  D00F               	goto	l3020
 31839                           
 31840                           ; BSR set to: 0
 31841  013B24  0E01               	movlw	1
 31842  013B26  278B               	addwf	___fladd@b& (0+255),f,b
 31843  013B28  0E00               	movlw	0
 31844  013B2A  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 31845  013B2C  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 31846  013B2E  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 31847                           
 31848                           ; BSR set to: 0
 31849  013B30  D008               	goto	l3020
 31850  013B32                     l3018:
 31851                           
 31852                           ; BSR set to: 0
 31853                           
 31854                           ; BSR set to: 0
 31855  013B32  518F               	movf	___fladd@a& (0+255),w,b
 31856  013B34  5F8B               	subwf	___fladd@b& (0+255),f,b
 31857  013B36  5190               	movf	(___fladd@a+1)& (0+255),w,b
 31858  013B38  5B8C               	subwfb	(___fladd@b+1)& (0+255),f,b
 31859  013B3A  5191               	movf	(___fladd@a+2)& (0+255),w,b
 31860  013B3C  5B8D               	subwfb	(___fladd@b+2)& (0+255),f,b
 31861  013B3E  5192               	movf	(___fladd@a+3)& (0+255),w,b
 31862  013B40  5B8E               	subwfb	(___fladd@b+3)& (0+255),f,b
 31863  013B42                     l3020:
 31864                           
 31865                           ; BSR set to: 0
 31866  013B42  518B               	movf	___fladd@b& (0+255),w,b
 31867  013B44  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 31868  013B46  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 31869  013B48  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 31870  013B4A  A4D8               	btfss	status,2,c
 31871  013B4C  D01C               	goto	l3027
 31872                           
 31873                           ; BSR set to: 0
 31874  013B4E  519E               	movf	___fladd@grs& (0+255),w,b
 31875  013B50  A4D8               	btfss	status,2,c
 31876  013B52  D019               	goto	l3027
 31877                           
 31878                           ; BSR set to: 0
 31879  013B54  0E00               	movlw	0
 31880  013B56  6F8B               	movwf	?___fladd& (0+255),b
 31881  013B58  0E00               	movlw	0
 31882  013B5A  6F8C               	movwf	(?___fladd+1)& (0+255),b
 31883  013B5C  0E00               	movlw	0
 31884  013B5E  6F8D               	movwf	(?___fladd+2)& (0+255),b
 31885  013B60  0E00               	movlw	0
 31886  013B62  6F8E               	movwf	(?___fladd+3)& (0+255),b
 31887                           
 31888                           ; BSR set to: 0
 31889  013B64  0012               	return	
 31890  013B66                     
 31891                           ; BSR set to: 0
 31892                           
 31893                           ; BSR set to: 0
 31894  013B66  90D8               	bcf	status,0,c
 31895  013B68  378B               	rlcf	___fladd@b& (0+255),f,b
 31896  013B6A  378C               	rlcf	(___fladd@b+1)& (0+255),f,b
 31897  013B6C  378D               	rlcf	(___fladd@b+2)& (0+255),f,b
 31898  013B6E  378E               	rlcf	(___fladd@b+3)& (0+255),f,b
 31899                           
 31900                           ; BSR set to: 0
 31901  013B70  BF9E               	btfsc	___fladd@grs& (0+255),7,b
 31902                           
 31903                           ; BSR set to: 0
 31904  013B72  818B               	bsf	___fladd@b& (0+255),0,b
 31905                           
 31906                           ; BSR set to: 0
 31907                           
 31908                           ; BSR set to: 0
 31909  013B74  A19E               	btfss	___fladd@grs& (0+255),0,b
 31910  013B76  D002               	goto	l3025
 31911                           
 31912                           ; BSR set to: 0
 31913  013B78  80D8               	bsf	status,0,c
 31914  013B7A  D001               	goto	L22
 31915  013B7C                     l3025:
 31916                           
 31917                           ; BSR set to: 0
 31918                           
 31919                           ; BSR set to: 0
 31920  013B7C  90D8               	bcf	status,0,c
 31921  013B7E                     L22:
 31922  013B7E  379E               	rlcf	___fladd@grs& (0+255),f,b
 31923                           
 31924                           ; BSR set to: 0
 31925                           
 31926                           ; BSR set to: 0
 31927  013B80  519D               	movf	___fladd@bexp& (0+255),w,b
 31928  013B82  A4D8               	btfss	status,2,c
 31929                           
 31930                           ; BSR set to: 0
 31931  013B84  079D               	decf	___fladd@bexp& (0+255),f,b
 31932  013B86                     l3027:
 31933                           
 31934                           ; BSR set to: 0
 31935                           
 31936                           ; BSR set to: 0
 31937                           
 31938                           ; BSR set to: 0
 31939  013B86  AF8D               	btfss	(___fladd@b+2)& (0+255),7,b
 31940  013B88  D7EE               	goto	l3023
 31941  013B8A                     u10980:
 31942                           
 31943                           ; BSR set to: 0
 31944                           
 31945                           ; BSR set to: 0
 31946                           
 31947                           ; BSR set to: 0
 31948  013B8A  0E00               	movlw	0
 31949  013B8C  6F9C               	movwf	___fladd@aexp& (0+255),b
 31950                           
 31951                           ; BSR set to: 0
 31952  013B8E  AF9E               	btfss	___fladd@grs& (0+255),7,b
 31953  013B90  D00A               	goto	l3032
 31954                           
 31955                           ; BSR set to: 0
 31956  013B92  C09E  F093         	movff	___fladd@grs,??___fladd
 31957  013B96  0E7F               	movlw	127
 31958  013B98  1793               	andwf	??___fladd& (0+255),f,b
 31959  013B9A  A4D8               	btfss	status,2,c
 31960  013B9C  D002               	goto	u11010
 31961                           
 31962                           ; BSR set to: 0
 31963                           
 31964                           ; BSR set to: 0
 31965  013B9E  A18B               	btfss	___fladd@b& (0+255),0,b
 31966  013BA0  D002               	goto	l3032
 31967  013BA2                     u11010:
 31968                           
 31969                           ; BSR set to: 0
 31970  013BA2  0E01               	movlw	1
 31971  013BA4  6F9C               	movwf	___fladd@aexp& (0+255),b
 31972  013BA6                     l3032:
 31973                           
 31974                           ; BSR set to: 0
 31975                           
 31976                           ; BSR set to: 0
 31977                           
 31978                           ; BSR set to: 0
 31979  013BA6  519C               	movf	___fladd@aexp& (0+255),w,b
 31980  013BA8  B4D8               	btfsc	status,2,c
 31981  013BAA  D020               	goto	l3035
 31982                           
 31983                           ; BSR set to: 0
 31984  013BAC  0E01               	movlw	1
 31985  013BAE  278B               	addwf	___fladd@b& (0+255),f,b
 31986  013BB0  0E00               	movlw	0
 31987  013BB2  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 31988  013BB4  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 31989  013BB6  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 31990                           
 31991                           ; BSR set to: 0
 31992  013BB8  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 31993  013BBA  D018               	goto	l3035
 31994                           
 31995                           ; BSR set to: 0
 31996  013BBC  C08B  F093         	movff	___fladd@b,??___fladd
 31997  013BC0  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 31998  013BC4  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 31999  013BC8  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 32000  013BCC  3596               	rlcf	(??___fladd+3)& (0+255),w,b
 32001  013BCE  3396               	rrcf	(??___fladd+3)& (0+255),f,b
 32002  013BD0  3395               	rrcf	(??___fladd+2)& (0+255),f,b
 32003  013BD2  3394               	rrcf	(??___fladd+1)& (0+255),f,b
 32004  013BD4  3393               	rrcf	??___fladd& (0+255),f,b
 32005  013BD6  C093  F08B         	movff	??___fladd,___fladd@b
 32006  013BDA  C094  F08C         	movff	??___fladd+1,___fladd@b+1
 32007  013BDE  C095  F08D         	movff	??___fladd+2,___fladd@b+2
 32008  013BE2  C096  F08E         	movff	??___fladd+3,___fladd@b+3
 32009  013BE6  299D               	incf	___fladd@bexp& (0+255),w,b
 32010  013BE8  A4D8               	btfss	status,2,c
 32011                           
 32012                           ; BSR set to: 0
 32013  013BEA  2B9D               	incf	___fladd@bexp& (0+255),f,b
 32014  013BEC                     l3035:
 32015                           
 32016                           ; BSR set to: 0
 32017                           
 32018                           ; BSR set to: 0
 32019                           
 32020                           ; BSR set to: 0
 32021                           
 32022                           ; BSR set to: 0
 32023  013BEC  299D               	incf	___fladd@bexp& (0+255),w,b
 32024  013BEE  B4D8               	btfsc	status,2,c
 32025  013BF0  D003               	goto	u11060
 32026                           
 32027                           ; BSR set to: 0
 32028  013BF2  519D               	movf	___fladd@bexp& (0+255),w,b
 32029  013BF4  A4D8               	btfss	status,2,c
 32030  013BF6  D00D               	goto	l3039
 32031  013BF8                     u11060:
 32032                           
 32033                           ; BSR set to: 0
 32034                           
 32035                           ; BSR set to: 0
 32036  013BF8  0E00               	movlw	0
 32037  013BFA  6F8B               	movwf	___fladd@b& (0+255),b
 32038  013BFC  0E00               	movlw	0
 32039  013BFE  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 32040  013C00  0E00               	movlw	0
 32041  013C02  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 32042  013C04  0E00               	movlw	0
 32043  013C06  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 32044  013C08  519D               	movf	___fladd@bexp& (0+255),w,b
 32045  013C0A  A4D8               	btfss	status,2,c
 32046  013C0C  D002               	goto	l3039
 32047                           
 32048                           ; BSR set to: 0
 32049  013C0E  0E00               	movlw	0
 32050  013C10  6F9B               	movwf	___fladd@signs& (0+255),b
 32051  013C12                     l3039:
 32052                           
 32053                           ; BSR set to: 0
 32054                           
 32055                           ; BSR set to: 0
 32056                           
 32057                           ; BSR set to: 0
 32058  013C12  A19D               	btfss	___fladd@bexp& (0+255),0,b
 32059  013C14  D002               	goto	l3040
 32060                           
 32061                           ; BSR set to: 0
 32062  013C16  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 32063  013C18  D001               	goto	l3041
 32064  013C1A                     l3040:
 32065                           
 32066                           ; BSR set to: 0
 32067                           
 32068                           ; BSR set to: 0
 32069  013C1A  9F8D               	bcf	(___fladd@b+2)& (0+255),7,b
 32070  013C1C                     l3041:
 32071                           
 32072                           ; BSR set to: 0
 32073                           
 32074                           ; BSR set to: 0
 32075  013C1C  90D8               	bcf	status,0,c
 32076  013C1E  319D               	rrcf	___fladd@bexp& (0+255),w,b
 32077  013C20  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 32078                           
 32079                           ; BSR set to: 0
 32080  013C22  BF9B               	btfsc	___fladd@signs& (0+255),7,b
 32081                           
 32082                           ; BSR set to: 0
 32083  013C24  8F8E               	bsf	(___fladd@b+3)& (0+255),7,b
 32084                           
 32085                           ; BSR set to: 0
 32086                           
 32087                           ; BSR set to: 0
 32088  013C26  C08B  F08B         	movff	___fladd@b,?___fladd
 32089  013C2A  C08C  F08C         	movff	___fladd@b+1,?___fladd+1
 32090  013C2E  C08D  F08D         	movff	___fladd@b+2,?___fladd+2
 32091  013C32  C08E  F08E         	movff	___fladd@b+3,?___fladd+3
 32092  013C36  0012               	return	
 32093  013C38                     __end_of___fladd:
 32094                           	opt stack 0
 32095                           tosu	equ	0xFFF
 32096                           tosh	equ	0xFFE
 32097                           tosl	equ	0xFFD
 32098                           pclath	equ	0xFFA
 32099                           tblptru	equ	0xFF8
 32100                           tblptrh	equ	0xFF7
 32101                           tblptrl	equ	0xFF6
 32102                           tablat	equ	0xFF5
 32103                           prodh	equ	0xFF4
 32104                           prodl	equ	0xFF3
 32105                           intcon	equ	0xFF2
 32106                           indf0	equ	0xFEF
 32107                           postinc0	equ	0xFEE
 32108                           fsr0h	equ	0xFEA
 32109                           fsr0l	equ	0xFE9
 32110                           wreg	equ	0xFE8
 32111                           indf1	equ	0xFE7
 32112                           postdec1	equ	0xFE5
 32113                           fsr1h	equ	0xFE2
 32114                           fsr1l	equ	0xFE1
 32115                           indf2	equ	0xFDF
 32116                           postinc2	equ	0xFDE
 32117                           postdec2	equ	0xFDD
 32118                           plusw2	equ	0xFDB
 32119                           fsr2h	equ	0xFDA
 32120                           fsr2l	equ	0xFD9
 32121                           status	equ	0xFD8
 32122                           
 32123 ;; *************** function ___flneg *****************
 32124 ;; Defined at:
 32125 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flneg.c"
 32126 ;; Parameters:    Size  Location     Type
 32127 ;;  f1              4   39[BANK0 ] unsigned char 
 32128 ;; Auto vars:     Size  Location     Type
 32129 ;;		None
 32130 ;; Return value:  Size  Location     Type
 32131 ;;                  4   39[BANK0 ] unsigned char 
 32132 ;; Registers used:
 32133 ;;		wreg, status,2, status,0
 32134 ;; Tracked objects:
 32135 ;;		On entry : 0/0
 32136 ;;		On exit  : 0/0
 32137 ;;		Unchanged: 0/0
 32138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32139 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32142 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32143 ;;Total ram usage:        4 bytes
 32144 ;; Hardware stack levels used:    1
 32145 ;; Hardware stack levels required when called:    7
 32146 ;; This function calls:
 32147 ;;		Nothing
 32148 ;; This function is called by:
 32149 ;;		_ADCAverage
 32150 ;;		_pow
 32151 ;;		_exp
 32152 ;; This function uses a non-reentrant model
 32153 ;;
 32154                           
 32155                           	psect	text142
 32156  018784                     __ptext142:
 32157                           	opt stack 0
 32158  018784                     ___flneg:
 32159                           	opt stack 19
 32160                           
 32161                           ; BSR set to: 0
 32162                           ;incstack = 0
 32163  018784  0100               	movlb	0	; () banked
 32164  018786  5187               	movf	___flneg@f1& (0+255),w,b
 32165  018788  1188               	iorwf	(___flneg@f1+1)& (0+255),w,b
 32166  01878A  1189               	iorwf	(___flneg@f1+2)& (0+255),w,b
 32167  01878C  118A               	iorwf	(___flneg@f1+3)& (0+255),w,b
 32168  01878E  B4D8               	btfsc	status,2,c
 32169  018790  D008               	goto	l2755
 32170                           
 32171                           ; BSR set to: 0
 32172  018792  0E00               	movlw	0
 32173  018794  1B87               	xorwf	___flneg@f1& (0+255),f,b
 32174  018796  0E00               	movlw	0
 32175  018798  1B88               	xorwf	(___flneg@f1+1)& (0+255),f,b
 32176  01879A  0E00               	movlw	0
 32177  01879C  1B89               	xorwf	(___flneg@f1+2)& (0+255),f,b
 32178  01879E  0E80               	movlw	128
 32179  0187A0  1B8A               	xorwf	(___flneg@f1+3)& (0+255),f,b
 32180  0187A2                     l2755:
 32181                           
 32182                           ; BSR set to: 0
 32183                           
 32184                           ; BSR set to: 0
 32185  0187A2  C087  F087         	movff	___flneg@f1,?___flneg
 32186  0187A6  C088  F088         	movff	___flneg@f1+1,?___flneg+1
 32187  0187AA  C089  F089         	movff	___flneg@f1+2,?___flneg+2
 32188  0187AE  C08A  F08A         	movff	___flneg@f1+3,?___flneg+3
 32189  0187B2  0012               	return	
 32190  0187B4                     __end_of___flneg:
 32191                           	opt stack 0
 32192                           tosu	equ	0xFFF
 32193                           tosh	equ	0xFFE
 32194                           tosl	equ	0xFFD
 32195                           pclath	equ	0xFFA
 32196                           tblptru	equ	0xFF8
 32197                           tblptrh	equ	0xFF7
 32198                           tblptrl	equ	0xFF6
 32199                           tablat	equ	0xFF5
 32200                           prodh	equ	0xFF4
 32201                           prodl	equ	0xFF3
 32202                           intcon	equ	0xFF2
 32203                           indf0	equ	0xFEF
 32204                           postinc0	equ	0xFEE
 32205                           fsr0h	equ	0xFEA
 32206                           fsr0l	equ	0xFE9
 32207                           wreg	equ	0xFE8
 32208                           indf1	equ	0xFE7
 32209                           postdec1	equ	0xFE5
 32210                           fsr1h	equ	0xFE2
 32211                           fsr1l	equ	0xFE1
 32212                           indf2	equ	0xFDF
 32213                           postinc2	equ	0xFDE
 32214                           postdec2	equ	0xFDD
 32215                           plusw2	equ	0xFDB
 32216                           fsr2h	equ	0xFDA
 32217                           fsr2l	equ	0xFD9
 32218                           status	equ	0xFD8
 32219                           
 32220 ;; *************** function ___fldiv *****************
 32221 ;; Defined at:
 32222 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcdiv.c"
 32223 ;; Parameters:    Size  Location     Type
 32224 ;;  b               4    0[BANK0 ] unsigned char 
 32225 ;;  a               4    4[BANK0 ] unsigned char 
 32226 ;; Auto vars:     Size  Location     Type
 32227 ;;  grs             4   19[BANK0 ] unsigned long 
 32228 ;;  rem             4   13[BANK0 ] unsigned long 
 32229 ;;  new_exp         2   17[BANK0 ] int 
 32230 ;;  aexp            1   24[BANK0 ] unsigned char 
 32231 ;;  bexp            1   23[BANK0 ] unsigned char 
 32232 ;;  sign            1   12[BANK0 ] unsigned char 
 32233 ;; Return value:  Size  Location     Type
 32234 ;;                  4    0[BANK0 ] unsigned char 
 32235 ;; Registers used:
 32236 ;;		wreg, status,2, status,0
 32237 ;; Tracked objects:
 32238 ;;		On entry : 0/0
 32239 ;;		On exit  : 0/0
 32240 ;;		Unchanged: 0/0
 32241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32242 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32243 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32244 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32245 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32246 ;;Total ram usage:       25 bytes
 32247 ;; Hardware stack levels used:    1
 32248 ;; Hardware stack levels required when called:    7
 32249 ;; This function calls:
 32250 ;;		Nothing
 32251 ;; This function is called by:
 32252 ;;		_exp
 32253 ;;		_ADC_Voltage
 32254 ;; This function uses a non-reentrant model
 32255 ;;
 32256                           
 32257                           	psect	text143
 32258  013F28                     __ptext143:
 32259                           	opt stack 0
 32260  013F28                     ___fldiv:
 32261                           	opt stack 19
 32262                           
 32263                           ; BSR set to: 0
 32264                           ;incstack = 0
 32265  013F28  0100               	movlb	0	; () banked
 32266  013F2A  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 32267  013F2C  0B80               	andlw	128
 32268  013F2E  6F6C               	movwf	___fldiv@sign& (0+255),b
 32269  013F30  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 32270  013F32  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 32271  013F34  6F77               	movwf	___fldiv@bexp& (0+255),b
 32272                           
 32273                           ; BSR set to: 0
 32274  013F36  BF62               	btfsc	(___fldiv@b+2)& (0+255),7,b
 32275                           
 32276                           ; BSR set to: 0
 32277  013F38  8177               	bsf	___fldiv@bexp& (0+255),0,b
 32278                           
 32279                           ; BSR set to: 0
 32280                           
 32281                           ; BSR set to: 0
 32282  013F3A  5177               	movf	___fldiv@bexp& (0+255),w,b
 32283  013F3C  B4D8               	btfsc	status,2,c
 32284  013F3E  D00D               	goto	l3049
 32285                           
 32286                           ; BSR set to: 0
 32287  013F40  2977               	incf	___fldiv@bexp& (0+255),w,b
 32288  013F42  A4D8               	btfss	status,2,c
 32289  013F44  D008               	goto	l3050
 32290                           
 32291                           ; BSR set to: 0
 32292  013F46  0E00               	movlw	0
 32293  013F48  6F60               	movwf	___fldiv@b& (0+255),b
 32294  013F4A  0E00               	movlw	0
 32295  013F4C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32296  013F4E  0E00               	movlw	0
 32297  013F50  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32298  013F52  0E00               	movlw	0
 32299  013F54  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32300  013F56                     l3050:
 32301                           
 32302                           ; BSR set to: 0
 32303                           
 32304                           ; BSR set to: 0
 32305  013F56  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 32306  013F58  D006               	goto	L23
 32307  013F5A                     l3049:
 32308                           
 32309                           ; BSR set to: 0
 32310                           
 32311                           ; BSR set to: 0
 32312  013F5A  0E00               	movlw	0
 32313  013F5C  6F60               	movwf	___fldiv@b& (0+255),b
 32314  013F5E  0E00               	movlw	0
 32315  013F60  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32316  013F62  0E00               	movlw	0
 32317  013F64  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32318  013F66                     L23:
 32319  013F66  0E00               	movlw	0
 32320  013F68  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32321                           
 32322                           ; BSR set to: 0
 32323                           
 32324                           ; BSR set to: 0
 32325  013F6A  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 32326  013F6C  0B80               	andlw	128
 32327  013F6E  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 32328                           
 32329                           ; BSR set to: 0
 32330  013F70  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 32331  013F72  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 32332  013F74  6F78               	movwf	___fldiv@aexp& (0+255),b
 32333                           
 32334                           ; BSR set to: 0
 32335  013F76  BF66               	btfsc	(___fldiv@a+2)& (0+255),7,b
 32336                           
 32337                           ; BSR set to: 0
 32338  013F78  8178               	bsf	___fldiv@aexp& (0+255),0,b
 32339                           
 32340                           ; BSR set to: 0
 32341                           
 32342                           ; BSR set to: 0
 32343  013F7A  5178               	movf	___fldiv@aexp& (0+255),w,b
 32344  013F7C  B4D8               	btfsc	status,2,c
 32345  013F7E  D00D               	goto	l3053
 32346                           
 32347                           ; BSR set to: 0
 32348  013F80  2978               	incf	___fldiv@aexp& (0+255),w,b
 32349  013F82  A4D8               	btfss	status,2,c
 32350  013F84  D008               	goto	l3054
 32351                           
 32352                           ; BSR set to: 0
 32353  013F86  0E00               	movlw	0
 32354  013F88  6F64               	movwf	___fldiv@a& (0+255),b
 32355  013F8A  0E00               	movlw	0
 32356  013F8C  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 32357  013F8E  0E00               	movlw	0
 32358  013F90  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 32359  013F92  0E00               	movlw	0
 32360  013F94  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 32361  013F96                     l3054:
 32362                           
 32363                           ; BSR set to: 0
 32364                           
 32365                           ; BSR set to: 0
 32366  013F96  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 32367  013F98  D006               	goto	L24
 32368  013F9A                     l3053:
 32369                           
 32370                           ; BSR set to: 0
 32371                           
 32372                           ; BSR set to: 0
 32373  013F9A  0E00               	movlw	0
 32374  013F9C  6F64               	movwf	___fldiv@a& (0+255),b
 32375  013F9E  0E00               	movlw	0
 32376  013FA0  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 32377  013FA2  0E00               	movlw	0
 32378  013FA4  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 32379  013FA6                     L24:
 32380  013FA6  0E00               	movlw	0
 32381  013FA8  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 32382                           
 32383                           ; BSR set to: 0
 32384                           
 32385                           ; BSR set to: 0
 32386  013FAA  5164               	movf	___fldiv@a& (0+255),w,b
 32387  013FAC  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 32388  013FAE  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 32389  013FB0  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 32390  013FB2  A4D8               	btfss	status,2,c
 32391  013FB4  D015               	goto	l3056
 32392                           
 32393                           ; BSR set to: 0
 32394  013FB6  0E00               	movlw	0
 32395  013FB8  6F60               	movwf	___fldiv@b& (0+255),b
 32396  013FBA  0E00               	movlw	0
 32397  013FBC  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32398  013FBE  0E00               	movlw	0
 32399  013FC0  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32400  013FC2  0E00               	movlw	0
 32401  013FC4  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32402                           
 32403                           ; BSR set to: 0
 32404  013FC6  0E80               	movlw	128
 32405  013FC8  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 32406  013FCA  0E7F               	movlw	127
 32407  013FCC  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 32408                           
 32409                           ; BSR set to: 0
 32410  013FCE  C060  F060         	movff	___fldiv@b,?___fldiv
 32411  013FD2  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 32412  013FD6  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 32413  013FDA  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 32414                           
 32415                           ; BSR set to: 0
 32416  013FDE  0012               	return	
 32417  013FE0                     l3056:
 32418                           
 32419                           ; BSR set to: 0
 32420                           
 32421                           ; BSR set to: 0
 32422  013FE0  5177               	movf	___fldiv@bexp& (0+255),w,b
 32423  013FE2  A4D8               	btfss	status,2,c
 32424  013FE4  D011               	goto	l3058
 32425                           
 32426                           ; BSR set to: 0
 32427  013FE6  0E00               	movlw	0
 32428  013FE8  6F60               	movwf	___fldiv@b& (0+255),b
 32429  013FEA  0E00               	movlw	0
 32430  013FEC  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32431  013FEE  0E00               	movlw	0
 32432  013FF0  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32433  013FF2  0E00               	movlw	0
 32434  013FF4  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32435                           
 32436                           ; BSR set to: 0
 32437  013FF6  C060  F060         	movff	___fldiv@b,?___fldiv
 32438  013FFA  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 32439  013FFE  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 32440  014002  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 32441                           
 32442                           ; BSR set to: 0
 32443  014006  0012               	return	
 32444  014008                     l3058:
 32445                           
 32446                           ; BSR set to: 0
 32447                           
 32448                           ; BSR set to: 0
 32449  014008  5178               	movf	___fldiv@aexp& (0+255),w,b
 32450  01400A  6F68               	movwf	??___fldiv& (0+255),b
 32451  01400C  6B69               	clrf	(??___fldiv+1)& (0+255),b
 32452  01400E  1F68               	comf	??___fldiv& (0+255),f,b
 32453  014010  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 32454  014012  4B68               	infsnz	??___fldiv& (0+255),f,b
 32455  014014  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 32456  014016  5177               	movf	___fldiv@bexp& (0+255),w,b
 32457  014018  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 32458  01401A  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 32459  01401C  5168               	movf	??___fldiv& (0+255),w,b
 32460  01401E  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 32461  014020  5169               	movf	(??___fldiv+1)& (0+255),w,b
 32462  014022  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 32463  014024  0E7F               	movlw	127
 32464  014026  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 32465  014028  6F71               	movwf	___fldiv@new_exp& (0+255),b
 32466  01402A  0E00               	movlw	0
 32467  01402C  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 32468  01402E  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 32469                           
 32470                           ; BSR set to: 0
 32471  014030  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 32472  014034  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 32473  014038  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 32474  01403C  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 32475                           
 32476                           ; BSR set to: 0
 32477  014040  0E00               	movlw	0
 32478  014042  6F60               	movwf	___fldiv@b& (0+255),b
 32479  014044  0E00               	movlw	0
 32480  014046  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32481  014048  0E00               	movlw	0
 32482  01404A  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32483  01404C  0E00               	movlw	0
 32484  01404E  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32485                           
 32486                           ; BSR set to: 0
 32487  014050  0E00               	movlw	0
 32488  014052  6F73               	movwf	___fldiv@grs& (0+255),b
 32489  014054  0E00               	movlw	0
 32490  014056  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 32491  014058  0E00               	movlw	0
 32492  01405A  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 32493  01405C  0E00               	movlw	0
 32494  01405E  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 32495                           
 32496                           ; BSR set to: 0
 32497  014060  0E00               	movlw	0
 32498  014062  6F78               	movwf	___fldiv@aexp& (0+255),b
 32499  014064  D028               	goto	l3059
 32500  014066                     
 32501                           ; BSR set to: 0
 32502                           
 32503                           ; BSR set to: 0
 32504  014066  5178               	movf	___fldiv@aexp& (0+255),w,b
 32505  014068  B4D8               	btfsc	status,2,c
 32506  01406A  D011               	goto	l3061
 32507                           
 32508                           ; BSR set to: 0
 32509  01406C  90D8               	bcf	status,0,c
 32510  01406E  376D               	rlcf	___fldiv@rem& (0+255),f,b
 32511  014070  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 32512  014072  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 32513  014074  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 32514  014076  90D8               	bcf	status,0,c
 32515  014078  3760               	rlcf	___fldiv@b& (0+255),f,b
 32516  01407A  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 32517  01407C  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 32518  01407E  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 32519                           
 32520                           ; BSR set to: 0
 32521  014080  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 32522                           
 32523                           ; BSR set to: 0
 32524  014082  8160               	bsf	___fldiv@b& (0+255),0,b
 32525                           
 32526                           ; BSR set to: 0
 32527  014084  90D8               	bcf	status,0,c
 32528  014086  3773               	rlcf	___fldiv@grs& (0+255),f,b
 32529  014088  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 32530  01408A  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 32531  01408C  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 32532  01408E                     l3061:
 32533                           
 32534                           ; BSR set to: 0
 32535                           
 32536                           ; BSR set to: 0
 32537  01408E  5164               	movf	___fldiv@a& (0+255),w,b
 32538  014090  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 32539  014092  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 32540  014094  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 32541  014096  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 32542  014098  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 32543  01409A  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 32544  01409C  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 32545  01409E  A0D8               	btfss	status,0,c
 32546  0140A0  D009               	goto	l3063
 32547                           
 32548                           ; BSR set to: 0
 32549  0140A2  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 32550                           
 32551                           ; BSR set to: 0
 32552  0140A4  5164               	movf	___fldiv@a& (0+255),w,b
 32553  0140A6  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 32554  0140A8  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 32555  0140AA  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 32556  0140AC  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 32557  0140AE  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 32558  0140B0  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 32559  0140B2  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 32560  0140B4                     l3063:
 32561                           
 32562                           ; BSR set to: 0
 32563                           
 32564                           ; BSR set to: 0
 32565  0140B4  2B78               	incf	___fldiv@aexp& (0+255),f,b
 32566  0140B6                     l3059:
 32567                           
 32568                           ; BSR set to: 0
 32569  0140B6  0E19               	movlw	25
 32570  0140B8  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 32571  0140BA  D7D5               	goto	l3060
 32572                           
 32573                           ; BSR set to: 0
 32574                           
 32575                           ; BSR set to: 0
 32576  0140BC  516D               	movf	___fldiv@rem& (0+255),w,b
 32577  0140BE  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 32578  0140C0  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 32579  0140C2  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 32580  0140C4  B4D8               	btfsc	status,2,c
 32581  0140C6  D011               	goto	l3066
 32582                           
 32583                           ; BSR set to: 0
 32584  0140C8  8173               	bsf	___fldiv@grs& (0+255),0,b
 32585                           
 32586                           ; BSR set to: 0
 32587  0140CA  D00F               	goto	l3066
 32588  0140CC                     
 32589                           ; BSR set to: 0
 32590                           
 32591                           ; BSR set to: 0
 32592  0140CC  90D8               	bcf	status,0,c
 32593  0140CE  3760               	rlcf	___fldiv@b& (0+255),f,b
 32594  0140D0  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 32595  0140D2  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 32596  0140D4  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 32597                           
 32598                           ; BSR set to: 0
 32599  0140D6  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 32600                           
 32601                           ; BSR set to: 0
 32602  0140D8  8160               	bsf	___fldiv@b& (0+255),0,b
 32603                           
 32604                           ; BSR set to: 0
 32605  0140DA  90D8               	bcf	status,0,c
 32606  0140DC  3773               	rlcf	___fldiv@grs& (0+255),f,b
 32607  0140DE  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 32608  0140E0  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 32609  0140E2  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 32610  0140E4  0771               	decf	___fldiv@new_exp& (0+255),f,b
 32611  0140E6  A0D8               	btfss	status,0,c
 32612  0140E8  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 32613  0140EA                     l3066:
 32614                           
 32615                           ; BSR set to: 0
 32616                           
 32617                           ; BSR set to: 0
 32618  0140EA  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 32619  0140EC  D7EF               	goto	l3067
 32620                           
 32621                           ; BSR set to: 0
 32622                           
 32623                           ; BSR set to: 0
 32624  0140EE  0E00               	movlw	0
 32625  0140F0  6F78               	movwf	___fldiv@aexp& (0+255),b
 32626                           
 32627                           ; BSR set to: 0
 32628  0140F2  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 32629  0140F4  D016               	goto	l3073
 32630                           
 32631                           ; BSR set to: 0
 32632  0140F6  0EFF               	movlw	255
 32633  0140F8  1573               	andwf	___fldiv@grs& (0+255),w,b
 32634  0140FA  6F68               	movwf	??___fldiv& (0+255),b
 32635  0140FC  0EFF               	movlw	255
 32636  0140FE  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 32637  014100  6F69               	movwf	(??___fldiv+1)& (0+255),b
 32638  014102  0EFF               	movlw	255
 32639  014104  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 32640  014106  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 32641  014108  0E7F               	movlw	127
 32642  01410A  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 32643  01410C  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 32644  01410E  5168               	movf	??___fldiv& (0+255),w,b
 32645  014110  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 32646  014112  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 32647  014114  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 32648  014116  A4D8               	btfss	status,2,c
 32649  014118  D002               	goto	u11830
 32650                           
 32651                           ; BSR set to: 0
 32652                           
 32653                           ; BSR set to: 0
 32654  01411A  A160               	btfss	___fldiv@b& (0+255),0,b
 32655  01411C  D002               	goto	l3073
 32656  01411E                     u11830:
 32657                           
 32658                           ; BSR set to: 0
 32659  01411E  0E01               	movlw	1
 32660  014120  6F78               	movwf	___fldiv@aexp& (0+255),b
 32661  014122                     l3073:
 32662                           
 32663                           ; BSR set to: 0
 32664                           
 32665                           ; BSR set to: 0
 32666                           
 32667                           ; BSR set to: 0
 32668  014122  5178               	movf	___fldiv@aexp& (0+255),w,b
 32669  014124  B4D8               	btfsc	status,2,c
 32670  014126  D01F               	goto	l3075
 32671                           
 32672                           ; BSR set to: 0
 32673  014128  0E01               	movlw	1
 32674  01412A  2760               	addwf	___fldiv@b& (0+255),f,b
 32675  01412C  0E00               	movlw	0
 32676  01412E  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 32677  014130  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 32678  014132  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 32679                           
 32680                           ; BSR set to: 0
 32681  014134  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 32682  014136  D017               	goto	l3075
 32683                           
 32684                           ; BSR set to: 0
 32685  014138  C060  F068         	movff	___fldiv@b,??___fldiv
 32686  01413C  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 32687  014140  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 32688  014144  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 32689  014148  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 32690  01414A  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 32691  01414C  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 32692  01414E  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 32693  014150  3368               	rrcf	??___fldiv& (0+255),f,b
 32694  014152  C068  F060         	movff	??___fldiv,___fldiv@b
 32695  014156  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 32696  01415A  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 32697  01415E  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 32698                           
 32699                           ; BSR set to: 0
 32700  014162  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 32701  014164  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 32702  014166                     l3075:
 32703                           
 32704                           ; BSR set to: 0
 32705                           
 32706                           ; BSR set to: 0
 32707                           
 32708                           ; BSR set to: 0
 32709  014166  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 32710  014168  D010               	goto	l3076
 32711  01416A  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 32712  01416C  E103               	bnz	u11860
 32713  01416E  2971               	incf	___fldiv@new_exp& (0+255),w,b
 32714  014170  A0D8               	btfss	status,0,c
 32715  014172  D00B               	goto	l3076
 32716  014174                     u11860:
 32717                           
 32718                           ; BSR set to: 0
 32719  014174  0E00               	movlw	0
 32720  014176  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 32721  014178  6971               	setf	___fldiv@new_exp& (0+255),b
 32722  01417A  0E00               	movlw	0
 32723  01417C  6F60               	movwf	___fldiv@b& (0+255),b
 32724  01417E  0E00               	movlw	0
 32725  014180  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32726  014182  0E00               	movlw	0
 32727  014184  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32728  014186  0E00               	movlw	0
 32729  014188  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32730  01418A                     l3076:
 32731                           
 32732                           ; BSR set to: 0
 32733                           
 32734                           ; BSR set to: 0
 32735  01418A  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 32736  01418C  D005               	goto	u11870
 32737  01418E  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 32738  014190  E111               	bnz	l14607
 32739  014192  0571               	decf	___fldiv@new_exp& (0+255),w,b
 32740  014194  B0D8               	btfsc	status,0,c
 32741  014196  D00E               	goto	l3077
 32742  014198                     u11870:
 32743                           
 32744                           ; BSR set to: 0
 32745  014198  0E00               	movlw	0
 32746  01419A  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 32747  01419C  0E00               	movlw	0
 32748  01419E  6F71               	movwf	___fldiv@new_exp& (0+255),b
 32749  0141A0  0E00               	movlw	0
 32750  0141A2  6F60               	movwf	___fldiv@b& (0+255),b
 32751  0141A4  0E00               	movlw	0
 32752  0141A6  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32753  0141A8  0E00               	movlw	0
 32754  0141AA  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32755  0141AC  0E00               	movlw	0
 32756  0141AE  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32757  0141B0  0E00               	movlw	0
 32758  0141B2  6F6C               	movwf	___fldiv@sign& (0+255),b
 32759  0141B4                     l3077:
 32760  0141B4                     l14607:
 32761                           
 32762                           ; BSR set to: 0
 32763  0141B4  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 32764                           
 32765                           ; BSR set to: 0
 32766  0141B8  A177               	btfss	___fldiv@bexp& (0+255),0,b
 32767  0141BA  D002               	goto	l3078
 32768                           
 32769                           ; BSR set to: 0
 32770  0141BC  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 32771  0141BE  D001               	goto	l3079
 32772  0141C0                     l3078:
 32773                           
 32774                           ; BSR set to: 0
 32775                           
 32776                           ; BSR set to: 0
 32777  0141C0  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 32778  0141C2                     l3079:
 32779                           
 32780                           ; BSR set to: 0
 32781                           
 32782                           ; BSR set to: 0
 32783  0141C2  90D8               	bcf	status,0,c
 32784  0141C4  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 32785  0141C6  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32786                           
 32787                           ; BSR set to: 0
 32788  0141C8  516C               	movf	___fldiv@sign& (0+255),w,b
 32789  0141CA  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 32790                           
 32791                           ; BSR set to: 0
 32792  0141CC  C060  F060         	movff	___fldiv@b,?___fldiv
 32793  0141D0  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 32794  0141D4  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 32795  0141D8  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 32796  0141DC  0012               	return	
 32797  0141DE                     __end_of___fldiv:
 32798                           	opt stack 0
 32799                           tosu	equ	0xFFF
 32800                           tosh	equ	0xFFE
 32801                           tosl	equ	0xFFD
 32802                           pclath	equ	0xFFA
 32803                           tblptru	equ	0xFF8
 32804                           tblptrh	equ	0xFF7
 32805                           tblptrl	equ	0xFF6
 32806                           tablat	equ	0xFF5
 32807                           prodh	equ	0xFF4
 32808                           prodl	equ	0xFF3
 32809                           intcon	equ	0xFF2
 32810                           indf0	equ	0xFEF
 32811                           postinc0	equ	0xFEE
 32812                           fsr0h	equ	0xFEA
 32813                           fsr0l	equ	0xFE9
 32814                           wreg	equ	0xFE8
 32815                           indf1	equ	0xFE7
 32816                           postdec1	equ	0xFE5
 32817                           fsr1h	equ	0xFE2
 32818                           fsr1l	equ	0xFE1
 32819                           indf2	equ	0xFDF
 32820                           postinc2	equ	0xFDE
 32821                           postdec2	equ	0xFDD
 32822                           plusw2	equ	0xFDB
 32823                           fsr2h	equ	0xFDA
 32824                           fsr2l	equ	0xFD9
 32825                           status	equ	0xFD8
 32826                           
 32827 ;; *************** function ___awdiv *****************
 32828 ;; Defined at:
 32829 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
 32830 ;; Parameters:    Size  Location     Type
 32831 ;;  dividend        2    0[BANK0 ] int 
 32832 ;;  divisor         2    2[BANK0 ] int 
 32833 ;; Auto vars:     Size  Location     Type
 32834 ;;  quotient        2    6[BANK0 ] int 
 32835 ;;  sign            1    5[BANK0 ] unsigned char 
 32836 ;;  counter         1    4[BANK0 ] unsigned char 
 32837 ;; Return value:  Size  Location     Type
 32838 ;;                  2    0[BANK0 ] int 
 32839 ;; Registers used:
 32840 ;;		wreg, status,2, status,0
 32841 ;; Tracked objects:
 32842 ;;		On entry : 0/0
 32843 ;;		On exit  : 0/0
 32844 ;;		Unchanged: 0/0
 32845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32846 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32847 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32849 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32850 ;;Total ram usage:        8 bytes
 32851 ;; Hardware stack levels used:    1
 32852 ;; Hardware stack levels required when called:    7
 32853 ;; This function calls:
 32854 ;;		Nothing
 32855 ;; This function is called by:
 32856 ;;		_Console_Tab
 32857 ;;		_ADCAverage
 32858 ;; This function uses a non-reentrant model
 32859 ;;
 32860                           
 32861                           	psect	text144
 32862  017438                     __ptext144:
 32863                           	opt stack 0
 32864  017438                     ___awdiv:
 32865                           	opt stack 19
 32866                           
 32867                           ; BSR set to: 0
 32868                           ;incstack = 0
 32869  017438  0E00               	movlw	0
 32870  01743A  0100               	movlb	0	; () banked
 32871  01743C  6F65               	movwf	___awdiv@sign& (0+255),b
 32872                           
 32873                           ; BSR set to: 0
 32874  01743E  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 32875  017440  D006               	goto	l2716
 32876                           
 32877                           ; BSR set to: 0
 32878  017442  6D62               	negf	___awdiv@divisor& (0+255),b
 32879  017444  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
 32880  017446  B0D8               	btfsc	status,0,c
 32881  017448  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
 32882                           
 32883                           ; BSR set to: 0
 32884  01744A  0E01               	movlw	1
 32885  01744C  6F65               	movwf	___awdiv@sign& (0+255),b
 32886  01744E                     l2716:
 32887                           
 32888                           ; BSR set to: 0
 32889                           
 32890                           ; BSR set to: 0
 32891  01744E  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 32892  017450  D006               	goto	l2717
 32893                           
 32894                           ; BSR set to: 0
 32895  017452  6D60               	negf	___awdiv@dividend& (0+255),b
 32896  017454  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
 32897  017456  B0D8               	btfsc	status,0,c
 32898  017458  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
 32899                           
 32900                           ; BSR set to: 0
 32901  01745A  0E01               	movlw	1
 32902  01745C  1B65               	xorwf	___awdiv@sign& (0+255),f,b
 32903  01745E                     l2717:
 32904                           
 32905                           ; BSR set to: 0
 32906                           
 32907                           ; BSR set to: 0
 32908  01745E  0E00               	movlw	0
 32909  017460  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
 32910  017462  0E00               	movlw	0
 32911  017464  6F66               	movwf	___awdiv@quotient& (0+255),b
 32912                           
 32913                           ; BSR set to: 0
 32914  017466  5162               	movf	___awdiv@divisor& (0+255),w,b
 32915  017468  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 32916  01746A  B4D8               	btfsc	status,2,c
 32917  01746C  D01C               	goto	l2724
 32918                           
 32919                           ; BSR set to: 0
 32920  01746E  0E01               	movlw	1
 32921  017470  6F64               	movwf	___awdiv@counter& (0+255),b
 32922  017472  D004               	goto	l2719
 32923  017474                     
 32924                           ; BSR set to: 0
 32925                           
 32926                           ; BSR set to: 0
 32927  017474  90D8               	bcf	status,0,c
 32928  017476  3762               	rlcf	___awdiv@divisor& (0+255),f,b
 32929  017478  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 32930  01747A  2B64               	incf	___awdiv@counter& (0+255),f,b
 32931  01747C                     l2719:
 32932                           
 32933                           ; BSR set to: 0
 32934                           
 32935                           ; BSR set to: 0
 32936  01747C  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 32937  01747E  D7FA               	goto	l2720
 32938  017480                     u10640:
 32939                           
 32940                           ; BSR set to: 0
 32941                           
 32942                           ; BSR set to: 0
 32943                           
 32944                           ; BSR set to: 0
 32945  017480  90D8               	bcf	status,0,c
 32946  017482  3766               	rlcf	___awdiv@quotient& (0+255),f,b
 32947  017484  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 32948                           
 32949                           ; BSR set to: 0
 32950  017486  5162               	movf	___awdiv@divisor& (0+255),w,b
 32951  017488  5D60               	subwf	___awdiv@dividend& (0+255),w,b
 32952  01748A  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 32953  01748C  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 32954  01748E  A0D8               	btfss	status,0,c
 32955  017490  D005               	goto	l2723
 32956                           
 32957                           ; BSR set to: 0
 32958  017492  5162               	movf	___awdiv@divisor& (0+255),w,b
 32959  017494  5F60               	subwf	___awdiv@dividend& (0+255),f,b
 32960  017496  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 32961  017498  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 32962                           
 32963                           ; BSR set to: 0
 32964  01749A  8166               	bsf	___awdiv@quotient& (0+255),0,b
 32965  01749C                     l2723:
 32966                           
 32967                           ; BSR set to: 0
 32968                           
 32969                           ; BSR set to: 0
 32970  01749C  90D8               	bcf	status,0,c
 32971  01749E  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 32972  0174A0  3362               	rrcf	___awdiv@divisor& (0+255),f,b
 32973                           
 32974                           ; BSR set to: 0
 32975  0174A2  2F64               	decfsz	___awdiv@counter& (0+255),f,b
 32976  0174A4  D7ED               	goto	u10640
 32977  0174A6                     l2724:
 32978                           
 32979                           ; BSR set to: 0
 32980                           
 32981                           ; BSR set to: 0
 32982                           
 32983                           ; BSR set to: 0
 32984  0174A6  5165               	movf	___awdiv@sign& (0+255),w,b
 32985  0174A8  B4D8               	btfsc	status,2,c
 32986  0174AA  D004               	goto	l2725
 32987                           
 32988                           ; BSR set to: 0
 32989  0174AC  6D66               	negf	___awdiv@quotient& (0+255),b
 32990  0174AE  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
 32991  0174B0  B0D8               	btfsc	status,0,c
 32992  0174B2  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
 32993  0174B4                     l2725:
 32994                           
 32995                           ; BSR set to: 0
 32996                           
 32997                           ; BSR set to: 0
 32998  0174B4  C066  F060         	movff	___awdiv@quotient,?___awdiv
 32999  0174B8  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
 33000  0174BC  0012               	return	
 33001  0174BE                     __end_of___awdiv:
 33002                           	opt stack 0
 33003                           tosu	equ	0xFFF
 33004                           tosh	equ	0xFFE
 33005                           tosl	equ	0xFFD
 33006                           pclath	equ	0xFFA
 33007                           tblptru	equ	0xFF8
 33008                           tblptrh	equ	0xFF7
 33009                           tblptrl	equ	0xFF6
 33010                           tablat	equ	0xFF5
 33011                           prodh	equ	0xFF4
 33012                           prodl	equ	0xFF3
 33013                           intcon	equ	0xFF2
 33014                           indf0	equ	0xFEF
 33015                           postinc0	equ	0xFEE
 33016                           fsr0h	equ	0xFEA
 33017                           fsr0l	equ	0xFE9
 33018                           wreg	equ	0xFE8
 33019                           indf1	equ	0xFE7
 33020                           postdec1	equ	0xFE5
 33021                           fsr1h	equ	0xFE2
 33022                           fsr1l	equ	0xFE1
 33023                           indf2	equ	0xFDF
 33024                           postinc2	equ	0xFDE
 33025                           postdec2	equ	0xFDD
 33026                           plusw2	equ	0xFDB
 33027                           fsr2h	equ	0xFDA
 33028                           fsr2l	equ	0xFD9
 33029                           status	equ	0xFD8
 33030                           
 33031 ;; *************** function _HMI_SetNumber *****************
 33032 ;; Defined at:
 33033 ;;		line 221 in file "HMI.c"
 33034 ;; Parameters:    Size  Location     Type
 33035 ;;  pInput          2   22[BANK0 ] int 
 33036 ;; Auto vars:     Size  Location     Type
 33037 ;;		None
 33038 ;; Return value:  Size  Location     Type
 33039 ;;                  1    wreg      void 
 33040 ;; Registers used:
 33041 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 33042 ;; Tracked objects:
 33043 ;;		On entry : 0/0
 33044 ;;		On exit  : 0/0
 33045 ;;		Unchanged: 0/0
 33046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33047 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33050 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33051 ;;Total ram usage:        2 bytes
 33052 ;; Hardware stack levels used:    1
 33053 ;; Hardware stack levels required when called:    9
 33054 ;; This function calls:
 33055 ;;		_HMI_SetSegments
 33056 ;;		_itos
 33057 ;; This function is called by:
 33058 ;;		_Event_TestButton
 33059 ;;		_main
 33060 ;;		_ADCAverage
 33061 ;;		_Event_HMI_UpButton
 33062 ;;		_Event_HMI_DownButton
 33063 ;; This function uses a non-reentrant model
 33064 ;;
 33065                           
 33066                           	psect	text145
 33067  0188DC                     __ptext145:
 33068                           	opt stack 0
 33069  0188DC                     _HMI_SetNumber:
 33070                           	opt stack 19
 33071                           
 33072                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 33073                           
 33074                           ; BSR set to: 0
 33075                           ;incstack = 0
 33076  0188DC  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 33077  0188E0  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 33078  0188E4  0EA0               	movlw	low _HMIBoard
 33079  0188E6  0100               	movlb	0	; () banked
 33080  0188E8  6F6E               	movwf	itos@destination& (0+255),b
 33081  0188EA  0E03               	movlw	high _HMIBoard
 33082  0188EC  6F6F               	movwf	(itos@destination+1)& (0+255),b
 33083  0188EE  EC37  F0B5         	call	_itos	;wreg free
 33084                           
 33085                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 33086  0188F2  0EA0               	movlw	low _HMIBoard
 33087  0188F4  0100               	movlb	0	; () banked
 33088  0188F6  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 33089  0188F8  0E03               	movlw	high _HMIBoard
 33090  0188FA  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 33091  0188FC  EC94  F0B7         	call	_HMI_SetSegments	;wreg free
 33092  018900  0012               	return		;funcret
 33093  018902                     __end_of_HMI_SetNumber:
 33094                           	opt stack 0
 33095                           tosu	equ	0xFFF
 33096                           tosh	equ	0xFFE
 33097                           tosl	equ	0xFFD
 33098                           pclath	equ	0xFFA
 33099                           tblptru	equ	0xFF8
 33100                           tblptrh	equ	0xFF7
 33101                           tblptrl	equ	0xFF6
 33102                           tablat	equ	0xFF5
 33103                           prodh	equ	0xFF4
 33104                           prodl	equ	0xFF3
 33105                           intcon	equ	0xFF2
 33106                           indf0	equ	0xFEF
 33107                           postinc0	equ	0xFEE
 33108                           fsr0h	equ	0xFEA
 33109                           fsr0l	equ	0xFE9
 33110                           wreg	equ	0xFE8
 33111                           indf1	equ	0xFE7
 33112                           postdec1	equ	0xFE5
 33113                           fsr1h	equ	0xFE2
 33114                           fsr1l	equ	0xFE1
 33115                           indf2	equ	0xFDF
 33116                           postinc2	equ	0xFDE
 33117                           postdec2	equ	0xFDD
 33118                           plusw2	equ	0xFDB
 33119                           fsr2h	equ	0xFDA
 33120                           fsr2l	equ	0xFD9
 33121                           status	equ	0xFD8
 33122                           
 33123 ;; *************** function _itos *****************
 33124 ;; Defined at:
 33125 ;;		line 369 in file "Library/Types.c"
 33126 ;; Parameters:    Size  Location     Type
 33127 ;;  input           2   12[BANK0 ] unsigned short 
 33128 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 33129 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 33130 ;; Auto vars:     Size  Location     Type
 33131 ;;  Out             2   20[BANK0 ] unsigned short 
 33132 ;;  Length          2   18[BANK0 ] unsigned short 
 33133 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 33134 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 33135 ;; Return value:  Size  Location     Type
 33136 ;;                  1    wreg      void 
 33137 ;; Registers used:
 33138 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 33139 ;; Tracked objects:
 33140 ;;		On entry : 0/0
 33141 ;;		On exit  : 0/0
 33142 ;;		Unchanged: 0/0
 33143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33144 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33145 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33147 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33148 ;;Total ram usage:       10 bytes
 33149 ;; Hardware stack levels used:    1
 33150 ;; Hardware stack levels required when called:    8
 33151 ;; This function calls:
 33152 ;;		___lwdiv
 33153 ;;		___lwmod
 33154 ;;		_reverse
 33155 ;; This function is called by:
 33156 ;;		_HMI_SetNumber
 33157 ;; This function uses a non-reentrant model
 33158 ;;
 33159                           
 33160                           	psect	text146
 33161  016A6E                     __ptext146:
 33162                           	opt stack 0
 33163  016A6E                     _itos:
 33164                           	opt stack 19
 33165                           
 33166                           ;Types.c: 371: UINT16 Out = input;
 33167                           
 33168                           ;incstack = 0
 33169  016A6E  C06C  F074         	movff	itos@input,itos@Out
 33170  016A72  C06D  F075         	movff	itos@input+1,itos@Out+1
 33171                           
 33172                           ;Types.c: 372: UINT16 Length = 0;
 33173  016A76  0E00               	movlw	0
 33174  016A78  0100               	movlb	0	; () banked
 33175  016A7A  6F73               	movwf	(itos@Length+1)& (0+255),b
 33176  016A7C  0E00               	movlw	0
 33177  016A7E  6F72               	movwf	itos@Length& (0+255),b
 33178                           
 33179                           ; BSR set to: 0
 33180                           ;Types.c: 373: char *Data = destination;
 33181  016A80  C06E  F070         	movff	itos@destination,itos@Data
 33182  016A84  C06F  F071         	movff	itos@destination+1,itos@Data+1
 33183                           
 33184                           ; BSR set to: 0
 33185                           ;Types.c: 374: if(Out == 0)
 33186  016A88  5174               	movf	itos@Out& (0+255),w,b
 33187  016A8A  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 33188  016A8C  A4D8               	btfss	status,2,c
 33189  016A8E  D030               	goto	l929
 33190                           
 33191                           ; BSR set to: 0
 33192                           ;Types.c: 375: {
 33193                           ;Types.c: 376: Data[0] = (UINT16)'0';
 33194  016A90  C070  FFD9         	movff	itos@Data,fsr2l
 33195  016A94  C071  FFDA         	movff	itos@Data+1,fsr2h
 33196  016A98  0E30               	movlw	48
 33197  016A9A  6EDF               	movwf	indf2,c
 33198                           
 33199                           ; BSR set to: 0
 33200                           ;Types.c: 377: Length = 1;
 33201  016A9C  0E00               	movlw	0
 33202  016A9E  6F73               	movwf	(itos@Length+1)& (0+255),b
 33203  016AA0  0E01               	movlw	1
 33204  016AA2  6F72               	movwf	itos@Length& (0+255),b
 33205                           
 33206                           ;Types.c: 378: }
 33207  016AA4  D039               	goto	l928
 33208  016AA6                     
 33209                           ; BSR set to: 0
 33210                           ;Types.c: 382: {
 33211                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 33212                           
 33213                           ; BSR set to: 0
 33214  016AA6  C074  F067         	movff	itos@Out,___lwmod@dividend
 33215  016AAA  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 33216  016AAE  0E00               	movlw	0
 33217  016AB0  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 33218  016AB2  0E0A               	movlw	10
 33219  016AB4  6F69               	movwf	___lwmod@divisor& (0+255),b
 33220  016AB6  ECDF  F0C1         	call	___lwmod	;wreg free
 33221  016ABA  0100               	movlb	0	; () banked
 33222  016ABC  5167               	movf	?___lwmod& (0+255),w,b
 33223  016ABE  0F30               	addlw	48
 33224  016AC0  C070  FFD9         	movff	itos@Data,fsr2l
 33225  016AC4  C071  FFDA         	movff	itos@Data+1,fsr2h
 33226  016AC8  6EDF               	movwf	indf2,c
 33227                           
 33228                           ; BSR set to: 0
 33229                           ;Types.c: 384: Out /= 10;
 33230  016ACA  C074  F060         	movff	itos@Out,___lwdiv@dividend
 33231  016ACE  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 33232  016AD2  0E00               	movlw	0
 33233  016AD4  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 33234  016AD6  0E0A               	movlw	10
 33235  016AD8  6F62               	movwf	___lwdiv@divisor& (0+255),b
 33236  016ADA  EC83  F0BF         	call	___lwdiv	;wreg free
 33237  016ADE  C060  F074         	movff	?___lwdiv,itos@Out
 33238  016AE2  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 33239                           
 33240                           ;Types.c: 385: Length ++;
 33241  016AE6  0100               	movlb	0	; () banked
 33242  016AE8  4B72               	infsnz	itos@Length& (0+255),f,b
 33243  016AEA  2B73               	incf	(itos@Length+1)& (0+255),f,b
 33244                           
 33245                           ; BSR set to: 0
 33246                           ;Types.c: 386: Data++;
 33247  016AEC  4B70               	infsnz	itos@Data& (0+255),f,b
 33248  016AEE  2B71               	incf	(itos@Data+1)& (0+255),f,b
 33249  016AF0                     l929:
 33250                           
 33251                           ; BSR set to: 0
 33252                           
 33253                           ; BSR set to: 0
 33254  016AF0  5174               	movf	itos@Out& (0+255),w,b
 33255  016AF2  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 33256  016AF4  B4D8               	btfsc	status,2,c
 33257  016AF6  D006               	goto	u12180
 33258                           
 33259                           ; BSR set to: 0
 33260  016AF8  5173               	movf	(itos@Length+1)& (0+255),w,b
 33261  016AFA  E104               	bnz	l14867
 33262  016AFC  0E06               	movlw	6
 33263  016AFE  5D72               	subwf	itos@Length& (0+255),w,b
 33264  016B00  A0D8               	btfss	status,0,c
 33265  016B02  D7D1               	goto	l930
 33266  016B04                     u12180:
 33267  016B04                     l14867:
 33268                           
 33269                           ; BSR set to: 0
 33270                           ;Types.c: 387: }
 33271                           ;Types.c: 388: reverse(destination, Length);
 33272  016B04  C06E  F060         	movff	itos@destination,reverse@input
 33273  016B08  C06F  F061         	movff	itos@destination+1,reverse@input+1
 33274  016B0C  C072  F062         	movff	itos@Length,reverse@length
 33275  016B10  C073  F063         	movff	itos@Length+1,reverse@length+1
 33276  016B14  EC59  F0BF         	call	_reverse	;wreg free
 33277  016B18                     l928:
 33278                           
 33279                           ;Types.c: 389: }
 33280                           ;Types.c: 390: destination[Length] = '\0';
 33281  016B18  0100               	movlb	0	; () banked
 33282  016B1A  5172               	movf	itos@Length& (0+255),w,b
 33283  016B1C  256E               	addwf	itos@destination& (0+255),w,b
 33284  016B1E  6ED9               	movwf	fsr2l,c
 33285  016B20  5173               	movf	(itos@Length+1)& (0+255),w,b
 33286  016B22  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 33287  016B24  6EDA               	movwf	fsr2h,c
 33288  016B26  0E00               	movlw	0
 33289  016B28  6EDF               	movwf	indf2,c
 33290                           
 33291                           ; BSR set to: 0
 33292  016B2A  0012               	return		;funcret
 33293  016B2C                     __end_of_itos:
 33294                           	opt stack 0
 33295                           tosu	equ	0xFFF
 33296                           tosh	equ	0xFFE
 33297                           tosl	equ	0xFFD
 33298                           pclath	equ	0xFFA
 33299                           tblptru	equ	0xFF8
 33300                           tblptrh	equ	0xFF7
 33301                           tblptrl	equ	0xFF6
 33302                           tablat	equ	0xFF5
 33303                           prodh	equ	0xFF4
 33304                           prodl	equ	0xFF3
 33305                           intcon	equ	0xFF2
 33306                           indf0	equ	0xFEF
 33307                           postinc0	equ	0xFEE
 33308                           fsr0h	equ	0xFEA
 33309                           fsr0l	equ	0xFE9
 33310                           wreg	equ	0xFE8
 33311                           indf1	equ	0xFE7
 33312                           postdec1	equ	0xFE5
 33313                           fsr1h	equ	0xFE2
 33314                           fsr1l	equ	0xFE1
 33315                           indf2	equ	0xFDF
 33316                           postinc2	equ	0xFDE
 33317                           postdec2	equ	0xFDD
 33318                           plusw2	equ	0xFDB
 33319                           fsr2h	equ	0xFDA
 33320                           fsr2l	equ	0xFD9
 33321                           status	equ	0xFD8
 33322                           
 33323 ;; *************** function _reverse *****************
 33324 ;; Defined at:
 33325 ;;		line 357 in file "Library/Types.c"
 33326 ;; Parameters:    Size  Location     Type
 33327 ;;  input           2    0[BANK0 ] PTR unsigned char 
 33328 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 33329 ;;  length          2    2[BANK0 ] unsigned short 
 33330 ;; Auto vars:     Size  Location     Type
 33331 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 33332 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 33333 ;;  tempVar         1    4[BANK0 ] unsigned char 
 33334 ;; Return value:  Size  Location     Type
 33335 ;;                  1    wreg      void 
 33336 ;; Registers used:
 33337 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 33338 ;; Tracked objects:
 33339 ;;		On entry : 0/0
 33340 ;;		On exit  : 0/0
 33341 ;;		Unchanged: 0/0
 33342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33343 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33344 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33346 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33347 ;;Total ram usage:        7 bytes
 33348 ;; Hardware stack levels used:    1
 33349 ;; Hardware stack levels required when called:    7
 33350 ;; This function calls:
 33351 ;;		Nothing
 33352 ;; This function is called by:
 33353 ;;		_itos
 33354 ;; This function uses a non-reentrant model
 33355 ;;
 33356                           
 33357                           	psect	text147
 33358  017EB2                     __ptext147:
 33359                           	opt stack 0
 33360  017EB2                     _reverse:
 33361                           	opt stack 19
 33362                           
 33363                           ;Types.c: 359: char tempVar,
 33364                           ;Types.c: 360: *iterator = input + length;
 33365                           
 33366                           ; BSR set to: 0
 33367                           ;incstack = 0
 33368  017EB2  0100               	movlb	0	; () banked
 33369  017EB4  5162               	movf	reverse@length& (0+255),w,b
 33370  017EB6  2560               	addwf	reverse@input& (0+255),w,b
 33371  017EB8  6F65               	movwf	reverse@iterator& (0+255),b
 33372  017EBA  5163               	movf	(reverse@length+1)& (0+255),w,b
 33373  017EBC  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 33374  017EBE  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 33375                           
 33376                           ;Types.c: 362: while ( --iterator > input )
 33377  017EC0  D018               	goto	l921
 33378  017EC2                     
 33379                           ; BSR set to: 0
 33380                           ;Types.c: 363: {
 33381                           ;Types.c: 364: tempVar = *input;
 33382                           
 33383                           ; BSR set to: 0
 33384  017EC2  C060  FFD9         	movff	reverse@input,fsr2l
 33385  017EC6  C061  FFDA         	movff	reverse@input+1,fsr2h
 33386  017ECA  50DF               	movf	indf2,w,c
 33387  017ECC  6F64               	movwf	reverse@tempVar& (0+255),b
 33388                           
 33389                           ; BSR set to: 0
 33390                           ;Types.c: 365: *input++=*iterator;
 33391  017ECE  C065  FFD9         	movff	reverse@iterator,fsr2l
 33392  017ED2  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 33393  017ED6  C060  FFE1         	movff	reverse@input,fsr1l
 33394  017EDA  C061  FFE2         	movff	reverse@input+1,fsr1h
 33395  017EDE  CFDF FFE7          	movff	indf2,indf1
 33396                           
 33397                           ; BSR set to: 0
 33398  017EE2  4B60               	infsnz	reverse@input& (0+255),f,b
 33399  017EE4  2B61               	incf	(reverse@input+1)& (0+255),f,b
 33400                           
 33401                           ; BSR set to: 0
 33402                           ;Types.c: 366: *iterator=tempVar;
 33403  017EE6  C065  FFD9         	movff	reverse@iterator,fsr2l
 33404  017EEA  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 33405  017EEE  C064  FFDF         	movff	reverse@tempVar,indf2
 33406  017EF2                     l921:
 33407                           
 33408                           ; BSR set to: 0
 33409                           
 33410                           ; BSR set to: 0
 33411  017EF2  0765               	decf	reverse@iterator& (0+255),f,b
 33412  017EF4  A0D8               	btfss	status,0,c
 33413  017EF6  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 33414  017EF8  5165               	movf	reverse@iterator& (0+255),w,b
 33415  017EFA  5D60               	subwf	reverse@input& (0+255),w,b
 33416  017EFC  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 33417  017EFE  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 33418  017F00  B0D8               	btfsc	status,0,c
 33419  017F02  0012               	return	
 33420  017F04  D7DE               	goto	l922
 33421  017F06                     __end_of_reverse:
 33422                           	opt stack 0
 33423                           tosu	equ	0xFFF
 33424                           tosh	equ	0xFFE
 33425                           tosl	equ	0xFFD
 33426                           pclath	equ	0xFFA
 33427                           tblptru	equ	0xFF8
 33428                           tblptrh	equ	0xFF7
 33429                           tblptrl	equ	0xFF6
 33430                           tablat	equ	0xFF5
 33431                           prodh	equ	0xFF4
 33432                           prodl	equ	0xFF3
 33433                           intcon	equ	0xFF2
 33434                           indf0	equ	0xFEF
 33435                           postinc0	equ	0xFEE
 33436                           fsr0h	equ	0xFEA
 33437                           fsr0l	equ	0xFE9
 33438                           wreg	equ	0xFE8
 33439                           indf1	equ	0xFE7
 33440                           postdec1	equ	0xFE5
 33441                           fsr1h	equ	0xFE2
 33442                           fsr1l	equ	0xFE1
 33443                           indf2	equ	0xFDF
 33444                           postinc2	equ	0xFDE
 33445                           postdec2	equ	0xFDD
 33446                           plusw2	equ	0xFDB
 33447                           fsr2h	equ	0xFDA
 33448                           fsr2l	equ	0xFD9
 33449                           status	equ	0xFD8
 33450                           
 33451 ;; *************** function ___lwmod *****************
 33452 ;; Defined at:
 33453 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 33454 ;; Parameters:    Size  Location     Type
 33455 ;;  dividend        2    7[BANK0 ] unsigned int 
 33456 ;;  divisor         2    9[BANK0 ] unsigned int 
 33457 ;; Auto vars:     Size  Location     Type
 33458 ;;  counter         1   11[BANK0 ] unsigned char 
 33459 ;; Return value:  Size  Location     Type
 33460 ;;                  2    7[BANK0 ] unsigned int 
 33461 ;; Registers used:
 33462 ;;		wreg, status,2, status,0
 33463 ;; Tracked objects:
 33464 ;;		On entry : 0/0
 33465 ;;		On exit  : 0/0
 33466 ;;		Unchanged: 0/0
 33467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33468 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33469 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33471 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33472 ;;Total ram usage:        5 bytes
 33473 ;; Hardware stack levels used:    1
 33474 ;; Hardware stack levels required when called:    7
 33475 ;; This function calls:
 33476 ;;		Nothing
 33477 ;; This function is called by:
 33478 ;;		_itos
 33479 ;;		_printf
 33480 ;; This function uses a non-reentrant model
 33481 ;;
 33482                           
 33483                           	psect	text148
 33484  0183BE                     __ptext148:
 33485                           	opt stack 0
 33486  0183BE                     ___lwmod:
 33487                           	opt stack 22
 33488                           
 33489                           ; BSR set to: 0
 33490                           ;incstack = 0
 33491  0183BE  0100               	movlb	0	; () banked
 33492  0183C0  5169               	movf	___lwmod@divisor& (0+255),w,b
 33493  0183C2  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 33494  0183C4  B4D8               	btfsc	status,2,c
 33495  0183C6  D018               	goto	l2967
 33496                           
 33497                           ; BSR set to: 0
 33498  0183C8  0E01               	movlw	1
 33499  0183CA  6F6B               	movwf	___lwmod@counter& (0+255),b
 33500  0183CC  D004               	goto	l2962
 33501  0183CE                     
 33502                           ; BSR set to: 0
 33503                           
 33504                           ; BSR set to: 0
 33505  0183CE  90D8               	bcf	status,0,c
 33506  0183D0  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 33507  0183D2  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 33508  0183D4  2B6B               	incf	___lwmod@counter& (0+255),f,b
 33509  0183D6                     l2962:
 33510                           
 33511                           ; BSR set to: 0
 33512                           
 33513                           ; BSR set to: 0
 33514  0183D6  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 33515  0183D8  D7FA               	goto	l2963
 33516  0183DA                     u11940:
 33517                           
 33518                           ; BSR set to: 0
 33519                           
 33520                           ; BSR set to: 0
 33521                           
 33522                           ; BSR set to: 0
 33523  0183DA  5169               	movf	___lwmod@divisor& (0+255),w,b
 33524  0183DC  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 33525  0183DE  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 33526  0183E0  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 33527  0183E2  A0D8               	btfss	status,0,c
 33528  0183E4  D004               	goto	l2966
 33529                           
 33530                           ; BSR set to: 0
 33531  0183E6  5169               	movf	___lwmod@divisor& (0+255),w,b
 33532  0183E8  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 33533  0183EA  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 33534  0183EC  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 33535  0183EE                     l2966:
 33536                           
 33537                           ; BSR set to: 0
 33538                           
 33539                           ; BSR set to: 0
 33540  0183EE  90D8               	bcf	status,0,c
 33541  0183F0  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 33542  0183F2  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 33543                           
 33544                           ; BSR set to: 0
 33545  0183F4  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 33546  0183F6  D7F1               	goto	u11940
 33547  0183F8                     l2967:
 33548                           
 33549                           ; BSR set to: 0
 33550                           
 33551                           ; BSR set to: 0
 33552  0183F8  C067  F067         	movff	___lwmod@dividend,?___lwmod
 33553  0183FC  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 33554                           
 33555                           ; BSR set to: 0
 33556  018400  0012               	return		;funcret
 33557  018402                     __end_of___lwmod:
 33558                           	opt stack 0
 33559                           tosu	equ	0xFFF
 33560                           tosh	equ	0xFFE
 33561                           tosl	equ	0xFFD
 33562                           pclath	equ	0xFFA
 33563                           tblptru	equ	0xFF8
 33564                           tblptrh	equ	0xFF7
 33565                           tblptrl	equ	0xFF6
 33566                           tablat	equ	0xFF5
 33567                           prodh	equ	0xFF4
 33568                           prodl	equ	0xFF3
 33569                           intcon	equ	0xFF2
 33570                           indf0	equ	0xFEF
 33571                           postinc0	equ	0xFEE
 33572                           fsr0h	equ	0xFEA
 33573                           fsr0l	equ	0xFE9
 33574                           wreg	equ	0xFE8
 33575                           indf1	equ	0xFE7
 33576                           postdec1	equ	0xFE5
 33577                           fsr1h	equ	0xFE2
 33578                           fsr1l	equ	0xFE1
 33579                           indf2	equ	0xFDF
 33580                           postinc2	equ	0xFDE
 33581                           postdec2	equ	0xFDD
 33582                           plusw2	equ	0xFDB
 33583                           fsr2h	equ	0xFDA
 33584                           fsr2l	equ	0xFD9
 33585                           status	equ	0xFD8
 33586                           
 33587 ;; *************** function ___lwdiv *****************
 33588 ;; Defined at:
 33589 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 33590 ;; Parameters:    Size  Location     Type
 33591 ;;  dividend        2    0[BANK0 ] unsigned int 
 33592 ;;  divisor         2    2[BANK0 ] unsigned int 
 33593 ;; Auto vars:     Size  Location     Type
 33594 ;;  quotient        2    5[BANK0 ] unsigned int 
 33595 ;;  counter         1    4[BANK0 ] unsigned char 
 33596 ;; Return value:  Size  Location     Type
 33597 ;;                  2    0[BANK0 ] unsigned int 
 33598 ;; Registers used:
 33599 ;;		wreg, status,2, status,0
 33600 ;; Tracked objects:
 33601 ;;		On entry : 0/0
 33602 ;;		On exit  : 0/0
 33603 ;;		Unchanged: 0/0
 33604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33605 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33606 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33608 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33609 ;;Total ram usage:        7 bytes
 33610 ;; Hardware stack levels used:    1
 33611 ;; Hardware stack levels required when called:    7
 33612 ;; This function calls:
 33613 ;;		Nothing
 33614 ;; This function is called by:
 33615 ;;		_itos
 33616 ;;		_printf
 33617 ;; This function uses a non-reentrant model
 33618 ;;
 33619                           
 33620                           	psect	text149
 33621  017F06                     __ptext149:
 33622                           	opt stack 0
 33623  017F06                     ___lwdiv:
 33624                           	opt stack 22
 33625                           
 33626                           ; BSR set to: 0
 33627                           ;incstack = 0
 33628  017F06  0E00               	movlw	0
 33629  017F08  0100               	movlb	0	; () banked
 33630  017F0A  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 33631  017F0C  0E00               	movlw	0
 33632  017F0E  6F65               	movwf	___lwdiv@quotient& (0+255),b
 33633                           
 33634                           ; BSR set to: 0
 33635  017F10  5162               	movf	___lwdiv@divisor& (0+255),w,b
 33636  017F12  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 33637  017F14  B4D8               	btfsc	status,2,c
 33638  017F16  D01C               	goto	l2957
 33639                           
 33640                           ; BSR set to: 0
 33641  017F18  0E01               	movlw	1
 33642  017F1A  6F64               	movwf	___lwdiv@counter& (0+255),b
 33643  017F1C  D004               	goto	l2952
 33644  017F1E                     
 33645                           ; BSR set to: 0
 33646                           
 33647                           ; BSR set to: 0
 33648  017F1E  90D8               	bcf	status,0,c
 33649  017F20  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 33650  017F22  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 33651  017F24  2B64               	incf	___lwdiv@counter& (0+255),f,b
 33652  017F26                     l2952:
 33653                           
 33654                           ; BSR set to: 0
 33655                           
 33656                           ; BSR set to: 0
 33657  017F26  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 33658  017F28  D7FA               	goto	l2953
 33659  017F2A                     u11910:
 33660                           
 33661                           ; BSR set to: 0
 33662                           
 33663                           ; BSR set to: 0
 33664                           
 33665                           ; BSR set to: 0
 33666  017F2A  90D8               	bcf	status,0,c
 33667  017F2C  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 33668  017F2E  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 33669                           
 33670                           ; BSR set to: 0
 33671  017F30  5162               	movf	___lwdiv@divisor& (0+255),w,b
 33672  017F32  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 33673  017F34  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 33674  017F36  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 33675  017F38  A0D8               	btfss	status,0,c
 33676  017F3A  D005               	goto	l2956
 33677                           
 33678                           ; BSR set to: 0
 33679  017F3C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 33680  017F3E  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 33681  017F40  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 33682  017F42  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 33683                           
 33684                           ; BSR set to: 0
 33685  017F44  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 33686  017F46                     l2956:
 33687                           
 33688                           ; BSR set to: 0
 33689                           
 33690                           ; BSR set to: 0
 33691  017F46  90D8               	bcf	status,0,c
 33692  017F48  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 33693  017F4A  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 33694                           
 33695                           ; BSR set to: 0
 33696  017F4C  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 33697  017F4E  D7ED               	goto	u11910
 33698  017F50                     l2957:
 33699                           
 33700                           ; BSR set to: 0
 33701                           
 33702                           ; BSR set to: 0
 33703  017F50  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 33704  017F54  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 33705                           
 33706                           ; BSR set to: 0
 33707  017F58  0012               	return		;funcret
 33708  017F5A                     __end_of___lwdiv:
 33709                           	opt stack 0
 33710                           tosu	equ	0xFFF
 33711                           tosh	equ	0xFFE
 33712                           tosl	equ	0xFFD
 33713                           pclath	equ	0xFFA
 33714                           tblptru	equ	0xFF8
 33715                           tblptrh	equ	0xFF7
 33716                           tblptrl	equ	0xFF6
 33717                           tablat	equ	0xFF5
 33718                           prodh	equ	0xFF4
 33719                           prodl	equ	0xFF3
 33720                           intcon	equ	0xFF2
 33721                           indf0	equ	0xFEF
 33722                           postinc0	equ	0xFEE
 33723                           fsr0h	equ	0xFEA
 33724                           fsr0l	equ	0xFE9
 33725                           wreg	equ	0xFE8
 33726                           indf1	equ	0xFE7
 33727                           postdec1	equ	0xFE5
 33728                           fsr1h	equ	0xFE2
 33729                           fsr1l	equ	0xFE1
 33730                           indf2	equ	0xFDF
 33731                           postinc2	equ	0xFDE
 33732                           postdec2	equ	0xFDD
 33733                           plusw2	equ	0xFDB
 33734                           fsr2h	equ	0xFDA
 33735                           fsr2l	equ	0xFD9
 33736                           status	equ	0xFD8
 33737                           
 33738 ;; *************** function _HMI_SetSegments *****************
 33739 ;; Defined at:
 33740 ;;		line 226 in file "HMI.c"
 33741 ;; Parameters:    Size  Location     Type
 33742 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 33743 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 33744 ;; Auto vars:     Size  Location     Type
 33745 ;;  in              2    4[BANK0 ] unsigned short 
 33746 ;; Return value:  Size  Location     Type
 33747 ;;                  1    wreg      void 
 33748 ;; Registers used:
 33749 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 33750 ;; Tracked objects:
 33751 ;;		On entry : 0/0
 33752 ;;		On exit  : 0/0
 33753 ;;		Unchanged: 0/0
 33754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33755 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33756 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33758 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33759 ;;Total ram usage:        5 bytes
 33760 ;; Hardware stack levels used:    1
 33761 ;; Hardware stack levels required when called:    8
 33762 ;; This function calls:
 33763 ;;		_ToSegment
 33764 ;; This function is called by:
 33765 ;;		_HMI_SetNumber
 33766 ;; This function uses a non-reentrant model
 33767 ;;
 33768                           
 33769                           	psect	text150
 33770  016F28                     __ptext150:
 33771                           	opt stack 0
 33772  016F28                     _HMI_SetSegments:
 33773                           	opt stack 19
 33774                           
 33775                           ;HMI.c: 228: UINT16 in=0;
 33776                           
 33777                           ; BSR set to: 0
 33778                           ;incstack = 0
 33779  016F28  0E00               	movlw	0
 33780  016F2A  0100               	movlb	0	; () banked
 33781  016F2C  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 33782  016F2E  0E00               	movlw	0
 33783  016F30  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 33784                           
 33785                           ;HMI.c: 229: while(*pString)
 33786  016F32  D02E               	goto	l1202
 33787  016F34                     
 33788                           ; BSR set to: 0
 33789                           ;HMI.c: 230: {
 33790                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 33791                           
 33792                           ; BSR set to: 0
 33793  016F34  0EA0               	movlw	low _HMIBoard
 33794  016F36  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 33795  016F38  6ED9               	movwf	fsr2l,c
 33796  016F3A  0E03               	movlw	high _HMIBoard
 33797  016F3C  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 33798  016F3E  6EDA               	movwf	fsr2h,c
 33799  016F40  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 33800  016F44  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 33801  016F48  50E7               	movf	indf1,w,c
 33802  016F4A  EC44  F0A2         	call	_ToSegment
 33803  016F4E  6EDF               	movwf	indf2,c
 33804                           
 33805                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 33806  016F50  0EA0               	movlw	low _HMIBoard
 33807  016F52  0100               	movlb	0	; () banked
 33808  016F54  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 33809  016F56  6ED9               	movwf	fsr2l,c
 33810  016F58  0E03               	movlw	high _HMIBoard
 33811  016F5A  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 33812  016F5C  6EDA               	movwf	fsr2h,c
 33813  016F5E  0E80               	movlw	128
 33814  016F60  18DE               	xorwf	postinc2,w,c
 33815  016F62  A4D8               	btfss	status,2,c
 33816  016F64  D00B               	goto	l1201
 33817                           
 33818                           ; BSR set to: 0
 33819                           ;HMI.c: 234: {
 33820                           ;HMI.c: 235: in--;
 33821  016F66  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 33822  016F68  A0D8               	btfss	status,0,c
 33823  016F6A  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 33824                           
 33825                           ; BSR set to: 0
 33826                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 33827  016F6C  0EA0               	movlw	low _HMIBoard
 33828  016F6E  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 33829  016F70  6ED9               	movwf	fsr2l,c
 33830  016F72  0E03               	movlw	high _HMIBoard
 33831  016F74  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 33832  016F76  6EDA               	movwf	fsr2h,c
 33833  016F78  0E00               	movlw	0
 33834  016F7A  8EDB               	bsf	plusw2,7,c
 33835  016F7C                     l1201:
 33836                           
 33837                           ; BSR set to: 0
 33838                           ;HMI.c: 237: }
 33839                           ;HMI.c: 239: pString++;
 33840                           
 33841                           ; BSR set to: 0
 33842  016F7C  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 33843  016F7E  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 33844                           
 33845                           ; BSR set to: 0
 33846                           ;HMI.c: 240: in++;
 33847  016F80  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 33848  016F82  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 33849                           
 33850                           ; BSR set to: 0
 33851                           ;HMI.c: 241: if (in>=6)
 33852  016F84  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 33853  016F86  E116               	bnz	l14953
 33854  016F88  0E06               	movlw	6
 33855  016F8A  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 33856  016F8C  B0D8               	btfsc	status,0,c
 33857  016F8E  D012               	goto	l1204
 33858  016F90                     l1202:
 33859                           
 33860                           ; BSR set to: 0
 33861                           
 33862                           ; BSR set to: 0
 33863                           
 33864                           ; BSR set to: 0
 33865  016F90  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 33866  016F94  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 33867  016F98  50DF               	movf	indf2,w,c
 33868  016F9A  B4D8               	btfsc	status,2,c
 33869  016F9C  D00B               	goto	l1204
 33870  016F9E  D7CA               	goto	l1200
 33871  016FA0                     
 33872                           ; BSR set to: 0
 33873                           ;HMI.c: 245: {
 33874                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 33875                           
 33876                           ; BSR set to: 0
 33877  016FA0  0EA0               	movlw	low _HMIBoard
 33878  016FA2  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 33879  016FA4  6ED9               	movwf	fsr2l,c
 33880  016FA6  0E03               	movlw	high _HMIBoard
 33881  016FA8  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 33882  016FAA  6EDA               	movwf	fsr2h,c
 33883  016FAC  0E00               	movlw	0
 33884  016FAE  6EDF               	movwf	indf2,c
 33885                           
 33886                           ; BSR set to: 0
 33887                           ;HMI.c: 247: in++;
 33888  016FB0  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 33889  016FB2  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 33890  016FB4                     l1204:
 33891  016FB4                     l14953:
 33892                           
 33893                           ; BSR set to: 0
 33894  016FB4  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 33895  016FB6  E105               	bnz	l1207
 33896  016FB8  0E06               	movlw	6
 33897  016FBA  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 33898  016FBC  B0D8               	btfsc	status,0,c
 33899  016FBE  0012               	return	
 33900  016FC0  D7EF               	goto	l1205
 33901  016FC2                     l1207:
 33902                           
 33903                           ; BSR set to: 0
 33904  016FC2  0012               	return		;funcret
 33905  016FC4                     __end_of_HMI_SetSegments:
 33906                           	opt stack 0
 33907                           tosu	equ	0xFFF
 33908                           tosh	equ	0xFFE
 33909                           tosl	equ	0xFFD
 33910                           pclath	equ	0xFFA
 33911                           tblptru	equ	0xFF8
 33912                           tblptrh	equ	0xFF7
 33913                           tblptrl	equ	0xFF6
 33914                           tablat	equ	0xFF5
 33915                           prodh	equ	0xFF4
 33916                           prodl	equ	0xFF3
 33917                           intcon	equ	0xFF2
 33918                           indf0	equ	0xFEF
 33919                           postinc0	equ	0xFEE
 33920                           fsr0h	equ	0xFEA
 33921                           fsr0l	equ	0xFE9
 33922                           wreg	equ	0xFE8
 33923                           indf1	equ	0xFE7
 33924                           postdec1	equ	0xFE5
 33925                           fsr1h	equ	0xFE2
 33926                           fsr1l	equ	0xFE1
 33927                           indf2	equ	0xFDF
 33928                           postinc2	equ	0xFDE
 33929                           postdec2	equ	0xFDD
 33930                           plusw2	equ	0xFDB
 33931                           fsr2h	equ	0xFDA
 33932                           fsr2l	equ	0xFD9
 33933                           status	equ	0xFD8
 33934                           
 33935 ;; *************** function _ToSegment *****************
 33936 ;; Defined at:
 33937 ;;		line 284 in file "Library/Types.c"
 33938 ;; Parameters:    Size  Location     Type
 33939 ;;  pCHR            1    wreg     unsigned char 
 33940 ;; Auto vars:     Size  Location     Type
 33941 ;;  pCHR            1    0[BANK0 ] unsigned char 
 33942 ;; Return value:  Size  Location     Type
 33943 ;;                  1    wreg      unsigned char 
 33944 ;; Registers used:
 33945 ;;		wreg, status,2, status,0
 33946 ;; Tracked objects:
 33947 ;;		On entry : 0/0
 33948 ;;		On exit  : 0/0
 33949 ;;		Unchanged: 0/0
 33950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33952 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33954 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33955 ;;Total ram usage:        1 bytes
 33956 ;; Hardware stack levels used:    1
 33957 ;; Hardware stack levels required when called:    7
 33958 ;; This function calls:
 33959 ;;		Nothing
 33960 ;; This function is called by:
 33961 ;;		_HMI_SetSegments
 33962 ;; This function uses a non-reentrant model
 33963 ;;
 33964                           
 33965                           	psect	text151
 33966  014488                     __ptext151:
 33967                           	opt stack 0
 33968  014488                     _ToSegment:
 33969                           	opt stack 19
 33970                           
 33971                           ; BSR set to: 0
 33972                           ;incstack = 0
 33973                           ;ToSegment@pCHR stored from wreg
 33974  014488  0100               	movlb	0	; () banked
 33975  01448A  6F60               	movwf	ToSegment@pCHR& (0+255),b
 33976                           
 33977                           ;Types.c: 286: switch(pCHR)
 33978  01448C  D07E               	goto	l853
 33979  01448E  0E3F               	movlw	63
 33980  014490  0012               	return	
 33981  014492  0E06               	movlw	6
 33982  014494  0012               	return	
 33983  014496  0E5B               	movlw	91
 33984  014498  0012               	return	
 33985  01449A  0E4F               	movlw	79
 33986  01449C  0012               	return	
 33987  01449E  0E66               	movlw	102
 33988  0144A0  0012               	return	
 33989  0144A2  0E6D               	movlw	109
 33990  0144A4  0012               	return	
 33991  0144A6  0E7D               	movlw	125
 33992  0144A8  0012               	return	
 33993  0144AA  0E07               	movlw	7
 33994  0144AC  0012               	return	
 33995  0144AE  0E7F               	movlw	127
 33996  0144B0  0012               	return	
 33997  0144B2  0E6F               	movlw	111
 33998  0144B4  0012               	return	
 33999  0144B6  0E5F               	movlw	95
 34000  0144B8  0012               	return	
 34001  0144BA  0E7C               	movlw	124
 34002  0144BC  0012               	return	
 34003  0144BE  0E58               	movlw	88
 34004  0144C0  0012               	return	
 34005  0144C2  0E5E               	movlw	94
 34006  0144C4  0012               	return	
 34007  0144C6  0E7B               	movlw	123
 34008  0144C8  0012               	return	
 34009  0144CA  0E71               	movlw	113
 34010  0144CC  0012               	return	
 34011  0144CE  0E6F               	movlw	111
 34012  0144D0  0012               	return	
 34013  0144D2  0E74               	movlw	116
 34014  0144D4  0012               	return	
 34015  0144D6  0E04               	movlw	4
 34016  0144D8  0012               	return	
 34017  0144DA  0E0E               	movlw	14
 34018  0144DC  0012               	return	
 34019  0144DE  0E7A               	movlw	122
 34020  0144E0  0012               	return	
 34021  0144E2  0E06               	movlw	6
 34022  0144E4  0012               	return	
 34023  0144E6  0E14               	movlw	20
 34024  0144E8  0012               	return	
 34025  0144EA  0E54               	movlw	84
 34026  0144EC  0012               	return	
 34027  0144EE  0E5C               	movlw	92
 34028  0144F0  0012               	return	
 34029  0144F2  0E73               	movlw	115
 34030  0144F4  0012               	return	
 34031  0144F6  0E67               	movlw	103
 34032  0144F8  0012               	return	
 34033  0144FA  0E50               	movlw	80
 34034  0144FC  0012               	return	
 34035  0144FE  0E6D               	movlw	109
 34036  014500  0012               	return	
 34037  014502  0E78               	movlw	120
 34038  014504  0012               	return	
 34039  014506  0E1C               	movlw	28
 34040  014508  0012               	return	
 34041  01450A  0E62               	movlw	98
 34042  01450C  0012               	return	
 34043  01450E  0E2A               	movlw	42
 34044  014510  0012               	return	
 34045  014512  0E64               	movlw	100
 34046  014514  0012               	return	
 34047  014516  0E6E               	movlw	110
 34048  014518  0012               	return	
 34049  01451A  0E5B               	movlw	91
 34050  01451C  0012               	return	
 34051  01451E  0E77               	movlw	119
 34052  014520  0012               	return	
 34053  014522  0E7F               	movlw	127
 34054  014524  0012               	return	
 34055  014526  0E39               	movlw	57
 34056  014528  0012               	return	
 34057  01452A  0E3F               	movlw	63
 34058  01452C  0012               	return	
 34059  01452E  0E79               	movlw	121
 34060  014530  0012               	return	
 34061  014532  0E71               	movlw	113
 34062  014534  0012               	return	
 34063  014536  0E3D               	movlw	61
 34064  014538  0012               	return	
 34065  01453A  0E76               	movlw	118
 34066  01453C  0012               	return	
 34067  01453E  0E06               	movlw	6
 34068  014540  0012               	return	
 34069  014542  0E1E               	movlw	30
 34070  014544  0012               	return	
 34071  014546  0E57               	movlw	87
 34072  014548  0012               	return	
 34073  01454A  0E38               	movlw	56
 34074  01454C  0012               	return	
 34075  01454E  0E76               	movlw	118
 34076  014550  0012               	return	
 34077  014552  0E76               	movlw	118
 34078  014554  0012               	return	
 34079  014556  0E3F               	movlw	63
 34080  014558  0012               	return	
 34081  01455A  0E73               	movlw	115
 34082  01455C  0012               	return	
 34083  01455E  0E3F               	movlw	63
 34084  014560  0012               	return	
 34085  014562  0E77               	movlw	119
 34086  014564  0012               	return	
 34087  014566  0E6D               	movlw	109
 34088  014568  0012               	return	
 34089  01456A  0E31               	movlw	49
 34090  01456C  0012               	return	
 34091  01456E  0E3E               	movlw	62
 34092  014570  0012               	return	
 34093  014572  0E3E               	movlw	62
 34094  014574  0012               	return	
 34095  014576  0E7E               	movlw	126
 34096  014578  0012               	return	
 34097  01457A  0E76               	movlw	118
 34098  01457C  0012               	return	
 34099  01457E  0E66               	movlw	102
 34100  014580  0012               	return	
 34101  014582  0E5B               	movlw	91
 34102  014584  0012               	return	
 34103  014586  0E80               	movlw	128
 34104  014588  0012               	return	
 34105  01458A                     l853:
 34106  01458A  0100               	movlb	0	; () banked
 34107  01458C  5160               	movf	ToSegment@pCHR& (0+255),w,b
 34108                           
 34109                           ; Switch size 1, requested type "space"
 34110                           ; Number of cases is 63, Range of values is 46 to 122
 34111                           ; switch strategies available:
 34112                           ; Name         Instructions Cycles
 34113                           ; simple_byte          190    96 (average)
 34114                           ;	Chosen strategy is simple_byte
 34115  01458E  0A2E               	xorlw	46	; case 46
 34116  014590  B4D8               	btfsc	status,2,c
 34117  014592  D7F9               	goto	l917
 34118  014594  0A1E               	xorlw	30	; case 48
 34119  014596  B4D8               	btfsc	status,2,c
 34120  014598  D77A               	goto	l854
 34121  01459A  0A01               	xorlw	1	; case 49
 34122  01459C  B4D8               	btfsc	status,2,c
 34123  01459E  D779               	goto	l856
 34124  0145A0  0A03               	xorlw	3	; case 50
 34125  0145A2  B4D8               	btfsc	status,2,c
 34126  0145A4  D778               	goto	l857
 34127  0145A6  0A01               	xorlw	1	; case 51
 34128  0145A8  B4D8               	btfsc	status,2,c
 34129  0145AA  D777               	goto	l858
 34130  0145AC  0A07               	xorlw	7	; case 52
 34131  0145AE  B4D8               	btfsc	status,2,c
 34132  0145B0  D776               	goto	l859
 34133  0145B2  0A01               	xorlw	1	; case 53
 34134  0145B4  B4D8               	btfsc	status,2,c
 34135  0145B6  D775               	goto	l860
 34136  0145B8  0A03               	xorlw	3	; case 54
 34137  0145BA  B4D8               	btfsc	status,2,c
 34138  0145BC  D774               	goto	l861
 34139  0145BE  0A01               	xorlw	1	; case 55
 34140  0145C0  B4D8               	btfsc	status,2,c
 34141  0145C2  D773               	goto	l862
 34142  0145C4  0A0F               	xorlw	15	; case 56
 34143  0145C6  B4D8               	btfsc	status,2,c
 34144  0145C8  D772               	goto	l863
 34145  0145CA  0A01               	xorlw	1	; case 57
 34146  0145CC  B4D8               	btfsc	status,2,c
 34147  0145CE  D771               	goto	l864
 34148  0145D0  0A78               	xorlw	120	; case 65
 34149  0145D2  B4D8               	btfsc	status,2,c
 34150  0145D4  D7A4               	goto	l891
 34151  0145D6  0A03               	xorlw	3	; case 66
 34152  0145D8  B4D8               	btfsc	status,2,c
 34153  0145DA  D7A3               	goto	l892
 34154  0145DC  0A01               	xorlw	1	; case 67
 34155  0145DE  B4D8               	btfsc	status,2,c
 34156  0145E0  D7A2               	goto	l893
 34157  0145E2  0A07               	xorlw	7	; case 68
 34158  0145E4  B4D8               	btfsc	status,2,c
 34159  0145E6  D7A1               	goto	l894
 34160  0145E8  0A01               	xorlw	1	; case 69
 34161  0145EA  B4D8               	btfsc	status,2,c
 34162  0145EC  D7A0               	goto	l895
 34163  0145EE  0A03               	xorlw	3	; case 70
 34164  0145F0  B4D8               	btfsc	status,2,c
 34165  0145F2  D79F               	goto	l896
 34166  0145F4  0A01               	xorlw	1	; case 71
 34167  0145F6  B4D8               	btfsc	status,2,c
 34168  0145F8  D79E               	goto	l897
 34169  0145FA  0A0F               	xorlw	15	; case 72
 34170  0145FC  B4D8               	btfsc	status,2,c
 34171  0145FE  D79D               	goto	l898
 34172  014600  0A01               	xorlw	1	; case 73
 34173  014602  B4D8               	btfsc	status,2,c
 34174  014604  D79C               	goto	l899
 34175  014606  0A03               	xorlw	3	; case 74
 34176  014608  B4D8               	btfsc	status,2,c
 34177  01460A  D79B               	goto	l900
 34178  01460C  0A01               	xorlw	1	; case 75
 34179  01460E  B4D8               	btfsc	status,2,c
 34180  014610  D79A               	goto	l901
 34181  014612  0A07               	xorlw	7	; case 76
 34182  014614  B4D8               	btfsc	status,2,c
 34183  014616  D799               	goto	l902
 34184  014618  0A01               	xorlw	1	; case 77
 34185  01461A  B4D8               	btfsc	status,2,c
 34186  01461C  D798               	goto	l903
 34187  01461E  0A03               	xorlw	3	; case 78
 34188  014620  B4D8               	btfsc	status,2,c
 34189  014622  D797               	goto	l904
 34190  014624  0A01               	xorlw	1	; case 79
 34191  014626  B4D8               	btfsc	status,2,c
 34192  014628  D796               	goto	l905
 34193  01462A  0A1F               	xorlw	31	; case 80
 34194  01462C  B4D8               	btfsc	status,2,c
 34195  01462E  D795               	goto	l906
 34196  014630  0A01               	xorlw	1	; case 81
 34197  014632  B4D8               	btfsc	status,2,c
 34198  014634  D794               	goto	l907
 34199  014636  0A03               	xorlw	3	; case 82
 34200  014638  B4D8               	btfsc	status,2,c
 34201  01463A  D793               	goto	l908
 34202  01463C  0A01               	xorlw	1	; case 83
 34203  01463E  B4D8               	btfsc	status,2,c
 34204  014640  D792               	goto	l909
 34205  014642  0A07               	xorlw	7	; case 84
 34206  014644  B4D8               	btfsc	status,2,c
 34207  014646  D791               	goto	l910
 34208  014648  0A01               	xorlw	1	; case 85
 34209  01464A  B4D8               	btfsc	status,2,c
 34210  01464C  D790               	goto	l911
 34211  01464E  0A03               	xorlw	3	; case 86
 34212  014650  B4D8               	btfsc	status,2,c
 34213  014652  D78F               	goto	l912
 34214  014654  0A01               	xorlw	1	; case 87
 34215  014656  B4D8               	btfsc	status,2,c
 34216  014658  D78E               	goto	l913
 34217  01465A  0A0F               	xorlw	15	; case 88
 34218  01465C  B4D8               	btfsc	status,2,c
 34219  01465E  D78D               	goto	l914
 34220  014660  0A01               	xorlw	1	; case 89
 34221  014662  B4D8               	btfsc	status,2,c
 34222  014664  D78C               	goto	l915
 34223  014666  0A03               	xorlw	3	; case 90
 34224  014668  B4D8               	btfsc	status,2,c
 34225  01466A  D78B               	goto	l916
 34226  01466C  0A3B               	xorlw	59	; case 97
 34227  01466E  B4D8               	btfsc	status,2,c
 34228  014670  D722               	goto	l865
 34229  014672  0A03               	xorlw	3	; case 98
 34230  014674  B4D8               	btfsc	status,2,c
 34231  014676  D721               	goto	l866
 34232  014678  0A01               	xorlw	1	; case 99
 34233  01467A  B4D8               	btfsc	status,2,c
 34234  01467C  D720               	goto	l867
 34235  01467E  0A07               	xorlw	7	; case 100
 34236  014680  B4D8               	btfsc	status,2,c
 34237  014682  D71F               	goto	l868
 34238  014684  0A01               	xorlw	1	; case 101
 34239  014686  B4D8               	btfsc	status,2,c
 34240  014688  D71E               	goto	l869
 34241  01468A  0A03               	xorlw	3	; case 102
 34242  01468C  B4D8               	btfsc	status,2,c
 34243  01468E  D71D               	goto	l870
 34244  014690  0A01               	xorlw	1	; case 103
 34245  014692  B4D8               	btfsc	status,2,c
 34246  014694  D71C               	goto	l871
 34247  014696  0A0F               	xorlw	15	; case 104
 34248  014698  B4D8               	btfsc	status,2,c
 34249  01469A  D71B               	goto	l872
 34250  01469C  0A01               	xorlw	1	; case 105
 34251  01469E  B4D8               	btfsc	status,2,c
 34252  0146A0  D71A               	goto	l873
 34253  0146A2  0A03               	xorlw	3	; case 106
 34254  0146A4  B4D8               	btfsc	status,2,c
 34255  0146A6  D719               	goto	l874
 34256  0146A8  0A01               	xorlw	1	; case 107
 34257  0146AA  B4D8               	btfsc	status,2,c
 34258  0146AC  D718               	goto	l875
 34259  0146AE  0A07               	xorlw	7	; case 108
 34260  0146B0  B4D8               	btfsc	status,2,c
 34261  0146B2  D717               	goto	l876
 34262  0146B4  0A01               	xorlw	1	; case 109
 34263  0146B6  B4D8               	btfsc	status,2,c
 34264  0146B8  D716               	goto	l877
 34265  0146BA  0A03               	xorlw	3	; case 110
 34266  0146BC  B4D8               	btfsc	status,2,c
 34267  0146BE  D715               	goto	l878
 34268  0146C0  0A01               	xorlw	1	; case 111
 34269  0146C2  B4D8               	btfsc	status,2,c
 34270  0146C4  D714               	goto	l879
 34271  0146C6  0A1F               	xorlw	31	; case 112
 34272  0146C8  B4D8               	btfsc	status,2,c
 34273  0146CA  D713               	goto	l880
 34274  0146CC  0A01               	xorlw	1	; case 113
 34275  0146CE  B4D8               	btfsc	status,2,c
 34276  0146D0  D712               	goto	l881
 34277  0146D2  0A03               	xorlw	3	; case 114
 34278  0146D4  B4D8               	btfsc	status,2,c
 34279  0146D6  D711               	goto	l882
 34280  0146D8  0A01               	xorlw	1	; case 115
 34281  0146DA  B4D8               	btfsc	status,2,c
 34282  0146DC  D710               	goto	l883
 34283  0146DE  0A07               	xorlw	7	; case 116
 34284  0146E0  B4D8               	btfsc	status,2,c
 34285  0146E2  D70F               	goto	l884
 34286  0146E4  0A01               	xorlw	1	; case 117
 34287  0146E6  B4D8               	btfsc	status,2,c
 34288  0146E8  D70E               	goto	l885
 34289  0146EA  0A03               	xorlw	3	; case 118
 34290  0146EC  B4D8               	btfsc	status,2,c
 34291  0146EE  D70D               	goto	l886
 34292  0146F0  0A01               	xorlw	1	; case 119
 34293  0146F2  B4D8               	btfsc	status,2,c
 34294  0146F4  D70C               	goto	l887
 34295  0146F6  0A0F               	xorlw	15	; case 120
 34296  0146F8  B4D8               	btfsc	status,2,c
 34297  0146FA  D70B               	goto	l888
 34298  0146FC  0A01               	xorlw	1	; case 121
 34299  0146FE  B4D8               	btfsc	status,2,c
 34300  014700  D70A               	goto	l889
 34301  014702  0A03               	xorlw	3	; case 122
 34302  014704  B4D8               	btfsc	status,2,c
 34303  014706  D709               	goto	l890
 34304                           
 34305                           ;Types.c: 354: return 0;
 34306                           
 34307                           ; BSR set to: 0
 34308  014708  0E00               	movlw	0
 34309  01470A  0012               	return	
 34310  01470C                     __end_of_ToSegment:
 34311                           	opt stack 0
 34312                           tosu	equ	0xFFF
 34313                           tosh	equ	0xFFE
 34314                           tosl	equ	0xFFD
 34315                           pclath	equ	0xFFA
 34316                           tblptru	equ	0xFF8
 34317                           tblptrh	equ	0xFF7
 34318                           tblptrl	equ	0xFF6
 34319                           tablat	equ	0xFF5
 34320                           prodh	equ	0xFF4
 34321                           prodl	equ	0xFF3
 34322                           intcon	equ	0xFF2
 34323                           indf0	equ	0xFEF
 34324                           postinc0	equ	0xFEE
 34325                           fsr0h	equ	0xFEA
 34326                           fsr0l	equ	0xFE9
 34327                           wreg	equ	0xFE8
 34328                           indf1	equ	0xFE7
 34329                           postdec1	equ	0xFE5
 34330                           fsr1h	equ	0xFE2
 34331                           fsr1l	equ	0xFE1
 34332                           indf2	equ	0xFDF
 34333                           postinc2	equ	0xFDE
 34334                           postdec2	equ	0xFDD
 34335                           plusw2	equ	0xFDB
 34336                           fsr2h	equ	0xFDA
 34337                           fsr2l	equ	0xFD9
 34338                           status	equ	0xFD8
 34339                           
 34340 ;; *************** function _HMI_Render *****************
 34341 ;; Defined at:
 34342 ;;		line 138 in file "HMI.c"
 34343 ;; Parameters:    Size  Location     Type
 34344 ;;		None
 34345 ;; Auto vars:     Size  Location     Type
 34346 ;;  a               2    8[BANK0 ] unsigned short 
 34347 ;; Return value:  Size  Location     Type
 34348 ;;                  1    wreg      void 
 34349 ;; Registers used:
 34350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 34351 ;; Tracked objects:
 34352 ;;		On entry : 0/0
 34353 ;;		On exit  : 0/0
 34354 ;;		Unchanged: 0/0
 34355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34357 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34359 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34360 ;;Total ram usage:        2 bytes
 34361 ;; Hardware stack levels used:    1
 34362 ;; Hardware stack levels required when called:    9
 34363 ;; This function calls:
 34364 ;;		_OutSeg
 34365 ;; This function is called by:
 34366 ;;		_main
 34367 ;;		_ADCAverage
 34368 ;; This function uses a non-reentrant model
 34369 ;;
 34370                           
 34371                           	psect	text152
 34372  018622                     __ptext152:
 34373                           	opt stack 0
 34374  018622                     _HMI_Render:
 34375                           	opt stack 19
 34376                           
 34377                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 34378                           
 34379                           ;incstack = 0
 34380  018622  0E00               	movlw	0
 34381  018624  0100               	movlb	0	; () banked
 34382  018626  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 34383  018628  0E00               	movlw	0
 34384  01862A  6F68               	movwf	HMI_Render@a& (0+255),b
 34385  01862C                     l15113:
 34386                           
 34387                           ; BSR set to: 0
 34388  01862C  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 34389  01862E  E113               	bnz	l1158
 34390  018630  0E08               	movlw	8
 34391  018632  5D68               	subwf	HMI_Render@a& (0+255),w,b
 34392  018634  B0D8               	btfsc	status,0,c
 34393  018636  0012               	return	
 34394                           
 34395                           ; BSR set to: 0
 34396                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 34397                           
 34398                           ; BSR set to: 0
 34399                           
 34400                           ; BSR set to: 0
 34401  018638  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 34402  01863C  0EA0               	movlw	low _HMIBoard
 34403  01863E  2568               	addwf	HMI_Render@a& (0+255),w,b
 34404  018640  6ED9               	movwf	fsr2l,c
 34405  018642  0E03               	movlw	high _HMIBoard
 34406  018644  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 34407  018646  6EDA               	movwf	fsr2h,c
 34408  018648  50DF               	movf	indf2,w,c
 34409  01864A  EC48  F0BC         	call	_OutSeg
 34410  01864E  0100               	movlb	0	; () banked
 34411  018650  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 34412  018652  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 34413  018654  D7EB               	goto	l15113
 34414  018656                     l1158:
 34415                           
 34416                           ; BSR set to: 0
 34417  018656  0012               	return		;funcret
 34418  018658                     __end_of_HMI_Render:
 34419                           	opt stack 0
 34420                           tosu	equ	0xFFF
 34421                           tosh	equ	0xFFE
 34422                           tosl	equ	0xFFD
 34423                           pclath	equ	0xFFA
 34424                           tblptru	equ	0xFF8
 34425                           tblptrh	equ	0xFF7
 34426                           tblptrl	equ	0xFF6
 34427                           tablat	equ	0xFF5
 34428                           prodh	equ	0xFF4
 34429                           prodl	equ	0xFF3
 34430                           intcon	equ	0xFF2
 34431                           indf0	equ	0xFEF
 34432                           postinc0	equ	0xFEE
 34433                           fsr0h	equ	0xFEA
 34434                           fsr0l	equ	0xFE9
 34435                           wreg	equ	0xFE8
 34436                           indf1	equ	0xFE7
 34437                           postdec1	equ	0xFE5
 34438                           fsr1h	equ	0xFE2
 34439                           fsr1l	equ	0xFE1
 34440                           indf2	equ	0xFDF
 34441                           postinc2	equ	0xFDE
 34442                           postdec2	equ	0xFDD
 34443                           plusw2	equ	0xFDB
 34444                           fsr2h	equ	0xFDA
 34445                           fsr2l	equ	0xFD9
 34446                           status	equ	0xFD8
 34447                           
 34448 ;; *************** function _OutSeg *****************
 34449 ;; Defined at:
 34450 ;;		line 54 in file "HMI.c"
 34451 ;; Parameters:    Size  Location     Type
 34452 ;;  pInput          1    wreg     unsigned char 
 34453 ;;  pSegment        1    3[BANK0 ] unsigned char 
 34454 ;; Auto vars:     Size  Location     Type
 34455 ;;  pInput          1    6[BANK0 ] unsigned char 
 34456 ;;  out             1    7[BANK0 ] volatile unsigned char 
 34457 ;; Return value:  Size  Location     Type
 34458 ;;                  1    wreg      void 
 34459 ;; Registers used:
 34460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 34461 ;; Tracked objects:
 34462 ;;		On entry : 0/0
 34463 ;;		On exit  : 0/0
 34464 ;;		Unchanged: 0/0
 34465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34466 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34467 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34468 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34469 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34470 ;;Total ram usage:        5 bytes
 34471 ;; Hardware stack levels used:    1
 34472 ;; Hardware stack levels required when called:    8
 34473 ;; This function calls:
 34474 ;;		_SPI_Send
 34475 ;; This function is called by:
 34476 ;;		_HMI_Render
 34477 ;;		_HMI_GRender
 34478 ;; This function uses a non-reentrant model
 34479 ;;
 34480                           
 34481                           	psect	text153
 34482  017890                     __ptext153:
 34483                           	opt stack 0
 34484  017890                     _OutSeg:
 34485                           	opt stack 19
 34486                           
 34487                           ; BSR set to: 0
 34488                           ;incstack = 0
 34489                           ;OutSeg@pInput stored from wreg
 34490  017890  0100               	movlb	0	; () banked
 34491  017892  6F66               	movwf	OutSeg@pInput& (0+255),b
 34492                           
 34493                           ;HMI.c: 58: static UINT8 cur;
 34494                           ;HMI.c: 59: volatile UINT8 out;
 34495                           ;HMI.c: 60: static UINT8 segset;
 34496                           ;HMI.c: 61: static UINT8 a;
 34497                           ;HMI.c: 83: if (pSegment <= 8)
 34498  017894  0E09               	movlw	9
 34499  017896  0100               	movlb	0	; () banked
 34500  017898  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 34501  01789A  0012               	return	
 34502                           
 34503                           ; BSR set to: 0
 34504                           ;HMI.c: 84: {
 34505                           ;HMI.c: 85: cur = pInput;
 34506  01789C  C066  F044         	movff	OutSeg@pInput,OutSeg@cur
 34507                           
 34508                           ; BSR set to: 0
 34509                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 34510  0178A0  0E00               	movlw	0
 34511  0178A2  6E42               	movwf	OutSeg@a,c
 34512  0178A4                     l14915:
 34513                           
 34514                           ; BSR set to: 0
 34515  0178A4  0E07               	movlw	7
 34516  0178A6  6442               	cpfsgt	OutSeg@a,c
 34517  0178A8  D001               	goto	l1146
 34518  0178AA  D01F               	goto	u12270
 34519  0178AC                     l1146:
 34520                           
 34521                           ;HMI.c: 87: {
 34522                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 34523                           
 34524                           ; BSR set to: 0
 34525  0178AC  C044  F064         	movff	OutSeg@cur,??_OutSeg
 34526  0178B0  0E01               	movlw	1
 34527  0178B2  0100               	movlb	0	; () banked
 34528  0178B4  1764               	andwf	??_OutSeg& (0+255),f,b
 34529  0178B6  0E06               	movlw	6
 34530  0178B8  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 34531  0178BA                     u12265:
 34532  0178BA  90D8               	bcf	status,0,c
 34533  0178BC  3764               	rlcf	??_OutSeg& (0+255),f,b
 34534  0178BE  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 34535  0178C0  D7FC               	goto	u12265
 34536  0178C2  5164               	movf	??_OutSeg& (0+255),w,b
 34537  0178C4  6E43               	movwf	OutSeg@segset,c
 34538                           
 34539                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 34540  0178C6  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 34541  0178C8  42E8               	rrncf	wreg,f,c
 34542  0178CA  0BF8               	andlw	248
 34543  0178CC  1042               	iorwf	OutSeg@a,w,c
 34544  0178CE  1043               	iorwf	OutSeg@segset,w,c
 34545  0178D0  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 34546                           
 34547                           ;HMI.c: 90: cur >>= 1;
 34548  0178D2  90D8               	bcf	status,0,c
 34549  0178D4  3244               	rrcf	OutSeg@cur,f,c
 34550                           
 34551                           ; BSR set to: 0
 34552                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 34553  0178D6  0EC8               	movlw	low _SPI1
 34554  0178D8  6F60               	movwf	SPI_Send@pInput& (0+255),b
 34555  0178DA  0E02               	movlw	high _SPI1
 34556  0178DC  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 34557  0178DE  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 34558  0178E2  ECB5  F0BC         	call	_SPI_Send	;wreg free
 34559  0178E6  2A42               	incf	OutSeg@a,f,c
 34560  0178E8  D7DD               	goto	l14915
 34561  0178EA                     u12270:
 34562                           
 34563                           ;HMI.c: 96: }
 34564                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 34565  0178EA  0EC8               	movlw	low _SPI1
 34566  0178EC  0100               	movlb	0	; () banked
 34567  0178EE  6F60               	movwf	SPI_Send@pInput& (0+255),b
 34568  0178F0  0E02               	movlw	high _SPI1
 34569  0178F2  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 34570  0178F4  0E00               	movlw	0
 34571  0178F6  6F62               	movwf	SPI_Send@pData& (0+255),b
 34572  0178F8  ECB5  F0BC         	call	_SPI_Send	;wreg free
 34573  0178FC  0012               	return	
 34574  0178FE                     __end_of_OutSeg:
 34575                           	opt stack 0
 34576                           tosu	equ	0xFFF
 34577                           tosh	equ	0xFFE
 34578                           tosl	equ	0xFFD
 34579                           pclath	equ	0xFFA
 34580                           tblptru	equ	0xFF8
 34581                           tblptrh	equ	0xFF7
 34582                           tblptrl	equ	0xFF6
 34583                           tablat	equ	0xFF5
 34584                           prodh	equ	0xFF4
 34585                           prodl	equ	0xFF3
 34586                           intcon	equ	0xFF2
 34587                           indf0	equ	0xFEF
 34588                           postinc0	equ	0xFEE
 34589                           fsr0h	equ	0xFEA
 34590                           fsr0l	equ	0xFE9
 34591                           wreg	equ	0xFE8
 34592                           indf1	equ	0xFE7
 34593                           postdec1	equ	0xFE5
 34594                           fsr1h	equ	0xFE2
 34595                           fsr1l	equ	0xFE1
 34596                           indf2	equ	0xFDF
 34597                           postinc2	equ	0xFDE
 34598                           postdec2	equ	0xFDD
 34599                           plusw2	equ	0xFDB
 34600                           fsr2h	equ	0xFDA
 34601                           fsr2l	equ	0xFD9
 34602                           status	equ	0xFD8
 34603                           
 34604 ;; *************** function _SPI_Send *****************
 34605 ;; Defined at:
 34606 ;;		line 226 in file "Library/SPI.c"
 34607 ;; Parameters:    Size  Location     Type
 34608 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 34609 ;;		 -> SPI1(11), SPI2(11), 
 34610 ;;  pData           1    2[BANK0 ] unsigned char 
 34611 ;; Auto vars:     Size  Location     Type
 34612 ;;		None
 34613 ;; Return value:  Size  Location     Type
 34614 ;;                  1    wreg      unsigned char 
 34615 ;; Registers used:
 34616 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 34617 ;; Tracked objects:
 34618 ;;		On entry : 0/0
 34619 ;;		On exit  : 0/0
 34620 ;;		Unchanged: 0/0
 34621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34622 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34625 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34626 ;;Total ram usage:        3 bytes
 34627 ;; Hardware stack levels used:    1
 34628 ;; Hardware stack levels required when called:    7
 34629 ;; This function calls:
 34630 ;;		Nothing
 34631 ;; This function is called by:
 34632 ;;		_LCD_Write
 34633 ;;		_OutSeg
 34634 ;; This function uses a non-reentrant model
 34635 ;;
 34636                           
 34637                           	psect	text154
 34638  01796A                     __ptext154:
 34639                           	opt stack 0
 34640  01796A                     _SPI_Send:
 34641                           	opt stack 17
 34642                           
 34643                           ;SPI.c: 253: switch (pInput->mChannel)
 34644                           
 34645                           ;incstack = 0
 34646  01796A  D026               	goto	l678
 34647  01796C                     
 34648                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 34649  01796C  C18E  FFD9         	movff	_PortC+4,fsr2l
 34650  017970  C18F  FFDA         	movff	_PortC+5,fsr2h
 34651  017974  0101               	movlb	1	; () banked
 34652  017976  94DF               	bcf	indf2,2,c
 34653                           
 34654                           ; BSR set to: 1
 34655                           ;SPI.c: 257: SSP1BUF = pData;
 34656  017978  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 34657  01797C                     
 34658                           ; BSR set to: 1
 34659  01797C  A0C7               	btfss	4039,0,c	;volatile
 34660  01797E  D7FE               	goto	l681
 34661                           
 34662                           ;SPI.c: 259: pData = SSP1BUF;
 34663  017980  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 34664                           
 34665                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 34666  017984  C18E  FFD9         	movff	_PortC+4,fsr2l
 34667  017988  C18F  FFDA         	movff	_PortC+5,fsr2h
 34668  01798C  0101               	movlb	1	; () banked
 34669  01798E  84DF               	bsf	indf2,2,c
 34670                           
 34671                           ; BSR set to: 1
 34672                           ;SPI.c: 261: return pData;
 34673                           ;	Return value of _SPI_Send is never used
 34674  017990  0012               	return	
 34675  017992                     
 34676                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 34677                           
 34678                           ; BSR set to: 1
 34679  017992  C17A  FFD9         	movff	_PortD+4,fsr2l
 34680  017996  C17B  FFDA         	movff	_PortD+5,fsr2h
 34681  01799A  0101               	movlb	1	; () banked
 34682  01799C  9EDF               	bcf	indf2,7,c
 34683                           
 34684                           ; BSR set to: 1
 34685                           ;SPI.c: 264: SSP2BUF = pData;
 34686  01799E  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 34687  0179A2                     
 34688                           ; BSR set to: 1
 34689  0179A2  A06D               	btfss	3949,0,c	;volatile
 34690  0179A4  D7FE               	goto	l686
 34691                           
 34692                           ;SPI.c: 266: pData = SSP2BUF;
 34693  0179A6  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 34694                           
 34695                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 34696  0179AA  C17A  FFD9         	movff	_PortD+4,fsr2l
 34697  0179AE  C17B  FFDA         	movff	_PortD+5,fsr2h
 34698  0179B2  0101               	movlb	1	; () banked
 34699  0179B4  8EDF               	bsf	indf2,7,c
 34700                           
 34701                           ; BSR set to: 1
 34702                           ;SPI.c: 269: };
 34703                           
 34704                           ; BSR set to: 1
 34705                           ;SPI.c: 268: return pData;
 34706                           ;	Return value of _SPI_Send is never used
 34707  0179B6  0012               	return	
 34708  0179B8                     l678:
 34709                           
 34710                           ; BSR set to: 1
 34711  0179B8  0100               	movlb	0	; () banked
 34712  0179BA  EE20 F002          	lfsr	2,2
 34713  0179BE  5160               	movf	SPI_Send@pInput& (0+255),w,b
 34714  0179C0  26D9               	addwf	fsr2l,f,c
 34715  0179C2  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 34716  0179C4  22DA               	addwfc	fsr2h,f,c
 34717  0179C6  50DF               	movf	indf2,w,c
 34718                           
 34719                           ; Switch size 1, requested type "space"
 34720                           ; Number of cases is 2, Range of values is 0 to 1
 34721                           ; switch strategies available:
 34722                           ; Name         Instructions Cycles
 34723                           ; simple_byte            7     4 (average)
 34724                           ;	Chosen strategy is simple_byte
 34725  0179C8  0A00               	xorlw	0	; case 0
 34726  0179CA  B4D8               	btfsc	status,2,c
 34727  0179CC  D7CF               	goto	l679
 34728  0179CE  0A01               	xorlw	1	; case 1
 34729  0179D0  A4D8               	btfss	status,2,c
 34730  0179D2  0012               	return	
 34731  0179D4  D7DE               	goto	l684
 34732  0179D6                     __end_of_SPI_Send:
 34733                           	opt stack 0
 34734                           tosu	equ	0xFFF
 34735                           tosh	equ	0xFFE
 34736                           tosl	equ	0xFFD
 34737                           pclath	equ	0xFFA
 34738                           tblptru	equ	0xFF8
 34739                           tblptrh	equ	0xFF7
 34740                           tblptrl	equ	0xFF6
 34741                           tablat	equ	0xFF5
 34742                           prodh	equ	0xFF4
 34743                           prodl	equ	0xFF3
 34744                           intcon	equ	0xFF2
 34745                           indf0	equ	0xFEF
 34746                           postinc0	equ	0xFEE
 34747                           fsr0h	equ	0xFEA
 34748                           fsr0l	equ	0xFE9
 34749                           wreg	equ	0xFE8
 34750                           indf1	equ	0xFE7
 34751                           postdec1	equ	0xFE5
 34752                           fsr1h	equ	0xFE2
 34753                           fsr1l	equ	0xFE1
 34754                           indf2	equ	0xFDF
 34755                           postinc2	equ	0xFDE
 34756                           postdec2	equ	0xFDD
 34757                           plusw2	equ	0xFDB
 34758                           fsr2h	equ	0xFDA
 34759                           fsr2l	equ	0xFD9
 34760                           status	equ	0xFD8
 34761                           
 34762 ;; *************** function _FunctReadADC *****************
 34763 ;; Defined at:
 34764 ;;		line 186 in file "dans.c"
 34765 ;; Parameters:    Size  Location     Type
 34766 ;;  channel         2    0[BANK0 ] int 
 34767 ;; Auto vars:     Size  Location     Type
 34768 ;;		None
 34769 ;; Return value:  Size  Location     Type
 34770 ;;                  2    0[BANK0 ] int 
 34771 ;; Registers used:
 34772 ;;		wreg, status,2, status,0
 34773 ;; Tracked objects:
 34774 ;;		On entry : 0/0
 34775 ;;		On exit  : 0/0
 34776 ;;		Unchanged: 0/0
 34777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34778 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34781 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34782 ;;Total ram usage:        2 bytes
 34783 ;; Hardware stack levels used:    1
 34784 ;; Hardware stack levels required when called:    7
 34785 ;; This function calls:
 34786 ;;		Nothing
 34787 ;; This function is called by:
 34788 ;;		_ADCAverage
 34789 ;; This function uses a non-reentrant model
 34790 ;;
 34791                           
 34792                           	psect	text155
 34793  018500                     __ptext155:
 34794                           	opt stack 0
 34795  018500                     _FunctReadADC:
 34796                           	opt stack 21
 34797                           
 34798                           ;dans.c: 188: if(channel>4) return 0;
 34799                           
 34800                           ;incstack = 0
 34801  018500  0100               	movlb	0	; () banked
 34802  018502  BF61               	btfsc	(FunctReadADC@channel+1)& (0+255),7,b
 34803  018504  D00B               	goto	l2350
 34804  018506  5161               	movf	(FunctReadADC@channel+1)& (0+255),w,b
 34805  018508  E104               	bnz	u12630
 34806  01850A  0E05               	movlw	5
 34807  01850C  5D60               	subwf	FunctReadADC@channel& (0+255),w,b
 34808  01850E  A0D8               	btfss	status,0,c
 34809  018510  D005               	goto	l2350
 34810  018512                     u12630:
 34811                           
 34812                           ; BSR set to: 0
 34813  018512  0E00               	movlw	0
 34814  018514  6F61               	movwf	(?_FunctReadADC+1)& (0+255),b
 34815  018516  0E00               	movlw	0
 34816  018518  6F60               	movwf	?_FunctReadADC& (0+255),b
 34817                           
 34818                           ; BSR set to: 0
 34819  01851A  0012               	return	
 34820  01851C                     l2350:
 34821                           
 34822                           ; BSR set to: 0
 34823                           ;dans.c: 189: ADCON0=0x00;
 34824                           
 34825                           ; BSR set to: 0
 34826  01851C  0E00               	movlw	0
 34827  01851E  6EC2               	movwf	4034,c	;volatile
 34828                           
 34829                           ; BSR set to: 0
 34830                           ;dans.c: 190: ADCON0=(channel<<2);
 34831  018520  4560               	rlncf	FunctReadADC@channel& (0+255),w,b
 34832  018522  46E8               	rlncf	wreg,f,c
 34833  018524  0BFC               	andlw	252
 34834  018526  6EC2               	movwf	4034,c	;volatile
 34835                           
 34836                           ; BSR set to: 0
 34837                           ;dans.c: 191: ADON=1;
 34838  018528  80C2               	bsf	4034,0,c	;volatile
 34839                           
 34840                           ; BSR set to: 0
 34841                           ;dans.c: 192: GODONE=1;
 34842  01852A  82C2               	bsf	4034,1,c	;volatile
 34843  01852C                     
 34844                           ; BSR set to: 0
 34845  01852C  B2C2               	btfsc	4034,1,c	;volatile
 34846  01852E  D7FE               	goto	l2353
 34847                           
 34848                           ;dans.c: 194: ADON=0;
 34849  018530  90C2               	bcf	4034,0,c	;volatile
 34850                           
 34851                           ;dans.c: 195: return ADRES;
 34852  018532  CFC3 F060          	movff	4035,?_FunctReadADC	;volatile
 34853  018536  CFC4 F061          	movff	4036,?_FunctReadADC+1	;volatile
 34854  01853A  0012               	return		;funcret
 34855  01853C                     __end_of_FunctReadADC:
 34856                           	opt stack 0
 34857                           tosu	equ	0xFFF
 34858                           tosh	equ	0xFFE
 34859                           tosl	equ	0xFFD
 34860                           pclath	equ	0xFFA
 34861                           tblptru	equ	0xFF8
 34862                           tblptrh	equ	0xFF7
 34863                           tblptrl	equ	0xFF6
 34864                           tablat	equ	0xFF5
 34865                           prodh	equ	0xFF4
 34866                           prodl	equ	0xFF3
 34867                           intcon	equ	0xFF2
 34868                           indf0	equ	0xFEF
 34869                           postinc0	equ	0xFEE
 34870                           fsr0h	equ	0xFEA
 34871                           fsr0l	equ	0xFE9
 34872                           wreg	equ	0xFE8
 34873                           indf1	equ	0xFE7
 34874                           postdec1	equ	0xFE5
 34875                           fsr1h	equ	0xFE2
 34876                           fsr1l	equ	0xFE1
 34877                           indf2	equ	0xFDF
 34878                           postinc2	equ	0xFDE
 34879                           postdec2	equ	0xFDD
 34880                           plusw2	equ	0xFDB
 34881                           fsr2h	equ	0xFDA
 34882                           fsr2l	equ	0xFD9
 34883                           status	equ	0xFD8
 34884                           
 34885 ;; *************** function _ISR_Function *****************
 34886 ;; Defined at:
 34887 ;;		line 38 in file "Library/ISR.c"
 34888 ;; Parameters:    Size  Location     Type
 34889 ;;		None
 34890 ;; Auto vars:     Size  Location     Type
 34891 ;;		None
 34892 ;; Return value:  Size  Location     Type
 34893 ;;                  1    wreg      void 
 34894 ;; Registers used:
 34895 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34896 ;; Tracked objects:
 34897 ;;		On entry : 0/0
 34898 ;;		On exit  : 0/0
 34899 ;;		Unchanged: 0/0
 34900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34903 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34904 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34905 ;;Total ram usage:       18 bytes
 34906 ;; Hardware stack levels used:    1
 34907 ;; Hardware stack levels required when called:    6
 34908 ;; This function calls:
 34909 ;;		_Timer0_ISR
 34910 ;; This function is called by:
 34911 ;;		Interrupt level 2
 34912 ;; This function uses a non-reentrant model
 34913 ;;
 34914                           
 34915                           	psect	intcode
 34916  001408                     __pintcode:
 34917                           	opt stack 0
 34918  001408                     _ISR_Function:
 34919                           	opt stack 14
 34920                           
 34921                           ;incstack = 0
 34922  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 34923  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 34924  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 34925  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 34926  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 34927  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 34928  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 34929  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 34930  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 34931  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 34932  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 34933  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 34934  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 34935  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 34936  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 34937  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 34938  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 34939  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 34940  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 34941                           
 34942                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 34943  001452  92F2               	bcf	intcon,1,c	;volatile
 34944                           
 34945                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 34946  001454  B4F2               	btfsc	intcon,2,c	;volatile
 34947  001456  AAF2               	btfss	intcon,5,c	;volatile
 34948  001458  D002               	goto	i2l1590
 34949                           
 34950                           ;ISR.c: 68: Timer0_ISR();
 34951  00145A  EC47  F0C4         	call	_Timer0_ISR	;wreg free
 34952  00145E                     i2l1590:
 34953  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 34954  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 34955  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 34956  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 34957  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 34958  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 34959  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 34960  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 34961  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 34962  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 34963  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 34964  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 34965  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 34966  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 34967  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 34968  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 34969  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 34970  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 34971  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 34972  0014A8  0011               	retfie		f
 34973  0014AA                     __end_of_ISR_Function:
 34974                           	opt stack 0
 34975                           tosu	equ	0xFFF
 34976                           tosh	equ	0xFFE
 34977                           tosl	equ	0xFFD
 34978                           pclatu	equ	0xFFB
 34979                           pclath	equ	0xFFA
 34980                           tblptru	equ	0xFF8
 34981                           tblptrh	equ	0xFF7
 34982                           tblptrl	equ	0xFF6
 34983                           tablat	equ	0xFF5
 34984                           prodh	equ	0xFF4
 34985                           prodl	equ	0xFF3
 34986                           intcon	equ	0xFF2
 34987                           indf0	equ	0xFEF
 34988                           postinc0	equ	0xFEE
 34989                           fsr0h	equ	0xFEA
 34990                           fsr0l	equ	0xFE9
 34991                           wreg	equ	0xFE8
 34992                           indf1	equ	0xFE7
 34993                           postdec1	equ	0xFE5
 34994                           fsr1h	equ	0xFE2
 34995                           fsr1l	equ	0xFE1
 34996                           indf2	equ	0xFDF
 34997                           postinc2	equ	0xFDE
 34998                           postdec2	equ	0xFDD
 34999                           plusw2	equ	0xFDB
 35000                           fsr2h	equ	0xFDA
 35001                           fsr2l	equ	0xFD9
 35002                           status	equ	0xFD8
 35003                           
 35004 ;; *************** function _Timer0_ISR *****************
 35005 ;; Defined at:
 35006 ;;		line 94 in file "Library/Timer0.c"
 35007 ;; Parameters:    Size  Location     Type
 35008 ;;		None
 35009 ;; Auto vars:     Size  Location     Type
 35010 ;;		None
 35011 ;; Return value:  Size  Location     Type
 35012 ;;                  1    wreg      void 
 35013 ;; Registers used:
 35014 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35015 ;; Tracked objects:
 35016 ;;		On entry : 0/0
 35017 ;;		On exit  : 0/0
 35018 ;;		Unchanged: 0/0
 35019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35024 ;;Total ram usage:        0 bytes
 35025 ;; Hardware stack levels used:    1
 35026 ;; Hardware stack levels required when called:    5
 35027 ;; This function calls:
 35028 ;;		Absolute function
 35029 ;;		i2_Motor_Step
 35030 ;;		i2_Timer0_Stop
 35031 ;; This function is called by:
 35032 ;;		_ISR_Function
 35033 ;; This function uses a non-reentrant model
 35034 ;;
 35035                           
 35036                           	psect	text157
 35037  01888E                     __ptext157:
 35038                           	opt stack 0
 35039  01888E                     _Timer0_ISR:
 35040                           	opt stack 14
 35041                           
 35042                           ;Timer0.c: 96: Timer0_Stop();
 35043                           
 35044                           ;incstack = 0
 35045  01888E  EC61  F0C6         	call	i2_Timer0_Stop	;wreg free
 35046                           
 35047                           ;Timer0.c: 99: if (gISR != 0)
 35048  018892  0101               	movlb	1	; () banked
 35049  018894  5108               	movf	_gISR& (0+255),w,b
 35050  018896  1109               	iorwf	(_gISR+1)& (0+255),w,b
 35051  018898  110A               	iorwf	(_gISR+2)& (0+255),w,b
 35052  01889A  B4D8               	btfsc	status,2,c
 35053  01889C  0012               	return	
 35054                           
 35055                           ; BSR set to: 1
 35056                           ;Timer0.c: 100: gISR();
 35057  01889E  D801               	call	i2u1545_48
 35058  0188A0  0012               	return	
 35059  0188A2                     i2u1545_48:
 35060  0188A2  0005               	push	
 35061  0188A4  6EFA               	movwf	pclath,c
 35062  0188A6  5108               	movf	_gISR& (0+255),w,b
 35063  0188A8  6EFD               	movwf	tosl,c
 35064  0188AA  5109               	movf	(_gISR+1)& (0+255),w,b
 35065  0188AC  6EFE               	movwf	tosh,c
 35066  0188AE  510A               	movf	(_gISR+2)& (0+255),w,b
 35067  0188B0  6EFF               	movwf	tosu,c
 35068  0188B2  50FA               	movf	pclath,w,c
 35069  0188B4  0012               	return		;indir
 35070  0188B6                     __end_of_Timer0_ISR:
 35071                           	opt stack 0
 35072                           tosu	equ	0xFFF
 35073                           tosh	equ	0xFFE
 35074                           tosl	equ	0xFFD
 35075                           pclatu	equ	0xFFB
 35076                           pclath	equ	0xFFA
 35077                           tblptru	equ	0xFF8
 35078                           tblptrh	equ	0xFF7
 35079                           tblptrl	equ	0xFF6
 35080                           tablat	equ	0xFF5
 35081                           prodh	equ	0xFF4
 35082                           prodl	equ	0xFF3
 35083                           intcon	equ	0xFF2
 35084                           indf0	equ	0xFEF
 35085                           postinc0	equ	0xFEE
 35086                           fsr0h	equ	0xFEA
 35087                           fsr0l	equ	0xFE9
 35088                           wreg	equ	0xFE8
 35089                           indf1	equ	0xFE7
 35090                           postdec1	equ	0xFE5
 35091                           fsr1h	equ	0xFE2
 35092                           fsr1l	equ	0xFE1
 35093                           indf2	equ	0xFDF
 35094                           postinc2	equ	0xFDE
 35095                           postdec2	equ	0xFDD
 35096                           plusw2	equ	0xFDB
 35097                           fsr2h	equ	0xFDA
 35098                           fsr2l	equ	0xFD9
 35099                           status	equ	0xFD8
 35100                           
 35101 ;; *************** function i2_Motor_Step *****************
 35102 ;; Defined at:
 35103 ;;		line 75 in file "Library/Motor.c"
 35104 ;; Parameters:    Size  Location     Type
 35105 ;;		None
 35106 ;; Auto vars:     Size  Location     Type
 35107 ;;		None
 35108 ;; Return value:  Size  Location     Type
 35109 ;;                  1    wreg      void 
 35110 ;; Registers used:
 35111 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35112 ;; Tracked objects:
 35113 ;;		On entry : 0/0
 35114 ;;		On exit  : 0/0
 35115 ;;		Unchanged: 0/0
 35116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35119 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35120 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35121 ;;Total ram usage:        2 bytes
 35122 ;; Hardware stack levels used:    1
 35123 ;; Hardware stack levels required when called:    4
 35124 ;; This function calls:
 35125 ;;		i2_MXK_Queue
 35126 ;;		i2_MXK_Release
 35127 ;;		i2_MXK_SwitchTo
 35128 ;;		i2_Port_SetPin
 35129 ;;		i2_Timer0_Restart
 35130 ;;		i2_Timer0_Stop
 35131 ;; This function is called by:
 35132 ;; This function uses a non-reentrant model
 35133 ;;
 35134                           
 35135                           	psect	text158
 35136  0166D0                     __ptext158:
 35137                           	opt stack 0
 35138  0166D0                     i2_Motor_Step:
 35139                           	opt stack 14
 35140                           
 35141                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 35142                           
 35143                           ;incstack = 0
 35144  0166D0  EE20 F004          	lfsr	2,4
 35145  0166D4  5038               	movf	_lMotor,w,c
 35146  0166D6  26D9               	addwf	fsr2l,f,c
 35147  0166D8  5039               	movf	_lMotor+1,w,c
 35148  0166DA  22DA               	addwfc	fsr2h,f,c
 35149  0166DC  50DF               	movf	indf2,w,c
 35150  0166DE  EC2C  F0C3         	call	i2_MXK_SwitchTo
 35151  0166E2  0900               	iorlw	0
 35152  0166E4  B4D8               	btfsc	status,2,c
 35153  0166E6  D06A               	goto	i2l1627
 35154                           
 35155                           ;Motor.c: 78: {
 35156                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 35157  0166E8  C038  FFD9         	movff	_lMotor,fsr2l
 35158  0166EC  C039  FFDA         	movff	_lMotor+1,fsr2h
 35159  0166F0  50DE               	movf	postinc2,w,c
 35160  0166F2  10DE               	iorwf	postinc2,w,c
 35161  0166F4  B4D8               	btfsc	status,2,c
 35162  0166F6  D05D               	goto	i2l1628
 35163                           
 35164                           ;Motor.c: 80: {
 35165                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 35166  0166F8  C038  FFD9         	movff	_lMotor,fsr2l
 35167  0166FC  C039  FFDA         	movff	_lMotor+1,fsr2h
 35168  016700  0E01               	movlw	1
 35169  016702  BEDB               	btfsc	plusw2,7,c
 35170  016704  D022               	goto	i2l1629
 35171  016706  0E01               	movlw	1
 35172  016708  50DB               	movf	plusw2,w,c
 35173  01670A  E103               	bnz	i2u881_40
 35174  01670C  04DE               	decf	postinc2,w,c
 35175  01670E  A0D8               	btfss	status,0,c
 35176  016710  D01C               	goto	i2l1629
 35177  016712                     i2u881_40:
 35178                           
 35179                           ;Motor.c: 83: {
 35180                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 35181  016712  C038  FFD9         	movff	_lMotor,fsr2l
 35182  016716  C039  FFDA         	movff	_lMotor+1,fsr2h
 35183  01671A  28DE               	incf	postinc2,w,c
 35184  01671C  E104               	bnz	i2u882_40
 35185  01671E  0E7F               	movlw	127
 35186  016720  18DE               	xorwf	postinc2,w,c
 35187  016722  B4D8               	btfsc	status,2,c
 35188  016724  D007               	goto	i2l1630
 35189  016726                     i2u882_40:
 35190                           
 35191                           ;Motor.c: 85: lMotor->mDelta --;
 35192  016726  C038  FFD9         	movff	_lMotor,fsr2l
 35193  01672A  C039  FFDA         	movff	_lMotor+1,fsr2h
 35194  01672E  06DE               	decf	postinc2,f,c
 35195  016730  0E00               	movlw	0
 35196  016732  5ADD               	subwfb	postdec2,f,c
 35197  016734                     i2l1630:
 35198                           
 35199                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 35200  016734  0E6C               	movlw	low _PortE
 35201  016736  6E10               	movwf	i2Port_SetPin@pInput,c
 35202  016738  0E01               	movlw	high _PortE
 35203  01673A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 35204  01673C  0E00               	movlw	0
 35205  01673E  6E12               	movwf	i2Port_SetPin@pPin,c
 35206  016740  0E01               	movlw	1
 35207  016742  6E13               	movwf	i2Port_SetPin@pValue,c
 35208  016744  EC9D  F0B6         	call	i2_Port_SetPin	;wreg free
 35209                           
 35210                           ;Motor.c: 88: }
 35211  016748  D01B               	goto	i2l1631
 35212  01674A                     i2l1629:
 35213                           
 35214                           ;Motor.c: 89: else
 35215                           ;Motor.c: 90: {
 35216                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 35217  01674A  C038  FFD9         	movff	_lMotor,fsr2l
 35218  01674E  C039  FFDA         	movff	_lMotor+1,fsr2h
 35219  016752  04DE               	decf	postinc2,w,c
 35220  016754  E104               	bnz	i2u883_40
 35221  016756  0E80               	movlw	128
 35222  016758  18DE               	xorwf	postinc2,w,c
 35223  01675A  B4D8               	btfsc	status,2,c
 35224  01675C  D007               	goto	i2l1632
 35225  01675E                     i2u883_40:
 35226                           
 35227                           ;Motor.c: 92: lMotor->mDelta ++;
 35228  01675E  C038  FFD9         	movff	_lMotor,fsr2l
 35229  016762  C039  FFDA         	movff	_lMotor+1,fsr2h
 35230  016766  2ADE               	incf	postinc2,f,c
 35231  016768  0E00               	movlw	0
 35232  01676A  22DD               	addwfc	postdec2,f,c
 35233  01676C                     i2l1632:
 35234                           
 35235                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 35236  01676C  0E6C               	movlw	low _PortE
 35237  01676E  6E10               	movwf	i2Port_SetPin@pInput,c
 35238  016770  0E01               	movlw	high _PortE
 35239  016772  6E11               	movwf	i2Port_SetPin@pInput+1,c
 35240  016774  0E00               	movlw	0
 35241  016776  6E12               	movwf	i2Port_SetPin@pPin,c
 35242  016778  0E00               	movlw	0
 35243  01677A  6E13               	movwf	i2Port_SetPin@pValue,c
 35244  01677C  EC9D  F0B6         	call	i2_Port_SetPin	;wreg free
 35245  016780                     i2l1631:
 35246                           
 35247                           ;Motor.c: 95: }
 35248                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 35249  016780  0E6C               	movlw	low _PortE
 35250  016782  6E10               	movwf	i2Port_SetPin@pInput,c
 35251  016784  0E01               	movlw	high _PortE
 35252  016786  6E11               	movwf	i2Port_SetPin@pInput+1,c
 35253  016788  0E01               	movlw	1
 35254  01678A  6E12               	movwf	i2Port_SetPin@pPin,c
 35255  01678C  0E01               	movlw	1
 35256  01678E  6E13               	movwf	i2Port_SetPin@pValue,c
 35257  016790  EC9D  F0B6         	call	i2_Port_SetPin	;wreg free
 35258                           
 35259                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 35260  016794  0E6C               	movlw	low _PortE
 35261  016796  6E10               	movwf	i2Port_SetPin@pInput,c
 35262  016798  0E01               	movlw	high _PortE
 35263  01679A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 35264  01679C  0E01               	movlw	1
 35265  01679E  6E12               	movwf	i2Port_SetPin@pPin,c
 35266  0167A0  0E00               	movlw	0
 35267  0167A2  6E13               	movwf	i2Port_SetPin@pValue,c
 35268  0167A4  EC9D  F0B6         	call	i2_Port_SetPin	;wreg free
 35269                           
 35270                           ;Motor.c: 101: MXK_Release();
 35271  0167A8  EC64  F0C6         	call	i2_MXK_Release	;wreg free
 35272                           
 35273                           ;Motor.c: 102: Timer0_Restart();
 35274  0167AC  EC3B  F0C6         	call	i2_Timer0_Restart	;wreg free
 35275                           
 35276                           ;Motor.c: 103: return;
 35277  0167B0  0012               	return	
 35278  0167B2                     i2l1628:
 35279                           
 35280                           ;Motor.c: 104: }
 35281                           ;Motor.c: 105: MXK_Release();
 35282  0167B2  EC64  F0C6         	call	i2_MXK_Release	;wreg free
 35283                           
 35284                           ;Motor.c: 106: Timer0_Stop();
 35285  0167B6  EC61  F0C6         	call	i2_Timer0_Stop	;wreg free
 35286                           
 35287                           ;Motor.c: 107: return;
 35288  0167BA  0012               	return	
 35289  0167BC                     i2l1627:
 35290                           
 35291                           ;Motor.c: 108: }
 35292                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 35293  0167BC  C10B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 35294  0167C0  C10C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 35295  0167C4  C10D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 35296  0167C8  EC2E  F0C6         	call	i2_MXK_Queue	;wreg free
 35297  0167CC  0012               	return		;funcret
 35298  0167CE                     __end_ofi2_Motor_Step:
 35299                           	opt stack 0
 35300                           tosu	equ	0xFFF
 35301                           tosh	equ	0xFFE
 35302                           tosl	equ	0xFFD
 35303                           pclatu	equ	0xFFB
 35304                           pclath	equ	0xFFA
 35305                           tblptru	equ	0xFF8
 35306                           tblptrh	equ	0xFF7
 35307                           tblptrl	equ	0xFF6
 35308                           tablat	equ	0xFF5
 35309                           prodh	equ	0xFF4
 35310                           prodl	equ	0xFF3
 35311                           intcon	equ	0xFF2
 35312                           indf0	equ	0xFEF
 35313                           postinc0	equ	0xFEE
 35314                           fsr0h	equ	0xFEA
 35315                           fsr0l	equ	0xFE9
 35316                           wreg	equ	0xFE8
 35317                           indf1	equ	0xFE7
 35318                           postdec1	equ	0xFE5
 35319                           fsr1h	equ	0xFE2
 35320                           fsr1l	equ	0xFE1
 35321                           indf2	equ	0xFDF
 35322                           postinc2	equ	0xFDE
 35323                           postdec2	equ	0xFDD
 35324                           plusw2	equ	0xFDB
 35325                           fsr2h	equ	0xFDA
 35326                           fsr2l	equ	0xFD9
 35327                           status	equ	0xFD8
 35328                           
 35329 ;; *************** function i2_Timer0_Stop *****************
 35330 ;; Defined at:
 35331 ;;		line 89 in file "Library/Timer0.c"
 35332 ;; Parameters:    Size  Location     Type
 35333 ;;		None
 35334 ;; Auto vars:     Size  Location     Type
 35335 ;;		None
 35336 ;; Return value:  Size  Location     Type
 35337 ;;                  1    wreg      void 
 35338 ;; Registers used:
 35339 ;;		None
 35340 ;; Tracked objects:
 35341 ;;		On entry : 0/0
 35342 ;;		On exit  : 0/0
 35343 ;;		Unchanged: 0/0
 35344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35349 ;;Total ram usage:        0 bytes
 35350 ;; Hardware stack levels used:    1
 35351 ;; This function calls:
 35352 ;;		Nothing
 35353 ;; This function is called by:
 35354 ;;		_Timer0_ISR
 35355 ;;		i2_Motor_Step
 35356 ;; This function uses a non-reentrant model
 35357 ;;
 35358                           
 35359                           	psect	text159
 35360  018CC2                     __ptext159:
 35361                           	opt stack 0
 35362  018CC2                     i2_Timer0_Stop:
 35363                           	opt stack 18
 35364                           
 35365                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 35366                           
 35367                           ;incstack = 0
 35368  018CC2  9AF2               	bcf	intcon,5,c	;volatile
 35369                           
 35370                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 35371  018CC4  94F2               	bcf	intcon,2,c	;volatile
 35372  018CC6  0012               	return		;funcret
 35373  018CC8                     __end_ofi2_Timer0_Stop:
 35374                           	opt stack 0
 35375                           tosu	equ	0xFFF
 35376                           tosh	equ	0xFFE
 35377                           tosl	equ	0xFFD
 35378                           pclatu	equ	0xFFB
 35379                           pclath	equ	0xFFA
 35380                           tblptru	equ	0xFF8
 35381                           tblptrh	equ	0xFF7
 35382                           tblptrl	equ	0xFF6
 35383                           tablat	equ	0xFF5
 35384                           prodh	equ	0xFF4
 35385                           prodl	equ	0xFF3
 35386                           intcon	equ	0xFF2
 35387                           indf0	equ	0xFEF
 35388                           postinc0	equ	0xFEE
 35389                           fsr0h	equ	0xFEA
 35390                           fsr0l	equ	0xFE9
 35391                           wreg	equ	0xFE8
 35392                           indf1	equ	0xFE7
 35393                           postdec1	equ	0xFE5
 35394                           fsr1h	equ	0xFE2
 35395                           fsr1l	equ	0xFE1
 35396                           indf2	equ	0xFDF
 35397                           postinc2	equ	0xFDE
 35398                           postdec2	equ	0xFDD
 35399                           plusw2	equ	0xFDB
 35400                           fsr2h	equ	0xFDA
 35401                           fsr2l	equ	0xFD9
 35402                           status	equ	0xFD8
 35403                           
 35404 ;; *************** function i2_Timer0_Restart *****************
 35405 ;; Defined at:
 35406 ;;		line 83 in file "Library/Timer0.c"
 35407 ;; Parameters:    Size  Location     Type
 35408 ;;		None
 35409 ;; Auto vars:     Size  Location     Type
 35410 ;;		None
 35411 ;; Return value:  Size  Location     Type
 35412 ;;                  1    wreg      void 
 35413 ;; Registers used:
 35414 ;;		None
 35415 ;; Tracked objects:
 35416 ;;		On entry : 0/0
 35417 ;;		On exit  : 0/0
 35418 ;;		Unchanged: 0/0
 35419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35424 ;;Total ram usage:        0 bytes
 35425 ;; Hardware stack levels used:    1
 35426 ;; This function calls:
 35427 ;;		Nothing
 35428 ;; This function is called by:
 35429 ;;		i2_Motor_Step
 35430 ;; This function uses a non-reentrant model
 35431 ;;
 35432                           
 35433                           	psect	text160
 35434  018C76                     __ptext160:
 35435                           	opt stack 0
 35436  018C76                     i2_Timer0_Restart:
 35437                           	opt stack 17
 35438                           
 35439                           ;Timer0.c: 85: TMR0 = COUNTER;
 35440                           
 35441                           ;incstack = 0
 35442  018C76  C036  FFD6         	movff	_COUNTER,4054	;volatile
 35443  018C7A  C037  FFD7         	movff	_COUNTER+1,4055	;volatile
 35444                           
 35445                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 35446  018C7E  8AF2               	bsf	intcon,5,c	;volatile
 35447  018C80  0012               	return		;funcret
 35448  018C82                     __end_ofi2_Timer0_Restart:
 35449                           	opt stack 0
 35450                           tosu	equ	0xFFF
 35451                           tosh	equ	0xFFE
 35452                           tosl	equ	0xFFD
 35453                           pclatu	equ	0xFFB
 35454                           pclath	equ	0xFFA
 35455                           tblptru	equ	0xFF8
 35456                           tblptrh	equ	0xFF7
 35457                           tblptrl	equ	0xFF6
 35458                           tablat	equ	0xFF5
 35459                           prodh	equ	0xFF4
 35460                           prodl	equ	0xFF3
 35461                           intcon	equ	0xFF2
 35462                           indf0	equ	0xFEF
 35463                           postinc0	equ	0xFEE
 35464                           fsr0h	equ	0xFEA
 35465                           fsr0l	equ	0xFE9
 35466                           wreg	equ	0xFE8
 35467                           indf1	equ	0xFE7
 35468                           postdec1	equ	0xFE5
 35469                           fsr1h	equ	0xFE2
 35470                           fsr1l	equ	0xFE1
 35471                           indf2	equ	0xFDF
 35472                           postinc2	equ	0xFDE
 35473                           postdec2	equ	0xFDD
 35474                           plusw2	equ	0xFDB
 35475                           fsr2h	equ	0xFDA
 35476                           fsr2l	equ	0xFD9
 35477                           status	equ	0xFD8
 35478                           
 35479 ;; *************** function i2_Port_SetPin *****************
 35480 ;; Defined at:
 35481 ;;		line 247 in file "Library/Port.c"
 35482 ;; Parameters:    Size  Location     Type
 35483 ;;  pInput          2   15[COMRAM] const PTR struct Port
 35484 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 35485 ;;  pPin            1   17[COMRAM] enum E6750
 35486 ;;  pValue          1   18[COMRAM] unsigned char 
 35487 ;; Auto vars:     Size  Location     Type
 35488 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 35489 ;; Return value:  Size  Location     Type
 35490 ;;                  1    wreg      void 
 35491 ;; Registers used:
 35492 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35493 ;; Tracked objects:
 35494 ;;		On entry : 0/0
 35495 ;;		On exit  : 0/0
 35496 ;;		Unchanged: 0/0
 35497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35498 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35499 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35501 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35502 ;;Total ram usage:        5 bytes
 35503 ;; Hardware stack levels used:    1
 35504 ;; Hardware stack levels required when called:    3
 35505 ;; This function calls:
 35506 ;;		i2_Byte_SetBit
 35507 ;;		i2_Word_GetPair
 35508 ;; This function is called by:
 35509 ;;		i2_Motor_Step
 35510 ;; This function uses a non-reentrant model
 35511 ;;
 35512                           
 35513                           	psect	text161
 35514  016D3A                     __ptext161:
 35515                           	opt stack 0
 35516  016D3A                     i2_Port_SetPin:
 35517                           	opt stack 14
 35518                           
 35519                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 35520                           
 35521                           ;incstack = 0
 35522  016D3A  0E08               	movlw	8
 35523  016D3C  2410               	addwf	i2Port_SetPin@pInput,w,c
 35524  016D3E  6E0D               	movwf	i2Word_GetPair@pInput,c
 35525  016D40  0E00               	movlw	0
 35526  016D42  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 35527  016D44  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 35528  016D46  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 35529  016D4A  ECDA  F0C3         	call	i2_Word_GetPair	;wreg free
 35530  016D4E  6E14               	movwf	i2Port_SetPin@Type,c
 35531                           
 35532                           ;Port.c: 250: switch (Type)
 35533  016D50  D03B               	goto	i2l427
 35534  016D52                     
 35535                           ;Port.c: 256: pValue &= 1;
 35536  016D52  0E01               	movlw	1
 35537  016D54  1613               	andwf	i2Port_SetPin@pValue,f,c
 35538                           
 35539                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 35540  016D56  EE20 F002          	lfsr	2,2
 35541  016D5A  5010               	movf	i2Port_SetPin@pInput,w,c
 35542  016D5C  26D9               	addwf	fsr2l,f,c
 35543  016D5E  5011               	movf	i2Port_SetPin@pInput+1,w,c
 35544  016D60  22DA               	addwfc	fsr2h,f,c
 35545  016D62  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 35546  016D66  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 35547  016D6A  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 35548  016D6E  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 35549  016D72  EC99  F0C0         	call	i2_Byte_SetBit	;wreg free
 35550                           
 35551                           ;Port.c: 258: break;
 35552  016D76  0012               	return	
 35553  016D78                     
 35554                           ;Port.c: 261: pValue &= 1;
 35555  016D78  0E01               	movlw	1
 35556  016D7A  1613               	andwf	i2Port_SetPin@pValue,f,c
 35557                           
 35558                           ;Port.c: 262: pValue ^= 1;
 35559  016D7C  0E01               	movlw	1
 35560  016D7E  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 35561                           
 35562                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 35563  016D80  EE20 F002          	lfsr	2,2
 35564  016D84  5010               	movf	i2Port_SetPin@pInput,w,c
 35565  016D86  26D9               	addwf	fsr2l,f,c
 35566  016D88  5011               	movf	i2Port_SetPin@pInput+1,w,c
 35567  016D8A  22DA               	addwfc	fsr2h,f,c
 35568  016D8C  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 35569  016D90  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 35570  016D94  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 35571  016D98  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 35572  016D9C  EC99  F0C0         	call	i2_Byte_SetBit	;wreg free
 35573                           
 35574                           ;Port.c: 264: break;
 35575  016DA0  0012               	return	
 35576  016DA2                     
 35577                           ;Port.c: 266: pValue &= 1;
 35578  016DA2  0E01               	movlw	1
 35579  016DA4  1613               	andwf	i2Port_SetPin@pValue,f,c
 35580                           
 35581                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 35582  016DA6  EE20 F004          	lfsr	2,4
 35583  016DAA  5010               	movf	i2Port_SetPin@pInput,w,c
 35584  016DAC  26D9               	addwf	fsr2l,f,c
 35585  016DAE  5011               	movf	i2Port_SetPin@pInput+1,w,c
 35586  016DB0  22DA               	addwfc	fsr2h,f,c
 35587  016DB2  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 35588  016DB6  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 35589  016DBA  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 35590  016DBE  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 35591  016DC2  EC99  F0C0         	call	i2_Byte_SetBit	;wreg free
 35592                           
 35593                           ;Port.c: 269: }
 35594                           
 35595                           ;Port.c: 268: break;
 35596  016DC6  0012               	return	
 35597  016DC8                     i2l427:
 35598  016DC8  5014               	movf	i2Port_SetPin@Type,w,c
 35599                           
 35600                           ; Switch size 1, requested type "space"
 35601                           ; Number of cases is 4, Range of values is 0 to 3
 35602                           ; switch strategies available:
 35603                           ; Name         Instructions Cycles
 35604                           ; simple_byte           13     7 (average)
 35605                           ;	Chosen strategy is simple_byte
 35606  016DCA  0A00               	xorlw	0	; case 0
 35607  016DCC  B4D8               	btfsc	status,2,c
 35608  016DCE  0012               	return	
 35609  016DD0  0A01               	xorlw	1	; case 1
 35610  016DD2  B4D8               	btfsc	status,2,c
 35611  016DD4  D7BE               	goto	i2l430
 35612  016DD6  0A03               	xorlw	3	; case 2
 35613  016DD8  B4D8               	btfsc	status,2,c
 35614  016DDA  D7CE               	goto	i2l432
 35615  016DDC  0A01               	xorlw	1	; case 3
 35616  016DDE  A4D8               	btfss	status,2,c
 35617  016DE0  0012               	return	
 35618  016DE2  D7DF               	goto	i2l433
 35619  016DE4                     __end_ofi2_Port_SetPin:
 35620                           	opt stack 0
 35621                           tosu	equ	0xFFF
 35622                           tosh	equ	0xFFE
 35623                           tosl	equ	0xFFD
 35624                           pclatu	equ	0xFFB
 35625                           pclath	equ	0xFFA
 35626                           tblptru	equ	0xFF8
 35627                           tblptrh	equ	0xFF7
 35628                           tblptrl	equ	0xFF6
 35629                           tablat	equ	0xFF5
 35630                           prodh	equ	0xFF4
 35631                           prodl	equ	0xFF3
 35632                           intcon	equ	0xFF2
 35633                           indf0	equ	0xFEF
 35634                           postinc0	equ	0xFEE
 35635                           fsr0h	equ	0xFEA
 35636                           fsr0l	equ	0xFE9
 35637                           wreg	equ	0xFE8
 35638                           indf1	equ	0xFE7
 35639                           postdec1	equ	0xFE5
 35640                           fsr1h	equ	0xFE2
 35641                           fsr1l	equ	0xFE1
 35642                           indf2	equ	0xFDF
 35643                           postinc2	equ	0xFDE
 35644                           postdec2	equ	0xFDD
 35645                           plusw2	equ	0xFDB
 35646                           fsr2h	equ	0xFDA
 35647                           fsr2l	equ	0xFD9
 35648                           status	equ	0xFD8
 35649                           
 35650 ;; *************** function i2_Word_GetPair *****************
 35651 ;; Defined at:
 35652 ;;		line 156 in file "Library/Types.c"
 35653 ;; Parameters:    Size  Location     Type
 35654 ;;  pInput          2   12[COMRAM] PTR struct Word
 35655 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 35656 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 35657 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 35658 ;;		 -> PortC(10), PortF(10), NULL(0), 
 35659 ;;  pPair           1   14[COMRAM] unsigned char 
 35660 ;; Auto vars:     Size  Location     Type
 35661 ;;		None
 35662 ;; Return value:  Size  Location     Type
 35663 ;;                  1    wreg      unsigned char 
 35664 ;; Registers used:
 35665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35666 ;; Tracked objects:
 35667 ;;		On entry : 0/0
 35668 ;;		On exit  : 0/0
 35669 ;;		Unchanged: 0/0
 35670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35671 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35674 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35675 ;;Total ram usage:        3 bytes
 35676 ;; Hardware stack levels used:    1
 35677 ;; Hardware stack levels required when called:    2
 35678 ;; This function calls:
 35679 ;;		i2_Byte_GetPair
 35680 ;; This function is called by:
 35681 ;;		i2_Port_SetPin
 35682 ;; This function uses a non-reentrant model
 35683 ;;
 35684                           
 35685                           	psect	text162
 35686  0187B4                     __ptext162:
 35687                           	opt stack 0
 35688  0187B4                     i2_Word_GetPair:
 35689                           	opt stack 14
 35690                           
 35691                           ;Types.c: 158: if (pPair >= 4)
 35692                           
 35693                           ;incstack = 0
 35694  0187B4  0E03               	movlw	3
 35695  0187B6  640F               	cpfsgt	i2Word_GetPair@pPair,c
 35696  0187B8  D00C               	goto	i2l781
 35697                           
 35698                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 35699  0187BA  0E01               	movlw	1
 35700  0187BC  240D               	addwf	i2Word_GetPair@pInput,w,c
 35701  0187BE  6E0A               	movwf	i2Byte_GetPair@pInput,c
 35702  0187C0  0E00               	movlw	0
 35703  0187C2  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 35704  0187C4  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 35705  0187C6  500F               	movf	i2Word_GetPair@pPair,w,c
 35706  0187C8  0FFC               	addlw	252
 35707  0187CA  6E0C               	movwf	i2Byte_GetPair@pPair,c
 35708  0187CC  EC28  F0C5         	call	i2_Byte_GetPair	;wreg free
 35709  0187D0  0012               	return	
 35710  0187D2                     i2l781:
 35711                           
 35712                           ;Types.c: 160: else
 35713                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 35714  0187D2  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 35715  0187D6  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 35716  0187DA  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 35717  0187DE  EC28  F0C5         	call	i2_Byte_GetPair	;wreg free
 35718  0187E2  0012               	return	
 35719  0187E4                     __end_ofi2_Word_GetPair:
 35720                           	opt stack 0
 35721                           tosu	equ	0xFFF
 35722                           tosh	equ	0xFFE
 35723                           tosl	equ	0xFFD
 35724                           pclatu	equ	0xFFB
 35725                           pclath	equ	0xFFA
 35726                           tblptru	equ	0xFF8
 35727                           tblptrh	equ	0xFF7
 35728                           tblptrl	equ	0xFF6
 35729                           tablat	equ	0xFF5
 35730                           prodh	equ	0xFF4
 35731                           prodl	equ	0xFF3
 35732                           intcon	equ	0xFF2
 35733                           indf0	equ	0xFEF
 35734                           postinc0	equ	0xFEE
 35735                           fsr0h	equ	0xFEA
 35736                           fsr0l	equ	0xFE9
 35737                           wreg	equ	0xFE8
 35738                           indf1	equ	0xFE7
 35739                           postdec1	equ	0xFE5
 35740                           fsr1h	equ	0xFE2
 35741                           fsr1l	equ	0xFE1
 35742                           indf2	equ	0xFDF
 35743                           postinc2	equ	0xFDE
 35744                           postdec2	equ	0xFDD
 35745                           plusw2	equ	0xFDB
 35746                           fsr2h	equ	0xFDA
 35747                           fsr2l	equ	0xFD9
 35748                           status	equ	0xFD8
 35749                           
 35750 ;; *************** function i2_Byte_GetPair *****************
 35751 ;; Defined at:
 35752 ;;		line 87 in file "Library/Types.c"
 35753 ;; Parameters:    Size  Location     Type
 35754 ;;  pInput          2    9[COMRAM] PTR struct Byte
 35755 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 35756 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 35757 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 35758 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 35759 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 35760 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 35761 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 35762 ;;		 -> NULL(0), 
 35763 ;;  pPair           1   11[COMRAM] unsigned char 
 35764 ;; Auto vars:     Size  Location     Type
 35765 ;;		None
 35766 ;; Return value:  Size  Location     Type
 35767 ;;                  1    wreg      unsigned char 
 35768 ;; Registers used:
 35769 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35770 ;; Tracked objects:
 35771 ;;		On entry : 0/0
 35772 ;;		On exit  : 0/0
 35773 ;;		Unchanged: 0/0
 35774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35775 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35778 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35779 ;;Total ram usage:        3 bytes
 35780 ;; Hardware stack levels used:    1
 35781 ;; Hardware stack levels required when called:    1
 35782 ;; This function calls:
 35783 ;;		i2_Byte_GetZone
 35784 ;; This function is called by:
 35785 ;;		i2_Word_GetPair
 35786 ;; This function uses a non-reentrant model
 35787 ;;
 35788                           
 35789                           	psect	text163
 35790  018A50                     __ptext163:
 35791                           	opt stack 0
 35792  018A50                     i2_Byte_GetPair:
 35793                           	opt stack 14
 35794                           
 35795                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 35796                           
 35797                           ;incstack = 0
 35798  018A50  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 35799  018A54  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 35800  018A58  0E04               	movlw	4
 35801  018A5A  6E03               	movwf	i2Byte_GetZone@pMax,c
 35802  018A5C  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 35803  018A60  0E02               	movlw	2
 35804  018A62  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 35805  018A64  EC0D  F0BC         	call	i2_Byte_GetZone	;wreg free
 35806  018A68  0012               	return	
 35807  018A6A                     __end_ofi2_Byte_GetPair:
 35808                           	opt stack 0
 35809                           tosu	equ	0xFFF
 35810                           tosh	equ	0xFFE
 35811                           tosl	equ	0xFFD
 35812                           pclatu	equ	0xFFB
 35813                           pclath	equ	0xFFA
 35814                           tblptru	equ	0xFF8
 35815                           tblptrh	equ	0xFF7
 35816                           tblptrl	equ	0xFF6
 35817                           tablat	equ	0xFF5
 35818                           prodh	equ	0xFF4
 35819                           prodl	equ	0xFF3
 35820                           intcon	equ	0xFF2
 35821                           indf0	equ	0xFEF
 35822                           postinc0	equ	0xFEE
 35823                           fsr0h	equ	0xFEA
 35824                           fsr0l	equ	0xFE9
 35825                           wreg	equ	0xFE8
 35826                           indf1	equ	0xFE7
 35827                           postdec1	equ	0xFE5
 35828                           fsr1h	equ	0xFE2
 35829                           fsr1l	equ	0xFE1
 35830                           indf2	equ	0xFDF
 35831                           postinc2	equ	0xFDE
 35832                           postdec2	equ	0xFDD
 35833                           plusw2	equ	0xFDB
 35834                           fsr2h	equ	0xFDA
 35835                           fsr2l	equ	0xFD9
 35836                           status	equ	0xFD8
 35837                           
 35838 ;; *************** function i2_Byte_GetZone *****************
 35839 ;; Defined at:
 35840 ;;		line 64 in file "Library/Types.c"
 35841 ;; Parameters:    Size  Location     Type
 35842 ;;  pInput          2    0[COMRAM] PTR struct Byte
 35843 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 35844 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 35845 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 35846 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 35847 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 35848 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 35849 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 35850 ;;		 -> NULL(0), 
 35851 ;;  pMax            1    2[COMRAM] unsigned char 
 35852 ;;  pChunk          1    3[COMRAM] unsigned char 
 35853 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 35854 ;; Auto vars:     Size  Location     Type
 35855 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 35856 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 35857 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 35858 ;; Return value:  Size  Location     Type
 35859 ;;                  1    wreg      unsigned char 
 35860 ;; Registers used:
 35861 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 35862 ;; Tracked objects:
 35863 ;;		On entry : 0/0
 35864 ;;		On exit  : 0/0
 35865 ;;		Unchanged: 0/0
 35866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35867 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35868 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35869 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35870 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35871 ;;Total ram usage:        9 bytes
 35872 ;; Hardware stack levels used:    1
 35873 ;; This function calls:
 35874 ;;		Nothing
 35875 ;; This function is called by:
 35876 ;;		i2_Byte_GetPair
 35877 ;; This function uses a non-reentrant model
 35878 ;;
 35879                           
 35880                           	psect	text164
 35881  01781A                     __ptext164:
 35882                           	opt stack 0
 35883  01781A                     i2_Byte_GetZone:
 35884                           	opt stack 14
 35885                           
 35886                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 35887                           
 35888                           ;incstack = 0
 35889  01781A  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 35890  01781E  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 35891  017822  0E00               	movlw	low (__mediumconst shr (0+16))
 35892  017824  6EF8               	movwf	tblptru,c
 35893  017826  0E0F               	movlw	(high __ramtop+-1)
 35894  017828  64F7               	cpfsgt	tblptrh,c
 35895  01782A  D003               	bra	i2u724_47
 35896  01782C  0008               	tblrd		*
 35897  01782E  50F5               	movf	tablat,w,c
 35898  017830  D005               	bra	i2u724_40
 35899  017832                     i2u724_47:
 35900  017832  CFF6 FFE9          	movff	tblptrl,fsr0l
 35901  017836  CFF7 FFEA          	movff	tblptrh,fsr0h
 35902  01783A  50EF               	movf	indf0,w,c
 35903  01783C                     i2u724_40:
 35904  01783C  6E09               	movwf	i2Byte_GetZone@Output,c
 35905                           
 35906                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 35907  01783E  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 35908  017840  0D01               	mullw	1
 35909  017842  0E1F               	movlw	low _MASKS
 35910  017844  24F3               	addwf	prodl,w,c
 35911  017846  6EF6               	movwf	tblptrl,c
 35912  017848  0EFC               	movlw	high _MASKS
 35913  01784A  20F4               	addwfc	prodh,w,c
 35914  01784C  6EF7               	movwf	tblptrh,c
 35915  01784E                     	if	1	;There are 3 active tblptr bytes
 35916  01784E  6AF8               	clrf	tblptru,c
 35917  017850  0E00               	movlw	low (__mediumconst shr (0+16))
 35918  017852  22F8               	addwfc	tblptru,f,c
 35919  017854                     	endif
 35920  017854  0008               	tblrd		*
 35921  017856  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 35922                           
 35923                           ;Types.c: 68: UINT8 Offset = 0;
 35924  01785A  0E00               	movlw	0
 35925  01785C  6E08               	movwf	i2Byte_GetZone@Offset,c
 35926                           
 35927                           ;Types.c: 70: while (pChunk >= pMax)
 35928  01785E  D003               	goto	i2l732
 35929  017860                     
 35930                           ;Types.c: 71: {
 35931                           ;Types.c: 72: pChunk -= pMax;
 35932  017860  5003               	movf	i2Byte_GetZone@pMax,w,c
 35933  017862  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 35934                           
 35935                           ;Types.c: 73: Offset += 1;
 35936  017864  2A08               	incf	i2Byte_GetZone@Offset,f,c
 35937  017866                     i2l732:
 35938  017866  5003               	movf	i2Byte_GetZone@pMax,w,c
 35939  017868  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 35940  01786A  B0D8               	btfsc	status,0,c
 35941  01786C  D7F9               	goto	i2l733
 35942                           
 35943                           ;Types.c: 74: }
 35944                           ;Types.c: 75: pChunk *= pChunkSize;
 35945  01786E  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 35946  017870  0204               	mulwf	i2Byte_GetZone@pChunk,c
 35947  017872  50F3               	movf	prodl,w,c
 35948  017874  6E04               	movwf	i2Byte_GetZone@pChunk,c
 35949                           
 35950                           ;Types.c: 76: pChunk += Offset;
 35951  017876  5008               	movf	i2Byte_GetZone@Offset,w,c
 35952  017878  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 35953                           
 35954                           ;Types.c: 78: Output >>= pChunk;
 35955  01787A  2804               	incf	i2Byte_GetZone@pChunk,w,c
 35956  01787C  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 35957  01787E  D002               	goto	i2u726_40
 35958  017880                     i2u726_45:
 35959  017880  90D8               	bcf	status,0,c
 35960  017882  3209               	rrcf	i2Byte_GetZone@Output,f,c
 35961  017884                     i2u726_40:
 35962  017884  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 35963  017886  D7FC               	goto	i2u726_45
 35964                           
 35965                           ;Types.c: 79: Output &= MASK;
 35966  017888  5007               	movf	i2Byte_GetZone@MASK,w,c
 35967  01788A  1609               	andwf	i2Byte_GetZone@Output,f,c
 35968                           
 35969                           ;Types.c: 80: return Output;
 35970  01788C  5009               	movf	i2Byte_GetZone@Output,w,c
 35971  01788E  0012               	return	
 35972  017890                     __end_ofi2_Byte_GetZone:
 35973                           	opt stack 0
 35974                           tosu	equ	0xFFF
 35975                           tosh	equ	0xFFE
 35976                           tosl	equ	0xFFD
 35977                           pclatu	equ	0xFFB
 35978                           pclath	equ	0xFFA
 35979                           tblptru	equ	0xFF8
 35980                           tblptrh	equ	0xFF7
 35981                           tblptrl	equ	0xFF6
 35982                           tablat	equ	0xFF5
 35983                           prodh	equ	0xFF4
 35984                           prodl	equ	0xFF3
 35985                           intcon	equ	0xFF2
 35986                           indf0	equ	0xFEF
 35987                           postinc0	equ	0xFEE
 35988                           fsr0h	equ	0xFEA
 35989                           fsr0l	equ	0xFE9
 35990                           wreg	equ	0xFE8
 35991                           indf1	equ	0xFE7
 35992                           postdec1	equ	0xFE5
 35993                           fsr1h	equ	0xFE2
 35994                           fsr1l	equ	0xFE1
 35995                           indf2	equ	0xFDF
 35996                           postinc2	equ	0xFDE
 35997                           postdec2	equ	0xFDD
 35998                           plusw2	equ	0xFDB
 35999                           fsr2h	equ	0xFDA
 36000                           fsr2l	equ	0xFD9
 36001                           status	equ	0xFD8
 36002                           
 36003 ;; *************** function i2_Byte_SetBit *****************
 36004 ;; Defined at:
 36005 ;;		line 32 in file "Library/Types.c"
 36006 ;; Parameters:    Size  Location     Type
 36007 ;;  pInput          2    0[COMRAM] PTR struct Byte
 36008 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 36009 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 36010 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 36011 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 36012 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 36013 ;;		 -> NULL(0), 
 36014 ;;  pBit            1    2[COMRAM] unsigned char 
 36015 ;;  pValue          1    3[COMRAM] unsigned char 
 36016 ;; Auto vars:     Size  Location     Type
 36017 ;;		None
 36018 ;; Return value:  Size  Location     Type
 36019 ;;                  1    wreg      void 
 36020 ;; Registers used:
 36021 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 36022 ;; Tracked objects:
 36023 ;;		On entry : 0/0
 36024 ;;		On exit  : 0/0
 36025 ;;		Unchanged: 0/0
 36026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36027 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36029 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36030 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36031 ;;Total ram usage:        7 bytes
 36032 ;; Hardware stack levels used:    1
 36033 ;; This function calls:
 36034 ;;		Nothing
 36035 ;; This function is called by:
 36036 ;;		i2_Port_SetPin
 36037 ;; This function uses a non-reentrant model
 36038 ;;
 36039                           
 36040                           	psect	text165
 36041  018132                     __ptext165:
 36042                           	opt stack 0
 36043  018132                     i2_Byte_SetBit:
 36044                           	opt stack 16
 36045                           
 36046                           ;Types.c: 34: pValue &= 1;
 36047                           
 36048                           ;incstack = 0
 36049  018132  0E01               	movlw	1
 36050  018134  1604               	andwf	i2Byte_SetBit@pValue,f,c
 36051                           
 36052                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 36053  018136  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 36054  01813A  0E01               	movlw	1
 36055  01813C  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 36056  01813E  2A05               	incf	??i2_Byte_SetBit,f,c
 36057  018140  D002               	goto	i2u785_44
 36058  018142                     i2u785_45:
 36059  018142  90D8               	bcf	status,0,c
 36060  018144  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 36061  018146                     i2u785_44:
 36062  018146  2E05               	decfsz	??i2_Byte_SetBit,f,c
 36063  018148  D7FC               	goto	i2u785_45
 36064  01814A  5006               	movf	??i2_Byte_SetBit+1,w,c
 36065  01814C  0AFF               	xorlw	255
 36066  01814E  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 36067  018150  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 36068  018154  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 36069  018158  5007               	movf	??i2_Byte_SetBit+2,w,c
 36070  01815A  16DF               	andwf	indf2,f,c
 36071                           
 36072                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 36073  01815C  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 36074  018160  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 36075  018164  2A05               	incf	??i2_Byte_SetBit,f,c
 36076  018166  D002               	goto	i2u786_44
 36077  018168                     i2u786_45:
 36078  018168  90D8               	bcf	status,0,c
 36079  01816A  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 36080  01816C                     i2u786_44:
 36081  01816C  2E05               	decfsz	??i2_Byte_SetBit,f,c
 36082  01816E  D7FC               	goto	i2u786_45
 36083  018170  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 36084  018174  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 36085  018178  5006               	movf	??i2_Byte_SetBit+1,w,c
 36086  01817A  12DF               	iorwf	indf2,f,c
 36087  01817C  0012               	return		;funcret
 36088  01817E                     __end_ofi2_Byte_SetBit:
 36089                           	opt stack 0
 36090                           tosu	equ	0xFFF
 36091                           tosh	equ	0xFFE
 36092                           tosl	equ	0xFFD
 36093                           pclatu	equ	0xFFB
 36094                           pclath	equ	0xFFA
 36095                           tblptru	equ	0xFF8
 36096                           tblptrh	equ	0xFF7
 36097                           tblptrl	equ	0xFF6
 36098                           tablat	equ	0xFF5
 36099                           prodh	equ	0xFF4
 36100                           prodl	equ	0xFF3
 36101                           intcon	equ	0xFF2
 36102                           indf0	equ	0xFEF
 36103                           postinc0	equ	0xFEE
 36104                           fsr0h	equ	0xFEA
 36105                           fsr0l	equ	0xFE9
 36106                           wreg	equ	0xFE8
 36107                           indf1	equ	0xFE7
 36108                           postdec1	equ	0xFE5
 36109                           fsr1h	equ	0xFE2
 36110                           fsr1l	equ	0xFE1
 36111                           indf2	equ	0xFDF
 36112                           postinc2	equ	0xFDE
 36113                           postdec2	equ	0xFDD
 36114                           plusw2	equ	0xFDB
 36115                           fsr2h	equ	0xFDA
 36116                           fsr2l	equ	0xFD9
 36117                           status	equ	0xFD8
 36118                           
 36119 ;; *************** function i2_MXK_SwitchTo *****************
 36120 ;; Defined at:
 36121 ;;		line 105 in file "Library/MXK.c"
 36122 ;; Parameters:    Size  Location     Type
 36123 ;;  pModule         1    wreg     enum E6927
 36124 ;; Auto vars:     Size  Location     Type
 36125 ;;  pModule         1    7[COMRAM] enum E6927
 36126 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 36127 ;; Return value:  Size  Location     Type
 36128 ;;                  1    wreg      unsigned char 
 36129 ;; Registers used:
 36130 ;;		wreg, status,2, status,0, cstack
 36131 ;; Tracked objects:
 36132 ;;		On entry : 0/0
 36133 ;;		On exit  : 0/0
 36134 ;;		Unchanged: 0/0
 36135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36137 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36139 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36140 ;;Total ram usage:        2 bytes
 36141 ;; Hardware stack levels used:    1
 36142 ;; Hardware stack levels required when called:    1
 36143 ;; This function calls:
 36144 ;;		i2_delay_us
 36145 ;; This function is called by:
 36146 ;;		i2_Motor_Step
 36147 ;; This function uses a non-reentrant model
 36148 ;;
 36149                           
 36150                           	psect	text166
 36151  018658                     __ptext166:
 36152                           	opt stack 0
 36153  018658                     i2_MXK_SwitchTo:
 36154                           	opt stack 16
 36155                           
 36156                           ;incstack = 0
 36157                           ;i2MXK_SwitchTo@pModule stored from wreg
 36158  018658  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 36159                           
 36160                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 36161  01865A  5086               	movf	3974,w,c	;volatile
 36162  01865C  0B0F               	andlw	15
 36163  01865E  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 36164                           
 36165                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 36166  018660  504C               	movf	_Bus_State,w,c
 36167  018662  A4D8               	btfss	status,2,c
 36168  018664  D002               	goto	i2l1730
 36169                           
 36170                           ;MXK.c: 110: return 0;
 36171  018666  0E00               	movlw	0
 36172  018668  0012               	return	
 36173  01866A                     i2l1730:
 36174                           
 36175                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 36176  01866A  0E00               	movlw	0
 36177  01866C  6E4C               	movwf	_Bus_State,c
 36178                           
 36179                           ;MXK.c: 114: if (CUR != pModule)
 36180  01866E  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 36181  018670  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 36182  018672  B4D8               	btfsc	status,2,c
 36183  018674  D00A               	goto	i2l1732
 36184                           
 36185                           ;MXK.c: 115: {
 36186                           ;MXK.c: 116: PORTG &= ~(0xF);
 36187  018676  0EF0               	movlw	240
 36188  018678  1686               	andwf	3974,f,c	;volatile
 36189                           
 36190                           ;MXK.c: 117: PORTG |= pModule;
 36191  01867A  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 36192  01867C  1286               	iorwf	3974,f,c	;volatile
 36193                           
 36194                           ;MXK.c: 120: delay_us(10);
 36195  01867E  0E00               	movlw	0
 36196  018680  6E02               	movwf	i2delay_us@us+1,c
 36197  018682  0E0A               	movlw	10
 36198  018684  6E01               	movwf	i2delay_us@us,c
 36199  018686  EC41  F0C2         	call	i2_delay_us	;wreg free
 36200  01868A                     i2l1732:
 36201                           
 36202                           ;MXK.c: 121: }
 36203                           ;MXK.c: 122: return 1;
 36204  01868A  0E01               	movlw	1
 36205  01868C  0012               	return	
 36206  01868E                     __end_ofi2_MXK_SwitchTo:
 36207                           	opt stack 0
 36208                           tosu	equ	0xFFF
 36209                           tosh	equ	0xFFE
 36210                           tosl	equ	0xFFD
 36211                           pclatu	equ	0xFFB
 36212                           pclath	equ	0xFFA
 36213                           tblptru	equ	0xFF8
 36214                           tblptrh	equ	0xFF7
 36215                           tblptrl	equ	0xFF6
 36216                           tablat	equ	0xFF5
 36217                           prodh	equ	0xFF4
 36218                           prodl	equ	0xFF3
 36219                           intcon	equ	0xFF2
 36220                           indf0	equ	0xFEF
 36221                           postinc0	equ	0xFEE
 36222                           fsr0h	equ	0xFEA
 36223                           fsr0l	equ	0xFE9
 36224                           wreg	equ	0xFE8
 36225                           indf1	equ	0xFE7
 36226                           postdec1	equ	0xFE5
 36227                           fsr1h	equ	0xFE2
 36228                           fsr1l	equ	0xFE1
 36229                           indf2	equ	0xFDF
 36230                           postinc2	equ	0xFDE
 36231                           postdec2	equ	0xFDD
 36232                           plusw2	equ	0xFDB
 36233                           fsr2h	equ	0xFDA
 36234                           fsr2l	equ	0xFD9
 36235                           status	equ	0xFD8
 36236                           
 36237 ;; *************** function i2_delay_us *****************
 36238 ;; Defined at:
 36239 ;;		line 255 in file "Library/Types.c"
 36240 ;; Parameters:    Size  Location     Type
 36241 ;;  us              2    0[COMRAM] unsigned short 
 36242 ;; Auto vars:     Size  Location     Type
 36243 ;;  delay_us        4    2[COMRAM] unsigned long 
 36244 ;; Return value:  Size  Location     Type
 36245 ;;                  1    wreg      void 
 36246 ;; Registers used:
 36247 ;;		wreg, status,2, status,0
 36248 ;; Tracked objects:
 36249 ;;		On entry : 0/0
 36250 ;;		On exit  : 0/0
 36251 ;;		Unchanged: 0/0
 36252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36253 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36254 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36256 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36257 ;;Total ram usage:        6 bytes
 36258 ;; Hardware stack levels used:    1
 36259 ;; This function calls:
 36260 ;;		Nothing
 36261 ;; This function is called by:
 36262 ;;		i2_MXK_SwitchTo
 36263 ;; This function uses a non-reentrant model
 36264 ;;
 36265                           
 36266                           	psect	text167
 36267  018482                     __ptext167:
 36268                           	opt stack 0
 36269  018482                     i2_delay_us:
 36270                           	opt stack 16
 36271                           
 36272                           ;Types.c: 256: unsigned long u;
 36273                           ;Types.c: 257: while (us--) {
 36274                           
 36275                           ;incstack = 0
 36276  018482  D016               	goto	i2u789_40
 36277  018484                     i2l10703:
 36278                           
 36279                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 36280  018484  0E00               	movlw	0
 36281  018486  6E03               	movwf	i2delay_us@u,c
 36282  018488  0E00               	movlw	0
 36283  01848A  6E04               	movwf	i2delay_us@u+1,c
 36284  01848C  0E00               	movlw	0
 36285  01848E  6E05               	movwf	i2delay_us@u+2,c
 36286  018490  0E00               	movlw	0
 36287  018492  6E06               	movwf	i2delay_us@u+3,c
 36288  018494                     i2l10705:
 36289  018494  5003               	movf	i2delay_us@u,w,c
 36290  018496  1004               	iorwf	i2delay_us@u+1,w,c
 36291  018498  1005               	iorwf	i2delay_us@u+2,w,c
 36292  01849A  1006               	iorwf	i2delay_us@u+3,w,c
 36293  01849C  A4D8               	btfss	status,2,c
 36294  01849E  D008               	goto	i2u789_40
 36295  0184A0  F000               	nop		; ;# 
 36296  0184A2  0E01               	movlw	1
 36297  0184A4  2603               	addwf	i2delay_us@u,f,c
 36298  0184A6  0E00               	movlw	0
 36299  0184A8  2204               	addwfc	i2delay_us@u+1,f,c
 36300  0184AA  2205               	addwfc	i2delay_us@u+2,f,c
 36301  0184AC  2206               	addwfc	i2delay_us@u+3,f,c
 36302  0184AE  D7F2               	goto	i2l10705
 36303  0184B0                     i2u789_40:
 36304  0184B0  0601               	decf	i2delay_us@us,f,c
 36305  0184B2  A0D8               	btfss	status,0,c
 36306  0184B4  0602               	decf	i2delay_us@us+1,f,c
 36307  0184B6  2801               	incf	i2delay_us@us,w,c
 36308  0184B8  E1E5               	bnz	i2l10703
 36309  0184BA  2802               	incf	i2delay_us@us+1,w,c
 36310  0184BC  B4D8               	btfsc	status,2,c
 36311  0184BE  0012               	return	
 36312  0184C0  D7E1               	goto	i2l832
 36313  0184C2                     __end_ofi2_delay_us:
 36314                           	opt stack 0
 36315                           tosu	equ	0xFFF
 36316                           tosh	equ	0xFFE
 36317                           tosl	equ	0xFFD
 36318                           pclatu	equ	0xFFB
 36319                           pclath	equ	0xFFA
 36320                           tblptru	equ	0xFF8
 36321                           tblptrh	equ	0xFF7
 36322                           tblptrl	equ	0xFF6
 36323                           tablat	equ	0xFF5
 36324                           prodh	equ	0xFF4
 36325                           prodl	equ	0xFF3
 36326                           intcon	equ	0xFF2
 36327                           indf0	equ	0xFEF
 36328                           postinc0	equ	0xFEE
 36329                           fsr0h	equ	0xFEA
 36330                           fsr0l	equ	0xFE9
 36331                           wreg	equ	0xFE8
 36332                           indf1	equ	0xFE7
 36333                           postdec1	equ	0xFE5
 36334                           fsr1h	equ	0xFE2
 36335                           fsr1l	equ	0xFE1
 36336                           indf2	equ	0xFDF
 36337                           postinc2	equ	0xFDE
 36338                           postdec2	equ	0xFDD
 36339                           plusw2	equ	0xFDB
 36340                           fsr2h	equ	0xFDA
 36341                           fsr2l	equ	0xFD9
 36342                           status	equ	0xFD8
 36343                           
 36344 ;; *************** function i2_MXK_Release *****************
 36345 ;; Defined at:
 36346 ;;		line 130 in file "Library/MXK.c"
 36347 ;; Parameters:    Size  Location     Type
 36348 ;;		None
 36349 ;; Auto vars:     Size  Location     Type
 36350 ;;		None
 36351 ;; Return value:  Size  Location     Type
 36352 ;;                  1    wreg      unsigned char 
 36353 ;; Registers used:
 36354 ;;		wreg, status,2, status,0
 36355 ;; Tracked objects:
 36356 ;;		On entry : 0/0
 36357 ;;		On exit  : 0/0
 36358 ;;		Unchanged: 0/0
 36359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36364 ;;Total ram usage:        0 bytes
 36365 ;; Hardware stack levels used:    1
 36366 ;; This function calls:
 36367 ;;		Nothing
 36368 ;; This function is called by:
 36369 ;;		i2_Motor_Step
 36370 ;; This function uses a non-reentrant model
 36371 ;;
 36372                           
 36373                           	psect	text168
 36374  018CC8                     __ptext168:
 36375                           	opt stack 0
 36376  018CC8                     i2_MXK_Release:
 36377                           	opt stack 17
 36378                           
 36379                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 36380                           
 36381                           ;incstack = 0
 36382  018CC8  0E01               	movlw	1
 36383  018CCA  6E4C               	movwf	_Bus_State,c
 36384                           
 36385                           ;MXK.c: 135: return 1;
 36386                           ;	Return value of i2_MXK_Release is never used
 36387  018CCC  0012               	return	
 36388  018CCE                     __end_ofi2_MXK_Release:
 36389                           	opt stack 0
 36390                           tosu	equ	0xFFF
 36391                           tosh	equ	0xFFE
 36392                           tosl	equ	0xFFD
 36393                           pclatu	equ	0xFFB
 36394                           pclath	equ	0xFFA
 36395                           tblptru	equ	0xFF8
 36396                           tblptrh	equ	0xFF7
 36397                           tblptrl	equ	0xFF6
 36398                           tablat	equ	0xFF5
 36399                           prodh	equ	0xFF4
 36400                           prodl	equ	0xFF3
 36401                           intcon	equ	0xFF2
 36402                           indf0	equ	0xFEF
 36403                           postinc0	equ	0xFEE
 36404                           fsr0h	equ	0xFEA
 36405                           fsr0l	equ	0xFE9
 36406                           wreg	equ	0xFE8
 36407                           indf1	equ	0xFE7
 36408                           postdec1	equ	0xFE5
 36409                           fsr1h	equ	0xFE2
 36410                           fsr1l	equ	0xFE1
 36411                           indf2	equ	0xFDF
 36412                           postinc2	equ	0xFDE
 36413                           postdec2	equ	0xFDD
 36414                           plusw2	equ	0xFDB
 36415                           fsr2h	equ	0xFDA
 36416                           fsr2l	equ	0xFD9
 36417                           status	equ	0xFD8
 36418                           
 36419 ;; *************** function i2_MXK_Queue *****************
 36420 ;; Defined at:
 36421 ;;		line 144 in file "Library/MXK.c"
 36422 ;; Parameters:    Size  Location     Type
 36423 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 36424 ;;		 -> Absolute function(1), Motor_Step(1), 
 36425 ;; Auto vars:     Size  Location     Type
 36426 ;;		None
 36427 ;; Return value:  Size  Location     Type
 36428 ;;                  1    wreg      void 
 36429 ;; Registers used:
 36430 ;;		wreg, status,2, status,0
 36431 ;; Tracked objects:
 36432 ;;		On entry : 0/0
 36433 ;;		On exit  : 0/0
 36434 ;;		Unchanged: 0/0
 36435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36436 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36439 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36440 ;;Total ram usage:        3 bytes
 36441 ;; Hardware stack levels used:    1
 36442 ;; This function calls:
 36443 ;;		Nothing
 36444 ;; This function is called by:
 36445 ;;		i2_Motor_Step
 36446 ;; This function uses a non-reentrant model
 36447 ;;
 36448                           
 36449                           	psect	text169
 36450  018C5C                     __ptext169:
 36451                           	opt stack 0
 36452  018C5C                     i2_MXK_Queue:
 36453                           	opt stack 17
 36454                           
 36455                           ;MXK.c: 146: lQueue = pCallback;
 36456                           
 36457                           ;incstack = 0
 36458  018C5C  C001  F029         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 36459  018C60  C002  F02A         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 36460  018C64  C003  F02B         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 36461  018C68  0012               	return		;funcret
 36462  018C6A                     __end_ofi2_MXK_Queue:
 36463                           	opt stack 0
 36464                           tosu	equ	0xFFF
 36465                           tosh	equ	0xFFE
 36466                           tosl	equ	0xFFD
 36467                           pclatu	equ	0xFFB
 36468                           pclath	equ	0xFFA
 36469                           tblptru	equ	0xFF8
 36470                           tblptrh	equ	0xFF7
 36471                           tblptrl	equ	0xFF6
 36472                           tablat	equ	0xFF5
 36473                           prodh	equ	0xFF4
 36474                           prodl	equ	0xFF3
 36475                           intcon	equ	0xFF2
 36476                           indf0	equ	0xFEF
 36477                           postinc0	equ	0xFEE
 36478                           fsr0h	equ	0xFEA
 36479                           fsr0l	equ	0xFE9
 36480                           wreg	equ	0xFE8
 36481                           indf1	equ	0xFE7
 36482                           postdec1	equ	0xFE5
 36483                           fsr1h	equ	0xFE2
 36484                           fsr1l	equ	0xFE1
 36485                           indf2	equ	0xFDF
 36486                           postinc2	equ	0xFDE
 36487                           postdec2	equ	0xFDD
 36488                           plusw2	equ	0xFDB
 36489                           fsr2h	equ	0xFDA
 36490                           fsr2l	equ	0xFD9
 36491                           status	equ	0xFD8
 36492                           tosu	equ	0xFFF
 36493                           tosh	equ	0xFFE
 36494                           tosl	equ	0xFFD
 36495                           pclatu	equ	0xFFB
 36496                           pclath	equ	0xFFA
 36497                           tblptru	equ	0xFF8
 36498                           tblptrh	equ	0xFF7
 36499                           tblptrl	equ	0xFF6
 36500                           tablat	equ	0xFF5
 36501                           prodh	equ	0xFF4
 36502                           prodl	equ	0xFF3
 36503                           intcon	equ	0xFF2
 36504                           indf0	equ	0xFEF
 36505                           postinc0	equ	0xFEE
 36506                           fsr0h	equ	0xFEA
 36507                           fsr0l	equ	0xFE9
 36508                           wreg	equ	0xFE8
 36509                           indf1	equ	0xFE7
 36510                           postdec1	equ	0xFE5
 36511                           fsr1h	equ	0xFE2
 36512                           fsr1l	equ	0xFE1
 36513                           indf2	equ	0xFDF
 36514                           postinc2	equ	0xFDE
 36515                           postdec2	equ	0xFDD
 36516                           plusw2	equ	0xFDB
 36517                           fsr2h	equ	0xFDA
 36518                           fsr2l	equ	0xFD9
 36519                           status	equ	0xFD8
 36520                           
 36521                           	psect	text170
 36522  000000                     __ptext170:
 36523                           	opt stack 0
 36524                           tosu	equ	0xFFF
 36525                           tosh	equ	0xFFE
 36526                           tosl	equ	0xFFD
 36527                           pclatu	equ	0xFFB
 36528                           pclath	equ	0xFFA
 36529                           tblptru	equ	0xFF8
 36530                           tblptrh	equ	0xFF7
 36531                           tblptrl	equ	0xFF6
 36532                           tablat	equ	0xFF5
 36533                           prodh	equ	0xFF4
 36534                           prodl	equ	0xFF3
 36535                           intcon	equ	0xFF2
 36536                           indf0	equ	0xFEF
 36537                           postinc0	equ	0xFEE
 36538                           fsr0h	equ	0xFEA
 36539                           fsr0l	equ	0xFE9
 36540                           wreg	equ	0xFE8
 36541                           indf1	equ	0xFE7
 36542                           postdec1	equ	0xFE5
 36543                           fsr1h	equ	0xFE2
 36544                           fsr1l	equ	0xFE1
 36545                           indf2	equ	0xFDF
 36546                           postinc2	equ	0xFDE
 36547                           postdec2	equ	0xFDD
 36548                           plusw2	equ	0xFDB
 36549                           fsr2h	equ	0xFDA
 36550                           fsr2l	equ	0xFD9
 36551                           status	equ	0xFD8
 36552                           
 36553                           	psect	rparam
 36554  0000                     tosu	equ	0xFFF
 36555                           tosh	equ	0xFFE
 36556                           tosl	equ	0xFFD
 36557                           pclatu	equ	0xFFB
 36558                           pclath	equ	0xFFA
 36559                           tblptru	equ	0xFF8
 36560                           tblptrh	equ	0xFF7
 36561                           tblptrl	equ	0xFF6
 36562                           tablat	equ	0xFF5
 36563                           prodh	equ	0xFF4
 36564                           prodl	equ	0xFF3
 36565                           intcon	equ	0xFF2
 36566                           indf0	equ	0xFEF
 36567                           postinc0	equ	0xFEE
 36568                           fsr0h	equ	0xFEA
 36569                           fsr0l	equ	0xFE9
 36570                           wreg	equ	0xFE8
 36571                           indf1	equ	0xFE7
 36572                           postdec1	equ	0xFE5
 36573                           fsr1h	equ	0xFE2
 36574                           fsr1l	equ	0xFE1
 36575                           indf2	equ	0xFDF
 36576                           postinc2	equ	0xFDE
 36577                           postdec2	equ	0xFDD
 36578                           plusw2	equ	0xFDB
 36579                           fsr2h	equ	0xFDA
 36580                           fsr2l	equ	0xFD9
 36581                           status	equ	0xFD8
 36582                           
 36583                           	psect	temp
 36584  000051                     btemp:
 36585                           	opt stack 0
 36586  000051                     	ds	1
 36587  0000                     int$flags	set	btemp
 36588  0000                     wtemp6	set	btemp+1
 36589                           tosu	equ	0xFFF
 36590                           tosh	equ	0xFFE
 36591                           tosl	equ	0xFFD
 36592                           pclatu	equ	0xFFB
 36593                           pclath	equ	0xFFA
 36594                           tblptru	equ	0xFF8
 36595                           tblptrh	equ	0xFF7
 36596                           tblptrl	equ	0xFF6
 36597                           tablat	equ	0xFF5
 36598                           prodh	equ	0xFF4
 36599                           prodl	equ	0xFF3
 36600                           intcon	equ	0xFF2
 36601                           indf0	equ	0xFEF
 36602                           postinc0	equ	0xFEE
 36603                           fsr0h	equ	0xFEA
 36604                           fsr0l	equ	0xFE9
 36605                           wreg	equ	0xFE8
 36606                           indf1	equ	0xFE7
 36607                           postdec1	equ	0xFE5
 36608                           fsr1h	equ	0xFE2
 36609                           fsr1l	equ	0xFE1
 36610                           indf2	equ	0xFDF
 36611                           postinc2	equ	0xFDE
 36612                           postdec2	equ	0xFDD
 36613                           plusw2	equ	0xFDB
 36614                           fsr2h	equ	0xFDA
 36615                           fsr2l	equ	0xFD9
 36616                           status	equ	0xFD8


Data Sizes:
    Strings     406
    Constant    806
    Data        41
    BSS         1000
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160    159     159
    BANK1           256     23     255
    BANK2           256      4     255
    BANK3           256      8     226
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(BANK1[7]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_35(CODE[12]), STR_34(CODE[7]), STR_33(CODE[12]), STR_32(CODE[9]), 
		 -> STR_31(CODE[10]), STR_30(CODE[3]), STR_29(CODE[24]), STR_28(CODE[3]), 
		 -> STR_27(CODE[16]), STR_26(CODE[3]), STR_25(CODE[12]), STR_24(CODE[12]), 
		 -> STR_23(CODE[39]), STR_22(CODE[42]), STR_21(CODE[9]), STR_20(CODE[11]), 
		 -> STR_19(CODE[10]), STR_18(CODE[3]), STR_17(CODE[18]), STR_16(CODE[8]), 
		 -> STR_15(CODE[10]), STR_14(CODE[3]), STR_13(CODE[16]), STR_12(CODE[3]), 
		 -> STR_11(CODE[21]), STR_10(CODE[3]), STR_9(CODE[19]), STR_8(CODE[28]), 
		 -> STR_7(CODE[20]), STR_6(CODE[3]), STR_5(CODE[17]), STR_4(CODE[12]), 
		 -> STR_3(CODE[3]), STR_2(CODE[19]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK3[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK1[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortE(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK3[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_Travel
    _Sensor_Observe->_ADCAverage
    _Robot_Init->_UpdateDistance
    _Navigate_Maze->_Travel
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _pop->_printf
    _Go_Backward->_Travel
    _Travel->_ADCAverage
    _push->_printf
    _UpdateDistance->_eusartSend
    _Turn->_eusartSend
    _Robot_Stop->_eusartSend
    _Move_ADC_To->___fltol
    _SteppingCW->_delay_ms
    _Get_VirtualWall_State->_eusartSend
    _Drive->_eusartSend
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _Detect_Victim->_Console_Render
    _Create_Maze->___wmul
    _Closest_Object->_ADCAverage
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _SteppingCCW->_delay_ms
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit
    _ADCAverage->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->___fladd
    _eval_poly->___fladd
    ___flmul->___xxtofl
    ___flsub->___fladd
    ___fladd->___flneg
    ___flneg->___flmul
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Navigate_Maze
    _Navigate_Maze->_Go_Backward
    _Go_Home->_Go_Backward
    _Go_Backward->_Travel

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_Navigate_Maze

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0 4365602
                                              0 BANK3      8     8      0
                         _ADCAverage
                     _Closest_Object
                       _Console_Init
                     _Console_Render
                        _Create_Maze
                      _Detect_Victim
                    _FunctInitButton
                            _Go_Home
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                         _HMI_Render
                    _HMI_RightSwitch *
                      _HMI_SetNumber
                       _HMI_UpSwitch *
                         _ISR_Enable
                            _InitADC
            _InitSerialCommunication
                        _Init_Timer0
                           _LCD_Init
                           _LED_Init
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                     _MXK_TestButton *
                      _Navigate_Maze
                         _Robot_Init
                     _Sensor_Observe
                             _Travel
                             ___wmul
                           _delay_ms
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Sensor_Observe                                       6     6      0  232458
                                            145 BANK0      6     6      0
                         _ADCAverage
                     _Console_Render
                         _SteppingCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Robot_Init                                           0     0      0      93
                         _Robot_Stop
                     _UpdateDistance
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Navigate_Maze                                        8     8      0 1194474
                                             21 BANK1      2     2      0
                                              0 BANK2      4     4      0
                     _Console_Render
                        _Go_Backward
                             _Travel
                             ___wmul
                                _pop
                             _printf
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  363528
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  293252
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  263029
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   95653
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _Init_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSerialCommunication                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0   84709
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84709
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   37341
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Go_Home                                              0     0      0  543644
                        _Go_Backward
                                _pop
 ---------------------------------------------------------------------------------
 (2) _pop                                                  4     2      2    9950
                                             35 BANK0      4     2      2
                            _isempty
                             _printf
 ---------------------------------------------------------------------------------
 (3) _isempty                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Go_Backward                                          6     2      4  533694
                                             15 BANK1      6     2      4
                             _Travel
                             ___wmul
                                _pop (ARG)
 ---------------------------------------------------------------------------------
 (1) _Travel                                              29    19     10  459696
                                            145 BANK0     14     4     10
                                              0 BANK1     15    15      0
                         _ADCAverage
                     _Console_Render
                              _Drive
              _Get_VirtualWall_State
                        _Move_ADC_To
                         _Robot_Stop
                               _Turn
                     _UpdateDistance
                             ___wmul
                             _printf
                               _push
 ---------------------------------------------------------------------------------
 (2) _push                                                 2     0      2   10099
                                             35 BANK0      2     0      2
                             _isfull
                             _printf
 ---------------------------------------------------------------------------------
 (3) _isfull                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UpdateDistance                                       6     4      2      31
                                              1 BANK0      6     4      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Turn                                                10     4      6     778
                                              1 BANK0     10     4      6
                         _Robot_Stop
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _Robot_Stop                                           0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Move_ADC_To                                          2     0      2  138585
                                             73 BANK0      2     0      2
                     _Console_Render
                        _SteppingCCW
                         _SteppingCW
                            ___fladd
                            ___flmul
                            ___fltol
                           ___xxtofl
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SteppingCW                                           0     0      0    2534
                               _STP1
                               _STP2
                               _STP3
                               _STP4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Get_VirtualWall_State                                5     3      2      65
                                              1 BANK0      5     3      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Drive                                                4     0      4    2785
                                              1 BANK0      4     0      4
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Detect_Victim                                        5     3      2  117995
                                             44 BANK0      5     3      2
                     _Console_Render
                          _eusartRec
                         _eusartSend
                             _printf
 ---------------------------------------------------------------------------------
 (3) _eusartSend                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _eusartRec                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Create_Maze                                         10    10      0   79866
                                              6 BANK0     10    10      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Closest_Object                                       0     0      0  232384
                         _ADCAverage
                     _Console_Render
                        _SteppingCCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              23    17      6    9916
                                             21 BANK0     14     8      6
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _SteppingCCW                                          0     0      0    2534
                               _STP1
                               _STP2
                               _STP3
                               _STP4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             6     4      2    2534
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _STP4                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _STP3                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _STP2                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _STP1                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Console_Render                                      11    11      0  107983
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (4) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _LCD_DrawField                                       17     7     10   89176
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4   73192
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (7) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (5) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADCAverage                                          26    26      0  111951
                                            119 BANK0     26    26      0
                       _FunctReadADC
                         _HMI_Render
                      _HMI_SetNumber
                            ___awdiv
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   88412
                                             98 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   28640
                                             79 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   47182
                                             87 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     663
                                             79 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   12119
                                             73 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1996
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1249
                                             63 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___flge                                              12     4      8    1482
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   13173
                                             63 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    6065
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    6575
                                             63 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    5942
                                             43 BANK0     20    12      8
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     673
                                             39 BANK0      4     0      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _HMI_SetNumber                                        2     0      2    4246
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (4) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (5) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (5) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (7) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _FunctReadADC                                         2     0      2     214
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCAverage
     _FunctReadADC
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     ___awdiv
     ___fladd
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flmul
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flneg
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _pow
       ___flge
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _exp
         ___fldiv
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _floor
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flge
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
       _log
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _frexp
   _Closest_Object
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCCW
       _STP1
       _STP2
       _STP3
       _STP4
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul (ARG)
       _putch (ARG)
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _Create_Maze
     ___wmul
   _Detect_Victim
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _eusartRec
     _eusartSend
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul (ARG)
       _putch (ARG)
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _FunctInitButton
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
   _Go_Home
     _Go_Backward
       _Travel
         _ADCAverage
           _FunctReadADC
           _HMI_Render
             _OutSeg
               _SPI_Send
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           ___awdiv
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _pow
             ___flge
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _exp
               ___fldiv
               ___flge
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _eval_poly
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
               _floor
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flge
                 ___fltol
                   ___fladd (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___fladd
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___xxtofl (ARG)
                     _frexp (ARG)
             _log
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl
               _eval_poly
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
               _frexp
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _Drive
           _eusartSend
         _Get_VirtualWall_State
           _eusartRec
           _eusartSend
         _Move_ADC_To
           _Console_Render
             _Console_MakeField
               _Byte_GetBit
             _LCD_DrawField
               _Console_MakeField (ARG)
                 _Byte_GetBit
               _LCD_Word_Write (ARG)
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               _Set_Addr_Window (ARG)
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               ___wmul (ARG)
             _LCD_FillRectangle
               _LCD_Word_Write
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               _Set_Addr_Window
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
           _SteppingCCW
             _STP1
             _STP2
             _STP3
             _STP4
             _delay_ms
           _SteppingCW
             _STP1
             _STP2
             _STP3
             _STP4
             _delay_ms
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul (ARG)
             _putch (ARG)
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _Robot_Stop
           _eusartSend
         _Turn
           _Robot_Stop
             _eusartSend
           _eusartRec
           _eusartSend
         _UpdateDistance
           _eusartRec
           _eusartSend
         ___wmul
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul (ARG)
           _putch (ARG)
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
         _push
           _isfull
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul (ARG)
             _putch (ARG)
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
       ___wmul
       _pop (ARG)
         _isempty
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul (ARG)
           _putch (ARG)
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
     _pop
       _isempty
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul (ARG)
         _putch (ARG)
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_Render *
     _OutSeg
       _SPI_Send
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_SetNumber *
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _HMI_UpSwitch *
     _Port_GetPin
   _ISR_Enable *
   _InitADC *
   _InitSerialCommunication *
   _Init_Timer0 *
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _LED_Init *
     _LED_Set
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_TestButton *
     _Port_GetPin
   _Navigate_Maze *
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _Go_Backward
       _Travel
         _ADCAverage
           _FunctReadADC
           _HMI_Render
             _OutSeg
               _SPI_Send
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           ___awdiv
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _pow
             ___flge
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _exp
               ___fldiv
               ___flge
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _eval_poly
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
               _floor
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flge
                 ___fltol
                   ___fladd (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___fladd
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___xxtofl (ARG)
                     _frexp (ARG)
             _log
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl
               _eval_poly
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
               _frexp
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _Drive
           _eusartSend
         _Get_VirtualWall_State
           _eusartRec
           _eusartSend
         _Move_ADC_To
           _Console_Render
             _Console_MakeField
               _Byte_GetBit
             _LCD_DrawField
               _Console_MakeField (ARG)
                 _Byte_GetBit
               _LCD_Word_Write (ARG)
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               _Set_Addr_Window (ARG)
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               ___wmul (ARG)
             _LCD_FillRectangle
               _LCD_Word_Write
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               _Set_Addr_Window
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
           _SteppingCCW
             _STP1
             _STP2
             _STP3
             _STP4
             _delay_ms
           _SteppingCW
             _STP1
             _STP2
             _STP3
             _STP4
             _delay_ms
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul (ARG)
             _putch (ARG)
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _Robot_Stop
           _eusartSend
         _Turn
           _Robot_Stop
             _eusartSend
           _eusartRec
           _eusartSend
         _UpdateDistance
           _eusartRec
           _eusartSend
         ___wmul
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul (ARG)
           _putch (ARG)
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
         _push
           _isfull
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             ___wmul (ARG)
             _putch (ARG)
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
       ___wmul
       _pop (ARG)
         _isempty
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul (ARG)
           _putch (ARG)
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
     _Travel
       _ADCAverage
         _FunctReadADC
         _HMI_Render
           _OutSeg
             _SPI_Send
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         ___awdiv
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _pow
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _exp
             ___fldiv
             ___flge
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___flsub
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _eval_poly
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
             _floor
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flge
               ___fltol
                 ___fladd (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
           _log
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl
             _eval_poly
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
             _frexp
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _Drive
         _eusartSend
       _Get_VirtualWall_State
         _eusartRec
         _eusartSend
       _Move_ADC_To
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _SteppingCCW
           _STP1
           _STP2
           _STP3
           _STP4
           _delay_ms
         _SteppingCW
           _STP1
           _STP2
           _STP3
           _STP4
           _delay_ms
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul (ARG)
           _putch (ARG)
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
       _Robot_Stop
         _eusartSend
       _Turn
         _Robot_Stop
           _eusartSend
         _eusartRec
         _eusartSend
       _UpdateDistance
         _eusartRec
         _eusartSend
       ___wmul
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul (ARG)
         _putch (ARG)
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
       _push
         _isfull
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul (ARG)
           _putch (ARG)
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
     ___wmul
     _pop
       _isempty
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul (ARG)
         _putch (ARG)
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul (ARG)
       _putch (ARG)
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Robot_Init *
     _Robot_Stop
       _eusartSend
     _UpdateDistance
       _eusartRec
       _eusartSend
     _eusartSend
   _Sensor_Observe *
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCW
       _STP1
       _STP2
       _STP3
       _STP4
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul (ARG)
       _putch (ARG)
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Travel *
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _Drive
       _eusartSend
     _Get_VirtualWall_State
       _eusartRec
       _eusartSend
     _Move_ADC_To
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _SteppingCCW
         _STP1
         _STP2
         _STP3
         _STP4
         _delay_ms
       _SteppingCW
         _STP1
         _STP2
         _STP3
         _STP4
         _delay_ms
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul (ARG)
         _putch (ARG)
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _Robot_Stop
       _eusartSend
     _Turn
       _Robot_Stop
         _eusartSend
       _eusartRec
       _eusartSend
     _UpdateDistance
       _eusartRec
       _eusartSend
     ___wmul
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul (ARG)
       _putch (ARG)
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _push
       _isfull
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul (ARG)
         _putch (ARG)
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
   ___wmul *
   _delay_ms *
   _printf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul (ARG)
     _putch (ARG)
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      8      E2      11       88.3%
BITBANK2           100      0       0       8        0.0%
BANK2              100      4      FF       9       99.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     17      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3CF      12        0.0%
DATA                 0      0     4FB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon May 21 19:25:40 2018

                          i2_Timer0_Stop 8CC2                         SPI_Init@pChannel 0091  
             __size_of_MXK_BlockSwitchTo 0038                 Sensor_Observe@Low_Sensor 00F5  
                           i2_Motor_Step 66D0                                        _A 01E6  
                                      l8 6C18                             ___fldiv@aexp 0078  
                           ___fldiv@bexp 0077                                        _a 01E7  
                                      _i 015F                                        _j 015E  
                                      _k 0138                                        _l 004F  
                                      _u 015D                                        _w 0050  
                                      _x 013E                             ___fldiv@sign 006C  
                                     l11 61D0                                       l12 61BE  
                                     l90 5D54                                       l87 5CCE  
                    __size_of_ADCAverage 02F0                                       l89 5D2E  
                       ??_UpdateDistance 0063                             ___awdiv@sign 0065  
                    ___wmul@multiplicand 0062                            Travel@Req_Dir 01F3  
                          _HMI_DIPSwitch 8B22                       LCD_DrawField@pSize 0078  
                     LCD_DrawField@count 007E                        ?_Event_TestButton 0001  
                       i2_Timer0_Restart 8C76                                      l120 7124  
                                    l121 713A                                      l122 7150  
                                    l220 7DEC                                      l117 7166  
                                    l221 7DBC                                      l118 7110  
                                    l230 827A                                      l222 7DFC  
                                    l223 7DD4                              ?_LED_Toggle 0001  
                                    l234 8470                                      l235 8448  
                                    l227 8292                                      l403 5532  
                                    l412 5252                                      l228 8262  
                                    l340 733A                                      l404 54D2  
                                    l421 51EE                                      l413 5104  
                                    l237 845C                                      l341 7344  
                                    l405 5562                            ??_Console_Tab 0068  
                                    l414 526E                                      l430 6B48  
                                    l350 7408                                      l342 734E  
                                    l510 4D70                                      l406 54EA  
                                    l183 75AC                                      l415 5126  
                                    l351 73B6                                      l343 7358  
                                    l511 4E66                                      l407 5502  
                                    l184 758C                                      l600 3210  
                                    l432 6B6E                                      l344 7362  
                                    l512 4D90                                      l408 551A  
                                    l417 518A                                      l601 3362  
                                    l433 6B9A                                      l353 73C2  
                                    l337 7380                                      l345 736C  
                                    l610 33DA                                      l602 323C  
                                    l354 73CC                                      l346 7376  
                                    l338 732E                                      l370 72DA  
                                    l611 3420                                      l603 3372  
                                    l427 6BC2                                      l355 73D6  
                                    l363 72F8                                      l371 72E4  
                                    l531 4426                              ?_HMI_GetBar 0001  
                                    l612 3466                                      l604 32CC  
                                    l356 73E0                                      l372 72EE  
                                    l364 72A6                                      l532 4448  
                                    l516 4DD0                                      l357 73EA  
                                    l509 4E4C                                      l614 3538  
                                    l358 73F4                                      l366 72B2  
                                    l526 4468                                      l615 3530  
                                    l607 34AC                                      l359 73FE  
                                    l367 72BC                                      l519 4E10  
                                    l616 354A                                      l608 3394  
                                    l368 72C6                                      l528 4486  
                                    l393 8048                                      l617 3534  
                                    l609 34CA                                      l369 72D0  
                                    l529 4408                                      l483 4A30  
                                    l900 4542                                      l732 7688  
                                    l476 4AF8                                      l901 4546  
                                    l733 7682                                      l389 7C9A  
                                    l477 4988                                      l397 843E  
                                    l910 456A                                      l902 454A  
                                    l726 723C                                      l478 4B14  
                                    l486 4A94                                      l654 8848  
                                    l911 456E                                      l903 454E  
                                    l727 7236                                      l479 49CC  
                                    l655 8840                                      l912 4572  
                                    l904 4552                                      l824 7D5C  
                                    l832 8336                                      l681 797C  
                                    l913 4576                                      l905 4556  
                                    l921 7EF2                                      l673 8746  
                                    l657 8844                                      l914 457A  
                                    l906 455A                                      l922 7EC2  
                                    l930 6AA6                                      l915 457E  
                                    l907 455E                                      l819 7B74  
                                    l684 7992                                      l916 4582  
                                    l908 4562                                      l860 44A2  
                                    l853 458A                                      l917 4586  
                                    l909 4566                                      l861 44A6  
                                    l781 86E2                                      l597 321A  
                                    l678 79B8                                      l686 79A2  
                                    l870 44CA                                      l862 44AA  
                                    l854 448E                                      l598 3206  
                                    l679 796C                                      l871 44CE  
                                    l863 44AE                                      l599 322A  
                                    l880 44F2                                      l872 44D2  
                                    l864 44B2                                      l856 4492  
                                    l928 6B18                                      l776 85D4  
                                    l881 44F6                                      l873 44D6  
                                    l865 44B6                                      l857 4496  
                                    l929 6AF0                                      l890 451A  
                                    l882 44FA                                      l874 44DA  
                                    l866 44BA                                      l858 449A  
                                    l891 451E                                      l883 44FE  
                                    l875 44DE                                      l867 44BE  
                                    l859 449E                                      l892 4522  
                                    l884 4502                                      l876 44E2  
                                    l868 44C2                                      l893 4526  
                                    l885 4506                                      l877 44E6  
                                    l869 44C6                                      l894 452A  
                                    l886 450A                                      l878 44EA  
                                    l990 7914                                      l895 452E  
                                    l887 450E                                      l879 44EE  
                                    l983 7710                                      l896 4532  
                                    l888 4512                                      l992 7920  
                                    l984 76B6                                      l976 79EC  
                                    l897 4536                                      l889 4516  
                                    l985 770E                                      l898 453A  
                                    l978 79F8                                      l899 453E  
                                    l997 805E                                      l999 807C  
                                    _RA2 007C02                                      _RA3 007C03  
                                    _RD5 007C1D                                      _RD7 007C1F  
                                    _PR2 000FCB                                      _Spd 01DC  
                                    _exp 470C                                      _log 557A  
                                    _mod 012E                                      _val 0150  
                                    _pop 80E6                                      _pow 4B92  
                                    _top 01E0                              ?_HMI_SetBar 0001  
                     ??_Event_TestButton 0079                             _Word_GetPair 86C2  
                                    prod 000FF3                              ?_HMI_Render 0001  
                    MXK_SwitchTo@pModule 0067                                      tosl 000FFD  
                                    wreg 000FE8                       Console_MakeField@x 0070  
                     Console_MakeField@y 0071                               _TXSTA1bits 000FAD  
                           Console_Tab@c 006F                             Console_Tab@i 006E  
                    LCD_DrawField@pField 0072                             Console_Tab@t 006D  
                           ___flmul@aexp 007B                             ___flmul@bexp 0080  
                             i2_delay_us 8482                     Port_Set@TypeRequired 0082  
                           ___flmul@sign 007A                             ___flmul@temp 0085  
                           ___flmul@prod 0081                        Console_FormFeed@x 0062  
                      Console_FormFeed@y 0063                      LCD_DrawField@pPoint 0074  
                         ?_LCD_DrawField 0072                    Port_SetPinType@Output 008A  
                        Port_SetPin@Type 0073                          Port_SetPin@pPin 0071  
                          ?_Byte_GetPair 0069                          __end_of_LED_Set 82A4  
                __size_ofi2_Word_GetPair 0030                            i2_Port_SetPin 6D3A  
                           ___fltol@exp1 00A8                             _Word_SetPair 85B0  
                                   l1000 8094                                     l1010 70A0  
                                   l1004 7E34                            ?_Byte_GetZone 0060  
                                   l1005 7E5A                                     l1200 6F34  
                                   l1040 5B10                                     l1201 6F7C  
                                   l1009 70AC                                     l1041 5B16  
                                   l1202 6F90                                     l1042 5B1C  
                                   l1043 5B22                                     l1204 6FB4  
                                   l1036 5C1E                                     l1044 5B28  
                                   l1205 6FA0                                     l1045 5B2E  
                                   l1037 5B0A                                     l1062 5086  
                                   l1207 6FC2                                     l1063 50B4  
                                   l1047 5BAC                                     l3000 39D0  
                                   l1056 4F5A                                     l3001 3994  
                                   l1057 50D4                                     l1153 5404  
                                   l1146 78AC                                     l3010 3AAA  
                                   l1082 6E3E                                     l1058 4F62  
                                   l3011 3A70                                     l1059 4F86  
                                   l3020 3B42                                     l3004 3A4C  
                                   l1084 6E46                                     l2204 6D26  
                                   l2220 2F40                                     l3005 3A2A  
                                   l3101 3840                                     l1077 6E12  
                                   l2205 6CE6                                     l2221 2F52  
                                   l1158 8656                                     l3014 3A94  
                                   l3006 3A38                                     l2230 315E  
                                   l3023 3B66                                     l3015 3A98  
                                   l3007 3A3C                                     l3103 3884  
                                   l3111 59F2                                     l1079 6E1E  
                                   l2223 2F90                                     l3040 3C1A  
                                   l3032 3BA6                                     l3104 38A2  
                                   l3112 5A02                                     l2232 31B0  
                                   l2216 2E74                                     l3041 3C1C  
                                   l3025 3B7C                                     l3121 5AA2  
                                   l3113 5A20                                     l2225 314A  
                                   l3050 3F56                                     l3018 3B32  
                                   l3106 38C6                                     l3122 5A96  
                                   l2410 7D3E                                     l2234 31B2  
                                   l2226 2F9E                                     l2218 2F1C  
                                   l3035 3BEC                                     l3027 3B86  
                                   l3107 38E4                                     l3115 5A32  
                                   l2235 31F0                                     l2227 3138  
                                   l2219 2F2E                                     l3060 4066  
                                   l3116 5A26                                     l3061 408E  
                                   l3053 3F9A                                     l2421 233E  
                                   l2501 2DF4                                     l2229 3198  
                                   l2350 851C                                     l3054 3F96  
                                   l3126 5AC0                                     l3118 5A70  
                                   l3142 472C                                     l2430 2480  
                                   l2422 2338                                     l1630 652E  
                                   l2510 2D5A                                     l2502 2A76  
                                   l3063 40B4                                     l3039 3C12  
                                   l3127 5AF2                                     l3119 5A58  
                                   l2335 0032                                     l2415 7748  
                                   l2423 236C                                     l1631 657E  
                                   l3056 3FE0                                     l3144 4774  
                                   l2440 2618                                     l2432 24DA  
                                   l2424 2366                                     l2344 80CA  
                                   l1632 6568                                     l2512 2D5C  
                                   l2504 2B66                                     l2353 852C  
                                   l3073 4122                                     l3049 3F5A  
                                   l3153 63FA                                     l3145 47BC  
                                   l2337 006A                                     l2433 26B6  
                                   l2345 80AA                                     l3066 40EA  
                                   l3058 4008                                     l3090 3648  
                                   l3162 6EBA                                     l3154 63E8  
                                   l3170 6876                                     l3146 47F2  
                                   l2530 570A                                     l2338 0142  
                                   l2442 2636                                     l2434 254C  
                                   l2426 24A6                                     l1730 8552  
                                   l2506 2C56                                     l3075 4166  
                                   l3067 40CC                                     l3059 40B6  
                                   l3083 35DA                                     l3171 6866  
                                   l3147 496E                                     l2531 572E  
                                   l2339 0082                                     l2451 26CA  
                                   l2435 2564                                     l2427 241C  
                                   l2419 2310                                     l1627 65BE  
                                   l2195 5FBE                                     l3076 418A  
                                   l3084 35D6                                     l3156 6418  
                                   l3148 4938                                     l2460 285E  
                                   l2452 2820                                     l2436 25CE  
                                   l1724 85F6                                     l1732 8572  
                                   l1628 65B4                                     l2508 2D48  
                                   l2196 5F1C                                     l3077 41B4  
                                   l3085 35EA                                     l3157 64B2  
                                   l2357 3CF2                                     l2453 27F4  
                                   l2373 8BAA                                     l1629 6546  
                                   l2197 5F7E                                     l3078 41C0  
                                   l3094 3808                                     l3166 67EE  
                                   l2462 2872                                     l2454 27A4  
                                   l1726 861E                                     l3079 41C2  
                                   l3095 37EA                                     l3087 361A  
                                   l2543 57D2                                     l2391 83AE  
                                   l2447 2652                                     l1735 8B0A  
                                   l2199 5FBA                                     l2720 7474  
                                   l3088 3616                                     l3192 66B4  
                                   l3168 683C                                     l3184 559E  
                                   l2544 582C                                     l2536 5760  
                                   l2464 2886                                     l2448 2696  
                                   l3089 362A                                     l3193 661C  
                                   l2545 57D8                                     l2537 5712  
                                   l2529 56FA                                     l2481 5944  
                                   l3186 55C8                                     l2538 5726  
                                   l2482 5998                                     l2378 8BBE  
                                   l2458 284C                                     l2386 8122  
                                   l2723 749C                                     l2539 578A  
                                   l2483 598C                                     l2491 68C4  
                                   l1827 5E00                                     l2724 74A6  
                                   l2716 744E                                     l2396 81DA  
                                   l2900 74E2                                     l1828 5E1C  
                                   l2725 74B4                                     l2717 745E  
                                   l2397 81EA                                     l2485 59A8  
                                   l2493 68D6                                     l2750 6334  
                                   l2486 59A0                                     l2719 747C  
                                   l2751 6372                                     l2479 58E2  
                                   l2495 68E6                                     l2903 7522  
                                   l2904 7530                                     l2497 68F8  
                                   l1873 86BA                                     l2755 87A2  
                                   l2748 62C2                                     l2780 6A1C  
                                   l2749 62F6                                     l2781 6A0C  
                                   l2952 7F26                                     l2953 7F1E  
                                   l2962 83D6                                     l2786 6A40  
                                   l2778 69B0                                     l2963 83CE  
                                   l2787 6A34                                     l2956 7F46  
                                   l2957 7F50                                     l2789 6A5C  
                                   l2966 83EE                                     l2982 4BEC  
                                   l2967 83F8                                     l2983 4BD8  
                                   l2992 392C                                     l2993 3928  
                                   l2985 4C0A                                     l2986 4CAC  
                                   l2987 4C82                                     l2899 74EE  
                                   l2988 4D56                                     ?_exp 00B7  
                                   l2997 3974                                     ?_log 00AF  
                                   l2998 3970                           ??_Console_Init 0060  
                                   _ADON 007E10                                     ?_pop 0083  
                  Port_SetPinType@pInput 0086                                     ?_pow 00C2  
                         Travel@Test_ADC 00F5                                     STR_1 FFFC  
                                   STR_2 FF17                                     STR_3 FFFC  
                                   STR_4 FFB0                                     STR_5 FF4F  
                                   STR_6 FFFC                                     STR_7 FF03  
                                   STR_8 FEBA                                     STR_9 FF2A  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     _LATD 000F8C  
                                   _LATE 000F8D                                     _LATF 000F8E  
            __size_of_MXK_InitTestButton 0018                                     _LATG 000F8F  
                    __end_of_GetPortPORT 7438                                     _PIR1 000F9E  
                                   _PIR2 000FA1                                     _PIR3 000FA4  
                    __end_of_GetPortTRIS 7328                                     _SPI1 02C8  
                                   _SPI2 0161                                     _TMR0 000FD6  
                                   _STP1 8BFE                                     _STP2 8BEA  
                                   _STP3 8BD6                                     _STP4 8BC2  
                                   _gISR 0108                       Event_DIPSwitch@Bar 007A  
                          ??_Byte_GetBit 0063                                     _Turn 772E  
                     SPI_MaxSpeed@pInput 006F                                     _flag 002C  
                          ?_Byte_SetByte 0060                            ?_Byte_SetPair 006B  
                        __end_of_SPI_DCS 8754                                     _main 2E2A  
                                   _maze 0200                                     _mode 0148  
                        ??i2_Byte_SetBit 0005                            ?_Byte_SetQuad 006B  
                                   _itos 6A6E                                     _test 011C  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   indf0 000FEF                                     fsr2h 000FDA  
                                   fsr0l 000FE9                                     indf1 000FE7  
                                   indf2 000FDF                                     fsr1l 000FE1  
                                   fsr2l 000FD9                                     _push 837A  
                          ?_Byte_SetZone 0060                                     btemp 0051  
                                   _zero 004E                      __end_of_Create_Maze 22EC  
                                   exp@x 00B7                                     log@x 00AF  
                          ??_Byte_SetBit 0064                                     pow@x 00C2  
                                   pow@y 00C6                       __size_of_LCD_Reset 0050  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 14AA                       __size_of_LCD_Write 0020  
                          __CFG_IESO$OFF 000000                          ___fldiv@new_exp 0071  
                        ?_SPI_DisableISR 0060                      HMI_SetButton@pValue 0066  
                        __end_of_Go_Home 8A00                               _Cliff_Left 0158  
                          Console_Init@x 0062                            Console_Init@y 0063  
                         ?i2_Timer0_Stop 0001                        i2Byte_SetBit@pBit 0003  
                           ___param_bank 000000                          __end_of_Font5x7 FE0F  
                        __end_of_InitADC 80E6                     Set_Rotation@rotation 0066  
                          ??_Init_Timer0 0060                   __size_of_HMI_SetButton 007A  
                 __size_of_HMI_SetNumber 0026                              ?_ISR_Enable 0001  
                                  ??_exp 00BB                                    ??_log 00B3  
                                  ??_pop 0085                                    ??_pow 00CA  
           __size_of_Console_ClearCursor 0030                         __end_of_LCD_Fill 82EC  
                       __end_of_LCD_Init 5D9C                                    ?_STP1 0001  
                                  ?_STP2 0001                                    ?_STP3 0001  
                                  ?_STP4 0001                           ?_HMI_DIPSwitch 0001  
                          __CFG_PLLDIV$3 000000                         __end_of_LED_Init 7E0A  
                           _BAUDCON1bits 000F7E                            ??_Button_Init 00A8  
                GetPortProperties@pInput 0062                            ??_Button_Poll 007E  
                       __end_of_HMI_Init 5406                   __size_of_Navigate_Maze 053A  
                                  l13401 63AA                                    l15031 4938  
                                  l15113 862C                                    l13451 790C  
                                  l16005 2382                                    ?_Turn 0061  
                                  l13457 7918                                    l15401 5E00  
                                  l15077 4F7E                                    l14607 41B4  
                                  l15159 578E                                    l16063 25CE  
                                  l15441 8348                                    l16149 8BAA  
                       __end_of_HMI_Poll 7C3E                                    l16407 5CCE  
                                  l15439 8336                                    l14761 7D5C  
                                  l16257 82D0                                    l16417 5D60  
                                  l14915 78A4                                    l14763 7D6E  
                                  l17085 7D3E                                    l14783 7E96  
                                  l16295 54CA                                    l14953 6FB4  
                                  l14769 7D92                                    l14867 6B04  
                                  l16563 79E4                                    l14955 8C44  
                                  l14885 6E16                                    l16805 0072  
                                  l16821 0142                                    l14879 6E0A  
                                  l16591 53E2                                    l16569 79F0  
                                  l16817 0134                                    _I2C1T 01A5  
                                  l16787 0022                                    _I2C2T 019E  
                                  l16797 0052                                    l17983 3198  
                          ___fltol@sign1 00A7                          __end_of___fladd 3C38  
                                  ?_main 0001                          __end_of___fldiv 41DE  
                        __end_of___awdiv 74BE                          __end_of___flneg 87B4  
                                  _ADRES 000FC3                                    ?_itos 006C  
                                  STR_10 FFFC                                    STR_11 FEEE  
                                  STR_12 FFFC                                    STR_20 FFBC  
                                  STR_21 FFE4                                    STR_13 FF70  
                                  STR_30 FFFC                                    STR_14 FFFC  
                                  STR_22 FE69                                    STR_15 FFD1  
                                  STR_31 FFC7                                    STR_23 FE93  
                                  STR_16 FFED                                    STR_32 FFDB  
                                  STR_24 FFA4                                    STR_33 FF8C  
                                  STR_25 FF80                                    STR_17 FF3D  
                                  STR_26 FFFC                                    STR_18 FFFC  
                                  STR_34 FFF5                                    STR_19 FFD1  
                                  STR_35 FF98                                    STR_27 FF60  
                                  STR_29 FED6                          __end_of___flmul 38FA  
                        __end_of___flsub 8334                          __end_of___fltol 6A6E  
                                  ?_push 0083                          _Event_DIPSwitch 88B6  
                        __end_of___lldiv 7542                                    u11010 3BA2  
                                  u11060 3BF8                                    u12020 680E  
                                  u11230 383C                                    u12110 7EAE  
                                  u10600 7E52                                    u11170 3636  
                                  u11260 3892                                    u11180 37AC  
                                  u12028 6812                                    u12220 6E78  
                                  u10540 7950                  __size_of_HMI_LeftSwitch 0014  
                        ___awdiv@divisor 0062                                    u11270 38B0  
                                  u11350 69CE                                    u12230 6E80  
                                  u12070 7D92                                    u10550 7954  
                                  u10470 765C                                    u12150 85A2  
                 Navigate_Maze@Direction 01FD                                    u10640 7480  
                                  u10800 3A00                                    u11520 6EE2  
                                  u11185 37A2                                    u13105 43B8  
                                  u10810 3A10                                    u10490 76A6  
                                  u11530 7B22                                    u11355 69C4  
                                  u12155 859E                                    u13115 43E6  
                                  u12180 6B04                                    u10820 3A12  
                                  u12500 50C2                                    u11604 7264  
                                  u10565 8C20                                    u11605 7260  
                                  u10477 7652                                    u13045 4200  
                                  u12270 78EA                                    u11390 6A46  
                                  u11470 5AAC                                    u10566 8C22  
                                  u10590 7E30                                    u14030 7A3C  
                                  u11614 728C                                    u11615 7288  
                                  u10495 76A2                                    u13055 4212  
                                  u11528 6EE6                                    u13320 258C  
                                  u12265 78BA                                    u13065 4224  
                                  u10850 3A54                                    u12610 5836  
                                  u13330 25BA                                    u13075 423C  
                                  u12380 47C4                                    u11580 8830  
                                  u14220 0134                                    u11564 7F70  
                                  u14300 2C4C                                    u11565 7F6C  
                                  u13085 4336                                    u12630 8512  
                                  u11910 7F2A                                    u11830 411E  
                                  u12390 47C6                                    u14230 0142  
                                  u11574 7F98                                    u13270 23F0  
                                  u11575 7F94                                    u13095 438A  
                                  u13280 2454                                    u14320 2D3C  
                                  u14240 2986                                    u11585 882C  
                                  u14330 7D26                                    u13370 2646  
                                  u13290 2532                                    u13291 2530  
                                  u11940 83DA                                    u11860 4174  
                                  u10980 3B8A                                    u14340 7D34  
                                  u12740 74F2                                    u13700 6520  
                                  u14260 2A6C                                    u11870 4198  
                                  u12590 57C0                                    u14190 0052  
                                  u12830 84F2                                    u13630 82E8  
                                  u13710 655A                                    u13608 6276  
                                  u14280 2B5C                                    u12690 4C64  
                                  u12914 7612                                    u13810 5D60  
                                  u12915 760E                                    u12835 84EE  
                                  u11980 6406                                    u13548 6C7C  
                                  u12860 5E62                                    u13660 5568  
                                  u12845 5DBC                                    u13558 6170  
                                  u13559 6184                                    u12890 8366  
                                  u13690 650C                                    u15528 2E94  
                                  u15529 2EA8                                    u15538 2EB4  
                                  u15539 2EC8                                    u15548 2ED4  
                                  u15549 2EE8                                    u15478 8702  
                                  u15558 2EF4                                    u15479 8716  
                                  u15559 2F08                                    _INDEX 0040  
                        __end_of___lwdiv 7F5A                                    _MASKS FC1F  
                        __end_of___lwmod 8402                                    i2l430 6D52  
                                  i2l432 6D78                                    i2l433 6DA2  
                                  i2l427 6DC8                                    i2l732 7866  
                                  i2l733 7860                                    i2l832 8484  
                                  i2l781 87D2                          ___awdiv@counter 0064  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _PORTD 000F83  
                                  _PORTE 000F84                                    _PORTF 000F85  
                                  _PORTG 000F86                  __size_of_HMI_DownSwitch 0014  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _TRISF 000F97  
                                  _TRISG 000F98                                    _T_VAR 0132  
                       ??i2_Byte_GetPair 000D                                    _Drive 81C8  
                          ?_FunctReadADC 0060                         ??i2_Byte_GetZone 0006  
                     Port_TogglePin@pPin 0076                                    _X_Pos 013C  
                __size_of_Sensor_Observe 0140                                    _Y_Pos 013A  
                         __CFG_FCMEN$OFF 000000                                    _PortA 02F1  
                                  _PortB 0180                                    _PortC 018A  
                                  _PortD 0176                                    _PortE 016C  
                                  _PortF 0194                                    _PortG 02E7  
                __end_of_Port_SetPinType 528A                                    _Steps 0144  
                        _ADC_Initialised 0160                    __end_of_Detect_Victim 7D5A  
                         ??_Byte_GetPair 006C                           ?i2_Port_SetPin 0010  
                            LED_Set@pLED 0075                           Travel@rev_Dist 01EE  
                        __end_of_dpowers FC1F                           ??_Byte_GetZone 0065  
                                  _count 0126                                    _floor 63AE  
                                  _ldexp 67CE                           Button_Poll@Pin 0083  
                                  _frexp 6E8A                                    _errno 011A  
               __size_of_Set_Addr_Window 009A                      __end_of_Console_Tab 70F2  
                       __end_of_MXK_Init 615E                          __end_of_isempty 8BAE  
                                  _stack 0300                     i2Byte_GetPair@pInput 000A  
                                  _putch 8C4E                                    _total 0140  
                       __end_of_SPI_Init 35A8                         __end_of_SPI_Send 79D6  
                             _BumpSensor 015C                              _Go_Backward 68B2  
                  __end_ofi2_MXK_Release 8CCE                                    pclath 000FFA  
                                  tablat 000FF5                          __end_of_reverse 7F06  
                     __size_of_MXK_Queue 000E                           ??_Byte_SetByte 0063  
                         ??_Byte_SetPair 006F                                    pow@yi 00D3  
                         ??_Byte_SetQuad 006F                                    plusw2 000FDB  
                         ??_Byte_SetZone 0066                                    status 000FD8  
                                  wtemp6 0052                          _Configure_GPIOs 7C9E  
                   i2MXK_Queue@pCallback 0001                              i2delay_us@u 0003  
                         _LCD_Word_Write 8A36                              _Cliff_FLeft 015A  
                    __size_of_LED_Toggle 0040                      __size_of_HMI_GetBar 0006  
                          ?_HMI_UpSwitch 0001                              exp@exponent 00BF  
                             _Event_NULL 1404              __size_of_Port_CheckPairType 0060  
                            ldexp@newexp 00B3                             __end_of_STP1 8C12  
                           __end_of_STP2 8BFE                             __end_of_STP3 8BEA  
                           __end_of_STP4 8BD6                              _Cliff_Right 0159  
                    __size_of_HMI_SetBar 000A                          __initialization 7184  
                    __size_of_HMI_Render 0036                               _Found_Flag 0032  
                            log@exponent 00B3                      __end_of_Byte_GetBit 883E  
                          _Current_Dist1 014C                            _Current_Dist2 014A  
                           __end_of_Turn 77A4                             __end_of_main 3204  
                           __end_of_itos 6B2C                     HMI_SetButton@reindex 0062  
                           SPI_Send9@dat 0156                             __end_of_push 83BE  
                    __end_of_Byte_SetBit 7FAC                     Travel@Dist_Travelled 01F1  
                          ??_Move_ADC_To 00AB                         __end_of_InitList FBF5  
            __size_of_Port_CheckQuadType 0050                                   ??_STP1 0060  
                                 ??_STP2 0060                                   ??_STP3 0060  
                                 ??_STP4 0060                         __end_of_Mode_Set 8C24  
            __size_of_Port_CheckPortType 0040                                   ??_Turn 0067  
                            HMI_Render@a 0068                                   ??_main 03DA  
                                 ??_itos 0070                                   ??_push 0085  
                    __end_of_Init_Timer0 8AB2                 __size_of_FunctInitButton 0076  
                _Console_MakeField$10974 006E                            __activetblptr 000003  
                      Port_SetPin@pInput 006F                        __end_of_LCD_Reset 7FFC  
                      Port_SetPin@pValue 0072                                ??_LED_Set 0075  
                      _MXK_InitDIPSwitch 8AB2                           ??_FunctReadADC 0062  
                      GetPortPORT@pInput 0062                   Port_CheckPairType@Pin1 008A  
                 Port_CheckPairType@Pin2 008B                        __end_of_LCD_Write 89C6  
                            _GetPortPORT 73B0                             ?i2_MXK_Queue 0001  
                            _GetPortTRIS 72A0                          ??_LCD_DrawField 007C  
                                 ?_Drive 0061               __end_of_PortProperty_Valid 7B78  
                       __end_of_Port_Set 4488                              ?i2_delay_us 0001  
       __size_of_Console_IncrementCursor 0054                          Travel@direction 00F1  
                    __end_of_Button_Init 6C90                      __end_of_Button_Poll 628C  
                      Word_GetPair@pPair 006E                  LCD_FillRectangle@pPoint 006B  
                     ?_MXK_InitDIPSwitch 0001                            _HMI_SetButton 75C0  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                           ??_ADCAverage 00D7                                ??_SPI_DCS 0062  
                                 ?_floor 00A9                                   ?_ldexp 00AF  
                                 ?_frexp 0060                              _Create_Maze 0000  
                             _Low_Sensor 01D8                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                            _HMI_SetNumber 88DC  
                 Port_SetQuadType@Output 009A                                   _ANCON0 000FC1  
                       ___awdiv@dividend 0060                                   ?_putch 0001  
                       ??_Console_Render 0083                            ToSegment@pCHR 0060  
                       Travel@Prev_Angle 01F0                                   _GODONE 007E11  
                       _Console_FormFeed 78FE                   Port_SetQuadType@pInput 0096  
                                 i2l1630 6734                                   i2l1631 6780  
                                 i2l1632 676C                                   i2l1730 866A  
                                 i2l1627 67BC                                   i2l1732 868A  
                                 i2l1628 67B2                                   i2l1629 674A  
                                 i2l1590 145E                           __CFG_WDTEN$OFF 000000  
                    __size_of_ISR_Enable 000A                                   _RCREG1 000FAF  
                                 _RCSTA1 000FAC                   __end_of_LCD_Word_Write 8A50  
                          _Navigate_Maze 28F0                           _Timer0_Restart 8C6A  
                              ??_Go_Home 00FF                                   _SPBRG1 000FB0  
                    ??_MXK_InitDIPSwitch 009B                        _Current_Direction 01E2  
                                 _TRISA2 007C92                                   _TRISA3 007C93  
                                 _TRISD5 007CAD                                   _TRISD7 007CAF  
                                 _TXREG1 000FAE                         __end_of___xxtofl 5B04  
                              ??_InitADC 0060                           i2_MXK_SwitchTo 8658  
                                 _TXSTA1 000FAD                          Byte_GetBit@pBit 0062  
                             _Reset_High 8A82                       Console_Render@temp 0085  
                         ??_HMI_UpSwitch 0066                           OutSeg@pSegment 0063  
                        ??i2_Timer0_Stop 0001                      Port_TogglePin@Value 0077  
                       __end_of_delay_ms 7DB6                             LED_Init@pLED 008D  
                       __end_of_delay_us 837A                            ??_Timer2_Init 0071  
                          ??_Timer0_Stop 0060                               _Timer0_ISR 888E  
               __size_of_Console_NewLine 007A                        Timer2_Init@DIVIDE 007A  
                         __CFG_XINST$OFF 000000                                   _OutSeg 7890  
               __size_of_HMI_InitButtons 0006                                   _Travel 22EC  
                                 ___flge 628C                               _Motor_Step 64C4  
                __end_of_Event_DIPSwitch 88DC                                ??___fladd 0093  
                                 ___wmul 8866                          ??_HMI_DIPSwitch 0066  
                              ??___fldiv 0068                                ??___awdiv 0064  
                              ??___flneg 008B                           __CFG_STVREN$ON 000000  
                             _Robot_Init 8AE2                                   _change 004D  
                              ??___flmul 0076                                   _lMotor 0038  
                              ??___flsub 00A7                                ??___fltol 00A3  
                              ??___lldiv 0068                                   _lQueue 0029  
                             _TestButton 02DD                               _Robot_Stop 8946  
                              ??___lwdiv 0064                       __size_of_ToSegment 0284  
                              ??___lwmod 006B                 __end_of_Port_SetQuadType 4B92  
               i2Byte_GetZone@pChunkSize 0005                             HMI_GRender@a 0152  
                   __end_of_Console_Init 7A40                        GetPortTRIS@pInput 0062  
                     __size_of_Reset_Low 0018                                   clear_0 71CC  
                                 clear_1 71DE                                   clear_2 71EA  
                                 clear_3 71F6                                   clear_4 7202  
                                 _isfull 8BAE                       __end_of_ADCAverage 3F28  
                       ___awdiv@quotient 0066                               Port_Init@i 00A5  
                      __end_of_MXK_Queue 8C40               __end_ofHMI_SetButton@F7213 FC2C  
                                 _printf 56EE                __end_of_MXK_InitDIPSwitch 8ACA  
                                 main@up 03E1                           HMI_SetButton@v 0067  
                                 floor@i 00AD                                   floor@x 00A9  
                 HMI_SetSegments@pString 0061                              _Console_Tab 705E  
                    LCD_Word_Write@value 0065                             __pdataCOMRAM 0048  
                       Create_Maze@count 0068                       __size_of_Port_Init 0174  
                          ??_Port_GetPin 0063                 Port_CheckPortType@Output 0099  
                              ??_isempty 0060                      __end_of_Move_ADC_To 59B0  
                        ??i2_Port_SetPin 0014                             __mediumconst FB42  
            __end_ofTimer2_Init@PRESCALE FC2F                 Port_CheckPortType@pDrive 0098  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                             ?_MXK_Dequeue 0001  
                         ?_HMI_SetButton 0001                 Port_CheckPortType@pInput 0096  
                          ??_Port_SetPin 0073                                ??_reverse 0064  
                  Console_MakeField@Fill 035A                         ?_Port_SetPinType 0086  
                                 putch@c 0074                           ?_HMI_SetNumber 0076  
                         i2_Word_GetPair 87B4                  __end_of_Configure_GPIOs 7CFC  
                       ??_MXK_TestButton 0066                   __end_of_Timer0_Restart 8C76  
                          Set_Rotation@m 0065                             ?_MXK_Release 0001  
                         ?_Navigate_Maze 0001                               ___flge@ff1 0060  
                             ___flge@ff2 0064                               _SteppingCW 817E  
                        __CFG_FOSC$HSPLL 000000                   __end_ofi2_MXK_SwitchTo 868E  
                           ___xxtofl@arg 006A                         __end_ofexp@coeff FE37  
                           i2delay_us@us 0001                             ___xxtofl@exp 0069  
                           ___xxtofl@val 0060                         __end_oflog@coeff FE5B  
                        ?_LCD_Word_Write 0065                               __accesstop 0060  
                __end_of__initialization 7208                               Travel@Dist 00F3  
                              ?_LCD_Fill 0069                                ?_LCD_Init 0001  
                           _Cliff_FRight 015B                            SPI_Init@pMode 0092  
                             Travel@Wall 00F9                               ___flneg@f1 0087  
                            _Byte_GetBit 8812                                ?_LED_Init 0001  
               __end_ofi2_Timer0_Restart 8C82                               Travel@spd1 01EA  
                             Travel@spd2 01EC                                ?_HMI_Init 0001  
                      ??_Set_Addr_Window 0068                                ?_HMI_Poll 0001  
                           eval_poly@res 00AB                            ___rparam_used 000001  
                             ___fltol@f1 009F                              _Byte_SetBit 7F5A  
                          __end_of_MASKS FC28                           _PortA_Property FE67  
                            ?_Event_NULL 0001                                LCD_Fill@i 006B  
                              LCD_Fill@j 006C                                LCD_Init@i 0097  
                          __end_of_Drive 8212                    _Get_VirtualWall_State 8902  
                         __pcstackCOMRAM 0001                           _PortB_Property FE65  
                    __size_ofi2_delay_us 0040                             __pidataBANK1 8926  
                            _Init_Timer0 8A9A                      i2Byte_SetBit@pInput 0001  
                   __end_of_Byte_GetPair 8A1C                          Console_Render@x 008A  
                        Console_Render@y 008B                      i2Byte_SetBit@pValue 0004  
                          ?_Set_Rotation 0001                      Timer0_Init@PRESCALE FBF5  
                   __end_of_Byte_GetZone 76B4                            __end_of_floor 64C4  
                          __end_of_ldexp 68B2                            __end_of_frexp 6F28  
                    FunctReadADC@channel 0060                           _PortC_Property FE63  
                          __end_of_putch 8C5C                                ?_MXK_Init 0001  
                    __end_of_Timer2_Init 5EE2                      __end_of_Timer0_Stop 8CB6  
                              ?_SPI_Init 008D                                ?_SPI_Send 0060  
                            _Button_Init 6BE0                        Port_SetType@pType 009C  
                            _Button_Poll 615E                     __end_of_Byte_SetByte 8C32  
                   __end_of_Byte_SetPair 8986                           _HMI_LeftSwitch 8B72  
                         _PortD_Property FE61                     __end_of_Byte_SetQuad 89A6  
                           ??_LED_Toggle 0078                             ??_HMI_GetBar 0060  
                   __end_of_Byte_SetZone 72A0                           _HMI_DownSwitch 8B36  
                          SPI_Send@pData 0062                            ??_SteppingCCW 0066  
                  __end_of_MXK_DIPSwitch 8B22                             ??_HMI_SetBar 0060  
                           ??_HMI_Render 0068                           _PortE_Property FE5F  
                         _Sensor_Observe 5EE2                 __size_of_HMI_SetSegments 009C  
                 __end_ofi2_Word_GetPair 87E4                                  ??_Drive 0065  
                         _PortF_Property FE5D                  Port_CheckQuadType@Pair1 0093  
                Port_CheckQuadType@Pair2 0094                 MXK_BlockSwitchTo@pModule 0067  
                                ??_floor 00AD                                  ??_ldexp 00B5  
                                ??_frexp 0066                        ??_FunctInitButton 00A8  
                      _Console_Backspace 804C                          ?_Timer0_Restart 0001  
                                ??_putch 0074                         Move_ADC_To@Angle 00A9  
               __size_of_HMI_RightSwitch 0014                      _Console_ClearCursor 8754  
                      __end_of_ToSegment 470C                           _PortG_Property FE5B  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                      __end_of_Port_GetPin 85B0  
                Port_CheckQuadType@pQuad 0091                          reverse@iterator 0065  
                     __size_of_eval_poly 0100                         ??_SPI_DisableISR 0062  
                        ?i2_MXK_SwitchTo 0001                       ?_Console_Backspace 0001  
                      __end_of_Reset_Low 8A82                __size_of_Event_TestButton 0034  
                __size_of_Port_TogglePin 002E                               ??_LCD_Fill 006B  
                             ??_LCD_Init 0095                      __end_of_Port_SetPin 6BE0  
                 __end_of_PortA_Property FE69                                ?_Mode_Set 0001  
                     Byte_SetByte@pInput 0060                               ??_LED_Init 008D  
                     Byte_SetByte@pValue 0062                            ?_ISR_Function 0001  
                            ?_Reset_High 0001                               ??_HMI_Init 00A8  
                             ??_HMI_Poll 0084                            ?_Timer2_Clear 0001  
                         Go_Backward@spd 01F9                  Port_CheckPairType@Props 008D  
                 __end_of_PortB_Property FE67                       __size_of_eusartRec 0008  
                      __end_of_Port_Init 557A                              ?_Timer0_ISR 0001  
                Port_CheckPairType@pPair 0088                       __end_of_LED_Toggle 8482  
                     __end_of_HMI_GetBar 8CBC                 LCD_FillRectangle@pColour 0069  
                   __end_of_FunctReadADC 853C                      ??_Console_Backspace 0062  
                      Set_Addr_Window@xe 0066                        Set_Addr_Window@ye 0067  
                      Set_Addr_Window@xs 0068                        Set_Addr_Window@ys 0065  
                                ?_OutSeg 0063                       Byte_SetPair@pInput 006B  
                                ?_Travel 00F1                              ?_Motor_Step 0001  
                     Byte_SetPair@pValue 006E                                  ?___flge 0060  
                     __end_of_HMI_SetBar 8C96                   __end_of_PortC_Property FE65  
                     Word_GetPair@pInput 006C                       __end_of_HMI_Render 8658  
                         ??_Set_Rotation 0065                                ?_Port_Set 006F  
                                ?___wmul 0060                              ?_Robot_Init 0001  
                       ?_Event_DIPSwitch 0001                        Port_GetPin@Output 0065  
                           ??_ISR_Enable 0060                              ?_Robot_Stop 0001  
           __size_of_Console_ResetCursor 001A                     ?_Console_ClearCursor 0001  
                 __end_of_HMI_LeftSwitch 8B86                   __end_of_PortD_Property FE63  
                                _ADC_AN0 01BB                                  _ADC_AN1 01B6  
                                _ADC_AN2 01B1                                  _ADC_AN3 01AC  
                             ??_MXK_Init 00A6                              _Move_ADC_To 5856  
                      Port_GetPin@pInput 0060                        _Console_MakeField 6DE4  
                                ?_isfull 0001                        ??_Console_NewLine 0060  
                 __end_of_HMI_DownSwitch 8B4A                               ??_SPI_Init 0093  
                 Event_TestButton@pState 0079                               ??_SPI_Send 0063  
                                ?_printf 0075                        ??_HMI_InitButtons 0060  
             __size_of_MXK_InitDIPSwitch 0018                   __end_of_PortE_Property FE61  
                    Console_Render@F6956 01C8                   __end_of_Sensor_Observe 6022  
                     ?_Console_MakeField 0065                                  _COUNTER 0036  
                                i2l10703 8484                                  i2l10705 8494  
                        ??_HMI_SetButton 0060                     __end_of_HMI_UpSwitch 8B5E  
                                _LED_Set 825C                  _Console_IncrementCursor 7E0A  
                              ?___xxtofl 0060                   __end_of_PortF_Property FE5F  
                            _gBackcolour 0154                          ??_HMI_SetNumber 0078  
                              _I2C1_Done 0117                          ?i2_Word_GetPair 000D  
                              _I2C2_Done 0114                                _I2C1_More 0111  
                              _I2C2_More 010E                                ?_delay_ms 0060  
              __end_of_Console_Backspace 809A                                ?_delay_us 0060  
                    __size_of_Event_NULL 0002               __end_of_MXK_InitTestButton 8AE2  
                                _SSP1ADD 000FC8                                  _SSP1BUF 000FC9  
                                _SSP2BUF 000F6F                   __end_of_PortG_Property FE5D  
                    ??_Console_MakeField 0067                          ??_Navigate_Maze 02FB  
                                _SPI_DCS 8724                     __size_ofi2_MXK_Queue 000E  
                       ?_Configure_GPIOs 0001                 ?_InitSerialCommunication 0001  
                    __end_of_SteppingCCW 825C                             ?_Go_Backward 01F7  
                     eusartSend@sendChar 0060                     i2Byte_GetZone@Offset 0008  
                            ?_SteppingCW 0001                                  _Go_Home 89E4  
                     __end_of_ISR_Enable 8C8C                           ??_ISR_Function 0017  
                   i2Byte_GetZone@Output 0009                        Event_TestButton@j 003C  
                             ??_Mode_Set 0060                           ??_Timer2_Clear 0060  
                                _Font5x7 FC2F                     i2Byte_GetZone@pChunk 0004  
                                _InitADC 809A                     i2Byte_GetZone@pInput 0001  
                   SPI_DisableISR@pInput 0060                            ?_Port_GetQuad 0060  
                        Byte_SetBit@pBit 0062                     Port_TogglePin@pInput 0074  
                  __end_ofi2_Byte_SetBit 817E                   ?_Get_VirtualWall_State 0061  
                                __Hparam 0000                        Port_GetQuad@pQuad 0062  
                            _Timer2_Init 5D9C                                  __Lparam 0000  
                            _Timer0_Stop 8CB0                    __size_of_Console_Init 006A  
                                OutSeg@a 0042          __end_ofPortProperty_Valid@F6830 FC15  
                          LCD_Write@mode 0063                          __size_of_OutSeg 006E  
                            _Motor_Count 0146                               ??_Port_Set 0072  
                        __size_of_Travel 0604                          __size_of___flge 0122  
              __end_of_Console_MakeField 6E8A                        _Console_PrintChar 5B04  
                __size_of_Closest_Object 00AA                                  ___fladd 38FA  
                          ?_Port_SetType 009A                                  _gCursor 0048  
                                ___fldiv 3F28                                  ___awdiv 7438  
                                ___flneg 8784                    ??_Console_ClearCursor 0060  
                                ___flmul 35A8                                  ___flsub 82EC  
                                ___fltol 6990                                  _lBuffer 03E2  
                                ___lldiv 74BE                          __size_of___wmul 0028  
                                ___lwdiv 7F06                                  ___lwmod 83BE  
                                Turn@Dir 0065                                  Turn@Rad 0069  
                        ?_HMI_LeftSwitch 0001                 __end_of_Console_FormFeed 796A  
                     ?_Console_PrintChar 0001                                  __pcinit 7184  
                      __end_of_eval_poly 66D0                          ?_HMI_DownSwitch 0001  
                                __ramtop 1000                          __size_of_isfull 0014  
                              _CCW_Count 0124                                  __ptext0 2E2A  
                                __ptext1 5EE2                                  __ptext2 8AE2  
                                __ptext3 28F0                                  __ptext4 6022  
                                __ptext5 5406                                  __ptext6 4D68  
                                __ptext7 8402                                  __ptext8 41DE  
                                __ptext9 8C24                               _eusartSend 8C40  
                        __size_of_printf 0168                                  _average 002E  
                              _T0CONbits 000FD5                          ?_Sensor_Observe 0001  
                      i2MXK_SwitchTo@CUR 0007                                  _countOn 01D6  
                                _dpowers FC15                                _T2CONbits 000FCA  
                          LED_Set@pValue 0074                             __size_of_exp 0274  
                           __size_of_log 0174                      __size_of_Reset_High 0018  
                  Event_DIPSwitch@pState 0079                             __size_of_pop 004C  
                           __size_of_pow 01D6                               ??___xxtofl 0064  
                           ?_GetPortPORT 0060                                  _isempty 8B9A  
                           ?_GetPortTRIS 0060                      ??_Console_PrintChar 0070  
                      __end_of_eusartRec 8CB0                              _Port_GetPin 8576  
                      __CFG_MSSPMSK$MSK5 000000                      LCD_DrawRectangle@p2 01C4  
                    LCD_DrawRectangle@p4 01C0                             ??i2_delay_us 0003  
                             ??_delay_ms 0062                               ??_delay_us 0062  
                                _reverse 7EB2                Sensor_Observe@High_Sensor 00F3  
                              _DIPSwitch 02D3                      __size_of_Timer0_ISR 0028  
                            _Port_SetPin 6B2C                  __size_of_UpdateDistance 0066  
                         LCD_DrawField@i 0082                             ?_Create_Maze 0001  
                              _LCD_Reset 7FAC                      __size_of_Motor_Step 010C  
                            _VictimCount 0134                                _LCD_Write 89A6  
                   __size_of_MXK_Dequeue 0030                               delay_ms@ms 0060  
                   end_of_initialization 7208                      __size_of_Robot_Init 0016  
                                exp@sign 00C1                               delay_us@us 0060  
                    __size_of_Robot_Stop 0020                        ??_HMI_SetSegments 0063  
                Console_PrintChar@pInput 0073                             _Console_Init 79D6  
                   __size_of_MXK_Release 0016               __end_of_Port_CheckPairType 7C9E  
                                itos@Out 0074                           ??_Port_GetQuad 0063  
                     _PortProperty_Valid 7B10                                  pop@data 0085  
                     Byte_SetQuad@pInput 006B                       SPI_MinSpeed@pInput 006F  
                              i2u1545_48 88A2                       Byte_SetQuad@pValue 006E  
                  __size_of_Byte_GetPair 001C                          ___lldiv@divisor 0064  
                  __size_of_Byte_GetZone 007A                        ??_HMI_RightSwitch 0066  
                                pow@sign 00D2                          ___lldiv@counter 006C  
              __end_of_Console_PrintChar 5C54                           ??_Port_SetType 009D  
             __end_of_Port_CheckQuadType 804C                                  printf@c 0082  
                                printf@f 0075                           Port_Init@pPort 00A2  
                                postdec1 000FE5                                  postdec2 000FDD  
                  __size_of_Byte_SetByte 000E                    __size_of_Byte_SetPair 0020  
                 Console_MakeField@Index 0069                         _ADCAverage$15833 00D9  
                       _ADCAverage$15834 00DD                         _ADCAverage$15835 00E1  
                       _ADCAverage$15836 00E5                         _ADCAverage$15837 00E9  
                       _ADCAverage$15838 00ED                                  postinc0 000FEE  
                                postinc2 000FDE                      ?_PortProperty_Valid 006F  
                  __size_of_Byte_SetQuad 0020               __end_of_Port_CheckPortType 8442  
                  __size_of_Byte_SetZone 008E                   __size_of_Detect_Victim 005E  
                     __end_ofi2_delay_us 84C2                       Button_Init@pInitIO 009F  
                      ?_Port_SetQuadType 0096                              _gForecolour 01E4  
              ??_Console_IncrementCursor 0064                   __size_ofi2_MXK_Release 0006  
                    __size_of_SteppingCW 004A                                _PORTFbits 000F85  
                             _timercount 011E                       ??_Port_SetQuadType 009A  
                           ?_Console_Tab 0001                         Byte_GetZone@MASK 0066  
                            ___fladd@grs 009E                    Console_Render@lCursor 0086  
                            _SteppingCCW 8212          __end_of_InitSerialCommunication 89E4  
                              _MXK_Queue 8C32                         __CFG_CPUDIV$OSC1 000000  
                          ___xxtofl@sign 0068                         Byte_GetZone@pMax 0062  
             __size_of_Console_Backspace 004E                                _TRISCbits 000F94  
                            _Square_Dist 0130                          _Set_Addr_Window 6FC4  
                         SPI_Init@pClock 008D                         ??_LCD_Word_Write 0067  
                            ___fldiv@grs 0073                              ___fldiv@rem 006D  
                  __end_of_LCD_DrawField 75C0                           Port_Set@pInput 006F  
                         SPI_Init@pInput 0093                     ??_PortProperty_Valid 0073  
                         Port_Set@pValue 0071                               ?_LCD_Reset 0001  
                   __end_of_Set_Rotation 7184                               ?_LCD_Write 0063  
                           _Byte_GetPair 8A00                       HMI_SetButton@F7213 FC28  
                           _Byte_GetZone 763A                            ?_MXK_SwitchTo 0001  
                      LCD_DrawField@xmax 0080                        LCD_DrawField@ymax 0081  
                            Travel@error 01F5  Get_VirtualWall_State@Vitual_Wall_Sensor 0064  
                         _Port_TogglePin 87E4                         _Event_TestButton 868E  
                            ___flmul@grs 007C                    __size_of_FunctReadADC 003C  
                   Port_SetPinType@Props 008B                             ?_Byte_GetBit 0060  
                __size_ofi2_Byte_GetPair 001A                             _Byte_SetByte 8C24  
                           _Byte_SetPair 8966                             _Byte_SetQuad 8986  
                         _Previous_Angle 0136                  __size_ofi2_Byte_GetZone 0076  
                           _Byte_SetZone 7212                     Port_SetPinType@pType 0089  
                      ?i2_Timer0_Restart 0001                             ?_Byte_SetBit 0060  
                          ?_SPI_MaxSpeed 006F                        __size_of_LCD_Fill 0048  
                           ??_Event_NULL 0060                        __size_of_LCD_Init 0148  
                      __size_of_LED_Init 0054                            ?_SPI_MinSpeed 006F  
                  __end_ofi2_Timer0_Stop 8CC8                       ??i2_Timer0_Restart 0001  
                      __size_of_HMI_Init 017C                        __size_of_HMI_Poll 0060  
                          ?i2_Motor_Step 0001                             ?_Init_Timer0 0001  
             __size_of_Console_MakeField 00A6                           __end_of_OutSeg 78FE  
                         __end_of_Travel 28F0                           __end_of___flge 63AE  
                  __size_of_HMI_UpSwitch 0014                                _Close_Pos 0128  
                         __end_of___wmul 888E                    __end_of_HMI_DIPSwitch 8B36  
                          __pidataCOMRAM 8C96                             ?_Button_Init 009B  
                        _FunctInitButton 77A4                             ?_Button_Poll 007B  
                            ?_eusartSend 0001                                _Bus_State 004C  
                    i2Byte_GetPair@pPair 000C                           __end_of_isfull 8BC2  
                   __end_of_ISR_Function 14AA                        __size_of_MXK_Init 013C  
                              _BumpState 012C                              Turn@C_Angle 0067  
                             floor@expon 00B1                     __end_of_Timer2_Clear 8CA8  
                         __end_of_printf 5856                        __size_of_SPI_Init 03A4  
                      __size_of_SPI_Send 006C                            ?_Word_GetPair 006C  
                       ??_Timer0_Restart 0060                       Port_SetType@Output 009F  
                    start_initialization 7184                               ?_MXK_Queue 0060  
                             eval_poly@d 00A3                               eval_poly@n 00A5  
                             eval_poly@x 009F                               ldexp@value 00AF  
                           _FunctReadADC 8500                 PortProperty_Valid@Errors 0075  
                       ??i2_MXK_SwitchTo 0007                        _LCD_FillRectangle 7E5E  
                     Port_SetType@pInput 009A                             _Current_Dist 014E  
                            __end_of_exp 4980                              __end_of_log 56EE  
                            _ADC_Reading 012A                              __end_of_pop 8132  
                            __end_of_pow 4D68                               HMI_Init@in 00A8  
                    HMI_SetNumber@pInput 0076                    __end_ofi2_Port_SetPin 6DE4  
                     __end_of_Event_NULL 1406                            _Detect_Victim 7CFC  
                 __end_of_Port_TogglePin 8812                            ?_Word_SetPair 006F  
                      Byte_SetBit@pInput 0060                           ??_MXK_SwitchTo 0066  
                      Byte_SetBit@pValue 0063                       ?_LCD_FillRectangle 0069  
                    _Console_ResetCursor 8A1C              PortProperty_Valid@pPinDrive 0071  
                   MXK_BlockSwitchTo@CUR 0066                 PortProperty_Valid@pInput 006F  
                          i2_MXK_Release 8CC8                               frexp@value 0060  
                 LCD_FillRectangle@pSize 006F                           SPI_Send@pInput 0060  
                   __size_of_Go_Backward 00DE                             ??_Reset_High 0074  
               __size_of_Port_SetPinType 019E                           ??_SPI_MaxSpeed 0071  
                  Port_SetQuadType@pQuad 0098                                _ToSegment 4488  
                    ??_LCD_FillRectangle 0073                    Port_SetQuadType@pType 0099  
                        _Console_NewLine 76B4                           ??_SPI_MinSpeed 0071  
                           _HMI_UpSwitch 8B4A                                _Reset_Low 8A6A  
                           ??_Timer0_ISR 0017                          _HMI_InitButtons 8CBC  
                      __size_of_Mode_Set 0012               __size_of_Console_PrintChar 0150  
                              _gCharSize 01D0                         Timer2_Init@INDEX 003E  
                              OutSeg@cur 0044                           ??i2_Motor_Step 0015  
                               ??_OutSeg 0064                                OutSeg@out 0067  
                __size_of_Console_Render 01B6                             ??_Motor_Step 0074  
                               ??_Travel 00FB                           _Closest_Object 6C90  
                               ??___flge 0068                       Byte_SetZone@Offset 0069  
                           ??_Robot_Init 0067                                 ??___wmul 0064  
                           ??_Robot_Stop 0061                     ?_Console_ResetCursor 0001  
                              _Port_Init 5406                              __pdataBANK1 01C8  
                           ?_Move_ADC_To 00A9                        __size_of_Port_Set 02AA  
                     Byte_SetZone@pChunk 0063                                 ??_isfull 0060  
                       ??i2_Word_GetPair 0010                       Byte_SetZone@pInput 0060  
                     Byte_SetZone@pValue 0065                            Mode_Set@pMode 0060  
                               ??_printf 007B                  __end_of_Set_Addr_Window 705E  
               Port_CheckQuadType@Output 0095                                _gLineSize 01CC  
               Port_CheckQuadType@pDrive 0092                                ___fladd@a 008F  
                              ___fladd@b 008B                           ??_Word_GetPair 006F  
               Port_CheckQuadType@pInput 008F                            _Desired_Level 01DA  
                              Travel@Dir 01E8                     __end_of_Port_GetQuad 8500  
                              ___fldiv@a 0064                                ___fldiv@b 0060  
              __end_of_LCD_FillRectangle 7EB2                              __pbssBIGRAM 03E2  
                              Travel@Spd 00F7                                 ?_LED_Set 0074  
                              ___flmul@a 0072                                ___flmul@b 006E  
                            __pbssCOMRAM 0029                                ___flsub@a 00A3  
                              ___flsub@b 009F                       __end_of_Reset_High 8A9A  
                          __pcstackBANK0 0060                            __pcstackBANK1 01E8  
                          __pcstackBANK2 02FB                            __pcstackBANK3 03DA  
                         _UpdateDistance 7B78                               itos@Length 0072  
                         ?_Detect_Victim 008C                           ??_Word_SetPair 0073  
                      __size_of___xxtofl 0154                       __end_of_Timer0_ISR 88B6  
                   __size_of_GetPortPORT 0088                              ??_LCD_Reset 0079  
                   __size_of_GetPortTRIS 0088                     __end_of_Port_SetType 4F36  
                               ?_SPI_DCS 0060                          ?_Port_TogglePin 0074  
                            ??_LCD_Write 0064                        __size_of_delay_ms 005C  
                      __size_of_delay_us 0046                                Turn@Angle 0061  
                    __CFG_CCP2MX$DEFAULT 000000                       __end_of_Motor_Step 65D0  
                  Timer2_Init@pFrequency 006D                             ??_SteppingCW 0066  
                         ?i2_MXK_Release 0001                                Turn@Speed 0063  
                     __end_of_Robot_Init 8AF8                     __size_of_Create_Maze 22EC  
                     __end_of_Robot_Stop 8966                                 ?_Go_Home 0001  
                              _exp$15841 00BB                  ??_Get_VirtualWall_State 0063  
                               ?_InitADC 0001                 Port_CheckPairType@Output 008C  
                    __size_of_eusartSend 000E                               ?_ToSegment 0001  
               Port_CheckPairType@pDrive 0089                 Port_CheckPairType@pInput 0086  
                         reverse@tempVar 0064                   __end_of_Closest_Object 6D3A  
                     _MXK_InitTestButton 8ACA                               ?_Reset_Low 0001  
                 __size_of_MXK_DIPSwitch 0014                             ?_Timer2_Init 006D  
                       ??_HMI_LeftSwitch 0066                             ?_Timer0_Stop 0001  
                       ___lwdiv@dividend 0060                            _lStepFunction 010B  
                __size_of_MXK_TestButton 0014                        Byte_SetPair@pPair 006D  
                __end_of_FunctInitButton 781A                         ??_HMI_DownSwitch 0066  
       __size_of_InitSerialCommunication 001E                                __pintcode 1408  
                          __pmediumconst FB42                    ??_Console_ResetCursor 0060  
                               ?___fladd 008B                                 ?___fldiv 0060  
                               ?___awdiv 0060                                __ptext100 79D6  
                              __ptext101 6C90                                __ptext110 804C  
                              __ptext102 56EE                                 ?___flneg 0087  
                              __ptext111 8754                                __ptext103 8C4E  
                              __ptext120 7542                                __ptext112 8212  
                              __ptext104 5B04                                __ptext121 8866  
                              __ptext113 7D5A                                __ptext105 705E  
                              __ptext130 557A                                __ptext122 6FC4  
                              __ptext114 8BC2                                __ptext106 7E0A  
                              __ptext131 470C                                __ptext123 8A36  
                              __ptext115 8BD6                                __ptext107 76B4  
                              __ptext140 82EC                                __ptext132 67CE  
                              __ptext124 89A6                                __ptext116 8BEA  
                              __ptext108 78FE                                __ptext141 38FA  
                              __ptext133 63AE                                __ptext125 8C12  
                              __ptext117 8BFE                                __ptext109 8A1C  
                              __ptext150 6F28                                __ptext142 8784  
                              __ptext134 6E8A                                __ptext126 6DE4  
                              __ptext118 4F36                                __ptext151 4488  
                              __ptext143 3F28                                __ptext135 59B0  
                              __ptext127 8812                                __ptext119 7E5E  
                              __ptext160 8C76                                __ptext152 8622  
                              __ptext144 7438                                __ptext136 6990  
                              __ptext128 3C38                                __ptext161 6D3A  
                              __ptext153 7890                                __ptext145 88DC  
                              __ptext137 628C                                __ptext129 4B92  
                              __ptext170 0000                                __ptext162 87B4  
                              __ptext154 796A                                __ptext146 6A6E  
                              __ptext138 65D0                                __ptext163 8A50  
                              __ptext155 8500                                __ptext147 7EB2  
                              __ptext139 35A8                                __ptext164 781A  
                              __ptext148 83BE                                __ptext165 8132  
                              __ptext157 888E                                __ptext149 7F06  
                              __ptext166 8658                                __ptext158 66D0  
                              _pShiftVal 0034                                __ptext167 8482  
                              __ptext159 8CC2                                __ptext168 8CC8  
                              __ptext169 8C5C                                 ?___flmul 006E  
                       ??_Sensor_Observe 00F1                                 ?___flsub 009F  
                               ?___fltol 009F                                 ?___lldiv 0060  
                             ?_Port_Init 00A0                                 ?___lwdiv 0060  
                               ?___lwmod 0067                      ?_MXK_InitTestButton 0001  
                      ?_Console_FormFeed 0001                        _GetPortProperties 7328  
                              _pow$15840 00CE                                _pow$15839 00CA  
                     __end_of_SteppingCW 81C8              __end_ofTimer0_Init@PRESCALE FC05  
                     ??_Console_FormFeed 0060                          _HMI_SetSegments 6F28  
                     ?_GetPortProperties 0060                         Event_NULL@pState 0001  
                 __end_of_UpdateDistance 7BDE                 __size_of_Event_DIPSwitch 0026  
                  __size_of_Set_Rotation 0092                            ??i2_MXK_Queue 0004  
                              _eval_poly 65D0                                 ?_isempty 0001  
                            ??_MXK_Queue 0063                             ?_Port_GetPin 0060  
                         __size_of_Drive 004A                    __end_of_HMI_SetButton 763A  
                   __size_of_Console_Tab 0094                                 ?_reverse 0060  
                           ?_Port_SetPin 006F                                _readIndex 0030  
                  __end_of_HMI_SetNumber 8902                         ___lwdiv@quotient 0065  
                        _HMI_RightSwitch 8B5E                           __size_of_floor 0116  
                         __size_of_ldexp 00E4                           __size_of_frexp 009E  
                    ??_GetPortProperties 0062                  __end_of_Console_NewLine 772E  
                              _eusartRec 8CA8                     ??_MXK_InitTestButton 008D  
                     Byte_GetPair@pInput 0069                           __size_of_putch 000E  
                  __end_of_Navigate_Maze 2E2A                  __end_of_HMI_InitButtons 8CC2  
                      i2Port_SetPin@Type 0014                        i2Port_SetPin@pPin 0012  
                         i2_Byte_GetPair 8A50                                 _LCD_Fill 82A4  
                               _LCD_Init 5C54                           ___wmul@product 0064  
                               _HMIBoard 03A0                           i2_Byte_GetZone 781A  
                               _LED_Init 7DB6                                delay_ms@u 0062  
                     Button_Poll@pButton 007B                                delay_us@u 0062  
                               _HMI_Init 528A                                 _HMI_Poll 7BDE  
                     MXK_Queue@pCallback 0060                                 _IPR1bits 000F9F  
                               _IPR3bits 000FA5                                 _PIE1bits 000F9D  
                               _PIE3bits 000FA3              __end_of_Console_ClearCursor 8784  
               __size_of_Configure_GPIOs 005E                     __size_of_Byte_GetBit 002C  
                        ?_Closest_Object 0001                        Byte_SetQuad@pQuad 006D  
                               _PIR1bits 000F9E                                 _PIR3bits 000FA4  
                               _CW_Count 0122                                 i2u724_40 783C  
                               i2u724_47 7832                                 i2u726_40 7884  
                               i2u726_45 7880                                 i2u881_40 6712  
                               i2u785_44 8146                                 i2u785_45 8142  
                   __size_of_Byte_SetBit 0052                                 i2u882_40 6726  
                               i2u786_44 816C                                 i2u786_45 8168  
                               i2u883_40 675E                                 i2u789_40 84B0  
                               _RCONbits 000FD0                     i2Word_GetPair@pInput 000D  
                     _Sensor_Observe_Fin 0120                         __CFG_WDTPS$32768 000000  
                       HMI_SetBar@pValue 0060                        Button_Init@pInput 009B  
                __size_of_SPI_DisableISR 0028                                 _SSP1CON1 000FC6  
                      ??_Port_SetPinType 008A                                 _SSP1CON2 000FC5  
                               _SSP2CON1 000F6C                                 _SSP2CON2 000F6B  
                  __size_of_ISR_Function 00A2                                 _SSP1STAT 000FC7  
              __end_of_GetPortProperties 73B0                                 _SSP2STAT 000F6D  
                           _Set_Rotation 70F2                    __size_of_Timer2_Clear 0008  
                   __end_of_MXK_SwitchTo 8576                       _Port_CheckPairType 7C3E  
                               _MXK_Init 6022                     __size_of_Init_Timer0 0018  
                        MXK_SwitchTo@CUR 0066                                 _SPI_Init 3204  
               __end_of_Event_TestButton 86C2                                 _SPI_Send 796A  
                             _ADCON0bits 000FC2                               _ADCON1bits 000FC1  
                       ?_Set_Addr_Window 0065                        ___wmul@multiplier 0060  
                      Byte_GetBit@Output 0064                     Go_Backward@direction 01F7  
                             printf@flag 007C                     Timer2_Init@pCPUClock 0076  
             __size_of_LCD_FillRectangle 0054                             ?_SteppingCCW 0001  
                   __size_of_Button_Init 00B0                          ?_UpdateDistance 0061  
                   __end_of_SPI_MaxSpeed 7AA8                               printf@prec 007D  
                      Byte_GetBit@pInput 0060                      Port_SetPinType@pPin 0088  
                   __size_of_Button_Poll 012E                               ?_eval_poly 009F  
                        ??_Detect_Victim 008E                       _Port_CheckQuadType 7FFC  
                          _MXK_DIPSwitch 8B0E                      ?_Port_CheckPairType 0086  
                              main@right 03DF                     __end_of_SPI_MinSpeed 7B10  
                          ??_MXK_Dequeue 0076                         __size_of_LED_Set 0048  
                 __size_ofi2_Byte_SetBit 004C                       _Port_CheckPortType 8402  
                  Button_Poll@pIncrement 007D                  PortProperty_Valid@F6830 FC05  
                   __end_ofi2_Motor_Step 67CE                          ??i2_MXK_Release 0001  
                             _ADCAverage 3C38                                copy_data0 7198  
                              copy_data1 71B8                            ??_MXK_Release 0060  
                             ?_eusartRec 0001                   __end_ofi2_Byte_GetPair 8A6A  
              __size_of_Port_SetQuadType 0212                         __size_of_SPI_DCS 0030  
                    ?_Port_CheckQuadType 008F                   __end_ofi2_Byte_GetZone 7890  
                    __end_ofi2_MXK_Queue 8C6A                      ?_Port_CheckPortType 0096  
                        itos@destination 006E                                 _InitList FB43  
                   _Motor_Step$intlevel0 64CA                                 _Mode_Set 8C12  
                     Port_GetQuad@Output 0065                         __size_of_Go_Home 001C  
                            ??_ToSegment 0060                             _ISR_Function 1408  
                              frexp@eptr 0064                       Port_GetQuad@pInput 0060  
                           _Timer2_Clear 8CA0                         __size_of_InitADC 004C  
                   __end_of_Word_GetPair 86F4                                 _lCBuffer 0328  
                   ??_Port_CheckPairType 008A                              ??_Reset_Low 0074  
                               __Hrparam 0000                             OutSeg@pInput 0066  
                         _Console_Render 4F36                                 __Lrparam 0000  
                        Timer2_Init@RDIV 0072                         ?_FunctInitButton 0001  
                         LCD_Write@value 0064                                 _Port_Set 41DE  
                           OutSeg@segset 0043                                rand@screw 0041  
                   __end_of_Word_SetPair 85EA                              ??_Port_Init 00A3  
                __end_of_HMI_SetSegments 6FC4                     ??_Port_CheckQuadType 0093  
                       __size_of___fladd 033E                         __size_of___fldiv 02B6  
                  __size_of_Port_GetQuad 003E                         __size_of___awdiv 0086  
                       __size_of___flneg 0030                         __size_of___flmul 0352  
                       __size_of___flsub 0048                         __size_of___fltol 00DE  
                       __size_of___lldiv 0084                        _MXK_BlockSwitchTo 85EA  
                       __size_of___lwdiv 0054                     ??_Port_CheckPortType 0099  
                       __size_of___lwmod 0044                                 _lBufferX 0046  
                               _lBufferY 0045                      Timer2_Init@PRESCALE FC2C  
                           ??_eusartSend 0060                          LCD_Fill@pColour 0069  
                     ?_MXK_BlockSwitchTo 0001                __size_ofi2_Timer0_Restart 000C  
                   __size_of_Move_ADC_To 015A                                 _lCurrent 003A  
                __end_of_HMI_RightSwitch 8B72                   Byte_GetZone@pChunkSize 0064  
                         ?_MXK_DIPSwitch 0001                   Byte_SetZone@pChunkSize 0064  
                  __size_of_Port_SetType 01CE                            reverse@length 0062  
                           Create_Maze@p 006A                             Create_Maze@x 006C  
                           Create_Maze@y 006E                                itos@input 006C  
                  i2MXK_SwitchTo@pModule 0008                                 ___xxtofl 59B0  
                               _delay_ms 7D5A                                 _delay_us 8334  
                               _clearall 0047                         __size_of_isempty 0014  
                        ___lwdiv@divisor 0062                          ___lwdiv@counter 0064  
                        Port_GetPin@pPin 0062                                 __ptext10 72A0  
                               __ptext11 7328                                 __ptext20 8AF8  
                               __ptext12 73B0                                 __ptext21 8C32  
                               __ptext13 7DB6                                 __ptext30 8A6A  
                               __ptext22 85EA                                 __ptext14 825C  
                               __ptext31 8A82                                 __ptext23 8334  
                               __ptext15 86F4                                 __ptext40 8B36  
                               __ptext32 8A9A                                 __ptext24 5C54  
                               __ptext16 64C4                                 __ptext41 8B4A  
                               __ptext33 89C6                                 __ptext25 70F2  
                               __ptext17 8CB0                                 __ptext50 8442  
                               __ptext42 8B5E                                 __ptext34 809A  
                               __ptext26 82A4                                 __ptext18 8C6A  
                               __ptext51 87E4                                 __ptext43 8B72  
                               __ptext35 8C82                                 __ptext27 7C9E  
                               __ptext19 853C                                 __ptext60 74BE  
                               __ptext52 6B2C                                 __ptext44 8B86  
                               __ptext36 7BDE                                 __ptext28 7A40  
                               __ptext61 8CA0                                 __ptext53 8576  
                               __ptext45 84C2                                 __ptext37 615E  
                               __ptext29 7FAC                                 __ptext70 8BAE  
                               __ptext62 883E                                 __ptext54 8C8C  
                               __ptext46 88B6                                 __ptext38 8B0E  
                               __ptext71 7B78                                 __ptext63 8724  
                               __ptext55 8CB6                                 __ptext47 1404  
                               __ptext39 8B22                      ??_MXK_BlockSwitchTo 0066  
                               __ptext80 8AB2                                 __ptext72 772E  
                               __ptext64 89E4                                 __ptext56 528A  
                               __ptext48 868E                                 __ptext81 8CBC  
                               __ptext73 8946                                 __ptext65 80E6  
                               __ptext57 7AA8                                 __ptext49 75C0  
                               __ptext90 7B10                                 __ptext82 8ACA  
                               __ptext74 5856                                 __ptext66 8B9A  
                               __ptext58 3204                                 __ptext91 86C2  
                               __ptext83 50EC                                 __ptext75 817E  
                               __ptext67 68B2                                 __ptext59 5D9C  
                               __ptext92 8A00                                 __ptext84 7F5A  
                               __ptext76 8902                                 __ptext68 22EC  
                               __ptext93 763A                                 __ptext85 4980  
                               __ptext77 81C8                                 __ptext69 837A  
                               __ptext94 8986                                 __ptext86 85B0  
                               __ptext78 77A4                                 __ptext95 7212  
                               __ptext87 8966                                 __ptext79 6BE0  
                               __ptext96 7CFC                                 __ptext88 7FFC  
                               __ptext97 8C40                                 __ptext89 7C3E  
                               __ptext98 8CA8                                 __ptext99 0000  
                           _SSP1CON1bits 000FC6                         __size_of_reverse 0054  
                           _SSP1CON2bits 000FC5              __size_of_PortProperty_Valid 0068  
                     i2Byte_GetZone@MASK 0007                             _SSP2CON1bits 000F6C  
                           _SSP2CON2bits 000F6B                          ?i2_Byte_GetPair 000A  
                       ?_Console_NewLine 0001                        ??_Event_DIPSwitch 0079  
                        ?i2_Byte_GetZone 0001                                 _countOff 01D4  
                          __size_of_STP1 0014                            __size_of_STP2 0014  
                          __size_of_STP3 0014                            __size_of_STP4 0014  
                     i2Byte_GetZone@pMax 0003                         ?_HMI_InitButtons 0001  
                    __end_of_MXK_Dequeue 8724                        HMI_SetSegments@in 0064  
                  Button_Init@pThreshold 009D                            __size_of_Turn 0076  
                          __size_of_main 03DA                            __size_of_itos 00BE  
                      Byte_GetPair@pPair 006B                            __size_of_push 0044  
                               _readings 0346                   __end_of_Console_Render 50EC  
                    i2Port_SetPin@pInput 0010                      i2Port_SetPin@pValue 0013  
                     __end_of_eusartSend 8C4E                             _Port_GetQuad 84C2  
                    __end_of_MXK_Release 8B0E                           _MXK_TestButton 8B86  
                _InitSerialCommunication 89C6                            i2_Byte_SetBit 8132  
                    i2Word_GetPair@pPair 000F                __end_of_MXK_BlockSwitchTo 8622  
               ?_Console_IncrementCursor 0001                     __size_of_Timer2_Init 0146  
                               int$flags 0051                     __size_of_Timer0_Stop 0006  
                           _Port_SetType 4D68                             Port_Set@Type 0086  
             __size_of_GetPortProperties 0088                   __size_of_LCD_DrawField 007E  
                      ??_Configure_GPIOs 0095                                printf@val 0080  
                           _SSP1STATbits 000FC7                                 main@left 03E0  
                               main@down 03DE                           Timer0_Init@DIV 0104  
                         Timer0_Init@PRE 003F                             _SSP2STATbits 000F6D  
                               exp@coeff FE0F                               _LED_Toggle 8442  
                               log@coeff FE37                               _HMI_GetBar 8CB6  
                   Button_Init@pGetState 00A2                   PortProperty_Valid@Pair 0085  
                       ??_Port_TogglePin 0077                              _OSCTUNEbits 000F9B  
                             _INTCONbits 000FF2                   PortProperty_Valid@pPin 0072  
                            ??_eval_poly 00A7                               _HMI_SetBar 8C8C  
                             _HMI_Render 8622                         Byte_SetZone@MASK 006A  
                            i2_MXK_Queue 8C5C                           Timer2_Init@DIV 0100  
                         Timer2_Init@PRE 003D                         Byte_SetZone@pMax 0062  
                 __size_ofi2_Timer0_Stop 0006                     __size_of_Port_GetPin 003A  
                            ?_ADCAverage 0001                     Button_Init@pFunction 00A5  
                               itos@Data 0070                              ??_eusartRec 0060  
                          ??_Go_Backward 01FB                       LCD_FillRectangle@i 0075  
                     LCD_FillRectangle@j 0076                     __size_of_Port_SetPin 00B4  
                               intlevel2 0000                             reverse@input 0060  
                            _numReadings 01DE                   __size_of_HMI_DIPSwitch 0014  
                       ___lwmod@dividend 0067                         ___lldiv@dividend 0060  
                 __end_of_MXK_TestButton 8B9A           __size_of_Get_VirtualWall_State 0024  
                        ?_Console_Render 0001            __end_of_Get_VirtualWall_State 8926  
                __size_of_LCD_Word_Write 001A                           ?i2_Byte_SetBit 0001  
                  __size_of_MXK_SwitchTo 003A                           _SPI_DisableISR 883E  
                        Port_Init@pInput 00A0                                 printf@ap 007E  
                            _thisReading 0142                                 push@data 0083  
                 __size_ofi2_Port_SetPin 00AA                               _ISR_Enable 8C82  
                       ?_HMI_SetSegments 0061                  Console_MakeField@Column 006C  
                  __size_of_SPI_MaxSpeed 0068                            SPI_DCS@pInput 0060  
                  __size_of_SPI_MinSpeed 0068             Detect_Victim@Home_Base_State 008F  
                        ??_MXK_DIPSwitch 0066                    __size_ofi2_Motor_Step 00FE  
                Console_MakeField@pInput 006B                         ?_HMI_RightSwitch 0001  
                       ___lldiv@quotient 0068                            ??_GetPortPORT 0062  
                        ___lwmod@divisor 0069                            ??_GetPortTRIS 0062  
                     Word_SetPair@pInput 006F                          ___lwmod@counter 006B  
                     Word_SetPair@pValue 0072                              _MXK_Dequeue 86F4  
                   __size_of_SteppingCCW 004A                            ??_Create_Maze 0066  
                         LED_Toggle@pLED 0078                            ___fladd@signs 009B  
                          _LCD_DrawField 7542                         _Port_SetQuadType 4980  
                            _MXK_Release 8AF8                __size_of_Console_FormFeed 006C  
                           _MXK_SwitchTo 853C                    __size_of_Word_GetPair 0032  
                     Byte_GetZone@Offset 0067                            ?_Console_Init 0001  
                      Word_SetPair@pPair 0071                         ??_Closest_Object 00F1  
                        _Port_SetPinType 50EC                             ___fladd@aexp 009C  
                           ___fladd@bexp 009D                  __size_of_Timer0_Restart 000C  
                     Byte_GetZone@Output 0068                ??_InitSerialCommunication 0060  
                     Byte_GetZone@pChunk 0063                          ?_MXK_TestButton 0001  
            __end_of_Console_ResetCursor 8A36                       Byte_GetZone@pInput 0060  
                __size_ofi2_MXK_SwitchTo 0036          __end_of_Console_IncrementCursor 7E5E  
                  __size_of_Word_SetPair 003A                      __end_of_Go_Backward 6990  
                 __end_of_SPI_DisableISR 8866                             _SPI_MaxSpeed 7A40  
                           _SPI_MinSpeed 7AA8                       Port_Set@TypeActual 0084  
                            Drive@SpeedL 0061                              Drive@SpeedR 0063  
