

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu May 24 14:49:43 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1,inline
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1,inline
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1,inline
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1
   118                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   126                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   127                           	psect	text105,global,reloc=2,class=CODE,delta=1,group=1
   128                           	psect	text106,global,reloc=2,class=CODE,delta=1,group=1
   129                           	psect	text107,global,reloc=2,class=CODE,delta=1
   130                           	psect	text108,global,reloc=2,class=CODE,delta=1
   131                           	psect	text109,global,reloc=2,class=CODE,delta=1
   132                           	psect	text110,global,reloc=2,class=CODE,delta=1
   133                           	psect	text111,global,reloc=2,class=CODE,delta=1
   134                           	psect	text112,global,reloc=2,class=CODE,delta=1
   135                           	psect	text113,global,reloc=2,class=CODE,delta=1
   136                           	psect	text114,global,reloc=2,class=CODE,delta=1
   137                           	psect	text115,global,reloc=2,class=CODE,delta=1
   138                           	psect	text116,global,reloc=2,class=CODE,delta=1
   139                           	psect	text117,global,reloc=2,class=CODE,delta=1
   140                           	psect	text118,global,reloc=2,class=CODE,delta=1
   141                           	psect	text119,global,reloc=2,class=CODE,delta=1
   142                           	psect	text120,global,reloc=2,class=CODE,delta=1
   143                           	psect	text121,global,reloc=2,class=CODE,delta=1
   144                           	psect	text122,global,reloc=2,class=CODE,delta=1,inline
   145                           	psect	text123,global,reloc=2,class=CODE,delta=1
   146                           	psect	text124,global,reloc=2,class=CODE,delta=1,group=1
   147                           	psect	text125,global,reloc=2,class=CODE,delta=1
   148                           	psect	text126,global,reloc=2,class=CODE,delta=1
   149                           	psect	text127,global,reloc=2,class=CODE,delta=1
   150                           	psect	text128,global,reloc=2,class=CODE,delta=1
   151                           	psect	text129,global,reloc=2,class=CODE,delta=1
   152                           	psect	text130,global,reloc=2,class=CODE,delta=1
   153                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   154                           	psect	text132,global,reloc=2,class=CODE,delta=1,group=1
   155                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=1
   156                           	psect	text134,global,reloc=2,class=CODE,delta=1,group=1
   157                           	psect	text135,global,reloc=2,class=CODE,delta=1,group=1
   158                           	psect	text136,global,reloc=2,class=CODE,delta=1,group=1
   159                           	psect	text137,global,reloc=2,class=CODE,delta=1
   160                           	psect	text138,global,reloc=2,class=CODE,delta=1
   161                           	psect	text139,global,reloc=2,class=CODE,delta=1
   162                           	psect	text140,global,reloc=2,class=CODE,delta=1
   163                           	psect	text141,global,reloc=2,class=CODE,delta=1
   164                           	psect	text142,global,reloc=2,class=CODE,delta=1
   165                           	psect	text143,global,reloc=2,class=CODE,delta=1
   166                           	psect	text144,global,reloc=2,class=CODE,delta=1
   167                           	psect	text145,global,reloc=2,class=CODE,delta=1
   168                           	psect	text146,global,reloc=2,class=CODE,delta=1
   169                           	psect	text147,global,reloc=2,class=CODE,delta=1,group=1
   170                           	psect	text148,global,reloc=2,class=CODE,delta=1
   171                           	psect	text149,global,reloc=2,class=CODE,delta=1
   172                           	psect	text150,global,reloc=2,class=CODE,delta=1
   173                           	psect	text151,global,reloc=2,class=CODE,delta=1
   174                           	psect	text152,global,reloc=2,class=CODE,delta=1,inline
   175                           	psect	text153,global,reloc=2,class=CODE,delta=1
   176                           	psect	text154,global,reloc=2,class=CODE,delta=1
   177                           	psect	text155,global,reloc=2,class=CODE,delta=1
   178                           	psect	text156,global,reloc=2,class=CODE,delta=1
   179                           	psect	text157,global,reloc=2,class=CODE,delta=1
   180                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   181                           	psect	text159,global,reloc=2,class=CODE,delta=1
   182                           	psect	text160,global,reloc=2,class=CODE,delta=1
   183                           	psect	text161,global,reloc=2,class=CODE,delta=1
   184                           	psect	text162,global,reloc=2,class=CODE,delta=1
   185                           	psect	text163,global,reloc=2,class=CODE,delta=1
   186                           	psect	text164,global,reloc=2,class=CODE,delta=1
   187                           	psect	text165,global,reloc=2,class=CODE,delta=1
   188                           	psect	text166,global,reloc=2,class=CODE,delta=1,inline
   189                           	psect	text167,global,reloc=2,class=CODE,delta=1
   190                           	psect	text168,global,reloc=2,class=CODE,delta=1
   191                           	psect	text169,global,reloc=2,class=CODE,delta=1
   192                           	psect	text170,global,reloc=2,class=CODE,delta=1
   193                           	psect	text171,global,reloc=2,class=CODE,delta=1
   194                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   195                           	psect	text172,global,reloc=2,class=CODE,delta=1
   196                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   197                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   198  0000                     
   199                           ; Version 1.44
   200                           ; Generated 14/09/2017 GMT
   201                           ; 
   202                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   203                           ; All rights reserved.
   204                           ; 
   205                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   206                           ; 
   207                           ; Redistribution and use in source and binary forms, with or without modification, are
   208                           ; permitted provided that the following conditions are met:
   209                           ; 
   210                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   211                           ;        conditions and the following disclaimer.
   212                           ; 
   213                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   214                           ;        of conditions and the following disclaimer in the documentation and/or other
   215                           ;        materials provided with the distribution.
   216                           ; 
   217                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   218                           ;        software without specific prior written permission.
   219                           ; 
   220                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   221                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   222                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   223                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   224                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   225                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   226                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   227                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   228                           ; 
   229                           ; 
   230                           ; Code-generator required, PIC18F67J50 Definitions
   231                           ; 
   232                           ; SFR Addresses
   233  0000                     
   234                           	psect	idataCOMRAM
   235  018FC6                     __pidataCOMRAM:
   236                           	opt stack 0
   237                           
   238                           ;initializer for _gCursor
   239  018FC6  0006               	dw	6
   240  018FC8  0006               	dw	6
   241                           
   242                           ;initializer for _top
   243  018FCA  FFFF               	dw	65535
   244                           
   245                           ;initializer for _Bus_State
   246  018FCC  01                 	db	1
   247                           
   248                           ;initializer for _change
   249  018FCD  01                 	db	1
   250                           
   251                           ;initializer for _l
   252  018FCE  80                 	db	128
   253                           
   254                           ;initializer for _w
   255  018FCF  80                 	db	128
   256                           
   257                           	psect	idataBANK1
   258  018D08                     __pidataBANK1:
   259                           	opt stack 0
   260                           
   261                           ;initializer for Console_Render@F6956
   262  018D08  0006               	dw	6
   263  018D0A  0006               	dw	6
   264                           
   265                           ;initializer for _gLineSize
   266  018D0C  0080               	dw	128
   267  018D0E  0007               	dw	7
   268                           
   269                           ;initializer for _gCharSize
   270  018D10  0005               	dw	5
   271  018D12  0007               	dw	7
   272                           
   273                           ;initializer for _countOff
   274  018D14  00F8               	dw	248
   275                           
   276                           ;initializer for _countOn
   277  018D16  007C               	dw	124
   278                           
   279                           ;initializer for _Low_Sensor
   280  018D18  2710               	dw	10000
   281                           
   282                           ;initializer for _Desired_Level
   283  018D1A  003C               	dw	60
   284                           
   285                           ;initializer for _Spd
   286  018D1C  00C8               	dw	200
   287                           
   288                           ;initializer for _numReadings
   289  018D1E  000A               	dw	10
   290                           
   291                           ;initializer for _Current_Direction
   292  018D20  0003               	dw	3
   293                           
   294                           ;initializer for _gForecolour
   295  018D22  FFFF               	dw	65535
   296                           
   297                           ;initializer for _A
   298  018D24  41                 	db	65
   299                           
   300                           ;initializer for _a
   301  018D25  61                 	db	97
   302                           
   303                           ;initializer for _zero
   304  018D26  30                 	db	48
   305                           
   306                           	psect	mediumconst
   307  00FB3A                     __pmediumconst:
   308                           	opt stack 0
   309  00FB3A  00                 	db	0
   310  00FB3B                     _InitList:
   311                           	opt stack 0
   312  00FB3B  1100               	dw	4352
   313  00FB3D  0080               	dw	128
   314  00FB3F  012C               	dw	300
   315  00FB41  B100               	dw	45312
   316  00FB43  0002               	dw	2
   317  00FB45  0035               	dw	53
   318  00FB47  0036               	dw	54
   319  00FB49  B200               	dw	45568
   320  00FB4B  0002               	dw	2
   321  00FB4D  0035               	dw	53
   322  00FB4F  0036               	dw	54
   323  00FB51  B300               	dw	45824
   324  00FB53  0002               	dw	2
   325  00FB55  0035               	dw	53
   326  00FB57  0036               	dw	54
   327  00FB59  0002               	dw	2
   328  00FB5B  0035               	dw	53
   329  00FB5D  0036               	dw	54
   330  00FB5F  B400               	dw	46080
   331  00FB61  0000               	dw	0
   332  00FB63  C000               	dw	49152
   333  00FB65  00A2               	dw	162
   334  00FB67  0002               	dw	2
   335  00FB69  0084               	dw	132
   336  00FB6B  C100               	dw	49408
   337  00FB6D  00C5               	dw	197
   338  00FB6F  C200               	dw	49664
   339  00FB71  000D               	dw	13
   340  00FB73  0000               	dw	0
   341  00FB75  C300               	dw	49920
   342  00FB77  008D               	dw	141
   343  00FB79  002A               	dw	42
   344  00FB7B  C400               	dw	50176
   345  00FB7D  008D               	dw	141
   346  00FB7F  00EE               	dw	238
   347  00FB81  C500               	dw	50432
   348  00FB83  000A               	dw	10
   349  00FB85  3600               	dw	13824
   350  00FB87  00C8               	dw	200
   351  00FB89  E000               	dw	57344
   352  00FB8B  0012               	dw	18
   353  00FB8D  001C               	dw	28
   354  00FB8F  0010               	dw	16
   355  00FB91  0018               	dw	24
   356  00FB93  0033               	dw	51
   357  00FB95  002C               	dw	44
   358  00FB97  0025               	dw	37
   359  00FB99  0028               	dw	40
   360  00FB9B  0028               	dw	40
   361  00FB9D  0027               	dw	39
   362  00FB9F  002F               	dw	47
   363  00FBA1  003C               	dw	60
   364  00FBA3  0000               	dw	0
   365  00FBA5  0003               	dw	3
   366  00FBA7  0003               	dw	3
   367  00FBA9  0010               	dw	16
   368  00FBAB  0080               	dw	128
   369  00FBAD  0078               	dw	120
   370  00FBAF  E100               	dw	57600
   371  00FBB1  0012               	dw	18
   372  00FBB3  001C               	dw	28
   373  00FBB5  0010               	dw	16
   374  00FBB7  0018               	dw	24
   375  00FBB9  002D               	dw	45
   376  00FBBB  0028               	dw	40
   377  00FBBD  0023               	dw	35
   378  00FBBF  0028               	dw	40
   379  00FBC1  0028               	dw	40
   380  00FBC3  0026               	dw	38
   381  00FBC5  002F               	dw	47
   382  00FBC7  003B               	dw	59
   383  00FBC9  0000               	dw	0
   384  00FBCB  0003               	dw	3
   385  00FBCD  0003               	dw	3
   386  00FBCF  0010               	dw	16
   387  00FBD1  3A00               	dw	14848
   388  00FBD3  0005               	dw	5
   389  00FBD5  2A00               	dw	10752
   390  00FBD7  0000               	dw	0
   391  00FBD9  0002               	dw	2
   392  00FBDB  0000               	dw	0
   393  00FBDD  0081               	dw	129
   394  00FBDF  2B00               	dw	11008
   395  00FBE1  0000               	dw	0
   396  00FBE3  0003               	dw	3
   397  00FBE5  0000               	dw	0
   398  00FBE7  00A2               	dw	162
   399  00FBE9  2900               	dw	10496
   400  00FBEB  2C00               	dw	11264
   401  00FBED                     __end_of_InitList:
   402                           	opt stack 0
   403  00FBED                     Timer0_Init@PRESCALE:
   404                           	opt stack 0
   405  00FBED  0002               	dw	2
   406  00FBEF  0004               	dw	4
   407  00FBF1  0008               	dw	8
   408  00FBF3  0010               	dw	16
   409  00FBF5  0020               	dw	32
   410  00FBF7  0040               	dw	64
   411  00FBF9  0080               	dw	128
   412  00FBFB  0100               	dw	256
   413  00FBFD                     __end_ofTimer0_Init@PRESCALE:
   414                           	opt stack 0
   415  00FBFD                     PortProperty_Valid@F6830:
   416                           	opt stack 0
   417  00FBFD  00                 	db	0
   418  00FBFE  01                 	db	1
   419  00FBFF  02                 	db	2
   420  00FC00  00                 	db	0
   421  00FC01  01                 	db	1
   422  00FC02  00                 	db	0
   423  00FC03  01                 	db	1
   424  00FC04  00                 	db	0
   425  00FC05  02                 	db	2
   426  00FC06  02                 	db	2
   427  00FC07  00                 	db	0
   428  00FC08  00                 	db	0
   429  00FC09  03                 	db	3
   430  00FC0A  03                 	db	3
   431  00FC0B  03                 	db	3
   432  00FC0C  00                 	db	0
   433  00FC0D                     __end_ofPortProperty_Valid@F6830:
   434                           	opt stack 0
   435  00FC0D                     _dpowers:
   436                           	opt stack 0
   437  00FC0D  0001               	dw	1
   438  00FC0F  000A               	dw	10
   439  00FC11  0064               	dw	100
   440  00FC13  03E8               	dw	1000
   441  00FC15  2710               	dw	10000
   442  00FC17                     __end_of_dpowers:
   443                           	opt stack 0
   444  00FC17                     _MASKS:
   445                           	opt stack 0
   446  00FC17  00                 	db	0
   447  00FC18  01                 	db	1
   448  00FC19  03                 	db	3
   449  00FC1A  07                 	db	7
   450  00FC1B  0F                 	db	15
   451  00FC1C  1F                 	db	31
   452  00FC1D  3F                 	db	63
   453  00FC1E  7F                 	db	127
   454  00FC1F  FF                 	db	255
   455  00FC20                     __end_of_MASKS:
   456                           	opt stack 0
   457  00FC20                     HMI_SetButton@F7213:
   458                           	opt stack 0
   459  00FC20  00                 	db	0
   460  00FC21  02                 	db	2
   461  00FC22  01                 	db	1
   462  00FC23  03                 	db	3
   463  00FC24                     __end_ofHMI_SetButton@F7213:
   464                           	opt stack 0
   465  00FC24                     Timer2_Init@PRESCALE:
   466                           	opt stack 0
   467  00FC24  01                 	db	1
   468  00FC25  04                 	db	4
   469  00FC26  10                 	db	16
   470  00FC27                     __end_ofTimer2_Init@PRESCALE:
   471                           	opt stack 0
   472  00FC27                     _Font5x7:
   473                           	opt stack 0
   474  00FC27  00                 	db	0
   475  00FC28  00                 	db	0
   476  00FC29  00                 	db	0
   477  00FC2A  00                 	db	0
   478  00FC2B  00                 	db	0
   479  00FC2C  00                 	db	0
   480  00FC2D  00                 	db	0
   481  00FC2E  5F                 	db	95
   482  00FC2F  00                 	db	0
   483  00FC30  00                 	db	0
   484  00FC31  00                 	db	0
   485  00FC32  07                 	db	7
   486  00FC33  00                 	db	0
   487  00FC34  07                 	db	7
   488  00FC35  00                 	db	0
   489  00FC36  14                 	db	20
   490  00FC37  7F                 	db	127
   491  00FC38  14                 	db	20
   492  00FC39  7F                 	db	127
   493  00FC3A  14                 	db	20
   494  00FC3B  24                 	db	36
   495  00FC3C  2A                 	db	42
   496  00FC3D  7F                 	db	127
   497  00FC3E  2A                 	db	42
   498  00FC3F  12                 	db	18
   499  00FC40  23                 	db	35
   500  00FC41  13                 	db	19
   501  00FC42  08                 	db	8
   502  00FC43  64                 	db	100
   503  00FC44  62                 	db	98
   504  00FC45  36                 	db	54
   505  00FC46  49                 	db	73
   506  00FC47  55                 	db	85
   507  00FC48  22                 	db	34
   508  00FC49  50                 	db	80
   509  00FC4A  00                 	db	0
   510  00FC4B  05                 	db	5
   511  00FC4C  03                 	db	3
   512  00FC4D  00                 	db	0
   513  00FC4E  00                 	db	0
   514  00FC4F  00                 	db	0
   515  00FC50  1C                 	db	28
   516  00FC51  22                 	db	34
   517  00FC52  41                 	db	65
   518  00FC53  00                 	db	0
   519  00FC54  00                 	db	0
   520  00FC55  41                 	db	65
   521  00FC56  22                 	db	34
   522  00FC57  1C                 	db	28
   523  00FC58  00                 	db	0
   524  00FC59  08                 	db	8
   525  00FC5A  2A                 	db	42
   526  00FC5B  1C                 	db	28
   527  00FC5C  2A                 	db	42
   528  00FC5D  08                 	db	8
   529  00FC5E  08                 	db	8
   530  00FC5F  08                 	db	8
   531  00FC60  3E                 	db	62
   532  00FC61  08                 	db	8
   533  00FC62  08                 	db	8
   534  00FC63  00                 	db	0
   535  00FC64  50                 	db	80
   536  00FC65  30                 	db	48
   537  00FC66  00                 	db	0
   538  00FC67  00                 	db	0
   539  00FC68  08                 	db	8
   540  00FC69  08                 	db	8
   541  00FC6A  08                 	db	8
   542  00FC6B  08                 	db	8
   543  00FC6C  08                 	db	8
   544  00FC6D  00                 	db	0
   545  00FC6E  60                 	db	96
   546  00FC6F  60                 	db	96
   547  00FC70  00                 	db	0
   548  00FC71  00                 	db	0
   549  00FC72  20                 	db	32
   550  00FC73  10                 	db	16
   551  00FC74  08                 	db	8
   552  00FC75  04                 	db	4
   553  00FC76  02                 	db	2
   554  00FC77  3E                 	db	62
   555  00FC78  51                 	db	81
   556  00FC79  49                 	db	73
   557  00FC7A  45                 	db	69
   558  00FC7B  3E                 	db	62
   559  00FC7C  00                 	db	0
   560  00FC7D  42                 	db	66
   561  00FC7E  7F                 	db	127
   562  00FC7F  40                 	db	64
   563  00FC80  00                 	db	0
   564  00FC81  42                 	db	66
   565  00FC82  61                 	db	97
   566  00FC83  51                 	db	81
   567  00FC84  49                 	db	73
   568  00FC85  46                 	db	70
   569  00FC86  21                 	db	33
   570  00FC87  41                 	db	65
   571  00FC88  45                 	db	69
   572  00FC89  4B                 	db	75
   573  00FC8A  31                 	db	49
   574  00FC8B  18                 	db	24
   575  00FC8C  14                 	db	20
   576  00FC8D  12                 	db	18
   577  00FC8E  7F                 	db	127
   578  00FC8F  10                 	db	16
   579  00FC90  27                 	db	39
   580  00FC91  45                 	db	69
   581  00FC92  45                 	db	69
   582  00FC93  45                 	db	69
   583  00FC94  39                 	db	57
   584  00FC95  3C                 	db	60
   585  00FC96  4A                 	db	74
   586  00FC97  49                 	db	73
   587  00FC98  49                 	db	73
   588  00FC99  30                 	db	48
   589  00FC9A  01                 	db	1
   590  00FC9B  71                 	db	113
   591  00FC9C  09                 	db	9
   592  00FC9D  05                 	db	5
   593  00FC9E  03                 	db	3
   594  00FC9F  36                 	db	54
   595  00FCA0  49                 	db	73
   596  00FCA1  49                 	db	73
   597  00FCA2  49                 	db	73
   598  00FCA3  36                 	db	54
   599  00FCA4  06                 	db	6
   600  00FCA5  49                 	db	73
   601  00FCA6  49                 	db	73
   602  00FCA7  29                 	db	41
   603  00FCA8  1E                 	db	30
   604  00FCA9  00                 	db	0
   605  00FCAA  36                 	db	54
   606  00FCAB  36                 	db	54
   607  00FCAC  00                 	db	0
   608  00FCAD  00                 	db	0
   609  00FCAE  00                 	db	0
   610  00FCAF  56                 	db	86
   611  00FCB0  36                 	db	54
   612  00FCB1  00                 	db	0
   613  00FCB2  00                 	db	0
   614  00FCB3  00                 	db	0
   615  00FCB4  08                 	db	8
   616  00FCB5  14                 	db	20
   617  00FCB6  22                 	db	34
   618  00FCB7  41                 	db	65
   619  00FCB8  14                 	db	20
   620  00FCB9  14                 	db	20
   621  00FCBA  14                 	db	20
   622  00FCBB  14                 	db	20
   623  00FCBC  14                 	db	20
   624  00FCBD  41                 	db	65
   625  00FCBE  22                 	db	34
   626  00FCBF  14                 	db	20
   627  00FCC0  08                 	db	8
   628  00FCC1  00                 	db	0
   629  00FCC2  02                 	db	2
   630  00FCC3  01                 	db	1
   631  00FCC4  51                 	db	81
   632  00FCC5  09                 	db	9
   633  00FCC6  06                 	db	6
   634  00FCC7  32                 	db	50
   635  00FCC8  49                 	db	73
   636  00FCC9  79                 	db	121
   637  00FCCA  41                 	db	65
   638  00FCCB  3E                 	db	62
   639  00FCCC  7E                 	db	126
   640  00FCCD  11                 	db	17
   641  00FCCE  11                 	db	17
   642  00FCCF  11                 	db	17
   643  00FCD0  7E                 	db	126
   644  00FCD1  7F                 	db	127
   645  00FCD2  49                 	db	73
   646  00FCD3  49                 	db	73
   647  00FCD4  49                 	db	73
   648  00FCD5  36                 	db	54
   649  00FCD6  3E                 	db	62
   650  00FCD7  41                 	db	65
   651  00FCD8  41                 	db	65
   652  00FCD9  41                 	db	65
   653  00FCDA  22                 	db	34
   654  00FCDB  7F                 	db	127
   655  00FCDC  41                 	db	65
   656  00FCDD  41                 	db	65
   657  00FCDE  22                 	db	34
   658  00FCDF  1C                 	db	28
   659  00FCE0  7F                 	db	127
   660  00FCE1  49                 	db	73
   661  00FCE2  49                 	db	73
   662  00FCE3  49                 	db	73
   663  00FCE4  41                 	db	65
   664  00FCE5  7F                 	db	127
   665  00FCE6  09                 	db	9
   666  00FCE7  09                 	db	9
   667  00FCE8  01                 	db	1
   668  00FCE9  01                 	db	1
   669  00FCEA  3E                 	db	62
   670  00FCEB  41                 	db	65
   671  00FCEC  41                 	db	65
   672  00FCED  51                 	db	81
   673  00FCEE  32                 	db	50
   674  00FCEF  7F                 	db	127
   675  00FCF0  08                 	db	8
   676  00FCF1  08                 	db	8
   677  00FCF2  08                 	db	8
   678  00FCF3  7F                 	db	127
   679  00FCF4  00                 	db	0
   680  00FCF5  41                 	db	65
   681  00FCF6  7F                 	db	127
   682  00FCF7  41                 	db	65
   683  00FCF8  00                 	db	0
   684  00FCF9  20                 	db	32
   685  00FCFA  40                 	db	64
   686  00FCFB  41                 	db	65
   687  00FCFC  3F                 	db	63
   688  00FCFD  01                 	db	1
   689  00FCFE  7F                 	db	127
   690  00FCFF  08                 	db	8
   691  00FD00  14                 	db	20
   692  00FD01  22                 	db	34
   693  00FD02  41                 	db	65
   694  00FD03  7F                 	db	127
   695  00FD04  40                 	db	64
   696  00FD05  40                 	db	64
   697  00FD06  40                 	db	64
   698  00FD07  40                 	db	64
   699  00FD08  7F                 	db	127
   700  00FD09  02                 	db	2
   701  00FD0A  04                 	db	4
   702  00FD0B  02                 	db	2
   703  00FD0C  7F                 	db	127
   704  00FD0D  7F                 	db	127
   705  00FD0E  04                 	db	4
   706  00FD0F  08                 	db	8
   707  00FD10  10                 	db	16
   708  00FD11  7F                 	db	127
   709  00FD12  3E                 	db	62
   710  00FD13  41                 	db	65
   711  00FD14  41                 	db	65
   712  00FD15  41                 	db	65
   713  00FD16  3E                 	db	62
   714  00FD17  7F                 	db	127
   715  00FD18  09                 	db	9
   716  00FD19  09                 	db	9
   717  00FD1A  09                 	db	9
   718  00FD1B  06                 	db	6
   719  00FD1C  3E                 	db	62
   720  00FD1D  41                 	db	65
   721  00FD1E  51                 	db	81
   722  00FD1F  21                 	db	33
   723  00FD20  5E                 	db	94
   724  00FD21  7F                 	db	127
   725  00FD22  09                 	db	9
   726  00FD23  19                 	db	25
   727  00FD24  29                 	db	41
   728  00FD25  46                 	db	70
   729  00FD26  46                 	db	70
   730  00FD27  49                 	db	73
   731  00FD28  49                 	db	73
   732  00FD29  49                 	db	73
   733  00FD2A  31                 	db	49
   734  00FD2B  01                 	db	1
   735  00FD2C  01                 	db	1
   736  00FD2D  7F                 	db	127
   737  00FD2E  01                 	db	1
   738  00FD2F  01                 	db	1
   739  00FD30  3F                 	db	63
   740  00FD31  40                 	db	64
   741  00FD32  40                 	db	64
   742  00FD33  40                 	db	64
   743  00FD34  3F                 	db	63
   744  00FD35  1F                 	db	31
   745  00FD36  20                 	db	32
   746  00FD37  40                 	db	64
   747  00FD38  20                 	db	32
   748  00FD39  1F                 	db	31
   749  00FD3A  7F                 	db	127
   750  00FD3B  20                 	db	32
   751  00FD3C  18                 	db	24
   752  00FD3D  20                 	db	32
   753  00FD3E  7F                 	db	127
   754  00FD3F  63                 	db	99
   755  00FD40  14                 	db	20
   756  00FD41  08                 	db	8
   757  00FD42  14                 	db	20
   758  00FD43  63                 	db	99
   759  00FD44  03                 	db	3
   760  00FD45  04                 	db	4
   761  00FD46  78                 	db	120
   762  00FD47  04                 	db	4
   763  00FD48  03                 	db	3
   764  00FD49  61                 	db	97
   765  00FD4A  51                 	db	81
   766  00FD4B  49                 	db	73
   767  00FD4C  45                 	db	69
   768  00FD4D  43                 	db	67
   769  00FD4E  00                 	db	0
   770  00FD4F  00                 	db	0
   771  00FD50  7F                 	db	127
   772  00FD51  41                 	db	65
   773  00FD52  41                 	db	65
   774  00FD53  02                 	db	2
   775  00FD54  04                 	db	4
   776  00FD55  08                 	db	8
   777  00FD56  10                 	db	16
   778  00FD57  20                 	db	32
   779  00FD58  41                 	db	65
   780  00FD59  41                 	db	65
   781  00FD5A  7F                 	db	127
   782  00FD5B  00                 	db	0
   783  00FD5C  00                 	db	0
   784  00FD5D  04                 	db	4
   785  00FD5E  02                 	db	2
   786  00FD5F  01                 	db	1
   787  00FD60  02                 	db	2
   788  00FD61  04                 	db	4
   789  00FD62  40                 	db	64
   790  00FD63  40                 	db	64
   791  00FD64  40                 	db	64
   792  00FD65  40                 	db	64
   793  00FD66  40                 	db	64
   794  00FD67  00                 	db	0
   795  00FD68  01                 	db	1
   796  00FD69  02                 	db	2
   797  00FD6A  04                 	db	4
   798  00FD6B  00                 	db	0
   799  00FD6C  20                 	db	32
   800  00FD6D  54                 	db	84
   801  00FD6E  54                 	db	84
   802  00FD6F  54                 	db	84
   803  00FD70  78                 	db	120
   804  00FD71  7F                 	db	127
   805  00FD72  48                 	db	72
   806  00FD73  44                 	db	68
   807  00FD74  44                 	db	68
   808  00FD75  38                 	db	56
   809  00FD76  38                 	db	56
   810  00FD77  44                 	db	68
   811  00FD78  44                 	db	68
   812  00FD79  44                 	db	68
   813  00FD7A  20                 	db	32
   814  00FD7B  38                 	db	56
   815  00FD7C  44                 	db	68
   816  00FD7D  44                 	db	68
   817  00FD7E  48                 	db	72
   818  00FD7F  7F                 	db	127
   819  00FD80  38                 	db	56
   820  00FD81  54                 	db	84
   821  00FD82  54                 	db	84
   822  00FD83  54                 	db	84
   823  00FD84  18                 	db	24
   824  00FD85  08                 	db	8
   825  00FD86  7E                 	db	126
   826  00FD87  09                 	db	9
   827  00FD88  01                 	db	1
   828  00FD89  02                 	db	2
   829  00FD8A  08                 	db	8
   830  00FD8B  14                 	db	20
   831  00FD8C  54                 	db	84
   832  00FD8D  54                 	db	84
   833  00FD8E  3C                 	db	60
   834  00FD8F  7F                 	db	127
   835  00FD90  08                 	db	8
   836  00FD91  04                 	db	4
   837  00FD92  04                 	db	4
   838  00FD93  78                 	db	120
   839  00FD94  00                 	db	0
   840  00FD95  44                 	db	68
   841  00FD96  7D                 	db	125
   842  00FD97  40                 	db	64
   843  00FD98  00                 	db	0
   844  00FD99  20                 	db	32
   845  00FD9A  40                 	db	64
   846  00FD9B  44                 	db	68
   847  00FD9C  3D                 	db	61
   848  00FD9D  00                 	db	0
   849  00FD9E  00                 	db	0
   850  00FD9F  7F                 	db	127
   851  00FDA0  10                 	db	16
   852  00FDA1  28                 	db	40
   853  00FDA2  44                 	db	68
   854  00FDA3  00                 	db	0
   855  00FDA4  41                 	db	65
   856  00FDA5  7F                 	db	127
   857  00FDA6  40                 	db	64
   858  00FDA7  00                 	db	0
   859  00FDA8  7C                 	db	124
   860  00FDA9  04                 	db	4
   861  00FDAA  18                 	db	24
   862  00FDAB  04                 	db	4
   863  00FDAC  78                 	db	120
   864  00FDAD  7C                 	db	124
   865  00FDAE  08                 	db	8
   866  00FDAF  04                 	db	4
   867  00FDB0  04                 	db	4
   868  00FDB1  78                 	db	120
   869  00FDB2  38                 	db	56
   870  00FDB3  44                 	db	68
   871  00FDB4  44                 	db	68
   872  00FDB5  44                 	db	68
   873  00FDB6  38                 	db	56
   874  00FDB7  7C                 	db	124
   875  00FDB8  14                 	db	20
   876  00FDB9  14                 	db	20
   877  00FDBA  14                 	db	20
   878  00FDBB  08                 	db	8
   879  00FDBC  08                 	db	8
   880  00FDBD  14                 	db	20
   881  00FDBE  14                 	db	20
   882  00FDBF  18                 	db	24
   883  00FDC0  7C                 	db	124
   884  00FDC1  7C                 	db	124
   885  00FDC2  08                 	db	8
   886  00FDC3  04                 	db	4
   887  00FDC4  04                 	db	4
   888  00FDC5  08                 	db	8
   889  00FDC6  48                 	db	72
   890  00FDC7  54                 	db	84
   891  00FDC8  54                 	db	84
   892  00FDC9  54                 	db	84
   893  00FDCA  20                 	db	32
   894  00FDCB  04                 	db	4
   895  00FDCC  3F                 	db	63
   896  00FDCD  44                 	db	68
   897  00FDCE  40                 	db	64
   898  00FDCF  20                 	db	32
   899  00FDD0  3C                 	db	60
   900  00FDD1  40                 	db	64
   901  00FDD2  40                 	db	64
   902  00FDD3  20                 	db	32
   903  00FDD4  7C                 	db	124
   904  00FDD5  1C                 	db	28
   905  00FDD6  20                 	db	32
   906  00FDD7  40                 	db	64
   907  00FDD8  20                 	db	32
   908  00FDD9  1C                 	db	28
   909  00FDDA  3C                 	db	60
   910  00FDDB  40                 	db	64
   911  00FDDC  30                 	db	48
   912  00FDDD  40                 	db	64
   913  00FDDE  3C                 	db	60
   914  00FDDF  44                 	db	68
   915  00FDE0  28                 	db	40
   916  00FDE1  10                 	db	16
   917  00FDE2  28                 	db	40
   918  00FDE3  44                 	db	68
   919  00FDE4  0C                 	db	12
   920  00FDE5  50                 	db	80
   921  00FDE6  50                 	db	80
   922  00FDE7  50                 	db	80
   923  00FDE8  3C                 	db	60
   924  00FDE9  44                 	db	68
   925  00FDEA  64                 	db	100
   926  00FDEB  54                 	db	84
   927  00FDEC  4C                 	db	76
   928  00FDED  44                 	db	68
   929  00FDEE  00                 	db	0
   930  00FDEF  08                 	db	8
   931  00FDF0  36                 	db	54
   932  00FDF1  41                 	db	65
   933  00FDF2  00                 	db	0
   934  00FDF3  00                 	db	0
   935  00FDF4  00                 	db	0
   936  00FDF5  7F                 	db	127
   937  00FDF6  00                 	db	0
   938  00FDF7  00                 	db	0
   939  00FDF8  00                 	db	0
   940  00FDF9  41                 	db	65
   941  00FDFA  36                 	db	54
   942  00FDFB  08                 	db	8
   943  00FDFC  00                 	db	0
   944  00FDFD  08                 	db	8
   945  00FDFE  08                 	db	8
   946  00FDFF  2A                 	db	42
   947  00FE00  1C                 	db	28
   948  00FE01  08                 	db	8
   949  00FE02  08                 	db	8
   950  00FE03  1C                 	db	28
   951  00FE04  2A                 	db	42
   952  00FE05  08                 	db	8
   953  00FE06  08                 	db	8
   954  00FE07                     __end_of_Font5x7:
   955                           	opt stack 0
   956  00FE07                     exp@coeff:
   957                           	opt stack 0
   958  00FE07  0000               	dw	0
   959  00FE09  3F80               	dw	16256
   960  00FE0B  7218               	dw	29208
   961  00FE0D  3F31               	dw	16177
   962  00FE0F  FDF0               	dw	65008
   963  00FE11  3E75               	dw	15989
   964  00FE13  5847               	dw	22599
   965  00FE15  3D63               	dw	15715
   966  00FE17  9558               	dw	38232
   967  00FE19  3C1D               	dw	15389
   968  00FE1B  C482               	dw	50306
   969  00FE1D  3AAE               	dw	15022
   970  00FE1F  78A8               	dw	30888
   971  00FE21  3921               	dw	14625
   972  00FE23  93EF               	dw	37871
   973  00FE25  3780               	dw	14208
   974  00FE27  92A0               	dw	37536
   975  00FE29  35A7               	dw	13735
   976  00FE2B  5646               	dw	22086
   977  00FE2D  3415               	dw	13333
   978  00FE2F                     __end_ofexp@coeff:
   979                           	opt stack 0
   980  00FE2F                     log@coeff:
   981                           	opt stack 0
   982  00FE2F  0000               	dw	0
   983  00FE31  0000               	dw	0
   984  00FE33  FFC4               	dw	65476
   985  00FE35  3F7F               	dw	16255
   986  00FE37  EF80               	dw	61312
   987  00FE39  BEFF               	dw	48895
   988  00FE3B  E190               	dw	57744
   989  00FE3D  3EA9               	dw	16041
   990  00FE3F  82EC               	dw	33516
   991  00FE41  BE76               	dw	48758
   992  00FE43  AD82               	dw	44418
   993  00FE45  3E2B               	dw	15915
   994  00FE47  3C0E               	dw	15374
   995  00FE49  BDC3               	dw	48579
   996  00FE4B  D187               	dw	53639
   997  00FE4D  3D13               	dw	15635
   998  00FE4F  7841               	dw	30785
   999  00FE51  BBD3               	dw	48083
  1000  00FE53                     __end_oflog@coeff:
  1001                           	opt stack 0
  1002  00FE53                     _PortG_Property:
  1003                           	opt stack 0
  1004  00FE53  FC00               	dw	64512
  1005  00FE55                     __end_of_PortG_Property:
  1006                           	opt stack 0
  1007  00FE55                     _PortF_Property:
  1008                           	opt stack 0
  1009  00FE55  0FFF               	dw	4095
  1010  00FE57                     __end_of_PortF_Property:
  1011                           	opt stack 0
  1012  00FE57                     _PortE_Property:
  1013                           	opt stack 0
  1014  00FE57  0000               	dw	0
  1015  00FE59                     __end_of_PortE_Property:
  1016                           	opt stack 0
  1017  00FE59                     _PortD_Property:
  1018                           	opt stack 0
  1019  00FE59  FFFF               	dw	65535
  1020  00FE5B                     __end_of_PortD_Property:
  1021                           	opt stack 0
  1022  00FE5B                     _PortC_Property:
  1023                           	opt stack 0
  1024  00FE5B  FFF0               	dw	65520
  1025  00FE5D                     __end_of_PortC_Property:
  1026                           	opt stack 0
  1027  00FE5D                     _PortB_Property:
  1028                           	opt stack 0
  1029  00FE5D  FF00               	dw	65280
  1030  00FE5F                     __end_of_PortB_Property:
  1031                           	opt stack 0
  1032  00FE5F                     _PortA_Property:
  1033                           	opt stack 0
  1034  00FE5F  00FF               	dw	255
  1035  00FE61                     __end_of_PortA_Property:
  1036                           	opt stack 0
  1037  0000                     _ADRES	set	4035
  1038  0000                     _TMR0	set	4054
  1039  0000                     _TXREG1	set	4014
  1040  0000                     _ADCON0	set	4034
  1041  0000                     _ADCON1	set	4033
  1042  0000                     _RCREG1	set	4015
  1043  0000                     _SPBRG1	set	4016
  1044  0000                     _TXSTA1bits	set	4013
  1045  0000                     _BAUDCON1bits	set	3966
  1046  0000                     _RCSTA1	set	4012
  1047  0000                     _TXSTA1	set	4013
  1048  0000                     _TRISCbits	set	3988
  1049  0000                     _PR2	set	4043
  1050  0000                     _T2CONbits	set	4042
  1051  0000                     _T0CONbits	set	4053
  1052  0000                     _RCONbits	set	4048
  1053  0000                     _OSCTUNEbits	set	3995
  1054  0000                     _PIR3	set	4004
  1055  0000                     _PIR2	set	4001
  1056  0000                     _PIR1	set	3998
  1057  0000                     _INTCONbits	set	4082
  1058  0000                     _SSP2CON2bits	set	3947
  1059  0000                     _SSP1CON2bits	set	4037
  1060  0000                     _SSP1ADD	set	4040
  1061  0000                     _ANCON0	set	4033
  1062  0000                     _ADRESL	set	4035
  1063  0000                     _ADRESH	set	4036
  1064  0000                     _ADCON1bits	set	4033
  1065  0000                     _ADCON0bits	set	4034
  1066  0000                     _SSP2CON1bits	set	3948
  1067  0000                     _SSP1CON1bits	set	4038
  1068  0000                     _SSP2STATbits	set	3949
  1069  0000                     _SSP1STATbits	set	4039
  1070  0000                     _PIE3bits	set	4003
  1071  0000                     _PIE1bits	set	3997
  1072  0000                     _PIR3bits	set	4004
  1073  0000                     _PIR1bits	set	3998
  1074  0000                     _IPR3bits	set	4005
  1075  0000                     _IPR1bits	set	3999
  1076  0000                     _PORTFbits	set	3973
  1077  0000                     _SSP2CON2	set	3947
  1078  0000                     _SSP1CON2	set	4037
  1079  0000                     _SSP2BUF	set	3951
  1080  0000                     _SSP2CON1	set	3948
  1081  0000                     _SSP2STAT	set	3949
  1082  0000                     _SSP1BUF	set	4041
  1083  0000                     _SSP1CON1	set	4038
  1084  0000                     _SSP1STAT	set	4039
  1085  0000                     _LATG	set	3983
  1086  0000                     _LATF	set	3982
  1087  0000                     _LATE	set	3981
  1088  0000                     _LATD	set	3980
  1089  0000                     _LATC	set	3979
  1090  0000                     _LATB	set	3978
  1091  0000                     _LATA	set	3977
  1092  0000                     _TRISG	set	3992
  1093  0000                     _TRISF	set	3991
  1094  0000                     _TRISE	set	3990
  1095  0000                     _TRISD	set	3989
  1096  0000                     _TRISC	set	3988
  1097  0000                     _TRISB	set	3987
  1098  0000                     _TRISA	set	3986
  1099  0000                     _PORTG	set	3974
  1100  0000                     _PORTF	set	3973
  1101  0000                     _PORTE	set	3972
  1102  0000                     _PORTD	set	3971
  1103  0000                     _PORTC	set	3970
  1104  0000                     _PORTB	set	3969
  1105  0000                     _PORTA	set	3968
  1106  0000                     _GODONE	set	32273
  1107  0000                     _ADON	set	32272
  1108  0000                     _RA3	set	31747
  1109  0000                     _RA2	set	31746
  1110  0000                     _RD7	set	31775
  1111  0000                     _RD5	set	31773
  1112  0000                     _TRISD7	set	31919
  1113  0000                     _TRISD5	set	31917
  1114  0000                     _TRISA3	set	31891
  1115  0000                     _TRISA2	set	31890
  1116  00FE61                     STR_23:
  1117  00FE61  43                 	db	67	;'C'
  1118  00FE62  6F                 	db	111	;'o'
  1119  00FE63  75                 	db	117	;'u'
  1120  00FE64  6C                 	db	108	;'l'
  1121  00FE65  64                 	db	100	;'d'
  1122  00FE66  20                 	db	32
  1123  00FE67  6E                 	db	110	;'n'
  1124  00FE68  6F                 	db	111	;'o'
  1125  00FE69  74                 	db	116	;'t'
  1126  00FE6A  20                 	db	32
  1127  00FE6B  72                 	db	114	;'r'
  1128  00FE6C  65                 	db	101	;'e'
  1129  00FE6D  74                 	db	116	;'t'
  1130  00FE6E  72                 	db	114	;'r'
  1131  00FE6F  69                 	db	105	;'i'
  1132  00FE70  65                 	db	101	;'e'
  1133  00FE71  76                 	db	118	;'v'
  1134  00FE72  65                 	db	101	;'e'
  1135  00FE73  20                 	db	32
  1136  00FE74  64                 	db	100	;'d'
  1137  00FE75  61                 	db	97	;'a'
  1138  00FE76  74                 	db	116	;'t'
  1139  00FE77  61                 	db	97	;'a'
  1140  00FE78  2C                 	db	44
  1141  00FE79  20                 	db	32
  1142  00FE7A  53                 	db	83	;'S'
  1143  00FE7B  74                 	db	116	;'t'
  1144  00FE7C  61                 	db	97	;'a'
  1145  00FE7D  63                 	db	99	;'c'
  1146  00FE7E  6B                 	db	107	;'k'
  1147  00FE7F  20                 	db	32
  1148  00FE80  69                 	db	105	;'i'
  1149  00FE81  73                 	db	115	;'s'
  1150  00FE82  20                 	db	32
  1151  00FE83  65                 	db	101	;'e'
  1152  00FE84  6D                 	db	109	;'m'
  1153  00FE85  70                 	db	112	;'p'
  1154  00FE86  74                 	db	116	;'t'
  1155  00FE87  79                 	db	121	;'y'
  1156  00FE88  2E                 	db	46
  1157  00FE89  0A                 	db	10
  1158  00FE8A  00                 	db	0
  1159  00FE8B                     STR_24:
  1160  00FE8B  43                 	db	67	;'C'
  1161  00FE8C  6F                 	db	111	;'o'
  1162  00FE8D  75                 	db	117	;'u'
  1163  00FE8E  6C                 	db	108	;'l'
  1164  00FE8F  64                 	db	100	;'d'
  1165  00FE90  20                 	db	32
  1166  00FE91  6E                 	db	110	;'n'
  1167  00FE92  6F                 	db	111	;'o'
  1168  00FE93  74                 	db	116	;'t'
  1169  00FE94  20                 	db	32
  1170  00FE95  69                 	db	105	;'i'
  1171  00FE96  6E                 	db	110	;'n'
  1172  00FE97  73                 	db	115	;'s'
  1173  00FE98  65                 	db	101	;'e'
  1174  00FE99  72                 	db	114	;'r'
  1175  00FE9A  74                 	db	116	;'t'
  1176  00FE9B  20                 	db	32
  1177  00FE9C  64                 	db	100	;'d'
  1178  00FE9D  61                 	db	97	;'a'
  1179  00FE9E  74                 	db	116	;'t'
  1180  00FE9F  61                 	db	97	;'a'
  1181  00FEA0  2C                 	db	44
  1182  00FEA1  20                 	db	32
  1183  00FEA2  53                 	db	83	;'S'
  1184  00FEA3  74                 	db	116	;'t'
  1185  00FEA4  61                 	db	97	;'a'
  1186  00FEA5  63                 	db	99	;'c'
  1187  00FEA6  6B                 	db	107	;'k'
  1188  00FEA7  20                 	db	32
  1189  00FEA8  69                 	db	105	;'i'
  1190  00FEA9  73                 	db	115	;'s'
  1191  00FEAA  20                 	db	32
  1192  00FEAB  66                 	db	102	;'f'
  1193  00FEAC  75                 	db	117	;'u'
  1194  00FEAD  6C                 	db	108	;'l'
  1195  00FEAE  6C                 	db	108	;'l'
  1196  00FEAF  2E                 	db	46
  1197  00FEB0  0A                 	db	10
  1198  00FEB1  00                 	db	0
  1199  00FEB2                     STR_8:
  1200  00FEB2  0A                 	db	10
  1201  00FEB3  54                 	db	84	;'T'
  1202  00FEB4  68                 	db	104	;'h'
  1203  00FEB5  65                 	db	101	;'e'
  1204  00FEB6  20                 	db	32
  1205  00FEB7  43                 	db	67	;'C'
  1206  00FEB8  6C                 	db	108	;'l'
  1207  00FEB9  6F                 	db	111	;'o'
  1208  00FEBA  73                 	db	115	;'s'
  1209  00FEBB  65                 	db	101	;'e'
  1210  00FEBC  73                 	db	115	;'s'
  1211  00FEBD  20                 	db	32
  1212  00FEBE  6F                 	db	111	;'o'
  1213  00FEBF  62                 	db	98	;'b'
  1214  00FEC0  6A                 	db	106	;'j'
  1215  00FEC1  65                 	db	101	;'e'
  1216  00FEC2  63                 	db	99	;'c'
  1217  00FEC3  74                 	db	116	;'t'
  1218  00FEC4  20                 	db	32
  1219  00FEC5  28                 	db	40
  1220  00FEC6  6D                 	db	109	;'m'
  1221  00FEC7  6D                 	db	109	;'m'
  1222  00FEC8  29                 	db	41
  1223  00FEC9  3A                 	db	58	;':'
  1224  00FECA  20                 	db	32
  1225  00FECB  25                 	db	37
  1226  00FECC  64                 	db	100	;'d'
  1227  00FECD  00                 	db	0
  1228  00FECE  0A                 	db	10
  1229  00FECF  53                 	db	83	;'S'
  1230  00FED0  74                 	db	116	;'t'
  1231  00FED1  65                 	db	101	;'e'
  1232  00FED2  70                 	db	112	;'p'
  1233  00FED3  73                 	db	115	;'s'
  1234  00FED4  20                 	db	32
  1235  00FED5  54                 	db	84	;'T'
  1236  00FED6  72                 	db	114	;'r'
  1237  00FED7  61                 	db	97	;'a'
  1238  00FED8  76                 	db	118	;'v'
  1239  00FED9  65                 	db	101	;'e'
  1240  00FEDA  6C                 	db	108	;'l'
  1241  00FEDB  6C                 	db	108	;'l'
  1242  00FEDC  65                 	db	101	;'e'
  1243  00FEDD  64                 	db	100	;'d'
  1244  00FEDE  3A                 	db	58	;':'
  1245  00FEDF  20                 	db	32
  1246  00FEE0  25                 	db	37
  1247  00FEE1  64                 	db	100	;'d'
  1248  00FEE2  20                 	db	32
  1249  00FEE3  0A                 	db	10
  1250  00FEE4  0A                 	db	10
  1251  00FEE5  00                 	db	0
  1252  00FEE6                     STR_18:
  1253  00FEE6  0A                 	db	10
  1254  00FEE7  0A                 	db	10
  1255  00FEE8  43                 	db	67	;'C'
  1256  00FEE9  6F                 	db	111	;'o'
  1257  00FEEA  2D                 	db	45
  1258  00FEEB  6F                 	db	111	;'o'
  1259  00FEEC  72                 	db	114	;'r'
  1260  00FEED  64                 	db	100	;'d'
  1261  00FEEE  69                 	db	105	;'i'
  1262  00FEEF  6E                 	db	110	;'n'
  1263  00FEF0  61                 	db	97	;'a'
  1264  00FEF1  74                 	db	116	;'t'
  1265  00FEF2  65                 	db	101	;'e'
  1266  00FEF3  20                 	db	32
  1267  00FEF4  25                 	db	37
  1268  00FEF5  64                 	db	100	;'d'
  1269  00FEF6  20                 	db	32
  1270  00FEF7  20                 	db	32
  1271  00FEF8  25                 	db	37
  1272  00FEF9  64                 	db	100	;'d'
  1273  00FEFA  0A                 	db	10
  1274  00FEFB  00                 	db	0
  1275  00FEFC                     STR_11:
  1276  00FEFC  0A                 	db	10
  1277  00FEFD  53                 	db	83	;'S'
  1278  00FEFE  74                 	db	116	;'t'
  1279  00FEFF  65                 	db	101	;'e'
  1280  00FF00  70                 	db	112	;'p'
  1281  00FF01  73                 	db	115	;'s'
  1282  00FF02  20                 	db	32
  1283  00FF03  54                 	db	84	;'T'
  1284  00FF04  72                 	db	114	;'r'
  1285  00FF05  61                 	db	97	;'a'
  1286  00FF06  76                 	db	118	;'v'
  1287  00FF07  65                 	db	101	;'e'
  1288  00FF08  6C                 	db	108	;'l'
  1289  00FF09  6C                 	db	108	;'l'
  1290  00FF0A  65                 	db	101	;'e'
  1291  00FF0B  64                 	db	100	;'d'
  1292  00FF0C  3A                 	db	58	;':'
  1293  00FF0D  20                 	db	32
  1294  00FF0E  25                 	db	37
  1295  00FF0F  64                 	db	100	;'d'
  1296  00FF10  00                 	db	0
  1297  00FF11                     STR_7:
  1298  00FF11  53                 	db	83	;'S'
  1299  00FF12  74                 	db	116	;'t'
  1300  00FF13  65                 	db	101	;'e'
  1301  00FF14  70                 	db	112	;'p'
  1302  00FF15  70                 	db	112	;'p'
  1303  00FF16  65                 	db	101	;'e'
  1304  00FF17  64                 	db	100	;'d'
  1305  00FF18  20                 	db	32
  1306  00FF19  33                 	db	51	;'3'
  1307  00FF1A  36                 	db	54	;'6'
  1308  00FF1B  30                 	db	48	;'0'
  1309  00FF1C  20                 	db	32
  1310  00FF1D  64                 	db	100	;'d'
  1311  00FF1E  65                 	db	101	;'e'
  1312  00FF1F  67                 	db	103	;'g'
  1313  00FF20  72                 	db	114	;'r'
  1314  00FF21  65                 	db	101	;'e'
  1315  00FF22  65                 	db	101	;'e'
  1316  00FF23  73                 	db	115	;'s'
  1317  00FF24  00                 	db	0
  1318  00FF25                     STR_2:
  1319  00FF25  53                 	db	83	;'S'
  1320  00FF26  65                 	db	101	;'e'
  1321  00FF27  6E                 	db	110	;'n'
  1322  00FF28  73                 	db	115	;'s'
  1323  00FF29  6F                 	db	111	;'o'
  1324  00FF2A  72                 	db	114	;'r'
  1325  00FF2B  20                 	db	32
  1326  00FF2C  4D                 	db	77	;'M'
  1327  00FF2D  6F                 	db	111	;'o'
  1328  00FF2E  76                 	db	118	;'v'
  1329  00FF2F  69                 	db	105	;'i'
  1330  00FF30  6E                 	db	110	;'n'
  1331  00FF31  67                 	db	103	;'g'
  1332  00FF32  21                 	db	33
  1333  00FF33  20                 	db	32
  1334  00FF34  20                 	db	32
  1335  00FF35  20                 	db	32
  1336  00FF36  0A                 	db	10
  1337  00FF37  00                 	db	0
  1338  00FF38                     STR_9:
  1339  00FF38  0A                 	db	10
  1340  00FF39  47                 	db	71	;'G'
  1341  00FF3A  6F                 	db	111	;'o'
  1342  00FF3B  69                 	db	105	;'i'
  1343  00FF3C  6E                 	db	110	;'n'
  1344  00FF3D  67                 	db	103	;'g'
  1345  00FF3E  20                 	db	32
  1346  00FF3F  62                 	db	98	;'b'
  1347  00FF40  61                 	db	97	;'a'
  1348  00FF41  63                 	db	99	;'c'
  1349  00FF42  6B                 	db	107	;'k'
  1350  00FF43  20                 	db	32
  1351  00FF44  74                 	db	116	;'t'
  1352  00FF45  6F                 	db	111	;'o'
  1353  00FF46  3A                 	db	58	;':'
  1354  00FF47  20                 	db	32
  1355  00FF48  25                 	db	37
  1356  00FF49  64                 	db	100	;'d'
  1357  00FF4A  00                 	db	0
  1358  00FF4B                     STR_5:
  1359  00FF4B  0A                 	db	10
  1360  00FF4C  20                 	db	32
  1361  00FF4D  46                 	db	70	;'F'
  1362  00FF4E  6F                 	db	111	;'o'
  1363  00FF4F  75                 	db	117	;'u'
  1364  00FF50  6E                 	db	110	;'n'
  1365  00FF51  64                 	db	100	;'d'
  1366  00FF52  20                 	db	32
  1367  00FF53  46                 	db	70	;'F'
  1368  00FF54  6C                 	db	108	;'l'
  1369  00FF55  61                 	db	97	;'a'
  1370  00FF56  67                 	db	103	;'g'
  1371  00FF57  3A                 	db	58	;':'
  1372  00FF58  20                 	db	32
  1373  00FF59  25                 	db	37
  1374  00FF5A  64                 	db	100	;'d'
  1375  00FF5B  00                 	db	0
  1376  00FF5C                     STR_27:
  1377  00FF5C  72                 	db	114	;'r'
  1378  00FF5D  65                 	db	101	;'e'
  1379  00FF5E  76                 	db	118	;'v'
  1380  00FF5F  3A                 	db	58	;':'
  1381  00FF60  25                 	db	37
  1382  00FF61  64                 	db	100	;'d'
  1383  00FF62  20                 	db	32
  1384  00FF63  54                 	db	84	;'T'
  1385  00FF64  61                 	db	97	;'a'
  1386  00FF65  72                 	db	114	;'r'
  1387  00FF66  3A                 	db	58	;':'
  1388  00FF67  20                 	db	32
  1389  00FF68  25                 	db	37
  1390  00FF69  64                 	db	100	;'d'
  1391  00FF6A  0A                 	db	10
  1392  00FF6B  00                 	db	0
  1393  00FF6C                     STR_13:
  1394  00FF6C  52                 	db	82	;'R'
  1395  00FF6D  6F                 	db	111	;'o'
  1396  00FF6E  62                 	db	98	;'b'
  1397  00FF6F  6F                 	db	111	;'o'
  1398  00FF70  74                 	db	116	;'t'
  1399  00FF71  20                 	db	32
  1400  00FF72  52                 	db	82	;'R'
  1401  00FF73  65                 	db	101	;'e'
  1402  00FF74  61                 	db	97	;'a'
  1403  00FF75  64                 	db	100	;'d'
  1404  00FF76  79                 	db	121	;'y'
  1405  00FF77  21                 	db	33
  1406  00FF78  20                 	db	32
  1407  00FF79  0A                 	db	10
  1408  00FF7A  0A                 	db	10
  1409  00FF7B  00                 	db	0
  1410  00FF7C                     STR_37:
  1411  00FF7C  0A                 	db	10
  1412  00FF7D  0A                 	db	10
  1413  00FF7E  72                 	db	114	;'r'
  1414  00FF7F  65                 	db	101	;'e'
  1415  00FF80  76                 	db	118	;'v'
  1416  00FF81  3A                 	db	58	;':'
  1417  00FF82  25                 	db	37
  1418  00FF83  64                 	db	100	;'d'
  1419  00FF84  20                 	db	32
  1420  00FF85  54                 	db	84	;'T'
  1421  00FF86  61                 	db	97	;'a'
  1422  00FF87  72                 	db	114	;'r'
  1423  00FF88  3A                 	db	58	;':'
  1424  00FF89  0A                 	db	10
  1425  00FF8A  00                 	db	0
  1426  00FF8B                     STR_25:
  1427  00FF8B  57                 	db	87	;'W'
  1428  00FF8C  41                 	db	65	;'A'
  1429  00FF8D  4C                 	db	76	;'L'
  1430  00FF8E  4C                 	db	76	;'L'
  1431  00FF8F  20                 	db	32
  1432  00FF90  46                 	db	70	;'F'
  1433  00FF91  4F                 	db	79	;'O'
  1434  00FF92  55                 	db	85	;'U'
  1435  00FF93  4E                 	db	78	;'N'
  1436  00FF94  44                 	db	68	;'D'
  1437  00FF95  0A                 	db	10
  1438  00FF96  00                 	db	0
  1439  00FF97                     STR_33:
  1440  00FF97  58                 	db	88	;'X'
  1441  00FF98  3D                 	db	61	;'='
  1442  00FF99  25                 	db	37
  1443  00FF9A  64                 	db	100	;'d'
  1444  00FF9B  2C                 	db	44
  1445  00FF9C  20                 	db	32
  1446  00FF9D  59                 	db	89	;'Y'
  1447  00FF9E  3D                 	db	61	;'='
  1448  00FF9F  25                 	db	37
  1449  00FFA0  64                 	db	100	;'d'
  1450  00FFA1  0A                 	db	10
  1451  00FFA2  00                 	db	0
  1452  00FFA3                     STR_35:
  1453  00FFA3  6E                 	db	110	;'n'
  1454  00FFA4  6F                 	db	111	;'o'
  1455  00FFA5  20                 	db	32
  1456  00FFA6  6F                 	db	111	;'o'
  1457  00FFA7  70                 	db	112	;'p'
  1458  00FFA8  74                 	db	116	;'t'
  1459  00FFA9  69                 	db	105	;'i'
  1460  00FFAA  6F                 	db	111	;'o'
  1461  00FFAB  6E                 	db	110	;'n'
  1462  00FFAC  73                 	db	115	;'s'
  1463  00FFAD  0A                 	db	10
  1464  00FFAE  00                 	db	0
  1465  00FFAF                     STR_4:
  1466  00FFAF  0A                 	db	10
  1467  00FFB0  41                 	db	65	;'A'
  1468  00FFB1  44                 	db	68	;'D'
  1469  00FFB2  43                 	db	67	;'C'
  1470  00FFB3  3A                 	db	58	;':'
  1471  00FFB4  20                 	db	32
  1472  00FFB5  25                 	db	37
  1473  00FFB6  64                 	db	100	;'d'
  1474  00FFB7  20                 	db	32
  1475  00FFB8  0A                 	db	10
  1476  00FFB9  0A                 	db	10
  1477  00FFBA  00                 	db	0
  1478  00FFBB                     STR_21:
  1479  00FFBB  47                 	db	71	;'G'
  1480  00FFBC  6F                 	db	111	;'o'
  1481  00FFBD  69                 	db	105	;'i'
  1482  00FFBE  6E                 	db	110	;'n'
  1483  00FFBF  67                 	db	103	;'g'
  1484  00FFC0  20                 	db	32
  1485  00FFC1  48                 	db	72	;'H'
  1486  00FFC2  6F                 	db	111	;'o'
  1487  00FFC3  6D                 	db	109	;'m'
  1488  00FFC4  65                 	db	101	;'e'
  1489  00FFC5  00                 	db	0
  1490  00FFC6                     STR_31:
  1491  00FFC6  0A                 	db	10
  1492  00FFC7  53                 	db	83	;'S'
  1493  00FFC8  74                 	db	116	;'t'
  1494  00FFC9  65                 	db	101	;'e'
  1495  00FFCA  70                 	db	112	;'p'
  1496  00FFCB  73                 	db	115	;'s'
  1497  00FFCC  20                 	db	32
  1498  00FFCD  25                 	db	37
  1499  00FFCE  64                 	db	100	;'d'
  1500  00FFCF  00                 	db	0
  1501  00FFD0                     STR_16:
  1502  00FFD0  0A                 	db	10
  1503  00FFD1  20                 	db	32
  1504  00FFD2  20                 	db	32
  1505  00FFD3  20                 	db	32
  1506  00FFD4  20                 	db	32
  1507  00FFD5  20                 	db	32
  1508  00FFD6  20                 	db	32
  1509  00FFD7  20                 	db	32
  1510  00FFD8  0A                 	db	10
  1511  00FFD9  00                 	db	0
  1512  00FFDA                     STR_32:
  1513  00FFDA  0A                 	db	10
  1514  00FFDB  46                 	db	70	;'F'
  1515  00FFDC  6C                 	db	108	;'l'
  1516  00FFDD  61                 	db	97	;'a'
  1517  00FFDE  67                 	db	103	;'g'
  1518  00FFDF  20                 	db	32
  1519  00FFE0  25                 	db	37
  1520  00FFE1  64                 	db	100	;'d'
  1521  00FFE2  00                 	db	0
  1522  00FFE3                     STR_22:
  1523  00FFE3  48                 	db	72	;'H'
  1524  00FFE4  4F                 	db	79	;'O'
  1525  00FFE5  4D                 	db	77	;'M'
  1526  00FFE6  45                 	db	69	;'E'
  1527  00FFE7  21                 	db	33
  1528  00FFE8  21                 	db	33
  1529  00FFE9  21                 	db	33
  1530  00FFEA  40                 	db	64	;'@'
  1531  00FFEB  00                 	db	0
  1532  00FFEC                     STR_17:
  1533  00FFEC  76                 	db	118	;'v'
  1534  00FFED  63                 	db	99	;'c'
  1535  00FFEE  3A                 	db	58	;':'
  1536  00FFEF  20                 	db	32
  1537  00FFF0  25                 	db	37
  1538  00FFF1  64                 	db	100	;'d'
  1539  00FFF2  0A                 	db	10
  1540  00FFF3  00                 	db	0
  1541  00FFF4                     STR_34:
  1542  00FFF4  26                 	db	38
  1543  00FFF5  26                 	db	38
  1544  00FFF6  26                 	db	38
  1545  00FFF7  26                 	db	38
  1546  00FFF8  26                 	db	38
  1547  00FFF9  0A                 	db	10
  1548  00FFFA  00                 	db	0
  1549  00FFFB                     STR_1:
  1550  00FFFB  25                 	db	37
  1551  00FFFC  63                 	db	99	;'c'
  1552  00FFFD  00                 	db	0
  1553  0000                     
  1554                           ; #config settings
  1555  00FFFE  00                 	db	0	; dummy byte at the end
  1556  0000                     
  1557                           	psect	cinit
  1558  0173FC                     __pcinit:
  1559                           	opt stack 0
  1560  0173FC                     start_initialization:
  1561                           	opt stack 0
  1562  0173FC                     __initialization:
  1563                           	opt stack 0
  1564                           
  1565                           ; Initialize objects allocated to BANK1 (31 bytes)
  1566                           ; load TBLPTR registers with __pidataBANK1
  1567  0173FC  0E08               	movlw	low __pidataBANK1
  1568  0173FE  6EF6               	movwf	tblptrl,c
  1569  017400  0E8D               	movlw	high __pidataBANK1
  1570  017402  6EF7               	movwf	tblptrh,c
  1571  017404  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1572  017406  6EF8               	movwf	tblptru,c
  1573  017408  EE01  F0E1         	lfsr	0,__pdataBANK1
  1574  01740C  EE10 F01F          	lfsr	1,31
  1575  017410                     copy_data0:
  1576  017410  0009               	tblrd		*+
  1577  017412  CFF5 FFEE          	movff	tablat,postinc0
  1578  017416  50E5               	movf	postdec1,w,c
  1579  017418  50E1               	movf	fsr1l,w,c
  1580  01741A  E1FA               	bnz	copy_data0
  1581                           
  1582                           ; Initialize objects allocated to COMRAM (10 bytes)
  1583                           ; load TBLPTR registers with __pidataCOMRAM
  1584  01741C  0EC6               	movlw	low __pidataCOMRAM
  1585  01741E  6EF6               	movwf	tblptrl,c
  1586  017420  0E8F               	movlw	high __pidataCOMRAM
  1587  017422  6EF7               	movwf	tblptrh,c
  1588  017424  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1589  017426  6EF8               	movwf	tblptru,c
  1590  017428  EE00  F047         	lfsr	0,__pdataCOMRAM
  1591  01742C  EE10 F00A          	lfsr	1,10
  1592  017430                     copy_data1:
  1593  017430  0009               	tblrd		*+
  1594  017432  CFF5 FFEE          	movff	tablat,postinc0
  1595  017436  50E5               	movf	postdec1,w,c
  1596  017438  50E1               	movf	fsr1l,w,c
  1597  01743A  E1FA               	bnz	copy_data1
  1598                           
  1599                           ; Clear objects allocated to BIGRAM (300 bytes)
  1600  01743C  EE03  F0F2         	lfsr	0,__pbssBIGRAM
  1601  017440  EE11 F02C          	lfsr	1,300
  1602  017444                     clear_0:
  1603  017444  6AEE               	clrf	postinc0,c
  1604  017446  50E5               	movf	postdec1,w,c
  1605  017448  50E1               	movf	fsr1l,w,c
  1606  01744A  E1FC               	bnz	clear_0
  1607  01744C  50E2               	movf	fsr1h,w,c
  1608  01744E  E1FA               	bnz	clear_0
  1609                           
  1610                           ; Clear objects allocated to BANK3 (238 bytes)
  1611  017450  EE03  F000         	lfsr	0,__pbssBANK3
  1612  017454  0EEE               	movlw	238
  1613  017456                     clear_1:
  1614  017456  6AEE               	clrf	postinc0,c
  1615  017458  06E8               	decf	wreg,f,c
  1616  01745A  E1FD               	bnz	clear_1
  1617                           
  1618                           ; Clear objects allocated to BANK2 (252 bytes)
  1619  01745C  EE02  F000         	lfsr	0,__pbssBANK2
  1620  017460  0EFC               	movlw	252
  1621  017462                     clear_2:
  1622  017462  6AEE               	clrf	postinc0,c
  1623  017464  06E8               	decf	wreg,f,c
  1624  017466  E1FD               	bnz	clear_2
  1625                           
  1626                           ; Clear objects allocated to BANK1 (183 bytes)
  1627  017468  EE01  F000         	lfsr	0,__pbssBANK1
  1628  01746C  0EB7               	movlw	183
  1629  01746E                     clear_3:
  1630  01746E  6AEE               	clrf	postinc0,c
  1631  017470  06E8               	decf	wreg,f,c
  1632  017472  E1FD               	bnz	clear_3
  1633                           
  1634                           ; Clear objects allocated to BANK0 (1 bytes)
  1635  017474  0100               	movlb	0
  1636  017476  6BFF               	clrf	__pbssBANK0& (0+255),b
  1637                           
  1638                           ; Clear objects allocated to COMRAM (30 bytes)
  1639  017478  EE00  F029         	lfsr	0,__pbssCOMRAM
  1640  01747C  0E1E               	movlw	30
  1641  01747E                     clear_4:
  1642  01747E  6AEE               	clrf	postinc0,c
  1643  017480  06E8               	decf	wreg,f,c
  1644  017482  E1FD               	bnz	clear_4
  1645  017484                     end_of_initialization:
  1646                           	opt stack 0
  1647  017484                     __end_of__initialization:
  1648                           	opt stack 0
  1649  017484  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1650  017486  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1651  017488  0100               	movlb	0
  1652  01748A  EF14  F097         	goto	_main	;jump to C main() function
  1653                           tblptru	equ	0xFF8
  1654                           tblptrh	equ	0xFF7
  1655                           tblptrl	equ	0xFF6
  1656                           tablat	equ	0xFF5
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postdec1	equ	0xFE5
  1660                           fsr1h	equ	0xFE2
  1661                           fsr1l	equ	0xFE1
  1662                           
  1663                           	psect	bssCOMRAM
  1664  000029                     __pbssCOMRAM:
  1665                           	opt stack 0
  1666  000029                     _lQueue:
  1667                           	opt stack 0
  1668  000029                     	ds	3
  1669  00002C                     _average:
  1670                           	opt stack 0
  1671  00002C                     	ds	2
  1672  00002E                     _readIndex:
  1673                           	opt stack 0
  1674  00002E                     	ds	2
  1675  000030                     _Found_Flag:
  1676                           	opt stack 0
  1677  000030                     	ds	2
  1678  000032                     _pShiftVal:
  1679                           	opt stack 0
  1680  000032                     	ds	2
  1681  000034                     _COUNTER:
  1682                           	opt stack 0
  1683  000034                     	ds	2
  1684  000036                     _lMotor:
  1685                           	opt stack 0
  1686  000036                     	ds	2
  1687  000038                     _lCurrent:
  1688                           	opt stack 0
  1689  000038                     	ds	2
  1690  00003A                     _BumpSensor:
  1691                           	opt stack 0
  1692  00003A                     	ds	1
  1693  00003B                     _WallFlag:
  1694                           	opt stack 0
  1695  00003B                     	ds	1
  1696  00003C                     Event_TestButton@j:
  1697                           	opt stack 0
  1698  00003C                     	ds	1
  1699  00003D                     Timer2_Init@PRE:
  1700                           	opt stack 0
  1701  00003D                     	ds	1
  1702  00003E                     Timer2_Init@INDEX:
  1703                           	opt stack 0
  1704  00003E                     	ds	1
  1705  00003F                     Timer0_Init@PRE:
  1706                           	opt stack 0
  1707  00003F                     	ds	1
  1708  000040                     _INDEX:
  1709                           	opt stack 0
  1710  000040                     	ds	1
  1711  000041                     rand@screw:
  1712                           	opt stack 0
  1713  000041                     	ds	1
  1714  000042                     OutSeg@a:
  1715                           	opt stack 0
  1716  000042                     	ds	1
  1717  000043                     OutSeg@segset:
  1718                           	opt stack 0
  1719  000043                     	ds	1
  1720  000044                     OutSeg@cur:
  1721                           	opt stack 0
  1722  000044                     	ds	1
  1723  000045                     _lBufferX:
  1724                           	opt stack 0
  1725  000045                     	ds	1
  1726  000046                     _clearall:
  1727                           	opt stack 0
  1728  000046                     	ds	1
  1729                           tblptru	equ	0xFF8
  1730                           tblptrh	equ	0xFF7
  1731                           tblptrl	equ	0xFF6
  1732                           tablat	equ	0xFF5
  1733                           postinc0	equ	0xFEE
  1734                           wreg	equ	0xFE8
  1735                           postdec1	equ	0xFE5
  1736                           fsr1h	equ	0xFE2
  1737                           fsr1l	equ	0xFE1
  1738                           
  1739                           	psect	dataCOMRAM
  1740  000047                     __pdataCOMRAM:
  1741                           	opt stack 0
  1742  000047                     _gCursor:
  1743                           	opt stack 0
  1744  000047                     	ds	4
  1745  00004B                     _top:
  1746                           	opt stack 0
  1747  00004B                     	ds	2
  1748  00004D                     _Bus_State:
  1749                           	opt stack 0
  1750  00004D                     	ds	1
  1751  00004E                     _change:
  1752                           	opt stack 0
  1753  00004E                     	ds	1
  1754  00004F                     _l:
  1755                           	opt stack 0
  1756  00004F                     	ds	1
  1757  000050                     _w:
  1758                           	opt stack 0
  1759  000050                     	ds	1
  1760                           tblptru	equ	0xFF8
  1761                           tblptrh	equ	0xFF7
  1762                           tblptrl	equ	0xFF6
  1763                           tablat	equ	0xFF5
  1764                           postinc0	equ	0xFEE
  1765                           wreg	equ	0xFE8
  1766                           postdec1	equ	0xFE5
  1767                           fsr1h	equ	0xFE2
  1768                           fsr1l	equ	0xFE1
  1769                           
  1770                           	psect	bssBANK0
  1771  0000FF                     __pbssBANK0:
  1772                           	opt stack 0
  1773  0000FF                     _lBufferY:
  1774                           	opt stack 0
  1775  0000FF                     	ds	1
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           fsr1h	equ	0xFE2
  1784                           fsr1l	equ	0xFE1
  1785                           
  1786                           	psect	bssBANK1
  1787  000100                     __pbssBANK1:
  1788                           	opt stack 0
  1789  000100                     Timer2_Init@DIV:
  1790                           	opt stack 0
  1791  000100                     	ds	4
  1792  000104                     Timer0_Init@DIV:
  1793                           	opt stack 0
  1794  000104                     	ds	4
  1795  000108                     _gISR:
  1796                           	opt stack 0
  1797  000108                     	ds	3
  1798  00010B                     _lStepFunction:
  1799                           	opt stack 0
  1800  00010B                     	ds	3
  1801  00010E                     _I2C2_More:
  1802                           	opt stack 0
  1803  00010E                     	ds	3
  1804  000111                     _I2C1_More:
  1805                           	opt stack 0
  1806  000111                     	ds	3
  1807  000114                     _I2C2_Done:
  1808                           	opt stack 0
  1809  000114                     	ds	3
  1810  000117                     _I2C1_Done:
  1811                           	opt stack 0
  1812  000117                     	ds	3
  1813  00011A                     _errno:
  1814                           	opt stack 0
  1815  00011A                     	ds	2
  1816  00011C                     _test:
  1817                           	opt stack 0
  1818  00011C                     	ds	2
  1819  00011E                     _timercount:
  1820                           	opt stack 0
  1821  00011E                     	ds	2
  1822  000120                     _Sensor_Observe_Fin:
  1823                           	opt stack 0
  1824  000120                     	ds	2
  1825  000122                     _CW_Count:
  1826                           	opt stack 0
  1827  000122                     	ds	2
  1828  000124                     _CCW_Count:
  1829                           	opt stack 0
  1830  000124                     	ds	2
  1831  000126                     _count:
  1832                           	opt stack 0
  1833  000126                     	ds	2
  1834  000128                     _Close_Pos:
  1835                           	opt stack 0
  1836  000128                     	ds	2
  1837  00012A                     _ADC_Reading:
  1838                           	opt stack 0
  1839  00012A                     	ds	2
  1840  00012C                     _BumpState:
  1841                           	opt stack 0
  1842  00012C                     	ds	2
  1843  00012E                     _mod:
  1844                           	opt stack 0
  1845  00012E                     	ds	2
  1846  000130                     _Square_Dist:
  1847                           	opt stack 0
  1848  000130                     	ds	2
  1849  000132                     _T_VAR:
  1850                           	opt stack 0
  1851  000132                     	ds	2
  1852  000134                     _VictimCount:
  1853                           	opt stack 0
  1854  000134                     	ds	2
  1855  000136                     _Current_Angle:
  1856                           	opt stack 0
  1857  000136                     	ds	2
  1858  000138                     _flag:
  1859                           	opt stack 0
  1860  000138                     	ds	2
  1861  00013A                     _Previous_Angle:
  1862                           	opt stack 0
  1863  00013A                     	ds	2
  1864  00013C                     _k:
  1865                           	opt stack 0
  1866  00013C                     	ds	2
  1867  00013E                     _Y_Pos:
  1868                           	opt stack 0
  1869  00013E                     	ds	2
  1870  000140                     _X_Pos:
  1871                           	opt stack 0
  1872  000140                     	ds	2
  1873  000142                     _x:
  1874                           	opt stack 0
  1875  000142                     	ds	2
  1876  000144                     _total:
  1877                           	opt stack 0
  1878  000144                     	ds	2
  1879  000146                     _thisReading:
  1880                           	opt stack 0
  1881  000146                     	ds	2
  1882  000148                     _Steps:
  1883                           	opt stack 0
  1884  000148                     	ds	2
  1885  00014A                     _Motor_Count:
  1886                           	opt stack 0
  1887  00014A                     	ds	2
  1888  00014C                     _mode:
  1889                           	opt stack 0
  1890  00014C                     	ds	2
  1891  00014E                     _Current_Dist2:
  1892                           	opt stack 0
  1893  00014E                     	ds	2
  1894  000150                     _Current_Dist1:
  1895                           	opt stack 0
  1896  000150                     	ds	2
  1897  000152                     _Current_Dist:
  1898                           	opt stack 0
  1899  000152                     	ds	2
  1900  000154                     _val:
  1901                           	opt stack 0
  1902  000154                     	ds	2
  1903  000156                     HMI_GRender@a:
  1904                           	opt stack 0
  1905  000156                     	ds	2
  1906  000158                     _gBackcolour:
  1907                           	opt stack 0
  1908  000158                     	ds	2
  1909  00015A                     SPI_Send9@dat:
  1910                           	opt stack 0
  1911  00015A                     	ds	2
  1912  00015C                     _Cliff_Left:
  1913                           	opt stack 0
  1914  00015C                     	ds	1
  1915  00015D                     _Cliff_Right:
  1916                           	opt stack 0
  1917  00015D                     	ds	1
  1918  00015E                     _Cliff_FLeft:
  1919                           	opt stack 0
  1920  00015E                     	ds	1
  1921  00015F                     _Cliff_FRight:
  1922                           	opt stack 0
  1923  00015F                     	ds	1
  1924  000160                     _Prev_Angle:
  1925                           	opt stack 0
  1926  000160                     	ds	1
  1927  000161                     _u:
  1928                           	opt stack 0
  1929  000161                     	ds	1
  1930  000162                     _j:
  1931                           	opt stack 0
  1932  000162                     	ds	1
  1933  000163                     _i:
  1934                           	opt stack 0
  1935  000163                     	ds	1
  1936  000164                     _ADC_Initialised:
  1937                           	opt stack 0
  1938  000164                     	ds	1
  1939  000165                     _PortE:
  1940                           	opt stack 0
  1941  000165                     	ds	10
  1942  00016F                     _PortD:
  1943                           	opt stack 0
  1944  00016F                     	ds	10
  1945  000179                     _PortC:
  1946                           	opt stack 0
  1947  000179                     	ds	10
  1948  000183                     _PortF:
  1949                           	opt stack 0
  1950  000183                     	ds	10
  1951  00018D                     _I2C2T:
  1952                           	opt stack 0
  1953  00018D                     	ds	7
  1954  000194                     _I2C1T:
  1955                           	opt stack 0
  1956  000194                     	ds	7
  1957  00019B                     _ADC_AN3:
  1958                           	opt stack 0
  1959  00019B                     	ds	5
  1960  0001A0                     _ADC_AN2:
  1961                           	opt stack 0
  1962  0001A0                     	ds	5
  1963  0001A5                     _ADC_AN1:
  1964                           	opt stack 0
  1965  0001A5                     	ds	5
  1966  0001AA                     _ADC_AN0:
  1967                           	opt stack 0
  1968  0001AA                     	ds	5
  1969  0001AF                     LCD_DrawRectangle@p4:
  1970                           	opt stack 0
  1971  0001AF                     	ds	4
  1972  0001B3                     LCD_DrawRectangle@p2:
  1973                           	opt stack 0
  1974  0001B3                     	ds	4
  1975                           tblptru	equ	0xFF8
  1976                           tblptrh	equ	0xFF7
  1977                           tblptrl	equ	0xFF6
  1978                           tablat	equ	0xFF5
  1979                           postinc0	equ	0xFEE
  1980                           wreg	equ	0xFE8
  1981                           postdec1	equ	0xFE5
  1982                           fsr1h	equ	0xFE2
  1983                           fsr1l	equ	0xFE1
  1984                           
  1985                           	psect	dataBANK1
  1986  0001E1                     __pdataBANK1:
  1987                           	opt stack 0
  1988  0001E1                     Console_Render@F6956:
  1989                           	opt stack 0
  1990  0001E1                     	ds	4
  1991  0001E5                     _gLineSize:
  1992                           	opt stack 0
  1993  0001E5                     	ds	4
  1994  0001E9                     _gCharSize:
  1995                           	opt stack 0
  1996  0001E9                     	ds	4
  1997  0001ED                     _countOff:
  1998                           	opt stack 0
  1999  0001ED                     	ds	2
  2000  0001EF                     _countOn:
  2001                           	opt stack 0
  2002  0001EF                     	ds	2
  2003  0001F1                     _Low_Sensor:
  2004                           	opt stack 0
  2005  0001F1                     	ds	2
  2006  0001F3                     _Desired_Level:
  2007                           	opt stack 0
  2008  0001F3                     	ds	2
  2009  0001F5                     _Spd:
  2010                           	opt stack 0
  2011  0001F5                     	ds	2
  2012  0001F7                     _numReadings:
  2013                           	opt stack 0
  2014  0001F7                     	ds	2
  2015  0001F9                     _Current_Direction:
  2016                           	opt stack 0
  2017  0001F9                     	ds	2
  2018  0001FB                     _gForecolour:
  2019                           	opt stack 0
  2020  0001FB                     	ds	2
  2021  0001FD                     	ds	1
  2022  0001FE                     	ds	1
  2023  0001FF                     	ds	1
  2024                           tblptru	equ	0xFF8
  2025                           tblptrh	equ	0xFF7
  2026                           tblptrl	equ	0xFF6
  2027                           tablat	equ	0xFF5
  2028                           postinc0	equ	0xFEE
  2029                           wreg	equ	0xFE8
  2030                           postdec1	equ	0xFE5
  2031                           fsr1h	equ	0xFE2
  2032                           fsr1l	equ	0xFE1
  2033                           
  2034                           	psect	bssBANK2
  2035  000200                     __pbssBANK2:
  2036                           	opt stack 0
  2037  000200                     _maze:
  2038                           	opt stack 0
  2039  000200                     	ds	200
  2040  0002C8                     _SPI1:
  2041                           	opt stack 0
  2042  0002C8                     	ds	11
  2043  0002D3                     _SPI2:
  2044                           	opt stack 0
  2045  0002D3                     	ds	11
  2046  0002DE                     _TestButton:
  2047                           	opt stack 0
  2048  0002DE                     	ds	10
  2049  0002E8                     _PortG:
  2050                           	opt stack 0
  2051  0002E8                     	ds	10
  2052  0002F2                     _PortB:
  2053                           	opt stack 0
  2054  0002F2                     	ds	10
  2055                           tblptru	equ	0xFF8
  2056                           tblptrh	equ	0xFF7
  2057                           tblptrl	equ	0xFF6
  2058                           tablat	equ	0xFF5
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           postdec1	equ	0xFE5
  2062                           fsr1h	equ	0xFE2
  2063                           fsr1l	equ	0xFE1
  2064                           
  2065                           	psect	bssBANK3
  2066  000300                     __pbssBANK3:
  2067                           	opt stack 0
  2068  000300                     _stack:
  2069                           	opt stack 0
  2070  000300                     	ds	40
  2071  000328                     _lCBuffer:
  2072                           	opt stack 0
  2073  000328                     	ds	30
  2074  000346                     _readings:
  2075                           	opt stack 0
  2076  000346                     	ds	20
  2077  00035A                     Console_MakeField@Fill:
  2078                           	opt stack 0
  2079  00035A                     	ds	70
  2080  0003A0                     _HMIBoard:
  2081                           	opt stack 0
  2082  0003A0                     	ds	58
  2083  0003DA                     _DIPSwitch:
  2084                           	opt stack 0
  2085  0003DA                     	ds	10
  2086  0003E4                     _PortA:
  2087                           	opt stack 0
  2088  0003E4                     	ds	10
  2089                           tblptru	equ	0xFF8
  2090                           tblptrh	equ	0xFF7
  2091                           tblptrl	equ	0xFF6
  2092                           tablat	equ	0xFF5
  2093                           postinc0	equ	0xFEE
  2094                           wreg	equ	0xFE8
  2095                           postdec1	equ	0xFE5
  2096                           fsr1h	equ	0xFE2
  2097                           fsr1l	equ	0xFE1
  2098                           
  2099                           	psect	bssBIGRAM
  2100  0003F2                     __pbssBIGRAM:
  2101                           	opt stack 0
  2102  0003F2                     _lBuffer:
  2103                           	opt stack 0
  2104  0003F2                     	ds	300
  2105                           tblptru	equ	0xFF8
  2106                           tblptrh	equ	0xFF7
  2107                           tblptrl	equ	0xFF6
  2108                           tablat	equ	0xFF5
  2109                           postinc0	equ	0xFEE
  2110                           wreg	equ	0xFE8
  2111                           postdec1	equ	0xFE5
  2112                           fsr1h	equ	0xFE2
  2113                           fsr1l	equ	0xFE1
  2114                           
  2115                           	psect	cstackBANK3
  2116  0003EE                     __pcstackBANK3:
  2117                           	opt stack 0
  2118  0003EE                     main@down:
  2119                           	opt stack 0
  2120                           
  2121                           ; 1 bytes @ 0x0
  2122  0003EE                     	ds	1
  2123  0003EF                     main@right:
  2124                           	opt stack 0
  2125                           
  2126                           ; 1 bytes @ 0x1
  2127  0003EF                     	ds	1
  2128  0003F0                     main@up:
  2129                           	opt stack 0
  2130                           
  2131                           ; 1 bytes @ 0x2
  2132  0003F0                     	ds	1
  2133  0003F1                     main@left:
  2134                           	opt stack 0
  2135                           
  2136                           ; 1 bytes @ 0x3
  2137  0003F1                     	ds	1
  2138                           tblptru	equ	0xFF8
  2139                           tblptrh	equ	0xFF7
  2140                           tblptrl	equ	0xFF6
  2141                           tablat	equ	0xFF5
  2142                           postinc0	equ	0xFEE
  2143                           wreg	equ	0xFE8
  2144                           postdec1	equ	0xFE5
  2145                           fsr1h	equ	0xFE2
  2146                           fsr1l	equ	0xFE1
  2147                           
  2148                           	psect	cstackBANK2
  2149  0002FC                     __pcstackBANK2:
  2150                           	opt stack 0
  2151  0002FC                     ??_main:
  2152                           
  2153                           ; 1 bytes @ 0x0
  2154  0002FC                     	ds	4
  2155                           tblptru	equ	0xFF8
  2156                           tblptrh	equ	0xFF7
  2157                           tblptrl	equ	0xFF6
  2158                           tablat	equ	0xFF5
  2159                           postinc0	equ	0xFEE
  2160                           wreg	equ	0xFE8
  2161                           postdec1	equ	0xFE5
  2162                           fsr1h	equ	0xFE2
  2163                           fsr1l	equ	0xFE1
  2164                           
  2165                           	psect	cstackBANK1
  2166  0001B7                     __pcstackBANK1:
  2167                           	opt stack 0
  2168  0001B7                     Fix_Error@i:
  2169                           	opt stack 0
  2170                           
  2171                           ; 2 bytes @ 0x0
  2172  0001B7                     	ds	2
  2173  0001B9                     Fix_Error@i_14198:
  2174                           	opt stack 0
  2175                           
  2176                           ; 2 bytes @ 0x2
  2177  0001B9                     	ds	2
  2178  0001BB                     Fix_Error@close_error:
  2179                           	opt stack 0
  2180                           
  2181                           ; 2 bytes @ 0x4
  2182  0001BB                     	ds	2
  2183  0001BD                     Fix_Error@far_error:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0x6
  2187  0001BD                     	ds	2
  2188  0001BF                     Travel@direction:
  2189                           	opt stack 0
  2190                           
  2191                           ; 2 bytes @ 0x8
  2192  0001BF                     	ds	2
  2193  0001C1                     Travel@Dist:
  2194                           	opt stack 0
  2195                           
  2196                           ; 2 bytes @ 0xA
  2197  0001C1                     	ds	2
  2198  0001C3                     Travel@Test_ADC:
  2199                           	opt stack 0
  2200                           
  2201                           ; 2 bytes @ 0xC
  2202  0001C3                     	ds	2
  2203  0001C5                     Travel@Spd:
  2204                           	opt stack 0
  2205                           
  2206                           ; 2 bytes @ 0xE
  2207  0001C5                     	ds	2
  2208  0001C7                     Travel@Wall:
  2209                           	opt stack 0
  2210                           
  2211                           ; 2 bytes @ 0x10
  2212  0001C7                     	ds	2
  2213  0001C9                     Travel@Dir:
  2214                           	opt stack 0
  2215                           
  2216                           ; 2 bytes @ 0x12
  2217  0001C9                     	ds	2
  2218  0001CB                     Travel@spd1:
  2219                           	opt stack 0
  2220                           
  2221                           ; 2 bytes @ 0x14
  2222  0001CB                     	ds	2
  2223  0001CD                     Travel@spd2:
  2224                           	opt stack 0
  2225                           
  2226                           ; 2 bytes @ 0x16
  2227  0001CD                     	ds	2
  2228  0001CF                     Travel@rev_Dist:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x18
  2232  0001CF                     	ds	2
  2233  0001D1                     Travel@Dist_Travelled:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0x1A
  2237  0001D1                     	ds	2
  2238  0001D3                     Travel@Req_Dir:
  2239                           	opt stack 0
  2240                           
  2241                           ; 2 bytes @ 0x1C
  2242  0001D3                     	ds	2
  2243  0001D5                     Travel@error:
  2244                           	opt stack 0
  2245                           
  2246                           ; 2 bytes @ 0x1E
  2247  0001D5                     	ds	2
  2248  0001D7                     Go_Backward@direction:
  2249                           	opt stack 0
  2250                           
  2251                           ; 2 bytes @ 0x20
  2252  0001D7                     	ds	2
  2253  0001D9                     Go_Backward@spd:
  2254                           	opt stack 0
  2255                           
  2256                           ; 2 bytes @ 0x22
  2257  0001D9                     	ds	2
  2258  0001DB                     ??_Navigate_Maze:
  2259                           
  2260                           ; 1 bytes @ 0x24
  2261  0001DB                     	ds	4
  2262  0001DF                     Navigate_Maze@Direction:
  2263                           	opt stack 0
  2264                           
  2265                           ; 2 bytes @ 0x28
  2266  0001DF                     	ds	2
  2267                           tblptru	equ	0xFF8
  2268                           tblptrh	equ	0xFF7
  2269                           tblptrl	equ	0xFF6
  2270                           tablat	equ	0xFF5
  2271                           postinc0	equ	0xFEE
  2272                           wreg	equ	0xFE8
  2273                           postdec1	equ	0xFE5
  2274                           fsr1h	equ	0xFE2
  2275                           fsr1l	equ	0xFE1
  2276                           
  2277                           	psect	cstackBANK0
  2278  000060                     __pcstackBANK0:
  2279                           	opt stack 0
  2280  000060                     ??_Console_ClearCursor:
  2281  000060                     ??_InitADC:
  2282  000060                     ??_Console_Init:
  2283  000060                     ??_Console_NewLine:
  2284  000060                     ??_Console_FormFeed:
  2285  000060                     ??_HMI_SetButton:
  2286  000060                     ?_GetPortProperties:
  2287                           	opt stack 0
  2288  000060                     ?_GetPortPORT:
  2289                           	opt stack 0
  2290  000060                     ?_GetPortTRIS:
  2291                           	opt stack 0
  2292  000060                     ?_FunctReadADC:
  2293                           	opt stack 0
  2294  000060                     ?___wmul:
  2295                           	opt stack 0
  2296  000060                     ?___awdiv:
  2297                           	opt stack 0
  2298  000060                     ?___lwdiv:
  2299                           	opt stack 0
  2300  000060                     ?___fldiv:
  2301                           	opt stack 0
  2302  000060                     ?_frexp:
  2303                           	opt stack 0
  2304  000060                     ?___lldiv:
  2305                           	opt stack 0
  2306  000060                     ?___xxtofl:
  2307                           	opt stack 0
  2308  000060                     Mode_Set@pMode:
  2309                           	opt stack 0
  2310  000060                     ToSegment@pCHR:
  2311                           	opt stack 0
  2312  000060                     HMI_SetBar@pValue:
  2313                           	opt stack 0
  2314  000060                     eusartSend@sendChar:
  2315                           	opt stack 0
  2316  000060                     Port_GetPin@pInput:
  2317                           	opt stack 0
  2318  000060                     Port_GetQuad@pInput:
  2319                           	opt stack 0
  2320  000060                     SPI_DisableISR@pInput:
  2321                           	opt stack 0
  2322  000060                     SPI_DCS@pInput:
  2323                           	opt stack 0
  2324  000060                     SPI_Send@pInput:
  2325                           	opt stack 0
  2326  000060                     Byte_SetBit@pInput:
  2327                           	opt stack 0
  2328  000060                     Byte_GetBit@pInput:
  2329                           	opt stack 0
  2330  000060                     Byte_SetZone@pInput:
  2331                           	opt stack 0
  2332  000060                     Byte_GetZone@pInput:
  2333                           	opt stack 0
  2334  000060                     Byte_SetByte@pInput:
  2335                           	opt stack 0
  2336  000060                     delay_ms@ms:
  2337                           	opt stack 0
  2338  000060                     delay_us@us:
  2339                           	opt stack 0
  2340  000060                     reverse@input:
  2341                           	opt stack 0
  2342  000060                     FunctReadADC@channel:
  2343                           	opt stack 0
  2344  000060                     ___wmul@multiplier:
  2345                           	opt stack 0
  2346  000060                     ___awdiv@dividend:
  2347                           	opt stack 0
  2348  000060                     ___lwdiv@dividend:
  2349                           	opt stack 0
  2350  000060                     MXK_Queue@pCallback:
  2351                           	opt stack 0
  2352  000060                     ___flge@ff1:
  2353                           	opt stack 0
  2354  000060                     ___lldiv@dividend:
  2355                           	opt stack 0
  2356  000060                     ___fldiv@b:
  2357                           	opt stack 0
  2358  000060                     ___xxtofl@val:
  2359                           	opt stack 0
  2360  000060                     frexp@value:
  2361                           	opt stack 0
  2362                           
  2363                           ; 4 bytes @ 0x0
  2364  000060                     	ds	1
  2365  000061                     ?_UpdateDistance:
  2366                           	opt stack 0
  2367  000061                     ?_Detect_Victim:
  2368                           	opt stack 0
  2369  000061                     ?_Get_VirtualWall_State:
  2370                           	opt stack 0
  2371  000061                     HMI_SetSegments@pString:
  2372                           	opt stack 0
  2373  000061                     Drive@SpeedL:
  2374                           	opt stack 0
  2375  000061                     Turn@Angle:
  2376                           	opt stack 0
  2377                           
  2378                           ; 2 bytes @ 0x1
  2379  000061                     	ds	1
  2380  000062                     GetPortProperties@pInput:
  2381                           	opt stack 0
  2382  000062                     GetPortPORT@pInput:
  2383                           	opt stack 0
  2384  000062                     GetPortTRIS@pInput:
  2385                           	opt stack 0
  2386  000062                     Port_GetPin@pPin:
  2387                           	opt stack 0
  2388  000062                     Port_GetQuad@pQuad:
  2389                           	opt stack 0
  2390  000062                     SPI_Send@pData:
  2391                           	opt stack 0
  2392  000062                     Byte_SetBit@pBit:
  2393                           	opt stack 0
  2394  000062                     Byte_GetBit@pBit:
  2395                           	opt stack 0
  2396  000062                     Byte_SetZone@pMax:
  2397                           	opt stack 0
  2398  000062                     Byte_GetZone@pMax:
  2399                           	opt stack 0
  2400  000062                     Byte_SetByte@pValue:
  2401                           	opt stack 0
  2402  000062                     Console_Init@x:
  2403                           	opt stack 0
  2404  000062                     Console_FormFeed@x:
  2405                           	opt stack 0
  2406  000062                     reverse@length:
  2407                           	opt stack 0
  2408  000062                     ___wmul@multiplicand:
  2409                           	opt stack 0
  2410  000062                     ___awdiv@divisor:
  2411                           	opt stack 0
  2412  000062                     ___lwdiv@divisor:
  2413                           	opt stack 0
  2414  000062                     delay_ms@u:
  2415                           	opt stack 0
  2416  000062                     delay_us@u:
  2417                           	opt stack 0
  2418  000062                     HMI_SetButton@reindex:
  2419                           	opt stack 0
  2420                           
  2421                           ; 4 bytes @ 0x2
  2422  000062                     	ds	1
  2423  000063                     ??_UpdateDistance:
  2424  000063                     ??_Detect_Victim:
  2425  000063                     ??_Port_GetPin:
  2426  000063                     ??_Port_GetQuad:
  2427  000063                     ??_Byte_GetBit:
  2428  000063                     ??_Get_VirtualWall_State:
  2429  000063                     LCD_Write@mode:
  2430                           	opt stack 0
  2431  000063                     Byte_SetBit@pValue:
  2432                           	opt stack 0
  2433  000063                     Byte_SetZone@pChunk:
  2434                           	opt stack 0
  2435  000063                     Byte_GetZone@pChunk:
  2436                           	opt stack 0
  2437  000063                     Console_Init@y:
  2438                           	opt stack 0
  2439  000063                     Console_FormFeed@y:
  2440                           	opt stack 0
  2441  000063                     OutSeg@pSegment:
  2442                           	opt stack 0
  2443  000063                     Drive@SpeedR:
  2444                           	opt stack 0
  2445  000063                     Turn@Speed:
  2446                           	opt stack 0
  2447                           
  2448                           ; 2 bytes @ 0x3
  2449  000063                     	ds	1
  2450  000064                     ??_Byte_SetBit:
  2451  000064                     ??_Console_IncrementCursor:
  2452  000064                     ??_OutSeg:
  2453  000064                     ??___xxtofl:
  2454  000064                     LCD_Write@value:
  2455                           	opt stack 0
  2456  000064                     Byte_GetBit@Output:
  2457                           	opt stack 0
  2458  000064                     Byte_SetZone@pChunkSize:
  2459                           	opt stack 0
  2460  000064                     Byte_GetZone@pChunkSize:
  2461                           	opt stack 0
  2462  000064                     reverse@tempVar:
  2463                           	opt stack 0
  2464  000064                     ___awdiv@counter:
  2465                           	opt stack 0
  2466  000064                     ___lwdiv@counter:
  2467                           	opt stack 0
  2468  000064                     HMI_SetSegments@in:
  2469                           	opt stack 0
  2470  000064                     Get_VirtualWall_State@Vitual_Wall_Sensor:
  2471                           	opt stack 0
  2472  000064                     Detect_Victim@Home_Base_State:
  2473                           	opt stack 0
  2474  000064                     ___wmul@product:
  2475                           	opt stack 0
  2476  000064                     frexp@eptr:
  2477                           	opt stack 0
  2478  000064                     ___flge@ff2:
  2479                           	opt stack 0
  2480  000064                     ___lldiv@divisor:
  2481                           	opt stack 0
  2482  000064                     ___fldiv@a:
  2483                           	opt stack 0
  2484                           
  2485                           ; 4 bytes @ 0x4
  2486  000064                     	ds	1
  2487  000065                     ??_Byte_GetZone:
  2488  000065                     ?_Console_MakeField:
  2489                           	opt stack 0
  2490  000065                     Set_Addr_Window@ys:
  2491                           	opt stack 0
  2492  000065                     Set_Rotation@m:
  2493                           	opt stack 0
  2494  000065                     Port_GetPin@Output:
  2495                           	opt stack 0
  2496  000065                     Port_GetQuad@Output:
  2497                           	opt stack 0
  2498  000065                     Byte_SetZone@pValue:
  2499                           	opt stack 0
  2500  000065                     ___awdiv@sign:
  2501                           	opt stack 0
  2502  000065                     LCD_Word_Write@value:
  2503                           	opt stack 0
  2504  000065                     reverse@iterator:
  2505                           	opt stack 0
  2506  000065                     Turn@Dir:
  2507                           	opt stack 0
  2508  000065                     ___lwdiv@quotient:
  2509                           	opt stack 0
  2510                           
  2511                           ; 2 bytes @ 0x5
  2512  000065                     	ds	1
  2513  000066                     ??_Create_Maze:
  2514  000066                     ??_frexp:
  2515  000066                     ??_Byte_SetZone:
  2516  000066                     Set_Addr_Window@xe:
  2517                           	opt stack 0
  2518  000066                     Set_Rotation@rotation:
  2519                           	opt stack 0
  2520  000066                     Byte_GetZone@MASK:
  2521                           	opt stack 0
  2522  000066                     OutSeg@pInput:
  2523                           	opt stack 0
  2524  000066                     HMI_SetButton@pValue:
  2525                           	opt stack 0
  2526  000066                     MXK_BlockSwitchTo@CUR:
  2527                           	opt stack 0
  2528  000066                     MXK_SwitchTo@CUR:
  2529                           	opt stack 0
  2530  000066                     ___awdiv@quotient:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x6
  2534  000066                     	ds	1
  2535  000067                     ??_Console_MakeField:
  2536  000067                     ?___lwmod:
  2537                           	opt stack 0
  2538  000067                     Set_Addr_Window@ye:
  2539                           	opt stack 0
  2540  000067                     Byte_GetZone@Offset:
  2541                           	opt stack 0
  2542  000067                     OutSeg@out:
  2543                           	opt stack 0
  2544  000067                     HMI_SetButton@v:
  2545                           	opt stack 0
  2546  000067                     MXK_BlockSwitchTo@pModule:
  2547                           	opt stack 0
  2548  000067                     MXK_SwitchTo@pModule:
  2549                           	opt stack 0
  2550  000067                     Turn@C_Angle:
  2551                           	opt stack 0
  2552  000067                     ___lwmod@dividend:
  2553                           	opt stack 0
  2554                           
  2555                           ; 2 bytes @ 0x7
  2556  000067                     	ds	1
  2557  000068                     ??___fldiv:
  2558  000068                     ??_Console_Tab:
  2559  000068                     ??___flge:
  2560  000068                     Set_Addr_Window@xs:
  2561                           	opt stack 0
  2562  000068                     Byte_GetZone@Output:
  2563                           	opt stack 0
  2564  000068                     ___xxtofl@sign:
  2565                           	opt stack 0
  2566  000068                     HMI_Render@a:
  2567                           	opt stack 0
  2568  000068                     Create_Maze@count:
  2569                           	opt stack 0
  2570  000068                     ___lldiv@quotient:
  2571                           	opt stack 0
  2572                           
  2573                           ; 4 bytes @ 0x8
  2574  000068                     	ds	1
  2575  000069                     Byte_SetZone@Offset:
  2576                           	opt stack 0
  2577  000069                     ___xxtofl@exp:
  2578                           	opt stack 0
  2579  000069                     LCD_Fill@pColour:
  2580                           	opt stack 0
  2581  000069                     LCD_FillRectangle@pColour:
  2582                           	opt stack 0
  2583  000069                     Byte_GetPair@pInput:
  2584                           	opt stack 0
  2585  000069                     Console_MakeField@Index:
  2586                           	opt stack 0
  2587  000069                     Turn@Rad:
  2588                           	opt stack 0
  2589  000069                     ___lwmod@divisor:
  2590                           	opt stack 0
  2591                           
  2592                           ; 2 bytes @ 0x9
  2593  000069                     	ds	1
  2594  00006A                     Byte_SetZone@MASK:
  2595                           	opt stack 0
  2596  00006A                     Create_Maze@p:
  2597                           	opt stack 0
  2598  00006A                     ___xxtofl@arg:
  2599                           	opt stack 0
  2600                           
  2601                           ; 4 bytes @ 0xA
  2602  00006A                     	ds	1
  2603  00006B                     LCD_Fill@i:
  2604                           	opt stack 0
  2605  00006B                     Byte_GetPair@pPair:
  2606                           	opt stack 0
  2607  00006B                     Console_MakeField@pInput:
  2608                           	opt stack 0
  2609  00006B                     ___lwmod@counter:
  2610                           	opt stack 0
  2611  00006B                     Byte_SetPair@pInput:
  2612                           	opt stack 0
  2613  00006B                     Byte_SetQuad@pInput:
  2614                           	opt stack 0
  2615  00006B                     LCD_FillRectangle@pPoint:
  2616                           	opt stack 0
  2617                           
  2618                           ; 4 bytes @ 0xB
  2619  00006B                     	ds	1
  2620  00006C                     LCD_Fill@j:
  2621                           	opt stack 0
  2622  00006C                     ___lldiv@counter:
  2623                           	opt stack 0
  2624  00006C                     ___fldiv@sign:
  2625                           	opt stack 0
  2626  00006C                     Word_GetPair@pInput:
  2627                           	opt stack 0
  2628  00006C                     itos@input:
  2629                           	opt stack 0
  2630  00006C                     Console_MakeField@Column:
  2631                           	opt stack 0
  2632  00006C                     Create_Maze@x:
  2633                           	opt stack 0
  2634                           
  2635                           ; 2 bytes @ 0xC
  2636  00006C                     	ds	1
  2637  00006D                     Byte_SetPair@pPair:
  2638                           	opt stack 0
  2639  00006D                     Byte_SetQuad@pQuad:
  2640                           	opt stack 0
  2641  00006D                     Console_Tab@t:
  2642                           	opt stack 0
  2643  00006D                     Timer2_Init@pFrequency:
  2644                           	opt stack 0
  2645  00006D                     ___fldiv@rem:
  2646                           	opt stack 0
  2647                           
  2648                           ; 4 bytes @ 0xD
  2649  00006D                     	ds	1
  2650  00006E                     ?___flmul:
  2651                           	opt stack 0
  2652  00006E                     Byte_SetPair@pValue:
  2653                           	opt stack 0
  2654  00006E                     Byte_SetQuad@pValue:
  2655                           	opt stack 0
  2656  00006E                     Word_GetPair@pPair:
  2657                           	opt stack 0
  2658  00006E                     Console_Tab@i:
  2659                           	opt stack 0
  2660  00006E                     itos@destination:
  2661                           	opt stack 0
  2662  00006E                     _Console_MakeField$10974:
  2663                           	opt stack 0
  2664  00006E                     Create_Maze@y:
  2665                           	opt stack 0
  2666  00006E                     ___flmul@b:
  2667                           	opt stack 0
  2668                           
  2669                           ; 4 bytes @ 0xE
  2670  00006E                     	ds	1
  2671  00006F                     Console_Tab@c:
  2672                           	opt stack 0
  2673  00006F                     Port_SetPin@pInput:
  2674                           	opt stack 0
  2675  00006F                     Port_Set@pInput:
  2676                           	opt stack 0
  2677  00006F                     SPI_MinSpeed@pInput:
  2678                           	opt stack 0
  2679  00006F                     SPI_MaxSpeed@pInput:
  2680                           	opt stack 0
  2681  00006F                     Word_SetPair@pInput:
  2682                           	opt stack 0
  2683  00006F                     PortProperty_Valid@pInput:
  2684                           	opt stack 0
  2685  00006F                     LCD_FillRectangle@pSize:
  2686                           	opt stack 0
  2687                           
  2688                           ; 4 bytes @ 0xF
  2689  00006F                     	ds	1
  2690  000070                     ??_Console_PrintChar:
  2691  000070                     Console_MakeField@x:
  2692                           	opt stack 0
  2693  000070                     itos@Data:
  2694                           	opt stack 0
  2695                           
  2696                           ; 2 bytes @ 0x10
  2697  000070                     	ds	1
  2698  000071                     ??_Timer2_Init:
  2699  000071                     Port_SetPin@pPin:
  2700                           	opt stack 0
  2701  000071                     Port_Set@pValue:
  2702                           	opt stack 0
  2703  000071                     Word_SetPair@pPair:
  2704                           	opt stack 0
  2705  000071                     PortProperty_Valid@pPinDrive:
  2706                           	opt stack 0
  2707  000071                     Console_MakeField@y:
  2708                           	opt stack 0
  2709  000071                     ___fldiv@new_exp:
  2710                           	opt stack 0
  2711                           
  2712                           ; 2 bytes @ 0x11
  2713  000071                     	ds	1
  2714  000072                     ??_Port_Set:
  2715  000072                     Port_SetPin@pValue:
  2716                           	opt stack 0
  2717  000072                     Word_SetPair@pValue:
  2718                           	opt stack 0
  2719  000072                     PortProperty_Valid@pPin:
  2720                           	opt stack 0
  2721  000072                     LCD_DrawField@pField:
  2722                           	opt stack 0
  2723  000072                     itos@Length:
  2724                           	opt stack 0
  2725  000072                     Timer2_Init@RDIV:
  2726                           	opt stack 0
  2727  000072                     ___flmul@a:
  2728                           	opt stack 0
  2729                           
  2730                           ; 4 bytes @ 0x12
  2731  000072                     	ds	1
  2732  000073                     ??_PortProperty_Valid:
  2733  000073                     ??_LCD_FillRectangle:
  2734  000073                     Port_SetPin@Type:
  2735                           	opt stack 0
  2736  000073                     Console_PrintChar@pInput:
  2737                           	opt stack 0
  2738  000073                     ___fldiv@grs:
  2739                           	opt stack 0
  2740                           
  2741                           ; 4 bytes @ 0x13
  2742  000073                     	ds	1
  2743  000074                     LED_Set@pValue:
  2744                           	opt stack 0
  2745  000074                     putch@c:
  2746                           	opt stack 0
  2747  000074                     Port_TogglePin@pInput:
  2748                           	opt stack 0
  2749  000074                     itos@Out:
  2750                           	opt stack 0
  2751  000074                     LCD_DrawField@pPoint:
  2752                           	opt stack 0
  2753                           
  2754                           ; 4 bytes @ 0x14
  2755  000074                     	ds	1
  2756  000075                     ?_printf:
  2757                           	opt stack 0
  2758  000075                     LCD_FillRectangle@i:
  2759                           	opt stack 0
  2760  000075                     LED_Set@pLED:
  2761                           	opt stack 0
  2762  000075                     printf@f:
  2763                           	opt stack 0
  2764  000075                     PortProperty_Valid@Errors:
  2765                           	opt stack 0
  2766                           
  2767                           ; 16 bytes @ 0x15
  2768  000075                     	ds	1
  2769  000076                     ??___flmul:
  2770  000076                     LCD_FillRectangle@j:
  2771                           	opt stack 0
  2772  000076                     Port_TogglePin@pPin:
  2773                           	opt stack 0
  2774  000076                     HMI_SetNumber@pInput:
  2775                           	opt stack 0
  2776  000076                     Timer2_Init@pCPUClock:
  2777                           	opt stack 0
  2778                           
  2779                           ; 4 bytes @ 0x16
  2780  000076                     	ds	1
  2781  000077                     Port_TogglePin@Value:
  2782                           	opt stack 0
  2783  000077                     ___fldiv@bexp:
  2784                           	opt stack 0
  2785                           
  2786                           ; 1 bytes @ 0x17
  2787  000077                     	ds	1
  2788  000078                     LED_Toggle@pLED:
  2789                           	opt stack 0
  2790  000078                     ___fldiv@aexp:
  2791                           	opt stack 0
  2792  000078                     LCD_DrawField@pSize:
  2793                           	opt stack 0
  2794                           
  2795                           ; 4 bytes @ 0x18
  2796  000078                     	ds	1
  2797  000079                     Event_DIPSwitch@pState:
  2798                           	opt stack 0
  2799  000079                     Event_TestButton@pState:
  2800                           	opt stack 0
  2801                           
  2802                           ; 1 bytes @ 0x19
  2803  000079                     	ds	1
  2804  00007A                     Event_DIPSwitch@Bar:
  2805                           	opt stack 0
  2806  00007A                     ___flmul@sign:
  2807                           	opt stack 0
  2808  00007A                     Timer2_Init@DIVIDE:
  2809                           	opt stack 0
  2810                           
  2811                           ; 4 bytes @ 0x1A
  2812  00007A                     	ds	1
  2813  00007B                     ??_printf:
  2814  00007B                     ___flmul@aexp:
  2815                           	opt stack 0
  2816  00007B                     Button_Poll@pButton:
  2817                           	opt stack 0
  2818                           
  2819                           ; 2 bytes @ 0x1B
  2820  00007B                     	ds	1
  2821  00007C                     ??_LCD_DrawField:
  2822  00007C                     printf@flag:
  2823                           	opt stack 0
  2824  00007C                     ___flmul@grs:
  2825                           	opt stack 0
  2826                           
  2827                           ; 4 bytes @ 0x1C
  2828  00007C                     	ds	1
  2829  00007D                     Button_Poll@pIncrement:
  2830                           	opt stack 0
  2831  00007D                     printf@prec:
  2832                           	opt stack 0
  2833                           
  2834                           ; 1 bytes @ 0x1D
  2835  00007D                     	ds	1
  2836  00007E                     ??_Button_Poll:
  2837  00007E                     LCD_DrawField@count:
  2838                           	opt stack 0
  2839  00007E                     printf@ap:
  2840                           	opt stack 0
  2841                           
  2842                           ; 2 bytes @ 0x1E
  2843  00007E                     	ds	2
  2844  000080                     LCD_DrawField@xmax:
  2845                           	opt stack 0
  2846  000080                     ___flmul@bexp:
  2847                           	opt stack 0
  2848  000080                     printf@val:
  2849                           	opt stack 0
  2850                           
  2851                           ; 2 bytes @ 0x20
  2852  000080                     	ds	1
  2853  000081                     LCD_DrawField@ymax:
  2854                           	opt stack 0
  2855  000081                     ___flmul@prod:
  2856                           	opt stack 0
  2857                           
  2858                           ; 4 bytes @ 0x21
  2859  000081                     	ds	1
  2860  000082                     LCD_DrawField@i:
  2861                           	opt stack 0
  2862  000082                     printf@c:
  2863                           	opt stack 0
  2864  000082                     Port_Set@TypeRequired:
  2865                           	opt stack 0
  2866                           
  2867                           ; 2 bytes @ 0x22
  2868  000082                     	ds	1
  2869  000083                     ??_Console_Render:
  2870  000083                     ?_pop:
  2871                           	opt stack 0
  2872  000083                     Button_Poll@Pin:
  2873                           	opt stack 0
  2874  000083                     push@data:
  2875                           	opt stack 0
  2876                           
  2877                           ; 2 bytes @ 0x23
  2878  000083                     	ds	1
  2879  000084                     Port_Set@TypeActual:
  2880                           	opt stack 0
  2881                           
  2882                           ; 2 bytes @ 0x24
  2883  000084                     	ds	1
  2884  000085                     PortProperty_Valid@Pair:
  2885                           	opt stack 0
  2886  000085                     Console_Render@temp:
  2887                           	opt stack 0
  2888  000085                     pop@data:
  2889                           	opt stack 0
  2890  000085                     ___flmul@temp:
  2891                           	opt stack 0
  2892                           
  2893                           ; 2 bytes @ 0x25
  2894  000085                     	ds	1
  2895  000086                     Port_Set@Type:
  2896                           	opt stack 0
  2897  000086                     Port_CheckPairType@pInput:
  2898                           	opt stack 0
  2899  000086                     Port_SetPinType@pInput:
  2900                           	opt stack 0
  2901  000086                     Console_Render@lCursor:
  2902                           	opt stack 0
  2903                           
  2904                           ; 4 bytes @ 0x26
  2905  000086                     	ds	1
  2906  000087                     ?___flneg:
  2907                           	opt stack 0
  2908  000087                     ___flneg@f1:
  2909                           	opt stack 0
  2910                           
  2911                           ; 4 bytes @ 0x27
  2912  000087                     	ds	1
  2913  000088                     Port_CheckPairType@pPair:
  2914                           	opt stack 0
  2915  000088                     Port_SetPinType@pPin:
  2916                           	opt stack 0
  2917                           
  2918                           ; 1 bytes @ 0x28
  2919  000088                     	ds	1
  2920  000089                     Port_CheckPairType@pDrive:
  2921                           	opt stack 0
  2922  000089                     Port_SetPinType@pType:
  2923                           	opt stack 0
  2924                           
  2925                           ; 1 bytes @ 0x29
  2926  000089                     	ds	1
  2927  00008A                     Port_CheckPairType@Pin1:
  2928                           	opt stack 0
  2929  00008A                     Port_SetPinType@Output:
  2930                           	opt stack 0
  2931  00008A                     Console_Render@x:
  2932                           	opt stack 0
  2933                           
  2934                           ; 1 bytes @ 0x2A
  2935  00008A                     	ds	1
  2936  00008B                     ?___fladd:
  2937                           	opt stack 0
  2938  00008B                     Port_CheckPairType@Pin2:
  2939                           	opt stack 0
  2940  00008B                     Console_Render@y:
  2941                           	opt stack 0
  2942  00008B                     Port_SetPinType@Props:
  2943                           	opt stack 0
  2944  00008B                     ___fladd@b:
  2945                           	opt stack 0
  2946                           
  2947                           ; 4 bytes @ 0x2B
  2948  00008B                     	ds	1
  2949  00008C                     Port_CheckPairType@Output:
  2950                           	opt stack 0
  2951                           
  2952                           ; 1 bytes @ 0x2C
  2953  00008C                     	ds	1
  2954  00008D                     LED_Init@pLED:
  2955                           	opt stack 0
  2956  00008D                     Port_CheckPairType@Props:
  2957                           	opt stack 0
  2958  00008D                     SPI_Init@pClock:
  2959                           	opt stack 0
  2960                           
  2961                           ; 4 bytes @ 0x2D
  2962  00008D                     	ds	2
  2963  00008F                     Port_CheckQuadType@pInput:
  2964                           	opt stack 0
  2965  00008F                     ___fladd@a:
  2966                           	opt stack 0
  2967                           
  2968                           ; 4 bytes @ 0x2F
  2969  00008F                     	ds	2
  2970  000091                     Port_CheckQuadType@pQuad:
  2971                           	opt stack 0
  2972  000091                     SPI_Init@pChannel:
  2973                           	opt stack 0
  2974                           
  2975                           ; 1 bytes @ 0x31
  2976  000091                     	ds	1
  2977  000092                     Port_CheckQuadType@pDrive:
  2978                           	opt stack 0
  2979  000092                     SPI_Init@pMode:
  2980                           	opt stack 0
  2981                           
  2982                           ; 1 bytes @ 0x32
  2983  000092                     	ds	1
  2984  000093                     ??___fladd:
  2985  000093                     Port_CheckQuadType@Pair1:
  2986                           	opt stack 0
  2987  000093                     SPI_Init@pInput:
  2988                           	opt stack 0
  2989                           
  2990                           ; 2 bytes @ 0x33
  2991  000093                     	ds	1
  2992  000094                     Port_CheckQuadType@Pair2:
  2993                           	opt stack 0
  2994                           
  2995                           ; 1 bytes @ 0x34
  2996  000094                     	ds	1
  2997  000095                     ??_LCD_Init:
  2998  000095                     Port_CheckQuadType@Output:
  2999                           	opt stack 0
  3000                           
  3001                           ; 1 bytes @ 0x35
  3002  000095                     	ds	1
  3003  000096                     Port_CheckPortType@pInput:
  3004                           	opt stack 0
  3005  000096                     Port_SetQuadType@pInput:
  3006                           	opt stack 0
  3007                           
  3008                           ; 2 bytes @ 0x36
  3009  000096                     	ds	1
  3010  000097                     LCD_Init@i:
  3011                           	opt stack 0
  3012                           
  3013                           ; 2 bytes @ 0x37
  3014  000097                     	ds	1
  3015  000098                     Port_CheckPortType@pDrive:
  3016                           	opt stack 0
  3017  000098                     Port_SetQuadType@pQuad:
  3018                           	opt stack 0
  3019                           
  3020                           ; 1 bytes @ 0x38
  3021  000098                     	ds	1
  3022  000099                     Port_CheckPortType@Output:
  3023                           	opt stack 0
  3024  000099                     Port_SetQuadType@pType:
  3025                           	opt stack 0
  3026                           
  3027                           ; 1 bytes @ 0x39
  3028  000099                     	ds	1
  3029  00009A                     Port_SetQuadType@Output:
  3030                           	opt stack 0
  3031  00009A                     Port_SetType@pInput:
  3032                           	opt stack 0
  3033                           
  3034                           ; 2 bytes @ 0x3A
  3035  00009A                     	ds	1
  3036  00009B                     ___fladd@signs:
  3037                           	opt stack 0
  3038  00009B                     Button_Init@pInput:
  3039                           	opt stack 0
  3040                           
  3041                           ; 2 bytes @ 0x3B
  3042  00009B                     	ds	1
  3043  00009C                     Port_SetType@pType:
  3044                           	opt stack 0
  3045  00009C                     ___fladd@aexp:
  3046                           	opt stack 0
  3047                           
  3048                           ; 1 bytes @ 0x3C
  3049  00009C                     	ds	1
  3050  00009D                     ??_Port_SetType:
  3051  00009D                     ___fladd@bexp:
  3052                           	opt stack 0
  3053  00009D                     Button_Init@pThreshold:
  3054                           	opt stack 0
  3055                           
  3056                           ; 2 bytes @ 0x3D
  3057  00009D                     	ds	1
  3058  00009E                     ___fladd@grs:
  3059                           	opt stack 0
  3060                           
  3061                           ; 1 bytes @ 0x3E
  3062  00009E                     	ds	1
  3063  00009F                     ?___flsub:
  3064                           	opt stack 0
  3065  00009F                     ?_eval_poly:
  3066                           	opt stack 0
  3067  00009F                     ?___fltol:
  3068                           	opt stack 0
  3069  00009F                     Port_SetType@Output:
  3070                           	opt stack 0
  3071  00009F                     Button_Init@pInitIO:
  3072                           	opt stack 0
  3073  00009F                     ___fltol@f1:
  3074                           	opt stack 0
  3075  00009F                     ___flsub@b:
  3076                           	opt stack 0
  3077  00009F                     eval_poly@x:
  3078                           	opt stack 0
  3079                           
  3080                           ; 4 bytes @ 0x3F
  3081  00009F                     	ds	1
  3082  0000A0                     Port_Init@pInput:
  3083                           	opt stack 0
  3084                           
  3085                           ; 2 bytes @ 0x40
  3086  0000A0                     	ds	2
  3087  0000A2                     Port_Init@pPort:
  3088                           	opt stack 0
  3089  0000A2                     Button_Init@pGetState:
  3090                           	opt stack 0
  3091                           
  3092                           ; 3 bytes @ 0x42
  3093  0000A2                     	ds	1
  3094  0000A3                     ??_Port_Init:
  3095  0000A3                     ??___fltol:
  3096  0000A3                     eval_poly@d:
  3097                           	opt stack 0
  3098  0000A3                     ___flsub@a:
  3099                           	opt stack 0
  3100                           
  3101                           ; 4 bytes @ 0x43
  3102  0000A3                     	ds	2
  3103  0000A5                     Port_Init@i:
  3104                           	opt stack 0
  3105  0000A5                     eval_poly@n:
  3106                           	opt stack 0
  3107  0000A5                     Button_Init@pFunction:
  3108                           	opt stack 0
  3109                           
  3110                           ; 3 bytes @ 0x45
  3111  0000A5                     	ds	1
  3112  0000A6                     
  3113                           ; 1 bytes @ 0x46
  3114  0000A6                     	ds	1
  3115  0000A7                     ??_eval_poly:
  3116  0000A7                     ___fltol@sign1:
  3117                           	opt stack 0
  3118                           
  3119                           ; 1 bytes @ 0x47
  3120  0000A7                     	ds	1
  3121  0000A8                     ___fltol@exp1:
  3122                           	opt stack 0
  3123  0000A8                     HMI_Init@in:
  3124                           	opt stack 0
  3125                           
  3126                           ; 2 bytes @ 0x48
  3127  0000A8                     	ds	1
  3128  0000A9                     ?_floor:
  3129                           	opt stack 0
  3130  0000A9                     Move_ADC_To@Angle:
  3131                           	opt stack 0
  3132  0000A9                     floor@x:
  3133                           	opt stack 0
  3134                           
  3135                           ; 4 bytes @ 0x49
  3136  0000A9                     	ds	2
  3137  0000AB                     ??_Bump_Wall:
  3138  0000AB                     eval_poly@res:
  3139                           	opt stack 0
  3140                           
  3141                           ; 4 bytes @ 0x4B
  3142  0000AB                     	ds	1
  3143  0000AC                     Bump_Wall@revDist:
  3144                           	opt stack 0
  3145                           
  3146                           ; 2 bytes @ 0x4C
  3147  0000AC                     	ds	1
  3148  0000AD                     floor@i:
  3149                           	opt stack 0
  3150                           
  3151                           ; 4 bytes @ 0x4D
  3152  0000AD                     	ds	1
  3153  0000AE                     Bump_Wall@distTrav:
  3154                           	opt stack 0
  3155                           
  3156                           ; 2 bytes @ 0x4E
  3157  0000AE                     	ds	1
  3158  0000AF                     ?_log:
  3159                           	opt stack 0
  3160  0000AF                     ?_ldexp:
  3161                           	opt stack 0
  3162  0000AF                     ldexp@value:
  3163                           	opt stack 0
  3164  0000AF                     log@x:
  3165                           	opt stack 0
  3166                           
  3167                           ; 4 bytes @ 0x4F
  3168  0000AF                     	ds	1
  3169  0000B0                     Bump_Wall@temp2:
  3170                           	opt stack 0
  3171                           
  3172                           ; 2 bytes @ 0x50
  3173  0000B0                     	ds	1
  3174  0000B1                     floor@expon:
  3175                           	opt stack 0
  3176                           
  3177                           ; 2 bytes @ 0x51
  3178  0000B1                     	ds	2
  3179  0000B3                     ldexp@newexp:
  3180                           	opt stack 0
  3181  0000B3                     log@exponent:
  3182                           	opt stack 0
  3183                           
  3184                           ; 2 bytes @ 0x53
  3185  0000B3                     	ds	2
  3186  0000B5                     ??_ldexp:
  3187                           
  3188                           ; 1 bytes @ 0x55
  3189  0000B5                     	ds	2
  3190  0000B7                     ?_exp:
  3191                           	opt stack 0
  3192  0000B7                     exp@x:
  3193                           	opt stack 0
  3194                           
  3195                           ; 4 bytes @ 0x57
  3196  0000B7                     	ds	4
  3197  0000BB                     _exp$15874:
  3198                           	opt stack 0
  3199                           
  3200                           ; 4 bytes @ 0x5B
  3201  0000BB                     	ds	4
  3202  0000BF                     exp@exponent:
  3203                           	opt stack 0
  3204                           
  3205                           ; 2 bytes @ 0x5F
  3206  0000BF                     	ds	2
  3207  0000C1                     exp@sign:
  3208                           	opt stack 0
  3209                           
  3210                           ; 1 bytes @ 0x61
  3211  0000C1                     	ds	1
  3212  0000C2                     ?_pow:
  3213                           	opt stack 0
  3214  0000C2                     pow@x:
  3215                           	opt stack 0
  3216                           
  3217                           ; 4 bytes @ 0x62
  3218  0000C2                     	ds	4
  3219  0000C6                     pow@y:
  3220                           	opt stack 0
  3221                           
  3222                           ; 4 bytes @ 0x66
  3223  0000C6                     	ds	4
  3224  0000CA                     _pow$15872:
  3225                           	opt stack 0
  3226                           
  3227                           ; 4 bytes @ 0x6A
  3228  0000CA                     	ds	4
  3229  0000CE                     _pow$15873:
  3230                           	opt stack 0
  3231                           
  3232                           ; 4 bytes @ 0x6E
  3233  0000CE                     	ds	4
  3234  0000D2                     pow@sign:
  3235                           	opt stack 0
  3236                           
  3237                           ; 1 bytes @ 0x72
  3238  0000D2                     	ds	1
  3239  0000D3                     pow@yi:
  3240                           	opt stack 0
  3241                           
  3242                           ; 4 bytes @ 0x73
  3243  0000D3                     	ds	4
  3244  0000D7                     ??_ADCAverage:
  3245                           
  3246                           ; 1 bytes @ 0x77
  3247  0000D7                     	ds	2
  3248  0000D9                     _ADCAverage$15866:
  3249                           	opt stack 0
  3250                           
  3251                           ; 4 bytes @ 0x79
  3252  0000D9                     	ds	4
  3253  0000DD                     _ADCAverage$15867:
  3254                           	opt stack 0
  3255                           
  3256                           ; 4 bytes @ 0x7D
  3257  0000DD                     	ds	4
  3258  0000E1                     _ADCAverage$15868:
  3259                           	opt stack 0
  3260                           
  3261                           ; 4 bytes @ 0x81
  3262  0000E1                     	ds	4
  3263  0000E5                     _ADCAverage$15869:
  3264                           	opt stack 0
  3265                           
  3266                           ; 4 bytes @ 0x85
  3267  0000E5                     	ds	4
  3268  0000E9                     _ADCAverage$15870:
  3269                           	opt stack 0
  3270                           
  3271                           ; 4 bytes @ 0x89
  3272  0000E9                     	ds	4
  3273  0000ED                     _ADCAverage$15871:
  3274                           	opt stack 0
  3275                           
  3276                           ; 4 bytes @ 0x8D
  3277  0000ED                     	ds	4
  3278  0000F1                     ??_Sensor_Observe:
  3279  0000F1                     Fix_Error@X_Pos:
  3280                           	opt stack 0
  3281                           
  3282                           ; 2 bytes @ 0x91
  3283  0000F1                     	ds	2
  3284  0000F3                     Sensor_Observe@High_Sensor:
  3285                           	opt stack 0
  3286  0000F3                     Fix_Error@Y_Pos:
  3287                           	opt stack 0
  3288                           
  3289                           ; 2 bytes @ 0x93
  3290  0000F3                     	ds	2
  3291  0000F5                     ??_Fix_Error:
  3292  0000F5                     Sensor_Observe@Low_Sensor:
  3293                           	opt stack 0
  3294                           
  3295                           ; 2 bytes @ 0x95
  3296  0000F5                     	ds	4
  3297  0000F9                     ??_Travel:
  3298                           
  3299                           ; 1 bytes @ 0x99
  3300  0000F9                     	ds	4
  3301  0000FD                     ??_Go_Backward:
  3302                           
  3303                           ; 1 bytes @ 0x9D
  3304  0000FD                     	ds	2
  3305                           tblptru	equ	0xFF8
  3306                           tblptrh	equ	0xFF7
  3307                           tblptrl	equ	0xFF6
  3308                           tablat	equ	0xFF5
  3309                           postinc0	equ	0xFEE
  3310                           wreg	equ	0xFE8
  3311                           postdec1	equ	0xFE5
  3312                           fsr1h	equ	0xFE2
  3313                           fsr1l	equ	0xFE1
  3314                           
  3315                           	psect	cstackCOMRAM
  3316  000001                     __pcstackCOMRAM:
  3317                           	opt stack 0
  3318  000001                     i2Byte_SetBit@pInput:
  3319                           	opt stack 0
  3320  000001                     i2Byte_GetZone@pInput:
  3321                           	opt stack 0
  3322  000001                     i2delay_us@us:
  3323                           	opt stack 0
  3324  000001                     i2MXK_Queue@pCallback:
  3325                           	opt stack 0
  3326                           
  3327                           ; 3 bytes @ 0x0
  3328  000001                     	ds	2
  3329  000003                     i2Byte_SetBit@pBit:
  3330                           	opt stack 0
  3331  000003                     i2Byte_GetZone@pMax:
  3332                           	opt stack 0
  3333  000003                     i2delay_us@u:
  3334                           	opt stack 0
  3335                           
  3336                           ; 4 bytes @ 0x2
  3337  000003                     	ds	1
  3338  000004                     i2Byte_SetBit@pValue:
  3339                           	opt stack 0
  3340  000004                     i2Byte_GetZone@pChunk:
  3341                           	opt stack 0
  3342                           
  3343                           ; 1 bytes @ 0x3
  3344  000004                     	ds	1
  3345  000005                     ??i2_Byte_SetBit:
  3346  000005                     i2Byte_GetZone@pChunkSize:
  3347                           	opt stack 0
  3348                           
  3349                           ; 1 bytes @ 0x4
  3350  000005                     	ds	1
  3351  000006                     ??i2_Byte_GetZone:
  3352                           
  3353                           ; 1 bytes @ 0x5
  3354  000006                     	ds	1
  3355  000007                     i2Byte_GetZone@MASK:
  3356                           	opt stack 0
  3357  000007                     i2MXK_SwitchTo@CUR:
  3358                           	opt stack 0
  3359                           
  3360                           ; 1 bytes @ 0x6
  3361  000007                     	ds	1
  3362  000008                     i2Byte_GetZone@Offset:
  3363                           	opt stack 0
  3364  000008                     i2MXK_SwitchTo@pModule:
  3365                           	opt stack 0
  3366                           
  3367                           ; 1 bytes @ 0x7
  3368  000008                     	ds	1
  3369  000009                     i2Byte_GetZone@Output:
  3370                           	opt stack 0
  3371                           
  3372                           ; 1 bytes @ 0x8
  3373  000009                     	ds	1
  3374  00000A                     i2Byte_GetPair@pInput:
  3375                           	opt stack 0
  3376                           
  3377                           ; 2 bytes @ 0x9
  3378  00000A                     	ds	2
  3379  00000C                     i2Byte_GetPair@pPair:
  3380                           	opt stack 0
  3381                           
  3382                           ; 1 bytes @ 0xB
  3383  00000C                     	ds	1
  3384  00000D                     i2Word_GetPair@pInput:
  3385                           	opt stack 0
  3386                           
  3387                           ; 2 bytes @ 0xC
  3388  00000D                     	ds	2
  3389  00000F                     i2Word_GetPair@pPair:
  3390                           	opt stack 0
  3391                           
  3392                           ; 1 bytes @ 0xE
  3393  00000F                     	ds	1
  3394  000010                     i2Port_SetPin@pInput:
  3395                           	opt stack 0
  3396                           
  3397                           ; 2 bytes @ 0xF
  3398  000010                     	ds	2
  3399  000012                     i2Port_SetPin@pPin:
  3400                           	opt stack 0
  3401                           
  3402                           ; 1 bytes @ 0x11
  3403  000012                     	ds	1
  3404  000013                     i2Port_SetPin@pValue:
  3405                           	opt stack 0
  3406                           
  3407                           ; 1 bytes @ 0x12
  3408  000013                     	ds	1
  3409  000014                     i2Port_SetPin@Type:
  3410                           	opt stack 0
  3411                           
  3412                           ; 1 bytes @ 0x13
  3413  000014                     	ds	1
  3414  000015                     
  3415                           ; 1 bytes @ 0x14
  3416  000015                     	ds	2
  3417  000017                     ??_ISR_Function:
  3418                           
  3419                           ; 1 bytes @ 0x16
  3420  000017                     	ds	18
  3421                           tblptru	equ	0xFF8
  3422                           tblptrh	equ	0xFF7
  3423                           tblptrl	equ	0xFF6
  3424                           tablat	equ	0xFF5
  3425                           postinc0	equ	0xFEE
  3426                           wreg	equ	0xFE8
  3427                           postdec1	equ	0xFE5
  3428                           fsr1h	equ	0xFE2
  3429                           fsr1l	equ	0xFE1
  3430                           
  3431 ;;
  3432 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  3433 ;;
  3434 ;; *************** function _main *****************
  3435 ;; Defined at:
  3436 ;;		line 310 in file "main.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;  left            1    3[BANK3 ] unsigned char 
  3441 ;;  up              1    2[BANK3 ] unsigned char 
  3442 ;;  right           1    1[BANK3 ] unsigned char 
  3443 ;;  down            1    0[BANK3 ] unsigned char 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      void 
  3446 ;; Registers used:
  3447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3454 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3455 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Totals:         0       0       0       4       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;Total ram usage:        8 bytes
  3458 ;; Hardware stack levels required when called:   18
  3459 ;; This function calls:
  3460 ;;		_ADCAverage
  3461 ;;		_Bump_Wall
  3462 ;;		_Closest_Object
  3463 ;;		_Console_Init
  3464 ;;		_Console_Render
  3465 ;;		_Create_Maze
  3466 ;;		_Detect_Victim
  3467 ;;		_FunctInitButton
  3468 ;;		_Go_Backward
  3469 ;;		_HMI_DIPSwitch
  3470 ;;		_HMI_DownSwitch
  3471 ;;		_HMI_Init
  3472 ;;		_HMI_LeftSwitch
  3473 ;;		_HMI_Poll
  3474 ;;		_HMI_Render
  3475 ;;		_HMI_RightSwitch
  3476 ;;		_HMI_SetNumber
  3477 ;;		_HMI_UpSwitch
  3478 ;;		_ISR_Enable
  3479 ;;		_InitADC
  3480 ;;		_InitSerialCommunication
  3481 ;;		_Init_Timer0
  3482 ;;		_LCD_Init
  3483 ;;		_LED_Init
  3484 ;;		_MXK_BlockSwitchTo
  3485 ;;		_MXK_DIPSwitch
  3486 ;;		_MXK_Dequeue
  3487 ;;		_MXK_Init
  3488 ;;		_MXK_Release
  3489 ;;		_MXK_TestButton
  3490 ;;		_Move_ADC_To
  3491 ;;		_Navigate_Maze
  3492 ;;		_Robot_Init
  3493 ;;		_Sensor_Observe
  3494 ;;		___wmul
  3495 ;;		_delay_ms
  3496 ;;		_pop
  3497 ;;		_printf
  3498 ;; This function is called by:
  3499 ;;		Startup code after reset
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           	psect	text0
  3504  012E28                     __ptext0:
  3505                           	opt stack 0
  3506  012E28                     _main:
  3507                           	opt stack 13
  3508                           
  3509                           ;main.c: 315: MXK_Init();
  3510                           
  3511                           ;incstack = 0
  3512  012E28  EC2C  F0B1         	call	_MXK_Init	;wreg free
  3513                           
  3514                           ;main.c: 316: Init_Timer0();
  3515  012E2C  ECF1  F0C6         	call	_Init_Timer0	;wreg free
  3516                           
  3517                           ;main.c: 317: InitSerialCommunication();
  3518  012E30  EC94  F0C6         	call	_InitSerialCommunication	;wreg free
  3519                           
  3520                           ;main.c: 318: Robot_Init();
  3521  012E34  EC15  F0C7         	call	_Robot_Init	;wreg free
  3522                           
  3523                           ;main.c: 319: ISR_Enable();
  3524  012E38  ECE8  F0C7         	call	_ISR_Enable	;wreg free
  3525                           
  3526                           ;main.c: 320: FunctInitButton();
  3527  012E3C  EC5A  F0BD         	call	_FunctInitButton	;wreg free
  3528                           
  3529                           ;main.c: 321: InitADC();
  3530  012E40  EC00  F0C2         	call	_InitADC	;wreg free
  3531                           
  3532                           ;main.c: 322: LED_Init(eLED2);
  3533  012E44  0E01               	movlw	1
  3534  012E46  EC67  F0C0         	call	_LED_Init
  3535                           
  3536                           ;main.c: 323: Create_Maze();
  3537  012E4A  EC00  F080         	call	_Create_Maze	;wreg free
  3538                           
  3539                           ;main.c: 325: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3540  012E4E  0E01               	movlw	1
  3541  012E50  ECA6  F0C4         	call	_MXK_BlockSwitchTo
  3542  012E54  0900               	iorlw	0
  3543  012E56  B4D8               	btfsc	status,2,c
  3544  012E58  D00C               	goto	l2226
  3545                           
  3546                           ;main.c: 326: HMI_Init();
  3547  012E5A  EC5E  F0AA         	call	_HMI_Init	;wreg free
  3548                           
  3549                           ;main.c: 327: LCD_Init();
  3550  012E5E  EC45  F0AF         	call	_LCD_Init	;wreg free
  3551                           
  3552                           ;main.c: 328: Console_Init();
  3553  012E62  EC73  F0BE         	call	_Console_Init	;wreg free
  3554                           
  3555                           ;main.c: 329: if (MXK_Release())
  3556  012E66  EC20  F0C7         	call	_MXK_Release	;wreg free
  3557  012E6A  0900               	iorlw	0
  3558  012E6C  A4D8               	btfss	status,2,c
  3559                           
  3560                           ;main.c: 330: MXK_Dequeue();
  3561  012E6E  EC2B  F0C5         	call	_MXK_Dequeue	;wreg free
  3562  012E72                     l2226:
  3563                           
  3564                           ;main.c: 335: ADCAverage();
  3565                           
  3566                           ;main.c: 331: }
  3567                           ;main.c: 333: for(;;) {
  3568  012E72  EC0C  F09E         	call	_ADCAverage	;wreg free
  3569                           
  3570                           ;main.c: 337: HMI_SetNumber(average);
  3571  012E76  C02C  F076         	movff	_average,HMI_SetNumber@pInput
  3572  012E7A  C02D  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  3573  012E7E  EC1F  F0C6         	call	_HMI_SetNumber	;wreg free
  3574                           
  3575                           ;main.c: 339: HMI_Render();
  3576  012E82  ECC2  F0C4         	call	_HMI_Render	;wreg free
  3577                           
  3578                           ;main.c: 341: HMI_Poll();
  3579  012E86  ECAA  F0BF         	call	_HMI_Poll	;wreg free
  3580                           
  3581                           ;main.c: 345: bool down = HMIBoard.mDown.mGetState();
  3582  012E8A  EE23  F0CD         	lfsr	2,_HMIBoard+45
  3583  012E8E  D801               	call	u16238
  3584  012E90  D00A               	goto	u16239
  3585  012E92                     u16238:
  3586  012E92  0005               	push	
  3587  012E94  6EFA               	movwf	pclath,c
  3588  012E96  50DE               	movf	postinc2,w,c
  3589  012E98  6EFD               	movwf	tosl,c
  3590  012E9A  50DE               	movf	postinc2,w,c
  3591  012E9C  6EFE               	movwf	tosh,c
  3592  012E9E  50DE               	movf	postinc2,w,c
  3593  012EA0  6EFF               	movwf	tosu,c
  3594  012EA2  50FA               	movf	pclath,w,c
  3595  012EA4  0012               	return		;indir
  3596  012EA6                     u16239:
  3597  012EA6  0103               	movlb	3	; () banked
  3598  012EA8  6FEE               	movwf	main@down& (0+255),b
  3599                           
  3600                           ; BSR set to: 3
  3601                           ;main.c: 346: bool right = HMIBoard.mRight.mGetState();
  3602  012EAA  EE23  F0AF         	lfsr	2,_HMIBoard+15
  3603  012EAE  D801               	call	u16248
  3604  012EB0  D00A               	goto	u16249
  3605  012EB2                     u16248:
  3606  012EB2  0005               	push	
  3607  012EB4  6EFA               	movwf	pclath,c
  3608  012EB6  50DE               	movf	postinc2,w,c
  3609  012EB8  6EFD               	movwf	tosl,c
  3610  012EBA  50DE               	movf	postinc2,w,c
  3611  012EBC  6EFE               	movwf	tosh,c
  3612  012EBE  50DE               	movf	postinc2,w,c
  3613  012EC0  6EFF               	movwf	tosu,c
  3614  012EC2  50FA               	movf	pclath,w,c
  3615  012EC4  0012               	return		;indir
  3616  012EC6                     u16249:
  3617  012EC6  0103               	movlb	3	; () banked
  3618  012EC8  6FEF               	movwf	main@right& (0+255),b
  3619                           
  3620                           ; BSR set to: 3
  3621                           ;main.c: 347: bool up = HMIBoard.mUp.mGetState();
  3622  012ECA  EE23  F0C3         	lfsr	2,_HMIBoard+35
  3623  012ECE  D801               	call	u16258
  3624  012ED0  D00A               	goto	u16259
  3625  012ED2                     u16258:
  3626  012ED2  0005               	push	
  3627  012ED4  6EFA               	movwf	pclath,c
  3628  012ED6  50DE               	movf	postinc2,w,c
  3629  012ED8  6EFD               	movwf	tosl,c
  3630  012EDA  50DE               	movf	postinc2,w,c
  3631  012EDC  6EFE               	movwf	tosh,c
  3632  012EDE  50DE               	movf	postinc2,w,c
  3633  012EE0  6EFF               	movwf	tosu,c
  3634  012EE2  50FA               	movf	pclath,w,c
  3635  012EE4  0012               	return		;indir
  3636  012EE6                     u16259:
  3637  012EE6  0103               	movlb	3	; () banked
  3638  012EE8  6FF0               	movwf	main@up& (0+255),b
  3639                           
  3640                           ; BSR set to: 3
  3641                           ;main.c: 348: bool left = HMIBoard.mLeft.mGetState();
  3642  012EEA  EE23  F0B9         	lfsr	2,_HMIBoard+25
  3643  012EEE  D801               	call	u16268
  3644  012EF0  D00A               	goto	u16269
  3645  012EF2                     u16268:
  3646  012EF2  0005               	push	
  3647  012EF4  6EFA               	movwf	pclath,c
  3648  012EF6  50DE               	movf	postinc2,w,c
  3649  012EF8  6EFD               	movwf	tosl,c
  3650  012EFA  50DE               	movf	postinc2,w,c
  3651  012EFC  6EFE               	movwf	tosh,c
  3652  012EFE  50DE               	movf	postinc2,w,c
  3653  012F00  6EFF               	movwf	tosu,c
  3654  012F02  50FA               	movf	pclath,w,c
  3655  012F04  0012               	return		;indir
  3656  012F06                     u16269:
  3657  012F06  0103               	movlb	3	; () banked
  3658  012F08  6FF1               	movwf	main@left& (0+255),b
  3659                           
  3660                           ; BSR set to: 3
  3661                           ;main.c: 349: if (down) {
  3662  012F0A  51EE               	movf	main@down& (0+255),w,b
  3663  012F0C  B4D8               	btfsc	status,2,c
  3664  012F0E  D005               	goto	l2228
  3665                           
  3666                           ; BSR set to: 3
  3667                           ;main.c: 350: mode = 3;
  3668  012F10  0E00               	movlw	0
  3669  012F12  0101               	movlb	1	; () banked
  3670  012F14  6F4D               	movwf	(_mode+1)& (0+255),b
  3671  012F16  0E03               	movlw	3
  3672  012F18  6F4C               	movwf	_mode& (0+255),b
  3673  012F1A                     l2228:
  3674                           
  3675                           ;main.c: 351: }
  3676                           ;main.c: 352: if (right) {
  3677  012F1A  0103               	movlb	3	; () banked
  3678  012F1C  51EF               	movf	main@right& (0+255),w,b
  3679  012F1E  B4D8               	btfsc	status,2,c
  3680  012F20  D005               	goto	l2229
  3681                           
  3682                           ; BSR set to: 3
  3683                           ;main.c: 353: mode = 1;
  3684  012F22  0E00               	movlw	0
  3685  012F24  0101               	movlb	1	; () banked
  3686  012F26  6F4D               	movwf	(_mode+1)& (0+255),b
  3687  012F28  0E01               	movlw	1
  3688  012F2A  6F4C               	movwf	_mode& (0+255),b
  3689  012F2C                     l2229:
  3690                           
  3691                           ;main.c: 354: }
  3692                           ;main.c: 355: if (up) {
  3693  012F2C  0103               	movlb	3	; () banked
  3694  012F2E  51F0               	movf	main@up& (0+255),w,b
  3695  012F30  B4D8               	btfsc	status,2,c
  3696  012F32  D005               	goto	l2230
  3697                           
  3698                           ; BSR set to: 3
  3699                           ;main.c: 356: mode = 2;
  3700  012F34  0E00               	movlw	0
  3701  012F36  0101               	movlb	1	; () banked
  3702  012F38  6F4D               	movwf	(_mode+1)& (0+255),b
  3703  012F3A  0E02               	movlw	2
  3704  012F3C  6F4C               	movwf	_mode& (0+255),b
  3705  012F3E                     l2230:
  3706                           
  3707                           ;main.c: 357: }
  3708                           ;main.c: 358: if (left) {
  3709  012F3E  0103               	movlb	3	; () banked
  3710  012F40  51F1               	movf	main@left& (0+255),w,b
  3711  012F42  B4D8               	btfsc	status,2,c
  3712  012F44  D005               	goto	l2231
  3713                           
  3714                           ; BSR set to: 3
  3715                           ;main.c: 359: mode = 4;
  3716  012F46  0E00               	movlw	0
  3717  012F48  0101               	movlb	1	; () banked
  3718  012F4A  6F4D               	movwf	(_mode+1)& (0+255),b
  3719  012F4C  0E04               	movlw	4
  3720  012F4E  6F4C               	movwf	_mode& (0+255),b
  3721  012F50                     l2231:
  3722                           
  3723                           ;main.c: 360: }
  3724                           ;main.c: 365: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3725                           
  3726                           ; BSR set to: 1
  3727  012F50  0E01               	movlw	1
  3728  012F52  ECA6  F0C4         	call	_MXK_BlockSwitchTo
  3729  012F56  0900               	iorlw	0
  3730  012F58  B4D8               	btfsc	status,2,c
  3731  012F5A  D78B               	goto	l2226
  3732                           
  3733                           ;main.c: 367: if (mode == 0) {
  3734  012F5C  0101               	movlb	1	; () banked
  3735  012F5E  514C               	movf	_mode& (0+255),w,b
  3736  012F60  114D               	iorwf	(_mode+1)& (0+255),w,b
  3737  012F62  A4D8               	btfss	status,2,c
  3738  012F64  D014               	goto	l2233
  3739                           
  3740                           ; BSR set to: 1
  3741                           ;main.c: 368: printf("%c", (char)35);
  3742  012F66  0EFB               	movlw	low STR_1
  3743  012F68  0100               	movlb	0	; () banked
  3744  012F6A  6F75               	movwf	printf@f& (0+255),b
  3745  012F6C  0EFF               	movlw	high STR_1
  3746  012F6E  6F76               	movwf	(printf@f+1)& (0+255),b
  3747  012F70  0E00               	movlw	0
  3748  012F72  6F78               	movwf	(?_printf+3)& (0+255),b
  3749  012F74  0E23               	movlw	35
  3750  012F76  6F77               	movwf	(?_printf+2)& (0+255),b
  3751  012F78  EC90  F0AC         	call	_printf	;wreg free
  3752                           
  3753                           ;main.c: 369: printf("Robot Ready! \n\n");
  3754  012F7C  0E6C               	movlw	low STR_13
  3755  012F7E  0100               	movlb	0	; () banked
  3756  012F80  6F75               	movwf	printf@f& (0+255),b
  3757  012F82  0EFF               	movlw	high STR_13
  3758  012F84  6F76               	movwf	(printf@f+1)& (0+255),b
  3759  012F86  EC90  F0AC         	call	_printf	;wreg free
  3760                           
  3761                           ;main.c: 370: Console_Render();
  3762  012F8A  ECB3  F0A8         	call	_Console_Render	;wreg free
  3763  012F8E                     l2233:
  3764                           
  3765                           ;main.c: 372: }
  3766                           ;main.c: 373: if (mode == 3) {
  3767  012F8E  0E03               	movlw	3
  3768  012F90  0101               	movlb	1	; () banked
  3769  012F92  194C               	xorwf	_mode& (0+255),w,b
  3770  012F94  114D               	iorwf	(_mode+1)& (0+255),w,b
  3771  012F96  A4D8               	btfss	status,2,c
  3772  012F98  D112               	goto	l2244
  3773                           
  3774                           ; BSR set to: 1
  3775                           ;main.c: 374: printf("%c", (char)35);
  3776  012F9A  0EFB               	movlw	low STR_1
  3777  012F9C  0100               	movlb	0	; () banked
  3778  012F9E  6F75               	movwf	printf@f& (0+255),b
  3779  012FA0  0EFF               	movlw	high STR_1
  3780  012FA2  6F76               	movwf	(printf@f+1)& (0+255),b
  3781  012FA4  0E00               	movlw	0
  3782  012FA6  6F78               	movwf	(?_printf+3)& (0+255),b
  3783  012FA8  0E23               	movlw	35
  3784  012FAA  6F77               	movwf	(?_printf+2)& (0+255),b
  3785  012FAC  EC90  F0AC         	call	_printf	;wreg free
  3786                           
  3787                           ;main.c: 376: Sensor_Observe();
  3788  012FB0  EC8C  F0B0         	call	_Sensor_Observe	;wreg free
  3789                           
  3790                           ;main.c: 377: Closest_Object();
  3791  012FB4  ECCD  F0B7         	call	_Closest_Object	;wreg free
  3792                           
  3793                           ;main.c: 378: Move_ADC_To(-45);
  3794  012FB8  0EFF               	movlw	255
  3795  012FBA  0100               	movlb	0	; () banked
  3796  012FBC  6FAA               	movwf	(Move_ADC_To@Angle+1)& (0+255),b
  3797  012FBE  0ED3               	movlw	211
  3798  012FC0  6FA9               	movwf	Move_ADC_To@Angle& (0+255),b
  3799  012FC2  EC44  F0AD         	call	_Move_ADC_To	;wreg free
  3800                           
  3801                           ;main.c: 380: while (VictimCount < 2) {
  3802  012FC6  D0A5               	goto	l2235
  3803  012FC8                     
  3804                           ;main.c: 381: ADCAverage();
  3805  012FC8  EC0C  F09E         	call	_ADCAverage	;wreg free
  3806                           
  3807                           ;main.c: 382: printf("%c", (char)35);
  3808  012FCC  0EFB               	movlw	low STR_1
  3809  012FCE  0100               	movlb	0	; () banked
  3810  012FD0  6F75               	movwf	printf@f& (0+255),b
  3811  012FD2  0EFF               	movlw	high STR_1
  3812  012FD4  6F76               	movwf	(printf@f+1)& (0+255),b
  3813  012FD6  0E00               	movlw	0
  3814  012FD8  6F78               	movwf	(?_printf+3)& (0+255),b
  3815  012FDA  0E23               	movlw	35
  3816  012FDC  6F77               	movwf	(?_printf+2)& (0+255),b
  3817  012FDE  EC90  F0AC         	call	_printf	;wreg free
  3818                           
  3819                           ;main.c: 383: printf("\n       \n");
  3820  012FE2  0ED0               	movlw	low STR_16
  3821  012FE4  0100               	movlb	0	; () banked
  3822  012FE6  6F75               	movwf	printf@f& (0+255),b
  3823  012FE8  0EFF               	movlw	high STR_16
  3824  012FEA  6F76               	movwf	(printf@f+1)& (0+255),b
  3825  012FEC  EC90  F0AC         	call	_printf	;wreg free
  3826                           
  3827                           ;main.c: 384: printf("vc: %d\n", VictimCount);
  3828  012FF0  0EEC               	movlw	low STR_17
  3829  012FF2  0100               	movlb	0	; () banked
  3830  012FF4  6F75               	movwf	printf@f& (0+255),b
  3831  012FF6  0EFF               	movlw	high STR_17
  3832  012FF8  6F76               	movwf	(printf@f+1)& (0+255),b
  3833  012FFA  C134  F077         	movff	_VictimCount,?_printf+2
  3834  012FFE  C135  F078         	movff	_VictimCount+1,?_printf+3
  3835  013002  EC90  F0AC         	call	_printf	;wreg free
  3836                           
  3837                           ;main.c: 385: printf("\n\n\Co-ordinate %d  %d\n", X_Pos,Y_Pos);
  3838  013006  0EE6               	movlw	low STR_18
  3839  013008  0100               	movlb	0	; () banked
  3840  01300A  6F75               	movwf	printf@f& (0+255),b
  3841  01300C  0EFE               	movlw	high STR_18
  3842  01300E  6F76               	movwf	(printf@f+1)& (0+255),b
  3843  013010  C140  F077         	movff	_X_Pos,?_printf+2
  3844  013014  C141  F078         	movff	_X_Pos+1,?_printf+3
  3845  013018  C13E  F079         	movff	_Y_Pos,?_printf+4
  3846  01301C  C13F  F07A         	movff	_Y_Pos+1,?_printf+5
  3847  013020  EC90  F0AC         	call	_printf	;wreg free
  3848                           
  3849                           ;main.c: 387: Navigate_Maze();
  3850  013024  EC7A  F094         	call	_Navigate_Maze	;wreg free
  3851                           
  3852                           ;main.c: 388: if (Detect_Victim() == 1 && maze[X_Pos][Y_Pos].victim == 0) {
  3853  013028  ECDA  F0C1         	call	_Detect_Victim	;wreg free
  3854  01302C  0100               	movlb	0	; () banked
  3855  01302E  0561               	decf	?_Detect_Victim& (0+255),w,b
  3856  013030  1162               	iorwf	(?_Detect_Victim+1)& (0+255),w,b
  3857  013032  A4D8               	btfss	status,2,c
  3858  013034  D06C               	goto	l2237
  3859                           
  3860                           ; BSR set to: 0
  3861  013036  C140  F060         	movff	_X_Pos,___wmul@multiplier
  3862  01303A  C141  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  3863  01303E  0E00               	movlw	0
  3864  013040  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3865  013042  0E32               	movlw	50
  3866  013044  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3867  013046  ECE4  F0C5         	call	___wmul	;wreg free
  3868  01304A  0E00               	movlw	low _maze
  3869  01304C  0102               	movlb	2	; () banked
  3870  01304E  6FFC               	movwf	??_main& (0+255),b
  3871  013050  0E02               	movlw	high _maze
  3872  013052  6FFD               	movwf	(??_main+1)& (0+255),b
  3873  013054  0100               	movlb	0	; () banked
  3874  013056  5160               	movf	?___wmul& (0+255),w,b
  3875  013058  0102               	movlb	2	; () banked
  3876  01305A  27FC               	addwf	??_main& (0+255),f,b
  3877  01305C  0100               	movlb	0	; () banked
  3878  01305E  5161               	movf	(?___wmul+1)& (0+255),w,b
  3879  013060  0102               	movlb	2	; () banked
  3880  013062  23FD               	addwfc	(??_main+1)& (0+255),f,b
  3881  013064  C13E  F060         	movff	_Y_Pos,___wmul@multiplier
  3882  013068  C13F  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  3883  01306C  0E00               	movlw	0
  3884  01306E  0100               	movlb	0	; () banked
  3885  013070  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3886  013072  0E0A               	movlw	10
  3887  013074  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3888  013076  ECE4  F0C5         	call	___wmul	;wreg free
  3889  01307A  0100               	movlb	0	; () banked
  3890  01307C  5160               	movf	?___wmul& (0+255),w,b
  3891  01307E  0102               	movlb	2	; () banked
  3892  013080  27FC               	addwf	??_main& (0+255),f,b
  3893  013082  0100               	movlb	0	; () banked
  3894  013084  5161               	movf	(?___wmul+1)& (0+255),w,b
  3895  013086  0102               	movlb	2	; () banked
  3896  013088  23FD               	addwfc	(??_main+1)& (0+255),f,b
  3897  01308A  0E02               	movlw	2
  3898  01308C  25FC               	addwf	??_main& (0+255),w,b
  3899  01308E  6ED9               	movwf	fsr2l,c
  3900  013090  0E00               	movlw	0
  3901  013092  21FD               	addwfc	(??_main+1)& (0+255),w,b
  3902  013094  6EDA               	movwf	fsr2h,c
  3903  013096  50DE               	movf	postinc2,w,c
  3904  013098  10DE               	iorwf	postinc2,w,c
  3905  01309A  A4D8               	btfss	status,2,c
  3906  01309C  D038               	goto	l2237
  3907                           
  3908                           ; BSR set to: 2
  3909                           ;main.c: 389: maze[X_Pos][Y_Pos].victim = 1;
  3910  01309E  C140  F060         	movff	_X_Pos,___wmul@multiplier
  3911  0130A2  C141  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  3912  0130A6  0E00               	movlw	0
  3913  0130A8  0100               	movlb	0	; () banked
  3914  0130AA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3915  0130AC  0E32               	movlw	50
  3916  0130AE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3917  0130B0  ECE4  F0C5         	call	___wmul	;wreg free
  3918  0130B4  0E00               	movlw	low _maze
  3919  0130B6  0102               	movlb	2	; () banked
  3920  0130B8  6FFC               	movwf	??_main& (0+255),b
  3921  0130BA  0E02               	movlw	high _maze
  3922  0130BC  6FFD               	movwf	(??_main+1)& (0+255),b
  3923  0130BE  0100               	movlb	0	; () banked
  3924  0130C0  5160               	movf	?___wmul& (0+255),w,b
  3925  0130C2  0102               	movlb	2	; () banked
  3926  0130C4  27FC               	addwf	??_main& (0+255),f,b
  3927  0130C6  0100               	movlb	0	; () banked
  3928  0130C8  5161               	movf	(?___wmul+1)& (0+255),w,b
  3929  0130CA  0102               	movlb	2	; () banked
  3930  0130CC  23FD               	addwfc	(??_main+1)& (0+255),f,b
  3931  0130CE  C13E  F060         	movff	_Y_Pos,___wmul@multiplier
  3932  0130D2  C13F  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  3933  0130D6  0E00               	movlw	0
  3934  0130D8  0100               	movlb	0	; () banked
  3935  0130DA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3936  0130DC  0E0A               	movlw	10
  3937  0130DE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3938  0130E0  ECE4  F0C5         	call	___wmul	;wreg free
  3939  0130E4  0100               	movlb	0	; () banked
  3940  0130E6  5160               	movf	?___wmul& (0+255),w,b
  3941  0130E8  0102               	movlb	2	; () banked
  3942  0130EA  27FC               	addwf	??_main& (0+255),f,b
  3943  0130EC  0100               	movlb	0	; () banked
  3944  0130EE  5161               	movf	(?___wmul+1)& (0+255),w,b
  3945  0130F0  0102               	movlb	2	; () banked
  3946  0130F2  23FD               	addwfc	(??_main+1)& (0+255),f,b
  3947  0130F4  0E02               	movlw	2
  3948  0130F6  25FC               	addwf	??_main& (0+255),w,b
  3949  0130F8  6ED9               	movwf	fsr2l,c
  3950  0130FA  0E00               	movlw	0
  3951  0130FC  21FD               	addwfc	(??_main+1)& (0+255),w,b
  3952  0130FE  6EDA               	movwf	fsr2h,c
  3953  013100  0E01               	movlw	1
  3954  013102  6EDE               	movwf	postinc2,c
  3955  013104  0E00               	movlw	0
  3956  013106  6EDD               	movwf	postdec2,c
  3957                           
  3958                           ; BSR set to: 2
  3959                           ;main.c: 390: VictimCount++;
  3960  013108  0101               	movlb	1	; () banked
  3961  01310A  4B34               	infsnz	_VictimCount& (0+255),f,b
  3962  01310C  2B35               	incf	(_VictimCount+1)& (0+255),f,b
  3963  01310E                     l2237:
  3964                           
  3965                           ;main.c: 392: }
  3966                           ;main.c: 393: Console_Render();
  3967                           
  3968                           ; BSR set to: 1
  3969  01310E  ECB3  F0A8         	call	_Console_Render	;wreg free
  3970  013112                     l2235:
  3971  013112  0101               	movlb	1	; () banked
  3972  013114  BF35               	btfsc	(_VictimCount+1)& (0+255),7,b
  3973  013116  D758               	goto	l2236
  3974  013118  5135               	movf	(_VictimCount+1)& (0+255),w,b
  3975  01311A  E12D               	bnz	l18595
  3976  01311C  0E02               	movlw	2
  3977  01311E  5D34               	subwf	_VictimCount& (0+255),w,b
  3978  013120  B0D8               	btfsc	status,0,c
  3979  013122  D029               	goto	l2239
  3980  013124  D751               	goto	l2236
  3981  013126                     
  3982                           ; BSR set to: 1
  3983                           ;main.c: 396: printf("%c", (char)35);
  3984                           
  3985                           ; BSR set to: 1
  3986  013126  0EFB               	movlw	low STR_1
  3987  013128  0100               	movlb	0	; () banked
  3988  01312A  6F75               	movwf	printf@f& (0+255),b
  3989  01312C  0EFF               	movlw	high STR_1
  3990  01312E  6F76               	movwf	(printf@f+1)& (0+255),b
  3991  013130  0E00               	movlw	0
  3992  013132  6F78               	movwf	(?_printf+3)& (0+255),b
  3993  013134  0E23               	movlw	35
  3994  013136  6F77               	movwf	(?_printf+2)& (0+255),b
  3995  013138  EC90  F0AC         	call	_printf	;wreg free
  3996                           
  3997                           ;main.c: 397: printf("\n       \n");
  3998  01313C  0ED0               	movlw	low STR_16
  3999  01313E  0100               	movlb	0	; () banked
  4000  013140  6F75               	movwf	printf@f& (0+255),b
  4001  013142  0EFF               	movlw	high STR_16
  4002  013144  6F76               	movwf	(printf@f+1)& (0+255),b
  4003  013146  EC90  F0AC         	call	_printf	;wreg free
  4004                           
  4005                           ;main.c: 398: printf("Going Home");
  4006  01314A  0EBB               	movlw	low STR_21
  4007  01314C  0100               	movlb	0	; () banked
  4008  01314E  6F75               	movwf	printf@f& (0+255),b
  4009  013150  0EFF               	movlw	high STR_21
  4010  013152  6F76               	movwf	(printf@f+1)& (0+255),b
  4011  013154  EC90  F0AC         	call	_printf	;wreg free
  4012                           
  4013                           ;main.c: 399: Console_Render();
  4014  013158  ECB3  F0A8         	call	_Console_Render	;wreg free
  4015                           
  4016                           ;main.c: 400: Go_Backward(pop(), 500);
  4017  01315C  EC4C  F0C2         	call	_pop	;wreg free
  4018  013160  C083  F1D7         	movff	?_pop,Go_Backward@direction
  4019  013164  C084  F1D8         	movff	?_pop+1,Go_Backward@direction+1
  4020  013168  0E01               	movlw	1
  4021  01316A  0101               	movlb	1	; () banked
  4022  01316C  6FDA               	movwf	(Go_Backward@spd+1)& (0+255),b
  4023  01316E  0EF4               	movlw	244
  4024  013170  6FD9               	movwf	Go_Backward@spd& (0+255),b
  4025  013172  EC53  F0B6         	call	_Go_Backward	;wreg free
  4026  013176                     l2239:
  4027  013176                     l18595:
  4028  013176  0E03               	movlw	3
  4029  013178  0101               	movlb	1	; () banked
  4030  01317A  1940               	xorwf	_X_Pos& (0+255),w,b
  4031  01317C  1141               	iorwf	(_X_Pos+1)& (0+255),w,b
  4032  01317E  A4D8               	btfss	status,2,c
  4033  013180  D7D2               	goto	l2240
  4034                           
  4035                           ; BSR set to: 1
  4036  013182  053E               	decf	_Y_Pos& (0+255),w,b
  4037  013184  113F               	iorwf	(_Y_Pos+1)& (0+255),w,b
  4038  013186  A4D8               	btfss	status,2,c
  4039  013188  D7CE               	goto	l2240
  4040                           
  4041                           ; BSR set to: 1
  4042                           ;main.c: 401: }
  4043                           ;main.c: 403: printf("HOME!!!@");
  4044                           
  4045                           ; BSR set to: 1
  4046  01318A  0EE3               	movlw	low STR_22
  4047  01318C  0100               	movlb	0	; () banked
  4048  01318E  6F75               	movwf	printf@f& (0+255),b
  4049  013190  0EFF               	movlw	high STR_22
  4050  013192  6F76               	movwf	(printf@f+1)& (0+255),b
  4051  013194  EC90  F0AC         	call	_printf	;wreg free
  4052                           
  4053                           ;main.c: 404: Console_Render();
  4054  013198  ECB3  F0A8         	call	_Console_Render	;wreg free
  4055                           
  4056                           ;main.c: 405: delay_ms(200);
  4057  01319C  0E00               	movlw	0
  4058  01319E  0100               	movlb	0	; () banked
  4059  0131A0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  4060  0131A2  0EC8               	movlw	200
  4061  0131A4  6F60               	movwf	delay_ms@ms& (0+255),b
  4062  0131A6  EC39  F0C0         	call	_delay_ms	;wreg free
  4063                           
  4064                           ;main.c: 406: Bump_Wall();
  4065  0131AA  EC74  F0B5         	call	_Bump_Wall	;wreg free
  4066                           
  4067                           ;main.c: 407: delay_ms(200);
  4068  0131AE  0E00               	movlw	0
  4069  0131B0  0100               	movlb	0	; () banked
  4070  0131B2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  4071  0131B4  0EC8               	movlw	200
  4072  0131B6  6F60               	movwf	delay_ms@ms& (0+255),b
  4073  0131B8  EC39  F0C0         	call	_delay_ms	;wreg free
  4074  0131BC                     l2242:
  4075  0131BC  D7FF               	goto	l2242
  4076  0131BE                     l2244:
  4077                           
  4078                           ;main.c: 410: }
  4079                           ;main.c: 412: if (mode == 2) {
  4080  0131BE  0E02               	movlw	2
  4081  0131C0  0101               	movlb	1	; () banked
  4082  0131C2  194C               	xorwf	_mode& (0+255),w,b
  4083  0131C4  114D               	iorwf	(_mode+1)& (0+255),w,b
  4084  0131C6  A4D8               	btfss	status,2,c
  4085  0131C8  D003               	goto	l2248
  4086                           
  4087                           ; BSR set to: 1
  4088                           ;main.c: 414: Bump_Wall();
  4089  0131CA  EC74  F0B5         	call	_Bump_Wall	;wreg free
  4090  0131CE                     l2246:
  4091  0131CE  D7FF               	goto	l2246
  4092  0131D0                     l2248:
  4093                           
  4094                           ;main.c: 417: }
  4095                           ;main.c: 419: Console_Render();
  4096  0131D0  ECB3  F0A8         	call	_Console_Render	;wreg free
  4097                           
  4098                           ;main.c: 420: if (MXK_Release())
  4099  0131D4  EC20  F0C7         	call	_MXK_Release	;wreg free
  4100  0131D8  0900               	iorlw	0
  4101  0131DA  B4D8               	btfsc	status,2,c
  4102  0131DC  D64A               	goto	l2226
  4103                           
  4104                           ;main.c: 421: MXK_Dequeue();
  4105  0131DE  EC2B  F0C5         	call	_MXK_Dequeue	;wreg free
  4106                           
  4107                           ;main.c: 422: }
  4108                           ;main.c: 423: }
  4109  0131E2  D647               	goto	l2226
  4110  0131E4                     __end_of_main:
  4111                           	opt stack 0
  4112                           tosu	equ	0xFFF
  4113                           tosh	equ	0xFFE
  4114                           tosl	equ	0xFFD
  4115                           pclath	equ	0xFFA
  4116                           tblptru	equ	0xFF8
  4117                           tblptrh	equ	0xFF7
  4118                           tblptrl	equ	0xFF6
  4119                           tablat	equ	0xFF5
  4120                           postinc0	equ	0xFEE
  4121                           wreg	equ	0xFE8
  4122                           postdec1	equ	0xFE5
  4123                           fsr1h	equ	0xFE2
  4124                           fsr1l	equ	0xFE1
  4125                           postinc2	equ	0xFDE
  4126                           postdec2	equ	0xFDD
  4127                           fsr2h	equ	0xFDA
  4128                           fsr2l	equ	0xFD9
  4129                           status	equ	0xFD8
  4130                           
  4131 ;; *************** function _Sensor_Observe *****************
  4132 ;; Defined at:
  4133 ;;		line 225 in file "main.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;		None
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;  Low_Sensor      2  149[BANK0 ] int 
  4138 ;;  High_Sensor     2  147[BANK0 ] int 
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  1    wreg      void 
  4141 ;; Registers used:
  4142 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;Total ram usage:        6 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:   13
  4155 ;; This function calls:
  4156 ;;		_ADCAverage
  4157 ;;		_Console_Render
  4158 ;;		_SteppingCW
  4159 ;;		_printf
  4160 ;; This function is called by:
  4161 ;;		_main
  4162 ;;		_Find_Flag
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text1
  4167  016118                     __ptext1:
  4168                           	opt stack 0
  4169  016118                     _Sensor_Observe:
  4170                           	opt stack 17
  4171                           
  4172                           ;main.c: 226: int High_Sensor = 0;
  4173                           
  4174                           ;incstack = 0
  4175  016118  0E00               	movlw	0
  4176  01611A  0100               	movlb	0	; () banked
  4177  01611C  6FF4               	movwf	(Sensor_Observe@High_Sensor+1)& (0+255),b
  4178  01611E  0E00               	movlw	0
  4179  016120  6FF3               	movwf	Sensor_Observe@High_Sensor& (0+255),b
  4180                           
  4181                           ;main.c: 227: int Low_Sensor = 10000;
  4182  016122  0E27               	movlw	39
  4183  016124  6FF6               	movwf	(Sensor_Observe@Low_Sensor+1)& (0+255),b
  4184  016126  0E10               	movlw	16
  4185  016128  6FF5               	movwf	Sensor_Observe@Low_Sensor& (0+255),b
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;main.c: 229: printf("%c", (char)35);
  4189  01612A  0EFB               	movlw	low STR_1
  4190  01612C  6F75               	movwf	printf@f& (0+255),b
  4191  01612E  0EFF               	movlw	high STR_1
  4192  016130  6F76               	movwf	(printf@f+1)& (0+255),b
  4193  016132  0E00               	movlw	0
  4194  016134  6F78               	movwf	(?_printf+3)& (0+255),b
  4195  016136  0E23               	movlw	35
  4196  016138  6F77               	movwf	(?_printf+2)& (0+255),b
  4197  01613A  EC90  F0AC         	call	_printf	;wreg free
  4198                           
  4199                           ;main.c: 231: printf("Sensor Moving!   \n");
  4200  01613E  0E25               	movlw	low STR_2
  4201  016140  0100               	movlb	0	; () banked
  4202  016142  6F75               	movwf	printf@f& (0+255),b
  4203  016144  0EFF               	movlw	high STR_2
  4204  016146  6F76               	movwf	(printf@f+1)& (0+255),b
  4205  016148  EC90  F0AC         	call	_printf	;wreg free
  4206                           
  4207                           ;main.c: 233: Console_Render();
  4208  01614C  ECB3  F0A8         	call	_Console_Render	;wreg free
  4209                           
  4210                           ;main.c: 235: while (Motor_Count <= 512) {
  4211  016150  D051               	goto	l2205
  4212  016152                     
  4213                           ;main.c: 236: printf("%c", (char)35);
  4214  016152  0EFB               	movlw	low STR_1
  4215  016154  0100               	movlb	0	; () banked
  4216  016156  6F75               	movwf	printf@f& (0+255),b
  4217  016158  0EFF               	movlw	high STR_1
  4218  01615A  6F76               	movwf	(printf@f+1)& (0+255),b
  4219  01615C  0E00               	movlw	0
  4220  01615E  6F78               	movwf	(?_printf+3)& (0+255),b
  4221  016160  0E23               	movlw	35
  4222  016162  6F77               	movwf	(?_printf+2)& (0+255),b
  4223  016164  EC90  F0AC         	call	_printf	;wreg free
  4224                           
  4225                           ;main.c: 237: Motor_Count++;
  4226  016168  0101               	movlb	1	; () banked
  4227  01616A  4B4A               	infsnz	_Motor_Count& (0+255),f,b
  4228  01616C  2B4B               	incf	(_Motor_Count+1)& (0+255),f,b
  4229                           
  4230                           ; BSR set to: 1
  4231                           ;main.c: 238: ADCAverage();
  4232  01616E  EC0C  F09E         	call	_ADCAverage	;wreg free
  4233                           
  4234                           ;main.c: 239: printf("\nADC: %d \n\n", average);
  4235  016172  0EAF               	movlw	low STR_4
  4236  016174  0100               	movlb	0	; () banked
  4237  016176  6F75               	movwf	printf@f& (0+255),b
  4238  016178  0EFF               	movlw	high STR_4
  4239  01617A  6F76               	movwf	(printf@f+1)& (0+255),b
  4240  01617C  C02C  F077         	movff	_average,?_printf+2
  4241  016180  C02D  F078         	movff	_average+1,?_printf+3
  4242  016184  EC90  F0AC         	call	_printf	;wreg free
  4243                           
  4244                           ;main.c: 240: Console_Render();
  4245  016188  ECB3  F0A8         	call	_Console_Render	;wreg free
  4246                           
  4247                           ;main.c: 241: if (Low_Sensor > average) {
  4248  01618C  0100               	movlb	0	; () banked
  4249  01618E  51F5               	movf	Sensor_Observe@Low_Sensor& (0+255),w,b
  4250  016190  5C2C               	subwf	_average,w,c
  4251  016192  502D               	movf	_average+1,w,c
  4252  016194  0A80               	xorlw	128
  4253  016196  6FF1               	movwf	??_Sensor_Observe& (0+255),b
  4254  016198  51F6               	movf	(Sensor_Observe@Low_Sensor+1)& (0+255),w,b
  4255  01619A  0A80               	xorlw	128
  4256  01619C  59F1               	subwfb	??_Sensor_Observe& (0+255),w,b
  4257  01619E  B0D8               	btfsc	status,0,c
  4258  0161A0  D009               	goto	l2207
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;main.c: 242: Low_Sensor = average;
  4262  0161A2  C02C  F0F5         	movff	_average,Sensor_Observe@Low_Sensor
  4263  0161A6  C02D  F0F6         	movff	_average+1,Sensor_Observe@Low_Sensor+1
  4264                           
  4265                           ;main.c: 243: Close_Pos = Motor_Count;
  4266  0161AA  C14A  F128         	movff	_Motor_Count,_Close_Pos
  4267  0161AE  C14B  F129         	movff	_Motor_Count+1,_Close_Pos+1
  4268                           
  4269                           ;main.c: 244: } else if (average > High_Sensor) {
  4270  0161B2  D01E               	goto	l2209
  4271  0161B4                     l2207:
  4272                           
  4273                           ; BSR set to: 0
  4274                           
  4275                           ; BSR set to: 0
  4276  0161B4  502C               	movf	_average,w,c
  4277  0161B6  5DF3               	subwf	Sensor_Observe@High_Sensor& (0+255),w,b
  4278  0161B8  51F4               	movf	(Sensor_Observe@High_Sensor+1)& (0+255),w,b
  4279  0161BA  0A80               	xorlw	128
  4280  0161BC  6FF1               	movwf	??_Sensor_Observe& (0+255),b
  4281  0161BE  502D               	movf	_average+1,w,c
  4282  0161C0  0A80               	xorlw	128
  4283  0161C2  59F1               	subwfb	??_Sensor_Observe& (0+255),w,b
  4284  0161C4  B0D8               	btfsc	status,0,c
  4285  0161C6  D014               	goto	l2209
  4286                           
  4287                           ; BSR set to: 0
  4288                           ;main.c: 245: High_Sensor = average;
  4289  0161C8  C02C  F0F3         	movff	_average,Sensor_Observe@High_Sensor
  4290  0161CC  C02D  F0F4         	movff	_average+1,Sensor_Observe@High_Sensor+1
  4291                           
  4292                           ;main.c: 246: Found_Flag = Motor_Count;
  4293  0161D0  C14A  F030         	movff	_Motor_Count,_Found_Flag
  4294  0161D4  C14B  F031         	movff	_Motor_Count+1,_Found_Flag+1
  4295                           
  4296                           ; BSR set to: 0
  4297                           ;main.c: 247: printf("\n Found Flag: %d", Found_Flag);
  4298  0161D8  0E4B               	movlw	low STR_5
  4299  0161DA  6F75               	movwf	printf@f& (0+255),b
  4300  0161DC  0EFF               	movlw	high STR_5
  4301  0161DE  6F76               	movwf	(printf@f+1)& (0+255),b
  4302  0161E0  C030  F077         	movff	_Found_Flag,?_printf+2
  4303  0161E4  C031  F078         	movff	_Found_Flag+1,?_printf+3
  4304  0161E8  EC90  F0AC         	call	_printf	;wreg free
  4305                           
  4306                           ;main.c: 248: Console_Render();
  4307  0161EC  ECB3  F0A8         	call	_Console_Render	;wreg free
  4308  0161F0                     l2209:
  4309                           
  4310                           ;main.c: 249: }
  4311                           ;main.c: 250: SteppingCW();
  4312  0161F0  EC71  F0C2         	call	_SteppingCW	;wreg free
  4313  0161F4                     l2205:
  4314  0161F4  0101               	movlb	1	; () banked
  4315  0161F6  BF4B               	btfsc	(_Motor_Count+1)& (0+255),7,b
  4316  0161F8  D7AC               	goto	l2206
  4317  0161FA  054A               	decf	_Motor_Count& (0+255),w,b
  4318  0161FC  0E02               	movlw	2
  4319  0161FE  594B               	subwfb	(_Motor_Count+1)& (0+255),w,b
  4320  016200  A0D8               	btfss	status,0,c
  4321  016202  D7A7               	goto	l2206
  4322                           
  4323                           ; BSR set to: 1
  4324                           ;main.c: 251: }
  4325                           ;main.c: 252: RD5 = 0;
  4326  016204  9A83               	bcf	3971,5,c	;volatile
  4327                           
  4328                           ;main.c: 253: RD7 = 0;
  4329  016206  9E83               	bcf	3971,7,c	;volatile
  4330                           
  4331                           ;main.c: 254: RA2 = 0;
  4332  016208  9480               	bcf	3968,2,c	;volatile
  4333                           
  4334                           ;main.c: 255: RA3 = 0;
  4335  01620A  9680               	bcf	3968,3,c	;volatile
  4336                           
  4337                           ; BSR set to: 1
  4338                           ;main.c: 256: Sensor_Observe_Fin = 1;
  4339  01620C  0E00               	movlw	0
  4340  01620E  6F21               	movwf	(_Sensor_Observe_Fin+1)& (0+255),b
  4341  016210  0E01               	movlw	1
  4342  016212  6F20               	movwf	_Sensor_Observe_Fin& (0+255),b
  4343                           
  4344                           ; BSR set to: 1
  4345                           ;main.c: 259: CCW_Count = 512 - Close_Pos;
  4346  016214  C128  F0F1         	movff	_Close_Pos,??_Sensor_Observe
  4347  016218  C129  F0F2         	movff	_Close_Pos+1,??_Sensor_Observe+1
  4348  01621C  0100               	movlb	0	; () banked
  4349  01621E  1FF1               	comf	??_Sensor_Observe& (0+255),f,b
  4350  016220  1FF2               	comf	(??_Sensor_Observe+1)& (0+255),f,b
  4351  016222  4BF1               	infsnz	??_Sensor_Observe& (0+255),f,b
  4352  016224  2BF2               	incf	(??_Sensor_Observe+1)& (0+255),f,b
  4353  016226  0E00               	movlw	0
  4354  016228  25F1               	addwf	??_Sensor_Observe& (0+255),w,b
  4355  01622A  0101               	movlb	1	; () banked
  4356  01622C  6F24               	movwf	_CCW_Count& (0+255),b
  4357  01622E  0E02               	movlw	2
  4358  016230  0100               	movlb	0	; () banked
  4359  016232  21F2               	addwfc	(??_Sensor_Observe+1)& (0+255),w,b
  4360  016234  0101               	movlb	1	; () banked
  4361  016236  6F25               	movwf	(_CCW_Count+1)& (0+255),b
  4362                           
  4363                           ; BSR set to: 1
  4364                           ;main.c: 260: Found_Flag = 512 - Found_Flag;
  4365  016238  C030  F0F1         	movff	_Found_Flag,??_Sensor_Observe
  4366  01623C  C031  F0F2         	movff	_Found_Flag+1,??_Sensor_Observe+1
  4367  016240  0100               	movlb	0	; () banked
  4368  016242  1FF1               	comf	??_Sensor_Observe& (0+255),f,b
  4369  016244  1FF2               	comf	(??_Sensor_Observe+1)& (0+255),f,b
  4370  016246  4BF1               	infsnz	??_Sensor_Observe& (0+255),f,b
  4371  016248  2BF2               	incf	(??_Sensor_Observe+1)& (0+255),f,b
  4372  01624A  0E00               	movlw	0
  4373  01624C  25F1               	addwf	??_Sensor_Observe& (0+255),w,b
  4374  01624E  6E30               	movwf	_Found_Flag,c
  4375  016250  0E02               	movlw	2
  4376  016252  21F2               	addwfc	(??_Sensor_Observe+1)& (0+255),w,b
  4377  016254  6E31               	movwf	_Found_Flag+1,c
  4378  016256  0012               	return	
  4379  016258                     __end_of_Sensor_Observe:
  4380                           	opt stack 0
  4381                           tosu	equ	0xFFF
  4382                           tosh	equ	0xFFE
  4383                           tosl	equ	0xFFD
  4384                           pclath	equ	0xFFA
  4385                           tblptru	equ	0xFF8
  4386                           tblptrh	equ	0xFF7
  4387                           tblptrl	equ	0xFF6
  4388                           tablat	equ	0xFF5
  4389                           postinc0	equ	0xFEE
  4390                           wreg	equ	0xFE8
  4391                           postdec1	equ	0xFE5
  4392                           fsr1h	equ	0xFE2
  4393                           fsr1l	equ	0xFE1
  4394                           postinc2	equ	0xFDE
  4395                           postdec2	equ	0xFDD
  4396                           fsr2h	equ	0xFDA
  4397                           fsr2l	equ	0xFD9
  4398                           status	equ	0xFD8
  4399                           
  4400 ;; *************** function _Robot_Init *****************
  4401 ;; Defined at:
  4402 ;;		line 141 in file "main.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;		None
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;		None
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  1    wreg      void 
  4409 ;; Registers used:
  4410 ;;		wreg, status,2, status,0, cstack
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4420 ;;Total ram usage:        0 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; Hardware stack levels required when called:    9
  4423 ;; This function calls:
  4424 ;;		_Robot_Stop
  4425 ;;		_UpdateDistance
  4426 ;;		_eusartSend
  4427 ;; This function is called by:
  4428 ;;		_main
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           	psect	text2
  4433  018E2A                     __ptext2:
  4434                           	opt stack 0
  4435  018E2A                     _Robot_Init:
  4436                           	opt stack 21
  4437                           
  4438                           ;main.c: 142: eusartSend(128);
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;incstack = 0
  4442  018E2A  0E80               	movlw	128
  4443  018E2C  ECC9  F0C7         	call	_eusartSend
  4444                           
  4445                           ;main.c: 143: eusartSend(132);
  4446  018E30  0E84               	movlw	132
  4447  018E32  ECC9  F0C7         	call	_eusartSend
  4448                           
  4449                           ;main.c: 144: Robot_Stop();
  4450  018E36  EC64  F0C6         	call	_Robot_Stop	;wreg free
  4451                           
  4452                           ;main.c: 145: UpdateDistance();
  4453  018E3A  EC44  F0BF         	call	_UpdateDistance	;wreg free
  4454  018E3E  0012               	return		;funcret
  4455  018E40                     __end_of_Robot_Init:
  4456                           	opt stack 0
  4457                           tosu	equ	0xFFF
  4458                           tosh	equ	0xFFE
  4459                           tosl	equ	0xFFD
  4460                           pclath	equ	0xFFA
  4461                           tblptru	equ	0xFF8
  4462                           tblptrh	equ	0xFF7
  4463                           tblptrl	equ	0xFF6
  4464                           tablat	equ	0xFF5
  4465                           postinc0	equ	0xFEE
  4466                           wreg	equ	0xFE8
  4467                           postdec1	equ	0xFE5
  4468                           fsr1h	equ	0xFE2
  4469                           fsr1l	equ	0xFE1
  4470                           postinc2	equ	0xFDE
  4471                           postdec2	equ	0xFDD
  4472                           fsr2h	equ	0xFDA
  4473                           fsr2l	equ	0xFD9
  4474                           status	equ	0xFD8
  4475                           
  4476 ;; *************** function _Navigate_Maze *****************
  4477 ;; Defined at:
  4478 ;;		line 588 in file "dans.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;		None
  4481 ;; Auto vars:     Size  Location     Type
  4482 ;;  Direction       2   40[BANK1 ] int 
  4483 ;;  Follow          2    0        int 
  4484 ;; Return value:  Size  Location     Type
  4485 ;;                  1    wreg      void 
  4486 ;; Registers used:
  4487 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4488 ;; Tracked objects:
  4489 ;;		On entry : 0/0
  4490 ;;		On exit  : 0/0
  4491 ;;		Unchanged: 0/0
  4492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4494 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4495 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;Total ram usage:        6 bytes
  4498 ;; Hardware stack levels used:    1
  4499 ;; Hardware stack levels required when called:   17
  4500 ;; This function calls:
  4501 ;;		_Console_Render
  4502 ;;		_Fix_Error
  4503 ;;		_Go_Backward
  4504 ;;		_Travel
  4505 ;;		___wmul
  4506 ;;		_pop
  4507 ;;		_printf
  4508 ;; This function is called by:
  4509 ;;		_main
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text3
  4514  0128F4                     __ptext3:
  4515                           	opt stack 0
  4516  0128F4                     _Navigate_Maze:
  4517                           	opt stack 13
  4518                           
  4519                           ;dans.c: 589: int Direction;
  4520                           ;dans.c: 590: int Follow;
  4521                           ;dans.c: 591: printf("X=%d, Y=%d\n", X_Pos, Y_Pos);
  4522                           
  4523                           ;incstack = 0
  4524  0128F4  0E97               	movlw	low STR_33
  4525  0128F6  0100               	movlb	0	; () banked
  4526  0128F8  6F75               	movwf	printf@f& (0+255),b
  4527  0128FA  0EFF               	movlw	high STR_33
  4528  0128FC  6F76               	movwf	(printf@f+1)& (0+255),b
  4529  0128FE  C140  F077         	movff	_X_Pos,?_printf+2
  4530  012902  C141  F078         	movff	_X_Pos+1,?_printf+3
  4531  012906  C13E  F079         	movff	_Y_Pos,?_printf+4
  4532  01290A  C13F  F07A         	movff	_Y_Pos+1,?_printf+5
  4533  01290E  EC90  F0AC         	call	_printf	;wreg free
  4534                           
  4535                           ;dans.c: 592: Console_Render();
  4536  012912  ECB3  F0A8         	call	_Console_Render	;wreg free
  4537                           
  4538                           ;dans.c: 593: if (maze[X_Pos][Y_Pos].Options > 0) {
  4539  012916  C140  F060         	movff	_X_Pos,___wmul@multiplier
  4540  01291A  C141  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4541  01291E  0E00               	movlw	0
  4542  012920  0100               	movlb	0	; () banked
  4543  012922  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4544  012924  0E32               	movlw	50
  4545  012926  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4546  012928  ECE4  F0C5         	call	___wmul	;wreg free
  4547  01292C  0E00               	movlw	low _maze
  4548  01292E  0101               	movlb	1	; () banked
  4549  012930  6FDB               	movwf	??_Navigate_Maze& (0+255),b
  4550  012932  0E02               	movlw	high _maze
  4551  012934  6FDC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4552  012936  0100               	movlb	0	; () banked
  4553  012938  5160               	movf	?___wmul& (0+255),w,b
  4554  01293A  0101               	movlb	1	; () banked
  4555  01293C  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4556  01293E  0100               	movlb	0	; () banked
  4557  012940  5161               	movf	(?___wmul+1)& (0+255),w,b
  4558  012942  0101               	movlb	1	; () banked
  4559  012944  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4560  012946  C13E  F060         	movff	_Y_Pos,___wmul@multiplier
  4561  01294A  C13F  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4562  01294E  0E00               	movlw	0
  4563  012950  0100               	movlb	0	; () banked
  4564  012952  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4565  012954  0E0A               	movlw	10
  4566  012956  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4567  012958  ECE4  F0C5         	call	___wmul	;wreg free
  4568  01295C  0100               	movlb	0	; () banked
  4569  01295E  5160               	movf	?___wmul& (0+255),w,b
  4570  012960  0101               	movlb	1	; () banked
  4571  012962  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4572  012964  0100               	movlb	0	; () banked
  4573  012966  5161               	movf	(?___wmul+1)& (0+255),w,b
  4574  012968  0101               	movlb	1	; () banked
  4575  01296A  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4576  01296C  0E08               	movlw	8
  4577  01296E  25DB               	addwf	??_Navigate_Maze& (0+255),w,b
  4578  012970  6ED9               	movwf	fsr2l,c
  4579  012972  0E00               	movlw	0
  4580  012974  21DC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4581  012976  6EDA               	movwf	fsr2h,c
  4582  012978  0E01               	movlw	1
  4583  01297A  BEDB               	btfsc	plusw2,7,c
  4584  01297C  D234               	goto	l2525
  4585  01297E  0E01               	movlw	1
  4586  012980  50DB               	movf	plusw2,w,c
  4587  012982  E103               	bnz	u14970
  4588  012984  04DE               	decf	postinc2,w,c
  4589  012986  A0D8               	btfss	status,0,c
  4590  012988  D22E               	goto	l2525
  4591  01298A                     u14970:
  4592                           
  4593                           ; BSR set to: 1
  4594                           ;dans.c: 594: if (maze[X_Pos][Y_Pos].walls[1] == 0 && maze[X_Pos][Y_Pos + 1].Options > 0
      +                          ) {
  4595  01298A  C140  F060         	movff	_X_Pos,___wmul@multiplier
  4596  01298E  C141  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4597  012992  0E00               	movlw	0
  4598  012994  0100               	movlb	0	; () banked
  4599  012996  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4600  012998  0E32               	movlw	50
  4601  01299A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4602  01299C  ECE4  F0C5         	call	___wmul	;wreg free
  4603  0129A0  0E00               	movlw	low _maze
  4604  0129A2  0101               	movlb	1	; () banked
  4605  0129A4  6FDB               	movwf	??_Navigate_Maze& (0+255),b
  4606  0129A6  0E02               	movlw	high _maze
  4607  0129A8  6FDC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4608  0129AA  0100               	movlb	0	; () banked
  4609  0129AC  5160               	movf	?___wmul& (0+255),w,b
  4610  0129AE  0101               	movlb	1	; () banked
  4611  0129B0  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4612  0129B2  0100               	movlb	0	; () banked
  4613  0129B4  5161               	movf	(?___wmul+1)& (0+255),w,b
  4614  0129B6  0101               	movlb	1	; () banked
  4615  0129B8  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4616  0129BA  C13E  F060         	movff	_Y_Pos,___wmul@multiplier
  4617  0129BE  C13F  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4618  0129C2  0E00               	movlw	0
  4619  0129C4  0100               	movlb	0	; () banked
  4620  0129C6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4621  0129C8  0E0A               	movlw	10
  4622  0129CA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4623  0129CC  ECE4  F0C5         	call	___wmul	;wreg free
  4624  0129D0  0100               	movlb	0	; () banked
  4625  0129D2  5160               	movf	?___wmul& (0+255),w,b
  4626  0129D4  0101               	movlb	1	; () banked
  4627  0129D6  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4628  0129D8  0100               	movlb	0	; () banked
  4629  0129DA  5161               	movf	(?___wmul+1)& (0+255),w,b
  4630  0129DC  0101               	movlb	1	; () banked
  4631  0129DE  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4632  0129E0  0E05               	movlw	5
  4633  0129E2  25DB               	addwf	??_Navigate_Maze& (0+255),w,b
  4634  0129E4  6ED9               	movwf	fsr2l,c
  4635  0129E6  0E00               	movlw	0
  4636  0129E8  21DC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4637  0129EA  6EDA               	movwf	fsr2h,c
  4638  0129EC  50DF               	movf	indf2,w,c
  4639  0129EE  A4D8               	btfss	status,2,c
  4640  0129F0  D042               	goto	l2526
  4641                           
  4642                           ; BSR set to: 1
  4643  0129F2  C140  F060         	movff	_X_Pos,___wmul@multiplier
  4644  0129F6  C141  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4645  0129FA  0E00               	movlw	0
  4646  0129FC  0100               	movlb	0	; () banked
  4647  0129FE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4648  012A00  0E32               	movlw	50
  4649  012A02  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4650  012A04  ECE4  F0C5         	call	___wmul	;wreg free
  4651  012A08  0E00               	movlw	low _maze
  4652  012A0A  0101               	movlb	1	; () banked
  4653  012A0C  6FDB               	movwf	??_Navigate_Maze& (0+255),b
  4654  012A0E  0E02               	movlw	high _maze
  4655  012A10  6FDC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4656  012A12  0100               	movlb	0	; () banked
  4657  012A14  5160               	movf	?___wmul& (0+255),w,b
  4658  012A16  0101               	movlb	1	; () banked
  4659  012A18  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4660  012A1A  0100               	movlb	0	; () banked
  4661  012A1C  5161               	movf	(?___wmul+1)& (0+255),w,b
  4662  012A1E  0101               	movlb	1	; () banked
  4663  012A20  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4664  012A22  0E01               	movlw	1
  4665  012A24  253E               	addwf	_Y_Pos& (0+255),w,b
  4666  012A26  0100               	movlb	0	; () banked
  4667  012A28  6F60               	movwf	___wmul@multiplier& (0+255),b
  4668  012A2A  0E00               	movlw	0
  4669  012A2C  0101               	movlb	1	; () banked
  4670  012A2E  213F               	addwfc	(_Y_Pos+1)& (0+255),w,b
  4671  012A30  0100               	movlb	0	; () banked
  4672  012A32  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  4673  012A34  0E00               	movlw	0
  4674  012A36  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4675  012A38  0E0A               	movlw	10
  4676  012A3A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4677  012A3C  ECE4  F0C5         	call	___wmul	;wreg free
  4678  012A40  0100               	movlb	0	; () banked
  4679  012A42  5160               	movf	?___wmul& (0+255),w,b
  4680  012A44  0101               	movlb	1	; () banked
  4681  012A46  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4682  012A48  0100               	movlb	0	; () banked
  4683  012A4A  5161               	movf	(?___wmul+1)& (0+255),w,b
  4684  012A4C  0101               	movlb	1	; () banked
  4685  012A4E  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4686  012A50  0E08               	movlw	8
  4687  012A52  25DB               	addwf	??_Navigate_Maze& (0+255),w,b
  4688  012A54  6ED9               	movwf	fsr2l,c
  4689  012A56  0E00               	movlw	0
  4690  012A58  21DC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4691  012A5A  6EDA               	movwf	fsr2h,c
  4692  012A5C  0E01               	movlw	1
  4693  012A5E  BEDB               	btfsc	plusw2,7,c
  4694  012A60  D00A               	goto	l2526
  4695  012A62  0E01               	movlw	1
  4696  012A64  50DB               	movf	plusw2,w,c
  4697  012A66  E103               	bnz	u14990
  4698  012A68  04DE               	decf	postinc2,w,c
  4699  012A6A  A0D8               	btfss	status,0,c
  4700  012A6C  D004               	goto	l2526
  4701  012A6E                     u14990:
  4702                           
  4703                           ; BSR set to: 1
  4704                           ;dans.c: 595: Direction = 1;
  4705  012A6E  0E00               	movlw	0
  4706  012A70  6FE0               	movwf	(Navigate_Maze@Direction+1)& (0+255),b
  4707  012A72  0E01               	movlw	1
  4708  012A74  D161               	goto	L3
  4709  012A76                     l2526:
  4710                           
  4711                           ; BSR set to: 1
  4712                           
  4713                           ; BSR set to: 1
  4714  012A76  C140  F060         	movff	_X_Pos,___wmul@multiplier
  4715  012A7A  C141  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4716  012A7E  0E00               	movlw	0
  4717  012A80  0100               	movlb	0	; () banked
  4718  012A82  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4719  012A84  0E32               	movlw	50
  4720  012A86  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4721  012A88  ECE4  F0C5         	call	___wmul	;wreg free
  4722  012A8C  0E00               	movlw	low _maze
  4723  012A8E  0101               	movlb	1	; () banked
  4724  012A90  6FDB               	movwf	??_Navigate_Maze& (0+255),b
  4725  012A92  0E02               	movlw	high _maze
  4726  012A94  6FDC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4727  012A96  0100               	movlb	0	; () banked
  4728  012A98  5160               	movf	?___wmul& (0+255),w,b
  4729  012A9A  0101               	movlb	1	; () banked
  4730  012A9C  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4731  012A9E  0100               	movlb	0	; () banked
  4732  012AA0  5161               	movf	(?___wmul+1)& (0+255),w,b
  4733  012AA2  0101               	movlb	1	; () banked
  4734  012AA4  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4735  012AA6  C13E  F060         	movff	_Y_Pos,___wmul@multiplier
  4736  012AAA  C13F  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4737  012AAE  0E00               	movlw	0
  4738  012AB0  0100               	movlb	0	; () banked
  4739  012AB2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4740  012AB4  0E0A               	movlw	10
  4741  012AB6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4742  012AB8  ECE4  F0C5         	call	___wmul	;wreg free
  4743  012ABC  0100               	movlb	0	; () banked
  4744  012ABE  5160               	movf	?___wmul& (0+255),w,b
  4745  012AC0  0101               	movlb	1	; () banked
  4746  012AC2  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4747  012AC4  0100               	movlb	0	; () banked
  4748  012AC6  5161               	movf	(?___wmul+1)& (0+255),w,b
  4749  012AC8  0101               	movlb	1	; () banked
  4750  012ACA  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4751  012ACC  0E06               	movlw	6
  4752  012ACE  25DB               	addwf	??_Navigate_Maze& (0+255),w,b
  4753  012AD0  6ED9               	movwf	fsr2l,c
  4754  012AD2  0E00               	movlw	0
  4755  012AD4  21DC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4756  012AD6  6EDA               	movwf	fsr2h,c
  4757  012AD8  50DF               	movf	indf2,w,c
  4758  012ADA  A4D8               	btfss	status,2,c
  4759  012ADC  D042               	goto	l2528
  4760                           
  4761                           ; BSR set to: 1
  4762  012ADE  0E01               	movlw	1
  4763  012AE0  2540               	addwf	_X_Pos& (0+255),w,b
  4764  012AE2  0100               	movlb	0	; () banked
  4765  012AE4  6F60               	movwf	___wmul@multiplier& (0+255),b
  4766  012AE6  0E00               	movlw	0
  4767  012AE8  0101               	movlb	1	; () banked
  4768  012AEA  2141               	addwfc	(_X_Pos+1)& (0+255),w,b
  4769  012AEC  0100               	movlb	0	; () banked
  4770  012AEE  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  4771  012AF0  0E00               	movlw	0
  4772  012AF2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4773  012AF4  0E32               	movlw	50
  4774  012AF6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4775  012AF8  ECE4  F0C5         	call	___wmul	;wreg free
  4776  012AFC  0E00               	movlw	low _maze
  4777  012AFE  0101               	movlb	1	; () banked
  4778  012B00  6FDB               	movwf	??_Navigate_Maze& (0+255),b
  4779  012B02  0E02               	movlw	high _maze
  4780  012B04  6FDC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4781  012B06  0100               	movlb	0	; () banked
  4782  012B08  5160               	movf	?___wmul& (0+255),w,b
  4783  012B0A  0101               	movlb	1	; () banked
  4784  012B0C  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4785  012B0E  0100               	movlb	0	; () banked
  4786  012B10  5161               	movf	(?___wmul+1)& (0+255),w,b
  4787  012B12  0101               	movlb	1	; () banked
  4788  012B14  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4789  012B16  C13E  F060         	movff	_Y_Pos,___wmul@multiplier
  4790  012B1A  C13F  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4791  012B1E  0E00               	movlw	0
  4792  012B20  0100               	movlb	0	; () banked
  4793  012B22  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4794  012B24  0E0A               	movlw	10
  4795  012B26  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4796  012B28  ECE4  F0C5         	call	___wmul	;wreg free
  4797  012B2C  0100               	movlb	0	; () banked
  4798  012B2E  5160               	movf	?___wmul& (0+255),w,b
  4799  012B30  0101               	movlb	1	; () banked
  4800  012B32  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4801  012B34  0100               	movlb	0	; () banked
  4802  012B36  5161               	movf	(?___wmul+1)& (0+255),w,b
  4803  012B38  0101               	movlb	1	; () banked
  4804  012B3A  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4805  012B3C  0E08               	movlw	8
  4806  012B3E  25DB               	addwf	??_Navigate_Maze& (0+255),w,b
  4807  012B40  6ED9               	movwf	fsr2l,c
  4808  012B42  0E00               	movlw	0
  4809  012B44  21DC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4810  012B46  6EDA               	movwf	fsr2h,c
  4811  012B48  0E01               	movlw	1
  4812  012B4A  BEDB               	btfsc	plusw2,7,c
  4813  012B4C  D00A               	goto	l2528
  4814  012B4E  0E01               	movlw	1
  4815  012B50  50DB               	movf	plusw2,w,c
  4816  012B52  E103               	bnz	u15010
  4817  012B54  04DE               	decf	postinc2,w,c
  4818  012B56  A0D8               	btfss	status,0,c
  4819  012B58  D004               	goto	l2528
  4820  012B5A                     u15010:
  4821                           
  4822                           ; BSR set to: 1
  4823                           ;dans.c: 597: Direction = 2;
  4824  012B5A  0E00               	movlw	0
  4825  012B5C  6FE0               	movwf	(Navigate_Maze@Direction+1)& (0+255),b
  4826  012B5E  0E02               	movlw	2
  4827  012B60  D0EB               	goto	L3
  4828  012B62                     l2528:
  4829                           
  4830                           ; BSR set to: 1
  4831                           
  4832                           ; BSR set to: 1
  4833  012B62  C140  F060         	movff	_X_Pos,___wmul@multiplier
  4834  012B66  C141  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4835  012B6A  0E00               	movlw	0
  4836  012B6C  0100               	movlb	0	; () banked
  4837  012B6E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4838  012B70  0E32               	movlw	50
  4839  012B72  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4840  012B74  ECE4  F0C5         	call	___wmul	;wreg free
  4841  012B78  0E00               	movlw	low _maze
  4842  012B7A  0101               	movlb	1	; () banked
  4843  012B7C  6FDB               	movwf	??_Navigate_Maze& (0+255),b
  4844  012B7E  0E02               	movlw	high _maze
  4845  012B80  6FDC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4846  012B82  0100               	movlb	0	; () banked
  4847  012B84  5160               	movf	?___wmul& (0+255),w,b
  4848  012B86  0101               	movlb	1	; () banked
  4849  012B88  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4850  012B8A  0100               	movlb	0	; () banked
  4851  012B8C  5161               	movf	(?___wmul+1)& (0+255),w,b
  4852  012B8E  0101               	movlb	1	; () banked
  4853  012B90  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4854  012B92  C13E  F060         	movff	_Y_Pos,___wmul@multiplier
  4855  012B96  C13F  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4856  012B9A  0E00               	movlw	0
  4857  012B9C  0100               	movlb	0	; () banked
  4858  012B9E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4859  012BA0  0E0A               	movlw	10
  4860  012BA2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4861  012BA4  ECE4  F0C5         	call	___wmul	;wreg free
  4862  012BA8  0100               	movlb	0	; () banked
  4863  012BAA  5160               	movf	?___wmul& (0+255),w,b
  4864  012BAC  0101               	movlb	1	; () banked
  4865  012BAE  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4866  012BB0  0100               	movlb	0	; () banked
  4867  012BB2  5161               	movf	(?___wmul+1)& (0+255),w,b
  4868  012BB4  0101               	movlb	1	; () banked
  4869  012BB6  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4870  012BB8  0E07               	movlw	7
  4871  012BBA  25DB               	addwf	??_Navigate_Maze& (0+255),w,b
  4872  012BBC  6ED9               	movwf	fsr2l,c
  4873  012BBE  0E00               	movlw	0
  4874  012BC0  21DC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4875  012BC2  6EDA               	movwf	fsr2h,c
  4876  012BC4  50DF               	movf	indf2,w,c
  4877  012BC6  A4D8               	btfss	status,2,c
  4878  012BC8  D042               	goto	l2530
  4879                           
  4880                           ; BSR set to: 1
  4881  012BCA  C140  F060         	movff	_X_Pos,___wmul@multiplier
  4882  012BCE  C141  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4883  012BD2  0E00               	movlw	0
  4884  012BD4  0100               	movlb	0	; () banked
  4885  012BD6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4886  012BD8  0E32               	movlw	50
  4887  012BDA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4888  012BDC  ECE4  F0C5         	call	___wmul	;wreg free
  4889  012BE0  0E00               	movlw	low _maze
  4890  012BE2  0101               	movlb	1	; () banked
  4891  012BE4  6FDB               	movwf	??_Navigate_Maze& (0+255),b
  4892  012BE6  0E02               	movlw	high _maze
  4893  012BE8  6FDC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4894  012BEA  0100               	movlb	0	; () banked
  4895  012BEC  5160               	movf	?___wmul& (0+255),w,b
  4896  012BEE  0101               	movlb	1	; () banked
  4897  012BF0  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4898  012BF2  0100               	movlb	0	; () banked
  4899  012BF4  5161               	movf	(?___wmul+1)& (0+255),w,b
  4900  012BF6  0101               	movlb	1	; () banked
  4901  012BF8  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4902  012BFA  0EFF               	movlw	255
  4903  012BFC  253E               	addwf	_Y_Pos& (0+255),w,b
  4904  012BFE  0100               	movlb	0	; () banked
  4905  012C00  6F60               	movwf	___wmul@multiplier& (0+255),b
  4906  012C02  0EFF               	movlw	255
  4907  012C04  0101               	movlb	1	; () banked
  4908  012C06  213F               	addwfc	(_Y_Pos+1)& (0+255),w,b
  4909  012C08  0100               	movlb	0	; () banked
  4910  012C0A  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  4911  012C0C  0E00               	movlw	0
  4912  012C0E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4913  012C10  0E0A               	movlw	10
  4914  012C12  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4915  012C14  ECE4  F0C5         	call	___wmul	;wreg free
  4916  012C18  0100               	movlb	0	; () banked
  4917  012C1A  5160               	movf	?___wmul& (0+255),w,b
  4918  012C1C  0101               	movlb	1	; () banked
  4919  012C1E  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4920  012C20  0100               	movlb	0	; () banked
  4921  012C22  5161               	movf	(?___wmul+1)& (0+255),w,b
  4922  012C24  0101               	movlb	1	; () banked
  4923  012C26  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4924  012C28  0E08               	movlw	8
  4925  012C2A  25DB               	addwf	??_Navigate_Maze& (0+255),w,b
  4926  012C2C  6ED9               	movwf	fsr2l,c
  4927  012C2E  0E00               	movlw	0
  4928  012C30  21DC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4929  012C32  6EDA               	movwf	fsr2h,c
  4930  012C34  0E01               	movlw	1
  4931  012C36  BEDB               	btfsc	plusw2,7,c
  4932  012C38  D00A               	goto	l2530
  4933  012C3A  0E01               	movlw	1
  4934  012C3C  50DB               	movf	plusw2,w,c
  4935  012C3E  E103               	bnz	u15030
  4936  012C40  04DE               	decf	postinc2,w,c
  4937  012C42  A0D8               	btfss	status,0,c
  4938  012C44  D004               	goto	l2530
  4939  012C46                     u15030:
  4940                           
  4941                           ; BSR set to: 1
  4942                           ;dans.c: 599: Direction = 3;
  4943  012C46  0E00               	movlw	0
  4944  012C48  6FE0               	movwf	(Navigate_Maze@Direction+1)& (0+255),b
  4945  012C4A  0E03               	movlw	3
  4946  012C4C  D075               	goto	L3
  4947  012C4E                     l2530:
  4948                           
  4949                           ; BSR set to: 1
  4950                           
  4951                           ; BSR set to: 1
  4952  012C4E  C140  F060         	movff	_X_Pos,___wmul@multiplier
  4953  012C52  C141  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4954  012C56  0E00               	movlw	0
  4955  012C58  0100               	movlb	0	; () banked
  4956  012C5A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4957  012C5C  0E32               	movlw	50
  4958  012C5E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4959  012C60  ECE4  F0C5         	call	___wmul	;wreg free
  4960  012C64  0E00               	movlw	low _maze
  4961  012C66  0101               	movlb	1	; () banked
  4962  012C68  6FDB               	movwf	??_Navigate_Maze& (0+255),b
  4963  012C6A  0E02               	movlw	high _maze
  4964  012C6C  6FDC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4965  012C6E  0100               	movlb	0	; () banked
  4966  012C70  5160               	movf	?___wmul& (0+255),w,b
  4967  012C72  0101               	movlb	1	; () banked
  4968  012C74  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4969  012C76  0100               	movlb	0	; () banked
  4970  012C78  5161               	movf	(?___wmul+1)& (0+255),w,b
  4971  012C7A  0101               	movlb	1	; () banked
  4972  012C7C  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4973  012C7E  C13E  F060         	movff	_Y_Pos,___wmul@multiplier
  4974  012C82  C13F  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4975  012C86  0E00               	movlw	0
  4976  012C88  0100               	movlb	0	; () banked
  4977  012C8A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4978  012C8C  0E0A               	movlw	10
  4979  012C8E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4980  012C90  ECE4  F0C5         	call	___wmul	;wreg free
  4981  012C94  0100               	movlb	0	; () banked
  4982  012C96  5160               	movf	?___wmul& (0+255),w,b
  4983  012C98  0101               	movlb	1	; () banked
  4984  012C9A  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  4985  012C9C  0100               	movlb	0	; () banked
  4986  012C9E  5161               	movf	(?___wmul+1)& (0+255),w,b
  4987  012CA0  0101               	movlb	1	; () banked
  4988  012CA2  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4989  012CA4  0E04               	movlw	4
  4990  012CA6  25DB               	addwf	??_Navigate_Maze& (0+255),w,b
  4991  012CA8  6ED9               	movwf	fsr2l,c
  4992  012CAA  0E00               	movlw	0
  4993  012CAC  21DC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4994  012CAE  6EDA               	movwf	fsr2h,c
  4995  012CB0  50DF               	movf	indf2,w,c
  4996  012CB2  A4D8               	btfss	status,2,c
  4997  012CB4  D043               	goto	l2532
  4998                           
  4999                           ; BSR set to: 1
  5000  012CB6  0EFF               	movlw	255
  5001  012CB8  2540               	addwf	_X_Pos& (0+255),w,b
  5002  012CBA  0100               	movlb	0	; () banked
  5003  012CBC  6F60               	movwf	___wmul@multiplier& (0+255),b
  5004  012CBE  0EFF               	movlw	255
  5005  012CC0  0101               	movlb	1	; () banked
  5006  012CC2  2141               	addwfc	(_X_Pos+1)& (0+255),w,b
  5007  012CC4  0100               	movlb	0	; () banked
  5008  012CC6  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  5009  012CC8  0E00               	movlw	0
  5010  012CCA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5011  012CCC  0E32               	movlw	50
  5012  012CCE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5013  012CD0  ECE4  F0C5         	call	___wmul	;wreg free
  5014  012CD4  0E00               	movlw	low _maze
  5015  012CD6  0101               	movlb	1	; () banked
  5016  012CD8  6FDB               	movwf	??_Navigate_Maze& (0+255),b
  5017  012CDA  0E02               	movlw	high _maze
  5018  012CDC  6FDC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  5019  012CDE  0100               	movlb	0	; () banked
  5020  012CE0  5160               	movf	?___wmul& (0+255),w,b
  5021  012CE2  0101               	movlb	1	; () banked
  5022  012CE4  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  5023  012CE6  0100               	movlb	0	; () banked
  5024  012CE8  5161               	movf	(?___wmul+1)& (0+255),w,b
  5025  012CEA  0101               	movlb	1	; () banked
  5026  012CEC  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  5027  012CEE  C13E  F060         	movff	_Y_Pos,___wmul@multiplier
  5028  012CF2  C13F  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  5029  012CF6  0E00               	movlw	0
  5030  012CF8  0100               	movlb	0	; () banked
  5031  012CFA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5032  012CFC  0E0A               	movlw	10
  5033  012CFE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5034  012D00  ECE4  F0C5         	call	___wmul	;wreg free
  5035  012D04  0100               	movlb	0	; () banked
  5036  012D06  5160               	movf	?___wmul& (0+255),w,b
  5037  012D08  0101               	movlb	1	; () banked
  5038  012D0A  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  5039  012D0C  0100               	movlb	0	; () banked
  5040  012D0E  5161               	movf	(?___wmul+1)& (0+255),w,b
  5041  012D10  0101               	movlb	1	; () banked
  5042  012D12  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  5043  012D14  0E08               	movlw	8
  5044  012D16  25DB               	addwf	??_Navigate_Maze& (0+255),w,b
  5045  012D18  6ED9               	movwf	fsr2l,c
  5046  012D1A  0E00               	movlw	0
  5047  012D1C  21DC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  5048  012D1E  6EDA               	movwf	fsr2h,c
  5049  012D20  0E01               	movlw	1
  5050  012D22  BEDB               	btfsc	plusw2,7,c
  5051  012D24  D00B               	goto	l2532
  5052  012D26  0E01               	movlw	1
  5053  012D28  50DB               	movf	plusw2,w,c
  5054  012D2A  E103               	bnz	u15050
  5055  012D2C  04DE               	decf	postinc2,w,c
  5056  012D2E  A0D8               	btfss	status,0,c
  5057  012D30  D005               	goto	l2532
  5058  012D32                     u15050:
  5059                           
  5060                           ; BSR set to: 1
  5061                           ;dans.c: 601: Direction = 0;
  5062  012D32  0E00               	movlw	0
  5063  012D34  6FE0               	movwf	(Navigate_Maze@Direction+1)& (0+255),b
  5064  012D36  0E00               	movlw	0
  5065  012D38                     L3:
  5066  012D38  6FDF               	movwf	Navigate_Maze@Direction& (0+255),b
  5067                           
  5068                           ;dans.c: 602: } else {
  5069  012D3A  D00A               	goto	l2536
  5070  012D3C                     l2532:
  5071                           
  5072                           ; BSR set to: 1
  5073                           ;dans.c: 603: printf("&&&&&\n");
  5074                           
  5075                           ; BSR set to: 1
  5076  012D3C  0EF4               	movlw	low STR_34
  5077  012D3E  0100               	movlb	0	; () banked
  5078  012D40  6F75               	movwf	printf@f& (0+255),b
  5079  012D42  0EFF               	movlw	high STR_34
  5080  012D44  6F76               	movwf	(printf@f+1)& (0+255),b
  5081  012D46  EC90  F0AC         	call	_printf	;wreg free
  5082                           
  5083                           ;dans.c: 604: Console_Render();
  5084  012D4A  ECB3  F0A8         	call	_Console_Render	;wreg free
  5085  012D4E                     l2534:
  5086  012D4E  D7FF               	goto	l2534
  5087  012D50                     l2536:
  5088                           
  5089                           ;dans.c: 606: }
  5090                           ;dans.c: 608: maze[X_Pos][Y_Pos].Options -= 1;
  5091  012D50  C140  F060         	movff	_X_Pos,___wmul@multiplier
  5092  012D54  C141  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  5093  012D58  0E00               	movlw	0
  5094  012D5A  0100               	movlb	0	; () banked
  5095  012D5C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5096  012D5E  0E32               	movlw	50
  5097  012D60  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5098  012D62  ECE4  F0C5         	call	___wmul	;wreg free
  5099  012D66  0E00               	movlw	low _maze
  5100  012D68  0101               	movlb	1	; () banked
  5101  012D6A  6FDB               	movwf	??_Navigate_Maze& (0+255),b
  5102  012D6C  0E02               	movlw	high _maze
  5103  012D6E  6FDC               	movwf	(??_Navigate_Maze+1)& (0+255),b
  5104  012D70  0100               	movlb	0	; () banked
  5105  012D72  5160               	movf	?___wmul& (0+255),w,b
  5106  012D74  0101               	movlb	1	; () banked
  5107  012D76  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  5108  012D78  0100               	movlb	0	; () banked
  5109  012D7A  5161               	movf	(?___wmul+1)& (0+255),w,b
  5110  012D7C  0101               	movlb	1	; () banked
  5111  012D7E  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  5112  012D80  C13E  F060         	movff	_Y_Pos,___wmul@multiplier
  5113  012D84  C13F  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  5114  012D88  0E00               	movlw	0
  5115  012D8A  0100               	movlb	0	; () banked
  5116  012D8C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5117  012D8E  0E0A               	movlw	10
  5118  012D90  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5119  012D92  ECE4  F0C5         	call	___wmul	;wreg free
  5120  012D96  0100               	movlb	0	; () banked
  5121  012D98  5160               	movf	?___wmul& (0+255),w,b
  5122  012D9A  0101               	movlb	1	; () banked
  5123  012D9C  27DB               	addwf	??_Navigate_Maze& (0+255),f,b
  5124  012D9E  0100               	movlb	0	; () banked
  5125  012DA0  5161               	movf	(?___wmul+1)& (0+255),w,b
  5126  012DA2  0101               	movlb	1	; () banked
  5127  012DA4  23DC               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  5128  012DA6  0E08               	movlw	8
  5129  012DA8  25DB               	addwf	??_Navigate_Maze& (0+255),w,b
  5130  012DAA  6ED9               	movwf	fsr2l,c
  5131  012DAC  0E00               	movlw	0
  5132  012DAE  21DC               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  5133  012DB0  6EDA               	movwf	fsr2h,c
  5134  012DB2  06DE               	decf	postinc2,f,c
  5135  012DB4  0E00               	movlw	0
  5136  012DB6  5ADD               	subwfb	postdec2,f,c
  5137                           
  5138                           ; BSR set to: 1
  5139                           ;dans.c: 609: Travel(Direction, 960, 0, 500, 0);
  5140  012DB8  C1DF  F1BF         	movff	Navigate_Maze@Direction,Travel@direction
  5141  012DBC  C1E0  F1C0         	movff	Navigate_Maze@Direction+1,Travel@direction+1
  5142  012DC0  0E03               	movlw	3
  5143  012DC2  6FC2               	movwf	(Travel@Dist+1)& (0+255),b
  5144  012DC4  0EC0               	movlw	192
  5145  012DC6  6FC1               	movwf	Travel@Dist& (0+255),b
  5146  012DC8  0E00               	movlw	0
  5147  012DCA  6FC4               	movwf	(Travel@Test_ADC+1)& (0+255),b
  5148  012DCC  0E00               	movlw	0
  5149  012DCE  6FC3               	movwf	Travel@Test_ADC& (0+255),b
  5150  012DD0  0E01               	movlw	1
  5151  012DD2  6FC6               	movwf	(Travel@Spd+1)& (0+255),b
  5152  012DD4  0EF4               	movlw	244
  5153  012DD6  6FC5               	movwf	Travel@Spd& (0+255),b
  5154  012DD8  0E00               	movlw	0
  5155  012DDA  6FC8               	movwf	(Travel@Wall+1)& (0+255),b
  5156  012DDC  0E00               	movlw	0
  5157  012DDE  6FC7               	movwf	Travel@Wall& (0+255),b
  5158  012DE0  EC76  F091         	call	_Travel	;wreg free
  5159                           
  5160                           ;dans.c: 611: } else {
  5161  012DE4  D016               	goto	l2537
  5162  012DE6                     l2525:
  5163                           
  5164                           ;dans.c: 612: printf("no options\n");
  5165  012DE6  0EA3               	movlw	low STR_35
  5166  012DE8  0100               	movlb	0	; () banked
  5167  012DEA  6F75               	movwf	printf@f& (0+255),b
  5168  012DEC  0EFF               	movlw	high STR_35
  5169  012DEE  6F76               	movwf	(printf@f+1)& (0+255),b
  5170  012DF0  EC90  F0AC         	call	_printf	;wreg free
  5171                           
  5172                           ;dans.c: 613: Console_Render();
  5173  012DF4  ECB3  F0A8         	call	_Console_Render	;wreg free
  5174                           
  5175                           ;dans.c: 614: Go_Backward(pop(), 500);
  5176  012DF8  EC4C  F0C2         	call	_pop	;wreg free
  5177  012DFC  C083  F1D7         	movff	?_pop,Go_Backward@direction
  5178  012E00  C084  F1D8         	movff	?_pop+1,Go_Backward@direction+1
  5179  012E04  0E01               	movlw	1
  5180  012E06  0101               	movlb	1	; () banked
  5181  012E08  6FDA               	movwf	(Go_Backward@spd+1)& (0+255),b
  5182  012E0A  0EF4               	movlw	244
  5183  012E0C  6FD9               	movwf	Go_Backward@spd& (0+255),b
  5184  012E0E  EC53  F0B6         	call	_Go_Backward	;wreg free
  5185  012E12                     l2537:
  5186                           
  5187                           ;dans.c: 615: }
  5188                           ;dans.c: 617: Fix_Error(X_Pos, Y_Pos);
  5189  012E12  C140  F0F1         	movff	_X_Pos,Fix_Error@X_Pos
  5190  012E16  C141  F0F2         	movff	_X_Pos+1,Fix_Error@X_Pos+1
  5191  012E1A  C13E  F0F3         	movff	_Y_Pos,Fix_Error@Y_Pos
  5192  012E1E  C13F  F0F4         	movff	_Y_Pos+1,Fix_Error@Y_Pos+1
  5193  012E22  ECB0  F0A4         	call	_Fix_Error	;wreg free
  5194  012E26  0012               	return		;funcret
  5195  012E28                     __end_of_Navigate_Maze:
  5196                           	opt stack 0
  5197                           tosu	equ	0xFFF
  5198                           tosh	equ	0xFFE
  5199                           tosl	equ	0xFFD
  5200                           pclath	equ	0xFFA
  5201                           tblptru	equ	0xFF8
  5202                           tblptrh	equ	0xFF7
  5203                           tblptrl	equ	0xFF6
  5204                           tablat	equ	0xFF5
  5205                           postinc0	equ	0xFEE
  5206                           wreg	equ	0xFE8
  5207                           postdec1	equ	0xFE5
  5208                           fsr1h	equ	0xFE2
  5209                           fsr1l	equ	0xFE1
  5210                           indf2	equ	0xFDF
  5211                           postinc2	equ	0xFDE
  5212                           postdec2	equ	0xFDD
  5213                           plusw2	equ	0xFDB
  5214                           fsr2h	equ	0xFDA
  5215                           fsr2l	equ	0xFD9
  5216                           status	equ	0xFD8
  5217                           
  5218 ;; *************** function _pop *****************
  5219 ;; Defined at:
  5220 ;;		line 255 in file "dans.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;		None
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  data            2   37[BANK0 ] int 
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  2   35[BANK0 ] int 
  5227 ;; Registers used:
  5228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5229 ;; Tracked objects:
  5230 ;;		On entry : 0/0
  5231 ;;		On exit  : 0/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5234 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5235 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5237 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5238 ;;Total ram usage:        4 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:   13
  5241 ;; This function calls:
  5242 ;;		_isempty
  5243 ;;		_printf
  5244 ;; This function is called by:
  5245 ;;		_main
  5246 ;;		_Navigate_Maze
  5247 ;;		_Go_Home
  5248 ;; This function uses a non-reentrant model
  5249 ;;
  5250                           
  5251                           	psect	text4
  5252  018498                     __ptext4:
  5253                           	opt stack 0
  5254  018498                     _pop:
  5255                           	opt stack 17
  5256                           
  5257                           ;dans.c: 256: int data;
  5258                           ;dans.c: 258: if (!isempty()) {
  5259                           
  5260                           ;incstack = 0
  5261  018498  EC99  F0C7         	call	_isempty	;wreg free
  5262  01849C  0900               	iorlw	0
  5263  01849E  A4D8               	btfss	status,2,c
  5264  0184A0  D018               	goto	l2411
  5265                           
  5266                           ;dans.c: 259: data = stack[top];
  5267  0184A2  90D8               	bcf	status,0,c
  5268  0184A4  344B               	rlcf	_top,w,c
  5269  0184A6  6ED9               	movwf	fsr2l,c
  5270  0184A8  344C               	rlcf	_top+1,w,c
  5271  0184AA  6EDA               	movwf	fsr2h,c
  5272  0184AC  0E00               	movlw	low _stack
  5273  0184AE  26D9               	addwf	fsr2l,f,c
  5274  0184B0  0E03               	movlw	high _stack
  5275  0184B2  22DA               	addwfc	fsr2h,f,c
  5276  0184B4  CFDE F085          	movff	postinc2,pop@data
  5277  0184B8  CFDD F086          	movff	postdec2,pop@data+1
  5278                           
  5279                           ;dans.c: 260: top = top - 1;
  5280  0184BC  0EFF               	movlw	255
  5281  0184BE  244B               	addwf	_top,w,c
  5282  0184C0  6E4B               	movwf	_top,c
  5283  0184C2  0EFF               	movlw	255
  5284  0184C4  204C               	addwfc	_top+1,w,c
  5285  0184C6  6E4C               	movwf	_top+1,c
  5286                           
  5287                           ;dans.c: 261: return data;
  5288  0184C8  C085  F083         	movff	pop@data,?_pop
  5289  0184CC  C086  F084         	movff	pop@data+1,?_pop+1
  5290                           
  5291                           ;dans.c: 262: } else {
  5292  0184D0  0012               	return	
  5293  0184D2                     l2411:
  5294                           
  5295                           ;dans.c: 263: printf("Could not retrieve data, Stack is empty.\n");
  5296  0184D2  0E61               	movlw	low STR_23
  5297  0184D4  0100               	movlb	0	; () banked
  5298  0184D6  6F75               	movwf	printf@f& (0+255),b
  5299  0184D8  0EFE               	movlw	high STR_23
  5300  0184DA  6F76               	movwf	(printf@f+1)& (0+255),b
  5301  0184DC  EC90  F0AC         	call	_printf	;wreg free
  5302  0184E0  0012               	return	
  5303  0184E2                     __end_of_pop:
  5304                           	opt stack 0
  5305                           tosu	equ	0xFFF
  5306                           tosh	equ	0xFFE
  5307                           tosl	equ	0xFFD
  5308                           pclath	equ	0xFFA
  5309                           tblptru	equ	0xFF8
  5310                           tblptrh	equ	0xFF7
  5311                           tblptrl	equ	0xFF6
  5312                           tablat	equ	0xFF5
  5313                           postinc0	equ	0xFEE
  5314                           wreg	equ	0xFE8
  5315                           postdec1	equ	0xFE5
  5316                           fsr1h	equ	0xFE2
  5317                           fsr1l	equ	0xFE1
  5318                           indf2	equ	0xFDF
  5319                           postinc2	equ	0xFDE
  5320                           postdec2	equ	0xFDD
  5321                           plusw2	equ	0xFDB
  5322                           fsr2h	equ	0xFDA
  5323                           fsr2l	equ	0xFD9
  5324                           status	equ	0xFD8
  5325                           
  5326 ;; *************** function _isempty *****************
  5327 ;; Defined at:
  5328 ;;		line 235 in file "dans.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;		None
  5331 ;; Auto vars:     Size  Location     Type
  5332 ;;		None
  5333 ;; Return value:  Size  Location     Type
  5334 ;;                  1    wreg      unsigned char 
  5335 ;; Registers used:
  5336 ;;		wreg, status,2, status,0
  5337 ;; Tracked objects:
  5338 ;;		On entry : 0/0
  5339 ;;		On exit  : 0/0
  5340 ;;		Unchanged: 0/0
  5341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;Total ram usage:        0 bytes
  5347 ;; Hardware stack levels used:    1
  5348 ;; Hardware stack levels required when called:    7
  5349 ;; This function calls:
  5350 ;;		Nothing
  5351 ;; This function is called by:
  5352 ;;		_pop
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           	psect	text5
  5357  018F32                     __ptext5:
  5358                           	opt stack 0
  5359  018F32                     _isempty:
  5360                           	opt stack 22
  5361                           
  5362                           ;dans.c: 237: if (top == -1)
  5363                           
  5364                           ;incstack = 0
  5365  018F32  284B               	incf	_top,w,c
  5366  018F34  E105               	bnz	l16515
  5367  018F36  284C               	incf	_top+1,w,c
  5368  018F38  A4D8               	btfss	status,2,c
  5369  018F3A  D002               	goto	l2398
  5370                           
  5371                           ;dans.c: 238: return 1;
  5372  018F3C  0E01               	movlw	1
  5373  018F3E  0012               	return	
  5374  018F40                     l2398:
  5375  018F40                     l16515:
  5376                           
  5377                           ;dans.c: 239: else
  5378                           ;dans.c: 240: return 0;
  5379  018F40  0E00               	movlw	0
  5380  018F42  0012               	return	
  5381  018F44                     __end_of_isempty:
  5382                           	opt stack 0
  5383                           tosu	equ	0xFFF
  5384                           tosh	equ	0xFFE
  5385                           tosl	equ	0xFFD
  5386                           pclath	equ	0xFFA
  5387                           tblptru	equ	0xFF8
  5388                           tblptrh	equ	0xFF7
  5389                           tblptrl	equ	0xFF6
  5390                           tablat	equ	0xFF5
  5391                           postinc0	equ	0xFEE
  5392                           wreg	equ	0xFE8
  5393                           postdec1	equ	0xFE5
  5394                           fsr1h	equ	0xFE2
  5395                           fsr1l	equ	0xFE1
  5396                           indf2	equ	0xFDF
  5397                           postinc2	equ	0xFDE
  5398                           postdec2	equ	0xFDD
  5399                           plusw2	equ	0xFDB
  5400                           fsr2h	equ	0xFDA
  5401                           fsr2l	equ	0xFD9
  5402                           status	equ	0xFD8
  5403                           
  5404 ;; *************** function _Go_Backward *****************
  5405 ;; Defined at:
  5406 ;;		line 573 in file "dans.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;  direction       2   32[BANK1 ] int 
  5409 ;;  spd             2   34[BANK1 ] int 
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;		None
  5412 ;; Return value:  Size  Location     Type
  5413 ;;                  1    wreg      void 
  5414 ;; Registers used:
  5415 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5421 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5423 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5424 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5425 ;;Total ram usage:        6 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:   16
  5428 ;; This function calls:
  5429 ;;		_Travel
  5430 ;;		___wmul
  5431 ;; This function is called by:
  5432 ;;		_main
  5433 ;;		_Navigate_Maze
  5434 ;;		_Go_Home
  5435 ;; This function uses a non-reentrant model
  5436 ;;
  5437                           
  5438                           	psect	text6
  5439  016CA6                     __ptext6:
  5440                           	opt stack 0
  5441  016CA6                     _Go_Backward:
  5442                           	opt stack 13
  5443                           
  5444                           ;dans.c: 574: if (direction == 1)
  5445                           
  5446                           ;incstack = 0
  5447  016CA6  0101               	movlb	1	; () banked
  5448  016CA8  05D7               	decf	Go_Backward@direction& (0+255),w,b
  5449  016CAA  11D8               	iorwf	(Go_Backward@direction+1)& (0+255),w,b
  5450  016CAC  A4D8               	btfss	status,2,c
  5451  016CAE  D004               	goto	l2515
  5452                           
  5453                           ; BSR set to: 1
  5454                           ;dans.c: 575: direction = 3;
  5455  016CB0  0E00               	movlw	0
  5456  016CB2  6FD8               	movwf	(Go_Backward@direction+1)& (0+255),b
  5457  016CB4  0E03               	movlw	3
  5458  016CB6  D019               	goto	L6
  5459  016CB8                     l2515:
  5460                           
  5461                           ; BSR set to: 1
  5462                           ;dans.c: 576: else if (direction == 3)
  5463                           
  5464                           ; BSR set to: 1
  5465  016CB8  0E03               	movlw	3
  5466  016CBA  19D7               	xorwf	Go_Backward@direction& (0+255),w,b
  5467  016CBC  11D8               	iorwf	(Go_Backward@direction+1)& (0+255),w,b
  5468  016CBE  A4D8               	btfss	status,2,c
  5469  016CC0  D004               	goto	l2517
  5470                           
  5471                           ; BSR set to: 1
  5472                           ;dans.c: 577: direction = 1;
  5473  016CC2  0E00               	movlw	0
  5474  016CC4  6FD8               	movwf	(Go_Backward@direction+1)& (0+255),b
  5475  016CC6  0E01               	movlw	1
  5476  016CC8  D010               	goto	L6
  5477  016CCA                     l2517:
  5478                           
  5479                           ; BSR set to: 1
  5480                           ;dans.c: 578: else if (direction == 0)
  5481                           
  5482                           ; BSR set to: 1
  5483  016CCA  51D7               	movf	Go_Backward@direction& (0+255),w,b
  5484  016CCC  11D8               	iorwf	(Go_Backward@direction+1)& (0+255),w,b
  5485  016CCE  A4D8               	btfss	status,2,c
  5486  016CD0  D004               	goto	l2519
  5487                           
  5488                           ; BSR set to: 1
  5489                           ;dans.c: 579: direction = 2;
  5490  016CD2  0E00               	movlw	0
  5491  016CD4  6FD8               	movwf	(Go_Backward@direction+1)& (0+255),b
  5492  016CD6  0E02               	movlw	2
  5493  016CD8  D008               	goto	L6
  5494  016CDA                     l2519:
  5495                           
  5496                           ; BSR set to: 1
  5497                           ;dans.c: 580: else if (direction == 2)
  5498                           
  5499                           ; BSR set to: 1
  5500  016CDA  0E02               	movlw	2
  5501  016CDC  19D7               	xorwf	Go_Backward@direction& (0+255),w,b
  5502  016CDE  11D8               	iorwf	(Go_Backward@direction+1)& (0+255),w,b
  5503  016CE0  A4D8               	btfss	status,2,c
  5504  016CE2  D004               	goto	l2521
  5505                           
  5506                           ; BSR set to: 1
  5507                           ;dans.c: 581: direction = 0;
  5508  016CE4  0E00               	movlw	0
  5509  016CE6  6FD8               	movwf	(Go_Backward@direction+1)& (0+255),b
  5510  016CE8  0E00               	movlw	0
  5511  016CEA                     L6:
  5512  016CEA  6FD7               	movwf	Go_Backward@direction& (0+255),b
  5513  016CEC                     l2521:
  5514                           
  5515                           ; BSR set to: 1
  5516                           ;dans.c: 583: Travel(direction, 960, 0, spd, 1);
  5517                           
  5518                           ; BSR set to: 1
  5519                           
  5520                           ; BSR set to: 1
  5521                           
  5522                           ; BSR set to: 1
  5523                           
  5524                           ; BSR set to: 1
  5525  016CEC  C1D7  F1BF         	movff	Go_Backward@direction,Travel@direction
  5526  016CF0  C1D8  F1C0         	movff	Go_Backward@direction+1,Travel@direction+1
  5527  016CF4  0E03               	movlw	3
  5528  016CF6  6FC2               	movwf	(Travel@Dist+1)& (0+255),b
  5529  016CF8  0EC0               	movlw	192
  5530  016CFA  6FC1               	movwf	Travel@Dist& (0+255),b
  5531  016CFC  0E00               	movlw	0
  5532  016CFE  6FC4               	movwf	(Travel@Test_ADC+1)& (0+255),b
  5533  016D00  0E00               	movlw	0
  5534  016D02  6FC3               	movwf	Travel@Test_ADC& (0+255),b
  5535  016D04  C1D9  F1C5         	movff	Go_Backward@spd,Travel@Spd
  5536  016D08  C1DA  F1C6         	movff	Go_Backward@spd+1,Travel@Spd+1
  5537  016D0C  0E00               	movlw	0
  5538  016D0E  6FC8               	movwf	(Travel@Wall+1)& (0+255),b
  5539  016D10  0E01               	movlw	1
  5540  016D12  6FC7               	movwf	Travel@Wall& (0+255),b
  5541  016D14  EC76  F091         	call	_Travel	;wreg free
  5542                           
  5543                           ;dans.c: 584: maze[X_Pos][Y_Pos].Options += 1;
  5544  016D18  C140  F060         	movff	_X_Pos,___wmul@multiplier
  5545  016D1C  C141  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  5546  016D20  0E00               	movlw	0
  5547  016D22  0100               	movlb	0	; () banked
  5548  016D24  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5549  016D26  0E32               	movlw	50
  5550  016D28  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5551  016D2A  ECE4  F0C5         	call	___wmul	;wreg free
  5552  016D2E  0E00               	movlw	low _maze
  5553  016D30  0100               	movlb	0	; () banked
  5554  016D32  6FFD               	movwf	??_Go_Backward& (0+255),b
  5555  016D34  0E02               	movlw	high _maze
  5556  016D36  6FFE               	movwf	(??_Go_Backward+1)& (0+255),b
  5557  016D38  5160               	movf	?___wmul& (0+255),w,b
  5558  016D3A  27FD               	addwf	??_Go_Backward& (0+255),f,b
  5559  016D3C  5161               	movf	(?___wmul+1)& (0+255),w,b
  5560  016D3E  23FE               	addwfc	(??_Go_Backward+1)& (0+255),f,b
  5561  016D40  C13E  F060         	movff	_Y_Pos,___wmul@multiplier
  5562  016D44  C13F  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  5563  016D48  0E00               	movlw	0
  5564  016D4A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5565  016D4C  0E0A               	movlw	10
  5566  016D4E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5567  016D50  ECE4  F0C5         	call	___wmul	;wreg free
  5568  016D54  0100               	movlb	0	; () banked
  5569  016D56  5160               	movf	?___wmul& (0+255),w,b
  5570  016D58  27FD               	addwf	??_Go_Backward& (0+255),f,b
  5571  016D5A  5161               	movf	(?___wmul+1)& (0+255),w,b
  5572  016D5C  23FE               	addwfc	(??_Go_Backward+1)& (0+255),f,b
  5573  016D5E  0E08               	movlw	8
  5574  016D60  25FD               	addwf	??_Go_Backward& (0+255),w,b
  5575  016D62  6ED9               	movwf	fsr2l,c
  5576  016D64  0E00               	movlw	0
  5577  016D66  21FE               	addwfc	(??_Go_Backward+1)& (0+255),w,b
  5578  016D68  6EDA               	movwf	fsr2h,c
  5579  016D6A  2ADE               	incf	postinc2,f,c
  5580  016D6C  0E00               	movlw	0
  5581  016D6E  22DD               	addwfc	postdec2,f,c
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;dans.c: 585: top -= 1;
  5585  016D70  064B               	decf	_top,f,c
  5586  016D72  A0D8               	btfss	status,0,c
  5587  016D74  064C               	decf	_top+1,f,c
  5588                           
  5589                           ; BSR set to: 0
  5590  016D76  0012               	return		;funcret
  5591  016D78                     __end_of_Go_Backward:
  5592                           	opt stack 0
  5593                           tosu	equ	0xFFF
  5594                           tosh	equ	0xFFE
  5595                           tosl	equ	0xFFD
  5596                           pclath	equ	0xFFA
  5597                           tblptru	equ	0xFF8
  5598                           tblptrh	equ	0xFF7
  5599                           tblptrl	equ	0xFF6
  5600                           tablat	equ	0xFF5
  5601                           postinc0	equ	0xFEE
  5602                           wreg	equ	0xFE8
  5603                           postdec1	equ	0xFE5
  5604                           fsr1h	equ	0xFE2
  5605                           fsr1l	equ	0xFE1
  5606                           indf2	equ	0xFDF
  5607                           postinc2	equ	0xFDE
  5608                           postdec2	equ	0xFDD
  5609                           plusw2	equ	0xFDB
  5610                           fsr2h	equ	0xFDA
  5611                           fsr2l	equ	0xFD9
  5612                           status	equ	0xFD8
  5613                           
  5614 ;; *************** function _Travel *****************
  5615 ;; Defined at:
  5616 ;;		line 356 in file "dans.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;  direction       2    8[BANK1 ] int 
  5619 ;;  Dist            2   10[BANK1 ] int 
  5620 ;;  Test_ADC        2   12[BANK1 ] int 
  5621 ;;  Spd             2   14[BANK1 ] int 
  5622 ;;  Wall            2   16[BANK1 ] int 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;  rev_Dist        2   24[BANK1 ] int 
  5625 ;;  error           2   30[BANK1 ] int 
  5626 ;;  Req_Dir         2   28[BANK1 ] int 
  5627 ;;  Dist_Travell    2   26[BANK1 ] int 
  5628 ;;  spd2            2   22[BANK1 ] int 
  5629 ;;  spd1            2   20[BANK1 ] int 
  5630 ;;  Dir             2   18[BANK1 ] int 
  5631 ;; Return value:  Size  Location     Type
  5632 ;;                  2    8[BANK1 ] int 
  5633 ;; Registers used:
  5634 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5635 ;; Tracked objects:
  5636 ;;		On entry : 0/0
  5637 ;;		On exit  : 0/0
  5638 ;;		Unchanged: 0/0
  5639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5640 ;;      Params:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;      Totals:         0       4      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;Total ram usage:       28 bytes
  5645 ;; Hardware stack levels used:    1
  5646 ;; Hardware stack levels required when called:   15
  5647 ;; This function calls:
  5648 ;;		_ADCAverage
  5649 ;;		_Console_Render
  5650 ;;		_Detect_Victim
  5651 ;;		_Drive
  5652 ;;		_Fix_Error
  5653 ;;		_Get_VirtualWall_State
  5654 ;;		_Move_ADC_To
  5655 ;;		_Robot_Stop
  5656 ;;		_Turn
  5657 ;;		_UpdateDistance
  5658 ;;		___wmul
  5659 ;;		_printf
  5660 ;;		_push
  5661 ;; This function is called by:
  5662 ;;		_Go_Backward
  5663 ;;		_Navigate_Maze
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           	psect	text7
  5668  0122EC                     __ptext7:
  5669                           	opt stack 0
  5670  0122EC                     _Travel:
  5671                           	opt stack 14
  5672                           
  5673                           ;dans.c: 357: WallFlag = Wall;
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;incstack = 0
  5677  0122EC  C1C7  F03B         	movff	Travel@Wall,_WallFlag
  5678                           
  5679                           ;dans.c: 358: int Dist_Travelled = 0;
  5680  0122F0  0E00               	movlw	0
  5681  0122F2  0101               	movlb	1	; () banked
  5682  0122F4  6FD2               	movwf	(Travel@Dist_Travelled+1)& (0+255),b
  5683  0122F6  0E00               	movlw	0
  5684  0122F8  6FD1               	movwf	Travel@Dist_Travelled& (0+255),b
  5685                           
  5686                           ;dans.c: 359: int Req_Dir = 0;
  5687  0122FA  0E00               	movlw	0
  5688  0122FC  6FD4               	movwf	(Travel@Req_Dir+1)& (0+255),b
  5689  0122FE  0E00               	movlw	0
  5690  012300  6FD3               	movwf	Travel@Req_Dir& (0+255),b
  5691                           
  5692                           ; BSR set to: 1
  5693                           ;dans.c: 360: int Dir;
  5694                           ;dans.c: 363: if (direction == Current_Direction) {
  5695  012302  51F9               	movf	_Current_Direction& (0+255),w,b
  5696  012304  19BF               	xorwf	Travel@direction& (0+255),w,b
  5697  012306  E104               	bnz	l16527
  5698  012308  51FA               	movf	(_Current_Direction+1)& (0+255),w,b
  5699  01230A  19C0               	xorwf	(Travel@direction+1)& (0+255),w,b
  5700  01230C  B4D8               	btfsc	status,2,c
  5701  01230E  D095               	goto	l2446
  5702  012310                     l16527:
  5703                           
  5704                           ; BSR set to: 1
  5705                           ;dans.c: 366: Req_Dir = direction - Current_Direction;
  5706  012310  C1F9  F0F9         	movff	_Current_Direction,??_Travel
  5707  012314  C1FA  F0FA         	movff	_Current_Direction+1,??_Travel+1
  5708  012318  0100               	movlb	0	; () banked
  5709  01231A  1FF9               	comf	??_Travel& (0+255),f,b
  5710  01231C  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  5711  01231E  4BF9               	infsnz	??_Travel& (0+255),f,b
  5712  012320  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  5713  012322  0101               	movlb	1	; () banked
  5714  012324  51BF               	movf	Travel@direction& (0+255),w,b
  5715  012326  0100               	movlb	0	; () banked
  5716  012328  25F9               	addwf	??_Travel& (0+255),w,b
  5717  01232A  0101               	movlb	1	; () banked
  5718  01232C  6FD3               	movwf	Travel@Req_Dir& (0+255),b
  5719  01232E  51C0               	movf	(Travel@direction+1)& (0+255),w,b
  5720  012330  0100               	movlb	0	; () banked
  5721  012332  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  5722  012334  0101               	movlb	1	; () banked
  5723  012336  6FD4               	movwf	(Travel@Req_Dir+1)& (0+255),b
  5724                           
  5725                           ;dans.c: 368: if (Req_Dir < 0) {
  5726  012338  AFD4               	btfss	(Travel@Req_Dir+1)& (0+255),7,b
  5727  01233A  D03A               	goto	l2447
  5728                           
  5729                           ; BSR set to: 1
  5730                           ;dans.c: 369: Req_Dir = 83 * Req_Dir*-1;
  5731  01233C  C1D3  F0F9         	movff	Travel@Req_Dir,??_Travel
  5732  012340  C1D4  F0FA         	movff	Travel@Req_Dir+1,??_Travel+1
  5733  012344  0100               	movlb	0	; () banked
  5734  012346  1FF9               	comf	??_Travel& (0+255),f,b
  5735  012348  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  5736  01234A  4BF9               	infsnz	??_Travel& (0+255),f,b
  5737  01234C  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  5738  01234E  C0F9  F060         	movff	??_Travel,___wmul@multiplier
  5739  012352  C0FA  F061         	movff	??_Travel+1,___wmul@multiplier+1
  5740  012356  0E00               	movlw	0
  5741  012358  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5742  01235A  0E53               	movlw	83
  5743  01235C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5744  01235E  ECE4  F0C5         	call	___wmul	;wreg free
  5745  012362  C060  F1D3         	movff	?___wmul,Travel@Req_Dir
  5746  012366  C061  F1D4         	movff	?___wmul+1,Travel@Req_Dir+1
  5747                           
  5748                           ;dans.c: 370: Dir = 1;
  5749  01236A  0E00               	movlw	0
  5750  01236C  0101               	movlb	1	; () banked
  5751  01236E  6FCA               	movwf	(Travel@Dir+1)& (0+255),b
  5752  012370  0E01               	movlw	1
  5753  012372  6FC9               	movwf	Travel@Dir& (0+255),b
  5754                           
  5755                           ; BSR set to: 1
  5756                           ;dans.c: 371: if (Req_Dir > 166) {
  5757  012374  BFD4               	btfsc	(Travel@Req_Dir+1)& (0+255),7,b
  5758  012376  D04E               	goto	l2450
  5759  012378  51D4               	movf	(Travel@Req_Dir+1)& (0+255),w,b
  5760  01237A  E104               	bnz	u13890
  5761  01237C  0EA7               	movlw	167
  5762  01237E  5DD3               	subwf	Travel@Req_Dir& (0+255),w,b
  5763  012380  A0D8               	btfss	status,0,c
  5764  012382  D048               	goto	l2450
  5765  012384                     u13890:
  5766                           
  5767                           ; BSR set to: 1
  5768                           ;dans.c: 372: Req_Dir = 332 - Req_Dir;
  5769  012384  C1D3  F0F9         	movff	Travel@Req_Dir,??_Travel
  5770  012388  C1D4  F0FA         	movff	Travel@Req_Dir+1,??_Travel+1
  5771  01238C  0100               	movlb	0	; () banked
  5772  01238E  1FF9               	comf	??_Travel& (0+255),f,b
  5773  012390  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  5774  012392  4BF9               	infsnz	??_Travel& (0+255),f,b
  5775  012394  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  5776  012396  0E4C               	movlw	76
  5777  012398  25F9               	addwf	??_Travel& (0+255),w,b
  5778  01239A  0101               	movlb	1	; () banked
  5779  01239C  6FD3               	movwf	Travel@Req_Dir& (0+255),b
  5780  01239E  0E01               	movlw	1
  5781  0123A0  0100               	movlb	0	; () banked
  5782  0123A2  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  5783  0123A4  0101               	movlb	1	; () banked
  5784  0123A6  6FD4               	movwf	(Travel@Req_Dir+1)& (0+255),b
  5785                           
  5786                           ; BSR set to: 1
  5787                           ;dans.c: 373: Dir = 0;
  5788  0123A8  0E00               	movlw	0
  5789  0123AA  6FCA               	movwf	(Travel@Dir+1)& (0+255),b
  5790  0123AC  0E00               	movlw	0
  5791  0123AE  D031               	goto	L7
  5792  0123B0                     l2447:
  5793                           
  5794                           ; BSR set to: 1
  5795                           ;dans.c: 376: Req_Dir = 83 * Req_Dir;
  5796                           
  5797                           ; BSR set to: 1
  5798  0123B0  C1D3  F060         	movff	Travel@Req_Dir,___wmul@multiplier
  5799  0123B4  C1D4  F061         	movff	Travel@Req_Dir+1,___wmul@multiplier+1
  5800  0123B8  0E00               	movlw	0
  5801  0123BA  0100               	movlb	0	; () banked
  5802  0123BC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5803  0123BE  0E53               	movlw	83
  5804  0123C0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5805  0123C2  ECE4  F0C5         	call	___wmul	;wreg free
  5806  0123C6  C060  F1D3         	movff	?___wmul,Travel@Req_Dir
  5807  0123CA  C061  F1D4         	movff	?___wmul+1,Travel@Req_Dir+1
  5808                           
  5809                           ;dans.c: 377: Dir = 0;
  5810  0123CE  0E00               	movlw	0
  5811  0123D0  0101               	movlb	1	; () banked
  5812  0123D2  6FCA               	movwf	(Travel@Dir+1)& (0+255),b
  5813  0123D4  0E00               	movlw	0
  5814  0123D6  6FC9               	movwf	Travel@Dir& (0+255),b
  5815                           
  5816                           ; BSR set to: 1
  5817                           ;dans.c: 378: if (Req_Dir > 166) {
  5818  0123D8  BFD4               	btfsc	(Travel@Req_Dir+1)& (0+255),7,b
  5819  0123DA  D01C               	goto	l2450
  5820  0123DC  51D4               	movf	(Travel@Req_Dir+1)& (0+255),w,b
  5821  0123DE  E104               	bnz	u13900
  5822  0123E0  0EA7               	movlw	167
  5823  0123E2  5DD3               	subwf	Travel@Req_Dir& (0+255),w,b
  5824  0123E4  A0D8               	btfss	status,0,c
  5825  0123E6  D016               	goto	l2450
  5826  0123E8                     u13900:
  5827                           
  5828                           ; BSR set to: 1
  5829                           ;dans.c: 379: Req_Dir = 332 - Req_Dir;
  5830  0123E8  C1D3  F0F9         	movff	Travel@Req_Dir,??_Travel
  5831  0123EC  C1D4  F0FA         	movff	Travel@Req_Dir+1,??_Travel+1
  5832  0123F0  0100               	movlb	0	; () banked
  5833  0123F2  1FF9               	comf	??_Travel& (0+255),f,b
  5834  0123F4  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  5835  0123F6  4BF9               	infsnz	??_Travel& (0+255),f,b
  5836  0123F8  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  5837  0123FA  0E4C               	movlw	76
  5838  0123FC  25F9               	addwf	??_Travel& (0+255),w,b
  5839  0123FE  0101               	movlb	1	; () banked
  5840  012400  6FD3               	movwf	Travel@Req_Dir& (0+255),b
  5841  012402  0E01               	movlw	1
  5842  012404  0100               	movlb	0	; () banked
  5843  012406  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  5844  012408  0101               	movlb	1	; () banked
  5845  01240A  6FD4               	movwf	(Travel@Req_Dir+1)& (0+255),b
  5846                           
  5847                           ; BSR set to: 1
  5848                           ;dans.c: 380: Dir = 1;
  5849  01240C  0E00               	movlw	0
  5850  01240E  6FCA               	movwf	(Travel@Dir+1)& (0+255),b
  5851  012410  0E01               	movlw	1
  5852  012412                     L7:
  5853  012412  6FC9               	movwf	Travel@Dir& (0+255),b
  5854  012414                     l2450:
  5855                           
  5856                           ; BSR set to: 1
  5857                           ;dans.c: 381: }
  5858                           ;dans.c: 382: }
  5859                           ;dans.c: 383: Turn(Req_Dir, 200, Dir);
  5860                           
  5861                           ; BSR set to: 1
  5862                           
  5863                           ; BSR set to: 1
  5864  012414  C1D3  F061         	movff	Travel@Req_Dir,Turn@Angle
  5865  012418  C1D4  F062         	movff	Travel@Req_Dir+1,Turn@Angle+1
  5866  01241C  0E00               	movlw	0
  5867  01241E  0100               	movlb	0	; () banked
  5868  012420  6F64               	movwf	(Turn@Speed+1)& (0+255),b
  5869  012422  0EC8               	movlw	200
  5870  012424  6F63               	movwf	Turn@Speed& (0+255),b
  5871  012426  C1C9  F065         	movff	Travel@Dir,Turn@Dir
  5872  01242A  C1CA  F066         	movff	Travel@Dir+1,Turn@Dir+1
  5873  01242E  EC1F  F0BD         	call	_Turn	;wreg free
  5874                           
  5875                           ;dans.c: 384: Current_Direction = direction;
  5876  012432  C1BF  F1F9         	movff	Travel@direction,_Current_Direction
  5877  012436  C1C0  F1FA         	movff	Travel@direction+1,_Current_Direction+1
  5878  01243A                     l2446:
  5879                           
  5880                           ;dans.c: 385: }
  5881                           ;dans.c: 386: if (Wall == 0 && flag == 0) {
  5882  01243A  0101               	movlb	1	; () banked
  5883  01243C  51C7               	movf	Travel@Wall& (0+255),w,b
  5884  01243E  11C8               	iorwf	(Travel@Wall+1)& (0+255),w,b
  5885  012440  A4D8               	btfss	status,2,c
  5886  012442  D006               	goto	l2451
  5887                           
  5888                           ; BSR set to: 1
  5889  012444  5138               	movf	_flag& (0+255),w,b
  5890  012446  1139               	iorwf	(_flag+1)& (0+255),w,b
  5891  012448  A4D8               	btfss	status,2,c
  5892  01244A  D002               	goto	l2451
  5893                           
  5894                           ; BSR set to: 1
  5895                           ;dans.c: 388: Prev_Angle = 0;
  5896  01244C  0E00               	movlw	0
  5897  01244E  D014               	goto	L8
  5898  012450                     l2451:
  5899                           
  5900                           ; BSR set to: 1
  5901                           
  5902                           ; BSR set to: 1
  5903  012450  51C7               	movf	Travel@Wall& (0+255),w,b
  5904  012452  11C8               	iorwf	(Travel@Wall+1)& (0+255),w,b
  5905  012454  A4D8               	btfss	status,2,c
  5906  012456  D011               	goto	l2453
  5907                           
  5908                           ; BSR set to: 1
  5909  012458  5138               	movf	_flag& (0+255),w,b
  5910  01245A  1139               	iorwf	(_flag+1)& (0+255),w,b
  5911  01245C  B4D8               	btfsc	status,2,c
  5912  01245E  D00D               	goto	l2453
  5913                           
  5914                           ; BSR set to: 1
  5915                           ;dans.c: 390: if (Prev_Angle != 0)
  5916  012460  5160               	movf	_Prev_Angle& (0+255),w,b
  5917  012462  B4D8               	btfsc	status,2,c
  5918  012464  D007               	goto	l2454
  5919                           
  5920                           ; BSR set to: 1
  5921                           ;dans.c: 391: Move_ADC_To(-90);
  5922  012466  0EFF               	movlw	255
  5923  012468  0100               	movlb	0	; () banked
  5924  01246A  6FAA               	movwf	(Move_ADC_To@Angle+1)& (0+255),b
  5925  01246C  0EA6               	movlw	166
  5926  01246E  6FA9               	movwf	Move_ADC_To@Angle& (0+255),b
  5927  012470  EC44  F0AD         	call	_Move_ADC_To	;wreg free
  5928  012474                     l2454:
  5929                           
  5930                           ;dans.c: 392: Prev_Angle = 0;
  5931  012474  0E00               	movlw	0
  5932  012476  0101               	movlb	1	; () banked
  5933  012478                     L8:
  5934  012478  6F60               	movwf	_Prev_Angle& (0+255),b
  5935  01247A                     l2453:
  5936                           
  5937                           ; BSR set to: 1
  5938                           ;dans.c: 393: }
  5939                           ;dans.c: 394: if (Wall == 1 && flag != 0) {
  5940                           
  5941                           ; BSR set to: 1
  5942                           
  5943                           ; BSR set to: 1
  5944  01247A  05C7               	decf	Travel@Wall& (0+255),w,b
  5945  01247C  11C8               	iorwf	(Travel@Wall+1)& (0+255),w,b
  5946  01247E  A4D8               	btfss	status,2,c
  5947  012480  D011               	goto	l2455
  5948                           
  5949                           ; BSR set to: 1
  5950  012482  5138               	movf	_flag& (0+255),w,b
  5951  012484  1139               	iorwf	(_flag+1)& (0+255),w,b
  5952  012486  B4D8               	btfsc	status,2,c
  5953  012488  D00D               	goto	l2455
  5954                           
  5955                           ; BSR set to: 1
  5956                           ;dans.c: 395: if (Prev_Angle != 1)
  5957  01248A  0560               	decf	_Prev_Angle& (0+255),w,b
  5958  01248C  B4D8               	btfsc	status,2,c
  5959  01248E  D007               	goto	l2456
  5960                           
  5961                           ; BSR set to: 1
  5962                           ;dans.c: 396: Move_ADC_To(90);
  5963  012490  0E00               	movlw	0
  5964  012492  0100               	movlb	0	; () banked
  5965  012494  6FAA               	movwf	(Move_ADC_To@Angle+1)& (0+255),b
  5966  012496  0E5A               	movlw	90
  5967  012498  6FA9               	movwf	Move_ADC_To@Angle& (0+255),b
  5968  01249A  EC44  F0AD         	call	_Move_ADC_To	;wreg free
  5969  01249E                     l2456:
  5970                           
  5971                           ;dans.c: 397: Prev_Angle = 1;
  5972  01249E  0E01               	movlw	1
  5973  0124A0  0101               	movlb	1	; () banked
  5974  0124A2  6F60               	movwf	_Prev_Angle& (0+255),b
  5975  0124A4                     l2455:
  5976                           
  5977                           ; BSR set to: 1
  5978                           ;dans.c: 398: }
  5979                           ;dans.c: 400: Drive(Spd, Spd);
  5980                           
  5981                           ; BSR set to: 1
  5982  0124A4  C1C5  F061         	movff	Travel@Spd,Drive@SpeedL
  5983  0124A8  C1C6  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
  5984  0124AC  C1C5  F063         	movff	Travel@Spd,Drive@SpeedR
  5985  0124B0  C1C6  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
  5986  0124B4  ECBB  F0C2         	call	_Drive	;wreg free
  5987                           
  5988                           ;dans.c: 403: ADCAverage();
  5989  0124B8  EC0C  F09E         	call	_ADCAverage	;wreg free
  5990                           
  5991                           ;dans.c: 405: k = 4;
  5992  0124BC  0E00               	movlw	0
  5993  0124BE  0101               	movlb	1	; () banked
  5994  0124C0  6F3D               	movwf	(_k+1)& (0+255),b
  5995  0124C2  0E04               	movlw	4
  5996  0124C4  6F3C               	movwf	_k& (0+255),b
  5997                           
  5998                           ; BSR set to: 1
  5999                           ;dans.c: 406: int error;
  6000                           ;dans.c: 407: int spd1 = 0;
  6001  0124C6  0E00               	movlw	0
  6002  0124C8  6FCC               	movwf	(Travel@spd1+1)& (0+255),b
  6003  0124CA  0E00               	movlw	0
  6004  0124CC  6FCB               	movwf	Travel@spd1& (0+255),b
  6005                           
  6006                           ; BSR set to: 1
  6007                           ;dans.c: 408: int spd2 = 0;
  6008  0124CE  0E00               	movlw	0
  6009  0124D0  6FCE               	movwf	(Travel@spd2+1)& (0+255),b
  6010  0124D2  0E00               	movlw	0
  6011  0124D4  6FCD               	movwf	Travel@spd2& (0+255),b
  6012                           
  6013                           ;dans.c: 410: while (Dist_Travelled < Dist) {
  6014  0124D6  D19F               	goto	l2476
  6015  0124D8                     
  6016                           ;dans.c: 413: ADCAverage();
  6017                           
  6018                           ; BSR set to: 1
  6019  0124D8  EC0C  F09E         	call	_ADCAverage	;wreg free
  6020                           
  6021                           ;dans.c: 414: error = Desired_Level - average;
  6022  0124DC  C02C  F0F9         	movff	_average,??_Travel
  6023  0124E0  C02D  F0FA         	movff	_average+1,??_Travel+1
  6024  0124E4  0100               	movlb	0	; () banked
  6025  0124E6  1FF9               	comf	??_Travel& (0+255),f,b
  6026  0124E8  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  6027  0124EA  4BF9               	infsnz	??_Travel& (0+255),f,b
  6028  0124EC  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  6029  0124EE  0101               	movlb	1	; () banked
  6030  0124F0  51F3               	movf	_Desired_Level& (0+255),w,b
  6031  0124F2  0100               	movlb	0	; () banked
  6032  0124F4  25F9               	addwf	??_Travel& (0+255),w,b
  6033  0124F6  0101               	movlb	1	; () banked
  6034  0124F8  6FD5               	movwf	Travel@error& (0+255),b
  6035  0124FA  51F4               	movf	(_Desired_Level+1)& (0+255),w,b
  6036  0124FC  0100               	movlb	0	; () banked
  6037  0124FE  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  6038  012500  0101               	movlb	1	; () banked
  6039  012502  6FD6               	movwf	(Travel@error+1)& (0+255),b
  6040                           
  6041                           ; BSR set to: 1
  6042                           ;dans.c: 415: error *= k;
  6043  012504  C1D5  F060         	movff	Travel@error,___wmul@multiplier
  6044  012508  C1D6  F061         	movff	Travel@error+1,___wmul@multiplier+1
  6045  01250C  C13C  F062         	movff	_k,___wmul@multiplicand
  6046  012510  C13D  F063         	movff	_k+1,___wmul@multiplicand+1
  6047  012514  ECE4  F0C5         	call	___wmul	;wreg free
  6048  012518  C060  F1D5         	movff	?___wmul,Travel@error
  6049  01251C  C061  F1D6         	movff	?___wmul+1,Travel@error+1
  6050                           
  6051                           ;dans.c: 417: if (average <= 90) {
  6052  012520  BE2D               	btfsc	_average+1,7,c
  6053  012522  D006               	goto	u13990
  6054  012524  502D               	movf	_average+1,w,c
  6055  012526  E103               	bnz	u13991
  6056  012528  0E5B               	movlw	91
  6057  01252A  5C2C               	subwf	_average,w,c
  6058  01252C  B0D8               	btfsc	status,0,c
  6059  01252E                     u13991:
  6060  01252E  D0B0               	goto	l2459
  6061  012530                     u13990:
  6062                           
  6063                           ;dans.c: 425: if (error == Desired_Level + k || error == Desired_Level - k) {
  6064  012530  0101               	movlb	1	; () banked
  6065  012532  513C               	movf	_k& (0+255),w,b
  6066  012534  25F3               	addwf	_Desired_Level& (0+255),w,b
  6067  012536  0100               	movlb	0	; () banked
  6068  012538  6FF9               	movwf	??_Travel& (0+255),b
  6069  01253A  0101               	movlb	1	; () banked
  6070  01253C  513D               	movf	(_k+1)& (0+255),w,b
  6071  01253E  21F4               	addwfc	(_Desired_Level+1)& (0+255),w,b
  6072  012540  0100               	movlb	0	; () banked
  6073  012542  6FFA               	movwf	(??_Travel+1)& (0+255),b
  6074  012544  0101               	movlb	1	; () banked
  6075  012546  51D5               	movf	Travel@error& (0+255),w,b
  6076  012548  0100               	movlb	0	; () banked
  6077  01254A  19F9               	xorwf	??_Travel& (0+255),w,b
  6078  01254C  E106               	bnz	u14000
  6079  01254E  0101               	movlb	1	; () banked
  6080  012550  51D6               	movf	(Travel@error+1)& (0+255),w,b
  6081  012552  0100               	movlb	0	; () banked
  6082  012554  19FA               	xorwf	(??_Travel+1)& (0+255),w,b
  6083  012556  B4D8               	btfsc	status,2,c
  6084  012558  D01B               	goto	u14010
  6085  01255A                     u14000:
  6086                           
  6087                           ; BSR set to: 0
  6088  01255A  C13C  F0F9         	movff	_k,??_Travel
  6089  01255E  C13D  F0FA         	movff	_k+1,??_Travel+1
  6090  012562  1FF9               	comf	??_Travel& (0+255),f,b
  6091  012564  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  6092  012566  4BF9               	infsnz	??_Travel& (0+255),f,b
  6093  012568  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  6094  01256A  0101               	movlb	1	; () banked
  6095  01256C  51F3               	movf	_Desired_Level& (0+255),w,b
  6096  01256E  0100               	movlb	0	; () banked
  6097  012570  27F9               	addwf	??_Travel& (0+255),f,b
  6098  012572  0101               	movlb	1	; () banked
  6099  012574  51F4               	movf	(_Desired_Level+1)& (0+255),w,b
  6100  012576  0100               	movlb	0	; () banked
  6101  012578  23FA               	addwfc	(??_Travel+1)& (0+255),f,b
  6102  01257A  0101               	movlb	1	; () banked
  6103  01257C  51D5               	movf	Travel@error& (0+255),w,b
  6104  01257E  0100               	movlb	0	; () banked
  6105  012580  19F9               	xorwf	??_Travel& (0+255),w,b
  6106  012582  E110               	bnz	l16603
  6107  012584  0101               	movlb	1	; () banked
  6108  012586  51D6               	movf	(Travel@error+1)& (0+255),w,b
  6109  012588  0100               	movlb	0	; () banked
  6110  01258A  19FA               	xorwf	(??_Travel+1)& (0+255),w,b
  6111  01258C  A4D8               	btfss	status,2,c
  6112  01258E  D00A               	goto	l2460
  6113  012590                     u14010:
  6114                           
  6115                           ; BSR set to: 0
  6116                           ;dans.c: 426: Drive(Spd, Spd);
  6117                           
  6118                           ; BSR set to: 0
  6119  012590  C1C5  F061         	movff	Travel@Spd,Drive@SpeedL
  6120  012594  C1C6  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
  6121  012598  C1C5  F063         	movff	Travel@Spd,Drive@SpeedR
  6122  01259C  C1C6  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
  6123  0125A0  ECBB  F0C2         	call	_Drive	;wreg free
  6124  0125A4                     l2460:
  6125  0125A4                     l16603:
  6126                           
  6127                           ;dans.c: 427: }
  6128                           ;dans.c: 428: if (error >= 0) {
  6129  0125A4  0101               	movlb	1	; () banked
  6130  0125A6  BFD6               	btfsc	(Travel@error+1)& (0+255),7,b
  6131  0125A8  D032               	goto	l2466
  6132                           
  6133                           ; BSR set to: 1
  6134                           ;dans.c: 430: spd1 = Spd - error;
  6135  0125AA  C1D5  F0F9         	movff	Travel@error,??_Travel
  6136  0125AE  C1D6  F0FA         	movff	Travel@error+1,??_Travel+1
  6137  0125B2  0100               	movlb	0	; () banked
  6138  0125B4  1FF9               	comf	??_Travel& (0+255),f,b
  6139  0125B6  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  6140  0125B8  4BF9               	infsnz	??_Travel& (0+255),f,b
  6141  0125BA  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  6142  0125BC  0101               	movlb	1	; () banked
  6143  0125BE  51C5               	movf	Travel@Spd& (0+255),w,b
  6144  0125C0  0100               	movlb	0	; () banked
  6145  0125C2  25F9               	addwf	??_Travel& (0+255),w,b
  6146  0125C4  0101               	movlb	1	; () banked
  6147  0125C6  6FCB               	movwf	Travel@spd1& (0+255),b
  6148  0125C8  51C6               	movf	(Travel@Spd+1)& (0+255),w,b
  6149  0125CA  0100               	movlb	0	; () banked
  6150  0125CC  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  6151  0125CE  0101               	movlb	1	; () banked
  6152  0125D0  6FCC               	movwf	(Travel@spd1+1)& (0+255),b
  6153                           
  6154                           ;dans.c: 431: if (Wall == 0) {
  6155  0125D2  51C7               	movf	Travel@Wall& (0+255),w,b
  6156  0125D4  11C8               	iorwf	(Travel@Wall+1)& (0+255),w,b
  6157  0125D6  A4D8               	btfss	status,2,c
  6158  0125D8  D00B               	goto	l2464
  6159                           
  6160                           ; BSR set to: 1
  6161                           ;dans.c: 432: Drive(spd1, Spd);
  6162  0125DA  C1CB  F061         	movff	Travel@spd1,Drive@SpeedL
  6163  0125DE  C1CC  F062         	movff	Travel@spd1+1,Drive@SpeedL+1
  6164  0125E2  C1C5  F063         	movff	Travel@Spd,Drive@SpeedR
  6165  0125E6  C1C6  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
  6166  0125EA  ECBB  F0C2         	call	_Drive	;wreg free
  6167                           
  6168                           ;dans.c: 433: } else if (Wall == 1) {
  6169  0125EE  D00F               	goto	l2466
  6170  0125F0                     l2464:
  6171  0125F0  0101               	movlb	1	; () banked
  6172  0125F2  05C7               	decf	Travel@Wall& (0+255),w,b
  6173  0125F4  11C8               	iorwf	(Travel@Wall+1)& (0+255),w,b
  6174  0125F6  A4D8               	btfss	status,2,c
  6175  0125F8  D00A               	goto	l2466
  6176                           
  6177                           ; BSR set to: 1
  6178                           ;dans.c: 434: Drive(Spd, spd1);
  6179  0125FA  C1C5  F061         	movff	Travel@Spd,Drive@SpeedL
  6180  0125FE  C1C6  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
  6181  012602  C1CB  F063         	movff	Travel@spd1,Drive@SpeedR
  6182  012606  C1CC  F064         	movff	Travel@spd1+1,Drive@SpeedR+1
  6183  01260A  ECBB  F0C2         	call	_Drive	;wreg free
  6184  01260E                     l2466:
  6185                           
  6186                           ;dans.c: 435: }
  6187                           ;dans.c: 437: }
  6188                           ;dans.c: 438: if (error <= 0) {
  6189  01260E  0101               	movlb	1	; () banked
  6190  012610  BFD6               	btfsc	(Travel@error+1)& (0+255),7,b
  6191  012612  D005               	goto	u14050
  6192  012614  51D6               	movf	(Travel@error+1)& (0+255),w,b
  6193  012616  E146               	bnz	l2475
  6194  012618  05D5               	decf	Travel@error& (0+255),w,b
  6195  01261A  B0D8               	btfsc	status,0,c
  6196  01261C  D043               	goto	l2475
  6197  01261E                     u14050:
  6198                           
  6199                           ; BSR set to: 1
  6200                           ;dans.c: 439: error = ((error<0)?-error:error);
  6201  01261E  AFD6               	btfss	(Travel@error+1)& (0+255),7,b
  6202  012620  D004               	goto	l2471
  6203                           
  6204                           ; BSR set to: 1
  6205                           
  6206                           ; BSR set to: 1
  6207                           
  6208                           ; BSR set to: 1
  6209  012622  6DD5               	negf	Travel@error& (0+255),b
  6210  012624  1FD6               	comf	(Travel@error+1)& (0+255),f,b
  6211  012626  B0D8               	btfsc	status,0,c
  6212  012628  2BD6               	incf	(Travel@error+1)& (0+255),f,b
  6213  01262A                     l2471:
  6214                           
  6215                           ; BSR set to: 1
  6216                           ;dans.c: 440: spd2 = Spd - error;
  6217                           
  6218                           ; BSR set to: 1
  6219  01262A  C1D5  F0F9         	movff	Travel@error,??_Travel
  6220  01262E  C1D6  F0FA         	movff	Travel@error+1,??_Travel+1
  6221  012632  0100               	movlb	0	; () banked
  6222  012634  1FF9               	comf	??_Travel& (0+255),f,b
  6223  012636  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  6224  012638  4BF9               	infsnz	??_Travel& (0+255),f,b
  6225  01263A  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  6226  01263C  0101               	movlb	1	; () banked
  6227  01263E  51C5               	movf	Travel@Spd& (0+255),w,b
  6228  012640  0100               	movlb	0	; () banked
  6229  012642  25F9               	addwf	??_Travel& (0+255),w,b
  6230  012644  0101               	movlb	1	; () banked
  6231  012646  6FCD               	movwf	Travel@spd2& (0+255),b
  6232  012648  51C6               	movf	(Travel@Spd+1)& (0+255),w,b
  6233  01264A  0100               	movlb	0	; () banked
  6234  01264C  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  6235  01264E  0101               	movlb	1	; () banked
  6236  012650  6FCE               	movwf	(Travel@spd2+1)& (0+255),b
  6237                           
  6238                           ; BSR set to: 1
  6239                           ;dans.c: 442: if (Wall == 0) {
  6240  012652  51C7               	movf	Travel@Wall& (0+255),w,b
  6241  012654  11C8               	iorwf	(Travel@Wall+1)& (0+255),w,b
  6242  012656  A4D8               	btfss	status,2,c
  6243  012658  D00B               	goto	l2472
  6244                           
  6245                           ; BSR set to: 1
  6246                           ;dans.c: 443: Drive(Spd, spd2);
  6247  01265A  C1C5  F061         	movff	Travel@Spd,Drive@SpeedL
  6248  01265E  C1C6  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
  6249  012662  C1CD  F063         	movff	Travel@spd2,Drive@SpeedR
  6250  012666  C1CE  F064         	movff	Travel@spd2+1,Drive@SpeedR+1
  6251  01266A  ECBB  F0C2         	call	_Drive	;wreg free
  6252                           
  6253                           ;dans.c: 444: } else if (Wall == 1) {
  6254  01266E  D01A               	goto	l2475
  6255  012670                     l2472:
  6256  012670  0101               	movlb	1	; () banked
  6257  012672  05C7               	decf	Travel@Wall& (0+255),w,b
  6258  012674  11C8               	iorwf	(Travel@Wall+1)& (0+255),w,b
  6259  012676  A4D8               	btfss	status,2,c
  6260  012678  D015               	goto	l2475
  6261                           
  6262                           ; BSR set to: 1
  6263                           ;dans.c: 445: Drive(spd2, Spd);
  6264  01267A  C1CD  F061         	movff	Travel@spd2,Drive@SpeedL
  6265  01267E  C1CE  F062         	movff	Travel@spd2+1,Drive@SpeedL+1
  6266  012682  C1C5  F063         	movff	Travel@Spd,Drive@SpeedR
  6267  012686  C1C6  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
  6268  01268A  ECBB  F0C2         	call	_Drive	;wreg free
  6269                           
  6270                           ;dans.c: 446: }
  6271                           ;dans.c: 447: }
  6272                           ;dans.c: 449: } else
  6273  01268E  D00A               	goto	l2475
  6274  012690                     l2459:
  6275                           
  6276                           ;dans.c: 450: Drive(Spd, Spd);
  6277  012690  C1C5  F061         	movff	Travel@Spd,Drive@SpeedL
  6278  012694  C1C6  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
  6279  012698  C1C5  F063         	movff	Travel@Spd,Drive@SpeedR
  6280  01269C  C1C6  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
  6281  0126A0  ECBB  F0C2         	call	_Drive	;wreg free
  6282  0126A4                     l2475:
  6283                           
  6284                           ;dans.c: 452: Dist_Travelled += UpdateDistance();
  6285  0126A4  EC44  F0BF         	call	_UpdateDistance	;wreg free
  6286  0126A8  0100               	movlb	0	; () banked
  6287  0126AA  5161               	movf	?_UpdateDistance& (0+255),w,b
  6288  0126AC  0101               	movlb	1	; () banked
  6289  0126AE  27D1               	addwf	Travel@Dist_Travelled& (0+255),f,b
  6290  0126B0  0100               	movlb	0	; () banked
  6291  0126B2  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
  6292  0126B4  0101               	movlb	1	; () banked
  6293  0126B6  23D2               	addwfc	(Travel@Dist_Travelled+1)& (0+255),f,b
  6294                           
  6295                           ;dans.c: 456: if (Get_VirtualWall_State() && !Detect_Victim()) {
  6296  0126B8  EC32  F0C6         	call	_Get_VirtualWall_State	;wreg free
  6297  0126BC  0100               	movlb	0	; () banked
  6298  0126BE  5161               	movf	?_Get_VirtualWall_State& (0+255),w,b
  6299  0126C0  1162               	iorwf	(?_Get_VirtualWall_State+1)& (0+255),w,b
  6300  0126C2  B4D8               	btfsc	status,2,c
  6301  0126C4  D0A8               	goto	l2476
  6302                           
  6303                           ; BSR set to: 0
  6304  0126C6  ECDA  F0C1         	call	_Detect_Victim	;wreg free
  6305  0126CA  0100               	movlb	0	; () banked
  6306  0126CC  5161               	movf	?_Detect_Victim& (0+255),w,b
  6307  0126CE  1162               	iorwf	(?_Detect_Victim+1)& (0+255),w,b
  6308  0126D0  A4D8               	btfss	status,2,c
  6309  0126D2  D0A1               	goto	l2476
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;dans.c: 457: maze[X_Pos][Y_Pos].walls[direction] = 1;
  6313  0126D4  C140  F060         	movff	_X_Pos,___wmul@multiplier
  6314  0126D8  C141  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  6315  0126DC  0E00               	movlw	0
  6316  0126DE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6317  0126E0  0E32               	movlw	50
  6318  0126E2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6319  0126E4  ECE4  F0C5         	call	___wmul	;wreg free
  6320  0126E8  0E04               	movlw	4
  6321  0126EA  0101               	movlb	1	; () banked
  6322  0126EC  25BF               	addwf	Travel@direction& (0+255),w,b
  6323  0126EE  0100               	movlb	0	; () banked
  6324  0126F0  6FF9               	movwf	??_Travel& (0+255),b
  6325  0126F2  0E00               	movlw	0
  6326  0126F4  0101               	movlb	1	; () banked
  6327  0126F6  21C0               	addwfc	(Travel@direction+1)& (0+255),w,b
  6328  0126F8  0100               	movlb	0	; () banked
  6329  0126FA  6FFA               	movwf	(??_Travel+1)& (0+255),b
  6330  0126FC  0E00               	movlw	low _maze
  6331  0126FE  6FFB               	movwf	(??_Travel+2)& (0+255),b
  6332  012700  0E02               	movlw	high _maze
  6333  012702  6FFC               	movwf	(??_Travel+3)& (0+255),b
  6334  012704  51F9               	movf	??_Travel& (0+255),w,b
  6335  012706  27FB               	addwf	(??_Travel+2)& (0+255),f,b
  6336  012708  51FA               	movf	(??_Travel+1)& (0+255),w,b
  6337  01270A  23FC               	addwfc	(??_Travel+3)& (0+255),f,b
  6338  01270C  5160               	movf	?___wmul& (0+255),w,b
  6339  01270E  27FB               	addwf	(??_Travel+2)& (0+255),f,b
  6340  012710  5161               	movf	(?___wmul+1)& (0+255),w,b
  6341  012712  23FC               	addwfc	(??_Travel+3)& (0+255),f,b
  6342  012714  C13E  F060         	movff	_Y_Pos,___wmul@multiplier
  6343  012718  C13F  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  6344  01271C  0E00               	movlw	0
  6345  01271E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6346  012720  0E0A               	movlw	10
  6347  012722  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6348  012724  ECE4  F0C5         	call	___wmul	;wreg free
  6349  012728  0100               	movlb	0	; () banked
  6350  01272A  5160               	movf	?___wmul& (0+255),w,b
  6351  01272C  25FB               	addwf	(??_Travel+2)& (0+255),w,b
  6352  01272E  6ED9               	movwf	fsr2l,c
  6353  012730  5161               	movf	(?___wmul+1)& (0+255),w,b
  6354  012732  21FC               	addwfc	(??_Travel+3)& (0+255),w,b
  6355  012734  6EDA               	movwf	fsr2h,c
  6356  012736  0E01               	movlw	1
  6357  012738  6EDF               	movwf	indf2,c
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;dans.c: 459: int rev_Dist = 0;
  6361  01273A  0E00               	movlw	0
  6362  01273C  0101               	movlb	1	; () banked
  6363  01273E  6FD0               	movwf	(Travel@rev_Dist+1)& (0+255),b
  6364  012740  0E00               	movlw	0
  6365  012742  6FCF               	movwf	Travel@rev_Dist& (0+255),b
  6366                           
  6367                           ; BSR set to: 1
  6368                           ;dans.c: 460: Robot_Stop();
  6369  012744  EC64  F0C6         	call	_Robot_Stop	;wreg free
  6370                           
  6371                           ;dans.c: 461: printf("WALL FOUND\n");
  6372  012748  0E8B               	movlw	low STR_25
  6373  01274A  0100               	movlb	0	; () banked
  6374  01274C  6F75               	movwf	printf@f& (0+255),b
  6375  01274E  0EFF               	movlw	high STR_25
  6376  012750  6F76               	movwf	(printf@f+1)& (0+255),b
  6377  012752  EC90  F0AC         	call	_printf	;wreg free
  6378                           
  6379                           ;dans.c: 462: Console_Render();
  6380  012756  ECB3  F0A8         	call	_Console_Render	;wreg free
  6381                           
  6382                           ;dans.c: 463: Drive(-Spd, -Spd);
  6383  01275A  C1C5  F0F9         	movff	Travel@Spd,??_Travel
  6384  01275E  C1C6  F0FA         	movff	Travel@Spd+1,??_Travel+1
  6385  012762  0100               	movlb	0	; () banked
  6386  012764  1FF9               	comf	??_Travel& (0+255),f,b
  6387  012766  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  6388  012768  4BF9               	infsnz	??_Travel& (0+255),f,b
  6389  01276A  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  6390  01276C  C0F9  F061         	movff	??_Travel,Drive@SpeedL
  6391  012770  C0FA  F062         	movff	??_Travel+1,Drive@SpeedL+1
  6392  012774  C1C5  F0FB         	movff	Travel@Spd,??_Travel+2
  6393  012778  C1C6  F0FC         	movff	Travel@Spd+1,??_Travel+3
  6394  01277C  1FFB               	comf	(??_Travel+2)& (0+255),f,b
  6395  01277E  1FFC               	comf	(??_Travel+3)& (0+255),f,b
  6396  012780  4BFB               	infsnz	(??_Travel+2)& (0+255),f,b
  6397  012782  2BFC               	incf	(??_Travel+3)& (0+255),f,b
  6398  012784  C0FB  F063         	movff	??_Travel+2,Drive@SpeedR
  6399  012788  C0FC  F064         	movff	??_Travel+3,Drive@SpeedR+1
  6400  01278C  ECBB  F0C2         	call	_Drive	;wreg free
  6401                           
  6402                           ;dans.c: 464: UpdateDistance();
  6403  012790  EC44  F0BF         	call	_UpdateDistance	;wreg free
  6404                           
  6405                           ;dans.c: 465: while (rev_Dist >= -Dist_Travelled) {
  6406  012794  D028               	goto	l2477
  6407  012796                     
  6408                           ;dans.c: 467: rev_Dist += UpdateDistance();
  6409  012796  EC44  F0BF         	call	_UpdateDistance	;wreg free
  6410  01279A  0100               	movlb	0	; () banked
  6411  01279C  5161               	movf	?_UpdateDistance& (0+255),w,b
  6412  01279E  0101               	movlb	1	; () banked
  6413  0127A0  27CF               	addwf	Travel@rev_Dist& (0+255),f,b
  6414  0127A2  0100               	movlb	0	; () banked
  6415  0127A4  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
  6416  0127A6  0101               	movlb	1	; () banked
  6417  0127A8  23D0               	addwfc	(Travel@rev_Dist+1)& (0+255),f,b
  6418                           
  6419                           ; BSR set to: 1
  6420                           ;dans.c: 468: Console_Render();
  6421  0127AA  ECB3  F0A8         	call	_Console_Render	;wreg free
  6422                           
  6423                           ;dans.c: 469: printf("%c", (char)35);
  6424  0127AE  0EFB               	movlw	low STR_1
  6425  0127B0  0100               	movlb	0	; () banked
  6426  0127B2  6F75               	movwf	printf@f& (0+255),b
  6427  0127B4  0EFF               	movlw	high STR_1
  6428  0127B6  6F76               	movwf	(printf@f+1)& (0+255),b
  6429  0127B8  0E00               	movlw	0
  6430  0127BA  6F78               	movwf	(?_printf+3)& (0+255),b
  6431  0127BC  0E23               	movlw	35
  6432  0127BE  6F77               	movwf	(?_printf+2)& (0+255),b
  6433  0127C0  EC90  F0AC         	call	_printf	;wreg free
  6434                           
  6435                           ;dans.c: 470: printf("rev:%d Tar: %d\n", rev_Dist, Dist_Travelled);
  6436  0127C4  0E5C               	movlw	low STR_27
  6437  0127C6  0100               	movlb	0	; () banked
  6438  0127C8  6F75               	movwf	printf@f& (0+255),b
  6439  0127CA  0EFF               	movlw	high STR_27
  6440  0127CC  6F76               	movwf	(printf@f+1)& (0+255),b
  6441  0127CE  C1CF  F077         	movff	Travel@rev_Dist,?_printf+2
  6442  0127D2  C1D0  F078         	movff	Travel@rev_Dist+1,?_printf+3
  6443  0127D6  C1D1  F079         	movff	Travel@Dist_Travelled,?_printf+4
  6444  0127DA  C1D2  F07A         	movff	Travel@Dist_Travelled+1,?_printf+5
  6445  0127DE  EC90  F0AC         	call	_printf	;wreg free
  6446                           
  6447                           ;dans.c: 471: Console_Render();
  6448  0127E2  ECB3  F0A8         	call	_Console_Render	;wreg free
  6449  0127E6                     l2477:
  6450  0127E6  C1D1  F0F9         	movff	Travel@Dist_Travelled,??_Travel
  6451  0127EA  C1D2  F0FA         	movff	Travel@Dist_Travelled+1,??_Travel+1
  6452  0127EE  0100               	movlb	0	; () banked
  6453  0127F0  1FF9               	comf	??_Travel& (0+255),f,b
  6454  0127F2  1FFA               	comf	(??_Travel+1)& (0+255),f,b
  6455  0127F4  4BF9               	infsnz	??_Travel& (0+255),f,b
  6456  0127F6  2BFA               	incf	(??_Travel+1)& (0+255),f,b
  6457  0127F8  51F9               	movf	??_Travel& (0+255),w,b
  6458  0127FA  0101               	movlb	1	; () banked
  6459  0127FC  5DCF               	subwf	Travel@rev_Dist& (0+255),w,b
  6460  0127FE  51D0               	movf	(Travel@rev_Dist+1)& (0+255),w,b
  6461  012800  0A80               	xorlw	128
  6462  012802  0100               	movlb	0	; () banked
  6463  012804  6FFB               	movwf	(??_Travel+2)& (0+255),b
  6464  012806  51FA               	movf	(??_Travel+1)& (0+255),w,b
  6465  012808  0A80               	xorlw	128
  6466  01280A  59FB               	subwfb	(??_Travel+2)& (0+255),w,b
  6467  01280C  B0D8               	btfsc	status,0,c
  6468  01280E  D7C3               	goto	l2478
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;dans.c: 472: }
  6472                           ;dans.c: 473: Robot_Stop();
  6473                           
  6474                           ; BSR set to: 0
  6475  012810  EC64  F0C6         	call	_Robot_Stop	;wreg free
  6476                           
  6477                           ;dans.c: 474: return;
  6478  012814  0012               	return	
  6479  012816                     l2476:
  6480  012816  0101               	movlb	1	; () banked
  6481  012818  51C1               	movf	Travel@Dist& (0+255),w,b
  6482  01281A  5DD1               	subwf	Travel@Dist_Travelled& (0+255),w,b
  6483  01281C  51D2               	movf	(Travel@Dist_Travelled+1)& (0+255),w,b
  6484  01281E  0A80               	xorlw	128
  6485  012820  0100               	movlb	0	; () banked
  6486  012822  6FF9               	movwf	??_Travel& (0+255),b
  6487  012824  0101               	movlb	1	; () banked
  6488  012826  51C2               	movf	(Travel@Dist+1)& (0+255),w,b
  6489  012828  0A80               	xorlw	128
  6490  01282A  0100               	movlb	0	; () banked
  6491  01282C  59F9               	subwfb	??_Travel& (0+255),w,b
  6492  01282E  A0D8               	btfss	status,0,c
  6493  012830  D653               	goto	l2458
  6494                           
  6495                           ; BSR set to: 0
  6496                           ;dans.c: 475: }
  6497                           ;dans.c: 479: }
  6498                           ;dans.c: 480: if (direction == 0) {
  6499                           
  6500                           ; BSR set to: 0
  6501  012832  0101               	movlb	1	; () banked
  6502  012834  51BF               	movf	Travel@direction& (0+255),w,b
  6503  012836  11C0               	iorwf	(Travel@direction+1)& (0+255),w,b
  6504  012838  A4D8               	btfss	status,2,c
  6505  01283A  D004               	goto	l2482
  6506                           
  6507                           ; BSR set to: 1
  6508                           ;dans.c: 481: X_Pos -= 1;
  6509  01283C  0740               	decf	_X_Pos& (0+255),f,b
  6510  01283E  A0D8               	btfss	status,0,c
  6511  012840  0741               	decf	(_X_Pos+1)& (0+255),f,b
  6512                           
  6513                           ;dans.c: 482: } else if (direction == 1) {
  6514  012842  D017               	goto	l2488
  6515  012844                     l2482:
  6516                           
  6517                           ; BSR set to: 1
  6518                           
  6519                           ; BSR set to: 1
  6520  012844  05BF               	decf	Travel@direction& (0+255),w,b
  6521  012846  11C0               	iorwf	(Travel@direction+1)& (0+255),w,b
  6522  012848  A4D8               	btfss	status,2,c
  6523  01284A  D003               	goto	l2484
  6524                           
  6525                           ; BSR set to: 1
  6526                           ;dans.c: 483: Y_Pos += 1;
  6527  01284C  4B3E               	infsnz	_Y_Pos& (0+255),f,b
  6528  01284E  2B3F               	incf	(_Y_Pos+1)& (0+255),f,b
  6529                           
  6530                           ;dans.c: 484: } else if (direction == 2) {
  6531  012850  D010               	goto	l2488
  6532  012852                     l2484:
  6533                           
  6534                           ; BSR set to: 1
  6535                           
  6536                           ; BSR set to: 1
  6537  012852  0E02               	movlw	2
  6538  012854  19BF               	xorwf	Travel@direction& (0+255),w,b
  6539  012856  11C0               	iorwf	(Travel@direction+1)& (0+255),w,b
  6540  012858  A4D8               	btfss	status,2,c
  6541  01285A  D003               	goto	l2486
  6542                           
  6543                           ; BSR set to: 1
  6544                           ;dans.c: 485: X_Pos += 1;
  6545  01285C  4B40               	infsnz	_X_Pos& (0+255),f,b
  6546  01285E  2B41               	incf	(_X_Pos+1)& (0+255),f,b
  6547                           
  6548                           ;dans.c: 486: } else if (direction == 3) {
  6549  012860  D008               	goto	l2488
  6550  012862                     l2486:
  6551                           
  6552                           ; BSR set to: 1
  6553                           
  6554                           ; BSR set to: 1
  6555  012862  0E03               	movlw	3
  6556  012864  19BF               	xorwf	Travel@direction& (0+255),w,b
  6557  012866  11C0               	iorwf	(Travel@direction+1)& (0+255),w,b
  6558  012868  A4D8               	btfss	status,2,c
  6559  01286A  D003               	goto	l2488
  6560                           
  6561                           ; BSR set to: 1
  6562                           ;dans.c: 487: Y_Pos -= 1;
  6563  01286C  073E               	decf	_Y_Pos& (0+255),f,b
  6564  01286E  A0D8               	btfss	status,0,c
  6565  012870  073F               	decf	(_Y_Pos+1)& (0+255),f,b
  6566  012872                     l2488:
  6567                           
  6568                           ; BSR set to: 1
  6569                           ;dans.c: 488: }
  6570                           ;dans.c: 489: Robot_Stop();
  6571                           
  6572                           ; BSR set to: 1
  6573                           
  6574                           ; BSR set to: 1
  6575                           
  6576                           ; BSR set to: 1
  6577                           
  6578                           ; BSR set to: 1
  6579  012872  EC64  F0C6         	call	_Robot_Stop	;wreg free
  6580                           
  6581                           ;dans.c: 490: Fix_Error(X_Pos, Y_Pos);
  6582  012876  C140  F0F1         	movff	_X_Pos,Fix_Error@X_Pos
  6583  01287A  C141  F0F2         	movff	_X_Pos+1,Fix_Error@X_Pos+1
  6584  01287E  C13E  F0F3         	movff	_Y_Pos,Fix_Error@Y_Pos
  6585  012882  C13F  F0F4         	movff	_Y_Pos+1,Fix_Error@Y_Pos+1
  6586  012886  ECB0  F0A4         	call	_Fix_Error	;wreg free
  6587                           
  6588                           ;dans.c: 492: push(direction);
  6589  01288A  C1BF  F083         	movff	Travel@direction,push@data
  6590  01288E  C1C0  F084         	movff	Travel@direction+1,push@data+1
  6591  012892  EC91  F0C3         	call	_push	;wreg free
  6592                           
  6593                           ;dans.c: 495: maze[X_Pos][Y_Pos].Options -= 1;
  6594  012896  C140  F060         	movff	_X_Pos,___wmul@multiplier
  6595  01289A  C141  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  6596  01289E  0E00               	movlw	0
  6597  0128A0  0100               	movlb	0	; () banked
  6598  0128A2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6599  0128A4  0E32               	movlw	50
  6600  0128A6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6601  0128A8  ECE4  F0C5         	call	___wmul	;wreg free
  6602  0128AC  0E00               	movlw	low _maze
  6603  0128AE  0100               	movlb	0	; () banked
  6604  0128B0  6FF9               	movwf	??_Travel& (0+255),b
  6605  0128B2  0E02               	movlw	high _maze
  6606  0128B4  6FFA               	movwf	(??_Travel+1)& (0+255),b
  6607  0128B6  5160               	movf	?___wmul& (0+255),w,b
  6608  0128B8  27F9               	addwf	??_Travel& (0+255),f,b
  6609  0128BA  5161               	movf	(?___wmul+1)& (0+255),w,b
  6610  0128BC  23FA               	addwfc	(??_Travel+1)& (0+255),f,b
  6611  0128BE  C13E  F060         	movff	_Y_Pos,___wmul@multiplier
  6612  0128C2  C13F  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  6613  0128C6  0E00               	movlw	0
  6614  0128C8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6615  0128CA  0E0A               	movlw	10
  6616  0128CC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6617  0128CE  ECE4  F0C5         	call	___wmul	;wreg free
  6618  0128D2  0100               	movlb	0	; () banked
  6619  0128D4  5160               	movf	?___wmul& (0+255),w,b
  6620  0128D6  27F9               	addwf	??_Travel& (0+255),f,b
  6621  0128D8  5161               	movf	(?___wmul+1)& (0+255),w,b
  6622  0128DA  23FA               	addwfc	(??_Travel+1)& (0+255),f,b
  6623  0128DC  0E08               	movlw	8
  6624  0128DE  25F9               	addwf	??_Travel& (0+255),w,b
  6625  0128E0  6ED9               	movwf	fsr2l,c
  6626  0128E2  0E00               	movlw	0
  6627  0128E4  21FA               	addwfc	(??_Travel+1)& (0+255),w,b
  6628  0128E6  6EDA               	movwf	fsr2h,c
  6629  0128E8  06DE               	decf	postinc2,f,c
  6630  0128EA  0E00               	movlw	0
  6631  0128EC  5ADD               	subwfb	postdec2,f,c
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;dans.c: 496: Robot_Stop();
  6635  0128EE  EC64  F0C6         	call	_Robot_Stop	;wreg free
  6636  0128F2  0012               	return		;funcret
  6637  0128F4                     __end_of_Travel:
  6638                           	opt stack 0
  6639                           tosu	equ	0xFFF
  6640                           tosh	equ	0xFFE
  6641                           tosl	equ	0xFFD
  6642                           pclath	equ	0xFFA
  6643                           tblptru	equ	0xFF8
  6644                           tblptrh	equ	0xFF7
  6645                           tblptrl	equ	0xFF6
  6646                           tablat	equ	0xFF5
  6647                           postinc0	equ	0xFEE
  6648                           wreg	equ	0xFE8
  6649                           postdec1	equ	0xFE5
  6650                           fsr1h	equ	0xFE2
  6651                           fsr1l	equ	0xFE1
  6652                           indf2	equ	0xFDF
  6653                           postinc2	equ	0xFDE
  6654                           postdec2	equ	0xFDD
  6655                           plusw2	equ	0xFDB
  6656                           fsr2h	equ	0xFDA
  6657                           fsr2l	equ	0xFD9
  6658                           status	equ	0xFD8
  6659                           
  6660 ;; *************** function _push *****************
  6661 ;; Defined at:
  6662 ;;		line 268 in file "dans.c"
  6663 ;; Parameters:    Size  Location     Type
  6664 ;;  data            2   35[BANK0 ] int 
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;		None
  6667 ;; Return value:  Size  Location     Type
  6668 ;;                  2   35[BANK0 ] int 
  6669 ;; Registers used:
  6670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6671 ;; Tracked objects:
  6672 ;;		On entry : 0/0
  6673 ;;		On exit  : 0/0
  6674 ;;		Unchanged: 0/0
  6675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6676 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6679 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6680 ;;Total ram usage:        2 bytes
  6681 ;; Hardware stack levels used:    1
  6682 ;; Hardware stack levels required when called:   13
  6683 ;; This function calls:
  6684 ;;		_isfull
  6685 ;;		_printf
  6686 ;; This function is called by:
  6687 ;;		_Travel
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           	psect	text8
  6692  018722                     __ptext8:
  6693                           	opt stack 0
  6694  018722                     _push:
  6695                           	opt stack 15
  6696                           
  6697                           ;dans.c: 270: if (!isfull()) {
  6698                           
  6699                           ;incstack = 0
  6700  018722  ECA2  F0C7         	call	_isfull	;wreg free
  6701  018726  0900               	iorlw	0
  6702  018728  A4D8               	btfss	status,2,c
  6703  01872A  D014               	goto	l2416
  6704                           
  6705                           ;dans.c: 271: top = top + 1;
  6706  01872C  0E01               	movlw	1
  6707  01872E  244B               	addwf	_top,w,c
  6708  018730  6E4B               	movwf	_top,c
  6709  018732  0E00               	movlw	0
  6710  018734  204C               	addwfc	_top+1,w,c
  6711  018736  6E4C               	movwf	_top+1,c
  6712                           
  6713                           ;dans.c: 272: stack[top] = data;
  6714  018738  90D8               	bcf	status,0,c
  6715  01873A  344B               	rlcf	_top,w,c
  6716  01873C  6ED9               	movwf	fsr2l,c
  6717  01873E  344C               	rlcf	_top+1,w,c
  6718  018740  6EDA               	movwf	fsr2h,c
  6719  018742  0E00               	movlw	low _stack
  6720  018744  26D9               	addwf	fsr2l,f,c
  6721  018746  0E03               	movlw	high _stack
  6722  018748  22DA               	addwfc	fsr2h,f,c
  6723  01874A  C083  FFDE         	movff	push@data,postinc2
  6724  01874E  C084  FFDD         	movff	push@data+1,postdec2
  6725                           
  6726                           ;dans.c: 273: } else {
  6727  018752  0012               	return	
  6728  018754                     l2416:
  6729                           
  6730                           ;dans.c: 274: printf("Could not insert data, Stack is full.\n");
  6731  018754  0E8B               	movlw	low STR_24
  6732  018756  0100               	movlb	0	; () banked
  6733  018758  6F75               	movwf	printf@f& (0+255),b
  6734  01875A  0EFE               	movlw	high STR_24
  6735  01875C  6F76               	movwf	(printf@f+1)& (0+255),b
  6736  01875E  EC90  F0AC         	call	_printf	;wreg free
  6737  018762  0012               	return	
  6738  018764                     __end_of_push:
  6739                           	opt stack 0
  6740                           tosu	equ	0xFFF
  6741                           tosh	equ	0xFFE
  6742                           tosl	equ	0xFFD
  6743                           pclath	equ	0xFFA
  6744                           tblptru	equ	0xFF8
  6745                           tblptrh	equ	0xFF7
  6746                           tblptrl	equ	0xFF6
  6747                           tablat	equ	0xFF5
  6748                           postinc0	equ	0xFEE
  6749                           wreg	equ	0xFE8
  6750                           postdec1	equ	0xFE5
  6751                           fsr1h	equ	0xFE2
  6752                           fsr1l	equ	0xFE1
  6753                           indf2	equ	0xFDF
  6754                           postinc2	equ	0xFDE
  6755                           postdec2	equ	0xFDD
  6756                           plusw2	equ	0xFDB
  6757                           fsr2h	equ	0xFDA
  6758                           fsr2l	equ	0xFD9
  6759                           status	equ	0xFD8
  6760                           
  6761 ;; *************** function _isfull *****************
  6762 ;; Defined at:
  6763 ;;		line 243 in file "dans.c"
  6764 ;; Parameters:    Size  Location     Type
  6765 ;;		None
  6766 ;; Auto vars:     Size  Location     Type
  6767 ;;		None
  6768 ;; Return value:  Size  Location     Type
  6769 ;;                  1    wreg      unsigned char 
  6770 ;; Registers used:
  6771 ;;		wreg, status,2, status,0
  6772 ;; Tracked objects:
  6773 ;;		On entry : 0/0
  6774 ;;		On exit  : 0/0
  6775 ;;		Unchanged: 0/0
  6776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6781 ;;Total ram usage:        0 bytes
  6782 ;; Hardware stack levels used:    1
  6783 ;; Hardware stack levels required when called:    7
  6784 ;; This function calls:
  6785 ;;		Nothing
  6786 ;; This function is called by:
  6787 ;;		_push
  6788 ;; This function uses a non-reentrant model
  6789 ;;
  6790                           
  6791                           	psect	text9
  6792  018F44                     __ptext9:
  6793                           	opt stack 0
  6794  018F44                     _isfull:
  6795                           	opt stack 20
  6796                           
  6797                           ;dans.c: 245: if (top == 20)
  6798                           
  6799                           ;incstack = 0
  6800  018F44  0E14               	movlw	20
  6801  018F46  184B               	xorwf	_top,w,c
  6802  018F48  104C               	iorwf	_top+1,w,c
  6803  018F4A  A4D8               	btfss	status,2,c
  6804  018F4C  D002               	goto	l2403
  6805                           
  6806                           ;dans.c: 246: return 1;
  6807  018F4E  0E01               	movlw	1
  6808  018F50  0012               	return	
  6809  018F52                     l2403:
  6810                           
  6811                           ;dans.c: 247: else
  6812                           ;dans.c: 248: return 0;
  6813  018F52  0E00               	movlw	0
  6814  018F54  0012               	return	
  6815  018F56                     __end_of_isfull:
  6816                           	opt stack 0
  6817                           tosu	equ	0xFFF
  6818                           tosh	equ	0xFFE
  6819                           tosl	equ	0xFFD
  6820                           pclath	equ	0xFFA
  6821                           tblptru	equ	0xFF8
  6822                           tblptrh	equ	0xFF7
  6823                           tblptrl	equ	0xFF6
  6824                           tablat	equ	0xFF5
  6825                           postinc0	equ	0xFEE
  6826                           wreg	equ	0xFE8
  6827                           postdec1	equ	0xFE5
  6828                           fsr1h	equ	0xFE2
  6829                           fsr1l	equ	0xFE1
  6830                           indf2	equ	0xFDF
  6831                           postinc2	equ	0xFDE
  6832                           postdec2	equ	0xFDD
  6833                           plusw2	equ	0xFDB
  6834                           fsr2h	equ	0xFDA
  6835                           fsr2l	equ	0xFD9
  6836                           status	equ	0xFD8
  6837                           
  6838 ;; *************** function _Turn *****************
  6839 ;; Defined at:
  6840 ;;		line 332 in file "dans.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;  Angle           2    1[BANK0 ] int 
  6843 ;;  Speed           2    3[BANK0 ] int 
  6844 ;;  Dir             2    5[BANK0 ] int 
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;  Rad             2    9[BANK0 ] int 
  6847 ;;  C_Angle         2    7[BANK0 ] int 
  6848 ;; Return value:  Size  Location     Type
  6849 ;;                  2    1[BANK0 ] int 
  6850 ;; Registers used:
  6851 ;;		wreg, status,2, status,0, cstack
  6852 ;; Tracked objects:
  6853 ;;		On entry : 0/0
  6854 ;;		On exit  : 0/0
  6855 ;;		Unchanged: 0/0
  6856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6857 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6858 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6860 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6861 ;;Total ram usage:       10 bytes
  6862 ;; Hardware stack levels used:    1
  6863 ;; Hardware stack levels required when called:    9
  6864 ;; This function calls:
  6865 ;;		_Robot_Stop
  6866 ;;		_eusartRec
  6867 ;;		_eusartSend
  6868 ;; This function is called by:
  6869 ;;		_Travel
  6870 ;; This function uses a non-reentrant model
  6871 ;;
  6872                           
  6873                           	psect	text10
  6874  017A3E                     __ptext10:
  6875                           	opt stack 0
  6876  017A3E                     _Turn:
  6877                           	opt stack 19
  6878                           
  6879                           ;dans.c: 333: int Rad = 1;
  6880                           
  6881                           ;incstack = 0
  6882  017A3E  0E00               	movlw	0
  6883  017A40  0100               	movlb	0	; () banked
  6884  017A42  6F6A               	movwf	(Turn@Rad+1)& (0+255),b
  6885  017A44  0E01               	movlw	1
  6886  017A46  6F69               	movwf	Turn@Rad& (0+255),b
  6887                           
  6888                           ; BSR set to: 0
  6889                           ;dans.c: 334: if (Dir == 0) {
  6890  017A48  5165               	movf	Turn@Dir& (0+255),w,b
  6891  017A4A  1166               	iorwf	(Turn@Dir+1)& (0+255),w,b
  6892  017A4C  A4D8               	btfss	status,2,c
  6893  017A4E  D004               	goto	l2441
  6894                           
  6895                           ; BSR set to: 0
  6896                           ;dans.c: 335: Rad = 65535;
  6897  017A50  6969               	setf	Turn@Rad& (0+255),b
  6898  017A52  696A               	setf	(Turn@Rad+1)& (0+255),b
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;dans.c: 336: Angle = ~Angle;
  6902  017A54  1F61               	comf	Turn@Angle& (0+255),f,b
  6903  017A56  1F62               	comf	(Turn@Angle+1)& (0+255),f,b
  6904  017A58                     l2441:
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;dans.c: 337: }
  6908                           ;dans.c: 339: eusartSend(137);
  6909                           
  6910                           ; BSR set to: 0
  6911  017A58  0E89               	movlw	137
  6912  017A5A  ECC9  F0C7         	call	_eusartSend
  6913                           
  6914                           ;dans.c: 340: eusartSend(((unsigned char)(((Speed)>>8)&0xFF)));
  6915  017A5E  0100               	movlb	0	; () banked
  6916  017A60  5164               	movf	(Turn@Speed+1)& (0+255),w,b
  6917  017A62  ECC9  F0C7         	call	_eusartSend
  6918                           
  6919                           ;dans.c: 341: eusartSend(((unsigned char)((Speed)&0xFF)));
  6920  017A66  0100               	movlb	0	; () banked
  6921  017A68  5163               	movf	Turn@Speed& (0+255),w,b
  6922  017A6A  ECC9  F0C7         	call	_eusartSend
  6923                           
  6924                           ;dans.c: 342: eusartSend(((unsigned char)(((Rad)>>8)&0xFF)));
  6925  017A6E  0100               	movlb	0	; () banked
  6926  017A70  516A               	movf	(Turn@Rad+1)& (0+255),w,b
  6927  017A72  ECC9  F0C7         	call	_eusartSend
  6928                           
  6929                           ;dans.c: 343: eusartSend(((unsigned char)((Rad)&0xFF)));
  6930  017A76  0100               	movlb	0	; () banked
  6931  017A78  5169               	movf	Turn@Rad& (0+255),w,b
  6932  017A7A  ECC9  F0C7         	call	_eusartSend
  6933                           
  6934                           ;dans.c: 344: int C_Angle = 0;
  6935  017A7E  0E00               	movlw	0
  6936  017A80  0100               	movlb	0	; () banked
  6937  017A82  6F68               	movwf	(Turn@C_Angle+1)& (0+255),b
  6938  017A84  0E00               	movlw	0
  6939  017A86  6F67               	movwf	Turn@C_Angle& (0+255),b
  6940                           
  6941                           ; BSR set to: 0
  6942                           ;dans.c: 345: eusartSend(157);
  6943  017A88  0E9D               	movlw	157
  6944  017A8A  ECC9  F0C7         	call	_eusartSend
  6945                           
  6946                           ;dans.c: 346: eusartSend(((unsigned char)(((Angle)>>8)&0xFF)));
  6947  017A8E  0100               	movlb	0	; () banked
  6948  017A90  5162               	movf	(Turn@Angle+1)& (0+255),w,b
  6949  017A92  ECC9  F0C7         	call	_eusartSend
  6950                           
  6951                           ;dans.c: 347: eusartSend(((unsigned char)((Angle)&0xFF)));
  6952  017A96  0100               	movlb	0	; () banked
  6953  017A98  5161               	movf	Turn@Angle& (0+255),w,b
  6954  017A9A  ECC9  F0C7         	call	_eusartSend
  6955                           
  6956                           ;dans.c: 349: Robot_Stop();
  6957  017A9E  EC64  F0C6         	call	_Robot_Stop	;wreg free
  6958                           
  6959                           ;dans.c: 351: eusartSend(142);
  6960  017AA2  0E8E               	movlw	142
  6961  017AA4  ECC9  F0C7         	call	_eusartSend
  6962                           
  6963                           ;dans.c: 352: eusartSend(7);
  6964  017AA8  0E07               	movlw	7
  6965  017AAA  ECC9  F0C7         	call	_eusartSend
  6966                           
  6967                           ;dans.c: 353: eusartRec();
  6968  017AAE  ECF6  F0C7         	call	_eusartRec	;wreg free
  6969  017AB2  0012               	return		;funcret
  6970  017AB4                     __end_of_Turn:
  6971                           	opt stack 0
  6972                           tosu	equ	0xFFF
  6973                           tosh	equ	0xFFE
  6974                           tosl	equ	0xFFD
  6975                           pclath	equ	0xFFA
  6976                           tblptru	equ	0xFF8
  6977                           tblptrh	equ	0xFF7
  6978                           tblptrl	equ	0xFF6
  6979                           tablat	equ	0xFF5
  6980                           postinc0	equ	0xFEE
  6981                           wreg	equ	0xFE8
  6982                           postdec1	equ	0xFE5
  6983                           fsr1h	equ	0xFE2
  6984                           fsr1l	equ	0xFE1
  6985                           indf2	equ	0xFDF
  6986                           postinc2	equ	0xFDE
  6987                           postdec2	equ	0xFDD
  6988                           plusw2	equ	0xFDB
  6989                           fsr2h	equ	0xFDA
  6990                           fsr2l	equ	0xFD9
  6991                           status	equ	0xFD8
  6992                           
  6993 ;; *************** function _Get_VirtualWall_State *****************
  6994 ;; Defined at:
  6995 ;;		line 313 in file "dans.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;		None
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;  Vitual_Wall_    2    4[BANK0 ] int 
  7000 ;; Return value:  Size  Location     Type
  7001 ;;                  2    1[BANK0 ] int 
  7002 ;; Registers used:
  7003 ;;		wreg, status,2, status,0, cstack
  7004 ;; Tracked objects:
  7005 ;;		On entry : 0/0
  7006 ;;		On exit  : 0/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7009 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7010 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7012 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7013 ;;Total ram usage:        5 bytes
  7014 ;; Hardware stack levels used:    1
  7015 ;; Hardware stack levels required when called:    8
  7016 ;; This function calls:
  7017 ;;		_eusartRec
  7018 ;;		_eusartSend
  7019 ;; This function is called by:
  7020 ;;		_Travel
  7021 ;; This function uses a non-reentrant model
  7022 ;;
  7023                           
  7024                           	psect	text11
  7025  018C64                     __ptext11:
  7026                           	opt stack 0
  7027  018C64                     _Get_VirtualWall_State:
  7028                           	opt stack 20
  7029                           
  7030                           ;dans.c: 314: eusartSend(142);
  7031                           
  7032                           ;incstack = 0
  7033  018C64  0E8E               	movlw	142
  7034  018C66  ECC9  F0C7         	call	_eusartSend
  7035                           
  7036                           ;dans.c: 315: eusartSend(13);
  7037  018C6A  0E0D               	movlw	13
  7038  018C6C  ECC9  F0C7         	call	_eusartSend
  7039                           
  7040                           ;dans.c: 316: int Vitual_Wall_Sensor = (eusartRec());
  7041  018C70  ECF6  F0C7         	call	_eusartRec	;wreg free
  7042  018C74  0100               	movlb	0	; () banked
  7043  018C76  6F63               	movwf	??_Get_VirtualWall_State& (0+255),b
  7044  018C78  5163               	movf	??_Get_VirtualWall_State& (0+255),w,b
  7045  018C7A  6F64               	movwf	Get_VirtualWall_State@Vitual_Wall_Sensor& (0+255),b
  7046  018C7C  6B65               	clrf	(Get_VirtualWall_State@Vitual_Wall_Sensor+1)& (0+255),b
  7047                           
  7048                           ; BSR set to: 0
  7049                           ;dans.c: 317: return Vitual_Wall_Sensor;
  7050  018C7E  C064  F061         	movff	Get_VirtualWall_State@Vitual_Wall_Sensor,?_Get_VirtualWall_State
  7051  018C82  C065  F062         	movff	Get_VirtualWall_State@Vitual_Wall_Sensor+1,?_Get_VirtualWall_State+1
  7052  018C86  0012               	return	
  7053  018C88                     __end_of_Get_VirtualWall_State:
  7054                           	opt stack 0
  7055                           tosu	equ	0xFFF
  7056                           tosh	equ	0xFFE
  7057                           tosl	equ	0xFFD
  7058                           pclath	equ	0xFFA
  7059                           tblptru	equ	0xFF8
  7060                           tblptrh	equ	0xFF7
  7061                           tblptrl	equ	0xFF6
  7062                           tablat	equ	0xFF5
  7063                           postinc0	equ	0xFEE
  7064                           wreg	equ	0xFE8
  7065                           postdec1	equ	0xFE5
  7066                           fsr1h	equ	0xFE2
  7067                           fsr1l	equ	0xFE1
  7068                           indf2	equ	0xFDF
  7069                           postinc2	equ	0xFDE
  7070                           postdec2	equ	0xFDD
  7071                           plusw2	equ	0xFDB
  7072                           fsr2h	equ	0xFDA
  7073                           fsr2l	equ	0xFD9
  7074                           status	equ	0xFD8
  7075                           
  7076 ;; *************** function _Fix_Error *****************
  7077 ;; Defined at:
  7078 ;;		line 625 in file "dans.c"
  7079 ;; Parameters:    Size  Location     Type
  7080 ;;  X_Pos           2  145[BANK0 ] int 
  7081 ;;  Y_Pos           2  147[BANK0 ] int 
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;  i               2    2[BANK1 ] int 
  7084 ;;  i               2    0[BANK1 ] int 
  7085 ;;  far_error       2    6[BANK1 ] int 
  7086 ;;  close_error     2    4[BANK1 ] int 
  7087 ;; Return value:  Size  Location     Type
  7088 ;;                  1    wreg      void 
  7089 ;; Registers used:
  7090 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7096 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7097 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7098 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7099 ;;      Totals:         0       8       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7100 ;;Total ram usage:       16 bytes
  7101 ;; Hardware stack levels used:    1
  7102 ;; Hardware stack levels required when called:   14
  7103 ;; This function calls:
  7104 ;;		_ADCAverage
  7105 ;;		_Drive
  7106 ;;		_Move_ADC_To
  7107 ;;		_Robot_Stop
  7108 ;;		_delay_ms
  7109 ;; This function is called by:
  7110 ;;		_Travel
  7111 ;;		_Navigate_Maze
  7112 ;; This function uses a non-reentrant model
  7113 ;;
  7114                           
  7115                           	psect	text12
  7116  014960                     __ptext12:
  7117                           	opt stack 0
  7118  014960                     _Fix_Error:
  7119                           	opt stack 14
  7120                           
  7121                           ;dans.c: 626: int close_error = 38;
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;incstack = 0
  7125  014960  0E00               	movlw	0
  7126  014962  0101               	movlb	1	; () banked
  7127  014964  6FBC               	movwf	(Fix_Error@close_error+1)& (0+255),b
  7128  014966  0E26               	movlw	38
  7129  014968  6FBB               	movwf	Fix_Error@close_error& (0+255),b
  7130                           
  7131                           ;dans.c: 627: int far_error = 45;
  7132  01496A  0E00               	movlw	0
  7133  01496C  6FBE               	movwf	(Fix_Error@far_error+1)& (0+255),b
  7134  01496E  0E2D               	movlw	45
  7135  014970  6FBD               	movwf	Fix_Error@far_error& (0+255),b
  7136                           
  7137                           ; BSR set to: 1
  7138                           ;dans.c: 629: if ((X_Pos == 0 && Y_Pos == 3) || (X_Pos == 3 && Y_Pos == 3) || (X_Pos == 
      +                          0 && Y_Pos == 0)) {
  7139  014972  0100               	movlb	0	; () banked
  7140  014974  51F1               	movf	Fix_Error@X_Pos& (0+255),w,b
  7141  014976  11F2               	iorwf	(Fix_Error@X_Pos+1)& (0+255),w,b
  7142  014978  A4D8               	btfss	status,2,c
  7143  01497A  D005               	goto	u13510
  7144                           
  7145                           ; BSR set to: 0
  7146  01497C  0E03               	movlw	3
  7147  01497E  19F3               	xorwf	Fix_Error@Y_Pos& (0+255),w,b
  7148  014980  11F4               	iorwf	(Fix_Error@Y_Pos+1)& (0+255),w,b
  7149  014982  B4D8               	btfsc	status,2,c
  7150  014984  D012               	goto	u13550
  7151  014986                     u13510:
  7152                           
  7153                           ; BSR set to: 0
  7154                           
  7155                           ; BSR set to: 0
  7156  014986  0E03               	movlw	3
  7157  014988  19F1               	xorwf	Fix_Error@X_Pos& (0+255),w,b
  7158  01498A  11F2               	iorwf	(Fix_Error@X_Pos+1)& (0+255),w,b
  7159  01498C  A4D8               	btfss	status,2,c
  7160  01498E  D005               	goto	u13530
  7161                           
  7162                           ; BSR set to: 0
  7163  014990  0E03               	movlw	3
  7164  014992  19F3               	xorwf	Fix_Error@Y_Pos& (0+255),w,b
  7165  014994  11F4               	iorwf	(Fix_Error@Y_Pos+1)& (0+255),w,b
  7166  014996  B4D8               	btfsc	status,2,c
  7167  014998  D008               	goto	u13550
  7168  01499A                     u13530:
  7169                           
  7170                           ; BSR set to: 0
  7171                           
  7172                           ; BSR set to: 0
  7173  01499A  51F1               	movf	Fix_Error@X_Pos& (0+255),w,b
  7174  01499C  11F2               	iorwf	(Fix_Error@X_Pos+1)& (0+255),w,b
  7175  01499E  A4D8               	btfss	status,2,c
  7176  0149A0  0012               	return	
  7177                           
  7178                           ; BSR set to: 0
  7179  0149A2  51F3               	movf	Fix_Error@Y_Pos& (0+255),w,b
  7180  0149A4  11F4               	iorwf	(Fix_Error@Y_Pos+1)& (0+255),w,b
  7181  0149A6  A4D8               	btfss	status,2,c
  7182  0149A8  0012               	return	
  7183  0149AA                     u13550:
  7184                           
  7185                           ; BSR set to: 0
  7186                           ;dans.c: 630: if (WallFlag == 0) {
  7187                           
  7188                           ; BSR set to: 0
  7189  0149AA  503B               	movf	_WallFlag,w,c
  7190  0149AC  A4D8               	btfss	status,2,c
  7191  0149AE  D07E               	goto	l2559
  7192                           
  7193                           ; BSR set to: 0
  7194                           ;dans.c: 631: Move_ADC_To(45);
  7195  0149B0  0E00               	movlw	0
  7196  0149B2  6FAA               	movwf	(Move_ADC_To@Angle+1)& (0+255),b
  7197  0149B4  0E2D               	movlw	45
  7198  0149B6  6FA9               	movwf	Move_ADC_To@Angle& (0+255),b
  7199  0149B8  EC44  F0AD         	call	_Move_ADC_To	;wreg free
  7200                           
  7201                           ;dans.c: 632: for (int i = 0; i < 10; i++) {
  7202  0149BC  0E00               	movlw	0
  7203  0149BE  0101               	movlb	1	; () banked
  7204  0149C0  6FB8               	movwf	(Fix_Error@i+1)& (0+255),b
  7205  0149C2  0E00               	movlw	0
  7206  0149C4  6FB7               	movwf	Fix_Error@i& (0+255),b
  7207  0149C6                     l16057:
  7208                           
  7209                           ; BSR set to: 1
  7210  0149C6  BFB8               	btfsc	(Fix_Error@i+1)& (0+255),7,b
  7211  0149C8  D006               	goto	l2552
  7212  0149CA  51B8               	movf	(Fix_Error@i+1)& (0+255),w,b
  7213  0149CC  E10A               	bnz	l16067
  7214  0149CE  0E0A               	movlw	10
  7215  0149D0  5DB7               	subwf	Fix_Error@i& (0+255),w,b
  7216  0149D2  B0D8               	btfsc	status,0,c
  7217  0149D4  D006               	goto	u13580
  7218  0149D6                     l2552:
  7219                           
  7220                           ; BSR set to: 1
  7221                           ;dans.c: 633: ADCAverage();
  7222                           
  7223                           ; BSR set to: 1
  7224  0149D6  EC0C  F09E         	call	_ADCAverage	;wreg free
  7225  0149DA  0101               	movlb	1	; () banked
  7226  0149DC  4BB7               	infsnz	Fix_Error@i& (0+255),f,b
  7227  0149DE  2BB8               	incf	(Fix_Error@i+1)& (0+255),f,b
  7228  0149E0  D7F2               	goto	l16057
  7229  0149E2                     u13580:
  7230  0149E2                     l16067:
  7231                           
  7232                           ; BSR set to: 1
  7233                           ;dans.c: 634: }
  7234                           ;dans.c: 635: if (average < close_error) {
  7235  0149E2  51BB               	movf	Fix_Error@close_error& (0+255),w,b
  7236  0149E4  5C2C               	subwf	_average,w,c
  7237  0149E6  502D               	movf	_average+1,w,c
  7238  0149E8  0A80               	xorlw	128
  7239  0149EA  0100               	movlb	0	; () banked
  7240  0149EC  6FF5               	movwf	??_Fix_Error& (0+255),b
  7241  0149EE  0101               	movlb	1	; () banked
  7242  0149F0  51BC               	movf	(Fix_Error@close_error+1)& (0+255),w,b
  7243  0149F2  0A80               	xorlw	128
  7244  0149F4  0100               	movlb	0	; () banked
  7245  0149F6  59F5               	subwfb	??_Fix_Error& (0+255),w,b
  7246  0149F8  A0D8               	btfss	status,0,c
  7247  0149FA  D00E               	goto	l2555
  7248  0149FC  D021               	goto	u13600
  7249  0149FE                     l16071:
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;dans.c: 637: ADCAverage();
  7253  0149FE  EC0C  F09E         	call	_ADCAverage	;wreg free
  7254                           
  7255                           ;dans.c: 638: Drive(-100, -100);
  7256  014A02  0EFF               	movlw	255
  7257  014A04  0100               	movlb	0	; () banked
  7258  014A06  6F62               	movwf	(Drive@SpeedL+1)& (0+255),b
  7259  014A08  0E9C               	movlw	156
  7260  014A0A  6F61               	movwf	Drive@SpeedL& (0+255),b
  7261  014A0C  0EFF               	movlw	255
  7262  014A0E  6F64               	movwf	(Drive@SpeedR+1)& (0+255),b
  7263  014A10  0E9C               	movlw	156
  7264  014A12  6F63               	movwf	Drive@SpeedR& (0+255),b
  7265  014A14  ECBB  F0C2         	call	_Drive	;wreg free
  7266  014A18                     l2555:
  7267  014A18  0EFE               	movlw	254
  7268  014A1A  0100               	movlb	0	; () banked
  7269  014A1C  6FF5               	movwf	??_Fix_Error& (0+255),b
  7270  014A1E  0EFF               	movlw	255
  7271  014A20  6FF6               	movwf	(??_Fix_Error+1)& (0+255),b
  7272  014A22  C1BB  F0F7         	movff	Fix_Error@close_error,??_Fix_Error+2
  7273  014A26  C1BC  F0F8         	movff	Fix_Error@close_error+1,??_Fix_Error+3
  7274  014A2A  51F5               	movf	??_Fix_Error& (0+255),w,b
  7275  014A2C  27F7               	addwf	(??_Fix_Error+2)& (0+255),f,b
  7276  014A2E  51F6               	movf	(??_Fix_Error+1)& (0+255),w,b
  7277  014A30  23F8               	addwfc	(??_Fix_Error+3)& (0+255),f,b
  7278  014A32  502C               	movf	_average,w,c
  7279  014A34  19F7               	xorwf	(??_Fix_Error+2)& (0+255),w,b
  7280  014A36  E1E3               	bnz	l16071
  7281  014A38  502D               	movf	_average+1,w,c
  7282  014A3A  19F8               	xorwf	(??_Fix_Error+3)& (0+255),w,b
  7283  014A3C  A4D8               	btfss	status,2,c
  7284  014A3E  D7DF               	goto	l2556
  7285  014A40                     u13600:
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;dans.c: 639: }
  7289                           ;dans.c: 640: }
  7290                           ;dans.c: 641: Move_ADC_To(-45);
  7291                           
  7292                           ; BSR set to: 0
  7293                           
  7294                           ; BSR set to: 0
  7295  014A40  0EFF               	movlw	255
  7296  014A42  6FAA               	movwf	(Move_ADC_To@Angle+1)& (0+255),b
  7297  014A44  0ED3               	movlw	211
  7298  014A46  6FA9               	movwf	Move_ADC_To@Angle& (0+255),b
  7299  014A48  EC44  F0AD         	call	_Move_ADC_To	;wreg free
  7300                           
  7301                           ;dans.c: 642: delay_ms(200);
  7302  014A4C  0E00               	movlw	0
  7303  014A4E  0100               	movlb	0	; () banked
  7304  014A50  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  7305  014A52  0EC8               	movlw	200
  7306  014A54  6F60               	movwf	delay_ms@ms& (0+255),b
  7307  014A56  EC39  F0C0         	call	_delay_ms	;wreg free
  7308                           
  7309                           ;dans.c: 643: return;
  7310  014A5A  0012               	return	
  7311  014A5C                     l16087:
  7312                           
  7313                           ; BSR set to: 0
  7314                           ;dans.c: 646: ADCAverage();
  7315  014A5C  EC0C  F09E         	call	_ADCAverage	;wreg free
  7316                           
  7317                           ;dans.c: 647: Drive(50, 50);
  7318  014A60  0E00               	movlw	0
  7319  014A62  0100               	movlb	0	; () banked
  7320  014A64  6F62               	movwf	(Drive@SpeedL+1)& (0+255),b
  7321  014A66  0E32               	movlw	50
  7322  014A68  6F61               	movwf	Drive@SpeedL& (0+255),b
  7323  014A6A  0E00               	movlw	0
  7324  014A6C  6F64               	movwf	(Drive@SpeedR+1)& (0+255),b
  7325  014A6E  0E32               	movlw	50
  7326  014A70  6F63               	movwf	Drive@SpeedR& (0+255),b
  7327  014A72  ECBB  F0C2         	call	_Drive	;wreg free
  7328  014A76  0E02               	movlw	2
  7329  014A78  0101               	movlb	1	; () banked
  7330  014A7A  25BD               	addwf	Fix_Error@far_error& (0+255),w,b
  7331  014A7C  0100               	movlb	0	; () banked
  7332  014A7E  6FF5               	movwf	??_Fix_Error& (0+255),b
  7333  014A80  0E00               	movlw	0
  7334  014A82  0101               	movlb	1	; () banked
  7335  014A84  21BE               	addwfc	(Fix_Error@far_error+1)& (0+255),w,b
  7336  014A86  0100               	movlb	0	; () banked
  7337  014A88  6FF6               	movwf	(??_Fix_Error+1)& (0+255),b
  7338  014A8A  502C               	movf	_average,w,c
  7339  014A8C  19F5               	xorwf	??_Fix_Error& (0+255),w,b
  7340  014A8E  E1E6               	bnz	l16087
  7341  014A90  502D               	movf	_average+1,w,c
  7342  014A92  19F6               	xorwf	(??_Fix_Error+1)& (0+255),w,b
  7343  014A94  A4D8               	btfss	status,2,c
  7344  014A96  D7E2               	goto	l2561
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;dans.c: 648: }
  7348                           ;dans.c: 649: Robot_Stop();
  7349                           
  7350                           ; BSR set to: 0
  7351  014A98  EC64  F0C6         	call	_Robot_Stop	;wreg free
  7352                           
  7353                           ;dans.c: 650: Move_ADC_To(-45);
  7354  014A9C  0EFF               	movlw	255
  7355  014A9E  0100               	movlb	0	; () banked
  7356  014AA0  6FAA               	movwf	(Move_ADC_To@Angle+1)& (0+255),b
  7357  014AA2  0ED3               	movlw	211
  7358  014AA4  6FA9               	movwf	Move_ADC_To@Angle& (0+255),b
  7359  014AA6  EC44  F0AD         	call	_Move_ADC_To	;wreg free
  7360                           
  7361                           ;dans.c: 651: return;
  7362  014AAA  0012               	return	
  7363  014AAC                     l2559:
  7364                           
  7365                           ;dans.c: 652: }
  7366                           ;dans.c: 653: }
  7367                           ;dans.c: 654: if (WallFlag == 1) {
  7368  014AAC  043B               	decf	_WallFlag,w,c
  7369  014AAE  A4D8               	btfss	status,2,c
  7370  014AB0  0012               	return	
  7371                           
  7372                           ;dans.c: 655: Move_ADC_To(-45);
  7373  014AB2  0EFF               	movlw	255
  7374  014AB4  0100               	movlb	0	; () banked
  7375  014AB6  6FAA               	movwf	(Move_ADC_To@Angle+1)& (0+255),b
  7376  014AB8  0ED3               	movlw	211
  7377  014ABA  6FA9               	movwf	Move_ADC_To@Angle& (0+255),b
  7378  014ABC  EC44  F0AD         	call	_Move_ADC_To	;wreg free
  7379                           
  7380                           ;dans.c: 656: for (int i = 0; i < 10; i++) {
  7381  014AC0  0E00               	movlw	0
  7382  014AC2  0101               	movlb	1	; () banked
  7383  014AC4  6FBA               	movwf	(Fix_Error@i_14198+1)& (0+255),b
  7384  014AC6  0E00               	movlw	0
  7385  014AC8  6FB9               	movwf	Fix_Error@i_14198& (0+255),b
  7386  014ACA                     l16105:
  7387                           
  7388                           ; BSR set to: 1
  7389  014ACA  BFBA               	btfsc	(Fix_Error@i_14198+1)& (0+255),7,b
  7390  014ACC  D006               	goto	l2564
  7391  014ACE  51BA               	movf	(Fix_Error@i_14198+1)& (0+255),w,b
  7392  014AD0  E10A               	bnz	l16115
  7393  014AD2  0E0A               	movlw	10
  7394  014AD4  5DB9               	subwf	Fix_Error@i_14198& (0+255),w,b
  7395  014AD6  B0D8               	btfsc	status,0,c
  7396  014AD8  D006               	goto	u13650
  7397  014ADA                     l2564:
  7398                           
  7399                           ; BSR set to: 1
  7400                           ;dans.c: 657: ADCAverage();
  7401                           
  7402                           ; BSR set to: 1
  7403  014ADA  EC0C  F09E         	call	_ADCAverage	;wreg free
  7404  014ADE  0101               	movlb	1	; () banked
  7405  014AE0  4BB9               	infsnz	Fix_Error@i_14198& (0+255),f,b
  7406  014AE2  2BBA               	incf	(Fix_Error@i_14198+1)& (0+255),f,b
  7407  014AE4  D7F2               	goto	l16105
  7408  014AE6                     u13650:
  7409  014AE6                     l16115:
  7410                           
  7411                           ; BSR set to: 1
  7412                           ;dans.c: 658: }
  7413                           ;dans.c: 659: if (average < close_error) {
  7414  014AE6  51BB               	movf	Fix_Error@close_error& (0+255),w,b
  7415  014AE8  5C2C               	subwf	_average,w,c
  7416  014AEA  502D               	movf	_average+1,w,c
  7417  014AEC  0A80               	xorlw	128
  7418  014AEE  0100               	movlb	0	; () banked
  7419  014AF0  6FF5               	movwf	??_Fix_Error& (0+255),b
  7420  014AF2  0101               	movlb	1	; () banked
  7421  014AF4  51BC               	movf	(Fix_Error@close_error+1)& (0+255),w,b
  7422  014AF6  0A80               	xorlw	128
  7423  014AF8  0100               	movlb	0	; () banked
  7424  014AFA  59F5               	subwfb	??_Fix_Error& (0+255),w,b
  7425  014AFC  A0D8               	btfss	status,0,c
  7426  014AFE  D00E               	goto	l2567
  7427  014B00  D021               	goto	u13670
  7428  014B02                     l16119:
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;dans.c: 661: ADCAverage();
  7432  014B02  EC0C  F09E         	call	_ADCAverage	;wreg free
  7433                           
  7434                           ;dans.c: 662: Drive(-100, -100);
  7435  014B06  0EFF               	movlw	255
  7436  014B08  0100               	movlb	0	; () banked
  7437  014B0A  6F62               	movwf	(Drive@SpeedL+1)& (0+255),b
  7438  014B0C  0E9C               	movlw	156
  7439  014B0E  6F61               	movwf	Drive@SpeedL& (0+255),b
  7440  014B10  0EFF               	movlw	255
  7441  014B12  6F64               	movwf	(Drive@SpeedR+1)& (0+255),b
  7442  014B14  0E9C               	movlw	156
  7443  014B16  6F63               	movwf	Drive@SpeedR& (0+255),b
  7444  014B18  ECBB  F0C2         	call	_Drive	;wreg free
  7445  014B1C                     l2567:
  7446  014B1C  0EFE               	movlw	254
  7447  014B1E  0100               	movlb	0	; () banked
  7448  014B20  6FF5               	movwf	??_Fix_Error& (0+255),b
  7449  014B22  0EFF               	movlw	255
  7450  014B24  6FF6               	movwf	(??_Fix_Error+1)& (0+255),b
  7451  014B26  C1BB  F0F7         	movff	Fix_Error@close_error,??_Fix_Error+2
  7452  014B2A  C1BC  F0F8         	movff	Fix_Error@close_error+1,??_Fix_Error+3
  7453  014B2E  51F5               	movf	??_Fix_Error& (0+255),w,b
  7454  014B30  27F7               	addwf	(??_Fix_Error+2)& (0+255),f,b
  7455  014B32  51F6               	movf	(??_Fix_Error+1)& (0+255),w,b
  7456  014B34  23F8               	addwfc	(??_Fix_Error+3)& (0+255),f,b
  7457  014B36  502C               	movf	_average,w,c
  7458  014B38  19F7               	xorwf	(??_Fix_Error+2)& (0+255),w,b
  7459  014B3A  E1E3               	bnz	l16119
  7460  014B3C  502D               	movf	_average+1,w,c
  7461  014B3E  19F8               	xorwf	(??_Fix_Error+3)& (0+255),w,b
  7462  014B40  A4D8               	btfss	status,2,c
  7463  014B42  D7DF               	goto	l2568
  7464  014B44                     u13670:
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;dans.c: 663: }
  7468                           ;dans.c: 664: }
  7469                           ;dans.c: 665: Move_ADC_To(45);
  7470                           
  7471                           ; BSR set to: 0
  7472                           
  7473                           ; BSR set to: 0
  7474  014B44  0E00               	movlw	0
  7475  014B46  6FAA               	movwf	(Move_ADC_To@Angle+1)& (0+255),b
  7476  014B48  0E2D               	movlw	45
  7477  014B4A  6FA9               	movwf	Move_ADC_To@Angle& (0+255),b
  7478  014B4C  EC44  F0AD         	call	_Move_ADC_To	;wreg free
  7479                           
  7480                           ;dans.c: 666: delay_ms(200);
  7481  014B50  0E00               	movlw	0
  7482  014B52  0100               	movlb	0	; () banked
  7483  014B54  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  7484  014B56  0EC8               	movlw	200
  7485  014B58  6F60               	movwf	delay_ms@ms& (0+255),b
  7486  014B5A  EC39  F0C0         	call	_delay_ms	;wreg free
  7487                           
  7488                           ;dans.c: 667: return;
  7489  014B5E  0012               	return	
  7490  014B60                     l16135:
  7491                           
  7492                           ; BSR set to: 0
  7493                           ;dans.c: 670: ADCAverage();
  7494  014B60  EC0C  F09E         	call	_ADCAverage	;wreg free
  7495                           
  7496                           ;dans.c: 671: Drive(50, 50);
  7497  014B64  0E00               	movlw	0
  7498  014B66  0100               	movlb	0	; () banked
  7499  014B68  6F62               	movwf	(Drive@SpeedL+1)& (0+255),b
  7500  014B6A  0E32               	movlw	50
  7501  014B6C  6F61               	movwf	Drive@SpeedL& (0+255),b
  7502  014B6E  0E00               	movlw	0
  7503  014B70  6F64               	movwf	(Drive@SpeedR+1)& (0+255),b
  7504  014B72  0E32               	movlw	50
  7505  014B74  6F63               	movwf	Drive@SpeedR& (0+255),b
  7506  014B76  ECBB  F0C2         	call	_Drive	;wreg free
  7507  014B7A  0E02               	movlw	2
  7508  014B7C  0101               	movlb	1	; () banked
  7509  014B7E  25BD               	addwf	Fix_Error@far_error& (0+255),w,b
  7510  014B80  0100               	movlb	0	; () banked
  7511  014B82  6FF5               	movwf	??_Fix_Error& (0+255),b
  7512  014B84  0E00               	movlw	0
  7513  014B86  0101               	movlb	1	; () banked
  7514  014B88  21BE               	addwfc	(Fix_Error@far_error+1)& (0+255),w,b
  7515  014B8A  0100               	movlb	0	; () banked
  7516  014B8C  6FF6               	movwf	(??_Fix_Error+1)& (0+255),b
  7517  014B8E  502C               	movf	_average,w,c
  7518  014B90  19F5               	xorwf	??_Fix_Error& (0+255),w,b
  7519  014B92  E1E6               	bnz	l16135
  7520  014B94  502D               	movf	_average+1,w,c
  7521  014B96  19F6               	xorwf	(??_Fix_Error+1)& (0+255),w,b
  7522  014B98  A4D8               	btfss	status,2,c
  7523  014B9A  D7E2               	goto	l2572
  7524                           
  7525                           ; BSR set to: 0
  7526                           ;dans.c: 672: }
  7527                           ;dans.c: 673: Robot_Stop();
  7528                           
  7529                           ; BSR set to: 0
  7530  014B9C  EC64  F0C6         	call	_Robot_Stop	;wreg free
  7531                           
  7532                           ;dans.c: 674: Move_ADC_To(-45);
  7533  014BA0  0EFF               	movlw	255
  7534  014BA2  0100               	movlb	0	; () banked
  7535  014BA4  6FAA               	movwf	(Move_ADC_To@Angle+1)& (0+255),b
  7536  014BA6  0ED3               	movlw	211
  7537  014BA8  6FA9               	movwf	Move_ADC_To@Angle& (0+255),b
  7538  014BAA  EC44  F0AD         	call	_Move_ADC_To	;wreg free
  7539                           
  7540                           ;dans.c: 675: return;
  7541  014BAE  0012               	return	
  7542  014BB0                     __end_of_Fix_Error:
  7543                           	opt stack 0
  7544                           tosu	equ	0xFFF
  7545                           tosh	equ	0xFFE
  7546                           tosl	equ	0xFFD
  7547                           pclath	equ	0xFFA
  7548                           tblptru	equ	0xFF8
  7549                           tblptrh	equ	0xFF7
  7550                           tblptrl	equ	0xFF6
  7551                           tablat	equ	0xFF5
  7552                           postinc0	equ	0xFEE
  7553                           wreg	equ	0xFE8
  7554                           postdec1	equ	0xFE5
  7555                           fsr1h	equ	0xFE2
  7556                           fsr1l	equ	0xFE1
  7557                           indf2	equ	0xFDF
  7558                           postinc2	equ	0xFDE
  7559                           postdec2	equ	0xFDD
  7560                           plusw2	equ	0xFDB
  7561                           fsr2h	equ	0xFDA
  7562                           fsr2l	equ	0xFD9
  7563                           status	equ	0xFD8
  7564                           
  7565 ;; *************** function _Detect_Victim *****************
  7566 ;; Defined at:
  7567 ;;		line 320 in file "dans.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;		None
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;  Home_Base_St    2    4[BANK0 ] int 
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  2    1[BANK0 ] int 
  7574 ;; Registers used:
  7575 ;;		wreg, status,2, status,0, cstack
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7581 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7582 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7583 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7584 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7585 ;;Total ram usage:        5 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    8
  7588 ;; This function calls:
  7589 ;;		_eusartRec
  7590 ;;		_eusartSend
  7591 ;; This function is called by:
  7592 ;;		_main
  7593 ;;		_Travel
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           	psect	text13
  7598  0183B4                     __ptext13:
  7599                           	opt stack 0
  7600  0183B4                     _Detect_Victim:
  7601                           	opt stack 20
  7602                           
  7603                           ;dans.c: 321: eusartSend(142);
  7604                           
  7605                           ;incstack = 0
  7606  0183B4  0E8E               	movlw	142
  7607  0183B6  ECC9  F0C7         	call	_eusartSend
  7608                           
  7609                           ;dans.c: 322: eusartSend(17);
  7610  0183BA  0E11               	movlw	17
  7611  0183BC  ECC9  F0C7         	call	_eusartSend
  7612                           
  7613                           ;dans.c: 323: int Home_Base_State = (eusartRec());
  7614  0183C0  ECF6  F0C7         	call	_eusartRec	;wreg free
  7615  0183C4  0100               	movlb	0	; () banked
  7616  0183C6  6F63               	movwf	??_Detect_Victim& (0+255),b
  7617  0183C8  5163               	movf	??_Detect_Victim& (0+255),w,b
  7618  0183CA  6F64               	movwf	Detect_Victim@Home_Base_State& (0+255),b
  7619  0183CC  6B65               	clrf	(Detect_Victim@Home_Base_State+1)& (0+255),b
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;dans.c: 324: if (Home_Base_State == 254 || Home_Base_State == 250 || Home_Base_State ==
      +                           246) {
  7623  0183CE  0EFE               	movlw	254
  7624  0183D0  1964               	xorwf	Detect_Victim@Home_Base_State& (0+255),w,b
  7625  0183D2  1165               	iorwf	(Detect_Victim@Home_Base_State+1)& (0+255),w,b
  7626  0183D4  B4D8               	btfsc	status,2,c
  7627  0183D6  D00A               	goto	u13470
  7628                           
  7629                           ; BSR set to: 0
  7630  0183D8  0EFA               	movlw	250
  7631  0183DA  1964               	xorwf	Detect_Victim@Home_Base_State& (0+255),w,b
  7632  0183DC  1165               	iorwf	(Detect_Victim@Home_Base_State+1)& (0+255),w,b
  7633  0183DE  B4D8               	btfsc	status,2,c
  7634  0183E0  D005               	goto	u13470
  7635                           
  7636                           ; BSR set to: 0
  7637  0183E2  0EF6               	movlw	246
  7638  0183E4  1964               	xorwf	Detect_Victim@Home_Base_State& (0+255),w,b
  7639  0183E6  1165               	iorwf	(Detect_Victim@Home_Base_State+1)& (0+255),w,b
  7640  0183E8  A4D8               	btfss	status,2,c
  7641  0183EA  D005               	goto	l2435
  7642  0183EC                     u13470:
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;dans.c: 325: return 1;
  7646                           
  7647                           ; BSR set to: 0
  7648  0183EC  0E00               	movlw	0
  7649  0183EE  6F62               	movwf	(?_Detect_Victim+1)& (0+255),b
  7650  0183F0  0E01               	movlw	1
  7651  0183F2  6F61               	movwf	?_Detect_Victim& (0+255),b
  7652                           
  7653                           ; BSR set to: 0
  7654  0183F4  0012               	return	
  7655  0183F6                     l2435:
  7656                           
  7657                           ; BSR set to: 0
  7658                           ;dans.c: 326: }
  7659                           ;dans.c: 327: return 0;
  7660                           
  7661                           ; BSR set to: 0
  7662  0183F6  0E00               	movlw	0
  7663  0183F8  6F62               	movwf	(?_Detect_Victim+1)& (0+255),b
  7664  0183FA  0E00               	movlw	0
  7665  0183FC  6F61               	movwf	?_Detect_Victim& (0+255),b
  7666  0183FE  0012               	return	
  7667  018400                     __end_of_Detect_Victim:
  7668                           	opt stack 0
  7669                           tosu	equ	0xFFF
  7670                           tosh	equ	0xFFE
  7671                           tosl	equ	0xFFD
  7672                           pclath	equ	0xFFA
  7673                           tblptru	equ	0xFF8
  7674                           tblptrh	equ	0xFF7
  7675                           tblptrl	equ	0xFF6
  7676                           tablat	equ	0xFF5
  7677                           postinc0	equ	0xFEE
  7678                           wreg	equ	0xFE8
  7679                           postdec1	equ	0xFE5
  7680                           fsr1h	equ	0xFE2
  7681                           fsr1l	equ	0xFE1
  7682                           indf2	equ	0xFDF
  7683                           postinc2	equ	0xFDE
  7684                           postdec2	equ	0xFDD
  7685                           plusw2	equ	0xFDB
  7686                           fsr2h	equ	0xFDA
  7687                           fsr2l	equ	0xFD9
  7688                           status	equ	0xFD8
  7689                           
  7690 ;; *************** function _MXK_Init *****************
  7691 ;; Defined at:
  7692 ;;		line 33 in file "Library/MXK.c"
  7693 ;; Parameters:    Size  Location     Type
  7694 ;;		None
  7695 ;; Auto vars:     Size  Location     Type
  7696 ;;		None
  7697 ;; Return value:  Size  Location     Type
  7698 ;;                  1    wreg      void 
  7699 ;; Registers used:
  7700 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7701 ;; Tracked objects:
  7702 ;;		On entry : 0/0
  7703 ;;		On exit  : 0/0
  7704 ;;		Unchanged: 0/0
  7705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7710 ;;Total ram usage:        0 bytes
  7711 ;; Hardware stack levels used:    1
  7712 ;; Hardware stack levels required when called:   16
  7713 ;; This function calls:
  7714 ;;		_LED_Init
  7715 ;;		_Port_Init
  7716 ;;		_Port_SetPin
  7717 ;;		_Port_SetPinType
  7718 ;;		_Port_SetQuadType
  7719 ;;		_Port_SetType
  7720 ;;		_delay_ms
  7721 ;; This function is called by:
  7722 ;;		_main
  7723 ;; This function uses a non-reentrant model
  7724 ;;
  7725                           
  7726                           	psect	text14
  7727  016258                     __ptext14:
  7728                           	opt stack 0
  7729  016258                     _MXK_Init:
  7730                           	opt stack 14
  7731                           
  7732                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  7733                           
  7734                           ; BSR set to: 0
  7735                           ;incstack = 0
  7736  016258  0E01               	movlw	1
  7737  01625A  6E4D               	movwf	_Bus_State,c
  7738                           
  7739                           ;MXK.c: 36: lQueue = (Function)0;
  7740  01625C  0E00               	movlw	0
  7741  01625E  6E29               	movwf	_lQueue,c	;volatile
  7742  016260  0E00               	movlw	0
  7743  016262  6E2A               	movwf	_lQueue+1,c	;volatile
  7744  016264  0E00               	movlw	0
  7745  016266  6E2B               	movwf	_lQueue+2,c	;volatile
  7746                           
  7747                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  7748  016268  0EE4               	movlw	low _PortA
  7749  01626A  0100               	movlb	0	; () banked
  7750  01626C  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7751  01626E  0E03               	movlw	high _PortA
  7752  016270  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7753  016272  0E00               	movlw	0
  7754  016274  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7755  016276  EC1C  F0AB         	call	_Port_Init	;wreg free
  7756                           
  7757                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  7758  01627A  0EF2               	movlw	low _PortB
  7759  01627C  0100               	movlb	0	; () banked
  7760  01627E  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7761  016280  0E02               	movlw	high _PortB
  7762  016282  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7763  016284  0E01               	movlw	1
  7764  016286  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7765  016288  EC1C  F0AB         	call	_Port_Init	;wreg free
  7766                           
  7767                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  7768  01628C  0E79               	movlw	low _PortC
  7769  01628E  0100               	movlb	0	; () banked
  7770  016290  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7771  016292  0E01               	movlw	high _PortC
  7772  016294  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7773  016296  0E02               	movlw	2
  7774  016298  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7775  01629A  EC1C  F0AB         	call	_Port_Init	;wreg free
  7776                           
  7777                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  7778  01629E  0E6F               	movlw	low _PortD
  7779  0162A0  0100               	movlb	0	; () banked
  7780  0162A2  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7781  0162A4  0E01               	movlw	high _PortD
  7782  0162A6  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7783  0162A8  0E03               	movlw	3
  7784  0162AA  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7785  0162AC  EC1C  F0AB         	call	_Port_Init	;wreg free
  7786                           
  7787                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  7788  0162B0  0E65               	movlw	low _PortE
  7789  0162B2  0100               	movlb	0	; () banked
  7790  0162B4  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7791  0162B6  0E01               	movlw	high _PortE
  7792  0162B8  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7793  0162BA  0E04               	movlw	4
  7794  0162BC  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7795  0162BE  EC1C  F0AB         	call	_Port_Init	;wreg free
  7796                           
  7797                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  7798  0162C2  0E83               	movlw	low _PortF
  7799  0162C4  0100               	movlb	0	; () banked
  7800  0162C6  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7801  0162C8  0E01               	movlw	high _PortF
  7802  0162CA  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7803  0162CC  0E05               	movlw	5
  7804  0162CE  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7805  0162D0  EC1C  F0AB         	call	_Port_Init	;wreg free
  7806                           
  7807                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  7808  0162D4  0EE8               	movlw	low _PortG
  7809  0162D6  0100               	movlb	0	; () banked
  7810  0162D8  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7811  0162DA  0E02               	movlw	high _PortG
  7812  0162DC  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7813  0162DE  0E06               	movlw	6
  7814  0162E0  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7815  0162E2  EC1C  F0AB         	call	_Port_Init	;wreg free
  7816                           
  7817                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  7818  0162E6  0E83               	movlw	low _PortF
  7819  0162E8  0100               	movlb	0	; () banked
  7820  0162EA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7821  0162EC  0E01               	movlw	high _PortF
  7822  0162EE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7823  0162F0  0E05               	movlw	5
  7824  0162F2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7825  0162F4  0E00               	movlw	0
  7826  0162F6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7827  0162F8  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
  7828                           
  7829                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  7830  0162FC  0EF2               	movlw	low _PortB
  7831  0162FE  0100               	movlb	0	; () banked
  7832  016300  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
  7833  016302  0E02               	movlw	high _PortB
  7834  016304  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  7835  016306  0E00               	movlw	0
  7836  016308  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
  7837  01630A  0E00               	movlw	0
  7838  01630C  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
  7839  01630E  ECD8  F0A5         	call	_Port_SetQuadType	;wreg free
  7840                           
  7841                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  7842  016312  0E83               	movlw	low _PortF
  7843  016314  0100               	movlb	0	; () banked
  7844  016316  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7845  016318  0E01               	movlw	high _PortF
  7846  01631A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7847  01631C  0E06               	movlw	6
  7848  01631E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7849  016320  0E03               	movlw	3
  7850  016322  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7851  016324  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
  7852                           
  7853                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  7854  016328  0EE8               	movlw	low _PortG
  7855  01632A  0100               	movlb	0	; () banked
  7856  01632C  6F9A               	movwf	Port_SetType@pInput& (0+255),b
  7857  01632E  0E02               	movlw	high _PortG
  7858  016330  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
  7859  016332  0E03               	movlw	3
  7860  016334  6F9C               	movwf	Port_SetType@pType& (0+255),b
  7861  016336  ECCC  F0A7         	call	_Port_SetType	;wreg free
  7862                           
  7863                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  7864  01633A  0EE8               	movlw	low _PortG
  7865  01633C  0100               	movlb	0	; () banked
  7866  01633E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7867  016340  0E02               	movlw	high _PortG
  7868  016342  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7869  016344  0E04               	movlw	4
  7870  016346  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7871  016348  0E00               	movlw	0
  7872  01634A  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7873  01634C  EC1B  F0B7         	call	_Port_SetPin	;wreg free
  7874                           
  7875                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  7876  016350  0E83               	movlw	low _PortF
  7877  016352  0100               	movlb	0	; () banked
  7878  016354  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7879  016356  0E01               	movlw	high _PortF
  7880  016358  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7881  01635A  0E06               	movlw	6
  7882  01635C  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7883  01635E  0E01               	movlw	1
  7884  016360  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7885  016362  EC1B  F0B7         	call	_Port_SetPin	;wreg free
  7886                           
  7887                           ;MXK.c: 55: LED_Init(eLED1);
  7888  016366  0E00               	movlw	0
  7889  016368  EC67  F0C0         	call	_LED_Init
  7890                           
  7891                           ;MXK.c: 56: LED_Init(eLED2);
  7892  01636C  0E01               	movlw	1
  7893  01636E  EC67  F0C0         	call	_LED_Init
  7894                           
  7895                           ;MXK.c: 58: PIR1 = 0;
  7896  016372  0E00               	movlw	0
  7897  016374  6E9E               	movwf	3998,c	;volatile
  7898                           
  7899                           ;MXK.c: 59: PIR2 = 0;
  7900  016376  0E00               	movlw	0
  7901  016378  6EA1               	movwf	4001,c	;volatile
  7902                           
  7903                           ;MXK.c: 60: PIR3 = 0;
  7904  01637A  0E00               	movlw	0
  7905  01637C  6EA4               	movwf	4004,c	;volatile
  7906                           
  7907                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  7908  01637E  8E9B               	bsf	3995,7,c	;volatile
  7909                           
  7910                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  7911  016380  8C9B               	bsf	3995,6,c	;volatile
  7912                           
  7913                           ;MXK.c: 66: delay_ms(100);
  7914  016382  0E00               	movlw	0
  7915  016384  0100               	movlb	0	; () banked
  7916  016386  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  7917  016388  0E64               	movlw	100
  7918  01638A  6F60               	movwf	delay_ms@ms& (0+255),b
  7919  01638C  EC39  F0C0         	call	_delay_ms	;wreg free
  7920                           
  7921                           ;MXK.c: 68: RCONbits.IPEN = 1;
  7922  016390  8ED0               	bsf	4048,7,c	;volatile
  7923  016392  0012               	return		;funcret
  7924  016394                     __end_of_MXK_Init:
  7925                           	opt stack 0
  7926                           tosu	equ	0xFFF
  7927                           tosh	equ	0xFFE
  7928                           tosl	equ	0xFFD
  7929                           pclath	equ	0xFFA
  7930                           tblptru	equ	0xFF8
  7931                           tblptrh	equ	0xFF7
  7932                           tblptrl	equ	0xFF6
  7933                           tablat	equ	0xFF5
  7934                           postinc0	equ	0xFEE
  7935                           wreg	equ	0xFE8
  7936                           postdec1	equ	0xFE5
  7937                           fsr1h	equ	0xFE2
  7938                           fsr1l	equ	0xFE1
  7939                           indf2	equ	0xFDF
  7940                           postinc2	equ	0xFDE
  7941                           postdec2	equ	0xFDD
  7942                           plusw2	equ	0xFDB
  7943                           fsr2h	equ	0xFDA
  7944                           fsr2l	equ	0xFD9
  7945                           status	equ	0xFD8
  7946                           
  7947 ;; *************** function _Port_Init *****************
  7948 ;; Defined at:
  7949 ;;		line 150 in file "Library/Port.c"
  7950 ;; Parameters:    Size  Location     Type
  7951 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  7952 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  7953 ;;		 -> PortD(10), PortC(10), PortF(10), 
  7954 ;;  pPort           1   66[BANK0 ] enum E6786
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;  i               1   69[BANK0 ] unsigned char 
  7957 ;; Return value:  Size  Location     Type
  7958 ;;                  1    wreg      void 
  7959 ;; Registers used:
  7960 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7966 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7967 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7968 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7969 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7970 ;;Total ram usage:        6 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; Hardware stack levels required when called:   15
  7973 ;; This function calls:
  7974 ;;		_GetPortPORT
  7975 ;;		_GetPortProperties
  7976 ;;		_GetPortTRIS
  7977 ;;		_Port_Set
  7978 ;;		_Port_SetPinType
  7979 ;;		_Port_SetType
  7980 ;;		_Word_GetPair
  7981 ;; This function is called by:
  7982 ;;		_MXK_Init
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           	psect	text15
  7987  015638                     __ptext15:
  7988                           	opt stack 0
  7989  015638                     _Port_Init:
  7990                           	opt stack 14
  7991                           
  7992                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  7993                           
  7994                           ;incstack = 0
  7995  015638  0100               	movlb	0	; () banked
  7996  01563A  51A2               	movf	Port_Init@pPort& (0+255),w,b
  7997  01563C  EC1B  F0BB         	call	_GetPortProperties
  7998  015640  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  7999  015644  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  8000  015648  0100               	movlb	0	; () banked
  8001  01564A  C060  FFDE         	movff	?_GetPortProperties,postinc2
  8002  01564E  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
  8003                           
  8004                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  8005  015652  51A2               	movf	Port_Init@pPort& (0+255),w,b
  8006  015654  EC5F  F0BB         	call	_GetPortPORT
  8007  015658  0100               	movlb	0	; () banked
  8008  01565A  EE20 F006          	lfsr	2,6
  8009  01565E  51A0               	movf	Port_Init@pInput& (0+255),w,b
  8010  015660  26D9               	addwf	fsr2l,f,c
  8011  015662  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  8012  015664  22DA               	addwfc	fsr2h,f,c
  8013  015666  C060  FFDE         	movff	?_GetPortPORT,postinc2
  8014  01566A  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  8015                           
  8016                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  8017  01566E  51A2               	movf	Port_Init@pPort& (0+255),w,b
  8018  015670  EC5F  F0BB         	call	_GetPortPORT
  8019  015674  0100               	movlb	0	; () banked
  8020  015676  EE20 F004          	lfsr	2,4
  8021  01567A  51A0               	movf	Port_Init@pInput& (0+255),w,b
  8022  01567C  26D9               	addwf	fsr2l,f,c
  8023  01567E  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  8024  015680  22DA               	addwfc	fsr2h,f,c
  8025  015682  C060  FFDE         	movff	?_GetPortPORT,postinc2
  8026  015686  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  8027                           
  8028                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  8029  01568A  51A2               	movf	Port_Init@pPort& (0+255),w,b
  8030  01568C  ECD7  F0BA         	call	_GetPortTRIS
  8031  015690  0100               	movlb	0	; () banked
  8032  015692  EE20 F002          	lfsr	2,2
  8033  015696  51A0               	movf	Port_Init@pInput& (0+255),w,b
  8034  015698  26D9               	addwf	fsr2l,f,c
  8035  01569A  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  8036  01569C  22DA               	addwfc	fsr2h,f,c
  8037  01569E  C060  FFDE         	movff	?_GetPortTRIS,postinc2
  8038  0156A2  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
  8039                           
  8040                           ; BSR set to: 0
  8041                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  8042  0156A6  EE20 F004          	lfsr	2,4
  8043  0156AA  51A0               	movf	Port_Init@pInput& (0+255),w,b
  8044  0156AC  26D9               	addwf	fsr2l,f,c
  8045  0156AE  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  8046  0156B0  22DA               	addwfc	fsr2h,f,c
  8047  0156B2  CFDE F0A3          	movff	postinc2,??_Port_Init
  8048  0156B6  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  8049  0156BA  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  8050  0156BE  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  8051  0156C2  0E00               	movlw	0
  8052  0156C4  6EDF               	movwf	indf2,c
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  8056  0156C6  EE20 F002          	lfsr	2,2
  8057  0156CA  51A0               	movf	Port_Init@pInput& (0+255),w,b
  8058  0156CC  26D9               	addwf	fsr2l,f,c
  8059  0156CE  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  8060  0156D0  22DA               	addwfc	fsr2h,f,c
  8061  0156D2  CFDE F0A3          	movff	postinc2,??_Port_Init
  8062  0156D6  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  8063  0156DA  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  8064  0156DE  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  8065  0156E2  0EFF               	movlw	255
  8066  0156E4  6EDF               	movwf	indf2,c
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  8070  0156E6  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
  8071  0156EA  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  8072  0156EE  0E00               	movlw	0
  8073  0156F0  6F9C               	movwf	Port_SetType@pType& (0+255),b
  8074  0156F2  ECCC  F0A7         	call	_Port_SetType	;wreg free
  8075                           
  8076                           ;Port.c: 166: UINT8 i;
  8077                           ;Port.c: 167: for (i=0; i<8; i++)
  8078  0156F6  0E00               	movlw	0
  8079  0156F8  0100               	movlb	0	; () banked
  8080  0156FA  6FA5               	movwf	Port_Init@i& (0+255),b
  8081  0156FC                     l16835:
  8082                           
  8083                           ; BSR set to: 0
  8084  0156FC  0E07               	movlw	7
  8085  0156FE  65A5               	cpfsgt	Port_Init@i& (0+255),b
  8086  015700  D031               	goto	l403
  8087  015702  D04B               	goto	u14340
  8088  015704                     
  8089                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  8090                           
  8091                           ; BSR set to: 0
  8092  015704  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  8093  015708  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  8094  01570C  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  8095  015710  0E03               	movlw	3
  8096  015712  0100               	movlb	0	; () banked
  8097  015714  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  8098  015716  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
  8099                           
  8100                           ;Port.c: 173: break;
  8101  01571A  D03C               	goto	l405
  8102  01571C                     
  8103                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  8104  01571C  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  8105  015720  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  8106  015724  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  8107  015728  0E02               	movlw	2
  8108  01572A  0100               	movlb	0	; () banked
  8109  01572C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  8110  01572E  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
  8111                           
  8112                           ;Port.c: 176: break;
  8113  015732  D030               	goto	l405
  8114  015734                     
  8115                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  8116  015734  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  8117  015738  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  8118  01573C  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  8119  015740  0E01               	movlw	1
  8120  015742  0100               	movlb	0	; () banked
  8121  015744  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  8122  015746  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
  8123                           
  8124                           ;Port.c: 179: break;
  8125  01574A  D024               	goto	l405
  8126  01574C                     
  8127                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  8128  01574C  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  8129  015750  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  8130  015754  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  8131  015758  0E00               	movlw	0
  8132  01575A  0100               	movlb	0	; () banked
  8133  01575C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  8134  01575E  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
  8135                           
  8136                           ;Port.c: 183: }
  8137                           
  8138                           ;Port.c: 182: break;
  8139  015762  D018               	goto	l405
  8140  015764                     l403:
  8141  015764  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  8142  015768  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  8143  01576C  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
  8144  015770  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
  8145  015774  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
  8146  015778  EC12  F0C5         	call	_Word_GetPair	;wreg free
  8147                           
  8148                           ; Switch size 1, requested type "space"
  8149                           ; Number of cases is 4, Range of values is 0 to 3
  8150                           ; switch strategies available:
  8151                           ; Name         Instructions Cycles
  8152                           ; simple_byte           13     7 (average)
  8153                           ;	Chosen strategy is simple_byte
  8154  01577C  0A00               	xorlw	0	; case 0
  8155  01577E  B4D8               	btfsc	status,2,c
  8156  015780  D7C1               	goto	l404
  8157  015782  0A01               	xorlw	1	; case 1
  8158  015784  B4D8               	btfsc	status,2,c
  8159  015786  D7D6               	goto	l407
  8160  015788  0A03               	xorlw	3	; case 2
  8161  01578A  B4D8               	btfsc	status,2,c
  8162  01578C  D7C7               	goto	l406
  8163  01578E  0A01               	xorlw	1	; case 3
  8164  015790  B4D8               	btfsc	status,2,c
  8165  015792  D7DC               	goto	l408
  8166  015794                     l405:
  8167  015794  0100               	movlb	0	; () banked
  8168  015796  2BA5               	incf	Port_Init@i& (0+255),f,b
  8169  015798  D7B1               	goto	l16835
  8170  01579A                     u14340:
  8171                           
  8172                           ; BSR set to: 0
  8173                           ;Port.c: 184: }
  8174                           ;Port.c: 185: Port_Set(pInput, 0x00);
  8175                           
  8176                           ; BSR set to: 0
  8177  01579A  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
  8178  01579E  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  8179  0157A2  0E00               	movlw	0
  8180  0157A4  6F71               	movwf	Port_Set@pValue& (0+255),b
  8181  0157A6  ECDF  F0A0         	call	_Port_Set	;wreg free
  8182  0157AA  0012               	return		;funcret
  8183  0157AC                     __end_of_Port_Init:
  8184                           	opt stack 0
  8185                           tosu	equ	0xFFF
  8186                           tosh	equ	0xFFE
  8187                           tosl	equ	0xFFD
  8188                           pclath	equ	0xFFA
  8189                           tblptru	equ	0xFF8
  8190                           tblptrh	equ	0xFF7
  8191                           tblptrl	equ	0xFF6
  8192                           tablat	equ	0xFF5
  8193                           postinc0	equ	0xFEE
  8194                           wreg	equ	0xFE8
  8195                           postdec1	equ	0xFE5
  8196                           fsr1h	equ	0xFE2
  8197                           fsr1l	equ	0xFE1
  8198                           indf2	equ	0xFDF
  8199                           postinc2	equ	0xFDE
  8200                           postdec2	equ	0xFDD
  8201                           plusw2	equ	0xFDB
  8202                           fsr2h	equ	0xFDA
  8203                           fsr2l	equ	0xFD9
  8204                           status	equ	0xFD8
  8205                           
  8206 ;; *************** function _Port_SetType *****************
  8207 ;; Defined at:
  8208 ;;		line 513 in file "Library/Port.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  8211 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8212 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8213 ;;  pType           1   60[BANK0 ] enum E6795
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  Output          1   63[BANK0 ] enum E6475
  8216 ;; Return value:  Size  Location     Type
  8217 ;;                  1    wreg      enum E6475
  8218 ;; Registers used:
  8219 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8220 ;; Tracked objects:
  8221 ;;		On entry : 0/0
  8222 ;;		On exit  : 0/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8225 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8227 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8228 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8229 ;;Total ram usage:        6 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:   14
  8232 ;; This function calls:
  8233 ;;		_Port_CheckPortType
  8234 ;;		_Word_SetPair
  8235 ;; This function is called by:
  8236 ;;		_Port_Init
  8237 ;;		_MXK_Init
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           	psect	text16
  8242  014F98                     __ptext16:
  8243                           	opt stack 0
  8244  014F98                     _Port_SetType:
  8245                           	opt stack 15
  8246                           
  8247                           ;Port.c: 515: ePinError Output = ePinErrorState;
  8248                           
  8249                           ;incstack = 0
  8250  014F98  0E05               	movlw	5
  8251  014F9A  0100               	movlb	0	; () banked
  8252  014F9C  6F9F               	movwf	Port_SetType@Output& (0+255),b
  8253                           
  8254                           ;Port.c: 517: switch (pType)
  8255  014F9E  D06E               	goto	l509
  8256  014FA0                     
  8257                           ; BSR set to: 0
  8258                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  8259                           
  8260                           ; BSR set to: 0
  8261  014FA0  EE20 F002          	lfsr	2,2
  8262  014FA4  519A               	movf	Port_SetType@pInput& (0+255),w,b
  8263  014FA6  26D9               	addwf	fsr2l,f,c
  8264  014FA8  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8265  014FAA  22DA               	addwfc	fsr2h,f,c
  8266  014FAC  CFDE F09D          	movff	postinc2,??_Port_SetType
  8267  014FB0  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  8268  014FB4  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  8269  014FB8  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  8270  014FBC  0EFF               	movlw	255
  8271  014FBE  D05C               	goto	L11
  8272  014FC0                     
  8273                           ; BSR set to: 0
  8274                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  8275                           
  8276                           ; BSR set to: 0
  8277  014FC0  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8278  014FC4  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8279  014FC8  0E01               	movlw	1
  8280  014FCA  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8281  014FCC  ECB2  F0C3         	call	_Port_CheckPortType	;wreg free
  8282  014FD0  0100               	movlb	0	; () banked
  8283  014FD2  6F9F               	movwf	Port_SetType@Output& (0+255),b
  8284  014FD4  519F               	movf	Port_SetType@Output& (0+255),w,b
  8285  014FD6  A4D8               	btfss	status,2,c
  8286  014FD8  0012               	return	
  8287                           
  8288                           ; BSR set to: 0
  8289                           ;Port.c: 527: {
  8290                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  8291  014FDA  EE20 F002          	lfsr	2,2
  8292  014FDE  519A               	movf	Port_SetType@pInput& (0+255),w,b
  8293  014FE0  26D9               	addwf	fsr2l,f,c
  8294  014FE2  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8295  014FE4  22DA               	addwfc	fsr2h,f,c
  8296  014FE6  CFDE F09D          	movff	postinc2,??_Port_SetType
  8297  014FEA  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  8298  014FEE  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  8299  014FF2  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  8300  014FF6  0E00               	movlw	0
  8301  014FF8  6EDF               	movwf	indf2,c
  8302                           
  8303                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  8304  014FFA  EE20 F004          	lfsr	2,4
  8305  014FFE  D02F               	goto	L26
  8306  015000                     
  8307                           ; BSR set to: 0
  8308                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  8309                           
  8310                           ; BSR set to: 0
  8311  015000  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8312  015004  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8313  015008  0E02               	movlw	2
  8314  01500A  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8315  01500C  ECB2  F0C3         	call	_Port_CheckPortType	;wreg free
  8316  015010  0100               	movlb	0	; () banked
  8317  015012  6F9F               	movwf	Port_SetType@Output& (0+255),b
  8318  015014  519F               	movf	Port_SetType@Output& (0+255),w,b
  8319  015016  A4D8               	btfss	status,2,c
  8320  015018  0012               	return	
  8321                           
  8322                           ; BSR set to: 0
  8323                           ;Port.c: 538: {
  8324                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  8325  01501A  EE20 F002          	lfsr	2,2
  8326  01501E  519A               	movf	Port_SetType@pInput& (0+255),w,b
  8327  015020  26D9               	addwf	fsr2l,f,c
  8328  015022  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8329  015024  22DA               	addwfc	fsr2h,f,c
  8330  015026  CFDE F09D          	movff	postinc2,??_Port_SetType
  8331  01502A  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  8332  01502E  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  8333  015032  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  8334  015036  0EFF               	movlw	255
  8335  015038  6EDF               	movwf	indf2,c
  8336                           
  8337                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  8338  01503A  EE20 F004          	lfsr	2,4
  8339  01503E  D7B2               	goto	L12
  8340  015040                     
  8341                           ; BSR set to: 0
  8342                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  8343                           
  8344                           ; BSR set to: 0
  8345  015040  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8346  015044  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8347  015048  0E00               	movlw	0
  8348  01504A  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8349  01504C  ECB2  F0C3         	call	_Port_CheckPortType	;wreg free
  8350  015050  0100               	movlb	0	; () banked
  8351  015052  6F9F               	movwf	Port_SetType@Output& (0+255),b
  8352  015054  519F               	movf	Port_SetType@Output& (0+255),w,b
  8353  015056  A4D8               	btfss	status,2,c
  8354  015058  0012               	return	
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;Port.c: 549: {
  8358                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  8359  01505A  EE20 F002          	lfsr	2,2
  8360  01505E                     L26:
  8361  01505E  519A               	movf	Port_SetType@pInput& (0+255),w,b
  8362  015060  26D9               	addwf	fsr2l,f,c
  8363  015062  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8364  015064  22DA               	addwfc	fsr2h,f,c
  8365  015066  CFDE F09D          	movff	postinc2,??_Port_SetType
  8366  01506A  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  8367  01506E  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  8368  015072  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  8369  015076  0E00               	movlw	0
  8370  015078                     L11:
  8371  015078  6EDF               	movwf	indf2,c
  8372                           
  8373                           ;Port.c: 552: }
  8374  01507A  D00D               	goto	l511
  8375  01507C                     l509:
  8376                           
  8377                           ; BSR set to: 0
  8378                           
  8379                           ; BSR set to: 0
  8380  01507C  519C               	movf	Port_SetType@pType& (0+255),w,b
  8381                           
  8382                           ; Switch size 1, requested type "space"
  8383                           ; Number of cases is 4, Range of values is 0 to 3
  8384                           ; switch strategies available:
  8385                           ; Name         Instructions Cycles
  8386                           ; simple_byte           13     7 (average)
  8387                           ;	Chosen strategy is simple_byte
  8388  01507E  0A00               	xorlw	0	; case 0
  8389  015080  B4D8               	btfsc	status,2,c
  8390  015082  D78E               	goto	l510
  8391  015084  0A01               	xorlw	1	; case 1
  8392  015086  B4D8               	btfsc	status,2,c
  8393  015088  D79B               	goto	l512
  8394  01508A  0A03               	xorlw	3	; case 2
  8395  01508C  B4D8               	btfsc	status,2,c
  8396  01508E  D7B8               	goto	l516
  8397  015090  0A01               	xorlw	1	; case 3
  8398  015092  B4D8               	btfsc	status,2,c
  8399  015094  D7D5               	goto	l519
  8400  015096                     l511:
  8401                           
  8402                           ; BSR set to: 0
  8403                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  8404                           
  8405                           ; BSR set to: 0
  8406  015096  0E08               	movlw	8
  8407  015098  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8408  01509A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8409  01509C  0E00               	movlw	0
  8410  01509E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8411  0150A0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8412  0150A2  0E00               	movlw	0
  8413  0150A4  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8414  0150A6  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8415  0150AA  EC89  F0C4         	call	_Word_SetPair	;wreg free
  8416                           
  8417                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  8418  0150AE  0E08               	movlw	8
  8419  0150B0  0100               	movlb	0	; () banked
  8420  0150B2  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8421  0150B4  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8422  0150B6  0E00               	movlw	0
  8423  0150B8  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8424  0150BA  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8425  0150BC  0E01               	movlw	1
  8426  0150BE  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8427  0150C0  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8428  0150C4  EC89  F0C4         	call	_Word_SetPair	;wreg free
  8429                           
  8430                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  8431  0150C8  0E08               	movlw	8
  8432  0150CA  0100               	movlb	0	; () banked
  8433  0150CC  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8434  0150CE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8435  0150D0  0E00               	movlw	0
  8436  0150D2  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8437  0150D4  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8438  0150D6  0E02               	movlw	2
  8439  0150D8  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8440  0150DA  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8441  0150DE  EC89  F0C4         	call	_Word_SetPair	;wreg free
  8442                           
  8443                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  8444  0150E2  0E08               	movlw	8
  8445  0150E4  0100               	movlb	0	; () banked
  8446  0150E6  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8447  0150E8  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8448  0150EA  0E00               	movlw	0
  8449  0150EC  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8450  0150EE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8451  0150F0  0E03               	movlw	3
  8452  0150F2  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8453  0150F4  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8454  0150F8  EC89  F0C4         	call	_Word_SetPair	;wreg free
  8455                           
  8456                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  8457  0150FC  0E08               	movlw	8
  8458  0150FE  0100               	movlb	0	; () banked
  8459  015100  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8460  015102  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8461  015104  0E00               	movlw	0
  8462  015106  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8463  015108  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8464  01510A  0E04               	movlw	4
  8465  01510C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8466  01510E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8467  015112  EC89  F0C4         	call	_Word_SetPair	;wreg free
  8468                           
  8469                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  8470  015116  0E08               	movlw	8
  8471  015118  0100               	movlb	0	; () banked
  8472  01511A  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8473  01511C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8474  01511E  0E00               	movlw	0
  8475  015120  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8476  015122  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8477  015124  0E05               	movlw	5
  8478  015126  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8479  015128  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8480  01512C  EC89  F0C4         	call	_Word_SetPair	;wreg free
  8481                           
  8482                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  8483  015130  0E08               	movlw	8
  8484  015132  0100               	movlb	0	; () banked
  8485  015134  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8486  015136  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8487  015138  0E00               	movlw	0
  8488  01513A  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8489  01513C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8490  01513E  0E06               	movlw	6
  8491  015140  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8492  015142  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8493  015146  EC89  F0C4         	call	_Word_SetPair	;wreg free
  8494                           
  8495                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  8496  01514A  0E08               	movlw	8
  8497  01514C  0100               	movlb	0	; () banked
  8498  01514E  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8499  015150  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8500  015152  0E00               	movlw	0
  8501  015154  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8502  015156  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8503  015158  0E07               	movlw	7
  8504  01515A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8505  01515C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8506  015160  EC89  F0C4         	call	_Word_SetPair	;wreg free
  8507  015164  0012               	return	
  8508  015166                     __end_of_Port_SetType:
  8509                           	opt stack 0
  8510                           tosu	equ	0xFFF
  8511                           tosh	equ	0xFFE
  8512                           tosl	equ	0xFFD
  8513                           pclath	equ	0xFFA
  8514                           tblptru	equ	0xFF8
  8515                           tblptrh	equ	0xFF7
  8516                           tblptrl	equ	0xFF6
  8517                           tablat	equ	0xFF5
  8518                           postinc0	equ	0xFEE
  8519                           wreg	equ	0xFE8
  8520                           postdec1	equ	0xFE5
  8521                           fsr1h	equ	0xFE2
  8522                           fsr1l	equ	0xFE1
  8523                           indf2	equ	0xFDF
  8524                           postinc2	equ	0xFDE
  8525                           postdec2	equ	0xFDD
  8526                           plusw2	equ	0xFDB
  8527                           fsr2h	equ	0xFDA
  8528                           fsr2l	equ	0xFD9
  8529                           status	equ	0xFD8
  8530                           
  8531 ;; *************** function _Port_CheckPortType *****************
  8532 ;; Defined at:
  8533 ;;		line 138 in file "Library/Port.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  8536 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8537 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8538 ;;  pDrive          1   56[BANK0 ] enum E6469
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;  Output          1   57[BANK0 ] enum E6475
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  1    wreg      enum E6475
  8543 ;; Registers used:
  8544 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8550 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8551 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8553 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8554 ;;Total ram usage:        4 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:   13
  8557 ;; This function calls:
  8558 ;;		_Port_CheckQuadType
  8559 ;; This function is called by:
  8560 ;;		_Port_SetType
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           	psect	text17
  8565  018764                     __ptext17:
  8566                           	opt stack 0
  8567  018764                     _Port_CheckPortType:
  8568                           	opt stack 15
  8569                           
  8570                           ;Port.c: 140: ePinError Output = ePinErrorState;
  8571                           
  8572                           ;incstack = 0
  8573  018764  0E05               	movlw	5
  8574  018766  0100               	movlb	0	; () banked
  8575  018768  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  8576                           
  8577                           ; BSR set to: 0
  8578                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  8579  01876A  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  8580  01876E  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  8581  018772  0E00               	movlw	0
  8582  018774  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  8583  018776  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  8584  01877A  EC8A  F0C1         	call	_Port_CheckQuadType	;wreg free
  8585  01877E  0100               	movlb	0	; () banked
  8586  018780  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  8587  018782  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  8588  018784  A4D8               	btfss	status,2,c
  8589  018786  D00C               	goto	l397
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  8593  018788  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  8594  01878C  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  8595  018790  0E01               	movlw	1
  8596  018792  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  8597  018794  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  8598  018798  EC8A  F0C1         	call	_Port_CheckQuadType	;wreg free
  8599  01879C  0100               	movlb	0	; () banked
  8600  01879E  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  8601  0187A0                     l397:
  8602                           
  8603                           ; BSR set to: 0
  8604                           ;Port.c: 146: return Output;
  8605                           
  8606                           ; BSR set to: 0
  8607  0187A0  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  8608  0187A2  0012               	return	
  8609  0187A4                     __end_of_Port_CheckPortType:
  8610                           	opt stack 0
  8611                           tosu	equ	0xFFF
  8612                           tosh	equ	0xFFE
  8613                           tosl	equ	0xFFD
  8614                           pclath	equ	0xFFA
  8615                           tblptru	equ	0xFF8
  8616                           tblptrh	equ	0xFF7
  8617                           tblptrl	equ	0xFF6
  8618                           tablat	equ	0xFF5
  8619                           postinc0	equ	0xFEE
  8620                           wreg	equ	0xFE8
  8621                           postdec1	equ	0xFE5
  8622                           fsr1h	equ	0xFE2
  8623                           fsr1l	equ	0xFE1
  8624                           indf2	equ	0xFDF
  8625                           postinc2	equ	0xFDE
  8626                           postdec2	equ	0xFDD
  8627                           plusw2	equ	0xFDB
  8628                           fsr2h	equ	0xFDA
  8629                           fsr2l	equ	0xFD9
  8630                           status	equ	0xFD8
  8631                           
  8632 ;; *************** function _Port_Set *****************
  8633 ;; Defined at:
  8634 ;;		line 570 in file "Library/Port.c"
  8635 ;; Parameters:    Size  Location     Type
  8636 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  8637 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8638 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8639 ;;  pValue          1   17[BANK0 ] unsigned char 
  8640 ;; Auto vars:     Size  Location     Type
  8641 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  8642 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  8643 ;;  Type            1   38[BANK0 ] enum E6795
  8644 ;; Return value:  Size  Location     Type
  8645 ;;                  1    wreg      void 
  8646 ;; Registers used:
  8647 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8648 ;; Tracked objects:
  8649 ;;		On entry : 0/0
  8650 ;;		On exit  : 0/0
  8651 ;;		Unchanged: 0/0
  8652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8653 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8654 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8655 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8656 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8657 ;;Total ram usage:       24 bytes
  8658 ;; Hardware stack levels used:    1
  8659 ;; Hardware stack levels required when called:   10
  8660 ;; This function calls:
  8661 ;;		_Byte_SetByte
  8662 ;;		_Word_GetPair
  8663 ;; This function is called by:
  8664 ;;		_Port_Init
  8665 ;;		_Port_Toggle
  8666 ;; This function uses a non-reentrant model
  8667 ;;
  8668                           
  8669                           	psect	text18
  8670  0141BE                     __ptext18:
  8671                           	opt stack 0
  8672  0141BE                     _Port_Set:
  8673                           	opt stack 18
  8674                           
  8675                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  8676                           
  8677                           ; BSR set to: 0
  8678                           ;incstack = 0
  8679  0141BE  0E08               	movlw	8
  8680  0141C0  0100               	movlb	0	; () banked
  8681  0141C2  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8682  0141C4  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8683  0141C6  0E00               	movlw	0
  8684  0141C8  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8685  0141CA  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8686  0141CC  0E00               	movlw	0
  8687  0141CE  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8688  0141D0  EC12  F0C5         	call	_Word_GetPair	;wreg free
  8689  0141D4  0100               	movlb	0	; () banked
  8690  0141D6  6F86               	movwf	Port_Set@Type& (0+255),b
  8691                           
  8692                           ; BSR set to: 0
  8693                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  8694  0141D8  5186               	movf	Port_Set@Type& (0+255),w,b
  8695  0141DA  6F72               	movwf	??_Port_Set& (0+255),b
  8696  0141DC  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8697  0141DE  0E0E               	movlw	14
  8698  0141E0                     u13735:
  8699  0141E0  90D8               	bcf	status,0,c
  8700  0141E2  3772               	rlcf	??_Port_Set& (0+255),f,b
  8701  0141E4  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8702  0141E6  2EE8               	decfsz	wreg,f,c
  8703  0141E8  D7FB               	goto	u13735
  8704  0141EA  5186               	movf	Port_Set@Type& (0+255),w,b
  8705  0141EC  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  8706  0141EE  6B75               	clrf	(??_Port_Set+3)& (0+255),b
  8707  0141F0  0E0C               	movlw	12
  8708  0141F2                     u13745:
  8709  0141F2  90D8               	bcf	status,0,c
  8710  0141F4  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
  8711  0141F6  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
  8712  0141F8  2EE8               	decfsz	wreg,f,c
  8713  0141FA  D7FB               	goto	u13745
  8714  0141FC  5186               	movf	Port_Set@Type& (0+255),w,b
  8715  0141FE  6F76               	movwf	(??_Port_Set+4)& (0+255),b
  8716  014200  6B77               	clrf	(??_Port_Set+5)& (0+255),b
  8717  014202  0E0A               	movlw	10
  8718  014204                     u13755:
  8719  014204  90D8               	bcf	status,0,c
  8720  014206  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
  8721  014208  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
  8722  01420A  2EE8               	decfsz	wreg,f,c
  8723  01420C  D7FB               	goto	u13755
  8724  01420E  5186               	movf	Port_Set@Type& (0+255),w,b
  8725  014210  6F79               	movwf	(??_Port_Set+7)& (0+255),b
  8726  014212  6B78               	clrf	(??_Port_Set+6)& (0+255),b
  8727  014214  5186               	movf	Port_Set@Type& (0+255),w,b
  8728  014216  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
  8729  014218  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
  8730  01421A  0E06               	movlw	6
  8731  01421C                     u13765:
  8732  01421C  90D8               	bcf	status,0,c
  8733  01421E  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
  8734  014220  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
  8735  014222  2EE8               	decfsz	wreg,f,c
  8736  014224  D7FB               	goto	u13765
  8737  014226  5186               	movf	Port_Set@Type& (0+255),w,b
  8738  014228  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
  8739  01422A  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
  8740  01422C  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
  8741  01422E  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
  8742  014230  0EF0               	movlw	240
  8743  014232  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
  8744  014234  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  8745  014236  0B0F               	andlw	15
  8746  014238  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
  8747  01423A  0EF0               	movlw	240
  8748  01423C  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
  8749  01423E  5186               	movf	Port_Set@Type& (0+255),w,b
  8750  014240  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
  8751  014242  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
  8752  014244  90D8               	bcf	status,0,c
  8753  014246  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  8754  014248  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  8755  01424A  90D8               	bcf	status,0,c
  8756  01424C  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  8757  01424E  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  8758  014250  5186               	movf	Port_Set@Type& (0+255),w,b
  8759  014252  6F80               	movwf	(??_Port_Set+14)& (0+255),b
  8760  014254  6B81               	clrf	(??_Port_Set+15)& (0+255),b
  8761  014256  517E               	movf	(??_Port_Set+12)& (0+255),w,b
  8762  014258  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8763  01425A  517F               	movf	(??_Port_Set+13)& (0+255),w,b
  8764  01425C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8765  01425E  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  8766  014260  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8767  014262  517D               	movf	(??_Port_Set+11)& (0+255),w,b
  8768  014264  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8769  014266  517A               	movf	(??_Port_Set+8)& (0+255),w,b
  8770  014268  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8771  01426A  517B               	movf	(??_Port_Set+9)& (0+255),w,b
  8772  01426C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8773  01426E  5178               	movf	(??_Port_Set+6)& (0+255),w,b
  8774  014270  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8775  014272  5179               	movf	(??_Port_Set+7)& (0+255),w,b
  8776  014274  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8777  014276  5176               	movf	(??_Port_Set+4)& (0+255),w,b
  8778  014278  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8779  01427A  5177               	movf	(??_Port_Set+5)& (0+255),w,b
  8780  01427C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8781  01427E  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  8782  014280  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8783  014282  5175               	movf	(??_Port_Set+3)& (0+255),w,b
  8784  014284  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8785  014286  5172               	movf	??_Port_Set& (0+255),w,b
  8786  014288  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
  8787  01428A  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
  8788  01428C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8789  01428E  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
  8790  014290  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  8791                           
  8792                           ; BSR set to: 0
  8793                           ;Port.c: 574: UINT16 TypeActual = Type;
  8794  014292  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
  8795  014296  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  8796                           
  8797                           ; BSR set to: 0
  8798                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  8799  014298  0E08               	movlw	8
  8800  01429A  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8801  01429C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8802  01429E  0E00               	movlw	0
  8803  0142A0  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8804  0142A2  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8805  0142A4  0E01               	movlw	1
  8806  0142A6  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8807  0142A8  EC12  F0C5         	call	_Word_GetPair	;wreg free
  8808  0142AC  0100               	movlb	0	; () banked
  8809  0142AE  6F72               	movwf	??_Port_Set& (0+255),b
  8810  0142B0  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8811  0142B2  90D8               	bcf	status,0,c
  8812  0142B4  3772               	rlcf	??_Port_Set& (0+255),f,b
  8813  0142B6  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8814  0142B8  90D8               	bcf	status,0,c
  8815  0142BA  3772               	rlcf	??_Port_Set& (0+255),f,b
  8816  0142BC  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8817  0142BE  5172               	movf	??_Port_Set& (0+255),w,b
  8818  0142C0  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8819  0142C2  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8820  0142C4  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8821                           
  8822                           ; BSR set to: 0
  8823                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  8824  0142C6  0E08               	movlw	8
  8825  0142C8  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8826  0142CA  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8827  0142CC  0E00               	movlw	0
  8828  0142CE  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8829  0142D0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8830  0142D2  0E02               	movlw	2
  8831  0142D4  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8832  0142D6  EC12  F0C5         	call	_Word_GetPair	;wreg free
  8833  0142DA  0100               	movlb	0	; () banked
  8834  0142DC  6F72               	movwf	??_Port_Set& (0+255),b
  8835  0142DE  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8836  0142E0  3B72               	swapf	??_Port_Set& (0+255),f,b
  8837  0142E2  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
  8838  0142E4  0EF0               	movlw	240
  8839  0142E6  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
  8840  0142E8  5172               	movf	??_Port_Set& (0+255),w,b
  8841  0142EA  0B0F               	andlw	15
  8842  0142EC  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
  8843  0142EE  0EF0               	movlw	240
  8844  0142F0  1772               	andwf	??_Port_Set& (0+255),f,b
  8845  0142F2  5172               	movf	??_Port_Set& (0+255),w,b
  8846  0142F4  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8847  0142F6  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8848  0142F8  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  8852  0142FA  0E08               	movlw	8
  8853  0142FC  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8854  0142FE  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8855  014300  0E00               	movlw	0
  8856  014302  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8857  014304  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8858  014306  0E03               	movlw	3
  8859  014308  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8860  01430A  EC12  F0C5         	call	_Word_GetPair	;wreg free
  8861  01430E  0100               	movlb	0	; () banked
  8862  014310  6F72               	movwf	??_Port_Set& (0+255),b
  8863  014312  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8864  014314  0E06               	movlw	6
  8865  014316                     u13775:
  8866  014316  90D8               	bcf	status,0,c
  8867  014318  3772               	rlcf	??_Port_Set& (0+255),f,b
  8868  01431A  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8869  01431C  2EE8               	decfsz	wreg,f,c
  8870  01431E  D7FB               	goto	u13775
  8871  014320  5172               	movf	??_Port_Set& (0+255),w,b
  8872  014322  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8873  014324  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8874  014326  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8875                           
  8876                           ; BSR set to: 0
  8877                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  8878  014328  0E08               	movlw	8
  8879  01432A  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8880  01432C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8881  01432E  0E00               	movlw	0
  8882  014330  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8883  014332  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8884  014334  0E04               	movlw	4
  8885  014336  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8886  014338  EC12  F0C5         	call	_Word_GetPair	;wreg free
  8887  01433C  0100               	movlb	0	; () banked
  8888  01433E  6F72               	movwf	??_Port_Set& (0+255),b
  8889  014340  5172               	movf	??_Port_Set& (0+255),w,b
  8890  014342  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  8891  014344  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8892  014346  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8893  014348  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8894  01434A  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  8895  01434C  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8896                           
  8897                           ; BSR set to: 0
  8898                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  8899  01434E  0E08               	movlw	8
  8900  014350  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8901  014352  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8902  014354  0E00               	movlw	0
  8903  014356  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8904  014358  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8905  01435A  0E05               	movlw	5
  8906  01435C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8907  01435E  EC12  F0C5         	call	_Word_GetPair	;wreg free
  8908  014362  0100               	movlb	0	; () banked
  8909  014364  6F72               	movwf	??_Port_Set& (0+255),b
  8910  014366  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8911  014368  0E0A               	movlw	10
  8912  01436A                     u13785:
  8913  01436A  90D8               	bcf	status,0,c
  8914  01436C  3772               	rlcf	??_Port_Set& (0+255),f,b
  8915  01436E  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8916  014370  2EE8               	decfsz	wreg,f,c
  8917  014372  D7FB               	goto	u13785
  8918  014374  5172               	movf	??_Port_Set& (0+255),w,b
  8919  014376  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8920  014378  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8921  01437A  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8922                           
  8923                           ; BSR set to: 0
  8924                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  8925  01437C  0E08               	movlw	8
  8926  01437E  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8927  014380  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8928  014382  0E00               	movlw	0
  8929  014384  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8930  014386  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8931  014388  0E06               	movlw	6
  8932  01438A  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8933  01438C  EC12  F0C5         	call	_Word_GetPair	;wreg free
  8934  014390  0100               	movlb	0	; () banked
  8935  014392  6F72               	movwf	??_Port_Set& (0+255),b
  8936  014394  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8937  014396  0E0C               	movlw	12
  8938  014398                     u13795:
  8939  014398  90D8               	bcf	status,0,c
  8940  01439A  3772               	rlcf	??_Port_Set& (0+255),f,b
  8941  01439C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8942  01439E  2EE8               	decfsz	wreg,f,c
  8943  0143A0  D7FB               	goto	u13795
  8944  0143A2  5172               	movf	??_Port_Set& (0+255),w,b
  8945  0143A4  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8946  0143A6  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8947  0143A8  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8948                           
  8949                           ; BSR set to: 0
  8950                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  8951  0143AA  0E08               	movlw	8
  8952  0143AC  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8953  0143AE  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8954  0143B0  0E00               	movlw	0
  8955  0143B2  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8956  0143B4  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8957  0143B6  0E07               	movlw	7
  8958  0143B8  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8959  0143BA  EC12  F0C5         	call	_Word_GetPair	;wreg free
  8960  0143BE  0100               	movlb	0	; () banked
  8961  0143C0  6F72               	movwf	??_Port_Set& (0+255),b
  8962  0143C2  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8963  0143C4  0E0E               	movlw	14
  8964  0143C6                     u13805:
  8965  0143C6  90D8               	bcf	status,0,c
  8966  0143C8  3772               	rlcf	??_Port_Set& (0+255),f,b
  8967  0143CA  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8968  0143CC  2EE8               	decfsz	wreg,f,c
  8969  0143CE  D7FB               	goto	u13805
  8970  0143D0  5172               	movf	??_Port_Set& (0+255),w,b
  8971  0143D2  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8972  0143D4  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8973  0143D6  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8974                           
  8975                           ;Port.c: 584: if (TypeRequired == TypeActual)
  8976  0143D8  5184               	movf	Port_Set@TypeActual& (0+255),w,b
  8977  0143DA  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  8978  0143DC  E144               	bnz	l528
  8979  0143DE  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  8980  0143E0  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  8981  0143E2  A4D8               	btfss	status,2,c
  8982  0143E4  0012               	return	
  8983  0143E6  D030               	goto	l526
  8984  0143E8                     
  8985                           ; BSR set to: 0
  8986                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  8987                           
  8988                           ; BSR set to: 0
  8989  0143E8  EE20 F002          	lfsr	2,2
  8990  0143EC  516F               	movf	Port_Set@pInput& (0+255),w,b
  8991  0143EE  26D9               	addwf	fsr2l,f,c
  8992  0143F0  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  8993  0143F2  22DA               	addwfc	fsr2h,f,c
  8994  0143F4  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  8995  0143F8  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  8996  0143FC  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  8997  014400  ECB4  F0C7         	call	_Byte_SetByte	;wreg free
  8998                           
  8999                           ;Port.c: 594: break;
  9000  014404  0012               	return	
  9001  014406                     
  9002                           ;Port.c: 597: pValue = ~pValue;
  9003  014406  0100               	movlb	0	; () banked
  9004  014408  1F71               	comf	Port_Set@pValue& (0+255),f,b
  9005                           
  9006                           ; BSR set to: 0
  9007                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  9008  01440A  EE20 F002          	lfsr	2,2
  9009  01440E  516F               	movf	Port_Set@pInput& (0+255),w,b
  9010  014410  26D9               	addwf	fsr2l,f,c
  9011  014412  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  9012  014414  22DA               	addwfc	fsr2h,f,c
  9013  014416  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  9014  01441A  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  9015  01441E  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  9016  014422  ECB4  F0C7         	call	_Byte_SetByte	;wreg free
  9017                           
  9018                           ;Port.c: 599: break;
  9019  014426  0012               	return	
  9020  014428                     
  9021                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  9022  014428  0100               	movlb	0	; () banked
  9023  01442A  EE20 F004          	lfsr	2,4
  9024  01442E  516F               	movf	Port_Set@pInput& (0+255),w,b
  9025  014430  26D9               	addwf	fsr2l,f,c
  9026  014432  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  9027  014434  22DA               	addwfc	fsr2h,f,c
  9028  014436  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  9029  01443A  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  9030  01443E  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  9031  014442  ECB4  F0C7         	call	_Byte_SetByte	;wreg free
  9032                           
  9033                           ;Port.c: 606: }
  9034                           
  9035                           ;Port.c: 605: break;
  9036                           
  9037                           ;Port.c: 604: default:
  9038                           
  9039                           ;Port.c: 603: break;
  9040  014446  0012               	return	
  9041  014448                     l526:
  9042  014448  0100               	movlb	0	; () banked
  9043  01444A  5186               	movf	Port_Set@Type& (0+255),w,b
  9044                           
  9045                           ; Switch size 1, requested type "space"
  9046                           ; Number of cases is 4, Range of values is 0 to 3
  9047                           ; switch strategies available:
  9048                           ; Name         Instructions Cycles
  9049                           ; simple_byte           13     7 (average)
  9050                           ;	Chosen strategy is simple_byte
  9051  01444C  0A00               	xorlw	0	; case 0
  9052  01444E  B4D8               	btfsc	status,2,c
  9053  014450  0012               	return	
  9054  014452  0A01               	xorlw	1	; case 1
  9055  014454  B4D8               	btfsc	status,2,c
  9056  014456  D7C8               	goto	l529
  9057  014458  0A03               	xorlw	3	; case 2
  9058  01445A  B4D8               	btfsc	status,2,c
  9059  01445C  D7D4               	goto	l531
  9060  01445E  0A01               	xorlw	1	; case 3
  9061  014460  A4D8               	btfss	status,2,c
  9062                           
  9063                           ; BSR set to: 0
  9064                           
  9065                           ; BSR set to: 0
  9066                           ;Port.c: 607: }
  9067  014462  0012               	return	
  9068  014464  D7E1               	goto	l532
  9069  014466                     l528:
  9070  014466  0012               	return		;funcret
  9071  014468                     __end_of_Port_Set:
  9072                           	opt stack 0
  9073                           tosu	equ	0xFFF
  9074                           tosh	equ	0xFFE
  9075                           tosl	equ	0xFFD
  9076                           pclath	equ	0xFFA
  9077                           tblptru	equ	0xFF8
  9078                           tblptrh	equ	0xFF7
  9079                           tblptrl	equ	0xFF6
  9080                           tablat	equ	0xFF5
  9081                           postinc0	equ	0xFEE
  9082                           wreg	equ	0xFE8
  9083                           postdec1	equ	0xFE5
  9084                           fsr1h	equ	0xFE2
  9085                           fsr1l	equ	0xFE1
  9086                           indf2	equ	0xFDF
  9087                           postinc2	equ	0xFDE
  9088                           postdec2	equ	0xFDD
  9089                           plusw2	equ	0xFDB
  9090                           fsr2h	equ	0xFDA
  9091                           fsr2l	equ	0xFD9
  9092                           status	equ	0xFD8
  9093                           
  9094 ;; *************** function _Byte_SetByte *****************
  9095 ;; Defined at:
  9096 ;;		line 110 in file "Library/Types.c"
  9097 ;; Parameters:    Size  Location     Type
  9098 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  9099 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  9100 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  9101 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  9102 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  9103 ;;		 -> NULL(0), 
  9104 ;;  pValue          1    2[BANK0 ] unsigned char 
  9105 ;; Auto vars:     Size  Location     Type
  9106 ;;		None
  9107 ;; Return value:  Size  Location     Type
  9108 ;;                  1    wreg      void 
  9109 ;; Registers used:
  9110 ;;		fsr2l, fsr2h
  9111 ;; Tracked objects:
  9112 ;;		On entry : 0/0
  9113 ;;		On exit  : 0/0
  9114 ;;		Unchanged: 0/0
  9115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9116 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;Total ram usage:        3 bytes
  9121 ;; Hardware stack levels used:    1
  9122 ;; Hardware stack levels required when called:    7
  9123 ;; This function calls:
  9124 ;;		Nothing
  9125 ;; This function is called by:
  9126 ;;		_Port_Set
  9127 ;;		_I2C_Init
  9128 ;; This function uses a non-reentrant model
  9129 ;;
  9130                           
  9131                           	psect	text19
  9132  018F68                     __ptext19:
  9133                           	opt stack 0
  9134  018F68                     _Byte_SetByte:
  9135                           	opt stack 20
  9136                           
  9137                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  9138                           
  9139                           ;incstack = 0
  9140  018F68  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  9141  018F6C  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  9142  018F70  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
  9143  018F74  0012               	return		;funcret
  9144  018F76                     __end_of_Byte_SetByte:
  9145                           	opt stack 0
  9146                           tosu	equ	0xFFF
  9147                           tosh	equ	0xFFE
  9148                           tosl	equ	0xFFD
  9149                           pclath	equ	0xFFA
  9150                           tblptru	equ	0xFF8
  9151                           tblptrh	equ	0xFF7
  9152                           tblptrl	equ	0xFF6
  9153                           tablat	equ	0xFF5
  9154                           postinc0	equ	0xFEE
  9155                           wreg	equ	0xFE8
  9156                           postdec1	equ	0xFE5
  9157                           fsr1h	equ	0xFE2
  9158                           fsr1l	equ	0xFE1
  9159                           indf2	equ	0xFDF
  9160                           postinc2	equ	0xFDE
  9161                           postdec2	equ	0xFDD
  9162                           plusw2	equ	0xFDB
  9163                           fsr2h	equ	0xFDA
  9164                           fsr2l	equ	0xFD9
  9165                           status	equ	0xFD8
  9166                           
  9167 ;; *************** function _GetPortTRIS *****************
  9168 ;; Defined at:
  9169 ;;		line 67 in file "Library/Port.c"
  9170 ;; Parameters:    Size  Location     Type
  9171 ;;  pInput          1    wreg     enum E6786
  9172 ;; Auto vars:     Size  Location     Type
  9173 ;;  pInput          1    2[BANK0 ] enum E6786
  9174 ;; Return value:  Size  Location     Type
  9175 ;;                  2    0[BANK0 ] PTR struct Byte
  9176 ;; Registers used:
  9177 ;;		wreg, status,2, status,0
  9178 ;; Tracked objects:
  9179 ;;		On entry : 0/0
  9180 ;;		On exit  : 0/0
  9181 ;;		Unchanged: 0/0
  9182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9183 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9186 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9187 ;;Total ram usage:        3 bytes
  9188 ;; Hardware stack levels used:    1
  9189 ;; Hardware stack levels required when called:    7
  9190 ;; This function calls:
  9191 ;;		Nothing
  9192 ;; This function is called by:
  9193 ;;		_Port_Init
  9194 ;; This function uses a non-reentrant model
  9195 ;;
  9196                           
  9197                           	psect	text20
  9198  0175AE                     __ptext20:
  9199                           	opt stack 0
  9200  0175AE                     _GetPortTRIS:
  9201                           	opt stack 21
  9202                           
  9203                           ;incstack = 0
  9204                           ;GetPortTRIS@pInput stored from wreg
  9205  0175AE  0100               	movlb	0	; () banked
  9206  0175B0  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
  9207                           
  9208                           ;Port.c: 69: switch (pInput)
  9209  0175B2  D029               	goto	l363
  9210  0175B4                     
  9211                           ;Port.c: 72: return (BytePtr)&TRISA;
  9212  0175B4  0E92               	movlw	146
  9213  0175B6  0100               	movlb	0	; () banked
  9214  0175B8  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9215  0175BA  0E0F               	movlw	15
  9216  0175BC  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9217                           
  9218                           ; BSR set to: 0
  9219  0175BE  0012               	return	
  9220  0175C0                     
  9221                           ; BSR set to: 0
  9222                           ;Port.c: 74: return (BytePtr)&TRISB;
  9223                           
  9224                           ; BSR set to: 0
  9225  0175C0  0E93               	movlw	147
  9226  0175C2  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9227  0175C4  0E0F               	movlw	15
  9228  0175C6  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9229                           
  9230                           ; BSR set to: 0
  9231  0175C8  0012               	return	
  9232  0175CA                     
  9233                           ; BSR set to: 0
  9234                           ;Port.c: 76: return (BytePtr)&TRISC;
  9235                           
  9236                           ; BSR set to: 0
  9237  0175CA  0E94               	movlw	148
  9238  0175CC  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9239  0175CE  0E0F               	movlw	15
  9240  0175D0  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9241                           
  9242                           ; BSR set to: 0
  9243  0175D2  0012               	return	
  9244  0175D4                     
  9245                           ; BSR set to: 0
  9246                           ;Port.c: 78: return (BytePtr)&TRISD;
  9247                           
  9248                           ; BSR set to: 0
  9249  0175D4  0E95               	movlw	149
  9250  0175D6  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9251  0175D8  0E0F               	movlw	15
  9252  0175DA  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9253                           
  9254                           ; BSR set to: 0
  9255  0175DC  0012               	return	
  9256  0175DE                     
  9257                           ; BSR set to: 0
  9258                           ;Port.c: 80: return (BytePtr)&TRISE;
  9259                           
  9260                           ; BSR set to: 0
  9261  0175DE  0E96               	movlw	150
  9262  0175E0  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9263  0175E2  0E0F               	movlw	15
  9264  0175E4  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9265                           
  9266                           ; BSR set to: 0
  9267  0175E6  0012               	return	
  9268  0175E8                     
  9269                           ; BSR set to: 0
  9270                           ;Port.c: 82: return (BytePtr)&TRISF;
  9271                           
  9272                           ; BSR set to: 0
  9273  0175E8  0E97               	movlw	151
  9274  0175EA  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9275  0175EC  0E0F               	movlw	15
  9276  0175EE  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9277                           
  9278                           ; BSR set to: 0
  9279  0175F0  0012               	return	
  9280  0175F2                     
  9281                           ; BSR set to: 0
  9282                           ;Port.c: 84: return (BytePtr)&TRISG;
  9283                           
  9284                           ; BSR set to: 0
  9285  0175F2  0E98               	movlw	152
  9286  0175F4  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9287  0175F6  0E0F               	movlw	15
  9288  0175F8  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9289                           
  9290                           ; BSR set to: 0
  9291  0175FA  0012               	return	
  9292  0175FC                     
  9293                           ; BSR set to: 0
  9294                           ;Port.c: 86: return (void*)0;
  9295                           
  9296                           ; BSR set to: 0
  9297  0175FC  0E00               	movlw	0
  9298  0175FE  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9299  017600  0E00               	movlw	0
  9300  017602  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9301                           
  9302                           ; BSR set to: 0
  9303                           ;Port.c: 87: }
  9304                           
  9305                           ; BSR set to: 0
  9306  017604  0012               	return	
  9307  017606                     l363:
  9308                           
  9309                           ; BSR set to: 0
  9310  017606  0100               	movlb	0	; () banked
  9311  017608  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
  9312                           
  9313                           ; Switch size 1, requested type "space"
  9314                           ; Number of cases is 7, Range of values is 0 to 6
  9315                           ; switch strategies available:
  9316                           ; Name         Instructions Cycles
  9317                           ; simple_byte           22    12 (average)
  9318                           ;	Chosen strategy is simple_byte
  9319  01760A  0A00               	xorlw	0	; case 0
  9320  01760C  B4D8               	btfsc	status,2,c
  9321  01760E  D7D2               	goto	l364
  9322  017610  0A01               	xorlw	1	; case 1
  9323  017612  B4D8               	btfsc	status,2,c
  9324  017614  D7D5               	goto	l366
  9325  017616  0A03               	xorlw	3	; case 2
  9326  017618  B4D8               	btfsc	status,2,c
  9327  01761A  D7D7               	goto	l367
  9328  01761C  0A01               	xorlw	1	; case 3
  9329  01761E  B4D8               	btfsc	status,2,c
  9330  017620  D7D9               	goto	l368
  9331  017622  0A07               	xorlw	7	; case 4
  9332  017624  B4D8               	btfsc	status,2,c
  9333  017626  D7DB               	goto	l369
  9334  017628  0A01               	xorlw	1	; case 5
  9335  01762A  B4D8               	btfsc	status,2,c
  9336  01762C  D7DD               	goto	l370
  9337  01762E  0A03               	xorlw	3	; case 6
  9338  017630  B4D8               	btfsc	status,2,c
  9339  017632  D7DF               	goto	l371
  9340  017634  D7E3               	goto	l372
  9341  017636                     __end_of_GetPortTRIS:
  9342                           	opt stack 0
  9343                           tosu	equ	0xFFF
  9344                           tosh	equ	0xFFE
  9345                           tosl	equ	0xFFD
  9346                           pclath	equ	0xFFA
  9347                           tblptru	equ	0xFF8
  9348                           tblptrh	equ	0xFF7
  9349                           tblptrl	equ	0xFF6
  9350                           tablat	equ	0xFF5
  9351                           postinc0	equ	0xFEE
  9352                           wreg	equ	0xFE8
  9353                           postdec1	equ	0xFE5
  9354                           fsr1h	equ	0xFE2
  9355                           fsr1l	equ	0xFE1
  9356                           indf2	equ	0xFDF
  9357                           postinc2	equ	0xFDE
  9358                           postdec2	equ	0xFDD
  9359                           plusw2	equ	0xFDB
  9360                           fsr2h	equ	0xFDA
  9361                           fsr2l	equ	0xFD9
  9362                           status	equ	0xFD8
  9363                           
  9364 ;; *************** function _GetPortProperties *****************
  9365 ;; Defined at:
  9366 ;;		line 21 in file "Library/Port.c"
  9367 ;; Parameters:    Size  Location     Type
  9368 ;;  pInput          1    wreg     enum E6786
  9369 ;; Auto vars:     Size  Location     Type
  9370 ;;  pInput          1    2[BANK0 ] enum E6786
  9371 ;; Return value:  Size  Location     Type
  9372 ;;                  2    0[BANK0 ] PTR struct PortProperty
  9373 ;; Registers used:
  9374 ;;		wreg, status,2, status,0
  9375 ;; Tracked objects:
  9376 ;;		On entry : 0/0
  9377 ;;		On exit  : 0/0
  9378 ;;		Unchanged: 0/0
  9379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9380 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9383 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9384 ;;Total ram usage:        3 bytes
  9385 ;; Hardware stack levels used:    1
  9386 ;; Hardware stack levels required when called:    7
  9387 ;; This function calls:
  9388 ;;		Nothing
  9389 ;; This function is called by:
  9390 ;;		_Port_Init
  9391 ;; This function uses a non-reentrant model
  9392 ;;
  9393                           
  9394                           	psect	text21
  9395  017636                     __ptext21:
  9396                           	opt stack 0
  9397  017636                     _GetPortProperties:
  9398                           	opt stack 21
  9399                           
  9400                           ; BSR set to: 0
  9401                           ;incstack = 0
  9402                           ;GetPortProperties@pInput stored from wreg
  9403  017636  0100               	movlb	0	; () banked
  9404  017638  6F62               	movwf	GetPortProperties@pInput& (0+255),b
  9405                           
  9406                           ;Port.c: 23: switch (pInput)
  9407  01763A  D029               	goto	l337
  9408  01763C                     
  9409                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  9410  01763C  0E5F               	movlw	low _PortA_Property
  9411  01763E  0100               	movlb	0	; () banked
  9412  017640  6F60               	movwf	?_GetPortProperties& (0+255),b
  9413  017642  0EFE               	movlw	high _PortA_Property
  9414  017644  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9415                           
  9416                           ; BSR set to: 0
  9417  017646  0012               	return	
  9418  017648                     
  9419                           ; BSR set to: 0
  9420                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  9421                           
  9422                           ; BSR set to: 0
  9423  017648  0E5D               	movlw	low _PortB_Property
  9424  01764A  6F60               	movwf	?_GetPortProperties& (0+255),b
  9425  01764C  0EFE               	movlw	high _PortB_Property
  9426  01764E  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9427                           
  9428                           ; BSR set to: 0
  9429  017650  0012               	return	
  9430  017652                     
  9431                           ; BSR set to: 0
  9432                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  9433                           
  9434                           ; BSR set to: 0
  9435  017652  0E5B               	movlw	low _PortC_Property
  9436  017654  6F60               	movwf	?_GetPortProperties& (0+255),b
  9437  017656  0EFE               	movlw	high _PortC_Property
  9438  017658  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9439                           
  9440                           ; BSR set to: 0
  9441  01765A  0012               	return	
  9442  01765C                     
  9443                           ; BSR set to: 0
  9444                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  9445                           
  9446                           ; BSR set to: 0
  9447  01765C  0E59               	movlw	low _PortD_Property
  9448  01765E  6F60               	movwf	?_GetPortProperties& (0+255),b
  9449  017660  0EFE               	movlw	high _PortD_Property
  9450  017662  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9451                           
  9452                           ; BSR set to: 0
  9453  017664  0012               	return	
  9454  017666                     
  9455                           ; BSR set to: 0
  9456                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  9457                           
  9458                           ; BSR set to: 0
  9459  017666  0E57               	movlw	low _PortE_Property
  9460  017668  6F60               	movwf	?_GetPortProperties& (0+255),b
  9461  01766A  0EFE               	movlw	high _PortE_Property
  9462  01766C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9463                           
  9464                           ; BSR set to: 0
  9465  01766E  0012               	return	
  9466  017670                     
  9467                           ; BSR set to: 0
  9468                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  9469                           
  9470                           ; BSR set to: 0
  9471  017670  0E55               	movlw	low _PortF_Property
  9472  017672  6F60               	movwf	?_GetPortProperties& (0+255),b
  9473  017674  0EFE               	movlw	high _PortF_Property
  9474  017676  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9475                           
  9476                           ; BSR set to: 0
  9477  017678  0012               	return	
  9478  01767A                     
  9479                           ; BSR set to: 0
  9480                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  9481                           
  9482                           ; BSR set to: 0
  9483  01767A  0E53               	movlw	low _PortG_Property
  9484  01767C  6F60               	movwf	?_GetPortProperties& (0+255),b
  9485  01767E  0EFE               	movlw	high _PortG_Property
  9486  017680  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9487                           
  9488                           ; BSR set to: 0
  9489  017682  0012               	return	
  9490  017684                     
  9491                           ; BSR set to: 0
  9492                           ;Port.c: 40: return (void*)0;
  9493                           
  9494                           ; BSR set to: 0
  9495  017684  0E00               	movlw	0
  9496  017686  6F60               	movwf	?_GetPortProperties& (0+255),b
  9497  017688  0E00               	movlw	0
  9498  01768A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9499                           
  9500                           ; BSR set to: 0
  9501                           ;Port.c: 41: }
  9502                           
  9503                           ; BSR set to: 0
  9504  01768C  0012               	return	
  9505  01768E                     l337:
  9506                           
  9507                           ; BSR set to: 0
  9508  01768E  0100               	movlb	0	; () banked
  9509  017690  5162               	movf	GetPortProperties@pInput& (0+255),w,b
  9510                           
  9511                           ; Switch size 1, requested type "space"
  9512                           ; Number of cases is 7, Range of values is 0 to 6
  9513                           ; switch strategies available:
  9514                           ; Name         Instructions Cycles
  9515                           ; simple_byte           22    12 (average)
  9516                           ;	Chosen strategy is simple_byte
  9517  017692  0A00               	xorlw	0	; case 0
  9518  017694  B4D8               	btfsc	status,2,c
  9519  017696  D7D2               	goto	l338
  9520  017698  0A01               	xorlw	1	; case 1
  9521  01769A  B4D8               	btfsc	status,2,c
  9522  01769C  D7D5               	goto	l340
  9523  01769E  0A03               	xorlw	3	; case 2
  9524  0176A0  B4D8               	btfsc	status,2,c
  9525  0176A2  D7D7               	goto	l341
  9526  0176A4  0A01               	xorlw	1	; case 3
  9527  0176A6  B4D8               	btfsc	status,2,c
  9528  0176A8  D7D9               	goto	l342
  9529  0176AA  0A07               	xorlw	7	; case 4
  9530  0176AC  B4D8               	btfsc	status,2,c
  9531  0176AE  D7DB               	goto	l343
  9532  0176B0  0A01               	xorlw	1	; case 5
  9533  0176B2  B4D8               	btfsc	status,2,c
  9534  0176B4  D7DD               	goto	l344
  9535  0176B6  0A03               	xorlw	3	; case 6
  9536  0176B8  B4D8               	btfsc	status,2,c
  9537  0176BA  D7DF               	goto	l345
  9538  0176BC  D7E3               	goto	l346
  9539  0176BE                     __end_of_GetPortProperties:
  9540                           	opt stack 0
  9541                           tosu	equ	0xFFF
  9542                           tosh	equ	0xFFE
  9543                           tosl	equ	0xFFD
  9544                           pclath	equ	0xFFA
  9545                           tblptru	equ	0xFF8
  9546                           tblptrh	equ	0xFF7
  9547                           tblptrl	equ	0xFF6
  9548                           tablat	equ	0xFF5
  9549                           postinc0	equ	0xFEE
  9550                           wreg	equ	0xFE8
  9551                           postdec1	equ	0xFE5
  9552                           fsr1h	equ	0xFE2
  9553                           fsr1l	equ	0xFE1
  9554                           indf2	equ	0xFDF
  9555                           postinc2	equ	0xFDE
  9556                           postdec2	equ	0xFDD
  9557                           plusw2	equ	0xFDB
  9558                           fsr2h	equ	0xFDA
  9559                           fsr2l	equ	0xFD9
  9560                           status	equ	0xFD8
  9561                           
  9562 ;; *************** function _GetPortPORT *****************
  9563 ;; Defined at:
  9564 ;;		line 44 in file "Library/Port.c"
  9565 ;; Parameters:    Size  Location     Type
  9566 ;;  pInput          1    wreg     enum E6786
  9567 ;; Auto vars:     Size  Location     Type
  9568 ;;  pInput          1    2[BANK0 ] enum E6786
  9569 ;; Return value:  Size  Location     Type
  9570 ;;                  2    0[BANK0 ] PTR struct Byte
  9571 ;; Registers used:
  9572 ;;		wreg, status,2, status,0
  9573 ;; Tracked objects:
  9574 ;;		On entry : 0/0
  9575 ;;		On exit  : 0/0
  9576 ;;		Unchanged: 0/0
  9577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9578 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9581 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9582 ;;Total ram usage:        3 bytes
  9583 ;; Hardware stack levels used:    1
  9584 ;; Hardware stack levels required when called:    7
  9585 ;; This function calls:
  9586 ;;		Nothing
  9587 ;; This function is called by:
  9588 ;;		_Port_Init
  9589 ;; This function uses a non-reentrant model
  9590 ;;
  9591                           
  9592                           	psect	text22
  9593  0176BE                     __ptext22:
  9594                           	opt stack 0
  9595  0176BE                     _GetPortPORT:
  9596                           	opt stack 21
  9597                           
  9598                           ; BSR set to: 0
  9599                           ;incstack = 0
  9600                           ;GetPortPORT@pInput stored from wreg
  9601  0176BE  0100               	movlb	0	; () banked
  9602  0176C0  6F62               	movwf	GetPortPORT@pInput& (0+255),b
  9603                           
  9604                           ;Port.c: 46: switch (pInput)
  9605  0176C2  D029               	goto	l350
  9606  0176C4                     
  9607                           ;Port.c: 49: return (BytePtr)&PORTA;
  9608  0176C4  0E80               	movlw	128
  9609  0176C6  0100               	movlb	0	; () banked
  9610  0176C8  6F60               	movwf	?_GetPortPORT& (0+255),b
  9611  0176CA  0E0F               	movlw	15
  9612  0176CC  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9613                           
  9614                           ; BSR set to: 0
  9615  0176CE  0012               	return	
  9616  0176D0                     
  9617                           ; BSR set to: 0
  9618                           ;Port.c: 51: return (BytePtr)&PORTB;
  9619                           
  9620                           ; BSR set to: 0
  9621  0176D0  0E81               	movlw	129
  9622  0176D2  6F60               	movwf	?_GetPortPORT& (0+255),b
  9623  0176D4  0E0F               	movlw	15
  9624  0176D6  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9625                           
  9626                           ; BSR set to: 0
  9627  0176D8  0012               	return	
  9628  0176DA                     
  9629                           ; BSR set to: 0
  9630                           ;Port.c: 53: return (BytePtr)&PORTC;
  9631                           
  9632                           ; BSR set to: 0
  9633  0176DA  0E82               	movlw	130
  9634  0176DC  6F60               	movwf	?_GetPortPORT& (0+255),b
  9635  0176DE  0E0F               	movlw	15
  9636  0176E0  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9637                           
  9638                           ; BSR set to: 0
  9639  0176E2  0012               	return	
  9640  0176E4                     
  9641                           ; BSR set to: 0
  9642                           ;Port.c: 55: return (BytePtr)&PORTD;
  9643                           
  9644                           ; BSR set to: 0
  9645  0176E4  0E83               	movlw	131
  9646  0176E6  6F60               	movwf	?_GetPortPORT& (0+255),b
  9647  0176E8  0E0F               	movlw	15
  9648  0176EA  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9649                           
  9650                           ; BSR set to: 0
  9651  0176EC  0012               	return	
  9652  0176EE                     
  9653                           ; BSR set to: 0
  9654                           ;Port.c: 57: return (BytePtr)&PORTE;
  9655                           
  9656                           ; BSR set to: 0
  9657  0176EE  0E84               	movlw	132
  9658  0176F0  6F60               	movwf	?_GetPortPORT& (0+255),b
  9659  0176F2  0E0F               	movlw	15
  9660  0176F4  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9661                           
  9662                           ; BSR set to: 0
  9663  0176F6  0012               	return	
  9664  0176F8                     
  9665                           ; BSR set to: 0
  9666                           ;Port.c: 59: return (BytePtr)&PORTF;
  9667                           
  9668                           ; BSR set to: 0
  9669  0176F8  0E85               	movlw	133
  9670  0176FA  6F60               	movwf	?_GetPortPORT& (0+255),b
  9671  0176FC  0E0F               	movlw	15
  9672  0176FE  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9673                           
  9674                           ; BSR set to: 0
  9675  017700  0012               	return	
  9676  017702                     
  9677                           ; BSR set to: 0
  9678                           ;Port.c: 61: return (BytePtr)&PORTG;
  9679                           
  9680                           ; BSR set to: 0
  9681  017702  0E86               	movlw	134
  9682  017704  6F60               	movwf	?_GetPortPORT& (0+255),b
  9683  017706  0E0F               	movlw	15
  9684  017708  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9685                           
  9686                           ; BSR set to: 0
  9687  01770A  0012               	return	
  9688  01770C                     
  9689                           ; BSR set to: 0
  9690                           ;Port.c: 63: return (void*)0;
  9691                           
  9692                           ; BSR set to: 0
  9693  01770C  0E00               	movlw	0
  9694  01770E  6F60               	movwf	?_GetPortPORT& (0+255),b
  9695  017710  0E00               	movlw	0
  9696  017712  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9697                           
  9698                           ; BSR set to: 0
  9699                           ;Port.c: 64: }
  9700                           
  9701                           ; BSR set to: 0
  9702  017714  0012               	return	
  9703  017716                     l350:
  9704                           
  9705                           ; BSR set to: 0
  9706  017716  0100               	movlb	0	; () banked
  9707  017718  5162               	movf	GetPortPORT@pInput& (0+255),w,b
  9708                           
  9709                           ; Switch size 1, requested type "space"
  9710                           ; Number of cases is 7, Range of values is 0 to 6
  9711                           ; switch strategies available:
  9712                           ; Name         Instructions Cycles
  9713                           ; simple_byte           22    12 (average)
  9714                           ;	Chosen strategy is simple_byte
  9715  01771A  0A00               	xorlw	0	; case 0
  9716  01771C  B4D8               	btfsc	status,2,c
  9717  01771E  D7D2               	goto	l351
  9718  017720  0A01               	xorlw	1	; case 1
  9719  017722  B4D8               	btfsc	status,2,c
  9720  017724  D7D5               	goto	l353
  9721  017726  0A03               	xorlw	3	; case 2
  9722  017728  B4D8               	btfsc	status,2,c
  9723  01772A  D7D7               	goto	l354
  9724  01772C  0A01               	xorlw	1	; case 3
  9725  01772E  B4D8               	btfsc	status,2,c
  9726  017730  D7D9               	goto	l355
  9727  017732  0A07               	xorlw	7	; case 4
  9728  017734  B4D8               	btfsc	status,2,c
  9729  017736  D7DB               	goto	l356
  9730  017738  0A01               	xorlw	1	; case 5
  9731  01773A  B4D8               	btfsc	status,2,c
  9732  01773C  D7DD               	goto	l357
  9733  01773E  0A03               	xorlw	3	; case 6
  9734  017740  B4D8               	btfsc	status,2,c
  9735  017742  D7DF               	goto	l358
  9736  017744  D7E3               	goto	l359
  9737  017746                     __end_of_GetPortPORT:
  9738                           	opt stack 0
  9739                           tosu	equ	0xFFF
  9740                           tosh	equ	0xFFE
  9741                           tosl	equ	0xFFD
  9742                           pclath	equ	0xFFA
  9743                           tblptru	equ	0xFF8
  9744                           tblptrh	equ	0xFF7
  9745                           tblptrl	equ	0xFF6
  9746                           tablat	equ	0xFF5
  9747                           postinc0	equ	0xFEE
  9748                           wreg	equ	0xFE8
  9749                           postdec1	equ	0xFE5
  9750                           fsr1h	equ	0xFE2
  9751                           fsr1l	equ	0xFE1
  9752                           indf2	equ	0xFDF
  9753                           postinc2	equ	0xFDE
  9754                           postdec2	equ	0xFDD
  9755                           plusw2	equ	0xFDB
  9756                           fsr2h	equ	0xFDA
  9757                           fsr2l	equ	0xFD9
  9758                           status	equ	0xFD8
  9759                           
  9760 ;; *************** function _LED_Init *****************
  9761 ;; Defined at:
  9762 ;;		line 15 in file "Library/LED.c"
  9763 ;; Parameters:    Size  Location     Type
  9764 ;;  pLED            1    wreg     enum E6739
  9765 ;; Auto vars:     Size  Location     Type
  9766 ;;  pLED            1   45[BANK0 ] enum E6739
  9767 ;; Return value:  Size  Location     Type
  9768 ;;                  1    wreg      void 
  9769 ;; Registers used:
  9770 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9771 ;; Tracked objects:
  9772 ;;		On entry : 0/0
  9773 ;;		On exit  : 0/0
  9774 ;;		Unchanged: 0/0
  9775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9777 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9779 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9780 ;;Total ram usage:        1 bytes
  9781 ;; Hardware stack levels used:    1
  9782 ;; Hardware stack levels required when called:   12
  9783 ;; This function calls:
  9784 ;;		_LED_Set
  9785 ;;		_Port_SetPinType
  9786 ;; This function is called by:
  9787 ;;		_MXK_Init
  9788 ;;		_main
  9789 ;; This function uses a non-reentrant model
  9790 ;;
  9791                           
  9792                           	psect	text23
  9793  0180CE                     __ptext23:
  9794                           	opt stack 0
  9795  0180CE                     _LED_Init:
  9796                           	opt stack 17
  9797                           
  9798                           ; BSR set to: 0
  9799                           ;incstack = 0
  9800                           ;LED_Init@pLED stored from wreg
  9801  0180CE  0100               	movlb	0	; () banked
  9802  0180D0  6F8D               	movwf	LED_Init@pLED& (0+255),b
  9803                           
  9804                           ;LED.c: 17: switch (pLED)
  9805  0180D2  D018               	goto	l220
  9806  0180D4                     
  9807                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  9808  0180D4  0E79               	movlw	low _PortC
  9809  0180D6  0100               	movlb	0	; () banked
  9810  0180D8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9811  0180DA  0E01               	movlw	high _PortC
  9812  0180DC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9813  0180DE  0E00               	movlw	0
  9814  0180E0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9815  0180E2  0E03               	movlw	3
  9816  0180E4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9817  0180E6  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
  9818                           
  9819                           ;LED.c: 21: break;
  9820  0180EA  D014               	goto	l222
  9821  0180EC                     
  9822                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  9823  0180EC  0E79               	movlw	low _PortC
  9824  0180EE  0100               	movlb	0	; () banked
  9825  0180F0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9826  0180F2  0E01               	movlw	high _PortC
  9827  0180F4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9828  0180F6  0E01               	movlw	1
  9829  0180F8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9830  0180FA  0E03               	movlw	3
  9831  0180FC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9832  0180FE  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
  9833                           
  9834                           ;LED.c: 25: }
  9835                           
  9836                           ;LED.c: 24: break;
  9837  018102  D008               	goto	l222
  9838  018104                     l220:
  9839  018104  0100               	movlb	0	; () banked
  9840  018106  518D               	movf	LED_Init@pLED& (0+255),w,b
  9841                           
  9842                           ; Switch size 1, requested type "space"
  9843                           ; Number of cases is 2, Range of values is 0 to 1
  9844                           ; switch strategies available:
  9845                           ; Name         Instructions Cycles
  9846                           ; simple_byte            7     4 (average)
  9847                           ;	Chosen strategy is simple_byte
  9848  018108  0A00               	xorlw	0	; case 0
  9849  01810A  B4D8               	btfsc	status,2,c
  9850  01810C  D7E3               	goto	l221
  9851  01810E  0A01               	xorlw	1	; case 1
  9852  018110  B4D8               	btfsc	status,2,c
  9853  018112  D7EC               	goto	l223
  9854  018114                     l222:
  9855                           
  9856                           ;LED.c: 26: LED_Set(pLED, 0);
  9857                           
  9858                           ; BSR set to: 0
  9859  018114  0E00               	movlw	0
  9860  018116  0100               	movlb	0	; () banked
  9861  018118  6F74               	movwf	LED_Set@pValue& (0+255),b
  9862  01811A  518D               	movf	LED_Init@pLED& (0+255),w,b
  9863  01811C  ECE0  F0C2         	call	_LED_Set
  9864  018120  0012               	return		;funcret
  9865  018122                     __end_of_LED_Init:
  9866                           	opt stack 0
  9867                           tosu	equ	0xFFF
  9868                           tosh	equ	0xFFE
  9869                           tosl	equ	0xFFD
  9870                           pclath	equ	0xFFA
  9871                           tblptru	equ	0xFF8
  9872                           tblptrh	equ	0xFF7
  9873                           tblptrl	equ	0xFF6
  9874                           tablat	equ	0xFF5
  9875                           postinc0	equ	0xFEE
  9876                           wreg	equ	0xFE8
  9877                           postdec1	equ	0xFE5
  9878                           fsr1h	equ	0xFE2
  9879                           fsr1l	equ	0xFE1
  9880                           indf2	equ	0xFDF
  9881                           postinc2	equ	0xFDE
  9882                           postdec2	equ	0xFDD
  9883                           plusw2	equ	0xFDB
  9884                           fsr2h	equ	0xFDA
  9885                           fsr2l	equ	0xFD9
  9886                           status	equ	0xFD8
  9887                           
  9888 ;; *************** function _LED_Set *****************
  9889 ;; Defined at:
  9890 ;;		line 33 in file "Library/LED.c"
  9891 ;; Parameters:    Size  Location     Type
  9892 ;;  pLED            1    wreg     enum E6739
  9893 ;;  pValue          1   20[BANK0 ] unsigned char 
  9894 ;; Auto vars:     Size  Location     Type
  9895 ;;  pLED            1   21[BANK0 ] enum E6739
  9896 ;; Return value:  Size  Location     Type
  9897 ;;                  1    wreg      void 
  9898 ;; Registers used:
  9899 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9900 ;; Tracked objects:
  9901 ;;		On entry : 0/0
  9902 ;;		On exit  : 0/0
  9903 ;;		Unchanged: 0/0
  9904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9905 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9909 ;;Total ram usage:        2 bytes
  9910 ;; Hardware stack levels used:    1
  9911 ;; Hardware stack levels required when called:   11
  9912 ;; This function calls:
  9913 ;;		_Port_SetPin
  9914 ;; This function is called by:
  9915 ;;		_LED_Init
  9916 ;;		_SYSTEM_Initialize
  9917 ;; This function uses a non-reentrant model
  9918 ;;
  9919                           
  9920                           	psect	text24
  9921  0185C0                     __ptext24:
  9922                           	opt stack 0
  9923  0185C0                     _LED_Set:
  9924                           	opt stack 17
  9925                           
  9926                           ;incstack = 0
  9927                           ;LED_Set@pLED stored from wreg
  9928  0185C0  0100               	movlb	0	; () banked
  9929  0185C2  6F75               	movwf	LED_Set@pLED& (0+255),b
  9930                           
  9931                           ;LED.c: 35: switch (pLED)
  9932  0185C4  D018               	goto	l227
  9933  0185C6                     
  9934                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  9935  0185C6  0E79               	movlw	low _PortC
  9936  0185C8  0100               	movlb	0	; () banked
  9937  0185CA  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9938  0185CC  0E01               	movlw	high _PortC
  9939  0185CE  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9940  0185D0  0E00               	movlw	0
  9941  0185D2  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9942  0185D4  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  9943  0185D8  EC1B  F0B7         	call	_Port_SetPin	;wreg free
  9944                           
  9945                           ;LED.c: 39: break;
  9946  0185DC  0012               	return	
  9947  0185DE                     
  9948                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  9949  0185DE  0E79               	movlw	low _PortC
  9950  0185E0  0100               	movlb	0	; () banked
  9951  0185E2  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9952  0185E4  0E01               	movlw	high _PortC
  9953  0185E6  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9954  0185E8  0E01               	movlw	1
  9955  0185EA  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9956  0185EC  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  9957  0185F0  EC1B  F0B7         	call	_Port_SetPin	;wreg free
  9958                           
  9959                           ;LED.c: 43: }
  9960                           
  9961                           ;LED.c: 42: break;
  9962  0185F4  0012               	return	
  9963  0185F6                     l227:
  9964  0185F6  0100               	movlb	0	; () banked
  9965  0185F8  5175               	movf	LED_Set@pLED& (0+255),w,b
  9966                           
  9967                           ; Switch size 1, requested type "space"
  9968                           ; Number of cases is 2, Range of values is 0 to 1
  9969                           ; switch strategies available:
  9970                           ; Name         Instructions Cycles
  9971                           ; simple_byte            7     4 (average)
  9972                           ;	Chosen strategy is simple_byte
  9973  0185FA  0A00               	xorlw	0	; case 0
  9974  0185FC  B4D8               	btfsc	status,2,c
  9975  0185FE  D7E3               	goto	l228
  9976  018600  0A01               	xorlw	1	; case 1
  9977  018602  A4D8               	btfss	status,2,c
  9978  018604  0012               	return	
  9979  018606  D7EB               	goto	l230
  9980  018608                     __end_of_LED_Set:
  9981                           	opt stack 0
  9982                           tosu	equ	0xFFF
  9983                           tosh	equ	0xFFE
  9984                           tosl	equ	0xFFD
  9985                           pclath	equ	0xFFA
  9986                           tblptru	equ	0xFF8
  9987                           tblptrh	equ	0xFF7
  9988                           tblptrl	equ	0xFF6
  9989                           tablat	equ	0xFF5
  9990                           postinc0	equ	0xFEE
  9991                           wreg	equ	0xFE8
  9992                           postdec1	equ	0xFE5
  9993                           fsr1h	equ	0xFE2
  9994                           fsr1l	equ	0xFE1
  9995                           indf2	equ	0xFDF
  9996                           postinc2	equ	0xFDE
  9997                           postdec2	equ	0xFDD
  9998                           plusw2	equ	0xFDB
  9999                           fsr2h	equ	0xFDA
 10000                           fsr2l	equ	0xFD9
 10001                           status	equ	0xFD8
 10002                           
 10003 ;; *************** function _MXK_Dequeue *****************
 10004 ;; Defined at:
 10005 ;;		line 153 in file "Library/MXK.c"
 10006 ;; Parameters:    Size  Location     Type
 10007 ;;		None
 10008 ;; Auto vars:     Size  Location     Type
 10009 ;;		None
 10010 ;; Return value:  Size  Location     Type
 10011 ;;                  1    wreg      void 
 10012 ;; Registers used:
 10013 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10014 ;; Tracked objects:
 10015 ;;		On entry : 0/0
 10016 ;;		On exit  : 0/0
 10017 ;;		Unchanged: 0/0
 10018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10023 ;;Total ram usage:        0 bytes
 10024 ;; Hardware stack levels used:    1
 10025 ;; Hardware stack levels required when called:   12
 10026 ;; This function calls:
 10027 ;;		Absolute function
 10028 ;;		_Motor_Step
 10029 ;; This function is called by:
 10030 ;;		_main
 10031 ;; This function uses a non-reentrant model
 10032 ;;
 10033                           
 10034                           	psect	text25
 10035  018A56                     __ptext25:
 10036                           	opt stack 0
 10037  018A56                     _MXK_Dequeue:
 10038                           	opt stack 18
 10039                           
 10040                           ;MXK.c: 155: if (lQueue)
 10041                           
 10042                           ;incstack = 0
 10043  018A56  5029               	movf	_lQueue,w,c	;volatile
 10044  018A58  102A               	iorwf	_lQueue+1,w,c	;volatile
 10045  018A5A  102B               	iorwf	_lQueue+2,w,c	;volatile
 10046  018A5C  B4D8               	btfsc	status,2,c
 10047  018A5E  D00C               	goto	u16189
 10048                           
 10049                           ;MXK.c: 156: lQueue();
 10050  018A60  D801               	call	u16188
 10051  018A62  D00A               	goto	u16189
 10052  018A64                     u16188:
 10053  018A64  0005               	push	
 10054  018A66  6EFA               	movwf	pclath,c
 10055  018A68  5029               	movf	_lQueue,w,c	;volatile
 10056  018A6A  6EFD               	movwf	tosl,c
 10057  018A6C  502A               	movf	_lQueue+1,w,c	;volatile
 10058  018A6E  6EFE               	movwf	tosh,c
 10059  018A70  502B               	movf	_lQueue+2,w,c	;volatile
 10060  018A72  6EFF               	movwf	tosu,c
 10061  018A74  50FA               	movf	pclath,w,c
 10062  018A76  0012               	return		;indir
 10063  018A78                     u16189:
 10064                           
 10065                           ;MXK.c: 157: lQueue = 0;
 10066  018A78  0E00               	movlw	0
 10067  018A7A  6E29               	movwf	_lQueue,c	;volatile
 10068  018A7C  0E00               	movlw	0
 10069  018A7E  6E2A               	movwf	_lQueue+1,c	;volatile
 10070  018A80  0E00               	movlw	0
 10071  018A82  6E2B               	movwf	_lQueue+2,c	;volatile
 10072  018A84  0012               	return		;funcret
 10073  018A86                     __end_of_MXK_Dequeue:
 10074                           	opt stack 0
 10075                           tosu	equ	0xFFF
 10076                           tosh	equ	0xFFE
 10077                           tosl	equ	0xFFD
 10078                           pclath	equ	0xFFA
 10079                           tblptru	equ	0xFF8
 10080                           tblptrh	equ	0xFF7
 10081                           tblptrl	equ	0xFF6
 10082                           tablat	equ	0xFF5
 10083                           postinc0	equ	0xFEE
 10084                           wreg	equ	0xFE8
 10085                           postdec1	equ	0xFE5
 10086                           fsr1h	equ	0xFE2
 10087                           fsr1l	equ	0xFE1
 10088                           indf2	equ	0xFDF
 10089                           postinc2	equ	0xFDE
 10090                           postdec2	equ	0xFDD
 10091                           plusw2	equ	0xFDB
 10092                           fsr2h	equ	0xFDA
 10093                           fsr2l	equ	0xFD9
 10094                           status	equ	0xFD8
 10095                           
 10096 ;; *************** function _Motor_Step *****************
 10097 ;; Defined at:
 10098 ;;		line 75 in file "Library/Motor.c"
 10099 ;; Parameters:    Size  Location     Type
 10100 ;;		None
 10101 ;; Auto vars:     Size  Location     Type
 10102 ;;		None
 10103 ;; Return value:  Size  Location     Type
 10104 ;;                  1    wreg      void 
 10105 ;; Registers used:
 10106 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10107 ;; Tracked objects:
 10108 ;;		On entry : 0/0
 10109 ;;		On exit  : 0/0
 10110 ;;		Unchanged: 0/0
 10111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10114 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10115 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10116 ;;Total ram usage:        2 bytes
 10117 ;; Hardware stack levels used:    1
 10118 ;; Hardware stack levels required when called:   11
 10119 ;; This function calls:
 10120 ;;		_MXK_Queue
 10121 ;;		_MXK_Release
 10122 ;;		_MXK_SwitchTo
 10123 ;;		_Port_SetPin
 10124 ;;		_Timer0_Restart
 10125 ;;		_Timer0_Stop
 10126 ;; This function is called by:
 10127 ;;		_Motor_Init
 10128 ;;		_Timer0_ISR
 10129 ;;		_MXK_Dequeue
 10130 ;; This function uses a non-reentrant model
 10131 ;;
 10132                           
 10133                           	psect	text26
 10134  0166FA                     __ptext26:
 10135                           	opt stack 0
 10136  0166FA                     _Motor_Step:
 10137                           	opt stack 0
 10138                           
 10139                           ;Skip over the trampoline to the duplicate function for level 2
 10140  0166FA  B251               	btfsc	btemp,1,c
 10141  0166FC  EF83  F0B4         	goto	i2_Motor_Step
 10142  016700                     _Motor_Step$intlevel0:
 10143                           	opt stack 18
 10144                           
 10145                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 10146                           
 10147                           ;incstack = 0
 10148  016700  EE20 F004          	lfsr	2,4
 10149  016704  5036               	movf	_lMotor,w,c
 10150  016706  26D9               	addwf	fsr2l,f,c
 10151  016708  5037               	movf	_lMotor+1,w,c
 10152  01670A  22DA               	addwfc	fsr2h,f,c
 10153  01670C  50DF               	movf	indf2,w,c
 10154  01670E  EC4F  F0C4         	call	_MXK_SwitchTo
 10155  016712  0900               	iorlw	0
 10156  016714  B4D8               	btfsc	status,2,c
 10157  016716  D06E               	goto	l1627
 10158                           
 10159                           ;Motor.c: 78: {
 10160                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 10161  016718  C036  FFD9         	movff	_lMotor,fsr2l
 10162  01671C  C037  FFDA         	movff	_lMotor+1,fsr2h
 10163  016720  50DE               	movf	postinc2,w,c
 10164  016722  10DE               	iorwf	postinc2,w,c
 10165  016724  B4D8               	btfsc	status,2,c
 10166  016726  D061               	goto	l1628
 10167                           
 10168                           ;Motor.c: 80: {
 10169                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 10170  016728  C036  FFD9         	movff	_lMotor,fsr2l
 10171  01672C  C037  FFDA         	movff	_lMotor+1,fsr2h
 10172  016730  0E01               	movlw	1
 10173  016732  BEDB               	btfsc	plusw2,7,c
 10174  016734  D023               	goto	l1629
 10175  016736  0E01               	movlw	1
 10176  016738  50DB               	movf	plusw2,w,c
 10177  01673A  E103               	bnz	u14370
 10178  01673C  04DE               	decf	postinc2,w,c
 10179  01673E  A0D8               	btfss	status,0,c
 10180  016740  D01D               	goto	l1629
 10181  016742                     u14370:
 10182                           
 10183                           ;Motor.c: 83: {
 10184                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 10185  016742  C036  FFD9         	movff	_lMotor,fsr2l
 10186  016746  C037  FFDA         	movff	_lMotor+1,fsr2h
 10187  01674A  28DE               	incf	postinc2,w,c
 10188  01674C  E104               	bnz	u14380
 10189  01674E  0E7F               	movlw	127
 10190  016750  18DE               	xorwf	postinc2,w,c
 10191  016752  B4D8               	btfsc	status,2,c
 10192  016754  D007               	goto	l1630
 10193  016756                     u14380:
 10194                           
 10195                           ;Motor.c: 85: lMotor->mDelta --;
 10196  016756  C036  FFD9         	movff	_lMotor,fsr2l
 10197  01675A  C037  FFDA         	movff	_lMotor+1,fsr2h
 10198  01675E  06DE               	decf	postinc2,f,c
 10199  016760  0E00               	movlw	0
 10200  016762  5ADD               	subwfb	postdec2,f,c
 10201  016764                     l1630:
 10202                           
 10203                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 10204  016764  0E65               	movlw	low _PortE
 10205  016766  0100               	movlb	0	; () banked
 10206  016768  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10207  01676A  0E01               	movlw	high _PortE
 10208  01676C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10209  01676E  0E00               	movlw	0
 10210  016770  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10211  016772  0E01               	movlw	1
 10212  016774  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10213  016776  EC1B  F0B7         	call	_Port_SetPin	;wreg free
 10214                           
 10215                           ;Motor.c: 88: }
 10216  01677A  D01C               	goto	l1631
 10217  01677C                     l1629:
 10218                           
 10219                           ;Motor.c: 89: else
 10220                           ;Motor.c: 90: {
 10221                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 10222  01677C  C036  FFD9         	movff	_lMotor,fsr2l
 10223  016780  C037  FFDA         	movff	_lMotor+1,fsr2h
 10224  016784  04DE               	decf	postinc2,w,c
 10225  016786  E104               	bnz	u14390
 10226  016788  0E80               	movlw	128
 10227  01678A  18DE               	xorwf	postinc2,w,c
 10228  01678C  B4D8               	btfsc	status,2,c
 10229  01678E  D007               	goto	l1632
 10230  016790                     u14390:
 10231                           
 10232                           ;Motor.c: 92: lMotor->mDelta ++;
 10233  016790  C036  FFD9         	movff	_lMotor,fsr2l
 10234  016794  C037  FFDA         	movff	_lMotor+1,fsr2h
 10235  016798  2ADE               	incf	postinc2,f,c
 10236  01679A  0E00               	movlw	0
 10237  01679C  22DD               	addwfc	postdec2,f,c
 10238  01679E                     l1632:
 10239                           
 10240                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 10241  01679E  0E65               	movlw	low _PortE
 10242  0167A0  0100               	movlb	0	; () banked
 10243  0167A2  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10244  0167A4  0E01               	movlw	high _PortE
 10245  0167A6  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10246  0167A8  0E00               	movlw	0
 10247  0167AA  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10248  0167AC  0E00               	movlw	0
 10249  0167AE  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10250  0167B0  EC1B  F0B7         	call	_Port_SetPin	;wreg free
 10251  0167B4                     l1631:
 10252                           
 10253                           ;Motor.c: 95: }
 10254                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 10255  0167B4  0E65               	movlw	low _PortE
 10256  0167B6  0100               	movlb	0	; () banked
 10257  0167B8  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10258  0167BA  0E01               	movlw	high _PortE
 10259  0167BC  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10260  0167BE  0E01               	movlw	1
 10261  0167C0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10262  0167C2  0E01               	movlw	1
 10263  0167C4  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10264  0167C6  EC1B  F0B7         	call	_Port_SetPin	;wreg free
 10265                           
 10266                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 10267  0167CA  0E65               	movlw	low _PortE
 10268  0167CC  0100               	movlb	0	; () banked
 10269  0167CE  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10270  0167D0  0E01               	movlw	high _PortE
 10271  0167D2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10272  0167D4  0E01               	movlw	1
 10273  0167D6  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10274  0167D8  0E00               	movlw	0
 10275  0167DA  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10276  0167DC  EC1B  F0B7         	call	_Port_SetPin	;wreg free
 10277                           
 10278                           ;Motor.c: 101: MXK_Release();
 10279  0167E0  EC20  F0C7         	call	_MXK_Release	;wreg free
 10280                           
 10281                           ;Motor.c: 102: Timer0_Restart();
 10282  0167E4  ECD7  F0C7         	call	_Timer0_Restart	;wreg free
 10283                           
 10284                           ;Motor.c: 103: return;
 10285  0167E8  0012               	return	
 10286  0167EA                     l1628:
 10287                           
 10288                           ;Motor.c: 104: }
 10289                           ;Motor.c: 105: MXK_Release();
 10290  0167EA  EC20  F0C7         	call	_MXK_Release	;wreg free
 10291                           
 10292                           ;Motor.c: 106: Timer0_Stop();
 10293  0167EE  ECFA  F0C7         	call	_Timer0_Stop	;wreg free
 10294                           
 10295                           ;Motor.c: 107: return;
 10296  0167F2  0012               	return	
 10297  0167F4                     l1627:
 10298                           
 10299                           ;Motor.c: 108: }
 10300                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 10301  0167F4  C10B  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 10302  0167F8  C10C  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 10303  0167FC  C10D  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 10304  016800  ECBB  F0C7         	call	_MXK_Queue	;wreg free
 10305  016804  0012               	return		;funcret
 10306  016806                     __end_of_Motor_Step:
 10307                           	opt stack 0
 10308                           tosu	equ	0xFFF
 10309                           tosh	equ	0xFFE
 10310                           tosl	equ	0xFFD
 10311                           pclath	equ	0xFFA
 10312                           tblptru	equ	0xFF8
 10313                           tblptrh	equ	0xFF7
 10314                           tblptrl	equ	0xFF6
 10315                           tablat	equ	0xFF5
 10316                           postinc0	equ	0xFEE
 10317                           wreg	equ	0xFE8
 10318                           postdec1	equ	0xFE5
 10319                           fsr1h	equ	0xFE2
 10320                           fsr1l	equ	0xFE1
 10321                           indf2	equ	0xFDF
 10322                           postinc2	equ	0xFDE
 10323                           postdec2	equ	0xFDD
 10324                           plusw2	equ	0xFDB
 10325                           fsr2h	equ	0xFDA
 10326                           fsr2l	equ	0xFD9
 10327                           status	equ	0xFD8
 10328                           
 10329 ;; *************** function _Timer0_Stop *****************
 10330 ;; Defined at:
 10331 ;;		line 89 in file "Library/Timer0.c"
 10332 ;; Parameters:    Size  Location     Type
 10333 ;;		None
 10334 ;; Auto vars:     Size  Location     Type
 10335 ;;		None
 10336 ;; Return value:  Size  Location     Type
 10337 ;;                  1    wreg      void 
 10338 ;; Registers used:
 10339 ;;		None
 10340 ;; Tracked objects:
 10341 ;;		On entry : 0/0
 10342 ;;		On exit  : 0/0
 10343 ;;		Unchanged: 0/0
 10344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10349 ;;Total ram usage:        0 bytes
 10350 ;; Hardware stack levels used:    1
 10351 ;; Hardware stack levels required when called:    7
 10352 ;; This function calls:
 10353 ;;		Nothing
 10354 ;; This function is called by:
 10355 ;;		_Motor_Step
 10356 ;; This function uses a non-reentrant model
 10357 ;;
 10358                           
 10359                           	psect	text27
 10360  018FF4                     __ptext27:
 10361                           	opt stack 0
 10362  018FF4                     _Timer0_Stop:
 10363                           	opt stack 21
 10364                           
 10365                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 10366                           
 10367                           ;incstack = 0
 10368  018FF4  9AF2               	bcf	intcon,5,c	;volatile
 10369                           
 10370                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 10371  018FF6  94F2               	bcf	intcon,2,c	;volatile
 10372  018FF8  0012               	return		;funcret
 10373  018FFA                     __end_of_Timer0_Stop:
 10374                           	opt stack 0
 10375                           tosu	equ	0xFFF
 10376                           tosh	equ	0xFFE
 10377                           tosl	equ	0xFFD
 10378                           pclath	equ	0xFFA
 10379                           tblptru	equ	0xFF8
 10380                           tblptrh	equ	0xFF7
 10381                           tblptrl	equ	0xFF6
 10382                           tablat	equ	0xFF5
 10383                           intcon	equ	0xFF2
 10384                           postinc0	equ	0xFEE
 10385                           wreg	equ	0xFE8
 10386                           postdec1	equ	0xFE5
 10387                           fsr1h	equ	0xFE2
 10388                           fsr1l	equ	0xFE1
 10389                           indf2	equ	0xFDF
 10390                           postinc2	equ	0xFDE
 10391                           postdec2	equ	0xFDD
 10392                           plusw2	equ	0xFDB
 10393                           fsr2h	equ	0xFDA
 10394                           fsr2l	equ	0xFD9
 10395                           status	equ	0xFD8
 10396                           
 10397 ;; *************** function _Timer0_Restart *****************
 10398 ;; Defined at:
 10399 ;;		line 83 in file "Library/Timer0.c"
 10400 ;; Parameters:    Size  Location     Type
 10401 ;;		None
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;		None
 10404 ;; Return value:  Size  Location     Type
 10405 ;;                  1    wreg      void 
 10406 ;; Registers used:
 10407 ;;		None
 10408 ;; Tracked objects:
 10409 ;;		On entry : 0/0
 10410 ;;		On exit  : 0/0
 10411 ;;		Unchanged: 0/0
 10412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10417 ;;Total ram usage:        0 bytes
 10418 ;; Hardware stack levels used:    1
 10419 ;; Hardware stack levels required when called:    7
 10420 ;; This function calls:
 10421 ;;		Nothing
 10422 ;; This function is called by:
 10423 ;;		_Motor_Step
 10424 ;; This function uses a non-reentrant model
 10425 ;;
 10426                           
 10427                           	psect	text28
 10428  018FAE                     __ptext28:
 10429                           	opt stack 0
 10430  018FAE                     _Timer0_Restart:
 10431                           	opt stack 21
 10432                           
 10433                           ;Timer0.c: 85: TMR0 = COUNTER;
 10434                           
 10435                           ;incstack = 0
 10436  018FAE  C034  FFD6         	movff	_COUNTER,4054	;volatile
 10437  018FB2  C035  FFD7         	movff	_COUNTER+1,4055	;volatile
 10438                           
 10439                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 10440  018FB6  8AF2               	bsf	intcon,5,c	;volatile
 10441  018FB8  0012               	return		;funcret
 10442  018FBA                     __end_of_Timer0_Restart:
 10443                           	opt stack 0
 10444                           tosu	equ	0xFFF
 10445                           tosh	equ	0xFFE
 10446                           tosl	equ	0xFFD
 10447                           pclath	equ	0xFFA
 10448                           tblptru	equ	0xFF8
 10449                           tblptrh	equ	0xFF7
 10450                           tblptrl	equ	0xFF6
 10451                           tablat	equ	0xFF5
 10452                           intcon	equ	0xFF2
 10453                           postinc0	equ	0xFEE
 10454                           wreg	equ	0xFE8
 10455                           postdec1	equ	0xFE5
 10456                           fsr1h	equ	0xFE2
 10457                           fsr1l	equ	0xFE1
 10458                           indf2	equ	0xFDF
 10459                           postinc2	equ	0xFDE
 10460                           postdec2	equ	0xFDD
 10461                           plusw2	equ	0xFDB
 10462                           fsr2h	equ	0xFDA
 10463                           fsr2l	equ	0xFD9
 10464                           status	equ	0xFD8
 10465                           
 10466 ;; *************** function _MXK_SwitchTo *****************
 10467 ;; Defined at:
 10468 ;;		line 105 in file "Library/MXK.c"
 10469 ;; Parameters:    Size  Location     Type
 10470 ;;  pModule         1    wreg     enum E6927
 10471 ;; Auto vars:     Size  Location     Type
 10472 ;;  pModule         1    7[BANK0 ] enum E6927
 10473 ;;  CUR             1    6[BANK0 ] unsigned char 
 10474 ;; Return value:  Size  Location     Type
 10475 ;;                  1    wreg      unsigned char 
 10476 ;; Registers used:
 10477 ;;		wreg, status,2, status,0, cstack
 10478 ;; Tracked objects:
 10479 ;;		On entry : 0/0
 10480 ;;		On exit  : 0/0
 10481 ;;		Unchanged: 0/0
 10482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10484 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10486 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10487 ;;Total ram usage:        2 bytes
 10488 ;; Hardware stack levels used:    1
 10489 ;; Hardware stack levels required when called:    8
 10490 ;; This function calls:
 10491 ;;		_delay_us
 10492 ;; This function is called by:
 10493 ;;		_Motor_Step
 10494 ;; This function uses a non-reentrant model
 10495 ;;
 10496                           
 10497                           	psect	text29
 10498  01889E                     __ptext29:
 10499                           	opt stack 0
 10500  01889E                     _MXK_SwitchTo:
 10501                           	opt stack 20
 10502                           
 10503                           ;incstack = 0
 10504                           ;MXK_SwitchTo@pModule stored from wreg
 10505  01889E  0100               	movlb	0	; () banked
 10506  0188A0  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 10507                           
 10508                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 10509  0188A2  5086               	movf	3974,w,c	;volatile
 10510  0188A4  0B0F               	andlw	15
 10511  0188A6  0100               	movlb	0	; () banked
 10512  0188A8  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 10513                           
 10514                           ; BSR set to: 0
 10515                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 10516  0188AA  504D               	movf	_Bus_State,w,c
 10517  0188AC  A4D8               	btfss	status,2,c
 10518  0188AE  D002               	goto	l1730
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;MXK.c: 110: return 0;
 10522  0188B0  0E00               	movlw	0
 10523                           
 10524                           ; BSR set to: 0
 10525  0188B2  0012               	return	
 10526  0188B4                     l1730:
 10527                           
 10528                           ; BSR set to: 0
 10529                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 10530                           
 10531                           ; BSR set to: 0
 10532  0188B4  0E00               	movlw	0
 10533  0188B6  6E4D               	movwf	_Bus_State,c
 10534                           
 10535                           ; BSR set to: 0
 10536                           ;MXK.c: 114: if (CUR != pModule)
 10537  0188B8  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 10538  0188BA  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 10539  0188BC  B4D8               	btfsc	status,2,c
 10540  0188BE  D00A               	goto	l1732
 10541                           
 10542                           ; BSR set to: 0
 10543                           ;MXK.c: 115: {
 10544                           ;MXK.c: 116: PORTG &= ~(0xF);
 10545  0188C0  0EF0               	movlw	240
 10546  0188C2  1686               	andwf	3974,f,c	;volatile
 10547                           
 10548                           ;MXK.c: 117: PORTG |= pModule;
 10549  0188C4  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 10550  0188C6  1286               	iorwf	3974,f,c	;volatile
 10551                           
 10552                           ; BSR set to: 0
 10553                           ;MXK.c: 120: delay_us(10);
 10554  0188C8  0E00               	movlw	0
 10555  0188CA  6F61               	movwf	(delay_us@us+1)& (0+255),b
 10556  0188CC  0E0A               	movlw	10
 10557  0188CE  6F60               	movwf	delay_us@us& (0+255),b
 10558  0188D0  EC4C  F0C3         	call	_delay_us	;wreg free
 10559  0188D4                     l1732:
 10560                           
 10561                           ;MXK.c: 121: }
 10562                           ;MXK.c: 122: return 1;
 10563  0188D4  0E01               	movlw	1
 10564  0188D6  0012               	return	
 10565  0188D8                     __end_of_MXK_SwitchTo:
 10566                           	opt stack 0
 10567                           tosu	equ	0xFFF
 10568                           tosh	equ	0xFFE
 10569                           tosl	equ	0xFFD
 10570                           pclath	equ	0xFFA
 10571                           tblptru	equ	0xFF8
 10572                           tblptrh	equ	0xFF7
 10573                           tblptrl	equ	0xFF6
 10574                           tablat	equ	0xFF5
 10575                           intcon	equ	0xFF2
 10576                           postinc0	equ	0xFEE
 10577                           wreg	equ	0xFE8
 10578                           postdec1	equ	0xFE5
 10579                           fsr1h	equ	0xFE2
 10580                           fsr1l	equ	0xFE1
 10581                           indf2	equ	0xFDF
 10582                           postinc2	equ	0xFDE
 10583                           postdec2	equ	0xFDD
 10584                           plusw2	equ	0xFDB
 10585                           fsr2h	equ	0xFDA
 10586                           fsr2l	equ	0xFD9
 10587                           status	equ	0xFD8
 10588                           
 10589 ;; *************** function _MXK_Release *****************
 10590 ;; Defined at:
 10591 ;;		line 130 in file "Library/MXK.c"
 10592 ;; Parameters:    Size  Location     Type
 10593 ;;		None
 10594 ;; Auto vars:     Size  Location     Type
 10595 ;;		None
 10596 ;; Return value:  Size  Location     Type
 10597 ;;                  1    wreg      unsigned char 
 10598 ;; Registers used:
 10599 ;;		wreg, status,2, status,0
 10600 ;; Tracked objects:
 10601 ;;		On entry : 0/0
 10602 ;;		On exit  : 0/0
 10603 ;;		Unchanged: 0/0
 10604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10609 ;;Total ram usage:        0 bytes
 10610 ;; Hardware stack levels used:    1
 10611 ;; Hardware stack levels required when called:    7
 10612 ;; This function calls:
 10613 ;;		Nothing
 10614 ;; This function is called by:
 10615 ;;		_Motor_Step
 10616 ;;		_main
 10617 ;; This function uses a non-reentrant model
 10618 ;;
 10619                           
 10620                           	psect	text30
 10621  018E40                     __ptext30:
 10622                           	opt stack 0
 10623  018E40                     _MXK_Release:
 10624                           	opt stack 23
 10625                           
 10626                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 10627                           
 10628                           ;incstack = 0
 10629  018E40  0E01               	movlw	1
 10630  018E42  6E4D               	movwf	_Bus_State,c
 10631                           
 10632                           ;MXK.c: 134: if (lQueue != 0)
 10633  018E44  5029               	movf	_lQueue,w,c	;volatile
 10634  018E46  102A               	iorwf	_lQueue+1,w,c	;volatile
 10635  018E48  102B               	iorwf	_lQueue+2,w,c	;volatile
 10636  018E4A  B4D8               	btfsc	status,2,c
 10637  018E4C  D002               	goto	l1735
 10638                           
 10639                           ;MXK.c: 135: return 1;
 10640  018E4E  0E01               	movlw	1
 10641  018E50  0012               	return	
 10642  018E52                     l1735:
 10643                           
 10644                           ;MXK.c: 137: return 0;
 10645  018E52  0E00               	movlw	0
 10646  018E54  0012               	return	
 10647  018E56                     __end_of_MXK_Release:
 10648                           	opt stack 0
 10649                           tosu	equ	0xFFF
 10650                           tosh	equ	0xFFE
 10651                           tosl	equ	0xFFD
 10652                           pclath	equ	0xFFA
 10653                           tblptru	equ	0xFF8
 10654                           tblptrh	equ	0xFF7
 10655                           tblptrl	equ	0xFF6
 10656                           tablat	equ	0xFF5
 10657                           intcon	equ	0xFF2
 10658                           postinc0	equ	0xFEE
 10659                           wreg	equ	0xFE8
 10660                           postdec1	equ	0xFE5
 10661                           fsr1h	equ	0xFE2
 10662                           fsr1l	equ	0xFE1
 10663                           indf2	equ	0xFDF
 10664                           postinc2	equ	0xFDE
 10665                           postdec2	equ	0xFDD
 10666                           plusw2	equ	0xFDB
 10667                           fsr2h	equ	0xFDA
 10668                           fsr2l	equ	0xFD9
 10669                           status	equ	0xFD8
 10670                           
 10671 ;; *************** function _MXK_Queue *****************
 10672 ;; Defined at:
 10673 ;;		line 144 in file "Library/MXK.c"
 10674 ;; Parameters:    Size  Location     Type
 10675 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 10676 ;;		 -> Absolute function(1), Motor_Step(1), 
 10677 ;; Auto vars:     Size  Location     Type
 10678 ;;		None
 10679 ;; Return value:  Size  Location     Type
 10680 ;;                  1    wreg      void 
 10681 ;; Registers used:
 10682 ;;		wreg, status,2, status,0
 10683 ;; Tracked objects:
 10684 ;;		On entry : 0/0
 10685 ;;		On exit  : 0/0
 10686 ;;		Unchanged: 0/0
 10687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10688 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10691 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10692 ;;Total ram usage:        3 bytes
 10693 ;; Hardware stack levels used:    1
 10694 ;; Hardware stack levels required when called:    7
 10695 ;; This function calls:
 10696 ;;		Nothing
 10697 ;; This function is called by:
 10698 ;;		_Motor_Step
 10699 ;; This function uses a non-reentrant model
 10700 ;;
 10701                           
 10702                           	psect	text31
 10703  018F76                     __ptext31:
 10704                           	opt stack 0
 10705  018F76                     _MXK_Queue:
 10706                           	opt stack 21
 10707                           
 10708                           ;MXK.c: 146: lQueue = pCallback;
 10709                           
 10710                           ;incstack = 0
 10711  018F76  C060  F029         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 10712  018F7A  C061  F02A         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 10713  018F7E  C062  F02B         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 10714  018F82  0012               	return		;funcret
 10715  018F84                     __end_of_MXK_Queue:
 10716                           	opt stack 0
 10717                           tosu	equ	0xFFF
 10718                           tosh	equ	0xFFE
 10719                           tosl	equ	0xFFD
 10720                           pclath	equ	0xFFA
 10721                           tblptru	equ	0xFF8
 10722                           tblptrh	equ	0xFF7
 10723                           tblptrl	equ	0xFF6
 10724                           tablat	equ	0xFF5
 10725                           intcon	equ	0xFF2
 10726                           postinc0	equ	0xFEE
 10727                           wreg	equ	0xFE8
 10728                           postdec1	equ	0xFE5
 10729                           fsr1h	equ	0xFE2
 10730                           fsr1l	equ	0xFE1
 10731                           indf2	equ	0xFDF
 10732                           postinc2	equ	0xFDE
 10733                           postdec2	equ	0xFDD
 10734                           plusw2	equ	0xFDB
 10735                           fsr2h	equ	0xFDA
 10736                           fsr2l	equ	0xFD9
 10737                           status	equ	0xFD8
 10738                           
 10739 ;; *************** function _MXK_BlockSwitchTo *****************
 10740 ;; Defined at:
 10741 ;;		line 82 in file "Library/MXK.c"
 10742 ;; Parameters:    Size  Location     Type
 10743 ;;  pModule         1    wreg     enum E6927
 10744 ;; Auto vars:     Size  Location     Type
 10745 ;;  pModule         1    7[BANK0 ] enum E6927
 10746 ;;  CUR             1    6[BANK0 ] unsigned char 
 10747 ;; Return value:  Size  Location     Type
 10748 ;;                  1    wreg      unsigned char 
 10749 ;; Registers used:
 10750 ;;		wreg, status,2, status,0, cstack
 10751 ;; Tracked objects:
 10752 ;;		On entry : 0/0
 10753 ;;		On exit  : 0/0
 10754 ;;		Unchanged: 0/0
 10755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10757 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10759 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10760 ;;Total ram usage:        2 bytes
 10761 ;; Hardware stack levels used:    1
 10762 ;; Hardware stack levels required when called:    8
 10763 ;; This function calls:
 10764 ;;		_delay_us
 10765 ;; This function is called by:
 10766 ;;		_main
 10767 ;; This function uses a non-reentrant model
 10768 ;;
 10769                           
 10770                           	psect	text32
 10771  01894C                     __ptext32:
 10772                           	opt stack 0
 10773  01894C                     _MXK_BlockSwitchTo:
 10774                           	opt stack 22
 10775                           
 10776                           ;incstack = 0
 10777                           ;MXK_BlockSwitchTo@pModule stored from wreg
 10778  01894C  0100               	movlb	0	; () banked
 10779  01894E  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 10780                           
 10781                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 10782  018950  5086               	movf	3974,w,c	;volatile
 10783  018952  0B0F               	andlw	15
 10784  018954  0100               	movlb	0	; () banked
 10785  018956  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 10786  018958                     
 10787                           ; BSR set to: 0
 10788                           
 10789                           ; BSR set to: 0
 10790  018958  504D               	movf	_Bus_State,w,c
 10791  01895A  B4D8               	btfsc	status,2,c
 10792  01895C  D7FD               	goto	l1724
 10793                           
 10794                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 10795  01895E  0E00               	movlw	0
 10796  018960  6E4D               	movwf	_Bus_State,c
 10797                           
 10798                           ;MXK.c: 90: if (CUR != pModule)
 10799  018962  0100               	movlb	0	; () banked
 10800  018964  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 10801  018966  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 10802  018968  B4D8               	btfsc	status,2,c
 10803  01896A  D00A               	goto	l1726
 10804                           
 10805                           ; BSR set to: 0
 10806                           ;MXK.c: 91: {
 10807                           ;MXK.c: 92: PORTG &= ~(0xF);
 10808  01896C  0EF0               	movlw	240
 10809  01896E  1686               	andwf	3974,f,c	;volatile
 10810                           
 10811                           ;MXK.c: 93: PORTG |= pModule;
 10812  018970  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 10813  018972  1286               	iorwf	3974,f,c	;volatile
 10814                           
 10815                           ; BSR set to: 0
 10816                           ;MXK.c: 96: delay_us(10);
 10817  018974  0E00               	movlw	0
 10818  018976  6F61               	movwf	(delay_us@us+1)& (0+255),b
 10819  018978  0E0A               	movlw	10
 10820  01897A  6F60               	movwf	delay_us@us& (0+255),b
 10821  01897C  EC4C  F0C3         	call	_delay_us	;wreg free
 10822  018980                     l1726:
 10823                           
 10824                           ;MXK.c: 97: }
 10825                           ;MXK.c: 98: return 1;
 10826  018980  0E01               	movlw	1
 10827  018982  0012               	return	
 10828  018984                     __end_of_MXK_BlockSwitchTo:
 10829                           	opt stack 0
 10830                           tosu	equ	0xFFF
 10831                           tosh	equ	0xFFE
 10832                           tosl	equ	0xFFD
 10833                           pclath	equ	0xFFA
 10834                           tblptru	equ	0xFF8
 10835                           tblptrh	equ	0xFF7
 10836                           tblptrl	equ	0xFF6
 10837                           tablat	equ	0xFF5
 10838                           intcon	equ	0xFF2
 10839                           postinc0	equ	0xFEE
 10840                           wreg	equ	0xFE8
 10841                           postdec1	equ	0xFE5
 10842                           fsr1h	equ	0xFE2
 10843                           fsr1l	equ	0xFE1
 10844                           indf2	equ	0xFDF
 10845                           postinc2	equ	0xFDE
 10846                           postdec2	equ	0xFDD
 10847                           plusw2	equ	0xFDB
 10848                           fsr2h	equ	0xFDA
 10849                           fsr2l	equ	0xFD9
 10850                           status	equ	0xFD8
 10851                           
 10852 ;; *************** function _delay_us *****************
 10853 ;; Defined at:
 10854 ;;		line 255 in file "Library/Types.c"
 10855 ;; Parameters:    Size  Location     Type
 10856 ;;  us              2    0[BANK0 ] unsigned short 
 10857 ;; Auto vars:     Size  Location     Type
 10858 ;;  u               4    2[BANK0 ] unsigned long 
 10859 ;; Return value:  Size  Location     Type
 10860 ;;                  1    wreg      void 
 10861 ;; Registers used:
 10862 ;;		wreg, status,2, status,0
 10863 ;; Tracked objects:
 10864 ;;		On entry : 0/0
 10865 ;;		On exit  : 0/0
 10866 ;;		Unchanged: 0/0
 10867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10868 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10869 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10871 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10872 ;;Total ram usage:        6 bytes
 10873 ;; Hardware stack levels used:    1
 10874 ;; Hardware stack levels required when called:    7
 10875 ;; This function calls:
 10876 ;;		Nothing
 10877 ;; This function is called by:
 10878 ;;		_MXK_BlockSwitchTo
 10879 ;;		_MXK_SwitchTo
 10880 ;; This function uses a non-reentrant model
 10881 ;;
 10882                           
 10883                           	psect	text33
 10884  018698                     __ptext33:
 10885                           	opt stack 0
 10886  018698                     _delay_us:
 10887                           	opt stack 20
 10888                           
 10889                           ;Types.c: 256: unsigned long u;
 10890                           ;Types.c: 257: while (us--) {
 10891                           
 10892                           ;incstack = 0
 10893  018698  D018               	goto	u13420
 10894  01869A                     l15927:
 10895                           
 10896                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 10897  01869A  0E00               	movlw	0
 10898  01869C  0100               	movlb	0	; () banked
 10899  01869E  6F62               	movwf	delay_us@u& (0+255),b
 10900  0186A0  0E00               	movlw	0
 10901  0186A2  6F63               	movwf	(delay_us@u+1)& (0+255),b
 10902  0186A4  0E00               	movlw	0
 10903  0186A6  6F64               	movwf	(delay_us@u+2)& (0+255),b
 10904  0186A8  0E00               	movlw	0
 10905  0186AA  6F65               	movwf	(delay_us@u+3)& (0+255),b
 10906  0186AC                     l15929:
 10907                           
 10908                           ; BSR set to: 0
 10909  0186AC  5162               	movf	delay_us@u& (0+255),w,b
 10910  0186AE  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 10911  0186B0  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 10912  0186B2  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 10913  0186B4  A4D8               	btfss	status,2,c
 10914  0186B6  D009               	goto	u13420
 10915                           
 10916                           ; BSR set to: 0
 10917                           
 10918                           ; BSR set to: 0
 10919  0186B8  F000               	nop		; ;# 
 10920  0186BA  0E01               	movlw	1
 10921  0186BC  0100               	movlb	0	; () banked
 10922  0186BE  2762               	addwf	delay_us@u& (0+255),f,b
 10923  0186C0  0E00               	movlw	0
 10924  0186C2  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 10925  0186C4  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 10926  0186C6  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 10927  0186C8  D7F1               	goto	l15929
 10928  0186CA                     u13420:
 10929                           
 10930                           ; BSR set to: 0
 10931                           
 10932                           ; BSR set to: 0
 10933  0186CA  0100               	movlb	0	; () banked
 10934  0186CC  0760               	decf	delay_us@us& (0+255),f,b
 10935  0186CE  A0D8               	btfss	status,0,c
 10936  0186D0  0761               	decf	(delay_us@us+1)& (0+255),f,b
 10937  0186D2  2960               	incf	delay_us@us& (0+255),w,b
 10938  0186D4  E1E2               	bnz	l15927
 10939  0186D6  2961               	incf	(delay_us@us+1)& (0+255),w,b
 10940  0186D8  B4D8               	btfsc	status,2,c
 10941  0186DA  0012               	return	
 10942  0186DC  D7DE               	goto	l832
 10943  0186DE                     __end_of_delay_us:
 10944                           	opt stack 0
 10945                           tosu	equ	0xFFF
 10946                           tosh	equ	0xFFE
 10947                           tosl	equ	0xFFD
 10948                           pclath	equ	0xFFA
 10949                           tblptru	equ	0xFF8
 10950                           tblptrh	equ	0xFF7
 10951                           tblptrl	equ	0xFF6
 10952                           tablat	equ	0xFF5
 10953                           intcon	equ	0xFF2
 10954                           postinc0	equ	0xFEE
 10955                           wreg	equ	0xFE8
 10956                           postdec1	equ	0xFE5
 10957                           fsr1h	equ	0xFE2
 10958                           fsr1l	equ	0xFE1
 10959                           indf2	equ	0xFDF
 10960                           postinc2	equ	0xFDE
 10961                           postdec2	equ	0xFDD
 10962                           plusw2	equ	0xFDB
 10963                           fsr2h	equ	0xFDA
 10964                           fsr2l	equ	0xFD9
 10965                           status	equ	0xFD8
 10966                           
 10967 ;; *************** function _LCD_Init *****************
 10968 ;; Defined at:
 10969 ;;		line 172 in file "Library/LCD.c"
 10970 ;; Parameters:    Size  Location     Type
 10971 ;;		None
 10972 ;; Auto vars:     Size  Location     Type
 10973 ;;  i               2   55[BANK0 ] unsigned short 
 10974 ;; Return value:  Size  Location     Type
 10975 ;;                  1    wreg      void 
 10976 ;; Registers used:
 10977 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10978 ;; Tracked objects:
 10979 ;;		On entry : 0/0
 10980 ;;		On exit  : 0/0
 10981 ;;		Unchanged: 0/0
 10982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10984 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10985 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10986 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10987 ;;Total ram usage:        4 bytes
 10988 ;; Hardware stack levels used:    1
 10989 ;; Hardware stack levels required when called:   15
 10990 ;; This function calls:
 10991 ;;		_Configure_GPIOs
 10992 ;;		_LCD_Fill
 10993 ;;		_LCD_Write
 10994 ;;		_Set_Rotation
 10995 ;;		_delay_ms
 10996 ;; This function is called by:
 10997 ;;		_main
 10998 ;; This function uses a non-reentrant model
 10999 ;;
 11000                           
 11001                           	psect	text34
 11002  015E8A                     __ptext34:
 11003                           	opt stack 0
 11004  015E8A                     _LCD_Init:
 11005                           	opt stack 15
 11006                           
 11007                           ;LCD.c: 174: UINT16 i;
 11008                           ;LCD.c: 175: Configure_GPIOs();
 11009                           
 11010                           ; BSR set to: 0
 11011                           ;incstack = 0
 11012  015E8A  EC0A  F0C0         	call	_Configure_GPIOs	;wreg free
 11013                           
 11014                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 11015  015E8E  0E00               	movlw	0
 11016  015E90  0100               	movlb	0	; () banked
 11017  015E92  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 11018  015E94  0E00               	movlw	0
 11019  015E96  6F97               	movwf	LCD_Init@i& (0+255),b
 11020                           
 11021                           ; BSR set to: 0
 11022  015E98  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 11023  015E9A  E17D               	bnz	u14540
 11024  015E9C  0E59               	movlw	89
 11025  015E9E  5D97               	subwf	LCD_Init@i& (0+255),w,b
 11026  015EA0  B0D8               	btfsc	status,0,c
 11027  015EA2  D079               	goto	u14540
 11028                           
 11029                           ; BSR set to: 0
 11030                           ;LCD.c: 178: {
 11031                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 11032                           
 11033                           ; BSR set to: 0
 11034                           
 11035                           ; BSR set to: 0
 11036  015EA4  90D8               	bcf	status,0,c
 11037  015EA6  3597               	rlcf	LCD_Init@i& (0+255),w,b
 11038  015EA8  6EF6               	movwf	tblptrl,c
 11039  015EAA  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11040  015EAC  6EF7               	movwf	tblptrh,c
 11041  015EAE  0E3B               	movlw	low _InitList
 11042  015EB0  26F6               	addwf	tblptrl,f,c
 11043  015EB2  0EFB               	movlw	high _InitList
 11044  015EB4  22F7               	addwfc	tblptrh,f,c
 11045  015EB6                     	if	1	;There are 3 active tblptr bytes
 11046  015EB6  6AF8               	clrf	tblptru,c
 11047  015EB8  0E00               	movlw	low (__mediumconst shr (0+16))
 11048  015EBA  22F8               	addwfc	tblptru,f,c
 11049  015EBC                     	endif
 11050  015EBC  0009               	tblrd		*+
 11051  015EBE  0E80               	movlw	128
 11052  015EC0  18F5               	xorwf	tablat,w,c
 11053  015EC2  0009               	tblrd		*+
 11054  015EC4  10F5               	iorwf	tablat,w,c
 11055  015EC6  A4D8               	btfss	status,2,c
 11056  015EC8  D01D               	goto	l87
 11057                           
 11058                           ; BSR set to: 0
 11059  015ECA  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 11060  015ECC  E11B               	bnz	l16959
 11061  015ECE  0E58               	movlw	88
 11062  015ED0  5D97               	subwf	LCD_Init@i& (0+255),w,b
 11063  015ED2  B0D8               	btfsc	status,0,c
 11064  015ED4  D017               	goto	l87
 11065                           
 11066                           ; BSR set to: 0
 11067                           ;LCD.c: 180: delay_ms(InitList[++i]);
 11068  015ED6  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 11069  015ED8  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 11070  015EDA  90D8               	bcf	status,0,c
 11071  015EDC  3597               	rlcf	LCD_Init@i& (0+255),w,b
 11072  015EDE  6EF6               	movwf	tblptrl,c
 11073  015EE0  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11074  015EE2  6EF7               	movwf	tblptrh,c
 11075  015EE4  0E3B               	movlw	low _InitList
 11076  015EE6  26F6               	addwf	tblptrl,f,c
 11077  015EE8  0EFB               	movlw	high _InitList
 11078  015EEA  22F7               	addwfc	tblptrh,f,c
 11079  015EEC                     	if	1	;There are 3 active tblptr bytes
 11080  015EEC  6AF8               	clrf	tblptru,c
 11081  015EEE  0E00               	movlw	low (__mediumconst shr (0+16))
 11082  015EF0  22F8               	addwfc	tblptru,f,c
 11083  015EF2                     	endif
 11084  015EF2  0009               	tblrd		*+
 11085  015EF4  CFF5 F060          	movff	tablat,delay_ms@ms
 11086  015EF8  000A               	tblrd		*-
 11087  015EFA  CFF5 F061          	movff	tablat,delay_ms@ms+1
 11088  015EFE  EC39  F0C0         	call	_delay_ms	;wreg free
 11089  015F02  D043               	goto	l90
 11090  015F04                     l87:
 11091  015F04                     l16959:
 11092                           
 11093                           ;LCD.c: 181: else
 11094                           ;LCD.c: 182: {
 11095                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 11096  015F04  90D8               	bcf	status,0,c
 11097  015F06  0100               	movlb	0	; () banked
 11098  015F08  3597               	rlcf	LCD_Init@i& (0+255),w,b
 11099  015F0A  6EF6               	movwf	tblptrl,c
 11100  015F0C  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11101  015F0E  6EF7               	movwf	tblptrh,c
 11102  015F10  0E3B               	movlw	low _InitList
 11103  015F12  26F6               	addwf	tblptrl,f,c
 11104  015F14  0EFB               	movlw	high _InitList
 11105  015F16  22F7               	addwfc	tblptrh,f,c
 11106  015F18                     	if	1	;There are 3 active tblptr bytes
 11107  015F18  6AF8               	clrf	tblptru,c
 11108  015F1A  0E00               	movlw	low (__mediumconst shr (0+16))
 11109  015F1C  22F8               	addwfc	tblptru,f,c
 11110  015F1E                     	endif
 11111  015F1E  0009               	tblrd		*+
 11112  015F20  0E00               	movlw	0
 11113  015F22  5EF5               	subwf	tablat,f,c
 11114  015F24  0009               	tblrd		*+
 11115  015F26  0E01               	movlw	1
 11116  015F28  5AF5               	subwfb	tablat,f,c
 11117  015F2A  A0D8               	btfss	status,0,c
 11118  015F2C  D01B               	goto	l89
 11119                           
 11120                           ; BSR set to: 0
 11121  015F2E  0E00               	movlw	0
 11122  015F30  6F63               	movwf	LCD_Write@mode& (0+255),b
 11123  015F32  90D8               	bcf	status,0,c
 11124  015F34  3597               	rlcf	LCD_Init@i& (0+255),w,b
 11125  015F36  6EF6               	movwf	tblptrl,c
 11126  015F38  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11127  015F3A  6EF7               	movwf	tblptrh,c
 11128  015F3C  0E3B               	movlw	low _InitList
 11129  015F3E  26F6               	addwf	tblptrl,f,c
 11130  015F40  0EFB               	movlw	high _InitList
 11131  015F42  22F7               	addwfc	tblptrh,f,c
 11132  015F44                     	if	1	;There are 3 active tblptr bytes
 11133  015F44  6AF8               	clrf	tblptru,c
 11134  015F46  0E00               	movlw	low (__mediumconst shr (0+16))
 11135  015F48  22F8               	addwfc	tblptru,f,c
 11136  015F4A                     	endif
 11137  015F4A  0009               	tblrd		*+
 11138  015F4C  CFF5 F095          	movff	tablat,??_LCD_Init
 11139  015F50  0009               	tblrd		*+
 11140  015F52  CFF5 F096          	movff	tablat,??_LCD_Init+1
 11141  015F56  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 11142  015F5A  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 11143  015F5C  5195               	movf	??_LCD_Init& (0+255),w,b
 11144  015F5E  EC74  F0C6         	call	_LCD_Write
 11145  015F62  D013               	goto	l90
 11146  015F64                     l89:
 11147                           
 11148                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 11149  015F64  0E01               	movlw	1
 11150  015F66  0100               	movlb	0	; () banked
 11151  015F68  6F63               	movwf	LCD_Write@mode& (0+255),b
 11152  015F6A  90D8               	bcf	status,0,c
 11153  015F6C  3597               	rlcf	LCD_Init@i& (0+255),w,b
 11154  015F6E  6EF6               	movwf	tblptrl,c
 11155  015F70  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11156  015F72  6EF7               	movwf	tblptrh,c
 11157  015F74  0E3B               	movlw	low _InitList
 11158  015F76  26F6               	addwf	tblptrl,f,c
 11159  015F78  0EFB               	movlw	high _InitList
 11160  015F7A  22F7               	addwfc	tblptrh,f,c
 11161  015F7C                     	if	1	;There are 3 active tblptr bytes
 11162  015F7C  6AF8               	clrf	tblptru,c
 11163  015F7E  0E00               	movlw	low (__mediumconst shr (0+16))
 11164  015F80  22F8               	addwfc	tblptru,f,c
 11165  015F82                     	endif
 11166  015F82  0008               	tblrd		*
 11167  015F84  50F5               	movf	tablat,w,c
 11168  015F86  EC74  F0C6         	call	_LCD_Write
 11169  015F8A                     l90:
 11170  015F8A  0100               	movlb	0	; () banked
 11171  015F8C  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 11172  015F8E  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 11173                           
 11174                           ; BSR set to: 0
 11175  015F90  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 11176  015F92  E101               	bnz	l16969
 11177  015F94  D783               	goto	L13
 11178  015F96                     u14540:
 11179  015F96                     l16969:
 11180                           
 11181                           ; BSR set to: 0
 11182                           ;LCD.c: 185: }
 11183                           ;LCD.c: 186: }
 11184                           ;LCD.c: 187: delay_ms(100);
 11185  015F96  0E00               	movlw	0
 11186  015F98  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 11187  015F9A  0E64               	movlw	100
 11188  015F9C  6F60               	movwf	delay_ms@ms& (0+255),b
 11189  015F9E  EC39  F0C0         	call	_delay_ms	;wreg free
 11190                           
 11191                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 11192  015FA2  0E00               	movlw	0
 11193  015FA4  0100               	movlb	0	; () banked
 11194  015FA6  6F63               	movwf	LCD_Write@mode& (0+255),b
 11195  015FA8  0E29               	movlw	41
 11196  015FAA  EC74  F0C6         	call	_LCD_Write
 11197                           
 11198                           ;LCD.c: 189: Set_Rotation(1);
 11199  015FAE  0E01               	movlw	1
 11200  015FB0  EC47  F0BA         	call	_Set_Rotation
 11201                           
 11202                           ;LCD.c: 191: delay_ms(100);
 11203  015FB4  0E00               	movlw	0
 11204  015FB6  0100               	movlb	0	; () banked
 11205  015FB8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 11206  015FBA  0E64               	movlw	100
 11207  015FBC  6F60               	movwf	delay_ms@ms& (0+255),b
 11208  015FBE  EC39  F0C0         	call	_delay_ms	;wreg free
 11209                           
 11210                           ;LCD.c: 192: LCD_Fill(0x0000);
 11211  015FC2  0E00               	movlw	0
 11212  015FC4  0100               	movlb	0	; () banked
 11213  015FC6  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 11214  015FC8  0E00               	movlw	0
 11215  015FCA  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 11216  015FCC  EC04  F0C3         	call	_LCD_Fill	;wreg free
 11217  015FD0  0012               	return		;funcret
 11218  015FD2                     __end_of_LCD_Init:
 11219                           	opt stack 0
 11220                           tosu	equ	0xFFF
 11221                           tosh	equ	0xFFE
 11222                           tosl	equ	0xFFD
 11223                           pclath	equ	0xFFA
 11224                           tblptru	equ	0xFF8
 11225                           tblptrh	equ	0xFF7
 11226                           tblptrl	equ	0xFF6
 11227                           tablat	equ	0xFF5
 11228                           intcon	equ	0xFF2
 11229                           postinc0	equ	0xFEE
 11230                           wreg	equ	0xFE8
 11231                           postdec1	equ	0xFE5
 11232                           fsr1h	equ	0xFE2
 11233                           fsr1l	equ	0xFE1
 11234                           indf2	equ	0xFDF
 11235                           postinc2	equ	0xFDE
 11236                           postdec2	equ	0xFDD
 11237                           plusw2	equ	0xFDB
 11238                           fsr2h	equ	0xFDA
 11239                           fsr2l	equ	0xFD9
 11240                           status	equ	0xFD8
 11241                           
 11242 ;; *************** function _Set_Rotation *****************
 11243 ;; Defined at:
 11244 ;;		line 248 in file "Library/LCD.c"
 11245 ;; Parameters:    Size  Location     Type
 11246 ;;  m               1    wreg     unsigned char 
 11247 ;; Auto vars:     Size  Location     Type
 11248 ;;  m               1    5[BANK0 ] unsigned char 
 11249 ;;  rotation        1    6[BANK0 ] unsigned char 
 11250 ;; Return value:  Size  Location     Type
 11251 ;;                  1    wreg      void 
 11252 ;; Registers used:
 11253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11254 ;; Tracked objects:
 11255 ;;		On entry : 0/0
 11256 ;;		On exit  : 0/0
 11257 ;;		Unchanged: 0/0
 11258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11260 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11262 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11263 ;;Total ram usage:        2 bytes
 11264 ;; Hardware stack levels used:    1
 11265 ;; Hardware stack levels required when called:    9
 11266 ;; This function calls:
 11267 ;;		_LCD_Write
 11268 ;; This function is called by:
 11269 ;;		_LCD_Init
 11270 ;; This function uses a non-reentrant model
 11271 ;;
 11272                           
 11273                           	psect	text35
 11274  01748E                     __ptext35:
 11275                           	opt stack 0
 11276  01748E                     _Set_Rotation:
 11277                           	opt stack 20
 11278                           
 11279                           ;incstack = 0
 11280                           ;Set_Rotation@m stored from wreg
 11281  01748E  0100               	movlb	0	; () banked
 11282  017490  6F65               	movwf	Set_Rotation@m& (0+255),b
 11283                           
 11284                           ;LCD.c: 250: UINT8 rotation = 0x00;
 11285  017492  0E00               	movlw	0
 11286  017494  0100               	movlb	0	; () banked
 11287  017496  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 11288                           
 11289                           ; BSR set to: 0
 11290                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 11291  017498  0E00               	movlw	0
 11292  01749A  6F63               	movwf	LCD_Write@mode& (0+255),b
 11293  01749C  0E36               	movlw	54
 11294  01749E  EC74  F0C6         	call	_LCD_Write
 11295                           
 11296                           ;LCD.c: 253: rotation = (m % 4);
 11297  0174A2  0100               	movlb	0	; () banked
 11298  0174A4  5165               	movf	Set_Rotation@m& (0+255),w,b
 11299  0174A6  0B03               	andlw	3
 11300  0174A8  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 11301                           
 11302                           ;LCD.c: 255: switch(rotation)
 11303  0174AA  D02B               	goto	l117
 11304  0174AC                     
 11305                           ; BSR set to: 0
 11306                           ;LCD.c: 258: {
 11307                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 11308                           
 11309                           ; BSR set to: 0
 11310  0174AC  0E01               	movlw	1
 11311  0174AE  6F63               	movwf	LCD_Write@mode& (0+255),b
 11312  0174B0  0EC8               	movlw	200
 11313  0174B2  EC74  F0C6         	call	_LCD_Write
 11314                           
 11315                           ;LCD.c: 260: w = 128;
 11316  0174B6  0E80               	movlw	128
 11317  0174B8  6E50               	movwf	_w,c
 11318                           
 11319                           ;LCD.c: 261: l = 128;
 11320  0174BA  0E80               	movlw	128
 11321  0174BC  6E4F               	movwf	_l,c
 11322                           
 11323                           ;LCD.c: 262: break;
 11324  0174BE  0012               	return	
 11325  0174C0                     
 11326                           ;LCD.c: 265: {
 11327                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 11328  0174C0  0E01               	movlw	1
 11329  0174C2  0100               	movlb	0	; () banked
 11330  0174C4  6F63               	movwf	LCD_Write@mode& (0+255),b
 11331  0174C6  0EA8               	movlw	168
 11332  0174C8  EC74  F0C6         	call	_LCD_Write
 11333                           
 11334                           ;LCD.c: 267: w = 128;
 11335  0174CC  0E80               	movlw	128
 11336  0174CE  6E50               	movwf	_w,c
 11337                           
 11338                           ;LCD.c: 268: l = 128;
 11339  0174D0  0E80               	movlw	128
 11340  0174D2  6E4F               	movwf	_l,c
 11341                           
 11342                           ;LCD.c: 269: break;
 11343  0174D4  0012               	return	
 11344  0174D6                     
 11345                           ;LCD.c: 272: {
 11346                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 11347  0174D6  0E01               	movlw	1
 11348  0174D8  0100               	movlb	0	; () banked
 11349  0174DA  6F63               	movwf	LCD_Write@mode& (0+255),b
 11350  0174DC  0E08               	movlw	8
 11351  0174DE  EC74  F0C6         	call	_LCD_Write
 11352                           
 11353                           ;LCD.c: 274: w = 128;
 11354  0174E2  0E80               	movlw	128
 11355  0174E4  6E50               	movwf	_w,c
 11356                           
 11357                           ;LCD.c: 275: l = 128;
 11358  0174E6  0E80               	movlw	128
 11359  0174E8  6E4F               	movwf	_l,c
 11360                           
 11361                           ;LCD.c: 276: break;
 11362  0174EA  0012               	return	
 11363  0174EC                     
 11364                           ;LCD.c: 279: {
 11365                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 11366  0174EC  0E01               	movlw	1
 11367  0174EE  0100               	movlb	0	; () banked
 11368  0174F0  6F63               	movwf	LCD_Write@mode& (0+255),b
 11369  0174F2  0E68               	movlw	104
 11370  0174F4  EC74  F0C6         	call	_LCD_Write
 11371                           
 11372                           ;LCD.c: 281: w = 128;
 11373  0174F8  0E80               	movlw	128
 11374  0174FA  6E50               	movwf	_w,c
 11375                           
 11376                           ;LCD.c: 282: l = 128;
 11377  0174FC  0E80               	movlw	128
 11378  0174FE  6E4F               	movwf	_l,c
 11379                           
 11380                           ;LCD.c: 284: }
 11381                           ;LCD.c: 285: }
 11382                           
 11383                           ;LCD.c: 283: break;
 11384  017500  0012               	return	
 11385  017502                     l117:
 11386  017502  0100               	movlb	0	; () banked
 11387  017504  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 11388                           
 11389                           ; Switch size 1, requested type "space"
 11390                           ; Number of cases is 4, Range of values is 0 to 3
 11391                           ; switch strategies available:
 11392                           ; Name         Instructions Cycles
 11393                           ; simple_byte           13     7 (average)
 11394                           ;	Chosen strategy is simple_byte
 11395  017506  0A00               	xorlw	0	; case 0
 11396  017508  B4D8               	btfsc	status,2,c
 11397  01750A  D7D0               	goto	l118
 11398  01750C  0A01               	xorlw	1	; case 1
 11399  01750E  B4D8               	btfsc	status,2,c
 11400  017510  D7D7               	goto	l120
 11401  017512  0A03               	xorlw	3	; case 2
 11402  017514  B4D8               	btfsc	status,2,c
 11403  017516  D7DF               	goto	l121
 11404  017518  0A01               	xorlw	1	; case 3
 11405  01751A  A4D8               	btfss	status,2,c
 11406  01751C  0012               	return	
 11407  01751E  D7E6               	goto	l122
 11408  017520                     __end_of_Set_Rotation:
 11409                           	opt stack 0
 11410                           tosu	equ	0xFFF
 11411                           tosh	equ	0xFFE
 11412                           tosl	equ	0xFFD
 11413                           pclath	equ	0xFFA
 11414                           tblptru	equ	0xFF8
 11415                           tblptrh	equ	0xFF7
 11416                           tblptrl	equ	0xFF6
 11417                           tablat	equ	0xFF5
 11418                           intcon	equ	0xFF2
 11419                           postinc0	equ	0xFEE
 11420                           wreg	equ	0xFE8
 11421                           postdec1	equ	0xFE5
 11422                           fsr1h	equ	0xFE2
 11423                           fsr1l	equ	0xFE1
 11424                           indf2	equ	0xFDF
 11425                           postinc2	equ	0xFDE
 11426                           postdec2	equ	0xFDD
 11427                           plusw2	equ	0xFDB
 11428                           fsr2h	equ	0xFDA
 11429                           fsr2l	equ	0xFD9
 11430                           status	equ	0xFD8
 11431                           
 11432 ;; *************** function _LCD_Fill *****************
 11433 ;; Defined at:
 11434 ;;		line 287 in file "Library/LCD.c"
 11435 ;; Parameters:    Size  Location     Type
 11436 ;;  pColour         2    9[BANK0 ] unsigned short 
 11437 ;; Auto vars:     Size  Location     Type
 11438 ;;  j               1   12[BANK0 ] unsigned char 
 11439 ;;  i               1   11[BANK0 ] unsigned char 
 11440 ;; Return value:  Size  Location     Type
 11441 ;;                  1    wreg      void 
 11442 ;; Registers used:
 11443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11444 ;; Tracked objects:
 11445 ;;		On entry : 0/0
 11446 ;;		On exit  : 0/0
 11447 ;;		Unchanged: 0/0
 11448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11449 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11450 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11452 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11453 ;;Total ram usage:        4 bytes
 11454 ;; Hardware stack levels used:    1
 11455 ;; Hardware stack levels required when called:   10
 11456 ;; This function calls:
 11457 ;;		_LCD_Word_Write
 11458 ;;		_Set_Addr_Window
 11459 ;; This function is called by:
 11460 ;;		_LCD_Init
 11461 ;; This function uses a non-reentrant model
 11462 ;;
 11463                           
 11464                           	psect	text36
 11465  018608                     __ptext36:
 11466                           	opt stack 0
 11467  018608                     _LCD_Fill:
 11468                           	opt stack 19
 11469                           
 11470                           ;LCD.c: 296: UINT8 i = 0x00;
 11471                           
 11472                           ;incstack = 0
 11473  018608  0E00               	movlw	0
 11474  01860A  0100               	movlb	0	; () banked
 11475  01860C  6F6B               	movwf	LCD_Fill@i& (0+255),b
 11476                           
 11477                           ;LCD.c: 297: UINT8 j = 0x00;
 11478  01860E  0E00               	movlw	0
 11479  018610  6F6C               	movwf	LCD_Fill@j& (0+255),b
 11480                           
 11481                           ; BSR set to: 0
 11482                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 11483  018612  0E00               	movlw	0
 11484  018614  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 11485  018616  0450               	decf	_w,w,c
 11486  018618  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 11487  01861A  044F               	decf	_l,w,c
 11488  01861C  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 11489  01861E  0E00               	movlw	0
 11490  018620  EC67  F0B9         	call	_Set_Addr_Window
 11491                           
 11492                           ;LCD.c: 299: for (j = l; j > 0; j--)
 11493  018624  C04F  F06C         	movff	_l,LCD_Fill@j
 11494  018628  0100               	movlb	0	; () banked
 11495  01862A  516C               	movf	LCD_Fill@j& (0+255),w,b
 11496  01862C  B4D8               	btfsc	status,2,c
 11497  01862E  0012               	return	
 11498                           
 11499                           ; BSR set to: 0
 11500                           ;LCD.c: 300: for (i = w; i > 0; i--)
 11501                           
 11502                           ; BSR set to: 0
 11503  018630  C050  F06B         	movff	_w,LCD_Fill@i
 11504  018634                     l16797:
 11505                           
 11506                           ; BSR set to: 0
 11507  018634  516B               	movf	LCD_Fill@i& (0+255),w,b
 11508  018636  B4D8               	btfsc	status,2,c
 11509  018638  D009               	goto	u14310
 11510                           
 11511                           ; BSR set to: 0
 11512                           ;LCD.c: 301: LCD_Word_Write(pColour);
 11513                           
 11514                           ; BSR set to: 0
 11515                           
 11516                           ; BSR set to: 0
 11517  01863A  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 11518  01863E  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 11519  018642  ECBF  F0C6         	call	_LCD_Word_Write	;wreg free
 11520  018646  0100               	movlb	0	; () banked
 11521  018648  076B               	decf	LCD_Fill@i& (0+255),f,b
 11522  01864A  D7F4               	goto	l16797
 11523  01864C                     u14310:
 11524                           
 11525                           ; BSR set to: 0
 11526                           
 11527                           ; BSR set to: 0
 11528  01864C  076C               	decf	LCD_Fill@j& (0+255),f,b
 11529  01864E  D7ED               	goto	L14
 11530  018650                     __end_of_LCD_Fill:
 11531                           	opt stack 0
 11532                           tosu	equ	0xFFF
 11533                           tosh	equ	0xFFE
 11534                           tosl	equ	0xFFD
 11535                           pclath	equ	0xFFA
 11536                           tblptru	equ	0xFF8
 11537                           tblptrh	equ	0xFF7
 11538                           tblptrl	equ	0xFF6
 11539                           tablat	equ	0xFF5
 11540                           intcon	equ	0xFF2
 11541                           postinc0	equ	0xFEE
 11542                           wreg	equ	0xFE8
 11543                           postdec1	equ	0xFE5
 11544                           fsr1h	equ	0xFE2
 11545                           fsr1l	equ	0xFE1
 11546                           indf2	equ	0xFDF
 11547                           postinc2	equ	0xFDE
 11548                           postdec2	equ	0xFDD
 11549                           plusw2	equ	0xFDB
 11550                           fsr2h	equ	0xFDA
 11551                           fsr2l	equ	0xFD9
 11552                           status	equ	0xFD8
 11553                           
 11554 ;; *************** function _Configure_GPIOs *****************
 11555 ;; Defined at:
 11556 ;;		line 46 in file "Library/LCD.c"
 11557 ;; Parameters:    Size  Location     Type
 11558 ;;		None
 11559 ;; Auto vars:     Size  Location     Type
 11560 ;;		None
 11561 ;; Return value:  Size  Location     Type
 11562 ;;                  1    wreg      void 
 11563 ;; Registers used:
 11564 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11565 ;; Tracked objects:
 11566 ;;		On entry : 0/0
 11567 ;;		On exit  : 0/0
 11568 ;;		Unchanged: 0/0
 11569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11574 ;;Total ram usage:        0 bytes
 11575 ;; Hardware stack levels used:    1
 11576 ;; Hardware stack levels required when called:   14
 11577 ;; This function calls:
 11578 ;;		_LCD_Reset
 11579 ;;		_Port_SetPinType
 11580 ;;		_SPI_Init
 11581 ;;		_SPI_MaxSpeed
 11582 ;; This function is called by:
 11583 ;;		_LCD_Init
 11584 ;; This function uses a non-reentrant model
 11585 ;;
 11586                           
 11587                           	psect	text37
 11588  018014                     __ptext37:
 11589                           	opt stack 0
 11590  018014                     _Configure_GPIOs:
 11591                           	opt stack 15
 11592                           
 11593                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 11594                           
 11595                           ; BSR set to: 0
 11596                           ;incstack = 0
 11597  018014  0E83               	movlw	low _PortF
 11598  018016  0100               	movlb	0	; () banked
 11599  018018  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 11600  01801A  0E01               	movlw	high _PortF
 11601  01801C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11602  01801E  0E07               	movlw	7
 11603  018020  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 11604  018022  0E03               	movlw	3
 11605  018024  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 11606  018026  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
 11607                           
 11608                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 11609  01802A  0E83               	movlw	low _PortF
 11610  01802C  0100               	movlb	0	; () banked
 11611  01802E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 11612  018030  0E01               	movlw	high _PortF
 11613  018032  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11614  018034  0E06               	movlw	6
 11615  018036  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 11616  018038  0E03               	movlw	3
 11617  01803A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 11618  01803C  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
 11619                           
 11620                           ;LCD.c: 55: LCD_Reset();
 11621  018040  EC62  F0C1         	call	_LCD_Reset	;wreg free
 11622                           
 11623                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 11624  018044  0EC0               	movlw	192
 11625  018046  0100               	movlb	0	; () banked
 11626  018048  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 11627  01804A  0EC6               	movlw	198
 11628  01804C  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 11629  01804E  0E2D               	movlw	45
 11630  018050  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 11631  018052  0E00               	movlw	0
 11632  018054  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 11633  018056  0E01               	movlw	1
 11634  018058  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 11635  01805A  0E01               	movlw	1
 11636  01805C  6F92               	movwf	SPI_Init@pMode& (0+255),b
 11637  01805E  ECF2  F098         	call	_SPI_Init	;wreg free
 11638                           
 11639                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 11640  018062  0ED3               	movlw	low _SPI2
 11641  018064  0100               	movlb	0	; () banked
 11642  018066  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 11643  018068  0E02               	movlw	high _SPI2
 11644  01806A  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 11645  01806C  ECA8  F0BE         	call	_SPI_MaxSpeed	;wreg free
 11646  018070  0012               	return		;funcret
 11647  018072                     __end_of_Configure_GPIOs:
 11648                           	opt stack 0
 11649                           tosu	equ	0xFFF
 11650                           tosh	equ	0xFFE
 11651                           tosl	equ	0xFFD
 11652                           pclath	equ	0xFFA
 11653                           tblptru	equ	0xFF8
 11654                           tblptrh	equ	0xFF7
 11655                           tblptrl	equ	0xFF6
 11656                           tablat	equ	0xFF5
 11657                           intcon	equ	0xFF2
 11658                           postinc0	equ	0xFEE
 11659                           wreg	equ	0xFE8
 11660                           postdec1	equ	0xFE5
 11661                           fsr1h	equ	0xFE2
 11662                           fsr1l	equ	0xFE1
 11663                           indf2	equ	0xFDF
 11664                           postinc2	equ	0xFDE
 11665                           postdec2	equ	0xFDD
 11666                           plusw2	equ	0xFDB
 11667                           fsr2h	equ	0xFDA
 11668                           fsr2l	equ	0xFD9
 11669                           status	equ	0xFD8
 11670                           
 11671 ;; *************** function _SPI_MaxSpeed *****************
 11672 ;; Defined at:
 11673 ;;		line 201 in file "Library/SPI.c"
 11674 ;; Parameters:    Size  Location     Type
 11675 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 11676 ;;		 -> SPI2(11), 
 11677 ;; Auto vars:     Size  Location     Type
 11678 ;;		None
 11679 ;; Return value:  Size  Location     Type
 11680 ;;                  1    wreg      void 
 11681 ;; Registers used:
 11682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11683 ;; Tracked objects:
 11684 ;;		On entry : 0/0
 11685 ;;		On exit  : 0/0
 11686 ;;		Unchanged: 0/0
 11687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11688 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11691 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11692 ;;Total ram usage:        2 bytes
 11693 ;; Hardware stack levels used:    1
 11694 ;; Hardware stack levels required when called:    9
 11695 ;; This function calls:
 11696 ;;		_Byte_SetBit
 11697 ;;		_Byte_SetQuad
 11698 ;; This function is called by:
 11699 ;;		_Configure_GPIOs
 11700 ;; This function uses a non-reentrant model
 11701 ;;
 11702                           
 11703                           	psect	text38
 11704  017D50                     __ptext38:
 11705                           	opt stack 0
 11706  017D50                     _SPI_MaxSpeed:
 11707                           	opt stack 19
 11708                           
 11709                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 11710                           
 11711                           ;incstack = 0
 11712  017D50  0100               	movlb	0	; () banked
 11713  017D52  EE20 F006          	lfsr	2,6
 11714  017D56  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 11715  017D58  26D9               	addwf	fsr2l,f,c
 11716  017D5A  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 11717  017D5C  22DA               	addwfc	fsr2h,f,c
 11718  017D5E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 11719  017D62  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 11720  017D66  0E05               	movlw	5
 11721  017D68  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 11722  017D6A  0E00               	movlw	0
 11723  017D6C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 11724  017D6E  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 11725                           
 11726                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 11727  017D72  0100               	movlb	0	; () banked
 11728  017D74  EE20 F006          	lfsr	2,6
 11729  017D78  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 11730  017D7A  26D9               	addwf	fsr2l,f,c
 11731  017D7C  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 11732  017D7E  22DA               	addwfc	fsr2h,f,c
 11733  017D80  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 11734  017D84  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 11735  017D88  0E00               	movlw	0
 11736  017D8A  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 11737  017D8C  0E00               	movlw	0
 11738  017D8E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 11739  017D90  EC54  F0C6         	call	_Byte_SetQuad	;wreg free
 11740                           
 11741                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 11742  017D94  0100               	movlb	0	; () banked
 11743  017D96  EE20 F006          	lfsr	2,6
 11744  017D9A  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 11745  017D9C  26D9               	addwf	fsr2l,f,c
 11746  017D9E  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 11747  017DA0  22DA               	addwfc	fsr2h,f,c
 11748  017DA2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 11749  017DA6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 11750  017DAA  0E05               	movlw	5
 11751  017DAC  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 11752  017DAE  0E01               	movlw	1
 11753  017DB0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 11754  017DB2  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 11755  017DB6  0012               	return		;funcret
 11756  017DB8                     __end_of_SPI_MaxSpeed:
 11757                           	opt stack 0
 11758                           tosu	equ	0xFFF
 11759                           tosh	equ	0xFFE
 11760                           tosl	equ	0xFFD
 11761                           pclath	equ	0xFFA
 11762                           tblptru	equ	0xFF8
 11763                           tblptrh	equ	0xFF7
 11764                           tblptrl	equ	0xFF6
 11765                           tablat	equ	0xFF5
 11766                           intcon	equ	0xFF2
 11767                           postinc0	equ	0xFEE
 11768                           wreg	equ	0xFE8
 11769                           postdec1	equ	0xFE5
 11770                           fsr1h	equ	0xFE2
 11771                           fsr1l	equ	0xFE1
 11772                           indf2	equ	0xFDF
 11773                           postinc2	equ	0xFDE
 11774                           postdec2	equ	0xFDD
 11775                           plusw2	equ	0xFDB
 11776                           fsr2h	equ	0xFDA
 11777                           fsr2l	equ	0xFD9
 11778                           status	equ	0xFD8
 11779                           
 11780 ;; *************** function _LCD_Reset *****************
 11781 ;; Defined at:
 11782 ;;		line 95 in file "Library/LCD.c"
 11783 ;; Parameters:    Size  Location     Type
 11784 ;;		None
 11785 ;; Auto vars:     Size  Location     Type
 11786 ;;		None
 11787 ;; Return value:  Size  Location     Type
 11788 ;;                  1    wreg      void 
 11789 ;; Registers used:
 11790 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11791 ;; Tracked objects:
 11792 ;;		On entry : 0/0
 11793 ;;		On exit  : 0/0
 11794 ;;		Unchanged: 0/0
 11795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11800 ;;Total ram usage:        0 bytes
 11801 ;; Hardware stack levels used:    1
 11802 ;; Hardware stack levels required when called:   13
 11803 ;; This function calls:
 11804 ;;		_LED_Toggle
 11805 ;;		_Reset_High
 11806 ;;		_Reset_Low
 11807 ;;		_delay_ms
 11808 ;; This function is called by:
 11809 ;;		_Configure_GPIOs
 11810 ;; This function uses a non-reentrant model
 11811 ;;
 11812                           
 11813                           	psect	text39
 11814  0182C4                     __ptext39:
 11815                           	opt stack 0
 11816  0182C4                     _LCD_Reset:
 11817                           	opt stack 15
 11818                           
 11819                           ;LCD.c: 97: Reset_High();
 11820                           
 11821                           ;incstack = 0
 11822  0182C4  ECE5  F0C6         	call	_Reset_High	;wreg free
 11823                           
 11824                           ;LCD.c: 98: LED_Toggle(eLED2);
 11825  0182C8  0E01               	movlw	1
 11826  0182CA  ECD2  F0C3         	call	_LED_Toggle
 11827                           
 11828                           ;LCD.c: 99: delay_ms(0x80);
 11829  0182CE  0E00               	movlw	0
 11830  0182D0  0100               	movlb	0	; () banked
 11831  0182D2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 11832  0182D4  0E80               	movlw	128
 11833  0182D6  6F60               	movwf	delay_ms@ms& (0+255),b
 11834  0182D8  EC39  F0C0         	call	_delay_ms	;wreg free
 11835                           
 11836                           ;LCD.c: 100: LED_Toggle(eLED2);
 11837  0182DC  0E01               	movlw	1
 11838  0182DE  ECD2  F0C3         	call	_LED_Toggle
 11839                           
 11840                           ;LCD.c: 101: Reset_Low();
 11841  0182E2  ECD9  F0C6         	call	_Reset_Low	;wreg free
 11842                           
 11843                           ;LCD.c: 102: delay_ms(0x80);
 11844  0182E6  0E00               	movlw	0
 11845  0182E8  0100               	movlb	0	; () banked
 11846  0182EA  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 11847  0182EC  0E80               	movlw	128
 11848  0182EE  6F60               	movwf	delay_ms@ms& (0+255),b
 11849  0182F0  EC39  F0C0         	call	_delay_ms	;wreg free
 11850                           
 11851                           ;LCD.c: 103: LED_Toggle(eLED2);
 11852  0182F4  0E01               	movlw	1
 11853  0182F6  ECD2  F0C3         	call	_LED_Toggle
 11854                           
 11855                           ;LCD.c: 104: Reset_High();
 11856  0182FA  ECE5  F0C6         	call	_Reset_High	;wreg free
 11857                           
 11858                           ;LCD.c: 105: delay_ms(0x80);
 11859  0182FE  0E00               	movlw	0
 11860  018300  0100               	movlb	0	; () banked
 11861  018302  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 11862  018304  0E80               	movlw	128
 11863  018306  6F60               	movwf	delay_ms@ms& (0+255),b
 11864  018308  EC39  F0C0         	call	_delay_ms	;wreg free
 11865                           
 11866                           ;LCD.c: 106: LED_Toggle(eLED2);
 11867  01830C  0E01               	movlw	1
 11868  01830E  ECD2  F0C3         	call	_LED_Toggle
 11869  018312  0012               	return		;funcret
 11870  018314                     __end_of_LCD_Reset:
 11871                           	opt stack 0
 11872                           tosu	equ	0xFFF
 11873                           tosh	equ	0xFFE
 11874                           tosl	equ	0xFFD
 11875                           pclath	equ	0xFFA
 11876                           tblptru	equ	0xFF8
 11877                           tblptrh	equ	0xFF7
 11878                           tblptrl	equ	0xFF6
 11879                           tablat	equ	0xFF5
 11880                           intcon	equ	0xFF2
 11881                           postinc0	equ	0xFEE
 11882                           wreg	equ	0xFE8
 11883                           postdec1	equ	0xFE5
 11884                           fsr1h	equ	0xFE2
 11885                           fsr1l	equ	0xFE1
 11886                           indf2	equ	0xFDF
 11887                           postinc2	equ	0xFDE
 11888                           postdec2	equ	0xFDD
 11889                           plusw2	equ	0xFDB
 11890                           fsr2h	equ	0xFDA
 11891                           fsr2l	equ	0xFD9
 11892                           status	equ	0xFD8
 11893                           
 11894 ;; *************** function _Reset_Low *****************
 11895 ;; Defined at:
 11896 ;;		line 32 in file "Library/LCD.c"
 11897 ;; Parameters:    Size  Location     Type
 11898 ;;		None
 11899 ;; Auto vars:     Size  Location     Type
 11900 ;;		None
 11901 ;; Return value:  Size  Location     Type
 11902 ;;                  1    wreg      void 
 11903 ;; Registers used:
 11904 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11905 ;; Tracked objects:
 11906 ;;		On entry : 0/0
 11907 ;;		On exit  : 0/0
 11908 ;;		Unchanged: 0/0
 11909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11914 ;;Total ram usage:        0 bytes
 11915 ;; Hardware stack levels used:    1
 11916 ;; Hardware stack levels required when called:   11
 11917 ;; This function calls:
 11918 ;;		_Port_SetPin
 11919 ;; This function is called by:
 11920 ;;		_LCD_Reset
 11921 ;; This function uses a non-reentrant model
 11922 ;;
 11923                           
 11924                           	psect	text40
 11925  018DB2                     __ptext40:
 11926                           	opt stack 0
 11927  018DB2                     _Reset_Low:
 11928                           	opt stack 16
 11929                           
 11930                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 11931                           
 11932                           ;incstack = 0
 11933  018DB2  0E83               	movlw	low _PortF
 11934  018DB4  0100               	movlb	0	; () banked
 11935  018DB6  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 11936  018DB8  0E01               	movlw	high _PortF
 11937  018DBA  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 11938  018DBC  0E06               	movlw	6
 11939  018DBE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 11940  018DC0  0E01               	movlw	1
 11941  018DC2  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 11942  018DC4  EC1B  F0B7         	call	_Port_SetPin	;wreg free
 11943  018DC8  0012               	return		;funcret
 11944  018DCA                     __end_of_Reset_Low:
 11945                           	opt stack 0
 11946                           tosu	equ	0xFFF
 11947                           tosh	equ	0xFFE
 11948                           tosl	equ	0xFFD
 11949                           pclath	equ	0xFFA
 11950                           tblptru	equ	0xFF8
 11951                           tblptrh	equ	0xFF7
 11952                           tblptrl	equ	0xFF6
 11953                           tablat	equ	0xFF5
 11954                           intcon	equ	0xFF2
 11955                           postinc0	equ	0xFEE
 11956                           wreg	equ	0xFE8
 11957                           postdec1	equ	0xFE5
 11958                           fsr1h	equ	0xFE2
 11959                           fsr1l	equ	0xFE1
 11960                           indf2	equ	0xFDF
 11961                           postinc2	equ	0xFDE
 11962                           postdec2	equ	0xFDD
 11963                           plusw2	equ	0xFDB
 11964                           fsr2h	equ	0xFDA
 11965                           fsr2l	equ	0xFD9
 11966                           status	equ	0xFD8
 11967                           
 11968 ;; *************** function _Reset_High *****************
 11969 ;; Defined at:
 11970 ;;		line 36 in file "Library/LCD.c"
 11971 ;; Parameters:    Size  Location     Type
 11972 ;;		None
 11973 ;; Auto vars:     Size  Location     Type
 11974 ;;		None
 11975 ;; Return value:  Size  Location     Type
 11976 ;;                  1    wreg      void 
 11977 ;; Registers used:
 11978 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11979 ;; Tracked objects:
 11980 ;;		On entry : 0/0
 11981 ;;		On exit  : 0/0
 11982 ;;		Unchanged: 0/0
 11983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11988 ;;Total ram usage:        0 bytes
 11989 ;; Hardware stack levels used:    1
 11990 ;; Hardware stack levels required when called:   11
 11991 ;; This function calls:
 11992 ;;		_Port_SetPin
 11993 ;; This function is called by:
 11994 ;;		_LCD_Reset
 11995 ;; This function uses a non-reentrant model
 11996 ;;
 11997                           
 11998                           	psect	text41
 11999  018DCA                     __ptext41:
 12000                           	opt stack 0
 12001  018DCA                     _Reset_High:
 12002                           	opt stack 16
 12003                           
 12004                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 12005                           
 12006                           ;incstack = 0
 12007  018DCA  0E83               	movlw	low _PortF
 12008  018DCC  0100               	movlb	0	; () banked
 12009  018DCE  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12010  018DD0  0E01               	movlw	high _PortF
 12011  018DD2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12012  018DD4  0E06               	movlw	6
 12013  018DD6  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12014  018DD8  0E00               	movlw	0
 12015  018DDA  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12016  018DDC  EC1B  F0B7         	call	_Port_SetPin	;wreg free
 12017  018DE0  0012               	return		;funcret
 12018  018DE2                     __end_of_Reset_High:
 12019                           	opt stack 0
 12020                           tosu	equ	0xFFF
 12021                           tosh	equ	0xFFE
 12022                           tosl	equ	0xFFD
 12023                           pclath	equ	0xFFA
 12024                           tblptru	equ	0xFF8
 12025                           tblptrh	equ	0xFF7
 12026                           tblptrl	equ	0xFF6
 12027                           tablat	equ	0xFF5
 12028                           intcon	equ	0xFF2
 12029                           postinc0	equ	0xFEE
 12030                           wreg	equ	0xFE8
 12031                           postdec1	equ	0xFE5
 12032                           fsr1h	equ	0xFE2
 12033                           fsr1l	equ	0xFE1
 12034                           indf2	equ	0xFDF
 12035                           postinc2	equ	0xFDE
 12036                           postdec2	equ	0xFDD
 12037                           plusw2	equ	0xFDB
 12038                           fsr2h	equ	0xFDA
 12039                           fsr2l	equ	0xFD9
 12040                           status	equ	0xFD8
 12041                           
 12042 ;; *************** function _Init_Timer0 *****************
 12043 ;; Defined at:
 12044 ;;		line 67 in file "main.c"
 12045 ;; Parameters:    Size  Location     Type
 12046 ;;		None
 12047 ;; Auto vars:     Size  Location     Type
 12048 ;;		None
 12049 ;; Return value:  Size  Location     Type
 12050 ;;                  2  2150[None  ] int 
 12051 ;; Registers used:
 12052 ;;		None
 12053 ;; Tracked objects:
 12054 ;;		On entry : 0/0
 12055 ;;		On exit  : 0/0
 12056 ;;		Unchanged: 0/0
 12057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12062 ;;Total ram usage:        0 bytes
 12063 ;; Hardware stack levels used:    1
 12064 ;; Hardware stack levels required when called:    7
 12065 ;; This function calls:
 12066 ;;		Nothing
 12067 ;; This function is called by:
 12068 ;;		_main
 12069 ;; This function uses a non-reentrant model
 12070 ;;
 12071                           
 12072                           	psect	text42
 12073  018DE2                     __ptext42:
 12074                           	opt stack 0
 12075  018DE2                     _Init_Timer0:
 12076                           	opt stack 23
 12077                           
 12078                           ;main.c: 68: T0CONbits.TMR0ON = 1;
 12079                           
 12080                           ;incstack = 0
 12081  018DE2  8ED5               	bsf	4053,7,c	;volatile
 12082                           
 12083                           ;main.c: 69: T0CONbits.T08BIT = 1;
 12084  018DE4  8CD5               	bsf	4053,6,c	;volatile
 12085                           
 12086                           ;main.c: 70: T0CONbits.T0CS = 0;
 12087  018DE6  9AD5               	bcf	4053,5,c	;volatile
 12088                           
 12089                           ;main.c: 71: T0CONbits.T0SE = 0;
 12090  018DE8  98D5               	bcf	4053,4,c	;volatile
 12091                           
 12092                           ;main.c: 72: T0CONbits.PSA = 0;
 12093  018DEA  96D5               	bcf	4053,3,c	;volatile
 12094                           
 12095                           ;main.c: 73: T0CONbits.T0PS2 = 1;
 12096  018DEC  84D5               	bsf	4053,2,c	;volatile
 12097                           
 12098                           ;main.c: 74: T0CONbits.T0PS1 = 1;
 12099  018DEE  82D5               	bsf	4053,1,c	;volatile
 12100                           
 12101                           ;main.c: 75: T0CONbits.T0PS0 = 1;
 12102  018DF0  80D5               	bsf	4053,0,c	;volatile
 12103                           
 12104                           ;main.c: 77: INTCONbits.TMR0IE = 1;
 12105  018DF2  8AF2               	bsf	intcon,5,c	;volatile
 12106                           
 12107                           ;main.c: 78: INTCONbits.PEIE = 1;
 12108  018DF4  8CF2               	bsf	intcon,6,c	;volatile
 12109                           
 12110                           ;main.c: 79: INTCONbits.GIE = 1;
 12111  018DF6  8EF2               	bsf	intcon,7,c	;volatile
 12112  018DF8  0012               	return		;funcret
 12113  018DFA                     __end_of_Init_Timer0:
 12114                           	opt stack 0
 12115                           tosu	equ	0xFFF
 12116                           tosh	equ	0xFFE
 12117                           tosl	equ	0xFFD
 12118                           pclath	equ	0xFFA
 12119                           tblptru	equ	0xFF8
 12120                           tblptrh	equ	0xFF7
 12121                           tblptrl	equ	0xFF6
 12122                           tablat	equ	0xFF5
 12123                           intcon	equ	0xFF2
 12124                           postinc0	equ	0xFEE
 12125                           wreg	equ	0xFE8
 12126                           postdec1	equ	0xFE5
 12127                           fsr1h	equ	0xFE2
 12128                           fsr1l	equ	0xFE1
 12129                           indf2	equ	0xFDF
 12130                           postinc2	equ	0xFDE
 12131                           postdec2	equ	0xFDD
 12132                           plusw2	equ	0xFDB
 12133                           fsr2h	equ	0xFDA
 12134                           fsr2l	equ	0xFD9
 12135                           status	equ	0xFD8
 12136                           
 12137 ;; *************** function _InitSerialCommunication *****************
 12138 ;; Defined at:
 12139 ;;		line 83 in file "main.c"
 12140 ;; Parameters:    Size  Location     Type
 12141 ;;		None
 12142 ;; Auto vars:     Size  Location     Type
 12143 ;;		None
 12144 ;; Return value:  Size  Location     Type
 12145 ;;                  1    wreg      void 
 12146 ;; Registers used:
 12147 ;;		wreg, status,2
 12148 ;; Tracked objects:
 12149 ;;		On entry : 0/0
 12150 ;;		On exit  : 0/0
 12151 ;;		Unchanged: 0/0
 12152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12157 ;;Total ram usage:        0 bytes
 12158 ;; Hardware stack levels used:    1
 12159 ;; Hardware stack levels required when called:    7
 12160 ;; This function calls:
 12161 ;;		Nothing
 12162 ;; This function is called by:
 12163 ;;		_main
 12164 ;; This function uses a non-reentrant model
 12165 ;;
 12166                           
 12167                           	psect	text43
 12168  018D28                     __ptext43:
 12169                           	opt stack 0
 12170  018D28                     _InitSerialCommunication:
 12171                           	opt stack 23
 12172                           
 12173                           ;main.c: 85: TRISCbits.TRISC6 = 0;
 12174                           
 12175                           ;incstack = 0
 12176  018D28  9C94               	bcf	3988,6,c	;volatile
 12177                           
 12178                           ;main.c: 86: TRISCbits.TRISC7 = 1;
 12179  018D2A  8E94               	bsf	3988,7,c	;volatile
 12180                           
 12181                           ;main.c: 88: TXSTA1 = 0b00100100;
 12182  018D2C  0E24               	movlw	36
 12183  018D2E  6EAD               	movwf	4013,c	;volatile
 12184                           
 12185                           ;main.c: 89: RCSTA1 = 0b10010000;
 12186  018D30  0E90               	movlw	144
 12187  018D32  6EAC               	movwf	4012,c	;volatile
 12188                           
 12189                           ;main.c: 91: BAUDCON1bits.DTRXP = 0;
 12190  018D34  9A7E               	bcf	3966,5,c	;volatile
 12191                           
 12192                           ;main.c: 92: BAUDCON1bits.SCKP = 0;
 12193  018D36  987E               	bcf	3966,4,c	;volatile
 12194                           
 12195                           ;main.c: 93: BAUDCON1bits.WUE = 0;
 12196  018D38  927E               	bcf	3966,1,c	;volatile
 12197                           
 12198                           ;main.c: 94: BAUDCON1bits.ABDEN = 0;
 12199  018D3A  907E               	bcf	3966,0,c	;volatile
 12200                           
 12201                           ;main.c: 97: TXSTA1bits.BRGH = 1;
 12202  018D3C  84AD               	bsf	4013,2,c	;volatile
 12203                           
 12204                           ;main.c: 98: BAUDCON1bits.BRG16 = 0;
 12205  018D3E  967E               	bcf	3966,3,c	;volatile
 12206                           
 12207                           ;main.c: 99: SPBRG1 = 51;
 12208  018D40  0E33               	movlw	51
 12209  018D42  6EB0               	movwf	4016,c	;volatile
 12210  018D44  0012               	return		;funcret
 12211  018D46                     __end_of_InitSerialCommunication:
 12212                           	opt stack 0
 12213                           tosu	equ	0xFFF
 12214                           tosh	equ	0xFFE
 12215                           tosl	equ	0xFFD
 12216                           pclath	equ	0xFFA
 12217                           tblptru	equ	0xFF8
 12218                           tblptrh	equ	0xFF7
 12219                           tblptrl	equ	0xFF6
 12220                           tablat	equ	0xFF5
 12221                           intcon	equ	0xFF2
 12222                           postinc0	equ	0xFEE
 12223                           wreg	equ	0xFE8
 12224                           postdec1	equ	0xFE5
 12225                           fsr1h	equ	0xFE2
 12226                           fsr1l	equ	0xFE1
 12227                           indf2	equ	0xFDF
 12228                           postinc2	equ	0xFDE
 12229                           postdec2	equ	0xFDD
 12230                           plusw2	equ	0xFDB
 12231                           fsr2h	equ	0xFDA
 12232                           fsr2l	equ	0xFD9
 12233                           status	equ	0xFD8
 12234                           
 12235 ;; *************** function _InitADC *****************
 12236 ;; Defined at:
 12237 ;;		line 177 in file "dans.c"
 12238 ;; Parameters:    Size  Location     Type
 12239 ;;		None
 12240 ;; Auto vars:     Size  Location     Type
 12241 ;;		None
 12242 ;; Return value:  Size  Location     Type
 12243 ;;                  1    wreg      void 
 12244 ;; Registers used:
 12245 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12246 ;; Tracked objects:
 12247 ;;		On entry : 0/0
 12248 ;;		On exit  : 0/0
 12249 ;;		Unchanged: 0/0
 12250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12254 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12255 ;;Total ram usage:        1 bytes
 12256 ;; Hardware stack levels used:    1
 12257 ;; Hardware stack levels required when called:    7
 12258 ;; This function calls:
 12259 ;;		Nothing
 12260 ;; This function is called by:
 12261 ;;		_main
 12262 ;; This function uses a non-reentrant model
 12263 ;;
 12264                           
 12265                           	psect	text44
 12266  018400                     __ptext44:
 12267                           	opt stack 0
 12268  018400                     _InitADC:
 12269                           	opt stack 23
 12270                           
 12271                           ;dans.c: 179: ADCON1 = 0b10101101;
 12272                           
 12273                           ;incstack = 0
 12274  018400  0EAD               	movlw	173
 12275  018402  6EC1               	movwf	4033,c	;volatile
 12276                           
 12277                           ;dans.c: 180: for (thisReading = 0; thisReading < numReadings; thisReading++) {
 12278  018404  0E00               	movlw	0
 12279  018406  0101               	movlb	1	; () banked
 12280  018408  6F47               	movwf	(_thisReading+1)& (0+255),b
 12281  01840A  0E00               	movlw	0
 12282  01840C  6F46               	movwf	_thisReading& (0+255),b
 12283  01840E  D010               	goto	l2369
 12284  018410                     
 12285                           ;dans.c: 181: readings[thisReading] = 0;
 12286                           
 12287                           ; BSR set to: 1
 12288  018410  90D8               	bcf	status,0,c
 12289  018412  0101               	movlb	1	; () banked
 12290  018414  3546               	rlcf	_thisReading& (0+255),w,b
 12291  018416  6ED9               	movwf	fsr2l,c
 12292  018418  3547               	rlcf	(_thisReading+1)& (0+255),w,b
 12293  01841A  6EDA               	movwf	fsr2h,c
 12294  01841C  0E46               	movlw	low _readings
 12295  01841E  26D9               	addwf	fsr2l,f,c
 12296  018420  0E03               	movlw	high _readings
 12297  018422  22DA               	addwfc	fsr2h,f,c
 12298  018424  0E00               	movlw	0
 12299  018426  6EDE               	movwf	postinc2,c
 12300  018428  0E00               	movlw	0
 12301  01842A  6EDD               	movwf	postdec2,c
 12302                           
 12303                           ; BSR set to: 1
 12304  01842C  4B46               	infsnz	_thisReading& (0+255),f,b
 12305  01842E  2B47               	incf	(_thisReading+1)& (0+255),f,b
 12306  018430                     l2369:
 12307                           
 12308                           ; BSR set to: 1
 12309                           
 12310                           ; BSR set to: 1
 12311  018430  51F7               	movf	_numReadings& (0+255),w,b
 12312  018432  5D46               	subwf	_thisReading& (0+255),w,b
 12313  018434  5147               	movf	(_thisReading+1)& (0+255),w,b
 12314  018436  0A80               	xorlw	128
 12315  018438  0100               	movlb	0	; () banked
 12316  01843A  6F60               	movwf	??_InitADC& (0+255),b
 12317  01843C  0101               	movlb	1	; () banked
 12318  01843E  51F8               	movf	(_numReadings+1)& (0+255),w,b
 12319  018440  0A80               	xorlw	128
 12320  018442  0100               	movlb	0	; () banked
 12321  018444  5960               	subwfb	??_InitADC& (0+255),w,b
 12322  018446  B0D8               	btfsc	status,0,c
 12323  018448  0012               	return	
 12324  01844A  D7E2               	goto	l2370
 12325  01844C                     __end_of_InitADC:
 12326                           	opt stack 0
 12327                           tosu	equ	0xFFF
 12328                           tosh	equ	0xFFE
 12329                           tosl	equ	0xFFD
 12330                           pclath	equ	0xFFA
 12331                           tblptru	equ	0xFF8
 12332                           tblptrh	equ	0xFF7
 12333                           tblptrl	equ	0xFF6
 12334                           tablat	equ	0xFF5
 12335                           intcon	equ	0xFF2
 12336                           postinc0	equ	0xFEE
 12337                           wreg	equ	0xFE8
 12338                           postdec1	equ	0xFE5
 12339                           fsr1h	equ	0xFE2
 12340                           fsr1l	equ	0xFE1
 12341                           indf2	equ	0xFDF
 12342                           postinc2	equ	0xFDE
 12343                           postdec2	equ	0xFDD
 12344                           plusw2	equ	0xFDB
 12345                           fsr2h	equ	0xFDA
 12346                           fsr2l	equ	0xFD9
 12347                           status	equ	0xFD8
 12348                           
 12349 ;; *************** function _ISR_Enable *****************
 12350 ;; Defined at:
 12351 ;;		line 27 in file "Library/ISR.c"
 12352 ;; Parameters:    Size  Location     Type
 12353 ;;		None
 12354 ;; Auto vars:     Size  Location     Type
 12355 ;;		None
 12356 ;; Return value:  Size  Location     Type
 12357 ;;                  1    wreg      void 
 12358 ;; Registers used:
 12359 ;;		None
 12360 ;; Tracked objects:
 12361 ;;		On entry : 0/0
 12362 ;;		On exit  : 0/0
 12363 ;;		Unchanged: 0/0
 12364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12369 ;;Total ram usage:        0 bytes
 12370 ;; Hardware stack levels used:    1
 12371 ;; Hardware stack levels required when called:    7
 12372 ;; This function calls:
 12373 ;;		Nothing
 12374 ;; This function is called by:
 12375 ;;		_main
 12376 ;; This function uses a non-reentrant model
 12377 ;;
 12378                           
 12379                           	psect	text45
 12380  018FD0                     __ptext45:
 12381                           	opt stack 0
 12382  018FD0                     _ISR_Enable:
 12383                           	opt stack 23
 12384                           
 12385                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 12386                           
 12387                           ; BSR set to: 0
 12388                           ;incstack = 0
 12389  018FD0  8CF2               	bsf	intcon,6,c	;volatile
 12390                           
 12391                           ;ISR.c: 30: INTCONbits.GIE = 1;
 12392  018FD2  8EF2               	bsf	intcon,7,c	;volatile
 12393                           
 12394                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 12395  018FD4  88F2               	bsf	intcon,4,c	;volatile
 12396                           
 12397                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 12398  018FD6  92F2               	bcf	intcon,1,c	;volatile
 12399  018FD8  0012               	return		;funcret
 12400  018FDA                     __end_of_ISR_Enable:
 12401                           	opt stack 0
 12402                           tosu	equ	0xFFF
 12403                           tosh	equ	0xFFE
 12404                           tosl	equ	0xFFD
 12405                           pclath	equ	0xFFA
 12406                           tblptru	equ	0xFF8
 12407                           tblptrh	equ	0xFF7
 12408                           tblptrl	equ	0xFF6
 12409                           tablat	equ	0xFF5
 12410                           intcon	equ	0xFF2
 12411                           postinc0	equ	0xFEE
 12412                           wreg	equ	0xFE8
 12413                           postdec1	equ	0xFE5
 12414                           fsr1h	equ	0xFE2
 12415                           fsr1l	equ	0xFE1
 12416                           indf2	equ	0xFDF
 12417                           postinc2	equ	0xFDE
 12418                           postdec2	equ	0xFDD
 12419                           plusw2	equ	0xFDB
 12420                           fsr2h	equ	0xFDA
 12421                           fsr2l	equ	0xFD9
 12422                           status	equ	0xFD8
 12423                           
 12424 ;; *************** function _HMI_Poll *****************
 12425 ;; Defined at:
 12426 ;;		line 252 in file "HMI.c"
 12427 ;; Parameters:    Size  Location     Type
 12428 ;;		None
 12429 ;; Auto vars:     Size  Location     Type
 12430 ;;		None
 12431 ;; Return value:  Size  Location     Type
 12432 ;;                  1    wreg      void 
 12433 ;; Registers used:
 12434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12435 ;; Tracked objects:
 12436 ;;		On entry : 0/0
 12437 ;;		On exit  : 0/0
 12438 ;;		Unchanged: 0/0
 12439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12444 ;;Total ram usage:        0 bytes
 12445 ;; Hardware stack levels used:    1
 12446 ;; Hardware stack levels required when called:   15
 12447 ;; This function calls:
 12448 ;;		_Button_Poll
 12449 ;; This function is called by:
 12450 ;;		_main
 12451 ;; This function uses a non-reentrant model
 12452 ;;
 12453                           
 12454                           	psect	text46
 12455  017F54                     __ptext46:
 12456                           	opt stack 0
 12457  017F54                     _HMI_Poll:
 12458                           	opt stack 15
 12459                           
 12460                           ;HMI.c: 254: TRISE = 0xFC;
 12461                           
 12462                           ;incstack = 0
 12463  017F54  0EFC               	movlw	252
 12464  017F56  6E96               	movwf	3990,c	;volatile
 12465                           
 12466                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 12467  017F58  0ED0               	movlw	low (_HMIBoard+48)
 12468  017F5A  0100               	movlb	0	; () banked
 12469  017F5C  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 12470  017F5E  0E03               	movlw	high (_HMIBoard+48)
 12471  017F60  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12472  017F62  0E01               	movlw	1
 12473  017F64  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 12474  017F66  ECCA  F0B1         	call	_Button_Poll	;wreg free
 12475                           
 12476                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 12477  017F6A  0EB2               	movlw	low (_HMIBoard+18)
 12478  017F6C  0100               	movlb	0	; () banked
 12479  017F6E  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 12480  017F70  0E03               	movlw	high (_HMIBoard+18)
 12481  017F72  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12482  017F74  0E01               	movlw	1
 12483  017F76  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 12484  017F78  ECCA  F0B1         	call	_Button_Poll	;wreg free
 12485                           
 12486                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 12487  017F7C  0EA8               	movlw	low (_HMIBoard+8)
 12488  017F7E  0100               	movlb	0	; () banked
 12489  017F80  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 12490  017F82  0E03               	movlw	high (_HMIBoard+8)
 12491  017F84  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12492  017F86  0E01               	movlw	1
 12493  017F88  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 12494  017F8A  ECCA  F0B1         	call	_Button_Poll	;wreg free
 12495                           
 12496                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 12497  017F8E  0EBC               	movlw	low (_HMIBoard+28)
 12498  017F90  0100               	movlb	0	; () banked
 12499  017F92  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 12500  017F94  0E03               	movlw	high (_HMIBoard+28)
 12501  017F96  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12502  017F98  0E01               	movlw	1
 12503  017F9A  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 12504  017F9C  ECCA  F0B1         	call	_Button_Poll	;wreg free
 12505                           
 12506                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 12507  017FA0  0EC6               	movlw	low (_HMIBoard+38)
 12508  017FA2  0100               	movlb	0	; () banked
 12509  017FA4  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 12510  017FA6  0E03               	movlw	high (_HMIBoard+38)
 12511  017FA8  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12512  017FAA  0E01               	movlw	1
 12513  017FAC  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 12514  017FAE  ECCA  F0B1         	call	_Button_Poll	;wreg free
 12515  017FB2  0012               	return		;funcret
 12516  017FB4                     __end_of_HMI_Poll:
 12517                           	opt stack 0
 12518                           tosu	equ	0xFFF
 12519                           tosh	equ	0xFFE
 12520                           tosl	equ	0xFFD
 12521                           pclath	equ	0xFFA
 12522                           tblptru	equ	0xFF8
 12523                           tblptrh	equ	0xFF7
 12524                           tblptrl	equ	0xFF6
 12525                           tablat	equ	0xFF5
 12526                           intcon	equ	0xFF2
 12527                           postinc0	equ	0xFEE
 12528                           wreg	equ	0xFE8
 12529                           postdec1	equ	0xFE5
 12530                           fsr1h	equ	0xFE2
 12531                           fsr1l	equ	0xFE1
 12532                           indf2	equ	0xFDF
 12533                           postinc2	equ	0xFDE
 12534                           postdec2	equ	0xFDD
 12535                           plusw2	equ	0xFDB
 12536                           fsr2h	equ	0xFDA
 12537                           fsr2l	equ	0xFD9
 12538                           status	equ	0xFD8
 12539                           
 12540 ;; *************** function _Button_Poll *****************
 12541 ;; Defined at:
 12542 ;;		line 57 in file "Library/Button.c"
 12543 ;; Parameters:    Size  Location     Type
 12544 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 12545 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 12546 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 12547 ;; Auto vars:     Size  Location     Type
 12548 ;;  Pin             1   35[BANK0 ] unsigned char 
 12549 ;; Return value:  Size  Location     Type
 12550 ;;                  1    wreg      unsigned char 
 12551 ;; Registers used:
 12552 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12553 ;; Tracked objects:
 12554 ;;		On entry : 0/0
 12555 ;;		On exit  : 0/0
 12556 ;;		Unchanged: 0/0
 12557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12558 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12560 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12561 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12562 ;;Total ram usage:        9 bytes
 12563 ;; Hardware stack levels used:    1
 12564 ;; Hardware stack levels required when called:   14
 12565 ;; This function calls:
 12566 ;;		_Event_DIPSwitch
 12567 ;;		_Event_NULL
 12568 ;;		_Event_TestButton
 12569 ;;		_HMI_DIPSwitch
 12570 ;;		_HMI_DownSwitch
 12571 ;;		_HMI_LeftSwitch
 12572 ;;		_HMI_RightSwitch
 12573 ;;		_HMI_UpSwitch
 12574 ;;		_MXK_DIPSwitch
 12575 ;;		_MXK_TestButton
 12576 ;; This function is called by:
 12577 ;;		_HMI_Poll
 12578 ;;		_MXK_Poll
 12579 ;; This function uses a non-reentrant model
 12580 ;;
 12581                           
 12582                           	psect	text47
 12583  016394                     __ptext47:
 12584                           	opt stack 0
 12585  016394                     _Button_Poll:
 12586                           	opt stack 15
 12587                           
 12588                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 12589                           
 12590                           ;incstack = 0
 12591  016394  0100               	movlb	0	; () banked
 12592  016396  EE20 F007          	lfsr	2,7
 12593  01639A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12594  01639C  26D9               	addwf	fsr2l,f,c
 12595  01639E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12596  0163A0  22DA               	addwfc	fsr2h,f,c
 12597  0163A2  D801               	call	u14238
 12598  0163A4  D00A               	goto	u14239
 12599  0163A6                     u14238:
 12600  0163A6  0005               	push	
 12601  0163A8  6EFA               	movwf	pclath,c
 12602  0163AA  50DE               	movf	postinc2,w,c
 12603  0163AC  6EFD               	movwf	tosl,c
 12604  0163AE  50DE               	movf	postinc2,w,c
 12605  0163B0  6EFE               	movwf	tosh,c
 12606  0163B2  50DE               	movf	postinc2,w,c
 12607  0163B4  6EFF               	movwf	tosu,c
 12608  0163B6  50FA               	movf	pclath,w,c
 12609  0163B8  0012               	return		;indir
 12610  0163BA                     u14239:
 12611  0163BA  0100               	movlb	0	; () banked
 12612  0163BC  6F83               	movwf	Button_Poll@Pin& (0+255),b
 12613                           
 12614                           ; BSR set to: 0
 12615                           ;Button.c: 61: if (pButton->mState == Pin)
 12616  0163BE  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 12617  0163C2  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 12618  0163C6  5183               	movf	Button_Poll@Pin& (0+255),w,b
 12619  0163C8  18DE               	xorwf	postinc2,w,c
 12620  0163CA  A4D8               	btfss	status,2,c
 12621  0163CC  D01C               	goto	l11
 12622                           
 12623                           ; BSR set to: 0
 12624                           ;Button.c: 62: {
 12625                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 12626  0163CE  EE20 F001          	lfsr	2,1
 12627  0163D2  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12628  0163D4  26D9               	addwf	fsr2l,f,c
 12629  0163D6  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12630  0163D8  22DA               	addwfc	fsr2h,f,c
 12631  0163DA  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 12632  0163DC  5CDE               	subwf	postinc2,w,c
 12633  0163DE  B0D8               	btfsc	status,0,c
 12634  0163E0  D009               	goto	l12
 12635                           
 12636                           ; BSR set to: 0
 12637                           ;Button.c: 66: pButton->mCount = 0;
 12638  0163E2  EE20 F001          	lfsr	2,1
 12639  0163E6  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12640  0163E8  26D9               	addwf	fsr2l,f,c
 12641  0163EA  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12642  0163EC  22DA               	addwfc	fsr2h,f,c
 12643  0163EE  0E00               	movlw	0
 12644  0163F0  6EDF               	movwf	indf2,c
 12645  0163F2  0012               	return	
 12646  0163F4                     l12:
 12647                           
 12648                           ; BSR set to: 0
 12649                           ;Button.c: 67: else
 12650                           ;Button.c: 68: pButton->mCount -= pIncrement;
 12651                           
 12652                           ; BSR set to: 0
 12653  0163F4  EE20 F001          	lfsr	2,1
 12654  0163F8  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12655  0163FA  26D9               	addwf	fsr2l,f,c
 12656  0163FC  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12657  0163FE  22DA               	addwfc	fsr2h,f,c
 12658  016400  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 12659  016402  5EDF               	subwf	indf2,f,c
 12660                           
 12661                           ; BSR set to: 0
 12662                           ;Button.c: 69: }
 12663  016404  0012               	return	
 12664  016406                     l11:
 12665                           
 12666                           ; BSR set to: 0
 12667                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 12668                           
 12669                           ; BSR set to: 0
 12670  016406  EE20 F001          	lfsr	2,1
 12671  01640A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12672  01640C  26D9               	addwf	fsr2l,f,c
 12673  01640E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12674  016410  22DA               	addwfc	fsr2h,f,c
 12675  016412  50DF               	movf	indf2,w,c
 12676  016414  6F7E               	movwf	??_Button_Poll& (0+255),b
 12677  016416  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 12678  016418  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 12679  01641A  277E               	addwf	??_Button_Poll& (0+255),f,b
 12680  01641C  0E00               	movlw	0
 12681  01641E  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 12682  016420  EE20 F001          	lfsr	2,1
 12683  016424  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12684  016426  26D9               	addwf	fsr2l,f,c
 12685  016428  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12686  01642A  22DA               	addwfc	fsr2h,f,c
 12687  01642C  50DF               	movf	indf2,w,c
 12688  01642E  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 12689  016430  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 12690  016432  517E               	movf	??_Button_Poll& (0+255),w,b
 12691  016434  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 12692  016436  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 12693  016438  0A80               	xorlw	128
 12694  01643A  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 12695  01643C  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 12696  01643E  0A80               	xorlw	128
 12697  016440  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 12698  016442  B0D8               	btfsc	status,0,c
 12699  016444  0012               	return	
 12700                           
 12701                           ; BSR set to: 0
 12702                           ;Button.c: 73: {
 12703                           ;Button.c: 75: pButton->mCount += pIncrement;
 12704  016446  EE20 F001          	lfsr	2,1
 12705  01644A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12706  01644C  26D9               	addwf	fsr2l,f,c
 12707  01644E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12708  016450  22DA               	addwfc	fsr2h,f,c
 12709  016452  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 12710  016454  26DF               	addwf	indf2,f,c
 12711                           
 12712                           ; BSR set to: 0
 12713                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 12714  016456  EE20 F002          	lfsr	2,2
 12715  01645A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12716  01645C  26D9               	addwf	fsr2l,f,c
 12717  01645E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12718  016460  22DA               	addwfc	fsr2h,f,c
 12719  016462  EE10 F001          	lfsr	1,1
 12720  016466  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12721  016468  26E1               	addwf	fsr1l,f,c
 12722  01646A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12723  01646C  22E2               	addwfc	fsr1h,f,c
 12724  01646E  50E7               	movf	indf1,w,c
 12725  016470  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 12726  016472  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 12727  016474  50DE               	movf	postinc2,w,c
 12728  016476  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 12729  016478  50DE               	movf	postinc2,w,c
 12730  01647A  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 12731  01647C  A0D8               	btfss	status,0,c
 12732  01647E  0012               	return	
 12733                           
 12734                           ; BSR set to: 0
 12735                           ;Button.c: 77: {
 12736                           ;Button.c: 79: pButton->mState = Pin;
 12737  016480  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 12738  016484  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 12739  016488  C083  FFDF         	movff	Button_Poll@Pin,indf2
 12740                           
 12741                           ; BSR set to: 0
 12742                           ;Button.c: 80: pButton->mCount = 0;
 12743  01648C  EE20 F001          	lfsr	2,1
 12744  016490  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12745  016492  26D9               	addwf	fsr2l,f,c
 12746  016494  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12747  016496  22DA               	addwfc	fsr2h,f,c
 12748  016498  0E00               	movlw	0
 12749  01649A  6EDF               	movwf	indf2,c
 12750                           
 12751                           ; BSR set to: 0
 12752                           ;Button.c: 83: pButton->mFunction(Pin);
 12753  01649C  EE20 F004          	lfsr	2,4
 12754  0164A0  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12755  0164A2  26D9               	addwf	fsr2l,f,c
 12756  0164A4  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12757  0164A6  22DA               	addwfc	fsr2h,f,c
 12758  0164A8  D801               	call	u14288
 12759  0164AA  0012               	return	
 12760  0164AC                     u14288:
 12761  0164AC  0005               	push	
 12762  0164AE  6EFA               	movwf	pclath,c
 12763  0164B0  50DE               	movf	postinc2,w,c
 12764  0164B2  6EFD               	movwf	tosl,c
 12765  0164B4  50DE               	movf	postinc2,w,c
 12766  0164B6  6EFE               	movwf	tosh,c
 12767  0164B8  50DE               	movf	postinc2,w,c
 12768  0164BA  6EFF               	movwf	tosu,c
 12769  0164BC  50FA               	movf	pclath,w,c
 12770  0164BE  5183               	movf	Button_Poll@Pin& (0+255),w,b
 12771  0164C0  0012               	return		;indir
 12772  0164C2                     __end_of_Button_Poll:
 12773                           	opt stack 0
 12774                           tosu	equ	0xFFF
 12775                           tosh	equ	0xFFE
 12776                           tosl	equ	0xFFD
 12777                           pclath	equ	0xFFA
 12778                           tblptru	equ	0xFF8
 12779                           tblptrh	equ	0xFF7
 12780                           tblptrl	equ	0xFF6
 12781                           tablat	equ	0xFF5
 12782                           intcon	equ	0xFF2
 12783                           postinc0	equ	0xFEE
 12784                           wreg	equ	0xFE8
 12785                           indf1	equ	0xFE7
 12786                           postdec1	equ	0xFE5
 12787                           fsr1h	equ	0xFE2
 12788                           fsr1l	equ	0xFE1
 12789                           indf2	equ	0xFDF
 12790                           postinc2	equ	0xFDE
 12791                           postdec2	equ	0xFDD
 12792                           plusw2	equ	0xFDB
 12793                           fsr2h	equ	0xFDA
 12794                           fsr2l	equ	0xFD9
 12795                           status	equ	0xFD8
 12796                           
 12797 ;; *************** function _MXK_DIPSwitch *****************
 12798 ;; Defined at:
 12799 ;;		line 24 in file "Library/MXK.c"
 12800 ;; Parameters:    Size  Location     Type
 12801 ;;		None
 12802 ;; Auto vars:     Size  Location     Type
 12803 ;;		None
 12804 ;; Return value:  Size  Location     Type
 12805 ;;                  1    wreg      unsigned char 
 12806 ;; Registers used:
 12807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12808 ;; Tracked objects:
 12809 ;;		On entry : 0/0
 12810 ;;		On exit  : 0/0
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12817 ;;Total ram usage:        0 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; Hardware stack levels required when called:    8
 12820 ;; This function calls:
 12821 ;;		_Port_GetQuad
 12822 ;; This function is called by:
 12823 ;;		_FunctInitButton
 12824 ;;		_Button_Poll
 12825 ;;		_main
 12826 ;; This function uses a non-reentrant model
 12827 ;;
 12828                           
 12829                           	psect	text48
 12830  018E56                     __ptext48:
 12831                           	opt stack 0
 12832  018E56                     _MXK_DIPSwitch:
 12833                           	opt stack 22
 12834                           
 12835                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 12836                           
 12837                           ;incstack = 0
 12838  018E56  0E6F               	movlw	low _PortD
 12839  018E58  0100               	movlb	0	; () banked
 12840  018E5A  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 12841  018E5C  0E01               	movlw	high _PortD
 12842  018E5E  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 12843  018E60  0E00               	movlw	0
 12844  018E62  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 12845  018E64  EC12  F0C4         	call	_Port_GetQuad
 12846  018E68  0012               	return	
 12847  018E6A                     __end_of_MXK_DIPSwitch:
 12848                           	opt stack 0
 12849                           tosu	equ	0xFFF
 12850                           tosh	equ	0xFFE
 12851                           tosl	equ	0xFFD
 12852                           pclath	equ	0xFFA
 12853                           tblptru	equ	0xFF8
 12854                           tblptrh	equ	0xFF7
 12855                           tblptrl	equ	0xFF6
 12856                           tablat	equ	0xFF5
 12857                           intcon	equ	0xFF2
 12858                           postinc0	equ	0xFEE
 12859                           wreg	equ	0xFE8
 12860                           indf1	equ	0xFE7
 12861                           postdec1	equ	0xFE5
 12862                           fsr1h	equ	0xFE2
 12863                           fsr1l	equ	0xFE1
 12864                           indf2	equ	0xFDF
 12865                           postinc2	equ	0xFDE
 12866                           postdec2	equ	0xFDD
 12867                           plusw2	equ	0xFDB
 12868                           fsr2h	equ	0xFDA
 12869                           fsr2l	equ	0xFD9
 12870                           status	equ	0xFD8
 12871                           
 12872 ;; *************** function _HMI_DIPSwitch *****************
 12873 ;; Defined at:
 12874 ;;		line 47 in file "HMI.c"
 12875 ;; Parameters:    Size  Location     Type
 12876 ;;		None
 12877 ;; Auto vars:     Size  Location     Type
 12878 ;;		None
 12879 ;; Return value:  Size  Location     Type
 12880 ;;                  1    wreg      unsigned char 
 12881 ;; Registers used:
 12882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12883 ;; Tracked objects:
 12884 ;;		On entry : 0/0
 12885 ;;		On exit  : 0/0
 12886 ;;		Unchanged: 0/0
 12887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12892 ;;Total ram usage:        0 bytes
 12893 ;; Hardware stack levels used:    1
 12894 ;; Hardware stack levels required when called:    8
 12895 ;; This function calls:
 12896 ;;		_Port_GetQuad
 12897 ;; This function is called by:
 12898 ;;		_HMI_Init
 12899 ;;		_Button_Poll
 12900 ;;		_main
 12901 ;; This function uses a non-reentrant model
 12902 ;;
 12903                           
 12904                           	psect	text49
 12905  018E6A                     __ptext49:
 12906                           	opt stack 0
 12907  018E6A                     _HMI_DIPSwitch:
 12908                           	opt stack 20
 12909                           
 12910                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 12911                           
 12912                           ;incstack = 0
 12913  018E6A  0E65               	movlw	low _PortE
 12914  018E6C  0100               	movlb	0	; () banked
 12915  018E6E  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 12916  018E70  0E01               	movlw	high _PortE
 12917  018E72  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 12918  018E74  0E00               	movlw	0
 12919  018E76  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 12920  018E78  EC12  F0C4         	call	_Port_GetQuad	;wreg free
 12921  018E7C  0012               	return	
 12922  018E7E                     __end_of_HMI_DIPSwitch:
 12923                           	opt stack 0
 12924                           tosu	equ	0xFFF
 12925                           tosh	equ	0xFFE
 12926                           tosl	equ	0xFFD
 12927                           pclath	equ	0xFFA
 12928                           tblptru	equ	0xFF8
 12929                           tblptrh	equ	0xFF7
 12930                           tblptrl	equ	0xFF6
 12931                           tablat	equ	0xFF5
 12932                           intcon	equ	0xFF2
 12933                           postinc0	equ	0xFEE
 12934                           wreg	equ	0xFE8
 12935                           indf1	equ	0xFE7
 12936                           postdec1	equ	0xFE5
 12937                           fsr1h	equ	0xFE2
 12938                           fsr1l	equ	0xFE1
 12939                           indf2	equ	0xFDF
 12940                           postinc2	equ	0xFDE
 12941                           postdec2	equ	0xFDD
 12942                           plusw2	equ	0xFDB
 12943                           fsr2h	equ	0xFDA
 12944                           fsr2l	equ	0xFD9
 12945                           status	equ	0xFD8
 12946                           
 12947 ;; *************** function _HMI_DownSwitch *****************
 12948 ;; Defined at:
 12949 ;;		line 42 in file "HMI.c"
 12950 ;; Parameters:    Size  Location     Type
 12951 ;;		None
 12952 ;; Auto vars:     Size  Location     Type
 12953 ;;		None
 12954 ;; Return value:  Size  Location     Type
 12955 ;;                  1    wreg      unsigned char 
 12956 ;; Registers used:
 12957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12958 ;; Tracked objects:
 12959 ;;		On entry : 0/0
 12960 ;;		On exit  : 0/0
 12961 ;;		Unchanged: 0/0
 12962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12967 ;;Total ram usage:        0 bytes
 12968 ;; Hardware stack levels used:    1
 12969 ;; Hardware stack levels required when called:    8
 12970 ;; This function calls:
 12971 ;;		_Port_GetPin
 12972 ;; This function is called by:
 12973 ;;		_HMI_Init
 12974 ;;		_Button_Poll
 12975 ;;		_main
 12976 ;; This function uses a non-reentrant model
 12977 ;;
 12978                           
 12979                           	psect	text50
 12980  018E7E                     __ptext50:
 12981                           	opt stack 0
 12982  018E7E                     _HMI_DownSwitch:
 12983                           	opt stack 20
 12984                           
 12985                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 12986                           
 12987                           ;incstack = 0
 12988  018E7E  0E65               	movlw	low _PortE
 12989  018E80  0100               	movlb	0	; () banked
 12990  018E82  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 12991  018E84  0E01               	movlw	high _PortE
 12992  018E86  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 12993  018E88  0E06               	movlw	6
 12994  018E8A  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 12995  018E8C  EC6C  F0C4         	call	_Port_GetPin	;wreg free
 12996  018E90  0012               	return	
 12997  018E92                     __end_of_HMI_DownSwitch:
 12998                           	opt stack 0
 12999                           tosu	equ	0xFFF
 13000                           tosh	equ	0xFFE
 13001                           tosl	equ	0xFFD
 13002                           pclath	equ	0xFFA
 13003                           tblptru	equ	0xFF8
 13004                           tblptrh	equ	0xFF7
 13005                           tblptrl	equ	0xFF6
 13006                           tablat	equ	0xFF5
 13007                           intcon	equ	0xFF2
 13008                           postinc0	equ	0xFEE
 13009                           wreg	equ	0xFE8
 13010                           indf1	equ	0xFE7
 13011                           postdec1	equ	0xFE5
 13012                           fsr1h	equ	0xFE2
 13013                           fsr1l	equ	0xFE1
 13014                           indf2	equ	0xFDF
 13015                           postinc2	equ	0xFDE
 13016                           postdec2	equ	0xFDD
 13017                           plusw2	equ	0xFDB
 13018                           fsr2h	equ	0xFDA
 13019                           fsr2l	equ	0xFD9
 13020                           status	equ	0xFD8
 13021                           
 13022 ;; *************** function _HMI_UpSwitch *****************
 13023 ;; Defined at:
 13024 ;;		line 37 in file "HMI.c"
 13025 ;; Parameters:    Size  Location     Type
 13026 ;;		None
 13027 ;; Auto vars:     Size  Location     Type
 13028 ;;		None
 13029 ;; Return value:  Size  Location     Type
 13030 ;;                  1    wreg      unsigned char 
 13031 ;; Registers used:
 13032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13033 ;; Tracked objects:
 13034 ;;		On entry : 0/0
 13035 ;;		On exit  : 0/0
 13036 ;;		Unchanged: 0/0
 13037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13042 ;;Total ram usage:        0 bytes
 13043 ;; Hardware stack levels used:    1
 13044 ;; Hardware stack levels required when called:    8
 13045 ;; This function calls:
 13046 ;;		_Port_GetPin
 13047 ;; This function is called by:
 13048 ;;		_HMI_Init
 13049 ;;		_Button_Poll
 13050 ;;		_main
 13051 ;; This function uses a non-reentrant model
 13052 ;;
 13053                           
 13054                           	psect	text51
 13055  018E92                     __ptext51:
 13056                           	opt stack 0
 13057  018E92                     _HMI_UpSwitch:
 13058                           	opt stack 22
 13059                           
 13060                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 13061                           
 13062                           ;incstack = 0
 13063  018E92  0E65               	movlw	low _PortE
 13064  018E94  0100               	movlb	0	; () banked
 13065  018E96  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 13066  018E98  0E01               	movlw	high _PortE
 13067  018E9A  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13068  018E9C  0E07               	movlw	7
 13069  018E9E  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 13070  018EA0  EC6C  F0C4         	call	_Port_GetPin	;wreg free
 13071  018EA4  0012               	return	
 13072  018EA6                     __end_of_HMI_UpSwitch:
 13073                           	opt stack 0
 13074                           tosu	equ	0xFFF
 13075                           tosh	equ	0xFFE
 13076                           tosl	equ	0xFFD
 13077                           pclath	equ	0xFFA
 13078                           tblptru	equ	0xFF8
 13079                           tblptrh	equ	0xFF7
 13080                           tblptrl	equ	0xFF6
 13081                           tablat	equ	0xFF5
 13082                           intcon	equ	0xFF2
 13083                           postinc0	equ	0xFEE
 13084                           wreg	equ	0xFE8
 13085                           indf1	equ	0xFE7
 13086                           postdec1	equ	0xFE5
 13087                           fsr1h	equ	0xFE2
 13088                           fsr1l	equ	0xFE1
 13089                           indf2	equ	0xFDF
 13090                           postinc2	equ	0xFDE
 13091                           postdec2	equ	0xFDD
 13092                           plusw2	equ	0xFDB
 13093                           fsr2h	equ	0xFDA
 13094                           fsr2l	equ	0xFD9
 13095                           status	equ	0xFD8
 13096                           
 13097 ;; *************** function _HMI_RightSwitch *****************
 13098 ;; Defined at:
 13099 ;;		line 32 in file "HMI.c"
 13100 ;; Parameters:    Size  Location     Type
 13101 ;;		None
 13102 ;; Auto vars:     Size  Location     Type
 13103 ;;		None
 13104 ;; Return value:  Size  Location     Type
 13105 ;;                  1    wreg      unsigned char 
 13106 ;; Registers used:
 13107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13108 ;; Tracked objects:
 13109 ;;		On entry : 0/0
 13110 ;;		On exit  : 0/0
 13111 ;;		Unchanged: 0/0
 13112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13117 ;;Total ram usage:        0 bytes
 13118 ;; Hardware stack levels used:    1
 13119 ;; Hardware stack levels required when called:    8
 13120 ;; This function calls:
 13121 ;;		_Port_GetPin
 13122 ;; This function is called by:
 13123 ;;		_HMI_Init
 13124 ;;		_Button_Poll
 13125 ;;		_main
 13126 ;; This function uses a non-reentrant model
 13127 ;;
 13128                           
 13129                           	psect	text52
 13130  018EA6                     __ptext52:
 13131                           	opt stack 0
 13132  018EA6                     _HMI_RightSwitch:
 13133                           	opt stack 22
 13134                           
 13135                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 13136                           
 13137                           ;incstack = 0
 13138  018EA6  0E65               	movlw	low _PortE
 13139  018EA8  0100               	movlb	0	; () banked
 13140  018EAA  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 13141  018EAC  0E01               	movlw	high _PortE
 13142  018EAE  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13143  018EB0  0E04               	movlw	4
 13144  018EB2  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 13145  018EB4  EC6C  F0C4         	call	_Port_GetPin	;wreg free
 13146  018EB8  0012               	return	
 13147  018EBA                     __end_of_HMI_RightSwitch:
 13148                           	opt stack 0
 13149                           tosu	equ	0xFFF
 13150                           tosh	equ	0xFFE
 13151                           tosl	equ	0xFFD
 13152                           pclath	equ	0xFFA
 13153                           tblptru	equ	0xFF8
 13154                           tblptrh	equ	0xFF7
 13155                           tblptrl	equ	0xFF6
 13156                           tablat	equ	0xFF5
 13157                           intcon	equ	0xFF2
 13158                           postinc0	equ	0xFEE
 13159                           wreg	equ	0xFE8
 13160                           indf1	equ	0xFE7
 13161                           postdec1	equ	0xFE5
 13162                           fsr1h	equ	0xFE2
 13163                           fsr1l	equ	0xFE1
 13164                           indf2	equ	0xFDF
 13165                           postinc2	equ	0xFDE
 13166                           postdec2	equ	0xFDD
 13167                           plusw2	equ	0xFDB
 13168                           fsr2h	equ	0xFDA
 13169                           fsr2l	equ	0xFD9
 13170                           status	equ	0xFD8
 13171                           
 13172 ;; *************** function _HMI_LeftSwitch *****************
 13173 ;; Defined at:
 13174 ;;		line 27 in file "HMI.c"
 13175 ;; Parameters:    Size  Location     Type
 13176 ;;		None
 13177 ;; Auto vars:     Size  Location     Type
 13178 ;;		None
 13179 ;; Return value:  Size  Location     Type
 13180 ;;                  1    wreg      unsigned char 
 13181 ;; Registers used:
 13182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13183 ;; Tracked objects:
 13184 ;;		On entry : 0/0
 13185 ;;		On exit  : 0/0
 13186 ;;		Unchanged: 0/0
 13187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13192 ;;Total ram usage:        0 bytes
 13193 ;; Hardware stack levels used:    1
 13194 ;; Hardware stack levels required when called:    8
 13195 ;; This function calls:
 13196 ;;		_Port_GetPin
 13197 ;; This function is called by:
 13198 ;;		_HMI_Init
 13199 ;;		_Button_Poll
 13200 ;;		_main
 13201 ;; This function uses a non-reentrant model
 13202 ;;
 13203                           
 13204                           	psect	text53
 13205  018EBA                     __ptext53:
 13206                           	opt stack 0
 13207  018EBA                     _HMI_LeftSwitch:
 13208                           	opt stack 20
 13209                           
 13210                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 13211                           
 13212                           ;incstack = 0
 13213  018EBA  0E65               	movlw	low _PortE
 13214  018EBC  0100               	movlb	0	; () banked
 13215  018EBE  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 13216  018EC0  0E01               	movlw	high _PortE
 13217  018EC2  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13218  018EC4  0E05               	movlw	5
 13219  018EC6  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 13220  018EC8  EC6C  F0C4         	call	_Port_GetPin	;wreg free
 13221  018ECC  0012               	return	
 13222  018ECE                     __end_of_HMI_LeftSwitch:
 13223                           	opt stack 0
 13224                           tosu	equ	0xFFF
 13225                           tosh	equ	0xFFE
 13226                           tosl	equ	0xFFD
 13227                           pclath	equ	0xFFA
 13228                           tblptru	equ	0xFF8
 13229                           tblptrh	equ	0xFF7
 13230                           tblptrl	equ	0xFF6
 13231                           tablat	equ	0xFF5
 13232                           intcon	equ	0xFF2
 13233                           postinc0	equ	0xFEE
 13234                           wreg	equ	0xFE8
 13235                           indf1	equ	0xFE7
 13236                           postdec1	equ	0xFE5
 13237                           fsr1h	equ	0xFE2
 13238                           fsr1l	equ	0xFE1
 13239                           indf2	equ	0xFDF
 13240                           postinc2	equ	0xFDE
 13241                           postdec2	equ	0xFDD
 13242                           plusw2	equ	0xFDB
 13243                           fsr2h	equ	0xFDA
 13244                           fsr2l	equ	0xFD9
 13245                           status	equ	0xFD8
 13246                           
 13247 ;; *************** function _MXK_TestButton *****************
 13248 ;; Defined at:
 13249 ;;		line 14 in file "Library/MXK.c"
 13250 ;; Parameters:    Size  Location     Type
 13251 ;;		None
 13252 ;; Auto vars:     Size  Location     Type
 13253 ;;		None
 13254 ;; Return value:  Size  Location     Type
 13255 ;;                  1    wreg      unsigned char 
 13256 ;; Registers used:
 13257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13258 ;; Tracked objects:
 13259 ;;		On entry : 0/0
 13260 ;;		On exit  : 0/0
 13261 ;;		Unchanged: 0/0
 13262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13267 ;;Total ram usage:        0 bytes
 13268 ;; Hardware stack levels used:    1
 13269 ;; Hardware stack levels required when called:    8
 13270 ;; This function calls:
 13271 ;;		_Port_GetPin
 13272 ;; This function is called by:
 13273 ;;		_FunctInitButton
 13274 ;;		_Button_Poll
 13275 ;;		_main
 13276 ;; This function uses a non-reentrant model
 13277 ;;
 13278                           
 13279                           	psect	text54
 13280  018ECE                     __ptext54:
 13281                           	opt stack 0
 13282  018ECE                     _MXK_TestButton:
 13283                           	opt stack 22
 13284                           
 13285                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 13286                           
 13287                           ;incstack = 0
 13288  018ECE  0EF2               	movlw	low _PortB
 13289  018ED0  0100               	movlb	0	; () banked
 13290  018ED2  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 13291  018ED4  0E02               	movlw	high _PortB
 13292  018ED6  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13293  018ED8  0E04               	movlw	4
 13294  018EDA  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 13295  018EDC  EC6C  F0C4         	call	_Port_GetPin	;wreg free
 13296  018EE0  0012               	return	
 13297  018EE2                     __end_of_MXK_TestButton:
 13298                           	opt stack 0
 13299                           tosu	equ	0xFFF
 13300                           tosh	equ	0xFFE
 13301                           tosl	equ	0xFFD
 13302                           pclath	equ	0xFFA
 13303                           tblptru	equ	0xFF8
 13304                           tblptrh	equ	0xFF7
 13305                           tblptrl	equ	0xFF6
 13306                           tablat	equ	0xFF5
 13307                           intcon	equ	0xFF2
 13308                           postinc0	equ	0xFEE
 13309                           wreg	equ	0xFE8
 13310                           indf1	equ	0xFE7
 13311                           postdec1	equ	0xFE5
 13312                           fsr1h	equ	0xFE2
 13313                           fsr1l	equ	0xFE1
 13314                           indf2	equ	0xFDF
 13315                           postinc2	equ	0xFDE
 13316                           postdec2	equ	0xFDD
 13317                           plusw2	equ	0xFDB
 13318                           fsr2h	equ	0xFDA
 13319                           fsr2l	equ	0xFD9
 13320                           status	equ	0xFD8
 13321                           
 13322 ;; *************** function _Port_GetQuad *****************
 13323 ;; Defined at:
 13324 ;;		line 498 in file "Library/Port.c"
 13325 ;; Parameters:    Size  Location     Type
 13326 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 13327 ;;		 -> PortE(10), PortD(10), 
 13328 ;;  pQuad           1    2[BANK0 ] enum E6776
 13329 ;; Auto vars:     Size  Location     Type
 13330 ;;  Output          1    5[BANK0 ] unsigned char 
 13331 ;; Return value:  Size  Location     Type
 13332 ;;                  1    wreg      unsigned char 
 13333 ;; Registers used:
 13334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13335 ;; Tracked objects:
 13336 ;;		On entry : 0/0
 13337 ;;		On exit  : 0/0
 13338 ;;		Unchanged: 0/0
 13339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13340 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13342 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13343 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13344 ;;Total ram usage:        6 bytes
 13345 ;; Hardware stack levels used:    1
 13346 ;; Hardware stack levels required when called:    7
 13347 ;; This function calls:
 13348 ;;		Nothing
 13349 ;; This function is called by:
 13350 ;;		_HMI_DIPSwitch
 13351 ;;		_MXK_DIPSwitch
 13352 ;;		_Port_ToggleQuad
 13353 ;; This function uses a non-reentrant model
 13354 ;;
 13355                           
 13356                           	psect	text55
 13357  018824                     __ptext55:
 13358                           	opt stack 0
 13359  018824                     _Port_GetQuad:
 13360                           	opt stack 22
 13361                           
 13362                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 13363                           
 13364                           ;incstack = 0
 13365  018824  0100               	movlb	0	; () banked
 13366  018826  EE20 F006          	lfsr	2,6
 13367  01882A  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 13368  01882C  26D9               	addwf	fsr2l,f,c
 13369  01882E  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 13370  018830  22DA               	addwfc	fsr2h,f,c
 13371  018832  CFDE F063          	movff	postinc2,??_Port_GetQuad
 13372  018836  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 13373  01883A  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 13374  01883E  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 13375  018842  50DF               	movf	indf2,w,c
 13376  018844  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 13377                           
 13378                           ; BSR set to: 0
 13379                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 13380  018846  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 13381  018848  0D04               	mullw	4
 13382  01884A  28F3               	incf	prodl,w,c
 13383  01884C  6F63               	movwf	??_Port_GetQuad& (0+255),b
 13384  01884E  D002               	goto	u13360
 13385  018850                     u13365:
 13386  018850  90D8               	bcf	status,0,c
 13387  018852  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 13388  018854                     u13360:
 13389  018854  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 13390  018856  D7FC               	goto	u13365
 13391                           
 13392                           ;Port.c: 502: Output &= 0xF;
 13393  018858  0E0F               	movlw	15
 13394  01885A  0100               	movlb	0	; () banked
 13395  01885C  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 13396                           
 13397                           ; BSR set to: 0
 13398                           ;Port.c: 503: return Output;
 13399  01885E  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 13400  018860  0012               	return	
 13401  018862                     __end_of_Port_GetQuad:
 13402                           	opt stack 0
 13403                           tosu	equ	0xFFF
 13404                           tosh	equ	0xFFE
 13405                           tosl	equ	0xFFD
 13406                           pclath	equ	0xFFA
 13407                           tblptru	equ	0xFF8
 13408                           tblptrh	equ	0xFF7
 13409                           tblptrl	equ	0xFF6
 13410                           tablat	equ	0xFF5
 13411                           prodl	equ	0xFF3
 13412                           intcon	equ	0xFF2
 13413                           postinc0	equ	0xFEE
 13414                           wreg	equ	0xFE8
 13415                           indf1	equ	0xFE7
 13416                           postdec1	equ	0xFE5
 13417                           fsr1h	equ	0xFE2
 13418                           fsr1l	equ	0xFE1
 13419                           indf2	equ	0xFDF
 13420                           postinc2	equ	0xFDE
 13421                           postdec2	equ	0xFDD
 13422                           plusw2	equ	0xFDB
 13423                           fsr2h	equ	0xFDA
 13424                           fsr2l	equ	0xFD9
 13425                           status	equ	0xFD8
 13426                           
 13427 ;; *************** function _Event_DIPSwitch *****************
 13428 ;; Defined at:
 13429 ;;		line 22 in file "Events.c"
 13430 ;; Parameters:    Size  Location     Type
 13431 ;;  pState          1    wreg     unsigned char 
 13432 ;; Auto vars:     Size  Location     Type
 13433 ;;  pState          1   25[BANK0 ] unsigned char 
 13434 ;;  Bar             1   26[BANK0 ] unsigned char 
 13435 ;; Return value:  Size  Location     Type
 13436 ;;                  1    wreg      void 
 13437 ;; Registers used:
 13438 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13439 ;; Tracked objects:
 13440 ;;		On entry : 0/0
 13441 ;;		On exit  : 0/0
 13442 ;;		Unchanged: 0/0
 13443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13445 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13447 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13448 ;;Total ram usage:        2 bytes
 13449 ;; Hardware stack levels used:    1
 13450 ;; Hardware stack levels required when called:   13
 13451 ;; This function calls:
 13452 ;;		_HMI_GetBar
 13453 ;;		_HMI_SetBar
 13454 ;;		_LED_Toggle
 13455 ;; This function is called by:
 13456 ;;		_FunctInitButton
 13457 ;;		_Button_Poll
 13458 ;; This function uses a non-reentrant model
 13459 ;;
 13460                           
 13461                           	psect	text56
 13462  018C18                     __ptext56:
 13463                           	opt stack 0
 13464  018C18                     _Event_DIPSwitch:
 13465                           	opt stack 15
 13466                           
 13467                           ; BSR set to: 0
 13468                           ;incstack = 0
 13469                           ;Event_DIPSwitch@pState stored from wreg
 13470  018C18  0100               	movlb	0	; () banked
 13471  018C1A  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 13472                           
 13473                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 13474  018C1C  ECFD  F0C7         	call	_HMI_GetBar	;wreg free
 13475  018C20  0100               	movlb	0	; () banked
 13476  018C22  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 13477                           
 13478                           ; BSR set to: 0
 13479                           ;Events.c: 25: Bar &= 0x0F;
 13480  018C24  0E0F               	movlw	15
 13481  018C26  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 13482                           
 13483                           ; BSR set to: 0
 13484                           ;Events.c: 26: pState <<= 4;
 13485  018C28  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 13486  018C2A  0EF0               	movlw	240
 13487  018C2C  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 13488                           
 13489                           ; BSR set to: 0
 13490                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 13491  018C2E  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 13492  018C30  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 13493  018C32  ECED  F0C7         	call	_HMI_SetBar
 13494                           
 13495                           ;Events.c: 32: LED_Toggle(eLED1);
 13496  018C36  0E00               	movlw	0
 13497  018C38  ECD2  F0C3         	call	_LED_Toggle
 13498  018C3C  0012               	return		;funcret
 13499  018C3E                     __end_of_Event_DIPSwitch:
 13500                           	opt stack 0
 13501                           tosu	equ	0xFFF
 13502                           tosh	equ	0xFFE
 13503                           tosl	equ	0xFFD
 13504                           pclath	equ	0xFFA
 13505                           tblptru	equ	0xFF8
 13506                           tblptrh	equ	0xFF7
 13507                           tblptrl	equ	0xFF6
 13508                           tablat	equ	0xFF5
 13509                           prodl	equ	0xFF3
 13510                           intcon	equ	0xFF2
 13511                           postinc0	equ	0xFEE
 13512                           wreg	equ	0xFE8
 13513                           indf1	equ	0xFE7
 13514                           postdec1	equ	0xFE5
 13515                           fsr1h	equ	0xFE2
 13516                           fsr1l	equ	0xFE1
 13517                           indf2	equ	0xFDF
 13518                           postinc2	equ	0xFDE
 13519                           postdec2	equ	0xFDD
 13520                           plusw2	equ	0xFDB
 13521                           fsr2h	equ	0xFDA
 13522                           fsr2l	equ	0xFD9
 13523                           status	equ	0xFD8
 13524                           
 13525 ;; *************** function _Event_NULL *****************
 13526 ;; Defined at:
 13527 ;;		line 9 in file "Events.c"
 13528 ;; Parameters:    Size  Location     Type
 13529 ;;  pState          1    wreg     unsigned char 
 13530 ;; Auto vars:     Size  Location     Type
 13531 ;;  pState          1    0[COMRAM] unsigned char 
 13532 ;; Return value:  Size  Location     Type
 13533 ;;                  1    wreg      void 
 13534 ;; Registers used:
 13535 ;;		wreg
 13536 ;; Tracked objects:
 13537 ;;		On entry : 0/0
 13538 ;;		On exit  : 0/0
 13539 ;;		Unchanged: 0/0
 13540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13545 ;;Total ram usage:        0 bytes
 13546 ;; Hardware stack levels used:    1
 13547 ;; Hardware stack levels required when called:    7
 13548 ;; This function calls:
 13549 ;;		Nothing
 13550 ;; This function is called by:
 13551 ;;		_HMI_Init
 13552 ;;		_Button_Poll
 13553 ;; This function uses a non-reentrant model
 13554 ;;
 13555                           
 13556                           	psect	text57
 13557  001404                     __ptext57:
 13558                           	opt stack 0
 13559  001404                     _Event_NULL:
 13560                           	opt stack 21
 13561                           
 13562                           ;incstack = 0
 13563  001404  0012               	return		;funcret
 13564  001406                     __end_of_Event_NULL:
 13565                           	opt stack 0
 13566                           tosu	equ	0xFFF
 13567                           tosh	equ	0xFFE
 13568                           tosl	equ	0xFFD
 13569                           pclath	equ	0xFFA
 13570                           tblptru	equ	0xFF8
 13571                           tblptrh	equ	0xFF7
 13572                           tblptrl	equ	0xFF6
 13573                           tablat	equ	0xFF5
 13574                           prodl	equ	0xFF3
 13575                           intcon	equ	0xFF2
 13576                           postinc0	equ	0xFEE
 13577                           wreg	equ	0xFE8
 13578                           indf1	equ	0xFE7
 13579                           postdec1	equ	0xFE5
 13580                           fsr1h	equ	0xFE2
 13581                           fsr1l	equ	0xFE1
 13582                           indf2	equ	0xFDF
 13583                           postinc2	equ	0xFDE
 13584                           postdec2	equ	0xFDD
 13585                           plusw2	equ	0xFDB
 13586                           fsr2h	equ	0xFDA
 13587                           fsr2l	equ	0xFD9
 13588                           status	equ	0xFD8
 13589                           
 13590 ;; *************** function _Event_TestButton *****************
 13591 ;; Defined at:
 13592 ;;		line 52 in file "Events.c"
 13593 ;; Parameters:    Size  Location     Type
 13594 ;;  pState          1    wreg     unsigned char 
 13595 ;; Auto vars:     Size  Location     Type
 13596 ;;  pState          1   25[BANK0 ] unsigned char 
 13597 ;; Return value:  Size  Location     Type
 13598 ;;                  1    wreg      void 
 13599 ;; Registers used:
 13600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13601 ;; Tracked objects:
 13602 ;;		On entry : 0/0
 13603 ;;		On exit  : 0/0
 13604 ;;		Unchanged: 0/0
 13605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13607 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13609 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13610 ;;Total ram usage:        1 bytes
 13611 ;; Hardware stack levels used:    1
 13612 ;; Hardware stack levels required when called:   13
 13613 ;; This function calls:
 13614 ;;		_HMI_SetButton
 13615 ;;		_HMI_SetNumber
 13616 ;;		_LED_Toggle
 13617 ;; This function is called by:
 13618 ;;		_FunctInitButton
 13619 ;;		_Button_Poll
 13620 ;; This function uses a non-reentrant model
 13621 ;;
 13622                           
 13623                           	psect	text58
 13624  0189F0                     __ptext58:
 13625                           	opt stack 0
 13626  0189F0                     _Event_TestButton:
 13627                           	opt stack 15
 13628                           
 13629                           ;incstack = 0
 13630                           ;Event_TestButton@pState stored from wreg
 13631  0189F0  0100               	movlb	0	; () banked
 13632  0189F2  6F79               	movwf	Event_TestButton@pState& (0+255),b
 13633                           
 13634                           ;Events.c: 56: static UINT8 j = 0;
 13635                           ;Events.c: 60: if (pState == 0)
 13636  0189F4  0100               	movlb	0	; () banked
 13637  0189F6  5179               	movf	Event_TestButton@pState& (0+255),w,b
 13638  0189F8  A4D8               	btfss	status,2,c
 13639  0189FA  D010               	goto	l1873
 13640                           
 13641                           ; BSR set to: 0
 13642                           ;Events.c: 61: {
 13643                           ;Events.c: 62: j++;
 13644  0189FC  2A3C               	incf	Event_TestButton@j,f,c
 13645                           
 13646                           ; BSR set to: 0
 13647                           ;Events.c: 63: val += j;
 13648  0189FE  503C               	movf	Event_TestButton@j,w,c
 13649  018A00  0101               	movlb	1	; () banked
 13650  018A02  2754               	addwf	_val& (0+255),f,b
 13651  018A04  0E00               	movlw	0
 13652  018A06  2355               	addwfc	(_val+1)& (0+255),f,b
 13653                           
 13654                           ; BSR set to: 1
 13655                           ;Events.c: 64: HMI_SetNumber( val );
 13656  018A08  C154  F076         	movff	_val,HMI_SetNumber@pInput
 13657  018A0C  C155  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 13658  018A10  EC1F  F0C6         	call	_HMI_SetNumber	;wreg free
 13659                           
 13660                           ;Events.c: 67: HMI_SetButton( j & 3 );
 13661  018A14  503C               	movf	Event_TestButton@j,w,c
 13662  018A16  0B03               	andlw	3
 13663  018A18  ECA5  F0BC         	call	_HMI_SetButton
 13664  018A1C                     l1873:
 13665                           
 13666                           ;Events.c: 68: }
 13667                           ;Events.c: 72: LED_Toggle(eLED1);
 13668  018A1C  0E00               	movlw	0
 13669  018A1E  ECD2  F0C3         	call	_LED_Toggle
 13670  018A22  0012               	return		;funcret
 13671  018A24                     __end_of_Event_TestButton:
 13672                           	opt stack 0
 13673                           tosu	equ	0xFFF
 13674                           tosh	equ	0xFFE
 13675                           tosl	equ	0xFFD
 13676                           pclath	equ	0xFFA
 13677                           tblptru	equ	0xFF8
 13678                           tblptrh	equ	0xFF7
 13679                           tblptrl	equ	0xFF6
 13680                           tablat	equ	0xFF5
 13681                           prodl	equ	0xFF3
 13682                           intcon	equ	0xFF2
 13683                           postinc0	equ	0xFEE
 13684                           wreg	equ	0xFE8
 13685                           indf1	equ	0xFE7
 13686                           postdec1	equ	0xFE5
 13687                           fsr1h	equ	0xFE2
 13688                           fsr1l	equ	0xFE1
 13689                           indf2	equ	0xFDF
 13690                           postinc2	equ	0xFDE
 13691                           postdec2	equ	0xFDD
 13692                           plusw2	equ	0xFDB
 13693                           fsr2h	equ	0xFDA
 13694                           fsr2l	equ	0xFD9
 13695                           status	equ	0xFD8
 13696                           
 13697 ;; *************** function _HMI_SetButton *****************
 13698 ;; Defined at:
 13699 ;;		line 186 in file "HMI.c"
 13700 ;; Parameters:    Size  Location     Type
 13701 ;;  pValue          1    wreg     unsigned char 
 13702 ;; Auto vars:     Size  Location     Type
 13703 ;;  pValue          1    6[BANK0 ] unsigned char 
 13704 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 13705 ;;  v               1    7[BANK0 ] unsigned char 
 13706 ;; Return value:  Size  Location     Type
 13707 ;;                  1    wreg      void 
 13708 ;; Registers used:
 13709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 13710 ;; Tracked objects:
 13711 ;;		On entry : 0/0
 13712 ;;		On exit  : 0/0
 13713 ;;		Unchanged: 0/0
 13714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13716 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13717 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13718 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13719 ;;Total ram usage:        8 bytes
 13720 ;; Hardware stack levels used:    1
 13721 ;; Hardware stack levels required when called:    7
 13722 ;; This function calls:
 13723 ;;		Nothing
 13724 ;; This function is called by:
 13725 ;;		_Event_TestButton
 13726 ;; This function uses a non-reentrant model
 13727 ;;
 13728                           
 13729                           	psect	text59
 13730  01794A                     __ptext59:
 13731                           	opt stack 0
 13732  01794A                     _HMI_SetButton:
 13733                           	opt stack 20
 13734                           
 13735                           ;incstack = 0
 13736                           ;HMI_SetButton@pValue stored from wreg
 13737  01794A  0100               	movlb	0	; () banked
 13738  01794C  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 13739                           
 13740                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 13741  01794E  0E20               	movlw	low HMI_SetButton@F7213
 13742  017950  6EF6               	movwf	tblptrl,c
 13743  017952                     	if	1	;There is more than 1 active tblptr byte
 13744  017952  0EFC               	movlw	high HMI_SetButton@F7213
 13745  017954  6EF7               	movwf	tblptrh,c
 13746  017956                     	endif
 13747  017956                     	if	1	;There are 3 active tblptr bytes
 13748  017956  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 13749  017958  6EF8               	movwf	tblptru,c
 13750  01795A                     	endif
 13751  01795A  0009               	tblrd		*+
 13752  01795C  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 13753  017960  0009               	tblrd		*+
 13754  017962  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 13755  017966  0009               	tblrd		*+
 13756  017968  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 13757  01796C  000A               	tblrd		*-
 13758  01796E  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 13759                           
 13760                           ;HMI.c: 189: UINT8 v = 0b00010001;
 13761  017972  0E11               	movlw	17
 13762  017974  0100               	movlb	0	; () banked
 13763  017976  6F67               	movwf	HMI_SetButton@v& (0+255),b
 13764                           
 13765                           ; BSR set to: 0
 13766                           ;HMI.c: 190: pValue &= 3;
 13767  017978  0E03               	movlw	3
 13768  01797A  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 13769                           
 13770                           ; BSR set to: 0
 13771                           ;HMI.c: 191: v = v << reindex[pValue];
 13772  01797C  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 13773  01797E  0D01               	mullw	1
 13774  017980  0E62               	movlw	low HMI_SetButton@reindex
 13775  017982  24F3               	addwf	prodl,w,c
 13776  017984  6ED9               	movwf	fsr2l,c
 13777  017986  0E00               	movlw	high HMI_SetButton@reindex
 13778  017988  20F4               	addwfc	prodh,w,c
 13779  01798A  6EDA               	movwf	fsr2h,c
 13780  01798C  50DF               	movf	indf2,w,c
 13781  01798E  6F60               	movwf	??_HMI_SetButton& (0+255),b
 13782  017990  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 13783  017994  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 13784  017996  D002               	goto	u13444
 13785  017998                     u13445:
 13786  017998  90D8               	bcf	status,0,c
 13787  01799A  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 13788  01799C                     u13444:
 13789  01799C  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 13790  01799E  D7FC               	goto	u13445
 13791  0179A0  0100               	movlb	0	; () banked
 13792  0179A2  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 13793  0179A4  6F67               	movwf	HMI_SetButton@v& (0+255),b
 13794                           
 13795                           ; BSR set to: 0
 13796                           ;HMI.c: 192: v = v >> 4;
 13797  0179A6  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 13798  0179A8  0B0F               	andlw	15
 13799  0179AA  6F67               	movwf	HMI_SetButton@v& (0+255),b
 13800                           
 13801                           ; BSR set to: 0
 13802                           ;HMI.c: 193: v = v & 0x0F;
 13803  0179AC  5167               	movf	HMI_SetButton@v& (0+255),w,b
 13804  0179AE  0B0F               	andlw	15
 13805  0179B0  6F67               	movwf	HMI_SetButton@v& (0+255),b
 13806                           
 13807                           ; BSR set to: 0
 13808                           ;HMI.c: 194: HMIBoard.pButton = v;
 13809  0179B2  0103               	movlb	3	; () banked
 13810  0179B4  51A6               	movf	(_HMIBoard+6)& (0+255),w,b
 13811  0179B6  0100               	movlb	0	; () banked
 13812  0179B8  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 13813  0179BA  0BF0               	andlw	-16
 13814  0179BC  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 13815  0179BE  0103               	movlb	3	; () banked
 13816  0179C0  6FA6               	movwf	(_HMIBoard+6)& (0+255),b
 13817                           
 13818                           ; BSR set to: 3
 13819  0179C2  0012               	return		;funcret
 13820  0179C4                     __end_of_HMI_SetButton:
 13821                           	opt stack 0
 13822                           tosu	equ	0xFFF
 13823                           tosh	equ	0xFFE
 13824                           tosl	equ	0xFFD
 13825                           pclath	equ	0xFFA
 13826                           tblptru	equ	0xFF8
 13827                           tblptrh	equ	0xFF7
 13828                           tblptrl	equ	0xFF6
 13829                           tablat	equ	0xFF5
 13830                           prodh	equ	0xFF4
 13831                           prodl	equ	0xFF3
 13832                           intcon	equ	0xFF2
 13833                           postinc0	equ	0xFEE
 13834                           wreg	equ	0xFE8
 13835                           indf1	equ	0xFE7
 13836                           postdec1	equ	0xFE5
 13837                           fsr1h	equ	0xFE2
 13838                           fsr1l	equ	0xFE1
 13839                           indf2	equ	0xFDF
 13840                           postinc2	equ	0xFDE
 13841                           postdec2	equ	0xFDD
 13842                           plusw2	equ	0xFDB
 13843                           fsr2h	equ	0xFDA
 13844                           fsr2l	equ	0xFD9
 13845                           status	equ	0xFD8
 13846                           
 13847 ;; *************** function _LED_Toggle *****************
 13848 ;; Defined at:
 13849 ;;		line 50 in file "Library/LED.c"
 13850 ;; Parameters:    Size  Location     Type
 13851 ;;  pLED            1    wreg     enum E6739
 13852 ;; Auto vars:     Size  Location     Type
 13853 ;;  pLED            1   24[BANK0 ] enum E6739
 13854 ;; Return value:  Size  Location     Type
 13855 ;;                  1    wreg      void 
 13856 ;; Registers used:
 13857 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13858 ;; Tracked objects:
 13859 ;;		On entry : 0/0
 13860 ;;		On exit  : 0/0
 13861 ;;		Unchanged: 0/0
 13862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13864 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13866 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13867 ;;Total ram usage:        1 bytes
 13868 ;; Hardware stack levels used:    1
 13869 ;; Hardware stack levels required when called:   12
 13870 ;; This function calls:
 13871 ;;		_Port_TogglePin
 13872 ;; This function is called by:
 13873 ;;		_LCD_Reset
 13874 ;;		_Event_DIPSwitch
 13875 ;;		_Event_TestButton
 13876 ;;		_Event_ADCSequenceComplete
 13877 ;;		_Event_HMI_DIPSwitch
 13878 ;;		_Event_HMI_LeftButton
 13879 ;;		_Event_HMI_RightButton
 13880 ;;		_Event_HMI_UpButton
 13881 ;;		_Event_HMI_DownButton
 13882 ;; This function uses a non-reentrant model
 13883 ;;
 13884                           
 13885                           	psect	text60
 13886  0187A4                     __ptext60:
 13887                           	opt stack 0
 13888  0187A4                     _LED_Toggle:
 13889                           	opt stack 15
 13890                           
 13891                           ; BSR set to: 3
 13892                           ;incstack = 0
 13893                           ;LED_Toggle@pLED stored from wreg
 13894  0187A4  0100               	movlb	0	; () banked
 13895  0187A6  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 13896                           
 13897                           ;LED.c: 52: switch (pLED)
 13898  0187A8  D014               	goto	l234
 13899  0187AA                     
 13900                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 13901  0187AA  0E79               	movlw	low _PortC
 13902  0187AC  0100               	movlb	0	; () banked
 13903  0187AE  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 13904  0187B0  0E01               	movlw	high _PortC
 13905  0187B2  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 13906  0187B4  0E00               	movlw	0
 13907  0187B6  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 13908  0187B8  ECA3  F0C5         	call	_Port_TogglePin	;wreg free
 13909                           
 13910                           ;LED.c: 56: break;
 13911  0187BC  0012               	return	
 13912  0187BE                     
 13913                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 13914  0187BE  0E79               	movlw	low _PortC
 13915  0187C0  0100               	movlb	0	; () banked
 13916  0187C2  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 13917  0187C4  0E01               	movlw	high _PortC
 13918  0187C6  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 13919  0187C8  0E01               	movlw	1
 13920  0187CA  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 13921  0187CC  ECA3  F0C5         	call	_Port_TogglePin	;wreg free
 13922                           
 13923                           ;LED.c: 60: }
 13924                           
 13925                           ;LED.c: 59: break;
 13926  0187D0  0012               	return	
 13927  0187D2                     l234:
 13928  0187D2  0100               	movlb	0	; () banked
 13929  0187D4  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 13930                           
 13931                           ; Switch size 1, requested type "space"
 13932                           ; Number of cases is 2, Range of values is 0 to 1
 13933                           ; switch strategies available:
 13934                           ; Name         Instructions Cycles
 13935                           ; simple_byte            7     4 (average)
 13936                           ;	Chosen strategy is simple_byte
 13937  0187D6  0A00               	xorlw	0	; case 0
 13938  0187D8  B4D8               	btfsc	status,2,c
 13939  0187DA  D7E7               	goto	l235
 13940  0187DC  0A01               	xorlw	1	; case 1
 13941  0187DE  A4D8               	btfss	status,2,c
 13942  0187E0  0012               	return	
 13943  0187E2  D7ED               	goto	l237
 13944  0187E4                     __end_of_LED_Toggle:
 13945                           	opt stack 0
 13946                           tosu	equ	0xFFF
 13947                           tosh	equ	0xFFE
 13948                           tosl	equ	0xFFD
 13949                           pclath	equ	0xFFA
 13950                           tblptru	equ	0xFF8
 13951                           tblptrh	equ	0xFF7
 13952                           tblptrl	equ	0xFF6
 13953                           tablat	equ	0xFF5
 13954                           prodh	equ	0xFF4
 13955                           prodl	equ	0xFF3
 13956                           intcon	equ	0xFF2
 13957                           postinc0	equ	0xFEE
 13958                           wreg	equ	0xFE8
 13959                           indf1	equ	0xFE7
 13960                           postdec1	equ	0xFE5
 13961                           fsr1h	equ	0xFE2
 13962                           fsr1l	equ	0xFE1
 13963                           indf2	equ	0xFDF
 13964                           postinc2	equ	0xFDE
 13965                           postdec2	equ	0xFDD
 13966                           plusw2	equ	0xFDB
 13967                           fsr2h	equ	0xFDA
 13968                           fsr2l	equ	0xFD9
 13969                           status	equ	0xFD8
 13970                           
 13971 ;; *************** function _Port_TogglePin *****************
 13972 ;; Defined at:
 13973 ;;		line 278 in file "Library/Port.c"
 13974 ;; Parameters:    Size  Location     Type
 13975 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 13976 ;;		 -> PortC(10), 
 13977 ;;  pPin            1   22[BANK0 ] enum E6750
 13978 ;; Auto vars:     Size  Location     Type
 13979 ;;  Value           1   23[BANK0 ] unsigned char 
 13980 ;; Return value:  Size  Location     Type
 13981 ;;                  1    wreg      void 
 13982 ;; Registers used:
 13983 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13984 ;; Tracked objects:
 13985 ;;		On entry : 0/0
 13986 ;;		On exit  : 0/0
 13987 ;;		Unchanged: 0/0
 13988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13989 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13990 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13992 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13993 ;;Total ram usage:        4 bytes
 13994 ;; Hardware stack levels used:    1
 13995 ;; Hardware stack levels required when called:   11
 13996 ;; This function calls:
 13997 ;;		_Port_GetPin
 13998 ;;		_Port_SetPin
 13999 ;; This function is called by:
 14000 ;;		_LED_Toggle
 14001 ;; This function uses a non-reentrant model
 14002 ;;
 14003                           
 14004                           	psect	text61
 14005  018B46                     __ptext61:
 14006                           	opt stack 0
 14007  018B46                     _Port_TogglePin:
 14008                           	opt stack 15
 14009                           
 14010                           ;Port.c: 280: UINT8 Value;
 14011                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 14012                           
 14013                           ;incstack = 0
 14014  018B46  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 14015  018B4A  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 14016  018B4E  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 14017  018B52  EC6C  F0C4         	call	_Port_GetPin	;wreg free
 14018  018B56  0100               	movlb	0	; () banked
 14019  018B58  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 14020                           
 14021                           ; BSR set to: 0
 14022                           ;Port.c: 282: Value ^= 0x01;
 14023  018B5A  0E01               	movlw	1
 14024  018B5C  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 14025                           
 14026                           ; BSR set to: 0
 14027                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 14028  018B5E  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 14029  018B62  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 14030  018B66  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 14031  018B6A  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 14032  018B6E  EC1B  F0B7         	call	_Port_SetPin	;wreg free
 14033  018B72  0012               	return		;funcret
 14034  018B74                     __end_of_Port_TogglePin:
 14035                           	opt stack 0
 14036                           tosu	equ	0xFFF
 14037                           tosh	equ	0xFFE
 14038                           tosl	equ	0xFFD
 14039                           pclath	equ	0xFFA
 14040                           tblptru	equ	0xFF8
 14041                           tblptrh	equ	0xFF7
 14042                           tblptrl	equ	0xFF6
 14043                           tablat	equ	0xFF5
 14044                           prodh	equ	0xFF4
 14045                           prodl	equ	0xFF3
 14046                           intcon	equ	0xFF2
 14047                           postinc0	equ	0xFEE
 14048                           wreg	equ	0xFE8
 14049                           indf1	equ	0xFE7
 14050                           postdec1	equ	0xFE5
 14051                           fsr1h	equ	0xFE2
 14052                           fsr1l	equ	0xFE1
 14053                           indf2	equ	0xFDF
 14054                           postinc2	equ	0xFDE
 14055                           postdec2	equ	0xFDD
 14056                           plusw2	equ	0xFDB
 14057                           fsr2h	equ	0xFDA
 14058                           fsr2l	equ	0xFD9
 14059                           status	equ	0xFD8
 14060                           
 14061 ;; *************** function _Port_SetPin *****************
 14062 ;; Defined at:
 14063 ;;		line 247 in file "Library/Port.c"
 14064 ;; Parameters:    Size  Location     Type
 14065 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 14066 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 14067 ;;  pPin            1   17[BANK0 ] enum E6750
 14068 ;;  pValue          1   18[BANK0 ] unsigned char 
 14069 ;; Auto vars:     Size  Location     Type
 14070 ;;  Type            1   19[BANK0 ] enum E6795
 14071 ;; Return value:  Size  Location     Type
 14072 ;;                  1    wreg      void 
 14073 ;; Registers used:
 14074 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14075 ;; Tracked objects:
 14076 ;;		On entry : 0/0
 14077 ;;		On exit  : 0/0
 14078 ;;		Unchanged: 0/0
 14079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14080 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14083 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14084 ;;Total ram usage:        5 bytes
 14085 ;; Hardware stack levels used:    1
 14086 ;; Hardware stack levels required when called:   10
 14087 ;; This function calls:
 14088 ;;		_Byte_SetBit
 14089 ;;		_Word_GetPair
 14090 ;; This function is called by:
 14091 ;;		_Reset_Low
 14092 ;;		_Reset_High
 14093 ;;		_LED_Set
 14094 ;;		_Port_TogglePin
 14095 ;;		_Motor_Step
 14096 ;;		_MXK_Init
 14097 ;;		_Motor_Init
 14098 ;; This function uses a non-reentrant model
 14099 ;;
 14100                           
 14101                           	psect	text62
 14102  016E36                     __ptext62:
 14103                           	opt stack 0
 14104  016E36                     _Port_SetPin:
 14105                           	opt stack 19
 14106                           
 14107                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 14108                           
 14109                           ;incstack = 0
 14110  016E36  0E08               	movlw	8
 14111  016E38  0100               	movlb	0	; () banked
 14112  016E3A  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 14113  016E3C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 14114  016E3E  0E00               	movlw	0
 14115  016E40  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 14116  016E42  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 14117  016E44  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 14118  016E48  EC12  F0C5         	call	_Word_GetPair	;wreg free
 14119  016E4C  0100               	movlb	0	; () banked
 14120  016E4E  6F73               	movwf	Port_SetPin@Type& (0+255),b
 14121                           
 14122                           ;Port.c: 250: switch (Type)
 14123  016E50  D03D               	goto	l427
 14124  016E52                     
 14125                           ; BSR set to: 0
 14126                           ;Port.c: 256: pValue &= 1;
 14127                           
 14128                           ; BSR set to: 0
 14129  016E52  0E01               	movlw	1
 14130  016E54  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 14131                           
 14132                           ; BSR set to: 0
 14133                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 14134  016E56  EE20 F002          	lfsr	2,2
 14135  016E5A  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 14136  016E5C  26D9               	addwf	fsr2l,f,c
 14137  016E5E  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 14138  016E60  22DA               	addwfc	fsr2h,f,c
 14139  016E62  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14140  016E66  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14141  016E6A  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 14142  016E6E  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 14143  016E72  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 14144                           
 14145                           ;Port.c: 258: break;
 14146  016E76  0012               	return	
 14147  016E78                     
 14148                           ;Port.c: 261: pValue &= 1;
 14149  016E78  0E01               	movlw	1
 14150  016E7A  0100               	movlb	0	; () banked
 14151  016E7C  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 14152                           
 14153                           ;Port.c: 262: pValue ^= 1;
 14154  016E7E  0E01               	movlw	1
 14155  016E80  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 14156                           
 14157                           ; BSR set to: 0
 14158                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 14159  016E82  EE20 F002          	lfsr	2,2
 14160  016E86  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 14161  016E88  26D9               	addwf	fsr2l,f,c
 14162  016E8A  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 14163  016E8C  22DA               	addwfc	fsr2h,f,c
 14164  016E8E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14165  016E92  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14166  016E96  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 14167  016E9A  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 14168  016E9E  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 14169                           
 14170                           ;Port.c: 264: break;
 14171  016EA2  0012               	return	
 14172  016EA4                     
 14173                           ;Port.c: 266: pValue &= 1;
 14174  016EA4  0E01               	movlw	1
 14175  016EA6  0100               	movlb	0	; () banked
 14176  016EA8  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 14177                           
 14178                           ; BSR set to: 0
 14179                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 14180  016EAA  EE20 F004          	lfsr	2,4
 14181  016EAE  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 14182  016EB0  26D9               	addwf	fsr2l,f,c
 14183  016EB2  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 14184  016EB4  22DA               	addwfc	fsr2h,f,c
 14185  016EB6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14186  016EBA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14187  016EBE  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 14188  016EC2  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 14189  016EC6  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 14190                           
 14191                           ;Port.c: 269: }
 14192                           
 14193                           ;Port.c: 268: break;
 14194  016ECA  0012               	return	
 14195  016ECC                     l427:
 14196  016ECC  0100               	movlb	0	; () banked
 14197  016ECE  5173               	movf	Port_SetPin@Type& (0+255),w,b
 14198                           
 14199                           ; Switch size 1, requested type "space"
 14200                           ; Number of cases is 4, Range of values is 0 to 3
 14201                           ; switch strategies available:
 14202                           ; Name         Instructions Cycles
 14203                           ; simple_byte           13     7 (average)
 14204                           ;	Chosen strategy is simple_byte
 14205  016ED0  0A00               	xorlw	0	; case 0
 14206  016ED2  B4D8               	btfsc	status,2,c
 14207  016ED4  0012               	return	
 14208  016ED6  0A01               	xorlw	1	; case 1
 14209  016ED8  B4D8               	btfsc	status,2,c
 14210  016EDA  D7BB               	goto	l430
 14211  016EDC  0A03               	xorlw	3	; case 2
 14212  016EDE  B4D8               	btfsc	status,2,c
 14213  016EE0  D7CB               	goto	l432
 14214  016EE2  0A01               	xorlw	1	; case 3
 14215  016EE4  A4D8               	btfss	status,2,c
 14216  016EE6  0012               	return	
 14217  016EE8  D7DD               	goto	l433
 14218  016EEA                     __end_of_Port_SetPin:
 14219                           	opt stack 0
 14220                           tosu	equ	0xFFF
 14221                           tosh	equ	0xFFE
 14222                           tosl	equ	0xFFD
 14223                           pclath	equ	0xFFA
 14224                           tblptru	equ	0xFF8
 14225                           tblptrh	equ	0xFF7
 14226                           tblptrl	equ	0xFF6
 14227                           tablat	equ	0xFF5
 14228                           prodh	equ	0xFF4
 14229                           prodl	equ	0xFF3
 14230                           intcon	equ	0xFF2
 14231                           postinc0	equ	0xFEE
 14232                           wreg	equ	0xFE8
 14233                           indf1	equ	0xFE7
 14234                           postdec1	equ	0xFE5
 14235                           fsr1h	equ	0xFE2
 14236                           fsr1l	equ	0xFE1
 14237                           indf2	equ	0xFDF
 14238                           postinc2	equ	0xFDE
 14239                           postdec2	equ	0xFDD
 14240                           plusw2	equ	0xFDB
 14241                           fsr2h	equ	0xFDA
 14242                           fsr2l	equ	0xFD9
 14243                           status	equ	0xFD8
 14244                           
 14245 ;; *************** function _Port_GetPin *****************
 14246 ;; Defined at:
 14247 ;;		line 271 in file "Library/Port.c"
 14248 ;; Parameters:    Size  Location     Type
 14249 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 14250 ;;		 -> PortB(10), PortE(10), PortC(10), 
 14251 ;;  pPin            1    2[BANK0 ] enum E6750
 14252 ;; Auto vars:     Size  Location     Type
 14253 ;;  Output          1    5[BANK0 ] unsigned char 
 14254 ;; Return value:  Size  Location     Type
 14255 ;;                  1    wreg      unsigned char 
 14256 ;; Registers used:
 14257 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14258 ;; Tracked objects:
 14259 ;;		On entry : 0/0
 14260 ;;		On exit  : 0/0
 14261 ;;		Unchanged: 0/0
 14262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14263 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14264 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14265 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14266 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14267 ;;Total ram usage:        6 bytes
 14268 ;; Hardware stack levels used:    1
 14269 ;; Hardware stack levels required when called:    7
 14270 ;; This function calls:
 14271 ;;		Nothing
 14272 ;; This function is called by:
 14273 ;;		_Port_TogglePin
 14274 ;;		_HMI_LeftSwitch
 14275 ;;		_HMI_RightSwitch
 14276 ;;		_HMI_UpSwitch
 14277 ;;		_HMI_DownSwitch
 14278 ;;		_MXK_TestButton
 14279 ;; This function uses a non-reentrant model
 14280 ;;
 14281                           
 14282                           	psect	text63
 14283  0188D8                     __ptext63:
 14284                           	opt stack 0
 14285  0188D8                     _Port_GetPin:
 14286                           	opt stack 22
 14287                           
 14288                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 14289                           
 14290                           ;incstack = 0
 14291  0188D8  0100               	movlb	0	; () banked
 14292  0188DA  EE20 F006          	lfsr	2,6
 14293  0188DE  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 14294  0188E0  26D9               	addwf	fsr2l,f,c
 14295  0188E2  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 14296  0188E4  22DA               	addwfc	fsr2h,f,c
 14297  0188E6  CFDE F063          	movff	postinc2,??_Port_GetPin
 14298  0188EA  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 14299  0188EE  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 14300  0188F2  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 14301  0188F6  50DF               	movf	indf2,w,c
 14302  0188F8  6F65               	movwf	Port_GetPin@Output& (0+255),b
 14303                           
 14304                           ; BSR set to: 0
 14305                           ;Port.c: 274: Output >>= (UINT8)pPin;
 14306  0188FA  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 14307  0188FC  6F63               	movwf	??_Port_GetPin& (0+255),b
 14308  0188FE  D002               	goto	u12870
 14309  018900                     u12875:
 14310  018900  90D8               	bcf	status,0,c
 14311  018902  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 14312  018904                     u12870:
 14313  018904  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 14314  018906  D7FC               	goto	u12875
 14315                           
 14316                           ;Port.c: 275: Output &= 1;
 14317  018908  0E01               	movlw	1
 14318  01890A  0100               	movlb	0	; () banked
 14319  01890C  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 14320                           
 14321                           ; BSR set to: 0
 14322                           ;Port.c: 276: return Output;
 14323  01890E  5165               	movf	Port_GetPin@Output& (0+255),w,b
 14324  018910  0012               	return	
 14325  018912                     __end_of_Port_GetPin:
 14326                           	opt stack 0
 14327                           tosu	equ	0xFFF
 14328                           tosh	equ	0xFFE
 14329                           tosl	equ	0xFFD
 14330                           pclath	equ	0xFFA
 14331                           tblptru	equ	0xFF8
 14332                           tblptrh	equ	0xFF7
 14333                           tblptrl	equ	0xFF6
 14334                           tablat	equ	0xFF5
 14335                           prodh	equ	0xFF4
 14336                           prodl	equ	0xFF3
 14337                           intcon	equ	0xFF2
 14338                           postinc0	equ	0xFEE
 14339                           wreg	equ	0xFE8
 14340                           indf1	equ	0xFE7
 14341                           postdec1	equ	0xFE5
 14342                           fsr1h	equ	0xFE2
 14343                           fsr1l	equ	0xFE1
 14344                           indf2	equ	0xFDF
 14345                           postinc2	equ	0xFDE
 14346                           postdec2	equ	0xFDD
 14347                           plusw2	equ	0xFDB
 14348                           fsr2h	equ	0xFDA
 14349                           fsr2l	equ	0xFD9
 14350                           status	equ	0xFD8
 14351                           
 14352 ;; *************** function _HMI_SetBar *****************
 14353 ;; Defined at:
 14354 ;;		line 205 in file "HMI.c"
 14355 ;; Parameters:    Size  Location     Type
 14356 ;;  pValue          1    wreg     unsigned char 
 14357 ;; Auto vars:     Size  Location     Type
 14358 ;;  pValue          1    0[BANK0 ] unsigned char 
 14359 ;; Return value:  Size  Location     Type
 14360 ;;                  1    wreg      void 
 14361 ;; Registers used:
 14362 ;;		wreg
 14363 ;; Tracked objects:
 14364 ;;		On entry : 0/0
 14365 ;;		On exit  : 0/0
 14366 ;;		Unchanged: 0/0
 14367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14371 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14372 ;;Total ram usage:        1 bytes
 14373 ;; Hardware stack levels used:    1
 14374 ;; Hardware stack levels required when called:    7
 14375 ;; This function calls:
 14376 ;;		Nothing
 14377 ;; This function is called by:
 14378 ;;		_Event_DIPSwitch
 14379 ;;		_Event_HMI_DIPSwitch
 14380 ;;		_Event_HMI_LeftButton
 14381 ;;		_Event_HMI_RightButton
 14382 ;; This function uses a non-reentrant model
 14383 ;;
 14384                           
 14385                           	psect	text64
 14386  018FDA                     __ptext64:
 14387                           	opt stack 0
 14388  018FDA                     _HMI_SetBar:
 14389                           	opt stack 20
 14390                           
 14391                           ; BSR set to: 0
 14392                           ;incstack = 0
 14393                           ;HMI_SetBar@pValue stored from wreg
 14394  018FDA  0100               	movlb	0	; () banked
 14395  018FDC  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 14396                           
 14397                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 14398  018FDE  C060  F3A7         	movff	HMI_SetBar@pValue,_HMIBoard+7
 14399  018FE2  0012               	return		;funcret
 14400  018FE4                     __end_of_HMI_SetBar:
 14401                           	opt stack 0
 14402                           tosu	equ	0xFFF
 14403                           tosh	equ	0xFFE
 14404                           tosl	equ	0xFFD
 14405                           pclath	equ	0xFFA
 14406                           tblptru	equ	0xFF8
 14407                           tblptrh	equ	0xFF7
 14408                           tblptrl	equ	0xFF6
 14409                           tablat	equ	0xFF5
 14410                           prodh	equ	0xFF4
 14411                           prodl	equ	0xFF3
 14412                           intcon	equ	0xFF2
 14413                           postinc0	equ	0xFEE
 14414                           wreg	equ	0xFE8
 14415                           indf1	equ	0xFE7
 14416                           postdec1	equ	0xFE5
 14417                           fsr1h	equ	0xFE2
 14418                           fsr1l	equ	0xFE1
 14419                           indf2	equ	0xFDF
 14420                           postinc2	equ	0xFDE
 14421                           postdec2	equ	0xFDD
 14422                           plusw2	equ	0xFDB
 14423                           fsr2h	equ	0xFDA
 14424                           fsr2l	equ	0xFD9
 14425                           status	equ	0xFD8
 14426                           
 14427 ;; *************** function _HMI_GetBar *****************
 14428 ;; Defined at:
 14429 ;;		line 209 in file "HMI.c"
 14430 ;; Parameters:    Size  Location     Type
 14431 ;;		None
 14432 ;; Auto vars:     Size  Location     Type
 14433 ;;		None
 14434 ;; Return value:  Size  Location     Type
 14435 ;;                  1    wreg      unsigned char 
 14436 ;; Registers used:
 14437 ;;		wreg, status,2
 14438 ;; Tracked objects:
 14439 ;;		On entry : 0/0
 14440 ;;		On exit  : 0/0
 14441 ;;		Unchanged: 0/0
 14442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14447 ;;Total ram usage:        0 bytes
 14448 ;; Hardware stack levels used:    1
 14449 ;; Hardware stack levels required when called:    7
 14450 ;; This function calls:
 14451 ;;		Nothing
 14452 ;; This function is called by:
 14453 ;;		_Event_DIPSwitch
 14454 ;;		_Event_HMI_DIPSwitch
 14455 ;; This function uses a non-reentrant model
 14456 ;;
 14457                           
 14458                           	psect	text65
 14459  018FFA                     __ptext65:
 14460                           	opt stack 0
 14461  018FFA                     _HMI_GetBar:
 14462                           	opt stack 20
 14463                           
 14464                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 14465                           
 14466                           ;incstack = 0
 14467  018FFA  0103               	movlb	3	; () banked
 14468  018FFC  51A7               	movf	(_HMIBoard+7)& (0+255),w,b
 14469  018FFE  0012               	return	
 14470  019000                     __end_of_HMI_GetBar:
 14471                           	opt stack 0
 14472                           tosu	equ	0xFFF
 14473                           tosh	equ	0xFFE
 14474                           tosl	equ	0xFFD
 14475                           pclath	equ	0xFFA
 14476                           tblptru	equ	0xFF8
 14477                           tblptrh	equ	0xFF7
 14478                           tblptrl	equ	0xFF6
 14479                           tablat	equ	0xFF5
 14480                           prodh	equ	0xFF4
 14481                           prodl	equ	0xFF3
 14482                           intcon	equ	0xFF2
 14483                           postinc0	equ	0xFEE
 14484                           wreg	equ	0xFE8
 14485                           indf1	equ	0xFE7
 14486                           postdec1	equ	0xFE5
 14487                           fsr1h	equ	0xFE2
 14488                           fsr1l	equ	0xFE1
 14489                           indf2	equ	0xFDF
 14490                           postinc2	equ	0xFDE
 14491                           postdec2	equ	0xFDD
 14492                           plusw2	equ	0xFDB
 14493                           fsr2h	equ	0xFDA
 14494                           fsr2l	equ	0xFD9
 14495                           status	equ	0xFD8
 14496                           
 14497 ;; *************** function _HMI_Init *****************
 14498 ;; Defined at:
 14499 ;;		line 104 in file "HMI.c"
 14500 ;; Parameters:    Size  Location     Type
 14501 ;;		None
 14502 ;; Auto vars:     Size  Location     Type
 14503 ;;  in              2   72[BANK0 ] unsigned short 
 14504 ;; Return value:  Size  Location     Type
 14505 ;;                  1    wreg      void 
 14506 ;; Registers used:
 14507 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14508 ;; Tracked objects:
 14509 ;;		On entry : 0/0
 14510 ;;		On exit  : 0/0
 14511 ;;		Unchanged: 0/0
 14512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14514 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14516 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14517 ;;Total ram usage:        2 bytes
 14518 ;; Hardware stack levels used:    1
 14519 ;; Hardware stack levels required when called:   16
 14520 ;; This function calls:
 14521 ;;		_Button_Init
 14522 ;;		_SPI_Init
 14523 ;;		_SPI_MinSpeed
 14524 ;; This function is called by:
 14525 ;;		_main
 14526 ;; This function uses a non-reentrant model
 14527 ;;
 14528                           
 14529                           	psect	text66
 14530  0154BC                     __ptext66:
 14531                           	opt stack 0
 14532  0154BC                     _HMI_Init:
 14533                           	opt stack 14
 14534                           
 14535                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 14536                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 14537                           
 14538                           ; BSR set to: 3
 14539                           ;incstack = 0
 14540  0154BC  0ED0               	movlw	low (_HMIBoard+48)
 14541  0154BE  0100               	movlb	0	; () banked
 14542  0154C0  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14543  0154C2  0E03               	movlw	high (_HMIBoard+48)
 14544  0154C4  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14545  0154C6  0E00               	movlw	0
 14546  0154C8  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14547  0154CA  0E02               	movlw	2
 14548  0154CC  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14549  0154CE  0E00               	movlw	low _HMI_InitButtons
 14550  0154D0  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14551  0154D2  0E90               	movlw	high _HMI_InitButtons
 14552  0154D4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14553  0154D6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14554  0154D8  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14555  0154DA  0E6A               	movlw	low _HMI_DIPSwitch
 14556  0154DC  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14557  0154DE  0E8E               	movlw	high _HMI_DIPSwitch
 14558  0154E0  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14559  0154E2  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 14560  0154E4  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14561  0154E6  0E04               	movlw	low _Event_NULL
 14562  0154E8  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14563  0154EA  0E14               	movlw	high _Event_NULL
 14564  0154EC  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14565  0154EE  0E00               	movlw	low (_Event_NULL shr (0+16))
 14566  0154F0  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14567  0154F2  EC75  F0B7         	call	_Button_Init	;wreg free
 14568                           
 14569                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 14570                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 14571  0154F6  0EB2               	movlw	low (_HMIBoard+18)
 14572  0154F8  0100               	movlb	0	; () banked
 14573  0154FA  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14574  0154FC  0E03               	movlw	high (_HMIBoard+18)
 14575  0154FE  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14576  015500  0E00               	movlw	0
 14577  015502  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14578  015504  0E02               	movlw	2
 14579  015506  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14580  015508  0E00               	movlw	low _HMI_InitButtons
 14581  01550A  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14582  01550C  0E90               	movlw	high _HMI_InitButtons
 14583  01550E  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14584  015510  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14585  015512  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14586  015514  0EBA               	movlw	low _HMI_LeftSwitch
 14587  015516  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14588  015518  0E8E               	movlw	high _HMI_LeftSwitch
 14589  01551A  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14590  01551C  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 14591  01551E  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14592  015520  0E04               	movlw	low _Event_NULL
 14593  015522  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14594  015524  0E14               	movlw	high _Event_NULL
 14595  015526  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14596  015528  0E00               	movlw	low (_Event_NULL shr (0+16))
 14597  01552A  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14598  01552C  EC75  F0B7         	call	_Button_Init	;wreg free
 14599                           
 14600                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 14601                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 14602  015530  0EA8               	movlw	low (_HMIBoard+8)
 14603  015532  0100               	movlb	0	; () banked
 14604  015534  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14605  015536  0E03               	movlw	high (_HMIBoard+8)
 14606  015538  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14607  01553A  0E00               	movlw	0
 14608  01553C  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14609  01553E  0E02               	movlw	2
 14610  015540  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14611  015542  0E00               	movlw	low _HMI_InitButtons
 14612  015544  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14613  015546  0E90               	movlw	high _HMI_InitButtons
 14614  015548  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14615  01554A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14616  01554C  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14617  01554E  0EA6               	movlw	low _HMI_RightSwitch
 14618  015550  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14619  015552  0E8E               	movlw	high _HMI_RightSwitch
 14620  015554  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14621  015556  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 14622  015558  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14623  01555A  0E04               	movlw	low _Event_NULL
 14624  01555C  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14625  01555E  0E14               	movlw	high _Event_NULL
 14626  015560  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14627  015562  0E00               	movlw	low (_Event_NULL shr (0+16))
 14628  015564  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14629  015566  EC75  F0B7         	call	_Button_Init	;wreg free
 14630                           
 14631                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 14632                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 14633  01556A  0EBC               	movlw	low (_HMIBoard+28)
 14634  01556C  0100               	movlb	0	; () banked
 14635  01556E  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14636  015570  0E03               	movlw	high (_HMIBoard+28)
 14637  015572  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14638  015574  0E00               	movlw	0
 14639  015576  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14640  015578  0E02               	movlw	2
 14641  01557A  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14642  01557C  0E00               	movlw	low _HMI_InitButtons
 14643  01557E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14644  015580  0E90               	movlw	high _HMI_InitButtons
 14645  015582  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14646  015584  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14647  015586  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14648  015588  0E92               	movlw	low _HMI_UpSwitch
 14649  01558A  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14650  01558C  0E8E               	movlw	high _HMI_UpSwitch
 14651  01558E  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14652  015590  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 14653  015592  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14654  015594  0E04               	movlw	low _Event_NULL
 14655  015596  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14656  015598  0E14               	movlw	high _Event_NULL
 14657  01559A  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14658  01559C  0E00               	movlw	low (_Event_NULL shr (0+16))
 14659  01559E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14660  0155A0  EC75  F0B7         	call	_Button_Init	;wreg free
 14661                           
 14662                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 14663                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 14664  0155A4  0EC6               	movlw	low (_HMIBoard+38)
 14665  0155A6  0100               	movlb	0	; () banked
 14666  0155A8  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14667  0155AA  0E03               	movlw	high (_HMIBoard+38)
 14668  0155AC  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14669  0155AE  0E00               	movlw	0
 14670  0155B0  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14671  0155B2  0E02               	movlw	2
 14672  0155B4  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14673  0155B6  0E00               	movlw	low _HMI_InitButtons
 14674  0155B8  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14675  0155BA  0E90               	movlw	high _HMI_InitButtons
 14676  0155BC  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14677  0155BE  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14678  0155C0  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14679  0155C2  0E7E               	movlw	low _HMI_DownSwitch
 14680  0155C4  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14681  0155C6  0E8E               	movlw	high _HMI_DownSwitch
 14682  0155C8  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14683  0155CA  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 14684  0155CC  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14685  0155CE  0E04               	movlw	low _Event_NULL
 14686  0155D0  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14687  0155D2  0E14               	movlw	high _Event_NULL
 14688  0155D4  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14689  0155D6  0E00               	movlw	low (_Event_NULL shr (0+16))
 14690  0155D8  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14691  0155DA  EC75  F0B7         	call	_Button_Init	;wreg free
 14692                           
 14693                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 14694  0155DE  0EA0               	movlw	160
 14695  0155E0  0100               	movlb	0	; () banked
 14696  0155E2  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 14697  0155E4  0E86               	movlw	134
 14698  0155E6  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 14699  0155E8  0E01               	movlw	1
 14700  0155EA  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 14701  0155EC  0E00               	movlw	0
 14702  0155EE  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 14703  0155F0  0E00               	movlw	0
 14704  0155F2  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 14705  0155F4  0E02               	movlw	2
 14706  0155F6  6F92               	movwf	SPI_Init@pMode& (0+255),b
 14707  0155F8  ECF2  F098         	call	_SPI_Init	;wreg free
 14708                           
 14709                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 14710  0155FC  0EC8               	movlw	low _SPI1
 14711  0155FE  0100               	movlb	0	; () banked
 14712  015600  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 14713  015602  0E02               	movlw	high _SPI1
 14714  015604  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 14715  015606  ECDC  F0BE         	call	_SPI_MinSpeed	;wreg free
 14716                           
 14717                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 14718  01560A  0E00               	movlw	0
 14719  01560C  0100               	movlb	0	; () banked
 14720  01560E  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 14721  015610  0E00               	movlw	0
 14722  015612  6FA8               	movwf	HMI_Init@in& (0+255),b
 14723  015614                     l17143:
 14724                           
 14725                           ; BSR set to: 0
 14726  015614  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 14727  015616  E10F               	bnz	l1153
 14728  015618  0E08               	movlw	8
 14729  01561A  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 14730  01561C  B0D8               	btfsc	status,0,c
 14731  01561E  0012               	return	
 14732                           
 14733                           ; BSR set to: 0
 14734                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 14735                           
 14736                           ; BSR set to: 0
 14737                           
 14738                           ; BSR set to: 0
 14739  015620  0EA0               	movlw	low _HMIBoard
 14740  015622  25A8               	addwf	HMI_Init@in& (0+255),w,b
 14741  015624  6ED9               	movwf	fsr2l,c
 14742  015626  0E03               	movlw	high _HMIBoard
 14743  015628  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 14744  01562A  6EDA               	movwf	fsr2h,c
 14745  01562C  0E00               	movlw	0
 14746  01562E  6EDF               	movwf	indf2,c
 14747                           
 14748                           ; BSR set to: 0
 14749  015630  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 14750  015632  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 14751  015634  D7EF               	goto	l17143
 14752  015636                     l1153:
 14753                           
 14754                           ; BSR set to: 0
 14755  015636  0012               	return		;funcret
 14756  015638                     __end_of_HMI_Init:
 14757                           	opt stack 0
 14758                           tosu	equ	0xFFF
 14759                           tosh	equ	0xFFE
 14760                           tosl	equ	0xFFD
 14761                           pclath	equ	0xFFA
 14762                           tblptru	equ	0xFF8
 14763                           tblptrh	equ	0xFF7
 14764                           tblptrl	equ	0xFF6
 14765                           tablat	equ	0xFF5
 14766                           prodh	equ	0xFF4
 14767                           prodl	equ	0xFF3
 14768                           intcon	equ	0xFF2
 14769                           postinc0	equ	0xFEE
 14770                           wreg	equ	0xFE8
 14771                           indf1	equ	0xFE7
 14772                           postdec1	equ	0xFE5
 14773                           fsr1h	equ	0xFE2
 14774                           fsr1l	equ	0xFE1
 14775                           indf2	equ	0xFDF
 14776                           postinc2	equ	0xFDE
 14777                           postdec2	equ	0xFDD
 14778                           plusw2	equ	0xFDB
 14779                           fsr2h	equ	0xFDA
 14780                           fsr2l	equ	0xFD9
 14781                           status	equ	0xFD8
 14782                           
 14783 ;; *************** function _SPI_MinSpeed *****************
 14784 ;; Defined at:
 14785 ;;		line 190 in file "Library/SPI.c"
 14786 ;; Parameters:    Size  Location     Type
 14787 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 14788 ;;		 -> SPI1(11), 
 14789 ;; Auto vars:     Size  Location     Type
 14790 ;;		None
 14791 ;; Return value:  Size  Location     Type
 14792 ;;                  1    wreg      void 
 14793 ;; Registers used:
 14794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14795 ;; Tracked objects:
 14796 ;;		On entry : 0/0
 14797 ;;		On exit  : 0/0
 14798 ;;		Unchanged: 0/0
 14799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14800 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14803 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14804 ;;Total ram usage:        2 bytes
 14805 ;; Hardware stack levels used:    1
 14806 ;; Hardware stack levels required when called:    9
 14807 ;; This function calls:
 14808 ;;		_Byte_SetBit
 14809 ;;		_Byte_SetQuad
 14810 ;; This function is called by:
 14811 ;;		_HMI_Init
 14812 ;; This function uses a non-reentrant model
 14813 ;;
 14814                           
 14815                           	psect	text67
 14816  017DB8                     __ptext67:
 14817                           	opt stack 0
 14818  017DB8                     _SPI_MinSpeed:
 14819                           	opt stack 20
 14820                           
 14821                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 14822                           
 14823                           ; BSR set to: 0
 14824                           ;incstack = 0
 14825  017DB8  0100               	movlb	0	; () banked
 14826  017DBA  EE20 F006          	lfsr	2,6
 14827  017DBE  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 14828  017DC0  26D9               	addwf	fsr2l,f,c
 14829  017DC2  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 14830  017DC4  22DA               	addwfc	fsr2h,f,c
 14831  017DC6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14832  017DCA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14833  017DCE  0E05               	movlw	5
 14834  017DD0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14835  017DD2  0E00               	movlw	0
 14836  017DD4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14837  017DD6  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 14838                           
 14839                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 14840  017DDA  0100               	movlb	0	; () banked
 14841  017DDC  EE20 F006          	lfsr	2,6
 14842  017DE0  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 14843  017DE2  26D9               	addwf	fsr2l,f,c
 14844  017DE4  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 14845  017DE6  22DA               	addwfc	fsr2h,f,c
 14846  017DE8  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 14847  017DEC  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 14848  017DF0  0E00               	movlw	0
 14849  017DF2  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 14850  017DF4  0E02               	movlw	2
 14851  017DF6  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 14852  017DF8  EC54  F0C6         	call	_Byte_SetQuad	;wreg free
 14853                           
 14854                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 14855  017DFC  0100               	movlb	0	; () banked
 14856  017DFE  EE20 F006          	lfsr	2,6
 14857  017E02  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 14858  017E04  26D9               	addwf	fsr2l,f,c
 14859  017E06  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 14860  017E08  22DA               	addwfc	fsr2h,f,c
 14861  017E0A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14862  017E0E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14863  017E12  0E05               	movlw	5
 14864  017E14  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14865  017E16  0E01               	movlw	1
 14866  017E18  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14867  017E1A  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 14868  017E1E  0012               	return		;funcret
 14869  017E20                     __end_of_SPI_MinSpeed:
 14870                           	opt stack 0
 14871                           tosu	equ	0xFFF
 14872                           tosh	equ	0xFFE
 14873                           tosl	equ	0xFFD
 14874                           pclath	equ	0xFFA
 14875                           tblptru	equ	0xFF8
 14876                           tblptrh	equ	0xFF7
 14877                           tblptrl	equ	0xFF6
 14878                           tablat	equ	0xFF5
 14879                           prodh	equ	0xFF4
 14880                           prodl	equ	0xFF3
 14881                           intcon	equ	0xFF2
 14882                           postinc0	equ	0xFEE
 14883                           wreg	equ	0xFE8
 14884                           indf1	equ	0xFE7
 14885                           postdec1	equ	0xFE5
 14886                           fsr1h	equ	0xFE2
 14887                           fsr1l	equ	0xFE1
 14888                           indf2	equ	0xFDF
 14889                           postinc2	equ	0xFDE
 14890                           postdec2	equ	0xFDD
 14891                           plusw2	equ	0xFDB
 14892                           fsr2h	equ	0xFDA
 14893                           fsr2l	equ	0xFD9
 14894                           status	equ	0xFD8
 14895                           
 14896 ;; *************** function _SPI_Init *****************
 14897 ;; Defined at:
 14898 ;;		line 12 in file "Library/SPI.c"
 14899 ;; Parameters:    Size  Location     Type
 14900 ;;  pClock          4   45[BANK0 ] unsigned long 
 14901 ;;  pChannel        1   49[BANK0 ] enum E6744
 14902 ;;  pMode           1   50[BANK0 ] enum E6748
 14903 ;; Auto vars:     Size  Location     Type
 14904 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 14905 ;;		 -> SPI1(11), SPI2(11), 
 14906 ;; Return value:  Size  Location     Type
 14907 ;;                  1    wreg      void 
 14908 ;; Registers used:
 14909 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14910 ;; Tracked objects:
 14911 ;;		On entry : 0/0
 14912 ;;		On exit  : 0/0
 14913 ;;		Unchanged: 0/0
 14914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14915 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14916 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14918 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14919 ;;Total ram usage:        8 bytes
 14920 ;; Hardware stack levels used:    1
 14921 ;; Hardware stack levels required when called:   12
 14922 ;; This function calls:
 14923 ;;		_Byte_SetBit
 14924 ;;		_Byte_SetQuad
 14925 ;;		_Port_SetPinType
 14926 ;;		_SPI_DCS
 14927 ;;		_SPI_DisableISR
 14928 ;;		_Timer2_Init
 14929 ;; This function is called by:
 14930 ;;		_Configure_GPIOs
 14931 ;;		_HMI_Init
 14932 ;; This function uses a non-reentrant model
 14933 ;;
 14934                           
 14935                           	psect	text68
 14936  0131E4                     __ptext68:
 14937                           	opt stack 0
 14938  0131E4                     _SPI_Init:
 14939                           	opt stack 16
 14940                           
 14941                           ;SPI.c: 14: SPIPtr pInput;
 14942                           ;SPI.c: 16: switch (pChannel)
 14943                           
 14944                           ;incstack = 0
 14945  0131E4  D00A               	goto	l597
 14946  0131E6                     
 14947                           ;SPI.c: 19: pInput = &SPI1;
 14948  0131E6  0EC8               	movlw	low _SPI1
 14949  0131E8  0100               	movlb	0	; () banked
 14950  0131EA  6F93               	movwf	SPI_Init@pInput& (0+255),b
 14951  0131EC  0E02               	movlw	high _SPI1
 14952  0131EE  D003               	goto	L15
 14953  0131F0                     
 14954                           ; BSR set to: 0
 14955                           ;SPI.c: 22: pInput = &SPI2;
 14956                           
 14957                           ; BSR set to: 0
 14958  0131F0  0ED3               	movlw	low _SPI2
 14959  0131F2  6F93               	movwf	SPI_Init@pInput& (0+255),b
 14960  0131F4  0E02               	movlw	high _SPI2
 14961  0131F6                     L15:
 14962  0131F6  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 14963                           
 14964                           ; BSR set to: 0
 14965                           ;SPI.c: 24: };
 14966                           
 14967                           ;SPI.c: 23: break;
 14968  0131F8  D008               	goto	l599
 14969  0131FA                     l597:
 14970                           
 14971                           ; BSR set to: 0
 14972  0131FA  0100               	movlb	0	; () banked
 14973  0131FC  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 14974                           
 14975                           ; Switch size 1, requested type "space"
 14976                           ; Number of cases is 2, Range of values is 0 to 1
 14977                           ; switch strategies available:
 14978                           ; Name         Instructions Cycles
 14979                           ; simple_byte            7     4 (average)
 14980                           ;	Chosen strategy is simple_byte
 14981  0131FE  0A00               	xorlw	0	; case 0
 14982  013200  B4D8               	btfsc	status,2,c
 14983  013202  D7F1               	goto	l598
 14984  013204  0A01               	xorlw	1	; case 1
 14985  013206  B4D8               	btfsc	status,2,c
 14986  013208  D7F3               	goto	l600
 14987  01320A                     l599:
 14988                           
 14989                           ; BSR set to: 0
 14990                           ;SPI.c: 26: pInput->mChannel = pChannel;
 14991                           
 14992                           ; BSR set to: 0
 14993  01320A  EE20 F002          	lfsr	2,2
 14994  01320E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14995  013210  26D9               	addwf	fsr2l,f,c
 14996  013212  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14997  013214  22DA               	addwfc	fsr2h,f,c
 14998  013216  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 14999                           
 15000                           ;SPI.c: 35: switch (pChannel)
 15001  01321A  D093               	goto	l601
 15002  01321C                     
 15003                           ; BSR set to: 0
 15004                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 15005                           
 15006                           ; BSR set to: 0
 15007  01321C  0E79               	movlw	low _PortC
 15008  01321E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15009  013220  0E01               	movlw	high _PortC
 15010  013222  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15011  013224  0E02               	movlw	2
 15012  013226  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15013  013228  0E03               	movlw	3
 15014  01322A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15015  01322C  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
 15016                           
 15017                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 15018  013230  0E79               	movlw	low _PortC
 15019  013232  0100               	movlb	0	; () banked
 15020  013234  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15021  013236  0E01               	movlw	high _PortC
 15022  013238  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15023  01323A  0E03               	movlw	3
 15024  01323C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15025  01323E  0E03               	movlw	3
 15026  013240  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15027  013242  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
 15028                           
 15029                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 15030  013246  0E79               	movlw	low _PortC
 15031  013248  0100               	movlb	0	; () banked
 15032  01324A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15033  01324C  0E01               	movlw	high _PortC
 15034  01324E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15035  013250  0E05               	movlw	5
 15036  013252  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15037  013254  0E03               	movlw	3
 15038  013256  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15039  013258  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
 15040                           
 15041                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 15042  01325C  0E79               	movlw	low _PortC
 15043  01325E  0100               	movlb	0	; () banked
 15044  013260  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15045  013262  0E01               	movlw	high _PortC
 15046  013264  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15047  013266  0E04               	movlw	4
 15048  013268  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15049  01326A  0E00               	movlw	0
 15050  01326C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15051  01326E  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
 15052                           
 15053                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 15054  013272  0100               	movlb	0	; () banked
 15055  013274  EE20 F003          	lfsr	2,3
 15056  013278  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15057  01327A  26D9               	addwf	fsr2l,f,c
 15058  01327C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15059  01327E  22DA               	addwfc	fsr2h,f,c
 15060  013280  0EC7               	movlw	199
 15061  013282  6EDE               	movwf	postinc2,c
 15062  013284  0E0F               	movlw	15
 15063  013286  6EDD               	movwf	postdec2,c
 15064                           
 15065                           ; BSR set to: 0
 15066                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 15067  013288  EE20 F006          	lfsr	2,6
 15068  01328C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15069  01328E  26D9               	addwf	fsr2l,f,c
 15070  013290  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15071  013292  22DA               	addwfc	fsr2h,f,c
 15072  013294  0EC6               	movlw	198
 15073  013296  6EDE               	movwf	postinc2,c
 15074  013298  0E0F               	movlw	15
 15075  01329A  6EDD               	movwf	postdec2,c
 15076                           
 15077                           ; BSR set to: 0
 15078                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 15079  01329C  EE20 F009          	lfsr	2,9
 15080  0132A0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15081  0132A2  26D9               	addwf	fsr2l,f,c
 15082  0132A4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15083  0132A6  22DA               	addwfc	fsr2h,f,c
 15084  0132A8  0EC9               	movlw	201
 15085  0132AA  D047               	goto	L16
 15086  0132AC                     
 15087                           ; BSR set to: 0
 15088                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 15089                           
 15090                           ; BSR set to: 0
 15091  0132AC  0E6F               	movlw	low _PortD
 15092  0132AE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15093  0132B0  0E01               	movlw	high _PortD
 15094  0132B2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15095  0132B4  0E07               	movlw	7
 15096  0132B6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15097  0132B8  0E03               	movlw	3
 15098  0132BA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15099  0132BC  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
 15100                           
 15101                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 15102  0132C0  0E6F               	movlw	low _PortD
 15103  0132C2  0100               	movlb	0	; () banked
 15104  0132C4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15105  0132C6  0E01               	movlw	high _PortD
 15106  0132C8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15107  0132CA  0E06               	movlw	6
 15108  0132CC  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15109  0132CE  0E03               	movlw	3
 15110  0132D0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15111  0132D2  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
 15112                           
 15113                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 15114  0132D6  0E6F               	movlw	low _PortD
 15115  0132D8  0100               	movlb	0	; () banked
 15116  0132DA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15117  0132DC  0E01               	movlw	high _PortD
 15118  0132DE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15119  0132E0  0E04               	movlw	4
 15120  0132E2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15121  0132E4  0E03               	movlw	3
 15122  0132E6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15123  0132E8  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
 15124                           
 15125                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 15126  0132EC  0E6F               	movlw	low _PortD
 15127  0132EE  0100               	movlb	0	; () banked
 15128  0132F0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15129  0132F2  0E01               	movlw	high _PortD
 15130  0132F4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15131  0132F6  0E05               	movlw	5
 15132  0132F8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15133  0132FA  0E00               	movlw	0
 15134  0132FC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15135  0132FE  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
 15136                           
 15137                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 15138  013302  0100               	movlb	0	; () banked
 15139  013304  EE20 F003          	lfsr	2,3
 15140  013308  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15141  01330A  26D9               	addwf	fsr2l,f,c
 15142  01330C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15143  01330E  22DA               	addwfc	fsr2h,f,c
 15144  013310  0E6D               	movlw	109
 15145  013312  6EDE               	movwf	postinc2,c
 15146  013314  0E0F               	movlw	15
 15147  013316  6EDD               	movwf	postdec2,c
 15148                           
 15149                           ; BSR set to: 0
 15150                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 15151  013318  EE20 F006          	lfsr	2,6
 15152  01331C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15153  01331E  26D9               	addwf	fsr2l,f,c
 15154  013320  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15155  013322  22DA               	addwfc	fsr2h,f,c
 15156  013324  0E6C               	movlw	108
 15157  013326  6EDE               	movwf	postinc2,c
 15158  013328  0E0F               	movlw	15
 15159  01332A  6EDD               	movwf	postdec2,c
 15160                           
 15161                           ; BSR set to: 0
 15162                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 15163  01332C  EE20 F009          	lfsr	2,9
 15164  013330  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15165  013332  26D9               	addwf	fsr2l,f,c
 15166  013334  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15167  013336  22DA               	addwfc	fsr2h,f,c
 15168  013338  0E6F               	movlw	111
 15169  01333A                     L16:
 15170  01333A  6EDE               	movwf	postinc2,c
 15171  01333C  0E0F               	movlw	15
 15172  01333E  6EDD               	movwf	postdec2,c
 15173                           
 15174                           ;SPI.c: 68: break;
 15175  013340  D008               	goto	l603
 15176  013342                     l601:
 15177                           
 15178                           ; BSR set to: 0
 15179                           
 15180                           ; BSR set to: 0
 15181  013342  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 15182                           
 15183                           ; Switch size 1, requested type "space"
 15184                           ; Number of cases is 2, Range of values is 0 to 1
 15185                           ; switch strategies available:
 15186                           ; Name         Instructions Cycles
 15187                           ; simple_byte            7     4 (average)
 15188                           ;	Chosen strategy is simple_byte
 15189  013344  0A00               	xorlw	0	; case 0
 15190  013346  B4D8               	btfsc	status,2,c
 15191  013348  D769               	goto	l602
 15192  01334A  0A01               	xorlw	1	; case 1
 15193  01334C  A4D8               	btfss	status,2,c
 15194  01334E  0012               	return	
 15195  013350  D7AD               	goto	l604
 15196  013352                     l603:
 15197                           
 15198                           ; BSR set to: 0
 15199                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 15200                           
 15201                           ; BSR set to: 0
 15202  013352  EE20 F006          	lfsr	2,6
 15203  013356  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15204  013358  26D9               	addwf	fsr2l,f,c
 15205  01335A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15206  01335C  22DA               	addwfc	fsr2h,f,c
 15207  01335E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15208  013362  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15209  013366  0E05               	movlw	5
 15210  013368  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15211  01336A  0E00               	movlw	0
 15212  01336C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15213  01336E  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 15214                           
 15215                           ;SPI.c: 77: switch(pMode)
 15216  013372  D08C               	goto	l607
 15217  013374                     
 15218                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 15219  013374  0100               	movlb	0	; () banked
 15220  013376  EE20 F006          	lfsr	2,6
 15221  01337A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15222  01337C  26D9               	addwf	fsr2l,f,c
 15223  01337E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15224  013380  22DA               	addwfc	fsr2h,f,c
 15225  013382  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15226  013386  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15227  01338A  0E04               	movlw	4
 15228  01338C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15229  01338E  0E00               	movlw	0
 15230  013390  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15231  013392  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 15232                           
 15233                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 15234  013396  0100               	movlb	0	; () banked
 15235  013398  EE20 F003          	lfsr	2,3
 15236  01339C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15237  01339E  26D9               	addwf	fsr2l,f,c
 15238  0133A0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15239  0133A2  22DA               	addwfc	fsr2h,f,c
 15240  0133A4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15241  0133A8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15242  0133AC  0E06               	movlw	6
 15243  0133AE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15244  0133B0  0E00               	movlw	0
 15245  0133B2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15246  0133B4  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 15247                           
 15248                           ;SPI.c: 82: break;
 15249  0133B8  D078               	goto	l609
 15250  0133BA                     
 15251                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 15252  0133BA  0100               	movlb	0	; () banked
 15253  0133BC  EE20 F006          	lfsr	2,6
 15254  0133C0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15255  0133C2  26D9               	addwf	fsr2l,f,c
 15256  0133C4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15257  0133C6  22DA               	addwfc	fsr2h,f,c
 15258  0133C8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15259  0133CC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15260  0133D0  0E04               	movlw	4
 15261  0133D2  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15262  0133D4  0E00               	movlw	0
 15263  0133D6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15264  0133D8  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 15265                           
 15266                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 15267  0133DC  0100               	movlb	0	; () banked
 15268  0133DE  EE20 F003          	lfsr	2,3
 15269  0133E2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15270  0133E4  26D9               	addwf	fsr2l,f,c
 15271  0133E6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15272  0133E8  22DA               	addwfc	fsr2h,f,c
 15273  0133EA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15274  0133EE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15275  0133F2  0E06               	movlw	6
 15276  0133F4  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15277  0133F6  0E01               	movlw	1
 15278  0133F8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15279  0133FA  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 15280                           
 15281                           ;SPI.c: 86: break;
 15282  0133FE  D055               	goto	l609
 15283  013400                     
 15284                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 15285  013400  0100               	movlb	0	; () banked
 15286  013402  EE20 F006          	lfsr	2,6
 15287  013406  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15288  013408  26D9               	addwf	fsr2l,f,c
 15289  01340A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15290  01340C  22DA               	addwfc	fsr2h,f,c
 15291  01340E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15292  013412  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15293  013416  0E04               	movlw	4
 15294  013418  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15295  01341A  0E01               	movlw	1
 15296  01341C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15297  01341E  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 15298                           
 15299                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 15300  013422  0100               	movlb	0	; () banked
 15301  013424  EE20 F003          	lfsr	2,3
 15302  013428  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15303  01342A  26D9               	addwf	fsr2l,f,c
 15304  01342C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15305  01342E  22DA               	addwfc	fsr2h,f,c
 15306  013430  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15307  013434  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15308  013438  0E06               	movlw	6
 15309  01343A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15310  01343C  0E00               	movlw	0
 15311  01343E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15312  013440  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 15313                           
 15314                           ;SPI.c: 90: break;
 15315  013444  D032               	goto	l609
 15316  013446                     
 15317                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 15318  013446  0100               	movlb	0	; () banked
 15319  013448  EE20 F006          	lfsr	2,6
 15320  01344C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15321  01344E  26D9               	addwf	fsr2l,f,c
 15322  013450  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15323  013452  22DA               	addwfc	fsr2h,f,c
 15324  013454  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15325  013458  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15326  01345C  0E04               	movlw	4
 15327  01345E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15328  013460  0E01               	movlw	1
 15329  013462  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15330  013464  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 15331                           
 15332                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 15333  013468  0100               	movlb	0	; () banked
 15334  01346A  EE20 F003          	lfsr	2,3
 15335  01346E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15336  013470  26D9               	addwf	fsr2l,f,c
 15337  013472  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15338  013474  22DA               	addwfc	fsr2h,f,c
 15339  013476  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15340  01347A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15341  01347E  0E06               	movlw	6
 15342  013480  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15343  013482  0E01               	movlw	1
 15344  013484  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15345  013486  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 15346                           
 15347                           ;SPI.c: 94: break;
 15348  01348A  D00F               	goto	l609
 15349  01348C                     l607:
 15350  01348C  0100               	movlb	0	; () banked
 15351  01348E  5192               	movf	SPI_Init@pMode& (0+255),w,b
 15352                           
 15353                           ; Switch size 1, requested type "space"
 15354                           ; Number of cases is 4, Range of values is 0 to 3
 15355                           ; switch strategies available:
 15356                           ; Name         Instructions Cycles
 15357                           ; simple_byte           13     7 (average)
 15358                           ;	Chosen strategy is simple_byte
 15359  013490  0A00               	xorlw	0	; case 0
 15360  013492  B4D8               	btfsc	status,2,c
 15361  013494  D76F               	goto	l608
 15362  013496  0A01               	xorlw	1	; case 1
 15363  013498  B4D8               	btfsc	status,2,c
 15364  01349A  D78F               	goto	l610
 15365  01349C  0A03               	xorlw	3	; case 2
 15366  01349E  B4D8               	btfsc	status,2,c
 15367  0134A0  D7AF               	goto	l611
 15368  0134A2  0A01               	xorlw	1	; case 3
 15369  0134A4  A4D8               	btfss	status,2,c
 15370  0134A6  0012               	return	
 15371  0134A8  D7CE               	goto	l612
 15372  0134AA                     l609:
 15373                           
 15374                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 15375                           
 15376                           ; BSR set to: 0
 15377  0134AA  0100               	movlb	0	; () banked
 15378  0134AC  EE20 F006          	lfsr	2,6
 15379  0134B0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15380  0134B2  26D9               	addwf	fsr2l,f,c
 15381  0134B4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15382  0134B6  22DA               	addwfc	fsr2h,f,c
 15383  0134B8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15384  0134BC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15385  0134C0  0E07               	movlw	7
 15386  0134C2  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15387  0134C4  0E00               	movlw	0
 15388  0134C6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15389  0134C8  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 15390                           
 15391                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 15392  0134CC  0100               	movlb	0	; () banked
 15393  0134CE  EE20 F006          	lfsr	2,6
 15394  0134D2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15395  0134D4  26D9               	addwf	fsr2l,f,c
 15396  0134D6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15397  0134D8  22DA               	addwfc	fsr2h,f,c
 15398  0134DA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15399  0134DE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15400  0134E2  0E06               	movlw	6
 15401  0134E4  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15402  0134E6  0E00               	movlw	0
 15403  0134E8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15404  0134EA  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 15405                           
 15406                           ;SPI.c: 106: Timer2_Init(pClock);
 15407  0134EE  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 15408  0134F2  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 15409  0134F6  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 15410  0134FA  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 15411  0134FE  ECE9  F0AF         	call	_Timer2_Init	;wreg free
 15412                           
 15413                           ;SPI.c: 112: SPI_DisableISR(pInput);
 15414  013502  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 15415  013506  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 15416  01350A  ECD0  F0C5         	call	_SPI_DisableISR	;wreg free
 15417                           
 15418                           ;SPI.c: 116: switch (pChannel)
 15419  01350E  D004               	goto	l614
 15420  013510                     l615:
 15421                           
 15422                           ; BSR set to: 0
 15423  013510  869F               	bsf	3999,3,c	;volatile
 15424  013512  D00B               	goto	l616
 15425  013514                     l617:
 15426                           
 15427                           ; BSR set to: 0
 15428  013514  8EA5               	bsf	4005,7,c	;volatile
 15429  013516  D009               	goto	l616
 15430  013518                     l614:
 15431                           
 15432                           ; BSR set to: 0
 15433  013518  0100               	movlb	0	; () banked
 15434  01351A  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 15435                           
 15436                           ; Switch size 1, requested type "space"
 15437                           ; Number of cases is 2, Range of values is 0 to 1
 15438                           ; switch strategies available:
 15439                           ; Name         Instructions Cycles
 15440                           ; simple_byte            7     4 (average)
 15441                           ;	Chosen strategy is simple_byte
 15442  01351C  0A00               	xorlw	0	; case 0
 15443  01351E  B4D8               	btfsc	status,2,c
 15444  013520  D7F7               	goto	l615
 15445  013522  0A01               	xorlw	1	; case 1
 15446  013524  A4D8               	btfss	status,2,c
 15447  013526  0012               	return	
 15448  013528  D7F5               	goto	l617
 15449  01352A                     l616:
 15450                           
 15451                           ; BSR set to: 0
 15452                           ;SPI.c: 124: SPI_DCS(pInput);
 15453                           
 15454                           ; BSR set to: 0
 15455  01352A  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 15456  01352E  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 15457  013532  EC43  F0C5         	call	_SPI_DCS	;wreg free
 15458                           
 15459                           ;SPI.c: 126: pInput->mBusy = 0;
 15460  013536  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 15461  01353A  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 15462  01353E  0E00               	movlw	0
 15463  013540  6EDF               	movwf	indf2,c
 15464                           
 15465                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 15466  013542  0100               	movlb	0	; () banked
 15467  013544  EE20 F006          	lfsr	2,6
 15468  013548  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15469  01354A  26D9               	addwf	fsr2l,f,c
 15470  01354C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15471  01354E  22DA               	addwfc	fsr2h,f,c
 15472  013550  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15473  013554  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15474  013558  0E00               	movlw	0
 15475  01355A  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 15476  01355C  0E03               	movlw	3
 15477  01355E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15478  013560  EC54  F0C6         	call	_Byte_SetQuad	;wreg free
 15479                           
 15480                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 15481  013564  0100               	movlb	0	; () banked
 15482  013566  EE20 F006          	lfsr	2,6
 15483  01356A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 15484  01356C  26D9               	addwf	fsr2l,f,c
 15485  01356E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 15486  013570  22DA               	addwfc	fsr2h,f,c
 15487  013572  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15488  013576  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15489  01357A  0E05               	movlw	5
 15490  01357C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15491  01357E  0E01               	movlw	1
 15492  013580  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15493  013582  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 15494  013586  0012               	return		;funcret
 15495  013588                     __end_of_SPI_Init:
 15496                           	opt stack 0
 15497                           tosu	equ	0xFFF
 15498                           tosh	equ	0xFFE
 15499                           tosl	equ	0xFFD
 15500                           pclath	equ	0xFFA
 15501                           tblptru	equ	0xFF8
 15502                           tblptrh	equ	0xFF7
 15503                           tblptrl	equ	0xFF6
 15504                           tablat	equ	0xFF5
 15505                           prodh	equ	0xFF4
 15506                           prodl	equ	0xFF3
 15507                           intcon	equ	0xFF2
 15508                           postinc0	equ	0xFEE
 15509                           wreg	equ	0xFE8
 15510                           indf1	equ	0xFE7
 15511                           postdec1	equ	0xFE5
 15512                           fsr1h	equ	0xFE2
 15513                           fsr1l	equ	0xFE1
 15514                           indf2	equ	0xFDF
 15515                           postinc2	equ	0xFDE
 15516                           postdec2	equ	0xFDD
 15517                           plusw2	equ	0xFDB
 15518                           fsr2h	equ	0xFDA
 15519                           fsr2l	equ	0xFD9
 15520                           status	equ	0xFD8
 15521                           
 15522 ;; *************** function _Timer2_Init *****************
 15523 ;; Defined at:
 15524 ;;		line 10 in file "Library/Timer2.c"
 15525 ;; Parameters:    Size  Location     Type
 15526 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 15527 ;; Auto vars:     Size  Location     Type
 15528 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 15529 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 15530 ;;  RDIV            4   18[BANK0 ] unsigned long 
 15531 ;; Return value:  Size  Location     Type
 15532 ;;                  1    wreg      void 
 15533 ;; Registers used:
 15534 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15535 ;; Tracked objects:
 15536 ;;		On entry : 0/0
 15537 ;;		On exit  : 0/0
 15538 ;;		Unchanged: 0/0
 15539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15540 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15541 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15542 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15543 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15544 ;;Total ram usage:       17 bytes
 15545 ;; Hardware stack levels used:    1
 15546 ;; Hardware stack levels required when called:    8
 15547 ;; This function calls:
 15548 ;;		_Timer2_Clear
 15549 ;;		___lldiv
 15550 ;; This function is called by:
 15551 ;;		_SPI_Init
 15552 ;; This function uses a non-reentrant model
 15553 ;;
 15554                           
 15555                           	psect	text69
 15556  015FD2                     __ptext69:
 15557                           	opt stack 0
 15558  015FD2                     _Timer2_Init:
 15559                           	opt stack 19
 15560                           
 15561                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 15562                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 15563                           ;Timer2.c: 14: static UINT8 PRE = 0;
 15564                           ;Timer2.c: 15: static UINT32 DIV = 0;
 15565                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 15566                           
 15567                           ;incstack = 0
 15568  015FD2  0E00               	movlw	0
 15569  015FD4  0100               	movlb	0	; () banked
 15570  015FD6  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 15571  015FD8  0E6C               	movlw	108
 15572  015FDA  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 15573  015FDC  0EDC               	movlw	220
 15574  015FDE  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 15575  015FE0  0E02               	movlw	2
 15576  015FE2  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 15577                           
 15578                           ; BSR set to: 0
 15579                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 15580                           ;Timer2.c: 20: pFrequency *= 2;
 15581  015FE4  90D8               	bcf	status,0,c
 15582  015FE6  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 15583  015FE8  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 15584  015FEA  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 15585  015FEC  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 15586                           
 15587                           ; BSR set to: 0
 15588                           ;Timer2.c: 23: pCPUClock /= 4;
 15589  015FEE  0E02               	movlw	2
 15590  015FF0  6F71               	movwf	??_Timer2_Init& (0+255),b
 15591  015FF2                     u13375:
 15592  015FF2  90D8               	bcf	status,0,c
 15593  015FF4  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 15594  015FF6  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 15595  015FF8  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 15596  015FFA  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 15597  015FFC  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 15598  015FFE  D7F9               	goto	u13375
 15599                           
 15600                           ; BSR set to: 0
 15601                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 15602  016000  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 15603  016004  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 15604  016008  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 15605  01600C  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 15606  016010  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 15607  016014  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 15608  016018  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 15609  01601C  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 15610  016020  ECE6  F0BB         	call	___lldiv	;wreg free
 15611  016024  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 15612  016028  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 15613  01602C  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 15614  016030  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 15615                           
 15616                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 15617  016034  D00E               	goto	l1828
 15618  016036                     l15889:
 15619                           
 15620                           ;Timer2.c: 28: {
 15621                           ;Timer2.c: 29: RDIV = 0;
 15622  016036  0E00               	movlw	0
 15623  016038  0100               	movlb	0	; () banked
 15624  01603A  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 15625  01603C  0E00               	movlw	0
 15626  01603E  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 15627  016040  0E00               	movlw	0
 15628  016042  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 15629  016044  0E00               	movlw	0
 15630  016046  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 15631                           
 15632                           ; BSR set to: 0
 15633                           ;Timer2.c: 30: INDEX ++;
 15634  016048  2A3E               	incf	Timer2_Init@INDEX,f,c
 15635                           
 15636                           ; BSR set to: 0
 15637                           ;Timer2.c: 31: if (INDEX >= 3)
 15638  01604A  0E02               	movlw	2
 15639  01604C  643E               	cpfsgt	Timer2_Init@INDEX,c
 15640  01604E  D001               	goto	l1828
 15641  016050  D023               	goto	u13390
 15642  016052                     l1828:
 15643                           
 15644                           ; BSR set to: 0
 15645                           
 15646                           ; BSR set to: 0
 15647  016052  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 15648  016056  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 15649  01605A  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 15650  01605E  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 15651  016062  503E               	movf	Timer2_Init@INDEX,w,c
 15652  016064  0D01               	mullw	1
 15653  016066  0E24               	movlw	low Timer2_Init@PRESCALE
 15654  016068  24F3               	addwf	prodl,w,c
 15655  01606A  6EF6               	movwf	tblptrl,c
 15656  01606C  0EFC               	movlw	high Timer2_Init@PRESCALE
 15657  01606E  20F4               	addwfc	prodh,w,c
 15658  016070  6EF7               	movwf	tblptrh,c
 15659  016072                     	if	1	;There are 3 active tblptr bytes
 15660  016072  6AF8               	clrf	tblptru,c
 15661  016074  0E00               	movlw	low (__mediumconst shr (0+16))
 15662  016076  22F8               	addwfc	tblptru,f,c
 15663  016078                     	endif
 15664  016078  0008               	tblrd		*
 15665  01607A  50F5               	movf	tablat,w,c
 15666  01607C  0100               	movlb	0	; () banked
 15667  01607E  6F64               	movwf	___lldiv@divisor& (0+255),b
 15668  016080  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 15669  016082  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 15670  016084  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 15671  016086  ECE6  F0BB         	call	___lldiv	;wreg free
 15672  01608A  0100               	movlb	0	; () banked
 15673  01608C  5163               	movf	(?___lldiv+3)& (0+255),w,b
 15674  01608E  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 15675  016090  E1D2               	bnz	l15889
 15676  016092  0561               	decf	(?___lldiv+1)& (0+255),w,b
 15677  016094  B0D8               	btfsc	status,0,c
 15678  016096  D7CF               	goto	l1827
 15679  016098                     u13390:
 15680                           
 15681                           ; BSR set to: 0
 15682                           ;Timer2.c: 33: }
 15683                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 15684                           
 15685                           ; BSR set to: 0
 15686  016098  50CA               	movf	4042,w,c	;volatile
 15687  01609A  183E               	xorwf	Timer2_Init@INDEX,w,c
 15688  01609C  0BFC               	andlw	-4
 15689  01609E  183E               	xorwf	Timer2_Init@INDEX,w,c
 15690  0160A0  6ECA               	movwf	4042,c	;volatile
 15691                           
 15692                           ; BSR set to: 0
 15693                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 15694  0160A2  84CA               	bsf	4042,2,c	;volatile
 15695                           
 15696                           ; BSR set to: 0
 15697                           ;Timer2.c: 44: Timer2_Clear();
 15698  0160A4  ECF2  F0C7         	call	_Timer2_Clear	;wreg free
 15699                           
 15700                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 15701  0160A8  503E               	movf	Timer2_Init@INDEX,w,c
 15702  0160AA  0D01               	mullw	1
 15703  0160AC  0E24               	movlw	low Timer2_Init@PRESCALE
 15704  0160AE  24F3               	addwf	prodl,w,c
 15705  0160B0  6EF6               	movwf	tblptrl,c
 15706  0160B2  0EFC               	movlw	high Timer2_Init@PRESCALE
 15707  0160B4  20F4               	addwfc	prodh,w,c
 15708  0160B6  6EF7               	movwf	tblptrh,c
 15709  0160B8                     	if	1	;There are 3 active tblptr bytes
 15710  0160B8  6AF8               	clrf	tblptru,c
 15711  0160BA  0E00               	movlw	low (__mediumconst shr (0+16))
 15712  0160BC  22F8               	addwfc	tblptru,f,c
 15713  0160BE                     	endif
 15714  0160BE  0008               	tblrd		*
 15715  0160C0  CFF5 F03D          	movff	tablat,Timer2_Init@PRE
 15716                           
 15717                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 15718  0160C4  0EFF               	movlw	255
 15719  0160C6  0100               	movlb	0	; () banked
 15720  0160C8  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 15721  0160CA  0101               	movlb	1	; () banked
 15722  0160CC  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 15723  0160CE  0EFF               	movlw	255
 15724  0160D0  0100               	movlb	0	; () banked
 15725  0160D2  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 15726  0160D4  0101               	movlb	1	; () banked
 15727  0160D6  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 15728  0160D8  0EFF               	movlw	255
 15729  0160DA  0100               	movlb	0	; () banked
 15730  0160DC  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 15731  0160DE  0101               	movlb	1	; () banked
 15732  0160E0  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 15733  0160E2  0EFF               	movlw	255
 15734  0160E4  0100               	movlb	0	; () banked
 15735  0160E6  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 15736  0160E8  0101               	movlb	1	; () banked
 15737  0160EA  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 15738                           
 15739                           ; BSR set to: 1
 15740                           ;Timer2.c: 48: INDEX = DIV/PRE;
 15741  0160EC  C100  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 15742  0160F0  C101  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 15743  0160F4  C102  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 15744  0160F8  C103  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 15745  0160FC  503D               	movf	Timer2_Init@PRE,w,c
 15746  0160FE  0100               	movlb	0	; () banked
 15747  016100  6F64               	movwf	___lldiv@divisor& (0+255),b
 15748  016102  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 15749  016104  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 15750  016106  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 15751  016108  ECE6  F0BB         	call	___lldiv	;wreg free
 15752  01610C  0100               	movlb	0	; () banked
 15753  01610E  5160               	movf	?___lldiv& (0+255),w,b
 15754  016110  6E3E               	movwf	Timer2_Init@INDEX,c
 15755                           
 15756                           ; BSR set to: 0
 15757                           ;Timer2.c: 49: PR2 = INDEX;
 15758  016112  C03E  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 15759                           
 15760                           ; BSR set to: 0
 15761  016116  0012               	return		;funcret
 15762  016118                     __end_of_Timer2_Init:
 15763                           	opt stack 0
 15764                           tosu	equ	0xFFF
 15765                           tosh	equ	0xFFE
 15766                           tosl	equ	0xFFD
 15767                           pclath	equ	0xFFA
 15768                           tblptru	equ	0xFF8
 15769                           tblptrh	equ	0xFF7
 15770                           tblptrl	equ	0xFF6
 15771                           tablat	equ	0xFF5
 15772                           prodh	equ	0xFF4
 15773                           prodl	equ	0xFF3
 15774                           intcon	equ	0xFF2
 15775                           postinc0	equ	0xFEE
 15776                           wreg	equ	0xFE8
 15777                           indf1	equ	0xFE7
 15778                           postdec1	equ	0xFE5
 15779                           fsr1h	equ	0xFE2
 15780                           fsr1l	equ	0xFE1
 15781                           indf2	equ	0xFDF
 15782                           postinc2	equ	0xFDE
 15783                           postdec2	equ	0xFDD
 15784                           plusw2	equ	0xFDB
 15785                           fsr2h	equ	0xFDA
 15786                           fsr2l	equ	0xFD9
 15787                           status	equ	0xFD8
 15788                           
 15789 ;; *************** function ___lldiv *****************
 15790 ;; Defined at:
 15791 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
 15792 ;; Parameters:    Size  Location     Type
 15793 ;;  dividend        4    0[BANK0 ] unsigned long 
 15794 ;;  divisor         4    4[BANK0 ] unsigned long 
 15795 ;; Auto vars:     Size  Location     Type
 15796 ;;  quotient        4    8[BANK0 ] unsigned long 
 15797 ;;  counter         1   12[BANK0 ] unsigned char 
 15798 ;; Return value:  Size  Location     Type
 15799 ;;                  4    0[BANK0 ] unsigned long 
 15800 ;; Registers used:
 15801 ;;		wreg, status,2, status,0
 15802 ;; Tracked objects:
 15803 ;;		On entry : 0/0
 15804 ;;		On exit  : 0/0
 15805 ;;		Unchanged: 0/0
 15806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15807 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15808 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15810 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15811 ;;Total ram usage:       13 bytes
 15812 ;; Hardware stack levels used:    1
 15813 ;; Hardware stack levels required when called:    7
 15814 ;; This function calls:
 15815 ;;		Nothing
 15816 ;; This function is called by:
 15817 ;;		_Timer2_Init
 15818 ;;		_rand_between
 15819 ;;		_I2C_Init
 15820 ;;		_Timer0_Init
 15821 ;; This function uses a non-reentrant model
 15822 ;;
 15823                           
 15824                           	psect	text70
 15825  0177CC                     __ptext70:
 15826                           	opt stack 0
 15827  0177CC                     ___lldiv:
 15828                           	opt stack 19
 15829                           
 15830                           ; BSR set to: 0
 15831                           ;incstack = 0
 15832  0177CC  0E00               	movlw	0
 15833  0177CE  0100               	movlb	0	; () banked
 15834  0177D0  6F68               	movwf	___lldiv@quotient& (0+255),b
 15835  0177D2  0E00               	movlw	0
 15836  0177D4  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 15837  0177D6  0E00               	movlw	0
 15838  0177D8  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 15839  0177DA  0E00               	movlw	0
 15840  0177DC  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 15841                           
 15842                           ; BSR set to: 0
 15843  0177DE  5164               	movf	___lldiv@divisor& (0+255),w,b
 15844  0177E0  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 15845  0177E2  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 15846  0177E4  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 15847  0177E6  B4D8               	btfsc	status,2,c
 15848  0177E8  D02A               	goto	l2972
 15849                           
 15850                           ; BSR set to: 0
 15851  0177EA  0E01               	movlw	1
 15852  0177EC  6F6C               	movwf	___lldiv@counter& (0+255),b
 15853  0177EE  D006               	goto	l2967
 15854  0177F0                     
 15855                           ; BSR set to: 0
 15856                           
 15857                           ; BSR set to: 0
 15858  0177F0  90D8               	bcf	status,0,c
 15859  0177F2  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 15860  0177F4  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 15861  0177F6  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 15862  0177F8  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 15863  0177FA  2B6C               	incf	___lldiv@counter& (0+255),f,b
 15864  0177FC                     l2967:
 15865                           
 15866                           ; BSR set to: 0
 15867                           
 15868                           ; BSR set to: 0
 15869  0177FC  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 15870  0177FE  D7F8               	goto	l2968
 15871  017800                     u13270:
 15872                           
 15873                           ; BSR set to: 0
 15874                           
 15875                           ; BSR set to: 0
 15876                           
 15877                           ; BSR set to: 0
 15878  017800  90D8               	bcf	status,0,c
 15879  017802  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 15880  017804  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 15881  017806  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 15882  017808  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 15883                           
 15884                           ; BSR set to: 0
 15885  01780A  5164               	movf	___lldiv@divisor& (0+255),w,b
 15886  01780C  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 15887  01780E  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15888  017810  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 15889  017812  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15890  017814  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 15891  017816  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15892  017818  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 15893  01781A  A0D8               	btfss	status,0,c
 15894  01781C  D009               	goto	l2971
 15895                           
 15896                           ; BSR set to: 0
 15897  01781E  5164               	movf	___lldiv@divisor& (0+255),w,b
 15898  017820  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 15899  017822  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15900  017824  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 15901  017826  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15902  017828  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 15903  01782A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15904  01782C  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 15905                           
 15906                           ; BSR set to: 0
 15907  01782E  8168               	bsf	___lldiv@quotient& (0+255),0,b
 15908  017830                     l2971:
 15909                           
 15910                           ; BSR set to: 0
 15911                           
 15912                           ; BSR set to: 0
 15913  017830  90D8               	bcf	status,0,c
 15914  017832  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 15915  017834  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 15916  017836  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 15917  017838  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 15918                           
 15919                           ; BSR set to: 0
 15920  01783A  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 15921  01783C  D7E1               	goto	u13270
 15922  01783E                     l2972:
 15923                           
 15924                           ; BSR set to: 0
 15925                           
 15926                           ; BSR set to: 0
 15927  01783E  C068  F060         	movff	___lldiv@quotient,?___lldiv
 15928  017842  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 15929  017846  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 15930  01784A  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 15931                           
 15932                           ; BSR set to: 0
 15933  01784E  0012               	return		;funcret
 15934  017850                     __end_of___lldiv:
 15935                           	opt stack 0
 15936                           tosu	equ	0xFFF
 15937                           tosh	equ	0xFFE
 15938                           tosl	equ	0xFFD
 15939                           pclath	equ	0xFFA
 15940                           tblptru	equ	0xFF8
 15941                           tblptrh	equ	0xFF7
 15942                           tblptrl	equ	0xFF6
 15943                           tablat	equ	0xFF5
 15944                           prodh	equ	0xFF4
 15945                           prodl	equ	0xFF3
 15946                           intcon	equ	0xFF2
 15947                           postinc0	equ	0xFEE
 15948                           wreg	equ	0xFE8
 15949                           indf1	equ	0xFE7
 15950                           postdec1	equ	0xFE5
 15951                           fsr1h	equ	0xFE2
 15952                           fsr1l	equ	0xFE1
 15953                           indf2	equ	0xFDF
 15954                           postinc2	equ	0xFDE
 15955                           postdec2	equ	0xFDD
 15956                           plusw2	equ	0xFDB
 15957                           fsr2h	equ	0xFDA
 15958                           fsr2l	equ	0xFD9
 15959                           status	equ	0xFD8
 15960                           
 15961 ;; *************** function _Timer2_Clear *****************
 15962 ;; Defined at:
 15963 ;;		line 3 in file "Library/Timer2.c"
 15964 ;; Parameters:    Size  Location     Type
 15965 ;;		None
 15966 ;; Auto vars:     Size  Location     Type
 15967 ;;		None
 15968 ;; Return value:  Size  Location     Type
 15969 ;;                  1    wreg      void 
 15970 ;; Registers used:
 15971 ;;		None
 15972 ;; Tracked objects:
 15973 ;;		On entry : 0/0
 15974 ;;		On exit  : 0/0
 15975 ;;		Unchanged: 0/0
 15976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15981 ;;Total ram usage:        0 bytes
 15982 ;; Hardware stack levels used:    1
 15983 ;; Hardware stack levels required when called:    7
 15984 ;; This function calls:
 15985 ;;		Nothing
 15986 ;; This function is called by:
 15987 ;;		_Timer2_Init
 15988 ;; This function uses a non-reentrant model
 15989 ;;
 15990                           
 15991                           	psect	text71
 15992  018FE4                     __ptext71:
 15993                           	opt stack 0
 15994  018FE4                     _Timer2_Clear:
 15995                           	opt stack 19
 15996                           
 15997                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 15998                           
 15999                           ; BSR set to: 0
 16000                           ;incstack = 0
 16001  018FE4  929E               	bcf	3998,1,c	;volatile
 16002                           
 16003                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 16004  018FE6  929D               	bcf	3997,1,c	;volatile
 16005                           
 16006                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 16007  018FE8  929F               	bcf	3999,1,c	;volatile
 16008  018FEA  0012               	return		;funcret
 16009  018FEC                     __end_of_Timer2_Clear:
 16010                           	opt stack 0
 16011                           tosu	equ	0xFFF
 16012                           tosh	equ	0xFFE
 16013                           tosl	equ	0xFFD
 16014                           pclath	equ	0xFFA
 16015                           tblptru	equ	0xFF8
 16016                           tblptrh	equ	0xFF7
 16017                           tblptrl	equ	0xFF6
 16018                           tablat	equ	0xFF5
 16019                           prodh	equ	0xFF4
 16020                           prodl	equ	0xFF3
 16021                           intcon	equ	0xFF2
 16022                           postinc0	equ	0xFEE
 16023                           wreg	equ	0xFE8
 16024                           indf1	equ	0xFE7
 16025                           postdec1	equ	0xFE5
 16026                           fsr1h	equ	0xFE2
 16027                           fsr1l	equ	0xFE1
 16028                           indf2	equ	0xFDF
 16029                           postinc2	equ	0xFDE
 16030                           postdec2	equ	0xFDD
 16031                           plusw2	equ	0xFDB
 16032                           fsr2h	equ	0xFDA
 16033                           fsr2l	equ	0xFD9
 16034                           status	equ	0xFD8
 16035                           
 16036 ;; *************** function _SPI_DisableISR *****************
 16037 ;; Defined at:
 16038 ;;		line 181 in file "Library/SPI.c"
 16039 ;; Parameters:    Size  Location     Type
 16040 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16041 ;;		 -> SPI1(11), SPI2(11), 
 16042 ;; Auto vars:     Size  Location     Type
 16043 ;;		None
 16044 ;; Return value:  Size  Location     Type
 16045 ;;                  1    wreg      void 
 16046 ;; Registers used:
 16047 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16048 ;; Tracked objects:
 16049 ;;		On entry : 0/0
 16050 ;;		On exit  : 0/0
 16051 ;;		Unchanged: 0/0
 16052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16053 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16056 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16057 ;;Total ram usage:        2 bytes
 16058 ;; Hardware stack levels used:    1
 16059 ;; Hardware stack levels required when called:    7
 16060 ;; This function calls:
 16061 ;;		Nothing
 16062 ;; This function is called by:
 16063 ;;		_SPI_Init
 16064 ;; This function uses a non-reentrant model
 16065 ;;
 16066                           
 16067                           	psect	text72
 16068  018BA0                     __ptext72:
 16069                           	opt stack 0
 16070  018BA0                     _SPI_DisableISR:
 16071                           	opt stack 20
 16072                           
 16073                           ;SPI.c: 183: switch (pInput->mChannel)
 16074                           
 16075                           ;incstack = 0
 16076  018BA0  D004               	goto	l654
 16077  018BA2                     l655:
 16078                           
 16079                           ; BSR set to: 0
 16080  018BA2  969D               	bcf	3997,3,c	;volatile
 16081  018BA4  0012               	return	
 16082  018BA6                     l657:
 16083                           
 16084                           ; BSR set to: 0
 16085  018BA6  9EA3               	bcf	4003,7,c	;volatile
 16086                           
 16087                           ; BSR set to: 0
 16088                           ;SPI.c: 188: };
 16089                           
 16090                           ; BSR set to: 0
 16091                           
 16092                           ;SPI.c: 187: default: return;
 16093  018BA8  0012               	return	
 16094  018BAA                     l654:
 16095                           
 16096                           ; BSR set to: 0
 16097  018BAA  0100               	movlb	0	; () banked
 16098  018BAC  EE20 F002          	lfsr	2,2
 16099  018BB0  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 16100  018BB2  26D9               	addwf	fsr2l,f,c
 16101  018BB4  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 16102  018BB6  22DA               	addwfc	fsr2h,f,c
 16103  018BB8  50DF               	movf	indf2,w,c
 16104                           
 16105                           ; Switch size 1, requested type "space"
 16106                           ; Number of cases is 2, Range of values is 0 to 1
 16107                           ; switch strategies available:
 16108                           ; Name         Instructions Cycles
 16109                           ; simple_byte            7     4 (average)
 16110                           ;	Chosen strategy is simple_byte
 16111  018BBA  0A00               	xorlw	0	; case 0
 16112  018BBC  B4D8               	btfsc	status,2,c
 16113  018BBE  D7F1               	goto	l655
 16114  018BC0  0A01               	xorlw	1	; case 1
 16115  018BC2  A4D8               	btfss	status,2,c
 16116  018BC4  0012               	return	
 16117  018BC6  D7EF               	goto	l657
 16118  018BC8                     __end_of_SPI_DisableISR:
 16119                           	opt stack 0
 16120                           tosu	equ	0xFFF
 16121                           tosh	equ	0xFFE
 16122                           tosl	equ	0xFFD
 16123                           pclath	equ	0xFFA
 16124                           tblptru	equ	0xFF8
 16125                           tblptrh	equ	0xFF7
 16126                           tblptrl	equ	0xFF6
 16127                           tablat	equ	0xFF5
 16128                           prodh	equ	0xFF4
 16129                           prodl	equ	0xFF3
 16130                           intcon	equ	0xFF2
 16131                           postinc0	equ	0xFEE
 16132                           wreg	equ	0xFE8
 16133                           indf1	equ	0xFE7
 16134                           postdec1	equ	0xFE5
 16135                           fsr1h	equ	0xFE2
 16136                           fsr1l	equ	0xFE1
 16137                           indf2	equ	0xFDF
 16138                           postinc2	equ	0xFDE
 16139                           postdec2	equ	0xFDD
 16140                           plusw2	equ	0xFDB
 16141                           fsr2h	equ	0xFDA
 16142                           fsr2l	equ	0xFD9
 16143                           status	equ	0xFD8
 16144                           
 16145 ;; *************** function _SPI_DCS *****************
 16146 ;; Defined at:
 16147 ;;		line 219 in file "Library/SPI.c"
 16148 ;; Parameters:    Size  Location     Type
 16149 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16150 ;;		 -> SPI1(11), SPI2(11), 
 16151 ;; Auto vars:     Size  Location     Type
 16152 ;;		None
 16153 ;; Return value:  Size  Location     Type
 16154 ;;                  1    wreg      void 
 16155 ;; Registers used:
 16156 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16157 ;; Tracked objects:
 16158 ;;		On entry : 0/0
 16159 ;;		On exit  : 0/0
 16160 ;;		Unchanged: 0/0
 16161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16162 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16165 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16166 ;;Total ram usage:        2 bytes
 16167 ;; Hardware stack levels used:    1
 16168 ;; Hardware stack levels required when called:    7
 16169 ;; This function calls:
 16170 ;;		Nothing
 16171 ;; This function is called by:
 16172 ;;		_SPI_Init
 16173 ;; This function uses a non-reentrant model
 16174 ;;
 16175                           
 16176                           	psect	text73
 16177  018A86                     __ptext73:
 16178                           	opt stack 0
 16179  018A86                     _SPI_DCS:
 16180                           	opt stack 20
 16181                           
 16182                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 16183                           
 16184                           ; BSR set to: 0
 16185                           ;incstack = 0
 16186  018A86  0100               	movlb	0	; () banked
 16187  018A88  EE20 F002          	lfsr	2,2
 16188  018A8C  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 16189  018A8E  26D9               	addwf	fsr2l,f,c
 16190  018A90  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 16191  018A92  22DA               	addwfc	fsr2h,f,c
 16192  018A94  50DF               	movf	indf2,w,c
 16193  018A96  A4D8               	btfss	status,2,c
 16194  018A98  D007               	goto	l673
 16195                           
 16196                           ; BSR set to: 0
 16197                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 16198  018A9A  C17D  FFD9         	movff	_PortC+4,fsr2l
 16199  018A9E  C17E  FFDA         	movff	_PortC+5,fsr2h
 16200  018AA2  0101               	movlb	1	; () banked
 16201  018AA4  84DF               	bsf	indf2,2,c
 16202  018AA6  0012               	return	
 16203  018AA8                     l673:
 16204                           
 16205                           ;SPI.c: 223: else
 16206                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 16207                           
 16208                           ; BSR set to: 1
 16209  018AA8  C173  FFD9         	movff	_PortD+4,fsr2l
 16210  018AAC  C174  FFDA         	movff	_PortD+5,fsr2h
 16211  018AB0  0101               	movlb	1	; () banked
 16212  018AB2  8EDF               	bsf	indf2,7,c
 16213  018AB4  0012               	return	
 16214  018AB6                     __end_of_SPI_DCS:
 16215                           	opt stack 0
 16216                           tosu	equ	0xFFF
 16217                           tosh	equ	0xFFE
 16218                           tosl	equ	0xFFD
 16219                           pclath	equ	0xFFA
 16220                           tblptru	equ	0xFF8
 16221                           tblptrh	equ	0xFF7
 16222                           tblptrl	equ	0xFF6
 16223                           tablat	equ	0xFF5
 16224                           prodh	equ	0xFF4
 16225                           prodl	equ	0xFF3
 16226                           intcon	equ	0xFF2
 16227                           postinc0	equ	0xFEE
 16228                           wreg	equ	0xFE8
 16229                           indf1	equ	0xFE7
 16230                           postdec1	equ	0xFE5
 16231                           fsr1h	equ	0xFE2
 16232                           fsr1l	equ	0xFE1
 16233                           indf2	equ	0xFDF
 16234                           postinc2	equ	0xFDE
 16235                           postdec2	equ	0xFDD
 16236                           plusw2	equ	0xFDB
 16237                           fsr2h	equ	0xFDA
 16238                           fsr2l	equ	0xFD9
 16239                           status	equ	0xFD8
 16240                           
 16241 ;; *************** function _FunctInitButton *****************
 16242 ;; Defined at:
 16243 ;;		line 16 in file "Functions.c"
 16244 ;; Parameters:    Size  Location     Type
 16245 ;;		None
 16246 ;; Auto vars:     Size  Location     Type
 16247 ;;		None
 16248 ;; Return value:  Size  Location     Type
 16249 ;;                  1    wreg      void 
 16250 ;; Registers used:
 16251 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16252 ;; Tracked objects:
 16253 ;;		On entry : 0/0
 16254 ;;		On exit  : 0/0
 16255 ;;		Unchanged: 0/0
 16256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16261 ;;Total ram usage:        0 bytes
 16262 ;; Hardware stack levels used:    1
 16263 ;; Hardware stack levels required when called:   16
 16264 ;; This function calls:
 16265 ;;		_Button_Init
 16266 ;; This function is called by:
 16267 ;;		_main
 16268 ;; This function uses a non-reentrant model
 16269 ;;
 16270                           
 16271                           	psect	text74
 16272  017AB4                     __ptext74:
 16273                           	opt stack 0
 16274  017AB4                     _FunctInitButton:
 16275                           	opt stack 14
 16276                           
 16277                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 16278                           
 16279                           ; BSR set to: 1
 16280                           ;incstack = 0
 16281  017AB4  0EDE               	movlw	low _TestButton
 16282  017AB6  0100               	movlb	0	; () banked
 16283  017AB8  6F9B               	movwf	Button_Init@pInput& (0+255),b
 16284  017ABA  0E02               	movlw	high _TestButton
 16285  017ABC  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 16286  017ABE  0E00               	movlw	0
 16287  017AC0  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16288  017AC2  0E02               	movlw	2
 16289  017AC4  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16290  017AC6  0E12               	movlw	low _MXK_InitTestButton
 16291  017AC8  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 16292  017ACA  0E8E               	movlw	high _MXK_InitTestButton
 16293  017ACC  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16294  017ACE  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 16295  017AD0  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16296  017AD2  0ECE               	movlw	low _MXK_TestButton
 16297  017AD4  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 16298  017AD6  0E8E               	movlw	high _MXK_TestButton
 16299  017AD8  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16300  017ADA  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 16301  017ADC  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16302  017ADE  0EF0               	movlw	low _Event_TestButton
 16303  017AE0  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 16304  017AE2  0E89               	movlw	high _Event_TestButton
 16305  017AE4  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16306  017AE6  0E01               	movlw	low (_Event_TestButton shr (0+16))
 16307  017AE8  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16308  017AEA  EC75  F0B7         	call	_Button_Init	;wreg free
 16309                           
 16310                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 16311  017AEE  0EDA               	movlw	low _DIPSwitch
 16312  017AF0  0100               	movlb	0	; () banked
 16313  017AF2  6F9B               	movwf	Button_Init@pInput& (0+255),b
 16314  017AF4  0E03               	movlw	high _DIPSwitch
 16315  017AF6  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 16316  017AF8  0E00               	movlw	0
 16317  017AFA  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16318  017AFC  0E02               	movlw	2
 16319  017AFE  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16320  017B00  0EFA               	movlw	low _MXK_InitDIPSwitch
 16321  017B02  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 16322  017B04  0E8D               	movlw	high _MXK_InitDIPSwitch
 16323  017B06  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16324  017B08  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 16325  017B0A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16326  017B0C  0E56               	movlw	low _MXK_DIPSwitch
 16327  017B0E  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 16328  017B10  0E8E               	movlw	high _MXK_DIPSwitch
 16329  017B12  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16330  017B14  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 16331  017B16  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16332  017B18  0E18               	movlw	low _Event_DIPSwitch
 16333  017B1A  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 16334  017B1C  0E8C               	movlw	high _Event_DIPSwitch
 16335  017B1E  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16336  017B20  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 16337  017B22  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16338  017B24  EC75  F0B7         	call	_Button_Init	;wreg free
 16339  017B28  0012               	return		;funcret
 16340  017B2A                     __end_of_FunctInitButton:
 16341                           	opt stack 0
 16342                           tosu	equ	0xFFF
 16343                           tosh	equ	0xFFE
 16344                           tosl	equ	0xFFD
 16345                           pclath	equ	0xFFA
 16346                           tblptru	equ	0xFF8
 16347                           tblptrh	equ	0xFF7
 16348                           tblptrl	equ	0xFF6
 16349                           tablat	equ	0xFF5
 16350                           prodh	equ	0xFF4
 16351                           prodl	equ	0xFF3
 16352                           intcon	equ	0xFF2
 16353                           postinc0	equ	0xFEE
 16354                           wreg	equ	0xFE8
 16355                           indf1	equ	0xFE7
 16356                           postdec1	equ	0xFE5
 16357                           fsr1h	equ	0xFE2
 16358                           fsr1l	equ	0xFE1
 16359                           indf2	equ	0xFDF
 16360                           postinc2	equ	0xFDE
 16361                           postdec2	equ	0xFDD
 16362                           plusw2	equ	0xFDB
 16363                           fsr2h	equ	0xFDA
 16364                           fsr2l	equ	0xFD9
 16365                           status	equ	0xFD8
 16366                           
 16367 ;; *************** function _Button_Init *****************
 16368 ;; Defined at:
 16369 ;;		line 18 in file "Library/Button.c"
 16370 ;; Parameters:    Size  Location     Type
 16371 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 16372 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 16373 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 16374 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 16375 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 16376 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 16377 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 16378 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 16379 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 16380 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 16381 ;; Auto vars:     Size  Location     Type
 16382 ;;		None
 16383 ;; Return value:  Size  Location     Type
 16384 ;;                  1    wreg      void 
 16385 ;; Registers used:
 16386 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16387 ;; Tracked objects:
 16388 ;;		On entry : 0/0
 16389 ;;		On exit  : 0/0
 16390 ;;		Unchanged: 0/0
 16391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16392 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16395 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16396 ;;Total ram usage:       13 bytes
 16397 ;; Hardware stack levels used:    1
 16398 ;; Hardware stack levels required when called:   15
 16399 ;; This function calls:
 16400 ;;		_HMI_InitButtons
 16401 ;;		_MXK_InitDIPSwitch
 16402 ;;		_MXK_InitTestButton
 16403 ;; This function is called by:
 16404 ;;		_HMI_Init
 16405 ;;		_FunctInitButton
 16406 ;; This function uses a non-reentrant model
 16407 ;;
 16408                           
 16409                           	psect	text75
 16410  016EEA                     __ptext75:
 16411                           	opt stack 0
 16412  016EEA                     _Button_Init:
 16413                           	opt stack 14
 16414                           
 16415                           ;Button.c: 21: if(pInput==(void*)0)
 16416                           
 16417                           ;incstack = 0
 16418  016EEA  0100               	movlb	0	; () banked
 16419  016EEC  519B               	movf	Button_Init@pInput& (0+255),w,b
 16420  016EEE  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 16421  016EF0  B4D8               	btfsc	status,2,c
 16422  016EF2  0012               	return	
 16423                           
 16424                           ; BSR set to: 0
 16425                           ;Button.c: 23: if(pInitIO==(void*)0)
 16426                           
 16427                           ; BSR set to: 0
 16428                           
 16429                           ; BSR set to: 0
 16430                           ;Button.c: 22: return;
 16431  016EF4  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 16432  016EF6  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 16433  016EF8  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 16434  016EFA  B4D8               	btfsc	status,2,c
 16435  016EFC  0012               	return	
 16436                           
 16437                           ; BSR set to: 0
 16438                           ;Button.c: 25: if(pGetState==(void*)0)
 16439                           
 16440                           ; BSR set to: 0
 16441                           
 16442                           ; BSR set to: 0
 16443                           ;Button.c: 24: return;
 16444  016EFE  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 16445  016F00  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 16446  016F02  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 16447  016F04  B4D8               	btfsc	status,2,c
 16448  016F06  0012               	return	
 16449                           
 16450                           ; BSR set to: 0
 16451                           ;Button.c: 27: if(pFunction==(void*)0)
 16452                           
 16453                           ; BSR set to: 0
 16454                           
 16455                           ; BSR set to: 0
 16456                           ;Button.c: 26: return;
 16457  016F08  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 16458  016F0A  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 16459  016F0C  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 16460  016F0E  B4D8               	btfsc	status,2,c
 16461  016F10  0012               	return	
 16462                           
 16463                           ; BSR set to: 0
 16464                           ;Button.c: 30: if(pThreshold == 0)
 16465                           
 16466                           ; BSR set to: 0
 16467                           
 16468                           ; BSR set to: 0
 16469                           ;Button.c: 28: return;
 16470  016F12  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 16471  016F14  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 16472  016F16  A4D8               	btfss	status,2,c
 16473  016F18  D004               	goto	l8
 16474                           
 16475                           ; BSR set to: 0
 16476                           ;Button.c: 31: pThreshold = 1;
 16477  016F1A  0E00               	movlw	0
 16478  016F1C  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16479  016F1E  0E01               	movlw	1
 16480  016F20  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16481  016F22                     l8:
 16482                           
 16483                           ; BSR set to: 0
 16484                           ;Button.c: 34: pInput->mState = 0;
 16485                           
 16486                           ; BSR set to: 0
 16487  016F22  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 16488  016F26  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 16489  016F2A  0E00               	movlw	0
 16490  016F2C  6EDF               	movwf	indf2,c
 16491                           
 16492                           ; BSR set to: 0
 16493                           ;Button.c: 35: pInput->mCount = 0;
 16494  016F2E  EE20 F001          	lfsr	2,1
 16495  016F32  519B               	movf	Button_Init@pInput& (0+255),w,b
 16496  016F34  26D9               	addwf	fsr2l,f,c
 16497  016F36  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16498  016F38  22DA               	addwfc	fsr2h,f,c
 16499  016F3A  0E00               	movlw	0
 16500  016F3C  6EDF               	movwf	indf2,c
 16501                           
 16502                           ; BSR set to: 0
 16503                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 16504  016F3E  EE20 F002          	lfsr	2,2
 16505  016F42  519B               	movf	Button_Init@pInput& (0+255),w,b
 16506  016F44  26D9               	addwf	fsr2l,f,c
 16507  016F46  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16508  016F48  22DA               	addwfc	fsr2h,f,c
 16509  016F4A  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 16510  016F4E  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 16511                           
 16512                           ; BSR set to: 0
 16513                           ;Button.c: 37: pInput->mFunction = pFunction;
 16514  016F52  EE20 F004          	lfsr	2,4
 16515  016F56  519B               	movf	Button_Init@pInput& (0+255),w,b
 16516  016F58  26D9               	addwf	fsr2l,f,c
 16517  016F5A  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16518  016F5C  22DA               	addwfc	fsr2h,f,c
 16519  016F5E  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 16520  016F62  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 16521  016F66  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 16522                           
 16523                           ; BSR set to: 0
 16524                           ;Button.c: 38: pInput->mGetState = pGetState;
 16525  016F6A  EE20 F007          	lfsr	2,7
 16526  016F6E  519B               	movf	Button_Init@pInput& (0+255),w,b
 16527  016F70  26D9               	addwf	fsr2l,f,c
 16528  016F72  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16529  016F74  22DA               	addwfc	fsr2h,f,c
 16530  016F76  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 16531  016F7A  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 16532  016F7E  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 16533                           
 16534                           ; BSR set to: 0
 16535                           ;Button.c: 41: pInitIO();
 16536  016F82  D801               	call	u14228
 16537  016F84  0012               	return	
 16538  016F86                     u14228:
 16539  016F86  0005               	push	
 16540  016F88  6EFA               	movwf	pclath,c
 16541  016F8A  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 16542  016F8C  6EFD               	movwf	tosl,c
 16543  016F8E  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 16544  016F90  6EFE               	movwf	tosh,c
 16545  016F92  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 16546  016F94  6EFF               	movwf	tosu,c
 16547  016F96  50FA               	movf	pclath,w,c
 16548  016F98  0012               	return		;indir
 16549  016F9A                     __end_of_Button_Init:
 16550                           	opt stack 0
 16551                           tosu	equ	0xFFF
 16552                           tosh	equ	0xFFE
 16553                           tosl	equ	0xFFD
 16554                           pclath	equ	0xFFA
 16555                           tblptru	equ	0xFF8
 16556                           tblptrh	equ	0xFF7
 16557                           tblptrl	equ	0xFF6
 16558                           tablat	equ	0xFF5
 16559                           prodh	equ	0xFF4
 16560                           prodl	equ	0xFF3
 16561                           intcon	equ	0xFF2
 16562                           postinc0	equ	0xFEE
 16563                           wreg	equ	0xFE8
 16564                           indf1	equ	0xFE7
 16565                           postdec1	equ	0xFE5
 16566                           fsr1h	equ	0xFE2
 16567                           fsr1l	equ	0xFE1
 16568                           indf2	equ	0xFDF
 16569                           postinc2	equ	0xFDE
 16570                           postdec2	equ	0xFDD
 16571                           plusw2	equ	0xFDB
 16572                           fsr2h	equ	0xFDA
 16573                           fsr2l	equ	0xFD9
 16574                           status	equ	0xFD8
 16575                           
 16576 ;; *************** function _MXK_InitDIPSwitch *****************
 16577 ;; Defined at:
 16578 ;;		line 20 in file "Library/MXK.c"
 16579 ;; Parameters:    Size  Location     Type
 16580 ;;		None
 16581 ;; Auto vars:     Size  Location     Type
 16582 ;;		None
 16583 ;; Return value:  Size  Location     Type
 16584 ;;                  1    wreg      void 
 16585 ;; Registers used:
 16586 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16587 ;; Tracked objects:
 16588 ;;		On entry : 0/0
 16589 ;;		On exit  : 0/0
 16590 ;;		Unchanged: 0/0
 16591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16596 ;;Total ram usage:        0 bytes
 16597 ;; Hardware stack levels used:    1
 16598 ;; Hardware stack levels required when called:   14
 16599 ;; This function calls:
 16600 ;;		_Port_SetQuadType
 16601 ;; This function is called by:
 16602 ;;		_FunctInitButton
 16603 ;;		_Button_Init
 16604 ;; This function uses a non-reentrant model
 16605 ;;
 16606                           
 16607                           	psect	text76
 16608  018DFA                     __ptext76:
 16609                           	opt stack 0
 16610  018DFA                     _MXK_InitDIPSwitch:
 16611                           	opt stack 14
 16612                           
 16613                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 16614                           
 16615                           ;incstack = 0
 16616  018DFA  0E6F               	movlw	low _PortD
 16617  018DFC  0100               	movlb	0	; () banked
 16618  018DFE  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 16619  018E00  0E01               	movlw	high _PortD
 16620  018E02  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 16621  018E04  0E00               	movlw	0
 16622  018E06  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 16623  018E08  0E00               	movlw	0
 16624  018E0A  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 16625  018E0C  ECD8  F0A5         	call	_Port_SetQuadType	;wreg free
 16626  018E10  0012               	return		;funcret
 16627  018E12                     __end_of_MXK_InitDIPSwitch:
 16628                           	opt stack 0
 16629                           tosu	equ	0xFFF
 16630                           tosh	equ	0xFFE
 16631                           tosl	equ	0xFFD
 16632                           pclath	equ	0xFFA
 16633                           tblptru	equ	0xFF8
 16634                           tblptrh	equ	0xFF7
 16635                           tblptrl	equ	0xFF6
 16636                           tablat	equ	0xFF5
 16637                           prodh	equ	0xFF4
 16638                           prodl	equ	0xFF3
 16639                           intcon	equ	0xFF2
 16640                           postinc0	equ	0xFEE
 16641                           wreg	equ	0xFE8
 16642                           indf1	equ	0xFE7
 16643                           postdec1	equ	0xFE5
 16644                           fsr1h	equ	0xFE2
 16645                           fsr1l	equ	0xFE1
 16646                           indf2	equ	0xFDF
 16647                           postinc2	equ	0xFDE
 16648                           postdec2	equ	0xFDD
 16649                           plusw2	equ	0xFDB
 16650                           fsr2h	equ	0xFDA
 16651                           fsr2l	equ	0xFD9
 16652                           status	equ	0xFD8
 16653                           
 16654 ;; *************** function _HMI_InitButtons *****************
 16655 ;; Defined at:
 16656 ;;		line 21 in file "HMI.c"
 16657 ;; Parameters:    Size  Location     Type
 16658 ;;		None
 16659 ;; Auto vars:     Size  Location     Type
 16660 ;;		None
 16661 ;; Return value:  Size  Location     Type
 16662 ;;                  1    wreg      void 
 16663 ;; Registers used:
 16664 ;;		wreg, status,2
 16665 ;; Tracked objects:
 16666 ;;		On entry : 0/0
 16667 ;;		On exit  : 0/0
 16668 ;;		Unchanged: 0/0
 16669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16674 ;;Total ram usage:        0 bytes
 16675 ;; Hardware stack levels used:    1
 16676 ;; Hardware stack levels required when called:    7
 16677 ;; This function calls:
 16678 ;;		Nothing
 16679 ;; This function is called by:
 16680 ;;		_HMI_Init
 16681 ;;		_Button_Init
 16682 ;; This function uses a non-reentrant model
 16683 ;;
 16684                           
 16685                           	psect	text77
 16686  019000                     __ptext77:
 16687                           	opt stack 0
 16688  019000                     _HMI_InitButtons:
 16689                           	opt stack 21
 16690                           
 16691                           ;HMI.c: 23: TRISE = 0xFC;
 16692                           
 16693                           ;incstack = 0
 16694  019000  0EFC               	movlw	252
 16695  019002  6E96               	movwf	3990,c	;volatile
 16696  019004  0012               	return		;funcret
 16697  019006                     __end_of_HMI_InitButtons:
 16698                           	opt stack 0
 16699                           tosu	equ	0xFFF
 16700                           tosh	equ	0xFFE
 16701                           tosl	equ	0xFFD
 16702                           pclath	equ	0xFFA
 16703                           tblptru	equ	0xFF8
 16704                           tblptrh	equ	0xFF7
 16705                           tblptrl	equ	0xFF6
 16706                           tablat	equ	0xFF5
 16707                           prodh	equ	0xFF4
 16708                           prodl	equ	0xFF3
 16709                           intcon	equ	0xFF2
 16710                           postinc0	equ	0xFEE
 16711                           wreg	equ	0xFE8
 16712                           indf1	equ	0xFE7
 16713                           postdec1	equ	0xFE5
 16714                           fsr1h	equ	0xFE2
 16715                           fsr1l	equ	0xFE1
 16716                           indf2	equ	0xFDF
 16717                           postinc2	equ	0xFDE
 16718                           postdec2	equ	0xFDD
 16719                           plusw2	equ	0xFDB
 16720                           fsr2h	equ	0xFDA
 16721                           fsr2l	equ	0xFD9
 16722                           status	equ	0xFD8
 16723                           
 16724 ;; *************** function _MXK_InitTestButton *****************
 16725 ;; Defined at:
 16726 ;;		line 10 in file "Library/MXK.c"
 16727 ;; Parameters:    Size  Location     Type
 16728 ;;		None
 16729 ;; Auto vars:     Size  Location     Type
 16730 ;;		None
 16731 ;; Return value:  Size  Location     Type
 16732 ;;                  1    wreg      void 
 16733 ;; Registers used:
 16734 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16735 ;; Tracked objects:
 16736 ;;		On entry : 0/0
 16737 ;;		On exit  : 0/0
 16738 ;;		Unchanged: 0/0
 16739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16744 ;;Total ram usage:        0 bytes
 16745 ;; Hardware stack levels used:    1
 16746 ;; Hardware stack levels required when called:   12
 16747 ;; This function calls:
 16748 ;;		_Port_SetPinType
 16749 ;; This function is called by:
 16750 ;;		_FunctInitButton
 16751 ;;		_Button_Init
 16752 ;; This function uses a non-reentrant model
 16753 ;;
 16754                           
 16755                           	psect	text78
 16756  018E12                     __ptext78:
 16757                           	opt stack 0
 16758  018E12                     _MXK_InitTestButton:
 16759                           	opt stack 16
 16760                           
 16761                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 16762                           
 16763                           ;incstack = 0
 16764  018E12  0EF2               	movlw	low _PortB
 16765  018E14  0100               	movlb	0	; () banked
 16766  018E16  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16767  018E18  0E02               	movlw	high _PortB
 16768  018E1A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16769  018E1C  0E04               	movlw	4
 16770  018E1E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16771  018E20  0E00               	movlw	0
 16772  018E22  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16773  018E24  EC8F  F0A9         	call	_Port_SetPinType	;wreg free
 16774  018E28  0012               	return		;funcret
 16775  018E2A                     __end_of_MXK_InitTestButton:
 16776                           	opt stack 0
 16777                           tosu	equ	0xFFF
 16778                           tosh	equ	0xFFE
 16779                           tosl	equ	0xFFD
 16780                           pclath	equ	0xFFA
 16781                           tblptru	equ	0xFF8
 16782                           tblptrh	equ	0xFF7
 16783                           tblptrl	equ	0xFF6
 16784                           tablat	equ	0xFF5
 16785                           prodh	equ	0xFF4
 16786                           prodl	equ	0xFF3
 16787                           intcon	equ	0xFF2
 16788                           postinc0	equ	0xFEE
 16789                           wreg	equ	0xFE8
 16790                           indf1	equ	0xFE7
 16791                           postdec1	equ	0xFE5
 16792                           fsr1h	equ	0xFE2
 16793                           fsr1l	equ	0xFE1
 16794                           indf2	equ	0xFDF
 16795                           postinc2	equ	0xFDE
 16796                           postdec2	equ	0xFDD
 16797                           plusw2	equ	0xFDB
 16798                           fsr2h	equ	0xFDA
 16799                           fsr2l	equ	0xFD9
 16800                           status	equ	0xFD8
 16801                           
 16802 ;; *************** function _Port_SetPinType *****************
 16803 ;; Defined at:
 16804 ;;		line 189 in file "Library/Port.c"
 16805 ;; Parameters:    Size  Location     Type
 16806 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 16807 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16808 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16809 ;;  pPin            1   40[BANK0 ] enum E6750
 16810 ;;  pType           1   41[BANK0 ] enum E6795
 16811 ;; Auto vars:     Size  Location     Type
 16812 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 16813 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 16814 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 16815 ;;  Output          1   42[BANK0 ] enum E6475
 16816 ;; Return value:  Size  Location     Type
 16817 ;;                  1    wreg      enum E6475
 16818 ;; Registers used:
 16819 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16820 ;; Tracked objects:
 16821 ;;		On entry : 0/0
 16822 ;;		On exit  : 0/0
 16823 ;;		Unchanged: 0/0
 16824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16825 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16826 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16828 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16829 ;;Total ram usage:        7 bytes
 16830 ;; Hardware stack levels used:    1
 16831 ;; Hardware stack levels required when called:   11
 16832 ;; This function calls:
 16833 ;;		_Byte_SetBit
 16834 ;;		_PortProperty_Valid
 16835 ;;		_Word_SetPair
 16836 ;; This function is called by:
 16837 ;;		_Configure_GPIOs
 16838 ;;		_LED_Init
 16839 ;;		_Port_Init
 16840 ;;		_SPI_Init
 16841 ;;		_MXK_InitTestButton
 16842 ;;		_MXK_Init
 16843 ;;		_I2C_Init
 16844 ;;		_Motor_Init
 16845 ;; This function uses a non-reentrant model
 16846 ;;
 16847                           
 16848                           	psect	text79
 16849  01531E                     __ptext79:
 16850                           	opt stack 0
 16851  01531E                     _Port_SetPinType:
 16852                           	opt stack 18
 16853                           
 16854                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 16855                           
 16856                           ;incstack = 0
 16857  01531E  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 16858  015322  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 16859  015326  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 16860  01532A  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 16861                           
 16862                           ;Port.c: 192: ePinError Output = ePinErrorState;
 16863  01532E  0E05               	movlw	5
 16864  015330  0100               	movlb	0	; () banked
 16865  015332  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 16866                           
 16867                           ;Port.c: 193: switch (pType)
 16868  015334  D0A7               	goto	l412
 16869  015336                     
 16870                           ; BSR set to: 0
 16871                           ;Port.c: 197: {
 16872                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 16873                           
 16874                           ; BSR set to: 0
 16875  015336  EE20 F002          	lfsr	2,2
 16876  01533A  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 16877  01533C  26D9               	addwf	fsr2l,f,c
 16878  01533E  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16879  015340  22DA               	addwfc	fsr2h,f,c
 16880  015342  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16881  015346  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16882  01534A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16883  01534E  0E01               	movlw	1
 16884  015350  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16885  015352  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 16886                           
 16887                           ;Port.c: 203: break;
 16888  015356  D0A4               	goto	l414
 16889  015358                     
 16890                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 16891  015358  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 16892  01535C  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 16893  015360  0E01               	movlw	1
 16894  015362  0100               	movlb	0	; () banked
 16895  015364  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 16896  015366  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 16897  01536A  EC10  F0BF         	call	_PortProperty_Valid	;wreg free
 16898  01536E  0100               	movlb	0	; () banked
 16899  015370  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 16900  015372  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 16901  015374  A4D8               	btfss	status,2,c
 16902  015376  0012               	return	
 16903                           
 16904                           ; BSR set to: 0
 16905                           ;Port.c: 208: {
 16906                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 16907  015378  EE20 F002          	lfsr	2,2
 16908  01537C  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 16909  01537E  26D9               	addwf	fsr2l,f,c
 16910  015380  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16911  015382  22DA               	addwfc	fsr2h,f,c
 16912  015384  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16913  015388  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16914  01538C  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16915  015390  0E00               	movlw	0
 16916  015392  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16917  015394  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 16918                           
 16919                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 16920  015398  0100               	movlb	0	; () banked
 16921  01539A  EE20 F004          	lfsr	2,4
 16922  01539E  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 16923  0153A0  26D9               	addwf	fsr2l,f,c
 16924  0153A2  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16925  0153A4  22DA               	addwfc	fsr2h,f,c
 16926  0153A6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16927  0153AA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16928  0153AE  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16929  0153B2  0E00               	movlw	0
 16930  0153B4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16931  0153B6  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 16932                           
 16933                           ;Port.c: 214: break;
 16934  0153BA  D072               	goto	l414
 16935  0153BC                     
 16936                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 16937                           
 16938                           ;Port.c: 218: case eTypeOutputOpenSource:
 16939  0153BC  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 16940  0153C0  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 16941  0153C4  0E02               	movlw	2
 16942  0153C6  0100               	movlb	0	; () banked
 16943  0153C8  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 16944  0153CA  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 16945  0153CE  EC10  F0BF         	call	_PortProperty_Valid	;wreg free
 16946  0153D2  0100               	movlb	0	; () banked
 16947  0153D4  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 16948  0153D6  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 16949  0153D8  A4D8               	btfss	status,2,c
 16950  0153DA  0012               	return	
 16951                           
 16952                           ; BSR set to: 0
 16953                           ;Port.c: 220: {
 16954                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 16955  0153DC  EE20 F002          	lfsr	2,2
 16956  0153E0  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 16957  0153E2  26D9               	addwf	fsr2l,f,c
 16958  0153E4  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16959  0153E6  22DA               	addwfc	fsr2h,f,c
 16960  0153E8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16961  0153EC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16962  0153F0  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16963  0153F4  0E01               	movlw	1
 16964  0153F6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16965  0153F8  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 16966                           
 16967                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 16968  0153FC  0100               	movlb	0	; () banked
 16969  0153FE  EE20 F004          	lfsr	2,4
 16970  015402  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 16971  015404  26D9               	addwf	fsr2l,f,c
 16972  015406  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16973  015408  22DA               	addwfc	fsr2h,f,c
 16974  01540A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16975  01540E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16976  015412  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16977  015416  0E01               	movlw	1
 16978  015418  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16979  01541A  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 16980                           
 16981                           ;Port.c: 226: break;
 16982  01541E  D040               	goto	l414
 16983  015420                     
 16984                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 16985                           
 16986                           ;Port.c: 230: case eTypeOutputPushPull:
 16987  015420  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 16988  015424  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 16989  015428  0E00               	movlw	0
 16990  01542A  0100               	movlb	0	; () banked
 16991  01542C  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 16992  01542E  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 16993  015432  EC10  F0BF         	call	_PortProperty_Valid	;wreg free
 16994  015436  0100               	movlb	0	; () banked
 16995  015438  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 16996  01543A  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 16997  01543C  A4D8               	btfss	status,2,c
 16998  01543E  0012               	return	
 16999                           
 17000                           ; BSR set to: 0
 17001                           ;Port.c: 232: {
 17002                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 17003  015440  EE20 F002          	lfsr	2,2
 17004  015444  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17005  015446  26D9               	addwf	fsr2l,f,c
 17006  015448  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17007  01544A  22DA               	addwfc	fsr2h,f,c
 17008  01544C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17009  015450  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17010  015454  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17011  015458  0E00               	movlw	0
 17012  01545A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17013  01545C  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 17014                           
 17015                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 17016  015460  0100               	movlb	0	; () banked
 17017  015462  EE20 F004          	lfsr	2,4
 17018  015466  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17019  015468  26D9               	addwf	fsr2l,f,c
 17020  01546A  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17021  01546C  22DA               	addwfc	fsr2h,f,c
 17022  01546E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17023  015472  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17024  015476  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17025  01547A  0E00               	movlw	0
 17026  01547C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17027  01547E  EC39  F0C1         	call	_Byte_SetBit	;wreg free
 17028                           
 17029                           ;Port.c: 239: }
 17030                           
 17031                           ;Port.c: 238: break;
 17032  015482  D00E               	goto	l414
 17033  015484                     l412:
 17034  015484  0100               	movlb	0	; () banked
 17035  015486  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 17036                           
 17037                           ; Switch size 1, requested type "space"
 17038                           ; Number of cases is 4, Range of values is 0 to 3
 17039                           ; switch strategies available:
 17040                           ; Name         Instructions Cycles
 17041                           ; simple_byte           13     7 (average)
 17042                           ;	Chosen strategy is simple_byte
 17043  015488  0A00               	xorlw	0	; case 0
 17044  01548A  B4D8               	btfsc	status,2,c
 17045  01548C  D754               	goto	l413
 17046  01548E  0A01               	xorlw	1	; case 1
 17047  015490  B4D8               	btfsc	status,2,c
 17048  015492  D762               	goto	l415
 17049  015494  0A03               	xorlw	3	; case 2
 17050  015496  B4D8               	btfsc	status,2,c
 17051  015498  D791               	goto	l417
 17052  01549A  0A01               	xorlw	1	; case 3
 17053  01549C  B4D8               	btfsc	status,2,c
 17054  01549E  D7C0               	goto	l421
 17055  0154A0                     l414:
 17056                           
 17057                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 17058                           
 17059                           ; BSR set to: 0
 17060  0154A0  0E08               	movlw	8
 17061  0154A2  0100               	movlb	0	; () banked
 17062  0154A4  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 17063  0154A6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17064  0154A8  0E00               	movlw	0
 17065  0154AA  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 17066  0154AC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17067  0154AE  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 17068  0154B2  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 17069  0154B6  EC89  F0C4         	call	_Word_SetPair	;wreg free
 17070  0154BA  0012               	return	
 17071  0154BC                     __end_of_Port_SetPinType:
 17072                           	opt stack 0
 17073                           tosu	equ	0xFFF
 17074                           tosh	equ	0xFFE
 17075                           tosl	equ	0xFFD
 17076                           pclath	equ	0xFFA
 17077                           tblptru	equ	0xFF8
 17078                           tblptrh	equ	0xFF7
 17079                           tblptrl	equ	0xFF6
 17080                           tablat	equ	0xFF5
 17081                           prodh	equ	0xFF4
 17082                           prodl	equ	0xFF3
 17083                           intcon	equ	0xFF2
 17084                           postinc0	equ	0xFEE
 17085                           wreg	equ	0xFE8
 17086                           indf1	equ	0xFE7
 17087                           postdec1	equ	0xFE5
 17088                           fsr1h	equ	0xFE2
 17089                           fsr1l	equ	0xFE1
 17090                           indf2	equ	0xFDF
 17091                           postinc2	equ	0xFDE
 17092                           postdec2	equ	0xFDD
 17093                           plusw2	equ	0xFDB
 17094                           fsr2h	equ	0xFDA
 17095                           fsr2l	equ	0xFD9
 17096                           status	equ	0xFD8
 17097                           
 17098 ;; *************** function _Byte_SetBit *****************
 17099 ;; Defined at:
 17100 ;;		line 32 in file "Library/Types.c"
 17101 ;; Parameters:    Size  Location     Type
 17102 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17103 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 17104 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 17105 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17106 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17107 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17108 ;;		 -> NULL(0), 
 17109 ;;  pBit            1    2[BANK0 ] unsigned char 
 17110 ;;  pValue          1    3[BANK0 ] unsigned char 
 17111 ;; Auto vars:     Size  Location     Type
 17112 ;;		None
 17113 ;; Return value:  Size  Location     Type
 17114 ;;                  1    wreg      void 
 17115 ;; Registers used:
 17116 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17117 ;; Tracked objects:
 17118 ;;		On entry : 0/0
 17119 ;;		On exit  : 0/0
 17120 ;;		Unchanged: 0/0
 17121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17122 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17124 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17125 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17126 ;;Total ram usage:        7 bytes
 17127 ;; Hardware stack levels used:    1
 17128 ;; Hardware stack levels required when called:    7
 17129 ;; This function calls:
 17130 ;;		Nothing
 17131 ;; This function is called by:
 17132 ;;		_Port_SetPinType
 17133 ;;		_Port_SetPin
 17134 ;;		_SPI_Init
 17135 ;;		_SPI_MinSpeed
 17136 ;;		_SPI_MaxSpeed
 17137 ;;		_Word_SetBit
 17138 ;;		_I2C_Init
 17139 ;; This function uses a non-reentrant model
 17140 ;;
 17141                           
 17142                           	psect	text80
 17143  018272                     __ptext80:
 17144                           	opt stack 0
 17145  018272                     _Byte_SetBit:
 17146                           	opt stack 21
 17147                           
 17148                           ;Types.c: 34: pValue &= 1;
 17149                           
 17150                           ;incstack = 0
 17151  018272  0E01               	movlw	1
 17152  018274  0100               	movlb	0	; () banked
 17153  018276  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 17154                           
 17155                           ; BSR set to: 0
 17156                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 17157  018278  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 17158  01827C  0E01               	movlw	1
 17159  01827E  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 17160  018280  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 17161  018282  D002               	goto	u12554
 17162  018284                     u12555:
 17163  018284  90D8               	bcf	status,0,c
 17164  018286  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 17165  018288                     u12554:
 17166  018288  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 17167  01828A  D7FC               	goto	u12555
 17168  01828C  0100               	movlb	0	; () banked
 17169  01828E  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 17170  018290  0AFF               	xorlw	255
 17171  018292  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 17172  018294  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 17173  018298  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 17174  01829C  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 17175  01829E  16DF               	andwf	indf2,f,c
 17176                           
 17177                           ; BSR set to: 0
 17178                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 17179  0182A0  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 17180  0182A4  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 17181  0182A8  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 17182  0182AA  D002               	goto	u12564
 17183  0182AC                     u12565:
 17184  0182AC  90D8               	bcf	status,0,c
 17185  0182AE  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 17186  0182B0                     u12564:
 17187  0182B0  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 17188  0182B2  D7FC               	goto	u12565
 17189  0182B4  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 17190  0182B8  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 17191  0182BC  0100               	movlb	0	; () banked
 17192  0182BE  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 17193  0182C0  12DF               	iorwf	indf2,f,c
 17194                           
 17195                           ; BSR set to: 0
 17196  0182C2  0012               	return		;funcret
 17197  0182C4                     __end_of_Byte_SetBit:
 17198                           	opt stack 0
 17199                           tosu	equ	0xFFF
 17200                           tosh	equ	0xFFE
 17201                           tosl	equ	0xFFD
 17202                           pclath	equ	0xFFA
 17203                           tblptru	equ	0xFF8
 17204                           tblptrh	equ	0xFF7
 17205                           tblptrl	equ	0xFF6
 17206                           tablat	equ	0xFF5
 17207                           prodh	equ	0xFF4
 17208                           prodl	equ	0xFF3
 17209                           intcon	equ	0xFF2
 17210                           postinc0	equ	0xFEE
 17211                           wreg	equ	0xFE8
 17212                           indf1	equ	0xFE7
 17213                           postdec1	equ	0xFE5
 17214                           fsr1h	equ	0xFE2
 17215                           fsr1l	equ	0xFE1
 17216                           indf2	equ	0xFDF
 17217                           postinc2	equ	0xFDE
 17218                           postdec2	equ	0xFDD
 17219                           plusw2	equ	0xFDB
 17220                           fsr2h	equ	0xFDA
 17221                           fsr2l	equ	0xFD9
 17222                           status	equ	0xFD8
 17223                           
 17224 ;; *************** function _Port_SetQuadType *****************
 17225 ;; Defined at:
 17226 ;;		line 399 in file "Library/Port.c"
 17227 ;; Parameters:    Size  Location     Type
 17228 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 17229 ;;		 -> PortB(10), PortD(10), 
 17230 ;;  pQuad           1   56[BANK0 ] enum E6776
 17231 ;;  pType           1   57[BANK0 ] enum E6795
 17232 ;; Auto vars:     Size  Location     Type
 17233 ;;  Output          1   58[BANK0 ] enum E6475
 17234 ;; Return value:  Size  Location     Type
 17235 ;;                  1    wreg      enum E6475
 17236 ;; Registers used:
 17237 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17238 ;; Tracked objects:
 17239 ;;		On entry : 0/0
 17240 ;;		On exit  : 0/0
 17241 ;;		Unchanged: 0/0
 17242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17243 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17244 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17246 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17247 ;;Total ram usage:        5 bytes
 17248 ;; Hardware stack levels used:    1
 17249 ;; Hardware stack levels required when called:   13
 17250 ;; This function calls:
 17251 ;;		_Byte_SetQuad
 17252 ;;		_Port_CheckQuadType
 17253 ;;		_Word_SetPair
 17254 ;; This function is called by:
 17255 ;;		_MXK_InitDIPSwitch
 17256 ;;		_MXK_Init
 17257 ;; This function uses a non-reentrant model
 17258 ;;
 17259                           
 17260                           	psect	text81
 17261  014BB0                     __ptext81:
 17262                           	opt stack 0
 17263  014BB0                     _Port_SetQuadType:
 17264                           	opt stack 16
 17265                           
 17266                           ;Port.c: 401: ePinError Output = ePinErrorState;
 17267                           
 17268                           ; BSR set to: 0
 17269                           ;incstack = 0
 17270  014BB0  0E05               	movlw	5
 17271  014BB2  0100               	movlb	0	; () banked
 17272  014BB4  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17273                           
 17274                           ;Port.c: 403: switch (pType)
 17275  014BB6  D0B8               	goto	l476
 17276  014BB8                     
 17277                           ; BSR set to: 0
 17278                           ;Port.c: 407: {
 17279                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 17280                           
 17281                           ; BSR set to: 0
 17282  014BB8  EE20 F002          	lfsr	2,2
 17283  014BBC  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17284  014BBE  26D9               	addwf	fsr2l,f,c
 17285  014BC0  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17286  014BC2  22DA               	addwfc	fsr2h,f,c
 17287  014BC4  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17288  014BC8  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17289  014BCC  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17290  014BD0  0E0F               	movlw	15
 17291  014BD2  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17292  014BD4  EC54  F0C6         	call	_Byte_SetQuad	;wreg free
 17293                           
 17294                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 17295  014BD8  0100               	movlb	0	; () banked
 17296  014BDA  EE20 F004          	lfsr	2,4
 17297  014BDE  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17298  014BE0  26D9               	addwf	fsr2l,f,c
 17299  014BE2  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17300  014BE4  22DA               	addwfc	fsr2h,f,c
 17301  014BE6  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17302  014BEA  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17303  014BEE  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17304  014BF2  0E00               	movlw	0
 17305  014BF4  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17306  014BF6  EC54  F0C6         	call	_Byte_SetQuad	;wreg free
 17307                           
 17308                           ;Port.c: 413: }
 17309                           ;Port.c: 415: break;
 17310  014BFA  D0A4               	goto	l478
 17311  014BFC                     
 17312                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 17313  014BFC  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 17314  014C00  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 17315  014C04  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 17316  014C08  0E03               	movlw	3
 17317  014C0A  0100               	movlb	0	; () banked
 17318  014C0C  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 17319  014C0E  EC8A  F0C1         	call	_Port_CheckQuadType	;wreg free
 17320  014C12  0100               	movlb	0	; () banked
 17321  014C14  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17322  014C16  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 17323  014C18  A4D8               	btfss	status,2,c
 17324  014C1A  0012               	return	
 17325                           
 17326                           ; BSR set to: 0
 17327                           ;Port.c: 418: {
 17328                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 17329  014C1C  EE20 F002          	lfsr	2,2
 17330  014C20  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17331  014C22  26D9               	addwf	fsr2l,f,c
 17332  014C24  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17333  014C26  22DA               	addwfc	fsr2h,f,c
 17334  014C28  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17335  014C2C  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17336  014C30  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17337  014C34  0E00               	movlw	0
 17338  014C36  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17339  014C38  EC54  F0C6         	call	_Byte_SetQuad	;wreg free
 17340                           
 17341                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 17342  014C3C  0100               	movlb	0	; () banked
 17343  014C3E  EE20 F004          	lfsr	2,4
 17344  014C42  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17345  014C44  26D9               	addwf	fsr2l,f,c
 17346  014C46  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17347  014C48  22DA               	addwfc	fsr2h,f,c
 17348  014C4A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17349  014C4E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17350  014C52  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17351  014C56  0E00               	movlw	0
 17352  014C58  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17353  014C5A  EC54  F0C6         	call	_Byte_SetQuad	;wreg free
 17354                           
 17355                           ;Port.c: 424: }
 17356  014C5E  D072               	goto	l478
 17357  014C60                     
 17358                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 17359  014C60  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 17360  014C64  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 17361  014C68  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 17362  014C6C  0E03               	movlw	3
 17363  014C6E  0100               	movlb	0	; () banked
 17364  014C70  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 17365  014C72  EC8A  F0C1         	call	_Port_CheckQuadType	;wreg free
 17366  014C76  0100               	movlb	0	; () banked
 17367  014C78  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17368  014C7A  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 17369  014C7C  A4D8               	btfss	status,2,c
 17370  014C7E  0012               	return	
 17371                           
 17372                           ; BSR set to: 0
 17373                           ;Port.c: 429: {
 17374                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 17375  014C80  EE20 F002          	lfsr	2,2
 17376  014C84  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17377  014C86  26D9               	addwf	fsr2l,f,c
 17378  014C88  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17379  014C8A  22DA               	addwfc	fsr2h,f,c
 17380  014C8C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17381  014C90  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17382  014C94  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17383  014C98  0E0F               	movlw	15
 17384  014C9A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17385  014C9C  EC54  F0C6         	call	_Byte_SetQuad	;wreg free
 17386                           
 17387                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 17388  014CA0  0100               	movlb	0	; () banked
 17389  014CA2  EE20 F004          	lfsr	2,4
 17390  014CA6  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17391  014CA8  26D9               	addwf	fsr2l,f,c
 17392  014CAA  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17393  014CAC  22DA               	addwfc	fsr2h,f,c
 17394  014CAE  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17395  014CB2  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17396  014CB6  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17397  014CBA  0E0F               	movlw	15
 17398  014CBC  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17399  014CBE  EC54  F0C6         	call	_Byte_SetQuad	;wreg free
 17400                           
 17401                           ;Port.c: 435: }
 17402  014CC2  D040               	goto	l478
 17403  014CC4                     
 17404                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 17405  014CC4  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 17406  014CC8  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 17407  014CCC  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 17408  014CD0  0E03               	movlw	3
 17409  014CD2  0100               	movlb	0	; () banked
 17410  014CD4  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 17411  014CD6  EC8A  F0C1         	call	_Port_CheckQuadType	;wreg free
 17412  014CDA  0100               	movlb	0	; () banked
 17413  014CDC  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17414  014CDE  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 17415  014CE0  A4D8               	btfss	status,2,c
 17416  014CE2  0012               	return	
 17417                           
 17418                           ; BSR set to: 0
 17419                           ;Port.c: 440: {
 17420                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 17421  014CE4  EE20 F002          	lfsr	2,2
 17422  014CE8  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17423  014CEA  26D9               	addwf	fsr2l,f,c
 17424  014CEC  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17425  014CEE  22DA               	addwfc	fsr2h,f,c
 17426  014CF0  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17427  014CF4  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17428  014CF8  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17429  014CFC  0E00               	movlw	0
 17430  014CFE  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17431  014D00  EC54  F0C6         	call	_Byte_SetQuad	;wreg free
 17432                           
 17433                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 17434  014D04  0100               	movlb	0	; () banked
 17435  014D06  EE20 F004          	lfsr	2,4
 17436  014D0A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17437  014D0C  26D9               	addwf	fsr2l,f,c
 17438  014D0E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17439  014D10  22DA               	addwfc	fsr2h,f,c
 17440  014D12  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17441  014D16  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17442  014D1A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17443  014D1E  0E00               	movlw	0
 17444  014D20  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17445  014D22  EC54  F0C6         	call	_Byte_SetQuad	;wreg free
 17446                           
 17447                           ;Port.c: 446: }
 17448  014D26  D00E               	goto	l478
 17449  014D28                     l476:
 17450  014D28  0100               	movlb	0	; () banked
 17451  014D2A  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 17452                           
 17453                           ; Switch size 1, requested type "space"
 17454                           ; Number of cases is 4, Range of values is 0 to 3
 17455                           ; switch strategies available:
 17456                           ; Name         Instructions Cycles
 17457                           ; simple_byte           13     7 (average)
 17458                           ;	Chosen strategy is simple_byte
 17459  014D2C  0A00               	xorlw	0	; case 0
 17460  014D2E  B4D8               	btfsc	status,2,c
 17461  014D30  D743               	goto	l477
 17462  014D32  0A01               	xorlw	1	; case 1
 17463  014D34  B4D8               	btfsc	status,2,c
 17464  014D36  D762               	goto	l479
 17465  014D38  0A03               	xorlw	3	; case 2
 17466  014D3A  B4D8               	btfsc	status,2,c
 17467  014D3C  D791               	goto	l483
 17468  014D3E  0A01               	xorlw	1	; case 3
 17469  014D40  B4D8               	btfsc	status,2,c
 17470  014D42  D7C0               	goto	l486
 17471  014D44                     l478:
 17472                           
 17473                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 17474                           
 17475                           ; BSR set to: 0
 17476  014D44  0E08               	movlw	8
 17477  014D46  0100               	movlb	0	; () banked
 17478  014D48  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17479  014D4A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17480  014D4C  0E00               	movlw	0
 17481  014D4E  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17482  014D50  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17483  014D52  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17484  014D54  0D04               	mullw	4
 17485  014D56  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 17486  014D5A  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17487  014D5E  EC89  F0C4         	call	_Word_SetPair	;wreg free
 17488                           
 17489                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 17490  014D62  0E08               	movlw	8
 17491  014D64  0100               	movlb	0	; () banked
 17492  014D66  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17493  014D68  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17494  014D6A  0E00               	movlw	0
 17495  014D6C  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17496  014D6E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17497  014D70  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17498  014D72  0D04               	mullw	4
 17499  014D74  28F3               	incf	prodl,w,c
 17500  014D76  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17501  014D78  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17502  014D7C  EC89  F0C4         	call	_Word_SetPair	;wreg free
 17503                           
 17504                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 17505  014D80  0E08               	movlw	8
 17506  014D82  0100               	movlb	0	; () banked
 17507  014D84  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17508  014D86  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17509  014D88  0E00               	movlw	0
 17510  014D8A  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17511  014D8C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17512  014D8E  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17513  014D90  0D04               	mullw	4
 17514  014D92  50F3               	movf	prodl,w,c
 17515  014D94  0F02               	addlw	2
 17516  014D96  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17517  014D98  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17518  014D9C  EC89  F0C4         	call	_Word_SetPair	;wreg free
 17519                           
 17520                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 17521  014DA0  0E08               	movlw	8
 17522  014DA2  0100               	movlb	0	; () banked
 17523  014DA4  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17524  014DA6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17525  014DA8  0E00               	movlw	0
 17526  014DAA  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17527  014DAC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17528  014DAE  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17529  014DB0  0D04               	mullw	4
 17530  014DB2  50F3               	movf	prodl,w,c
 17531  014DB4  0F03               	addlw	3
 17532  014DB6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17533  014DB8  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17534  014DBC  EC89  F0C4         	call	_Word_SetPair	;wreg free
 17535  014DC0  0012               	return	
 17536  014DC2                     __end_of_Port_SetQuadType:
 17537                           	opt stack 0
 17538                           tosu	equ	0xFFF
 17539                           tosh	equ	0xFFE
 17540                           tosl	equ	0xFFD
 17541                           pclath	equ	0xFFA
 17542                           tblptru	equ	0xFF8
 17543                           tblptrh	equ	0xFF7
 17544                           tblptrl	equ	0xFF6
 17545                           tablat	equ	0xFF5
 17546                           prodh	equ	0xFF4
 17547                           prodl	equ	0xFF3
 17548                           intcon	equ	0xFF2
 17549                           postinc0	equ	0xFEE
 17550                           wreg	equ	0xFE8
 17551                           indf1	equ	0xFE7
 17552                           postdec1	equ	0xFE5
 17553                           fsr1h	equ	0xFE2
 17554                           fsr1l	equ	0xFE1
 17555                           indf2	equ	0xFDF
 17556                           postinc2	equ	0xFDE
 17557                           postdec2	equ	0xFDD
 17558                           plusw2	equ	0xFDB
 17559                           fsr2h	equ	0xFDA
 17560                           fsr2l	equ	0xFD9
 17561                           status	equ	0xFD8
 17562                           
 17563 ;; *************** function _Word_SetPair *****************
 17564 ;; Defined at:
 17565 ;;		line 149 in file "Library/Types.c"
 17566 ;; Parameters:    Size  Location     Type
 17567 ;;  pInput          2   15[BANK0 ] PTR struct Word
 17568 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17569 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17570 ;;  pPair           1   17[BANK0 ] unsigned char 
 17571 ;;  pValue          1   18[BANK0 ] unsigned char 
 17572 ;; Auto vars:     Size  Location     Type
 17573 ;;		None
 17574 ;; Return value:  Size  Location     Type
 17575 ;;                  1    wreg      void 
 17576 ;; Registers used:
 17577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17578 ;; Tracked objects:
 17579 ;;		On entry : 0/0
 17580 ;;		On exit  : 0/0
 17581 ;;		Unchanged: 0/0
 17582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17583 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17586 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17587 ;;Total ram usage:        4 bytes
 17588 ;; Hardware stack levels used:    1
 17589 ;; Hardware stack levels required when called:    9
 17590 ;; This function calls:
 17591 ;;		_Byte_SetPair
 17592 ;; This function is called by:
 17593 ;;		_Port_SetPinType
 17594 ;;		_Port_SetQuadType
 17595 ;;		_Port_SetType
 17596 ;;		_Port_SetPairType
 17597 ;;		_PortProperty_Init
 17598 ;; This function uses a non-reentrant model
 17599 ;;
 17600                           
 17601                           	psect	text82
 17602  018912                     __ptext82:
 17603                           	opt stack 0
 17604  018912                     _Word_SetPair:
 17605                           	opt stack 19
 17606                           
 17607                           ;Types.c: 151: if (pPair >= 4)
 17608                           
 17609                           ;incstack = 0
 17610  018912  0E03               	movlw	3
 17611  018914  0100               	movlb	0	; () banked
 17612  018916  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 17613  018918  D00E               	goto	l776
 17614                           
 17615                           ; BSR set to: 0
 17616                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 17617  01891A  0E01               	movlw	1
 17618  01891C  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 17619  01891E  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 17620  018920  0E00               	movlw	0
 17621  018922  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 17622  018924  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 17623  018926  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 17624  018928  0FFC               	addlw	252
 17625  01892A  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 17626  01892C  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 17627  018930  EC44  F0C6         	call	_Byte_SetPair	;wreg free
 17628  018934  0012               	return	
 17629  018936                     l776:
 17630                           
 17631                           ;Types.c: 153: else
 17632                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 17633  018936  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 17634  01893A  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 17635  01893E  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 17636  018942  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 17637  018946  EC44  F0C6         	call	_Byte_SetPair	;wreg free
 17638  01894A  0012               	return	
 17639  01894C                     __end_of_Word_SetPair:
 17640                           	opt stack 0
 17641                           tosu	equ	0xFFF
 17642                           tosh	equ	0xFFE
 17643                           tosl	equ	0xFFD
 17644                           pclath	equ	0xFFA
 17645                           tblptru	equ	0xFF8
 17646                           tblptrh	equ	0xFF7
 17647                           tblptrl	equ	0xFF6
 17648                           tablat	equ	0xFF5
 17649                           prodh	equ	0xFF4
 17650                           prodl	equ	0xFF3
 17651                           intcon	equ	0xFF2
 17652                           postinc0	equ	0xFEE
 17653                           wreg	equ	0xFE8
 17654                           indf1	equ	0xFE7
 17655                           postdec1	equ	0xFE5
 17656                           fsr1h	equ	0xFE2
 17657                           fsr1l	equ	0xFE1
 17658                           indf2	equ	0xFDF
 17659                           postinc2	equ	0xFDE
 17660                           postdec2	equ	0xFDD
 17661                           plusw2	equ	0xFDB
 17662                           fsr2h	equ	0xFDA
 17663                           fsr2l	equ	0xFD9
 17664                           status	equ	0xFD8
 17665                           
 17666 ;; *************** function _Byte_SetPair *****************
 17667 ;; Defined at:
 17668 ;;		line 83 in file "Library/Types.c"
 17669 ;; Parameters:    Size  Location     Type
 17670 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 17671 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 17672 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 17673 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 17674 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 17675 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 17676 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 17677 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 17678 ;;		 -> NULL(0), 
 17679 ;;  pPair           1   13[BANK0 ] unsigned char 
 17680 ;;  pValue          1   14[BANK0 ] unsigned char 
 17681 ;; Auto vars:     Size  Location     Type
 17682 ;;		None
 17683 ;; Return value:  Size  Location     Type
 17684 ;;                  1    wreg      void 
 17685 ;; Registers used:
 17686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17687 ;; Tracked objects:
 17688 ;;		On entry : 0/0
 17689 ;;		On exit  : 0/0
 17690 ;;		Unchanged: 0/0
 17691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17692 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17695 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17696 ;;Total ram usage:        4 bytes
 17697 ;; Hardware stack levels used:    1
 17698 ;; Hardware stack levels required when called:    8
 17699 ;; This function calls:
 17700 ;;		_Byte_SetZone
 17701 ;; This function is called by:
 17702 ;;		_Word_SetPair
 17703 ;;		_Port_SetPairType
 17704 ;;		_Port_SetPair
 17705 ;; This function uses a non-reentrant model
 17706 ;;
 17707                           
 17708                           	psect	text83
 17709  018C88                     __ptext83:
 17710                           	opt stack 0
 17711  018C88                     _Byte_SetPair:
 17712                           	opt stack 19
 17713                           
 17714                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 17715                           
 17716                           ;incstack = 0
 17717  018C88  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 17718  018C8C  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 17719  018C90  0E04               	movlw	4
 17720  018C92  0100               	movlb	0	; () banked
 17721  018C94  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 17722  018C96  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 17723  018C9A  0E02               	movlw	2
 17724  018C9C  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 17725  018C9E  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 17726  018CA2  EC90  F0BA         	call	_Byte_SetZone	;wreg free
 17727  018CA6  0012               	return		;funcret
 17728  018CA8                     __end_of_Byte_SetPair:
 17729                           	opt stack 0
 17730                           tosu	equ	0xFFF
 17731                           tosh	equ	0xFFE
 17732                           tosl	equ	0xFFD
 17733                           pclath	equ	0xFFA
 17734                           tblptru	equ	0xFF8
 17735                           tblptrh	equ	0xFF7
 17736                           tblptrl	equ	0xFF6
 17737                           tablat	equ	0xFF5
 17738                           prodh	equ	0xFF4
 17739                           prodl	equ	0xFF3
 17740                           intcon	equ	0xFF2
 17741                           postinc0	equ	0xFEE
 17742                           wreg	equ	0xFE8
 17743                           indf1	equ	0xFE7
 17744                           postdec1	equ	0xFE5
 17745                           fsr1h	equ	0xFE2
 17746                           fsr1l	equ	0xFE1
 17747                           indf2	equ	0xFDF
 17748                           postinc2	equ	0xFDE
 17749                           postdec2	equ	0xFDD
 17750                           plusw2	equ	0xFDB
 17751                           fsr2h	equ	0xFDA
 17752                           fsr2l	equ	0xFD9
 17753                           status	equ	0xFD8
 17754                           
 17755 ;; *************** function _Port_CheckQuadType *****************
 17756 ;; Defined at:
 17757 ;;		line 126 in file "Library/Port.c"
 17758 ;; Parameters:    Size  Location     Type
 17759 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 17760 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17761 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17762 ;;  pQuad           1   49[BANK0 ] enum E6776
 17763 ;;  pDrive          1   50[BANK0 ] enum E6469
 17764 ;; Auto vars:     Size  Location     Type
 17765 ;;  Output          1   53[BANK0 ] enum E6475
 17766 ;;  Pair2           1   52[BANK0 ] enum E6760
 17767 ;;  Pair1           1   51[BANK0 ] enum E6760
 17768 ;; Return value:  Size  Location     Type
 17769 ;;                  1    wreg      enum E6475
 17770 ;; Registers used:
 17771 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17772 ;; Tracked objects:
 17773 ;;		On entry : 0/0
 17774 ;;		On exit  : 0/0
 17775 ;;		Unchanged: 0/0
 17776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17777 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17778 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17780 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17781 ;;Total ram usage:        7 bytes
 17782 ;; Hardware stack levels used:    1
 17783 ;; Hardware stack levels required when called:   12
 17784 ;; This function calls:
 17785 ;;		_Port_CheckPairType
 17786 ;; This function is called by:
 17787 ;;		_Port_CheckPortType
 17788 ;;		_Port_SetQuadType
 17789 ;; This function uses a non-reentrant model
 17790 ;;
 17791                           
 17792                           	psect	text84
 17793  018314                     __ptext84:
 17794                           	opt stack 0
 17795  018314                     _Port_CheckQuadType:
 17796                           	opt stack 15
 17797                           
 17798                           ;Port.c: 128: ePinError Output = ePinErrorState;
 17799                           
 17800                           ;incstack = 0
 17801  018314  0E05               	movlw	5
 17802  018316  0100               	movlb	0	; () banked
 17803  018318  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 17804                           
 17805                           ; BSR set to: 0
 17806                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 17807  01831A  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 17808  01831C  0D02               	mullw	2
 17809  01831E  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 17810                           
 17811                           ; BSR set to: 0
 17812                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 17813  018322  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 17814  018324  0D02               	mullw	2
 17815  018326  28F3               	incf	prodl,w,c
 17816  018328  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 17817                           
 17818                           ; BSR set to: 0
 17819                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 17820  01832A  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 17821  01832E  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 17822  018332  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 17823  018336  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 17824  01833A  ECDA  F0BF         	call	_Port_CheckPairType	;wreg free
 17825  01833E  0100               	movlb	0	; () banked
 17826  018340  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 17827  018342  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 17828  018344  A4D8               	btfss	status,2,c
 17829  018346  D00C               	goto	l393
 17830                           
 17831                           ; BSR set to: 0
 17832                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 17833  018348  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 17834  01834C  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 17835  018350  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 17836  018354  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 17837  018358  ECDA  F0BF         	call	_Port_CheckPairType	;wreg free
 17838  01835C  0100               	movlb	0	; () banked
 17839  01835E  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 17840  018360                     l393:
 17841                           
 17842                           ; BSR set to: 0
 17843                           ;Port.c: 136: return Output;
 17844                           
 17845                           ; BSR set to: 0
 17846  018360  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 17847  018362  0012               	return	
 17848  018364                     __end_of_Port_CheckQuadType:
 17849                           	opt stack 0
 17850                           tosu	equ	0xFFF
 17851                           tosh	equ	0xFFE
 17852                           tosl	equ	0xFFD
 17853                           pclath	equ	0xFFA
 17854                           tblptru	equ	0xFF8
 17855                           tblptrh	equ	0xFF7
 17856                           tblptrl	equ	0xFF6
 17857                           tablat	equ	0xFF5
 17858                           prodh	equ	0xFF4
 17859                           prodl	equ	0xFF3
 17860                           intcon	equ	0xFF2
 17861                           postinc0	equ	0xFEE
 17862                           wreg	equ	0xFE8
 17863                           indf1	equ	0xFE7
 17864                           postdec1	equ	0xFE5
 17865                           fsr1h	equ	0xFE2
 17866                           fsr1l	equ	0xFE1
 17867                           indf2	equ	0xFDF
 17868                           postinc2	equ	0xFDE
 17869                           postdec2	equ	0xFDD
 17870                           plusw2	equ	0xFDB
 17871                           fsr2h	equ	0xFDA
 17872                           fsr2l	equ	0xFD9
 17873                           status	equ	0xFD8
 17874                           
 17875 ;; *************** function _Port_CheckPairType *****************
 17876 ;; Defined at:
 17877 ;;		line 112 in file "Library/Port.c"
 17878 ;; Parameters:    Size  Location     Type
 17879 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 17880 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17881 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17882 ;;  pPair           1   40[BANK0 ] enum E6760
 17883 ;;  pDrive          1   41[BANK0 ] enum E6469
 17884 ;; Auto vars:     Size  Location     Type
 17885 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 17886 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17887 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 17888 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 17889 ;;		 -> PortC(10), PortF(10), NULL(0), 
 17890 ;;  Output          1   44[BANK0 ] enum E6475
 17891 ;;  Pin2            1   43[BANK0 ] enum E6750
 17892 ;;  Pin1            1   42[BANK0 ] enum E6750
 17893 ;; Return value:  Size  Location     Type
 17894 ;;                  1    wreg      enum E6475
 17895 ;; Registers used:
 17896 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17897 ;; Tracked objects:
 17898 ;;		On entry : 0/0
 17899 ;;		On exit  : 0/0
 17900 ;;		Unchanged: 0/0
 17901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17902 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17903 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17905 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17906 ;;Total ram usage:        9 bytes
 17907 ;; Hardware stack levels used:    1
 17908 ;; Hardware stack levels required when called:   11
 17909 ;; This function calls:
 17910 ;;		_PortProperty_Valid
 17911 ;; This function is called by:
 17912 ;;		_Port_CheckQuadType
 17913 ;;		_Port_SetPairType
 17914 ;; This function uses a non-reentrant model
 17915 ;;
 17916                           
 17917                           	psect	text85
 17918  017FB4                     __ptext85:
 17919                           	opt stack 0
 17920  017FB4                     _Port_CheckPairType:
 17921                           	opt stack 15
 17922                           
 17923                           ;Port.c: 114: ePinError Output = ePinErrorState;
 17924                           
 17925                           ; BSR set to: 0
 17926                           ;incstack = 0
 17927  017FB4  0E05               	movlw	5
 17928  017FB6  0100               	movlb	0	; () banked
 17929  017FB8  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 17930                           
 17931                           ; BSR set to: 0
 17932                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 17933  017FBA  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 17934  017FBE  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 17935  017FC2  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 17936  017FC6  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 17937                           
 17938                           ; BSR set to: 0
 17939                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 17940  017FCA  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 17941  017FCC  0D02               	mullw	2
 17942  017FCE  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 17943                           
 17944                           ; BSR set to: 0
 17945                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 17946  017FD2  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 17947  017FD4  0D02               	mullw	2
 17948  017FD6  28F3               	incf	prodl,w,c
 17949  017FD8  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 17950                           
 17951                           ; BSR set to: 0
 17952                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 17953  017FDA  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 17954  017FDE  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 17955  017FE2  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 17956  017FE6  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 17957  017FEA  EC10  F0BF         	call	_PortProperty_Valid	;wreg free
 17958  017FEE  0100               	movlb	0	; () banked
 17959  017FF0  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 17960  017FF2  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 17961  017FF4  A4D8               	btfss	status,2,c
 17962  017FF6  D00C               	goto	l389
 17963                           
 17964                           ; BSR set to: 0
 17965                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 17966  017FF8  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 17967  017FFC  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 17968  018000  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 17969  018004  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 17970  018008  EC10  F0BF         	call	_PortProperty_Valid	;wreg free
 17971  01800C  0100               	movlb	0	; () banked
 17972  01800E  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 17973  018010                     l389:
 17974                           
 17975                           ; BSR set to: 0
 17976                           ;Port.c: 124: return Output;
 17977                           
 17978                           ; BSR set to: 0
 17979  018010  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 17980  018012  0012               	return	
 17981  018014                     __end_of_Port_CheckPairType:
 17982                           	opt stack 0
 17983                           tosu	equ	0xFFF
 17984                           tosh	equ	0xFFE
 17985                           tosl	equ	0xFFD
 17986                           pclath	equ	0xFFA
 17987                           tblptru	equ	0xFF8
 17988                           tblptrh	equ	0xFF7
 17989                           tblptrl	equ	0xFF6
 17990                           tablat	equ	0xFF5
 17991                           prodh	equ	0xFF4
 17992                           prodl	equ	0xFF3
 17993                           intcon	equ	0xFF2
 17994                           postinc0	equ	0xFEE
 17995                           wreg	equ	0xFE8
 17996                           indf1	equ	0xFE7
 17997                           postdec1	equ	0xFE5
 17998                           fsr1h	equ	0xFE2
 17999                           fsr1l	equ	0xFE1
 18000                           indf2	equ	0xFDF
 18001                           postinc2	equ	0xFDE
 18002                           postdec2	equ	0xFDD
 18003                           plusw2	equ	0xFDB
 18004                           fsr2h	equ	0xFDA
 18005                           fsr2l	equ	0xFD9
 18006                           status	equ	0xFD8
 18007                           
 18008 ;; *************** function _PortProperty_Valid *****************
 18009 ;; Defined at:
 18010 ;;		line 220 in file "Library/Types.c"
 18011 ;; Parameters:    Size  Location     Type
 18012 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 18013 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18014 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18015 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18016 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18017 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 18018 ;;  pPin            1   18[BANK0 ] unsigned char 
 18019 ;; Auto vars:     Size  Location     Type
 18020 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 18021 ;;  Pair            1   37[BANK0 ] enum E6469
 18022 ;; Return value:  Size  Location     Type
 18023 ;;                  1    wreg      enum E6475
 18024 ;; Registers used:
 18025 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18026 ;; Tracked objects:
 18027 ;;		On entry : 0/0
 18028 ;;		On exit  : 0/0
 18029 ;;		Unchanged: 0/0
 18030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18031 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18032 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18033 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18034 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18035 ;;Total ram usage:       23 bytes
 18036 ;; Hardware stack levels used:    1
 18037 ;; Hardware stack levels required when called:   10
 18038 ;; This function calls:
 18039 ;;		_Word_GetPair
 18040 ;; This function is called by:
 18041 ;;		_Port_CheckPairType
 18042 ;;		_Port_SetPinType
 18043 ;; This function uses a non-reentrant model
 18044 ;;
 18045                           
 18046                           	psect	text86
 18047  017E20                     __ptext86:
 18048                           	opt stack 0
 18049  017E20                     _PortProperty_Valid:
 18050                           	opt stack 15
 18051                           
 18052                           ;Types.c: 222: ePinDrive Pair;
 18053                           ;Types.c: 223: const ePinError Errors[4][4] =
 18054                           ;Types.c: 224: {
 18055                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 18056                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 18057                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 18058                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 18059                           ;Types.c: 230: };
 18060                           
 18061                           ; BSR set to: 0
 18062                           ;incstack = 0
 18063  017E20  0EFD               	movlw	low PortProperty_Valid@F6830
 18064  017E22  6EF6               	movwf	tblptrl,c
 18065  017E24                     	if	1	;There is more than 1 active tblptr byte
 18066  017E24  0EFB               	movlw	high PortProperty_Valid@F6830
 18067  017E26  6EF7               	movwf	tblptrh,c
 18068  017E28                     	endif
 18069  017E28                     	if	1	;There are 3 active tblptr bytes
 18070  017E28  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 18071  017E2A  6EF8               	movwf	tblptru,c
 18072  017E2C                     	endif
 18073  017E2C  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 18074  017E30  0E0F               	movlw	15
 18075  017E32                     u12520:
 18076  017E32  0009               	tblrd		*+
 18077  017E34  CFF5 FFDE          	movff	tablat,postinc2
 18078  017E38  06E8               	decf	wreg,f,c
 18079  017E3A  E2FB               	bc	u12520
 18080                           
 18081                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 18082  017E3C  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 18083  017E40  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 18084  017E44  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 18085  017E48  EC12  F0C5         	call	_Word_GetPair	;wreg free
 18086  017E4C  0100               	movlb	0	; () banked
 18087  017E4E  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 18088                           
 18089                           ; BSR set to: 0
 18090                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 18091  017E50  0E04               	movlw	4
 18092  017E52  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 18093  017E54  D017               	goto	l819
 18094                           
 18095                           ; BSR set to: 0
 18096  017E56  0E04               	movlw	4
 18097  017E58  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 18098  017E5A  D014               	goto	l819
 18099                           
 18100                           ; BSR set to: 0
 18101                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 18102  017E5C  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 18103  017E5E  0D04               	mullw	4
 18104  017E60  0E75               	movlw	low PortProperty_Valid@Errors
 18105  017E62  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 18106  017E64  0E00               	movlw	high PortProperty_Valid@Errors
 18107  017E66  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 18108  017E68  50F3               	movf	prodl,w,c
 18109  017E6A  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 18110  017E6C  50F4               	movf	prodh,w,c
 18111  017E6E  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 18112  017E70  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 18113  017E72  0D01               	mullw	1
 18114  017E74  50F3               	movf	prodl,w,c
 18115  017E76  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 18116  017E78  6ED9               	movwf	fsr2l,c
 18117  017E7A  50F4               	movf	prodh,w,c
 18118  017E7C  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 18119  017E7E  6EDA               	movwf	fsr2h,c
 18120  017E80  50DF               	movf	indf2,w,c
 18121                           
 18122                           ; BSR set to: 0
 18123  017E82  0012               	return	
 18124  017E84                     l819:
 18125                           
 18126                           ; BSR set to: 0
 18127                           ;Types.c: 237: return ePinErrorState;
 18128                           
 18129                           ; BSR set to: 0
 18130  017E84  0E05               	movlw	5
 18131  017E86  0012               	return	
 18132  017E88                     __end_of_PortProperty_Valid:
 18133                           	opt stack 0
 18134                           tosu	equ	0xFFF
 18135                           tosh	equ	0xFFE
 18136                           tosl	equ	0xFFD
 18137                           pclath	equ	0xFFA
 18138                           tblptru	equ	0xFF8
 18139                           tblptrh	equ	0xFF7
 18140                           tblptrl	equ	0xFF6
 18141                           tablat	equ	0xFF5
 18142                           prodh	equ	0xFF4
 18143                           prodl	equ	0xFF3
 18144                           intcon	equ	0xFF2
 18145                           postinc0	equ	0xFEE
 18146                           wreg	equ	0xFE8
 18147                           indf1	equ	0xFE7
 18148                           postdec1	equ	0xFE5
 18149                           fsr1h	equ	0xFE2
 18150                           fsr1l	equ	0xFE1
 18151                           indf2	equ	0xFDF
 18152                           postinc2	equ	0xFDE
 18153                           postdec2	equ	0xFDD
 18154                           plusw2	equ	0xFDB
 18155                           fsr2h	equ	0xFDA
 18156                           fsr2l	equ	0xFD9
 18157                           status	equ	0xFD8
 18158                           
 18159 ;; *************** function _Word_GetPair *****************
 18160 ;; Defined at:
 18161 ;;		line 156 in file "Library/Types.c"
 18162 ;; Parameters:    Size  Location     Type
 18163 ;;  pInput          2   12[BANK0 ] PTR struct Word
 18164 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18165 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18166 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18167 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18168 ;;  pPair           1   14[BANK0 ] unsigned char 
 18169 ;; Auto vars:     Size  Location     Type
 18170 ;;		None
 18171 ;; Return value:  Size  Location     Type
 18172 ;;                  1    wreg      unsigned char 
 18173 ;; Registers used:
 18174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18175 ;; Tracked objects:
 18176 ;;		On entry : 0/0
 18177 ;;		On exit  : 0/0
 18178 ;;		Unchanged: 0/0
 18179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18180 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18183 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18184 ;;Total ram usage:        3 bytes
 18185 ;; Hardware stack levels used:    1
 18186 ;; Hardware stack levels required when called:    9
 18187 ;; This function calls:
 18188 ;;		_Byte_GetPair
 18189 ;; This function is called by:
 18190 ;;		_Port_Init
 18191 ;;		_Port_SetPin
 18192 ;;		_Port_Set
 18193 ;;		_PortProperty_Valid
 18194 ;;		_Port_SetPair
 18195 ;;		_Port_SetQuad
 18196 ;; This function uses a non-reentrant model
 18197 ;;
 18198                           
 18199                           	psect	text87
 18200  018A24                     __ptext87:
 18201                           	opt stack 0
 18202  018A24                     _Word_GetPair:
 18203                           	opt stack 15
 18204                           
 18205                           ;Types.c: 158: if (pPair >= 4)
 18206                           
 18207                           ; BSR set to: 0
 18208                           ;incstack = 0
 18209  018A24  0E03               	movlw	3
 18210  018A26  0100               	movlb	0	; () banked
 18211  018A28  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 18212  018A2A  D00C               	goto	l781
 18213                           
 18214                           ; BSR set to: 0
 18215                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 18216  018A2C  0E01               	movlw	1
 18217  018A2E  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 18218  018A30  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 18219  018A32  0E00               	movlw	0
 18220  018A34  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 18221  018A36  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 18222  018A38  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 18223  018A3A  0FFC               	addlw	252
 18224  018A3C  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 18225  018A3E  ECA3  F0C6         	call	_Byte_GetPair	;wreg free
 18226  018A42  0012               	return	
 18227  018A44                     l781:
 18228                           
 18229                           ;Types.c: 160: else
 18230                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 18231  018A44  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 18232  018A48  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 18233  018A4C  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 18234  018A50  ECA3  F0C6         	call	_Byte_GetPair	;wreg free
 18235  018A54  0012               	return	
 18236  018A56                     __end_of_Word_GetPair:
 18237                           	opt stack 0
 18238                           tosu	equ	0xFFF
 18239                           tosh	equ	0xFFE
 18240                           tosl	equ	0xFFD
 18241                           pclath	equ	0xFFA
 18242                           tblptru	equ	0xFF8
 18243                           tblptrh	equ	0xFF7
 18244                           tblptrl	equ	0xFF6
 18245                           tablat	equ	0xFF5
 18246                           prodh	equ	0xFF4
 18247                           prodl	equ	0xFF3
 18248                           intcon	equ	0xFF2
 18249                           postinc0	equ	0xFEE
 18250                           wreg	equ	0xFE8
 18251                           indf1	equ	0xFE7
 18252                           postdec1	equ	0xFE5
 18253                           fsr1h	equ	0xFE2
 18254                           fsr1l	equ	0xFE1
 18255                           indf2	equ	0xFDF
 18256                           postinc2	equ	0xFDE
 18257                           postdec2	equ	0xFDD
 18258                           plusw2	equ	0xFDB
 18259                           fsr2h	equ	0xFDA
 18260                           fsr2l	equ	0xFD9
 18261                           status	equ	0xFD8
 18262                           
 18263 ;; *************** function _Byte_GetPair *****************
 18264 ;; Defined at:
 18265 ;;		line 87 in file "Library/Types.c"
 18266 ;; Parameters:    Size  Location     Type
 18267 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 18268 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 18269 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 18270 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 18271 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 18272 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 18273 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 18274 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 18275 ;;		 -> NULL(0), 
 18276 ;;  pPair           1   11[BANK0 ] unsigned char 
 18277 ;; Auto vars:     Size  Location     Type
 18278 ;;		None
 18279 ;; Return value:  Size  Location     Type
 18280 ;;                  1    wreg      unsigned char 
 18281 ;; Registers used:
 18282 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18283 ;; Tracked objects:
 18284 ;;		On entry : 0/0
 18285 ;;		On exit  : 0/0
 18286 ;;		Unchanged: 0/0
 18287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18288 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18291 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18292 ;;Total ram usage:        3 bytes
 18293 ;; Hardware stack levels used:    1
 18294 ;; Hardware stack levels required when called:    8
 18295 ;; This function calls:
 18296 ;;		_Byte_GetZone
 18297 ;; This function is called by:
 18298 ;;		_Word_GetPair
 18299 ;; This function uses a non-reentrant model
 18300 ;;
 18301                           
 18302                           	psect	text88
 18303  018D46                     __ptext88:
 18304                           	opt stack 0
 18305  018D46                     _Byte_GetPair:
 18306                           	opt stack 15
 18307                           
 18308                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 18309                           
 18310                           ;incstack = 0
 18311  018D46  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 18312  018D4A  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 18313  018D4E  0E04               	movlw	4
 18314  018D50  0100               	movlb	0	; () banked
 18315  018D52  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 18316  018D54  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 18317  018D58  0E02               	movlw	2
 18318  018D5A  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 18319  018D5C  ECE2  F0BC         	call	_Byte_GetZone	;wreg free
 18320  018D60  0012               	return	
 18321  018D62                     __end_of_Byte_GetPair:
 18322                           	opt stack 0
 18323                           tosu	equ	0xFFF
 18324                           tosh	equ	0xFFE
 18325                           tosl	equ	0xFFD
 18326                           pclath	equ	0xFFA
 18327                           tblptru	equ	0xFF8
 18328                           tblptrh	equ	0xFF7
 18329                           tblptrl	equ	0xFF6
 18330                           tablat	equ	0xFF5
 18331                           prodh	equ	0xFF4
 18332                           prodl	equ	0xFF3
 18333                           intcon	equ	0xFF2
 18334                           postinc0	equ	0xFEE
 18335                           wreg	equ	0xFE8
 18336                           indf1	equ	0xFE7
 18337                           postdec1	equ	0xFE5
 18338                           fsr1h	equ	0xFE2
 18339                           fsr1l	equ	0xFE1
 18340                           indf2	equ	0xFDF
 18341                           postinc2	equ	0xFDE
 18342                           postdec2	equ	0xFDD
 18343                           plusw2	equ	0xFDB
 18344                           fsr2h	equ	0xFDA
 18345                           fsr2l	equ	0xFD9
 18346                           status	equ	0xFD8
 18347                           
 18348 ;; *************** function _Byte_GetZone *****************
 18349 ;; Defined at:
 18350 ;;		line 64 in file "Library/Types.c"
 18351 ;; Parameters:    Size  Location     Type
 18352 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 18353 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 18354 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 18355 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 18356 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 18357 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 18358 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 18359 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 18360 ;;		 -> NULL(0), 
 18361 ;;  pMax            1    2[BANK0 ] unsigned char 
 18362 ;;  pChunk          1    3[BANK0 ] unsigned char 
 18363 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 18364 ;; Auto vars:     Size  Location     Type
 18365 ;;  Output          1    8[BANK0 ] unsigned char 
 18366 ;;  Offset          1    7[BANK0 ] unsigned char 
 18367 ;;  MASK            1    6[BANK0 ] unsigned char 
 18368 ;; Return value:  Size  Location     Type
 18369 ;;                  1    wreg      unsigned char 
 18370 ;; Registers used:
 18371 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18372 ;; Tracked objects:
 18373 ;;		On entry : 0/0
 18374 ;;		On exit  : 0/0
 18375 ;;		Unchanged: 0/0
 18376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18377 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18378 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18380 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18381 ;;Total ram usage:        9 bytes
 18382 ;; Hardware stack levels used:    1
 18383 ;; Hardware stack levels required when called:    7
 18384 ;; This function calls:
 18385 ;;		Nothing
 18386 ;; This function is called by:
 18387 ;;		_Byte_GetPair
 18388 ;;		_Byte_GetTriple
 18389 ;;		_Byte_GetQuad
 18390 ;; This function uses a non-reentrant model
 18391 ;;
 18392                           
 18393                           	psect	text89
 18394  0179C4                     __ptext89:
 18395                           	opt stack 0
 18396  0179C4                     _Byte_GetZone:
 18397                           	opt stack 15
 18398                           
 18399                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 18400                           
 18401                           ;incstack = 0
 18402  0179C4  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 18403  0179C8  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 18404  0179CC  0E00               	movlw	low (__mediumconst shr (0+16))
 18405  0179CE  6EF8               	movwf	tblptru,c
 18406  0179D0  0E0F               	movlw	(high __ramtop+-1)
 18407  0179D2  64F7               	cpfsgt	tblptrh,c
 18408  0179D4  D003               	bra	u11027
 18409  0179D6  0008               	tblrd		*
 18410  0179D8  50F5               	movf	tablat,w,c
 18411  0179DA  D005               	bra	u11020
 18412  0179DC                     u11027:
 18413  0179DC  CFF6 FFE9          	movff	tblptrl,fsr0l
 18414  0179E0  CFF7 FFEA          	movff	tblptrh,fsr0h
 18415  0179E4  50EF               	movf	indf0,w,c
 18416  0179E6                     u11020:
 18417  0179E6  0100               	movlb	0	; () banked
 18418  0179E8  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 18419                           
 18420                           ; BSR set to: 0
 18421                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 18422  0179EA  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 18423  0179EC  0D01               	mullw	1
 18424  0179EE  0E17               	movlw	low _MASKS
 18425  0179F0  24F3               	addwf	prodl,w,c
 18426  0179F2  6EF6               	movwf	tblptrl,c
 18427  0179F4  0EFC               	movlw	high _MASKS
 18428  0179F6  20F4               	addwfc	prodh,w,c
 18429  0179F8  6EF7               	movwf	tblptrh,c
 18430  0179FA                     	if	1	;There are 3 active tblptr bytes
 18431  0179FA  6AF8               	clrf	tblptru,c
 18432  0179FC  0E00               	movlw	low (__mediumconst shr (0+16))
 18433  0179FE  22F8               	addwfc	tblptru,f,c
 18434  017A00                     	endif
 18435  017A00  0008               	tblrd		*
 18436  017A02  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 18437                           
 18438                           ; BSR set to: 0
 18439                           ;Types.c: 68: UINT8 Offset = 0;
 18440  017A06  0E00               	movlw	0
 18441  017A08  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 18442                           
 18443                           ;Types.c: 70: while (pChunk >= pMax)
 18444  017A0A  D003               	goto	l732
 18445  017A0C                     
 18446                           ; BSR set to: 0
 18447                           ;Types.c: 71: {
 18448                           ;Types.c: 72: pChunk -= pMax;
 18449                           
 18450                           ; BSR set to: 0
 18451  017A0C  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 18452  017A0E  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 18453                           
 18454                           ; BSR set to: 0
 18455                           ;Types.c: 73: Offset += 1;
 18456  017A10  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 18457  017A12                     l732:
 18458                           
 18459                           ; BSR set to: 0
 18460                           
 18461                           ; BSR set to: 0
 18462  017A12  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 18463  017A14  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 18464  017A16  B0D8               	btfsc	status,0,c
 18465  017A18  D7F9               	goto	l733
 18466                           
 18467                           ; BSR set to: 0
 18468                           ;Types.c: 74: }
 18469                           ;Types.c: 75: pChunk *= pChunkSize;
 18470                           
 18471                           ; BSR set to: 0
 18472  017A1A  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 18473  017A1C  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 18474  017A1E  50F3               	movf	prodl,w,c
 18475  017A20  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 18476                           
 18477                           ; BSR set to: 0
 18478                           ;Types.c: 76: pChunk += Offset;
 18479  017A22  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 18480  017A24  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 18481                           
 18482                           ; BSR set to: 0
 18483                           ;Types.c: 78: Output >>= pChunk;
 18484  017A26  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 18485  017A28  6F65               	movwf	??_Byte_GetZone& (0+255),b
 18486  017A2A  D002               	goto	u11040
 18487  017A2C                     u11045:
 18488  017A2C  90D8               	bcf	status,0,c
 18489  017A2E  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 18490  017A30                     u11040:
 18491  017A30  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 18492  017A32  D7FC               	goto	u11045
 18493                           
 18494                           ;Types.c: 79: Output &= MASK;
 18495  017A34  0100               	movlb	0	; () banked
 18496  017A36  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 18497  017A38  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 18498                           
 18499                           ; BSR set to: 0
 18500                           ;Types.c: 80: return Output;
 18501  017A3A  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 18502  017A3C  0012               	return	
 18503  017A3E                     __end_of_Byte_GetZone:
 18504                           	opt stack 0
 18505                           tosu	equ	0xFFF
 18506                           tosh	equ	0xFFE
 18507                           tosl	equ	0xFFD
 18508                           pclath	equ	0xFFA
 18509                           tblptru	equ	0xFF8
 18510                           tblptrh	equ	0xFF7
 18511                           tblptrl	equ	0xFF6
 18512                           tablat	equ	0xFF5
 18513                           prodh	equ	0xFF4
 18514                           prodl	equ	0xFF3
 18515                           intcon	equ	0xFF2
 18516                           indf0	equ	0xFEF
 18517                           postinc0	equ	0xFEE
 18518                           fsr0h	equ	0xFEA
 18519                           fsr0l	equ	0xFE9
 18520                           wreg	equ	0xFE8
 18521                           indf1	equ	0xFE7
 18522                           postdec1	equ	0xFE5
 18523                           fsr1h	equ	0xFE2
 18524                           fsr1l	equ	0xFE1
 18525                           indf2	equ	0xFDF
 18526                           postinc2	equ	0xFDE
 18527                           postdec2	equ	0xFDD
 18528                           plusw2	equ	0xFDB
 18529                           fsr2h	equ	0xFDA
 18530                           fsr2l	equ	0xFD9
 18531                           status	equ	0xFD8
 18532                           
 18533 ;; *************** function _Byte_SetQuad *****************
 18534 ;; Defined at:
 18535 ;;		line 101 in file "Library/Types.c"
 18536 ;; Parameters:    Size  Location     Type
 18537 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 18538 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 18539 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 18540 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 18541 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 18542 ;;		 -> NULL(0), 
 18543 ;;  pQuad           1   13[BANK0 ] unsigned char 
 18544 ;;  pValue          1   14[BANK0 ] unsigned char 
 18545 ;; Auto vars:     Size  Location     Type
 18546 ;;		None
 18547 ;; Return value:  Size  Location     Type
 18548 ;;                  1    wreg      void 
 18549 ;; Registers used:
 18550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18551 ;; Tracked objects:
 18552 ;;		On entry : 0/0
 18553 ;;		On exit  : 0/0
 18554 ;;		Unchanged: 0/0
 18555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18556 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18559 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18560 ;;Total ram usage:        4 bytes
 18561 ;; Hardware stack levels used:    1
 18562 ;; Hardware stack levels required when called:    8
 18563 ;; This function calls:
 18564 ;;		_Byte_SetZone
 18565 ;; This function is called by:
 18566 ;;		_Port_SetQuadType
 18567 ;;		_SPI_Init
 18568 ;;		_SPI_MinSpeed
 18569 ;;		_SPI_MaxSpeed
 18570 ;;		_Port_SetQuad
 18571 ;;		_Word_SetQuad
 18572 ;;		_I2C_Init
 18573 ;; This function uses a non-reentrant model
 18574 ;;
 18575                           
 18576                           	psect	text90
 18577  018CA8                     __ptext90:
 18578                           	opt stack 0
 18579  018CA8                     _Byte_SetQuad:
 18580                           	opt stack 20
 18581                           
 18582                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 18583                           
 18584                           ; BSR set to: 0
 18585                           ;incstack = 0
 18586  018CA8  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 18587  018CAC  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 18588  018CB0  0E02               	movlw	2
 18589  018CB2  0100               	movlb	0	; () banked
 18590  018CB4  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 18591  018CB6  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 18592  018CBA  0E04               	movlw	4
 18593  018CBC  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 18594  018CBE  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 18595  018CC2  EC90  F0BA         	call	_Byte_SetZone	;wreg free
 18596  018CC6  0012               	return		;funcret
 18597  018CC8                     __end_of_Byte_SetQuad:
 18598                           	opt stack 0
 18599                           tosu	equ	0xFFF
 18600                           tosh	equ	0xFFE
 18601                           tosl	equ	0xFFD
 18602                           pclath	equ	0xFFA
 18603                           tblptru	equ	0xFF8
 18604                           tblptrh	equ	0xFF7
 18605                           tblptrl	equ	0xFF6
 18606                           tablat	equ	0xFF5
 18607                           prodh	equ	0xFF4
 18608                           prodl	equ	0xFF3
 18609                           intcon	equ	0xFF2
 18610                           indf0	equ	0xFEF
 18611                           postinc0	equ	0xFEE
 18612                           fsr0h	equ	0xFEA
 18613                           fsr0l	equ	0xFE9
 18614                           wreg	equ	0xFE8
 18615                           indf1	equ	0xFE7
 18616                           postdec1	equ	0xFE5
 18617                           fsr1h	equ	0xFE2
 18618                           fsr1l	equ	0xFE1
 18619                           indf2	equ	0xFDF
 18620                           postinc2	equ	0xFDE
 18621                           postdec2	equ	0xFDD
 18622                           plusw2	equ	0xFDB
 18623                           fsr2h	equ	0xFDA
 18624                           fsr2l	equ	0xFD9
 18625                           status	equ	0xFD8
 18626                           
 18627 ;; *************** function _Byte_SetZone *****************
 18628 ;; Defined at:
 18629 ;;		line 47 in file "Library/Types.c"
 18630 ;; Parameters:    Size  Location     Type
 18631 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 18632 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 18633 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 18634 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 18635 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 18636 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 18637 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 18638 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 18639 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18640 ;;  pMax            1    2[BANK0 ] unsigned char 
 18641 ;;  pChunk          1    3[BANK0 ] unsigned char 
 18642 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 18643 ;;  pValue          1    5[BANK0 ] unsigned char 
 18644 ;; Auto vars:     Size  Location     Type
 18645 ;;  MASK            1   10[BANK0 ] unsigned char 
 18646 ;;  Offset          1    9[BANK0 ] unsigned char 
 18647 ;; Return value:  Size  Location     Type
 18648 ;;                  1    wreg      void 
 18649 ;; Registers used:
 18650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18651 ;; Tracked objects:
 18652 ;;		On entry : 0/0
 18653 ;;		On exit  : 0/0
 18654 ;;		Unchanged: 0/0
 18655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18656 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18657 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18658 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18659 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18660 ;;Total ram usage:       11 bytes
 18661 ;; Hardware stack levels used:    1
 18662 ;; Hardware stack levels required when called:    7
 18663 ;; This function calls:
 18664 ;;		Nothing
 18665 ;; This function is called by:
 18666 ;;		_Byte_SetPair
 18667 ;;		_Byte_SetQuad
 18668 ;;		_Byte_SetTriple
 18669 ;; This function uses a non-reentrant model
 18670 ;;
 18671                           
 18672                           	psect	text91
 18673  017520                     __ptext91:
 18674                           	opt stack 0
 18675  017520                     _Byte_SetZone:
 18676                           	opt stack 19
 18677                           
 18678                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 18679                           
 18680                           ;incstack = 0
 18681  017520  0100               	movlb	0	; () banked
 18682  017522  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 18683  017524  0D01               	mullw	1
 18684  017526  0E17               	movlw	low _MASKS
 18685  017528  24F3               	addwf	prodl,w,c
 18686  01752A  6EF6               	movwf	tblptrl,c
 18687  01752C  0EFC               	movlw	high _MASKS
 18688  01752E  20F4               	addwfc	prodh,w,c
 18689  017530  6EF7               	movwf	tblptrh,c
 18690  017532                     	if	1	;There are 3 active tblptr bytes
 18691  017532  6AF8               	clrf	tblptru,c
 18692  017534  0E00               	movlw	low (__mediumconst shr (0+16))
 18693  017536  22F8               	addwfc	tblptru,f,c
 18694  017538                     	endif
 18695  017538  0008               	tblrd		*
 18696  01753A  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 18697                           
 18698                           ; BSR set to: 0
 18699                           ;Types.c: 50: UINT8 Offset = 0;
 18700  01753E  0E00               	movlw	0
 18701  017540  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 18702                           
 18703                           ;Types.c: 52: while (pChunk >= pMax)
 18704  017542  D003               	goto	l726
 18705  017544                     
 18706                           ; BSR set to: 0
 18707                           ;Types.c: 53: {
 18708                           ;Types.c: 54: pChunk -= pMax;
 18709                           
 18710                           ; BSR set to: 0
 18711  017544  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 18712  017546  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 18713                           
 18714                           ; BSR set to: 0
 18715                           ;Types.c: 55: Offset += 1;
 18716  017548  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 18717  01754A                     l726:
 18718                           
 18719                           ; BSR set to: 0
 18720                           
 18721                           ; BSR set to: 0
 18722  01754A  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 18723  01754C  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 18724  01754E  B0D8               	btfsc	status,0,c
 18725  017550  D7F9               	goto	l727
 18726                           
 18727                           ; BSR set to: 0
 18728                           ;Types.c: 56: }
 18729                           ;Types.c: 57: pChunk *= pChunkSize;
 18730                           
 18731                           ; BSR set to: 0
 18732  017552  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 18733  017554  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 18734  017556  50F3               	movf	prodl,w,c
 18735  017558  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 18736                           
 18737                           ; BSR set to: 0
 18738                           ;Types.c: 58: pChunk += Offset;
 18739  01755A  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 18740  01755C  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 18741                           
 18742                           ; BSR set to: 0
 18743                           ;Types.c: 60: pValue &= MASK;
 18744  01755E  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 18745  017560  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 18746                           
 18747                           ; BSR set to: 0
 18748                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 18749  017562  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 18750  017566  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 18751  01756A  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 18752  01756C  D002               	goto	u12584
 18753  01756E                     u12585:
 18754  01756E  90D8               	bcf	status,0,c
 18755  017570  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 18756  017572                     u12584:
 18757  017572  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 18758  017574  D7FC               	goto	u12585
 18759  017576  0100               	movlb	0	; () banked
 18760  017578  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 18761  01757A  0AFF               	xorlw	255
 18762  01757C  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 18763  01757E  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 18764  017582  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 18765  017586  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 18766  017588  16DF               	andwf	indf2,f,c
 18767                           
 18768                           ; BSR set to: 0
 18769                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 18770  01758A  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 18771  01758E  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 18772  017592  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 18773  017594  D002               	goto	u12594
 18774  017596                     u12595:
 18775  017596  90D8               	bcf	status,0,c
 18776  017598  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 18777  01759A                     u12594:
 18778  01759A  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 18779  01759C  D7FC               	goto	u12595
 18780  01759E  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 18781  0175A2  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 18782  0175A6  0100               	movlb	0	; () banked
 18783  0175A8  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 18784  0175AA  12DF               	iorwf	indf2,f,c
 18785                           
 18786                           ; BSR set to: 0
 18787  0175AC  0012               	return		;funcret
 18788  0175AE                     __end_of_Byte_SetZone:
 18789                           	opt stack 0
 18790                           tosu	equ	0xFFF
 18791                           tosh	equ	0xFFE
 18792                           tosl	equ	0xFFD
 18793                           pclath	equ	0xFFA
 18794                           tblptru	equ	0xFF8
 18795                           tblptrh	equ	0xFF7
 18796                           tblptrl	equ	0xFF6
 18797                           tablat	equ	0xFF5
 18798                           prodh	equ	0xFF4
 18799                           prodl	equ	0xFF3
 18800                           intcon	equ	0xFF2
 18801                           indf0	equ	0xFEF
 18802                           postinc0	equ	0xFEE
 18803                           fsr0h	equ	0xFEA
 18804                           fsr0l	equ	0xFE9
 18805                           wreg	equ	0xFE8
 18806                           indf1	equ	0xFE7
 18807                           postdec1	equ	0xFE5
 18808                           fsr1h	equ	0xFE2
 18809                           fsr1l	equ	0xFE1
 18810                           indf2	equ	0xFDF
 18811                           postinc2	equ	0xFDE
 18812                           postdec2	equ	0xFDD
 18813                           plusw2	equ	0xFDB
 18814                           fsr2h	equ	0xFDA
 18815                           fsr2l	equ	0xFD9
 18816                           status	equ	0xFD8
 18817                           
 18818 ;; *************** function _Create_Maze *****************
 18819 ;; Defined at:
 18820 ;;		line 10 in file "dans.c"
 18821 ;; Parameters:    Size  Location     Type
 18822 ;;		None
 18823 ;; Auto vars:     Size  Location     Type
 18824 ;;  p               2   10[BANK0 ] int 
 18825 ;;  y               2   14[BANK0 ] int 
 18826 ;;  x               2   12[BANK0 ] int 
 18827 ;;  count           2    8[BANK0 ] int 
 18828 ;; Return value:  Size  Location     Type
 18829 ;;                  2  2016[None  ] int 
 18830 ;; Registers used:
 18831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18832 ;; Tracked objects:
 18833 ;;		On entry : 0/0
 18834 ;;		On exit  : 0/0
 18835 ;;		Unchanged: 0/0
 18836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18838 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18839 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18840 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18841 ;;Total ram usage:       10 bytes
 18842 ;; Hardware stack levels used:    1
 18843 ;; Hardware stack levels required when called:    8
 18844 ;; This function calls:
 18845 ;;		___wmul
 18846 ;; This function is called by:
 18847 ;;		_main
 18848 ;; This function uses a non-reentrant model
 18849 ;;
 18850                           
 18851                           	psect	text92
 18852  010000                     __ptext92:
 18853                           	opt stack 0
 18854  010000                     _Create_Maze:
 18855                           	opt stack 22
 18856                           
 18857                           ;dans.c: 12: int count = 0;
 18858                           
 18859                           ; BSR set to: 0
 18860                           ;incstack = 0
 18861  010000  0E00               	movlw	0
 18862  010002  0100               	movlb	0	; () banked
 18863  010004  6F69               	movwf	(Create_Maze@count+1)& (0+255),b
 18864  010006  0E00               	movlw	0
 18865  010008  6F68               	movwf	Create_Maze@count& (0+255),b
 18866                           
 18867                           ;dans.c: 13: int x = 0;
 18868  01000A  0E00               	movlw	0
 18869  01000C  6F6D               	movwf	(Create_Maze@x+1)& (0+255),b
 18870  01000E  0E00               	movlw	0
 18871  010010  6F6C               	movwf	Create_Maze@x& (0+255),b
 18872                           
 18873                           ;dans.c: 14: int y = 0;
 18874  010012  0E00               	movlw	0
 18875  010014  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 18876  010016  0E00               	movlw	0
 18877  010018  6F6E               	movwf	Create_Maze@y& (0+255),b
 18878                           
 18879                           ;dans.c: 15: for (int p = 0; p < 20; p++) {
 18880  01001A  0E00               	movlw	0
 18881  01001C  6F6B               	movwf	(Create_Maze@p+1)& (0+255),b
 18882  01001E  0E00               	movlw	0
 18883  010020  6F6A               	movwf	Create_Maze@p& (0+255),b
 18884  010022                     l17339:
 18885                           
 18886                           ; BSR set to: 0
 18887  010022  BF6B               	btfsc	(Create_Maze@p+1)& (0+255),7,b
 18888  010024  D006               	goto	l2360
 18889  010026  516B               	movf	(Create_Maze@p+1)& (0+255),w,b
 18890  010028  E114               	bnz	l17349
 18891  01002A  0E14               	movlw	20
 18892  01002C  5D6A               	subwf	Create_Maze@p& (0+255),w,b
 18893  01002E  B0D8               	btfsc	status,0,c
 18894  010030  D010               	goto	u14920
 18895  010032                     l2360:
 18896                           
 18897                           ; BSR set to: 0
 18898                           ;dans.c: 16: stack[p] = 100;
 18899                           
 18900                           ; BSR set to: 0
 18901  010032  90D8               	bcf	status,0,c
 18902  010034  356A               	rlcf	Create_Maze@p& (0+255),w,b
 18903  010036  6ED9               	movwf	fsr2l,c
 18904  010038  356B               	rlcf	(Create_Maze@p+1)& (0+255),w,b
 18905  01003A  6EDA               	movwf	fsr2h,c
 18906  01003C  0E00               	movlw	low _stack
 18907  01003E  26D9               	addwf	fsr2l,f,c
 18908  010040  0E03               	movlw	high _stack
 18909  010042  22DA               	addwfc	fsr2h,f,c
 18910  010044  0E64               	movlw	100
 18911  010046  6EDE               	movwf	postinc2,c
 18912  010048  0E00               	movlw	0
 18913  01004A  6EDD               	movwf	postdec2,c
 18914                           
 18915                           ; BSR set to: 0
 18916  01004C  4B6A               	infsnz	Create_Maze@p& (0+255),f,b
 18917  01004E  2B6B               	incf	(Create_Maze@p+1)& (0+255),f,b
 18918  010050  D7E8               	goto	l17339
 18919  010052                     u14920:
 18920  010052                     l17349:
 18921                           
 18922                           ; BSR set to: 0
 18923                           ;dans.c: 17: }
 18924                           ;dans.c: 18: for (x = 0; x < 4; ++x) {
 18925  010052  0E00               	movlw	0
 18926  010054  6F6D               	movwf	(Create_Maze@x+1)& (0+255),b
 18927  010056  0E00               	movlw	0
 18928  010058  6F6C               	movwf	Create_Maze@x& (0+255),b
 18929                           
 18930                           ; BSR set to: 0
 18931  01005A  BF6D               	btfsc	(Create_Maze@x+1)& (0+255),7,b
 18932  01005C  D006               	goto	l2362
 18933  01005E  516D               	movf	(Create_Maze@x+1)& (0+255),w,b
 18934  010060  E170               	bnz	l2363
 18935  010062  0E04               	movlw	4
 18936  010064  5D6C               	subwf	Create_Maze@x& (0+255),w,b
 18937  010066  B0D8               	btfsc	status,0,c
 18938  010068  D06C               	goto	u14960
 18939  01006A                     l2362:
 18940                           
 18941                           ; BSR set to: 0
 18942                           ;dans.c: 19: for (y = 0; y < 5; ++y) {
 18943                           
 18944                           ; BSR set to: 0
 18945  01006A  0E00               	movlw	0
 18946  01006C  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 18947  01006E  0E00               	movlw	0
 18948  010070  6F6E               	movwf	Create_Maze@y& (0+255),b
 18949  010072                     l17357:
 18950                           
 18951                           ; BSR set to: 0
 18952  010072  BF6F               	btfsc	(Create_Maze@y+1)& (0+255),7,b
 18953  010074  D006               	goto	l2364
 18954  010076  516F               	movf	(Create_Maze@y+1)& (0+255),w,b
 18955  010078  E15D               	bnz	l17369
 18956  01007A  0E05               	movlw	5
 18957  01007C  5D6E               	subwf	Create_Maze@y& (0+255),w,b
 18958  01007E  B0D8               	btfsc	status,0,c
 18959  010080  D059               	goto	u14950
 18960  010082                     l2364:
 18961                           
 18962                           ; BSR set to: 0
 18963                           ;dans.c: 20: maze[x][y].id = count;
 18964                           
 18965                           ; BSR set to: 0
 18966  010082  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 18967  010086  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 18968  01008A  0E00               	movlw	0
 18969  01008C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18970  01008E  0E32               	movlw	50
 18971  010090  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18972  010092  ECE4  F0C5         	call	___wmul	;wreg free
 18973  010096  0E00               	movlw	low _maze
 18974  010098  0100               	movlb	0	; () banked
 18975  01009A  6F66               	movwf	??_Create_Maze& (0+255),b
 18976  01009C  0E02               	movlw	high _maze
 18977  01009E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 18978  0100A0  5160               	movf	?___wmul& (0+255),w,b
 18979  0100A2  2766               	addwf	??_Create_Maze& (0+255),f,b
 18980  0100A4  5161               	movf	(?___wmul+1)& (0+255),w,b
 18981  0100A6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 18982  0100A8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 18983  0100AC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 18984  0100B0  0E00               	movlw	0
 18985  0100B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18986  0100B4  0E0A               	movlw	10
 18987  0100B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18988  0100B8  ECE4  F0C5         	call	___wmul	;wreg free
 18989  0100BC  0100               	movlb	0	; () banked
 18990  0100BE  5160               	movf	?___wmul& (0+255),w,b
 18991  0100C0  2566               	addwf	??_Create_Maze& (0+255),w,b
 18992  0100C2  6ED9               	movwf	fsr2l,c
 18993  0100C4  5161               	movf	(?___wmul+1)& (0+255),w,b
 18994  0100C6  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 18995  0100C8  6EDA               	movwf	fsr2h,c
 18996  0100CA  C068  FFDE         	movff	Create_Maze@count,postinc2
 18997  0100CE  C069  FFDD         	movff	Create_Maze@count+1,postdec2
 18998                           
 18999                           ;dans.c: 21: maze[x][y].victim = 0;
 19000  0100D2  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19001  0100D6  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19002  0100DA  0E00               	movlw	0
 19003  0100DC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19004  0100DE  0E32               	movlw	50
 19005  0100E0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19006  0100E2  ECE4  F0C5         	call	___wmul	;wreg free
 19007  0100E6  0E00               	movlw	low _maze
 19008  0100E8  0100               	movlb	0	; () banked
 19009  0100EA  6F66               	movwf	??_Create_Maze& (0+255),b
 19010  0100EC  0E02               	movlw	high _maze
 19011  0100EE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19012  0100F0  5160               	movf	?___wmul& (0+255),w,b
 19013  0100F2  2766               	addwf	??_Create_Maze& (0+255),f,b
 19014  0100F4  5161               	movf	(?___wmul+1)& (0+255),w,b
 19015  0100F6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19016  0100F8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19017  0100FC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19018  010100  0E00               	movlw	0
 19019  010102  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19020  010104  0E0A               	movlw	10
 19021  010106  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19022  010108  ECE4  F0C5         	call	___wmul	;wreg free
 19023  01010C  0100               	movlb	0	; () banked
 19024  01010E  5160               	movf	?___wmul& (0+255),w,b
 19025  010110  2766               	addwf	??_Create_Maze& (0+255),f,b
 19026  010112  5161               	movf	(?___wmul+1)& (0+255),w,b
 19027  010114  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19028  010116  0E02               	movlw	2
 19029  010118  2566               	addwf	??_Create_Maze& (0+255),w,b
 19030  01011A  6ED9               	movwf	fsr2l,c
 19031  01011C  0E00               	movlw	0
 19032  01011E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19033  010120  6EDA               	movwf	fsr2h,c
 19034  010122  0E00               	movlw	0
 19035  010124  6EDE               	movwf	postinc2,c
 19036  010126  0E00               	movlw	0
 19037  010128  6EDD               	movwf	postdec2,c
 19038                           
 19039                           ; BSR set to: 0
 19040                           ;dans.c: 22: ++count;
 19041  01012A  4B68               	infsnz	Create_Maze@count& (0+255),f,b
 19042  01012C  2B69               	incf	(Create_Maze@count+1)& (0+255),f,b
 19043                           
 19044                           ; BSR set to: 0
 19045  01012E  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 19046  010130  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 19047  010132  D79F               	goto	l17357
 19048  010134                     u14950:
 19049  010134                     l17369:
 19050                           
 19051                           ; BSR set to: 0
 19052  010134  4B6C               	infsnz	Create_Maze@x& (0+255),f,b
 19053  010136  2B6D               	incf	(Create_Maze@x+1)& (0+255),f,b
 19054                           
 19055                           ; BSR set to: 0
 19056  010138  BF6D               	btfsc	(Create_Maze@x+1)& (0+255),7,b
 19057  01013A  D797               	goto	l2362
 19058  01013C  516D               	movf	(Create_Maze@x+1)& (0+255),w,b
 19059  01013E  E101               	bnz	l17373
 19060  010140  D790               	goto	L17
 19061  010142                     u14960:
 19062  010142                     l2363:
 19063  010142                     l17373:
 19064                           
 19065                           ; BSR set to: 0
 19066                           ;dans.c: 23: }
 19067                           ;dans.c: 24: }
 19068                           ;dans.c: 25: x = 0;
 19069  010142  0E00               	movlw	0
 19070  010144  6F6D               	movwf	(Create_Maze@x+1)& (0+255),b
 19071  010146  0E00               	movlw	0
 19072  010148  6F6C               	movwf	Create_Maze@x& (0+255),b
 19073                           
 19074                           ;dans.c: 26: y = 0;
 19075  01014A  0E00               	movlw	0
 19076  01014C  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 19077  01014E  0E00               	movlw	0
 19078  010150  6F6E               	movwf	Create_Maze@y& (0+255),b
 19079                           
 19080                           ;dans.c: 28: X_Pos = 3;
 19081  010152  0E00               	movlw	0
 19082  010154  0101               	movlb	1	; () banked
 19083  010156  6F41               	movwf	(_X_Pos+1)& (0+255),b
 19084  010158  0E03               	movlw	3
 19085  01015A  6F40               	movwf	_X_Pos& (0+255),b
 19086                           
 19087                           ;dans.c: 29: Y_Pos = 1;
 19088  01015C  0E00               	movlw	0
 19089  01015E  6F3F               	movwf	(_Y_Pos+1)& (0+255),b
 19090  010160  0E01               	movlw	1
 19091  010162  6F3E               	movwf	_Y_Pos& (0+255),b
 19092                           
 19093                           ; BSR set to: 1
 19094                           ;dans.c: 31: maze[x][y].walls[0] = 1;
 19095  010164  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19096  010168  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19097  01016C  0E00               	movlw	0
 19098  01016E  0100               	movlb	0	; () banked
 19099  010170  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19100  010172  0E32               	movlw	50
 19101  010174  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19102  010176  ECE4  F0C5         	call	___wmul	;wreg free
 19103  01017A  0E00               	movlw	low _maze
 19104  01017C  0100               	movlb	0	; () banked
 19105  01017E  6F66               	movwf	??_Create_Maze& (0+255),b
 19106  010180  0E02               	movlw	high _maze
 19107  010182  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19108  010184  5160               	movf	?___wmul& (0+255),w,b
 19109  010186  2766               	addwf	??_Create_Maze& (0+255),f,b
 19110  010188  5161               	movf	(?___wmul+1)& (0+255),w,b
 19111  01018A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19112  01018C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19113  010190  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19114  010194  0E00               	movlw	0
 19115  010196  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19116  010198  0E0A               	movlw	10
 19117  01019A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19118  01019C  ECE4  F0C5         	call	___wmul	;wreg free
 19119  0101A0  0100               	movlb	0	; () banked
 19120  0101A2  5160               	movf	?___wmul& (0+255),w,b
 19121  0101A4  2766               	addwf	??_Create_Maze& (0+255),f,b
 19122  0101A6  5161               	movf	(?___wmul+1)& (0+255),w,b
 19123  0101A8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19124  0101AA  0E04               	movlw	4
 19125  0101AC  2566               	addwf	??_Create_Maze& (0+255),w,b
 19126  0101AE  6ED9               	movwf	fsr2l,c
 19127  0101B0  0E00               	movlw	0
 19128  0101B2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19129  0101B4  6EDA               	movwf	fsr2h,c
 19130  0101B6  0E01               	movlw	1
 19131  0101B8  6EDF               	movwf	indf2,c
 19132                           
 19133                           ; BSR set to: 0
 19134                           ;dans.c: 32: maze[x][y].walls[1] = 0;
 19135  0101BA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19136  0101BE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19137  0101C2  0E00               	movlw	0
 19138  0101C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19139  0101C6  0E32               	movlw	50
 19140  0101C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19141  0101CA  ECE4  F0C5         	call	___wmul	;wreg free
 19142  0101CE  0E00               	movlw	low _maze
 19143  0101D0  0100               	movlb	0	; () banked
 19144  0101D2  6F66               	movwf	??_Create_Maze& (0+255),b
 19145  0101D4  0E02               	movlw	high _maze
 19146  0101D6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19147  0101D8  5160               	movf	?___wmul& (0+255),w,b
 19148  0101DA  2766               	addwf	??_Create_Maze& (0+255),f,b
 19149  0101DC  5161               	movf	(?___wmul+1)& (0+255),w,b
 19150  0101DE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19151  0101E0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19152  0101E4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19153  0101E8  0E00               	movlw	0
 19154  0101EA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19155  0101EC  0E0A               	movlw	10
 19156  0101EE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19157  0101F0  ECE4  F0C5         	call	___wmul	;wreg free
 19158  0101F4  0100               	movlb	0	; () banked
 19159  0101F6  5160               	movf	?___wmul& (0+255),w,b
 19160  0101F8  2766               	addwf	??_Create_Maze& (0+255),f,b
 19161  0101FA  5161               	movf	(?___wmul+1)& (0+255),w,b
 19162  0101FC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19163  0101FE  0E05               	movlw	5
 19164  010200  2566               	addwf	??_Create_Maze& (0+255),w,b
 19165  010202  6ED9               	movwf	fsr2l,c
 19166  010204  0E00               	movlw	0
 19167  010206  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19168  010208  6EDA               	movwf	fsr2h,c
 19169  01020A  0E00               	movlw	0
 19170  01020C  6EDF               	movwf	indf2,c
 19171                           
 19172                           ; BSR set to: 0
 19173                           ;dans.c: 33: maze[x][y].walls[2] = 0;
 19174  01020E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19175  010212  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19176  010216  0E00               	movlw	0
 19177  010218  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19178  01021A  0E32               	movlw	50
 19179  01021C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19180  01021E  ECE4  F0C5         	call	___wmul	;wreg free
 19181  010222  0E00               	movlw	low _maze
 19182  010224  0100               	movlb	0	; () banked
 19183  010226  6F66               	movwf	??_Create_Maze& (0+255),b
 19184  010228  0E02               	movlw	high _maze
 19185  01022A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19186  01022C  5160               	movf	?___wmul& (0+255),w,b
 19187  01022E  2766               	addwf	??_Create_Maze& (0+255),f,b
 19188  010230  5161               	movf	(?___wmul+1)& (0+255),w,b
 19189  010232  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19190  010234  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19191  010238  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19192  01023C  0E00               	movlw	0
 19193  01023E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19194  010240  0E0A               	movlw	10
 19195  010242  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19196  010244  ECE4  F0C5         	call	___wmul	;wreg free
 19197  010248  0100               	movlb	0	; () banked
 19198  01024A  5160               	movf	?___wmul& (0+255),w,b
 19199  01024C  2766               	addwf	??_Create_Maze& (0+255),f,b
 19200  01024E  5161               	movf	(?___wmul+1)& (0+255),w,b
 19201  010250  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19202  010252  0E06               	movlw	6
 19203  010254  2566               	addwf	??_Create_Maze& (0+255),w,b
 19204  010256  6ED9               	movwf	fsr2l,c
 19205  010258  0E00               	movlw	0
 19206  01025A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19207  01025C  6EDA               	movwf	fsr2h,c
 19208  01025E  0E00               	movlw	0
 19209  010260  6EDF               	movwf	indf2,c
 19210                           
 19211                           ; BSR set to: 0
 19212                           ;dans.c: 34: maze[x][y].walls[3] = 1;
 19213  010262  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19214  010266  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19215  01026A  0E00               	movlw	0
 19216  01026C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19217  01026E  0E32               	movlw	50
 19218  010270  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19219  010272  ECE4  F0C5         	call	___wmul	;wreg free
 19220  010276  0E00               	movlw	low _maze
 19221  010278  0100               	movlb	0	; () banked
 19222  01027A  6F66               	movwf	??_Create_Maze& (0+255),b
 19223  01027C  0E02               	movlw	high _maze
 19224  01027E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19225  010280  5160               	movf	?___wmul& (0+255),w,b
 19226  010282  2766               	addwf	??_Create_Maze& (0+255),f,b
 19227  010284  5161               	movf	(?___wmul+1)& (0+255),w,b
 19228  010286  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19229  010288  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19230  01028C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19231  010290  0E00               	movlw	0
 19232  010292  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19233  010294  0E0A               	movlw	10
 19234  010296  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19235  010298  ECE4  F0C5         	call	___wmul	;wreg free
 19236  01029C  0100               	movlb	0	; () banked
 19237  01029E  5160               	movf	?___wmul& (0+255),w,b
 19238  0102A0  2766               	addwf	??_Create_Maze& (0+255),f,b
 19239  0102A2  5161               	movf	(?___wmul+1)& (0+255),w,b
 19240  0102A4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19241  0102A6  0E07               	movlw	7
 19242  0102A8  2566               	addwf	??_Create_Maze& (0+255),w,b
 19243  0102AA  6ED9               	movwf	fsr2l,c
 19244  0102AC  0E00               	movlw	0
 19245  0102AE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19246  0102B0  6EDA               	movwf	fsr2h,c
 19247  0102B2  0E01               	movlw	1
 19248  0102B4  6EDF               	movwf	indf2,c
 19249                           
 19250                           ; BSR set to: 0
 19251                           ;dans.c: 35: maze[x][y].Options = 2;
 19252  0102B6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19253  0102BA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19254  0102BE  0E00               	movlw	0
 19255  0102C0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19256  0102C2  0E32               	movlw	50
 19257  0102C4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19258  0102C6  ECE4  F0C5         	call	___wmul	;wreg free
 19259  0102CA  0E00               	movlw	low _maze
 19260  0102CC  0100               	movlb	0	; () banked
 19261  0102CE  6F66               	movwf	??_Create_Maze& (0+255),b
 19262  0102D0  0E02               	movlw	high _maze
 19263  0102D2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19264  0102D4  5160               	movf	?___wmul& (0+255),w,b
 19265  0102D6  2766               	addwf	??_Create_Maze& (0+255),f,b
 19266  0102D8  5161               	movf	(?___wmul+1)& (0+255),w,b
 19267  0102DA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19268  0102DC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19269  0102E0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19270  0102E4  0E00               	movlw	0
 19271  0102E6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19272  0102E8  0E0A               	movlw	10
 19273  0102EA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19274  0102EC  ECE4  F0C5         	call	___wmul	;wreg free
 19275  0102F0  0100               	movlb	0	; () banked
 19276  0102F2  5160               	movf	?___wmul& (0+255),w,b
 19277  0102F4  2766               	addwf	??_Create_Maze& (0+255),f,b
 19278  0102F6  5161               	movf	(?___wmul+1)& (0+255),w,b
 19279  0102F8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19280  0102FA  0E08               	movlw	8
 19281  0102FC  2566               	addwf	??_Create_Maze& (0+255),w,b
 19282  0102FE  6ED9               	movwf	fsr2l,c
 19283  010300  0E00               	movlw	0
 19284  010302  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19285  010304  6EDA               	movwf	fsr2h,c
 19286  010306  0E02               	movlw	2
 19287  010308  6EDE               	movwf	postinc2,c
 19288  01030A  0E00               	movlw	0
 19289  01030C  6EDD               	movwf	postdec2,c
 19290                           
 19291                           ; BSR set to: 0
 19292                           ;dans.c: 37: ++y;
 19293  01030E  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 19294  010310  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 19295                           
 19296                           ; BSR set to: 0
 19297                           ;dans.c: 38: maze[x][y].walls[0] = 1;
 19298  010312  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19299  010316  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19300  01031A  0E00               	movlw	0
 19301  01031C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19302  01031E  0E32               	movlw	50
 19303  010320  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19304  010322  ECE4  F0C5         	call	___wmul	;wreg free
 19305  010326  0E00               	movlw	low _maze
 19306  010328  0100               	movlb	0	; () banked
 19307  01032A  6F66               	movwf	??_Create_Maze& (0+255),b
 19308  01032C  0E02               	movlw	high _maze
 19309  01032E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19310  010330  5160               	movf	?___wmul& (0+255),w,b
 19311  010332  2766               	addwf	??_Create_Maze& (0+255),f,b
 19312  010334  5161               	movf	(?___wmul+1)& (0+255),w,b
 19313  010336  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19314  010338  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19315  01033C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19316  010340  0E00               	movlw	0
 19317  010342  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19318  010344  0E0A               	movlw	10
 19319  010346  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19320  010348  ECE4  F0C5         	call	___wmul	;wreg free
 19321  01034C  0100               	movlb	0	; () banked
 19322  01034E  5160               	movf	?___wmul& (0+255),w,b
 19323  010350  2766               	addwf	??_Create_Maze& (0+255),f,b
 19324  010352  5161               	movf	(?___wmul+1)& (0+255),w,b
 19325  010354  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19326  010356  0E04               	movlw	4
 19327  010358  2566               	addwf	??_Create_Maze& (0+255),w,b
 19328  01035A  6ED9               	movwf	fsr2l,c
 19329  01035C  0E00               	movlw	0
 19330  01035E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19331  010360  6EDA               	movwf	fsr2h,c
 19332  010362  0E01               	movlw	1
 19333  010364  6EDF               	movwf	indf2,c
 19334                           
 19335                           ; BSR set to: 0
 19336                           ;dans.c: 39: maze[x][y].walls[1] = 0;
 19337  010366  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19338  01036A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19339  01036E  0E00               	movlw	0
 19340  010370  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19341  010372  0E32               	movlw	50
 19342  010374  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19343  010376  ECE4  F0C5         	call	___wmul	;wreg free
 19344  01037A  0E00               	movlw	low _maze
 19345  01037C  0100               	movlb	0	; () banked
 19346  01037E  6F66               	movwf	??_Create_Maze& (0+255),b
 19347  010380  0E02               	movlw	high _maze
 19348  010382  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19349  010384  5160               	movf	?___wmul& (0+255),w,b
 19350  010386  2766               	addwf	??_Create_Maze& (0+255),f,b
 19351  010388  5161               	movf	(?___wmul+1)& (0+255),w,b
 19352  01038A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19353  01038C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19354  010390  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19355  010394  0E00               	movlw	0
 19356  010396  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19357  010398  0E0A               	movlw	10
 19358  01039A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19359  01039C  ECE4  F0C5         	call	___wmul	;wreg free
 19360  0103A0  0100               	movlb	0	; () banked
 19361  0103A2  5160               	movf	?___wmul& (0+255),w,b
 19362  0103A4  2766               	addwf	??_Create_Maze& (0+255),f,b
 19363  0103A6  5161               	movf	(?___wmul+1)& (0+255),w,b
 19364  0103A8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19365  0103AA  0E05               	movlw	5
 19366  0103AC  2566               	addwf	??_Create_Maze& (0+255),w,b
 19367  0103AE  6ED9               	movwf	fsr2l,c
 19368  0103B0  0E00               	movlw	0
 19369  0103B2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19370  0103B4  6EDA               	movwf	fsr2h,c
 19371  0103B6  0E00               	movlw	0
 19372  0103B8  6EDF               	movwf	indf2,c
 19373                           
 19374                           ; BSR set to: 0
 19375                           ;dans.c: 40: maze[x][y].walls[2] = 1;
 19376  0103BA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19377  0103BE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19378  0103C2  0E00               	movlw	0
 19379  0103C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19380  0103C6  0E32               	movlw	50
 19381  0103C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19382  0103CA  ECE4  F0C5         	call	___wmul	;wreg free
 19383  0103CE  0E00               	movlw	low _maze
 19384  0103D0  0100               	movlb	0	; () banked
 19385  0103D2  6F66               	movwf	??_Create_Maze& (0+255),b
 19386  0103D4  0E02               	movlw	high _maze
 19387  0103D6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19388  0103D8  5160               	movf	?___wmul& (0+255),w,b
 19389  0103DA  2766               	addwf	??_Create_Maze& (0+255),f,b
 19390  0103DC  5161               	movf	(?___wmul+1)& (0+255),w,b
 19391  0103DE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19392  0103E0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19393  0103E4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19394  0103E8  0E00               	movlw	0
 19395  0103EA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19396  0103EC  0E0A               	movlw	10
 19397  0103EE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19398  0103F0  ECE4  F0C5         	call	___wmul	;wreg free
 19399  0103F4  0100               	movlb	0	; () banked
 19400  0103F6  5160               	movf	?___wmul& (0+255),w,b
 19401  0103F8  2766               	addwf	??_Create_Maze& (0+255),f,b
 19402  0103FA  5161               	movf	(?___wmul+1)& (0+255),w,b
 19403  0103FC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19404  0103FE  0E06               	movlw	6
 19405  010400  2566               	addwf	??_Create_Maze& (0+255),w,b
 19406  010402  6ED9               	movwf	fsr2l,c
 19407  010404  0E00               	movlw	0
 19408  010406  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19409  010408  6EDA               	movwf	fsr2h,c
 19410  01040A  0E01               	movlw	1
 19411  01040C  6EDF               	movwf	indf2,c
 19412                           
 19413                           ; BSR set to: 0
 19414                           ;dans.c: 41: maze[x][y].walls[3] = 0;
 19415  01040E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19416  010412  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19417  010416  0E00               	movlw	0
 19418  010418  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19419  01041A  0E32               	movlw	50
 19420  01041C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19421  01041E  ECE4  F0C5         	call	___wmul	;wreg free
 19422  010422  0E00               	movlw	low _maze
 19423  010424  0100               	movlb	0	; () banked
 19424  010426  6F66               	movwf	??_Create_Maze& (0+255),b
 19425  010428  0E02               	movlw	high _maze
 19426  01042A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19427  01042C  5160               	movf	?___wmul& (0+255),w,b
 19428  01042E  2766               	addwf	??_Create_Maze& (0+255),f,b
 19429  010430  5161               	movf	(?___wmul+1)& (0+255),w,b
 19430  010432  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19431  010434  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19432  010438  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19433  01043C  0E00               	movlw	0
 19434  01043E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19435  010440  0E0A               	movlw	10
 19436  010442  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19437  010444  ECE4  F0C5         	call	___wmul	;wreg free
 19438  010448  0100               	movlb	0	; () banked
 19439  01044A  5160               	movf	?___wmul& (0+255),w,b
 19440  01044C  2766               	addwf	??_Create_Maze& (0+255),f,b
 19441  01044E  5161               	movf	(?___wmul+1)& (0+255),w,b
 19442  010450  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19443  010452  0E07               	movlw	7
 19444  010454  2566               	addwf	??_Create_Maze& (0+255),w,b
 19445  010456  6ED9               	movwf	fsr2l,c
 19446  010458  0E00               	movlw	0
 19447  01045A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19448  01045C  6EDA               	movwf	fsr2h,c
 19449  01045E  0E00               	movlw	0
 19450  010460  6EDF               	movwf	indf2,c
 19451                           
 19452                           ; BSR set to: 0
 19453                           ;dans.c: 42: maze[x][y].Options = 2;
 19454  010462  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19455  010466  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19456  01046A  0E00               	movlw	0
 19457  01046C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19458  01046E  0E32               	movlw	50
 19459  010470  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19460  010472  ECE4  F0C5         	call	___wmul	;wreg free
 19461  010476  0E00               	movlw	low _maze
 19462  010478  0100               	movlb	0	; () banked
 19463  01047A  6F66               	movwf	??_Create_Maze& (0+255),b
 19464  01047C  0E02               	movlw	high _maze
 19465  01047E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19466  010480  5160               	movf	?___wmul& (0+255),w,b
 19467  010482  2766               	addwf	??_Create_Maze& (0+255),f,b
 19468  010484  5161               	movf	(?___wmul+1)& (0+255),w,b
 19469  010486  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19470  010488  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19471  01048C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19472  010490  0E00               	movlw	0
 19473  010492  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19474  010494  0E0A               	movlw	10
 19475  010496  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19476  010498  ECE4  F0C5         	call	___wmul	;wreg free
 19477  01049C  0100               	movlb	0	; () banked
 19478  01049E  5160               	movf	?___wmul& (0+255),w,b
 19479  0104A0  2766               	addwf	??_Create_Maze& (0+255),f,b
 19480  0104A2  5161               	movf	(?___wmul+1)& (0+255),w,b
 19481  0104A4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19482  0104A6  0E08               	movlw	8
 19483  0104A8  2566               	addwf	??_Create_Maze& (0+255),w,b
 19484  0104AA  6ED9               	movwf	fsr2l,c
 19485  0104AC  0E00               	movlw	0
 19486  0104AE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19487  0104B0  6EDA               	movwf	fsr2h,c
 19488  0104B2  0E02               	movlw	2
 19489  0104B4  6EDE               	movwf	postinc2,c
 19490  0104B6  0E00               	movlw	0
 19491  0104B8  6EDD               	movwf	postdec2,c
 19492                           
 19493                           ; BSR set to: 0
 19494                           ;dans.c: 44: ++y;
 19495  0104BA  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 19496  0104BC  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 19497                           
 19498                           ; BSR set to: 0
 19499                           ;dans.c: 45: maze[x][y].walls[0] = 1;
 19500  0104BE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19501  0104C2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19502  0104C6  0E00               	movlw	0
 19503  0104C8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19504  0104CA  0E32               	movlw	50
 19505  0104CC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19506  0104CE  ECE4  F0C5         	call	___wmul	;wreg free
 19507  0104D2  0E00               	movlw	low _maze
 19508  0104D4  0100               	movlb	0	; () banked
 19509  0104D6  6F66               	movwf	??_Create_Maze& (0+255),b
 19510  0104D8  0E02               	movlw	high _maze
 19511  0104DA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19512  0104DC  5160               	movf	?___wmul& (0+255),w,b
 19513  0104DE  2766               	addwf	??_Create_Maze& (0+255),f,b
 19514  0104E0  5161               	movf	(?___wmul+1)& (0+255),w,b
 19515  0104E2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19516  0104E4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19517  0104E8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19518  0104EC  0E00               	movlw	0
 19519  0104EE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19520  0104F0  0E0A               	movlw	10
 19521  0104F2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19522  0104F4  ECE4  F0C5         	call	___wmul	;wreg free
 19523  0104F8  0100               	movlb	0	; () banked
 19524  0104FA  5160               	movf	?___wmul& (0+255),w,b
 19525  0104FC  2766               	addwf	??_Create_Maze& (0+255),f,b
 19526  0104FE  5161               	movf	(?___wmul+1)& (0+255),w,b
 19527  010500  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19528  010502  0E04               	movlw	4
 19529  010504  2566               	addwf	??_Create_Maze& (0+255),w,b
 19530  010506  6ED9               	movwf	fsr2l,c
 19531  010508  0E00               	movlw	0
 19532  01050A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19533  01050C  6EDA               	movwf	fsr2h,c
 19534  01050E  0E01               	movlw	1
 19535  010510  6EDF               	movwf	indf2,c
 19536                           
 19537                           ; BSR set to: 0
 19538                           ;dans.c: 46: maze[x][y].walls[1] = 0;
 19539  010512  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19540  010516  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19541  01051A  0E00               	movlw	0
 19542  01051C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19543  01051E  0E32               	movlw	50
 19544  010520  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19545  010522  ECE4  F0C5         	call	___wmul	;wreg free
 19546  010526  0E00               	movlw	low _maze
 19547  010528  0100               	movlb	0	; () banked
 19548  01052A  6F66               	movwf	??_Create_Maze& (0+255),b
 19549  01052C  0E02               	movlw	high _maze
 19550  01052E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19551  010530  5160               	movf	?___wmul& (0+255),w,b
 19552  010532  2766               	addwf	??_Create_Maze& (0+255),f,b
 19553  010534  5161               	movf	(?___wmul+1)& (0+255),w,b
 19554  010536  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19555  010538  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19556  01053C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19557  010540  0E00               	movlw	0
 19558  010542  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19559  010544  0E0A               	movlw	10
 19560  010546  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19561  010548  ECE4  F0C5         	call	___wmul	;wreg free
 19562  01054C  0100               	movlb	0	; () banked
 19563  01054E  5160               	movf	?___wmul& (0+255),w,b
 19564  010550  2766               	addwf	??_Create_Maze& (0+255),f,b
 19565  010552  5161               	movf	(?___wmul+1)& (0+255),w,b
 19566  010554  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19567  010556  0E05               	movlw	5
 19568  010558  2566               	addwf	??_Create_Maze& (0+255),w,b
 19569  01055A  6ED9               	movwf	fsr2l,c
 19570  01055C  0E00               	movlw	0
 19571  01055E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19572  010560  6EDA               	movwf	fsr2h,c
 19573  010562  0E00               	movlw	0
 19574  010564  6EDF               	movwf	indf2,c
 19575                           
 19576                           ; BSR set to: 0
 19577                           ;dans.c: 47: maze[x][y].walls[2] = 0;
 19578  010566  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19579  01056A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19580  01056E  0E00               	movlw	0
 19581  010570  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19582  010572  0E32               	movlw	50
 19583  010574  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19584  010576  ECE4  F0C5         	call	___wmul	;wreg free
 19585  01057A  0E00               	movlw	low _maze
 19586  01057C  0100               	movlb	0	; () banked
 19587  01057E  6F66               	movwf	??_Create_Maze& (0+255),b
 19588  010580  0E02               	movlw	high _maze
 19589  010582  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19590  010584  5160               	movf	?___wmul& (0+255),w,b
 19591  010586  2766               	addwf	??_Create_Maze& (0+255),f,b
 19592  010588  5161               	movf	(?___wmul+1)& (0+255),w,b
 19593  01058A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19594  01058C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19595  010590  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19596  010594  0E00               	movlw	0
 19597  010596  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19598  010598  0E0A               	movlw	10
 19599  01059A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19600  01059C  ECE4  F0C5         	call	___wmul	;wreg free
 19601  0105A0  0100               	movlb	0	; () banked
 19602  0105A2  5160               	movf	?___wmul& (0+255),w,b
 19603  0105A4  2766               	addwf	??_Create_Maze& (0+255),f,b
 19604  0105A6  5161               	movf	(?___wmul+1)& (0+255),w,b
 19605  0105A8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19606  0105AA  0E06               	movlw	6
 19607  0105AC  2566               	addwf	??_Create_Maze& (0+255),w,b
 19608  0105AE  6ED9               	movwf	fsr2l,c
 19609  0105B0  0E00               	movlw	0
 19610  0105B2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19611  0105B4  6EDA               	movwf	fsr2h,c
 19612  0105B6  0E00               	movlw	0
 19613  0105B8  6EDF               	movwf	indf2,c
 19614                           
 19615                           ; BSR set to: 0
 19616                           ;dans.c: 48: maze[x][y].walls[3] = 0;
 19617  0105BA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19618  0105BE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19619  0105C2  0E00               	movlw	0
 19620  0105C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19621  0105C6  0E32               	movlw	50
 19622  0105C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19623  0105CA  ECE4  F0C5         	call	___wmul	;wreg free
 19624  0105CE  0E00               	movlw	low _maze
 19625  0105D0  0100               	movlb	0	; () banked
 19626  0105D2  6F66               	movwf	??_Create_Maze& (0+255),b
 19627  0105D4  0E02               	movlw	high _maze
 19628  0105D6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19629  0105D8  5160               	movf	?___wmul& (0+255),w,b
 19630  0105DA  2766               	addwf	??_Create_Maze& (0+255),f,b
 19631  0105DC  5161               	movf	(?___wmul+1)& (0+255),w,b
 19632  0105DE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19633  0105E0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19634  0105E4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19635  0105E8  0E00               	movlw	0
 19636  0105EA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19637  0105EC  0E0A               	movlw	10
 19638  0105EE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19639  0105F0  ECE4  F0C5         	call	___wmul	;wreg free
 19640  0105F4  0100               	movlb	0	; () banked
 19641  0105F6  5160               	movf	?___wmul& (0+255),w,b
 19642  0105F8  2766               	addwf	??_Create_Maze& (0+255),f,b
 19643  0105FA  5161               	movf	(?___wmul+1)& (0+255),w,b
 19644  0105FC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19645  0105FE  0E07               	movlw	7
 19646  010600  2566               	addwf	??_Create_Maze& (0+255),w,b
 19647  010602  6ED9               	movwf	fsr2l,c
 19648  010604  0E00               	movlw	0
 19649  010606  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19650  010608  6EDA               	movwf	fsr2h,c
 19651  01060A  0E00               	movlw	0
 19652  01060C  6EDF               	movwf	indf2,c
 19653                           
 19654                           ; BSR set to: 0
 19655                           ;dans.c: 49: maze[x][y].Options = 3;
 19656  01060E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19657  010612  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19658  010616  0E00               	movlw	0
 19659  010618  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19660  01061A  0E32               	movlw	50
 19661  01061C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19662  01061E  ECE4  F0C5         	call	___wmul	;wreg free
 19663  010622  0E00               	movlw	low _maze
 19664  010624  0100               	movlb	0	; () banked
 19665  010626  6F66               	movwf	??_Create_Maze& (0+255),b
 19666  010628  0E02               	movlw	high _maze
 19667  01062A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19668  01062C  5160               	movf	?___wmul& (0+255),w,b
 19669  01062E  2766               	addwf	??_Create_Maze& (0+255),f,b
 19670  010630  5161               	movf	(?___wmul+1)& (0+255),w,b
 19671  010632  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19672  010634  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19673  010638  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19674  01063C  0E00               	movlw	0
 19675  01063E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19676  010640  0E0A               	movlw	10
 19677  010642  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19678  010644  ECE4  F0C5         	call	___wmul	;wreg free
 19679  010648  0100               	movlb	0	; () banked
 19680  01064A  5160               	movf	?___wmul& (0+255),w,b
 19681  01064C  2766               	addwf	??_Create_Maze& (0+255),f,b
 19682  01064E  5161               	movf	(?___wmul+1)& (0+255),w,b
 19683  010650  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19684  010652  0E08               	movlw	8
 19685  010654  2566               	addwf	??_Create_Maze& (0+255),w,b
 19686  010656  6ED9               	movwf	fsr2l,c
 19687  010658  0E00               	movlw	0
 19688  01065A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19689  01065C  6EDA               	movwf	fsr2h,c
 19690  01065E  0E03               	movlw	3
 19691  010660  6EDE               	movwf	postinc2,c
 19692  010662  0E00               	movlw	0
 19693  010664  6EDD               	movwf	postdec2,c
 19694                           
 19695                           ; BSR set to: 0
 19696                           ;dans.c: 51: ++y;
 19697  010666  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 19698  010668  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 19699                           
 19700                           ; BSR set to: 0
 19701                           ;dans.c: 52: maze[x][y].walls[0] = 1;
 19702  01066A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19703  01066E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19704  010672  0E00               	movlw	0
 19705  010674  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19706  010676  0E32               	movlw	50
 19707  010678  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19708  01067A  ECE4  F0C5         	call	___wmul	;wreg free
 19709  01067E  0E00               	movlw	low _maze
 19710  010680  0100               	movlb	0	; () banked
 19711  010682  6F66               	movwf	??_Create_Maze& (0+255),b
 19712  010684  0E02               	movlw	high _maze
 19713  010686  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19714  010688  5160               	movf	?___wmul& (0+255),w,b
 19715  01068A  2766               	addwf	??_Create_Maze& (0+255),f,b
 19716  01068C  5161               	movf	(?___wmul+1)& (0+255),w,b
 19717  01068E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19718  010690  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19719  010694  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19720  010698  0E00               	movlw	0
 19721  01069A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19722  01069C  0E0A               	movlw	10
 19723  01069E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19724  0106A0  ECE4  F0C5         	call	___wmul	;wreg free
 19725  0106A4  0100               	movlb	0	; () banked
 19726  0106A6  5160               	movf	?___wmul& (0+255),w,b
 19727  0106A8  2766               	addwf	??_Create_Maze& (0+255),f,b
 19728  0106AA  5161               	movf	(?___wmul+1)& (0+255),w,b
 19729  0106AC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19730  0106AE  0E04               	movlw	4
 19731  0106B0  2566               	addwf	??_Create_Maze& (0+255),w,b
 19732  0106B2  6ED9               	movwf	fsr2l,c
 19733  0106B4  0E00               	movlw	0
 19734  0106B6  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19735  0106B8  6EDA               	movwf	fsr2h,c
 19736  0106BA  0E01               	movlw	1
 19737  0106BC  6EDF               	movwf	indf2,c
 19738                           
 19739                           ; BSR set to: 0
 19740                           ;dans.c: 53: maze[x][y].walls[1] = 1;
 19741  0106BE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19742  0106C2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19743  0106C6  0E00               	movlw	0
 19744  0106C8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19745  0106CA  0E32               	movlw	50
 19746  0106CC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19747  0106CE  ECE4  F0C5         	call	___wmul	;wreg free
 19748  0106D2  0E00               	movlw	low _maze
 19749  0106D4  0100               	movlb	0	; () banked
 19750  0106D6  6F66               	movwf	??_Create_Maze& (0+255),b
 19751  0106D8  0E02               	movlw	high _maze
 19752  0106DA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19753  0106DC  5160               	movf	?___wmul& (0+255),w,b
 19754  0106DE  2766               	addwf	??_Create_Maze& (0+255),f,b
 19755  0106E0  5161               	movf	(?___wmul+1)& (0+255),w,b
 19756  0106E2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19757  0106E4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19758  0106E8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19759  0106EC  0E00               	movlw	0
 19760  0106EE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19761  0106F0  0E0A               	movlw	10
 19762  0106F2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19763  0106F4  ECE4  F0C5         	call	___wmul	;wreg free
 19764  0106F8  0100               	movlb	0	; () banked
 19765  0106FA  5160               	movf	?___wmul& (0+255),w,b
 19766  0106FC  2766               	addwf	??_Create_Maze& (0+255),f,b
 19767  0106FE  5161               	movf	(?___wmul+1)& (0+255),w,b
 19768  010700  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19769  010702  0E05               	movlw	5
 19770  010704  2566               	addwf	??_Create_Maze& (0+255),w,b
 19771  010706  6ED9               	movwf	fsr2l,c
 19772  010708  0E00               	movlw	0
 19773  01070A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19774  01070C  6EDA               	movwf	fsr2h,c
 19775  01070E  0E01               	movlw	1
 19776  010710  6EDF               	movwf	indf2,c
 19777                           
 19778                           ; BSR set to: 0
 19779                           ;dans.c: 54: maze[x][y].walls[2] = 0;
 19780  010712  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19781  010716  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19782  01071A  0E00               	movlw	0
 19783  01071C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19784  01071E  0E32               	movlw	50
 19785  010720  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19786  010722  ECE4  F0C5         	call	___wmul	;wreg free
 19787  010726  0E00               	movlw	low _maze
 19788  010728  0100               	movlb	0	; () banked
 19789  01072A  6F66               	movwf	??_Create_Maze& (0+255),b
 19790  01072C  0E02               	movlw	high _maze
 19791  01072E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19792  010730  5160               	movf	?___wmul& (0+255),w,b
 19793  010732  2766               	addwf	??_Create_Maze& (0+255),f,b
 19794  010734  5161               	movf	(?___wmul+1)& (0+255),w,b
 19795  010736  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19796  010738  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19797  01073C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19798  010740  0E00               	movlw	0
 19799  010742  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19800  010744  0E0A               	movlw	10
 19801  010746  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19802  010748  ECE4  F0C5         	call	___wmul	;wreg free
 19803  01074C  0100               	movlb	0	; () banked
 19804  01074E  5160               	movf	?___wmul& (0+255),w,b
 19805  010750  2766               	addwf	??_Create_Maze& (0+255),f,b
 19806  010752  5161               	movf	(?___wmul+1)& (0+255),w,b
 19807  010754  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19808  010756  0E06               	movlw	6
 19809  010758  2566               	addwf	??_Create_Maze& (0+255),w,b
 19810  01075A  6ED9               	movwf	fsr2l,c
 19811  01075C  0E00               	movlw	0
 19812  01075E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19813  010760  6EDA               	movwf	fsr2h,c
 19814  010762  0E00               	movlw	0
 19815  010764  6EDF               	movwf	indf2,c
 19816                           
 19817                           ; BSR set to: 0
 19818                           ;dans.c: 55: maze[x][y].walls[3] = 0;
 19819  010766  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19820  01076A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19821  01076E  0E00               	movlw	0
 19822  010770  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19823  010772  0E32               	movlw	50
 19824  010774  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19825  010776  ECE4  F0C5         	call	___wmul	;wreg free
 19826  01077A  0E00               	movlw	low _maze
 19827  01077C  0100               	movlb	0	; () banked
 19828  01077E  6F66               	movwf	??_Create_Maze& (0+255),b
 19829  010780  0E02               	movlw	high _maze
 19830  010782  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19831  010784  5160               	movf	?___wmul& (0+255),w,b
 19832  010786  2766               	addwf	??_Create_Maze& (0+255),f,b
 19833  010788  5161               	movf	(?___wmul+1)& (0+255),w,b
 19834  01078A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19835  01078C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19836  010790  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19837  010794  0E00               	movlw	0
 19838  010796  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19839  010798  0E0A               	movlw	10
 19840  01079A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19841  01079C  ECE4  F0C5         	call	___wmul	;wreg free
 19842  0107A0  0100               	movlb	0	; () banked
 19843  0107A2  5160               	movf	?___wmul& (0+255),w,b
 19844  0107A4  2766               	addwf	??_Create_Maze& (0+255),f,b
 19845  0107A6  5161               	movf	(?___wmul+1)& (0+255),w,b
 19846  0107A8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19847  0107AA  0E07               	movlw	7
 19848  0107AC  2566               	addwf	??_Create_Maze& (0+255),w,b
 19849  0107AE  6ED9               	movwf	fsr2l,c
 19850  0107B0  0E00               	movlw	0
 19851  0107B2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19852  0107B4  6EDA               	movwf	fsr2h,c
 19853  0107B6  0E00               	movlw	0
 19854  0107B8  6EDF               	movwf	indf2,c
 19855                           
 19856                           ; BSR set to: 0
 19857                           ;dans.c: 56: maze[x][y].Options = 2;
 19858  0107BA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19859  0107BE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19860  0107C2  0E00               	movlw	0
 19861  0107C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19862  0107C6  0E32               	movlw	50
 19863  0107C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19864  0107CA  ECE4  F0C5         	call	___wmul	;wreg free
 19865  0107CE  0E00               	movlw	low _maze
 19866  0107D0  0100               	movlb	0	; () banked
 19867  0107D2  6F66               	movwf	??_Create_Maze& (0+255),b
 19868  0107D4  0E02               	movlw	high _maze
 19869  0107D6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19870  0107D8  5160               	movf	?___wmul& (0+255),w,b
 19871  0107DA  2766               	addwf	??_Create_Maze& (0+255),f,b
 19872  0107DC  5161               	movf	(?___wmul+1)& (0+255),w,b
 19873  0107DE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19874  0107E0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19875  0107E4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19876  0107E8  0E00               	movlw	0
 19877  0107EA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19878  0107EC  0E0A               	movlw	10
 19879  0107EE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19880  0107F0  ECE4  F0C5         	call	___wmul	;wreg free
 19881  0107F4  0100               	movlb	0	; () banked
 19882  0107F6  5160               	movf	?___wmul& (0+255),w,b
 19883  0107F8  2766               	addwf	??_Create_Maze& (0+255),f,b
 19884  0107FA  5161               	movf	(?___wmul+1)& (0+255),w,b
 19885  0107FC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19886  0107FE  0E08               	movlw	8
 19887  010800  2566               	addwf	??_Create_Maze& (0+255),w,b
 19888  010802  6ED9               	movwf	fsr2l,c
 19889  010804  0E00               	movlw	0
 19890  010806  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19891  010808  6EDA               	movwf	fsr2h,c
 19892  01080A  0E02               	movlw	2
 19893  01080C  6EDE               	movwf	postinc2,c
 19894  01080E  0E00               	movlw	0
 19895  010810  6EDD               	movwf	postdec2,c
 19896                           
 19897                           ; BSR set to: 0
 19898                           ;dans.c: 58: ++y;
 19899  010812  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 19900  010814  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 19901                           
 19902                           ; BSR set to: 0
 19903                           ;dans.c: 59: maze[x][y].walls[0] = 1;
 19904  010816  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19905  01081A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19906  01081E  0E00               	movlw	0
 19907  010820  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19908  010822  0E32               	movlw	50
 19909  010824  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19910  010826  ECE4  F0C5         	call	___wmul	;wreg free
 19911  01082A  0E00               	movlw	low _maze
 19912  01082C  0100               	movlb	0	; () banked
 19913  01082E  6F66               	movwf	??_Create_Maze& (0+255),b
 19914  010830  0E02               	movlw	high _maze
 19915  010832  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19916  010834  5160               	movf	?___wmul& (0+255),w,b
 19917  010836  2766               	addwf	??_Create_Maze& (0+255),f,b
 19918  010838  5161               	movf	(?___wmul+1)& (0+255),w,b
 19919  01083A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19920  01083C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19921  010840  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19922  010844  0E00               	movlw	0
 19923  010846  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19924  010848  0E0A               	movlw	10
 19925  01084A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19926  01084C  ECE4  F0C5         	call	___wmul	;wreg free
 19927  010850  0100               	movlb	0	; () banked
 19928  010852  5160               	movf	?___wmul& (0+255),w,b
 19929  010854  2766               	addwf	??_Create_Maze& (0+255),f,b
 19930  010856  5161               	movf	(?___wmul+1)& (0+255),w,b
 19931  010858  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19932  01085A  0E04               	movlw	4
 19933  01085C  2566               	addwf	??_Create_Maze& (0+255),w,b
 19934  01085E  6ED9               	movwf	fsr2l,c
 19935  010860  0E00               	movlw	0
 19936  010862  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19937  010864  6EDA               	movwf	fsr2h,c
 19938  010866  0E01               	movlw	1
 19939  010868  6EDF               	movwf	indf2,c
 19940                           
 19941                           ; BSR set to: 0
 19942                           ;dans.c: 60: maze[x][y].walls[1] = 1;
 19943  01086A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19944  01086E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19945  010872  0E00               	movlw	0
 19946  010874  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19947  010876  0E32               	movlw	50
 19948  010878  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19949  01087A  ECE4  F0C5         	call	___wmul	;wreg free
 19950  01087E  0E00               	movlw	low _maze
 19951  010880  0100               	movlb	0	; () banked
 19952  010882  6F66               	movwf	??_Create_Maze& (0+255),b
 19953  010884  0E02               	movlw	high _maze
 19954  010886  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19955  010888  5160               	movf	?___wmul& (0+255),w,b
 19956  01088A  2766               	addwf	??_Create_Maze& (0+255),f,b
 19957  01088C  5161               	movf	(?___wmul+1)& (0+255),w,b
 19958  01088E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19959  010890  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19960  010894  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19961  010898  0E00               	movlw	0
 19962  01089A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19963  01089C  0E0A               	movlw	10
 19964  01089E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19965  0108A0  ECE4  F0C5         	call	___wmul	;wreg free
 19966  0108A4  0100               	movlb	0	; () banked
 19967  0108A6  5160               	movf	?___wmul& (0+255),w,b
 19968  0108A8  2766               	addwf	??_Create_Maze& (0+255),f,b
 19969  0108AA  5161               	movf	(?___wmul+1)& (0+255),w,b
 19970  0108AC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19971  0108AE  0E05               	movlw	5
 19972  0108B0  2566               	addwf	??_Create_Maze& (0+255),w,b
 19973  0108B2  6ED9               	movwf	fsr2l,c
 19974  0108B4  0E00               	movlw	0
 19975  0108B6  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19976  0108B8  6EDA               	movwf	fsr2h,c
 19977  0108BA  0E01               	movlw	1
 19978  0108BC  6EDF               	movwf	indf2,c
 19979                           
 19980                           ; BSR set to: 0
 19981                           ;dans.c: 61: maze[x][y].walls[2] = 0;
 19982  0108BE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19983  0108C2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19984  0108C6  0E00               	movlw	0
 19985  0108C8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19986  0108CA  0E32               	movlw	50
 19987  0108CC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19988  0108CE  ECE4  F0C5         	call	___wmul	;wreg free
 19989  0108D2  0E00               	movlw	low _maze
 19990  0108D4  0100               	movlb	0	; () banked
 19991  0108D6  6F66               	movwf	??_Create_Maze& (0+255),b
 19992  0108D8  0E02               	movlw	high _maze
 19993  0108DA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19994  0108DC  5160               	movf	?___wmul& (0+255),w,b
 19995  0108DE  2766               	addwf	??_Create_Maze& (0+255),f,b
 19996  0108E0  5161               	movf	(?___wmul+1)& (0+255),w,b
 19997  0108E2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19998  0108E4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19999  0108E8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20000  0108EC  0E00               	movlw	0
 20001  0108EE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20002  0108F0  0E0A               	movlw	10
 20003  0108F2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20004  0108F4  ECE4  F0C5         	call	___wmul	;wreg free
 20005  0108F8  0100               	movlb	0	; () banked
 20006  0108FA  5160               	movf	?___wmul& (0+255),w,b
 20007  0108FC  2766               	addwf	??_Create_Maze& (0+255),f,b
 20008  0108FE  5161               	movf	(?___wmul+1)& (0+255),w,b
 20009  010900  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20010  010902  0E06               	movlw	6
 20011  010904  2566               	addwf	??_Create_Maze& (0+255),w,b
 20012  010906  6ED9               	movwf	fsr2l,c
 20013  010908  0E00               	movlw	0
 20014  01090A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20015  01090C  6EDA               	movwf	fsr2h,c
 20016  01090E  0E00               	movlw	0
 20017  010910  6EDF               	movwf	indf2,c
 20018                           
 20019                           ; BSR set to: 0
 20020                           ;dans.c: 62: maze[x][y].walls[3] = 1;
 20021  010912  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20022  010916  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20023  01091A  0E00               	movlw	0
 20024  01091C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20025  01091E  0E32               	movlw	50
 20026  010920  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20027  010922  ECE4  F0C5         	call	___wmul	;wreg free
 20028  010926  0E00               	movlw	low _maze
 20029  010928  0100               	movlb	0	; () banked
 20030  01092A  6F66               	movwf	??_Create_Maze& (0+255),b
 20031  01092C  0E02               	movlw	high _maze
 20032  01092E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20033  010930  5160               	movf	?___wmul& (0+255),w,b
 20034  010932  2766               	addwf	??_Create_Maze& (0+255),f,b
 20035  010934  5161               	movf	(?___wmul+1)& (0+255),w,b
 20036  010936  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20037  010938  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20038  01093C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20039  010940  0E00               	movlw	0
 20040  010942  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20041  010944  0E0A               	movlw	10
 20042  010946  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20043  010948  ECE4  F0C5         	call	___wmul	;wreg free
 20044  01094C  0100               	movlb	0	; () banked
 20045  01094E  5160               	movf	?___wmul& (0+255),w,b
 20046  010950  2766               	addwf	??_Create_Maze& (0+255),f,b
 20047  010952  5161               	movf	(?___wmul+1)& (0+255),w,b
 20048  010954  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20049  010956  0E07               	movlw	7
 20050  010958  2566               	addwf	??_Create_Maze& (0+255),w,b
 20051  01095A  6ED9               	movwf	fsr2l,c
 20052  01095C  0E00               	movlw	0
 20053  01095E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20054  010960  6EDA               	movwf	fsr2h,c
 20055  010962  0E01               	movlw	1
 20056  010964  6EDF               	movwf	indf2,c
 20057                           
 20058                           ; BSR set to: 0
 20059                           ;dans.c: 63: maze[x][y].Options = 1;
 20060  010966  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20061  01096A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20062  01096E  0E00               	movlw	0
 20063  010970  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20064  010972  0E32               	movlw	50
 20065  010974  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20066  010976  ECE4  F0C5         	call	___wmul	;wreg free
 20067  01097A  0E00               	movlw	low _maze
 20068  01097C  0100               	movlb	0	; () banked
 20069  01097E  6F66               	movwf	??_Create_Maze& (0+255),b
 20070  010980  0E02               	movlw	high _maze
 20071  010982  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20072  010984  5160               	movf	?___wmul& (0+255),w,b
 20073  010986  2766               	addwf	??_Create_Maze& (0+255),f,b
 20074  010988  5161               	movf	(?___wmul+1)& (0+255),w,b
 20075  01098A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20076  01098C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20077  010990  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20078  010994  0E00               	movlw	0
 20079  010996  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20080  010998  0E0A               	movlw	10
 20081  01099A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20082  01099C  ECE4  F0C5         	call	___wmul	;wreg free
 20083  0109A0  0100               	movlb	0	; () banked
 20084  0109A2  5160               	movf	?___wmul& (0+255),w,b
 20085  0109A4  2766               	addwf	??_Create_Maze& (0+255),f,b
 20086  0109A6  5161               	movf	(?___wmul+1)& (0+255),w,b
 20087  0109A8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20088  0109AA  0E08               	movlw	8
 20089  0109AC  2566               	addwf	??_Create_Maze& (0+255),w,b
 20090  0109AE  6ED9               	movwf	fsr2l,c
 20091  0109B0  0E00               	movlw	0
 20092  0109B2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20093  0109B4  6EDA               	movwf	fsr2h,c
 20094  0109B6  0E01               	movlw	1
 20095  0109B8  6EDE               	movwf	postinc2,c
 20096  0109BA  0E00               	movlw	0
 20097  0109BC  6EDD               	movwf	postdec2,c
 20098                           
 20099                           ; BSR set to: 0
 20100                           ;dans.c: 65: ++x;
 20101  0109BE  4B6C               	infsnz	Create_Maze@x& (0+255),f,b
 20102  0109C0  2B6D               	incf	(Create_Maze@x+1)& (0+255),f,b
 20103                           
 20104                           ; BSR set to: 0
 20105                           ;dans.c: 66: y = 0;
 20106  0109C2  0E00               	movlw	0
 20107  0109C4  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 20108  0109C6  0E00               	movlw	0
 20109  0109C8  6F6E               	movwf	Create_Maze@y& (0+255),b
 20110                           
 20111                           ; BSR set to: 0
 20112                           ;dans.c: 67: maze[x][y].walls[0] = 0;
 20113  0109CA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20114  0109CE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20115  0109D2  0E00               	movlw	0
 20116  0109D4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20117  0109D6  0E32               	movlw	50
 20118  0109D8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20119  0109DA  ECE4  F0C5         	call	___wmul	;wreg free
 20120  0109DE  0E00               	movlw	low _maze
 20121  0109E0  0100               	movlb	0	; () banked
 20122  0109E2  6F66               	movwf	??_Create_Maze& (0+255),b
 20123  0109E4  0E02               	movlw	high _maze
 20124  0109E6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20125  0109E8  5160               	movf	?___wmul& (0+255),w,b
 20126  0109EA  2766               	addwf	??_Create_Maze& (0+255),f,b
 20127  0109EC  5161               	movf	(?___wmul+1)& (0+255),w,b
 20128  0109EE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20129  0109F0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20130  0109F4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20131  0109F8  0E00               	movlw	0
 20132  0109FA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20133  0109FC  0E0A               	movlw	10
 20134  0109FE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20135  010A00  ECE4  F0C5         	call	___wmul	;wreg free
 20136  010A04  0100               	movlb	0	; () banked
 20137  010A06  5160               	movf	?___wmul& (0+255),w,b
 20138  010A08  2766               	addwf	??_Create_Maze& (0+255),f,b
 20139  010A0A  5161               	movf	(?___wmul+1)& (0+255),w,b
 20140  010A0C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20141  010A0E  0E04               	movlw	4
 20142  010A10  2566               	addwf	??_Create_Maze& (0+255),w,b
 20143  010A12  6ED9               	movwf	fsr2l,c
 20144  010A14  0E00               	movlw	0
 20145  010A16  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20146  010A18  6EDA               	movwf	fsr2h,c
 20147  010A1A  0E00               	movlw	0
 20148  010A1C  6EDF               	movwf	indf2,c
 20149                           
 20150                           ; BSR set to: 0
 20151                           ;dans.c: 68: maze[x][y].walls[1] = 0;
 20152  010A1E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20153  010A22  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20154  010A26  0E00               	movlw	0
 20155  010A28  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20156  010A2A  0E32               	movlw	50
 20157  010A2C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20158  010A2E  ECE4  F0C5         	call	___wmul	;wreg free
 20159  010A32  0E00               	movlw	low _maze
 20160  010A34  0100               	movlb	0	; () banked
 20161  010A36  6F66               	movwf	??_Create_Maze& (0+255),b
 20162  010A38  0E02               	movlw	high _maze
 20163  010A3A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20164  010A3C  5160               	movf	?___wmul& (0+255),w,b
 20165  010A3E  2766               	addwf	??_Create_Maze& (0+255),f,b
 20166  010A40  5161               	movf	(?___wmul+1)& (0+255),w,b
 20167  010A42  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20168  010A44  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20169  010A48  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20170  010A4C  0E00               	movlw	0
 20171  010A4E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20172  010A50  0E0A               	movlw	10
 20173  010A52  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20174  010A54  ECE4  F0C5         	call	___wmul	;wreg free
 20175  010A58  0100               	movlb	0	; () banked
 20176  010A5A  5160               	movf	?___wmul& (0+255),w,b
 20177  010A5C  2766               	addwf	??_Create_Maze& (0+255),f,b
 20178  010A5E  5161               	movf	(?___wmul+1)& (0+255),w,b
 20179  010A60  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20180  010A62  0E05               	movlw	5
 20181  010A64  2566               	addwf	??_Create_Maze& (0+255),w,b
 20182  010A66  6ED9               	movwf	fsr2l,c
 20183  010A68  0E00               	movlw	0
 20184  010A6A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20185  010A6C  6EDA               	movwf	fsr2h,c
 20186  010A6E  0E00               	movlw	0
 20187  010A70  6EDF               	movwf	indf2,c
 20188                           
 20189                           ; BSR set to: 0
 20190                           ;dans.c: 69: maze[x][y].walls[2] = 0;
 20191  010A72  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20192  010A76  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20193  010A7A  0E00               	movlw	0
 20194  010A7C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20195  010A7E  0E32               	movlw	50
 20196  010A80  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20197  010A82  ECE4  F0C5         	call	___wmul	;wreg free
 20198  010A86  0E00               	movlw	low _maze
 20199  010A88  0100               	movlb	0	; () banked
 20200  010A8A  6F66               	movwf	??_Create_Maze& (0+255),b
 20201  010A8C  0E02               	movlw	high _maze
 20202  010A8E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20203  010A90  5160               	movf	?___wmul& (0+255),w,b
 20204  010A92  2766               	addwf	??_Create_Maze& (0+255),f,b
 20205  010A94  5161               	movf	(?___wmul+1)& (0+255),w,b
 20206  010A96  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20207  010A98  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20208  010A9C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20209  010AA0  0E00               	movlw	0
 20210  010AA2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20211  010AA4  0E0A               	movlw	10
 20212  010AA6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20213  010AA8  ECE4  F0C5         	call	___wmul	;wreg free
 20214  010AAC  0100               	movlb	0	; () banked
 20215  010AAE  5160               	movf	?___wmul& (0+255),w,b
 20216  010AB0  2766               	addwf	??_Create_Maze& (0+255),f,b
 20217  010AB2  5161               	movf	(?___wmul+1)& (0+255),w,b
 20218  010AB4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20219  010AB6  0E06               	movlw	6
 20220  010AB8  2566               	addwf	??_Create_Maze& (0+255),w,b
 20221  010ABA  6ED9               	movwf	fsr2l,c
 20222  010ABC  0E00               	movlw	0
 20223  010ABE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20224  010AC0  6EDA               	movwf	fsr2h,c
 20225  010AC2  0E00               	movlw	0
 20226  010AC4  6EDF               	movwf	indf2,c
 20227                           
 20228                           ; BSR set to: 0
 20229                           ;dans.c: 70: maze[x][y].walls[3] = 1;
 20230  010AC6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20231  010ACA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20232  010ACE  0E00               	movlw	0
 20233  010AD0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20234  010AD2  0E32               	movlw	50
 20235  010AD4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20236  010AD6  ECE4  F0C5         	call	___wmul	;wreg free
 20237  010ADA  0E00               	movlw	low _maze
 20238  010ADC  0100               	movlb	0	; () banked
 20239  010ADE  6F66               	movwf	??_Create_Maze& (0+255),b
 20240  010AE0  0E02               	movlw	high _maze
 20241  010AE2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20242  010AE4  5160               	movf	?___wmul& (0+255),w,b
 20243  010AE6  2766               	addwf	??_Create_Maze& (0+255),f,b
 20244  010AE8  5161               	movf	(?___wmul+1)& (0+255),w,b
 20245  010AEA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20246  010AEC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20247  010AF0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20248  010AF4  0E00               	movlw	0
 20249  010AF6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20250  010AF8  0E0A               	movlw	10
 20251  010AFA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20252  010AFC  ECE4  F0C5         	call	___wmul	;wreg free
 20253  010B00  0100               	movlb	0	; () banked
 20254  010B02  5160               	movf	?___wmul& (0+255),w,b
 20255  010B04  2766               	addwf	??_Create_Maze& (0+255),f,b
 20256  010B06  5161               	movf	(?___wmul+1)& (0+255),w,b
 20257  010B08  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20258  010B0A  0E07               	movlw	7
 20259  010B0C  2566               	addwf	??_Create_Maze& (0+255),w,b
 20260  010B0E  6ED9               	movwf	fsr2l,c
 20261  010B10  0E00               	movlw	0
 20262  010B12  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20263  010B14  6EDA               	movwf	fsr2h,c
 20264  010B16  0E01               	movlw	1
 20265  010B18  6EDF               	movwf	indf2,c
 20266                           
 20267                           ; BSR set to: 0
 20268                           ;dans.c: 71: maze[x][y].Options = 3;
 20269  010B1A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20270  010B1E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20271  010B22  0E00               	movlw	0
 20272  010B24  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20273  010B26  0E32               	movlw	50
 20274  010B28  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20275  010B2A  ECE4  F0C5         	call	___wmul	;wreg free
 20276  010B2E  0E00               	movlw	low _maze
 20277  010B30  0100               	movlb	0	; () banked
 20278  010B32  6F66               	movwf	??_Create_Maze& (0+255),b
 20279  010B34  0E02               	movlw	high _maze
 20280  010B36  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20281  010B38  5160               	movf	?___wmul& (0+255),w,b
 20282  010B3A  2766               	addwf	??_Create_Maze& (0+255),f,b
 20283  010B3C  5161               	movf	(?___wmul+1)& (0+255),w,b
 20284  010B3E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20285  010B40  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20286  010B44  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20287  010B48  0E00               	movlw	0
 20288  010B4A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20289  010B4C  0E0A               	movlw	10
 20290  010B4E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20291  010B50  ECE4  F0C5         	call	___wmul	;wreg free
 20292  010B54  0100               	movlb	0	; () banked
 20293  010B56  5160               	movf	?___wmul& (0+255),w,b
 20294  010B58  2766               	addwf	??_Create_Maze& (0+255),f,b
 20295  010B5A  5161               	movf	(?___wmul+1)& (0+255),w,b
 20296  010B5C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20297  010B5E  0E08               	movlw	8
 20298  010B60  2566               	addwf	??_Create_Maze& (0+255),w,b
 20299  010B62  6ED9               	movwf	fsr2l,c
 20300  010B64  0E00               	movlw	0
 20301  010B66  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20302  010B68  6EDA               	movwf	fsr2h,c
 20303  010B6A  0E03               	movlw	3
 20304  010B6C  6EDE               	movwf	postinc2,c
 20305  010B6E  0E00               	movlw	0
 20306  010B70  6EDD               	movwf	postdec2,c
 20307                           
 20308                           ;dans.c: 73: ++y;
 20309  010B72  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 20310  010B74  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 20311                           
 20312                           ; BSR set to: 0
 20313                           ;dans.c: 74: maze[x][y].walls[0] = 1;
 20314  010B76  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20315  010B7A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20316  010B7E  0E00               	movlw	0
 20317  010B80  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20318  010B82  0E32               	movlw	50
 20319  010B84  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20320  010B86  ECE4  F0C5         	call	___wmul	;wreg free
 20321  010B8A  0E00               	movlw	low _maze
 20322  010B8C  0100               	movlb	0	; () banked
 20323  010B8E  6F66               	movwf	??_Create_Maze& (0+255),b
 20324  010B90  0E02               	movlw	high _maze
 20325  010B92  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20326  010B94  5160               	movf	?___wmul& (0+255),w,b
 20327  010B96  2766               	addwf	??_Create_Maze& (0+255),f,b
 20328  010B98  5161               	movf	(?___wmul+1)& (0+255),w,b
 20329  010B9A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20330  010B9C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20331  010BA0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20332  010BA4  0E00               	movlw	0
 20333  010BA6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20334  010BA8  0E0A               	movlw	10
 20335  010BAA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20336  010BAC  ECE4  F0C5         	call	___wmul	;wreg free
 20337  010BB0  0100               	movlb	0	; () banked
 20338  010BB2  5160               	movf	?___wmul& (0+255),w,b
 20339  010BB4  2766               	addwf	??_Create_Maze& (0+255),f,b
 20340  010BB6  5161               	movf	(?___wmul+1)& (0+255),w,b
 20341  010BB8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20342  010BBA  0E04               	movlw	4
 20343  010BBC  2566               	addwf	??_Create_Maze& (0+255),w,b
 20344  010BBE  6ED9               	movwf	fsr2l,c
 20345  010BC0  0E00               	movlw	0
 20346  010BC2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20347  010BC4  6EDA               	movwf	fsr2h,c
 20348  010BC6  0E01               	movlw	1
 20349  010BC8  6EDF               	movwf	indf2,c
 20350                           
 20351                           ; BSR set to: 0
 20352                           ;dans.c: 75: maze[x][y].walls[1] = 1;
 20353  010BCA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20354  010BCE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20355  010BD2  0E00               	movlw	0
 20356  010BD4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20357  010BD6  0E32               	movlw	50
 20358  010BD8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20359  010BDA  ECE4  F0C5         	call	___wmul	;wreg free
 20360  010BDE  0E00               	movlw	low _maze
 20361  010BE0  0100               	movlb	0	; () banked
 20362  010BE2  6F66               	movwf	??_Create_Maze& (0+255),b
 20363  010BE4  0E02               	movlw	high _maze
 20364  010BE6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20365  010BE8  5160               	movf	?___wmul& (0+255),w,b
 20366  010BEA  2766               	addwf	??_Create_Maze& (0+255),f,b
 20367  010BEC  5161               	movf	(?___wmul+1)& (0+255),w,b
 20368  010BEE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20369  010BF0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20370  010BF4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20371  010BF8  0E00               	movlw	0
 20372  010BFA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20373  010BFC  0E0A               	movlw	10
 20374  010BFE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20375  010C00  ECE4  F0C5         	call	___wmul	;wreg free
 20376  010C04  0100               	movlb	0	; () banked
 20377  010C06  5160               	movf	?___wmul& (0+255),w,b
 20378  010C08  2766               	addwf	??_Create_Maze& (0+255),f,b
 20379  010C0A  5161               	movf	(?___wmul+1)& (0+255),w,b
 20380  010C0C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20381  010C0E  0E05               	movlw	5
 20382  010C10  2566               	addwf	??_Create_Maze& (0+255),w,b
 20383  010C12  6ED9               	movwf	fsr2l,c
 20384  010C14  0E00               	movlw	0
 20385  010C16  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20386  010C18  6EDA               	movwf	fsr2h,c
 20387  010C1A  0E01               	movlw	1
 20388  010C1C  6EDF               	movwf	indf2,c
 20389                           
 20390                           ; BSR set to: 0
 20391                           ;dans.c: 76: maze[x][y].walls[2] = 1;
 20392  010C1E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20393  010C22  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20394  010C26  0E00               	movlw	0
 20395  010C28  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20396  010C2A  0E32               	movlw	50
 20397  010C2C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20398  010C2E  ECE4  F0C5         	call	___wmul	;wreg free
 20399  010C32  0E00               	movlw	low _maze
 20400  010C34  0100               	movlb	0	; () banked
 20401  010C36  6F66               	movwf	??_Create_Maze& (0+255),b
 20402  010C38  0E02               	movlw	high _maze
 20403  010C3A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20404  010C3C  5160               	movf	?___wmul& (0+255),w,b
 20405  010C3E  2766               	addwf	??_Create_Maze& (0+255),f,b
 20406  010C40  5161               	movf	(?___wmul+1)& (0+255),w,b
 20407  010C42  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20408  010C44  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20409  010C48  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20410  010C4C  0E00               	movlw	0
 20411  010C4E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20412  010C50  0E0A               	movlw	10
 20413  010C52  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20414  010C54  ECE4  F0C5         	call	___wmul	;wreg free
 20415  010C58  0100               	movlb	0	; () banked
 20416  010C5A  5160               	movf	?___wmul& (0+255),w,b
 20417  010C5C  2766               	addwf	??_Create_Maze& (0+255),f,b
 20418  010C5E  5161               	movf	(?___wmul+1)& (0+255),w,b
 20419  010C60  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20420  010C62  0E06               	movlw	6
 20421  010C64  2566               	addwf	??_Create_Maze& (0+255),w,b
 20422  010C66  6ED9               	movwf	fsr2l,c
 20423  010C68  0E00               	movlw	0
 20424  010C6A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20425  010C6C  6EDA               	movwf	fsr2h,c
 20426  010C6E  0E01               	movlw	1
 20427  010C70  6EDF               	movwf	indf2,c
 20428                           
 20429                           ; BSR set to: 0
 20430                           ;dans.c: 77: maze[x][y].walls[3] = 0;
 20431  010C72  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20432  010C76  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20433  010C7A  0E00               	movlw	0
 20434  010C7C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20435  010C7E  0E32               	movlw	50
 20436  010C80  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20437  010C82  ECE4  F0C5         	call	___wmul	;wreg free
 20438  010C86  0E00               	movlw	low _maze
 20439  010C88  0100               	movlb	0	; () banked
 20440  010C8A  6F66               	movwf	??_Create_Maze& (0+255),b
 20441  010C8C  0E02               	movlw	high _maze
 20442  010C8E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20443  010C90  5160               	movf	?___wmul& (0+255),w,b
 20444  010C92  2766               	addwf	??_Create_Maze& (0+255),f,b
 20445  010C94  5161               	movf	(?___wmul+1)& (0+255),w,b
 20446  010C96  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20447  010C98  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20448  010C9C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20449  010CA0  0E00               	movlw	0
 20450  010CA2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20451  010CA4  0E0A               	movlw	10
 20452  010CA6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20453  010CA8  ECE4  F0C5         	call	___wmul	;wreg free
 20454  010CAC  0100               	movlb	0	; () banked
 20455  010CAE  5160               	movf	?___wmul& (0+255),w,b
 20456  010CB0  2766               	addwf	??_Create_Maze& (0+255),f,b
 20457  010CB2  5161               	movf	(?___wmul+1)& (0+255),w,b
 20458  010CB4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20459  010CB6  0E07               	movlw	7
 20460  010CB8  2566               	addwf	??_Create_Maze& (0+255),w,b
 20461  010CBA  6ED9               	movwf	fsr2l,c
 20462  010CBC  0E00               	movlw	0
 20463  010CBE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20464  010CC0  6EDA               	movwf	fsr2h,c
 20465  010CC2  0E00               	movlw	0
 20466  010CC4  6EDF               	movwf	indf2,c
 20467                           
 20468                           ; BSR set to: 0
 20469                           ;dans.c: 78: maze[x][y].Options = 1;
 20470  010CC6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20471  010CCA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20472  010CCE  0E00               	movlw	0
 20473  010CD0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20474  010CD2  0E32               	movlw	50
 20475  010CD4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20476  010CD6  ECE4  F0C5         	call	___wmul	;wreg free
 20477  010CDA  0E00               	movlw	low _maze
 20478  010CDC  0100               	movlb	0	; () banked
 20479  010CDE  6F66               	movwf	??_Create_Maze& (0+255),b
 20480  010CE0  0E02               	movlw	high _maze
 20481  010CE2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20482  010CE4  5160               	movf	?___wmul& (0+255),w,b
 20483  010CE6  2766               	addwf	??_Create_Maze& (0+255),f,b
 20484  010CE8  5161               	movf	(?___wmul+1)& (0+255),w,b
 20485  010CEA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20486  010CEC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20487  010CF0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20488  010CF4  0E00               	movlw	0
 20489  010CF6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20490  010CF8  0E0A               	movlw	10
 20491  010CFA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20492  010CFC  ECE4  F0C5         	call	___wmul	;wreg free
 20493  010D00  0100               	movlb	0	; () banked
 20494  010D02  5160               	movf	?___wmul& (0+255),w,b
 20495  010D04  2766               	addwf	??_Create_Maze& (0+255),f,b
 20496  010D06  5161               	movf	(?___wmul+1)& (0+255),w,b
 20497  010D08  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20498  010D0A  0E08               	movlw	8
 20499  010D0C  2566               	addwf	??_Create_Maze& (0+255),w,b
 20500  010D0E  6ED9               	movwf	fsr2l,c
 20501  010D10  0E00               	movlw	0
 20502  010D12  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20503  010D14  6EDA               	movwf	fsr2h,c
 20504  010D16  0E01               	movlw	1
 20505  010D18  6EDE               	movwf	postinc2,c
 20506  010D1A  0E00               	movlw	0
 20507  010D1C  6EDD               	movwf	postdec2,c
 20508                           
 20509                           ; BSR set to: 0
 20510                           ;dans.c: 80: ++y;
 20511  010D1E  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 20512  010D20  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 20513                           
 20514                           ;dans.c: 81: maze[x][y].walls[0] = 0;
 20515  010D22  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20516  010D26  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20517  010D2A  0E00               	movlw	0
 20518  010D2C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20519  010D2E  0E32               	movlw	50
 20520  010D30  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20521  010D32  ECE4  F0C5         	call	___wmul	;wreg free
 20522  010D36  0E00               	movlw	low _maze
 20523  010D38  0100               	movlb	0	; () banked
 20524  010D3A  6F66               	movwf	??_Create_Maze& (0+255),b
 20525  010D3C  0E02               	movlw	high _maze
 20526  010D3E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20527  010D40  5160               	movf	?___wmul& (0+255),w,b
 20528  010D42  2766               	addwf	??_Create_Maze& (0+255),f,b
 20529  010D44  5161               	movf	(?___wmul+1)& (0+255),w,b
 20530  010D46  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20531  010D48  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20532  010D4C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20533  010D50  0E00               	movlw	0
 20534  010D52  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20535  010D54  0E0A               	movlw	10
 20536  010D56  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20537  010D58  ECE4  F0C5         	call	___wmul	;wreg free
 20538  010D5C  0100               	movlb	0	; () banked
 20539  010D5E  5160               	movf	?___wmul& (0+255),w,b
 20540  010D60  2766               	addwf	??_Create_Maze& (0+255),f,b
 20541  010D62  5161               	movf	(?___wmul+1)& (0+255),w,b
 20542  010D64  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20543  010D66  0E04               	movlw	4
 20544  010D68  2566               	addwf	??_Create_Maze& (0+255),w,b
 20545  010D6A  6ED9               	movwf	fsr2l,c
 20546  010D6C  0E00               	movlw	0
 20547  010D6E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20548  010D70  6EDA               	movwf	fsr2h,c
 20549  010D72  0E00               	movlw	0
 20550  010D74  6EDF               	movwf	indf2,c
 20551                           
 20552                           ;dans.c: 82: maze[x][y].walls[1] = 1;
 20553  010D76  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20554  010D7A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20555  010D7E  0E00               	movlw	0
 20556  010D80  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20557  010D82  0E32               	movlw	50
 20558  010D84  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20559  010D86  ECE4  F0C5         	call	___wmul	;wreg free
 20560  010D8A  0E00               	movlw	low _maze
 20561  010D8C  0100               	movlb	0	; () banked
 20562  010D8E  6F66               	movwf	??_Create_Maze& (0+255),b
 20563  010D90  0E02               	movlw	high _maze
 20564  010D92  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20565  010D94  5160               	movf	?___wmul& (0+255),w,b
 20566  010D96  2766               	addwf	??_Create_Maze& (0+255),f,b
 20567  010D98  5161               	movf	(?___wmul+1)& (0+255),w,b
 20568  010D9A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20569  010D9C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20570  010DA0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20571  010DA4  0E00               	movlw	0
 20572  010DA6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20573  010DA8  0E0A               	movlw	10
 20574  010DAA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20575  010DAC  ECE4  F0C5         	call	___wmul	;wreg free
 20576  010DB0  0100               	movlb	0	; () banked
 20577  010DB2  5160               	movf	?___wmul& (0+255),w,b
 20578  010DB4  2766               	addwf	??_Create_Maze& (0+255),f,b
 20579  010DB6  5161               	movf	(?___wmul+1)& (0+255),w,b
 20580  010DB8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20581  010DBA  0E05               	movlw	5
 20582  010DBC  2566               	addwf	??_Create_Maze& (0+255),w,b
 20583  010DBE  6ED9               	movwf	fsr2l,c
 20584  010DC0  0E00               	movlw	0
 20585  010DC2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20586  010DC4  6EDA               	movwf	fsr2h,c
 20587  010DC6  0E01               	movlw	1
 20588  010DC8  6EDF               	movwf	indf2,c
 20589                           
 20590                           ;dans.c: 83: maze[x][y].walls[2] = 0;
 20591  010DCA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20592  010DCE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20593  010DD2  0E00               	movlw	0
 20594  010DD4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20595  010DD6  0E32               	movlw	50
 20596  010DD8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20597  010DDA  ECE4  F0C5         	call	___wmul	;wreg free
 20598  010DDE  0E00               	movlw	low _maze
 20599  010DE0  0100               	movlb	0	; () banked
 20600  010DE2  6F66               	movwf	??_Create_Maze& (0+255),b
 20601  010DE4  0E02               	movlw	high _maze
 20602  010DE6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20603  010DE8  5160               	movf	?___wmul& (0+255),w,b
 20604  010DEA  2766               	addwf	??_Create_Maze& (0+255),f,b
 20605  010DEC  5161               	movf	(?___wmul+1)& (0+255),w,b
 20606  010DEE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20607  010DF0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20608  010DF4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20609  010DF8  0E00               	movlw	0
 20610  010DFA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20611  010DFC  0E0A               	movlw	10
 20612  010DFE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20613  010E00  ECE4  F0C5         	call	___wmul	;wreg free
 20614  010E04  0100               	movlb	0	; () banked
 20615  010E06  5160               	movf	?___wmul& (0+255),w,b
 20616  010E08  2766               	addwf	??_Create_Maze& (0+255),f,b
 20617  010E0A  5161               	movf	(?___wmul+1)& (0+255),w,b
 20618  010E0C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20619  010E0E  0E06               	movlw	6
 20620  010E10  2566               	addwf	??_Create_Maze& (0+255),w,b
 20621  010E12  6ED9               	movwf	fsr2l,c
 20622  010E14  0E00               	movlw	0
 20623  010E16  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20624  010E18  6EDA               	movwf	fsr2h,c
 20625  010E1A  0E00               	movlw	0
 20626  010E1C  6EDF               	movwf	indf2,c
 20627                           
 20628                           ;dans.c: 84: maze[x][y].walls[3] = 1;
 20629  010E1E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20630  010E22  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20631  010E26  0E00               	movlw	0
 20632  010E28  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20633  010E2A  0E32               	movlw	50
 20634  010E2C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20635  010E2E  ECE4  F0C5         	call	___wmul	;wreg free
 20636  010E32  0E00               	movlw	low _maze
 20637  010E34  0100               	movlb	0	; () banked
 20638  010E36  6F66               	movwf	??_Create_Maze& (0+255),b
 20639  010E38  0E02               	movlw	high _maze
 20640  010E3A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20641  010E3C  5160               	movf	?___wmul& (0+255),w,b
 20642  010E3E  2766               	addwf	??_Create_Maze& (0+255),f,b
 20643  010E40  5161               	movf	(?___wmul+1)& (0+255),w,b
 20644  010E42  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20645  010E44  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20646  010E48  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20647  010E4C  0E00               	movlw	0
 20648  010E4E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20649  010E50  0E0A               	movlw	10
 20650  010E52  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20651  010E54  ECE4  F0C5         	call	___wmul	;wreg free
 20652  010E58  0100               	movlb	0	; () banked
 20653  010E5A  5160               	movf	?___wmul& (0+255),w,b
 20654  010E5C  2766               	addwf	??_Create_Maze& (0+255),f,b
 20655  010E5E  5161               	movf	(?___wmul+1)& (0+255),w,b
 20656  010E60  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20657  010E62  0E07               	movlw	7
 20658  010E64  2566               	addwf	??_Create_Maze& (0+255),w,b
 20659  010E66  6ED9               	movwf	fsr2l,c
 20660  010E68  0E00               	movlw	0
 20661  010E6A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20662  010E6C  6EDA               	movwf	fsr2h,c
 20663  010E6E  0E01               	movlw	1
 20664  010E70  6EDF               	movwf	indf2,c
 20665                           
 20666                           ;dans.c: 85: maze[x][y].Options = 2;
 20667  010E72  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20668  010E76  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20669  010E7A  0E00               	movlw	0
 20670  010E7C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20671  010E7E  0E32               	movlw	50
 20672  010E80  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20673  010E82  ECE4  F0C5         	call	___wmul	;wreg free
 20674  010E86  0E00               	movlw	low _maze
 20675  010E88  0100               	movlb	0	; () banked
 20676  010E8A  6F66               	movwf	??_Create_Maze& (0+255),b
 20677  010E8C  0E02               	movlw	high _maze
 20678  010E8E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20679  010E90  5160               	movf	?___wmul& (0+255),w,b
 20680  010E92  2766               	addwf	??_Create_Maze& (0+255),f,b
 20681  010E94  5161               	movf	(?___wmul+1)& (0+255),w,b
 20682  010E96  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20683  010E98  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20684  010E9C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20685  010EA0  0E00               	movlw	0
 20686  010EA2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20687  010EA4  0E0A               	movlw	10
 20688  010EA6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20689  010EA8  ECE4  F0C5         	call	___wmul	;wreg free
 20690  010EAC  0100               	movlb	0	; () banked
 20691  010EAE  5160               	movf	?___wmul& (0+255),w,b
 20692  010EB0  2766               	addwf	??_Create_Maze& (0+255),f,b
 20693  010EB2  5161               	movf	(?___wmul+1)& (0+255),w,b
 20694  010EB4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20695  010EB6  0E08               	movlw	8
 20696  010EB8  2566               	addwf	??_Create_Maze& (0+255),w,b
 20697  010EBA  6ED9               	movwf	fsr2l,c
 20698  010EBC  0E00               	movlw	0
 20699  010EBE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20700  010EC0  6EDA               	movwf	fsr2h,c
 20701  010EC2  0E02               	movlw	2
 20702  010EC4  6EDE               	movwf	postinc2,c
 20703  010EC6  0E00               	movlw	0
 20704  010EC8  6EDD               	movwf	postdec2,c
 20705                           
 20706                           ; BSR set to: 0
 20707                           ;dans.c: 87: ++y;
 20708  010ECA  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 20709  010ECC  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 20710                           
 20711                           ; BSR set to: 0
 20712                           ;dans.c: 88: maze[x][y].walls[0] = 0;
 20713  010ECE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20714  010ED2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20715  010ED6  0E00               	movlw	0
 20716  010ED8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20717  010EDA  0E32               	movlw	50
 20718  010EDC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20719  010EDE  ECE4  F0C5         	call	___wmul	;wreg free
 20720  010EE2  0E00               	movlw	low _maze
 20721  010EE4  0100               	movlb	0	; () banked
 20722  010EE6  6F66               	movwf	??_Create_Maze& (0+255),b
 20723  010EE8  0E02               	movlw	high _maze
 20724  010EEA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20725  010EEC  5160               	movf	?___wmul& (0+255),w,b
 20726  010EEE  2766               	addwf	??_Create_Maze& (0+255),f,b
 20727  010EF0  5161               	movf	(?___wmul+1)& (0+255),w,b
 20728  010EF2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20729  010EF4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20730  010EF8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20731  010EFC  0E00               	movlw	0
 20732  010EFE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20733  010F00  0E0A               	movlw	10
 20734  010F02  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20735  010F04  ECE4  F0C5         	call	___wmul	;wreg free
 20736  010F08  0100               	movlb	0	; () banked
 20737  010F0A  5160               	movf	?___wmul& (0+255),w,b
 20738  010F0C  2766               	addwf	??_Create_Maze& (0+255),f,b
 20739  010F0E  5161               	movf	(?___wmul+1)& (0+255),w,b
 20740  010F10  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20741  010F12  0E04               	movlw	4
 20742  010F14  2566               	addwf	??_Create_Maze& (0+255),w,b
 20743  010F16  6ED9               	movwf	fsr2l,c
 20744  010F18  0E00               	movlw	0
 20745  010F1A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20746  010F1C  6EDA               	movwf	fsr2h,c
 20747  010F1E  0E00               	movlw	0
 20748  010F20  6EDF               	movwf	indf2,c
 20749                           
 20750                           ; BSR set to: 0
 20751                           ;dans.c: 89: maze[x][y].walls[1] = 0;
 20752  010F22  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20753  010F26  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20754  010F2A  0E00               	movlw	0
 20755  010F2C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20756  010F2E  0E32               	movlw	50
 20757  010F30  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20758  010F32  ECE4  F0C5         	call	___wmul	;wreg free
 20759  010F36  0E00               	movlw	low _maze
 20760  010F38  0100               	movlb	0	; () banked
 20761  010F3A  6F66               	movwf	??_Create_Maze& (0+255),b
 20762  010F3C  0E02               	movlw	high _maze
 20763  010F3E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20764  010F40  5160               	movf	?___wmul& (0+255),w,b
 20765  010F42  2766               	addwf	??_Create_Maze& (0+255),f,b
 20766  010F44  5161               	movf	(?___wmul+1)& (0+255),w,b
 20767  010F46  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20768  010F48  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20769  010F4C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20770  010F50  0E00               	movlw	0
 20771  010F52  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20772  010F54  0E0A               	movlw	10
 20773  010F56  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20774  010F58  ECE4  F0C5         	call	___wmul	;wreg free
 20775  010F5C  0100               	movlb	0	; () banked
 20776  010F5E  5160               	movf	?___wmul& (0+255),w,b
 20777  010F60  2766               	addwf	??_Create_Maze& (0+255),f,b
 20778  010F62  5161               	movf	(?___wmul+1)& (0+255),w,b
 20779  010F64  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20780  010F66  0E05               	movlw	5
 20781  010F68  2566               	addwf	??_Create_Maze& (0+255),w,b
 20782  010F6A  6ED9               	movwf	fsr2l,c
 20783  010F6C  0E00               	movlw	0
 20784  010F6E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20785  010F70  6EDA               	movwf	fsr2h,c
 20786  010F72  0E00               	movlw	0
 20787  010F74  6EDF               	movwf	indf2,c
 20788                           
 20789                           ; BSR set to: 0
 20790                           ;dans.c: 90: maze[x][y].walls[2] = 1;
 20791  010F76  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20792  010F7A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20793  010F7E  0E00               	movlw	0
 20794  010F80  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20795  010F82  0E32               	movlw	50
 20796  010F84  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20797  010F86  ECE4  F0C5         	call	___wmul	;wreg free
 20798  010F8A  0E00               	movlw	low _maze
 20799  010F8C  0100               	movlb	0	; () banked
 20800  010F8E  6F66               	movwf	??_Create_Maze& (0+255),b
 20801  010F90  0E02               	movlw	high _maze
 20802  010F92  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20803  010F94  5160               	movf	?___wmul& (0+255),w,b
 20804  010F96  2766               	addwf	??_Create_Maze& (0+255),f,b
 20805  010F98  5161               	movf	(?___wmul+1)& (0+255),w,b
 20806  010F9A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20807  010F9C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20808  010FA0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20809  010FA4  0E00               	movlw	0
 20810  010FA6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20811  010FA8  0E0A               	movlw	10
 20812  010FAA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20813  010FAC  ECE4  F0C5         	call	___wmul	;wreg free
 20814  010FB0  0100               	movlb	0	; () banked
 20815  010FB2  5160               	movf	?___wmul& (0+255),w,b
 20816  010FB4  2766               	addwf	??_Create_Maze& (0+255),f,b
 20817  010FB6  5161               	movf	(?___wmul+1)& (0+255),w,b
 20818  010FB8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20819  010FBA  0E06               	movlw	6
 20820  010FBC  2566               	addwf	??_Create_Maze& (0+255),w,b
 20821  010FBE  6ED9               	movwf	fsr2l,c
 20822  010FC0  0E00               	movlw	0
 20823  010FC2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20824  010FC4  6EDA               	movwf	fsr2h,c
 20825  010FC6  0E01               	movlw	1
 20826  010FC8  6EDF               	movwf	indf2,c
 20827                           
 20828                           ; BSR set to: 0
 20829                           ;dans.c: 91: maze[x][y].walls[3] = 1;
 20830  010FCA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20831  010FCE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20832  010FD2  0E00               	movlw	0
 20833  010FD4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20834  010FD6  0E32               	movlw	50
 20835  010FD8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20836  010FDA  ECE4  F0C5         	call	___wmul	;wreg free
 20837  010FDE  0E00               	movlw	low _maze
 20838  010FE0  0100               	movlb	0	; () banked
 20839  010FE2  6F66               	movwf	??_Create_Maze& (0+255),b
 20840  010FE4  0E02               	movlw	high _maze
 20841  010FE6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20842  010FE8  5160               	movf	?___wmul& (0+255),w,b
 20843  010FEA  2766               	addwf	??_Create_Maze& (0+255),f,b
 20844  010FEC  5161               	movf	(?___wmul+1)& (0+255),w,b
 20845  010FEE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20846  010FF0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20847  010FF4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20848  010FF8  0E00               	movlw	0
 20849  010FFA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20850  010FFC  0E0A               	movlw	10
 20851  010FFE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20852  011000  ECE4  F0C5         	call	___wmul	;wreg free
 20853  011004  0100               	movlb	0	; () banked
 20854  011006  5160               	movf	?___wmul& (0+255),w,b
 20855  011008  2766               	addwf	??_Create_Maze& (0+255),f,b
 20856  01100A  5161               	movf	(?___wmul+1)& (0+255),w,b
 20857  01100C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20858  01100E  0E07               	movlw	7
 20859  011010  2566               	addwf	??_Create_Maze& (0+255),w,b
 20860  011012  6ED9               	movwf	fsr2l,c
 20861  011014  0E00               	movlw	0
 20862  011016  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20863  011018  6EDA               	movwf	fsr2h,c
 20864  01101A  0E01               	movlw	1
 20865  01101C  6EDF               	movwf	indf2,c
 20866                           
 20867                           ; BSR set to: 0
 20868                           ;dans.c: 92: maze[x][y].Options = 2;
 20869  01101E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20870  011022  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20871  011026  0E00               	movlw	0
 20872  011028  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20873  01102A  0E32               	movlw	50
 20874  01102C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20875  01102E  ECE4  F0C5         	call	___wmul	;wreg free
 20876  011032  0E00               	movlw	low _maze
 20877  011034  0100               	movlb	0	; () banked
 20878  011036  6F66               	movwf	??_Create_Maze& (0+255),b
 20879  011038  0E02               	movlw	high _maze
 20880  01103A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20881  01103C  5160               	movf	?___wmul& (0+255),w,b
 20882  01103E  2766               	addwf	??_Create_Maze& (0+255),f,b
 20883  011040  5161               	movf	(?___wmul+1)& (0+255),w,b
 20884  011042  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20885  011044  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20886  011048  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20887  01104C  0E00               	movlw	0
 20888  01104E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20889  011050  0E0A               	movlw	10
 20890  011052  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20891  011054  ECE4  F0C5         	call	___wmul	;wreg free
 20892  011058  0100               	movlb	0	; () banked
 20893  01105A  5160               	movf	?___wmul& (0+255),w,b
 20894  01105C  2766               	addwf	??_Create_Maze& (0+255),f,b
 20895  01105E  5161               	movf	(?___wmul+1)& (0+255),w,b
 20896  011060  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20897  011062  0E08               	movlw	8
 20898  011064  2566               	addwf	??_Create_Maze& (0+255),w,b
 20899  011066  6ED9               	movwf	fsr2l,c
 20900  011068  0E00               	movlw	0
 20901  01106A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20902  01106C  6EDA               	movwf	fsr2h,c
 20903  01106E  0E02               	movlw	2
 20904  011070  6EDE               	movwf	postinc2,c
 20905  011072  0E00               	movlw	0
 20906  011074  6EDD               	movwf	postdec2,c
 20907                           
 20908                           ;dans.c: 94: ++y;
 20909  011076  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 20910  011078  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 20911                           
 20912                           ; BSR set to: 0
 20913                           ;dans.c: 95: maze[x][y].walls[0] = 0;
 20914  01107A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20915  01107E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20916  011082  0E00               	movlw	0
 20917  011084  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20918  011086  0E32               	movlw	50
 20919  011088  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20920  01108A  ECE4  F0C5         	call	___wmul	;wreg free
 20921  01108E  0E00               	movlw	low _maze
 20922  011090  0100               	movlb	0	; () banked
 20923  011092  6F66               	movwf	??_Create_Maze& (0+255),b
 20924  011094  0E02               	movlw	high _maze
 20925  011096  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20926  011098  5160               	movf	?___wmul& (0+255),w,b
 20927  01109A  2766               	addwf	??_Create_Maze& (0+255),f,b
 20928  01109C  5161               	movf	(?___wmul+1)& (0+255),w,b
 20929  01109E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20930  0110A0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20931  0110A4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20932  0110A8  0E00               	movlw	0
 20933  0110AA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20934  0110AC  0E0A               	movlw	10
 20935  0110AE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20936  0110B0  ECE4  F0C5         	call	___wmul	;wreg free
 20937  0110B4  0100               	movlb	0	; () banked
 20938  0110B6  5160               	movf	?___wmul& (0+255),w,b
 20939  0110B8  2766               	addwf	??_Create_Maze& (0+255),f,b
 20940  0110BA  5161               	movf	(?___wmul+1)& (0+255),w,b
 20941  0110BC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20942  0110BE  0E04               	movlw	4
 20943  0110C0  2566               	addwf	??_Create_Maze& (0+255),w,b
 20944  0110C2  6ED9               	movwf	fsr2l,c
 20945  0110C4  0E00               	movlw	0
 20946  0110C6  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20947  0110C8  6EDA               	movwf	fsr2h,c
 20948  0110CA  0E00               	movlw	0
 20949  0110CC  6EDF               	movwf	indf2,c
 20950                           
 20951                           ; BSR set to: 0
 20952                           ;dans.c: 96: maze[x][y].walls[1] = 1;
 20953  0110CE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20954  0110D2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20955  0110D6  0E00               	movlw	0
 20956  0110D8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20957  0110DA  0E32               	movlw	50
 20958  0110DC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20959  0110DE  ECE4  F0C5         	call	___wmul	;wreg free
 20960  0110E2  0E00               	movlw	low _maze
 20961  0110E4  0100               	movlb	0	; () banked
 20962  0110E6  6F66               	movwf	??_Create_Maze& (0+255),b
 20963  0110E8  0E02               	movlw	high _maze
 20964  0110EA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20965  0110EC  5160               	movf	?___wmul& (0+255),w,b
 20966  0110EE  2766               	addwf	??_Create_Maze& (0+255),f,b
 20967  0110F0  5161               	movf	(?___wmul+1)& (0+255),w,b
 20968  0110F2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20969  0110F4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20970  0110F8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20971  0110FC  0E00               	movlw	0
 20972  0110FE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20973  011100  0E0A               	movlw	10
 20974  011102  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20975  011104  ECE4  F0C5         	call	___wmul	;wreg free
 20976  011108  0100               	movlb	0	; () banked
 20977  01110A  5160               	movf	?___wmul& (0+255),w,b
 20978  01110C  2766               	addwf	??_Create_Maze& (0+255),f,b
 20979  01110E  5161               	movf	(?___wmul+1)& (0+255),w,b
 20980  011110  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20981  011112  0E05               	movlw	5
 20982  011114  2566               	addwf	??_Create_Maze& (0+255),w,b
 20983  011116  6ED9               	movwf	fsr2l,c
 20984  011118  0E00               	movlw	0
 20985  01111A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20986  01111C  6EDA               	movwf	fsr2h,c
 20987  01111E  0E01               	movlw	1
 20988  011120  6EDF               	movwf	indf2,c
 20989                           
 20990                           ; BSR set to: 0
 20991                           ;dans.c: 97: maze[x][y].walls[2] = 1;
 20992  011122  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20993  011126  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20994  01112A  0E00               	movlw	0
 20995  01112C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20996  01112E  0E32               	movlw	50
 20997  011130  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20998  011132  ECE4  F0C5         	call	___wmul	;wreg free
 20999  011136  0E00               	movlw	low _maze
 21000  011138  0100               	movlb	0	; () banked
 21001  01113A  6F66               	movwf	??_Create_Maze& (0+255),b
 21002  01113C  0E02               	movlw	high _maze
 21003  01113E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21004  011140  5160               	movf	?___wmul& (0+255),w,b
 21005  011142  2766               	addwf	??_Create_Maze& (0+255),f,b
 21006  011144  5161               	movf	(?___wmul+1)& (0+255),w,b
 21007  011146  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21008  011148  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21009  01114C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21010  011150  0E00               	movlw	0
 21011  011152  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21012  011154  0E0A               	movlw	10
 21013  011156  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21014  011158  ECE4  F0C5         	call	___wmul	;wreg free
 21015  01115C  0100               	movlb	0	; () banked
 21016  01115E  5160               	movf	?___wmul& (0+255),w,b
 21017  011160  2766               	addwf	??_Create_Maze& (0+255),f,b
 21018  011162  5161               	movf	(?___wmul+1)& (0+255),w,b
 21019  011164  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21020  011166  0E06               	movlw	6
 21021  011168  2566               	addwf	??_Create_Maze& (0+255),w,b
 21022  01116A  6ED9               	movwf	fsr2l,c
 21023  01116C  0E00               	movlw	0
 21024  01116E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21025  011170  6EDA               	movwf	fsr2h,c
 21026  011172  0E01               	movlw	1
 21027  011174  6EDF               	movwf	indf2,c
 21028                           
 21029                           ; BSR set to: 0
 21030                           ;dans.c: 98: maze[x][y].walls[3] = 0;
 21031  011176  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21032  01117A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21033  01117E  0E00               	movlw	0
 21034  011180  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21035  011182  0E32               	movlw	50
 21036  011184  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21037  011186  ECE4  F0C5         	call	___wmul	;wreg free
 21038  01118A  0E00               	movlw	low _maze
 21039  01118C  0100               	movlb	0	; () banked
 21040  01118E  6F66               	movwf	??_Create_Maze& (0+255),b
 21041  011190  0E02               	movlw	high _maze
 21042  011192  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21043  011194  5160               	movf	?___wmul& (0+255),w,b
 21044  011196  2766               	addwf	??_Create_Maze& (0+255),f,b
 21045  011198  5161               	movf	(?___wmul+1)& (0+255),w,b
 21046  01119A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21047  01119C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21048  0111A0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21049  0111A4  0E00               	movlw	0
 21050  0111A6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21051  0111A8  0E0A               	movlw	10
 21052  0111AA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21053  0111AC  ECE4  F0C5         	call	___wmul	;wreg free
 21054  0111B0  0100               	movlb	0	; () banked
 21055  0111B2  5160               	movf	?___wmul& (0+255),w,b
 21056  0111B4  2766               	addwf	??_Create_Maze& (0+255),f,b
 21057  0111B6  5161               	movf	(?___wmul+1)& (0+255),w,b
 21058  0111B8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21059  0111BA  0E07               	movlw	7
 21060  0111BC  2566               	addwf	??_Create_Maze& (0+255),w,b
 21061  0111BE  6ED9               	movwf	fsr2l,c
 21062  0111C0  0E00               	movlw	0
 21063  0111C2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21064  0111C4  6EDA               	movwf	fsr2h,c
 21065  0111C6  0E00               	movlw	0
 21066  0111C8  6EDF               	movwf	indf2,c
 21067                           
 21068                           ; BSR set to: 0
 21069                           ;dans.c: 99: maze[x][y].Options = 2;
 21070  0111CA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21071  0111CE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21072  0111D2  0E00               	movlw	0
 21073  0111D4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21074  0111D6  0E32               	movlw	50
 21075  0111D8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21076  0111DA  ECE4  F0C5         	call	___wmul	;wreg free
 21077  0111DE  0E00               	movlw	low _maze
 21078  0111E0  0100               	movlb	0	; () banked
 21079  0111E2  6F66               	movwf	??_Create_Maze& (0+255),b
 21080  0111E4  0E02               	movlw	high _maze
 21081  0111E6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21082  0111E8  5160               	movf	?___wmul& (0+255),w,b
 21083  0111EA  2766               	addwf	??_Create_Maze& (0+255),f,b
 21084  0111EC  5161               	movf	(?___wmul+1)& (0+255),w,b
 21085  0111EE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21086  0111F0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21087  0111F4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21088  0111F8  0E00               	movlw	0
 21089  0111FA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21090  0111FC  0E0A               	movlw	10
 21091  0111FE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21092  011200  ECE4  F0C5         	call	___wmul	;wreg free
 21093  011204  0100               	movlb	0	; () banked
 21094  011206  5160               	movf	?___wmul& (0+255),w,b
 21095  011208  2766               	addwf	??_Create_Maze& (0+255),f,b
 21096  01120A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21097  01120C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21098  01120E  0E08               	movlw	8
 21099  011210  2566               	addwf	??_Create_Maze& (0+255),w,b
 21100  011212  6ED9               	movwf	fsr2l,c
 21101  011214  0E00               	movlw	0
 21102  011216  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21103  011218  6EDA               	movwf	fsr2h,c
 21104  01121A  0E02               	movlw	2
 21105  01121C  6EDE               	movwf	postinc2,c
 21106  01121E  0E00               	movlw	0
 21107  011220  6EDD               	movwf	postdec2,c
 21108                           
 21109                           ; BSR set to: 0
 21110                           ;dans.c: 101: ++x;
 21111  011222  4B6C               	infsnz	Create_Maze@x& (0+255),f,b
 21112  011224  2B6D               	incf	(Create_Maze@x+1)& (0+255),f,b
 21113                           
 21114                           ; BSR set to: 0
 21115                           ;dans.c: 102: y = 0;
 21116  011226  0E00               	movlw	0
 21117  011228  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 21118  01122A  0E00               	movlw	0
 21119  01122C  6F6E               	movwf	Create_Maze@y& (0+255),b
 21120                           
 21121                           ; BSR set to: 0
 21122                           ;dans.c: 103: maze[x][y].walls[0] = 0;
 21123  01122E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21124  011232  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21125  011236  0E00               	movlw	0
 21126  011238  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21127  01123A  0E32               	movlw	50
 21128  01123C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21129  01123E  ECE4  F0C5         	call	___wmul	;wreg free
 21130  011242  0E00               	movlw	low _maze
 21131  011244  0100               	movlb	0	; () banked
 21132  011246  6F66               	movwf	??_Create_Maze& (0+255),b
 21133  011248  0E02               	movlw	high _maze
 21134  01124A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21135  01124C  5160               	movf	?___wmul& (0+255),w,b
 21136  01124E  2766               	addwf	??_Create_Maze& (0+255),f,b
 21137  011250  5161               	movf	(?___wmul+1)& (0+255),w,b
 21138  011252  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21139  011254  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21140  011258  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21141  01125C  0E00               	movlw	0
 21142  01125E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21143  011260  0E0A               	movlw	10
 21144  011262  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21145  011264  ECE4  F0C5         	call	___wmul	;wreg free
 21146  011268  0100               	movlb	0	; () banked
 21147  01126A  5160               	movf	?___wmul& (0+255),w,b
 21148  01126C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21149  01126E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21150  011270  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21151  011272  0E04               	movlw	4
 21152  011274  2566               	addwf	??_Create_Maze& (0+255),w,b
 21153  011276  6ED9               	movwf	fsr2l,c
 21154  011278  0E00               	movlw	0
 21155  01127A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21156  01127C  6EDA               	movwf	fsr2h,c
 21157  01127E  0E00               	movlw	0
 21158  011280  6EDF               	movwf	indf2,c
 21159                           
 21160                           ; BSR set to: 0
 21161                           ;dans.c: 104: maze[x][y].walls[1] = 0;
 21162  011282  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21163  011286  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21164  01128A  0E00               	movlw	0
 21165  01128C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21166  01128E  0E32               	movlw	50
 21167  011290  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21168  011292  ECE4  F0C5         	call	___wmul	;wreg free
 21169  011296  0E00               	movlw	low _maze
 21170  011298  0100               	movlb	0	; () banked
 21171  01129A  6F66               	movwf	??_Create_Maze& (0+255),b
 21172  01129C  0E02               	movlw	high _maze
 21173  01129E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21174  0112A0  5160               	movf	?___wmul& (0+255),w,b
 21175  0112A2  2766               	addwf	??_Create_Maze& (0+255),f,b
 21176  0112A4  5161               	movf	(?___wmul+1)& (0+255),w,b
 21177  0112A6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21178  0112A8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21179  0112AC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21180  0112B0  0E00               	movlw	0
 21181  0112B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21182  0112B4  0E0A               	movlw	10
 21183  0112B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21184  0112B8  ECE4  F0C5         	call	___wmul	;wreg free
 21185  0112BC  0100               	movlb	0	; () banked
 21186  0112BE  5160               	movf	?___wmul& (0+255),w,b
 21187  0112C0  2766               	addwf	??_Create_Maze& (0+255),f,b
 21188  0112C2  5161               	movf	(?___wmul+1)& (0+255),w,b
 21189  0112C4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21190  0112C6  0E05               	movlw	5
 21191  0112C8  2566               	addwf	??_Create_Maze& (0+255),w,b
 21192  0112CA  6ED9               	movwf	fsr2l,c
 21193  0112CC  0E00               	movlw	0
 21194  0112CE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21195  0112D0  6EDA               	movwf	fsr2h,c
 21196  0112D2  0E00               	movlw	0
 21197  0112D4  6EDF               	movwf	indf2,c
 21198                           
 21199                           ; BSR set to: 0
 21200                           ;dans.c: 105: maze[x][y].walls[2] = 0;
 21201  0112D6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21202  0112DA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21203  0112DE  0E00               	movlw	0
 21204  0112E0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21205  0112E2  0E32               	movlw	50
 21206  0112E4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21207  0112E6  ECE4  F0C5         	call	___wmul	;wreg free
 21208  0112EA  0E00               	movlw	low _maze
 21209  0112EC  0100               	movlb	0	; () banked
 21210  0112EE  6F66               	movwf	??_Create_Maze& (0+255),b
 21211  0112F0  0E02               	movlw	high _maze
 21212  0112F2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21213  0112F4  5160               	movf	?___wmul& (0+255),w,b
 21214  0112F6  2766               	addwf	??_Create_Maze& (0+255),f,b
 21215  0112F8  5161               	movf	(?___wmul+1)& (0+255),w,b
 21216  0112FA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21217  0112FC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21218  011300  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21219  011304  0E00               	movlw	0
 21220  011306  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21221  011308  0E0A               	movlw	10
 21222  01130A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21223  01130C  ECE4  F0C5         	call	___wmul	;wreg free
 21224  011310  0100               	movlb	0	; () banked
 21225  011312  5160               	movf	?___wmul& (0+255),w,b
 21226  011314  2766               	addwf	??_Create_Maze& (0+255),f,b
 21227  011316  5161               	movf	(?___wmul+1)& (0+255),w,b
 21228  011318  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21229  01131A  0E06               	movlw	6
 21230  01131C  2566               	addwf	??_Create_Maze& (0+255),w,b
 21231  01131E  6ED9               	movwf	fsr2l,c
 21232  011320  0E00               	movlw	0
 21233  011322  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21234  011324  6EDA               	movwf	fsr2h,c
 21235  011326  0E00               	movlw	0
 21236  011328  6EDF               	movwf	indf2,c
 21237                           
 21238                           ; BSR set to: 0
 21239                           ;dans.c: 106: maze[x][y].walls[3] = 1;
 21240  01132A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21241  01132E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21242  011332  0E00               	movlw	0
 21243  011334  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21244  011336  0E32               	movlw	50
 21245  011338  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21246  01133A  ECE4  F0C5         	call	___wmul	;wreg free
 21247  01133E  0E00               	movlw	low _maze
 21248  011340  0100               	movlb	0	; () banked
 21249  011342  6F66               	movwf	??_Create_Maze& (0+255),b
 21250  011344  0E02               	movlw	high _maze
 21251  011346  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21252  011348  5160               	movf	?___wmul& (0+255),w,b
 21253  01134A  2766               	addwf	??_Create_Maze& (0+255),f,b
 21254  01134C  5161               	movf	(?___wmul+1)& (0+255),w,b
 21255  01134E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21256  011350  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21257  011354  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21258  011358  0E00               	movlw	0
 21259  01135A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21260  01135C  0E0A               	movlw	10
 21261  01135E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21262  011360  ECE4  F0C5         	call	___wmul	;wreg free
 21263  011364  0100               	movlb	0	; () banked
 21264  011366  5160               	movf	?___wmul& (0+255),w,b
 21265  011368  2766               	addwf	??_Create_Maze& (0+255),f,b
 21266  01136A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21267  01136C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21268  01136E  0E07               	movlw	7
 21269  011370  2566               	addwf	??_Create_Maze& (0+255),w,b
 21270  011372  6ED9               	movwf	fsr2l,c
 21271  011374  0E00               	movlw	0
 21272  011376  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21273  011378  6EDA               	movwf	fsr2h,c
 21274  01137A  0E01               	movlw	1
 21275  01137C  6EDF               	movwf	indf2,c
 21276                           
 21277                           ; BSR set to: 0
 21278                           ;dans.c: 107: maze[x][y].Options = 3;
 21279  01137E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21280  011382  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21281  011386  0E00               	movlw	0
 21282  011388  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21283  01138A  0E32               	movlw	50
 21284  01138C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21285  01138E  ECE4  F0C5         	call	___wmul	;wreg free
 21286  011392  0E00               	movlw	low _maze
 21287  011394  0100               	movlb	0	; () banked
 21288  011396  6F66               	movwf	??_Create_Maze& (0+255),b
 21289  011398  0E02               	movlw	high _maze
 21290  01139A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21291  01139C  5160               	movf	?___wmul& (0+255),w,b
 21292  01139E  2766               	addwf	??_Create_Maze& (0+255),f,b
 21293  0113A0  5161               	movf	(?___wmul+1)& (0+255),w,b
 21294  0113A2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21295  0113A4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21296  0113A8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21297  0113AC  0E00               	movlw	0
 21298  0113AE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21299  0113B0  0E0A               	movlw	10
 21300  0113B2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21301  0113B4  ECE4  F0C5         	call	___wmul	;wreg free
 21302  0113B8  0100               	movlb	0	; () banked
 21303  0113BA  5160               	movf	?___wmul& (0+255),w,b
 21304  0113BC  2766               	addwf	??_Create_Maze& (0+255),f,b
 21305  0113BE  5161               	movf	(?___wmul+1)& (0+255),w,b
 21306  0113C0  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21307  0113C2  0E08               	movlw	8
 21308  0113C4  2566               	addwf	??_Create_Maze& (0+255),w,b
 21309  0113C6  6ED9               	movwf	fsr2l,c
 21310  0113C8  0E00               	movlw	0
 21311  0113CA  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21312  0113CC  6EDA               	movwf	fsr2h,c
 21313  0113CE  0E03               	movlw	3
 21314  0113D0  6EDE               	movwf	postinc2,c
 21315  0113D2  0E00               	movlw	0
 21316  0113D4  6EDD               	movwf	postdec2,c
 21317                           
 21318                           ; BSR set to: 0
 21319                           ;dans.c: 109: ++y;
 21320  0113D6  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 21321  0113D8  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 21322                           
 21323                           ; BSR set to: 0
 21324                           ;dans.c: 110: maze[x][y].walls[0] = 1;
 21325  0113DA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21326  0113DE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21327  0113E2  0E00               	movlw	0
 21328  0113E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21329  0113E6  0E32               	movlw	50
 21330  0113E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21331  0113EA  ECE4  F0C5         	call	___wmul	;wreg free
 21332  0113EE  0E00               	movlw	low _maze
 21333  0113F0  0100               	movlb	0	; () banked
 21334  0113F2  6F66               	movwf	??_Create_Maze& (0+255),b
 21335  0113F4  0E02               	movlw	high _maze
 21336  0113F6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21337  0113F8  5160               	movf	?___wmul& (0+255),w,b
 21338  0113FA  2766               	addwf	??_Create_Maze& (0+255),f,b
 21339  0113FC  5161               	movf	(?___wmul+1)& (0+255),w,b
 21340  0113FE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21341  011400  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21342  011404  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21343  011408  0E00               	movlw	0
 21344  01140A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21345  01140C  0E0A               	movlw	10
 21346  01140E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21347  011410  ECE4  F0C5         	call	___wmul	;wreg free
 21348  011414  0100               	movlb	0	; () banked
 21349  011416  5160               	movf	?___wmul& (0+255),w,b
 21350  011418  2766               	addwf	??_Create_Maze& (0+255),f,b
 21351  01141A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21352  01141C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21353  01141E  0E04               	movlw	4
 21354  011420  2566               	addwf	??_Create_Maze& (0+255),w,b
 21355  011422  6ED9               	movwf	fsr2l,c
 21356  011424  0E00               	movlw	0
 21357  011426  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21358  011428  6EDA               	movwf	fsr2h,c
 21359  01142A  0E01               	movlw	1
 21360  01142C  6EDF               	movwf	indf2,c
 21361                           
 21362                           ; BSR set to: 0
 21363                           ;dans.c: 111: maze[x][y].walls[1] = 0;
 21364  01142E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21365  011432  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21366  011436  0E00               	movlw	0
 21367  011438  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21368  01143A  0E32               	movlw	50
 21369  01143C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21370  01143E  ECE4  F0C5         	call	___wmul	;wreg free
 21371  011442  0E00               	movlw	low _maze
 21372  011444  0100               	movlb	0	; () banked
 21373  011446  6F66               	movwf	??_Create_Maze& (0+255),b
 21374  011448  0E02               	movlw	high _maze
 21375  01144A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21376  01144C  5160               	movf	?___wmul& (0+255),w,b
 21377  01144E  2766               	addwf	??_Create_Maze& (0+255),f,b
 21378  011450  5161               	movf	(?___wmul+1)& (0+255),w,b
 21379  011452  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21380  011454  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21381  011458  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21382  01145C  0E00               	movlw	0
 21383  01145E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21384  011460  0E0A               	movlw	10
 21385  011462  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21386  011464  ECE4  F0C5         	call	___wmul	;wreg free
 21387  011468  0100               	movlb	0	; () banked
 21388  01146A  5160               	movf	?___wmul& (0+255),w,b
 21389  01146C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21390  01146E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21391  011470  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21392  011472  0E05               	movlw	5
 21393  011474  2566               	addwf	??_Create_Maze& (0+255),w,b
 21394  011476  6ED9               	movwf	fsr2l,c
 21395  011478  0E00               	movlw	0
 21396  01147A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21397  01147C  6EDA               	movwf	fsr2h,c
 21398  01147E  0E00               	movlw	0
 21399  011480  6EDF               	movwf	indf2,c
 21400                           
 21401                           ; BSR set to: 0
 21402                           ;dans.c: 112: maze[x][y].walls[2] = 1;
 21403  011482  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21404  011486  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21405  01148A  0E00               	movlw	0
 21406  01148C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21407  01148E  0E32               	movlw	50
 21408  011490  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21409  011492  ECE4  F0C5         	call	___wmul	;wreg free
 21410  011496  0E00               	movlw	low _maze
 21411  011498  0100               	movlb	0	; () banked
 21412  01149A  6F66               	movwf	??_Create_Maze& (0+255),b
 21413  01149C  0E02               	movlw	high _maze
 21414  01149E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21415  0114A0  5160               	movf	?___wmul& (0+255),w,b
 21416  0114A2  2766               	addwf	??_Create_Maze& (0+255),f,b
 21417  0114A4  5161               	movf	(?___wmul+1)& (0+255),w,b
 21418  0114A6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21419  0114A8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21420  0114AC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21421  0114B0  0E00               	movlw	0
 21422  0114B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21423  0114B4  0E0A               	movlw	10
 21424  0114B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21425  0114B8  ECE4  F0C5         	call	___wmul	;wreg free
 21426  0114BC  0100               	movlb	0	; () banked
 21427  0114BE  5160               	movf	?___wmul& (0+255),w,b
 21428  0114C0  2766               	addwf	??_Create_Maze& (0+255),f,b
 21429  0114C2  5161               	movf	(?___wmul+1)& (0+255),w,b
 21430  0114C4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21431  0114C6  0E06               	movlw	6
 21432  0114C8  2566               	addwf	??_Create_Maze& (0+255),w,b
 21433  0114CA  6ED9               	movwf	fsr2l,c
 21434  0114CC  0E00               	movlw	0
 21435  0114CE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21436  0114D0  6EDA               	movwf	fsr2h,c
 21437  0114D2  0E01               	movlw	1
 21438  0114D4  6EDF               	movwf	indf2,c
 21439                           
 21440                           ; BSR set to: 0
 21441                           ;dans.c: 113: maze[x][y].walls[3] = 0;
 21442  0114D6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21443  0114DA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21444  0114DE  0E00               	movlw	0
 21445  0114E0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21446  0114E2  0E32               	movlw	50
 21447  0114E4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21448  0114E6  ECE4  F0C5         	call	___wmul	;wreg free
 21449  0114EA  0E00               	movlw	low _maze
 21450  0114EC  0100               	movlb	0	; () banked
 21451  0114EE  6F66               	movwf	??_Create_Maze& (0+255),b
 21452  0114F0  0E02               	movlw	high _maze
 21453  0114F2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21454  0114F4  5160               	movf	?___wmul& (0+255),w,b
 21455  0114F6  2766               	addwf	??_Create_Maze& (0+255),f,b
 21456  0114F8  5161               	movf	(?___wmul+1)& (0+255),w,b
 21457  0114FA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21458  0114FC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21459  011500  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21460  011504  0E00               	movlw	0
 21461  011506  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21462  011508  0E0A               	movlw	10
 21463  01150A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21464  01150C  ECE4  F0C5         	call	___wmul	;wreg free
 21465  011510  0100               	movlb	0	; () banked
 21466  011512  5160               	movf	?___wmul& (0+255),w,b
 21467  011514  2766               	addwf	??_Create_Maze& (0+255),f,b
 21468  011516  5161               	movf	(?___wmul+1)& (0+255),w,b
 21469  011518  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21470  01151A  0E07               	movlw	7
 21471  01151C  2566               	addwf	??_Create_Maze& (0+255),w,b
 21472  01151E  6ED9               	movwf	fsr2l,c
 21473  011520  0E00               	movlw	0
 21474  011522  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21475  011524  6EDA               	movwf	fsr2h,c
 21476  011526  0E00               	movlw	0
 21477  011528  6EDF               	movwf	indf2,c
 21478                           
 21479                           ; BSR set to: 0
 21480                           ;dans.c: 114: maze[x][y].Options = 2;
 21481  01152A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21482  01152E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21483  011532  0E00               	movlw	0
 21484  011534  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21485  011536  0E32               	movlw	50
 21486  011538  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21487  01153A  ECE4  F0C5         	call	___wmul	;wreg free
 21488  01153E  0E00               	movlw	low _maze
 21489  011540  0100               	movlb	0	; () banked
 21490  011542  6F66               	movwf	??_Create_Maze& (0+255),b
 21491  011544  0E02               	movlw	high _maze
 21492  011546  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21493  011548  5160               	movf	?___wmul& (0+255),w,b
 21494  01154A  2766               	addwf	??_Create_Maze& (0+255),f,b
 21495  01154C  5161               	movf	(?___wmul+1)& (0+255),w,b
 21496  01154E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21497  011550  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21498  011554  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21499  011558  0E00               	movlw	0
 21500  01155A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21501  01155C  0E0A               	movlw	10
 21502  01155E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21503  011560  ECE4  F0C5         	call	___wmul	;wreg free
 21504  011564  0100               	movlb	0	; () banked
 21505  011566  5160               	movf	?___wmul& (0+255),w,b
 21506  011568  2766               	addwf	??_Create_Maze& (0+255),f,b
 21507  01156A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21508  01156C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21509  01156E  0E08               	movlw	8
 21510  011570  2566               	addwf	??_Create_Maze& (0+255),w,b
 21511  011572  6ED9               	movwf	fsr2l,c
 21512  011574  0E00               	movlw	0
 21513  011576  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21514  011578  6EDA               	movwf	fsr2h,c
 21515  01157A  0E02               	movlw	2
 21516  01157C  6EDE               	movwf	postinc2,c
 21517  01157E  0E00               	movlw	0
 21518  011580  6EDD               	movwf	postdec2,c
 21519                           
 21520                           ; BSR set to: 0
 21521                           ;dans.c: 116: ++y;
 21522  011582  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 21523  011584  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 21524                           
 21525                           ; BSR set to: 0
 21526                           ;dans.c: 117: maze[x][y].walls[0] = 0;
 21527  011586  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21528  01158A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21529  01158E  0E00               	movlw	0
 21530  011590  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21531  011592  0E32               	movlw	50
 21532  011594  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21533  011596  ECE4  F0C5         	call	___wmul	;wreg free
 21534  01159A  0E00               	movlw	low _maze
 21535  01159C  0100               	movlb	0	; () banked
 21536  01159E  6F66               	movwf	??_Create_Maze& (0+255),b
 21537  0115A0  0E02               	movlw	high _maze
 21538  0115A2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21539  0115A4  5160               	movf	?___wmul& (0+255),w,b
 21540  0115A6  2766               	addwf	??_Create_Maze& (0+255),f,b
 21541  0115A8  5161               	movf	(?___wmul+1)& (0+255),w,b
 21542  0115AA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21543  0115AC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21544  0115B0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21545  0115B4  0E00               	movlw	0
 21546  0115B6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21547  0115B8  0E0A               	movlw	10
 21548  0115BA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21549  0115BC  ECE4  F0C5         	call	___wmul	;wreg free
 21550  0115C0  0100               	movlb	0	; () banked
 21551  0115C2  5160               	movf	?___wmul& (0+255),w,b
 21552  0115C4  2766               	addwf	??_Create_Maze& (0+255),f,b
 21553  0115C6  5161               	movf	(?___wmul+1)& (0+255),w,b
 21554  0115C8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21555  0115CA  0E04               	movlw	4
 21556  0115CC  2566               	addwf	??_Create_Maze& (0+255),w,b
 21557  0115CE  6ED9               	movwf	fsr2l,c
 21558  0115D0  0E00               	movlw	0
 21559  0115D2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21560  0115D4  6EDA               	movwf	fsr2h,c
 21561  0115D6  0E00               	movlw	0
 21562  0115D8  6EDF               	movwf	indf2,c
 21563                           
 21564                           ; BSR set to: 0
 21565                           ;dans.c: 118: maze[x][y].walls[1] = 0;
 21566  0115DA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21567  0115DE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21568  0115E2  0E00               	movlw	0
 21569  0115E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21570  0115E6  0E32               	movlw	50
 21571  0115E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21572  0115EA  ECE4  F0C5         	call	___wmul	;wreg free
 21573  0115EE  0E00               	movlw	low _maze
 21574  0115F0  0100               	movlb	0	; () banked
 21575  0115F2  6F66               	movwf	??_Create_Maze& (0+255),b
 21576  0115F4  0E02               	movlw	high _maze
 21577  0115F6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21578  0115F8  5160               	movf	?___wmul& (0+255),w,b
 21579  0115FA  2766               	addwf	??_Create_Maze& (0+255),f,b
 21580  0115FC  5161               	movf	(?___wmul+1)& (0+255),w,b
 21581  0115FE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21582  011600  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21583  011604  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21584  011608  0E00               	movlw	0
 21585  01160A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21586  01160C  0E0A               	movlw	10
 21587  01160E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21588  011610  ECE4  F0C5         	call	___wmul	;wreg free
 21589  011614  0100               	movlb	0	; () banked
 21590  011616  5160               	movf	?___wmul& (0+255),w,b
 21591  011618  2766               	addwf	??_Create_Maze& (0+255),f,b
 21592  01161A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21593  01161C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21594  01161E  0E05               	movlw	5
 21595  011620  2566               	addwf	??_Create_Maze& (0+255),w,b
 21596  011622  6ED9               	movwf	fsr2l,c
 21597  011624  0E00               	movlw	0
 21598  011626  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21599  011628  6EDA               	movwf	fsr2h,c
 21600  01162A  0E00               	movlw	0
 21601  01162C  6EDF               	movwf	indf2,c
 21602                           
 21603                           ; BSR set to: 0
 21604                           ;dans.c: 119: maze[x][y].walls[2] = 0;
 21605  01162E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21606  011632  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21607  011636  0E00               	movlw	0
 21608  011638  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21609  01163A  0E32               	movlw	50
 21610  01163C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21611  01163E  ECE4  F0C5         	call	___wmul	;wreg free
 21612  011642  0E00               	movlw	low _maze
 21613  011644  0100               	movlb	0	; () banked
 21614  011646  6F66               	movwf	??_Create_Maze& (0+255),b
 21615  011648  0E02               	movlw	high _maze
 21616  01164A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21617  01164C  5160               	movf	?___wmul& (0+255),w,b
 21618  01164E  2766               	addwf	??_Create_Maze& (0+255),f,b
 21619  011650  5161               	movf	(?___wmul+1)& (0+255),w,b
 21620  011652  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21621  011654  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21622  011658  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21623  01165C  0E00               	movlw	0
 21624  01165E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21625  011660  0E0A               	movlw	10
 21626  011662  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21627  011664  ECE4  F0C5         	call	___wmul	;wreg free
 21628  011668  0100               	movlb	0	; () banked
 21629  01166A  5160               	movf	?___wmul& (0+255),w,b
 21630  01166C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21631  01166E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21632  011670  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21633  011672  0E06               	movlw	6
 21634  011674  2566               	addwf	??_Create_Maze& (0+255),w,b
 21635  011676  6ED9               	movwf	fsr2l,c
 21636  011678  0E00               	movlw	0
 21637  01167A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21638  01167C  6EDA               	movwf	fsr2h,c
 21639  01167E  0E00               	movlw	0
 21640  011680  6EDF               	movwf	indf2,c
 21641                           
 21642                           ; BSR set to: 0
 21643                           ;dans.c: 120: maze[x][y].walls[3] = 0;
 21644  011682  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21645  011686  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21646  01168A  0E00               	movlw	0
 21647  01168C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21648  01168E  0E32               	movlw	50
 21649  011690  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21650  011692  ECE4  F0C5         	call	___wmul	;wreg free
 21651  011696  0E00               	movlw	low _maze
 21652  011698  0100               	movlb	0	; () banked
 21653  01169A  6F66               	movwf	??_Create_Maze& (0+255),b
 21654  01169C  0E02               	movlw	high _maze
 21655  01169E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21656  0116A0  5160               	movf	?___wmul& (0+255),w,b
 21657  0116A2  2766               	addwf	??_Create_Maze& (0+255),f,b
 21658  0116A4  5161               	movf	(?___wmul+1)& (0+255),w,b
 21659  0116A6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21660  0116A8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21661  0116AC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21662  0116B0  0E00               	movlw	0
 21663  0116B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21664  0116B4  0E0A               	movlw	10
 21665  0116B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21666  0116B8  ECE4  F0C5         	call	___wmul	;wreg free
 21667  0116BC  0100               	movlb	0	; () banked
 21668  0116BE  5160               	movf	?___wmul& (0+255),w,b
 21669  0116C0  2766               	addwf	??_Create_Maze& (0+255),f,b
 21670  0116C2  5161               	movf	(?___wmul+1)& (0+255),w,b
 21671  0116C4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21672  0116C6  0E07               	movlw	7
 21673  0116C8  2566               	addwf	??_Create_Maze& (0+255),w,b
 21674  0116CA  6ED9               	movwf	fsr2l,c
 21675  0116CC  0E00               	movlw	0
 21676  0116CE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21677  0116D0  6EDA               	movwf	fsr2h,c
 21678  0116D2  0E00               	movlw	0
 21679  0116D4  6EDF               	movwf	indf2,c
 21680                           
 21681                           ; BSR set to: 0
 21682                           ;dans.c: 121: maze[x][y].Options = 4;
 21683  0116D6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21684  0116DA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21685  0116DE  0E00               	movlw	0
 21686  0116E0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21687  0116E2  0E32               	movlw	50
 21688  0116E4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21689  0116E6  ECE4  F0C5         	call	___wmul	;wreg free
 21690  0116EA  0E00               	movlw	low _maze
 21691  0116EC  0100               	movlb	0	; () banked
 21692  0116EE  6F66               	movwf	??_Create_Maze& (0+255),b
 21693  0116F0  0E02               	movlw	high _maze
 21694  0116F2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21695  0116F4  5160               	movf	?___wmul& (0+255),w,b
 21696  0116F6  2766               	addwf	??_Create_Maze& (0+255),f,b
 21697  0116F8  5161               	movf	(?___wmul+1)& (0+255),w,b
 21698  0116FA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21699  0116FC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21700  011700  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21701  011704  0E00               	movlw	0
 21702  011706  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21703  011708  0E0A               	movlw	10
 21704  01170A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21705  01170C  ECE4  F0C5         	call	___wmul	;wreg free
 21706  011710  0100               	movlb	0	; () banked
 21707  011712  5160               	movf	?___wmul& (0+255),w,b
 21708  011714  2766               	addwf	??_Create_Maze& (0+255),f,b
 21709  011716  5161               	movf	(?___wmul+1)& (0+255),w,b
 21710  011718  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21711  01171A  0E08               	movlw	8
 21712  01171C  2566               	addwf	??_Create_Maze& (0+255),w,b
 21713  01171E  6ED9               	movwf	fsr2l,c
 21714  011720  0E00               	movlw	0
 21715  011722  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21716  011724  6EDA               	movwf	fsr2h,c
 21717  011726  0E04               	movlw	4
 21718  011728  6EDE               	movwf	postinc2,c
 21719  01172A  0E00               	movlw	0
 21720  01172C  6EDD               	movwf	postdec2,c
 21721                           
 21722                           ; BSR set to: 0
 21723                           ;dans.c: 123: ++y;
 21724  01172E  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 21725  011730  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 21726                           
 21727                           ; BSR set to: 0
 21728                           ;dans.c: 124: maze[x][y].walls[0] = 1;
 21729  011732  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21730  011736  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21731  01173A  0E00               	movlw	0
 21732  01173C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21733  01173E  0E32               	movlw	50
 21734  011740  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21735  011742  ECE4  F0C5         	call	___wmul	;wreg free
 21736  011746  0E00               	movlw	low _maze
 21737  011748  0100               	movlb	0	; () banked
 21738  01174A  6F66               	movwf	??_Create_Maze& (0+255),b
 21739  01174C  0E02               	movlw	high _maze
 21740  01174E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21741  011750  5160               	movf	?___wmul& (0+255),w,b
 21742  011752  2766               	addwf	??_Create_Maze& (0+255),f,b
 21743  011754  5161               	movf	(?___wmul+1)& (0+255),w,b
 21744  011756  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21745  011758  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21746  01175C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21747  011760  0E00               	movlw	0
 21748  011762  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21749  011764  0E0A               	movlw	10
 21750  011766  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21751  011768  ECE4  F0C5         	call	___wmul	;wreg free
 21752  01176C  0100               	movlb	0	; () banked
 21753  01176E  5160               	movf	?___wmul& (0+255),w,b
 21754  011770  2766               	addwf	??_Create_Maze& (0+255),f,b
 21755  011772  5161               	movf	(?___wmul+1)& (0+255),w,b
 21756  011774  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21757  011776  0E04               	movlw	4
 21758  011778  2566               	addwf	??_Create_Maze& (0+255),w,b
 21759  01177A  6ED9               	movwf	fsr2l,c
 21760  01177C  0E00               	movlw	0
 21761  01177E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21762  011780  6EDA               	movwf	fsr2h,c
 21763  011782  0E01               	movlw	1
 21764  011784  6EDF               	movwf	indf2,c
 21765                           
 21766                           ; BSR set to: 0
 21767                           ;dans.c: 125: maze[x][y].walls[1] = 0;
 21768  011786  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21769  01178A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21770  01178E  0E00               	movlw	0
 21771  011790  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21772  011792  0E32               	movlw	50
 21773  011794  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21774  011796  ECE4  F0C5         	call	___wmul	;wreg free
 21775  01179A  0E00               	movlw	low _maze
 21776  01179C  0100               	movlb	0	; () banked
 21777  01179E  6F66               	movwf	??_Create_Maze& (0+255),b
 21778  0117A0  0E02               	movlw	high _maze
 21779  0117A2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21780  0117A4  5160               	movf	?___wmul& (0+255),w,b
 21781  0117A6  2766               	addwf	??_Create_Maze& (0+255),f,b
 21782  0117A8  5161               	movf	(?___wmul+1)& (0+255),w,b
 21783  0117AA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21784  0117AC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21785  0117B0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21786  0117B4  0E00               	movlw	0
 21787  0117B6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21788  0117B8  0E0A               	movlw	10
 21789  0117BA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21790  0117BC  ECE4  F0C5         	call	___wmul	;wreg free
 21791  0117C0  0100               	movlb	0	; () banked
 21792  0117C2  5160               	movf	?___wmul& (0+255),w,b
 21793  0117C4  2766               	addwf	??_Create_Maze& (0+255),f,b
 21794  0117C6  5161               	movf	(?___wmul+1)& (0+255),w,b
 21795  0117C8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21796  0117CA  0E05               	movlw	5
 21797  0117CC  2566               	addwf	??_Create_Maze& (0+255),w,b
 21798  0117CE  6ED9               	movwf	fsr2l,c
 21799  0117D0  0E00               	movlw	0
 21800  0117D2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21801  0117D4  6EDA               	movwf	fsr2h,c
 21802  0117D6  0E00               	movlw	0
 21803  0117D8  6EDF               	movwf	indf2,c
 21804                           
 21805                           ; BSR set to: 0
 21806                           ;dans.c: 126: maze[x][y].walls[2] = 1;
 21807  0117DA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21808  0117DE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21809  0117E2  0E00               	movlw	0
 21810  0117E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21811  0117E6  0E32               	movlw	50
 21812  0117E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21813  0117EA  ECE4  F0C5         	call	___wmul	;wreg free
 21814  0117EE  0E00               	movlw	low _maze
 21815  0117F0  0100               	movlb	0	; () banked
 21816  0117F2  6F66               	movwf	??_Create_Maze& (0+255),b
 21817  0117F4  0E02               	movlw	high _maze
 21818  0117F6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21819  0117F8  5160               	movf	?___wmul& (0+255),w,b
 21820  0117FA  2766               	addwf	??_Create_Maze& (0+255),f,b
 21821  0117FC  5161               	movf	(?___wmul+1)& (0+255),w,b
 21822  0117FE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21823  011800  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21824  011804  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21825  011808  0E00               	movlw	0
 21826  01180A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21827  01180C  0E0A               	movlw	10
 21828  01180E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21829  011810  ECE4  F0C5         	call	___wmul	;wreg free
 21830  011814  0100               	movlb	0	; () banked
 21831  011816  5160               	movf	?___wmul& (0+255),w,b
 21832  011818  2766               	addwf	??_Create_Maze& (0+255),f,b
 21833  01181A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21834  01181C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21835  01181E  0E06               	movlw	6
 21836  011820  2566               	addwf	??_Create_Maze& (0+255),w,b
 21837  011822  6ED9               	movwf	fsr2l,c
 21838  011824  0E00               	movlw	0
 21839  011826  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21840  011828  6EDA               	movwf	fsr2h,c
 21841  01182A  0E01               	movlw	1
 21842  01182C  6EDF               	movwf	indf2,c
 21843                           
 21844                           ; BSR set to: 0
 21845                           ;dans.c: 127: maze[x][y].walls[3] = 0;
 21846  01182E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21847  011832  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21848  011836  0E00               	movlw	0
 21849  011838  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21850  01183A  0E32               	movlw	50
 21851  01183C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21852  01183E  ECE4  F0C5         	call	___wmul	;wreg free
 21853  011842  0E00               	movlw	low _maze
 21854  011844  0100               	movlb	0	; () banked
 21855  011846  6F66               	movwf	??_Create_Maze& (0+255),b
 21856  011848  0E02               	movlw	high _maze
 21857  01184A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21858  01184C  5160               	movf	?___wmul& (0+255),w,b
 21859  01184E  2766               	addwf	??_Create_Maze& (0+255),f,b
 21860  011850  5161               	movf	(?___wmul+1)& (0+255),w,b
 21861  011852  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21862  011854  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21863  011858  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21864  01185C  0E00               	movlw	0
 21865  01185E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21866  011860  0E0A               	movlw	10
 21867  011862  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21868  011864  ECE4  F0C5         	call	___wmul	;wreg free
 21869  011868  0100               	movlb	0	; () banked
 21870  01186A  5160               	movf	?___wmul& (0+255),w,b
 21871  01186C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21872  01186E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21873  011870  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21874  011872  0E07               	movlw	7
 21875  011874  2566               	addwf	??_Create_Maze& (0+255),w,b
 21876  011876  6ED9               	movwf	fsr2l,c
 21877  011878  0E00               	movlw	0
 21878  01187A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21879  01187C  6EDA               	movwf	fsr2h,c
 21880  01187E  0E00               	movlw	0
 21881  011880  6EDF               	movwf	indf2,c
 21882                           
 21883                           ; BSR set to: 0
 21884                           ;dans.c: 128: maze[x][y].Options = 2;
 21885  011882  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21886  011886  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21887  01188A  0E00               	movlw	0
 21888  01188C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21889  01188E  0E32               	movlw	50
 21890  011890  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21891  011892  ECE4  F0C5         	call	___wmul	;wreg free
 21892  011896  0E00               	movlw	low _maze
 21893  011898  0100               	movlb	0	; () banked
 21894  01189A  6F66               	movwf	??_Create_Maze& (0+255),b
 21895  01189C  0E02               	movlw	high _maze
 21896  01189E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21897  0118A0  5160               	movf	?___wmul& (0+255),w,b
 21898  0118A2  2766               	addwf	??_Create_Maze& (0+255),f,b
 21899  0118A4  5161               	movf	(?___wmul+1)& (0+255),w,b
 21900  0118A6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21901  0118A8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21902  0118AC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21903  0118B0  0E00               	movlw	0
 21904  0118B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21905  0118B4  0E0A               	movlw	10
 21906  0118B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21907  0118B8  ECE4  F0C5         	call	___wmul	;wreg free
 21908  0118BC  0100               	movlb	0	; () banked
 21909  0118BE  5160               	movf	?___wmul& (0+255),w,b
 21910  0118C0  2766               	addwf	??_Create_Maze& (0+255),f,b
 21911  0118C2  5161               	movf	(?___wmul+1)& (0+255),w,b
 21912  0118C4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21913  0118C6  0E08               	movlw	8
 21914  0118C8  2566               	addwf	??_Create_Maze& (0+255),w,b
 21915  0118CA  6ED9               	movwf	fsr2l,c
 21916  0118CC  0E00               	movlw	0
 21917  0118CE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21918  0118D0  6EDA               	movwf	fsr2h,c
 21919  0118D2  0E02               	movlw	2
 21920  0118D4  6EDE               	movwf	postinc2,c
 21921  0118D6  0E00               	movlw	0
 21922  0118D8  6EDD               	movwf	postdec2,c
 21923                           
 21924                           ; BSR set to: 0
 21925                           ;dans.c: 130: ++y;
 21926  0118DA  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 21927  0118DC  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 21928                           
 21929                           ; BSR set to: 0
 21930                           ;dans.c: 131: maze[x][y].walls[0] = 1;
 21931  0118DE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21932  0118E2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21933  0118E6  0E00               	movlw	0
 21934  0118E8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21935  0118EA  0E32               	movlw	50
 21936  0118EC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21937  0118EE  ECE4  F0C5         	call	___wmul	;wreg free
 21938  0118F2  0E00               	movlw	low _maze
 21939  0118F4  0100               	movlb	0	; () banked
 21940  0118F6  6F66               	movwf	??_Create_Maze& (0+255),b
 21941  0118F8  0E02               	movlw	high _maze
 21942  0118FA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21943  0118FC  5160               	movf	?___wmul& (0+255),w,b
 21944  0118FE  2766               	addwf	??_Create_Maze& (0+255),f,b
 21945  011900  5161               	movf	(?___wmul+1)& (0+255),w,b
 21946  011902  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21947  011904  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21948  011908  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21949  01190C  0E00               	movlw	0
 21950  01190E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21951  011910  0E0A               	movlw	10
 21952  011912  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21953  011914  ECE4  F0C5         	call	___wmul	;wreg free
 21954  011918  0100               	movlb	0	; () banked
 21955  01191A  5160               	movf	?___wmul& (0+255),w,b
 21956  01191C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21957  01191E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21958  011920  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21959  011922  0E04               	movlw	4
 21960  011924  2566               	addwf	??_Create_Maze& (0+255),w,b
 21961  011926  6ED9               	movwf	fsr2l,c
 21962  011928  0E00               	movlw	0
 21963  01192A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21964  01192C  6EDA               	movwf	fsr2h,c
 21965  01192E  0E01               	movlw	1
 21966  011930  6EDF               	movwf	indf2,c
 21967                           
 21968                           ; BSR set to: 0
 21969                           ;dans.c: 132: maze[x][y].walls[1] = 1;
 21970  011932  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21971  011936  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21972  01193A  0E00               	movlw	0
 21973  01193C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21974  01193E  0E32               	movlw	50
 21975  011940  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21976  011942  ECE4  F0C5         	call	___wmul	;wreg free
 21977  011946  0E00               	movlw	low _maze
 21978  011948  0100               	movlb	0	; () banked
 21979  01194A  6F66               	movwf	??_Create_Maze& (0+255),b
 21980  01194C  0E02               	movlw	high _maze
 21981  01194E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21982  011950  5160               	movf	?___wmul& (0+255),w,b
 21983  011952  2766               	addwf	??_Create_Maze& (0+255),f,b
 21984  011954  5161               	movf	(?___wmul+1)& (0+255),w,b
 21985  011956  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21986  011958  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21987  01195C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21988  011960  0E00               	movlw	0
 21989  011962  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21990  011964  0E0A               	movlw	10
 21991  011966  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21992  011968  ECE4  F0C5         	call	___wmul	;wreg free
 21993  01196C  0100               	movlb	0	; () banked
 21994  01196E  5160               	movf	?___wmul& (0+255),w,b
 21995  011970  2766               	addwf	??_Create_Maze& (0+255),f,b
 21996  011972  5161               	movf	(?___wmul+1)& (0+255),w,b
 21997  011974  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21998  011976  0E05               	movlw	5
 21999  011978  2566               	addwf	??_Create_Maze& (0+255),w,b
 22000  01197A  6ED9               	movwf	fsr2l,c
 22001  01197C  0E00               	movlw	0
 22002  01197E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22003  011980  6EDA               	movwf	fsr2h,c
 22004  011982  0E01               	movlw	1
 22005  011984  6EDF               	movwf	indf2,c
 22006                           
 22007                           ; BSR set to: 0
 22008                           ;dans.c: 133: maze[x][y].walls[2] = 0;
 22009  011986  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22010  01198A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22011  01198E  0E00               	movlw	0
 22012  011990  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22013  011992  0E32               	movlw	50
 22014  011994  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22015  011996  ECE4  F0C5         	call	___wmul	;wreg free
 22016  01199A  0E00               	movlw	low _maze
 22017  01199C  0100               	movlb	0	; () banked
 22018  01199E  6F66               	movwf	??_Create_Maze& (0+255),b
 22019  0119A0  0E02               	movlw	high _maze
 22020  0119A2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22021  0119A4  5160               	movf	?___wmul& (0+255),w,b
 22022  0119A6  2766               	addwf	??_Create_Maze& (0+255),f,b
 22023  0119A8  5161               	movf	(?___wmul+1)& (0+255),w,b
 22024  0119AA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22025  0119AC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22026  0119B0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22027  0119B4  0E00               	movlw	0
 22028  0119B6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22029  0119B8  0E0A               	movlw	10
 22030  0119BA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22031  0119BC  ECE4  F0C5         	call	___wmul	;wreg free
 22032  0119C0  0100               	movlb	0	; () banked
 22033  0119C2  5160               	movf	?___wmul& (0+255),w,b
 22034  0119C4  2766               	addwf	??_Create_Maze& (0+255),f,b
 22035  0119C6  5161               	movf	(?___wmul+1)& (0+255),w,b
 22036  0119C8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22037  0119CA  0E06               	movlw	6
 22038  0119CC  2566               	addwf	??_Create_Maze& (0+255),w,b
 22039  0119CE  6ED9               	movwf	fsr2l,c
 22040  0119D0  0E00               	movlw	0
 22041  0119D2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22042  0119D4  6EDA               	movwf	fsr2h,c
 22043  0119D6  0E00               	movlw	0
 22044  0119D8  6EDF               	movwf	indf2,c
 22045                           
 22046                           ; BSR set to: 0
 22047                           ;dans.c: 134: maze[x][y].walls[3] = 0;
 22048  0119DA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22049  0119DE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22050  0119E2  0E00               	movlw	0
 22051  0119E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22052  0119E6  0E32               	movlw	50
 22053  0119E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22054  0119EA  ECE4  F0C5         	call	___wmul	;wreg free
 22055  0119EE  0E00               	movlw	low _maze
 22056  0119F0  0100               	movlb	0	; () banked
 22057  0119F2  6F66               	movwf	??_Create_Maze& (0+255),b
 22058  0119F4  0E02               	movlw	high _maze
 22059  0119F6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22060  0119F8  5160               	movf	?___wmul& (0+255),w,b
 22061  0119FA  2766               	addwf	??_Create_Maze& (0+255),f,b
 22062  0119FC  5161               	movf	(?___wmul+1)& (0+255),w,b
 22063  0119FE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22064  011A00  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22065  011A04  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22066  011A08  0E00               	movlw	0
 22067  011A0A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22068  011A0C  0E0A               	movlw	10
 22069  011A0E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22070  011A10  ECE4  F0C5         	call	___wmul	;wreg free
 22071  011A14  0100               	movlb	0	; () banked
 22072  011A16  5160               	movf	?___wmul& (0+255),w,b
 22073  011A18  2766               	addwf	??_Create_Maze& (0+255),f,b
 22074  011A1A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22075  011A1C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22076  011A1E  0E07               	movlw	7
 22077  011A20  2566               	addwf	??_Create_Maze& (0+255),w,b
 22078  011A22  6ED9               	movwf	fsr2l,c
 22079  011A24  0E00               	movlw	0
 22080  011A26  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22081  011A28  6EDA               	movwf	fsr2h,c
 22082  011A2A  0E00               	movlw	0
 22083  011A2C  6EDF               	movwf	indf2,c
 22084                           
 22085                           ; BSR set to: 0
 22086                           ;dans.c: 135: maze[x][y].Options = 2;
 22087  011A2E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22088  011A32  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22089  011A36  0E00               	movlw	0
 22090  011A38  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22091  011A3A  0E32               	movlw	50
 22092  011A3C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22093  011A3E  ECE4  F0C5         	call	___wmul	;wreg free
 22094  011A42  0E00               	movlw	low _maze
 22095  011A44  0100               	movlb	0	; () banked
 22096  011A46  6F66               	movwf	??_Create_Maze& (0+255),b
 22097  011A48  0E02               	movlw	high _maze
 22098  011A4A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22099  011A4C  5160               	movf	?___wmul& (0+255),w,b
 22100  011A4E  2766               	addwf	??_Create_Maze& (0+255),f,b
 22101  011A50  5161               	movf	(?___wmul+1)& (0+255),w,b
 22102  011A52  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22103  011A54  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22104  011A58  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22105  011A5C  0E00               	movlw	0
 22106  011A5E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22107  011A60  0E0A               	movlw	10
 22108  011A62  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22109  011A64  ECE4  F0C5         	call	___wmul	;wreg free
 22110  011A68  0100               	movlb	0	; () banked
 22111  011A6A  5160               	movf	?___wmul& (0+255),w,b
 22112  011A6C  2766               	addwf	??_Create_Maze& (0+255),f,b
 22113  011A6E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22114  011A70  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22115  011A72  0E08               	movlw	8
 22116  011A74  2566               	addwf	??_Create_Maze& (0+255),w,b
 22117  011A76  6ED9               	movwf	fsr2l,c
 22118  011A78  0E00               	movlw	0
 22119  011A7A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22120  011A7C  6EDA               	movwf	fsr2h,c
 22121  011A7E  0E02               	movlw	2
 22122  011A80  6EDE               	movwf	postinc2,c
 22123  011A82  0E00               	movlw	0
 22124  011A84  6EDD               	movwf	postdec2,c
 22125                           
 22126                           ; BSR set to: 0
 22127                           ;dans.c: 137: ++x;
 22128  011A86  4B6C               	infsnz	Create_Maze@x& (0+255),f,b
 22129  011A88  2B6D               	incf	(Create_Maze@x+1)& (0+255),f,b
 22130                           
 22131                           ; BSR set to: 0
 22132                           ;dans.c: 138: y = 0;
 22133  011A8A  0E00               	movlw	0
 22134  011A8C  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 22135  011A8E  0E00               	movlw	0
 22136  011A90  6F6E               	movwf	Create_Maze@y& (0+255),b
 22137                           
 22138                           ; BSR set to: 0
 22139                           ;dans.c: 139: maze[x][y].walls[0] = 0;
 22140  011A92  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22141  011A96  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22142  011A9A  0E00               	movlw	0
 22143  011A9C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22144  011A9E  0E32               	movlw	50
 22145  011AA0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22146  011AA2  ECE4  F0C5         	call	___wmul	;wreg free
 22147  011AA6  0E00               	movlw	low _maze
 22148  011AA8  0100               	movlb	0	; () banked
 22149  011AAA  6F66               	movwf	??_Create_Maze& (0+255),b
 22150  011AAC  0E02               	movlw	high _maze
 22151  011AAE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22152  011AB0  5160               	movf	?___wmul& (0+255),w,b
 22153  011AB2  2766               	addwf	??_Create_Maze& (0+255),f,b
 22154  011AB4  5161               	movf	(?___wmul+1)& (0+255),w,b
 22155  011AB6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22156  011AB8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22157  011ABC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22158  011AC0  0E00               	movlw	0
 22159  011AC2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22160  011AC4  0E0A               	movlw	10
 22161  011AC6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22162  011AC8  ECE4  F0C5         	call	___wmul	;wreg free
 22163  011ACC  0100               	movlb	0	; () banked
 22164  011ACE  5160               	movf	?___wmul& (0+255),w,b
 22165  011AD0  2766               	addwf	??_Create_Maze& (0+255),f,b
 22166  011AD2  5161               	movf	(?___wmul+1)& (0+255),w,b
 22167  011AD4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22168  011AD6  0E04               	movlw	4
 22169  011AD8  2566               	addwf	??_Create_Maze& (0+255),w,b
 22170  011ADA  6ED9               	movwf	fsr2l,c
 22171  011ADC  0E00               	movlw	0
 22172  011ADE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22173  011AE0  6EDA               	movwf	fsr2h,c
 22174  011AE2  0E00               	movlw	0
 22175  011AE4  6EDF               	movwf	indf2,c
 22176                           
 22177                           ; BSR set to: 0
 22178                           ;dans.c: 140: maze[x][y].walls[1] = 0;
 22179  011AE6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22180  011AEA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22181  011AEE  0E00               	movlw	0
 22182  011AF0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22183  011AF2  0E32               	movlw	50
 22184  011AF4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22185  011AF6  ECE4  F0C5         	call	___wmul	;wreg free
 22186  011AFA  0E00               	movlw	low _maze
 22187  011AFC  0100               	movlb	0	; () banked
 22188  011AFE  6F66               	movwf	??_Create_Maze& (0+255),b
 22189  011B00  0E02               	movlw	high _maze
 22190  011B02  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22191  011B04  5160               	movf	?___wmul& (0+255),w,b
 22192  011B06  2766               	addwf	??_Create_Maze& (0+255),f,b
 22193  011B08  5161               	movf	(?___wmul+1)& (0+255),w,b
 22194  011B0A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22195  011B0C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22196  011B10  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22197  011B14  0E00               	movlw	0
 22198  011B16  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22199  011B18  0E0A               	movlw	10
 22200  011B1A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22201  011B1C  ECE4  F0C5         	call	___wmul	;wreg free
 22202  011B20  0100               	movlb	0	; () banked
 22203  011B22  5160               	movf	?___wmul& (0+255),w,b
 22204  011B24  2766               	addwf	??_Create_Maze& (0+255),f,b
 22205  011B26  5161               	movf	(?___wmul+1)& (0+255),w,b
 22206  011B28  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22207  011B2A  0E05               	movlw	5
 22208  011B2C  2566               	addwf	??_Create_Maze& (0+255),w,b
 22209  011B2E  6ED9               	movwf	fsr2l,c
 22210  011B30  0E00               	movlw	0
 22211  011B32  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22212  011B34  6EDA               	movwf	fsr2h,c
 22213  011B36  0E00               	movlw	0
 22214  011B38  6EDF               	movwf	indf2,c
 22215                           
 22216                           ; BSR set to: 0
 22217                           ;dans.c: 141: maze[x][y].walls[2] = 1;
 22218  011B3A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22219  011B3E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22220  011B42  0E00               	movlw	0
 22221  011B44  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22222  011B46  0E32               	movlw	50
 22223  011B48  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22224  011B4A  ECE4  F0C5         	call	___wmul	;wreg free
 22225  011B4E  0E00               	movlw	low _maze
 22226  011B50  0100               	movlb	0	; () banked
 22227  011B52  6F66               	movwf	??_Create_Maze& (0+255),b
 22228  011B54  0E02               	movlw	high _maze
 22229  011B56  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22230  011B58  5160               	movf	?___wmul& (0+255),w,b
 22231  011B5A  2766               	addwf	??_Create_Maze& (0+255),f,b
 22232  011B5C  5161               	movf	(?___wmul+1)& (0+255),w,b
 22233  011B5E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22234  011B60  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22235  011B64  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22236  011B68  0E00               	movlw	0
 22237  011B6A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22238  011B6C  0E0A               	movlw	10
 22239  011B6E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22240  011B70  ECE4  F0C5         	call	___wmul	;wreg free
 22241  011B74  0100               	movlb	0	; () banked
 22242  011B76  5160               	movf	?___wmul& (0+255),w,b
 22243  011B78  2766               	addwf	??_Create_Maze& (0+255),f,b
 22244  011B7A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22245  011B7C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22246  011B7E  0E06               	movlw	6
 22247  011B80  2566               	addwf	??_Create_Maze& (0+255),w,b
 22248  011B82  6ED9               	movwf	fsr2l,c
 22249  011B84  0E00               	movlw	0
 22250  011B86  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22251  011B88  6EDA               	movwf	fsr2h,c
 22252  011B8A  0E01               	movlw	1
 22253  011B8C  6EDF               	movwf	indf2,c
 22254                           
 22255                           ; BSR set to: 0
 22256                           ;dans.c: 142: maze[x][y].walls[3] = 1;
 22257  011B8E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22258  011B92  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22259  011B96  0E00               	movlw	0
 22260  011B98  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22261  011B9A  0E32               	movlw	50
 22262  011B9C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22263  011B9E  ECE4  F0C5         	call	___wmul	;wreg free
 22264  011BA2  0E00               	movlw	low _maze
 22265  011BA4  0100               	movlb	0	; () banked
 22266  011BA6  6F66               	movwf	??_Create_Maze& (0+255),b
 22267  011BA8  0E02               	movlw	high _maze
 22268  011BAA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22269  011BAC  5160               	movf	?___wmul& (0+255),w,b
 22270  011BAE  2766               	addwf	??_Create_Maze& (0+255),f,b
 22271  011BB0  5161               	movf	(?___wmul+1)& (0+255),w,b
 22272  011BB2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22273  011BB4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22274  011BB8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22275  011BBC  0E00               	movlw	0
 22276  011BBE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22277  011BC0  0E0A               	movlw	10
 22278  011BC2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22279  011BC4  ECE4  F0C5         	call	___wmul	;wreg free
 22280  011BC8  0100               	movlb	0	; () banked
 22281  011BCA  5160               	movf	?___wmul& (0+255),w,b
 22282  011BCC  2766               	addwf	??_Create_Maze& (0+255),f,b
 22283  011BCE  5161               	movf	(?___wmul+1)& (0+255),w,b
 22284  011BD0  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22285  011BD2  0E07               	movlw	7
 22286  011BD4  2566               	addwf	??_Create_Maze& (0+255),w,b
 22287  011BD6  6ED9               	movwf	fsr2l,c
 22288  011BD8  0E00               	movlw	0
 22289  011BDA  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22290  011BDC  6EDA               	movwf	fsr2h,c
 22291  011BDE  0E01               	movlw	1
 22292  011BE0  6EDF               	movwf	indf2,c
 22293                           
 22294                           ; BSR set to: 0
 22295                           ;dans.c: 143: maze[x][y].Options = 2;
 22296  011BE2  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22297  011BE6  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22298  011BEA  0E00               	movlw	0
 22299  011BEC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22300  011BEE  0E32               	movlw	50
 22301  011BF0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22302  011BF2  ECE4  F0C5         	call	___wmul	;wreg free
 22303  011BF6  0E00               	movlw	low _maze
 22304  011BF8  0100               	movlb	0	; () banked
 22305  011BFA  6F66               	movwf	??_Create_Maze& (0+255),b
 22306  011BFC  0E02               	movlw	high _maze
 22307  011BFE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22308  011C00  5160               	movf	?___wmul& (0+255),w,b
 22309  011C02  2766               	addwf	??_Create_Maze& (0+255),f,b
 22310  011C04  5161               	movf	(?___wmul+1)& (0+255),w,b
 22311  011C06  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22312  011C08  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22313  011C0C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22314  011C10  0E00               	movlw	0
 22315  011C12  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22316  011C14  0E0A               	movlw	10
 22317  011C16  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22318  011C18  ECE4  F0C5         	call	___wmul	;wreg free
 22319  011C1C  0100               	movlb	0	; () banked
 22320  011C1E  5160               	movf	?___wmul& (0+255),w,b
 22321  011C20  2766               	addwf	??_Create_Maze& (0+255),f,b
 22322  011C22  5161               	movf	(?___wmul+1)& (0+255),w,b
 22323  011C24  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22324  011C26  0E08               	movlw	8
 22325  011C28  2566               	addwf	??_Create_Maze& (0+255),w,b
 22326  011C2A  6ED9               	movwf	fsr2l,c
 22327  011C2C  0E00               	movlw	0
 22328  011C2E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22329  011C30  6EDA               	movwf	fsr2h,c
 22330  011C32  0E02               	movlw	2
 22331  011C34  6EDE               	movwf	postinc2,c
 22332  011C36  0E00               	movlw	0
 22333  011C38  6EDD               	movwf	postdec2,c
 22334                           
 22335                           ; BSR set to: 0
 22336                           ;dans.c: 145: ++y;
 22337  011C3A  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 22338  011C3C  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 22339                           
 22340                           ;dans.c: 146: maze[x][y].walls[0] = 1;
 22341  011C3E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22342  011C42  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22343  011C46  0E00               	movlw	0
 22344  011C48  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22345  011C4A  0E32               	movlw	50
 22346  011C4C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22347  011C4E  ECE4  F0C5         	call	___wmul	;wreg free
 22348  011C52  0E00               	movlw	low _maze
 22349  011C54  0100               	movlb	0	; () banked
 22350  011C56  6F66               	movwf	??_Create_Maze& (0+255),b
 22351  011C58  0E02               	movlw	high _maze
 22352  011C5A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22353  011C5C  5160               	movf	?___wmul& (0+255),w,b
 22354  011C5E  2766               	addwf	??_Create_Maze& (0+255),f,b
 22355  011C60  5161               	movf	(?___wmul+1)& (0+255),w,b
 22356  011C62  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22357  011C64  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22358  011C68  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22359  011C6C  0E00               	movlw	0
 22360  011C6E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22361  011C70  0E0A               	movlw	10
 22362  011C72  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22363  011C74  ECE4  F0C5         	call	___wmul	;wreg free
 22364  011C78  0100               	movlb	0	; () banked
 22365  011C7A  5160               	movf	?___wmul& (0+255),w,b
 22366  011C7C  2766               	addwf	??_Create_Maze& (0+255),f,b
 22367  011C7E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22368  011C80  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22369  011C82  0E04               	movlw	4
 22370  011C84  2566               	addwf	??_Create_Maze& (0+255),w,b
 22371  011C86  6ED9               	movwf	fsr2l,c
 22372  011C88  0E00               	movlw	0
 22373  011C8A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22374  011C8C  6EDA               	movwf	fsr2h,c
 22375  011C8E  0E01               	movlw	1
 22376  011C90  6EDF               	movwf	indf2,c
 22377                           
 22378                           ;dans.c: 147: maze[x][y].walls[1] = 1;
 22379  011C92  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22380  011C96  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22381  011C9A  0E00               	movlw	0
 22382  011C9C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22383  011C9E  0E32               	movlw	50
 22384  011CA0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22385  011CA2  ECE4  F0C5         	call	___wmul	;wreg free
 22386  011CA6  0E00               	movlw	low _maze
 22387  011CA8  0100               	movlb	0	; () banked
 22388  011CAA  6F66               	movwf	??_Create_Maze& (0+255),b
 22389  011CAC  0E02               	movlw	high _maze
 22390  011CAE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22391  011CB0  5160               	movf	?___wmul& (0+255),w,b
 22392  011CB2  2766               	addwf	??_Create_Maze& (0+255),f,b
 22393  011CB4  5161               	movf	(?___wmul+1)& (0+255),w,b
 22394  011CB6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22395  011CB8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22396  011CBC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22397  011CC0  0E00               	movlw	0
 22398  011CC2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22399  011CC4  0E0A               	movlw	10
 22400  011CC6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22401  011CC8  ECE4  F0C5         	call	___wmul	;wreg free
 22402  011CCC  0100               	movlb	0	; () banked
 22403  011CCE  5160               	movf	?___wmul& (0+255),w,b
 22404  011CD0  2766               	addwf	??_Create_Maze& (0+255),f,b
 22405  011CD2  5161               	movf	(?___wmul+1)& (0+255),w,b
 22406  011CD4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22407  011CD6  0E05               	movlw	5
 22408  011CD8  2566               	addwf	??_Create_Maze& (0+255),w,b
 22409  011CDA  6ED9               	movwf	fsr2l,c
 22410  011CDC  0E00               	movlw	0
 22411  011CDE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22412  011CE0  6EDA               	movwf	fsr2h,c
 22413  011CE2  0E01               	movlw	1
 22414  011CE4  6EDF               	movwf	indf2,c
 22415                           
 22416                           ;dans.c: 148: maze[x][y].walls[2] = 1;
 22417  011CE6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22418  011CEA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22419  011CEE  0E00               	movlw	0
 22420  011CF0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22421  011CF2  0E32               	movlw	50
 22422  011CF4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22423  011CF6  ECE4  F0C5         	call	___wmul	;wreg free
 22424  011CFA  0E00               	movlw	low _maze
 22425  011CFC  0100               	movlb	0	; () banked
 22426  011CFE  6F66               	movwf	??_Create_Maze& (0+255),b
 22427  011D00  0E02               	movlw	high _maze
 22428  011D02  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22429  011D04  5160               	movf	?___wmul& (0+255),w,b
 22430  011D06  2766               	addwf	??_Create_Maze& (0+255),f,b
 22431  011D08  5161               	movf	(?___wmul+1)& (0+255),w,b
 22432  011D0A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22433  011D0C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22434  011D10  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22435  011D14  0E00               	movlw	0
 22436  011D16  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22437  011D18  0E0A               	movlw	10
 22438  011D1A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22439  011D1C  ECE4  F0C5         	call	___wmul	;wreg free
 22440  011D20  0100               	movlb	0	; () banked
 22441  011D22  5160               	movf	?___wmul& (0+255),w,b
 22442  011D24  2766               	addwf	??_Create_Maze& (0+255),f,b
 22443  011D26  5161               	movf	(?___wmul+1)& (0+255),w,b
 22444  011D28  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22445  011D2A  0E06               	movlw	6
 22446  011D2C  2566               	addwf	??_Create_Maze& (0+255),w,b
 22447  011D2E  6ED9               	movwf	fsr2l,c
 22448  011D30  0E00               	movlw	0
 22449  011D32  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22450  011D34  6EDA               	movwf	fsr2h,c
 22451  011D36  0E01               	movlw	1
 22452  011D38  6EDF               	movwf	indf2,c
 22453                           
 22454                           ;dans.c: 149: maze[x][y].walls[3] = 0;
 22455  011D3A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22456  011D3E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22457  011D42  0E00               	movlw	0
 22458  011D44  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22459  011D46  0E32               	movlw	50
 22460  011D48  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22461  011D4A  ECE4  F0C5         	call	___wmul	;wreg free
 22462  011D4E  0E00               	movlw	low _maze
 22463  011D50  0100               	movlb	0	; () banked
 22464  011D52  6F66               	movwf	??_Create_Maze& (0+255),b
 22465  011D54  0E02               	movlw	high _maze
 22466  011D56  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22467  011D58  5160               	movf	?___wmul& (0+255),w,b
 22468  011D5A  2766               	addwf	??_Create_Maze& (0+255),f,b
 22469  011D5C  5161               	movf	(?___wmul+1)& (0+255),w,b
 22470  011D5E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22471  011D60  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22472  011D64  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22473  011D68  0E00               	movlw	0
 22474  011D6A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22475  011D6C  0E0A               	movlw	10
 22476  011D6E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22477  011D70  ECE4  F0C5         	call	___wmul	;wreg free
 22478  011D74  0100               	movlb	0	; () banked
 22479  011D76  5160               	movf	?___wmul& (0+255),w,b
 22480  011D78  2766               	addwf	??_Create_Maze& (0+255),f,b
 22481  011D7A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22482  011D7C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22483  011D7E  0E07               	movlw	7
 22484  011D80  2566               	addwf	??_Create_Maze& (0+255),w,b
 22485  011D82  6ED9               	movwf	fsr2l,c
 22486  011D84  0E00               	movlw	0
 22487  011D86  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22488  011D88  6EDA               	movwf	fsr2h,c
 22489  011D8A  0E00               	movlw	0
 22490  011D8C  6EDF               	movwf	indf2,c
 22491                           
 22492                           ;dans.c: 150: maze[x][y].Options = 1;
 22493  011D8E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22494  011D92  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22495  011D96  0E00               	movlw	0
 22496  011D98  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22497  011D9A  0E32               	movlw	50
 22498  011D9C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22499  011D9E  ECE4  F0C5         	call	___wmul	;wreg free
 22500  011DA2  0E00               	movlw	low _maze
 22501  011DA4  0100               	movlb	0	; () banked
 22502  011DA6  6F66               	movwf	??_Create_Maze& (0+255),b
 22503  011DA8  0E02               	movlw	high _maze
 22504  011DAA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22505  011DAC  5160               	movf	?___wmul& (0+255),w,b
 22506  011DAE  2766               	addwf	??_Create_Maze& (0+255),f,b
 22507  011DB0  5161               	movf	(?___wmul+1)& (0+255),w,b
 22508  011DB2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22509  011DB4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22510  011DB8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22511  011DBC  0E00               	movlw	0
 22512  011DBE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22513  011DC0  0E0A               	movlw	10
 22514  011DC2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22515  011DC4  ECE4  F0C5         	call	___wmul	;wreg free
 22516  011DC8  0100               	movlb	0	; () banked
 22517  011DCA  5160               	movf	?___wmul& (0+255),w,b
 22518  011DCC  2766               	addwf	??_Create_Maze& (0+255),f,b
 22519  011DCE  5161               	movf	(?___wmul+1)& (0+255),w,b
 22520  011DD0  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22521  011DD2  0E08               	movlw	8
 22522  011DD4  2566               	addwf	??_Create_Maze& (0+255),w,b
 22523  011DD6  6ED9               	movwf	fsr2l,c
 22524  011DD8  0E00               	movlw	0
 22525  011DDA  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22526  011DDC  6EDA               	movwf	fsr2h,c
 22527  011DDE  0E01               	movlw	1
 22528  011DE0  6EDE               	movwf	postinc2,c
 22529  011DE2  0E00               	movlw	0
 22530  011DE4  6EDD               	movwf	postdec2,c
 22531                           
 22532                           ; BSR set to: 0
 22533                           ;dans.c: 152: ++y;
 22534  011DE6  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 22535  011DE8  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 22536                           
 22537                           ; BSR set to: 0
 22538                           ;dans.c: 153: maze[x][y].walls[0] = 0;
 22539  011DEA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22540  011DEE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22541  011DF2  0E00               	movlw	0
 22542  011DF4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22543  011DF6  0E32               	movlw	50
 22544  011DF8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22545  011DFA  ECE4  F0C5         	call	___wmul	;wreg free
 22546  011DFE  0E00               	movlw	low _maze
 22547  011E00  0100               	movlb	0	; () banked
 22548  011E02  6F66               	movwf	??_Create_Maze& (0+255),b
 22549  011E04  0E02               	movlw	high _maze
 22550  011E06  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22551  011E08  5160               	movf	?___wmul& (0+255),w,b
 22552  011E0A  2766               	addwf	??_Create_Maze& (0+255),f,b
 22553  011E0C  5161               	movf	(?___wmul+1)& (0+255),w,b
 22554  011E0E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22555  011E10  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22556  011E14  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22557  011E18  0E00               	movlw	0
 22558  011E1A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22559  011E1C  0E0A               	movlw	10
 22560  011E1E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22561  011E20  ECE4  F0C5         	call	___wmul	;wreg free
 22562  011E24  0100               	movlb	0	; () banked
 22563  011E26  5160               	movf	?___wmul& (0+255),w,b
 22564  011E28  2766               	addwf	??_Create_Maze& (0+255),f,b
 22565  011E2A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22566  011E2C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22567  011E2E  0E04               	movlw	4
 22568  011E30  2566               	addwf	??_Create_Maze& (0+255),w,b
 22569  011E32  6ED9               	movwf	fsr2l,c
 22570  011E34  0E00               	movlw	0
 22571  011E36  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22572  011E38  6EDA               	movwf	fsr2h,c
 22573  011E3A  0E00               	movlw	0
 22574  011E3C  6EDF               	movwf	indf2,c
 22575                           
 22576                           ; BSR set to: 0
 22577                           ;dans.c: 154: maze[x][y].walls[1] = 1;
 22578  011E3E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22579  011E42  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22580  011E46  0E00               	movlw	0
 22581  011E48  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22582  011E4A  0E32               	movlw	50
 22583  011E4C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22584  011E4E  ECE4  F0C5         	call	___wmul	;wreg free
 22585  011E52  0E00               	movlw	low _maze
 22586  011E54  0100               	movlb	0	; () banked
 22587  011E56  6F66               	movwf	??_Create_Maze& (0+255),b
 22588  011E58  0E02               	movlw	high _maze
 22589  011E5A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22590  011E5C  5160               	movf	?___wmul& (0+255),w,b
 22591  011E5E  2766               	addwf	??_Create_Maze& (0+255),f,b
 22592  011E60  5161               	movf	(?___wmul+1)& (0+255),w,b
 22593  011E62  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22594  011E64  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22595  011E68  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22596  011E6C  0E00               	movlw	0
 22597  011E6E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22598  011E70  0E0A               	movlw	10
 22599  011E72  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22600  011E74  ECE4  F0C5         	call	___wmul	;wreg free
 22601  011E78  0100               	movlb	0	; () banked
 22602  011E7A  5160               	movf	?___wmul& (0+255),w,b
 22603  011E7C  2766               	addwf	??_Create_Maze& (0+255),f,b
 22604  011E7E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22605  011E80  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22606  011E82  0E05               	movlw	5
 22607  011E84  2566               	addwf	??_Create_Maze& (0+255),w,b
 22608  011E86  6ED9               	movwf	fsr2l,c
 22609  011E88  0E00               	movlw	0
 22610  011E8A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22611  011E8C  6EDA               	movwf	fsr2h,c
 22612  011E8E  0E01               	movlw	1
 22613  011E90  6EDF               	movwf	indf2,c
 22614                           
 22615                           ; BSR set to: 0
 22616                           ;dans.c: 155: maze[x][y].walls[2] = 1;
 22617  011E92  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22618  011E96  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22619  011E9A  0E00               	movlw	0
 22620  011E9C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22621  011E9E  0E32               	movlw	50
 22622  011EA0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22623  011EA2  ECE4  F0C5         	call	___wmul	;wreg free
 22624  011EA6  0E00               	movlw	low _maze
 22625  011EA8  0100               	movlb	0	; () banked
 22626  011EAA  6F66               	movwf	??_Create_Maze& (0+255),b
 22627  011EAC  0E02               	movlw	high _maze
 22628  011EAE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22629  011EB0  5160               	movf	?___wmul& (0+255),w,b
 22630  011EB2  2766               	addwf	??_Create_Maze& (0+255),f,b
 22631  011EB4  5161               	movf	(?___wmul+1)& (0+255),w,b
 22632  011EB6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22633  011EB8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22634  011EBC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22635  011EC0  0E00               	movlw	0
 22636  011EC2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22637  011EC4  0E0A               	movlw	10
 22638  011EC6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22639  011EC8  ECE4  F0C5         	call	___wmul	;wreg free
 22640  011ECC  0100               	movlb	0	; () banked
 22641  011ECE  5160               	movf	?___wmul& (0+255),w,b
 22642  011ED0  2766               	addwf	??_Create_Maze& (0+255),f,b
 22643  011ED2  5161               	movf	(?___wmul+1)& (0+255),w,b
 22644  011ED4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22645  011ED6  0E06               	movlw	6
 22646  011ED8  2566               	addwf	??_Create_Maze& (0+255),w,b
 22647  011EDA  6ED9               	movwf	fsr2l,c
 22648  011EDC  0E00               	movlw	0
 22649  011EDE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22650  011EE0  6EDA               	movwf	fsr2h,c
 22651  011EE2  0E01               	movlw	1
 22652  011EE4  6EDF               	movwf	indf2,c
 22653                           
 22654                           ; BSR set to: 0
 22655                           ;dans.c: 156: maze[x][y].walls[3] = 1;
 22656  011EE6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22657  011EEA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22658  011EEE  0E00               	movlw	0
 22659  011EF0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22660  011EF2  0E32               	movlw	50
 22661  011EF4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22662  011EF6  ECE4  F0C5         	call	___wmul	;wreg free
 22663  011EFA  0E00               	movlw	low _maze
 22664  011EFC  0100               	movlb	0	; () banked
 22665  011EFE  6F66               	movwf	??_Create_Maze& (0+255),b
 22666  011F00  0E02               	movlw	high _maze
 22667  011F02  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22668  011F04  5160               	movf	?___wmul& (0+255),w,b
 22669  011F06  2766               	addwf	??_Create_Maze& (0+255),f,b
 22670  011F08  5161               	movf	(?___wmul+1)& (0+255),w,b
 22671  011F0A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22672  011F0C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22673  011F10  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22674  011F14  0E00               	movlw	0
 22675  011F16  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22676  011F18  0E0A               	movlw	10
 22677  011F1A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22678  011F1C  ECE4  F0C5         	call	___wmul	;wreg free
 22679  011F20  0100               	movlb	0	; () banked
 22680  011F22  5160               	movf	?___wmul& (0+255),w,b
 22681  011F24  2766               	addwf	??_Create_Maze& (0+255),f,b
 22682  011F26  5161               	movf	(?___wmul+1)& (0+255),w,b
 22683  011F28  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22684  011F2A  0E07               	movlw	7
 22685  011F2C  2566               	addwf	??_Create_Maze& (0+255),w,b
 22686  011F2E  6ED9               	movwf	fsr2l,c
 22687  011F30  0E00               	movlw	0
 22688  011F32  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22689  011F34  6EDA               	movwf	fsr2h,c
 22690  011F36  0E01               	movlw	1
 22691  011F38  6EDF               	movwf	indf2,c
 22692                           
 22693                           ; BSR set to: 0
 22694                           ;dans.c: 157: maze[x][y].Options = 1;
 22695  011F3A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22696  011F3E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22697  011F42  0E00               	movlw	0
 22698  011F44  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22699  011F46  0E32               	movlw	50
 22700  011F48  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22701  011F4A  ECE4  F0C5         	call	___wmul	;wreg free
 22702  011F4E  0E00               	movlw	low _maze
 22703  011F50  0100               	movlb	0	; () banked
 22704  011F52  6F66               	movwf	??_Create_Maze& (0+255),b
 22705  011F54  0E02               	movlw	high _maze
 22706  011F56  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22707  011F58  5160               	movf	?___wmul& (0+255),w,b
 22708  011F5A  2766               	addwf	??_Create_Maze& (0+255),f,b
 22709  011F5C  5161               	movf	(?___wmul+1)& (0+255),w,b
 22710  011F5E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22711  011F60  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22712  011F64  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22713  011F68  0E00               	movlw	0
 22714  011F6A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22715  011F6C  0E0A               	movlw	10
 22716  011F6E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22717  011F70  ECE4  F0C5         	call	___wmul	;wreg free
 22718  011F74  0100               	movlb	0	; () banked
 22719  011F76  5160               	movf	?___wmul& (0+255),w,b
 22720  011F78  2766               	addwf	??_Create_Maze& (0+255),f,b
 22721  011F7A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22722  011F7C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22723  011F7E  0E08               	movlw	8
 22724  011F80  2566               	addwf	??_Create_Maze& (0+255),w,b
 22725  011F82  6ED9               	movwf	fsr2l,c
 22726  011F84  0E00               	movlw	0
 22727  011F86  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22728  011F88  6EDA               	movwf	fsr2h,c
 22729  011F8A  0E01               	movlw	1
 22730  011F8C  6EDE               	movwf	postinc2,c
 22731  011F8E  0E00               	movlw	0
 22732  011F90  6EDD               	movwf	postdec2,c
 22733                           
 22734                           ;dans.c: 159: ++y;
 22735  011F92  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 22736  011F94  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 22737                           
 22738                           ; BSR set to: 0
 22739                           ;dans.c: 160: maze[x][y].walls[0] = 1;
 22740  011F96  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22741  011F9A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22742  011F9E  0E00               	movlw	0
 22743  011FA0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22744  011FA2  0E32               	movlw	50
 22745  011FA4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22746  011FA6  ECE4  F0C5         	call	___wmul	;wreg free
 22747  011FAA  0E00               	movlw	low _maze
 22748  011FAC  0100               	movlb	0	; () banked
 22749  011FAE  6F66               	movwf	??_Create_Maze& (0+255),b
 22750  011FB0  0E02               	movlw	high _maze
 22751  011FB2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22752  011FB4  5160               	movf	?___wmul& (0+255),w,b
 22753  011FB6  2766               	addwf	??_Create_Maze& (0+255),f,b
 22754  011FB8  5161               	movf	(?___wmul+1)& (0+255),w,b
 22755  011FBA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22756  011FBC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22757  011FC0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22758  011FC4  0E00               	movlw	0
 22759  011FC6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22760  011FC8  0E0A               	movlw	10
 22761  011FCA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22762  011FCC  ECE4  F0C5         	call	___wmul	;wreg free
 22763  011FD0  0100               	movlb	0	; () banked
 22764  011FD2  5160               	movf	?___wmul& (0+255),w,b
 22765  011FD4  2766               	addwf	??_Create_Maze& (0+255),f,b
 22766  011FD6  5161               	movf	(?___wmul+1)& (0+255),w,b
 22767  011FD8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22768  011FDA  0E04               	movlw	4
 22769  011FDC  2566               	addwf	??_Create_Maze& (0+255),w,b
 22770  011FDE  6ED9               	movwf	fsr2l,c
 22771  011FE0  0E00               	movlw	0
 22772  011FE2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22773  011FE4  6EDA               	movwf	fsr2h,c
 22774  011FE6  0E01               	movlw	1
 22775  011FE8  6EDF               	movwf	indf2,c
 22776                           
 22777                           ; BSR set to: 0
 22778                           ;dans.c: 161: maze[x][y].walls[1] = 0;
 22779  011FEA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22780  011FEE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22781  011FF2  0E00               	movlw	0
 22782  011FF4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22783  011FF6  0E32               	movlw	50
 22784  011FF8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22785  011FFA  ECE4  F0C5         	call	___wmul	;wreg free
 22786  011FFE  0E00               	movlw	low _maze
 22787  012000  0100               	movlb	0	; () banked
 22788  012002  6F66               	movwf	??_Create_Maze& (0+255),b
 22789  012004  0E02               	movlw	high _maze
 22790  012006  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22791  012008  5160               	movf	?___wmul& (0+255),w,b
 22792  01200A  2766               	addwf	??_Create_Maze& (0+255),f,b
 22793  01200C  5161               	movf	(?___wmul+1)& (0+255),w,b
 22794  01200E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22795  012010  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22796  012014  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22797  012018  0E00               	movlw	0
 22798  01201A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22799  01201C  0E0A               	movlw	10
 22800  01201E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22801  012020  ECE4  F0C5         	call	___wmul	;wreg free
 22802  012024  0100               	movlb	0	; () banked
 22803  012026  5160               	movf	?___wmul& (0+255),w,b
 22804  012028  2766               	addwf	??_Create_Maze& (0+255),f,b
 22805  01202A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22806  01202C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22807  01202E  0E05               	movlw	5
 22808  012030  2566               	addwf	??_Create_Maze& (0+255),w,b
 22809  012032  6ED9               	movwf	fsr2l,c
 22810  012034  0E00               	movlw	0
 22811  012036  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22812  012038  6EDA               	movwf	fsr2h,c
 22813  01203A  0E00               	movlw	0
 22814  01203C  6EDF               	movwf	indf2,c
 22815                           
 22816                           ; BSR set to: 0
 22817                           ;dans.c: 162: maze[x][y].walls[2] = 1;
 22818  01203E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22819  012042  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22820  012046  0E00               	movlw	0
 22821  012048  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22822  01204A  0E32               	movlw	50
 22823  01204C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22824  01204E  ECE4  F0C5         	call	___wmul	;wreg free
 22825  012052  0E00               	movlw	low _maze
 22826  012054  0100               	movlb	0	; () banked
 22827  012056  6F66               	movwf	??_Create_Maze& (0+255),b
 22828  012058  0E02               	movlw	high _maze
 22829  01205A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22830  01205C  5160               	movf	?___wmul& (0+255),w,b
 22831  01205E  2766               	addwf	??_Create_Maze& (0+255),f,b
 22832  012060  5161               	movf	(?___wmul+1)& (0+255),w,b
 22833  012062  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22834  012064  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22835  012068  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22836  01206C  0E00               	movlw	0
 22837  01206E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22838  012070  0E0A               	movlw	10
 22839  012072  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22840  012074  ECE4  F0C5         	call	___wmul	;wreg free
 22841  012078  0100               	movlb	0	; () banked
 22842  01207A  5160               	movf	?___wmul& (0+255),w,b
 22843  01207C  2766               	addwf	??_Create_Maze& (0+255),f,b
 22844  01207E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22845  012080  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22846  012082  0E06               	movlw	6
 22847  012084  2566               	addwf	??_Create_Maze& (0+255),w,b
 22848  012086  6ED9               	movwf	fsr2l,c
 22849  012088  0E00               	movlw	0
 22850  01208A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22851  01208C  6EDA               	movwf	fsr2h,c
 22852  01208E  0E01               	movlw	1
 22853  012090  6EDF               	movwf	indf2,c
 22854                           
 22855                           ; BSR set to: 0
 22856                           ;dans.c: 163: maze[x][y].walls[3] = 1;
 22857  012092  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22858  012096  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22859  01209A  0E00               	movlw	0
 22860  01209C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22861  01209E  0E32               	movlw	50
 22862  0120A0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22863  0120A2  ECE4  F0C5         	call	___wmul	;wreg free
 22864  0120A6  0E00               	movlw	low _maze
 22865  0120A8  0100               	movlb	0	; () banked
 22866  0120AA  6F66               	movwf	??_Create_Maze& (0+255),b
 22867  0120AC  0E02               	movlw	high _maze
 22868  0120AE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22869  0120B0  5160               	movf	?___wmul& (0+255),w,b
 22870  0120B2  2766               	addwf	??_Create_Maze& (0+255),f,b
 22871  0120B4  5161               	movf	(?___wmul+1)& (0+255),w,b
 22872  0120B6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22873  0120B8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22874  0120BC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22875  0120C0  0E00               	movlw	0
 22876  0120C2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22877  0120C4  0E0A               	movlw	10
 22878  0120C6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22879  0120C8  ECE4  F0C5         	call	___wmul	;wreg free
 22880  0120CC  0100               	movlb	0	; () banked
 22881  0120CE  5160               	movf	?___wmul& (0+255),w,b
 22882  0120D0  2766               	addwf	??_Create_Maze& (0+255),f,b
 22883  0120D2  5161               	movf	(?___wmul+1)& (0+255),w,b
 22884  0120D4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22885  0120D6  0E07               	movlw	7
 22886  0120D8  2566               	addwf	??_Create_Maze& (0+255),w,b
 22887  0120DA  6ED9               	movwf	fsr2l,c
 22888  0120DC  0E00               	movlw	0
 22889  0120DE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22890  0120E0  6EDA               	movwf	fsr2h,c
 22891  0120E2  0E01               	movlw	1
 22892  0120E4  6EDF               	movwf	indf2,c
 22893                           
 22894                           ; BSR set to: 0
 22895                           ;dans.c: 164: maze[x][y].Options = 1;
 22896  0120E6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22897  0120EA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22898  0120EE  0E00               	movlw	0
 22899  0120F0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22900  0120F2  0E32               	movlw	50
 22901  0120F4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22902  0120F6  ECE4  F0C5         	call	___wmul	;wreg free
 22903  0120FA  0E00               	movlw	low _maze
 22904  0120FC  0100               	movlb	0	; () banked
 22905  0120FE  6F66               	movwf	??_Create_Maze& (0+255),b
 22906  012100  0E02               	movlw	high _maze
 22907  012102  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22908  012104  5160               	movf	?___wmul& (0+255),w,b
 22909  012106  2766               	addwf	??_Create_Maze& (0+255),f,b
 22910  012108  5161               	movf	(?___wmul+1)& (0+255),w,b
 22911  01210A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22912  01210C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22913  012110  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22914  012114  0E00               	movlw	0
 22915  012116  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22916  012118  0E0A               	movlw	10
 22917  01211A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22918  01211C  ECE4  F0C5         	call	___wmul	;wreg free
 22919  012120  0100               	movlb	0	; () banked
 22920  012122  5160               	movf	?___wmul& (0+255),w,b
 22921  012124  2766               	addwf	??_Create_Maze& (0+255),f,b
 22922  012126  5161               	movf	(?___wmul+1)& (0+255),w,b
 22923  012128  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22924  01212A  0E08               	movlw	8
 22925  01212C  2566               	addwf	??_Create_Maze& (0+255),w,b
 22926  01212E  6ED9               	movwf	fsr2l,c
 22927  012130  0E00               	movlw	0
 22928  012132  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22929  012134  6EDA               	movwf	fsr2h,c
 22930  012136  0E01               	movlw	1
 22931  012138  6EDE               	movwf	postinc2,c
 22932  01213A  0E00               	movlw	0
 22933  01213C  6EDD               	movwf	postdec2,c
 22934                           
 22935                           ; BSR set to: 0
 22936                           ;dans.c: 166: ++y;
 22937  01213E  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 22938  012140  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 22939                           
 22940                           ;dans.c: 167: maze[x][y].walls[0] = 0;
 22941  012142  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22942  012146  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22943  01214A  0E00               	movlw	0
 22944  01214C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22945  01214E  0E32               	movlw	50
 22946  012150  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22947  012152  ECE4  F0C5         	call	___wmul	;wreg free
 22948  012156  0E00               	movlw	low _maze
 22949  012158  0100               	movlb	0	; () banked
 22950  01215A  6F66               	movwf	??_Create_Maze& (0+255),b
 22951  01215C  0E02               	movlw	high _maze
 22952  01215E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22953  012160  5160               	movf	?___wmul& (0+255),w,b
 22954  012162  2766               	addwf	??_Create_Maze& (0+255),f,b
 22955  012164  5161               	movf	(?___wmul+1)& (0+255),w,b
 22956  012166  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22957  012168  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22958  01216C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22959  012170  0E00               	movlw	0
 22960  012172  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22961  012174  0E0A               	movlw	10
 22962  012176  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22963  012178  ECE4  F0C5         	call	___wmul	;wreg free
 22964  01217C  0100               	movlb	0	; () banked
 22965  01217E  5160               	movf	?___wmul& (0+255),w,b
 22966  012180  2766               	addwf	??_Create_Maze& (0+255),f,b
 22967  012182  5161               	movf	(?___wmul+1)& (0+255),w,b
 22968  012184  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22969  012186  0E04               	movlw	4
 22970  012188  2566               	addwf	??_Create_Maze& (0+255),w,b
 22971  01218A  6ED9               	movwf	fsr2l,c
 22972  01218C  0E00               	movlw	0
 22973  01218E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22974  012190  6EDA               	movwf	fsr2h,c
 22975  012192  0E00               	movlw	0
 22976  012194  6EDF               	movwf	indf2,c
 22977                           
 22978                           ;dans.c: 168: maze[x][y].walls[1] = 1;
 22979  012196  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22980  01219A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22981  01219E  0E00               	movlw	0
 22982  0121A0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22983  0121A2  0E32               	movlw	50
 22984  0121A4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22985  0121A6  ECE4  F0C5         	call	___wmul	;wreg free
 22986  0121AA  0E00               	movlw	low _maze
 22987  0121AC  0100               	movlb	0	; () banked
 22988  0121AE  6F66               	movwf	??_Create_Maze& (0+255),b
 22989  0121B0  0E02               	movlw	high _maze
 22990  0121B2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22991  0121B4  5160               	movf	?___wmul& (0+255),w,b
 22992  0121B6  2766               	addwf	??_Create_Maze& (0+255),f,b
 22993  0121B8  5161               	movf	(?___wmul+1)& (0+255),w,b
 22994  0121BA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22995  0121BC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22996  0121C0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22997  0121C4  0E00               	movlw	0
 22998  0121C6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22999  0121C8  0E0A               	movlw	10
 23000  0121CA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23001  0121CC  ECE4  F0C5         	call	___wmul	;wreg free
 23002  0121D0  0100               	movlb	0	; () banked
 23003  0121D2  5160               	movf	?___wmul& (0+255),w,b
 23004  0121D4  2766               	addwf	??_Create_Maze& (0+255),f,b
 23005  0121D6  5161               	movf	(?___wmul+1)& (0+255),w,b
 23006  0121D8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23007  0121DA  0E05               	movlw	5
 23008  0121DC  2566               	addwf	??_Create_Maze& (0+255),w,b
 23009  0121DE  6ED9               	movwf	fsr2l,c
 23010  0121E0  0E00               	movlw	0
 23011  0121E2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23012  0121E4  6EDA               	movwf	fsr2h,c
 23013  0121E6  0E01               	movlw	1
 23014  0121E8  6EDF               	movwf	indf2,c
 23015                           
 23016                           ;dans.c: 169: maze[x][y].walls[2] = 1;
 23017  0121EA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23018  0121EE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23019  0121F2  0E00               	movlw	0
 23020  0121F4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23021  0121F6  0E32               	movlw	50
 23022  0121F8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23023  0121FA  ECE4  F0C5         	call	___wmul	;wreg free
 23024  0121FE  0E00               	movlw	low _maze
 23025  012200  0100               	movlb	0	; () banked
 23026  012202  6F66               	movwf	??_Create_Maze& (0+255),b
 23027  012204  0E02               	movlw	high _maze
 23028  012206  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23029  012208  5160               	movf	?___wmul& (0+255),w,b
 23030  01220A  2766               	addwf	??_Create_Maze& (0+255),f,b
 23031  01220C  5161               	movf	(?___wmul+1)& (0+255),w,b
 23032  01220E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23033  012210  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23034  012214  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23035  012218  0E00               	movlw	0
 23036  01221A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23037  01221C  0E0A               	movlw	10
 23038  01221E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23039  012220  ECE4  F0C5         	call	___wmul	;wreg free
 23040  012224  0100               	movlb	0	; () banked
 23041  012226  5160               	movf	?___wmul& (0+255),w,b
 23042  012228  2766               	addwf	??_Create_Maze& (0+255),f,b
 23043  01222A  5161               	movf	(?___wmul+1)& (0+255),w,b
 23044  01222C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23045  01222E  0E06               	movlw	6
 23046  012230  2566               	addwf	??_Create_Maze& (0+255),w,b
 23047  012232  6ED9               	movwf	fsr2l,c
 23048  012234  0E00               	movlw	0
 23049  012236  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23050  012238  6EDA               	movwf	fsr2h,c
 23051  01223A  0E01               	movlw	1
 23052  01223C  6EDF               	movwf	indf2,c
 23053                           
 23054                           ;dans.c: 170: maze[x][y].walls[3] = 0;
 23055  01223E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23056  012242  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23057  012246  0E00               	movlw	0
 23058  012248  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23059  01224A  0E32               	movlw	50
 23060  01224C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23061  01224E  ECE4  F0C5         	call	___wmul	;wreg free
 23062  012252  0E00               	movlw	low _maze
 23063  012254  0100               	movlb	0	; () banked
 23064  012256  6F66               	movwf	??_Create_Maze& (0+255),b
 23065  012258  0E02               	movlw	high _maze
 23066  01225A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23067  01225C  5160               	movf	?___wmul& (0+255),w,b
 23068  01225E  2766               	addwf	??_Create_Maze& (0+255),f,b
 23069  012260  5161               	movf	(?___wmul+1)& (0+255),w,b
 23070  012262  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23071  012264  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23072  012268  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23073  01226C  0E00               	movlw	0
 23074  01226E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23075  012270  0E0A               	movlw	10
 23076  012272  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23077  012274  ECE4  F0C5         	call	___wmul	;wreg free
 23078  012278  0100               	movlb	0	; () banked
 23079  01227A  5160               	movf	?___wmul& (0+255),w,b
 23080  01227C  2766               	addwf	??_Create_Maze& (0+255),f,b
 23081  01227E  5161               	movf	(?___wmul+1)& (0+255),w,b
 23082  012280  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23083  012282  0E07               	movlw	7
 23084  012284  2566               	addwf	??_Create_Maze& (0+255),w,b
 23085  012286  6ED9               	movwf	fsr2l,c
 23086  012288  0E00               	movlw	0
 23087  01228A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23088  01228C  6EDA               	movwf	fsr2h,c
 23089  01228E  0E00               	movlw	0
 23090  012290  6EDF               	movwf	indf2,c
 23091                           
 23092                           ;dans.c: 171: maze[x][y].Options = 2;
 23093  012292  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23094  012296  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23095  01229A  0E00               	movlw	0
 23096  01229C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23097  01229E  0E32               	movlw	50
 23098  0122A0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23099  0122A2  ECE4  F0C5         	call	___wmul	;wreg free
 23100  0122A6  0E00               	movlw	low _maze
 23101  0122A8  0100               	movlb	0	; () banked
 23102  0122AA  6F66               	movwf	??_Create_Maze& (0+255),b
 23103  0122AC  0E02               	movlw	high _maze
 23104  0122AE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23105  0122B0  5160               	movf	?___wmul& (0+255),w,b
 23106  0122B2  2766               	addwf	??_Create_Maze& (0+255),f,b
 23107  0122B4  5161               	movf	(?___wmul+1)& (0+255),w,b
 23108  0122B6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23109  0122B8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23110  0122BC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23111  0122C0  0E00               	movlw	0
 23112  0122C2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23113  0122C4  0E0A               	movlw	10
 23114  0122C6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23115  0122C8  ECE4  F0C5         	call	___wmul	;wreg free
 23116  0122CC  0100               	movlb	0	; () banked
 23117  0122CE  5160               	movf	?___wmul& (0+255),w,b
 23118  0122D0  2766               	addwf	??_Create_Maze& (0+255),f,b
 23119  0122D2  5161               	movf	(?___wmul+1)& (0+255),w,b
 23120  0122D4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23121  0122D6  0E08               	movlw	8
 23122  0122D8  2566               	addwf	??_Create_Maze& (0+255),w,b
 23123  0122DA  6ED9               	movwf	fsr2l,c
 23124  0122DC  0E00               	movlw	0
 23125  0122DE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23126  0122E0  6EDA               	movwf	fsr2h,c
 23127  0122E2  0E02               	movlw	2
 23128  0122E4  6EDE               	movwf	postinc2,c
 23129  0122E6  0E00               	movlw	0
 23130  0122E8  6EDD               	movwf	postdec2,c
 23131                           
 23132                           ; BSR set to: 0
 23133  0122EA  0012               	return		;funcret
 23134  0122EC                     __end_of_Create_Maze:
 23135                           	opt stack 0
 23136                           tosu	equ	0xFFF
 23137                           tosh	equ	0xFFE
 23138                           tosl	equ	0xFFD
 23139                           pclath	equ	0xFFA
 23140                           tblptru	equ	0xFF8
 23141                           tblptrh	equ	0xFF7
 23142                           tblptrl	equ	0xFF6
 23143                           tablat	equ	0xFF5
 23144                           prodh	equ	0xFF4
 23145                           prodl	equ	0xFF3
 23146                           intcon	equ	0xFF2
 23147                           indf0	equ	0xFEF
 23148                           postinc0	equ	0xFEE
 23149                           fsr0h	equ	0xFEA
 23150                           fsr0l	equ	0xFE9
 23151                           wreg	equ	0xFE8
 23152                           indf1	equ	0xFE7
 23153                           postdec1	equ	0xFE5
 23154                           fsr1h	equ	0xFE2
 23155                           fsr1l	equ	0xFE1
 23156                           indf2	equ	0xFDF
 23157                           postinc2	equ	0xFDE
 23158                           postdec2	equ	0xFDD
 23159                           plusw2	equ	0xFDB
 23160                           fsr2h	equ	0xFDA
 23161                           fsr2l	equ	0xFD9
 23162                           status	equ	0xFD8
 23163                           
 23164 ;; *************** function _Console_Init *****************
 23165 ;; Defined at:
 23166 ;;		line 157 in file "Library/Console.c"
 23167 ;; Parameters:    Size  Location     Type
 23168 ;;		None
 23169 ;; Auto vars:     Size  Location     Type
 23170 ;;  y               1    3[BANK0 ] unsigned char 
 23171 ;;  x               1    2[BANK0 ] unsigned char 
 23172 ;; Return value:  Size  Location     Type
 23173 ;;                  1    wreg      void 
 23174 ;; Registers used:
 23175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23176 ;; Tracked objects:
 23177 ;;		On entry : 0/0
 23178 ;;		On exit  : 0/0
 23179 ;;		Unchanged: 0/0
 23180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23182 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23183 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23184 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23185 ;;Total ram usage:        4 bytes
 23186 ;; Hardware stack levels used:    1
 23187 ;; Hardware stack levels required when called:    7
 23188 ;; This function calls:
 23189 ;;		Nothing
 23190 ;; This function is called by:
 23191 ;;		_main
 23192 ;; This function uses a non-reentrant model
 23193 ;;
 23194                           
 23195                           	psect	text93
 23196  017CE6                     __ptext93:
 23197                           	opt stack 0
 23198  017CE6                     _Console_Init:
 23199                           	opt stack 23
 23200                           
 23201                           ;Console.c: 160: lBufferX = 0;
 23202                           
 23203                           ; BSR set to: 0
 23204                           ;incstack = 0
 23205  017CE6  0E00               	movlw	0
 23206  017CE8  6E45               	movwf	_lBufferX,c
 23207                           
 23208                           ;Console.c: 161: lBufferY = 0;
 23209  017CEA  0E00               	movlw	0
 23210  017CEC  0100               	movlb	0	; () banked
 23211  017CEE  6FFF               	movwf	_lBufferY& (0+255),b
 23212                           
 23213                           ;Console.c: 163: UINT8 x, y;
 23214                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 23215  017CF0  0E00               	movlw	0
 23216  017CF2  6F62               	movwf	Console_Init@x& (0+255),b
 23217  017CF4                     l17115:
 23218                           
 23219                           ; BSR set to: 0
 23220  017CF4  0E13               	movlw	19
 23221  017CF6  6562               	cpfsgt	Console_Init@x& (0+255),b
 23222  017CF8  D001               	goto	l976
 23223  017CFA  0012               	return	
 23224  017CFC                     l976:
 23225                           
 23226                           ; BSR set to: 0
 23227                           ;Console.c: 165: {
 23228                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 23229                           
 23230                           ; BSR set to: 0
 23231  017CFC  0E00               	movlw	0
 23232  017CFE  6F63               	movwf	Console_Init@y& (0+255),b
 23233  017D00                     l17121:
 23234                           
 23235                           ; BSR set to: 0
 23236  017D00  0E0E               	movlw	14
 23237  017D02  6563               	cpfsgt	Console_Init@y& (0+255),b
 23238  017D04  D001               	goto	l978
 23239  017D06  D022               	goto	u14760
 23240  017D08                     l978:
 23241                           
 23242                           ; BSR set to: 0
 23243                           ;Console.c: 167: {
 23244                           ;Console.c: 168: lBuffer[y][x] = '\0';
 23245                           
 23246                           ; BSR set to: 0
 23247  017D08  5163               	movf	Console_Init@y& (0+255),w,b
 23248  017D0A  0D14               	mullw	20
 23249  017D0C  0EF2               	movlw	low _lBuffer
 23250  017D0E  6F60               	movwf	??_Console_Init& (0+255),b
 23251  017D10  0E03               	movlw	high _lBuffer
 23252  017D12  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 23253  017D14  50F3               	movf	prodl,w,c
 23254  017D16  2760               	addwf	??_Console_Init& (0+255),f,b
 23255  017D18  50F4               	movf	prodh,w,c
 23256  017D1A  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 23257  017D1C  5162               	movf	Console_Init@x& (0+255),w,b
 23258  017D1E  0D01               	mullw	1
 23259  017D20  50F3               	movf	prodl,w,c
 23260  017D22  2560               	addwf	??_Console_Init& (0+255),w,b
 23261  017D24  6ED9               	movwf	fsr2l,c
 23262  017D26  50F4               	movf	prodh,w,c
 23263  017D28  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 23264  017D2A  6EDA               	movwf	fsr2h,c
 23265  017D2C  0E00               	movlw	0
 23266  017D2E  6EDF               	movwf	indf2,c
 23267                           
 23268                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 23269  017D30  5163               	movf	Console_Init@y& (0+255),w,b
 23270  017D32  0D02               	mullw	2
 23271  017D34  0E28               	movlw	low _lCBuffer
 23272  017D36  24F3               	addwf	prodl,w,c
 23273  017D38  6ED9               	movwf	fsr2l,c
 23274  017D3A  0E03               	movlw	high _lCBuffer
 23275  017D3C  20F4               	addwfc	prodh,w,c
 23276  017D3E  6EDA               	movwf	fsr2h,c
 23277  017D40  0EFF               	movlw	255
 23278  017D42  6EDE               	movwf	postinc2,c
 23279  017D44  0EFF               	movlw	255
 23280  017D46  6EDD               	movwf	postdec2,c
 23281                           
 23282                           ; BSR set to: 0
 23283  017D48  2B63               	incf	Console_Init@y& (0+255),f,b
 23284  017D4A  D7DA               	goto	l17121
 23285  017D4C                     u14760:
 23286                           
 23287                           ; BSR set to: 0
 23288                           
 23289                           ; BSR set to: 0
 23290  017D4C  2B62               	incf	Console_Init@x& (0+255),f,b
 23291  017D4E  D7D2               	goto	l17115
 23292  017D50                     __end_of_Console_Init:
 23293                           	opt stack 0
 23294                           tosu	equ	0xFFF
 23295                           tosh	equ	0xFFE
 23296                           tosl	equ	0xFFD
 23297                           pclath	equ	0xFFA
 23298                           tblptru	equ	0xFF8
 23299                           tblptrh	equ	0xFF7
 23300                           tblptrl	equ	0xFF6
 23301                           tablat	equ	0xFF5
 23302                           prodh	equ	0xFF4
 23303                           prodl	equ	0xFF3
 23304                           intcon	equ	0xFF2
 23305                           indf0	equ	0xFEF
 23306                           postinc0	equ	0xFEE
 23307                           fsr0h	equ	0xFEA
 23308                           fsr0l	equ	0xFE9
 23309                           wreg	equ	0xFE8
 23310                           indf1	equ	0xFE7
 23311                           postdec1	equ	0xFE5
 23312                           fsr1h	equ	0xFE2
 23313                           fsr1l	equ	0xFE1
 23314                           indf2	equ	0xFDF
 23315                           postinc2	equ	0xFDE
 23316                           postdec2	equ	0xFDD
 23317                           plusw2	equ	0xFDB
 23318                           fsr2h	equ	0xFDA
 23319                           fsr2l	equ	0xFD9
 23320                           status	equ	0xFD8
 23321                           
 23322 ;; *************** function _Closest_Object *****************
 23323 ;; Defined at:
 23324 ;;		line 264 in file "main.c"
 23325 ;; Parameters:    Size  Location     Type
 23326 ;;		None
 23327 ;; Auto vars:     Size  Location     Type
 23328 ;;		None
 23329 ;; Return value:  Size  Location     Type
 23330 ;;                  1    wreg      void 
 23331 ;; Registers used:
 23332 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23333 ;; Tracked objects:
 23334 ;;		On entry : 0/0
 23335 ;;		On exit  : 0/0
 23336 ;;		Unchanged: 0/0
 23337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23342 ;;Total ram usage:        0 bytes
 23343 ;; Hardware stack levels used:    1
 23344 ;; Hardware stack levels required when called:   13
 23345 ;; This function calls:
 23346 ;;		_ADCAverage
 23347 ;;		_Console_Render
 23348 ;;		_SteppingCCW
 23349 ;;		_printf
 23350 ;; This function is called by:
 23351 ;;		_main
 23352 ;; This function uses a non-reentrant model
 23353 ;;
 23354                           
 23355                           	psect	text94
 23356  016F9A                     __ptext94:
 23357                           	opt stack 0
 23358  016F9A                     _Closest_Object:
 23359                           	opt stack 17
 23360                           
 23361                           ;main.c: 265: printf("%c", (char)35);
 23362                           
 23363                           ; BSR set to: 0
 23364                           ;incstack = 0
 23365  016F9A  0EFB               	movlw	low STR_1
 23366  016F9C  0100               	movlb	0	; () banked
 23367  016F9E  6F75               	movwf	printf@f& (0+255),b
 23368  016FA0  0EFF               	movlw	high STR_1
 23369  016FA2  6F76               	movwf	(printf@f+1)& (0+255),b
 23370  016FA4  0E00               	movlw	0
 23371  016FA6  6F78               	movwf	(?_printf+3)& (0+255),b
 23372  016FA8  0E23               	movlw	35
 23373  016FAA  6F77               	movwf	(?_printf+2)& (0+255),b
 23374  016FAC  EC90  F0AC         	call	_printf	;wreg free
 23375                           
 23376                           ;main.c: 266: printf("Stepped 360 degrees");
 23377  016FB0  0E11               	movlw	low STR_7
 23378  016FB2  0100               	movlb	0	; () banked
 23379  016FB4  6F75               	movwf	printf@f& (0+255),b
 23380  016FB6  0EFF               	movlw	high STR_7
 23381  016FB8  6F76               	movwf	(printf@f+1)& (0+255),b
 23382  016FBA  EC90  F0AC         	call	_printf	;wreg free
 23383                           
 23384                           ;main.c: 267: printf("\nThe Closes object (mm): %d", Low_Sensor);
 23385  016FBE  0EB2               	movlw	low STR_8
 23386  016FC0  0100               	movlb	0	; () banked
 23387  016FC2  6F75               	movwf	printf@f& (0+255),b
 23388  016FC4  0EFE               	movlw	high STR_8
 23389  016FC6  6F76               	movwf	(printf@f+1)& (0+255),b
 23390  016FC8  C1F1  F077         	movff	_Low_Sensor,?_printf+2
 23391  016FCC  C1F2  F078         	movff	_Low_Sensor+1,?_printf+3
 23392  016FD0  EC90  F0AC         	call	_printf	;wreg free
 23393                           
 23394                           ;main.c: 268: printf("\nGoing back to: %d", Close_Pos);
 23395  016FD4  0E38               	movlw	low STR_9
 23396  016FD6  0100               	movlb	0	; () banked
 23397  016FD8  6F75               	movwf	printf@f& (0+255),b
 23398  016FDA  0EFF               	movlw	high STR_9
 23399  016FDC  6F76               	movwf	(printf@f+1)& (0+255),b
 23400  016FDE  C128  F077         	movff	_Close_Pos,?_printf+2
 23401  016FE2  C129  F078         	movff	_Close_Pos+1,?_printf+3
 23402  016FE6  EC90  F0AC         	call	_printf	;wreg free
 23403                           
 23404                           ;main.c: 269: Console_Render();
 23405  016FEA  ECB3  F0A8         	call	_Console_Render	;wreg free
 23406                           
 23407                           ;main.c: 270: while (!CCW_Count <= 0) {
 23408  016FEE  D020               	goto	l2214
 23409  016FF0                     
 23410                           ;main.c: 271: CCW_Count--;
 23411  016FF0  0101               	movlb	1	; () banked
 23412  016FF2  0724               	decf	_CCW_Count& (0+255),f,b
 23413  016FF4  A0D8               	btfss	status,0,c
 23414  016FF6  0725               	decf	(_CCW_Count+1)& (0+255),f,b
 23415                           
 23416                           ; BSR set to: 1
 23417                           ;main.c: 272: printf("%c", (char)35);
 23418  016FF8  0EFB               	movlw	low STR_1
 23419  016FFA  0100               	movlb	0	; () banked
 23420  016FFC  6F75               	movwf	printf@f& (0+255),b
 23421  016FFE  0EFF               	movlw	high STR_1
 23422  017000  6F76               	movwf	(printf@f+1)& (0+255),b
 23423  017002  0E00               	movlw	0
 23424  017004  6F78               	movwf	(?_printf+3)& (0+255),b
 23425  017006  0E23               	movlw	35
 23426  017008  6F77               	movwf	(?_printf+2)& (0+255),b
 23427  01700A  EC90  F0AC         	call	_printf	;wreg free
 23428                           
 23429                           ;main.c: 273: printf("\nSteps Travelled: %d", CCW_Count);
 23430  01700E  0EFC               	movlw	low STR_11
 23431  017010  0100               	movlb	0	; () banked
 23432  017012  6F75               	movwf	printf@f& (0+255),b
 23433  017014  0EFE               	movlw	high STR_11
 23434  017016  6F76               	movwf	(printf@f+1)& (0+255),b
 23435  017018  C124  F077         	movff	_CCW_Count,?_printf+2
 23436  01701C  C125  F078         	movff	_CCW_Count+1,?_printf+3
 23437  017020  EC90  F0AC         	call	_printf	;wreg free
 23438                           
 23439                           ;main.c: 274: Console_Render();
 23440  017024  ECB3  F0A8         	call	_Console_Render	;wreg free
 23441                           
 23442                           ;main.c: 275: ADCAverage();
 23443  017028  EC0C  F09E         	call	_ADCAverage	;wreg free
 23444                           
 23445                           ;main.c: 276: SteppingCCW();
 23446  01702C  EC96  F0C2         	call	_SteppingCCW	;wreg free
 23447  017030                     l2214:
 23448  017030  0101               	movlb	1	; () banked
 23449  017032  5124               	movf	_CCW_Count& (0+255),w,b
 23450  017034  1125               	iorwf	(_CCW_Count+1)& (0+255),w,b
 23451  017036  A4D8               	btfss	status,2,c
 23452  017038  D7DB               	goto	l2215
 23453                           
 23454                           ; BSR set to: 1
 23455                           ;main.c: 277: }
 23456                           ;main.c: 278: RD5 = 0;
 23457  01703A  9A83               	bcf	3971,5,c	;volatile
 23458                           
 23459                           ;main.c: 279: RD7 = 0;
 23460  01703C  9E83               	bcf	3971,7,c	;volatile
 23461                           
 23462                           ;main.c: 280: RA2 = 0;
 23463  01703E  9480               	bcf	3968,2,c	;volatile
 23464                           
 23465                           ;main.c: 281: RA3 = 0;
 23466  017040  9680               	bcf	3968,3,c	;volatile
 23467                           
 23468                           ; BSR set to: 1
 23469                           
 23470                           ;main.c: 282: return;
 23471  017042  0012               	return		;funcret
 23472  017044                     __end_of_Closest_Object:
 23473                           	opt stack 0
 23474                           tosu	equ	0xFFF
 23475                           tosh	equ	0xFFE
 23476                           tosl	equ	0xFFD
 23477                           pclath	equ	0xFFA
 23478                           tblptru	equ	0xFF8
 23479                           tblptrh	equ	0xFF7
 23480                           tblptrl	equ	0xFF6
 23481                           tablat	equ	0xFF5
 23482                           prodh	equ	0xFF4
 23483                           prodl	equ	0xFF3
 23484                           intcon	equ	0xFF2
 23485                           indf0	equ	0xFEF
 23486                           postinc0	equ	0xFEE
 23487                           fsr0h	equ	0xFEA
 23488                           fsr0l	equ	0xFE9
 23489                           wreg	equ	0xFE8
 23490                           indf1	equ	0xFE7
 23491                           postdec1	equ	0xFE5
 23492                           fsr1h	equ	0xFE2
 23493                           fsr1l	equ	0xFE1
 23494                           indf2	equ	0xFDF
 23495                           postinc2	equ	0xFDE
 23496                           postdec2	equ	0xFDD
 23497                           plusw2	equ	0xFDB
 23498                           fsr2h	equ	0xFDA
 23499                           fsr2l	equ	0xFD9
 23500                           status	equ	0xFD8
 23501                           
 23502 ;; *************** function _ADCAverage *****************
 23503 ;; Defined at:
 23504 ;;		line 197 in file "dans.c"
 23505 ;; Parameters:    Size  Location     Type
 23506 ;;		None
 23507 ;; Auto vars:     Size  Location     Type
 23508 ;;		None
 23509 ;; Return value:  Size  Location     Type
 23510 ;;                  2  2000[None  ] int 
 23511 ;; Registers used:
 23512 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23513 ;; Tracked objects:
 23514 ;;		On entry : 0/0
 23515 ;;		On exit  : 0/0
 23516 ;;		Unchanged: 0/0
 23517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23519 ;;      Locals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23520 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23521 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23522 ;;Total ram usage:       26 bytes
 23523 ;; Hardware stack levels used:    1
 23524 ;; Hardware stack levels required when called:   11
 23525 ;; This function calls:
 23526 ;;		_FunctReadADC
 23527 ;;		_HMI_Render
 23528 ;;		_HMI_SetNumber
 23529 ;;		___awdiv
 23530 ;;		___fladd
 23531 ;;		___flmul
 23532 ;;		___flneg
 23533 ;;		___fltol
 23534 ;;		___xxtofl
 23535 ;;		_pow
 23536 ;; This function is called by:
 23537 ;;		_Sensor_Observe
 23538 ;;		_Closest_Object
 23539 ;;		_main
 23540 ;;		_Travel
 23541 ;;		_Fix_Error
 23542 ;;		_Find_Flag
 23543 ;; This function uses a non-reentrant model
 23544 ;;
 23545                           
 23546                           	psect	text95
 23547  013C18                     __ptext95:
 23548                           	opt stack 0
 23549  013C18                     _ADCAverage:
 23550                           	opt stack 18
 23551                           
 23552                           ;dans.c: 199: total = total - readings[readIndex];
 23553                           
 23554                           ; BSR set to: 1
 23555                           ;incstack = 0
 23556  013C18  90D8               	bcf	status,0,c
 23557  013C1A  342E               	rlcf	_readIndex,w,c
 23558  013C1C  6ED9               	movwf	fsr2l,c
 23559  013C1E  342F               	rlcf	_readIndex+1,w,c
 23560  013C20  6EDA               	movwf	fsr2h,c
 23561  013C22  0E46               	movlw	low _readings
 23562  013C24  26D9               	addwf	fsr2l,f,c
 23563  013C26  0E03               	movlw	high _readings
 23564  013C28  22DA               	addwfc	fsr2h,f,c
 23565  013C2A  CFDE F0D7          	movff	postinc2,??_ADCAverage
 23566  013C2E  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 23567  013C32  0100               	movlb	0	; () banked
 23568  013C34  1FD7               	comf	??_ADCAverage& (0+255),f,b
 23569  013C36  1FD8               	comf	(??_ADCAverage+1)& (0+255),f,b
 23570  013C38  4BD7               	infsnz	??_ADCAverage& (0+255),f,b
 23571  013C3A  2BD8               	incf	(??_ADCAverage+1)& (0+255),f,b
 23572  013C3C  0101               	movlb	1	; () banked
 23573  013C3E  5144               	movf	_total& (0+255),w,b
 23574  013C40  0100               	movlb	0	; () banked
 23575  013C42  25D7               	addwf	??_ADCAverage& (0+255),w,b
 23576  013C44  0101               	movlb	1	; () banked
 23577  013C46  6F44               	movwf	_total& (0+255),b
 23578  013C48  5145               	movf	(_total+1)& (0+255),w,b
 23579  013C4A  0100               	movlb	0	; () banked
 23580  013C4C  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 23581  013C4E  0101               	movlb	1	; () banked
 23582  013C50  6F45               	movwf	(_total+1)& (0+255),b
 23583                           
 23584                           ; BSR set to: 1
 23585                           ;dans.c: 201: readings[readIndex] = (FunctReadADC(0));
 23586  013C52  0E00               	movlw	0
 23587  013C54  0100               	movlb	0	; () banked
 23588  013C56  6F61               	movwf	(FunctReadADC@channel+1)& (0+255),b
 23589  013C58  0E00               	movlw	0
 23590  013C5A  6F60               	movwf	FunctReadADC@channel& (0+255),b
 23591  013C5C  EC31  F0C4         	call	_FunctReadADC	;wreg free
 23592  013C60  90D8               	bcf	status,0,c
 23593  013C62  342E               	rlcf	_readIndex,w,c
 23594  013C64  6ED9               	movwf	fsr2l,c
 23595  013C66  342F               	rlcf	_readIndex+1,w,c
 23596  013C68  6EDA               	movwf	fsr2h,c
 23597  013C6A  0E46               	movlw	low _readings
 23598  013C6C  26D9               	addwf	fsr2l,f,c
 23599  013C6E  0E03               	movlw	high _readings
 23600  013C70  22DA               	addwfc	fsr2h,f,c
 23601  013C72  0100               	movlb	0	; () banked
 23602  013C74  C060  FFDE         	movff	?_FunctReadADC,postinc2
 23603  013C78  C061  FFDD         	movff	?_FunctReadADC+1,postdec2
 23604                           
 23605                           ; BSR set to: 0
 23606                           ;dans.c: 203: total = total + readings[readIndex];
 23607  013C7C  90D8               	bcf	status,0,c
 23608  013C7E  342E               	rlcf	_readIndex,w,c
 23609  013C80  6ED9               	movwf	fsr2l,c
 23610  013C82  342F               	rlcf	_readIndex+1,w,c
 23611  013C84  6EDA               	movwf	fsr2h,c
 23612  013C86  0E46               	movlw	low _readings
 23613  013C88  26D9               	addwf	fsr2l,f,c
 23614  013C8A  0E03               	movlw	high _readings
 23615  013C8C  22DA               	addwfc	fsr2h,f,c
 23616  013C8E  CFDE F0D7          	movff	postinc2,??_ADCAverage
 23617  013C92  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 23618  013C96  0101               	movlb	1	; () banked
 23619  013C98  5144               	movf	_total& (0+255),w,b
 23620  013C9A  0100               	movlb	0	; () banked
 23621  013C9C  25D7               	addwf	??_ADCAverage& (0+255),w,b
 23622  013C9E  0101               	movlb	1	; () banked
 23623  013CA0  6F44               	movwf	_total& (0+255),b
 23624  013CA2  5145               	movf	(_total+1)& (0+255),w,b
 23625  013CA4  0100               	movlb	0	; () banked
 23626  013CA6  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 23627  013CA8  0101               	movlb	1	; () banked
 23628  013CAA  6F45               	movwf	(_total+1)& (0+255),b
 23629                           
 23630                           ; BSR set to: 1
 23631                           ;dans.c: 205: readIndex++;
 23632  013CAC  4A2E               	infsnz	_readIndex,f,c
 23633  013CAE  2A2F               	incf	_readIndex+1,f,c
 23634                           
 23635                           ; BSR set to: 1
 23636                           ;dans.c: 208: if (readIndex >= numReadings) {
 23637  013CB0  51F7               	movf	_numReadings& (0+255),w,b
 23638  013CB2  5C2E               	subwf	_readIndex,w,c
 23639  013CB4  502F               	movf	_readIndex+1,w,c
 23640  013CB6  0A80               	xorlw	128
 23641  013CB8  0100               	movlb	0	; () banked
 23642  013CBA  6FD7               	movwf	??_ADCAverage& (0+255),b
 23643  013CBC  0101               	movlb	1	; () banked
 23644  013CBE  51F8               	movf	(_numReadings+1)& (0+255),w,b
 23645  013CC0  0A80               	xorlw	128
 23646  013CC2  0100               	movlb	0	; () banked
 23647  013CC4  59D7               	subwfb	??_ADCAverage& (0+255),w,b
 23648  013CC6  A0D8               	btfss	status,0,c
 23649  013CC8  D004               	goto	l2382
 23650                           
 23651                           ; BSR set to: 0
 23652                           ;dans.c: 210: readIndex = 0;
 23653  013CCA  0E00               	movlw	0
 23654  013CCC  6E2F               	movwf	_readIndex+1,c
 23655  013CCE  0E00               	movlw	0
 23656  013CD0  6E2E               	movwf	_readIndex,c
 23657  013CD2                     l2382:
 23658                           
 23659                           ; BSR set to: 0
 23660                           ;dans.c: 211: }
 23661                           ;dans.c: 214: average = total / numReadings;
 23662                           
 23663                           ; BSR set to: 0
 23664  013CD2  C144  F060         	movff	_total,___awdiv@dividend
 23665  013CD6  C145  F061         	movff	_total+1,___awdiv@dividend+1
 23666  013CDA  C1F7  F062         	movff	_numReadings,___awdiv@divisor
 23667  013CDE  C1F8  F063         	movff	_numReadings+1,___awdiv@divisor+1
 23668  013CE2  ECA3  F0BB         	call	___awdiv	;wreg free
 23669  013CE6  C060  F02C         	movff	?___awdiv,_average
 23670  013CEA  C061  F02D         	movff	?___awdiv+1,_average+1
 23671                           
 23672                           ;dans.c: 215: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 23673  013CEE  C02C  F060         	movff	_average,___xxtofl@val
 23674  013CF2  C02D  F061         	movff	_average+1,___xxtofl@val+1
 23675  013CF6  0100               	movlb	0	; () banked
 23676  013CF8  0E00               	movlw	0
 23677  013CFA  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 23678  013CFC  0EFF               	movlw	-1
 23679  013CFE  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 23680  013D00  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 23681  013D02  0E01               	movlw	1
 23682  013D04  ECF3  F0AD         	call	___xxtofl
 23683  013D08  C060  F0D9         	movff	?___xxtofl,_ADCAverage$15866
 23684  013D0C  C061  F0DA         	movff	?___xxtofl+1,_ADCAverage$15866+1
 23685  013D10  C062  F0DB         	movff	?___xxtofl+2,_ADCAverage$15866+2
 23686  013D14  C063  F0DC         	movff	?___xxtofl+3,_ADCAverage$15866+3
 23687                           
 23688                           ;dans.c: 215: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 23689  013D18  0E00               	movlw	0
 23690  013D1A  0100               	movlb	0	; () banked
 23691  013D1C  6FC6               	movwf	pow@y& (0+255),b
 23692  013D1E  0E00               	movlw	0
 23693  013D20  6FC7               	movwf	(pow@y+1)& (0+255),b
 23694  013D22  0E00               	movlw	0
 23695  013D24  6FC8               	movwf	(pow@y+2)& (0+255),b
 23696  013D26  0E40               	movlw	64
 23697  013D28  6FC9               	movwf	(pow@y+3)& (0+255),b
 23698  013D2A  C0D9  F0C2         	movff	_ADCAverage$15866,pow@x
 23699  013D2E  C0DA  F0C3         	movff	_ADCAverage$15866+1,pow@x+1
 23700  013D32  C0DB  F0C4         	movff	_ADCAverage$15866+2,pow@x+2
 23701  013D36  C0DC  F0C5         	movff	_ADCAverage$15866+3,pow@x+3
 23702  013D3A  ECE1  F0A6         	call	_pow	;wreg free
 23703  013D3E  C0C2  F0DD         	movff	?_pow,_ADCAverage$15867
 23704  013D42  C0C3  F0DE         	movff	?_pow+1,_ADCAverage$15867+1
 23705  013D46  C0C4  F0DF         	movff	?_pow+2,_ADCAverage$15867+2
 23706  013D4A  C0C5  F0E0         	movff	?_pow+3,_ADCAverage$15867+3
 23707                           
 23708                           ;dans.c: 215: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 23709  013D4E  C02C  F060         	movff	_average,___xxtofl@val
 23710  013D52  C02D  F061         	movff	_average+1,___xxtofl@val+1
 23711  013D56  0100               	movlb	0	; () banked
 23712  013D58  0E00               	movlw	0
 23713  013D5A  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 23714  013D5C  0EFF               	movlw	-1
 23715  013D5E  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 23716  013D60  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 23717  013D62  0E01               	movlw	1
 23718  013D64  ECF3  F0AD         	call	___xxtofl
 23719  013D68  C060  F0E1         	movff	?___xxtofl,_ADCAverage$15868
 23720  013D6C  C061  F0E2         	movff	?___xxtofl+1,_ADCAverage$15868+1
 23721  013D70  C062  F0E3         	movff	?___xxtofl+2,_ADCAverage$15868+2
 23722  013D74  C063  F0E4         	movff	?___xxtofl+3,_ADCAverage$15868+3
 23723                           
 23724                           ;dans.c: 215: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 23725  013D78  0E00               	movlw	0
 23726  013D7A  0100               	movlb	0	; () banked
 23727  013D7C  6FC6               	movwf	pow@y& (0+255),b
 23728  013D7E  0E00               	movlw	0
 23729  013D80  6FC7               	movwf	(pow@y+1)& (0+255),b
 23730  013D82  0E40               	movlw	64
 23731  013D84  6FC8               	movwf	(pow@y+2)& (0+255),b
 23732  013D86  0E40               	movlw	64
 23733  013D88  6FC9               	movwf	(pow@y+3)& (0+255),b
 23734  013D8A  C0E1  F0C2         	movff	_ADCAverage$15868,pow@x
 23735  013D8E  C0E2  F0C3         	movff	_ADCAverage$15868+1,pow@x+1
 23736  013D92  C0E3  F0C4         	movff	_ADCAverage$15868+2,pow@x+2
 23737  013D96  C0E4  F0C5         	movff	_ADCAverage$15868+3,pow@x+3
 23738  013D9A  ECE1  F0A6         	call	_pow	;wreg free
 23739  013D9E  C0C2  F0E5         	movff	?_pow,_ADCAverage$15869
 23740  013DA2  C0C3  F0E6         	movff	?_pow+1,_ADCAverage$15869+1
 23741  013DA6  C0C4  F0E7         	movff	?_pow+2,_ADCAverage$15869+2
 23742  013DAA  C0C5  F0E8         	movff	?_pow+3,_ADCAverage$15869+3
 23743                           
 23744                           ;dans.c: 215: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 23745  013DAE  0EA6               	movlw	166
 23746  013DB0  0100               	movlb	0	; () banked
 23747  013DB2  6F72               	movwf	___flmul@a& (0+255),b
 23748  013DB4  0E9B               	movlw	155
 23749  013DB6  6F73               	movwf	(___flmul@a+1)& (0+255),b
 23750  013DB8  0EC4               	movlw	196
 23751  013DBA  6F74               	movwf	(___flmul@a+2)& (0+255),b
 23752  013DBC  0E3A               	movlw	58
 23753  013DBE  6F75               	movwf	(___flmul@a+3)& (0+255),b
 23754  013DC0  C0DD  F06E         	movff	_ADCAverage$15867,___flmul@b
 23755  013DC4  C0DE  F06F         	movff	_ADCAverage$15867+1,___flmul@b+1
 23756  013DC8  C0DF  F070         	movff	_ADCAverage$15867+2,___flmul@b+2
 23757  013DCC  C0E0  F071         	movff	_ADCAverage$15867+3,___flmul@b+3
 23758  013DD0  ECC4  F09A         	call	___flmul	;wreg free
 23759  013DD4  C06E  F08F         	movff	?___flmul,___fladd@a
 23760  013DD8  C06F  F090         	movff	?___flmul+1,___fladd@a+1
 23761  013DDC  C070  F091         	movff	?___flmul+2,___fladd@a+2
 23762  013DE0  C071  F092         	movff	?___flmul+3,___fladd@a+3
 23763  013DE4  0E87               	movlw	135
 23764  013DE6  0100               	movlb	0	; () banked
 23765  013DE8  6F72               	movwf	___flmul@a& (0+255),b
 23766  013DEA  0E97               	movlw	151
 23767  013DEC  6F73               	movwf	(___flmul@a+1)& (0+255),b
 23768  013DEE  0E71               	movlw	113
 23769  013DF0  6F74               	movwf	(___flmul@a+2)& (0+255),b
 23770  013DF2  0EB5               	movlw	181
 23771  013DF4  6F75               	movwf	(___flmul@a+3)& (0+255),b
 23772  013DF6  C0E5  F06E         	movff	_ADCAverage$15869,___flmul@b
 23773  013DFA  C0E6  F06F         	movff	_ADCAverage$15869+1,___flmul@b+1
 23774  013DFE  C0E7  F070         	movff	_ADCAverage$15869+2,___flmul@b+2
 23775  013E02  C0E8  F071         	movff	_ADCAverage$15869+3,___flmul@b+3
 23776  013E06  ECC4  F09A         	call	___flmul	;wreg free
 23777  013E0A  C06E  F08B         	movff	?___flmul,___fladd@b
 23778  013E0E  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 23779  013E12  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 23780  013E16  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 23781  013E1A  EC6D  F09C         	call	___fladd	;wreg free
 23782  013E1E  C08B  F0E9         	movff	?___fladd,_ADCAverage$15870
 23783  013E22  C08C  F0EA         	movff	?___fladd+1,_ADCAverage$15870+1
 23784  013E26  C08D  F0EB         	movff	?___fladd+2,_ADCAverage$15870+2
 23785  013E2A  C08E  F0EC         	movff	?___fladd+3,_ADCAverage$15870+3
 23786                           
 23787                           ;dans.c: 215: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 23788  013E2E  0E8C               	movlw	140
 23789  013E30  0100               	movlb	0	; () banked
 23790  013E32  6F72               	movwf	___flmul@a& (0+255),b
 23791  013E34  0EB9               	movlw	185
 23792  013E36  6F73               	movwf	(___flmul@a+1)& (0+255),b
 23793  013E38  0E6B               	movlw	107
 23794  013E3A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 23795  013E3C  0E3F               	movlw	63
 23796  013E3E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 23797  013E40  C02C  F060         	movff	_average,___xxtofl@val
 23798  013E44  C02D  F061         	movff	_average+1,___xxtofl@val+1
 23799  013E48  0E00               	movlw	0
 23800  013E4A  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 23801  013E4C  0EFF               	movlw	-1
 23802  013E4E  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 23803  013E50  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 23804  013E52  0E01               	movlw	1
 23805  013E54  ECF3  F0AD         	call	___xxtofl
 23806  013E58  C060  F06E         	movff	?___xxtofl,___flmul@b
 23807  013E5C  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 23808  013E60  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 23809  013E64  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 23810  013E68  ECC4  F09A         	call	___flmul	;wreg free
 23811  013E6C  C06E  F087         	movff	?___flmul,___flneg@f1
 23812  013E70  C06F  F088         	movff	?___flmul+1,___flneg@f1+1
 23813  013E74  C070  F089         	movff	?___flmul+2,___flneg@f1+2
 23814  013E78  C071  F08A         	movff	?___flmul+3,___flneg@f1+3
 23815  013E7C  EC5B  F0C5         	call	___flneg	;wreg free
 23816  013E80  C087  F08F         	movff	?___flneg,___fladd@a
 23817  013E84  C088  F090         	movff	?___flneg+1,___fladd@a+1
 23818  013E88  C089  F091         	movff	?___flneg+2,___fladd@a+2
 23819  013E8C  C08A  F092         	movff	?___flneg+3,___fladd@a+3
 23820  013E90  C0E9  F08B         	movff	_ADCAverage$15870,___fladd@b
 23821  013E94  C0EA  F08C         	movff	_ADCAverage$15870+1,___fladd@b+1
 23822  013E98  C0EB  F08D         	movff	_ADCAverage$15870+2,___fladd@b+2
 23823  013E9C  C0EC  F08E         	movff	_ADCAverage$15870+3,___fladd@b+3
 23824  013EA0  EC6D  F09C         	call	___fladd	;wreg free
 23825  013EA4  C08B  F0ED         	movff	?___fladd,_ADCAverage$15871
 23826  013EA8  C08C  F0EE         	movff	?___fladd+1,_ADCAverage$15871+1
 23827  013EAC  C08D  F0EF         	movff	?___fladd+2,_ADCAverage$15871+2
 23828  013EB0  C08E  F0F0         	movff	?___fladd+3,_ADCAverage$15871+3
 23829                           
 23830                           ;dans.c: 215: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 23831  013EB4  0E7B               	movlw	123
 23832  013EB6  0100               	movlb	0	; () banked
 23833  013EB8  6F8F               	movwf	___fladd@a& (0+255),b
 23834  013EBA  0E54               	movlw	84
 23835  013EBC  6F90               	movwf	(___fladd@a+1)& (0+255),b
 23836  013EBE  0E63               	movlw	99
 23837  013EC0  6F91               	movwf	(___fladd@a+2)& (0+255),b
 23838  013EC2  0E43               	movlw	67
 23839  013EC4  6F92               	movwf	(___fladd@a+3)& (0+255),b
 23840  013EC6  C0ED  F08B         	movff	_ADCAverage$15871,___fladd@b
 23841  013ECA  C0EE  F08C         	movff	_ADCAverage$15871+1,___fladd@b+1
 23842  013ECE  C0EF  F08D         	movff	_ADCAverage$15871+2,___fladd@b+2
 23843  013ED2  C0F0  F08E         	movff	_ADCAverage$15871+3,___fladd@b+3
 23844  013ED6  EC6D  F09C         	call	___fladd	;wreg free
 23845  013EDA  C08B  F09F         	movff	?___fladd,___fltol@f1
 23846  013EDE  C08C  F0A0         	movff	?___fladd+1,___fltol@f1+1
 23847  013EE2  C08D  F0A1         	movff	?___fladd+2,___fltol@f1+2
 23848  013EE6  C08E  F0A2         	movff	?___fladd+3,___fltol@f1+3
 23849  013EEA  ECE4  F0B5         	call	___fltol	;wreg free
 23850  013EEE  C09F  F02C         	movff	?___fltol,_average
 23851  013EF2  C0A0  F02D         	movff	?___fltol+1,_average+1
 23852                           
 23853                           ;dans.c: 218: HMI_SetNumber(average);
 23854  013EF6  C02C  F076         	movff	_average,HMI_SetNumber@pInput
 23855  013EFA  C02D  F077         	movff	_average+1,HMI_SetNumber@pInput+1
 23856  013EFE  EC1F  F0C6         	call	_HMI_SetNumber	;wreg free
 23857                           
 23858                           ;dans.c: 219: HMI_Render();
 23859  013F02  ECC2  F0C4         	call	_HMI_Render	;wreg free
 23860  013F06  0012               	return	
 23861  013F08                     __end_of_ADCAverage:
 23862                           	opt stack 0
 23863                           tosu	equ	0xFFF
 23864                           tosh	equ	0xFFE
 23865                           tosl	equ	0xFFD
 23866                           pclath	equ	0xFFA
 23867                           tblptru	equ	0xFF8
 23868                           tblptrh	equ	0xFF7
 23869                           tblptrl	equ	0xFF6
 23870                           tablat	equ	0xFF5
 23871                           prodh	equ	0xFF4
 23872                           prodl	equ	0xFF3
 23873                           intcon	equ	0xFF2
 23874                           indf0	equ	0xFEF
 23875                           postinc0	equ	0xFEE
 23876                           fsr0h	equ	0xFEA
 23877                           fsr0l	equ	0xFE9
 23878                           wreg	equ	0xFE8
 23879                           indf1	equ	0xFE7
 23880                           postdec1	equ	0xFE5
 23881                           fsr1h	equ	0xFE2
 23882                           fsr1l	equ	0xFE1
 23883                           indf2	equ	0xFDF
 23884                           postinc2	equ	0xFDE
 23885                           postdec2	equ	0xFDD
 23886                           plusw2	equ	0xFDB
 23887                           fsr2h	equ	0xFDA
 23888                           fsr2l	equ	0xFD9
 23889                           status	equ	0xFD8
 23890                           
 23891 ;; *************** function _pow *****************
 23892 ;; Defined at:
 23893 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\pow.c"
 23894 ;; Parameters:    Size  Location     Type
 23895 ;;  x               4   98[BANK0 ] int 
 23896 ;;  y               4  102[BANK0 ] int 
 23897 ;; Auto vars:     Size  Location     Type
 23898 ;;  yi              4  115[BANK0 ] unsigned long 
 23899 ;;  sign            1  114[BANK0 ] unsigned char 
 23900 ;; Return value:  Size  Location     Type
 23901 ;;                  4   98[BANK0 ] unsigned char 
 23902 ;; Registers used:
 23903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23904 ;; Tracked objects:
 23905 ;;		On entry : 0/0
 23906 ;;		On exit  : 0/0
 23907 ;;		Unchanged: 0/0
 23908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23909 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23910 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23912 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23913 ;;Total ram usage:       21 bytes
 23914 ;; Hardware stack levels used:    1
 23915 ;; Hardware stack levels required when called:   10
 23916 ;; This function calls:
 23917 ;;		___flge
 23918 ;;		___flmul
 23919 ;;		___flneg
 23920 ;;		___fltol
 23921 ;;		___xxtofl
 23922 ;;		_exp
 23923 ;;		_log
 23924 ;; This function is called by:
 23925 ;;		_ADCAverage
 23926 ;; This function uses a non-reentrant model
 23927 ;;
 23928                           
 23929                           	psect	text96
 23930  014DC2                     __ptext96:
 23931                           	opt stack 0
 23932  014DC2                     _pow:
 23933                           	opt stack 18
 23934                           
 23935                           ;incstack = 0
 23936  014DC2  0E00               	movlw	0
 23937  014DC4  0100               	movlb	0	; () banked
 23938  014DC6  6FD2               	movwf	pow@sign& (0+255),b
 23939                           
 23940                           ; BSR set to: 0
 23941  014DC8  51C2               	movf	pow@x& (0+255),w,b
 23942  014DCA  11C3               	iorwf	(pow@x+1)& (0+255),w,b
 23943  014DCC  11C4               	iorwf	(pow@x+2)& (0+255),w,b
 23944  014DCE  11C5               	iorwf	(pow@x+3)& (0+255),w,b
 23945  014DD0  A4D8               	btfss	status,2,c
 23946  014DD2  D024               	goto	l3050
 23947                           
 23948                           ; BSR set to: 0
 23949  014DD4  0E00               	movlw	0
 23950  014DD6  6F60               	movwf	___flge@ff1& (0+255),b
 23951  014DD8  0E00               	movlw	0
 23952  014DDA  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 23953  014DDC  0E00               	movlw	0
 23954  014DDE  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 23955  014DE0  0E00               	movlw	0
 23956  014DE2  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 23957  014DE4  C0C6  F064         	movff	pow@y,___flge@ff2
 23958  014DE8  C0C7  F065         	movff	pow@y+1,___flge@ff2+1
 23959  014DEC  C0C8  F066         	movff	pow@y+2,___flge@ff2+2
 23960  014DF0  C0C9  F067         	movff	pow@y+3,___flge@ff2+3
 23961  014DF4  EC61  F0B2         	call	___flge	;wreg free
 23962  014DF8  0100               	movlb	0	; () banked
 23963  014DFA  A0D8               	btfss	status,0,c
 23964  014DFC  D005               	goto	l3051
 23965                           
 23966                           ; BSR set to: 0
 23967  014DFE  0E00               	movlw	0
 23968  014E00  0101               	movlb	1	; () banked
 23969  014E02  6F1B               	movwf	(_errno+1)& (0+255),b
 23970  014E04  0E21               	movlw	33
 23971  014E06  6F1A               	movwf	_errno& (0+255),b
 23972  014E08                     l3051:
 23973  014E08  0E00               	movlw	0
 23974  014E0A  0100               	movlb	0	; () banked
 23975  014E0C  6FC2               	movwf	?_pow& (0+255),b
 23976  014E0E  0E00               	movlw	0
 23977  014E10  6FC3               	movwf	(?_pow+1)& (0+255),b
 23978  014E12  0E00               	movlw	0
 23979  014E14  6FC4               	movwf	(?_pow+2)& (0+255),b
 23980  014E16  0E00               	movlw	0
 23981  014E18  6FC5               	movwf	(?_pow+3)& (0+255),b
 23982                           
 23983                           ; BSR set to: 0
 23984  014E1A  0012               	return	
 23985  014E1C                     l3050:
 23986                           
 23987                           ; BSR set to: 0
 23988                           
 23989                           ; BSR set to: 0
 23990  014E1C  51C6               	movf	pow@y& (0+255),w,b
 23991  014E1E  11C7               	iorwf	(pow@y+1)& (0+255),w,b
 23992  014E20  11C8               	iorwf	(pow@y+2)& (0+255),w,b
 23993  014E22  11C9               	iorwf	(pow@y+3)& (0+255),w,b
 23994  014E24  A4D8               	btfss	status,2,c
 23995  014E26  D009               	goto	l3053
 23996                           
 23997                           ; BSR set to: 0
 23998  014E28  0E00               	movlw	0
 23999  014E2A  6FC2               	movwf	?_pow& (0+255),b
 24000  014E2C  0E00               	movlw	0
 24001  014E2E  6FC3               	movwf	(?_pow+1)& (0+255),b
 24002  014E30  0E80               	movlw	128
 24003  014E32  6FC4               	movwf	(?_pow+2)& (0+255),b
 24004  014E34  0E3F               	movlw	63
 24005  014E36  6FC5               	movwf	(?_pow+3)& (0+255),b
 24006                           
 24007                           ; BSR set to: 0
 24008  014E38  0012               	return	
 24009  014E3A                     l3053:
 24010                           
 24011                           ; BSR set to: 0
 24012                           
 24013                           ; BSR set to: 0
 24014  014E3A  AFC5               	btfss	(pow@x+3)& (0+255),7,b
 24015  014E3C  D04F               	goto	l3054
 24016                           
 24017                           ; BSR set to: 0
 24018  014E3E  C0C6  F09F         	movff	pow@y,___fltol@f1
 24019  014E42  C0C7  F0A0         	movff	pow@y+1,___fltol@f1+1
 24020  014E46  C0C8  F0A1         	movff	pow@y+2,___fltol@f1+2
 24021  014E4A  C0C9  F0A2         	movff	pow@y+3,___fltol@f1+3
 24022  014E4E  ECE4  F0B5         	call	___fltol	;wreg free
 24023  014E52  C09F  F0D3         	movff	?___fltol,pow@yi
 24024  014E56  C0A0  F0D4         	movff	?___fltol+1,pow@yi+1
 24025  014E5A  C0A1  F0D5         	movff	?___fltol+2,pow@yi+2
 24026  014E5E  C0A2  F0D6         	movff	?___fltol+3,pow@yi+3
 24027  014E62  C0D3  F060         	movff	pow@yi,___xxtofl@val
 24028  014E66  C0D4  F061         	movff	pow@yi+1,___xxtofl@val+1
 24029  014E6A  C0D5  F062         	movff	pow@yi+2,___xxtofl@val+2
 24030  014E6E  C0D6  F063         	movff	pow@yi+3,___xxtofl@val+3
 24031  014E72  0E00               	movlw	0
 24032  014E74  ECF3  F0AD         	call	___xxtofl
 24033  014E78  0100               	movlb	0	; () banked
 24034  014E7A  51C6               	movf	pow@y& (0+255),w,b
 24035  014E7C  1960               	xorwf	?___xxtofl& (0+255),w,b
 24036  014E7E  E10A               	bnz	u13130
 24037  014E80  51C7               	movf	(pow@y+1)& (0+255),w,b
 24038  014E82  1961               	xorwf	(?___xxtofl+1)& (0+255),w,b
 24039  014E84  E107               	bnz	u13130
 24040  014E86  51C8               	movf	(pow@y+2)& (0+255),w,b
 24041  014E88  1962               	xorwf	(?___xxtofl+2)& (0+255),w,b
 24042  014E8A  E104               	bnz	u13130
 24043  014E8C  51C9               	movf	(pow@y+3)& (0+255),w,b
 24044  014E8E  1963               	xorwf	(?___xxtofl+3)& (0+255),w,b
 24045  014E90  B4D8               	btfsc	status,2,c
 24046  014E92  D00F               	goto	l3055
 24047  014E94                     u13130:
 24048                           
 24049                           ; BSR set to: 0
 24050  014E94  0E00               	movlw	0
 24051  014E96  0101               	movlb	1	; () banked
 24052  014E98  6F1B               	movwf	(_errno+1)& (0+255),b
 24053  014E9A  0E21               	movlw	33
 24054  014E9C  6F1A               	movwf	_errno& (0+255),b
 24055  014E9E  0E00               	movlw	0
 24056  014EA0  0100               	movlb	0	; () banked
 24057  014EA2  6FC2               	movwf	?_pow& (0+255),b
 24058  014EA4  0E00               	movlw	0
 24059  014EA6  6FC3               	movwf	(?_pow+1)& (0+255),b
 24060  014EA8  0E00               	movlw	0
 24061  014EAA  6FC4               	movwf	(?_pow+2)& (0+255),b
 24062  014EAC  0E00               	movlw	0
 24063  014EAE  6FC5               	movwf	(?_pow+3)& (0+255),b
 24064                           
 24065                           ; BSR set to: 0
 24066  014EB0  0012               	return	
 24067  014EB2                     l3055:
 24068                           
 24069                           ; BSR set to: 0
 24070                           
 24071                           ; BSR set to: 0
 24072  014EB2  51D3               	movf	pow@yi& (0+255),w,b
 24073  014EB4  0B01               	andlw	1
 24074  014EB6  6FD2               	movwf	pow@sign& (0+255),b
 24075                           
 24076                           ; BSR set to: 0
 24077  014EB8  C0C2  F087         	movff	pow@x,___flneg@f1
 24078  014EBC  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 24079  014EC0  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 24080  014EC4  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 24081  014EC8  EC5B  F0C5         	call	___flneg	;wreg free
 24082  014ECC  C087  F0C2         	movff	?___flneg,pow@x
 24083  014ED0  C088  F0C3         	movff	?___flneg+1,pow@x+1
 24084  014ED4  C089  F0C4         	movff	?___flneg+2,pow@x+2
 24085  014ED8  C08A  F0C5         	movff	?___flneg+3,pow@x+3
 24086  014EDC                     l3054:
 24087  014EDC  C0C2  F0AF         	movff	pow@x,log@x
 24088  014EE0  C0C3  F0B0         	movff	pow@x+1,log@x+1
 24089  014EE4  C0C4  F0B1         	movff	pow@x+2,log@x+2
 24090  014EE8  C0C5  F0B2         	movff	pow@x+3,log@x+3
 24091  014EEC  ECD6  F0AB         	call	_log	;wreg free
 24092  014EF0  C0AF  F0CA         	movff	?_log,_pow$15872
 24093  014EF4  C0B0  F0CB         	movff	?_log+1,_pow$15872+1
 24094  014EF8  C0B1  F0CC         	movff	?_log+2,_pow$15872+2
 24095  014EFC  C0B2  F0CD         	movff	?_log+3,_pow$15872+3
 24096  014F00  C0CA  F06E         	movff	_pow$15872,___flmul@b
 24097  014F04  C0CB  F06F         	movff	_pow$15872+1,___flmul@b+1
 24098  014F08  C0CC  F070         	movff	_pow$15872+2,___flmul@b+2
 24099  014F0C  C0CD  F071         	movff	_pow$15872+3,___flmul@b+3
 24100  014F10  C0C6  F072         	movff	pow@y,___flmul@a
 24101  014F14  C0C7  F073         	movff	pow@y+1,___flmul@a+1
 24102  014F18  C0C8  F074         	movff	pow@y+2,___flmul@a+2
 24103  014F1C  C0C9  F075         	movff	pow@y+3,___flmul@a+3
 24104  014F20  ECC4  F09A         	call	___flmul	;wreg free
 24105  014F24  C06E  F0CE         	movff	?___flmul,_pow$15873
 24106  014F28  C06F  F0CF         	movff	?___flmul+1,_pow$15873+1
 24107  014F2C  C070  F0D0         	movff	?___flmul+2,_pow$15873+2
 24108  014F30  C071  F0D1         	movff	?___flmul+3,_pow$15873+3
 24109  014F34  C0CE  F0B7         	movff	_pow$15873,exp@x
 24110  014F38  C0CF  F0B8         	movff	_pow$15873+1,exp@x+1
 24111  014F3C  C0D0  F0B9         	movff	_pow$15873+2,exp@x+2
 24112  014F40  C0D1  F0BA         	movff	_pow$15873+3,exp@x+3
 24113  014F44  EC76  F0A3         	call	_exp	;wreg free
 24114  014F48  C0B7  F0C2         	movff	?_exp,pow@x
 24115  014F4C  C0B8  F0C3         	movff	?_exp+1,pow@x+1
 24116  014F50  C0B9  F0C4         	movff	?_exp+2,pow@x+2
 24117  014F54  C0BA  F0C5         	movff	?_exp+3,pow@x+3
 24118  014F58  0100               	movlb	0	; () banked
 24119  014F5A  51D2               	movf	pow@sign& (0+255),w,b
 24120  014F5C  B4D8               	btfsc	status,2,c
 24121  014F5E  D013               	goto	l3056
 24122                           
 24123                           ; BSR set to: 0
 24124  014F60  C0C2  F087         	movff	pow@x,___flneg@f1
 24125  014F64  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 24126  014F68  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 24127  014F6C  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 24128  014F70  EC5B  F0C5         	call	___flneg	;wreg free
 24129  014F74  C087  F0C2         	movff	?___flneg,?_pow
 24130  014F78  C088  F0C3         	movff	?___flneg+1,?_pow+1
 24131  014F7C  C089  F0C4         	movff	?___flneg+2,?_pow+2
 24132  014F80  C08A  F0C5         	movff	?___flneg+3,?_pow+3
 24133  014F84  0012               	return	
 24134  014F86                     l3056:
 24135                           
 24136                           ; BSR set to: 0
 24137  014F86  C0C2  F0C2         	movff	pow@x,?_pow
 24138  014F8A  C0C3  F0C3         	movff	pow@x+1,?_pow+1
 24139  014F8E  C0C4  F0C4         	movff	pow@x+2,?_pow+2
 24140  014F92  C0C5  F0C5         	movff	pow@x+3,?_pow+3
 24141  014F96  0012               	return		;funcret
 24142  014F98                     __end_of_pow:
 24143                           	opt stack 0
 24144                           tosu	equ	0xFFF
 24145                           tosh	equ	0xFFE
 24146                           tosl	equ	0xFFD
 24147                           pclath	equ	0xFFA
 24148                           tblptru	equ	0xFF8
 24149                           tblptrh	equ	0xFF7
 24150                           tblptrl	equ	0xFF6
 24151                           tablat	equ	0xFF5
 24152                           prodh	equ	0xFF4
 24153                           prodl	equ	0xFF3
 24154                           intcon	equ	0xFF2
 24155                           indf0	equ	0xFEF
 24156                           postinc0	equ	0xFEE
 24157                           fsr0h	equ	0xFEA
 24158                           fsr0l	equ	0xFE9
 24159                           wreg	equ	0xFE8
 24160                           indf1	equ	0xFE7
 24161                           postdec1	equ	0xFE5
 24162                           fsr1h	equ	0xFE2
 24163                           fsr1l	equ	0xFE1
 24164                           indf2	equ	0xFDF
 24165                           postinc2	equ	0xFDE
 24166                           postdec2	equ	0xFDD
 24167                           plusw2	equ	0xFDB
 24168                           fsr2h	equ	0xFDA
 24169                           fsr2l	equ	0xFD9
 24170                           status	equ	0xFD8
 24171                           
 24172 ;; *************** function _log *****************
 24173 ;; Defined at:
 24174 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\log.c"
 24175 ;; Parameters:    Size  Location     Type
 24176 ;;  x               4   79[BANK0 ] unsigned char 
 24177 ;; Auto vars:     Size  Location     Type
 24178 ;;  exponent        2   83[BANK0 ] int 
 24179 ;; Return value:  Size  Location     Type
 24180 ;;                  4   79[BANK0 ] int 
 24181 ;; Registers used:
 24182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24183 ;; Tracked objects:
 24184 ;;		On entry : 0/0
 24185 ;;		On exit  : 0/0
 24186 ;;		Unchanged: 0/0
 24187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24188 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24189 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24191 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24192 ;;Total ram usage:        6 bytes
 24193 ;; Hardware stack levels used:    1
 24194 ;; Hardware stack levels required when called:    9
 24195 ;; This function calls:
 24196 ;;		___fladd
 24197 ;;		___flmul
 24198 ;;		___xxtofl
 24199 ;;		_eval_poly
 24200 ;;		_frexp
 24201 ;; This function is called by:
 24202 ;;		_pow
 24203 ;; This function uses a non-reentrant model
 24204 ;;
 24205                           
 24206                           	psect	text97
 24207  0157AC                     __ptext97:
 24208                           	opt stack 0
 24209  0157AC                     _log:
 24210                           	opt stack 18
 24211                           
 24212                           ;incstack = 0
 24213  0157AC  0100               	movlb	0	; () banked
 24214  0157AE  AFB2               	btfss	(log@x+3)& (0+255),7,b
 24215  0157B0  D00F               	goto	l3252
 24216                           
 24217                           ; BSR set to: 0
 24218  0157B2  0E00               	movlw	0
 24219  0157B4  0101               	movlb	1	; () banked
 24220  0157B6  6F1B               	movwf	(_errno+1)& (0+255),b
 24221  0157B8  0E21               	movlw	33
 24222  0157BA  6F1A               	movwf	_errno& (0+255),b
 24223  0157BC  0E00               	movlw	0
 24224  0157BE  0100               	movlb	0	; () banked
 24225  0157C0  6FAF               	movwf	?_log& (0+255),b
 24226  0157C2  0E00               	movlw	0
 24227  0157C4  6FB0               	movwf	(?_log+1)& (0+255),b
 24228  0157C6  0E00               	movlw	0
 24229  0157C8  6FB1               	movwf	(?_log+2)& (0+255),b
 24230  0157CA  0E00               	movlw	0
 24231  0157CC  6FB2               	movwf	(?_log+3)& (0+255),b
 24232                           
 24233                           ; BSR set to: 0
 24234  0157CE  0012               	return	
 24235  0157D0                     l3252:
 24236                           
 24237                           ; BSR set to: 0
 24238                           
 24239                           ; BSR set to: 0
 24240  0157D0  51AF               	movf	log@x& (0+255),w,b
 24241  0157D2  11B0               	iorwf	(log@x+1)& (0+255),w,b
 24242  0157D4  11B1               	iorwf	(log@x+2)& (0+255),w,b
 24243  0157D6  11B2               	iorwf	(log@x+3)& (0+255),w,b
 24244  0157D8  A4D8               	btfss	status,2,c
 24245  0157DA  D00F               	goto	l3254
 24246                           
 24247                           ; BSR set to: 0
 24248  0157DC  0E00               	movlw	0
 24249  0157DE  0101               	movlb	1	; () banked
 24250  0157E0  6F1B               	movwf	(_errno+1)& (0+255),b
 24251  0157E2  0E22               	movlw	34
 24252  0157E4  6F1A               	movwf	_errno& (0+255),b
 24253  0157E6  0E00               	movlw	0
 24254  0157E8  0100               	movlb	0	; () banked
 24255  0157EA  6FAF               	movwf	?_log& (0+255),b
 24256  0157EC  0E00               	movlw	0
 24257  0157EE  6FB0               	movwf	(?_log+1)& (0+255),b
 24258  0157F0  0E00               	movlw	0
 24259  0157F2  6FB1               	movwf	(?_log+2)& (0+255),b
 24260  0157F4  0E00               	movlw	0
 24261  0157F6  6FB2               	movwf	(?_log+3)& (0+255),b
 24262                           
 24263                           ; BSR set to: 0
 24264  0157F8  0012               	return	
 24265  0157FA                     l3254:
 24266                           
 24267                           ; BSR set to: 0
 24268                           
 24269                           ; BSR set to: 0
 24270  0157FA  0E00               	movlw	0
 24271  0157FC  6F72               	movwf	___flmul@a& (0+255),b
 24272  0157FE  0E00               	movlw	0
 24273  015800  6F73               	movwf	(___flmul@a+1)& (0+255),b
 24274  015802  0E00               	movlw	0
 24275  015804  6F74               	movwf	(___flmul@a+2)& (0+255),b
 24276  015806  0E40               	movlw	64
 24277  015808  6F75               	movwf	(___flmul@a+3)& (0+255),b
 24278  01580A  0EB3               	movlw	low log@exponent
 24279  01580C  6F64               	movwf	frexp@eptr& (0+255),b
 24280  01580E  0E00               	movlw	high log@exponent
 24281  015810  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 24282  015812  C0AF  F060         	movff	log@x,frexp@value
 24283  015816  C0B0  F061         	movff	log@x+1,frexp@value+1
 24284  01581A  C0B1  F062         	movff	log@x+2,frexp@value+2
 24285  01581E  C0B2  F063         	movff	log@x+3,frexp@value+3
 24286  015822  ECCA  F0B8         	call	_frexp	;wreg free
 24287  015826  C060  F06E         	movff	?_frexp,___flmul@b
 24288  01582A  C061  F06F         	movff	?_frexp+1,___flmul@b+1
 24289  01582E  C062  F070         	movff	?_frexp+2,___flmul@b+2
 24290  015832  C063  F071         	movff	?_frexp+3,___flmul@b+3
 24291  015836  ECC4  F09A         	call	___flmul	;wreg free
 24292  01583A  C06E  F08B         	movff	?___flmul,___fladd@b
 24293  01583E  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 24294  015842  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 24295  015846  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 24296  01584A  0E00               	movlw	0
 24297  01584C  0100               	movlb	0	; () banked
 24298  01584E  6F8F               	movwf	___fladd@a& (0+255),b
 24299  015850  0E00               	movlw	0
 24300  015852  6F90               	movwf	(___fladd@a+1)& (0+255),b
 24301  015854  0E80               	movlw	128
 24302  015856  6F91               	movwf	(___fladd@a+2)& (0+255),b
 24303  015858  0EBF               	movlw	191
 24304  01585A  6F92               	movwf	(___fladd@a+3)& (0+255),b
 24305  01585C  EC6D  F09C         	call	___fladd	;wreg free
 24306  015860  C08B  F0AF         	movff	?___fladd,log@x
 24307  015864  C08C  F0B0         	movff	?___fladd+1,log@x+1
 24308  015868  C08D  F0B1         	movff	?___fladd+2,log@x+2
 24309  01586C  C08E  F0B2         	movff	?___fladd+3,log@x+3
 24310  015870  0100               	movlb	0	; () banked
 24311  015872  07B3               	decf	log@exponent& (0+255),f,b
 24312  015874  A0D8               	btfss	status,0,c
 24313  015876  07B4               	decf	(log@exponent+1)& (0+255),f,b
 24314                           
 24315                           ; BSR set to: 0
 24316  015878  C0AF  F09F         	movff	log@x,eval_poly@x
 24317  01587C  C0B0  F0A0         	movff	log@x+1,eval_poly@x+1
 24318  015880  C0B1  F0A1         	movff	log@x+2,eval_poly@x+2
 24319  015884  C0B2  F0A2         	movff	log@x+3,eval_poly@x+3
 24320  015888  0E2F               	movlw	low log@coeff
 24321  01588A  6FA3               	movwf	eval_poly@d& (0+255),b
 24322  01588C  0EFE               	movlw	high log@coeff
 24323  01588E  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 24324  015890  0E00               	movlw	0
 24325  015892  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 24326  015894  0E08               	movlw	8
 24327  015896  6FA5               	movwf	eval_poly@n& (0+255),b
 24328  015898  EC03  F0B4         	call	_eval_poly	;wreg free
 24329  01589C  C09F  F0AF         	movff	?_eval_poly,log@x
 24330  0158A0  C0A0  F0B0         	movff	?_eval_poly+1,log@x+1
 24331  0158A4  C0A1  F0B1         	movff	?_eval_poly+2,log@x+2
 24332  0158A8  C0A2  F0B2         	movff	?_eval_poly+3,log@x+3
 24333  0158AC  0E18               	movlw	24
 24334  0158AE  0100               	movlb	0	; () banked
 24335  0158B0  6F72               	movwf	___flmul@a& (0+255),b
 24336  0158B2  0E72               	movlw	114
 24337  0158B4  6F73               	movwf	(___flmul@a+1)& (0+255),b
 24338  0158B6  0E31               	movlw	49
 24339  0158B8  6F74               	movwf	(___flmul@a+2)& (0+255),b
 24340  0158BA  0E3F               	movlw	63
 24341  0158BC  6F75               	movwf	(___flmul@a+3)& (0+255),b
 24342  0158BE  C0B3  F060         	movff	log@exponent,___xxtofl@val
 24343  0158C2  C0B4  F061         	movff	log@exponent+1,___xxtofl@val+1
 24344  0158C6  0E00               	movlw	0
 24345  0158C8  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 24346  0158CA  0EFF               	movlw	-1
 24347  0158CC  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 24348  0158CE  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 24349  0158D0  0E01               	movlw	1
 24350  0158D2  ECF3  F0AD         	call	___xxtofl
 24351  0158D6  C060  F06E         	movff	?___xxtofl,___flmul@b
 24352  0158DA  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 24353  0158DE  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 24354  0158E2  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 24355  0158E6  ECC4  F09A         	call	___flmul	;wreg free
 24356  0158EA  C06E  F08B         	movff	?___flmul,___fladd@b
 24357  0158EE  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 24358  0158F2  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 24359  0158F6  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 24360  0158FA  C0AF  F08F         	movff	log@x,___fladd@a
 24361  0158FE  C0B0  F090         	movff	log@x+1,___fladd@a+1
 24362  015902  C0B1  F091         	movff	log@x+2,___fladd@a+2
 24363  015906  C0B2  F092         	movff	log@x+3,___fladd@a+3
 24364  01590A  EC6D  F09C         	call	___fladd	;wreg free
 24365  01590E  C08B  F0AF         	movff	?___fladd,?_log
 24366  015912  C08C  F0B0         	movff	?___fladd+1,?_log+1
 24367  015916  C08D  F0B1         	movff	?___fladd+2,?_log+2
 24368  01591A  C08E  F0B2         	movff	?___fladd+3,?_log+3
 24369  01591E  0012               	return	
 24370  015920                     __end_of_log:
 24371                           	opt stack 0
 24372                           tosu	equ	0xFFF
 24373                           tosh	equ	0xFFE
 24374                           tosl	equ	0xFFD
 24375                           pclath	equ	0xFFA
 24376                           tblptru	equ	0xFF8
 24377                           tblptrh	equ	0xFF7
 24378                           tblptrl	equ	0xFF6
 24379                           tablat	equ	0xFF5
 24380                           prodh	equ	0xFF4
 24381                           prodl	equ	0xFF3
 24382                           intcon	equ	0xFF2
 24383                           indf0	equ	0xFEF
 24384                           postinc0	equ	0xFEE
 24385                           fsr0h	equ	0xFEA
 24386                           fsr0l	equ	0xFE9
 24387                           wreg	equ	0xFE8
 24388                           indf1	equ	0xFE7
 24389                           postdec1	equ	0xFE5
 24390                           fsr1h	equ	0xFE2
 24391                           fsr1l	equ	0xFE1
 24392                           indf2	equ	0xFDF
 24393                           postinc2	equ	0xFDE
 24394                           postdec2	equ	0xFDD
 24395                           plusw2	equ	0xFDB
 24396                           fsr2h	equ	0xFDA
 24397                           fsr2l	equ	0xFD9
 24398                           status	equ	0xFD8
 24399                           
 24400 ;; *************** function _exp *****************
 24401 ;; Defined at:
 24402 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\exp.c"
 24403 ;; Parameters:    Size  Location     Type
 24404 ;;  x               4   87[BANK0 ] int 
 24405 ;; Auto vars:     Size  Location     Type
 24406 ;;  exponent        2   95[BANK0 ] int 
 24407 ;;  sign            1   97[BANK0 ] unsigned char 
 24408 ;; Return value:  Size  Location     Type
 24409 ;;                  4   87[BANK0 ] unsigned char 
 24410 ;; Registers used:
 24411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24412 ;; Tracked objects:
 24413 ;;		On entry : 0/0
 24414 ;;		On exit  : 0/0
 24415 ;;		Unchanged: 0/0
 24416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24417 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24418 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24420 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24421 ;;Total ram usage:       11 bytes
 24422 ;; Hardware stack levels used:    1
 24423 ;; Hardware stack levels required when called:    9
 24424 ;; This function calls:
 24425 ;;		___fldiv
 24426 ;;		___flge
 24427 ;;		___flmul
 24428 ;;		___flneg
 24429 ;;		___flsub
 24430 ;;		___fltol
 24431 ;;		___xxtofl
 24432 ;;		_eval_poly
 24433 ;;		_floor
 24434 ;;		_ldexp
 24435 ;; This function is called by:
 24436 ;;		_pow
 24437 ;; This function uses a non-reentrant model
 24438 ;;
 24439                           
 24440                           	psect	text98
 24441  0146EC                     __ptext98:
 24442                           	opt stack 0
 24443  0146EC                     _exp:
 24444                           	opt stack 18
 24445                           
 24446                           ;incstack = 0
 24447  0146EC  0100               	movlb	0	; () banked
 24448  0146EE  51B7               	movf	exp@x& (0+255),w,b
 24449  0146F0  11B8               	iorwf	(exp@x+1)& (0+255),w,b
 24450  0146F2  11B9               	iorwf	(exp@x+2)& (0+255),w,b
 24451  0146F4  11BA               	iorwf	(exp@x+3)& (0+255),w,b
 24452  0146F6  A4D8               	btfss	status,2,c
 24453  0146F8  D009               	goto	l3210
 24454                           
 24455                           ; BSR set to: 0
 24456  0146FA  0E00               	movlw	0
 24457  0146FC  6FB7               	movwf	?_exp& (0+255),b
 24458  0146FE  0E00               	movlw	0
 24459  014700  6FB8               	movwf	(?_exp+1)& (0+255),b
 24460  014702  0E80               	movlw	128
 24461  014704  6FB9               	movwf	(?_exp+2)& (0+255),b
 24462  014706  0E3F               	movlw	63
 24463  014708  6FBA               	movwf	(?_exp+3)& (0+255),b
 24464                           
 24465                           ; BSR set to: 0
 24466  01470A  0012               	return	
 24467  01470C                     l3210:
 24468                           
 24469                           ; BSR set to: 0
 24470                           
 24471                           ; BSR set to: 0
 24472  01470C  0E18               	movlw	24
 24473  01470E  6F60               	movwf	___flge@ff1& (0+255),b
 24474  014710  0E72               	movlw	114
 24475  014712  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 24476  014714  0E31               	movlw	49
 24477  014716  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 24478  014718  0E44               	movlw	68
 24479  01471A  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 24480  01471C  C0B7  F064         	movff	exp@x,___flge@ff2
 24481  014720  C0B8  F065         	movff	exp@x+1,___flge@ff2+1
 24482  014724  C0B9  F066         	movff	exp@x+2,___flge@ff2+2
 24483  014728  C0BA  F067         	movff	exp@x+3,___flge@ff2+3
 24484  01472C  EC61  F0B2         	call	___flge	;wreg free
 24485  014730  0100               	movlb	0	; () banked
 24486  014732  B0D8               	btfsc	status,0,c
 24487  014734  D00F               	goto	l3212
 24488                           
 24489                           ; BSR set to: 0
 24490  014736  0E00               	movlw	0
 24491  014738  0101               	movlb	1	; () banked
 24492  01473A  6F1B               	movwf	(_errno+1)& (0+255),b
 24493  01473C  0E22               	movlw	34
 24494  01473E  6F1A               	movwf	_errno& (0+255),b
 24495  014740  0EFF               	movlw	255
 24496  014742  0100               	movlb	0	; () banked
 24497  014744  6FB7               	movwf	?_exp& (0+255),b
 24498  014746  0EFF               	movlw	255
 24499  014748  6FB8               	movwf	(?_exp+1)& (0+255),b
 24500  01474A  0E7F               	movlw	127
 24501  01474C  6FB9               	movwf	(?_exp+2)& (0+255),b
 24502  01474E  0E7F               	movlw	127
 24503  014750  6FBA               	movwf	(?_exp+3)& (0+255),b
 24504                           
 24505                           ; BSR set to: 0
 24506  014752  0012               	return	
 24507  014754                     l3212:
 24508                           
 24509                           ; BSR set to: 0
 24510                           
 24511                           ; BSR set to: 0
 24512  014754  C0B7  F060         	movff	exp@x,___flge@ff1
 24513  014758  C0B8  F061         	movff	exp@x+1,___flge@ff1+1
 24514  01475C  C0B9  F062         	movff	exp@x+2,___flge@ff1+2
 24515  014760  C0BA  F063         	movff	exp@x+3,___flge@ff1+3
 24516  014764  0E87               	movlw	135
 24517  014766  6F64               	movwf	___flge@ff2& (0+255),b
 24518  014768  0E48               	movlw	72
 24519  01476A  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 24520  01476C  0E3A               	movlw	58
 24521  01476E  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 24522  014770  0EC4               	movlw	196
 24523  014772  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 24524  014774  EC61  F0B2         	call	___flge	;wreg free
 24525  014778  0100               	movlb	0	; () banked
 24526  01477A  B0D8               	btfsc	status,0,c
 24527  01477C  D00F               	goto	l3213
 24528                           
 24529                           ; BSR set to: 0
 24530  01477E  0E00               	movlw	0
 24531  014780  0101               	movlb	1	; () banked
 24532  014782  6F1B               	movwf	(_errno+1)& (0+255),b
 24533  014784  0E22               	movlw	34
 24534  014786  6F1A               	movwf	_errno& (0+255),b
 24535  014788  0E00               	movlw	0
 24536  01478A  0100               	movlb	0	; () banked
 24537  01478C  6FB7               	movwf	?_exp& (0+255),b
 24538  01478E  0E00               	movlw	0
 24539  014790  6FB8               	movwf	(?_exp+1)& (0+255),b
 24540  014792  0E00               	movlw	0
 24541  014794  6FB9               	movwf	(?_exp+2)& (0+255),b
 24542  014796  0E00               	movlw	0
 24543  014798  6FBA               	movwf	(?_exp+3)& (0+255),b
 24544                           
 24545                           ; BSR set to: 0
 24546  01479A  0012               	return	
 24547  01479C                     l3213:
 24548                           
 24549                           ; BSR set to: 0
 24550                           
 24551                           ; BSR set to: 0
 24552  01479C  AFBA               	btfss	(exp@x+3)& (0+255),7,b
 24553  01479E  D002               	goto	u12810
 24554  0147A0  0E01               	movlw	1
 24555  0147A2  D001               	goto	u12820
 24556  0147A4                     u12810:
 24557  0147A4  0E00               	movlw	0
 24558  0147A6                     u12820:
 24559  0147A6  6FC1               	movwf	exp@sign& (0+255),b
 24560                           
 24561                           ; BSR set to: 0
 24562  0147A8  51C1               	movf	exp@sign& (0+255),w,b
 24563  0147AA  B4D8               	btfsc	status,2,c
 24564  0147AC  D012               	goto	l3214
 24565                           
 24566                           ; BSR set to: 0
 24567  0147AE  C0B7  F087         	movff	exp@x,___flneg@f1
 24568  0147B2  C0B8  F088         	movff	exp@x+1,___flneg@f1+1
 24569  0147B6  C0B9  F089         	movff	exp@x+2,___flneg@f1+2
 24570  0147BA  C0BA  F08A         	movff	exp@x+3,___flneg@f1+3
 24571  0147BE  EC5B  F0C5         	call	___flneg	;wreg free
 24572  0147C2  C087  F0B7         	movff	?___flneg,exp@x
 24573  0147C6  C088  F0B8         	movff	?___flneg+1,exp@x+1
 24574  0147CA  C089  F0B9         	movff	?___flneg+2,exp@x+2
 24575  0147CE  C08A  F0BA         	movff	?___flneg+3,exp@x+3
 24576  0147D2                     l3214:
 24577  0147D2  C0B7  F06E         	movff	exp@x,___flmul@b
 24578  0147D6  C0B8  F06F         	movff	exp@x+1,___flmul@b+1
 24579  0147DA  C0B9  F070         	movff	exp@x+2,___flmul@b+2
 24580  0147DE  C0BA  F071         	movff	exp@x+3,___flmul@b+3
 24581  0147E2  0E3B               	movlw	59
 24582  0147E4  0100               	movlb	0	; () banked
 24583  0147E6  6F72               	movwf	___flmul@a& (0+255),b
 24584  0147E8  0EAA               	movlw	170
 24585  0147EA  6F73               	movwf	(___flmul@a+1)& (0+255),b
 24586  0147EC  0EB8               	movlw	184
 24587  0147EE  6F74               	movwf	(___flmul@a+2)& (0+255),b
 24588  0147F0  0E3F               	movlw	63
 24589  0147F2  6F75               	movwf	(___flmul@a+3)& (0+255),b
 24590  0147F4  ECC4  F09A         	call	___flmul	;wreg free
 24591  0147F8  C06E  F0B7         	movff	?___flmul,exp@x
 24592  0147FC  C06F  F0B8         	movff	?___flmul+1,exp@x+1
 24593  014800  C070  F0B9         	movff	?___flmul+2,exp@x+2
 24594  014804  C071  F0BA         	movff	?___flmul+3,exp@x+3
 24595  014808  C0B7  F0A9         	movff	exp@x,floor@x
 24596  01480C  C0B8  F0AA         	movff	exp@x+1,floor@x+1
 24597  014810  C0B9  F0AB         	movff	exp@x+2,floor@x+2
 24598  014814  C0BA  F0AC         	movff	exp@x+3,floor@x+3
 24599  014818  ECF2  F0B2         	call	_floor	;wreg free
 24600  01481C  C0A9  F0BB         	movff	?_floor,_exp$15874
 24601  014820  C0AA  F0BC         	movff	?_floor+1,_exp$15874+1
 24602  014824  C0AB  F0BD         	movff	?_floor+2,_exp$15874+2
 24603  014828  C0AC  F0BE         	movff	?_floor+3,_exp$15874+3
 24604  01482C  C0BB  F09F         	movff	_exp$15874,___fltol@f1
 24605  014830  C0BC  F0A0         	movff	_exp$15874+1,___fltol@f1+1
 24606  014834  C0BD  F0A1         	movff	_exp$15874+2,___fltol@f1+2
 24607  014838  C0BE  F0A2         	movff	_exp$15874+3,___fltol@f1+3
 24608  01483C  ECE4  F0B5         	call	___fltol	;wreg free
 24609  014840  C09F  F0BF         	movff	?___fltol,exp@exponent
 24610  014844  C0A0  F0C0         	movff	?___fltol+1,exp@exponent+1
 24611  014848  C0B7  F09F         	movff	exp@x,___flsub@b
 24612  01484C  C0B8  F0A0         	movff	exp@x+1,___flsub@b+1
 24613  014850  C0B9  F0A1         	movff	exp@x+2,___flsub@b+2
 24614  014854  C0BA  F0A2         	movff	exp@x+3,___flsub@b+3
 24615  014858  C0BF  F060         	movff	exp@exponent,___xxtofl@val
 24616  01485C  C0C0  F061         	movff	exp@exponent+1,___xxtofl@val+1
 24617  014860  0100               	movlb	0	; () banked
 24618  014862  0E00               	movlw	0
 24619  014864  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 24620  014866  0EFF               	movlw	-1
 24621  014868  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 24622  01486A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 24623  01486C  0E01               	movlw	1
 24624  01486E  ECF3  F0AD         	call	___xxtofl
 24625  014872  C060  F0A3         	movff	?___xxtofl,___flsub@a
 24626  014876  C061  F0A4         	movff	?___xxtofl+1,___flsub@a+1
 24627  01487A  C062  F0A5         	movff	?___xxtofl+2,___flsub@a+2
 24628  01487E  C063  F0A6         	movff	?___xxtofl+3,___flsub@a+3
 24629  014882  EC28  F0C3         	call	___flsub	;wreg free
 24630  014886  C09F  F0B7         	movff	?___flsub,exp@x
 24631  01488A  C0A0  F0B8         	movff	?___flsub+1,exp@x+1
 24632  01488E  C0A1  F0B9         	movff	?___flsub+2,exp@x+2
 24633  014892  C0A2  F0BA         	movff	?___flsub+3,exp@x+3
 24634  014896  C0B7  F09F         	movff	exp@x,eval_poly@x
 24635  01489A  C0B8  F0A0         	movff	exp@x+1,eval_poly@x+1
 24636  01489E  C0B9  F0A1         	movff	exp@x+2,eval_poly@x+2
 24637  0148A2  C0BA  F0A2         	movff	exp@x+3,eval_poly@x+3
 24638  0148A6  0E07               	movlw	low exp@coeff
 24639  0148A8  0100               	movlb	0	; () banked
 24640  0148AA  6FA3               	movwf	eval_poly@d& (0+255),b
 24641  0148AC  0EFE               	movlw	high exp@coeff
 24642  0148AE  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 24643  0148B0  0E00               	movlw	0
 24644  0148B2  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 24645  0148B4  0E09               	movlw	9
 24646  0148B6  6FA5               	movwf	eval_poly@n& (0+255),b
 24647  0148B8  EC03  F0B4         	call	_eval_poly	;wreg free
 24648  0148BC  C09F  F0AF         	movff	?_eval_poly,ldexp@value
 24649  0148C0  C0A0  F0B0         	movff	?_eval_poly+1,ldexp@value+1
 24650  0148C4  C0A1  F0B1         	movff	?_eval_poly+2,ldexp@value+2
 24651  0148C8  C0A2  F0B2         	movff	?_eval_poly+3,ldexp@value+3
 24652  0148CC  C0BF  F0B3         	movff	exp@exponent,ldexp@newexp
 24653  0148D0  C0C0  F0B4         	movff	exp@exponent+1,ldexp@newexp+1
 24654  0148D4  EC02  F0B5         	call	_ldexp	;wreg free
 24655  0148D8  C0AF  F0B7         	movff	?_ldexp,exp@x
 24656  0148DC  C0B0  F0B8         	movff	?_ldexp+1,exp@x+1
 24657  0148E0  C0B1  F0B9         	movff	?_ldexp+2,exp@x+2
 24658  0148E4  C0B2  F0BA         	movff	?_ldexp+3,exp@x+3
 24659  0148E8  0100               	movlb	0	; () banked
 24660  0148EA  51C1               	movf	exp@sign& (0+255),w,b
 24661  0148EC  B4D8               	btfsc	status,2,c
 24662  0148EE  D02F               	goto	l3215
 24663                           
 24664                           ; BSR set to: 0
 24665  0148F0  29B7               	incf	exp@x& (0+255),w,b
 24666  0148F2  E112               	bnz	l15387
 24667  0148F4  29B8               	incf	(exp@x+1)& (0+255),w,b
 24668  0148F6  E110               	bnz	l15387
 24669  0148F8  0E7F               	movlw	127
 24670  0148FA  19B9               	xorwf	(exp@x+2)& (0+255),w,b
 24671  0148FC  E10D               	bnz	l15387
 24672  0148FE  0E7F               	movlw	127
 24673  014900  19BA               	xorwf	(exp@x+3)& (0+255),w,b
 24674  014902  A4D8               	btfss	status,2,c
 24675  014904  D009               	goto	l3216
 24676                           
 24677                           ; BSR set to: 0
 24678  014906  0E00               	movlw	0
 24679  014908  6FB7               	movwf	?_exp& (0+255),b
 24680  01490A  0E00               	movlw	0
 24681  01490C  6FB8               	movwf	(?_exp+1)& (0+255),b
 24682  01490E  0E00               	movlw	0
 24683  014910  6FB9               	movwf	(?_exp+2)& (0+255),b
 24684  014912  0E00               	movlw	0
 24685  014914  6FBA               	movwf	(?_exp+3)& (0+255),b
 24686                           
 24687                           ; BSR set to: 0
 24688  014916  0012               	return	
 24689  014918                     l3216:
 24690  014918                     l15387:
 24691                           
 24692                           ; BSR set to: 0
 24693  014918  0E00               	movlw	0
 24694  01491A  6F60               	movwf	___fldiv@b& (0+255),b
 24695  01491C  0E00               	movlw	0
 24696  01491E  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 24697  014920  0E80               	movlw	128
 24698  014922  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 24699  014924  0E3F               	movlw	63
 24700  014926  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 24701  014928  C0B7  F064         	movff	exp@x,___fldiv@a
 24702  01492C  C0B8  F065         	movff	exp@x+1,___fldiv@a+1
 24703  014930  C0B9  F066         	movff	exp@x+2,___fldiv@a+2
 24704  014934  C0BA  F067         	movff	exp@x+3,___fldiv@a+3
 24705  014938  EC84  F09F         	call	___fldiv	;wreg free
 24706  01493C  C060  F0B7         	movff	?___fldiv,?_exp
 24707  014940  C061  F0B8         	movff	?___fldiv+1,?_exp+1
 24708  014944  C062  F0B9         	movff	?___fldiv+2,?_exp+2
 24709  014948  C063  F0BA         	movff	?___fldiv+3,?_exp+3
 24710  01494C  0012               	return	
 24711  01494E                     l3215:
 24712                           
 24713                           ; BSR set to: 0
 24714  01494E  C0B7  F0B7         	movff	exp@x,?_exp
 24715  014952  C0B8  F0B8         	movff	exp@x+1,?_exp+1
 24716  014956  C0B9  F0B9         	movff	exp@x+2,?_exp+2
 24717  01495A  C0BA  F0BA         	movff	exp@x+3,?_exp+3
 24718  01495E  0012               	return		;funcret
 24719  014960                     __end_of_exp:
 24720                           	opt stack 0
 24721                           tosu	equ	0xFFF
 24722                           tosh	equ	0xFFE
 24723                           tosl	equ	0xFFD
 24724                           pclath	equ	0xFFA
 24725                           tblptru	equ	0xFF8
 24726                           tblptrh	equ	0xFF7
 24727                           tblptrl	equ	0xFF6
 24728                           tablat	equ	0xFF5
 24729                           prodh	equ	0xFF4
 24730                           prodl	equ	0xFF3
 24731                           intcon	equ	0xFF2
 24732                           indf0	equ	0xFEF
 24733                           postinc0	equ	0xFEE
 24734                           fsr0h	equ	0xFEA
 24735                           fsr0l	equ	0xFE9
 24736                           wreg	equ	0xFE8
 24737                           indf1	equ	0xFE7
 24738                           postdec1	equ	0xFE5
 24739                           fsr1h	equ	0xFE2
 24740                           fsr1l	equ	0xFE1
 24741                           indf2	equ	0xFDF
 24742                           postinc2	equ	0xFDE
 24743                           postdec2	equ	0xFDD
 24744                           plusw2	equ	0xFDB
 24745                           fsr2h	equ	0xFDA
 24746                           fsr2l	equ	0xFD9
 24747                           status	equ	0xFD8
 24748                           
 24749 ;; *************** function _ldexp *****************
 24750 ;; Defined at:
 24751 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
 24752 ;; Parameters:    Size  Location     Type
 24753 ;;  value           4   79[BANK0 ] unsigned char 
 24754 ;;  newexp          2   83[BANK0 ] int 
 24755 ;; Auto vars:     Size  Location     Type
 24756 ;;		None
 24757 ;; Return value:  Size  Location     Type
 24758 ;;                  4   79[BANK0 ] int 
 24759 ;; Registers used:
 24760 ;;		wreg, status,2, status,0
 24761 ;; Tracked objects:
 24762 ;;		On entry : 0/0
 24763 ;;		On exit  : 0/0
 24764 ;;		Unchanged: 0/0
 24765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24766 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24768 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24769 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24770 ;;Total ram usage:        8 bytes
 24771 ;; Hardware stack levels used:    1
 24772 ;; Hardware stack levels required when called:    7
 24773 ;; This function calls:
 24774 ;;		Nothing
 24775 ;; This function is called by:
 24776 ;;		_exp
 24777 ;; This function uses a non-reentrant model
 24778 ;;
 24779                           
 24780                           	psect	text99
 24781  016A04                     __ptext99:
 24782                           	opt stack 0
 24783  016A04                     _ldexp:
 24784                           	opt stack 19
 24785                           
 24786                           ;incstack = 0
 24787  016A04  0100               	movlb	0	; () banked
 24788  016A06  51AF               	movf	ldexp@value& (0+255),w,b
 24789  016A08  11B0               	iorwf	(ldexp@value+1)& (0+255),w,b
 24790  016A0A  11B1               	iorwf	(ldexp@value+2)& (0+255),w,b
 24791  016A0C  11B2               	iorwf	(ldexp@value+3)& (0+255),w,b
 24792  016A0E  A4D8               	btfss	status,2,c
 24793  016A10  D009               	goto	l3234
 24794                           
 24795                           ; BSR set to: 0
 24796  016A12  0E00               	movlw	0
 24797  016A14  6FAF               	movwf	?_ldexp& (0+255),b
 24798  016A16  0E00               	movlw	0
 24799  016A18  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 24800  016A1A  0E00               	movlw	0
 24801  016A1C  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 24802  016A1E  0E00               	movlw	0
 24803  016A20  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 24804                           
 24805                           ; BSR set to: 0
 24806  016A22  0012               	return	
 24807  016A24                     l3234:
 24808                           
 24809                           ; BSR set to: 0
 24810                           
 24811                           ; BSR set to: 0
 24812  016A24  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 24813  016A26  0B7F               	andlw	127
 24814  016A28  6FB5               	movwf	??_ldexp& (0+255),b
 24815  016A2A  6BB6               	clrf	(??_ldexp+1)& (0+255),b
 24816  016A2C  90D8               	bcf	status,0,c
 24817  016A2E  37B5               	rlcf	??_ldexp& (0+255),f,b
 24818  016A30  37B6               	rlcf	(??_ldexp+1)& (0+255),f,b
 24819  016A32  51B5               	movf	??_ldexp& (0+255),w,b
 24820  016A34  27B3               	addwf	ldexp@newexp& (0+255),f,b
 24821  016A36  51B6               	movf	(??_ldexp+1)& (0+255),w,b
 24822  016A38  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 24823  016A3A  AFB1               	btfss	(ldexp@value+2)& (0+255),7,b
 24824  016A3C  D003               	goto	u12400
 24825  016A3E  6BB5               	clrf	??_ldexp& (0+255),b
 24826  016A40  2BB5               	incf	??_ldexp& (0+255),f,b
 24827  016A42  D002               	goto	u12408
 24828  016A44                     u12400:
 24829  016A44  0100               	movlb	0	; () banked
 24830  016A46  6BB5               	clrf	??_ldexp& (0+255),b
 24831  016A48                     u12408:
 24832  016A48  51B5               	movf	??_ldexp& (0+255),w,b
 24833  016A4A  27B3               	addwf	ldexp@newexp& (0+255),f,b
 24834  016A4C  0E00               	movlw	0
 24835  016A4E  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 24836  016A50  AFB4               	btfss	(ldexp@newexp+1)& (0+255),7,b
 24837  016A52  D00F               	goto	l3236
 24838                           
 24839                           ; BSR set to: 0
 24840  016A54  0E00               	movlw	0
 24841  016A56  0101               	movlb	1	; () banked
 24842  016A58  6F1B               	movwf	(_errno+1)& (0+255),b
 24843  016A5A  0E22               	movlw	34
 24844  016A5C  6F1A               	movwf	_errno& (0+255),b
 24845  016A5E  0E00               	movlw	0
 24846  016A60  0100               	movlb	0	; () banked
 24847  016A62  6FAF               	movwf	?_ldexp& (0+255),b
 24848  016A64  0E00               	movlw	0
 24849  016A66  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 24850  016A68  0E00               	movlw	0
 24851  016A6A  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 24852  016A6C  0E00               	movlw	0
 24853  016A6E                     L18:
 24854  016A6E  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 24855                           
 24856                           ; BSR set to: 0
 24857  016A70  0012               	return	
 24858  016A72                     l3236:
 24859                           
 24860                           ; BSR set to: 0
 24861                           
 24862                           ; BSR set to: 0
 24863  016A72  BFB4               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 24864  016A74  D01B               	goto	l3238
 24865  016A76  05B4               	decf	(ldexp@newexp+1)& (0+255),w,b
 24866  016A78  A0D8               	btfss	status,0,c
 24867  016A7A  D018               	goto	l3238
 24868                           
 24869                           ; BSR set to: 0
 24870  016A7C  0E00               	movlw	0
 24871  016A7E  0101               	movlb	1	; () banked
 24872  016A80  6F1B               	movwf	(_errno+1)& (0+255),b
 24873  016A82  0E22               	movlw	34
 24874  016A84  6F1A               	movwf	_errno& (0+255),b
 24875                           
 24876                           ; BSR set to: 1
 24877  016A86  0100               	movlb	0	; () banked
 24878  016A88  AFB2               	btfss	(ldexp@value+3)& (0+255),7,b
 24879  016A8A  D008               	goto	l3239
 24880                           
 24881                           ; BSR set to: 0
 24882  016A8C  0EFF               	movlw	255
 24883  016A8E  6FAF               	movwf	?_ldexp& (0+255),b
 24884  016A90  0EFF               	movlw	255
 24885  016A92  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 24886  016A94  0E7F               	movlw	127
 24887  016A96  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 24888  016A98  0EFF               	movlw	255
 24889  016A9A  D7E9               	goto	L18
 24890  016A9C                     l3239:
 24891                           
 24892                           ; BSR set to: 0
 24893                           
 24894                           ; BSR set to: 0
 24895  016A9C  0EFF               	movlw	255
 24896  016A9E  6FAF               	movwf	?_ldexp& (0+255),b
 24897  016AA0  0EFF               	movlw	255
 24898  016AA2  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 24899  016AA4  0E7F               	movlw	127
 24900  016AA6  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 24901  016AA8  0E7F               	movlw	127
 24902  016AAA  D7E1               	goto	L18
 24903  016AAC                     l3238:
 24904                           
 24905                           ; BSR set to: 0
 24906                           
 24907                           ; BSR set to: 0
 24908  016AAC  35B4               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 24909  016AAE  31B4               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 24910  016AB0  6FB6               	movwf	(??_ldexp+1)& (0+255),b
 24911  016AB2  31B3               	rrcf	ldexp@newexp& (0+255),w,b
 24912  016AB4  6FB5               	movwf	??_ldexp& (0+255),b
 24913  016AB6  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 24914  016AB8  19B5               	xorwf	??_ldexp& (0+255),w,b
 24915  016ABA  0B80               	andlw	-128
 24916  016ABC  19B5               	xorwf	??_ldexp& (0+255),w,b
 24917  016ABE  6FB2               	movwf	(ldexp@value+3)& (0+255),b
 24918  016AC0  C0B3  F0B5         	movff	ldexp@newexp,??_ldexp
 24919  016AC4  0E01               	movlw	1
 24920  016AC6  17B5               	andwf	??_ldexp& (0+255),f,b
 24921  016AC8  33B5               	rrcf	??_ldexp& (0+255),f,b
 24922  016ACA  33B5               	rrcf	??_ldexp& (0+255),f,b
 24923  016ACC  51B1               	movf	(ldexp@value+2)& (0+255),w,b
 24924  016ACE  19B5               	xorwf	??_ldexp& (0+255),w,b
 24925  016AD0  0B7F               	andlw	-129
 24926  016AD2  19B5               	xorwf	??_ldexp& (0+255),w,b
 24927  016AD4  6FB1               	movwf	(ldexp@value+2)& (0+255),b
 24928                           
 24929                           ; BSR set to: 0
 24930                           
 24931                           ; BSR set to: 0
 24932                           
 24933                           ; BSR set to: 0
 24934  016AD6  C0AF  F0AF         	movff	ldexp@value,?_ldexp
 24935  016ADA  C0B0  F0B0         	movff	ldexp@value+1,?_ldexp+1
 24936  016ADE  C0B1  F0B1         	movff	ldexp@value+2,?_ldexp+2
 24937  016AE2  C0B2  F0B2         	movff	ldexp@value+3,?_ldexp+3
 24938  016AE6  0012               	return	
 24939  016AE8                     __end_of_ldexp:
 24940                           	opt stack 0
 24941                           tosu	equ	0xFFF
 24942                           tosh	equ	0xFFE
 24943                           tosl	equ	0xFFD
 24944                           pclath	equ	0xFFA
 24945                           tblptru	equ	0xFF8
 24946                           tblptrh	equ	0xFF7
 24947                           tblptrl	equ	0xFF6
 24948                           tablat	equ	0xFF5
 24949                           prodh	equ	0xFF4
 24950                           prodl	equ	0xFF3
 24951                           intcon	equ	0xFF2
 24952                           indf0	equ	0xFEF
 24953                           postinc0	equ	0xFEE
 24954                           fsr0h	equ	0xFEA
 24955                           fsr0l	equ	0xFE9
 24956                           wreg	equ	0xFE8
 24957                           indf1	equ	0xFE7
 24958                           postdec1	equ	0xFE5
 24959                           fsr1h	equ	0xFE2
 24960                           fsr1l	equ	0xFE1
 24961                           indf2	equ	0xFDF
 24962                           postinc2	equ	0xFDE
 24963                           postdec2	equ	0xFDD
 24964                           plusw2	equ	0xFDB
 24965                           fsr2h	equ	0xFDA
 24966                           fsr2l	equ	0xFD9
 24967                           status	equ	0xFD8
 24968                           
 24969 ;; *************** function _floor *****************
 24970 ;; Defined at:
 24971 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\floor.c"
 24972 ;; Parameters:    Size  Location     Type
 24973 ;;  x               4   73[BANK0 ] int 
 24974 ;; Auto vars:     Size  Location     Type
 24975 ;;  i               4   77[BANK0 ] int 
 24976 ;;  expon           2   81[BANK0 ] int 
 24977 ;; Return value:  Size  Location     Type
 24978 ;;                  4   73[BANK0 ] int 
 24979 ;; Registers used:
 24980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24981 ;; Tracked objects:
 24982 ;;		On entry : 0/0
 24983 ;;		On exit  : 0/0
 24984 ;;		Unchanged: 0/0
 24985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24986 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24987 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24989 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24990 ;;Total ram usage:       10 bytes
 24991 ;; Hardware stack levels used:    1
 24992 ;; Hardware stack levels required when called:    8
 24993 ;; This function calls:
 24994 ;;		___fladd
 24995 ;;		___flge
 24996 ;;		___fltol
 24997 ;;		___xxtofl
 24998 ;;		_frexp
 24999 ;; This function is called by:
 25000 ;;		_exp
 25001 ;; This function uses a non-reentrant model
 25002 ;;
 25003                           
 25004                           	psect	text100
 25005  0165E4                     __ptext100:
 25006                           	opt stack 0
 25007  0165E4                     _floor:
 25008                           	opt stack 18
 25009                           
 25010                           ; BSR set to: 0
 25011                           ;incstack = 0
 25012  0165E4  C0A9  F060         	movff	floor@x,frexp@value
 25013  0165E8  C0AA  F061         	movff	floor@x+1,frexp@value+1
 25014  0165EC  C0AB  F062         	movff	floor@x+2,frexp@value+2
 25015  0165F0  C0AC  F063         	movff	floor@x+3,frexp@value+3
 25016  0165F4  0EB1               	movlw	low floor@expon
 25017  0165F6  0100               	movlb	0	; () banked
 25018  0165F8  6F64               	movwf	frexp@eptr& (0+255),b
 25019  0165FA  0E00               	movlw	high floor@expon
 25020  0165FC  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 25021  0165FE  ECCA  F0B8         	call	_frexp	;wreg free
 25022  016602  0100               	movlb	0	; () banked
 25023  016604  AFB2               	btfss	(floor@expon+1)& (0+255),7,b
 25024  016606  D014               	goto	l3221
 25025                           
 25026                           ; BSR set to: 0
 25027  016608  AFAC               	btfss	(floor@x+3)& (0+255),7,b
 25028  01660A  D009               	goto	l3222
 25029                           
 25030                           ; BSR set to: 0
 25031  01660C  0E00               	movlw	0
 25032  01660E  6FA9               	movwf	?_floor& (0+255),b
 25033  016610  0E00               	movlw	0
 25034  016612  6FAA               	movwf	(?_floor+1)& (0+255),b
 25035  016614  0E80               	movlw	128
 25036  016616  6FAB               	movwf	(?_floor+2)& (0+255),b
 25037  016618  0EBF               	movlw	191
 25038  01661A  6FAC               	movwf	(?_floor+3)& (0+255),b
 25039                           
 25040                           ; BSR set to: 0
 25041  01661C  0012               	return	
 25042  01661E                     l3222:
 25043                           
 25044                           ; BSR set to: 0
 25045                           
 25046                           ; BSR set to: 0
 25047  01661E  0E00               	movlw	0
 25048  016620  6FA9               	movwf	?_floor& (0+255),b
 25049  016622  0E00               	movlw	0
 25050  016624  6FAA               	movwf	(?_floor+1)& (0+255),b
 25051  016626  0E00               	movlw	0
 25052  016628  6FAB               	movwf	(?_floor+2)& (0+255),b
 25053  01662A  0E00               	movlw	0
 25054  01662C  6FAC               	movwf	(?_floor+3)& (0+255),b
 25055                           
 25056                           ; BSR set to: 0
 25057  01662E  0012               	return	
 25058  016630                     l3221:
 25059                           
 25060                           ; BSR set to: 0
 25061                           
 25062                           ; BSR set to: 0
 25063  016630  51B2               	movf	(floor@expon+1)& (0+255),w,b
 25064  016632  E104               	bnz	u12360
 25065  016634  0E1D               	movlw	29
 25066  016636  5DB1               	subwf	floor@expon& (0+255),w,b
 25067  016638  A0D8               	btfss	status,0,c
 25068  01663A  D009               	goto	l3224
 25069  01663C                     u12360:
 25070                           
 25071                           ; BSR set to: 0
 25072  01663C  C0A9  F0A9         	movff	floor@x,?_floor
 25073  016640  C0AA  F0AA         	movff	floor@x+1,?_floor+1
 25074  016644  C0AB  F0AB         	movff	floor@x+2,?_floor+2
 25075  016648  C0AC  F0AC         	movff	floor@x+3,?_floor+3
 25076  01664C  0012               	return	
 25077  01664E                     l3224:
 25078                           
 25079                           ; BSR set to: 0
 25080                           
 25081                           ; BSR set to: 0
 25082  01664E  C0A9  F09F         	movff	floor@x,___fltol@f1
 25083  016652  C0AA  F0A0         	movff	floor@x+1,___fltol@f1+1
 25084  016656  C0AB  F0A1         	movff	floor@x+2,___fltol@f1+2
 25085  01665A  C0AC  F0A2         	movff	floor@x+3,___fltol@f1+3
 25086  01665E  ECE4  F0B5         	call	___fltol	;wreg free
 25087  016662  C09F  F060         	movff	?___fltol,___xxtofl@val
 25088  016666  C0A0  F061         	movff	?___fltol+1,___xxtofl@val+1
 25089  01666A  C0A1  F062         	movff	?___fltol+2,___xxtofl@val+2
 25090  01666E  C0A2  F063         	movff	?___fltol+3,___xxtofl@val+3
 25091  016672  0E01               	movlw	1
 25092  016674  ECF3  F0AD         	call	___xxtofl
 25093  016678  C060  F0AD         	movff	?___xxtofl,floor@i
 25094  01667C  C061  F0AE         	movff	?___xxtofl+1,floor@i+1
 25095  016680  C062  F0AF         	movff	?___xxtofl+2,floor@i+2
 25096  016684  C063  F0B0         	movff	?___xxtofl+3,floor@i+3
 25097  016688  C0A9  F060         	movff	floor@x,___flge@ff1
 25098  01668C  C0AA  F061         	movff	floor@x+1,___flge@ff1+1
 25099  016690  C0AB  F062         	movff	floor@x+2,___flge@ff1+2
 25100  016694  C0AC  F063         	movff	floor@x+3,___flge@ff1+3
 25101  016698  C0AD  F064         	movff	floor@i,___flge@ff2
 25102  01669C  C0AE  F065         	movff	floor@i+1,___flge@ff2+1
 25103  0166A0  C0AF  F066         	movff	floor@i+2,___flge@ff2+2
 25104  0166A4  C0B0  F067         	movff	floor@i+3,___flge@ff2+3
 25105  0166A8  EC61  F0B2         	call	___flge	;wreg free
 25106  0166AC  0100               	movlb	0	; () banked
 25107  0166AE  B0D8               	btfsc	status,0,c
 25108  0166B0  D01B               	goto	l3225
 25109                           
 25110                           ; BSR set to: 0
 25111  0166B2  C0AD  F08B         	movff	floor@i,___fladd@b
 25112  0166B6  C0AE  F08C         	movff	floor@i+1,___fladd@b+1
 25113  0166BA  C0AF  F08D         	movff	floor@i+2,___fladd@b+2
 25114  0166BE  C0B0  F08E         	movff	floor@i+3,___fladd@b+3
 25115  0166C2  0E00               	movlw	0
 25116  0166C4  6F8F               	movwf	___fladd@a& (0+255),b
 25117  0166C6  0E00               	movlw	0
 25118  0166C8  6F90               	movwf	(___fladd@a+1)& (0+255),b
 25119  0166CA  0E80               	movlw	128
 25120  0166CC  6F91               	movwf	(___fladd@a+2)& (0+255),b
 25121  0166CE  0EBF               	movlw	191
 25122  0166D0  6F92               	movwf	(___fladd@a+3)& (0+255),b
 25123  0166D2  EC6D  F09C         	call	___fladd	;wreg free
 25124  0166D6  C08B  F0A9         	movff	?___fladd,?_floor
 25125  0166DA  C08C  F0AA         	movff	?___fladd+1,?_floor+1
 25126  0166DE  C08D  F0AB         	movff	?___fladd+2,?_floor+2
 25127  0166E2  C08E  F0AC         	movff	?___fladd+3,?_floor+3
 25128  0166E6  0012               	return	
 25129  0166E8                     l3225:
 25130                           
 25131                           ; BSR set to: 0
 25132  0166E8  C0AD  F0A9         	movff	floor@i,?_floor
 25133  0166EC  C0AE  F0AA         	movff	floor@i+1,?_floor+1
 25134  0166F0  C0AF  F0AB         	movff	floor@i+2,?_floor+2
 25135  0166F4  C0B0  F0AC         	movff	floor@i+3,?_floor+3
 25136  0166F8  0012               	return		;funcret
 25137  0166FA                     __end_of_floor:
 25138                           	opt stack 0
 25139                           tosu	equ	0xFFF
 25140                           tosh	equ	0xFFE
 25141                           tosl	equ	0xFFD
 25142                           pclath	equ	0xFFA
 25143                           tblptru	equ	0xFF8
 25144                           tblptrh	equ	0xFF7
 25145                           tblptrl	equ	0xFF6
 25146                           tablat	equ	0xFF5
 25147                           prodh	equ	0xFF4
 25148                           prodl	equ	0xFF3
 25149                           intcon	equ	0xFF2
 25150                           indf0	equ	0xFEF
 25151                           postinc0	equ	0xFEE
 25152                           fsr0h	equ	0xFEA
 25153                           fsr0l	equ	0xFE9
 25154                           wreg	equ	0xFE8
 25155                           indf1	equ	0xFE7
 25156                           postdec1	equ	0xFE5
 25157                           fsr1h	equ	0xFE2
 25158                           fsr1l	equ	0xFE1
 25159                           indf2	equ	0xFDF
 25160                           postinc2	equ	0xFDE
 25161                           postdec2	equ	0xFDD
 25162                           plusw2	equ	0xFDB
 25163                           fsr2h	equ	0xFDA
 25164                           fsr2l	equ	0xFD9
 25165                           status	equ	0xFD8
 25166                           
 25167 ;; *************** function _frexp *****************
 25168 ;; Defined at:
 25169 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
 25170 ;; Parameters:    Size  Location     Type
 25171 ;;  value           4    0[BANK0 ] int 
 25172 ;;  eptr            2    4[BANK0 ] PTR int 
 25173 ;;		 -> log@exponent(2), floor@expon(2), 
 25174 ;; Auto vars:     Size  Location     Type
 25175 ;;		None
 25176 ;; Return value:  Size  Location     Type
 25177 ;;                  4    0[BANK0 ] PTR int 
 25178 ;; Registers used:
 25179 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25180 ;; Tracked objects:
 25181 ;;		On entry : 0/0
 25182 ;;		On exit  : 0/0
 25183 ;;		Unchanged: 0/0
 25184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25185 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25187 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25188 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25189 ;;Total ram usage:        8 bytes
 25190 ;; Hardware stack levels used:    1
 25191 ;; Hardware stack levels required when called:    7
 25192 ;; This function calls:
 25193 ;;		Nothing
 25194 ;; This function is called by:
 25195 ;;		_floor
 25196 ;;		_log
 25197 ;; This function uses a non-reentrant model
 25198 ;;
 25199                           
 25200                           	psect	text101
 25201  017194                     __ptext101:
 25202                           	opt stack 0
 25203  017194                     _frexp:
 25204                           	opt stack 19
 25205                           
 25206                           ;incstack = 0
 25207  017194  0100               	movlb	0	; () banked
 25208  017196  5160               	movf	frexp@value& (0+255),w,b
 25209  017198  1161               	iorwf	(frexp@value+1)& (0+255),w,b
 25210  01719A  1162               	iorwf	(frexp@value+2)& (0+255),w,b
 25211  01719C  1163               	iorwf	(frexp@value+3)& (0+255),w,b
 25212  01719E  A4D8               	btfss	status,2,c
 25213  0171A0  D011               	goto	l3230
 25214                           
 25215                           ; BSR set to: 0
 25216  0171A2  C064  FFD9         	movff	frexp@eptr,fsr2l
 25217  0171A6  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 25218  0171AA  0E00               	movlw	0
 25219  0171AC  6EDE               	movwf	postinc2,c
 25220  0171AE  0E00               	movlw	0
 25221  0171B0  6EDD               	movwf	postdec2,c
 25222                           
 25223                           ; BSR set to: 0
 25224  0171B2  0E00               	movlw	0
 25225  0171B4  6F60               	movwf	?_frexp& (0+255),b
 25226  0171B6  0E00               	movlw	0
 25227  0171B8  6F61               	movwf	(?_frexp+1)& (0+255),b
 25228  0171BA  0E00               	movlw	0
 25229  0171BC  6F62               	movwf	(?_frexp+2)& (0+255),b
 25230  0171BE  0E00               	movlw	0
 25231  0171C0  6F63               	movwf	(?_frexp+3)& (0+255),b
 25232                           
 25233                           ; BSR set to: 0
 25234  0171C2  0012               	return	
 25235  0171C4                     l3230:
 25236                           
 25237                           ; BSR set to: 0
 25238                           
 25239                           ; BSR set to: 0
 25240  0171C4  5163               	movf	(frexp@value+3)& (0+255),w,b
 25241  0171C6  0B7F               	andlw	127
 25242  0171C8  6F66               	movwf	??_frexp& (0+255),b
 25243  0171CA  6B67               	clrf	(??_frexp+1)& (0+255),b
 25244  0171CC  90D8               	bcf	status,0,c
 25245  0171CE  3766               	rlcf	??_frexp& (0+255),f,b
 25246  0171D0  3767               	rlcf	(??_frexp+1)& (0+255),f,b
 25247  0171D2  C064  FFD9         	movff	frexp@eptr,fsr2l
 25248  0171D6  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 25249  0171DA  C066  FFDE         	movff	??_frexp,postinc2
 25250  0171DE  C067  FFDD         	movff	??_frexp+1,postdec2
 25251  0171E2  AF62               	btfss	(frexp@value+2)& (0+255),7,b
 25252  0171E4  D003               	goto	u11970
 25253  0171E6  6B66               	clrf	??_frexp& (0+255),b
 25254  0171E8  2B66               	incf	??_frexp& (0+255),f,b
 25255  0171EA  D002               	goto	u11978
 25256  0171EC                     u11970:
 25257  0171EC  0100               	movlb	0	; () banked
 25258  0171EE  6B66               	clrf	??_frexp& (0+255),b
 25259  0171F0                     u11978:
 25260  0171F0  5166               	movf	??_frexp& (0+255),w,b
 25261  0171F2  C064  FFD9         	movff	frexp@eptr,fsr2l
 25262  0171F6  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 25263  0171FA  12DE               	iorwf	postinc2,f,c
 25264  0171FC  0E00               	movlw	0
 25265  0171FE  12DD               	iorwf	postdec2,f,c
 25266                           
 25267                           ; BSR set to: 0
 25268  017200  C064  FFD9         	movff	frexp@eptr,fsr2l
 25269  017204  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 25270  017208  0E82               	movlw	130
 25271  01720A  26DE               	addwf	postinc2,f,c
 25272  01720C  0EFF               	movlw	255
 25273  01720E  22DD               	addwfc	postdec2,f,c
 25274                           
 25275                           ; BSR set to: 0
 25276  017210  8163               	bsf	(frexp@value+3)& (0+255),0,b
 25277  017212  8363               	bsf	(frexp@value+3)& (0+255),1,b
 25278  017214  8563               	bsf	(frexp@value+3)& (0+255),2,b
 25279  017216  8763               	bsf	(frexp@value+3)& (0+255),3,b
 25280  017218  8963               	bsf	(frexp@value+3)& (0+255),4,b
 25281  01721A  8B63               	bsf	(frexp@value+3)& (0+255),5,b
 25282  01721C  9D63               	bcf	(frexp@value+3)& (0+255),6,b
 25283                           
 25284                           ; BSR set to: 0
 25285  01721E  9F62               	bcf	(frexp@value+2)& (0+255),7,b
 25286                           
 25287                           ; BSR set to: 0
 25288  017220  C060  F060         	movff	frexp@value,?_frexp
 25289  017224  C061  F061         	movff	frexp@value+1,?_frexp+1
 25290  017228  C062  F062         	movff	frexp@value+2,?_frexp+2
 25291  01722C  C063  F063         	movff	frexp@value+3,?_frexp+3
 25292  017230  0012               	return	
 25293  017232                     __end_of_frexp:
 25294                           	opt stack 0
 25295                           tosu	equ	0xFFF
 25296                           tosh	equ	0xFFE
 25297                           tosl	equ	0xFFD
 25298                           pclath	equ	0xFFA
 25299                           tblptru	equ	0xFF8
 25300                           tblptrh	equ	0xFF7
 25301                           tblptrl	equ	0xFF6
 25302                           tablat	equ	0xFF5
 25303                           prodh	equ	0xFF4
 25304                           prodl	equ	0xFF3
 25305                           intcon	equ	0xFF2
 25306                           indf0	equ	0xFEF
 25307                           postinc0	equ	0xFEE
 25308                           fsr0h	equ	0xFEA
 25309                           fsr0l	equ	0xFE9
 25310                           wreg	equ	0xFE8
 25311                           indf1	equ	0xFE7
 25312                           postdec1	equ	0xFE5
 25313                           fsr1h	equ	0xFE2
 25314                           fsr1l	equ	0xFE1
 25315                           indf2	equ	0xFDF
 25316                           postinc2	equ	0xFDE
 25317                           postdec2	equ	0xFDD
 25318                           plusw2	equ	0xFDB
 25319                           fsr2h	equ	0xFDA
 25320                           fsr2l	equ	0xFD9
 25321                           status	equ	0xFD8
 25322                           
 25323 ;; *************** function ___flge *****************
 25324 ;; Defined at:
 25325 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flge.c"
 25326 ;; Parameters:    Size  Location     Type
 25327 ;;  ff1             4    0[BANK0 ] PTR int 
 25328 ;;  ff2             4    4[BANK0 ] PTR int 
 25329 ;; Auto vars:     Size  Location     Type
 25330 ;;		None
 25331 ;; Return value:  Size  Location     Type
 25332 ;;		None               void
 25333 ;; Registers used:
 25334 ;;		wreg, status,2, status,0
 25335 ;; Tracked objects:
 25336 ;;		On entry : 0/0
 25337 ;;		On exit  : 0/0
 25338 ;;		Unchanged: 0/0
 25339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25340 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25342 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25343 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25344 ;;Total ram usage:       12 bytes
 25345 ;; Hardware stack levels used:    1
 25346 ;; Hardware stack levels required when called:    7
 25347 ;; This function calls:
 25348 ;;		Nothing
 25349 ;; This function is called by:
 25350 ;;		_pow
 25351 ;;		_exp
 25352 ;;		_floor
 25353 ;; This function uses a non-reentrant model
 25354 ;;
 25355                           
 25356                           	psect	text102
 25357  0164C2                     __ptext102:
 25358                           	opt stack 0
 25359  0164C2                     ___flge:
 25360                           	opt stack 18
 25361                           
 25362                           ; BSR set to: 0
 25363                           ;incstack = 0
 25364  0164C2  0E00               	movlw	0
 25365  0164C4  0100               	movlb	0	; () banked
 25366  0164C6  1560               	andwf	___flge@ff1& (0+255),w,b
 25367  0164C8  6F68               	movwf	??___flge& (0+255),b
 25368  0164CA  0E00               	movlw	0
 25369  0164CC  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 25370  0164CE  6F69               	movwf	(??___flge+1)& (0+255),b
 25371  0164D0  0E80               	movlw	128
 25372  0164D2  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 25373  0164D4  6F6A               	movwf	(??___flge+2)& (0+255),b
 25374  0164D6  0E7F               	movlw	127
 25375  0164D8  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 25376  0164DA  6F6B               	movwf	(??___flge+3)& (0+255),b
 25377  0164DC  5168               	movf	??___flge& (0+255),w,b
 25378  0164DE  1169               	iorwf	(??___flge+1)& (0+255),w,b
 25379  0164E0  116A               	iorwf	(??___flge+2)& (0+255),w,b
 25380  0164E2  116B               	iorwf	(??___flge+3)& (0+255),w,b
 25381  0164E4  A4D8               	btfss	status,2,c
 25382  0164E6  D008               	goto	l2816
 25383                           
 25384                           ; BSR set to: 0
 25385  0164E8  0E00               	movlw	0
 25386  0164EA  6F60               	movwf	___flge@ff1& (0+255),b
 25387  0164EC  0E00               	movlw	0
 25388  0164EE  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 25389  0164F0  0E00               	movlw	0
 25390  0164F2  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 25391  0164F4  0E00               	movlw	0
 25392  0164F6  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 25393  0164F8                     l2816:
 25394                           
 25395                           ; BSR set to: 0
 25396                           
 25397                           ; BSR set to: 0
 25398  0164F8  0E00               	movlw	0
 25399  0164FA  1564               	andwf	___flge@ff2& (0+255),w,b
 25400  0164FC  6F68               	movwf	??___flge& (0+255),b
 25401  0164FE  0E00               	movlw	0
 25402  016500  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 25403  016502  6F69               	movwf	(??___flge+1)& (0+255),b
 25404  016504  0E80               	movlw	128
 25405  016506  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 25406  016508  6F6A               	movwf	(??___flge+2)& (0+255),b
 25407  01650A  0E7F               	movlw	127
 25408  01650C  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 25409  01650E  6F6B               	movwf	(??___flge+3)& (0+255),b
 25410  016510  5168               	movf	??___flge& (0+255),w,b
 25411  016512  1169               	iorwf	(??___flge+1)& (0+255),w,b
 25412  016514  116A               	iorwf	(??___flge+2)& (0+255),w,b
 25413  016516  116B               	iorwf	(??___flge+3)& (0+255),w,b
 25414  016518  A4D8               	btfss	status,2,c
 25415  01651A  D008               	goto	l2817
 25416                           
 25417                           ; BSR set to: 0
 25418  01651C  0E00               	movlw	0
 25419  01651E  6F64               	movwf	___flge@ff2& (0+255),b
 25420  016520  0E00               	movlw	0
 25421  016522  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 25422  016524  0E00               	movlw	0
 25423  016526  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 25424  016528  0E00               	movlw	0
 25425  01652A  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 25426  01652C                     l2817:
 25427                           
 25428                           ; BSR set to: 0
 25429                           
 25430                           ; BSR set to: 0
 25431  01652C  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 25432  01652E  D01D               	goto	l2818
 25433                           
 25434                           ; BSR set to: 0
 25435  016530  C060  F068         	movff	___flge@ff1,??___flge
 25436  016534  C061  F069         	movff	___flge@ff1+1,??___flge+1
 25437  016538  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 25438  01653C  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 25439  016540  1F68               	comf	??___flge& (0+255),f,b
 25440  016542  1F69               	comf	(??___flge+1)& (0+255),f,b
 25441  016544  1F6A               	comf	(??___flge+2)& (0+255),f,b
 25442  016546  1F6B               	comf	(??___flge+3)& (0+255),f,b
 25443  016548  2B68               	incf	??___flge& (0+255),f,b
 25444  01654A  0E00               	movlw	0
 25445  01654C  2369               	addwfc	(??___flge+1)& (0+255),f,b
 25446  01654E  236A               	addwfc	(??___flge+2)& (0+255),f,b
 25447  016550  236B               	addwfc	(??___flge+3)& (0+255),f,b
 25448  016552  0E00               	movlw	0
 25449  016554  2568               	addwf	??___flge& (0+255),w,b
 25450  016556  6F60               	movwf	___flge@ff1& (0+255),b
 25451  016558  0E00               	movlw	0
 25452  01655A  2169               	addwfc	(??___flge+1)& (0+255),w,b
 25453  01655C  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 25454  01655E  0E00               	movlw	0
 25455  016560  216A               	addwfc	(??___flge+2)& (0+255),w,b
 25456  016562  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 25457  016564  0E80               	movlw	128
 25458  016566  216B               	addwfc	(??___flge+3)& (0+255),w,b
 25459  016568  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 25460  01656A                     l2818:
 25461                           
 25462                           ; BSR set to: 0
 25463                           
 25464                           ; BSR set to: 0
 25465  01656A  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 25466  01656C  D01D               	goto	l2819
 25467                           
 25468                           ; BSR set to: 0
 25469  01656E  C064  F068         	movff	___flge@ff2,??___flge
 25470  016572  C065  F069         	movff	___flge@ff2+1,??___flge+1
 25471  016576  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 25472  01657A  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 25473  01657E  1F68               	comf	??___flge& (0+255),f,b
 25474  016580  1F69               	comf	(??___flge+1)& (0+255),f,b
 25475  016582  1F6A               	comf	(??___flge+2)& (0+255),f,b
 25476  016584  1F6B               	comf	(??___flge+3)& (0+255),f,b
 25477  016586  2B68               	incf	??___flge& (0+255),f,b
 25478  016588  0E00               	movlw	0
 25479  01658A  2369               	addwfc	(??___flge+1)& (0+255),f,b
 25480  01658C  236A               	addwfc	(??___flge+2)& (0+255),f,b
 25481  01658E  236B               	addwfc	(??___flge+3)& (0+255),f,b
 25482  016590  0E00               	movlw	0
 25483  016592  2568               	addwf	??___flge& (0+255),w,b
 25484  016594  6F64               	movwf	___flge@ff2& (0+255),b
 25485  016596  0E00               	movlw	0
 25486  016598  2169               	addwfc	(??___flge+1)& (0+255),w,b
 25487  01659A  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 25488  01659C  0E00               	movlw	0
 25489  01659E  216A               	addwfc	(??___flge+2)& (0+255),w,b
 25490  0165A0  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 25491  0165A2  0E80               	movlw	128
 25492  0165A4  216B               	addwfc	(??___flge+3)& (0+255),w,b
 25493  0165A6  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 25494  0165A8                     l2819:
 25495                           
 25496                           ; BSR set to: 0
 25497  0165A8  0E00               	movlw	0
 25498  0165AA  1B60               	xorwf	___flge@ff1& (0+255),f,b
 25499  0165AC  0E00               	movlw	0
 25500  0165AE  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 25501  0165B0  0E00               	movlw	0
 25502  0165B2  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 25503  0165B4  0E80               	movlw	128
 25504  0165B6  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 25505  0165B8  0E00               	movlw	0
 25506  0165BA  1B64               	xorwf	___flge@ff2& (0+255),f,b
 25507  0165BC  0E00               	movlw	0
 25508  0165BE  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 25509  0165C0  0E00               	movlw	0
 25510  0165C2  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 25511  0165C4  0E80               	movlw	128
 25512  0165C6  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 25513  0165C8  5164               	movf	___flge@ff2& (0+255),w,b
 25514  0165CA  5D60               	subwf	___flge@ff1& (0+255),w,b
 25515  0165CC  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 25516  0165CE  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 25517  0165D0  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 25518  0165D2  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 25519  0165D4  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 25520  0165D6  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 25521  0165D8  B0D8               	btfsc	status,0,c
 25522  0165DA  D002               	goto	l13807
 25523                           
 25524                           ; BSR set to: 0
 25525  0165DC  90D8               	bcf	status,0,c
 25526  0165DE  0012               	return	
 25527  0165E0                     l13807:
 25528                           
 25529                           ; BSR set to: 0
 25530                           
 25531                           ; BSR set to: 0
 25532  0165E0  80D8               	bsf	status,0,c
 25533                           
 25534                           ; BSR set to: 0
 25535  0165E2  0012               	return	
 25536  0165E4                     __end_of___flge:
 25537                           	opt stack 0
 25538                           tosu	equ	0xFFF
 25539                           tosh	equ	0xFFE
 25540                           tosl	equ	0xFFD
 25541                           pclath	equ	0xFFA
 25542                           tblptru	equ	0xFF8
 25543                           tblptrh	equ	0xFF7
 25544                           tblptrl	equ	0xFF6
 25545                           tablat	equ	0xFF5
 25546                           prodh	equ	0xFF4
 25547                           prodl	equ	0xFF3
 25548                           intcon	equ	0xFF2
 25549                           indf0	equ	0xFEF
 25550                           postinc0	equ	0xFEE
 25551                           fsr0h	equ	0xFEA
 25552                           fsr0l	equ	0xFE9
 25553                           wreg	equ	0xFE8
 25554                           indf1	equ	0xFE7
 25555                           postdec1	equ	0xFE5
 25556                           fsr1h	equ	0xFE2
 25557                           fsr1l	equ	0xFE1
 25558                           indf2	equ	0xFDF
 25559                           postinc2	equ	0xFDE
 25560                           postdec2	equ	0xFDD
 25561                           plusw2	equ	0xFDB
 25562                           fsr2h	equ	0xFDA
 25563                           fsr2l	equ	0xFD9
 25564                           status	equ	0xFD8
 25565                           
 25566 ;; *************** function _eval_poly *****************
 25567 ;; Defined at:
 25568 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
 25569 ;; Parameters:    Size  Location     Type
 25570 ;;  x               4   63[BANK0 ] PTR int 
 25571 ;;  d               2   67[BANK0 ] PTR const 
 25572 ;;		 -> log@coeff(36), exp@coeff(40), 
 25573 ;;  n               2   69[BANK0 ] int 
 25574 ;; Auto vars:     Size  Location     Type
 25575 ;;  res             4   75[BANK0 ] int 
 25576 ;; Return value:  Size  Location     Type
 25577 ;;                  4   63[BANK0 ] int 
 25578 ;; Registers used:
 25579 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25580 ;; Tracked objects:
 25581 ;;		On entry : 0/0
 25582 ;;		On exit  : 0/0
 25583 ;;		Unchanged: 0/0
 25584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25585 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25586 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25587 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25588 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25589 ;;Total ram usage:       16 bytes
 25590 ;; Hardware stack levels used:    1
 25591 ;; Hardware stack levels required when called:    8
 25592 ;; This function calls:
 25593 ;;		___fladd
 25594 ;;		___flmul
 25595 ;; This function is called by:
 25596 ;;		_exp
 25597 ;;		_log
 25598 ;; This function uses a non-reentrant model
 25599 ;;
 25600                           
 25601                           	psect	text103
 25602  016806                     __ptext103:
 25603                           	opt stack 0
 25604  016806                     _eval_poly:
 25605                           	opt stack 18
 25606                           
 25607                           ; BSR set to: 0
 25608                           ;incstack = 0
 25609  016806  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 25610  01680A  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 25611  01680E  0100               	movlb	0	; () banked
 25612  016810  90D8               	bcf	status,0,c
 25613  016812  37A7               	rlcf	??_eval_poly& (0+255),f,b
 25614  016814  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 25615  016816  90D8               	bcf	status,0,c
 25616  016818  37A7               	rlcf	??_eval_poly& (0+255),f,b
 25617  01681A  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 25618  01681C  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 25619  016820  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 25620  016824  51A7               	movf	??_eval_poly& (0+255),w,b
 25621  016826  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 25622  016828  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 25623  01682A  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 25624  01682C  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 25625  016830  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 25626  016834                     	if	0	;tblptru may be non-zero
 25627  016834                     	endif
 25628  016834                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 25629  016834  0E00               	movlw	low (__mediumconst shr (0+16))
 25630  016836  6EF8               	movwf	tblptru,c
 25631  016838                     	endif
 25632  016838  0009               	tblrd		*+
 25633  01683A  CFF5 F0AB          	movff	tablat,eval_poly@res
 25634  01683E  0009               	tblrd		*+
 25635  016840  CFF5 F0AC          	movff	tablat,eval_poly@res+1
 25636  016844  0009               	tblrd		*+
 25637  016846  CFF5 F0AD          	movff	tablat,eval_poly@res+2
 25638  01684A  000A               	tblrd		*-
 25639  01684C  CFF5 F0AE          	movff	tablat,eval_poly@res+3
 25640  016850  D04C               	goto	l3260
 25641  016852                     
 25642                           ; BSR set to: 0
 25643                           
 25644                           ; BSR set to: 0
 25645  016852  C0AB  F072         	movff	eval_poly@res,___flmul@a
 25646  016856  C0AC  F073         	movff	eval_poly@res+1,___flmul@a+1
 25647  01685A  C0AD  F074         	movff	eval_poly@res+2,___flmul@a+2
 25648  01685E  C0AE  F075         	movff	eval_poly@res+3,___flmul@a+3
 25649  016862  C09F  F06E         	movff	eval_poly@x,___flmul@b
 25650  016866  C0A0  F06F         	movff	eval_poly@x+1,___flmul@b+1
 25651  01686A  C0A1  F070         	movff	eval_poly@x+2,___flmul@b+2
 25652  01686E  C0A2  F071         	movff	eval_poly@x+3,___flmul@b+3
 25653  016872  ECC4  F09A         	call	___flmul	;wreg free
 25654  016876  C06E  F08B         	movff	?___flmul,___fladd@b
 25655  01687A  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 25656  01687E  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 25657  016882  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 25658  016886  0100               	movlb	0	; () banked
 25659  016888  07A5               	decf	eval_poly@n& (0+255),f,b
 25660  01688A  A0D8               	btfss	status,0,c
 25661  01688C  07A6               	decf	(eval_poly@n+1)& (0+255),f,b
 25662  01688E  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 25663  016892  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 25664  016896  90D8               	bcf	status,0,c
 25665  016898  37A7               	rlcf	??_eval_poly& (0+255),f,b
 25666  01689A  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 25667  01689C  90D8               	bcf	status,0,c
 25668  01689E  37A7               	rlcf	??_eval_poly& (0+255),f,b
 25669  0168A0  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 25670  0168A2  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 25671  0168A6  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 25672  0168AA  51A7               	movf	??_eval_poly& (0+255),w,b
 25673  0168AC  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 25674  0168AE  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 25675  0168B0  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 25676  0168B2  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 25677  0168B6  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 25678  0168BA                     	if	0	;tblptru may be non-zero
 25679  0168BA                     	endif
 25680  0168BA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 25681  0168BA  0E00               	movlw	low (__mediumconst shr (0+16))
 25682  0168BC  6EF8               	movwf	tblptru,c
 25683  0168BE                     	endif
 25684  0168BE  0009               	tblrd		*+
 25685  0168C0  CFF5 F08F          	movff	tablat,___fladd@a
 25686  0168C4  0009               	tblrd		*+
 25687  0168C6  CFF5 F090          	movff	tablat,___fladd@a+1
 25688  0168CA  0009               	tblrd		*+
 25689  0168CC  CFF5 F091          	movff	tablat,___fladd@a+2
 25690  0168D0  000A               	tblrd		*-
 25691  0168D2  CFF5 F092          	movff	tablat,___fladd@a+3
 25692  0168D6  EC6D  F09C         	call	___fladd	;wreg free
 25693  0168DA  C08B  F0AB         	movff	?___fladd,eval_poly@res
 25694  0168DE  C08C  F0AC         	movff	?___fladd+1,eval_poly@res+1
 25695  0168E2  C08D  F0AD         	movff	?___fladd+2,eval_poly@res+2
 25696  0168E6  C08E  F0AE         	movff	?___fladd+3,eval_poly@res+3
 25697  0168EA                     l3260:
 25698  0168EA  0100               	movlb	0	; () banked
 25699  0168EC  51A5               	movf	eval_poly@n& (0+255),w,b
 25700  0168EE  11A6               	iorwf	(eval_poly@n+1)& (0+255),w,b
 25701  0168F0  A4D8               	btfss	status,2,c
 25702  0168F2  D7AF               	goto	l3261
 25703                           
 25704                           ; BSR set to: 0
 25705  0168F4  C0AB  F09F         	movff	eval_poly@res,?_eval_poly
 25706  0168F8  C0AC  F0A0         	movff	eval_poly@res+1,?_eval_poly+1
 25707  0168FC  C0AD  F0A1         	movff	eval_poly@res+2,?_eval_poly+2
 25708  016900  C0AE  F0A2         	movff	eval_poly@res+3,?_eval_poly+3
 25709                           
 25710                           ; BSR set to: 0
 25711  016904  0012               	return		;funcret
 25712  016906                     __end_of_eval_poly:
 25713                           	opt stack 0
 25714                           tosu	equ	0xFFF
 25715                           tosh	equ	0xFFE
 25716                           tosl	equ	0xFFD
 25717                           pclath	equ	0xFFA
 25718                           tblptru	equ	0xFF8
 25719                           tblptrh	equ	0xFF7
 25720                           tblptrl	equ	0xFF6
 25721                           tablat	equ	0xFF5
 25722                           prodh	equ	0xFF4
 25723                           prodl	equ	0xFF3
 25724                           intcon	equ	0xFF2
 25725                           indf0	equ	0xFEF
 25726                           postinc0	equ	0xFEE
 25727                           fsr0h	equ	0xFEA
 25728                           fsr0l	equ	0xFE9
 25729                           wreg	equ	0xFE8
 25730                           indf1	equ	0xFE7
 25731                           postdec1	equ	0xFE5
 25732                           fsr1h	equ	0xFE2
 25733                           fsr1l	equ	0xFE1
 25734                           indf2	equ	0xFDF
 25735                           postinc2	equ	0xFDE
 25736                           postdec2	equ	0xFDD
 25737                           plusw2	equ	0xFDB
 25738                           fsr2h	equ	0xFDA
 25739                           fsr2l	equ	0xFD9
 25740                           status	equ	0xFD8
 25741                           
 25742 ;; *************** function ___flsub *****************
 25743 ;; Defined at:
 25744 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
 25745 ;; Parameters:    Size  Location     Type
 25746 ;;  b               4   63[BANK0 ] int 
 25747 ;;  a               4   67[BANK0 ] int 
 25748 ;; Auto vars:     Size  Location     Type
 25749 ;;		None
 25750 ;; Return value:  Size  Location     Type
 25751 ;;                  4   63[BANK0 ] int 
 25752 ;; Registers used:
 25753 ;;		wreg, status,2, status,0, cstack
 25754 ;; Tracked objects:
 25755 ;;		On entry : 0/0
 25756 ;;		On exit  : 0/0
 25757 ;;		Unchanged: 0/0
 25758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25759 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25762 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25763 ;;Total ram usage:        8 bytes
 25764 ;; Hardware stack levels used:    1
 25765 ;; Hardware stack levels required when called:    8
 25766 ;; This function calls:
 25767 ;;		___fladd
 25768 ;; This function is called by:
 25769 ;;		_exp
 25770 ;; This function uses a non-reentrant model
 25771 ;;
 25772                           
 25773                           	psect	text104
 25774  018650                     __ptext104:
 25775                           	opt stack 0
 25776  018650                     ___flsub:
 25777                           	opt stack 18
 25778                           
 25779                           ; BSR set to: 0
 25780                           ;incstack = 0
 25781  018650  0E00               	movlw	0
 25782  018652  0100               	movlb	0	; () banked
 25783  018654  1BA3               	xorwf	___flsub@a& (0+255),f,b
 25784  018656  0E00               	movlw	0
 25785  018658  1BA4               	xorwf	(___flsub@a+1)& (0+255),f,b
 25786  01865A  0E00               	movlw	0
 25787  01865C  1BA5               	xorwf	(___flsub@a+2)& (0+255),f,b
 25788  01865E  0E80               	movlw	128
 25789  018660  1BA6               	xorwf	(___flsub@a+3)& (0+255),f,b
 25790                           
 25791                           ; BSR set to: 0
 25792  018662  C09F  F08B         	movff	___flsub@b,___fladd@b
 25793  018666  C0A0  F08C         	movff	___flsub@b+1,___fladd@b+1
 25794  01866A  C0A1  F08D         	movff	___flsub@b+2,___fladd@b+2
 25795  01866E  C0A2  F08E         	movff	___flsub@b+3,___fladd@b+3
 25796  018672  C0A3  F08F         	movff	___flsub@a,___fladd@a
 25797  018676  C0A4  F090         	movff	___flsub@a+1,___fladd@a+1
 25798  01867A  C0A5  F091         	movff	___flsub@a+2,___fladd@a+2
 25799  01867E  C0A6  F092         	movff	___flsub@a+3,___fladd@a+3
 25800  018682  EC6D  F09C         	call	___fladd	;wreg free
 25801  018686  C08B  F09F         	movff	?___fladd,?___flsub
 25802  01868A  C08C  F0A0         	movff	?___fladd+1,?___flsub+1
 25803  01868E  C08D  F0A1         	movff	?___fladd+2,?___flsub+2
 25804  018692  C08E  F0A2         	movff	?___fladd+3,?___flsub+3
 25805  018696  0012               	return	
 25806  018698                     __end_of___flsub:
 25807                           	opt stack 0
 25808                           tosu	equ	0xFFF
 25809                           tosh	equ	0xFFE
 25810                           tosl	equ	0xFFD
 25811                           pclath	equ	0xFFA
 25812                           tblptru	equ	0xFF8
 25813                           tblptrh	equ	0xFF7
 25814                           tblptrl	equ	0xFF6
 25815                           tablat	equ	0xFF5
 25816                           prodh	equ	0xFF4
 25817                           prodl	equ	0xFF3
 25818                           intcon	equ	0xFF2
 25819                           indf0	equ	0xFEF
 25820                           postinc0	equ	0xFEE
 25821                           fsr0h	equ	0xFEA
 25822                           fsr0l	equ	0xFE9
 25823                           wreg	equ	0xFE8
 25824                           indf1	equ	0xFE7
 25825                           postdec1	equ	0xFE5
 25826                           fsr1h	equ	0xFE2
 25827                           fsr1l	equ	0xFE1
 25828                           indf2	equ	0xFDF
 25829                           postinc2	equ	0xFDE
 25830                           postdec2	equ	0xFDD
 25831                           plusw2	equ	0xFDB
 25832                           fsr2h	equ	0xFDA
 25833                           fsr2l	equ	0xFD9
 25834                           status	equ	0xFD8
 25835                           
 25836 ;; *************** function ___flneg *****************
 25837 ;; Defined at:
 25838 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flneg.c"
 25839 ;; Parameters:    Size  Location     Type
 25840 ;;  f1              4   39[BANK0 ] int 
 25841 ;; Auto vars:     Size  Location     Type
 25842 ;;		None
 25843 ;; Return value:  Size  Location     Type
 25844 ;;                  4   39[BANK0 ] int 
 25845 ;; Registers used:
 25846 ;;		wreg, status,2, status,0
 25847 ;; Tracked objects:
 25848 ;;		On entry : 0/0
 25849 ;;		On exit  : 0/0
 25850 ;;		Unchanged: 0/0
 25851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25852 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25855 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25856 ;;Total ram usage:        4 bytes
 25857 ;; Hardware stack levels used:    1
 25858 ;; Hardware stack levels required when called:    7
 25859 ;; This function calls:
 25860 ;;		Nothing
 25861 ;; This function is called by:
 25862 ;;		_ADCAverage
 25863 ;;		_pow
 25864 ;;		_exp
 25865 ;; This function uses a non-reentrant model
 25866 ;;
 25867                           
 25868                           	psect	text105
 25869  018AB6                     __ptext105:
 25870                           	opt stack 0
 25871  018AB6                     ___flneg:
 25872                           	opt stack 19
 25873                           
 25874                           ;incstack = 0
 25875  018AB6  0100               	movlb	0	; () banked
 25876  018AB8  5187               	movf	___flneg@f1& (0+255),w,b
 25877  018ABA  1188               	iorwf	(___flneg@f1+1)& (0+255),w,b
 25878  018ABC  1189               	iorwf	(___flneg@f1+2)& (0+255),w,b
 25879  018ABE  118A               	iorwf	(___flneg@f1+3)& (0+255),w,b
 25880  018AC0  B4D8               	btfsc	status,2,c
 25881  018AC2  D008               	goto	l2823
 25882                           
 25883                           ; BSR set to: 0
 25884  018AC4  0E00               	movlw	0
 25885  018AC6  1B87               	xorwf	___flneg@f1& (0+255),f,b
 25886  018AC8  0E00               	movlw	0
 25887  018ACA  1B88               	xorwf	(___flneg@f1+1)& (0+255),f,b
 25888  018ACC  0E00               	movlw	0
 25889  018ACE  1B89               	xorwf	(___flneg@f1+2)& (0+255),f,b
 25890  018AD0  0E80               	movlw	128
 25891  018AD2  1B8A               	xorwf	(___flneg@f1+3)& (0+255),f,b
 25892  018AD4                     l2823:
 25893                           
 25894                           ; BSR set to: 0
 25895                           
 25896                           ; BSR set to: 0
 25897  018AD4  C087  F087         	movff	___flneg@f1,?___flneg
 25898  018AD8  C088  F088         	movff	___flneg@f1+1,?___flneg+1
 25899  018ADC  C089  F089         	movff	___flneg@f1+2,?___flneg+2
 25900  018AE0  C08A  F08A         	movff	___flneg@f1+3,?___flneg+3
 25901  018AE4  0012               	return	
 25902  018AE6                     __end_of___flneg:
 25903                           	opt stack 0
 25904                           tosu	equ	0xFFF
 25905                           tosh	equ	0xFFE
 25906                           tosl	equ	0xFFD
 25907                           pclath	equ	0xFFA
 25908                           tblptru	equ	0xFF8
 25909                           tblptrh	equ	0xFF7
 25910                           tblptrl	equ	0xFF6
 25911                           tablat	equ	0xFF5
 25912                           prodh	equ	0xFF4
 25913                           prodl	equ	0xFF3
 25914                           intcon	equ	0xFF2
 25915                           indf0	equ	0xFEF
 25916                           postinc0	equ	0xFEE
 25917                           fsr0h	equ	0xFEA
 25918                           fsr0l	equ	0xFE9
 25919                           wreg	equ	0xFE8
 25920                           indf1	equ	0xFE7
 25921                           postdec1	equ	0xFE5
 25922                           fsr1h	equ	0xFE2
 25923                           fsr1l	equ	0xFE1
 25924                           indf2	equ	0xFDF
 25925                           postinc2	equ	0xFDE
 25926                           postdec2	equ	0xFDD
 25927                           plusw2	equ	0xFDB
 25928                           fsr2h	equ	0xFDA
 25929                           fsr2l	equ	0xFD9
 25930                           status	equ	0xFD8
 25931                           
 25932 ;; *************** function ___fldiv *****************
 25933 ;; Defined at:
 25934 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcdiv.c"
 25935 ;; Parameters:    Size  Location     Type
 25936 ;;  b               4    0[BANK0 ] int 
 25937 ;;  a               4    4[BANK0 ] int 
 25938 ;; Auto vars:     Size  Location     Type
 25939 ;;  grs             4   19[BANK0 ] unsigned long 
 25940 ;;  rem             4   13[BANK0 ] unsigned long 
 25941 ;;  new_exp         2   17[BANK0 ] int 
 25942 ;;  aexp            1   24[BANK0 ] unsigned char 
 25943 ;;  bexp            1   23[BANK0 ] unsigned char 
 25944 ;;  sign            1   12[BANK0 ] unsigned char 
 25945 ;; Return value:  Size  Location     Type
 25946 ;;                  4    0[BANK0 ] unsigned char 
 25947 ;; Registers used:
 25948 ;;		wreg, status,2, status,0
 25949 ;; Tracked objects:
 25950 ;;		On entry : 0/0
 25951 ;;		On exit  : 0/0
 25952 ;;		Unchanged: 0/0
 25953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25954 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25955 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25956 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25957 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25958 ;;Total ram usage:       25 bytes
 25959 ;; Hardware stack levels used:    1
 25960 ;; Hardware stack levels required when called:    7
 25961 ;; This function calls:
 25962 ;;		Nothing
 25963 ;; This function is called by:
 25964 ;;		_exp
 25965 ;;		_ADC_Voltage
 25966 ;; This function uses a non-reentrant model
 25967 ;;
 25968                           
 25969                           	psect	text106
 25970  013F08                     __ptext106:
 25971                           	opt stack 0
 25972  013F08                     ___fldiv:
 25973                           	opt stack 19
 25974                           
 25975                           ; BSR set to: 0
 25976                           ;incstack = 0
 25977  013F08  0100               	movlb	0	; () banked
 25978  013F0A  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 25979  013F0C  0B80               	andlw	128
 25980  013F0E  6F6C               	movwf	___fldiv@sign& (0+255),b
 25981  013F10  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 25982  013F12  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 25983  013F14  6F77               	movwf	___fldiv@bexp& (0+255),b
 25984                           
 25985                           ; BSR set to: 0
 25986  013F16  BF62               	btfsc	(___fldiv@b+2)& (0+255),7,b
 25987                           
 25988                           ; BSR set to: 0
 25989  013F18  8177               	bsf	___fldiv@bexp& (0+255),0,b
 25990                           
 25991                           ; BSR set to: 0
 25992                           
 25993                           ; BSR set to: 0
 25994  013F1A  5177               	movf	___fldiv@bexp& (0+255),w,b
 25995  013F1C  B4D8               	btfsc	status,2,c
 25996  013F1E  D00D               	goto	l3117
 25997                           
 25998                           ; BSR set to: 0
 25999  013F20  2977               	incf	___fldiv@bexp& (0+255),w,b
 26000  013F22  A4D8               	btfss	status,2,c
 26001  013F24  D008               	goto	l3118
 26002                           
 26003                           ; BSR set to: 0
 26004  013F26  0E00               	movlw	0
 26005  013F28  6F60               	movwf	___fldiv@b& (0+255),b
 26006  013F2A  0E00               	movlw	0
 26007  013F2C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26008  013F2E  0E00               	movlw	0
 26009  013F30  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26010  013F32  0E00               	movlw	0
 26011  013F34  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26012  013F36                     l3118:
 26013                           
 26014                           ; BSR set to: 0
 26015                           
 26016                           ; BSR set to: 0
 26017  013F36  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 26018  013F38  D006               	goto	L19
 26019  013F3A                     l3117:
 26020                           
 26021                           ; BSR set to: 0
 26022                           
 26023                           ; BSR set to: 0
 26024  013F3A  0E00               	movlw	0
 26025  013F3C  6F60               	movwf	___fldiv@b& (0+255),b
 26026  013F3E  0E00               	movlw	0
 26027  013F40  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26028  013F42  0E00               	movlw	0
 26029  013F44  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26030  013F46                     L19:
 26031  013F46  0E00               	movlw	0
 26032  013F48  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26033                           
 26034                           ; BSR set to: 0
 26035                           
 26036                           ; BSR set to: 0
 26037  013F4A  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26038  013F4C  0B80               	andlw	128
 26039  013F4E  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 26040                           
 26041                           ; BSR set to: 0
 26042  013F50  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26043  013F52  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 26044  013F54  6F78               	movwf	___fldiv@aexp& (0+255),b
 26045                           
 26046                           ; BSR set to: 0
 26047  013F56  BF66               	btfsc	(___fldiv@a+2)& (0+255),7,b
 26048                           
 26049                           ; BSR set to: 0
 26050  013F58  8178               	bsf	___fldiv@aexp& (0+255),0,b
 26051                           
 26052                           ; BSR set to: 0
 26053                           
 26054                           ; BSR set to: 0
 26055  013F5A  5178               	movf	___fldiv@aexp& (0+255),w,b
 26056  013F5C  B4D8               	btfsc	status,2,c
 26057  013F5E  D00D               	goto	l3121
 26058                           
 26059                           ; BSR set to: 0
 26060  013F60  2978               	incf	___fldiv@aexp& (0+255),w,b
 26061  013F62  A4D8               	btfss	status,2,c
 26062  013F64  D008               	goto	l3122
 26063                           
 26064                           ; BSR set to: 0
 26065  013F66  0E00               	movlw	0
 26066  013F68  6F64               	movwf	___fldiv@a& (0+255),b
 26067  013F6A  0E00               	movlw	0
 26068  013F6C  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 26069  013F6E  0E00               	movlw	0
 26070  013F70  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 26071  013F72  0E00               	movlw	0
 26072  013F74  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 26073  013F76                     l3122:
 26074                           
 26075                           ; BSR set to: 0
 26076                           
 26077                           ; BSR set to: 0
 26078  013F76  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 26079  013F78  D006               	goto	L20
 26080  013F7A                     l3121:
 26081                           
 26082                           ; BSR set to: 0
 26083                           
 26084                           ; BSR set to: 0
 26085  013F7A  0E00               	movlw	0
 26086  013F7C  6F64               	movwf	___fldiv@a& (0+255),b
 26087  013F7E  0E00               	movlw	0
 26088  013F80  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 26089  013F82  0E00               	movlw	0
 26090  013F84  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 26091  013F86                     L20:
 26092  013F86  0E00               	movlw	0
 26093  013F88  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 26094                           
 26095                           ; BSR set to: 0
 26096                           
 26097                           ; BSR set to: 0
 26098  013F8A  5164               	movf	___fldiv@a& (0+255),w,b
 26099  013F8C  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 26100  013F8E  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 26101  013F90  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 26102  013F92  A4D8               	btfss	status,2,c
 26103  013F94  D015               	goto	l3124
 26104                           
 26105                           ; BSR set to: 0
 26106  013F96  0E00               	movlw	0
 26107  013F98  6F60               	movwf	___fldiv@b& (0+255),b
 26108  013F9A  0E00               	movlw	0
 26109  013F9C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26110  013F9E  0E00               	movlw	0
 26111  013FA0  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26112  013FA2  0E00               	movlw	0
 26113  013FA4  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26114                           
 26115                           ; BSR set to: 0
 26116  013FA6  0E80               	movlw	128
 26117  013FA8  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 26118  013FAA  0E7F               	movlw	127
 26119  013FAC  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 26120                           
 26121                           ; BSR set to: 0
 26122  013FAE  C060  F060         	movff	___fldiv@b,?___fldiv
 26123  013FB2  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 26124  013FB6  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 26125  013FBA  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 26126                           
 26127                           ; BSR set to: 0
 26128  013FBE  0012               	return	
 26129  013FC0                     l3124:
 26130                           
 26131                           ; BSR set to: 0
 26132                           
 26133                           ; BSR set to: 0
 26134  013FC0  5177               	movf	___fldiv@bexp& (0+255),w,b
 26135  013FC2  A4D8               	btfss	status,2,c
 26136  013FC4  D011               	goto	l3126
 26137                           
 26138                           ; BSR set to: 0
 26139  013FC6  0E00               	movlw	0
 26140  013FC8  6F60               	movwf	___fldiv@b& (0+255),b
 26141  013FCA  0E00               	movlw	0
 26142  013FCC  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26143  013FCE  0E00               	movlw	0
 26144  013FD0  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26145  013FD2  0E00               	movlw	0
 26146  013FD4  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26147                           
 26148                           ; BSR set to: 0
 26149  013FD6  C060  F060         	movff	___fldiv@b,?___fldiv
 26150  013FDA  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 26151  013FDE  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 26152  013FE2  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 26153                           
 26154                           ; BSR set to: 0
 26155  013FE6  0012               	return	
 26156  013FE8                     l3126:
 26157                           
 26158                           ; BSR set to: 0
 26159                           
 26160                           ; BSR set to: 0
 26161  013FE8  5178               	movf	___fldiv@aexp& (0+255),w,b
 26162  013FEA  6F68               	movwf	??___fldiv& (0+255),b
 26163  013FEC  6B69               	clrf	(??___fldiv+1)& (0+255),b
 26164  013FEE  1F68               	comf	??___fldiv& (0+255),f,b
 26165  013FF0  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 26166  013FF2  4B68               	infsnz	??___fldiv& (0+255),f,b
 26167  013FF4  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 26168  013FF6  5177               	movf	___fldiv@bexp& (0+255),w,b
 26169  013FF8  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 26170  013FFA  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 26171  013FFC  5168               	movf	??___fldiv& (0+255),w,b
 26172  013FFE  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 26173  014000  5169               	movf	(??___fldiv+1)& (0+255),w,b
 26174  014002  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 26175  014004  0E7F               	movlw	127
 26176  014006  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 26177  014008  6F71               	movwf	___fldiv@new_exp& (0+255),b
 26178  01400A  0E00               	movlw	0
 26179  01400C  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 26180  01400E  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 26181                           
 26182                           ; BSR set to: 0
 26183  014010  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 26184  014014  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 26185  014018  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 26186  01401C  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 26187                           
 26188                           ; BSR set to: 0
 26189  014020  0E00               	movlw	0
 26190  014022  6F60               	movwf	___fldiv@b& (0+255),b
 26191  014024  0E00               	movlw	0
 26192  014026  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26193  014028  0E00               	movlw	0
 26194  01402A  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26195  01402C  0E00               	movlw	0
 26196  01402E  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26197                           
 26198                           ; BSR set to: 0
 26199  014030  0E00               	movlw	0
 26200  014032  6F73               	movwf	___fldiv@grs& (0+255),b
 26201  014034  0E00               	movlw	0
 26202  014036  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 26203  014038  0E00               	movlw	0
 26204  01403A  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 26205  01403C  0E00               	movlw	0
 26206  01403E  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 26207                           
 26208                           ; BSR set to: 0
 26209  014040  0E00               	movlw	0
 26210  014042  6F78               	movwf	___fldiv@aexp& (0+255),b
 26211  014044  D028               	goto	l3127
 26212  014046                     
 26213                           ; BSR set to: 0
 26214                           
 26215                           ; BSR set to: 0
 26216  014046  5178               	movf	___fldiv@aexp& (0+255),w,b
 26217  014048  B4D8               	btfsc	status,2,c
 26218  01404A  D011               	goto	l3129
 26219                           
 26220                           ; BSR set to: 0
 26221  01404C  90D8               	bcf	status,0,c
 26222  01404E  376D               	rlcf	___fldiv@rem& (0+255),f,b
 26223  014050  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 26224  014052  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 26225  014054  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 26226  014056  90D8               	bcf	status,0,c
 26227  014058  3760               	rlcf	___fldiv@b& (0+255),f,b
 26228  01405A  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 26229  01405C  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 26230  01405E  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 26231                           
 26232                           ; BSR set to: 0
 26233  014060  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 26234                           
 26235                           ; BSR set to: 0
 26236  014062  8160               	bsf	___fldiv@b& (0+255),0,b
 26237                           
 26238                           ; BSR set to: 0
 26239  014064  90D8               	bcf	status,0,c
 26240  014066  3773               	rlcf	___fldiv@grs& (0+255),f,b
 26241  014068  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 26242  01406A  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 26243  01406C  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 26244  01406E                     l3129:
 26245                           
 26246                           ; BSR set to: 0
 26247                           
 26248                           ; BSR set to: 0
 26249  01406E  5164               	movf	___fldiv@a& (0+255),w,b
 26250  014070  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 26251  014072  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 26252  014074  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 26253  014076  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 26254  014078  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 26255  01407A  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26256  01407C  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 26257  01407E  A0D8               	btfss	status,0,c
 26258  014080  D009               	goto	l3131
 26259                           
 26260                           ; BSR set to: 0
 26261  014082  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 26262                           
 26263                           ; BSR set to: 0
 26264  014084  5164               	movf	___fldiv@a& (0+255),w,b
 26265  014086  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 26266  014088  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 26267  01408A  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 26268  01408C  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 26269  01408E  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 26270  014090  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26271  014092  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 26272  014094                     l3131:
 26273                           
 26274                           ; BSR set to: 0
 26275                           
 26276                           ; BSR set to: 0
 26277  014094  2B78               	incf	___fldiv@aexp& (0+255),f,b
 26278  014096                     l3127:
 26279                           
 26280                           ; BSR set to: 0
 26281  014096  0E19               	movlw	25
 26282  014098  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 26283  01409A  D7D5               	goto	l3128
 26284                           
 26285                           ; BSR set to: 0
 26286                           
 26287                           ; BSR set to: 0
 26288  01409C  516D               	movf	___fldiv@rem& (0+255),w,b
 26289  01409E  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 26290  0140A0  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 26291  0140A2  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 26292  0140A4  B4D8               	btfsc	status,2,c
 26293  0140A6  D011               	goto	l3134
 26294                           
 26295                           ; BSR set to: 0
 26296  0140A8  8173               	bsf	___fldiv@grs& (0+255),0,b
 26297                           
 26298                           ; BSR set to: 0
 26299  0140AA  D00F               	goto	l3134
 26300  0140AC                     
 26301                           ; BSR set to: 0
 26302                           
 26303                           ; BSR set to: 0
 26304  0140AC  90D8               	bcf	status,0,c
 26305  0140AE  3760               	rlcf	___fldiv@b& (0+255),f,b
 26306  0140B0  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 26307  0140B2  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 26308  0140B4  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 26309                           
 26310                           ; BSR set to: 0
 26311  0140B6  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 26312                           
 26313                           ; BSR set to: 0
 26314  0140B8  8160               	bsf	___fldiv@b& (0+255),0,b
 26315                           
 26316                           ; BSR set to: 0
 26317  0140BA  90D8               	bcf	status,0,c
 26318  0140BC  3773               	rlcf	___fldiv@grs& (0+255),f,b
 26319  0140BE  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 26320  0140C0  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 26321  0140C2  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 26322  0140C4  0771               	decf	___fldiv@new_exp& (0+255),f,b
 26323  0140C6  A0D8               	btfss	status,0,c
 26324  0140C8  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 26325  0140CA                     l3134:
 26326                           
 26327                           ; BSR set to: 0
 26328                           
 26329                           ; BSR set to: 0
 26330  0140CA  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 26331  0140CC  D7EF               	goto	l3135
 26332                           
 26333                           ; BSR set to: 0
 26334                           
 26335                           ; BSR set to: 0
 26336  0140CE  0E00               	movlw	0
 26337  0140D0  6F78               	movwf	___fldiv@aexp& (0+255),b
 26338                           
 26339                           ; BSR set to: 0
 26340  0140D2  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 26341  0140D4  D016               	goto	l3141
 26342                           
 26343                           ; BSR set to: 0
 26344  0140D6  0EFF               	movlw	255
 26345  0140D8  1573               	andwf	___fldiv@grs& (0+255),w,b
 26346  0140DA  6F68               	movwf	??___fldiv& (0+255),b
 26347  0140DC  0EFF               	movlw	255
 26348  0140DE  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 26349  0140E0  6F69               	movwf	(??___fldiv+1)& (0+255),b
 26350  0140E2  0EFF               	movlw	255
 26351  0140E4  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 26352  0140E6  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 26353  0140E8  0E7F               	movlw	127
 26354  0140EA  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 26355  0140EC  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 26356  0140EE  5168               	movf	??___fldiv& (0+255),w,b
 26357  0140F0  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 26358  0140F2  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 26359  0140F4  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 26360  0140F6  A4D8               	btfss	status,2,c
 26361  0140F8  D002               	goto	u12210
 26362                           
 26363                           ; BSR set to: 0
 26364                           
 26365                           ; BSR set to: 0
 26366  0140FA  A160               	btfss	___fldiv@b& (0+255),0,b
 26367  0140FC  D002               	goto	l3141
 26368  0140FE                     u12210:
 26369                           
 26370                           ; BSR set to: 0
 26371  0140FE  0E01               	movlw	1
 26372  014100  6F78               	movwf	___fldiv@aexp& (0+255),b
 26373  014102                     l3141:
 26374                           
 26375                           ; BSR set to: 0
 26376                           
 26377                           ; BSR set to: 0
 26378                           
 26379                           ; BSR set to: 0
 26380  014102  5178               	movf	___fldiv@aexp& (0+255),w,b
 26381  014104  B4D8               	btfsc	status,2,c
 26382  014106  D01F               	goto	l3143
 26383                           
 26384                           ; BSR set to: 0
 26385  014108  0E01               	movlw	1
 26386  01410A  2760               	addwf	___fldiv@b& (0+255),f,b
 26387  01410C  0E00               	movlw	0
 26388  01410E  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 26389  014110  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 26390  014112  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 26391                           
 26392                           ; BSR set to: 0
 26393  014114  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 26394  014116  D017               	goto	l3143
 26395                           
 26396                           ; BSR set to: 0
 26397  014118  C060  F068         	movff	___fldiv@b,??___fldiv
 26398  01411C  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 26399  014120  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 26400  014124  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 26401  014128  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 26402  01412A  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 26403  01412C  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 26404  01412E  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 26405  014130  3368               	rrcf	??___fldiv& (0+255),f,b
 26406  014132  C068  F060         	movff	??___fldiv,___fldiv@b
 26407  014136  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 26408  01413A  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 26409  01413E  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 26410                           
 26411                           ; BSR set to: 0
 26412  014142  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 26413  014144  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 26414  014146                     l3143:
 26415                           
 26416                           ; BSR set to: 0
 26417                           
 26418                           ; BSR set to: 0
 26419                           
 26420                           ; BSR set to: 0
 26421  014146  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 26422  014148  D010               	goto	l3144
 26423  01414A  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 26424  01414C  E103               	bnz	u12240
 26425  01414E  2971               	incf	___fldiv@new_exp& (0+255),w,b
 26426  014150  A0D8               	btfss	status,0,c
 26427  014152  D00B               	goto	l3144
 26428  014154                     u12240:
 26429                           
 26430                           ; BSR set to: 0
 26431  014154  0E00               	movlw	0
 26432  014156  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 26433  014158  6971               	setf	___fldiv@new_exp& (0+255),b
 26434  01415A  0E00               	movlw	0
 26435  01415C  6F60               	movwf	___fldiv@b& (0+255),b
 26436  01415E  0E00               	movlw	0
 26437  014160  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26438  014162  0E00               	movlw	0
 26439  014164  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26440  014166  0E00               	movlw	0
 26441  014168  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26442  01416A                     l3144:
 26443                           
 26444                           ; BSR set to: 0
 26445                           
 26446                           ; BSR set to: 0
 26447  01416A  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 26448  01416C  D005               	goto	u12250
 26449  01416E  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 26450  014170  E111               	bnz	l14971
 26451  014172  0571               	decf	___fldiv@new_exp& (0+255),w,b
 26452  014174  B0D8               	btfsc	status,0,c
 26453  014176  D00E               	goto	l3145
 26454  014178                     u12250:
 26455                           
 26456                           ; BSR set to: 0
 26457  014178  0E00               	movlw	0
 26458  01417A  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 26459  01417C  0E00               	movlw	0
 26460  01417E  6F71               	movwf	___fldiv@new_exp& (0+255),b
 26461  014180  0E00               	movlw	0
 26462  014182  6F60               	movwf	___fldiv@b& (0+255),b
 26463  014184  0E00               	movlw	0
 26464  014186  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26465  014188  0E00               	movlw	0
 26466  01418A  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26467  01418C  0E00               	movlw	0
 26468  01418E  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26469  014190  0E00               	movlw	0
 26470  014192  6F6C               	movwf	___fldiv@sign& (0+255),b
 26471  014194                     l3145:
 26472  014194                     l14971:
 26473                           
 26474                           ; BSR set to: 0
 26475  014194  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 26476                           
 26477                           ; BSR set to: 0
 26478  014198  A177               	btfss	___fldiv@bexp& (0+255),0,b
 26479  01419A  D002               	goto	l3146
 26480                           
 26481                           ; BSR set to: 0
 26482  01419C  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 26483  01419E  D001               	goto	l3147
 26484  0141A0                     l3146:
 26485                           
 26486                           ; BSR set to: 0
 26487                           
 26488                           ; BSR set to: 0
 26489  0141A0  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 26490  0141A2                     l3147:
 26491                           
 26492                           ; BSR set to: 0
 26493                           
 26494                           ; BSR set to: 0
 26495  0141A2  90D8               	bcf	status,0,c
 26496  0141A4  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 26497  0141A6  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26498                           
 26499                           ; BSR set to: 0
 26500  0141A8  516C               	movf	___fldiv@sign& (0+255),w,b
 26501  0141AA  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 26502                           
 26503                           ; BSR set to: 0
 26504  0141AC  C060  F060         	movff	___fldiv@b,?___fldiv
 26505  0141B0  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 26506  0141B4  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 26507  0141B8  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 26508  0141BC  0012               	return	
 26509  0141BE                     __end_of___fldiv:
 26510                           	opt stack 0
 26511                           tosu	equ	0xFFF
 26512                           tosh	equ	0xFFE
 26513                           tosl	equ	0xFFD
 26514                           pclath	equ	0xFFA
 26515                           tblptru	equ	0xFF8
 26516                           tblptrh	equ	0xFF7
 26517                           tblptrl	equ	0xFF6
 26518                           tablat	equ	0xFF5
 26519                           prodh	equ	0xFF4
 26520                           prodl	equ	0xFF3
 26521                           intcon	equ	0xFF2
 26522                           indf0	equ	0xFEF
 26523                           postinc0	equ	0xFEE
 26524                           fsr0h	equ	0xFEA
 26525                           fsr0l	equ	0xFE9
 26526                           wreg	equ	0xFE8
 26527                           indf1	equ	0xFE7
 26528                           postdec1	equ	0xFE5
 26529                           fsr1h	equ	0xFE2
 26530                           fsr1l	equ	0xFE1
 26531                           indf2	equ	0xFDF
 26532                           postinc2	equ	0xFDE
 26533                           postdec2	equ	0xFDD
 26534                           plusw2	equ	0xFDB
 26535                           fsr2h	equ	0xFDA
 26536                           fsr2l	equ	0xFD9
 26537                           status	equ	0xFD8
 26538                           
 26539 ;; *************** function _HMI_SetNumber *****************
 26540 ;; Defined at:
 26541 ;;		line 221 in file "HMI.c"
 26542 ;; Parameters:    Size  Location     Type
 26543 ;;  pInput          2   22[BANK0 ] int 
 26544 ;; Auto vars:     Size  Location     Type
 26545 ;;		None
 26546 ;; Return value:  Size  Location     Type
 26547 ;;                  1    wreg      void 
 26548 ;; Registers used:
 26549 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26550 ;; Tracked objects:
 26551 ;;		On entry : 0/0
 26552 ;;		On exit  : 0/0
 26553 ;;		Unchanged: 0/0
 26554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26555 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26558 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26559 ;;Total ram usage:        2 bytes
 26560 ;; Hardware stack levels used:    1
 26561 ;; Hardware stack levels required when called:    9
 26562 ;; This function calls:
 26563 ;;		_HMI_SetSegments
 26564 ;;		_itos
 26565 ;; This function is called by:
 26566 ;;		_Event_TestButton
 26567 ;;		_main
 26568 ;;		_ADCAverage
 26569 ;;		_Event_HMI_UpButton
 26570 ;;		_Event_HMI_DownButton
 26571 ;; This function uses a non-reentrant model
 26572 ;;
 26573                           
 26574                           	psect	text107
 26575  018C3E                     __ptext107:
 26576                           	opt stack 0
 26577  018C3E                     _HMI_SetNumber:
 26578                           	opt stack 19
 26579                           
 26580                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 26581                           
 26582                           ; BSR set to: 0
 26583                           ;incstack = 0
 26584  018C3E  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 26585  018C42  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 26586  018C46  0EA0               	movlw	low _HMIBoard
 26587  018C48  0100               	movlb	0	; () banked
 26588  018C4A  6F6E               	movwf	itos@destination& (0+255),b
 26589  018C4C  0E03               	movlw	high _HMIBoard
 26590  018C4E  6F6F               	movwf	(itos@destination+1)& (0+255),b
 26591  018C50  ECBC  F0B6         	call	_itos	;wreg free
 26592                           
 26593                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 26594  018C54  0EA0               	movlw	low _HMIBoard
 26595  018C56  0100               	movlb	0	; () banked
 26596  018C58  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 26597  018C5A  0E03               	movlw	high _HMIBoard
 26598  018C5C  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 26599  018C5E  EC19  F0B9         	call	_HMI_SetSegments	;wreg free
 26600  018C62  0012               	return		;funcret
 26601  018C64                     __end_of_HMI_SetNumber:
 26602                           	opt stack 0
 26603                           tosu	equ	0xFFF
 26604                           tosh	equ	0xFFE
 26605                           tosl	equ	0xFFD
 26606                           pclath	equ	0xFFA
 26607                           tblptru	equ	0xFF8
 26608                           tblptrh	equ	0xFF7
 26609                           tblptrl	equ	0xFF6
 26610                           tablat	equ	0xFF5
 26611                           prodh	equ	0xFF4
 26612                           prodl	equ	0xFF3
 26613                           intcon	equ	0xFF2
 26614                           indf0	equ	0xFEF
 26615                           postinc0	equ	0xFEE
 26616                           fsr0h	equ	0xFEA
 26617                           fsr0l	equ	0xFE9
 26618                           wreg	equ	0xFE8
 26619                           indf1	equ	0xFE7
 26620                           postdec1	equ	0xFE5
 26621                           fsr1h	equ	0xFE2
 26622                           fsr1l	equ	0xFE1
 26623                           indf2	equ	0xFDF
 26624                           postinc2	equ	0xFDE
 26625                           postdec2	equ	0xFDD
 26626                           plusw2	equ	0xFDB
 26627                           fsr2h	equ	0xFDA
 26628                           fsr2l	equ	0xFD9
 26629                           status	equ	0xFD8
 26630                           
 26631 ;; *************** function _itos *****************
 26632 ;; Defined at:
 26633 ;;		line 369 in file "Library/Types.c"
 26634 ;; Parameters:    Size  Location     Type
 26635 ;;  input           2   12[BANK0 ] unsigned short 
 26636 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 26637 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26638 ;; Auto vars:     Size  Location     Type
 26639 ;;  Out             2   20[BANK0 ] unsigned short 
 26640 ;;  Length          2   18[BANK0 ] unsigned short 
 26641 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 26642 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26643 ;; Return value:  Size  Location     Type
 26644 ;;                  1    wreg      void 
 26645 ;; Registers used:
 26646 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26647 ;; Tracked objects:
 26648 ;;		On entry : 0/0
 26649 ;;		On exit  : 0/0
 26650 ;;		Unchanged: 0/0
 26651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26652 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26653 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26655 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26656 ;;Total ram usage:       10 bytes
 26657 ;; Hardware stack levels used:    1
 26658 ;; Hardware stack levels required when called:    8
 26659 ;; This function calls:
 26660 ;;		___lwdiv
 26661 ;;		___lwmod
 26662 ;;		_reverse
 26663 ;; This function is called by:
 26664 ;;		_HMI_SetNumber
 26665 ;; This function uses a non-reentrant model
 26666 ;;
 26667                           
 26668                           	psect	text108
 26669  016D78                     __ptext108:
 26670                           	opt stack 0
 26671  016D78                     _itos:
 26672                           	opt stack 19
 26673                           
 26674                           ;Types.c: 371: UINT16 Out = input;
 26675                           
 26676                           ;incstack = 0
 26677  016D78  C06C  F074         	movff	itos@input,itos@Out
 26678  016D7C  C06D  F075         	movff	itos@input+1,itos@Out+1
 26679                           
 26680                           ;Types.c: 372: UINT16 Length = 0;
 26681  016D80  0E00               	movlw	0
 26682  016D82  0100               	movlb	0	; () banked
 26683  016D84  6F73               	movwf	(itos@Length+1)& (0+255),b
 26684  016D86  0E00               	movlw	0
 26685  016D88  6F72               	movwf	itos@Length& (0+255),b
 26686                           
 26687                           ; BSR set to: 0
 26688                           ;Types.c: 373: char *Data = destination;
 26689  016D8A  C06E  F070         	movff	itos@destination,itos@Data
 26690  016D8E  C06F  F071         	movff	itos@destination+1,itos@Data+1
 26691                           
 26692                           ; BSR set to: 0
 26693                           ;Types.c: 374: if(Out == 0)
 26694  016D92  5174               	movf	itos@Out& (0+255),w,b
 26695  016D94  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 26696  016D96  A4D8               	btfss	status,2,c
 26697  016D98  D030               	goto	l929
 26698                           
 26699                           ; BSR set to: 0
 26700                           ;Types.c: 375: {
 26701                           ;Types.c: 376: Data[0] = (UINT16)'0';
 26702  016D9A  C070  FFD9         	movff	itos@Data,fsr2l
 26703  016D9E  C071  FFDA         	movff	itos@Data+1,fsr2h
 26704  016DA2  0E30               	movlw	48
 26705  016DA4  6EDF               	movwf	indf2,c
 26706                           
 26707                           ; BSR set to: 0
 26708                           ;Types.c: 377: Length = 1;
 26709  016DA6  0E00               	movlw	0
 26710  016DA8  6F73               	movwf	(itos@Length+1)& (0+255),b
 26711  016DAA  0E01               	movlw	1
 26712  016DAC  6F72               	movwf	itos@Length& (0+255),b
 26713                           
 26714                           ;Types.c: 378: }
 26715  016DAE  D039               	goto	l928
 26716  016DB0                     
 26717                           ; BSR set to: 0
 26718                           ;Types.c: 382: {
 26719                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 26720                           
 26721                           ; BSR set to: 0
 26722  016DB0  C074  F067         	movff	itos@Out,___lwmod@dividend
 26723  016DB4  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 26724  016DB8  0E00               	movlw	0
 26725  016DBA  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 26726  016DBC  0E0A               	movlw	10
 26727  016DBE  6F69               	movwf	___lwmod@divisor& (0+255),b
 26728  016DC0  EC6F  F0C3         	call	___lwmod	;wreg free
 26729  016DC4  0100               	movlb	0	; () banked
 26730  016DC6  5167               	movf	?___lwmod& (0+255),w,b
 26731  016DC8  0F30               	addlw	48
 26732  016DCA  C070  FFD9         	movff	itos@Data,fsr2l
 26733  016DCE  C071  FFDA         	movff	itos@Data+1,fsr2h
 26734  016DD2  6EDF               	movwf	indf2,c
 26735                           
 26736                           ; BSR set to: 0
 26737                           ;Types.c: 384: Out /= 10;
 26738  016DD4  C074  F060         	movff	itos@Out,___lwdiv@dividend
 26739  016DD8  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 26740  016DDC  0E00               	movlw	0
 26741  016DDE  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 26742  016DE0  0E0A               	movlw	10
 26743  016DE2  6F62               	movwf	___lwdiv@divisor& (0+255),b
 26744  016DE4  ECE5  F0C0         	call	___lwdiv	;wreg free
 26745  016DE8  C060  F074         	movff	?___lwdiv,itos@Out
 26746  016DEC  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 26747                           
 26748                           ;Types.c: 385: Length ++;
 26749  016DF0  0100               	movlb	0	; () banked
 26750  016DF2  4B72               	infsnz	itos@Length& (0+255),f,b
 26751  016DF4  2B73               	incf	(itos@Length+1)& (0+255),f,b
 26752                           
 26753                           ; BSR set to: 0
 26754                           ;Types.c: 386: Data++;
 26755  016DF6  4B70               	infsnz	itos@Data& (0+255),f,b
 26756  016DF8  2B71               	incf	(itos@Data+1)& (0+255),f,b
 26757  016DFA                     l929:
 26758                           
 26759                           ; BSR set to: 0
 26760                           
 26761                           ; BSR set to: 0
 26762  016DFA  5174               	movf	itos@Out& (0+255),w,b
 26763  016DFC  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 26764  016DFE  B4D8               	btfsc	status,2,c
 26765  016E00  D006               	goto	u12620
 26766                           
 26767                           ; BSR set to: 0
 26768  016E02  5173               	movf	(itos@Length+1)& (0+255),w,b
 26769  016E04  E104               	bnz	l15227
 26770  016E06  0E06               	movlw	6
 26771  016E08  5D72               	subwf	itos@Length& (0+255),w,b
 26772  016E0A  A0D8               	btfss	status,0,c
 26773  016E0C  D7D1               	goto	l930
 26774  016E0E                     u12620:
 26775  016E0E                     l15227:
 26776                           
 26777                           ; BSR set to: 0
 26778                           ;Types.c: 387: }
 26779                           ;Types.c: 388: reverse(destination, Length);
 26780  016E0E  C06E  F060         	movff	itos@destination,reverse@input
 26781  016E12  C06F  F061         	movff	itos@destination+1,reverse@input+1
 26782  016E16  C072  F062         	movff	itos@Length,reverse@length
 26783  016E1A  C073  F063         	movff	itos@Length+1,reverse@length+1
 26784  016E1E  EC91  F0C0         	call	_reverse	;wreg free
 26785  016E22                     l928:
 26786                           
 26787                           ;Types.c: 389: }
 26788                           ;Types.c: 390: destination[Length] = '\0';
 26789  016E22  0100               	movlb	0	; () banked
 26790  016E24  5172               	movf	itos@Length& (0+255),w,b
 26791  016E26  256E               	addwf	itos@destination& (0+255),w,b
 26792  016E28  6ED9               	movwf	fsr2l,c
 26793  016E2A  5173               	movf	(itos@Length+1)& (0+255),w,b
 26794  016E2C  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 26795  016E2E  6EDA               	movwf	fsr2h,c
 26796  016E30  0E00               	movlw	0
 26797  016E32  6EDF               	movwf	indf2,c
 26798                           
 26799                           ; BSR set to: 0
 26800  016E34  0012               	return		;funcret
 26801  016E36                     __end_of_itos:
 26802                           	opt stack 0
 26803                           tosu	equ	0xFFF
 26804                           tosh	equ	0xFFE
 26805                           tosl	equ	0xFFD
 26806                           pclath	equ	0xFFA
 26807                           tblptru	equ	0xFF8
 26808                           tblptrh	equ	0xFF7
 26809                           tblptrl	equ	0xFF6
 26810                           tablat	equ	0xFF5
 26811                           prodh	equ	0xFF4
 26812                           prodl	equ	0xFF3
 26813                           intcon	equ	0xFF2
 26814                           indf0	equ	0xFEF
 26815                           postinc0	equ	0xFEE
 26816                           fsr0h	equ	0xFEA
 26817                           fsr0l	equ	0xFE9
 26818                           wreg	equ	0xFE8
 26819                           indf1	equ	0xFE7
 26820                           postdec1	equ	0xFE5
 26821                           fsr1h	equ	0xFE2
 26822                           fsr1l	equ	0xFE1
 26823                           indf2	equ	0xFDF
 26824                           postinc2	equ	0xFDE
 26825                           postdec2	equ	0xFDD
 26826                           plusw2	equ	0xFDB
 26827                           fsr2h	equ	0xFDA
 26828                           fsr2l	equ	0xFD9
 26829                           status	equ	0xFD8
 26830                           
 26831 ;; *************** function _reverse *****************
 26832 ;; Defined at:
 26833 ;;		line 357 in file "Library/Types.c"
 26834 ;; Parameters:    Size  Location     Type
 26835 ;;  input           2    0[BANK0 ] PTR unsigned char 
 26836 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26837 ;;  length          2    2[BANK0 ] unsigned short 
 26838 ;; Auto vars:     Size  Location     Type
 26839 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 26840 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26841 ;;  tempVar         1    4[BANK0 ] unsigned char 
 26842 ;; Return value:  Size  Location     Type
 26843 ;;                  1    wreg      void 
 26844 ;; Registers used:
 26845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26846 ;; Tracked objects:
 26847 ;;		On entry : 0/0
 26848 ;;		On exit  : 0/0
 26849 ;;		Unchanged: 0/0
 26850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26851 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26852 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26854 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26855 ;;Total ram usage:        7 bytes
 26856 ;; Hardware stack levels used:    1
 26857 ;; Hardware stack levels required when called:    7
 26858 ;; This function calls:
 26859 ;;		Nothing
 26860 ;; This function is called by:
 26861 ;;		_itos
 26862 ;; This function uses a non-reentrant model
 26863 ;;
 26864                           
 26865                           	psect	text109
 26866  018122                     __ptext109:
 26867                           	opt stack 0
 26868  018122                     _reverse:
 26869                           	opt stack 19
 26870                           
 26871                           ;Types.c: 359: char tempVar,
 26872                           ;Types.c: 360: *iterator = input + length;
 26873                           
 26874                           ; BSR set to: 0
 26875                           ;incstack = 0
 26876  018122  0100               	movlb	0	; () banked
 26877  018124  5162               	movf	reverse@length& (0+255),w,b
 26878  018126  2560               	addwf	reverse@input& (0+255),w,b
 26879  018128  6F65               	movwf	reverse@iterator& (0+255),b
 26880  01812A  5163               	movf	(reverse@length+1)& (0+255),w,b
 26881  01812C  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 26882  01812E  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 26883                           
 26884                           ;Types.c: 362: while ( --iterator > input )
 26885  018130  D018               	goto	l921
 26886  018132                     
 26887                           ; BSR set to: 0
 26888                           ;Types.c: 363: {
 26889                           ;Types.c: 364: tempVar = *input;
 26890                           
 26891                           ; BSR set to: 0
 26892  018132  C060  FFD9         	movff	reverse@input,fsr2l
 26893  018136  C061  FFDA         	movff	reverse@input+1,fsr2h
 26894  01813A  50DF               	movf	indf2,w,c
 26895  01813C  6F64               	movwf	reverse@tempVar& (0+255),b
 26896                           
 26897                           ; BSR set to: 0
 26898                           ;Types.c: 365: *input++=*iterator;
 26899  01813E  C065  FFD9         	movff	reverse@iterator,fsr2l
 26900  018142  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 26901  018146  C060  FFE1         	movff	reverse@input,fsr1l
 26902  01814A  C061  FFE2         	movff	reverse@input+1,fsr1h
 26903  01814E  CFDF FFE7          	movff	indf2,indf1
 26904                           
 26905                           ; BSR set to: 0
 26906  018152  4B60               	infsnz	reverse@input& (0+255),f,b
 26907  018154  2B61               	incf	(reverse@input+1)& (0+255),f,b
 26908                           
 26909                           ; BSR set to: 0
 26910                           ;Types.c: 366: *iterator=tempVar;
 26911  018156  C065  FFD9         	movff	reverse@iterator,fsr2l
 26912  01815A  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 26913  01815E  C064  FFDF         	movff	reverse@tempVar,indf2
 26914  018162                     l921:
 26915                           
 26916                           ; BSR set to: 0
 26917                           
 26918                           ; BSR set to: 0
 26919  018162  0765               	decf	reverse@iterator& (0+255),f,b
 26920  018164  A0D8               	btfss	status,0,c
 26921  018166  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 26922  018168  5165               	movf	reverse@iterator& (0+255),w,b
 26923  01816A  5D60               	subwf	reverse@input& (0+255),w,b
 26924  01816C  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 26925  01816E  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 26926  018170  B0D8               	btfsc	status,0,c
 26927  018172  0012               	return	
 26928  018174  D7DE               	goto	l922
 26929  018176                     __end_of_reverse:
 26930                           	opt stack 0
 26931                           tosu	equ	0xFFF
 26932                           tosh	equ	0xFFE
 26933                           tosl	equ	0xFFD
 26934                           pclath	equ	0xFFA
 26935                           tblptru	equ	0xFF8
 26936                           tblptrh	equ	0xFF7
 26937                           tblptrl	equ	0xFF6
 26938                           tablat	equ	0xFF5
 26939                           prodh	equ	0xFF4
 26940                           prodl	equ	0xFF3
 26941                           intcon	equ	0xFF2
 26942                           indf0	equ	0xFEF
 26943                           postinc0	equ	0xFEE
 26944                           fsr0h	equ	0xFEA
 26945                           fsr0l	equ	0xFE9
 26946                           wreg	equ	0xFE8
 26947                           indf1	equ	0xFE7
 26948                           postdec1	equ	0xFE5
 26949                           fsr1h	equ	0xFE2
 26950                           fsr1l	equ	0xFE1
 26951                           indf2	equ	0xFDF
 26952                           postinc2	equ	0xFDE
 26953                           postdec2	equ	0xFDD
 26954                           plusw2	equ	0xFDB
 26955                           fsr2h	equ	0xFDA
 26956                           fsr2l	equ	0xFD9
 26957                           status	equ	0xFD8
 26958                           
 26959 ;; *************** function _HMI_SetSegments *****************
 26960 ;; Defined at:
 26961 ;;		line 226 in file "HMI.c"
 26962 ;; Parameters:    Size  Location     Type
 26963 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 26964 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26965 ;; Auto vars:     Size  Location     Type
 26966 ;;  in              2    4[BANK0 ] unsigned short 
 26967 ;; Return value:  Size  Location     Type
 26968 ;;                  1    wreg      void 
 26969 ;; Registers used:
 26970 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26971 ;; Tracked objects:
 26972 ;;		On entry : 0/0
 26973 ;;		On exit  : 0/0
 26974 ;;		Unchanged: 0/0
 26975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26976 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26977 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26979 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26980 ;;Total ram usage:        5 bytes
 26981 ;; Hardware stack levels used:    1
 26982 ;; Hardware stack levels required when called:    8
 26983 ;; This function calls:
 26984 ;;		_ToSegment
 26985 ;; This function is called by:
 26986 ;;		_HMI_SetNumber
 26987 ;; This function uses a non-reentrant model
 26988 ;;
 26989                           
 26990                           	psect	text110
 26991  017232                     __ptext110:
 26992                           	opt stack 0
 26993  017232                     _HMI_SetSegments:
 26994                           	opt stack 19
 26995                           
 26996                           ;HMI.c: 228: UINT16 in=0;
 26997                           
 26998                           ; BSR set to: 0
 26999                           ;incstack = 0
 27000  017232  0E00               	movlw	0
 27001  017234  0100               	movlb	0	; () banked
 27002  017236  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 27003  017238  0E00               	movlw	0
 27004  01723A  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 27005                           
 27006                           ;HMI.c: 229: while(*pString)
 27007  01723C  D02E               	goto	l1202
 27008  01723E                     
 27009                           ; BSR set to: 0
 27010                           ;HMI.c: 230: {
 27011                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 27012                           
 27013                           ; BSR set to: 0
 27014  01723E  0EA0               	movlw	low _HMIBoard
 27015  017240  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27016  017242  6ED9               	movwf	fsr2l,c
 27017  017244  0E03               	movlw	high _HMIBoard
 27018  017246  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27019  017248  6EDA               	movwf	fsr2h,c
 27020  01724A  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 27021  01724E  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 27022  017252  50E7               	movf	indf1,w,c
 27023  017254  EC34  F0A2         	call	_ToSegment
 27024  017258  6EDF               	movwf	indf2,c
 27025                           
 27026                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 27027  01725A  0EA0               	movlw	low _HMIBoard
 27028  01725C  0100               	movlb	0	; () banked
 27029  01725E  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27030  017260  6ED9               	movwf	fsr2l,c
 27031  017262  0E03               	movlw	high _HMIBoard
 27032  017264  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27033  017266  6EDA               	movwf	fsr2h,c
 27034  017268  0E80               	movlw	128
 27035  01726A  18DE               	xorwf	postinc2,w,c
 27036  01726C  A4D8               	btfss	status,2,c
 27037  01726E  D00B               	goto	l1201
 27038                           
 27039                           ; BSR set to: 0
 27040                           ;HMI.c: 234: {
 27041                           ;HMI.c: 235: in--;
 27042  017270  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 27043  017272  A0D8               	btfss	status,0,c
 27044  017274  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 27045                           
 27046                           ; BSR set to: 0
 27047                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 27048  017276  0EA0               	movlw	low _HMIBoard
 27049  017278  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27050  01727A  6ED9               	movwf	fsr2l,c
 27051  01727C  0E03               	movlw	high _HMIBoard
 27052  01727E  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27053  017280  6EDA               	movwf	fsr2h,c
 27054  017282  0E00               	movlw	0
 27055  017284  8EDB               	bsf	plusw2,7,c
 27056  017286                     l1201:
 27057                           
 27058                           ; BSR set to: 0
 27059                           ;HMI.c: 237: }
 27060                           ;HMI.c: 239: pString++;
 27061                           
 27062                           ; BSR set to: 0
 27063  017286  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 27064  017288  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 27065                           
 27066                           ; BSR set to: 0
 27067                           ;HMI.c: 240: in++;
 27068  01728A  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27069  01728C  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27070                           
 27071                           ; BSR set to: 0
 27072                           ;HMI.c: 241: if (in>=6)
 27073  01728E  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27074  017290  E116               	bnz	l15313
 27075  017292  0E06               	movlw	6
 27076  017294  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27077  017296  B0D8               	btfsc	status,0,c
 27078  017298  D012               	goto	l1204
 27079  01729A                     l1202:
 27080                           
 27081                           ; BSR set to: 0
 27082                           
 27083                           ; BSR set to: 0
 27084                           
 27085                           ; BSR set to: 0
 27086  01729A  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 27087  01729E  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 27088  0172A2  50DF               	movf	indf2,w,c
 27089  0172A4  B4D8               	btfsc	status,2,c
 27090  0172A6  D00B               	goto	l1204
 27091  0172A8  D7CA               	goto	l1200
 27092  0172AA                     
 27093                           ; BSR set to: 0
 27094                           ;HMI.c: 245: {
 27095                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 27096                           
 27097                           ; BSR set to: 0
 27098  0172AA  0EA0               	movlw	low _HMIBoard
 27099  0172AC  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27100  0172AE  6ED9               	movwf	fsr2l,c
 27101  0172B0  0E03               	movlw	high _HMIBoard
 27102  0172B2  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27103  0172B4  6EDA               	movwf	fsr2h,c
 27104  0172B6  0E00               	movlw	0
 27105  0172B8  6EDF               	movwf	indf2,c
 27106                           
 27107                           ; BSR set to: 0
 27108                           ;HMI.c: 247: in++;
 27109  0172BA  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27110  0172BC  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27111  0172BE                     l1204:
 27112  0172BE                     l15313:
 27113                           
 27114                           ; BSR set to: 0
 27115  0172BE  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27116  0172C0  E105               	bnz	l1207
 27117  0172C2  0E06               	movlw	6
 27118  0172C4  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27119  0172C6  B0D8               	btfsc	status,0,c
 27120  0172C8  0012               	return	
 27121  0172CA  D7EF               	goto	l1205
 27122  0172CC                     l1207:
 27123                           
 27124                           ; BSR set to: 0
 27125  0172CC  0012               	return		;funcret
 27126  0172CE                     __end_of_HMI_SetSegments:
 27127                           	opt stack 0
 27128                           tosu	equ	0xFFF
 27129                           tosh	equ	0xFFE
 27130                           tosl	equ	0xFFD
 27131                           pclath	equ	0xFFA
 27132                           tblptru	equ	0xFF8
 27133                           tblptrh	equ	0xFF7
 27134                           tblptrl	equ	0xFF6
 27135                           tablat	equ	0xFF5
 27136                           prodh	equ	0xFF4
 27137                           prodl	equ	0xFF3
 27138                           intcon	equ	0xFF2
 27139                           indf0	equ	0xFEF
 27140                           postinc0	equ	0xFEE
 27141                           fsr0h	equ	0xFEA
 27142                           fsr0l	equ	0xFE9
 27143                           wreg	equ	0xFE8
 27144                           indf1	equ	0xFE7
 27145                           postdec1	equ	0xFE5
 27146                           fsr1h	equ	0xFE2
 27147                           fsr1l	equ	0xFE1
 27148                           indf2	equ	0xFDF
 27149                           postinc2	equ	0xFDE
 27150                           postdec2	equ	0xFDD
 27151                           plusw2	equ	0xFDB
 27152                           fsr2h	equ	0xFDA
 27153                           fsr2l	equ	0xFD9
 27154                           status	equ	0xFD8
 27155                           
 27156 ;; *************** function _ToSegment *****************
 27157 ;; Defined at:
 27158 ;;		line 284 in file "Library/Types.c"
 27159 ;; Parameters:    Size  Location     Type
 27160 ;;  pCHR            1    wreg     unsigned char 
 27161 ;; Auto vars:     Size  Location     Type
 27162 ;;  pCHR            1    0[BANK0 ] unsigned char 
 27163 ;; Return value:  Size  Location     Type
 27164 ;;                  1    wreg      unsigned char 
 27165 ;; Registers used:
 27166 ;;		wreg, status,2, status,0
 27167 ;; Tracked objects:
 27168 ;;		On entry : 0/0
 27169 ;;		On exit  : 0/0
 27170 ;;		Unchanged: 0/0
 27171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27173 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27175 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27176 ;;Total ram usage:        1 bytes
 27177 ;; Hardware stack levels used:    1
 27178 ;; Hardware stack levels required when called:    7
 27179 ;; This function calls:
 27180 ;;		Nothing
 27181 ;; This function is called by:
 27182 ;;		_HMI_SetSegments
 27183 ;; This function uses a non-reentrant model
 27184 ;;
 27185                           
 27186                           	psect	text111
 27187  014468                     __ptext111:
 27188                           	opt stack 0
 27189  014468                     _ToSegment:
 27190                           	opt stack 19
 27191                           
 27192                           ; BSR set to: 0
 27193                           ;incstack = 0
 27194                           ;ToSegment@pCHR stored from wreg
 27195  014468  0100               	movlb	0	; () banked
 27196  01446A  6F60               	movwf	ToSegment@pCHR& (0+255),b
 27197                           
 27198                           ;Types.c: 286: switch(pCHR)
 27199  01446C  D07E               	goto	l853
 27200  01446E  0E3F               	movlw	63
 27201  014470  0012               	return	
 27202  014472  0E06               	movlw	6
 27203  014474  0012               	return	
 27204  014476  0E5B               	movlw	91
 27205  014478  0012               	return	
 27206  01447A  0E4F               	movlw	79
 27207  01447C  0012               	return	
 27208  01447E  0E66               	movlw	102
 27209  014480  0012               	return	
 27210  014482  0E6D               	movlw	109
 27211  014484  0012               	return	
 27212  014486  0E7D               	movlw	125
 27213  014488  0012               	return	
 27214  01448A  0E07               	movlw	7
 27215  01448C  0012               	return	
 27216  01448E  0E7F               	movlw	127
 27217  014490  0012               	return	
 27218  014492  0E6F               	movlw	111
 27219  014494  0012               	return	
 27220  014496  0E5F               	movlw	95
 27221  014498  0012               	return	
 27222  01449A  0E7C               	movlw	124
 27223  01449C  0012               	return	
 27224  01449E  0E58               	movlw	88
 27225  0144A0  0012               	return	
 27226  0144A2  0E5E               	movlw	94
 27227  0144A4  0012               	return	
 27228  0144A6  0E7B               	movlw	123
 27229  0144A8  0012               	return	
 27230  0144AA  0E71               	movlw	113
 27231  0144AC  0012               	return	
 27232  0144AE  0E6F               	movlw	111
 27233  0144B0  0012               	return	
 27234  0144B2  0E74               	movlw	116
 27235  0144B4  0012               	return	
 27236  0144B6  0E04               	movlw	4
 27237  0144B8  0012               	return	
 27238  0144BA  0E0E               	movlw	14
 27239  0144BC  0012               	return	
 27240  0144BE  0E7A               	movlw	122
 27241  0144C0  0012               	return	
 27242  0144C2  0E06               	movlw	6
 27243  0144C4  0012               	return	
 27244  0144C6  0E14               	movlw	20
 27245  0144C8  0012               	return	
 27246  0144CA  0E54               	movlw	84
 27247  0144CC  0012               	return	
 27248  0144CE  0E5C               	movlw	92
 27249  0144D0  0012               	return	
 27250  0144D2  0E73               	movlw	115
 27251  0144D4  0012               	return	
 27252  0144D6  0E67               	movlw	103
 27253  0144D8  0012               	return	
 27254  0144DA  0E50               	movlw	80
 27255  0144DC  0012               	return	
 27256  0144DE  0E6D               	movlw	109
 27257  0144E0  0012               	return	
 27258  0144E2  0E78               	movlw	120
 27259  0144E4  0012               	return	
 27260  0144E6  0E1C               	movlw	28
 27261  0144E8  0012               	return	
 27262  0144EA  0E62               	movlw	98
 27263  0144EC  0012               	return	
 27264  0144EE  0E2A               	movlw	42
 27265  0144F0  0012               	return	
 27266  0144F2  0E64               	movlw	100
 27267  0144F4  0012               	return	
 27268  0144F6  0E6E               	movlw	110
 27269  0144F8  0012               	return	
 27270  0144FA  0E5B               	movlw	91
 27271  0144FC  0012               	return	
 27272  0144FE  0E77               	movlw	119
 27273  014500  0012               	return	
 27274  014502  0E7F               	movlw	127
 27275  014504  0012               	return	
 27276  014506  0E39               	movlw	57
 27277  014508  0012               	return	
 27278  01450A  0E3F               	movlw	63
 27279  01450C  0012               	return	
 27280  01450E  0E79               	movlw	121
 27281  014510  0012               	return	
 27282  014512  0E71               	movlw	113
 27283  014514  0012               	return	
 27284  014516  0E3D               	movlw	61
 27285  014518  0012               	return	
 27286  01451A  0E76               	movlw	118
 27287  01451C  0012               	return	
 27288  01451E  0E06               	movlw	6
 27289  014520  0012               	return	
 27290  014522  0E1E               	movlw	30
 27291  014524  0012               	return	
 27292  014526  0E57               	movlw	87
 27293  014528  0012               	return	
 27294  01452A  0E38               	movlw	56
 27295  01452C  0012               	return	
 27296  01452E  0E76               	movlw	118
 27297  014530  0012               	return	
 27298  014532  0E76               	movlw	118
 27299  014534  0012               	return	
 27300  014536  0E3F               	movlw	63
 27301  014538  0012               	return	
 27302  01453A  0E73               	movlw	115
 27303  01453C  0012               	return	
 27304  01453E  0E3F               	movlw	63
 27305  014540  0012               	return	
 27306  014542  0E77               	movlw	119
 27307  014544  0012               	return	
 27308  014546  0E6D               	movlw	109
 27309  014548  0012               	return	
 27310  01454A  0E31               	movlw	49
 27311  01454C  0012               	return	
 27312  01454E  0E3E               	movlw	62
 27313  014550  0012               	return	
 27314  014552  0E3E               	movlw	62
 27315  014554  0012               	return	
 27316  014556  0E7E               	movlw	126
 27317  014558  0012               	return	
 27318  01455A  0E76               	movlw	118
 27319  01455C  0012               	return	
 27320  01455E  0E66               	movlw	102
 27321  014560  0012               	return	
 27322  014562  0E5B               	movlw	91
 27323  014564  0012               	return	
 27324  014566  0E80               	movlw	128
 27325  014568  0012               	return	
 27326  01456A                     l853:
 27327  01456A  0100               	movlb	0	; () banked
 27328  01456C  5160               	movf	ToSegment@pCHR& (0+255),w,b
 27329                           
 27330                           ; Switch size 1, requested type "space"
 27331                           ; Number of cases is 63, Range of values is 46 to 122
 27332                           ; switch strategies available:
 27333                           ; Name         Instructions Cycles
 27334                           ; simple_byte          190    96 (average)
 27335                           ;	Chosen strategy is simple_byte
 27336  01456E  0A2E               	xorlw	46	; case 46
 27337  014570  B4D8               	btfsc	status,2,c
 27338  014572  D7F9               	goto	l917
 27339  014574  0A1E               	xorlw	30	; case 48
 27340  014576  B4D8               	btfsc	status,2,c
 27341  014578  D77A               	goto	l854
 27342  01457A  0A01               	xorlw	1	; case 49
 27343  01457C  B4D8               	btfsc	status,2,c
 27344  01457E  D779               	goto	l856
 27345  014580  0A03               	xorlw	3	; case 50
 27346  014582  B4D8               	btfsc	status,2,c
 27347  014584  D778               	goto	l857
 27348  014586  0A01               	xorlw	1	; case 51
 27349  014588  B4D8               	btfsc	status,2,c
 27350  01458A  D777               	goto	l858
 27351  01458C  0A07               	xorlw	7	; case 52
 27352  01458E  B4D8               	btfsc	status,2,c
 27353  014590  D776               	goto	l859
 27354  014592  0A01               	xorlw	1	; case 53
 27355  014594  B4D8               	btfsc	status,2,c
 27356  014596  D775               	goto	l860
 27357  014598  0A03               	xorlw	3	; case 54
 27358  01459A  B4D8               	btfsc	status,2,c
 27359  01459C  D774               	goto	l861
 27360  01459E  0A01               	xorlw	1	; case 55
 27361  0145A0  B4D8               	btfsc	status,2,c
 27362  0145A2  D773               	goto	l862
 27363  0145A4  0A0F               	xorlw	15	; case 56
 27364  0145A6  B4D8               	btfsc	status,2,c
 27365  0145A8  D772               	goto	l863
 27366  0145AA  0A01               	xorlw	1	; case 57
 27367  0145AC  B4D8               	btfsc	status,2,c
 27368  0145AE  D771               	goto	l864
 27369  0145B0  0A78               	xorlw	120	; case 65
 27370  0145B2  B4D8               	btfsc	status,2,c
 27371  0145B4  D7A4               	goto	l891
 27372  0145B6  0A03               	xorlw	3	; case 66
 27373  0145B8  B4D8               	btfsc	status,2,c
 27374  0145BA  D7A3               	goto	l892
 27375  0145BC  0A01               	xorlw	1	; case 67
 27376  0145BE  B4D8               	btfsc	status,2,c
 27377  0145C0  D7A2               	goto	l893
 27378  0145C2  0A07               	xorlw	7	; case 68
 27379  0145C4  B4D8               	btfsc	status,2,c
 27380  0145C6  D7A1               	goto	l894
 27381  0145C8  0A01               	xorlw	1	; case 69
 27382  0145CA  B4D8               	btfsc	status,2,c
 27383  0145CC  D7A0               	goto	l895
 27384  0145CE  0A03               	xorlw	3	; case 70
 27385  0145D0  B4D8               	btfsc	status,2,c
 27386  0145D2  D79F               	goto	l896
 27387  0145D4  0A01               	xorlw	1	; case 71
 27388  0145D6  B4D8               	btfsc	status,2,c
 27389  0145D8  D79E               	goto	l897
 27390  0145DA  0A0F               	xorlw	15	; case 72
 27391  0145DC  B4D8               	btfsc	status,2,c
 27392  0145DE  D79D               	goto	l898
 27393  0145E0  0A01               	xorlw	1	; case 73
 27394  0145E2  B4D8               	btfsc	status,2,c
 27395  0145E4  D79C               	goto	l899
 27396  0145E6  0A03               	xorlw	3	; case 74
 27397  0145E8  B4D8               	btfsc	status,2,c
 27398  0145EA  D79B               	goto	l900
 27399  0145EC  0A01               	xorlw	1	; case 75
 27400  0145EE  B4D8               	btfsc	status,2,c
 27401  0145F0  D79A               	goto	l901
 27402  0145F2  0A07               	xorlw	7	; case 76
 27403  0145F4  B4D8               	btfsc	status,2,c
 27404  0145F6  D799               	goto	l902
 27405  0145F8  0A01               	xorlw	1	; case 77
 27406  0145FA  B4D8               	btfsc	status,2,c
 27407  0145FC  D798               	goto	l903
 27408  0145FE  0A03               	xorlw	3	; case 78
 27409  014600  B4D8               	btfsc	status,2,c
 27410  014602  D797               	goto	l904
 27411  014604  0A01               	xorlw	1	; case 79
 27412  014606  B4D8               	btfsc	status,2,c
 27413  014608  D796               	goto	l905
 27414  01460A  0A1F               	xorlw	31	; case 80
 27415  01460C  B4D8               	btfsc	status,2,c
 27416  01460E  D795               	goto	l906
 27417  014610  0A01               	xorlw	1	; case 81
 27418  014612  B4D8               	btfsc	status,2,c
 27419  014614  D794               	goto	l907
 27420  014616  0A03               	xorlw	3	; case 82
 27421  014618  B4D8               	btfsc	status,2,c
 27422  01461A  D793               	goto	l908
 27423  01461C  0A01               	xorlw	1	; case 83
 27424  01461E  B4D8               	btfsc	status,2,c
 27425  014620  D792               	goto	l909
 27426  014622  0A07               	xorlw	7	; case 84
 27427  014624  B4D8               	btfsc	status,2,c
 27428  014626  D791               	goto	l910
 27429  014628  0A01               	xorlw	1	; case 85
 27430  01462A  B4D8               	btfsc	status,2,c
 27431  01462C  D790               	goto	l911
 27432  01462E  0A03               	xorlw	3	; case 86
 27433  014630  B4D8               	btfsc	status,2,c
 27434  014632  D78F               	goto	l912
 27435  014634  0A01               	xorlw	1	; case 87
 27436  014636  B4D8               	btfsc	status,2,c
 27437  014638  D78E               	goto	l913
 27438  01463A  0A0F               	xorlw	15	; case 88
 27439  01463C  B4D8               	btfsc	status,2,c
 27440  01463E  D78D               	goto	l914
 27441  014640  0A01               	xorlw	1	; case 89
 27442  014642  B4D8               	btfsc	status,2,c
 27443  014644  D78C               	goto	l915
 27444  014646  0A03               	xorlw	3	; case 90
 27445  014648  B4D8               	btfsc	status,2,c
 27446  01464A  D78B               	goto	l916
 27447  01464C  0A3B               	xorlw	59	; case 97
 27448  01464E  B4D8               	btfsc	status,2,c
 27449  014650  D722               	goto	l865
 27450  014652  0A03               	xorlw	3	; case 98
 27451  014654  B4D8               	btfsc	status,2,c
 27452  014656  D721               	goto	l866
 27453  014658  0A01               	xorlw	1	; case 99
 27454  01465A  B4D8               	btfsc	status,2,c
 27455  01465C  D720               	goto	l867
 27456  01465E  0A07               	xorlw	7	; case 100
 27457  014660  B4D8               	btfsc	status,2,c
 27458  014662  D71F               	goto	l868
 27459  014664  0A01               	xorlw	1	; case 101
 27460  014666  B4D8               	btfsc	status,2,c
 27461  014668  D71E               	goto	l869
 27462  01466A  0A03               	xorlw	3	; case 102
 27463  01466C  B4D8               	btfsc	status,2,c
 27464  01466E  D71D               	goto	l870
 27465  014670  0A01               	xorlw	1	; case 103
 27466  014672  B4D8               	btfsc	status,2,c
 27467  014674  D71C               	goto	l871
 27468  014676  0A0F               	xorlw	15	; case 104
 27469  014678  B4D8               	btfsc	status,2,c
 27470  01467A  D71B               	goto	l872
 27471  01467C  0A01               	xorlw	1	; case 105
 27472  01467E  B4D8               	btfsc	status,2,c
 27473  014680  D71A               	goto	l873
 27474  014682  0A03               	xorlw	3	; case 106
 27475  014684  B4D8               	btfsc	status,2,c
 27476  014686  D719               	goto	l874
 27477  014688  0A01               	xorlw	1	; case 107
 27478  01468A  B4D8               	btfsc	status,2,c
 27479  01468C  D718               	goto	l875
 27480  01468E  0A07               	xorlw	7	; case 108
 27481  014690  B4D8               	btfsc	status,2,c
 27482  014692  D717               	goto	l876
 27483  014694  0A01               	xorlw	1	; case 109
 27484  014696  B4D8               	btfsc	status,2,c
 27485  014698  D716               	goto	l877
 27486  01469A  0A03               	xorlw	3	; case 110
 27487  01469C  B4D8               	btfsc	status,2,c
 27488  01469E  D715               	goto	l878
 27489  0146A0  0A01               	xorlw	1	; case 111
 27490  0146A2  B4D8               	btfsc	status,2,c
 27491  0146A4  D714               	goto	l879
 27492  0146A6  0A1F               	xorlw	31	; case 112
 27493  0146A8  B4D8               	btfsc	status,2,c
 27494  0146AA  D713               	goto	l880
 27495  0146AC  0A01               	xorlw	1	; case 113
 27496  0146AE  B4D8               	btfsc	status,2,c
 27497  0146B0  D712               	goto	l881
 27498  0146B2  0A03               	xorlw	3	; case 114
 27499  0146B4  B4D8               	btfsc	status,2,c
 27500  0146B6  D711               	goto	l882
 27501  0146B8  0A01               	xorlw	1	; case 115
 27502  0146BA  B4D8               	btfsc	status,2,c
 27503  0146BC  D710               	goto	l883
 27504  0146BE  0A07               	xorlw	7	; case 116
 27505  0146C0  B4D8               	btfsc	status,2,c
 27506  0146C2  D70F               	goto	l884
 27507  0146C4  0A01               	xorlw	1	; case 117
 27508  0146C6  B4D8               	btfsc	status,2,c
 27509  0146C8  D70E               	goto	l885
 27510  0146CA  0A03               	xorlw	3	; case 118
 27511  0146CC  B4D8               	btfsc	status,2,c
 27512  0146CE  D70D               	goto	l886
 27513  0146D0  0A01               	xorlw	1	; case 119
 27514  0146D2  B4D8               	btfsc	status,2,c
 27515  0146D4  D70C               	goto	l887
 27516  0146D6  0A0F               	xorlw	15	; case 120
 27517  0146D8  B4D8               	btfsc	status,2,c
 27518  0146DA  D70B               	goto	l888
 27519  0146DC  0A01               	xorlw	1	; case 121
 27520  0146DE  B4D8               	btfsc	status,2,c
 27521  0146E0  D70A               	goto	l889
 27522  0146E2  0A03               	xorlw	3	; case 122
 27523  0146E4  B4D8               	btfsc	status,2,c
 27524  0146E6  D709               	goto	l890
 27525                           
 27526                           ;Types.c: 354: return 0;
 27527                           
 27528                           ; BSR set to: 0
 27529  0146E8  0E00               	movlw	0
 27530  0146EA  0012               	return	
 27531  0146EC                     __end_of_ToSegment:
 27532                           	opt stack 0
 27533                           tosu	equ	0xFFF
 27534                           tosh	equ	0xFFE
 27535                           tosl	equ	0xFFD
 27536                           pclath	equ	0xFFA
 27537                           tblptru	equ	0xFF8
 27538                           tblptrh	equ	0xFF7
 27539                           tblptrl	equ	0xFF6
 27540                           tablat	equ	0xFF5
 27541                           prodh	equ	0xFF4
 27542                           prodl	equ	0xFF3
 27543                           intcon	equ	0xFF2
 27544                           indf0	equ	0xFEF
 27545                           postinc0	equ	0xFEE
 27546                           fsr0h	equ	0xFEA
 27547                           fsr0l	equ	0xFE9
 27548                           wreg	equ	0xFE8
 27549                           indf1	equ	0xFE7
 27550                           postdec1	equ	0xFE5
 27551                           fsr1h	equ	0xFE2
 27552                           fsr1l	equ	0xFE1
 27553                           indf2	equ	0xFDF
 27554                           postinc2	equ	0xFDE
 27555                           postdec2	equ	0xFDD
 27556                           plusw2	equ	0xFDB
 27557                           fsr2h	equ	0xFDA
 27558                           fsr2l	equ	0xFD9
 27559                           status	equ	0xFD8
 27560                           
 27561 ;; *************** function _HMI_Render *****************
 27562 ;; Defined at:
 27563 ;;		line 138 in file "HMI.c"
 27564 ;; Parameters:    Size  Location     Type
 27565 ;;		None
 27566 ;; Auto vars:     Size  Location     Type
 27567 ;;  a               2    8[BANK0 ] unsigned short 
 27568 ;; Return value:  Size  Location     Type
 27569 ;;                  1    wreg      void 
 27570 ;; Registers used:
 27571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27572 ;; Tracked objects:
 27573 ;;		On entry : 0/0
 27574 ;;		On exit  : 0/0
 27575 ;;		Unchanged: 0/0
 27576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27578 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27580 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27581 ;;Total ram usage:        2 bytes
 27582 ;; Hardware stack levels used:    1
 27583 ;; Hardware stack levels required when called:    9
 27584 ;; This function calls:
 27585 ;;		_OutSeg
 27586 ;; This function is called by:
 27587 ;;		_main
 27588 ;;		_ADCAverage
 27589 ;; This function uses a non-reentrant model
 27590 ;;
 27591                           
 27592                           	psect	text112
 27593  018984                     __ptext112:
 27594                           	opt stack 0
 27595  018984                     _HMI_Render:
 27596                           	opt stack 19
 27597                           
 27598                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 27599                           
 27600                           ;incstack = 0
 27601  018984  0E00               	movlw	0
 27602  018986  0100               	movlb	0	; () banked
 27603  018988  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 27604  01898A  0E00               	movlw	0
 27605  01898C  6F68               	movwf	HMI_Render@a& (0+255),b
 27606  01898E                     l15487:
 27607                           
 27608                           ; BSR set to: 0
 27609  01898E  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 27610  018990  E113               	bnz	l1158
 27611  018992  0E08               	movlw	8
 27612  018994  5D68               	subwf	HMI_Render@a& (0+255),w,b
 27613  018996  B0D8               	btfsc	status,0,c
 27614  018998  0012               	return	
 27615                           
 27616                           ; BSR set to: 0
 27617                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 27618                           
 27619                           ; BSR set to: 0
 27620                           
 27621                           ; BSR set to: 0
 27622  01899A  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 27623  01899E  0EA0               	movlw	low _HMIBoard
 27624  0189A0  2568               	addwf	HMI_Render@a& (0+255),w,b
 27625  0189A2  6ED9               	movwf	fsr2l,c
 27626  0189A4  0E03               	movlw	high _HMIBoard
 27627  0189A6  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 27628  0189A8  6EDA               	movwf	fsr2h,c
 27629  0189AA  50DF               	movf	indf2,w,c
 27630  0189AC  ECD0  F0BD         	call	_OutSeg
 27631  0189B0  0100               	movlb	0	; () banked
 27632  0189B2  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 27633  0189B4  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 27634  0189B6  D7EB               	goto	l15487
 27635  0189B8                     l1158:
 27636                           
 27637                           ; BSR set to: 0
 27638  0189B8  0012               	return		;funcret
 27639  0189BA                     __end_of_HMI_Render:
 27640                           	opt stack 0
 27641                           tosu	equ	0xFFF
 27642                           tosh	equ	0xFFE
 27643                           tosl	equ	0xFFD
 27644                           pclath	equ	0xFFA
 27645                           tblptru	equ	0xFF8
 27646                           tblptrh	equ	0xFF7
 27647                           tblptrl	equ	0xFF6
 27648                           tablat	equ	0xFF5
 27649                           prodh	equ	0xFF4
 27650                           prodl	equ	0xFF3
 27651                           intcon	equ	0xFF2
 27652                           indf0	equ	0xFEF
 27653                           postinc0	equ	0xFEE
 27654                           fsr0h	equ	0xFEA
 27655                           fsr0l	equ	0xFE9
 27656                           wreg	equ	0xFE8
 27657                           indf1	equ	0xFE7
 27658                           postdec1	equ	0xFE5
 27659                           fsr1h	equ	0xFE2
 27660                           fsr1l	equ	0xFE1
 27661                           indf2	equ	0xFDF
 27662                           postinc2	equ	0xFDE
 27663                           postdec2	equ	0xFDD
 27664                           plusw2	equ	0xFDB
 27665                           fsr2h	equ	0xFDA
 27666                           fsr2l	equ	0xFD9
 27667                           status	equ	0xFD8
 27668                           
 27669 ;; *************** function _OutSeg *****************
 27670 ;; Defined at:
 27671 ;;		line 54 in file "HMI.c"
 27672 ;; Parameters:    Size  Location     Type
 27673 ;;  pInput          1    wreg     unsigned char 
 27674 ;;  pSegment        1    3[BANK0 ] unsigned char 
 27675 ;; Auto vars:     Size  Location     Type
 27676 ;;  pInput          1    6[BANK0 ] unsigned char 
 27677 ;;  out             1    7[BANK0 ] volatile unsigned char 
 27678 ;; Return value:  Size  Location     Type
 27679 ;;                  1    wreg      void 
 27680 ;; Registers used:
 27681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27682 ;; Tracked objects:
 27683 ;;		On entry : 0/0
 27684 ;;		On exit  : 0/0
 27685 ;;		Unchanged: 0/0
 27686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27687 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27688 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27689 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27690 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27691 ;;Total ram usage:        5 bytes
 27692 ;; Hardware stack levels used:    1
 27693 ;; Hardware stack levels required when called:    8
 27694 ;; This function calls:
 27695 ;;		_SPI_Send
 27696 ;; This function is called by:
 27697 ;;		_HMI_Render
 27698 ;;		_HMI_GRender
 27699 ;; This function uses a non-reentrant model
 27700 ;;
 27701                           
 27702                           	psect	text113
 27703  017BA0                     __ptext113:
 27704                           	opt stack 0
 27705  017BA0                     _OutSeg:
 27706                           	opt stack 19
 27707                           
 27708                           ; BSR set to: 0
 27709                           ;incstack = 0
 27710                           ;OutSeg@pInput stored from wreg
 27711  017BA0  0100               	movlb	0	; () banked
 27712  017BA2  6F66               	movwf	OutSeg@pInput& (0+255),b
 27713                           
 27714                           ;HMI.c: 58: static UINT8 cur;
 27715                           ;HMI.c: 59: volatile UINT8 out;
 27716                           ;HMI.c: 60: static UINT8 segset;
 27717                           ;HMI.c: 61: static UINT8 a;
 27718                           ;HMI.c: 83: if (pSegment <= 8)
 27719  017BA4  0E09               	movlw	9
 27720  017BA6  0100               	movlb	0	; () banked
 27721  017BA8  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 27722  017BAA  0012               	return	
 27723                           
 27724                           ; BSR set to: 0
 27725                           ;HMI.c: 84: {
 27726                           ;HMI.c: 85: cur = pInput;
 27727  017BAC  C066  F044         	movff	OutSeg@pInput,OutSeg@cur
 27728                           
 27729                           ; BSR set to: 0
 27730                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 27731  017BB0  0E00               	movlw	0
 27732  017BB2  6E42               	movwf	OutSeg@a,c
 27733  017BB4                     l15275:
 27734                           
 27735                           ; BSR set to: 0
 27736  017BB4  0E07               	movlw	7
 27737  017BB6  6442               	cpfsgt	OutSeg@a,c
 27738  017BB8  D001               	goto	l1146
 27739  017BBA  D01F               	goto	u12710
 27740  017BBC                     l1146:
 27741                           
 27742                           ;HMI.c: 87: {
 27743                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 27744                           
 27745                           ; BSR set to: 0
 27746  017BBC  C044  F064         	movff	OutSeg@cur,??_OutSeg
 27747  017BC0  0E01               	movlw	1
 27748  017BC2  0100               	movlb	0	; () banked
 27749  017BC4  1764               	andwf	??_OutSeg& (0+255),f,b
 27750  017BC6  0E06               	movlw	6
 27751  017BC8  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 27752  017BCA                     u12705:
 27753  017BCA  90D8               	bcf	status,0,c
 27754  017BCC  3764               	rlcf	??_OutSeg& (0+255),f,b
 27755  017BCE  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 27756  017BD0  D7FC               	goto	u12705
 27757  017BD2  5164               	movf	??_OutSeg& (0+255),w,b
 27758  017BD4  6E43               	movwf	OutSeg@segset,c
 27759                           
 27760                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 27761  017BD6  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 27762  017BD8  42E8               	rrncf	wreg,f,c
 27763  017BDA  0BF8               	andlw	248
 27764  017BDC  1042               	iorwf	OutSeg@a,w,c
 27765  017BDE  1043               	iorwf	OutSeg@segset,w,c
 27766  017BE0  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 27767                           
 27768                           ;HMI.c: 90: cur >>= 1;
 27769  017BE2  90D8               	bcf	status,0,c
 27770  017BE4  3244               	rrcf	OutSeg@cur,f,c
 27771                           
 27772                           ; BSR set to: 0
 27773                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 27774  017BE6  0EC8               	movlw	low _SPI1
 27775  017BE8  6F60               	movwf	SPI_Send@pInput& (0+255),b
 27776  017BEA  0E02               	movlw	high _SPI1
 27777  017BEC  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 27778  017BEE  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 27779  017BF2  EC3D  F0BE         	call	_SPI_Send	;wreg free
 27780  017BF6  2A42               	incf	OutSeg@a,f,c
 27781  017BF8  D7DD               	goto	l15275
 27782  017BFA                     u12710:
 27783                           
 27784                           ;HMI.c: 96: }
 27785                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 27786  017BFA  0EC8               	movlw	low _SPI1
 27787  017BFC  0100               	movlb	0	; () banked
 27788  017BFE  6F60               	movwf	SPI_Send@pInput& (0+255),b
 27789  017C00  0E02               	movlw	high _SPI1
 27790  017C02  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 27791  017C04  0E00               	movlw	0
 27792  017C06  6F62               	movwf	SPI_Send@pData& (0+255),b
 27793  017C08  EC3D  F0BE         	call	_SPI_Send	;wreg free
 27794  017C0C  0012               	return	
 27795  017C0E                     __end_of_OutSeg:
 27796                           	opt stack 0
 27797                           tosu	equ	0xFFF
 27798                           tosh	equ	0xFFE
 27799                           tosl	equ	0xFFD
 27800                           pclath	equ	0xFFA
 27801                           tblptru	equ	0xFF8
 27802                           tblptrh	equ	0xFF7
 27803                           tblptrl	equ	0xFF6
 27804                           tablat	equ	0xFF5
 27805                           prodh	equ	0xFF4
 27806                           prodl	equ	0xFF3
 27807                           intcon	equ	0xFF2
 27808                           indf0	equ	0xFEF
 27809                           postinc0	equ	0xFEE
 27810                           fsr0h	equ	0xFEA
 27811                           fsr0l	equ	0xFE9
 27812                           wreg	equ	0xFE8
 27813                           indf1	equ	0xFE7
 27814                           postdec1	equ	0xFE5
 27815                           fsr1h	equ	0xFE2
 27816                           fsr1l	equ	0xFE1
 27817                           indf2	equ	0xFDF
 27818                           postinc2	equ	0xFDE
 27819                           postdec2	equ	0xFDD
 27820                           plusw2	equ	0xFDB
 27821                           fsr2h	equ	0xFDA
 27822                           fsr2l	equ	0xFD9
 27823                           status	equ	0xFD8
 27824                           
 27825 ;; *************** function _FunctReadADC *****************
 27826 ;; Defined at:
 27827 ;;		line 185 in file "dans.c"
 27828 ;; Parameters:    Size  Location     Type
 27829 ;;  channel         2    0[BANK0 ] int 
 27830 ;; Auto vars:     Size  Location     Type
 27831 ;;		None
 27832 ;; Return value:  Size  Location     Type
 27833 ;;                  2    0[BANK0 ] int 
 27834 ;; Registers used:
 27835 ;;		wreg, status,2, status,0
 27836 ;; Tracked objects:
 27837 ;;		On entry : 0/0
 27838 ;;		On exit  : 0/0
 27839 ;;		Unchanged: 0/0
 27840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27841 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27844 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27845 ;;Total ram usage:        2 bytes
 27846 ;; Hardware stack levels used:    1
 27847 ;; Hardware stack levels required when called:    7
 27848 ;; This function calls:
 27849 ;;		Nothing
 27850 ;; This function is called by:
 27851 ;;		_ADCAverage
 27852 ;; This function uses a non-reentrant model
 27853 ;;
 27854                           
 27855                           	psect	text114
 27856  018862                     __ptext114:
 27857                           	opt stack 0
 27858  018862                     _FunctReadADC:
 27859                           	opt stack 21
 27860                           
 27861                           ;dans.c: 187: if (channel > 4) return 0;
 27862                           
 27863                           ;incstack = 0
 27864  018862  0100               	movlb	0	; () banked
 27865  018864  BF61               	btfsc	(FunctReadADC@channel+1)& (0+255),7,b
 27866  018866  D00B               	goto	l2375
 27867  018868  5161               	movf	(FunctReadADC@channel+1)& (0+255),w,b
 27868  01886A  E104               	bnz	u13070
 27869  01886C  0E05               	movlw	5
 27870  01886E  5D60               	subwf	FunctReadADC@channel& (0+255),w,b
 27871  018870  A0D8               	btfss	status,0,c
 27872  018872  D005               	goto	l2375
 27873  018874                     u13070:
 27874                           
 27875                           ; BSR set to: 0
 27876  018874  0E00               	movlw	0
 27877  018876  6F61               	movwf	(?_FunctReadADC+1)& (0+255),b
 27878  018878  0E00               	movlw	0
 27879  01887A  6F60               	movwf	?_FunctReadADC& (0+255),b
 27880                           
 27881                           ; BSR set to: 0
 27882  01887C  0012               	return	
 27883  01887E                     l2375:
 27884                           
 27885                           ; BSR set to: 0
 27886                           ;dans.c: 188: ADCON0 = 0x00;
 27887                           
 27888                           ; BSR set to: 0
 27889  01887E  0E00               	movlw	0
 27890  018880  6EC2               	movwf	4034,c	;volatile
 27891                           
 27892                           ; BSR set to: 0
 27893                           ;dans.c: 189: ADCON0 = (channel << 2);
 27894  018882  4560               	rlncf	FunctReadADC@channel& (0+255),w,b
 27895  018884  46E8               	rlncf	wreg,f,c
 27896  018886  0BFC               	andlw	252
 27897  018888  6EC2               	movwf	4034,c	;volatile
 27898                           
 27899                           ; BSR set to: 0
 27900                           ;dans.c: 190: ADON = 1;
 27901  01888A  80C2               	bsf	4034,0,c	;volatile
 27902                           
 27903                           ; BSR set to: 0
 27904                           ;dans.c: 191: GODONE = 1;
 27905  01888C  82C2               	bsf	4034,1,c	;volatile
 27906  01888E                     
 27907                           ; BSR set to: 0
 27908  01888E  B2C2               	btfsc	4034,1,c	;volatile
 27909  018890  D7FE               	goto	l2378
 27910                           
 27911                           ;dans.c: 193: ADON = 0;
 27912  018892  90C2               	bcf	4034,0,c	;volatile
 27913                           
 27914                           ;dans.c: 194: return ADRES;
 27915  018894  CFC3 F060          	movff	4035,?_FunctReadADC	;volatile
 27916  018898  CFC4 F061          	movff	4036,?_FunctReadADC+1	;volatile
 27917  01889C  0012               	return		;funcret
 27918  01889E                     __end_of_FunctReadADC:
 27919                           	opt stack 0
 27920                           tosu	equ	0xFFF
 27921                           tosh	equ	0xFFE
 27922                           tosl	equ	0xFFD
 27923                           pclath	equ	0xFFA
 27924                           tblptru	equ	0xFF8
 27925                           tblptrh	equ	0xFF7
 27926                           tblptrl	equ	0xFF6
 27927                           tablat	equ	0xFF5
 27928                           prodh	equ	0xFF4
 27929                           prodl	equ	0xFF3
 27930                           intcon	equ	0xFF2
 27931                           indf0	equ	0xFEF
 27932                           postinc0	equ	0xFEE
 27933                           fsr0h	equ	0xFEA
 27934                           fsr0l	equ	0xFE9
 27935                           wreg	equ	0xFE8
 27936                           indf1	equ	0xFE7
 27937                           postdec1	equ	0xFE5
 27938                           fsr1h	equ	0xFE2
 27939                           fsr1l	equ	0xFE1
 27940                           indf2	equ	0xFDF
 27941                           postinc2	equ	0xFDE
 27942                           postdec2	equ	0xFDD
 27943                           plusw2	equ	0xFDB
 27944                           fsr2h	equ	0xFDA
 27945                           fsr2l	equ	0xFD9
 27946                           status	equ	0xFD8
 27947                           
 27948 ;; *************** function _Bump_Wall *****************
 27949 ;; Defined at:
 27950 ;;		line 695 in file "dans.c"
 27951 ;; Parameters:    Size  Location     Type
 27952 ;;		None
 27953 ;; Auto vars:     Size  Location     Type
 27954 ;;  temp2           2   80[BANK0 ] int 
 27955 ;;  distTrav        2   78[BANK0 ] int 
 27956 ;;  revDist         2   76[BANK0 ] int 
 27957 ;; Return value:  Size  Location     Type
 27958 ;;                  1    wreg      void 
 27959 ;; Registers used:
 27960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27961 ;; Tracked objects:
 27962 ;;		On entry : 0/0
 27963 ;;		On exit  : 0/0
 27964 ;;		Unchanged: 0/0
 27965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27967 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27968 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27969 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27970 ;;Total ram usage:        7 bytes
 27971 ;; Hardware stack levels used:    1
 27972 ;; Hardware stack levels required when called:   14
 27973 ;; This function calls:
 27974 ;;		_Console_Render
 27975 ;;		_Drive
 27976 ;;		_Get_Sensor_State
 27977 ;;		_Move_ADC_To
 27978 ;;		_Robot_Stop
 27979 ;;		_UpdateDistance
 27980 ;;		_delay_ms
 27981 ;;		_printf
 27982 ;; This function is called by:
 27983 ;;		_main
 27984 ;; This function uses a non-reentrant model
 27985 ;;
 27986                           
 27987                           	psect	text115
 27988  016AE8                     __ptext115:
 27989                           	opt stack 0
 27990  016AE8                     _Bump_Wall:
 27991                           	opt stack 16
 27992                           
 27993                           ;dans.c: 696: int temp2 = 0;
 27994                           
 27995                           ;incstack = 0
 27996  016AE8  0E00               	movlw	0
 27997  016AEA  0100               	movlb	0	; () banked
 27998  016AEC  6FB1               	movwf	(Bump_Wall@temp2+1)& (0+255),b
 27999  016AEE  0E00               	movlw	0
 28000  016AF0  6FB0               	movwf	Bump_Wall@temp2& (0+255),b
 28001                           
 28002                           ;dans.c: 698: int revDist = 30;
 28003  016AF2  0E00               	movlw	0
 28004  016AF4  6FAD               	movwf	(Bump_Wall@revDist+1)& (0+255),b
 28005  016AF6  0E1E               	movlw	30
 28006  016AF8  6FAC               	movwf	Bump_Wall@revDist& (0+255),b
 28007                           
 28008                           ;dans.c: 700: int distTrav = 0;
 28009  016AFA  0E00               	movlw	0
 28010  016AFC  6FAF               	movwf	(Bump_Wall@distTrav+1)& (0+255),b
 28011  016AFE  0E00               	movlw	0
 28012  016B00  6FAE               	movwf	Bump_Wall@distTrav& (0+255),b
 28013                           
 28014                           ; BSR set to: 0
 28015                           ;dans.c: 701: Move_ADC_To(-45);
 28016  016B02  0EFF               	movlw	255
 28017  016B04  6FAA               	movwf	(Move_ADC_To@Angle+1)& (0+255),b
 28018  016B06  0ED3               	movlw	211
 28019  016B08  6FA9               	movwf	Move_ADC_To@Angle& (0+255),b
 28020  016B0A  EC44  F0AD         	call	_Move_ADC_To	;wreg free
 28021                           
 28022                           ;dans.c: 702: delay_ms(300);
 28023  016B0E  0E01               	movlw	1
 28024  016B10  0100               	movlb	0	; () banked
 28025  016B12  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 28026  016B14  0E2C               	movlw	44
 28027  016B16  6F60               	movwf	delay_ms@ms& (0+255),b
 28028  016B18  EC39  F0C0         	call	_delay_ms	;wreg free
 28029                           
 28030                           ;dans.c: 705: while (temp2 == 0) {
 28031  016B1C  D015               	goto	l2579
 28032  016B1E                     
 28033                           ;dans.c: 707: Drive(200, 200);
 28034  016B1E  0E00               	movlw	0
 28035  016B20  0100               	movlb	0	; () banked
 28036  016B22  6F62               	movwf	(Drive@SpeedL+1)& (0+255),b
 28037  016B24  0EC8               	movlw	200
 28038  016B26  6F61               	movwf	Drive@SpeedL& (0+255),b
 28039  016B28  0E00               	movlw	0
 28040  016B2A  6F64               	movwf	(Drive@SpeedR+1)& (0+255),b
 28041  016B2C  0EC8               	movlw	200
 28042  016B2E  6F63               	movwf	Drive@SpeedR& (0+255),b
 28043  016B30  ECBB  F0C2         	call	_Drive	;wreg free
 28044                           
 28045                           ;dans.c: 709: Get_Sensor_State();
 28046  016B34  EC77  F0BF         	call	_Get_Sensor_State	;wreg free
 28047                           
 28048                           ;dans.c: 711: temp2 = (BumpSensor & 0b00000011);
 28049  016B38  C03A  F0AB         	movff	_BumpSensor,??_Bump_Wall
 28050  016B3C  0E03               	movlw	3
 28051  016B3E  0100               	movlb	0	; () banked
 28052  016B40  17AB               	andwf	??_Bump_Wall& (0+255),f,b
 28053  016B42  51AB               	movf	??_Bump_Wall& (0+255),w,b
 28054  016B44  6FB0               	movwf	Bump_Wall@temp2& (0+255),b
 28055  016B46  6BB1               	clrf	(Bump_Wall@temp2+1)& (0+255),b
 28056  016B48                     l2579:
 28057                           
 28058                           ; BSR set to: 0
 28059  016B48  0100               	movlb	0	; () banked
 28060  016B4A  51B0               	movf	Bump_Wall@temp2& (0+255),w,b
 28061  016B4C  11B1               	iorwf	(Bump_Wall@temp2+1)& (0+255),w,b
 28062  016B4E  B4D8               	btfsc	status,2,c
 28063  016B50  D7E6               	goto	l2580
 28064                           
 28065                           ; BSR set to: 0
 28066                           ;dans.c: 713: }
 28067                           ;dans.c: 714: temp2=0;
 28068                           
 28069                           ; BSR set to: 0
 28070  016B52  0E00               	movlw	0
 28071  016B54  6FB1               	movwf	(Bump_Wall@temp2+1)& (0+255),b
 28072  016B56  0E00               	movlw	0
 28073  016B58  6FB0               	movwf	Bump_Wall@temp2& (0+255),b
 28074                           
 28075                           ; BSR set to: 0
 28076                           ;dans.c: 716: Drive(-200, -200);
 28077  016B5A  0EFF               	movlw	255
 28078  016B5C  6F62               	movwf	(Drive@SpeedL+1)& (0+255),b
 28079  016B5E  0E38               	movlw	56
 28080  016B60  6F61               	movwf	Drive@SpeedL& (0+255),b
 28081  016B62  0EFF               	movlw	255
 28082  016B64  6F64               	movwf	(Drive@SpeedR+1)& (0+255),b
 28083  016B66  0E38               	movlw	56
 28084  016B68  6F63               	movwf	Drive@SpeedR& (0+255),b
 28085  016B6A  ECBB  F0C2         	call	_Drive	;wreg free
 28086                           
 28087                           ;dans.c: 718: UpdateDistance();
 28088  016B6E  EC44  F0BF         	call	_UpdateDistance	;wreg free
 28089                           
 28090                           ;dans.c: 720: while (temp2 >= -300) {
 28091  016B72  D01E               	goto	l2582
 28092  016B74                     
 28093                           ;dans.c: 722: temp2 += UpdateDistance();
 28094  016B74  EC44  F0BF         	call	_UpdateDistance	;wreg free
 28095  016B78  0100               	movlb	0	; () banked
 28096  016B7A  5161               	movf	?_UpdateDistance& (0+255),w,b
 28097  016B7C  27B0               	addwf	Bump_Wall@temp2& (0+255),f,b
 28098  016B7E  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
 28099  016B80  23B1               	addwfc	(Bump_Wall@temp2+1)& (0+255),f,b
 28100                           
 28101                           ; BSR set to: 0
 28102                           ;dans.c: 724: printf("%c", (char)35);
 28103  016B82  0EFB               	movlw	low STR_1
 28104  016B84  6F75               	movwf	printf@f& (0+255),b
 28105  016B86  0EFF               	movlw	high STR_1
 28106  016B88  6F76               	movwf	(printf@f+1)& (0+255),b
 28107  016B8A  0E00               	movlw	0
 28108  016B8C  6F78               	movwf	(?_printf+3)& (0+255),b
 28109  016B8E  0E23               	movlw	35
 28110  016B90  6F77               	movwf	(?_printf+2)& (0+255),b
 28111  016B92  EC90  F0AC         	call	_printf	;wreg free
 28112                           
 28113                           ;dans.c: 725: printf("\n\nrev:%d Tar:\n", temp2);
 28114  016B96  0E7C               	movlw	low STR_37
 28115  016B98  0100               	movlb	0	; () banked
 28116  016B9A  6F75               	movwf	printf@f& (0+255),b
 28117  016B9C  0EFF               	movlw	high STR_37
 28118  016B9E  6F76               	movwf	(printf@f+1)& (0+255),b
 28119  016BA0  C0B0  F077         	movff	Bump_Wall@temp2,?_printf+2
 28120  016BA4  C0B1  F078         	movff	Bump_Wall@temp2+1,?_printf+3
 28121  016BA8  EC90  F0AC         	call	_printf	;wreg free
 28122                           
 28123                           ;dans.c: 726: Console_Render();
 28124  016BAC  ECB3  F0A8         	call	_Console_Render	;wreg free
 28125  016BB0                     l2582:
 28126  016BB0  0100               	movlb	0	; () banked
 28127  016BB2  AFB1               	btfss	(Bump_Wall@temp2+1)& (0+255),7,b
 28128  016BB4  D7DF               	goto	l2583
 28129  016BB6  0ED4               	movlw	212
 28130  016BB8  5DB0               	subwf	Bump_Wall@temp2& (0+255),w,b
 28131  016BBA  0EFE               	movlw	254
 28132  016BBC  59B1               	subwfb	(Bump_Wall@temp2+1)& (0+255),w,b
 28133  016BBE  B0D8               	btfsc	status,0,c
 28134  016BC0  D7D9               	goto	l2583
 28135                           
 28136                           ; BSR set to: 0
 28137                           ;dans.c: 727: }
 28138                           ;dans.c: 728: Robot_Stop();
 28139                           
 28140                           ; BSR set to: 0
 28141  016BC2  EC64  F0C6         	call	_Robot_Stop	;wreg free
 28142  016BC6  0012               	return	
 28143  016BC8                     __end_of_Bump_Wall:
 28144                           	opt stack 0
 28145                           tosu	equ	0xFFF
 28146                           tosh	equ	0xFFE
 28147                           tosl	equ	0xFFD
 28148                           pclath	equ	0xFFA
 28149                           tblptru	equ	0xFF8
 28150                           tblptrh	equ	0xFF7
 28151                           tblptrl	equ	0xFF6
 28152                           tablat	equ	0xFF5
 28153                           prodh	equ	0xFF4
 28154                           prodl	equ	0xFF3
 28155                           intcon	equ	0xFF2
 28156                           indf0	equ	0xFEF
 28157                           postinc0	equ	0xFEE
 28158                           fsr0h	equ	0xFEA
 28159                           fsr0l	equ	0xFE9
 28160                           wreg	equ	0xFE8
 28161                           indf1	equ	0xFE7
 28162                           postdec1	equ	0xFE5
 28163                           fsr1h	equ	0xFE2
 28164                           fsr1l	equ	0xFE1
 28165                           indf2	equ	0xFDF
 28166                           postinc2	equ	0xFDE
 28167                           postdec2	equ	0xFDD
 28168                           plusw2	equ	0xFDB
 28169                           fsr2h	equ	0xFDA
 28170                           fsr2l	equ	0xFD9
 28171                           status	equ	0xFD8
 28172                           
 28173 ;; *************** function _UpdateDistance *****************
 28174 ;; Defined at:
 28175 ;;		line 295 in file "dans.c"
 28176 ;; Parameters:    Size  Location     Type
 28177 ;;		None
 28178 ;; Auto vars:     Size  Location     Type
 28179 ;;		None
 28180 ;; Return value:  Size  Location     Type
 28181 ;;                  2    1[BANK0 ] int 
 28182 ;; Registers used:
 28183 ;;		wreg, status,2, status,0, cstack
 28184 ;; Tracked objects:
 28185 ;;		On entry : 0/0
 28186 ;;		On exit  : 0/0
 28187 ;;		Unchanged: 0/0
 28188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28189 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28191 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28192 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28193 ;;Total ram usage:        6 bytes
 28194 ;; Hardware stack levels used:    1
 28195 ;; Hardware stack levels required when called:    8
 28196 ;; This function calls:
 28197 ;;		_eusartRec
 28198 ;;		_eusartSend
 28199 ;; This function is called by:
 28200 ;;		_Robot_Init
 28201 ;;		_Travel
 28202 ;;		_Bump_Wall
 28203 ;; This function uses a non-reentrant model
 28204 ;;
 28205                           
 28206                           	psect	text116
 28207  017E88                     __ptext116:
 28208                           	opt stack 0
 28209  017E88                     _UpdateDistance:
 28210                           	opt stack 21
 28211                           
 28212                           ;dans.c: 296: eusartSend(142);
 28213                           
 28214                           ;incstack = 0
 28215  017E88  0E8E               	movlw	142
 28216  017E8A  ECC9  F0C7         	call	_eusartSend
 28217                           
 28218                           ;dans.c: 297: eusartSend(19);
 28219  017E8E  0E13               	movlw	19
 28220  017E90  ECC9  F0C7         	call	_eusartSend
 28221                           
 28222                           ;dans.c: 298: Current_Dist1 = eusartRec();
 28223  017E94  ECF6  F0C7         	call	_eusartRec	;wreg free
 28224  017E98  0100               	movlb	0	; () banked
 28225  017E9A  6F63               	movwf	??_UpdateDistance& (0+255),b
 28226  017E9C  5163               	movf	??_UpdateDistance& (0+255),w,b
 28227  017E9E  0101               	movlb	1	; () banked
 28228  017EA0  6F50               	movwf	_Current_Dist1& (0+255),b
 28229  017EA2  6B51               	clrf	(_Current_Dist1+1)& (0+255),b
 28230                           
 28231                           ; BSR set to: 1
 28232                           ;dans.c: 299: Current_Dist2 = eusartRec();
 28233  017EA4  ECF6  F0C7         	call	_eusartRec	;wreg free
 28234  017EA8  0100               	movlb	0	; () banked
 28235  017EAA  6F63               	movwf	??_UpdateDistance& (0+255),b
 28236  017EAC  5163               	movf	??_UpdateDistance& (0+255),w,b
 28237  017EAE  0101               	movlb	1	; () banked
 28238  017EB0  6F4E               	movwf	_Current_Dist2& (0+255),b
 28239  017EB2  6B4F               	clrf	(_Current_Dist2+1)& (0+255),b
 28240                           
 28241                           ; BSR set to: 1
 28242                           ;dans.c: 301: Current_Dist = ((Current_Dist1 << (8)) & 0b1111111100000000 | (Current_Dis
      +                          t2 & 255));
 28243  017EB4  0E00               	movlw	0
 28244  017EB6  0100               	movlb	0	; () banked
 28245  017EB8  6F63               	movwf	??_UpdateDistance& (0+255),b
 28246  017EBA  0EFF               	movlw	255
 28247  017EBC  6F64               	movwf	(??_UpdateDistance+1)& (0+255),b
 28248  017EBE  0101               	movlb	1	; () banked
 28249  017EC0  5150               	movf	_Current_Dist1& (0+255),w,b
 28250  017EC2  0100               	movlb	0	; () banked
 28251  017EC4  6F66               	movwf	(??_UpdateDistance+3)& (0+255),b
 28252  017EC6  6B65               	clrf	(??_UpdateDistance+2)& (0+255),b
 28253  017EC8  5163               	movf	??_UpdateDistance& (0+255),w,b
 28254  017ECA  1765               	andwf	(??_UpdateDistance+2)& (0+255),f,b
 28255  017ECC  5164               	movf	(??_UpdateDistance+1)& (0+255),w,b
 28256  017ECE  1766               	andwf	(??_UpdateDistance+3)& (0+255),f,b
 28257  017ED0  0101               	movlb	1	; () banked
 28258  017ED2  514E               	movf	_Current_Dist2& (0+255),w,b
 28259  017ED4  0100               	movlb	0	; () banked
 28260  017ED6  1165               	iorwf	(??_UpdateDistance+2)& (0+255),w,b
 28261  017ED8  0101               	movlb	1	; () banked
 28262  017EDA  6F52               	movwf	_Current_Dist& (0+255),b
 28263  017EDC  0100               	movlb	0	; () banked
 28264  017EDE  5166               	movf	(??_UpdateDistance+3)& (0+255),w,b
 28265  017EE0  0101               	movlb	1	; () banked
 28266  017EE2  6F53               	movwf	(_Current_Dist+1)& (0+255),b
 28267                           
 28268                           ; BSR set to: 1
 28269                           ;dans.c: 302: return Current_Dist;
 28270  017EE4  C152  F061         	movff	_Current_Dist,?_UpdateDistance
 28271  017EE8  C153  F062         	movff	_Current_Dist+1,?_UpdateDistance+1
 28272  017EEC  0012               	return	
 28273  017EEE                     __end_of_UpdateDistance:
 28274                           	opt stack 0
 28275                           tosu	equ	0xFFF
 28276                           tosh	equ	0xFFE
 28277                           tosl	equ	0xFFD
 28278                           pclath	equ	0xFFA
 28279                           tblptru	equ	0xFF8
 28280                           tblptrh	equ	0xFF7
 28281                           tblptrl	equ	0xFF6
 28282                           tablat	equ	0xFF5
 28283                           prodh	equ	0xFF4
 28284                           prodl	equ	0xFF3
 28285                           intcon	equ	0xFF2
 28286                           indf0	equ	0xFEF
 28287                           postinc0	equ	0xFEE
 28288                           fsr0h	equ	0xFEA
 28289                           fsr0l	equ	0xFE9
 28290                           wreg	equ	0xFE8
 28291                           indf1	equ	0xFE7
 28292                           postdec1	equ	0xFE5
 28293                           fsr1h	equ	0xFE2
 28294                           fsr1l	equ	0xFE1
 28295                           indf2	equ	0xFDF
 28296                           postinc2	equ	0xFDE
 28297                           postdec2	equ	0xFDD
 28298                           plusw2	equ	0xFDB
 28299                           fsr2h	equ	0xFDA
 28300                           fsr2l	equ	0xFD9
 28301                           status	equ	0xFD8
 28302                           
 28303 ;; *************** function _eusartRec *****************
 28304 ;; Defined at:
 28305 ;;		line 229 in file "dans.c"
 28306 ;; Parameters:    Size  Location     Type
 28307 ;;		None
 28308 ;; Auto vars:     Size  Location     Type
 28309 ;;		None
 28310 ;; Return value:  Size  Location     Type
 28311 ;;                  1    wreg      unsigned char 
 28312 ;; Registers used:
 28313 ;;		wreg, status,2
 28314 ;; Tracked objects:
 28315 ;;		On entry : 0/0
 28316 ;;		On exit  : 0/0
 28317 ;;		Unchanged: 0/0
 28318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28323 ;;Total ram usage:        0 bytes
 28324 ;; Hardware stack levels used:    1
 28325 ;; Hardware stack levels required when called:    7
 28326 ;; This function calls:
 28327 ;;		Nothing
 28328 ;; This function is called by:
 28329 ;;		_UpdateDistance
 28330 ;;		_Get_VirtualWall_State
 28331 ;;		_Detect_Victim
 28332 ;;		_Turn
 28333 ;;		_Get_BumpSensor_State
 28334 ;; This function uses a non-reentrant model
 28335 ;;
 28336                           
 28337                           	psect	text117
 28338  018FEC                     __ptext117:
 28339                           	opt stack 0
 28340  018FEC                     _eusartRec:
 28341                           	opt stack 21
 28342                           
 28343                           ;dans.c: 230: while (!PIR1bits.RC1IF) {
 28344                           
 28345                           ; BSR set to: 1
 28346                           ;incstack = 0
 28347  018FEC  AA9E               	btfss	3998,5,c	;volatile
 28348  018FEE  D7FE               	goto	_eusartRec
 28349                           
 28350                           ;dans.c: 231: }
 28351                           ;dans.c: 232: return (int) RCREG1;
 28352  018FF0  50AF               	movf	4015,w,c	;volatile
 28353  018FF2  0012               	return	
 28354  018FF4                     __end_of_eusartRec:
 28355                           	opt stack 0
 28356                           tosu	equ	0xFFF
 28357                           tosh	equ	0xFFE
 28358                           tosl	equ	0xFFD
 28359                           pclath	equ	0xFFA
 28360                           tblptru	equ	0xFF8
 28361                           tblptrh	equ	0xFF7
 28362                           tblptrl	equ	0xFF6
 28363                           tablat	equ	0xFF5
 28364                           prodh	equ	0xFF4
 28365                           prodl	equ	0xFF3
 28366                           intcon	equ	0xFF2
 28367                           indf0	equ	0xFEF
 28368                           postinc0	equ	0xFEE
 28369                           fsr0h	equ	0xFEA
 28370                           fsr0l	equ	0xFE9
 28371                           wreg	equ	0xFE8
 28372                           indf1	equ	0xFE7
 28373                           postdec1	equ	0xFE5
 28374                           fsr1h	equ	0xFE2
 28375                           fsr1l	equ	0xFE1
 28376                           indf2	equ	0xFDF
 28377                           postinc2	equ	0xFDE
 28378                           postdec2	equ	0xFDD
 28379                           plusw2	equ	0xFDB
 28380                           fsr2h	equ	0xFDA
 28381                           fsr2l	equ	0xFD9
 28382                           status	equ	0xFD8
 28383                           
 28384 ;; *************** function _Robot_Stop *****************
 28385 ;; Defined at:
 28386 ;;		line 305 in file "dans.c"
 28387 ;; Parameters:    Size  Location     Type
 28388 ;;		None
 28389 ;; Auto vars:     Size  Location     Type
 28390 ;;		None
 28391 ;; Return value:  Size  Location     Type
 28392 ;;                  1    wreg      void 
 28393 ;; Registers used:
 28394 ;;		wreg, cstack
 28395 ;; Tracked objects:
 28396 ;;		On entry : 0/0
 28397 ;;		On exit  : 0/0
 28398 ;;		Unchanged: 0/0
 28399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28404 ;;Total ram usage:        0 bytes
 28405 ;; Hardware stack levels used:    1
 28406 ;; Hardware stack levels required when called:    8
 28407 ;; This function calls:
 28408 ;;		_eusartSend
 28409 ;; This function is called by:
 28410 ;;		_Robot_Init
 28411 ;;		_Turn
 28412 ;;		_Travel
 28413 ;;		_Fix_Error
 28414 ;;		_Bump_Wall
 28415 ;; This function uses a non-reentrant model
 28416 ;;
 28417                           
 28418                           	psect	text118
 28419  018CC8                     __ptext118:
 28420                           	opt stack 0
 28421  018CC8                     _Robot_Stop:
 28422                           	opt stack 21
 28423                           
 28424                           ;dans.c: 306: eusartSend(137);
 28425                           
 28426                           ;incstack = 0
 28427  018CC8  0E89               	movlw	137
 28428  018CCA  ECC9  F0C7         	call	_eusartSend
 28429                           
 28430                           ;dans.c: 307: eusartSend(0);
 28431  018CCE  0E00               	movlw	0
 28432  018CD0  ECC9  F0C7         	call	_eusartSend
 28433                           
 28434                           ;dans.c: 308: eusartSend(0);
 28435  018CD4  0E00               	movlw	0
 28436  018CD6  ECC9  F0C7         	call	_eusartSend
 28437                           
 28438                           ;dans.c: 309: eusartSend(0);
 28439  018CDA  0E00               	movlw	0
 28440  018CDC  ECC9  F0C7         	call	_eusartSend
 28441                           
 28442                           ;dans.c: 310: eusartSend(0);
 28443  018CE0  0E00               	movlw	0
 28444  018CE2  ECC9  F0C7         	call	_eusartSend
 28445  018CE6  0012               	return		;funcret
 28446  018CE8                     __end_of_Robot_Stop:
 28447                           	opt stack 0
 28448                           tosu	equ	0xFFF
 28449                           tosh	equ	0xFFE
 28450                           tosl	equ	0xFFD
 28451                           pclath	equ	0xFFA
 28452                           tblptru	equ	0xFF8
 28453                           tblptrh	equ	0xFF7
 28454                           tblptrl	equ	0xFF6
 28455                           tablat	equ	0xFF5
 28456                           prodh	equ	0xFF4
 28457                           prodl	equ	0xFF3
 28458                           intcon	equ	0xFF2
 28459                           indf0	equ	0xFEF
 28460                           postinc0	equ	0xFEE
 28461                           fsr0h	equ	0xFEA
 28462                           fsr0l	equ	0xFE9
 28463                           wreg	equ	0xFE8
 28464                           indf1	equ	0xFE7
 28465                           postdec1	equ	0xFE5
 28466                           fsr1h	equ	0xFE2
 28467                           fsr1l	equ	0xFE1
 28468                           indf2	equ	0xFDF
 28469                           postinc2	equ	0xFDE
 28470                           postdec2	equ	0xFDD
 28471                           plusw2	equ	0xFDB
 28472                           fsr2h	equ	0xFDA
 28473                           fsr2l	equ	0xFD9
 28474                           status	equ	0xFD8
 28475                           
 28476 ;; *************** function _Move_ADC_To *****************
 28477 ;; Defined at:
 28478 ;;		line 548 in file "dans.c"
 28479 ;; Parameters:    Size  Location     Type
 28480 ;;  Angle           2   73[BANK0 ] int 
 28481 ;; Auto vars:     Size  Location     Type
 28482 ;;		None
 28483 ;; Return value:  Size  Location     Type
 28484 ;;                  1    wreg      void 
 28485 ;; Registers used:
 28486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28487 ;; Tracked objects:
 28488 ;;		On entry : 0/0
 28489 ;;		On exit  : 0/0
 28490 ;;		Unchanged: 0/0
 28491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28492 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28495 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28496 ;;Total ram usage:        2 bytes
 28497 ;; Hardware stack levels used:    1
 28498 ;; Hardware stack levels required when called:   13
 28499 ;; This function calls:
 28500 ;;		_Console_Render
 28501 ;;		_SteppingCCW
 28502 ;;		_SteppingCW
 28503 ;;		___fladd
 28504 ;;		___flmul
 28505 ;;		___fltol
 28506 ;;		___xxtofl
 28507 ;;		_printf
 28508 ;; This function is called by:
 28509 ;;		_main
 28510 ;;		_Travel
 28511 ;;		_Fix_Error
 28512 ;;		_Bump_Wall
 28513 ;; This function uses a non-reentrant model
 28514 ;;
 28515                           
 28516                           	psect	text119
 28517  015A88                     __ptext119:
 28518                           	opt stack 0
 28519  015A88                     _Move_ADC_To:
 28520                           	opt stack 15
 28521                           
 28522                           ;dans.c: 550: if (flag == 0) {
 28523                           
 28524                           ;incstack = 0
 28525  015A88  0101               	movlb	1	; () banked
 28526  015A8A  5138               	movf	_flag& (0+255),w,b
 28527  015A8C  1139               	iorwf	(_flag+1)& (0+255),w,b
 28528  015A8E  A4D8               	btfss	status,2,c
 28529  015A90  D043               	goto	l2503
 28530                           
 28531                           ; BSR set to: 1
 28532                           ;dans.c: 552: Steps = (Angle * 1.42222) + 200;
 28533  015A92  0E00               	movlw	0
 28534  015A94  0100               	movlb	0	; () banked
 28535  015A96  6F8F               	movwf	___fladd@a& (0+255),b
 28536  015A98  0E00               	movlw	0
 28537  015A9A  6F90               	movwf	(___fladd@a+1)& (0+255),b
 28538  015A9C  0E48               	movlw	72
 28539  015A9E  6F91               	movwf	(___fladd@a+2)& (0+255),b
 28540  015AA0  0E43               	movlw	67
 28541  015AA2  6F92               	movwf	(___fladd@a+3)& (0+255),b
 28542  015AA4  0E4E               	movlw	78
 28543  015AA6  6F72               	movwf	___flmul@a& (0+255),b
 28544  015AA8  0E0B               	movlw	11
 28545  015AAA  6F73               	movwf	(___flmul@a+1)& (0+255),b
 28546  015AAC  0EB6               	movlw	182
 28547  015AAE  6F74               	movwf	(___flmul@a+2)& (0+255),b
 28548  015AB0  0E3F               	movlw	63
 28549  015AB2  6F75               	movwf	(___flmul@a+3)& (0+255),b
 28550  015AB4  C0A9  F060         	movff	Move_ADC_To@Angle,___xxtofl@val
 28551  015AB8  C0AA  F061         	movff	Move_ADC_To@Angle+1,___xxtofl@val+1
 28552  015ABC  0E00               	movlw	0
 28553  015ABE  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 28554  015AC0  0EFF               	movlw	-1
 28555  015AC2  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 28556  015AC4  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 28557  015AC6  0E01               	movlw	1
 28558  015AC8  ECF3  F0AD         	call	___xxtofl
 28559  015ACC  C060  F06E         	movff	?___xxtofl,___flmul@b
 28560  015AD0  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 28561  015AD4  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 28562  015AD8  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 28563  015ADC  ECC4  F09A         	call	___flmul	;wreg free
 28564  015AE0  C06E  F08B         	movff	?___flmul,___fladd@b
 28565  015AE4  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 28566  015AE8  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 28567  015AEC  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 28568  015AF0  EC6D  F09C         	call	___fladd	;wreg free
 28569  015AF4  C08B  F09F         	movff	?___fladd,___fltol@f1
 28570  015AF8  C08C  F0A0         	movff	?___fladd+1,___fltol@f1+1
 28571  015AFC  C08D  F0A1         	movff	?___fladd+2,___fltol@f1+2
 28572  015B00  C08E  F0A2         	movff	?___fladd+3,___fltol@f1+3
 28573  015B04  ECE4  F0B5         	call	___fltol	;wreg free
 28574  015B08  C09F  F148         	movff	?___fltol,_Steps
 28575  015B0C  C0A0  F149         	movff	?___fltol+1,_Steps+1
 28576                           
 28577                           ;dans.c: 553: flag++;
 28578  015B10  0101               	movlb	1	; () banked
 28579  015B12  4B38               	infsnz	_flag& (0+255),f,b
 28580  015B14  2B39               	incf	(_flag+1)& (0+255),f,b
 28581                           
 28582                           ;dans.c: 554: } else if (!flag == 0) {
 28583  015B16  D031               	goto	l2505
 28584  015B18                     l2503:
 28585                           
 28586                           ; BSR set to: 1
 28587                           
 28588                           ; BSR set to: 1
 28589  015B18  5138               	movf	_flag& (0+255),w,b
 28590  015B1A  1139               	iorwf	(_flag+1)& (0+255),w,b
 28591  015B1C  B4D8               	btfsc	status,2,c
 28592  015B1E  D02D               	goto	l2505
 28593                           
 28594                           ; BSR set to: 1
 28595                           ;dans.c: 555: Steps = (Angle * 1.42222);
 28596  015B20  0E4E               	movlw	78
 28597  015B22  0100               	movlb	0	; () banked
 28598  015B24  6F72               	movwf	___flmul@a& (0+255),b
 28599  015B26  0E0B               	movlw	11
 28600  015B28  6F73               	movwf	(___flmul@a+1)& (0+255),b
 28601  015B2A  0EB6               	movlw	182
 28602  015B2C  6F74               	movwf	(___flmul@a+2)& (0+255),b
 28603  015B2E  0E3F               	movlw	63
 28604  015B30  6F75               	movwf	(___flmul@a+3)& (0+255),b
 28605  015B32  C0A9  F060         	movff	Move_ADC_To@Angle,___xxtofl@val
 28606  015B36  C0AA  F061         	movff	Move_ADC_To@Angle+1,___xxtofl@val+1
 28607  015B3A  0E00               	movlw	0
 28608  015B3C  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 28609  015B3E  0EFF               	movlw	-1
 28610  015B40  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 28611  015B42  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 28612  015B44  0E01               	movlw	1
 28613  015B46  ECF3  F0AD         	call	___xxtofl
 28614  015B4A  C060  F06E         	movff	?___xxtofl,___flmul@b
 28615  015B4E  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 28616  015B52  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 28617  015B56  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 28618  015B5A  ECC4  F09A         	call	___flmul	;wreg free
 28619  015B5E  C06E  F09F         	movff	?___flmul,___fltol@f1
 28620  015B62  C06F  F0A0         	movff	?___flmul+1,___fltol@f1+1
 28621  015B66  C070  F0A1         	movff	?___flmul+2,___fltol@f1+2
 28622  015B6A  C071  F0A2         	movff	?___flmul+3,___fltol@f1+3
 28623  015B6E  ECE4  F0B5         	call	___fltol	;wreg free
 28624  015B72  C09F  F148         	movff	?___fltol,_Steps
 28625  015B76  C0A0  F149         	movff	?___fltol+1,_Steps+1
 28626  015B7A                     l2505:
 28627                           
 28628                           ;dans.c: 556: }
 28629                           ;dans.c: 558: printf("%c", (char)35);
 28630  015B7A  0EFB               	movlw	low STR_1
 28631  015B7C  0100               	movlb	0	; () banked
 28632  015B7E  6F75               	movwf	printf@f& (0+255),b
 28633  015B80  0EFF               	movlw	high STR_1
 28634  015B82  6F76               	movwf	(printf@f+1)& (0+255),b
 28635  015B84  0E00               	movlw	0
 28636  015B86  6F78               	movwf	(?_printf+3)& (0+255),b
 28637  015B88  0E23               	movlw	35
 28638  015B8A  6F77               	movwf	(?_printf+2)& (0+255),b
 28639  015B8C  EC90  F0AC         	call	_printf	;wreg free
 28640                           
 28641                           ;dans.c: 559: printf("\nSteps %d", Steps);
 28642  015B90  0EC6               	movlw	low STR_31
 28643  015B92  0100               	movlb	0	; () banked
 28644  015B94  6F75               	movwf	printf@f& (0+255),b
 28645  015B96  0EFF               	movlw	high STR_31
 28646  015B98  6F76               	movwf	(printf@f+1)& (0+255),b
 28647  015B9A  C148  F077         	movff	_Steps,?_printf+2
 28648  015B9E  C149  F078         	movff	_Steps+1,?_printf+3
 28649  015BA2  EC90  F0AC         	call	_printf	;wreg free
 28650                           
 28651                           ;dans.c: 560: printf("\nFlag %d", flag);
 28652  015BA6  0EDA               	movlw	low STR_32
 28653  015BA8  0100               	movlb	0	; () banked
 28654  015BAA  6F75               	movwf	printf@f& (0+255),b
 28655  015BAC  0EFF               	movlw	high STR_32
 28656  015BAE  6F76               	movwf	(printf@f+1)& (0+255),b
 28657  015BB0  C138  F077         	movff	_flag,?_printf+2
 28658  015BB4  C139  F078         	movff	_flag+1,?_printf+3
 28659  015BB8  EC90  F0AC         	call	_printf	;wreg free
 28660                           
 28661                           ;dans.c: 561: Console_Render();
 28662  015BBC  ECB3  F0A8         	call	_Console_Render	;wreg free
 28663                           
 28664                           ;dans.c: 562: while (Steps >= 0) {
 28665  015BC0  D006               	goto	l2506
 28666  015BC2                     
 28667                           ;dans.c: 563: Steps--;
 28668  015BC2  0101               	movlb	1	; () banked
 28669  015BC4  0748               	decf	_Steps& (0+255),f,b
 28670  015BC6  A0D8               	btfss	status,0,c
 28671  015BC8  0749               	decf	(_Steps+1)& (0+255),f,b
 28672                           
 28673                           ; BSR set to: 1
 28674                           ;dans.c: 564: SteppingCW();
 28675  015BCA  EC71  F0C2         	call	_SteppingCW	;wreg free
 28676  015BCE                     l2506:
 28677  015BCE  0101               	movlb	1	; () banked
 28678  015BD0  BF49               	btfsc	(_Steps+1)& (0+255),7,b
 28679  015BD2  D005               	goto	l2509
 28680  015BD4  D7F6               	goto	l2507
 28681  015BD6                     
 28682                           ; BSR set to: 1
 28683                           ;dans.c: 567: Steps++;
 28684                           
 28685                           ; BSR set to: 1
 28686  015BD6  4B48               	infsnz	_Steps& (0+255),f,b
 28687  015BD8  2B49               	incf	(_Steps+1)& (0+255),f,b
 28688                           
 28689                           ; BSR set to: 1
 28690                           ;dans.c: 568: SteppingCCW();
 28691  015BDA  EC96  F0C2         	call	_SteppingCCW	;wreg free
 28692  015BDE                     l2509:
 28693  015BDE  0101               	movlb	1	; () banked
 28694  015BE0  AF49               	btfss	(_Steps+1)& (0+255),7,b
 28695  015BE2  0012               	return	
 28696  015BE4  D7F8               	goto	l2510
 28697  015BE6                     __end_of_Move_ADC_To:
 28698                           	opt stack 0
 28699                           tosu	equ	0xFFF
 28700                           tosh	equ	0xFFE
 28701                           tosl	equ	0xFFD
 28702                           pclath	equ	0xFFA
 28703                           tblptru	equ	0xFF8
 28704                           tblptrh	equ	0xFF7
 28705                           tblptrl	equ	0xFF6
 28706                           tablat	equ	0xFF5
 28707                           prodh	equ	0xFF4
 28708                           prodl	equ	0xFF3
 28709                           intcon	equ	0xFF2
 28710                           indf0	equ	0xFEF
 28711                           postinc0	equ	0xFEE
 28712                           fsr0h	equ	0xFEA
 28713                           fsr0l	equ	0xFE9
 28714                           wreg	equ	0xFE8
 28715                           indf1	equ	0xFE7
 28716                           postdec1	equ	0xFE5
 28717                           fsr1h	equ	0xFE2
 28718                           fsr1l	equ	0xFE1
 28719                           indf2	equ	0xFDF
 28720                           postinc2	equ	0xFDE
 28721                           postdec2	equ	0xFDD
 28722                           plusw2	equ	0xFDB
 28723                           fsr2h	equ	0xFDA
 28724                           fsr2l	equ	0xFD9
 28725                           status	equ	0xFD8
 28726                           
 28727 ;; *************** function _printf *****************
 28728 ;; Defined at:
 28729 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
 28730 ;; Parameters:    Size  Location     Type
 28731 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 28732 ;;		 -> STR_37(15), STR_36(3), STR_35(12), STR_34(7), 
 28733 ;;		 -> STR_33(12), STR_32(9), STR_31(10), STR_30(3), 
 28734 ;;		 -> STR_29(24), STR_28(3), STR_27(16), STR_26(3), 
 28735 ;;		 -> STR_25(12), STR_24(39), STR_23(42), STR_22(9), 
 28736 ;;		 -> STR_21(11), STR_20(10), STR_19(3), STR_18(22), 
 28737 ;;		 -> STR_17(8), STR_16(10), STR_15(3), STR_14(3), 
 28738 ;;		 -> STR_13(16), STR_12(3), STR_11(21), STR_10(3), 
 28739 ;;		 -> STR_9(19), STR_8(28), STR_7(20), STR_6(3), 
 28740 ;;		 -> STR_5(17), STR_4(12), STR_3(3), STR_2(19), 
 28741 ;;		 -> STR_1(3), 
 28742 ;; Auto vars:     Size  Location     Type
 28743 ;;  tmpval          4    0        struct .
 28744 ;;  cp              3    0        PTR const unsigned char 
 28745 ;;  val             2   32[BANK0 ] unsigned int 
 28746 ;;  ap              2   30[BANK0 ] PTR void [1]
 28747 ;;		 -> ?_printf(2), 
 28748 ;;  len             2    0        unsigned int 
 28749 ;;  c               1   34[BANK0 ] char 
 28750 ;;  prec            1   29[BANK0 ] char 
 28751 ;;  flag            1   28[BANK0 ] unsigned char 
 28752 ;; Return value:  Size  Location     Type
 28753 ;;                  2   21[BANK0 ] int 
 28754 ;; Registers used:
 28755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28756 ;; Tracked objects:
 28757 ;;		On entry : 0/0
 28758 ;;		On exit  : 0/0
 28759 ;;		Unchanged: 0/0
 28760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28761 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28762 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28763 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28764 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28765 ;;Total ram usage:       14 bytes
 28766 ;; Hardware stack levels used:    1
 28767 ;; Hardware stack levels required when called:   12
 28768 ;; This function calls:
 28769 ;;		___lwdiv
 28770 ;;		___lwmod
 28771 ;;		_putch
 28772 ;; This function is called by:
 28773 ;;		_Sensor_Observe
 28774 ;;		_Closest_Object
 28775 ;;		_main
 28776 ;;		_pop
 28777 ;;		_push
 28778 ;;		_Travel
 28779 ;;		_Move_ADC_To
 28780 ;;		_Navigate_Maze
 28781 ;;		_Bump_Wall
 28782 ;;		_Find_Flag
 28783 ;; This function uses a non-reentrant model
 28784 ;;
 28785                           
 28786                           	psect	text120
 28787  015920                     __ptext120:
 28788                           	opt stack 0
 28789  015920                     _printf:
 28790                           	opt stack 18
 28791                           
 28792                           ;doprnt.c: 466: va_list ap;
 28793                           ;doprnt.c: 499: signed char c;
 28794                           ;doprnt.c: 506: signed char prec;
 28795                           ;doprnt.c: 508: unsigned char flag;
 28796                           ;doprnt.c: 523: union {
 28797                           ;doprnt.c: 524: unsigned long vd;
 28798                           ;doprnt.c: 525: double integ;
 28799                           ;doprnt.c: 526: } tmpval;
 28800                           ;doprnt.c: 528: unsigned int val;
 28801                           ;doprnt.c: 529: unsigned len;
 28802                           ;doprnt.c: 530: const char * cp;
 28803                           ;doprnt.c: 533: *ap = __va_start();
 28804                           
 28805                           ; BSR set to: 1
 28806                           ;incstack = 0
 28807  015920  0E77               	movlw	low (?_printf+2)
 28808  015922  0100               	movlb	0	; () banked
 28809  015924  6F7E               	movwf	printf@ap& (0+255),b
 28810  015926  0E00               	movlw	high (?_printf+2)
 28811  015928  6F7F               	movwf	(printf@ap+1)& (0+255),b
 28812                           
 28813                           ;doprnt.c: 536: while(c = *f++) {
 28814  01592A  D09E               	goto	u13050
 28815  01592C                     
 28816                           ; BSR set to: 0
 28817                           ;doprnt.c: 538: if(c != '%')
 28818                           
 28819                           ; BSR set to: 0
 28820  01592C  0E25               	movlw	37
 28821  01592E  1982               	xorwf	printf@c& (0+255),w,b
 28822  015930  B4D8               	btfsc	status,2,c
 28823  015932  D004               	goto	l2598
 28824                           
 28825                           ; BSR set to: 0
 28826                           ;doprnt.c: 540: {
 28827                           ;doprnt.c: 541: (putch(c) );
 28828  015934  5182               	movf	printf@c& (0+255),w,b
 28829  015936  ECC2  F0C7         	call	_putch
 28830                           
 28831                           ;doprnt.c: 542: continue;
 28832  01593A  D096               	goto	u13050
 28833  01593C                     l2598:
 28834                           
 28835                           ;doprnt.c: 543: }
 28836                           ;doprnt.c: 548: flag = 0;
 28837  01593C  0E00               	movlw	0
 28838  01593E  0100               	movlb	0	; () banked
 28839  015940  6F7C               	movwf	printf@flag& (0+255),b
 28840                           
 28841                           ;doprnt.c: 635: switch(c = *f++) {
 28842  015942  D00E               	goto	l2599
 28843  015944                     
 28844                           ; BSR set to: 0
 28845                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 28846                           
 28847                           ; BSR set to: 0
 28848  015944  C07E  FFD9         	movff	printf@ap,fsr2l
 28849  015948  C07F  FFDA         	movff	printf@ap+1,fsr2h
 28850  01594C  50DF               	movf	indf2,w,c
 28851  01594E  6F82               	movwf	printf@c& (0+255),b
 28852                           
 28853                           ; BSR set to: 0
 28854  015950  0E02               	movlw	2
 28855  015952  277E               	addwf	printf@ap& (0+255),f,b
 28856  015954  0E00               	movlw	0
 28857  015956  237F               	addwfc	(printf@ap+1)& (0+255),f,b
 28858  015958                     
 28859                           ; BSR set to: 0
 28860                           ;doprnt.c: 809: (putch(c) );
 28861                           
 28862                           ; BSR set to: 0
 28863  015958  5182               	movf	printf@c& (0+255),w,b
 28864  01595A  ECC2  F0C7         	call	_putch
 28865                           
 28866                           ;doprnt.c: 810: continue;
 28867  01595E  D084               	goto	u13050
 28868  015960                     l2599:
 28869  015960  C075  FFF6         	movff	printf@f,tblptrl
 28870  015964  C076  FFF7         	movff	printf@f+1,tblptrh
 28871  015968  0100               	movlb	0	; () banked
 28872  01596A  4B75               	infsnz	printf@f& (0+255),f,b
 28873  01596C  2B76               	incf	(printf@f+1)& (0+255),f,b
 28874  01596E                     	if	0	;tblptru may be non-zero
 28875  01596E                     	endif
 28876  01596E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 28877  01596E  0E00               	movlw	low (__mediumconst shr (0+16))
 28878  015970  6EF8               	movwf	tblptru,c
 28879  015972                     	endif
 28880  015972  0008               	tblrd		*
 28881  015974  CFF5 F082          	movff	tablat,printf@c
 28882  015978  5182               	movf	printf@c& (0+255),w,b
 28883                           
 28884                           ; Switch size 1, requested type "space"
 28885                           ; Number of cases is 4, Range of values is 0 to 105
 28886                           ; switch strategies available:
 28887                           ; Name         Instructions Cycles
 28888                           ; simple_byte           13     7 (average)
 28889                           ;	Chosen strategy is simple_byte
 28890  01597A  0A00               	xorlw	0	; case 0
 28891  01597C  B4D8               	btfsc	status,2,c
 28892  01597E  0012               	return	
 28893  015980  0A63               	xorlw	99	; case 99
 28894  015982  B4D8               	btfsc	status,2,c
 28895  015984  D7DF               	goto	l2605
 28896  015986  0A07               	xorlw	7	; case 100
 28897  015988  B4D8               	btfsc	status,2,c
 28898  01598A  D003               	goto	l2604
 28899  01598C  0A0D               	xorlw	13	; case 105
 28900  01598E  A4D8               	btfss	status,2,c
 28901  015990  D7E3               	goto	l2606
 28902  015992                     l2604:
 28903                           
 28904                           ;doprnt.c: 1253: {
 28905                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 28906                           
 28907                           ; BSR set to: 0
 28908  015992  C07E  FFD9         	movff	printf@ap,fsr2l
 28909  015996  C07F  FFDA         	movff	printf@ap+1,fsr2h
 28910  01599A  CFDE F080          	movff	postinc2,printf@val
 28911  01599E  CFDD F081          	movff	postdec2,printf@val+1
 28912  0159A2  0E02               	movlw	2
 28913  0159A4  0100               	movlb	0	; () banked
 28914  0159A6  277E               	addwf	printf@ap& (0+255),f,b
 28915  0159A8  0E00               	movlw	0
 28916  0159AA  237F               	addwfc	(printf@ap+1)& (0+255),f,b
 28917                           
 28918                           ; BSR set to: 0
 28919                           ;doprnt.c: 1261: if((int)val < 0) {
 28920  0159AC  AF81               	btfss	(printf@val+1)& (0+255),7,b
 28921  0159AE  D006               	goto	l2607
 28922                           
 28923                           ; BSR set to: 0
 28924                           ;doprnt.c: 1262: flag |= 0x03;
 28925  0159B0  0E03               	movlw	3
 28926  0159B2  137C               	iorwf	printf@flag& (0+255),f,b
 28927                           
 28928                           ; BSR set to: 0
 28929                           ;doprnt.c: 1263: val = -val;
 28930  0159B4  6D80               	negf	printf@val& (0+255),b
 28931  0159B6  1F81               	comf	(printf@val+1)& (0+255),f,b
 28932  0159B8  B0D8               	btfsc	status,0,c
 28933  0159BA  2B81               	incf	(printf@val+1)& (0+255),f,b
 28934  0159BC                     l2607:
 28935                           
 28936                           ; BSR set to: 0
 28937                           ;doprnt.c: 1264: }
 28938                           ;doprnt.c: 1266: }
 28939                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 28940                           
 28941                           ; BSR set to: 0
 28942  0159BC  0E01               	movlw	1
 28943  0159BE  6F82               	movwf	printf@c& (0+255),b
 28944  0159C0                     l15533:
 28945                           
 28946                           ; BSR set to: 0
 28947  0159C0  0E05               	movlw	5
 28948  0159C2  1982               	xorwf	printf@c& (0+255),w,b
 28949  0159C4  B4D8               	btfsc	status,2,c
 28950  0159C6  D015               	goto	u13030
 28951                           
 28952                           ; BSR set to: 0
 28953                           ;doprnt.c: 1306: if(val < dpowers[c])
 28954                           
 28955                           ; BSR set to: 0
 28956                           
 28957                           ; BSR set to: 0
 28958  0159C8  5182               	movf	printf@c& (0+255),w,b
 28959  0159CA  0D02               	mullw	2
 28960  0159CC  0E0D               	movlw	low _dpowers
 28961  0159CE  24F3               	addwf	prodl,w,c
 28962  0159D0  6EF6               	movwf	tblptrl,c
 28963  0159D2  0EFC               	movlw	high _dpowers
 28964  0159D4  20F4               	addwfc	prodh,w,c
 28965  0159D6  6EF7               	movwf	tblptrh,c
 28966  0159D8                     	if	1	;There are 3 active tblptr bytes
 28967  0159D8  6AF8               	clrf	tblptru,c
 28968  0159DA  0E00               	movlw	low (__mediumconst shr (0+16))
 28969  0159DC  22F8               	addwfc	tblptru,f,c
 28970  0159DE                     	endif
 28971  0159DE  0009               	tblrd		*+
 28972  0159E0  50F5               	movf	tablat,w,c
 28973  0159E2  5D80               	subwf	printf@val& (0+255),w,b
 28974  0159E4  0009               	tblrd		*+
 28975  0159E6  50F5               	movf	tablat,w,c
 28976  0159E8  5981               	subwfb	(printf@val+1)& (0+255),w,b
 28977  0159EA  A0D8               	btfss	status,0,c
 28978  0159EC  D002               	goto	u13030
 28979                           
 28980                           ; BSR set to: 0
 28981                           
 28982                           ; BSR set to: 0
 28983                           
 28984                           ; BSR set to: 0
 28985                           ;doprnt.c: 1307: break;
 28986  0159EE  2B82               	incf	printf@c& (0+255),f,b
 28987  0159F0  D7E7               	goto	l15533
 28988  0159F2                     u13030:
 28989                           
 28990                           ; BSR set to: 0
 28991                           ;doprnt.c: 1422: {
 28992                           ;doprnt.c: 1438: if(flag & 0x03)
 28993                           
 28994                           ; BSR set to: 0
 28995  0159F2  C07C  F07B         	movff	printf@flag,??_printf
 28996  0159F6  0E03               	movlw	3
 28997  0159F8  177B               	andwf	??_printf& (0+255),f,b
 28998  0159FA  B4D8               	btfsc	status,2,c
 28999  0159FC  D003               	goto	l2611
 29000                           
 29001                           ; BSR set to: 0
 29002                           ;doprnt.c: 1439: (putch('-') );
 29003  0159FE  0E2D               	movlw	45
 29004  015A00  ECC2  F0C7         	call	_putch
 29005  015A04                     l2611:
 29006                           
 29007                           ;doprnt.c: 1469: }
 29008                           ;doprnt.c: 1472: prec = c;
 29009  015A04  C082  F07D         	movff	printf@c,printf@prec
 29010                           
 29011                           ;doprnt.c: 1474: while(prec--) {
 29012  015A08  D02A               	goto	l2612
 29013  015A0A                     
 29014                           ;doprnt.c: 1478: {
 29015                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 29016  015A0A  0100               	movlb	0	; () banked
 29017  015A0C  517D               	movf	printf@prec& (0+255),w,b
 29018  015A0E  0D02               	mullw	2
 29019  015A10  0E0D               	movlw	low _dpowers
 29020  015A12  24F3               	addwf	prodl,w,c
 29021  015A14  6EF6               	movwf	tblptrl,c
 29022  015A16  0EFC               	movlw	high _dpowers
 29023  015A18  20F4               	addwfc	prodh,w,c
 29024  015A1A  6EF7               	movwf	tblptrh,c
 29025  015A1C                     	if	1	;There are 3 active tblptr bytes
 29026  015A1C  6AF8               	clrf	tblptru,c
 29027  015A1E  0E00               	movlw	low (__mediumconst shr (0+16))
 29028  015A20  22F8               	addwfc	tblptru,f,c
 29029  015A22                     	endif
 29030  015A22  0009               	tblrd		*+
 29031  015A24  CFF5 F062          	movff	tablat,___lwdiv@divisor
 29032  015A28  000A               	tblrd		*-
 29033  015A2A  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
 29034  015A2E  C080  F060         	movff	printf@val,___lwdiv@dividend
 29035  015A32  C081  F061         	movff	printf@val+1,___lwdiv@dividend+1
 29036  015A36  ECE5  F0C0         	call	___lwdiv	;wreg free
 29037  015A3A  C060  F067         	movff	?___lwdiv,___lwmod@dividend
 29038  015A3E  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
 29039  015A42  0E00               	movlw	0
 29040  015A44  0100               	movlb	0	; () banked
 29041  015A46  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 29042  015A48  0E0A               	movlw	10
 29043  015A4A  6F69               	movwf	___lwmod@divisor& (0+255),b
 29044  015A4C  EC6F  F0C3         	call	___lwmod	;wreg free
 29045  015A50  0100               	movlb	0	; () banked
 29046  015A52  5167               	movf	?___lwmod& (0+255),w,b
 29047  015A54  0F30               	addlw	48
 29048  015A56  6F82               	movwf	printf@c& (0+255),b
 29049                           
 29050                           ; BSR set to: 0
 29051                           ;doprnt.c: 1523: }
 29052                           ;doprnt.c: 1524: (putch(c) );
 29053  015A58  5182               	movf	printf@c& (0+255),w,b
 29054  015A5A  ECC2  F0C7         	call	_putch
 29055  015A5E                     l2612:
 29056  015A5E  0100               	movlb	0	; () banked
 29057  015A60  077D               	decf	printf@prec& (0+255),f,b
 29058  015A62  297D               	incf	printf@prec& (0+255),w,b
 29059  015A64  A4D8               	btfss	status,2,c
 29060  015A66  D7D1               	goto	l2613
 29061  015A68                     u13050:
 29062                           
 29063                           ; BSR set to: 0
 29064                           
 29065                           ; BSR set to: 0
 29066  015A68  C075  FFF6         	movff	printf@f,tblptrl
 29067  015A6C  C076  FFF7         	movff	printf@f+1,tblptrh
 29068  015A70  0100               	movlb	0	; () banked
 29069  015A72  4B75               	infsnz	printf@f& (0+255),f,b
 29070  015A74  2B76               	incf	(printf@f+1)& (0+255),f,b
 29071  015A76                     	if	0	;tblptru may be non-zero
 29072  015A76                     	endif
 29073  015A76                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 29074  015A76  0E00               	movlw	low (__mediumconst shr (0+16))
 29075  015A78  6EF8               	movwf	tblptru,c
 29076  015A7A                     	endif
 29077  015A7A  0008               	tblrd		*
 29078  015A7C  CFF5 F082          	movff	tablat,printf@c
 29079  015A80  5182               	movf	printf@c& (0+255),w,b
 29080  015A82  B4D8               	btfsc	status,2,c
 29081  015A84  0012               	return	
 29082  015A86  D752               	goto	l2597
 29083  015A88                     __end_of_printf:
 29084                           	opt stack 0
 29085                           tosu	equ	0xFFF
 29086                           tosh	equ	0xFFE
 29087                           tosl	equ	0xFFD
 29088                           pclath	equ	0xFFA
 29089                           tblptru	equ	0xFF8
 29090                           tblptrh	equ	0xFF7
 29091                           tblptrl	equ	0xFF6
 29092                           tablat	equ	0xFF5
 29093                           prodh	equ	0xFF4
 29094                           prodl	equ	0xFF3
 29095                           intcon	equ	0xFF2
 29096                           indf0	equ	0xFEF
 29097                           postinc0	equ	0xFEE
 29098                           fsr0h	equ	0xFEA
 29099                           fsr0l	equ	0xFE9
 29100                           wreg	equ	0xFE8
 29101                           indf1	equ	0xFE7
 29102                           postdec1	equ	0xFE5
 29103                           fsr1h	equ	0xFE2
 29104                           fsr1l	equ	0xFE1
 29105                           indf2	equ	0xFDF
 29106                           postinc2	equ	0xFDE
 29107                           postdec2	equ	0xFDD
 29108                           plusw2	equ	0xFDB
 29109                           fsr2h	equ	0xFDA
 29110                           fsr2l	equ	0xFD9
 29111                           status	equ	0xFD8
 29112                           
 29113 ;; *************** function _putch *****************
 29114 ;; Defined at:
 29115 ;;		line 454 in file "Library/Console.c"
 29116 ;; Parameters:    Size  Location     Type
 29117 ;;  c               1    wreg     unsigned char 
 29118 ;; Auto vars:     Size  Location     Type
 29119 ;;  c               1   20[BANK0 ] unsigned char 
 29120 ;; Return value:  Size  Location     Type
 29121 ;;                  1    wreg      void 
 29122 ;; Registers used:
 29123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29124 ;; Tracked objects:
 29125 ;;		On entry : 0/0
 29126 ;;		On exit  : 0/0
 29127 ;;		Unchanged: 0/0
 29128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29130 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29132 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29133 ;;Total ram usage:        1 bytes
 29134 ;; Hardware stack levels used:    1
 29135 ;; Hardware stack levels required when called:   11
 29136 ;; This function calls:
 29137 ;;		_Console_PrintChar
 29138 ;; This function is called by:
 29139 ;;		_printf
 29140 ;; This function uses a non-reentrant model
 29141 ;;
 29142                           
 29143                           	psect	text121
 29144  018F84                     __ptext121:
 29145                           	opt stack 0
 29146  018F84                     _putch:
 29147                           	opt stack 18
 29148                           
 29149                           ; BSR set to: 0
 29150                           ;incstack = 0
 29151                           ;putch@c stored from wreg
 29152  018F84  0100               	movlb	0	; () banked
 29153  018F86  6F74               	movwf	putch@c& (0+255),b
 29154                           
 29155                           ;Console.c: 456: Console_PrintChar(c);
 29156  018F88  0100               	movlb	0	; () banked
 29157  018F8A  5174               	movf	putch@c& (0+255),w,b
 29158  018F8C  EC9D  F0AE         	call	_Console_PrintChar
 29159  018F90  0012               	return		;funcret
 29160  018F92                     __end_of_putch:
 29161                           	opt stack 0
 29162                           tosu	equ	0xFFF
 29163                           tosh	equ	0xFFE
 29164                           tosl	equ	0xFFD
 29165                           pclath	equ	0xFFA
 29166                           tblptru	equ	0xFF8
 29167                           tblptrh	equ	0xFF7
 29168                           tblptrl	equ	0xFF6
 29169                           tablat	equ	0xFF5
 29170                           prodh	equ	0xFF4
 29171                           prodl	equ	0xFF3
 29172                           intcon	equ	0xFF2
 29173                           indf0	equ	0xFEF
 29174                           postinc0	equ	0xFEE
 29175                           fsr0h	equ	0xFEA
 29176                           fsr0l	equ	0xFE9
 29177                           wreg	equ	0xFE8
 29178                           indf1	equ	0xFE7
 29179                           postdec1	equ	0xFE5
 29180                           fsr1h	equ	0xFE2
 29181                           fsr1l	equ	0xFE1
 29182                           indf2	equ	0xFDF
 29183                           postinc2	equ	0xFDE
 29184                           postdec2	equ	0xFDD
 29185                           plusw2	equ	0xFDB
 29186                           fsr2h	equ	0xFDA
 29187                           fsr2l	equ	0xFD9
 29188                           status	equ	0xFD8
 29189                           
 29190 ;; *************** function _Console_PrintChar *****************
 29191 ;; Defined at:
 29192 ;;		line 322 in file "Library/Console.c"
 29193 ;; Parameters:    Size  Location     Type
 29194 ;;  pInput          1    wreg     unsigned char 
 29195 ;; Auto vars:     Size  Location     Type
 29196 ;;  pInput          1   19[BANK0 ] unsigned char 
 29197 ;; Return value:  Size  Location     Type
 29198 ;;                  1    wreg      void 
 29199 ;; Registers used:
 29200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29201 ;; Tracked objects:
 29202 ;;		On entry : 0/0
 29203 ;;		On exit  : 0/0
 29204 ;;		Unchanged: 0/0
 29205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29207 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29208 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29209 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29210 ;;Total ram usage:        4 bytes
 29211 ;; Hardware stack levels used:    1
 29212 ;; Hardware stack levels required when called:   10
 29213 ;; This function calls:
 29214 ;;		_Console_Backspace
 29215 ;;		_Console_FormFeed
 29216 ;;		_Console_IncrementCursor
 29217 ;;		_Console_NewLine
 29218 ;;		_Console_ResetCursor
 29219 ;;		_Console_Tab
 29220 ;; This function is called by:
 29221 ;;		_putch
 29222 ;;		_Console_PrintString
 29223 ;; This function uses a non-reentrant model
 29224 ;;
 29225                           
 29226                           	psect	text122
 29227  015D3A                     __ptext122:
 29228                           	opt stack 0
 29229  015D3A                     _Console_PrintChar:
 29230                           	opt stack 18
 29231                           
 29232                           ;incstack = 0
 29233                           ;Console_PrintChar@pInput stored from wreg
 29234  015D3A  0100               	movlb	0	; () banked
 29235  015D3C  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
 29236                           
 29237                           ;Console.c: 324: switch(pInput)
 29238  015D3E  D08A               	goto	l1036
 29239  015D40                     
 29240                           ;Console.c: 327: case '\n':
 29241                           ;Console.c: 328: Console_NewLine();
 29242  015D40  EC67  F0BC         	call	_Console_NewLine	;wreg free
 29243                           
 29244                           ;Console.c: 329: return;
 29245  015D44  0012               	return	
 29246  015D46                     
 29247                           ;Console.c: 331: Console_Backspace();
 29248  015D46  ECB2  F0C1         	call	_Console_Backspace	;wreg free
 29249                           
 29250                           ;Console.c: 332: return;
 29251  015D4A  0012               	return	
 29252  015D4C                     
 29253                           ;Console.c: 334: Console_FormFeed();
 29254  015D4C  EC07  F0BE         	call	_Console_FormFeed	;wreg free
 29255                           
 29256                           ;Console.c: 335: return;
 29257  015D50  0012               	return	
 29258  015D52                     
 29259                           ;Console.c: 337: Console_Tab();
 29260  015D52  ECB4  F0B9         	call	_Console_Tab	;wreg free
 29261                           
 29262                           ;Console.c: 338: return;
 29263  015D56  0012               	return	
 29264  015D58                     
 29265                           ;Console.c: 340: Console_IncrementCursor();
 29266  015D58  ECBB  F0C0         	call	_Console_IncrementCursor	;wreg free
 29267                           
 29268                           ;Console.c: 341: return;
 29269  015D5C  0012               	return	
 29270  015D5E                     
 29271                           ;Console.c: 343: Console_ResetCursor();
 29272  015D5E  ECB1  F0C6         	call	_Console_ResetCursor	;wreg free
 29273                           
 29274                           ;Console.c: 344: return;
 29275  015D62  0012               	return	
 29276  015D64                     
 29277                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 29278                           
 29279                           ;Console.c: 349: default:
 29280  015D64  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 29281  015D68  0E7F               	movlw	127
 29282  015D6A  0100               	movlb	0	; () banked
 29283  015D6C  1770               	andwf	??_Console_PrintChar& (0+255),f,b
 29284  015D6E  51FF               	movf	_lBufferY& (0+255),w,b
 29285  015D70  0D14               	mullw	20
 29286  015D72  0EF2               	movlw	low _lBuffer
 29287  015D74  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 29288  015D76  0E03               	movlw	high _lBuffer
 29289  015D78  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
 29290  015D7A  50F3               	movf	prodl,w,c
 29291  015D7C  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 29292  015D7E  50F4               	movf	prodh,w,c
 29293  015D80  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 29294  015D82  5045               	movf	_lBufferX,w,c
 29295  015D84  0D01               	mullw	1
 29296  015D86  50F3               	movf	prodl,w,c
 29297  015D88  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 29298  015D8A  6ED9               	movwf	fsr2l,c
 29299  015D8C  50F4               	movf	prodh,w,c
 29300  015D8E  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 29301  015D90  6EDA               	movwf	fsr2h,c
 29302  015D92  50DF               	movf	indf2,w,c
 29303  015D94  0B7F               	andlw	127
 29304  015D96  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
 29305  015D98  B4D8               	btfsc	status,2,c
 29306  015D9A  D023               	goto	l1047
 29307                           
 29308                           ; BSR set to: 0
 29309                           ;Console.c: 351: {
 29310                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 29311  015D9C  0E01               	movlw	1
 29312  015D9E  6E4E               	movwf	_change,c
 29313                           
 29314                           ; BSR set to: 0
 29315  015DA0  51FF               	movf	_lBufferY& (0+255),w,b
 29316  015DA2  0D14               	mullw	20
 29317  015DA4  0EF2               	movlw	low _lBuffer
 29318  015DA6  6F70               	movwf	??_Console_PrintChar& (0+255),b
 29319  015DA8  0E03               	movlw	high _lBuffer
 29320  015DAA  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 29321  015DAC  50F3               	movf	prodl,w,c
 29322  015DAE  2770               	addwf	??_Console_PrintChar& (0+255),f,b
 29323  015DB0  50F4               	movf	prodh,w,c
 29324  015DB2  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 29325  015DB4  5045               	movf	_lBufferX,w,c
 29326  015DB6  0D01               	mullw	1
 29327  015DB8  50F3               	movf	prodl,w,c
 29328  015DBA  2570               	addwf	??_Console_PrintChar& (0+255),w,b
 29329  015DBC  6ED9               	movwf	fsr2l,c
 29330  015DBE  50F4               	movf	prodh,w,c
 29331  015DC0  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 29332  015DC2  6EDA               	movwf	fsr2h,c
 29333  015DC4  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 29334  015DC6  0980               	iorlw	128
 29335  015DC8  6EDF               	movwf	indf2,c
 29336                           
 29337                           ; BSR set to: 0
 29338                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
 29339  015DCA  51FF               	movf	_lBufferY& (0+255),w,b
 29340  015DCC  0D02               	mullw	2
 29341  015DCE  0E28               	movlw	low _lCBuffer
 29342  015DD0  24F3               	addwf	prodl,w,c
 29343  015DD2  6ED9               	movwf	fsr2l,c
 29344  015DD4  0E03               	movlw	high _lCBuffer
 29345  015DD6  20F4               	addwfc	prodh,w,c
 29346  015DD8  6EDA               	movwf	fsr2h,c
 29347  015DDA  C1FB  FFDE         	movff	_gForecolour,postinc2
 29348  015DDE  C1FC  FFDD         	movff	_gForecolour+1,postdec2
 29349  015DE2                     l1047:
 29350                           
 29351                           ; BSR set to: 0
 29352                           ;Console.c: 354: }
 29353                           ;Console.c: 368: if(Console_IncrementCursor())
 29354                           
 29355                           ; BSR set to: 0
 29356  015DE2  ECBB  F0C0         	call	_Console_IncrementCursor	;wreg free
 29357  015DE6  0900               	iorlw	0
 29358  015DE8  B4D8               	btfsc	status,2,c
 29359  015DEA  0012               	return	
 29360                           
 29361                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 29362  015DEC  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 29363  015DF0  0E7F               	movlw	127
 29364  015DF2  0100               	movlb	0	; () banked
 29365  015DF4  1770               	andwf	??_Console_PrintChar& (0+255),f,b
 29366  015DF6  51FF               	movf	_lBufferY& (0+255),w,b
 29367  015DF8  0D14               	mullw	20
 29368  015DFA  0EF2               	movlw	low _lBuffer
 29369  015DFC  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 29370  015DFE  0E03               	movlw	high _lBuffer
 29371  015E00  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
 29372  015E02  50F3               	movf	prodl,w,c
 29373  015E04  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 29374  015E06  50F4               	movf	prodh,w,c
 29375  015E08  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 29376  015E0A  5045               	movf	_lBufferX,w,c
 29377  015E0C  0D01               	mullw	1
 29378  015E0E  50F3               	movf	prodl,w,c
 29379  015E10  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 29380  015E12  6ED9               	movwf	fsr2l,c
 29381  015E14  50F4               	movf	prodh,w,c
 29382  015E16  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 29383  015E18  6EDA               	movwf	fsr2h,c
 29384  015E1A  50DF               	movf	indf2,w,c
 29385  015E1C  0B7F               	andlw	127
 29386  015E1E  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
 29387  015E20  B4D8               	btfsc	status,2,c
 29388  015E22  0012               	return	
 29389                           
 29390                           ; BSR set to: 0
 29391                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 29392  015E24  0E01               	movlw	1
 29393  015E26  6E4E               	movwf	_change,c
 29394                           
 29395                           ; BSR set to: 0
 29396  015E28  51FF               	movf	_lBufferY& (0+255),w,b
 29397  015E2A  0D14               	mullw	20
 29398  015E2C  0EF2               	movlw	low _lBuffer
 29399  015E2E  6F70               	movwf	??_Console_PrintChar& (0+255),b
 29400  015E30  0E03               	movlw	high _lBuffer
 29401  015E32  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 29402  015E34  50F3               	movf	prodl,w,c
 29403  015E36  2770               	addwf	??_Console_PrintChar& (0+255),f,b
 29404  015E38  50F4               	movf	prodh,w,c
 29405  015E3A  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 29406  015E3C  5045               	movf	_lBufferX,w,c
 29407  015E3E  0D01               	mullw	1
 29408  015E40  50F3               	movf	prodl,w,c
 29409  015E42  2570               	addwf	??_Console_PrintChar& (0+255),w,b
 29410  015E44  6ED9               	movwf	fsr2l,c
 29411  015E46  50F4               	movf	prodh,w,c
 29412  015E48  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 29413  015E4A  6EDA               	movwf	fsr2h,c
 29414  015E4C  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 29415  015E4E  0980               	iorlw	128
 29416  015E50  6EDF               	movwf	indf2,c
 29417                           
 29418                           ; BSR set to: 0
 29419                           ;Console.c: 372: };
 29420                           
 29421                           ; BSR set to: 0
 29422                           ;Console.c: 371: return;
 29423                           
 29424                           ; BSR set to: 0
 29425                           
 29426                           ; BSR set to: 0
 29427  015E52  0012               	return	
 29428  015E54                     l1036:
 29429                           
 29430                           ; BSR set to: 0
 29431  015E54  0100               	movlb	0	; () banked
 29432  015E56  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 29433                           
 29434                           ; Switch size 1, requested type "space"
 29435                           ; Number of cases is 8, Range of values is 7 to 35
 29436                           ; switch strategies available:
 29437                           ; Name         Instructions Cycles
 29438                           ; simple_byte           25    13 (average)
 29439                           ;	Chosen strategy is simple_byte
 29440  015E58  0A07               	xorlw	7	; case 7
 29441  015E5A  B4D8               	btfsc	status,2,c
 29442  015E5C  D77D               	goto	l1043
 29443  015E5E  0A0F               	xorlw	15	; case 8
 29444  015E60  B4D8               	btfsc	status,2,c
 29445  015E62  D771               	goto	l1040
 29446  015E64  0A01               	xorlw	1	; case 9
 29447  015E66  B4D8               	btfsc	status,2,c
 29448  015E68  D774               	goto	l1042
 29449  015E6A  0A03               	xorlw	3	; case 10
 29450  015E6C  B4D8               	btfsc	status,2,c
 29451  015E6E  D768               	goto	l1037
 29452  015E70  0A06               	xorlw	6	; case 12
 29453  015E72  B4D8               	btfsc	status,2,c
 29454  015E74  D76B               	goto	l1041
 29455  015E76  0A01               	xorlw	1	; case 13
 29456  015E78  B4D8               	btfsc	status,2,c
 29457  015E7A  D762               	goto	l1037
 29458  015E7C  0A2D               	xorlw	45	; case 32
 29459  015E7E  B4D8               	btfsc	status,2,c
 29460  015E80  D771               	goto	l1045
 29461  015E82  0A03               	xorlw	3	; case 35
 29462  015E84  B4D8               	btfsc	status,2,c
 29463  015E86  D76B               	goto	l1044
 29464  015E88  D76D               	goto	l1045
 29465  015E8A                     __end_of_Console_PrintChar:
 29466                           	opt stack 0
 29467                           tosu	equ	0xFFF
 29468                           tosh	equ	0xFFE
 29469                           tosl	equ	0xFFD
 29470                           pclath	equ	0xFFA
 29471                           tblptru	equ	0xFF8
 29472                           tblptrh	equ	0xFF7
 29473                           tblptrl	equ	0xFF6
 29474                           tablat	equ	0xFF5
 29475                           prodh	equ	0xFF4
 29476                           prodl	equ	0xFF3
 29477                           intcon	equ	0xFF2
 29478                           indf0	equ	0xFEF
 29479                           postinc0	equ	0xFEE
 29480                           fsr0h	equ	0xFEA
 29481                           fsr0l	equ	0xFE9
 29482                           wreg	equ	0xFE8
 29483                           indf1	equ	0xFE7
 29484                           postdec1	equ	0xFE5
 29485                           fsr1h	equ	0xFE2
 29486                           fsr1l	equ	0xFE1
 29487                           indf2	equ	0xFDF
 29488                           postinc2	equ	0xFDE
 29489                           postdec2	equ	0xFDD
 29490                           plusw2	equ	0xFDB
 29491                           fsr2h	equ	0xFDA
 29492                           fsr2l	equ	0xFD9
 29493                           status	equ	0xFD8
 29494                           
 29495 ;; *************** function _Console_Tab *****************
 29496 ;; Defined at:
 29497 ;;		line 260 in file "Library/Console.c"
 29498 ;; Parameters:    Size  Location     Type
 29499 ;;		None
 29500 ;; Auto vars:     Size  Location     Type
 29501 ;;  c               1   15[BANK0 ] unsigned char 
 29502 ;;  i               1   14[BANK0 ] unsigned char 
 29503 ;;  t               1   13[BANK0 ] unsigned char 
 29504 ;; Return value:  Size  Location     Type
 29505 ;;                  1    wreg      void 
 29506 ;; Registers used:
 29507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29508 ;; Tracked objects:
 29509 ;;		On entry : 0/0
 29510 ;;		On exit  : 0/0
 29511 ;;		Unchanged: 0/0
 29512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29514 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29515 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29516 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29517 ;;Total ram usage:        8 bytes
 29518 ;; Hardware stack levels used:    1
 29519 ;; Hardware stack levels required when called:    9
 29520 ;; This function calls:
 29521 ;;		_Console_ClearCursor
 29522 ;;		_Console_IncrementCursor
 29523 ;;		___awdiv
 29524 ;; This function is called by:
 29525 ;;		_Console_PrintChar
 29526 ;; This function uses a non-reentrant model
 29527 ;;
 29528                           
 29529                           	psect	text123
 29530  017368                     __ptext123:
 29531                           	opt stack 0
 29532  017368                     _Console_Tab:
 29533                           	opt stack 18
 29534                           
 29535                           ;Console.c: 262: UINT8 i = 0;
 29536                           
 29537                           ;incstack = 0
 29538  017368  0E00               	movlw	0
 29539  01736A  0100               	movlb	0	; () banked
 29540  01736C  6F6E               	movwf	Console_Tab@i& (0+255),b
 29541                           
 29542                           ; BSR set to: 0
 29543                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
 29544  01736E  0EFA               	movlw	250
 29545  017370  2447               	addwf	_gCursor,w,c
 29546  017372  6F60               	movwf	___awdiv@dividend& (0+255),b
 29547  017374  0EFF               	movlw	255
 29548  017376  2048               	addwfc	_gCursor+1,w,c
 29549  017378  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
 29550  01737A  0E00               	movlw	0
 29551  01737C  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 29552  01737E  0E06               	movlw	6
 29553  017380  6F62               	movwf	___awdiv@divisor& (0+255),b
 29554  017382  ECA3  F0BB         	call	___awdiv	;wreg free
 29555  017386  0100               	movlb	0	; () banked
 29556  017388  5160               	movf	?___awdiv& (0+255),w,b
 29557  01738A  6F6F               	movwf	Console_Tab@c& (0+255),b
 29558                           
 29559                           ; BSR set to: 0
 29560                           ;Console.c: 264: UINT8 t = c/4;
 29561  01738C  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
 29562  017390  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
 29563  017392  0E00               	movlw	0
 29564  017394  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 29565  017396  0E04               	movlw	4
 29566  017398  6F62               	movwf	___awdiv@divisor& (0+255),b
 29567  01739A  ECA3  F0BB         	call	___awdiv	;wreg free
 29568  01739E  0100               	movlb	0	; () banked
 29569  0173A0  5160               	movf	?___awdiv& (0+255),w,b
 29570  0173A2  6F6D               	movwf	Console_Tab@t& (0+255),b
 29571                           
 29572                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
 29573  0173A4  0E00               	movlw	0
 29574  0173A6  6F6E               	movwf	Console_Tab@i& (0+255),b
 29575  0173A8  D006               	goto	l1009
 29576  0173AA                     
 29577                           ; BSR set to: 0
 29578                           ;Console.c: 266: {
 29579                           ;Console.c: 267: Console_ClearCursor();
 29580                           
 29581                           ; BSR set to: 0
 29582  0173AA  EC73  F0C5         	call	_Console_ClearCursor	;wreg free
 29583                           
 29584                           ;Console.c: 268: Console_IncrementCursor();
 29585  0173AE  ECBB  F0C0         	call	_Console_IncrementCursor	;wreg free
 29586  0173B2  0100               	movlb	0	; () banked
 29587  0173B4  2B6E               	incf	Console_Tab@i& (0+255),f,b
 29588  0173B6                     l1009:
 29589                           
 29590                           ; BSR set to: 0
 29591                           
 29592                           ; BSR set to: 0
 29593  0173B6  516D               	movf	Console_Tab@t& (0+255),w,b
 29594  0173B8  0D04               	mullw	4
 29595  0173BA  1EF3               	comf	prodl,f,c
 29596  0173BC  1EF4               	comf	prodh,f,c
 29597  0173BE  4AF3               	infsnz	prodl,f,c
 29598  0173C0  2AF4               	incf	prodh,f,c
 29599  0173C2  516F               	movf	Console_Tab@c& (0+255),w,b
 29600  0173C4  6F68               	movwf	??_Console_Tab& (0+255),b
 29601  0173C6  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
 29602  0173C8  50F3               	movf	prodl,w,c
 29603  0173CA  2768               	addwf	??_Console_Tab& (0+255),f,b
 29604  0173CC  50F4               	movf	prodh,w,c
 29605  0173CE  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 29606  0173D0  1F68               	comf	??_Console_Tab& (0+255),f,b
 29607  0173D2  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
 29608  0173D4  4B68               	infsnz	??_Console_Tab& (0+255),f,b
 29609  0173D6  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
 29610  0173D8  0E04               	movlw	4
 29611  0173DA  2768               	addwf	??_Console_Tab& (0+255),f,b
 29612  0173DC  0E00               	movlw	0
 29613  0173DE  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 29614  0173E0  516E               	movf	Console_Tab@i& (0+255),w,b
 29615  0173E2  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
 29616  0173E4  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
 29617  0173E6  5168               	movf	??_Console_Tab& (0+255),w,b
 29618  0173E8  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
 29619  0173EA  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
 29620  0173EC  0A80               	xorlw	128
 29621  0173EE  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
 29622  0173F0  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
 29623  0173F2  0A80               	xorlw	128
 29624  0173F4  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
 29625  0173F6  B0D8               	btfsc	status,0,c
 29626  0173F8  0012               	return	
 29627  0173FA  D7D7               	goto	l1010
 29628  0173FC                     __end_of_Console_Tab:
 29629                           	opt stack 0
 29630                           tosu	equ	0xFFF
 29631                           tosh	equ	0xFFE
 29632                           tosl	equ	0xFFD
 29633                           pclath	equ	0xFFA
 29634                           tblptru	equ	0xFF8
 29635                           tblptrh	equ	0xFF7
 29636                           tblptrl	equ	0xFF6
 29637                           tablat	equ	0xFF5
 29638                           prodh	equ	0xFF4
 29639                           prodl	equ	0xFF3
 29640                           intcon	equ	0xFF2
 29641                           indf0	equ	0xFEF
 29642                           postinc0	equ	0xFEE
 29643                           fsr0h	equ	0xFEA
 29644                           fsr0l	equ	0xFE9
 29645                           wreg	equ	0xFE8
 29646                           indf1	equ	0xFE7
 29647                           postdec1	equ	0xFE5
 29648                           fsr1h	equ	0xFE2
 29649                           fsr1l	equ	0xFE1
 29650                           indf2	equ	0xFDF
 29651                           postinc2	equ	0xFDE
 29652                           postdec2	equ	0xFDD
 29653                           plusw2	equ	0xFDB
 29654                           fsr2h	equ	0xFDA
 29655                           fsr2l	equ	0xFD9
 29656                           status	equ	0xFD8
 29657                           
 29658 ;; *************** function ___awdiv *****************
 29659 ;; Defined at:
 29660 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
 29661 ;; Parameters:    Size  Location     Type
 29662 ;;  dividend        2    0[BANK0 ] int 
 29663 ;;  divisor         2    2[BANK0 ] int 
 29664 ;; Auto vars:     Size  Location     Type
 29665 ;;  quotient        2    6[BANK0 ] int 
 29666 ;;  sign            1    5[BANK0 ] unsigned char 
 29667 ;;  counter         1    4[BANK0 ] unsigned char 
 29668 ;; Return value:  Size  Location     Type
 29669 ;;                  2    0[BANK0 ] int 
 29670 ;; Registers used:
 29671 ;;		wreg, status,2, status,0
 29672 ;; Tracked objects:
 29673 ;;		On entry : 0/0
 29674 ;;		On exit  : 0/0
 29675 ;;		Unchanged: 0/0
 29676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29677 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29678 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29680 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29681 ;;Total ram usage:        8 bytes
 29682 ;; Hardware stack levels used:    1
 29683 ;; Hardware stack levels required when called:    7
 29684 ;; This function calls:
 29685 ;;		Nothing
 29686 ;; This function is called by:
 29687 ;;		_Console_Tab
 29688 ;;		_ADCAverage
 29689 ;; This function uses a non-reentrant model
 29690 ;;
 29691                           
 29692                           	psect	text124
 29693  017746                     __ptext124:
 29694                           	opt stack 0
 29695  017746                     ___awdiv:
 29696                           	opt stack 19
 29697                           
 29698                           ; BSR set to: 0
 29699                           ;incstack = 0
 29700  017746  0E00               	movlw	0
 29701  017748  0100               	movlb	0	; () banked
 29702  01774A  6F65               	movwf	___awdiv@sign& (0+255),b
 29703                           
 29704                           ; BSR set to: 0
 29705  01774C  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 29706  01774E  D006               	goto	l2784
 29707                           
 29708                           ; BSR set to: 0
 29709  017750  6D62               	negf	___awdiv@divisor& (0+255),b
 29710  017752  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
 29711  017754  B0D8               	btfsc	status,0,c
 29712  017756  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
 29713                           
 29714                           ; BSR set to: 0
 29715  017758  0E01               	movlw	1
 29716  01775A  6F65               	movwf	___awdiv@sign& (0+255),b
 29717  01775C                     l2784:
 29718                           
 29719                           ; BSR set to: 0
 29720                           
 29721                           ; BSR set to: 0
 29722  01775C  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 29723  01775E  D006               	goto	l2785
 29724                           
 29725                           ; BSR set to: 0
 29726  017760  6D60               	negf	___awdiv@dividend& (0+255),b
 29727  017762  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
 29728  017764  B0D8               	btfsc	status,0,c
 29729  017766  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
 29730                           
 29731                           ; BSR set to: 0
 29732  017768  0E01               	movlw	1
 29733  01776A  1B65               	xorwf	___awdiv@sign& (0+255),f,b
 29734  01776C                     l2785:
 29735                           
 29736                           ; BSR set to: 0
 29737                           
 29738                           ; BSR set to: 0
 29739  01776C  0E00               	movlw	0
 29740  01776E  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
 29741  017770  0E00               	movlw	0
 29742  017772  6F66               	movwf	___awdiv@quotient& (0+255),b
 29743                           
 29744                           ; BSR set to: 0
 29745  017774  5162               	movf	___awdiv@divisor& (0+255),w,b
 29746  017776  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 29747  017778  B4D8               	btfsc	status,2,c
 29748  01777A  D01C               	goto	l2792
 29749                           
 29750                           ; BSR set to: 0
 29751  01777C  0E01               	movlw	1
 29752  01777E  6F64               	movwf	___awdiv@counter& (0+255),b
 29753  017780  D004               	goto	l2787
 29754  017782                     
 29755                           ; BSR set to: 0
 29756                           
 29757                           ; BSR set to: 0
 29758  017782  90D8               	bcf	status,0,c
 29759  017784  3762               	rlcf	___awdiv@divisor& (0+255),f,b
 29760  017786  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 29761  017788  2B64               	incf	___awdiv@counter& (0+255),f,b
 29762  01778A                     l2787:
 29763                           
 29764                           ; BSR set to: 0
 29765                           
 29766                           ; BSR set to: 0
 29767  01778A  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 29768  01778C  D7FA               	goto	l2788
 29769  01778E                     u11100:
 29770                           
 29771                           ; BSR set to: 0
 29772                           
 29773                           ; BSR set to: 0
 29774                           
 29775                           ; BSR set to: 0
 29776  01778E  90D8               	bcf	status,0,c
 29777  017790  3766               	rlcf	___awdiv@quotient& (0+255),f,b
 29778  017792  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 29779                           
 29780                           ; BSR set to: 0
 29781  017794  5162               	movf	___awdiv@divisor& (0+255),w,b
 29782  017796  5D60               	subwf	___awdiv@dividend& (0+255),w,b
 29783  017798  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 29784  01779A  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 29785  01779C  A0D8               	btfss	status,0,c
 29786  01779E  D005               	goto	l2791
 29787                           
 29788                           ; BSR set to: 0
 29789  0177A0  5162               	movf	___awdiv@divisor& (0+255),w,b
 29790  0177A2  5F60               	subwf	___awdiv@dividend& (0+255),f,b
 29791  0177A4  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 29792  0177A6  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 29793                           
 29794                           ; BSR set to: 0
 29795  0177A8  8166               	bsf	___awdiv@quotient& (0+255),0,b
 29796  0177AA                     l2791:
 29797                           
 29798                           ; BSR set to: 0
 29799                           
 29800                           ; BSR set to: 0
 29801  0177AA  90D8               	bcf	status,0,c
 29802  0177AC  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 29803  0177AE  3362               	rrcf	___awdiv@divisor& (0+255),f,b
 29804                           
 29805                           ; BSR set to: 0
 29806  0177B0  2F64               	decfsz	___awdiv@counter& (0+255),f,b
 29807  0177B2  D7ED               	goto	u11100
 29808  0177B4                     l2792:
 29809                           
 29810                           ; BSR set to: 0
 29811                           
 29812                           ; BSR set to: 0
 29813                           
 29814                           ; BSR set to: 0
 29815  0177B4  5165               	movf	___awdiv@sign& (0+255),w,b
 29816  0177B6  B4D8               	btfsc	status,2,c
 29817  0177B8  D004               	goto	l2793
 29818                           
 29819                           ; BSR set to: 0
 29820  0177BA  6D66               	negf	___awdiv@quotient& (0+255),b
 29821  0177BC  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
 29822  0177BE  B0D8               	btfsc	status,0,c
 29823  0177C0  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
 29824  0177C2                     l2793:
 29825                           
 29826                           ; BSR set to: 0
 29827                           
 29828                           ; BSR set to: 0
 29829  0177C2  C066  F060         	movff	___awdiv@quotient,?___awdiv
 29830  0177C6  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
 29831  0177CA  0012               	return	
 29832  0177CC                     __end_of___awdiv:
 29833                           	opt stack 0
 29834                           tosu	equ	0xFFF
 29835                           tosh	equ	0xFFE
 29836                           tosl	equ	0xFFD
 29837                           pclath	equ	0xFFA
 29838                           tblptru	equ	0xFF8
 29839                           tblptrh	equ	0xFF7
 29840                           tblptrl	equ	0xFF6
 29841                           tablat	equ	0xFF5
 29842                           prodh	equ	0xFF4
 29843                           prodl	equ	0xFF3
 29844                           intcon	equ	0xFF2
 29845                           indf0	equ	0xFEF
 29846                           postinc0	equ	0xFEE
 29847                           fsr0h	equ	0xFEA
 29848                           fsr0l	equ	0xFE9
 29849                           wreg	equ	0xFE8
 29850                           indf1	equ	0xFE7
 29851                           postdec1	equ	0xFE5
 29852                           fsr1h	equ	0xFE2
 29853                           fsr1l	equ	0xFE1
 29854                           indf2	equ	0xFDF
 29855                           postinc2	equ	0xFDE
 29856                           postdec2	equ	0xFDD
 29857                           plusw2	equ	0xFDB
 29858                           fsr2h	equ	0xFDA
 29859                           fsr2l	equ	0xFD9
 29860                           status	equ	0xFD8
 29861                           
 29862 ;; *************** function _Console_IncrementCursor *****************
 29863 ;; Defined at:
 29864 ;;		line 243 in file "Library/Console.c"
 29865 ;; Parameters:    Size  Location     Type
 29866 ;;		None
 29867 ;; Auto vars:     Size  Location     Type
 29868 ;;		None
 29869 ;; Return value:  Size  Location     Type
 29870 ;;                  1    wreg      unsigned char 
 29871 ;; Registers used:
 29872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29873 ;; Tracked objects:
 29874 ;;		On entry : 0/0
 29875 ;;		On exit  : 0/0
 29876 ;;		Unchanged: 0/0
 29877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29880 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29881 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29882 ;;Total ram usage:        2 bytes
 29883 ;; Hardware stack levels used:    1
 29884 ;; Hardware stack levels required when called:    8
 29885 ;; This function calls:
 29886 ;;		_Console_FormFeed
 29887 ;;		_Console_NewLine
 29888 ;; This function is called by:
 29889 ;;		_Console_Tab
 29890 ;;		_Console_PrintChar
 29891 ;; This function uses a non-reentrant model
 29892 ;;
 29893                           
 29894                           	psect	text125
 29895  018176                     __ptext125:
 29896                           	opt stack 0
 29897  018176                     _Console_IncrementCursor:
 29898                           	opt stack 18
 29899                           
 29900                           ;Console.c: 246: lBufferX += 1;
 29901                           
 29902                           ; BSR set to: 0
 29903                           ;incstack = 0
 29904  018176  2A45               	incf	_lBufferX,f,c
 29905                           
 29906                           ;Console.c: 248: gCursor.x += 6;
 29907  018178  0E06               	movlw	6
 29908  01817A  2647               	addwf	_gCursor,f,c
 29909  01817C  0E00               	movlw	0
 29910  01817E  2248               	addwfc	_gCursor+1,f,c
 29911                           
 29912                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
 29913  018180  0E06               	movlw	6
 29914  018182  2447               	addwf	_gCursor,w,c
 29915  018184  0100               	movlb	0	; () banked
 29916  018186  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 29917  018188  0E00               	movlw	0
 29918  01818A  2048               	addwfc	_gCursor+1,w,c
 29919  01818C  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 29920  01818E  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 29921  018190  D007               	goto	l1004
 29922  018192  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 29923  018194  E103               	bnz	u11050
 29924  018196  0E80               	movlw	128
 29925  018198  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 29926  01819A  B0D8               	btfsc	status,0,c
 29927  01819C                     u11050:
 29928                           
 29929                           ; BSR set to: 0
 29930                           ;Console.c: 250: Console_NewLine();
 29931  01819C  EC67  F0BC         	call	_Console_NewLine	;wreg free
 29932  0181A0                     l1004:
 29933                           
 29934                           ;Console.c: 251: if (gCursor.y + 8>= 128)
 29935  0181A0  0E08               	movlw	8
 29936  0181A2  2449               	addwf	_gCursor+2,w,c
 29937  0181A4  0100               	movlb	0	; () banked
 29938  0181A6  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 29939  0181A8  0E00               	movlw	0
 29940  0181AA  204A               	addwfc	_gCursor+3,w,c
 29941  0181AC  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 29942  0181AE  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 29943  0181B0  D00A               	goto	l1005
 29944  0181B2  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 29945  0181B4  E104               	bnz	u11060
 29946  0181B6  0E80               	movlw	128
 29947  0181B8  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 29948  0181BA  A0D8               	btfss	status,0,c
 29949  0181BC  D004               	goto	l1005
 29950  0181BE                     u11060:
 29951                           
 29952                           ; BSR set to: 0
 29953                           ;Console.c: 252: {
 29954                           ;Console.c: 253: Console_FormFeed();
 29955  0181BE  EC07  F0BE         	call	_Console_FormFeed	;wreg free
 29956                           
 29957                           ;Console.c: 254: return 1;
 29958  0181C2  0E01               	movlw	1
 29959  0181C4  0012               	return	
 29960  0181C6                     l1005:
 29961                           
 29962                           ;Console.c: 255: }
 29963                           ;Console.c: 257: return 0;
 29964  0181C6  0E00               	movlw	0
 29965  0181C8  0012               	return	
 29966  0181CA                     __end_of_Console_IncrementCursor:
 29967                           	opt stack 0
 29968                           tosu	equ	0xFFF
 29969                           tosh	equ	0xFFE
 29970                           tosl	equ	0xFFD
 29971                           pclath	equ	0xFFA
 29972                           tblptru	equ	0xFF8
 29973                           tblptrh	equ	0xFF7
 29974                           tblptrl	equ	0xFF6
 29975                           tablat	equ	0xFF5
 29976                           prodh	equ	0xFF4
 29977                           prodl	equ	0xFF3
 29978                           intcon	equ	0xFF2
 29979                           indf0	equ	0xFEF
 29980                           postinc0	equ	0xFEE
 29981                           fsr0h	equ	0xFEA
 29982                           fsr0l	equ	0xFE9
 29983                           wreg	equ	0xFE8
 29984                           indf1	equ	0xFE7
 29985                           postdec1	equ	0xFE5
 29986                           fsr1h	equ	0xFE2
 29987                           fsr1l	equ	0xFE1
 29988                           indf2	equ	0xFDF
 29989                           postinc2	equ	0xFDE
 29990                           postdec2	equ	0xFDD
 29991                           plusw2	equ	0xFDB
 29992                           fsr2h	equ	0xFDA
 29993                           fsr2l	equ	0xFD9
 29994                           status	equ	0xFD8
 29995                           
 29996 ;; *************** function _Console_NewLine *****************
 29997 ;; Defined at:
 29998 ;;		line 175 in file "Library/Console.c"
 29999 ;; Parameters:    Size  Location     Type
 30000 ;;		None
 30001 ;; Auto vars:     Size  Location     Type
 30002 ;;		None
 30003 ;; Return value:  Size  Location     Type
 30004 ;;                  1    wreg      void 
 30005 ;; Registers used:
 30006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 30007 ;; Tracked objects:
 30008 ;;		On entry : 0/0
 30009 ;;		On exit  : 0/0
 30010 ;;		Unchanged: 0/0
 30011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30014 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30015 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30016 ;;Total ram usage:        2 bytes
 30017 ;; Hardware stack levels used:    1
 30018 ;; Hardware stack levels required when called:    7
 30019 ;; This function calls:
 30020 ;;		Nothing
 30021 ;; This function is called by:
 30022 ;;		_Console_IncrementCursor
 30023 ;;		_Console_PrintChar
 30024 ;; This function uses a non-reentrant model
 30025 ;;
 30026                           
 30027                           	psect	text126
 30028  0178CE                     __ptext126:
 30029                           	opt stack 0
 30030  0178CE                     _Console_NewLine:
 30031                           	opt stack 18
 30032                           
 30033                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
 30034                           
 30035                           ;incstack = 0
 30036  0178CE  D02D               	goto	l983
 30037  0178D0                     
 30038                           ;Console.c: 179: {
 30039                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
 30040  0178D0  0100               	movlb	0	; () banked
 30041  0178D2  51FF               	movf	_lBufferY& (0+255),w,b
 30042  0178D4  0D14               	mullw	20
 30043  0178D6  0EF2               	movlw	low _lBuffer
 30044  0178D8  6F60               	movwf	??_Console_NewLine& (0+255),b
 30045  0178DA  0E03               	movlw	high _lBuffer
 30046  0178DC  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 30047  0178DE  50F3               	movf	prodl,w,c
 30048  0178E0  2760               	addwf	??_Console_NewLine& (0+255),f,b
 30049  0178E2  50F4               	movf	prodh,w,c
 30050  0178E4  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 30051  0178E6  5045               	movf	_lBufferX,w,c
 30052  0178E8  0D01               	mullw	1
 30053  0178EA  50F3               	movf	prodl,w,c
 30054  0178EC  2560               	addwf	??_Console_NewLine& (0+255),w,b
 30055  0178EE  6ED9               	movwf	fsr2l,c
 30056  0178F0  50F4               	movf	prodh,w,c
 30057  0178F2  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 30058  0178F4  6EDA               	movwf	fsr2h,c
 30059  0178F6  50DF               	movf	indf2,w,c
 30060  0178F8  B4D8               	btfsc	status,2,c
 30061  0178FA  D016               	goto	l985
 30062                           
 30063                           ; BSR set to: 0
 30064                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
 30065  0178FC  0E01               	movlw	1
 30066  0178FE  6E4E               	movwf	_change,c
 30067                           
 30068                           ; BSR set to: 0
 30069  017900  51FF               	movf	_lBufferY& (0+255),w,b
 30070  017902  0D14               	mullw	20
 30071  017904  0EF2               	movlw	low _lBuffer
 30072  017906  6F60               	movwf	??_Console_NewLine& (0+255),b
 30073  017908  0E03               	movlw	high _lBuffer
 30074  01790A  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 30075  01790C  50F3               	movf	prodl,w,c
 30076  01790E  2760               	addwf	??_Console_NewLine& (0+255),f,b
 30077  017910  50F4               	movf	prodh,w,c
 30078  017912  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 30079  017914  5045               	movf	_lBufferX,w,c
 30080  017916  0D01               	mullw	1
 30081  017918  50F3               	movf	prodl,w,c
 30082  01791A  2560               	addwf	??_Console_NewLine& (0+255),w,b
 30083  01791C  6ED9               	movwf	fsr2l,c
 30084  01791E  50F4               	movf	prodh,w,c
 30085  017920  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 30086  017922  6EDA               	movwf	fsr2h,c
 30087  017924  0E80               	movlw	128
 30088  017926  6EDF               	movwf	indf2,c
 30089  017928                     l985:
 30090                           
 30091                           ; BSR set to: 0
 30092                           ;Console.c: 182: lBufferX ++;
 30093                           
 30094                           ; BSR set to: 0
 30095  017928  2A45               	incf	_lBufferX,f,c
 30096  01792A                     l983:
 30097                           
 30098                           ; BSR set to: 0
 30099  01792A  0E13               	movlw	19
 30100  01792C  6445               	cpfsgt	_lBufferX,c
 30101  01792E  D7D0               	goto	l984
 30102                           
 30103                           ;Console.c: 183: }
 30104                           ;Console.c: 185: lBufferX = 0;
 30105  017930  0E00               	movlw	0
 30106  017932  6E45               	movwf	_lBufferX,c
 30107                           
 30108                           ;Console.c: 186: lBufferY ++;
 30109  017934  0100               	movlb	0	; () banked
 30110  017936  2BFF               	incf	_lBufferY& (0+255),f,b
 30111                           
 30112                           ; BSR set to: 0
 30113                           ;Console.c: 188: gCursor.y += 8;
 30114  017938  0E08               	movlw	8
 30115  01793A  2649               	addwf	_gCursor+2,f,c
 30116  01793C  0E00               	movlw	0
 30117  01793E  224A               	addwfc	_gCursor+3,f,c
 30118                           
 30119                           ; BSR set to: 0
 30120                           ;Console.c: 189: gCursor.x = 6;
 30121  017940  0E00               	movlw	0
 30122  017942  6E48               	movwf	_gCursor+1,c
 30123  017944  0E06               	movlw	6
 30124  017946  6E47               	movwf	_gCursor,c
 30125                           
 30126                           ; BSR set to: 0
 30127  017948  0012               	return		;funcret
 30128  01794A                     __end_of_Console_NewLine:
 30129                           	opt stack 0
 30130                           tosu	equ	0xFFF
 30131                           tosh	equ	0xFFE
 30132                           tosl	equ	0xFFD
 30133                           pclath	equ	0xFFA
 30134                           tblptru	equ	0xFF8
 30135                           tblptrh	equ	0xFF7
 30136                           tblptrl	equ	0xFF6
 30137                           tablat	equ	0xFF5
 30138                           prodh	equ	0xFF4
 30139                           prodl	equ	0xFF3
 30140                           intcon	equ	0xFF2
 30141                           indf0	equ	0xFEF
 30142                           postinc0	equ	0xFEE
 30143                           fsr0h	equ	0xFEA
 30144                           fsr0l	equ	0xFE9
 30145                           wreg	equ	0xFE8
 30146                           indf1	equ	0xFE7
 30147                           postdec1	equ	0xFE5
 30148                           fsr1h	equ	0xFE2
 30149                           fsr1l	equ	0xFE1
 30150                           indf2	equ	0xFDF
 30151                           postinc2	equ	0xFDE
 30152                           postdec2	equ	0xFDD
 30153                           plusw2	equ	0xFDB
 30154                           fsr2h	equ	0xFDA
 30155                           fsr2l	equ	0xFD9
 30156                           status	equ	0xFD8
 30157                           
 30158 ;; *************** function _Console_FormFeed *****************
 30159 ;; Defined at:
 30160 ;;		line 192 in file "Library/Console.c"
 30161 ;; Parameters:    Size  Location     Type
 30162 ;;		None
 30163 ;; Auto vars:     Size  Location     Type
 30164 ;;  y               1    3[BANK0 ] unsigned char 
 30165 ;;  x               1    2[BANK0 ] unsigned char 
 30166 ;; Return value:  Size  Location     Type
 30167 ;;                  1    wreg      void 
 30168 ;; Registers used:
 30169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 30170 ;; Tracked objects:
 30171 ;;		On entry : 0/0
 30172 ;;		On exit  : 0/0
 30173 ;;		Unchanged: 0/0
 30174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30176 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30177 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30178 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30179 ;;Total ram usage:        4 bytes
 30180 ;; Hardware stack levels used:    1
 30181 ;; Hardware stack levels required when called:    7
 30182 ;; This function calls:
 30183 ;;		Nothing
 30184 ;; This function is called by:
 30185 ;;		_Console_IncrementCursor
 30186 ;;		_Console_PrintChar
 30187 ;; This function uses a non-reentrant model
 30188 ;;
 30189                           
 30190                           	psect	text127
 30191  017C0E                     __ptext127:
 30192                           	opt stack 0
 30193  017C0E                     _Console_FormFeed:
 30194                           	opt stack 18
 30195                           
 30196                           ;Console.c: 195: lBufferX = 0;
 30197                           
 30198                           ; BSR set to: 0
 30199                           ;incstack = 0
 30200  017C0E  0E00               	movlw	0
 30201  017C10  6E45               	movwf	_lBufferX,c
 30202                           
 30203                           ;Console.c: 196: lBufferY = 0;
 30204  017C12  0E00               	movlw	0
 30205  017C14  0100               	movlb	0	; () banked
 30206  017C16  6FFF               	movwf	_lBufferY& (0+255),b
 30207                           
 30208                           ;Console.c: 197: UINT8 x, y;
 30209                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
 30210  017C18  0E00               	movlw	0
 30211  017C1A  6F63               	movwf	Console_FormFeed@y& (0+255),b
 30212  017C1C                     l13833:
 30213                           
 30214                           ; BSR set to: 0
 30215  017C1C  0E0E               	movlw	14
 30216  017C1E  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
 30217  017C20  D001               	goto	l990
 30218  017C22  D020               	goto	u10980
 30219  017C24                     l990:
 30220                           
 30221                           ; BSR set to: 0
 30222                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
 30223                           
 30224                           ; BSR set to: 0
 30225  017C24  0E00               	movlw	0
 30226  017C26  6F62               	movwf	Console_FormFeed@x& (0+255),b
 30227  017C28                     l13839:
 30228                           
 30229                           ; BSR set to: 0
 30230  017C28  0E13               	movlw	19
 30231  017C2A  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
 30232  017C2C  D001               	goto	l992
 30233  017C2E  D018               	goto	u10970
 30234  017C30                     l992:
 30235                           
 30236                           ; BSR set to: 0
 30237                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
 30238                           
 30239                           ; BSR set to: 0
 30240  017C30  0E01               	movlw	1
 30241  017C32  6E4E               	movwf	_change,c
 30242                           
 30243                           ; BSR set to: 0
 30244  017C34  5163               	movf	Console_FormFeed@y& (0+255),w,b
 30245  017C36  0D14               	mullw	20
 30246  017C38  0EF2               	movlw	low _lBuffer
 30247  017C3A  6F60               	movwf	??_Console_FormFeed& (0+255),b
 30248  017C3C  0E03               	movlw	high _lBuffer
 30249  017C3E  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
 30250  017C40  50F3               	movf	prodl,w,c
 30251  017C42  2760               	addwf	??_Console_FormFeed& (0+255),f,b
 30252  017C44  50F4               	movf	prodh,w,c
 30253  017C46  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
 30254  017C48  5162               	movf	Console_FormFeed@x& (0+255),w,b
 30255  017C4A  0D01               	mullw	1
 30256  017C4C  50F3               	movf	prodl,w,c
 30257  017C4E  2560               	addwf	??_Console_FormFeed& (0+255),w,b
 30258  017C50  6ED9               	movwf	fsr2l,c
 30259  017C52  50F4               	movf	prodh,w,c
 30260  017C54  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
 30261  017C56  6EDA               	movwf	fsr2h,c
 30262  017C58  0E80               	movlw	128
 30263  017C5A  6EDF               	movwf	indf2,c
 30264                           
 30265                           ; BSR set to: 0
 30266  017C5C  2B62               	incf	Console_FormFeed@x& (0+255),f,b
 30267  017C5E  D7E4               	goto	l13839
 30268  017C60                     u10970:
 30269                           
 30270                           ; BSR set to: 0
 30271                           
 30272                           ; BSR set to: 0
 30273  017C60  2B63               	incf	Console_FormFeed@y& (0+255),f,b
 30274  017C62  D7DC               	goto	l13833
 30275  017C64                     u10980:
 30276                           
 30277                           ; BSR set to: 0
 30278                           ;Console.c: 204: clearall = 1;
 30279                           
 30280                           ; BSR set to: 0
 30281  017C64  0E01               	movlw	1
 30282  017C66  6E46               	movwf	_clearall,c
 30283                           
 30284                           ;Console.c: 205: gCursor.x = 6;
 30285  017C68  0E00               	movlw	0
 30286  017C6A  6E48               	movwf	_gCursor+1,c
 30287  017C6C  0E06               	movlw	6
 30288  017C6E  6E47               	movwf	_gCursor,c
 30289                           
 30290                           ;Console.c: 206: gCursor.y = 6;
 30291  017C70  0E00               	movlw	0
 30292  017C72  6E4A               	movwf	_gCursor+3,c
 30293  017C74  0E06               	movlw	6
 30294  017C76  6E49               	movwf	_gCursor+2,c
 30295                           
 30296                           ; BSR set to: 0
 30297  017C78  0012               	return		;funcret
 30298  017C7A                     __end_of_Console_FormFeed:
 30299                           	opt stack 0
 30300                           tosu	equ	0xFFF
 30301                           tosh	equ	0xFFE
 30302                           tosl	equ	0xFFD
 30303                           pclath	equ	0xFFA
 30304                           tblptru	equ	0xFF8
 30305                           tblptrh	equ	0xFF7
 30306                           tblptrl	equ	0xFF6
 30307                           tablat	equ	0xFF5
 30308                           prodh	equ	0xFF4
 30309                           prodl	equ	0xFF3
 30310                           intcon	equ	0xFF2
 30311                           indf0	equ	0xFEF
 30312                           postinc0	equ	0xFEE
 30313                           fsr0h	equ	0xFEA
 30314                           fsr0l	equ	0xFE9
 30315                           wreg	equ	0xFE8
 30316                           indf1	equ	0xFE7
 30317                           postdec1	equ	0xFE5
 30318                           fsr1h	equ	0xFE2
 30319                           fsr1l	equ	0xFE1
 30320                           indf2	equ	0xFDF
 30321                           postinc2	equ	0xFDE
 30322                           postdec2	equ	0xFDD
 30323                           plusw2	equ	0xFDB
 30324                           fsr2h	equ	0xFDA
 30325                           fsr2l	equ	0xFD9
 30326                           status	equ	0xFD8
 30327                           
 30328 ;; *************** function _Console_ResetCursor *****************
 30329 ;; Defined at:
 30330 ;;		line 297 in file "Library/Console.c"
 30331 ;; Parameters:    Size  Location     Type
 30332 ;;		None
 30333 ;; Auto vars:     Size  Location     Type
 30334 ;;		None
 30335 ;; Return value:  Size  Location     Type
 30336 ;;                  1    wreg      void 
 30337 ;; Registers used:
 30338 ;;		wreg, status,2
 30339 ;; Tracked objects:
 30340 ;;		On entry : 0/0
 30341 ;;		On exit  : 0/0
 30342 ;;		Unchanged: 0/0
 30343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30348 ;;Total ram usage:        0 bytes
 30349 ;; Hardware stack levels used:    1
 30350 ;; Hardware stack levels required when called:    7
 30351 ;; This function calls:
 30352 ;;		Nothing
 30353 ;; This function is called by:
 30354 ;;		_Console_PrintChar
 30355 ;; This function uses a non-reentrant model
 30356 ;;
 30357                           
 30358                           	psect	text128
 30359  018D62                     __ptext128:
 30360                           	opt stack 0
 30361  018D62                     _Console_ResetCursor:
 30362                           	opt stack 20
 30363                           
 30364                           ;Console.c: 299: gCursor.x = 6;
 30365                           
 30366                           ; BSR set to: 0
 30367                           ;incstack = 0
 30368  018D62  0E00               	movlw	0
 30369  018D64  6E48               	movwf	_gCursor+1,c
 30370  018D66  0E06               	movlw	6
 30371  018D68  6E47               	movwf	_gCursor,c
 30372                           
 30373                           ;Console.c: 300: gCursor.y = 6;
 30374  018D6A  0E00               	movlw	0
 30375  018D6C  6E4A               	movwf	_gCursor+3,c
 30376  018D6E  0E06               	movlw	6
 30377  018D70  6E49               	movwf	_gCursor+2,c
 30378                           
 30379                           ;Console.c: 303: lBufferX = 0;
 30380  018D72  0E00               	movlw	0
 30381  018D74  6E45               	movwf	_lBufferX,c
 30382                           
 30383                           ;Console.c: 304: lBufferY = 0;
 30384  018D76  0E00               	movlw	0
 30385  018D78  0100               	movlb	0	; () banked
 30386  018D7A  6FFF               	movwf	_lBufferY& (0+255),b
 30387                           
 30388                           ; BSR set to: 0
 30389  018D7C  0012               	return		;funcret
 30390  018D7E                     __end_of_Console_ResetCursor:
 30391                           	opt stack 0
 30392                           tosu	equ	0xFFF
 30393                           tosh	equ	0xFFE
 30394                           tosl	equ	0xFFD
 30395                           pclath	equ	0xFFA
 30396                           tblptru	equ	0xFF8
 30397                           tblptrh	equ	0xFF7
 30398                           tblptrl	equ	0xFF6
 30399                           tablat	equ	0xFF5
 30400                           prodh	equ	0xFF4
 30401                           prodl	equ	0xFF3
 30402                           intcon	equ	0xFF2
 30403                           indf0	equ	0xFEF
 30404                           postinc0	equ	0xFEE
 30405                           fsr0h	equ	0xFEA
 30406                           fsr0l	equ	0xFE9
 30407                           wreg	equ	0xFE8
 30408                           indf1	equ	0xFE7
 30409                           postdec1	equ	0xFE5
 30410                           fsr1h	equ	0xFE2
 30411                           fsr1l	equ	0xFE1
 30412                           indf2	equ	0xFDF
 30413                           postinc2	equ	0xFDE
 30414                           postdec2	equ	0xFDD
 30415                           plusw2	equ	0xFDB
 30416                           fsr2h	equ	0xFDA
 30417                           fsr2l	equ	0xFD9
 30418                           status	equ	0xFD8
 30419                           
 30420 ;; *************** function _Console_Backspace *****************
 30421 ;; Defined at:
 30422 ;;		line 209 in file "Library/Console.c"
 30423 ;; Parameters:    Size  Location     Type
 30424 ;;		None
 30425 ;; Auto vars:     Size  Location     Type
 30426 ;;		None
 30427 ;; Return value:  Size  Location     Type
 30428 ;;                  1    wreg      void 
 30429 ;; Registers used:
 30430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 30431 ;; Tracked objects:
 30432 ;;		On entry : 0/0
 30433 ;;		On exit  : 0/0
 30434 ;;		Unchanged: 0/0
 30435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30440 ;;Total ram usage:        0 bytes
 30441 ;; Hardware stack levels used:    1
 30442 ;; Hardware stack levels required when called:    8
 30443 ;; This function calls:
 30444 ;;		_Console_ClearCursor
 30445 ;; This function is called by:
 30446 ;;		_Console_PrintChar
 30447 ;; This function uses a non-reentrant model
 30448 ;;
 30449                           
 30450                           	psect	text129
 30451  018364                     __ptext129:
 30452                           	opt stack 0
 30453  018364                     _Console_Backspace:
 30454                           	opt stack 19
 30455                           
 30456                           ;Console.c: 211: if (lBufferX > 0)
 30457                           
 30458                           ; BSR set to: 0
 30459                           ;incstack = 0
 30460  018364  5045               	movf	_lBufferX,w,c
 30461  018366  B4D8               	btfsc	status,2,c
 30462  018368  D006               	goto	l997
 30463                           
 30464                           ;Console.c: 212: {
 30465                           ;Console.c: 213: gCursor.x -= 6;
 30466  01836A  0EFA               	movlw	250
 30467  01836C  2647               	addwf	_gCursor,f,c
 30468  01836E  0EFF               	movlw	255
 30469  018370  2248               	addwfc	_gCursor+1,f,c
 30470                           
 30471                           ;Console.c: 216: lBufferX --;
 30472  018372  0645               	decf	_lBufferX,f,c
 30473                           
 30474                           ;Console.c: 218: }
 30475  018374  D01C               	goto	l1000
 30476  018376                     l997:
 30477                           
 30478                           ;Console.c: 219: else if (lBufferY > 0)
 30479  018376  0100               	movlb	0	; () banked
 30480  018378  51FF               	movf	_lBufferY& (0+255),w,b
 30481  01837A  B4D8               	btfsc	status,2,c
 30482  01837C  D00C               	goto	l999
 30483                           
 30484                           ; BSR set to: 0
 30485                           ;Console.c: 220: {
 30486                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
 30487  01837E  0E00               	movlw	0
 30488  018380  6E48               	movwf	_gCursor+1,c
 30489  018382  0E72               	movlw	114
 30490  018384  6E47               	movwf	_gCursor,c
 30491                           
 30492                           ; BSR set to: 0
 30493                           ;Console.c: 222: gCursor.y -= 8;
 30494  018386  0EF8               	movlw	248
 30495  018388  2649               	addwf	_gCursor+2,f,c
 30496  01838A  0EFF               	movlw	255
 30497  01838C  224A               	addwfc	_gCursor+3,f,c
 30498                           
 30499                           ; BSR set to: 0
 30500                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
 30501  01838E  0E13               	movlw	19
 30502  018390  6E45               	movwf	_lBufferX,c
 30503                           
 30504                           ; BSR set to: 0
 30505                           ;Console.c: 226: lBufferY --;
 30506  018392  07FF               	decf	_lBufferY& (0+255),f,b
 30507                           
 30508                           ;Console.c: 228: }
 30509  018394  D00C               	goto	l1000
 30510  018396                     l999:
 30511                           
 30512                           ; BSR set to: 0
 30513                           ;Console.c: 229: else
 30514                           ;Console.c: 230: {
 30515                           ;Console.c: 231: gCursor.x = 6;
 30516                           
 30517                           ; BSR set to: 0
 30518  018396  0E00               	movlw	0
 30519  018398  6E48               	movwf	_gCursor+1,c
 30520  01839A  0E06               	movlw	6
 30521  01839C  6E47               	movwf	_gCursor,c
 30522                           
 30523                           ;Console.c: 232: gCursor.y = 6;
 30524  01839E  0E00               	movlw	0
 30525  0183A0  6E4A               	movwf	_gCursor+3,c
 30526  0183A2  0E06               	movlw	6
 30527  0183A4  6E49               	movwf	_gCursor+2,c
 30528                           
 30529                           ;Console.c: 235: lBufferX = 0;
 30530  0183A6  0E00               	movlw	0
 30531  0183A8  6E45               	movwf	_lBufferX,c
 30532                           
 30533                           ;Console.c: 236: lBufferY = 0;
 30534  0183AA  0E00               	movlw	0
 30535  0183AC  6FFF               	movwf	_lBufferY& (0+255),b
 30536  0183AE                     l1000:
 30537                           
 30538                           ;Console.c: 238: }
 30539                           ;Console.c: 240: Console_ClearCursor();
 30540                           
 30541                           ; BSR set to: 0
 30542                           
 30543                           ; BSR set to: 0
 30544  0183AE  EC73  F0C5         	call	_Console_ClearCursor	;wreg free
 30545  0183B2  0012               	return		;funcret
 30546  0183B4                     __end_of_Console_Backspace:
 30547                           	opt stack 0
 30548                           tosu	equ	0xFFF
 30549                           tosh	equ	0xFFE
 30550                           tosl	equ	0xFFD
 30551                           pclath	equ	0xFFA
 30552                           tblptru	equ	0xFF8
 30553                           tblptrh	equ	0xFF7
 30554                           tblptrl	equ	0xFF6
 30555                           tablat	equ	0xFF5
 30556                           prodh	equ	0xFF4
 30557                           prodl	equ	0xFF3
 30558                           intcon	equ	0xFF2
 30559                           indf0	equ	0xFEF
 30560                           postinc0	equ	0xFEE
 30561                           fsr0h	equ	0xFEA
 30562                           fsr0l	equ	0xFE9
 30563                           wreg	equ	0xFE8
 30564                           indf1	equ	0xFE7
 30565                           postdec1	equ	0xFE5
 30566                           fsr1h	equ	0xFE2
 30567                           fsr1l	equ	0xFE1
 30568                           indf2	equ	0xFDF
 30569                           postinc2	equ	0xFDE
 30570                           postdec2	equ	0xFDD
 30571                           plusw2	equ	0xFDB
 30572                           fsr2h	equ	0xFDA
 30573                           fsr2l	equ	0xFD9
 30574                           status	equ	0xFD8
 30575                           
 30576 ;; *************** function _Console_ClearCursor *****************
 30577 ;; Defined at:
 30578 ;;		line 308 in file "Library/Console.c"
 30579 ;; Parameters:    Size  Location     Type
 30580 ;;		None
 30581 ;; Auto vars:     Size  Location     Type
 30582 ;;		None
 30583 ;; Return value:  Size  Location     Type
 30584 ;;                  1    wreg      void 
 30585 ;; Registers used:
 30586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 30587 ;; Tracked objects:
 30588 ;;		On entry : 0/0
 30589 ;;		On exit  : 0/0
 30590 ;;		Unchanged: 0/0
 30591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30594 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30595 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30596 ;;Total ram usage:        2 bytes
 30597 ;; Hardware stack levels used:    1
 30598 ;; Hardware stack levels required when called:    7
 30599 ;; This function calls:
 30600 ;;		Nothing
 30601 ;; This function is called by:
 30602 ;;		_Console_Backspace
 30603 ;;		_Console_Tab
 30604 ;; This function uses a non-reentrant model
 30605 ;;
 30606                           
 30607                           	psect	text130
 30608  018AE6                     __ptext130:
 30609                           	opt stack 0
 30610  018AE6                     _Console_ClearCursor:
 30611                           	opt stack 19
 30612                           
 30613                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
 30614                           
 30615                           ;incstack = 0
 30616  018AE6  0E01               	movlw	1
 30617  018AE8  6E4E               	movwf	_change,c
 30618  018AEA  0100               	movlb	0	; () banked
 30619  018AEC  51FF               	movf	_lBufferY& (0+255),w,b
 30620  018AEE  0D14               	mullw	20
 30621  018AF0  0EF2               	movlw	low _lBuffer
 30622  018AF2  6F60               	movwf	??_Console_ClearCursor& (0+255),b
 30623  018AF4  0E03               	movlw	high _lBuffer
 30624  018AF6  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
 30625  018AF8  50F3               	movf	prodl,w,c
 30626  018AFA  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
 30627  018AFC  50F4               	movf	prodh,w,c
 30628  018AFE  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
 30629  018B00  5045               	movf	_lBufferX,w,c
 30630  018B02  0D01               	mullw	1
 30631  018B04  50F3               	movf	prodl,w,c
 30632  018B06  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
 30633  018B08  6ED9               	movwf	fsr2l,c
 30634  018B0A  50F4               	movf	prodh,w,c
 30635  018B0C  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
 30636  018B0E  6EDA               	movwf	fsr2h,c
 30637  018B10  0E80               	movlw	128
 30638  018B12  6EDF               	movwf	indf2,c
 30639                           
 30640                           ; BSR set to: 0
 30641  018B14  0012               	return		;funcret
 30642  018B16                     __end_of_Console_ClearCursor:
 30643                           	opt stack 0
 30644                           tosu	equ	0xFFF
 30645                           tosh	equ	0xFFE
 30646                           tosl	equ	0xFFD
 30647                           pclath	equ	0xFFA
 30648                           tblptru	equ	0xFF8
 30649                           tblptrh	equ	0xFF7
 30650                           tblptrl	equ	0xFF6
 30651                           tablat	equ	0xFF5
 30652                           prodh	equ	0xFF4
 30653                           prodl	equ	0xFF3
 30654                           intcon	equ	0xFF2
 30655                           indf0	equ	0xFEF
 30656                           postinc0	equ	0xFEE
 30657                           fsr0h	equ	0xFEA
 30658                           fsr0l	equ	0xFE9
 30659                           wreg	equ	0xFE8
 30660                           indf1	equ	0xFE7
 30661                           postdec1	equ	0xFE5
 30662                           fsr1h	equ	0xFE2
 30663                           fsr1l	equ	0xFE1
 30664                           indf2	equ	0xFDF
 30665                           postinc2	equ	0xFDE
 30666                           postdec2	equ	0xFDD
 30667                           plusw2	equ	0xFDB
 30668                           fsr2h	equ	0xFDA
 30669                           fsr2l	equ	0xFD9
 30670                           status	equ	0xFD8
 30671                           
 30672 ;; *************** function ___lwmod *****************
 30673 ;; Defined at:
 30674 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 30675 ;; Parameters:    Size  Location     Type
 30676 ;;  dividend        2    7[BANK0 ] unsigned int 
 30677 ;;  divisor         2    9[BANK0 ] unsigned int 
 30678 ;; Auto vars:     Size  Location     Type
 30679 ;;  counter         1   11[BANK0 ] unsigned char 
 30680 ;; Return value:  Size  Location     Type
 30681 ;;                  2    7[BANK0 ] unsigned int 
 30682 ;; Registers used:
 30683 ;;		wreg, status,2, status,0
 30684 ;; Tracked objects:
 30685 ;;		On entry : 0/0
 30686 ;;		On exit  : 0/0
 30687 ;;		Unchanged: 0/0
 30688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30689 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30692 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30693 ;;Total ram usage:        5 bytes
 30694 ;; Hardware stack levels used:    1
 30695 ;; Hardware stack levels required when called:    7
 30696 ;; This function calls:
 30697 ;;		Nothing
 30698 ;; This function is called by:
 30699 ;;		_itos
 30700 ;;		_printf
 30701 ;; This function uses a non-reentrant model
 30702 ;;
 30703                           
 30704                           	psect	text131
 30705  0186DE                     __ptext131:
 30706                           	opt stack 0
 30707  0186DE                     ___lwmod:
 30708                           	opt stack 22
 30709                           
 30710                           ; BSR set to: 0
 30711                           ;incstack = 0
 30712  0186DE  0100               	movlb	0	; () banked
 30713  0186E0  5169               	movf	___lwmod@divisor& (0+255),w,b
 30714  0186E2  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 30715  0186E4  B4D8               	btfsc	status,2,c
 30716  0186E6  D018               	goto	l3035
 30717                           
 30718                           ; BSR set to: 0
 30719  0186E8  0E01               	movlw	1
 30720  0186EA  6F6B               	movwf	___lwmod@counter& (0+255),b
 30721  0186EC  D004               	goto	l3030
 30722  0186EE                     
 30723                           ; BSR set to: 0
 30724                           
 30725                           ; BSR set to: 0
 30726  0186EE  90D8               	bcf	status,0,c
 30727  0186F0  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 30728  0186F2  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 30729  0186F4  2B6B               	incf	___lwmod@counter& (0+255),f,b
 30730  0186F6                     l3030:
 30731                           
 30732                           ; BSR set to: 0
 30733                           
 30734                           ; BSR set to: 0
 30735  0186F6  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 30736  0186F8  D7FA               	goto	l3031
 30737  0186FA                     u12320:
 30738                           
 30739                           ; BSR set to: 0
 30740                           
 30741                           ; BSR set to: 0
 30742                           
 30743                           ; BSR set to: 0
 30744  0186FA  5169               	movf	___lwmod@divisor& (0+255),w,b
 30745  0186FC  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 30746  0186FE  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 30747  018700  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 30748  018702  A0D8               	btfss	status,0,c
 30749  018704  D004               	goto	l3034
 30750                           
 30751                           ; BSR set to: 0
 30752  018706  5169               	movf	___lwmod@divisor& (0+255),w,b
 30753  018708  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 30754  01870A  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 30755  01870C  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 30756  01870E                     l3034:
 30757                           
 30758                           ; BSR set to: 0
 30759                           
 30760                           ; BSR set to: 0
 30761  01870E  90D8               	bcf	status,0,c
 30762  018710  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 30763  018712  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 30764                           
 30765                           ; BSR set to: 0
 30766  018714  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 30767  018716  D7F1               	goto	u12320
 30768  018718                     l3035:
 30769                           
 30770                           ; BSR set to: 0
 30771                           
 30772                           ; BSR set to: 0
 30773  018718  C067  F067         	movff	___lwmod@dividend,?___lwmod
 30774  01871C  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 30775                           
 30776                           ; BSR set to: 0
 30777  018720  0012               	return		;funcret
 30778  018722                     __end_of___lwmod:
 30779                           	opt stack 0
 30780                           tosu	equ	0xFFF
 30781                           tosh	equ	0xFFE
 30782                           tosl	equ	0xFFD
 30783                           pclath	equ	0xFFA
 30784                           tblptru	equ	0xFF8
 30785                           tblptrh	equ	0xFF7
 30786                           tblptrl	equ	0xFF6
 30787                           tablat	equ	0xFF5
 30788                           prodh	equ	0xFF4
 30789                           prodl	equ	0xFF3
 30790                           intcon	equ	0xFF2
 30791                           indf0	equ	0xFEF
 30792                           postinc0	equ	0xFEE
 30793                           fsr0h	equ	0xFEA
 30794                           fsr0l	equ	0xFE9
 30795                           wreg	equ	0xFE8
 30796                           indf1	equ	0xFE7
 30797                           postdec1	equ	0xFE5
 30798                           fsr1h	equ	0xFE2
 30799                           fsr1l	equ	0xFE1
 30800                           indf2	equ	0xFDF
 30801                           postinc2	equ	0xFDE
 30802                           postdec2	equ	0xFDD
 30803                           plusw2	equ	0xFDB
 30804                           fsr2h	equ	0xFDA
 30805                           fsr2l	equ	0xFD9
 30806                           status	equ	0xFD8
 30807                           
 30808 ;; *************** function ___lwdiv *****************
 30809 ;; Defined at:
 30810 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 30811 ;; Parameters:    Size  Location     Type
 30812 ;;  dividend        2    0[BANK0 ] unsigned int 
 30813 ;;  divisor         2    2[BANK0 ] unsigned int 
 30814 ;; Auto vars:     Size  Location     Type
 30815 ;;  quotient        2    5[BANK0 ] unsigned int 
 30816 ;;  counter         1    4[BANK0 ] unsigned char 
 30817 ;; Return value:  Size  Location     Type
 30818 ;;                  2    0[BANK0 ] unsigned int 
 30819 ;; Registers used:
 30820 ;;		wreg, status,2, status,0
 30821 ;; Tracked objects:
 30822 ;;		On entry : 0/0
 30823 ;;		On exit  : 0/0
 30824 ;;		Unchanged: 0/0
 30825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30826 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30827 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30829 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30830 ;;Total ram usage:        7 bytes
 30831 ;; Hardware stack levels used:    1
 30832 ;; Hardware stack levels required when called:    7
 30833 ;; This function calls:
 30834 ;;		Nothing
 30835 ;; This function is called by:
 30836 ;;		_itos
 30837 ;;		_printf
 30838 ;; This function uses a non-reentrant model
 30839 ;;
 30840                           
 30841                           	psect	text132
 30842  0181CA                     __ptext132:
 30843                           	opt stack 0
 30844  0181CA                     ___lwdiv:
 30845                           	opt stack 22
 30846                           
 30847                           ; BSR set to: 0
 30848                           ;incstack = 0
 30849  0181CA  0E00               	movlw	0
 30850  0181CC  0100               	movlb	0	; () banked
 30851  0181CE  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 30852  0181D0  0E00               	movlw	0
 30853  0181D2  6F65               	movwf	___lwdiv@quotient& (0+255),b
 30854                           
 30855                           ; BSR set to: 0
 30856  0181D4  5162               	movf	___lwdiv@divisor& (0+255),w,b
 30857  0181D6  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 30858  0181D8  B4D8               	btfsc	status,2,c
 30859  0181DA  D01C               	goto	l3025
 30860                           
 30861                           ; BSR set to: 0
 30862  0181DC  0E01               	movlw	1
 30863  0181DE  6F64               	movwf	___lwdiv@counter& (0+255),b
 30864  0181E0  D004               	goto	l3020
 30865  0181E2                     
 30866                           ; BSR set to: 0
 30867                           
 30868                           ; BSR set to: 0
 30869  0181E2  90D8               	bcf	status,0,c
 30870  0181E4  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 30871  0181E6  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 30872  0181E8  2B64               	incf	___lwdiv@counter& (0+255),f,b
 30873  0181EA                     l3020:
 30874                           
 30875                           ; BSR set to: 0
 30876                           
 30877                           ; BSR set to: 0
 30878  0181EA  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 30879  0181EC  D7FA               	goto	l3021
 30880  0181EE                     u12290:
 30881                           
 30882                           ; BSR set to: 0
 30883                           
 30884                           ; BSR set to: 0
 30885                           
 30886                           ; BSR set to: 0
 30887  0181EE  90D8               	bcf	status,0,c
 30888  0181F0  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 30889  0181F2  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 30890                           
 30891                           ; BSR set to: 0
 30892  0181F4  5162               	movf	___lwdiv@divisor& (0+255),w,b
 30893  0181F6  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 30894  0181F8  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 30895  0181FA  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 30896  0181FC  A0D8               	btfss	status,0,c
 30897  0181FE  D005               	goto	l3024
 30898                           
 30899                           ; BSR set to: 0
 30900  018200  5162               	movf	___lwdiv@divisor& (0+255),w,b
 30901  018202  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 30902  018204  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 30903  018206  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 30904                           
 30905                           ; BSR set to: 0
 30906  018208  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 30907  01820A                     l3024:
 30908                           
 30909                           ; BSR set to: 0
 30910                           
 30911                           ; BSR set to: 0
 30912  01820A  90D8               	bcf	status,0,c
 30913  01820C  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 30914  01820E  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 30915                           
 30916                           ; BSR set to: 0
 30917  018210  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 30918  018212  D7ED               	goto	u12290
 30919  018214                     l3025:
 30920                           
 30921                           ; BSR set to: 0
 30922                           
 30923                           ; BSR set to: 0
 30924  018214  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 30925  018218  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 30926                           
 30927                           ; BSR set to: 0
 30928  01821C  0012               	return		;funcret
 30929  01821E                     __end_of___lwdiv:
 30930                           	opt stack 0
 30931                           tosu	equ	0xFFF
 30932                           tosh	equ	0xFFE
 30933                           tosl	equ	0xFFD
 30934                           pclath	equ	0xFFA
 30935                           tblptru	equ	0xFF8
 30936                           tblptrh	equ	0xFF7
 30937                           tblptrl	equ	0xFF6
 30938                           tablat	equ	0xFF5
 30939                           prodh	equ	0xFF4
 30940                           prodl	equ	0xFF3
 30941                           intcon	equ	0xFF2
 30942                           indf0	equ	0xFEF
 30943                           postinc0	equ	0xFEE
 30944                           fsr0h	equ	0xFEA
 30945                           fsr0l	equ	0xFE9
 30946                           wreg	equ	0xFE8
 30947                           indf1	equ	0xFE7
 30948                           postdec1	equ	0xFE5
 30949                           fsr1h	equ	0xFE2
 30950                           fsr1l	equ	0xFE1
 30951                           indf2	equ	0xFDF
 30952                           postinc2	equ	0xFDE
 30953                           postdec2	equ	0xFDD
 30954                           plusw2	equ	0xFDB
 30955                           fsr2h	equ	0xFDA
 30956                           fsr2l	equ	0xFD9
 30957                           status	equ	0xFD8
 30958                           
 30959 ;; *************** function ___xxtofl *****************
 30960 ;; Defined at:
 30961 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\xxtofl.c"
 30962 ;; Parameters:    Size  Location     Type
 30963 ;;  sign            1    wreg     unsigned char 
 30964 ;;  val             4    0[BANK0 ] long 
 30965 ;; Auto vars:     Size  Location     Type
 30966 ;;  sign            1    8[BANK0 ] unsigned char 
 30967 ;;  arg             4   10[BANK0 ] unsigned long 
 30968 ;;  exp             1    9[BANK0 ] unsigned char 
 30969 ;; Return value:  Size  Location     Type
 30970 ;;                  4    0[BANK0 ] unsigned char 
 30971 ;; Registers used:
 30972 ;;		wreg, status,2, status,0
 30973 ;; Tracked objects:
 30974 ;;		On entry : 0/0
 30975 ;;		On exit  : 0/0
 30976 ;;		Unchanged: 0/0
 30977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30978 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30979 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30980 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30981 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30982 ;;Total ram usage:       14 bytes
 30983 ;; Hardware stack levels used:    1
 30984 ;; Hardware stack levels required when called:    7
 30985 ;; This function calls:
 30986 ;;		Nothing
 30987 ;; This function is called by:
 30988 ;;		_ADCAverage
 30989 ;;		_Move_ADC_To
 30990 ;;		_pow
 30991 ;;		_exp
 30992 ;;		_floor
 30993 ;;		_log
 30994 ;;		_ADC_Voltage
 30995 ;; This function uses a non-reentrant model
 30996 ;;
 30997                           
 30998                           	psect	text133
 30999  015BE6                     __ptext133:
 31000                           	opt stack 0
 31001  015BE6                     ___xxtofl:
 31002                           	opt stack 19
 31003                           
 31004                           ; BSR set to: 0
 31005                           ;incstack = 0
 31006                           ;___xxtofl@sign stored from wreg
 31007  015BE6  0100               	movlb	0	; () banked
 31008  015BE8  6F68               	movwf	___xxtofl@sign& (0+255),b
 31009  015BEA  0100               	movlb	0	; () banked
 31010  015BEC  5168               	movf	___xxtofl@sign& (0+255),w,b
 31011  015BEE  A4D8               	btfss	status,2,c
 31012                           
 31013                           ; BSR set to: 0
 31014  015BF0  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 31015  015BF2  D01A               	goto	l3179
 31016                           
 31017                           ; BSR set to: 0
 31018  015BF4  C060  F064         	movff	___xxtofl@val,??___xxtofl
 31019  015BF8  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 31020  015BFC  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 31021  015C00  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 31022  015C04  1F64               	comf	??___xxtofl& (0+255),f,b
 31023  015C06  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 31024  015C08  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 31025  015C0A  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 31026  015C0C  2B64               	incf	??___xxtofl& (0+255),f,b
 31027  015C0E  0E00               	movlw	0
 31028  015C10  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 31029  015C12  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 31030  015C14  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 31031  015C16  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 31032  015C1A  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 31033  015C1E  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 31034  015C22  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 31035  015C26  D008               	goto	l3180
 31036  015C28                     l3179:
 31037                           
 31038                           ; BSR set to: 0
 31039  015C28  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 31040  015C2C  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 31041  015C30  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 31042  015C34  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 31043  015C38                     l3180:
 31044                           
 31045                           ; BSR set to: 0
 31046                           
 31047                           ; BSR set to: 0
 31048  015C38  5160               	movf	___xxtofl@val& (0+255),w,b
 31049  015C3A  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 31050  015C3C  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 31051  015C3E  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 31052  015C40  A4D8               	btfss	status,2,c
 31053  015C42  D009               	goto	l3181
 31054                           
 31055                           ; BSR set to: 0
 31056  015C44  0E00               	movlw	0
 31057  015C46  6F60               	movwf	?___xxtofl& (0+255),b
 31058  015C48  0E00               	movlw	0
 31059  015C4A  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 31060  015C4C  0E00               	movlw	0
 31061  015C4E  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 31062  015C50  0E00               	movlw	0
 31063  015C52  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 31064                           
 31065                           ; BSR set to: 0
 31066  015C54  0012               	return	
 31067  015C56                     l3181:
 31068                           
 31069                           ; BSR set to: 0
 31070                           
 31071                           ; BSR set to: 0
 31072  015C56  0E96               	movlw	150
 31073  015C58  6F69               	movwf	___xxtofl@exp& (0+255),b
 31074  015C5A  D006               	goto	l3183
 31075  015C5C                     
 31076                           ; BSR set to: 0
 31077                           
 31078                           ; BSR set to: 0
 31079  015C5C  2B69               	incf	___xxtofl@exp& (0+255),f,b
 31080  015C5E  90D8               	bcf	status,0,c
 31081  015C60  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 31082  015C62  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 31083  015C64  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 31084  015C66  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 31085  015C68                     l3183:
 31086                           
 31087                           ; BSR set to: 0
 31088                           
 31089                           ; BSR set to: 0
 31090  015C68  0E00               	movlw	0
 31091  015C6A  156A               	andwf	___xxtofl@arg& (0+255),w,b
 31092  015C6C  6F64               	movwf	??___xxtofl& (0+255),b
 31093  015C6E  0E00               	movlw	0
 31094  015C70  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 31095  015C72  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 31096  015C74  0E00               	movlw	0
 31097  015C76  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 31098  015C78  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 31099  015C7A  0EFE               	movlw	254
 31100  015C7C  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 31101  015C7E  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 31102  015C80  5164               	movf	??___xxtofl& (0+255),w,b
 31103  015C82  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 31104  015C84  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 31105  015C86  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 31106  015C88  B4D8               	btfsc	status,2,c
 31107  015C8A  D00D               	goto	l3186
 31108  015C8C  D7E7               	goto	l3184
 31109  015C8E                     
 31110                           ; BSR set to: 0
 31111                           
 31112                           ; BSR set to: 0
 31113  015C8E  2B69               	incf	___xxtofl@exp& (0+255),f,b
 31114                           
 31115                           ; BSR set to: 0
 31116  015C90  0E01               	movlw	1
 31117  015C92  276A               	addwf	___xxtofl@arg& (0+255),f,b
 31118  015C94  0E00               	movlw	0
 31119  015C96  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 31120  015C98  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 31121  015C9A  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 31122                           
 31123                           ; BSR set to: 0
 31124  015C9C  90D8               	bcf	status,0,c
 31125  015C9E  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 31126  015CA0  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 31127  015CA2  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 31128  015CA4  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 31129  015CA6                     l3186:
 31130                           
 31131                           ; BSR set to: 0
 31132  015CA6  0E00               	movlw	0
 31133  015CA8  156A               	andwf	___xxtofl@arg& (0+255),w,b
 31134  015CAA  6F64               	movwf	??___xxtofl& (0+255),b
 31135  015CAC  0E00               	movlw	0
 31136  015CAE  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 31137  015CB0  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 31138  015CB2  0E00               	movlw	0
 31139  015CB4  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 31140  015CB6  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 31141  015CB8  0EFF               	movlw	255
 31142  015CBA  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 31143  015CBC  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 31144  015CBE  5164               	movf	??___xxtofl& (0+255),w,b
 31145  015CC0  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 31146  015CC2  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 31147  015CC4  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 31148  015CC6  B4D8               	btfsc	status,2,c
 31149  015CC8  D007               	goto	l3189
 31150  015CCA  D7E1               	goto	l3187
 31151  015CCC                     
 31152                           ; BSR set to: 0
 31153                           
 31154                           ; BSR set to: 0
 31155  015CCC  0769               	decf	___xxtofl@exp& (0+255),f,b
 31156  015CCE  90D8               	bcf	status,0,c
 31157  015CD0  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 31158  015CD2  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 31159  015CD4  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 31160  015CD6  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 31161  015CD8                     l3189:
 31162                           
 31163                           ; BSR set to: 0
 31164                           
 31165                           ; BSR set to: 0
 31166  015CD8  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 31167  015CDA  D003               	goto	u11920
 31168                           
 31169                           ; BSR set to: 0
 31170  015CDC  0E02               	movlw	2
 31171  015CDE  6169               	cpfslt	___xxtofl@exp& (0+255),b
 31172  015CE0  D7F5               	goto	l3190
 31173  015CE2                     u11920:
 31174                           
 31175                           ; BSR set to: 0
 31176                           
 31177                           ; BSR set to: 0
 31178  015CE2  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 31179  015CE4  D008               	goto	l3194
 31180                           
 31181                           ; BSR set to: 0
 31182  015CE6  0EFF               	movlw	255
 31183  015CE8  176A               	andwf	___xxtofl@arg& (0+255),f,b
 31184  015CEA  0EFF               	movlw	255
 31185  015CEC  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 31186  015CEE  0E7F               	movlw	127
 31187  015CF0  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 31188  015CF2  0EFF               	movlw	255
 31189  015CF4  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 31190  015CF6                     l3194:
 31191                           
 31192                           ; BSR set to: 0
 31193  015CF6  90D8               	bcf	status,0,c
 31194  015CF8  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 31195  015CFA  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 31196  015CFE  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 31197  015D00  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 31198  015D02  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 31199  015D04  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 31200  015D08  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 31201  015D0A  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 31202  015D0C  6B64               	clrf	??___xxtofl& (0+255),b
 31203  015D0E  5164               	movf	??___xxtofl& (0+255),w,b
 31204  015D10  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 31205  015D12  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 31206  015D14  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 31207  015D16  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 31208  015D18  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 31209  015D1A  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 31210  015D1C  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 31211                           
 31212                           ; BSR set to: 0
 31213  015D1E  5168               	movf	___xxtofl@sign& (0+255),w,b
 31214  015D20  A4D8               	btfss	status,2,c
 31215                           
 31216                           ; BSR set to: 0
 31217  015D22  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 31218  015D24  D001               	goto	l3195
 31219                           
 31220                           ; BSR set to: 0
 31221  015D26  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 31222  015D28                     l3195:
 31223                           
 31224                           ; BSR set to: 0
 31225                           
 31226                           ; BSR set to: 0
 31227  015D28  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 31228  015D2C  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 31229  015D30  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 31230  015D34  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 31231  015D38  0012               	return	
 31232  015D3A                     __end_of___xxtofl:
 31233                           	opt stack 0
 31234                           tosu	equ	0xFFF
 31235                           tosh	equ	0xFFE
 31236                           tosl	equ	0xFFD
 31237                           pclath	equ	0xFFA
 31238                           tblptru	equ	0xFF8
 31239                           tblptrh	equ	0xFF7
 31240                           tblptrl	equ	0xFF6
 31241                           tablat	equ	0xFF5
 31242                           prodh	equ	0xFF4
 31243                           prodl	equ	0xFF3
 31244                           intcon	equ	0xFF2
 31245                           indf0	equ	0xFEF
 31246                           postinc0	equ	0xFEE
 31247                           fsr0h	equ	0xFEA
 31248                           fsr0l	equ	0xFE9
 31249                           wreg	equ	0xFE8
 31250                           indf1	equ	0xFE7
 31251                           postdec1	equ	0xFE5
 31252                           fsr1h	equ	0xFE2
 31253                           fsr1l	equ	0xFE1
 31254                           indf2	equ	0xFDF
 31255                           postinc2	equ	0xFDE
 31256                           postdec2	equ	0xFDD
 31257                           plusw2	equ	0xFDB
 31258                           fsr2h	equ	0xFDA
 31259                           fsr2l	equ	0xFD9
 31260                           status	equ	0xFD8
 31261                           
 31262 ;; *************** function ___fltol *****************
 31263 ;; Defined at:
 31264 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fltol.c"
 31265 ;; Parameters:    Size  Location     Type
 31266 ;;  f1              4   63[BANK0 ] unsigned char 
 31267 ;; Auto vars:     Size  Location     Type
 31268 ;;  exp1            1   72[BANK0 ] unsigned char 
 31269 ;;  sign1           1   71[BANK0 ] unsigned char 
 31270 ;; Return value:  Size  Location     Type
 31271 ;;                  4   63[BANK0 ] long 
 31272 ;; Registers used:
 31273 ;;		wreg, status,2, status,0
 31274 ;; Tracked objects:
 31275 ;;		On entry : 0/0
 31276 ;;		On exit  : 0/0
 31277 ;;		Unchanged: 0/0
 31278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31279 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31280 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31281 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31282 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31283 ;;Total ram usage:       10 bytes
 31284 ;; Hardware stack levels used:    1
 31285 ;; Hardware stack levels required when called:    7
 31286 ;; This function calls:
 31287 ;;		Nothing
 31288 ;; This function is called by:
 31289 ;;		_ADCAverage
 31290 ;;		_Move_ADC_To
 31291 ;;		_pow
 31292 ;;		_exp
 31293 ;;		_floor
 31294 ;; This function uses a non-reentrant model
 31295 ;;
 31296                           
 31297                           	psect	text134
 31298  016BC8                     __ptext134:
 31299                           	opt stack 0
 31300  016BC8                     ___fltol:
 31301                           	opt stack 18
 31302                           
 31303                           ; BSR set to: 0
 31304                           ;incstack = 0
 31305  016BC8  0100               	movlb	0	; () banked
 31306  016BCA  35A1               	rlcf	(___fltol@f1+2)& (0+255),w,b
 31307  016BCC  35A2               	rlcf	(___fltol@f1+3)& (0+255),w,b
 31308  016BCE  6FA8               	movwf	___fltol@exp1& (0+255),b
 31309  016BD0  51A8               	movf	___fltol@exp1& (0+255),w,b
 31310  016BD2  A4D8               	btfss	status,2,c
 31311  016BD4  D009               	goto	l2846
 31312                           
 31313                           ; BSR set to: 0
 31314  016BD6  0E00               	movlw	0
 31315  016BD8  6F9F               	movwf	?___fltol& (0+255),b
 31316  016BDA  0E00               	movlw	0
 31317  016BDC  6FA0               	movwf	(?___fltol+1)& (0+255),b
 31318  016BDE  0E00               	movlw	0
 31319  016BE0  6FA1               	movwf	(?___fltol+2)& (0+255),b
 31320  016BE2  0E00               	movlw	0
 31321  016BE4  6FA2               	movwf	(?___fltol+3)& (0+255),b
 31322                           
 31323                           ; BSR set to: 0
 31324  016BE6  0012               	return	
 31325  016BE8                     l2846:
 31326                           
 31327                           ; BSR set to: 0
 31328                           
 31329                           ; BSR set to: 0
 31330  016BE8  C09F  F0A3         	movff	___fltol@f1,??___fltol
 31331  016BEC  C0A0  F0A4         	movff	___fltol@f1+1,??___fltol+1
 31332  016BF0  C0A1  F0A5         	movff	___fltol@f1+2,??___fltol+2
 31333  016BF4  C0A2  F0A6         	movff	___fltol@f1+3,??___fltol+3
 31334  016BF8  0E20               	movlw	32
 31335  016BFA  D005               	goto	u11800
 31336  016BFC                     u11805:
 31337  016BFC  90D8               	bcf	status,0,c
 31338  016BFE  33A6               	rrcf	(??___fltol+3)& (0+255),f,b
 31339  016C00  33A5               	rrcf	(??___fltol+2)& (0+255),f,b
 31340  016C02  33A4               	rrcf	(??___fltol+1)& (0+255),f,b
 31341  016C04  33A3               	rrcf	??___fltol& (0+255),f,b
 31342  016C06                     u11800:
 31343  016C06  2EE8               	decfsz	wreg,f,c
 31344  016C08  D7F9               	goto	u11805
 31345  016C0A  51A3               	movf	??___fltol& (0+255),w,b
 31346  016C0C  6FA7               	movwf	___fltol@sign1& (0+255),b
 31347                           
 31348                           ; BSR set to: 0
 31349  016C0E  8FA1               	bsf	(___fltol@f1+2)& (0+255),7,b
 31350                           
 31351                           ; BSR set to: 0
 31352  016C10  0EFF               	movlw	255
 31353  016C12  179F               	andwf	___fltol@f1& (0+255),f,b
 31354  016C14  0EFF               	movlw	255
 31355  016C16  17A0               	andwf	(___fltol@f1+1)& (0+255),f,b
 31356  016C18  0EFF               	movlw	255
 31357  016C1A  17A1               	andwf	(___fltol@f1+2)& (0+255),f,b
 31358  016C1C  0E00               	movlw	0
 31359  016C1E  17A2               	andwf	(___fltol@f1+3)& (0+255),f,b
 31360                           
 31361                           ; BSR set to: 0
 31362  016C20  0E96               	movlw	150
 31363  016C22  5FA8               	subwf	___fltol@exp1& (0+255),f,b
 31364                           
 31365                           ; BSR set to: 0
 31366  016C24  AFA8               	btfss	___fltol@exp1& (0+255),7,b
 31367  016C26  D016               	goto	l2848
 31368                           
 31369                           ; BSR set to: 0
 31370  016C28  51A8               	movf	___fltol@exp1& (0+255),w,b
 31371  016C2A  0A80               	xorlw	128
 31372  016C2C  0F97               	addlw	151
 31373  016C2E  B0D8               	btfsc	status,0,c
 31374  016C30  D009               	goto	l2849
 31375                           
 31376                           ; BSR set to: 0
 31377  016C32  0E00               	movlw	0
 31378  016C34  6F9F               	movwf	?___fltol& (0+255),b
 31379  016C36  0E00               	movlw	0
 31380  016C38  6FA0               	movwf	(?___fltol+1)& (0+255),b
 31381  016C3A  0E00               	movlw	0
 31382  016C3C  6FA1               	movwf	(?___fltol+2)& (0+255),b
 31383  016C3E  0E00               	movlw	0
 31384  016C40  6FA2               	movwf	(?___fltol+3)& (0+255),b
 31385                           
 31386                           ; BSR set to: 0
 31387  016C42  0012               	return	
 31388  016C44                     l2849:
 31389                           
 31390                           ; BSR set to: 0
 31391                           
 31392                           ; BSR set to: 0
 31393                           
 31394                           ; BSR set to: 0
 31395  016C44  90D8               	bcf	status,0,c
 31396  016C46  33A2               	rrcf	(___fltol@f1+3)& (0+255),f,b
 31397  016C48  33A1               	rrcf	(___fltol@f1+2)& (0+255),f,b
 31398  016C4A  33A0               	rrcf	(___fltol@f1+1)& (0+255),f,b
 31399  016C4C  339F               	rrcf	___fltol@f1& (0+255),f,b
 31400                           
 31401                           ; BSR set to: 0
 31402  016C4E  3FA8               	incfsz	___fltol@exp1& (0+255),f,b
 31403  016C50  D7F9               	goto	l2849
 31404                           
 31405                           ; BSR set to: 0
 31406  016C52  D015               	goto	u11840
 31407  016C54                     l2848:
 31408                           
 31409                           ; BSR set to: 0
 31410                           
 31411                           ; BSR set to: 0
 31412  016C54  0E1F               	movlw	31
 31413  016C56  65A8               	cpfsgt	___fltol@exp1& (0+255),b
 31414  016C58  D00F               	goto	l2854
 31415                           
 31416                           ; BSR set to: 0
 31417  016C5A  0E00               	movlw	0
 31418  016C5C  6F9F               	movwf	?___fltol& (0+255),b
 31419  016C5E  0E00               	movlw	0
 31420  016C60  6FA0               	movwf	(?___fltol+1)& (0+255),b
 31421  016C62  0E00               	movlw	0
 31422  016C64  6FA1               	movwf	(?___fltol+2)& (0+255),b
 31423  016C66  0E00               	movlw	0
 31424  016C68  6FA2               	movwf	(?___fltol+3)& (0+255),b
 31425                           
 31426                           ; BSR set to: 0
 31427  016C6A  0012               	return	
 31428  016C6C                     
 31429                           ; BSR set to: 0
 31430                           
 31431                           ; BSR set to: 0
 31432  016C6C  90D8               	bcf	status,0,c
 31433  016C6E  379F               	rlcf	___fltol@f1& (0+255),f,b
 31434  016C70  37A0               	rlcf	(___fltol@f1+1)& (0+255),f,b
 31435  016C72  37A1               	rlcf	(___fltol@f1+2)& (0+255),f,b
 31436  016C74  37A2               	rlcf	(___fltol@f1+3)& (0+255),f,b
 31437  016C76  07A8               	decf	___fltol@exp1& (0+255),f,b
 31438  016C78                     l2854:
 31439                           
 31440                           ; BSR set to: 0
 31441                           
 31442                           ; BSR set to: 0
 31443  016C78  51A8               	movf	___fltol@exp1& (0+255),w,b
 31444  016C7A  A4D8               	btfss	status,2,c
 31445  016C7C  D7F7               	goto	l2855
 31446  016C7E                     u11840:
 31447                           
 31448                           ; BSR set to: 0
 31449                           
 31450                           ; BSR set to: 0
 31451                           
 31452                           ; BSR set to: 0
 31453  016C7E  51A7               	movf	___fltol@sign1& (0+255),w,b
 31454  016C80  B4D8               	btfsc	status,2,c
 31455  016C82  D008               	goto	l2857
 31456                           
 31457                           ; BSR set to: 0
 31458  016C84  1FA2               	comf	(___fltol@f1+3)& (0+255),f,b
 31459  016C86  1FA1               	comf	(___fltol@f1+2)& (0+255),f,b
 31460  016C88  1FA0               	comf	(___fltol@f1+1)& (0+255),f,b
 31461  016C8A  6D9F               	negf	___fltol@f1& (0+255),b
 31462  016C8C  0E00               	movlw	0
 31463  016C8E  23A0               	addwfc	(___fltol@f1+1)& (0+255),f,b
 31464  016C90  23A1               	addwfc	(___fltol@f1+2)& (0+255),f,b
 31465  016C92  23A2               	addwfc	(___fltol@f1+3)& (0+255),f,b
 31466  016C94                     l2857:
 31467                           
 31468                           ; BSR set to: 0
 31469                           
 31470                           ; BSR set to: 0
 31471  016C94  C09F  F09F         	movff	___fltol@f1,?___fltol
 31472  016C98  C0A0  F0A0         	movff	___fltol@f1+1,?___fltol+1
 31473  016C9C  C0A1  F0A1         	movff	___fltol@f1+2,?___fltol+2
 31474  016CA0  C0A2  F0A2         	movff	___fltol@f1+3,?___fltol+3
 31475  016CA4  0012               	return	
 31476  016CA6                     __end_of___fltol:
 31477                           	opt stack 0
 31478                           tosu	equ	0xFFF
 31479                           tosh	equ	0xFFE
 31480                           tosl	equ	0xFFD
 31481                           pclath	equ	0xFFA
 31482                           tblptru	equ	0xFF8
 31483                           tblptrh	equ	0xFF7
 31484                           tblptrl	equ	0xFF6
 31485                           tablat	equ	0xFF5
 31486                           prodh	equ	0xFF4
 31487                           prodl	equ	0xFF3
 31488                           intcon	equ	0xFF2
 31489                           indf0	equ	0xFEF
 31490                           postinc0	equ	0xFEE
 31491                           fsr0h	equ	0xFEA
 31492                           fsr0l	equ	0xFE9
 31493                           wreg	equ	0xFE8
 31494                           indf1	equ	0xFE7
 31495                           postdec1	equ	0xFE5
 31496                           fsr1h	equ	0xFE2
 31497                           fsr1l	equ	0xFE1
 31498                           indf2	equ	0xFDF
 31499                           postinc2	equ	0xFDE
 31500                           postdec2	equ	0xFDD
 31501                           plusw2	equ	0xFDB
 31502                           fsr2h	equ	0xFDA
 31503                           fsr2l	equ	0xFD9
 31504                           status	equ	0xFD8
 31505                           
 31506 ;; *************** function ___flmul *****************
 31507 ;; Defined at:
 31508 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcmul.c"
 31509 ;; Parameters:    Size  Location     Type
 31510 ;;  b               4   14[BANK0 ] long 
 31511 ;;  a               4   18[BANK0 ] long 
 31512 ;; Auto vars:     Size  Location     Type
 31513 ;;  prod            4   33[BANK0 ] struct .
 31514 ;;  grs             4   28[BANK0 ] unsigned long 
 31515 ;;  temp            2   37[BANK0 ] struct .
 31516 ;;  bexp            1   32[BANK0 ] unsigned char 
 31517 ;;  aexp            1   27[BANK0 ] unsigned char 
 31518 ;;  sign            1   26[BANK0 ] unsigned char 
 31519 ;; Return value:  Size  Location     Type
 31520 ;;                  4   14[BANK0 ] unsigned char 
 31521 ;; Registers used:
 31522 ;;		wreg, status,2, status,0, prodl, prodh
 31523 ;; Tracked objects:
 31524 ;;		On entry : 0/0
 31525 ;;		On exit  : 0/0
 31526 ;;		Unchanged: 0/0
 31527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31528 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31529 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31530 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31531 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31532 ;;Total ram usage:       25 bytes
 31533 ;; Hardware stack levels used:    1
 31534 ;; Hardware stack levels required when called:    7
 31535 ;; This function calls:
 31536 ;;		Nothing
 31537 ;; This function is called by:
 31538 ;;		_ADCAverage
 31539 ;;		_Move_ADC_To
 31540 ;;		_pow
 31541 ;;		_exp
 31542 ;;		_log
 31543 ;;		_eval_poly
 31544 ;;		_ADC_Voltage
 31545 ;; This function uses a non-reentrant model
 31546 ;;
 31547                           
 31548                           	psect	text135
 31549  013588                     __ptext135:
 31550                           	opt stack 0
 31551  013588                     ___flmul:
 31552                           	opt stack 18
 31553                           
 31554                           ; BSR set to: 0
 31555                           ;incstack = 0
 31556  013588  0100               	movlb	0	; () banked
 31557  01358A  5171               	movf	(___flmul@b+3)& (0+255),w,b
 31558  01358C  0B80               	andlw	128
 31559  01358E  6F7A               	movwf	___flmul@sign& (0+255),b
 31560  013590  5171               	movf	(___flmul@b+3)& (0+255),w,b
 31561  013592  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 31562  013594  6F80               	movwf	___flmul@bexp& (0+255),b
 31563                           
 31564                           ; BSR set to: 0
 31565  013596  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 31566                           
 31567                           ; BSR set to: 0
 31568  013598  8180               	bsf	___flmul@bexp& (0+255),0,b
 31569                           
 31570                           ; BSR set to: 0
 31571                           
 31572                           ; BSR set to: 0
 31573  01359A  5180               	movf	___flmul@bexp& (0+255),w,b
 31574  01359C  B4D8               	btfsc	status,2,c
 31575  01359E  D00D               	goto	l3151
 31576                           
 31577                           ; BSR set to: 0
 31578  0135A0  2980               	incf	___flmul@bexp& (0+255),w,b
 31579  0135A2  A4D8               	btfss	status,2,c
 31580  0135A4  D008               	goto	l3152
 31581                           
 31582                           ; BSR set to: 0
 31583  0135A6  0E00               	movlw	0
 31584  0135A8  6F6E               	movwf	___flmul@b& (0+255),b
 31585  0135AA  0E00               	movlw	0
 31586  0135AC  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 31587  0135AE  0E00               	movlw	0
 31588  0135B0  6F70               	movwf	(___flmul@b+2)& (0+255),b
 31589  0135B2  0E00               	movlw	0
 31590  0135B4  6F71               	movwf	(___flmul@b+3)& (0+255),b
 31591  0135B6                     l3152:
 31592                           
 31593                           ; BSR set to: 0
 31594                           
 31595                           ; BSR set to: 0
 31596  0135B6  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 31597  0135B8  D008               	goto	l3153
 31598  0135BA                     l3151:
 31599                           
 31600                           ; BSR set to: 0
 31601                           
 31602                           ; BSR set to: 0
 31603  0135BA  0E00               	movlw	0
 31604  0135BC  6F6E               	movwf	___flmul@b& (0+255),b
 31605  0135BE  0E00               	movlw	0
 31606  0135C0  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 31607  0135C2  0E00               	movlw	0
 31608  0135C4  6F70               	movwf	(___flmul@b+2)& (0+255),b
 31609  0135C6  0E00               	movlw	0
 31610  0135C8  6F71               	movwf	(___flmul@b+3)& (0+255),b
 31611  0135CA                     l3153:
 31612                           
 31613                           ; BSR set to: 0
 31614                           
 31615                           ; BSR set to: 0
 31616  0135CA  5175               	movf	(___flmul@a+3)& (0+255),w,b
 31617  0135CC  0B80               	andlw	128
 31618  0135CE  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 31619                           
 31620                           ; BSR set to: 0
 31621  0135D0  5175               	movf	(___flmul@a+3)& (0+255),w,b
 31622  0135D2  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 31623  0135D4  6F7B               	movwf	___flmul@aexp& (0+255),b
 31624                           
 31625                           ; BSR set to: 0
 31626  0135D6  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 31627                           
 31628                           ; BSR set to: 0
 31629  0135D8  817B               	bsf	___flmul@aexp& (0+255),0,b
 31630                           
 31631                           ; BSR set to: 0
 31632                           
 31633                           ; BSR set to: 0
 31634  0135DA  517B               	movf	___flmul@aexp& (0+255),w,b
 31635  0135DC  B4D8               	btfsc	status,2,c
 31636  0135DE  D00D               	goto	l3155
 31637                           
 31638                           ; BSR set to: 0
 31639  0135E0  297B               	incf	___flmul@aexp& (0+255),w,b
 31640  0135E2  A4D8               	btfss	status,2,c
 31641  0135E4  D008               	goto	l3156
 31642                           
 31643                           ; BSR set to: 0
 31644  0135E6  0E00               	movlw	0
 31645  0135E8  6F72               	movwf	___flmul@a& (0+255),b
 31646  0135EA  0E00               	movlw	0
 31647  0135EC  6F73               	movwf	(___flmul@a+1)& (0+255),b
 31648  0135EE  0E00               	movlw	0
 31649  0135F0  6F74               	movwf	(___flmul@a+2)& (0+255),b
 31650  0135F2  0E00               	movlw	0
 31651  0135F4  6F75               	movwf	(___flmul@a+3)& (0+255),b
 31652  0135F6                     l3156:
 31653                           
 31654                           ; BSR set to: 0
 31655                           
 31656                           ; BSR set to: 0
 31657  0135F6  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 31658  0135F8  D008               	goto	l3157
 31659  0135FA                     l3155:
 31660                           
 31661                           ; BSR set to: 0
 31662                           
 31663                           ; BSR set to: 0
 31664  0135FA  0E00               	movlw	0
 31665  0135FC  6F72               	movwf	___flmul@a& (0+255),b
 31666  0135FE  0E00               	movlw	0
 31667  013600  6F73               	movwf	(___flmul@a+1)& (0+255),b
 31668  013602  0E00               	movlw	0
 31669  013604  6F74               	movwf	(___flmul@a+2)& (0+255),b
 31670  013606  0E00               	movlw	0
 31671  013608  6F75               	movwf	(___flmul@a+3)& (0+255),b
 31672  01360A                     l3157:
 31673                           
 31674                           ; BSR set to: 0
 31675  01360A  517B               	movf	___flmul@aexp& (0+255),w,b
 31676  01360C  B4D8               	btfsc	status,2,c
 31677  01360E  D003               	goto	u11620
 31678                           
 31679                           ; BSR set to: 0
 31680  013610  5180               	movf	___flmul@bexp& (0+255),w,b
 31681  013612  A4D8               	btfss	status,2,c
 31682  013614  D009               	goto	l3158
 31683  013616                     u11620:
 31684                           
 31685                           ; BSR set to: 0
 31686                           
 31687                           ; BSR set to: 0
 31688  013616  0E00               	movlw	0
 31689  013618  6F6E               	movwf	?___flmul& (0+255),b
 31690  01361A  0E00               	movlw	0
 31691  01361C  6F6F               	movwf	(?___flmul+1)& (0+255),b
 31692  01361E  0E00               	movlw	0
 31693  013620  6F70               	movwf	(?___flmul+2)& (0+255),b
 31694  013622  0E00               	movlw	0
 31695  013624  6F71               	movwf	(?___flmul+3)& (0+255),b
 31696                           
 31697                           ; BSR set to: 0
 31698  013626  0012               	return	
 31699  013628                     l3158:
 31700                           
 31701                           ; BSR set to: 0
 31702                           
 31703                           ; BSR set to: 0
 31704  013628  5174               	movf	(___flmul@a+2)& (0+255),w,b
 31705  01362A  036E               	mulwf	___flmul@b& (0+255),b
 31706  01362C  CFF3 F085          	movff	prodl,___flmul@temp
 31707  013630  CFF4 F086          	movff	prodh,___flmul@temp+1
 31708                           
 31709                           ; BSR set to: 0
 31710  013634  5185               	movf	___flmul@temp& (0+255),w,b
 31711  013636  6F7C               	movwf	___flmul@grs& (0+255),b
 31712  013638  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 31713  01363A  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 31714  01363C  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 31715                           
 31716                           ; BSR set to: 0
 31717  01363E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31718  013640  6F81               	movwf	___flmul@prod& (0+255),b
 31719  013642  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 31720  013644  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 31721  013646  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 31722  013648  5173               	movf	(___flmul@a+1)& (0+255),w,b
 31723  01364A  036F               	mulwf	(___flmul@b+1)& (0+255),b
 31724  01364C  CFF3 F085          	movff	prodl,___flmul@temp
 31725  013650  CFF4 F086          	movff	prodh,___flmul@temp+1
 31726                           
 31727                           ; BSR set to: 0
 31728  013654  5185               	movf	___flmul@temp& (0+255),w,b
 31729  013656  277C               	addwf	___flmul@grs& (0+255),f,b
 31730  013658  0E00               	movlw	0
 31731  01365A  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 31732  01365C  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 31733  01365E  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 31734                           
 31735                           ; BSR set to: 0
 31736  013660  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31737  013662  2781               	addwf	___flmul@prod& (0+255),f,b
 31738  013664  0E00               	movlw	0
 31739  013666  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 31740  013668  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 31741  01366A  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 31742  01366C  5172               	movf	___flmul@a& (0+255),w,b
 31743  01366E  0370               	mulwf	(___flmul@b+2)& (0+255),b
 31744  013670  CFF3 F085          	movff	prodl,___flmul@temp
 31745  013674  CFF4 F086          	movff	prodh,___flmul@temp+1
 31746                           
 31747                           ; BSR set to: 0
 31748  013678  5185               	movf	___flmul@temp& (0+255),w,b
 31749  01367A  277C               	addwf	___flmul@grs& (0+255),f,b
 31750  01367C  0E00               	movlw	0
 31751  01367E  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 31752  013680  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 31753  013682  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 31754                           
 31755                           ; BSR set to: 0
 31756  013684  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31757  013686  2781               	addwf	___flmul@prod& (0+255),f,b
 31758  013688  0E00               	movlw	0
 31759  01368A  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 31760  01368C  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 31761  01368E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 31762                           
 31763                           ; BSR set to: 0
 31764  013690  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 31765  013694  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 31766  013698  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 31767  01369C  6B7C               	clrf	___flmul@grs& (0+255),b
 31768                           
 31769                           ; BSR set to: 0
 31770  01369E  5172               	movf	___flmul@a& (0+255),w,b
 31771  0136A0  036F               	mulwf	(___flmul@b+1)& (0+255),b
 31772  0136A2  CFF3 F085          	movff	prodl,___flmul@temp
 31773  0136A6  CFF4 F086          	movff	prodh,___flmul@temp+1
 31774                           
 31775                           ; BSR set to: 0
 31776  0136AA  5185               	movf	___flmul@temp& (0+255),w,b
 31777  0136AC  277C               	addwf	___flmul@grs& (0+255),f,b
 31778  0136AE  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31779  0136B0  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 31780  0136B2  0E00               	movlw	0
 31781  0136B4  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 31782  0136B6  0E00               	movlw	0
 31783  0136B8  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 31784                           
 31785                           ; BSR set to: 0
 31786  0136BA  5173               	movf	(___flmul@a+1)& (0+255),w,b
 31787  0136BC  036E               	mulwf	___flmul@b& (0+255),b
 31788  0136BE  CFF3 F085          	movff	prodl,___flmul@temp
 31789  0136C2  CFF4 F086          	movff	prodh,___flmul@temp+1
 31790                           
 31791                           ; BSR set to: 0
 31792  0136C6  5185               	movf	___flmul@temp& (0+255),w,b
 31793  0136C8  277C               	addwf	___flmul@grs& (0+255),f,b
 31794  0136CA  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31795  0136CC  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 31796  0136CE  0E00               	movlw	0
 31797  0136D0  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 31798  0136D2  0E00               	movlw	0
 31799  0136D4  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 31800                           
 31801                           ; BSR set to: 0
 31802  0136D6  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 31803  0136DA  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 31804  0136DE  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 31805  0136E2  6B7C               	clrf	___flmul@grs& (0+255),b
 31806  0136E4  5172               	movf	___flmul@a& (0+255),w,b
 31807  0136E6  036E               	mulwf	___flmul@b& (0+255),b
 31808  0136E8  CFF3 F085          	movff	prodl,___flmul@temp
 31809  0136EC  CFF4 F086          	movff	prodh,___flmul@temp+1
 31810                           
 31811                           ; BSR set to: 0
 31812  0136F0  5185               	movf	___flmul@temp& (0+255),w,b
 31813  0136F2  277C               	addwf	___flmul@grs& (0+255),f,b
 31814  0136F4  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31815  0136F6  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 31816  0136F8  0E00               	movlw	0
 31817  0136FA  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 31818  0136FC  0E00               	movlw	0
 31819  0136FE  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 31820                           
 31821                           ; BSR set to: 0
 31822  013700  5174               	movf	(___flmul@a+2)& (0+255),w,b
 31823  013702  036F               	mulwf	(___flmul@b+1)& (0+255),b
 31824  013704  CFF3 F085          	movff	prodl,___flmul@temp
 31825  013708  CFF4 F086          	movff	prodh,___flmul@temp+1
 31826  01370C  5185               	movf	___flmul@temp& (0+255),w,b
 31827  01370E  2781               	addwf	___flmul@prod& (0+255),f,b
 31828  013710  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31829  013712  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 31830  013714  0E00               	movlw	0
 31831  013716  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 31832  013718  0E00               	movlw	0
 31833  01371A  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 31834                           
 31835                           ; BSR set to: 0
 31836  01371C  5173               	movf	(___flmul@a+1)& (0+255),w,b
 31837  01371E  0370               	mulwf	(___flmul@b+2)& (0+255),b
 31838  013720  CFF3 F085          	movff	prodl,___flmul@temp
 31839  013724  CFF4 F086          	movff	prodh,___flmul@temp+1
 31840                           
 31841                           ; BSR set to: 0
 31842  013728  5185               	movf	___flmul@temp& (0+255),w,b
 31843  01372A  2781               	addwf	___flmul@prod& (0+255),f,b
 31844  01372C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31845  01372E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 31846  013730  0E00               	movlw	0
 31847  013732  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 31848  013734  0E00               	movlw	0
 31849  013736  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 31850  013738  5174               	movf	(___flmul@a+2)& (0+255),w,b
 31851  01373A  0370               	mulwf	(___flmul@b+2)& (0+255),b
 31852  01373C  CFF3 F085          	movff	prodl,___flmul@temp
 31853  013740  CFF4 F086          	movff	prodh,___flmul@temp+1
 31854                           
 31855                           ; BSR set to: 0
 31856  013744  5185               	movf	___flmul@temp& (0+255),w,b
 31857  013746  6F76               	movwf	??___flmul& (0+255),b
 31858  013748  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31859  01374A  6F77               	movwf	(??___flmul+1)& (0+255),b
 31860  01374C  6B78               	clrf	(??___flmul+2)& (0+255),b
 31861  01374E  6B79               	clrf	(??___flmul+3)& (0+255),b
 31862  013750  C078  F079         	movff	??___flmul+2,??___flmul+3
 31863  013754  C077  F078         	movff	??___flmul+1,??___flmul+2
 31864  013758  C076  F077         	movff	??___flmul,??___flmul+1
 31865  01375C  6B76               	clrf	??___flmul& (0+255),b
 31866  01375E  5176               	movf	??___flmul& (0+255),w,b
 31867  013760  2781               	addwf	___flmul@prod& (0+255),f,b
 31868  013762  5177               	movf	(??___flmul+1)& (0+255),w,b
 31869  013764  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 31870  013766  5178               	movf	(??___flmul+2)& (0+255),w,b
 31871  013768  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 31872  01376A  5179               	movf	(??___flmul+3)& (0+255),w,b
 31873  01376C  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 31874                           
 31875                           ; BSR set to: 0
 31876  01376E  C07C  F076         	movff	___flmul@grs,??___flmul
 31877  013772  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 31878  013776  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 31879  01377A  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 31880  01377E  0E19               	movlw	25
 31881  013780  D005               	goto	u11630
 31882  013782                     u11635:
 31883  013782  90D8               	bcf	status,0,c
 31884  013784  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 31885  013786  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 31886  013788  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 31887  01378A  3376               	rrcf	??___flmul& (0+255),f,b
 31888  01378C                     u11630:
 31889  01378C  2EE8               	decfsz	wreg,f,c
 31890  01378E  D7F9               	goto	u11635
 31891  013790  5176               	movf	??___flmul& (0+255),w,b
 31892  013792  2781               	addwf	___flmul@prod& (0+255),f,b
 31893  013794  5177               	movf	(??___flmul+1)& (0+255),w,b
 31894  013796  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 31895  013798  5178               	movf	(??___flmul+2)& (0+255),w,b
 31896  01379A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 31897  01379C  5179               	movf	(??___flmul+3)& (0+255),w,b
 31898  01379E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 31899                           
 31900                           ; BSR set to: 0
 31901  0137A0  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 31902  0137A4  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 31903  0137A8  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 31904  0137AC  6B7C               	clrf	___flmul@grs& (0+255),b
 31905                           
 31906                           ; BSR set to: 0
 31907  0137AE  517B               	movf	___flmul@aexp& (0+255),w,b
 31908  0137B0  C080  F076         	movff	___flmul@bexp,??___flmul
 31909  0137B4  6B77               	clrf	(??___flmul+1)& (0+255),b
 31910  0137B6  2776               	addwf	??___flmul& (0+255),f,b
 31911  0137B8  0E00               	movlw	0
 31912  0137BA  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 31913  0137BC  0E82               	movlw	130
 31914  0137BE  2576               	addwf	??___flmul& (0+255),w,b
 31915  0137C0  6F85               	movwf	___flmul@temp& (0+255),b
 31916  0137C2  0EFF               	movlw	255
 31917  0137C4  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 31918  0137C6  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 31919  0137C8  D00F               	goto	l3162
 31920  0137CA                     
 31921                           ; BSR set to: 0
 31922                           
 31923                           ; BSR set to: 0
 31924  0137CA  90D8               	bcf	status,0,c
 31925  0137CC  3781               	rlcf	___flmul@prod& (0+255),f,b
 31926  0137CE  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 31927  0137D0  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 31928  0137D2  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 31929                           
 31930                           ; BSR set to: 0
 31931  0137D4  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 31932                           
 31933                           ; BSR set to: 0
 31934  0137D6  8181               	bsf	___flmul@prod& (0+255),0,b
 31935                           
 31936                           ; BSR set to: 0
 31937  0137D8  90D8               	bcf	status,0,c
 31938  0137DA  377C               	rlcf	___flmul@grs& (0+255),f,b
 31939  0137DC  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 31940  0137DE  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 31941  0137E0  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 31942  0137E2  0785               	decf	___flmul@temp& (0+255),f,b
 31943  0137E4  A0D8               	btfss	status,0,c
 31944  0137E6  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 31945  0137E8                     l3162:
 31946                           
 31947                           ; BSR set to: 0
 31948                           
 31949                           ; BSR set to: 0
 31950  0137E8  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 31951  0137EA  D7EF               	goto	l3163
 31952                           
 31953                           ; BSR set to: 0
 31954                           
 31955                           ; BSR set to: 0
 31956  0137EC  0E00               	movlw	0
 31957  0137EE  6F7B               	movwf	___flmul@aexp& (0+255),b
 31958                           
 31959                           ; BSR set to: 0
 31960  0137F0  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 31961  0137F2  D016               	goto	l3169
 31962                           
 31963                           ; BSR set to: 0
 31964  0137F4  0EFF               	movlw	255
 31965  0137F6  157C               	andwf	___flmul@grs& (0+255),w,b
 31966  0137F8  6F76               	movwf	??___flmul& (0+255),b
 31967  0137FA  0EFF               	movlw	255
 31968  0137FC  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 31969  0137FE  6F77               	movwf	(??___flmul+1)& (0+255),b
 31970  013800  0EFF               	movlw	255
 31971  013802  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 31972  013804  6F78               	movwf	(??___flmul+2)& (0+255),b
 31973  013806  0E7F               	movlw	127
 31974  013808  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 31975  01380A  6F79               	movwf	(??___flmul+3)& (0+255),b
 31976  01380C  5176               	movf	??___flmul& (0+255),w,b
 31977  01380E  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 31978  013810  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 31979  013812  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 31980  013814  A4D8               	btfss	status,2,c
 31981  013816  D002               	goto	u11680
 31982                           
 31983                           ; BSR set to: 0
 31984                           
 31985                           ; BSR set to: 0
 31986  013818  A181               	btfss	___flmul@prod& (0+255),0,b
 31987  01381A  D002               	goto	l3169
 31988  01381C                     u11680:
 31989                           
 31990                           ; BSR set to: 0
 31991  01381C  0E01               	movlw	1
 31992  01381E  6F7B               	movwf	___flmul@aexp& (0+255),b
 31993  013820                     l3169:
 31994                           
 31995                           ; BSR set to: 0
 31996                           
 31997                           ; BSR set to: 0
 31998                           
 31999                           ; BSR set to: 0
 32000  013820  517B               	movf	___flmul@aexp& (0+255),w,b
 32001  013822  B4D8               	btfsc	status,2,c
 32002  013824  D01F               	goto	l3171
 32003                           
 32004                           ; BSR set to: 0
 32005  013826  0E01               	movlw	1
 32006  013828  2781               	addwf	___flmul@prod& (0+255),f,b
 32007  01382A  0E00               	movlw	0
 32008  01382C  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 32009  01382E  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 32010  013830  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 32011                           
 32012                           ; BSR set to: 0
 32013  013832  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 32014  013834  D017               	goto	l3171
 32015                           
 32016                           ; BSR set to: 0
 32017  013836  C081  F076         	movff	___flmul@prod,??___flmul
 32018  01383A  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 32019  01383E  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 32020  013842  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 32021  013846  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 32022  013848  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 32023  01384A  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 32024  01384C  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 32025  01384E  3376               	rrcf	??___flmul& (0+255),f,b
 32026  013850  C076  F081         	movff	??___flmul,___flmul@prod
 32027  013854  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 32028  013858  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 32029  01385C  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 32030                           
 32031                           ; BSR set to: 0
 32032  013860  4B85               	infsnz	___flmul@temp& (0+255),f,b
 32033  013862  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 32034  013864                     l3171:
 32035                           
 32036                           ; BSR set to: 0
 32037                           
 32038                           ; BSR set to: 0
 32039                           
 32040                           ; BSR set to: 0
 32041  013864  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 32042  013866  D00D               	goto	l3172
 32043  013868  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 32044  01386A  E103               	bnz	u11710
 32045  01386C  2985               	incf	___flmul@temp& (0+255),w,b
 32046  01386E  A0D8               	btfss	status,0,c
 32047  013870  D008               	goto	l3172
 32048  013872                     u11710:
 32049                           
 32050                           ; BSR set to: 0
 32051  013872  0E00               	movlw	0
 32052  013874  6F81               	movwf	___flmul@prod& (0+255),b
 32053  013876  0E00               	movlw	0
 32054  013878  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 32055  01387A  0E80               	movlw	128
 32056  01387C  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 32057  01387E  0E7F               	movlw	127
 32058  013880  D020               	goto	L21
 32059  013882                     l3172:
 32060                           
 32061                           ; BSR set to: 0
 32062                           
 32063                           ; BSR set to: 0
 32064  013882  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 32065  013884  D005               	goto	u11720
 32066  013886  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 32067  013888  E10E               	bnz	l3174
 32068  01388A  0585               	decf	___flmul@temp& (0+255),w,b
 32069  01388C  B0D8               	btfsc	status,0,c
 32070  01388E  D00B               	goto	l3174
 32071  013890                     u11720:
 32072                           
 32073                           ; BSR set to: 0
 32074  013890  0E00               	movlw	0
 32075  013892  6F81               	movwf	___flmul@prod& (0+255),b
 32076  013894  0E00               	movlw	0
 32077  013896  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 32078  013898  0E00               	movlw	0
 32079  01389A  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 32080  01389C  0E00               	movlw	0
 32081  01389E  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 32082  0138A0  0E00               	movlw	0
 32083  0138A2  6F7A               	movwf	___flmul@sign& (0+255),b
 32084  0138A4  D00F               	goto	l3175
 32085  0138A6                     l3174:
 32086                           
 32087                           ; BSR set to: 0
 32088  0138A6  C085  F080         	movff	___flmul@temp,___flmul@bexp
 32089                           
 32090                           ; BSR set to: 0
 32091  0138AA  0EFF               	movlw	255
 32092  0138AC  1781               	andwf	___flmul@prod& (0+255),f,b
 32093  0138AE  0EFF               	movlw	255
 32094  0138B0  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 32095  0138B2  0E7F               	movlw	127
 32096  0138B4  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 32097  0138B6  0E00               	movlw	0
 32098  0138B8  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 32099                           
 32100                           ; BSR set to: 0
 32101  0138BA  B180               	btfsc	___flmul@bexp& (0+255),0,b
 32102                           
 32103                           ; BSR set to: 0
 32104  0138BC  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 32105                           
 32106                           ; BSR set to: 0
 32107                           
 32108                           ; BSR set to: 0
 32109  0138BE  90D8               	bcf	status,0,c
 32110  0138C0  3180               	rrcf	___flmul@bexp& (0+255),w,b
 32111  0138C2                     L21:
 32112  0138C2  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 32113  0138C4                     l3175:
 32114                           
 32115                           ; BSR set to: 0
 32116                           
 32117                           ; BSR set to: 0
 32118                           
 32119                           ; BSR set to: 0
 32120  0138C4  517A               	movf	___flmul@sign& (0+255),w,b
 32121  0138C6  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 32122                           
 32123                           ; BSR set to: 0
 32124  0138C8  C081  F06E         	movff	___flmul@prod,?___flmul
 32125  0138CC  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 32126  0138D0  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 32127  0138D4  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 32128  0138D8  0012               	return	
 32129  0138DA                     __end_of___flmul:
 32130                           	opt stack 0
 32131                           tosu	equ	0xFFF
 32132                           tosh	equ	0xFFE
 32133                           tosl	equ	0xFFD
 32134                           pclath	equ	0xFFA
 32135                           tblptru	equ	0xFF8
 32136                           tblptrh	equ	0xFF7
 32137                           tblptrl	equ	0xFF6
 32138                           tablat	equ	0xFF5
 32139                           prodh	equ	0xFF4
 32140                           prodl	equ	0xFF3
 32141                           intcon	equ	0xFF2
 32142                           indf0	equ	0xFEF
 32143                           postinc0	equ	0xFEE
 32144                           fsr0h	equ	0xFEA
 32145                           fsr0l	equ	0xFE9
 32146                           wreg	equ	0xFE8
 32147                           indf1	equ	0xFE7
 32148                           postdec1	equ	0xFE5
 32149                           fsr1h	equ	0xFE2
 32150                           fsr1l	equ	0xFE1
 32151                           indf2	equ	0xFDF
 32152                           postinc2	equ	0xFDE
 32153                           postdec2	equ	0xFDD
 32154                           plusw2	equ	0xFDB
 32155                           fsr2h	equ	0xFDA
 32156                           fsr2l	equ	0xFD9
 32157                           status	equ	0xFD8
 32158                           
 32159 ;; *************** function ___fladd *****************
 32160 ;; Defined at:
 32161 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
 32162 ;; Parameters:    Size  Location     Type
 32163 ;;  b               4   43[BANK0 ] unsigned char 
 32164 ;;  a               4   47[BANK0 ] unsigned char 
 32165 ;; Auto vars:     Size  Location     Type
 32166 ;;  grs             1   62[BANK0 ] unsigned char 
 32167 ;;  bexp            1   61[BANK0 ] unsigned char 
 32168 ;;  aexp            1   60[BANK0 ] unsigned char 
 32169 ;;  signs           1   59[BANK0 ] unsigned char 
 32170 ;; Return value:  Size  Location     Type
 32171 ;;                  4   43[BANK0 ] unsigned char 
 32172 ;; Registers used:
 32173 ;;		wreg, status,2, status,0
 32174 ;; Tracked objects:
 32175 ;;		On entry : 0/0
 32176 ;;		On exit  : 0/0
 32177 ;;		Unchanged: 0/0
 32178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32179 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32180 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32181 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32182 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32183 ;;Total ram usage:       20 bytes
 32184 ;; Hardware stack levels used:    1
 32185 ;; Hardware stack levels required when called:    7
 32186 ;; This function calls:
 32187 ;;		Nothing
 32188 ;; This function is called by:
 32189 ;;		_ADCAverage
 32190 ;;		_Move_ADC_To
 32191 ;;		___flsub
 32192 ;;		_floor
 32193 ;;		_log
 32194 ;;		_eval_poly
 32195 ;; This function uses a non-reentrant model
 32196 ;;
 32197                           
 32198                           	psect	text136
 32199  0138DA                     __ptext136:
 32200                           	opt stack 0
 32201  0138DA                     ___fladd:
 32202                           	opt stack 18
 32203                           
 32204                           ; BSR set to: 0
 32205                           ;incstack = 0
 32206  0138DA  0100               	movlb	0	; () banked
 32207  0138DC  518E               	movf	(___fladd@b+3)& (0+255),w,b
 32208  0138DE  0B80               	andlw	128
 32209  0138E0  6F9B               	movwf	___fladd@signs& (0+255),b
 32210  0138E2  518E               	movf	(___fladd@b+3)& (0+255),w,b
 32211  0138E4  258E               	addwf	(___fladd@b+3)& (0+255),w,b
 32212  0138E6  6F9D               	movwf	___fladd@bexp& (0+255),b
 32213                           
 32214                           ; BSR set to: 0
 32215  0138E8  BF8D               	btfsc	(___fladd@b+2)& (0+255),7,b
 32216                           
 32217                           ; BSR set to: 0
 32218  0138EA  819D               	bsf	___fladd@bexp& (0+255),0,b
 32219                           
 32220                           ; BSR set to: 0
 32221                           
 32222                           ; BSR set to: 0
 32223  0138EC  519D               	movf	___fladd@bexp& (0+255),w,b
 32224  0138EE  B4D8               	btfsc	status,2,c
 32225  0138F0  D00D               	goto	l3060
 32226                           
 32227                           ; BSR set to: 0
 32228  0138F2  299D               	incf	___fladd@bexp& (0+255),w,b
 32229  0138F4  A4D8               	btfss	status,2,c
 32230  0138F6  D008               	goto	l3061
 32231                           
 32232                           ; BSR set to: 0
 32233  0138F8  0E00               	movlw	0
 32234  0138FA  6F8B               	movwf	___fladd@b& (0+255),b
 32235  0138FC  0E00               	movlw	0
 32236  0138FE  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 32237  013900  0E00               	movlw	0
 32238  013902  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 32239  013904  0E00               	movlw	0
 32240  013906  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 32241  013908                     l3061:
 32242                           
 32243                           ; BSR set to: 0
 32244                           
 32245                           ; BSR set to: 0
 32246  013908  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 32247  01390A  D006               	goto	L22
 32248  01390C                     l3060:
 32249                           
 32250                           ; BSR set to: 0
 32251                           
 32252                           ; BSR set to: 0
 32253  01390C  0E00               	movlw	0
 32254  01390E  6F8B               	movwf	___fladd@b& (0+255),b
 32255  013910  0E00               	movlw	0
 32256  013912  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 32257  013914  0E00               	movlw	0
 32258  013916  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 32259  013918                     L22:
 32260  013918  0E00               	movlw	0
 32261  01391A  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 32262                           
 32263                           ; BSR set to: 0
 32264                           
 32265                           ; BSR set to: 0
 32266  01391C  5192               	movf	(___fladd@a+3)& (0+255),w,b
 32267  01391E  0B80               	andlw	128
 32268  013920  6F9C               	movwf	___fladd@aexp& (0+255),b
 32269                           
 32270                           ; BSR set to: 0
 32271  013922  519B               	movf	___fladd@signs& (0+255),w,b
 32272  013924  199C               	xorwf	___fladd@aexp& (0+255),w,b
 32273  013926  A4D8               	btfss	status,2,c
 32274                           
 32275                           ; BSR set to: 0
 32276  013928  8D9B               	bsf	___fladd@signs& (0+255),6,b
 32277                           
 32278                           ; BSR set to: 0
 32279                           
 32280                           ; BSR set to: 0
 32281  01392A  5192               	movf	(___fladd@a+3)& (0+255),w,b
 32282  01392C  2592               	addwf	(___fladd@a+3)& (0+255),w,b
 32283  01392E  6F9C               	movwf	___fladd@aexp& (0+255),b
 32284                           
 32285                           ; BSR set to: 0
 32286  013930  BF91               	btfsc	(___fladd@a+2)& (0+255),7,b
 32287                           
 32288                           ; BSR set to: 0
 32289  013932  819C               	bsf	___fladd@aexp& (0+255),0,b
 32290                           
 32291                           ; BSR set to: 0
 32292                           
 32293                           ; BSR set to: 0
 32294  013934  519C               	movf	___fladd@aexp& (0+255),w,b
 32295  013936  B4D8               	btfsc	status,2,c
 32296  013938  D00D               	goto	l3065
 32297                           
 32298                           ; BSR set to: 0
 32299  01393A  299C               	incf	___fladd@aexp& (0+255),w,b
 32300  01393C  A4D8               	btfss	status,2,c
 32301  01393E  D008               	goto	l3066
 32302                           
 32303                           ; BSR set to: 0
 32304  013940  0E00               	movlw	0
 32305  013942  6F8F               	movwf	___fladd@a& (0+255),b
 32306  013944  0E00               	movlw	0
 32307  013946  6F90               	movwf	(___fladd@a+1)& (0+255),b
 32308  013948  0E00               	movlw	0
 32309  01394A  6F91               	movwf	(___fladd@a+2)& (0+255),b
 32310  01394C  0E00               	movlw	0
 32311  01394E  6F92               	movwf	(___fladd@a+3)& (0+255),b
 32312  013950                     l3066:
 32313                           
 32314                           ; BSR set to: 0
 32315                           
 32316                           ; BSR set to: 0
 32317  013950  8F91               	bsf	(___fladd@a+2)& (0+255),7,b
 32318  013952  D006               	goto	L23
 32319  013954                     l3065:
 32320                           
 32321                           ; BSR set to: 0
 32322                           
 32323                           ; BSR set to: 0
 32324  013954  0E00               	movlw	0
 32325  013956  6F8F               	movwf	___fladd@a& (0+255),b
 32326  013958  0E00               	movlw	0
 32327  01395A  6F90               	movwf	(___fladd@a+1)& (0+255),b
 32328  01395C  0E00               	movlw	0
 32329  01395E  6F91               	movwf	(___fladd@a+2)& (0+255),b
 32330  013960                     L23:
 32331  013960  0E00               	movlw	0
 32332  013962  6F92               	movwf	(___fladd@a+3)& (0+255),b
 32333                           
 32334                           ; BSR set to: 0
 32335                           
 32336                           ; BSR set to: 0
 32337  013964  519D               	movf	___fladd@bexp& (0+255),w,b
 32338  013966  5D9C               	subwf	___fladd@aexp& (0+255),w,b
 32339  013968  B0D8               	btfsc	status,0,c
 32340  01396A  D022               	goto	l3068
 32341                           
 32342                           ; BSR set to: 0
 32343  01396C  AD9B               	btfss	___fladd@signs& (0+255),6,b
 32344  01396E  D002               	goto	l3069
 32345                           
 32346                           ; BSR set to: 0
 32347  013970  0E80               	movlw	128
 32348  013972  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 32349  013974                     l3069:
 32350                           
 32351                           ; BSR set to: 0
 32352                           
 32353                           ; BSR set to: 0
 32354  013974  C09D  F09E         	movff	___fladd@bexp,___fladd@grs
 32355                           
 32356                           ; BSR set to: 0
 32357  013978  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 32358                           
 32359                           ; BSR set to: 0
 32360  01397C  C09E  F09C         	movff	___fladd@grs,___fladd@aexp
 32361                           
 32362                           ; BSR set to: 0
 32363  013980  C08B  F09E         	movff	___fladd@b,___fladd@grs
 32364                           
 32365                           ; BSR set to: 0
 32366  013984  C08F  F08B         	movff	___fladd@a,___fladd@b
 32367                           
 32368                           ; BSR set to: 0
 32369  013988  C09E  F08F         	movff	___fladd@grs,___fladd@a
 32370                           
 32371                           ; BSR set to: 0
 32372  01398C  C08C  F09E         	movff	___fladd@b+1,___fladd@grs
 32373                           
 32374                           ; BSR set to: 0
 32375  013990  C090  F08C         	movff	___fladd@a+1,___fladd@b+1
 32376                           
 32377                           ; BSR set to: 0
 32378  013994  C09E  F090         	movff	___fladd@grs,___fladd@a+1
 32379                           
 32380                           ; BSR set to: 0
 32381  013998  C08D  F09E         	movff	___fladd@b+2,___fladd@grs
 32382                           
 32383                           ; BSR set to: 0
 32384  01399C  C091  F08D         	movff	___fladd@a+2,___fladd@b+2
 32385                           
 32386                           ; BSR set to: 0
 32387  0139A0  C09E  F091         	movff	___fladd@grs,___fladd@a+2
 32388                           
 32389                           ; BSR set to: 0
 32390  0139A4  C08E  F09E         	movff	___fladd@b+3,___fladd@grs
 32391                           
 32392                           ; BSR set to: 0
 32393  0139A8  C092  F08E         	movff	___fladd@a+3,___fladd@b+3
 32394                           
 32395                           ; BSR set to: 0
 32396  0139AC  C09E  F092         	movff	___fladd@grs,___fladd@a+3
 32397  0139B0                     l3068:
 32398                           
 32399                           ; BSR set to: 0
 32400                           
 32401                           ; BSR set to: 0
 32402  0139B0  0E00               	movlw	0
 32403  0139B2  6F9E               	movwf	___fladd@grs& (0+255),b
 32404                           
 32405                           ; BSR set to: 0
 32406  0139B4  519D               	movf	___fladd@bexp& (0+255),w,b
 32407  0139B6  6F93               	movwf	??___fladd& (0+255),b
 32408  0139B8  6B94               	clrf	(??___fladd+1)& (0+255),b
 32409  0139BA  1F93               	comf	??___fladd& (0+255),f,b
 32410  0139BC  1F94               	comf	(??___fladd+1)& (0+255),f,b
 32411  0139BE  4B93               	infsnz	??___fladd& (0+255),f,b
 32412  0139C0  2B94               	incf	(??___fladd+1)& (0+255),f,b
 32413  0139C2  519C               	movf	___fladd@aexp& (0+255),w,b
 32414  0139C4  6F95               	movwf	(??___fladd+2)& (0+255),b
 32415  0139C6  6B96               	clrf	(??___fladd+3)& (0+255),b
 32416  0139C8  5193               	movf	??___fladd& (0+255),w,b
 32417  0139CA  2795               	addwf	(??___fladd+2)& (0+255),f,b
 32418  0139CC  5194               	movf	(??___fladd+1)& (0+255),w,b
 32419  0139CE  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 32420  0139D0  BF96               	btfsc	(??___fladd+3)& (0+255),7,b
 32421  0139D2  D02C               	goto	l3072
 32422  0139D4  5196               	movf	(??___fladd+3)& (0+255),w,b
 32423  0139D6  E104               	bnz	u11250
 32424  0139D8  0E1A               	movlw	26
 32425  0139DA  5D95               	subwf	(??___fladd+2)& (0+255),w,b
 32426  0139DC  A0D8               	btfss	status,0,c
 32427  0139DE  D026               	goto	l3072
 32428  0139E0                     u11250:
 32429                           
 32430                           ; BSR set to: 0
 32431  0139E0  518B               	movf	___fladd@b& (0+255),w,b
 32432  0139E2  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 32433  0139E4  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 32434  0139E6  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 32435  0139E8  B4D8               	btfsc	status,2,c
 32436  0139EA  D002               	goto	u11260
 32437  0139EC  0E01               	movlw	1
 32438  0139EE  D001               	goto	u11270
 32439  0139F0                     u11260:
 32440  0139F0  0E00               	movlw	0
 32441  0139F2                     u11270:
 32442  0139F2  6F9E               	movwf	___fladd@grs& (0+255),b
 32443                           
 32444                           ; BSR set to: 0
 32445  0139F4  0E00               	movlw	0
 32446  0139F6  6F8B               	movwf	___fladd@b& (0+255),b
 32447  0139F8  0E00               	movlw	0
 32448  0139FA  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 32449  0139FC  0E00               	movlw	0
 32450  0139FE  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 32451  013A00  0E00               	movlw	0
 32452  013A02  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 32453                           
 32454                           ; BSR set to: 0
 32455  013A04  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 32456  013A08  D015               	goto	u11300
 32457  013A0A                     l3073:
 32458                           
 32459                           ; BSR set to: 0
 32460  013A0A  A19E               	btfss	___fladd@grs& (0+255),0,b
 32461  013A0C  D005               	goto	l3074
 32462                           
 32463                           ; BSR set to: 0
 32464  013A0E  90D8               	bcf	status,0,c
 32465  013A10  319E               	rrcf	___fladd@grs& (0+255),w,b
 32466  013A12  0901               	iorlw	1
 32467  013A14  6F9E               	movwf	___fladd@grs& (0+255),b
 32468  013A16  D002               	goto	l3075
 32469  013A18                     l3074:
 32470                           
 32471                           ; BSR set to: 0
 32472                           
 32473                           ; BSR set to: 0
 32474  013A18  90D8               	bcf	status,0,c
 32475  013A1A  339E               	rrcf	___fladd@grs& (0+255),f,b
 32476  013A1C                     l3075:
 32477                           
 32478                           ; BSR set to: 0
 32479                           
 32480                           ; BSR set to: 0
 32481  013A1C  B18B               	btfsc	___fladd@b& (0+255),0,b
 32482                           
 32483                           ; BSR set to: 0
 32484  013A1E  8F9E               	bsf	___fladd@grs& (0+255),7,b
 32485                           
 32486                           ; BSR set to: 0
 32487                           
 32488                           ; BSR set to: 0
 32489  013A20  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 32490  013A22  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 32491  013A24  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 32492  013A26  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 32493  013A28  338B               	rrcf	___fladd@b& (0+255),f,b
 32494                           
 32495                           ; BSR set to: 0
 32496  013A2A  2B9D               	incf	___fladd@bexp& (0+255),f,b
 32497  013A2C                     l3072:
 32498                           
 32499                           ; BSR set to: 0
 32500  013A2C  519C               	movf	___fladd@aexp& (0+255),w,b
 32501  013A2E  5D9D               	subwf	___fladd@bexp& (0+255),w,b
 32502  013A30  A0D8               	btfss	status,0,c
 32503  013A32  D7EB               	goto	l3073
 32504  013A34                     u11300:
 32505                           
 32506                           ; BSR set to: 0
 32507                           
 32508                           ; BSR set to: 0
 32509  013A34  BD9B               	btfsc	___fladd@signs& (0+255),6,b
 32510  013A36  D029               	goto	l3078
 32511                           
 32512                           ; BSR set to: 0
 32513  013A38  519D               	movf	___fladd@bexp& (0+255),w,b
 32514  013A3A  A4D8               	btfss	status,2,c
 32515  013A3C  D009               	goto	l3079
 32516                           
 32517                           ; BSR set to: 0
 32518  013A3E  0E00               	movlw	0
 32519  013A40  6F8B               	movwf	?___fladd& (0+255),b
 32520  013A42  0E00               	movlw	0
 32521  013A44  6F8C               	movwf	(?___fladd+1)& (0+255),b
 32522  013A46  0E00               	movlw	0
 32523  013A48  6F8D               	movwf	(?___fladd+2)& (0+255),b
 32524  013A4A  0E00               	movlw	0
 32525  013A4C  6F8E               	movwf	(?___fladd+3)& (0+255),b
 32526                           
 32527                           ; BSR set to: 0
 32528  013A4E  0012               	return	
 32529  013A50                     l3079:
 32530                           
 32531                           ; BSR set to: 0
 32532                           
 32533                           ; BSR set to: 0
 32534  013A50  518F               	movf	___fladd@a& (0+255),w,b
 32535  013A52  278B               	addwf	___fladd@b& (0+255),f,b
 32536  013A54  5190               	movf	(___fladd@a+1)& (0+255),w,b
 32537  013A56  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 32538  013A58  5191               	movf	(___fladd@a+2)& (0+255),w,b
 32539  013A5A  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 32540  013A5C  5192               	movf	(___fladd@a+3)& (0+255),w,b
 32541  013A5E  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 32542                           
 32543                           ; BSR set to: 0
 32544  013A60  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 32545  013A62  D083               	goto	u11430
 32546                           
 32547                           ; BSR set to: 0
 32548  013A64  A19E               	btfss	___fladd@grs& (0+255),0,b
 32549  013A66  D006               	goto	l3082
 32550                           
 32551                           ; BSR set to: 0
 32552  013A68  90D8               	bcf	status,0,c
 32553  013A6A  339E               	rrcf	___fladd@grs& (0+255),f,b
 32554  013A6C  519E               	movf	___fladd@grs& (0+255),w,b
 32555  013A6E  0901               	iorlw	1
 32556  013A70  6F9E               	movwf	___fladd@grs& (0+255),b
 32557  013A72  D002               	goto	l3083
 32558  013A74                     l3082:
 32559                           
 32560                           ; BSR set to: 0
 32561                           
 32562                           ; BSR set to: 0
 32563  013A74  90D8               	bcf	status,0,c
 32564  013A76  339E               	rrcf	___fladd@grs& (0+255),f,b
 32565  013A78                     l3083:
 32566                           
 32567                           ; BSR set to: 0
 32568                           
 32569                           ; BSR set to: 0
 32570  013A78  B18B               	btfsc	___fladd@b& (0+255),0,b
 32571                           
 32572                           ; BSR set to: 0
 32573  013A7A  8F9E               	bsf	___fladd@grs& (0+255),7,b
 32574                           
 32575                           ; BSR set to: 0
 32576                           
 32577                           ; BSR set to: 0
 32578  013A7C  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 32579  013A7E  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 32580  013A80  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 32581  013A82  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 32582  013A84  338B               	rrcf	___fladd@b& (0+255),f,b
 32583                           
 32584                           ; BSR set to: 0
 32585  013A86  2B9D               	incf	___fladd@bexp& (0+255),f,b
 32586                           
 32587                           ; BSR set to: 0
 32588  013A88  D070               	goto	u11430
 32589  013A8A                     l3078:
 32590                           
 32591                           ; BSR set to: 0
 32592                           
 32593                           ; BSR set to: 0
 32594  013A8A  518F               	movf	___fladd@a& (0+255),w,b
 32595  013A8C  5D8B               	subwf	___fladd@b& (0+255),w,b
 32596  013A8E  5190               	movf	(___fladd@a+1)& (0+255),w,b
 32597  013A90  598C               	subwfb	(___fladd@b+1)& (0+255),w,b
 32598  013A92  5191               	movf	(___fladd@a+2)& (0+255),w,b
 32599  013A94  598D               	subwfb	(___fladd@b+2)& (0+255),w,b
 32600  013A96  518E               	movf	(___fladd@b+3)& (0+255),w,b
 32601  013A98  0A80               	xorlw	128
 32602  013A9A  6F93               	movwf	??___fladd& (0+255),b
 32603  013A9C  5192               	movf	(___fladd@a+3)& (0+255),w,b
 32604  013A9E  0A80               	xorlw	128
 32605  013AA0  5993               	subwfb	??___fladd& (0+255),w,b
 32606  013AA2  B0D8               	btfsc	status,0,c
 32607  013AA4  D036               	goto	l3086
 32608                           
 32609                           ; BSR set to: 0
 32610  013AA6  C08B  F093         	movff	___fladd@b,??___fladd
 32611  013AAA  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 32612  013AAE  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 32613  013AB2  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 32614  013AB6  1F93               	comf	??___fladd& (0+255),f,b
 32615  013AB8  1F94               	comf	(??___fladd+1)& (0+255),f,b
 32616  013ABA  1F95               	comf	(??___fladd+2)& (0+255),f,b
 32617  013ABC  1F96               	comf	(??___fladd+3)& (0+255),f,b
 32618  013ABE  2B93               	incf	??___fladd& (0+255),f,b
 32619  013AC0  0E00               	movlw	0
 32620  013AC2  2394               	addwfc	(??___fladd+1)& (0+255),f,b
 32621  013AC4  2395               	addwfc	(??___fladd+2)& (0+255),f,b
 32622  013AC6  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 32623  013AC8  518F               	movf	___fladd@a& (0+255),w,b
 32624  013ACA  2593               	addwf	??___fladd& (0+255),w,b
 32625  013ACC  6F97               	movwf	(??___fladd+4)& (0+255),b
 32626  013ACE  5190               	movf	(___fladd@a+1)& (0+255),w,b
 32627  013AD0  2194               	addwfc	(??___fladd+1)& (0+255),w,b
 32628  013AD2  6F98               	movwf	(??___fladd+5)& (0+255),b
 32629  013AD4  5191               	movf	(___fladd@a+2)& (0+255),w,b
 32630  013AD6  2195               	addwfc	(??___fladd+2)& (0+255),w,b
 32631  013AD8  6F99               	movwf	(??___fladd+6)& (0+255),b
 32632  013ADA  5192               	movf	(___fladd@a+3)& (0+255),w,b
 32633  013ADC  2196               	addwfc	(??___fladd+3)& (0+255),w,b
 32634  013ADE  6F9A               	movwf	(??___fladd+7)& (0+255),b
 32635  013AE0  0EFF               	movlw	255
 32636  013AE2  2597               	addwf	(??___fladd+4)& (0+255),w,b
 32637  013AE4  6F8B               	movwf	___fladd@b& (0+255),b
 32638  013AE6  0EFF               	movlw	255
 32639  013AE8  2198               	addwfc	(??___fladd+5)& (0+255),w,b
 32640  013AEA  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 32641  013AEC  0EFF               	movlw	255
 32642  013AEE  2199               	addwfc	(??___fladd+6)& (0+255),w,b
 32643  013AF0  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 32644  013AF2  0EFF               	movlw	255
 32645  013AF4  219A               	addwfc	(??___fladd+7)& (0+255),w,b
 32646  013AF6  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 32647  013AF8  0E80               	movlw	128
 32648  013AFA  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 32649                           
 32650                           ; BSR set to: 0
 32651  013AFC  6D9E               	negf	___fladd@grs& (0+255),b
 32652                           
 32653                           ; BSR set to: 0
 32654  013AFE  519E               	movf	___fladd@grs& (0+255),w,b
 32655  013B00  A4D8               	btfss	status,2,c
 32656  013B02  D00F               	goto	l3088
 32657                           
 32658                           ; BSR set to: 0
 32659  013B04  0E01               	movlw	1
 32660  013B06  278B               	addwf	___fladd@b& (0+255),f,b
 32661  013B08  0E00               	movlw	0
 32662  013B0A  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 32663  013B0C  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 32664  013B0E  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 32665                           
 32666                           ; BSR set to: 0
 32667  013B10  D008               	goto	l3088
 32668  013B12                     l3086:
 32669                           
 32670                           ; BSR set to: 0
 32671                           
 32672                           ; BSR set to: 0
 32673  013B12  518F               	movf	___fladd@a& (0+255),w,b
 32674  013B14  5F8B               	subwf	___fladd@b& (0+255),f,b
 32675  013B16  5190               	movf	(___fladd@a+1)& (0+255),w,b
 32676  013B18  5B8C               	subwfb	(___fladd@b+1)& (0+255),f,b
 32677  013B1A  5191               	movf	(___fladd@a+2)& (0+255),w,b
 32678  013B1C  5B8D               	subwfb	(___fladd@b+2)& (0+255),f,b
 32679  013B1E  5192               	movf	(___fladd@a+3)& (0+255),w,b
 32680  013B20  5B8E               	subwfb	(___fladd@b+3)& (0+255),f,b
 32681  013B22                     l3088:
 32682                           
 32683                           ; BSR set to: 0
 32684  013B22  518B               	movf	___fladd@b& (0+255),w,b
 32685  013B24  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 32686  013B26  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 32687  013B28  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 32688  013B2A  A4D8               	btfss	status,2,c
 32689  013B2C  D01C               	goto	l3095
 32690                           
 32691                           ; BSR set to: 0
 32692  013B2E  519E               	movf	___fladd@grs& (0+255),w,b
 32693  013B30  A4D8               	btfss	status,2,c
 32694  013B32  D019               	goto	l3095
 32695                           
 32696                           ; BSR set to: 0
 32697  013B34  0E00               	movlw	0
 32698  013B36  6F8B               	movwf	?___fladd& (0+255),b
 32699  013B38  0E00               	movlw	0
 32700  013B3A  6F8C               	movwf	(?___fladd+1)& (0+255),b
 32701  013B3C  0E00               	movlw	0
 32702  013B3E  6F8D               	movwf	(?___fladd+2)& (0+255),b
 32703  013B40  0E00               	movlw	0
 32704  013B42  6F8E               	movwf	(?___fladd+3)& (0+255),b
 32705                           
 32706                           ; BSR set to: 0
 32707  013B44  0012               	return	
 32708  013B46                     
 32709                           ; BSR set to: 0
 32710                           
 32711                           ; BSR set to: 0
 32712  013B46  90D8               	bcf	status,0,c
 32713  013B48  378B               	rlcf	___fladd@b& (0+255),f,b
 32714  013B4A  378C               	rlcf	(___fladd@b+1)& (0+255),f,b
 32715  013B4C  378D               	rlcf	(___fladd@b+2)& (0+255),f,b
 32716  013B4E  378E               	rlcf	(___fladd@b+3)& (0+255),f,b
 32717                           
 32718                           ; BSR set to: 0
 32719  013B50  BF9E               	btfsc	___fladd@grs& (0+255),7,b
 32720                           
 32721                           ; BSR set to: 0
 32722  013B52  818B               	bsf	___fladd@b& (0+255),0,b
 32723                           
 32724                           ; BSR set to: 0
 32725                           
 32726                           ; BSR set to: 0
 32727  013B54  A19E               	btfss	___fladd@grs& (0+255),0,b
 32728  013B56  D002               	goto	l3093
 32729                           
 32730                           ; BSR set to: 0
 32731  013B58  80D8               	bsf	status,0,c
 32732  013B5A  D001               	goto	L24
 32733  013B5C                     l3093:
 32734                           
 32735                           ; BSR set to: 0
 32736                           
 32737                           ; BSR set to: 0
 32738  013B5C  90D8               	bcf	status,0,c
 32739  013B5E                     L24:
 32740  013B5E  379E               	rlcf	___fladd@grs& (0+255),f,b
 32741                           
 32742                           ; BSR set to: 0
 32743                           
 32744                           ; BSR set to: 0
 32745  013B60  519D               	movf	___fladd@bexp& (0+255),w,b
 32746  013B62  A4D8               	btfss	status,2,c
 32747                           
 32748                           ; BSR set to: 0
 32749  013B64  079D               	decf	___fladd@bexp& (0+255),f,b
 32750  013B66                     l3095:
 32751                           
 32752                           ; BSR set to: 0
 32753                           
 32754                           ; BSR set to: 0
 32755                           
 32756                           ; BSR set to: 0
 32757  013B66  AF8D               	btfss	(___fladd@b+2)& (0+255),7,b
 32758  013B68  D7EE               	goto	l3091
 32759  013B6A                     u11430:
 32760                           
 32761                           ; BSR set to: 0
 32762                           
 32763                           ; BSR set to: 0
 32764                           
 32765                           ; BSR set to: 0
 32766  013B6A  0E00               	movlw	0
 32767  013B6C  6F9C               	movwf	___fladd@aexp& (0+255),b
 32768                           
 32769                           ; BSR set to: 0
 32770  013B6E  AF9E               	btfss	___fladd@grs& (0+255),7,b
 32771  013B70  D00A               	goto	l3100
 32772                           
 32773                           ; BSR set to: 0
 32774  013B72  C09E  F093         	movff	___fladd@grs,??___fladd
 32775  013B76  0E7F               	movlw	127
 32776  013B78  1793               	andwf	??___fladd& (0+255),f,b
 32777  013B7A  A4D8               	btfss	status,2,c
 32778  013B7C  D002               	goto	u11460
 32779                           
 32780                           ; BSR set to: 0
 32781                           
 32782                           ; BSR set to: 0
 32783  013B7E  A18B               	btfss	___fladd@b& (0+255),0,b
 32784  013B80  D002               	goto	l3100
 32785  013B82                     u11460:
 32786                           
 32787                           ; BSR set to: 0
 32788  013B82  0E01               	movlw	1
 32789  013B84  6F9C               	movwf	___fladd@aexp& (0+255),b
 32790  013B86                     l3100:
 32791                           
 32792                           ; BSR set to: 0
 32793                           
 32794                           ; BSR set to: 0
 32795                           
 32796                           ; BSR set to: 0
 32797  013B86  519C               	movf	___fladd@aexp& (0+255),w,b
 32798  013B88  B4D8               	btfsc	status,2,c
 32799  013B8A  D020               	goto	l3103
 32800                           
 32801                           ; BSR set to: 0
 32802  013B8C  0E01               	movlw	1
 32803  013B8E  278B               	addwf	___fladd@b& (0+255),f,b
 32804  013B90  0E00               	movlw	0
 32805  013B92  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 32806  013B94  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 32807  013B96  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 32808                           
 32809                           ; BSR set to: 0
 32810  013B98  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 32811  013B9A  D018               	goto	l3103
 32812                           
 32813                           ; BSR set to: 0
 32814  013B9C  C08B  F093         	movff	___fladd@b,??___fladd
 32815  013BA0  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 32816  013BA4  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 32817  013BA8  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 32818  013BAC  3596               	rlcf	(??___fladd+3)& (0+255),w,b
 32819  013BAE  3396               	rrcf	(??___fladd+3)& (0+255),f,b
 32820  013BB0  3395               	rrcf	(??___fladd+2)& (0+255),f,b
 32821  013BB2  3394               	rrcf	(??___fladd+1)& (0+255),f,b
 32822  013BB4  3393               	rrcf	??___fladd& (0+255),f,b
 32823  013BB6  C093  F08B         	movff	??___fladd,___fladd@b
 32824  013BBA  C094  F08C         	movff	??___fladd+1,___fladd@b+1
 32825  013BBE  C095  F08D         	movff	??___fladd+2,___fladd@b+2
 32826  013BC2  C096  F08E         	movff	??___fladd+3,___fladd@b+3
 32827  013BC6  299D               	incf	___fladd@bexp& (0+255),w,b
 32828  013BC8  A4D8               	btfss	status,2,c
 32829                           
 32830                           ; BSR set to: 0
 32831  013BCA  2B9D               	incf	___fladd@bexp& (0+255),f,b
 32832  013BCC                     l3103:
 32833                           
 32834                           ; BSR set to: 0
 32835                           
 32836                           ; BSR set to: 0
 32837                           
 32838                           ; BSR set to: 0
 32839                           
 32840                           ; BSR set to: 0
 32841  013BCC  299D               	incf	___fladd@bexp& (0+255),w,b
 32842  013BCE  B4D8               	btfsc	status,2,c
 32843  013BD0  D003               	goto	u11510
 32844                           
 32845                           ; BSR set to: 0
 32846  013BD2  519D               	movf	___fladd@bexp& (0+255),w,b
 32847  013BD4  A4D8               	btfss	status,2,c
 32848  013BD6  D00D               	goto	l3107
 32849  013BD8                     u11510:
 32850                           
 32851                           ; BSR set to: 0
 32852                           
 32853                           ; BSR set to: 0
 32854  013BD8  0E00               	movlw	0
 32855  013BDA  6F8B               	movwf	___fladd@b& (0+255),b
 32856  013BDC  0E00               	movlw	0
 32857  013BDE  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 32858  013BE0  0E00               	movlw	0
 32859  013BE2  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 32860  013BE4  0E00               	movlw	0
 32861  013BE6  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 32862  013BE8  519D               	movf	___fladd@bexp& (0+255),w,b
 32863  013BEA  A4D8               	btfss	status,2,c
 32864  013BEC  D002               	goto	l3107
 32865                           
 32866                           ; BSR set to: 0
 32867  013BEE  0E00               	movlw	0
 32868  013BF0  6F9B               	movwf	___fladd@signs& (0+255),b
 32869  013BF2                     l3107:
 32870                           
 32871                           ; BSR set to: 0
 32872                           
 32873                           ; BSR set to: 0
 32874                           
 32875                           ; BSR set to: 0
 32876  013BF2  A19D               	btfss	___fladd@bexp& (0+255),0,b
 32877  013BF4  D002               	goto	l3108
 32878                           
 32879                           ; BSR set to: 0
 32880  013BF6  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 32881  013BF8  D001               	goto	l3109
 32882  013BFA                     l3108:
 32883                           
 32884                           ; BSR set to: 0
 32885                           
 32886                           ; BSR set to: 0
 32887  013BFA  9F8D               	bcf	(___fladd@b+2)& (0+255),7,b
 32888  013BFC                     l3109:
 32889                           
 32890                           ; BSR set to: 0
 32891                           
 32892                           ; BSR set to: 0
 32893  013BFC  90D8               	bcf	status,0,c
 32894  013BFE  319D               	rrcf	___fladd@bexp& (0+255),w,b
 32895  013C00  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 32896                           
 32897                           ; BSR set to: 0
 32898  013C02  BF9B               	btfsc	___fladd@signs& (0+255),7,b
 32899                           
 32900                           ; BSR set to: 0
 32901  013C04  8F8E               	bsf	(___fladd@b+3)& (0+255),7,b
 32902                           
 32903                           ; BSR set to: 0
 32904                           
 32905                           ; BSR set to: 0
 32906  013C06  C08B  F08B         	movff	___fladd@b,?___fladd
 32907  013C0A  C08C  F08C         	movff	___fladd@b+1,?___fladd+1
 32908  013C0E  C08D  F08D         	movff	___fladd@b+2,?___fladd+2
 32909  013C12  C08E  F08E         	movff	___fladd@b+3,?___fladd+3
 32910  013C16  0012               	return	
 32911  013C18                     __end_of___fladd:
 32912                           	opt stack 0
 32913                           tosu	equ	0xFFF
 32914                           tosh	equ	0xFFE
 32915                           tosl	equ	0xFFD
 32916                           pclath	equ	0xFFA
 32917                           tblptru	equ	0xFF8
 32918                           tblptrh	equ	0xFF7
 32919                           tblptrl	equ	0xFF6
 32920                           tablat	equ	0xFF5
 32921                           prodh	equ	0xFF4
 32922                           prodl	equ	0xFF3
 32923                           intcon	equ	0xFF2
 32924                           indf0	equ	0xFEF
 32925                           postinc0	equ	0xFEE
 32926                           fsr0h	equ	0xFEA
 32927                           fsr0l	equ	0xFE9
 32928                           wreg	equ	0xFE8
 32929                           indf1	equ	0xFE7
 32930                           postdec1	equ	0xFE5
 32931                           fsr1h	equ	0xFE2
 32932                           fsr1l	equ	0xFE1
 32933                           indf2	equ	0xFDF
 32934                           postinc2	equ	0xFDE
 32935                           postdec2	equ	0xFDD
 32936                           plusw2	equ	0xFDB
 32937                           fsr2h	equ	0xFDA
 32938                           fsr2l	equ	0xFD9
 32939                           status	equ	0xFD8
 32940                           
 32941 ;; *************** function _SteppingCW *****************
 32942 ;; Defined at:
 32943 ;;		line 522 in file "dans.c"
 32944 ;; Parameters:    Size  Location     Type
 32945 ;;		None
 32946 ;; Auto vars:     Size  Location     Type
 32947 ;;		None
 32948 ;; Return value:  Size  Location     Type
 32949 ;;                  2  2002[None  ] int 
 32950 ;; Registers used:
 32951 ;;		wreg, status,2, status,0, cstack
 32952 ;; Tracked objects:
 32953 ;;		On entry : 0/0
 32954 ;;		On exit  : 0/0
 32955 ;;		Unchanged: 0/0
 32956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32961 ;;Total ram usage:        0 bytes
 32962 ;; Hardware stack levels used:    1
 32963 ;; Hardware stack levels required when called:    8
 32964 ;; This function calls:
 32965 ;;		_STP1
 32966 ;;		_STP2
 32967 ;;		_STP3
 32968 ;;		_STP4
 32969 ;;		_delay_ms
 32970 ;; This function is called by:
 32971 ;;		_Sensor_Observe
 32972 ;;		_Move_ADC_To
 32973 ;; This function uses a non-reentrant model
 32974 ;;
 32975                           
 32976                           	psect	text137
 32977  0184E2                     __ptext137:
 32978                           	opt stack 0
 32979  0184E2                     _SteppingCW:
 32980                           	opt stack 21
 32981                           
 32982                           ;dans.c: 523: STP1();
 32983                           
 32984                           ; BSR set to: 0
 32985                           ;incstack = 0
 32986  0184E2  EC8F  F0C7         	call	_STP1	;wreg free
 32987                           
 32988                           ;dans.c: 524: delay_ms(2);
 32989  0184E6  0E00               	movlw	0
 32990  0184E8  0100               	movlb	0	; () banked
 32991  0184EA  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 32992  0184EC  0E02               	movlw	2
 32993  0184EE  6F60               	movwf	delay_ms@ms& (0+255),b
 32994  0184F0  EC39  F0C0         	call	_delay_ms	;wreg free
 32995                           
 32996                           ;dans.c: 525: STP2();
 32997  0184F4  EC85  F0C7         	call	_STP2	;wreg free
 32998                           
 32999                           ;dans.c: 526: delay_ms(2);
 33000  0184F8  0E00               	movlw	0
 33001  0184FA  0100               	movlb	0	; () banked
 33002  0184FC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 33003  0184FE  0E02               	movlw	2
 33004  018500  6F60               	movwf	delay_ms@ms& (0+255),b
 33005  018502  EC39  F0C0         	call	_delay_ms	;wreg free
 33006                           
 33007                           ;dans.c: 527: STP3();
 33008  018506  EC7B  F0C7         	call	_STP3	;wreg free
 33009                           
 33010                           ;dans.c: 528: delay_ms(2);
 33011  01850A  0E00               	movlw	0
 33012  01850C  0100               	movlb	0	; () banked
 33013  01850E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 33014  018510  0E02               	movlw	2
 33015  018512  6F60               	movwf	delay_ms@ms& (0+255),b
 33016  018514  EC39  F0C0         	call	_delay_ms	;wreg free
 33017                           
 33018                           ;dans.c: 529: STP4();
 33019  018518  EC71  F0C7         	call	_STP4	;wreg free
 33020                           
 33021                           ;dans.c: 530: delay_ms(2);
 33022  01851C  0E00               	movlw	0
 33023  01851E  0100               	movlb	0	; () banked
 33024  018520  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 33025  018522  0E02               	movlw	2
 33026  018524  6F60               	movwf	delay_ms@ms& (0+255),b
 33027  018526  EC39  F0C0         	call	_delay_ms	;wreg free
 33028  01852A  0012               	return		;funcret
 33029  01852C                     __end_of_SteppingCW:
 33030                           	opt stack 0
 33031                           tosu	equ	0xFFF
 33032                           tosh	equ	0xFFE
 33033                           tosl	equ	0xFFD
 33034                           pclath	equ	0xFFA
 33035                           tblptru	equ	0xFF8
 33036                           tblptrh	equ	0xFF7
 33037                           tblptrl	equ	0xFF6
 33038                           tablat	equ	0xFF5
 33039                           prodh	equ	0xFF4
 33040                           prodl	equ	0xFF3
 33041                           intcon	equ	0xFF2
 33042                           indf0	equ	0xFEF
 33043                           postinc0	equ	0xFEE
 33044                           fsr0h	equ	0xFEA
 33045                           fsr0l	equ	0xFE9
 33046                           wreg	equ	0xFE8
 33047                           indf1	equ	0xFE7
 33048                           postdec1	equ	0xFE5
 33049                           fsr1h	equ	0xFE2
 33050                           fsr1l	equ	0xFE1
 33051                           indf2	equ	0xFDF
 33052                           postinc2	equ	0xFDE
 33053                           postdec2	equ	0xFDD
 33054                           plusw2	equ	0xFDB
 33055                           fsr2h	equ	0xFDA
 33056                           fsr2l	equ	0xFD9
 33057                           status	equ	0xFD8
 33058                           
 33059 ;; *************** function _SteppingCCW *****************
 33060 ;; Defined at:
 33061 ;;		line 509 in file "dans.c"
 33062 ;; Parameters:    Size  Location     Type
 33063 ;;		None
 33064 ;; Auto vars:     Size  Location     Type
 33065 ;;		None
 33066 ;; Return value:  Size  Location     Type
 33067 ;;                  2  2004[None  ] int 
 33068 ;; Registers used:
 33069 ;;		wreg, status,2, status,0, cstack
 33070 ;; Tracked objects:
 33071 ;;		On entry : 0/0
 33072 ;;		On exit  : 0/0
 33073 ;;		Unchanged: 0/0
 33074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33079 ;;Total ram usage:        0 bytes
 33080 ;; Hardware stack levels used:    1
 33081 ;; Hardware stack levels required when called:    8
 33082 ;; This function calls:
 33083 ;;		_STP1
 33084 ;;		_STP2
 33085 ;;		_STP3
 33086 ;;		_STP4
 33087 ;;		_delay_ms
 33088 ;; This function is called by:
 33089 ;;		_Closest_Object
 33090 ;;		_Move_ADC_To
 33091 ;;		_Find_Flag
 33092 ;; This function uses a non-reentrant model
 33093 ;;
 33094                           
 33095                           	psect	text138
 33096  01852C                     __ptext138:
 33097                           	opt stack 0
 33098  01852C                     _SteppingCCW:
 33099                           	opt stack 19
 33100                           
 33101                           ;dans.c: 510: STP4();
 33102                           
 33103                           ;incstack = 0
 33104  01852C  EC71  F0C7         	call	_STP4	;wreg free
 33105                           
 33106                           ;dans.c: 511: delay_ms(2);
 33107  018530  0E00               	movlw	0
 33108  018532  0100               	movlb	0	; () banked
 33109  018534  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 33110  018536  0E02               	movlw	2
 33111  018538  6F60               	movwf	delay_ms@ms& (0+255),b
 33112  01853A  EC39  F0C0         	call	_delay_ms	;wreg free
 33113                           
 33114                           ;dans.c: 512: STP3();
 33115  01853E  EC7B  F0C7         	call	_STP3	;wreg free
 33116                           
 33117                           ;dans.c: 513: delay_ms(2);
 33118  018542  0E00               	movlw	0
 33119  018544  0100               	movlb	0	; () banked
 33120  018546  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 33121  018548  0E02               	movlw	2
 33122  01854A  6F60               	movwf	delay_ms@ms& (0+255),b
 33123  01854C  EC39  F0C0         	call	_delay_ms	;wreg free
 33124                           
 33125                           ;dans.c: 514: STP2();
 33126  018550  EC85  F0C7         	call	_STP2	;wreg free
 33127                           
 33128                           ;dans.c: 515: delay_ms(2);
 33129  018554  0E00               	movlw	0
 33130  018556  0100               	movlb	0	; () banked
 33131  018558  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 33132  01855A  0E02               	movlw	2
 33133  01855C  6F60               	movwf	delay_ms@ms& (0+255),b
 33134  01855E  EC39  F0C0         	call	_delay_ms	;wreg free
 33135                           
 33136                           ;dans.c: 516: STP1();
 33137  018562  EC8F  F0C7         	call	_STP1	;wreg free
 33138                           
 33139                           ;dans.c: 517: delay_ms(2);
 33140  018566  0E00               	movlw	0
 33141  018568  0100               	movlb	0	; () banked
 33142  01856A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 33143  01856C  0E02               	movlw	2
 33144  01856E  6F60               	movwf	delay_ms@ms& (0+255),b
 33145  018570  EC39  F0C0         	call	_delay_ms	;wreg free
 33146  018574  0012               	return		;funcret
 33147  018576                     __end_of_SteppingCCW:
 33148                           	opt stack 0
 33149                           tosu	equ	0xFFF
 33150                           tosh	equ	0xFFE
 33151                           tosl	equ	0xFFD
 33152                           pclath	equ	0xFFA
 33153                           tblptru	equ	0xFF8
 33154                           tblptrh	equ	0xFF7
 33155                           tblptrl	equ	0xFF6
 33156                           tablat	equ	0xFF5
 33157                           prodh	equ	0xFF4
 33158                           prodl	equ	0xFF3
 33159                           intcon	equ	0xFF2
 33160                           indf0	equ	0xFEF
 33161                           postinc0	equ	0xFEE
 33162                           fsr0h	equ	0xFEA
 33163                           fsr0l	equ	0xFE9
 33164                           wreg	equ	0xFE8
 33165                           indf1	equ	0xFE7
 33166                           postdec1	equ	0xFE5
 33167                           fsr1h	equ	0xFE2
 33168                           fsr1l	equ	0xFE1
 33169                           indf2	equ	0xFDF
 33170                           postinc2	equ	0xFDE
 33171                           postdec2	equ	0xFDD
 33172                           plusw2	equ	0xFDB
 33173                           fsr2h	equ	0xFDA
 33174                           fsr2l	equ	0xFD9
 33175                           status	equ	0xFD8
 33176                           
 33177 ;; *************** function _delay_ms *****************
 33178 ;; Defined at:
 33179 ;;		line 240 in file "Library/Types.c"
 33180 ;; Parameters:    Size  Location     Type
 33181 ;;  ms              2    0[BANK0 ] unsigned short 
 33182 ;; Auto vars:     Size  Location     Type
 33183 ;;  u               4    2[BANK0 ] volatile unsigned long 
 33184 ;; Return value:  Size  Location     Type
 33185 ;;                  1    wreg      void 
 33186 ;; Registers used:
 33187 ;;		wreg, status,2, status,0
 33188 ;; Tracked objects:
 33189 ;;		On entry : 0/0
 33190 ;;		On exit  : 0/0
 33191 ;;		Unchanged: 0/0
 33192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33193 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33194 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33196 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33197 ;;Total ram usage:        6 bytes
 33198 ;; Hardware stack levels used:    1
 33199 ;; Hardware stack levels required when called:    7
 33200 ;; This function calls:
 33201 ;;		Nothing
 33202 ;; This function is called by:
 33203 ;;		_LCD_Reset
 33204 ;;		_LCD_Init
 33205 ;;		_MXK_Init
 33206 ;;		_main
 33207 ;;		_SteppingCCW
 33208 ;;		_SteppingCW
 33209 ;;		_Fix_Error
 33210 ;;		_Bump_Wall
 33211 ;; This function uses a non-reentrant model
 33212 ;;
 33213                           
 33214                           	psect	text139
 33215  018072                     __ptext139:
 33216                           	opt stack 0
 33217  018072                     _delay_ms:
 33218                           	opt stack 23
 33219                           
 33220                           ;Types.c: 242: volatile unsigned long u;
 33221                           ;Types.c: 243: while (ms--)
 33222                           
 33223                           ;incstack = 0
 33224  018072  D01B               	goto	u12450
 33225  018074                     l15107:
 33226                           
 33227                           ;Types.c: 244: {
 33228                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 33229  018074  0E00               	movlw	0
 33230  018076  0100               	movlb	0	; () banked
 33231  018078  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 33232  01807A  0E00               	movlw	0
 33233  01807C  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 33234  01807E  0E00               	movlw	0
 33235  018080  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 33236  018082  0E00               	movlw	0
 33237  018084  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 33238  018086                     l15109:
 33239                           
 33240                           ; BSR set to: 0
 33241  018086  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 33242  018088  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 33243  01808A  E10F               	bnz	l15115
 33244  01808C  0EB0               	movlw	176
 33245  01808E  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 33246  018090  0E04               	movlw	4
 33247  018092  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 33248  018094  B0D8               	btfsc	status,0,c
 33249  018096  D009               	goto	u12450
 33250                           
 33251                           ; BSR set to: 0
 33252                           
 33253                           ; BSR set to: 0
 33254  018098  F000               	nop		; ;# 
 33255  01809A  0E01               	movlw	1
 33256  01809C  0100               	movlb	0	; () banked
 33257  01809E  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 33258  0180A0  0E00               	movlw	0
 33259  0180A2  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 33260  0180A4  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 33261  0180A6  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 33262  0180A8  D7EE               	goto	l15109
 33263  0180AA                     u12450:
 33264  0180AA                     l15115:
 33265  0180AA  0100               	movlb	0	; () banked
 33266  0180AC  0760               	decf	delay_ms@ms& (0+255),f,b
 33267  0180AE  A0D8               	btfss	status,0,c
 33268  0180B0  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 33269  0180B2  2960               	incf	delay_ms@ms& (0+255),w,b
 33270  0180B4  E1DF               	bnz	l15107
 33271  0180B6  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 33272  0180B8  A4D8               	btfss	status,2,c
 33273  0180BA  D7DC               	goto	l824
 33274                           
 33275                           ; BSR set to: 0
 33276                           ;Types.c: 251: }
 33277                           ;Types.c: 252: }
 33278                           ;Types.c: 253: u = 0x8008;
 33279                           
 33280                           ; BSR set to: 0
 33281  0180BC  0E08               	movlw	8
 33282  0180BE  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 33283  0180C0  0E80               	movlw	128
 33284  0180C2  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 33285  0180C4  0E00               	movlw	0
 33286  0180C6  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 33287  0180C8  0E00               	movlw	0
 33288  0180CA  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 33289                           
 33290                           ; BSR set to: 0
 33291  0180CC  0012               	return		;funcret
 33292  0180CE                     __end_of_delay_ms:
 33293                           	opt stack 0
 33294                           tosu	equ	0xFFF
 33295                           tosh	equ	0xFFE
 33296                           tosl	equ	0xFFD
 33297                           pclath	equ	0xFFA
 33298                           tblptru	equ	0xFF8
 33299                           tblptrh	equ	0xFF7
 33300                           tblptrl	equ	0xFF6
 33301                           tablat	equ	0xFF5
 33302                           prodh	equ	0xFF4
 33303                           prodl	equ	0xFF3
 33304                           intcon	equ	0xFF2
 33305                           indf0	equ	0xFEF
 33306                           postinc0	equ	0xFEE
 33307                           fsr0h	equ	0xFEA
 33308                           fsr0l	equ	0xFE9
 33309                           wreg	equ	0xFE8
 33310                           indf1	equ	0xFE7
 33311                           postdec1	equ	0xFE5
 33312                           fsr1h	equ	0xFE2
 33313                           fsr1l	equ	0xFE1
 33314                           indf2	equ	0xFDF
 33315                           postinc2	equ	0xFDE
 33316                           postdec2	equ	0xFDD
 33317                           plusw2	equ	0xFDB
 33318                           fsr2h	equ	0xFDA
 33319                           fsr2l	equ	0xFD9
 33320                           status	equ	0xFD8
 33321                           
 33322 ;; *************** function _STP4 *****************
 33323 ;; Defined at:
 33324 ;;		line 213 in file "main.c"
 33325 ;; Parameters:    Size  Location     Type
 33326 ;;		None
 33327 ;; Auto vars:     Size  Location     Type
 33328 ;;		None
 33329 ;; Return value:  Size  Location     Type
 33330 ;;                  2  2201[None  ] int 
 33331 ;; Registers used:
 33332 ;;		None
 33333 ;; Tracked objects:
 33334 ;;		On entry : 0/0
 33335 ;;		On exit  : 0/0
 33336 ;;		Unchanged: 0/0
 33337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33342 ;;Total ram usage:        0 bytes
 33343 ;; Hardware stack levels used:    1
 33344 ;; Hardware stack levels required when called:    7
 33345 ;; This function calls:
 33346 ;;		Nothing
 33347 ;; This function is called by:
 33348 ;;		_SteppingCCW
 33349 ;;		_SteppingCW
 33350 ;; This function uses a non-reentrant model
 33351 ;;
 33352                           
 33353                           	psect	text140
 33354  018EE2                     __ptext140:
 33355                           	opt stack 0
 33356  018EE2                     _STP4:
 33357                           	opt stack 21
 33358                           
 33359                           ;main.c: 214: TRISA2 = 0;
 33360                           
 33361                           ; BSR set to: 0
 33362                           ;incstack = 0
 33363  018EE2  9492               	bcf	3986,2,c	;volatile
 33364                           
 33365                           ;main.c: 215: TRISA3 = 0;
 33366  018EE4  9692               	bcf	3986,3,c	;volatile
 33367                           
 33368                           ;main.c: 216: TRISD5 = 0;
 33369  018EE6  9A95               	bcf	3989,5,c	;volatile
 33370                           
 33371                           ;main.c: 217: TRISD7 = 0;
 33372  018EE8  9E95               	bcf	3989,7,c	;volatile
 33373                           
 33374                           ;main.c: 218: RD5 = 0;
 33375  018EEA  9A83               	bcf	3971,5,c	;volatile
 33376                           
 33377                           ;main.c: 219: RD7 = 0;
 33378  018EEC  9E83               	bcf	3971,7,c	;volatile
 33379                           
 33380                           ;main.c: 220: RA2 = 0;
 33381  018EEE  9480               	bcf	3968,2,c	;volatile
 33382                           
 33383                           ;main.c: 221: RA3 = 0;
 33384  018EF0  9680               	bcf	3968,3,c	;volatile
 33385                           
 33386                           ;main.c: 222: RD7 = 1;
 33387  018EF2  8E83               	bsf	3971,7,c	;volatile
 33388  018EF4  0012               	return		;funcret
 33389  018EF6                     __end_of_STP4:
 33390                           	opt stack 0
 33391                           tosu	equ	0xFFF
 33392                           tosh	equ	0xFFE
 33393                           tosl	equ	0xFFD
 33394                           pclath	equ	0xFFA
 33395                           tblptru	equ	0xFF8
 33396                           tblptrh	equ	0xFF7
 33397                           tblptrl	equ	0xFF6
 33398                           tablat	equ	0xFF5
 33399                           prodh	equ	0xFF4
 33400                           prodl	equ	0xFF3
 33401                           intcon	equ	0xFF2
 33402                           indf0	equ	0xFEF
 33403                           postinc0	equ	0xFEE
 33404                           fsr0h	equ	0xFEA
 33405                           fsr0l	equ	0xFE9
 33406                           wreg	equ	0xFE8
 33407                           indf1	equ	0xFE7
 33408                           postdec1	equ	0xFE5
 33409                           fsr1h	equ	0xFE2
 33410                           fsr1l	equ	0xFE1
 33411                           indf2	equ	0xFDF
 33412                           postinc2	equ	0xFDE
 33413                           postdec2	equ	0xFDD
 33414                           plusw2	equ	0xFDB
 33415                           fsr2h	equ	0xFDA
 33416                           fsr2l	equ	0xFD9
 33417                           status	equ	0xFD8
 33418                           
 33419 ;; *************** function _STP3 *****************
 33420 ;; Defined at:
 33421 ;;		line 201 in file "main.c"
 33422 ;; Parameters:    Size  Location     Type
 33423 ;;		None
 33424 ;; Auto vars:     Size  Location     Type
 33425 ;;		None
 33426 ;; Return value:  Size  Location     Type
 33427 ;;                  2  2198[None  ] int 
 33428 ;; Registers used:
 33429 ;;		None
 33430 ;; Tracked objects:
 33431 ;;		On entry : 0/0
 33432 ;;		On exit  : 0/0
 33433 ;;		Unchanged: 0/0
 33434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33439 ;;Total ram usage:        0 bytes
 33440 ;; Hardware stack levels used:    1
 33441 ;; Hardware stack levels required when called:    7
 33442 ;; This function calls:
 33443 ;;		Nothing
 33444 ;; This function is called by:
 33445 ;;		_SteppingCCW
 33446 ;;		_SteppingCW
 33447 ;; This function uses a non-reentrant model
 33448 ;;
 33449                           
 33450                           	psect	text141
 33451  018EF6                     __ptext141:
 33452                           	opt stack 0
 33453  018EF6                     _STP3:
 33454                           	opt stack 21
 33455                           
 33456                           ;main.c: 202: TRISA2 = 0;
 33457                           
 33458                           ;incstack = 0
 33459  018EF6  9492               	bcf	3986,2,c	;volatile
 33460                           
 33461                           ;main.c: 203: TRISA3 = 0;
 33462  018EF8  9692               	bcf	3986,3,c	;volatile
 33463                           
 33464                           ;main.c: 204: TRISD5 = 0;
 33465  018EFA  9A95               	bcf	3989,5,c	;volatile
 33466                           
 33467                           ;main.c: 205: TRISD7 = 0;
 33468  018EFC  9E95               	bcf	3989,7,c	;volatile
 33469                           
 33470                           ;main.c: 206: RD5 = 0;
 33471  018EFE  9A83               	bcf	3971,5,c	;volatile
 33472                           
 33473                           ;main.c: 207: RD7 = 0;
 33474  018F00  9E83               	bcf	3971,7,c	;volatile
 33475                           
 33476                           ;main.c: 208: RA2 = 0;
 33477  018F02  9480               	bcf	3968,2,c	;volatile
 33478                           
 33479                           ;main.c: 209: RA3 = 0;
 33480  018F04  9680               	bcf	3968,3,c	;volatile
 33481                           
 33482                           ;main.c: 210: RD5 = 1;
 33483  018F06  8A83               	bsf	3971,5,c	;volatile
 33484  018F08  0012               	return		;funcret
 33485  018F0A                     __end_of_STP3:
 33486                           	opt stack 0
 33487                           tosu	equ	0xFFF
 33488                           tosh	equ	0xFFE
 33489                           tosl	equ	0xFFD
 33490                           pclath	equ	0xFFA
 33491                           tblptru	equ	0xFF8
 33492                           tblptrh	equ	0xFF7
 33493                           tblptrl	equ	0xFF6
 33494                           tablat	equ	0xFF5
 33495                           prodh	equ	0xFF4
 33496                           prodl	equ	0xFF3
 33497                           intcon	equ	0xFF2
 33498                           indf0	equ	0xFEF
 33499                           postinc0	equ	0xFEE
 33500                           fsr0h	equ	0xFEA
 33501                           fsr0l	equ	0xFE9
 33502                           wreg	equ	0xFE8
 33503                           indf1	equ	0xFE7
 33504                           postdec1	equ	0xFE5
 33505                           fsr1h	equ	0xFE2
 33506                           fsr1l	equ	0xFE1
 33507                           indf2	equ	0xFDF
 33508                           postinc2	equ	0xFDE
 33509                           postdec2	equ	0xFDD
 33510                           plusw2	equ	0xFDB
 33511                           fsr2h	equ	0xFDA
 33512                           fsr2l	equ	0xFD9
 33513                           status	equ	0xFD8
 33514                           
 33515 ;; *************** function _STP2 *****************
 33516 ;; Defined at:
 33517 ;;		line 189 in file "main.c"
 33518 ;; Parameters:    Size  Location     Type
 33519 ;;		None
 33520 ;; Auto vars:     Size  Location     Type
 33521 ;;		None
 33522 ;; Return value:  Size  Location     Type
 33523 ;;                  2  2195[None  ] int 
 33524 ;; Registers used:
 33525 ;;		None
 33526 ;; Tracked objects:
 33527 ;;		On entry : 0/0
 33528 ;;		On exit  : 0/0
 33529 ;;		Unchanged: 0/0
 33530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33535 ;;Total ram usage:        0 bytes
 33536 ;; Hardware stack levels used:    1
 33537 ;; Hardware stack levels required when called:    7
 33538 ;; This function calls:
 33539 ;;		Nothing
 33540 ;; This function is called by:
 33541 ;;		_SteppingCCW
 33542 ;;		_SteppingCW
 33543 ;; This function uses a non-reentrant model
 33544 ;;
 33545                           
 33546                           	psect	text142
 33547  018F0A                     __ptext142:
 33548                           	opt stack 0
 33549  018F0A                     _STP2:
 33550                           	opt stack 21
 33551                           
 33552                           ;main.c: 190: TRISA2 = 0;
 33553                           
 33554                           ;incstack = 0
 33555  018F0A  9492               	bcf	3986,2,c	;volatile
 33556                           
 33557                           ;main.c: 191: TRISA3 = 0;
 33558  018F0C  9692               	bcf	3986,3,c	;volatile
 33559                           
 33560                           ;main.c: 192: TRISD5 = 0;
 33561  018F0E  9A95               	bcf	3989,5,c	;volatile
 33562                           
 33563                           ;main.c: 193: TRISD7 = 0;
 33564  018F10  9E95               	bcf	3989,7,c	;volatile
 33565                           
 33566                           ;main.c: 194: RD5 = 0;
 33567  018F12  9A83               	bcf	3971,5,c	;volatile
 33568                           
 33569                           ;main.c: 195: RD7 = 0;
 33570  018F14  9E83               	bcf	3971,7,c	;volatile
 33571                           
 33572                           ;main.c: 196: RA2 = 0;
 33573  018F16  9480               	bcf	3968,2,c	;volatile
 33574                           
 33575                           ;main.c: 197: RA3 = 0;
 33576  018F18  9680               	bcf	3968,3,c	;volatile
 33577                           
 33578                           ;main.c: 198: RA3 = 1;
 33579  018F1A  8680               	bsf	3968,3,c	;volatile
 33580  018F1C  0012               	return		;funcret
 33581  018F1E                     __end_of_STP2:
 33582                           	opt stack 0
 33583                           tosu	equ	0xFFF
 33584                           tosh	equ	0xFFE
 33585                           tosl	equ	0xFFD
 33586                           pclath	equ	0xFFA
 33587                           tblptru	equ	0xFF8
 33588                           tblptrh	equ	0xFF7
 33589                           tblptrl	equ	0xFF6
 33590                           tablat	equ	0xFF5
 33591                           prodh	equ	0xFF4
 33592                           prodl	equ	0xFF3
 33593                           intcon	equ	0xFF2
 33594                           indf0	equ	0xFEF
 33595                           postinc0	equ	0xFEE
 33596                           fsr0h	equ	0xFEA
 33597                           fsr0l	equ	0xFE9
 33598                           wreg	equ	0xFE8
 33599                           indf1	equ	0xFE7
 33600                           postdec1	equ	0xFE5
 33601                           fsr1h	equ	0xFE2
 33602                           fsr1l	equ	0xFE1
 33603                           indf2	equ	0xFDF
 33604                           postinc2	equ	0xFDE
 33605                           postdec2	equ	0xFDD
 33606                           plusw2	equ	0xFDB
 33607                           fsr2h	equ	0xFDA
 33608                           fsr2l	equ	0xFD9
 33609                           status	equ	0xFD8
 33610                           
 33611 ;; *************** function _STP1 *****************
 33612 ;; Defined at:
 33613 ;;		line 177 in file "main.c"
 33614 ;; Parameters:    Size  Location     Type
 33615 ;;		None
 33616 ;; Auto vars:     Size  Location     Type
 33617 ;;		None
 33618 ;; Return value:  Size  Location     Type
 33619 ;;                  2  2192[None  ] int 
 33620 ;; Registers used:
 33621 ;;		None
 33622 ;; Tracked objects:
 33623 ;;		On entry : 0/0
 33624 ;;		On exit  : 0/0
 33625 ;;		Unchanged: 0/0
 33626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33631 ;;Total ram usage:        0 bytes
 33632 ;; Hardware stack levels used:    1
 33633 ;; Hardware stack levels required when called:    7
 33634 ;; This function calls:
 33635 ;;		Nothing
 33636 ;; This function is called by:
 33637 ;;		_SteppingCCW
 33638 ;;		_SteppingCW
 33639 ;; This function uses a non-reentrant model
 33640 ;;
 33641                           
 33642                           	psect	text143
 33643  018F1E                     __ptext143:
 33644                           	opt stack 0
 33645  018F1E                     _STP1:
 33646                           	opt stack 21
 33647                           
 33648                           ;main.c: 178: TRISA2 = 0;
 33649                           
 33650                           ;incstack = 0
 33651  018F1E  9492               	bcf	3986,2,c	;volatile
 33652                           
 33653                           ;main.c: 179: TRISA3 = 0;
 33654  018F20  9692               	bcf	3986,3,c	;volatile
 33655                           
 33656                           ;main.c: 180: TRISD5 = 0;
 33657  018F22  9A95               	bcf	3989,5,c	;volatile
 33658                           
 33659                           ;main.c: 181: TRISD7 = 0;
 33660  018F24  9E95               	bcf	3989,7,c	;volatile
 33661                           
 33662                           ;main.c: 182: RD5 = 0;
 33663  018F26  9A83               	bcf	3971,5,c	;volatile
 33664                           
 33665                           ;main.c: 183: RD7 = 0;
 33666  018F28  9E83               	bcf	3971,7,c	;volatile
 33667                           
 33668                           ;main.c: 184: RA2 = 0;
 33669  018F2A  9480               	bcf	3968,2,c	;volatile
 33670                           
 33671                           ;main.c: 185: RA3 = 0;
 33672  018F2C  9680               	bcf	3968,3,c	;volatile
 33673                           
 33674                           ;main.c: 186: RA2 = 1;
 33675  018F2E  8480               	bsf	3968,2,c	;volatile
 33676  018F30  0012               	return		;funcret
 33677  018F32                     __end_of_STP1:
 33678                           	opt stack 0
 33679                           tosu	equ	0xFFF
 33680                           tosh	equ	0xFFE
 33681                           tosl	equ	0xFFD
 33682                           pclath	equ	0xFFA
 33683                           tblptru	equ	0xFF8
 33684                           tblptrh	equ	0xFF7
 33685                           tblptrl	equ	0xFF6
 33686                           tablat	equ	0xFF5
 33687                           prodh	equ	0xFF4
 33688                           prodl	equ	0xFF3
 33689                           intcon	equ	0xFF2
 33690                           indf0	equ	0xFEF
 33691                           postinc0	equ	0xFEE
 33692                           fsr0h	equ	0xFEA
 33693                           fsr0l	equ	0xFE9
 33694                           wreg	equ	0xFE8
 33695                           indf1	equ	0xFE7
 33696                           postdec1	equ	0xFE5
 33697                           fsr1h	equ	0xFE2
 33698                           fsr1l	equ	0xFE1
 33699                           indf2	equ	0xFDF
 33700                           postinc2	equ	0xFDE
 33701                           postdec2	equ	0xFDD
 33702                           plusw2	equ	0xFDB
 33703                           fsr2h	equ	0xFDA
 33704                           fsr2l	equ	0xFD9
 33705                           status	equ	0xFD8
 33706                           
 33707 ;; *************** function _Console_Render *****************
 33708 ;; Defined at:
 33709 ;;		line 377 in file "Library/Console.c"
 33710 ;; Parameters:    Size  Location     Type
 33711 ;;		None
 33712 ;; Auto vars:     Size  Location     Type
 33713 ;;  lCursor         4   38[BANK0 ] struct Point
 33714 ;;  y               1   43[BANK0 ] unsigned char 
 33715 ;;  x               1   42[BANK0 ] unsigned char 
 33716 ;;  temp            1   37[BANK0 ] unsigned char 
 33717 ;;  Temp            2    0        unsigned short 
 33718 ;; Return value:  Size  Location     Type
 33719 ;;                  1    wreg      void 
 33720 ;; Registers used:
 33721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33722 ;; Tracked objects:
 33723 ;;		On entry : 0/0
 33724 ;;		On exit  : 0/0
 33725 ;;		Unchanged: 0/0
 33726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33728 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33729 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33730 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33731 ;;Total ram usage:        9 bytes
 33732 ;; Hardware stack levels used:    1
 33733 ;; Hardware stack levels required when called:   11
 33734 ;; This function calls:
 33735 ;;		_Console_MakeField
 33736 ;;		_LCD_DrawField
 33737 ;;		_LCD_FillRectangle
 33738 ;; This function is called by:
 33739 ;;		_Sensor_Observe
 33740 ;;		_Closest_Object
 33741 ;;		_main
 33742 ;;		_Travel
 33743 ;;		_Move_ADC_To
 33744 ;;		_Navigate_Maze
 33745 ;;		_Bump_Wall
 33746 ;;		_Find_Flag
 33747 ;; This function uses a non-reentrant model
 33748 ;;
 33749                           
 33750                           	psect	text144
 33751  015166                     __ptext144:
 33752                           	opt stack 0
 33753  015166                     _Console_Render:
 33754                           	opt stack 18
 33755                           
 33756                           ;Console.c: 379: Colour Temp;
 33757                           ;Console.c: 380: if (change)
 33758                           
 33759                           ;incstack = 0
 33760  015166  504E               	movf	_change,w,c
 33761  015168  B4D8               	btfsc	status,2,c
 33762  01516A  0012               	return	
 33763                           
 33764                           ;Console.c: 381: {
 33765                           ;Console.c: 382: UINT8 x, y, temp;
 33766                           ;Console.c: 383: Point lCursor = {6,6};
 33767  01516C  C1E1  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 33768  015170  C1E2  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 33769  015174  C1E3  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 33770  015178  C1E4  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 33771                           
 33772                           ;Console.c: 385: if (clearall)
 33773  01517C  5046               	movf	_clearall,w,c
 33774  01517E  B4D8               	btfsc	status,2,c
 33775  015180  D005               	goto	l1056
 33776                           
 33777                           ;Console.c: 386: {
 33778                           ;Console.c: 389: temp = lBufferY;
 33779  015182  C0FF  F085         	movff	_lBufferY,Console_Render@temp
 33780                           
 33781                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 33782  015186  0E0F               	movlw	15
 33783  015188  0100               	movlb	0	; () banked
 33784  01518A  6FFF               	movwf	_lBufferY& (0+255),b
 33785  01518C                     l1056:
 33786                           
 33787                           ;Console.c: 391: }
 33788                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 33789  01518C  0E00               	movlw	0
 33790  01518E  0100               	movlb	0	; () banked
 33791  015190  6F8B               	movwf	Console_Render@y& (0+255),b
 33792  015192  D0B9               	goto	l1057
 33793  015194                     
 33794                           ; BSR set to: 0
 33795                           ;Console.c: 394: {
 33796                           ;Console.c: 395: gForecolour = lCBuffer[y];
 33797                           
 33798                           ; BSR set to: 0
 33799  015194  518B               	movf	Console_Render@y& (0+255),w,b
 33800  015196  0D02               	mullw	2
 33801  015198  0E28               	movlw	low _lCBuffer
 33802  01519A  24F3               	addwf	prodl,w,c
 33803  01519C  6ED9               	movwf	fsr2l,c
 33804  01519E  0E03               	movlw	high _lCBuffer
 33805  0151A0  20F4               	addwfc	prodh,w,c
 33806  0151A2  6EDA               	movwf	fsr2h,c
 33807  0151A4  CFDE F1FB          	movff	postinc2,_gForecolour
 33808  0151A8  CFDD F1FC          	movff	postdec2,_gForecolour+1
 33809                           
 33810                           ; BSR set to: 0
 33811                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 33812  0151AC  0E00               	movlw	0
 33813  0151AE  6F8A               	movwf	Console_Render@x& (0+255),b
 33814  0151B0                     l15451:
 33815                           
 33816                           ; BSR set to: 0
 33817  0151B0  0E13               	movlw	19
 33818  0151B2  658A               	cpfsgt	Console_Render@x& (0+255),b
 33819  0151B4  D001               	goto	l1059
 33820  0151B6  D09E               	goto	u12930
 33821  0151B8                     l1059:
 33822                           
 33823                           ; BSR set to: 0
 33824                           ;Console.c: 397: {
 33825                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 33826                           
 33827                           ; BSR set to: 0
 33828  0151B8  518B               	movf	Console_Render@y& (0+255),w,b
 33829  0151BA  0D14               	mullw	20
 33830  0151BC  0EF2               	movlw	low _lBuffer
 33831  0151BE  6F83               	movwf	??_Console_Render& (0+255),b
 33832  0151C0  0E03               	movlw	high _lBuffer
 33833  0151C2  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 33834  0151C4  50F3               	movf	prodl,w,c
 33835  0151C6  2783               	addwf	??_Console_Render& (0+255),f,b
 33836  0151C8  50F4               	movf	prodh,w,c
 33837  0151CA  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 33838  0151CC  518A               	movf	Console_Render@x& (0+255),w,b
 33839  0151CE  0D01               	mullw	1
 33840  0151D0  50F3               	movf	prodl,w,c
 33841  0151D2  2583               	addwf	??_Console_Render& (0+255),w,b
 33842  0151D4  6ED9               	movwf	fsr2l,c
 33843  0151D6  50F4               	movf	prodh,w,c
 33844  0151D8  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 33845  0151DA  6EDA               	movwf	fsr2h,c
 33846  0151DC  AEDF               	btfss	indf2,7,c
 33847  0151DE  D083               	goto	l1063
 33848                           
 33849                           ; BSR set to: 0
 33850                           ;Console.c: 399: {
 33851                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 33852  0151E0  518B               	movf	Console_Render@y& (0+255),w,b
 33853  0151E2  0D14               	mullw	20
 33854  0151E4  0EF2               	movlw	low _lBuffer
 33855  0151E6  6F83               	movwf	??_Console_Render& (0+255),b
 33856  0151E8  0E03               	movlw	high _lBuffer
 33857  0151EA  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 33858  0151EC  50F3               	movf	prodl,w,c
 33859  0151EE  2783               	addwf	??_Console_Render& (0+255),f,b
 33860  0151F0  50F4               	movf	prodh,w,c
 33861  0151F2  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 33862  0151F4  518A               	movf	Console_Render@x& (0+255),w,b
 33863  0151F6  0D01               	mullw	1
 33864  0151F8  50F3               	movf	prodl,w,c
 33865  0151FA  2583               	addwf	??_Console_Render& (0+255),w,b
 33866  0151FC  6ED9               	movwf	fsr2l,c
 33867  0151FE  50F4               	movf	prodh,w,c
 33868  015200  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 33869  015202  6EDA               	movwf	fsr2h,c
 33870  015204  0E7F               	movlw	127
 33871  015206  16DF               	andwf	indf2,f,c
 33872                           
 33873                           ;Console.c: 401: if (lBuffer[y][x])
 33874  015208  518B               	movf	Console_Render@y& (0+255),w,b
 33875  01520A  0D14               	mullw	20
 33876  01520C  0EF2               	movlw	low _lBuffer
 33877  01520E  6F83               	movwf	??_Console_Render& (0+255),b
 33878  015210  0E03               	movlw	high _lBuffer
 33879  015212  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 33880  015214  50F3               	movf	prodl,w,c
 33881  015216  2783               	addwf	??_Console_Render& (0+255),f,b
 33882  015218  50F4               	movf	prodh,w,c
 33883  01521A  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 33884  01521C  518A               	movf	Console_Render@x& (0+255),w,b
 33885  01521E  0D01               	mullw	1
 33886  015220  50F3               	movf	prodl,w,c
 33887  015222  2583               	addwf	??_Console_Render& (0+255),w,b
 33888  015224  6ED9               	movwf	fsr2l,c
 33889  015226  50F4               	movf	prodh,w,c
 33890  015228  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 33891  01522A  6EDA               	movwf	fsr2h,c
 33892  01522C  50DF               	movf	indf2,w,c
 33893  01522E  B4D8               	btfsc	status,2,c
 33894  015230  D043               	goto	l1062
 33895                           
 33896                           ; BSR set to: 0
 33897                           ;Console.c: 402: {
 33898                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 33899  015232  C158  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 33900  015236  C159  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 33901  01523A  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 33902  01523E  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 33903  015242  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 33904  015246  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 33905  01524A  C1E9  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 33906  01524E  C1EA  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 33907  015252  C1EB  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 33908  015256  C1EC  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 33909  01525A  EC0F  F0C1         	call	_LCD_FillRectangle	;wreg free
 33910                           
 33911                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 33912  01525E  0100               	movlb	0	; () banked
 33913  015260  518B               	movf	Console_Render@y& (0+255),w,b
 33914  015262  0D14               	mullw	20
 33915  015264  0EF2               	movlw	low _lBuffer
 33916  015266  6F83               	movwf	??_Console_Render& (0+255),b
 33917  015268  0E03               	movlw	high _lBuffer
 33918  01526A  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 33919  01526C  50F3               	movf	prodl,w,c
 33920  01526E  2783               	addwf	??_Console_Render& (0+255),f,b
 33921  015270  50F4               	movf	prodh,w,c
 33922  015272  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 33923  015274  518A               	movf	Console_Render@x& (0+255),w,b
 33924  015276  0D01               	mullw	1
 33925  015278  50F3               	movf	prodl,w,c
 33926  01527A  2583               	addwf	??_Console_Render& (0+255),w,b
 33927  01527C  6ED9               	movwf	fsr2l,c
 33928  01527E  50F4               	movf	prodh,w,c
 33929  015280  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 33930  015282  6EDA               	movwf	fsr2h,c
 33931  015284  50DF               	movf	indf2,w,c
 33932  015286  EC77  F0B8         	call	_Console_MakeField
 33933  01528A  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 33934  01528E  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 33935  015292  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 33936  015296  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 33937  01529A  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 33938  01529E  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 33939  0152A2  C1E9  F078         	movff	_gCharSize,LCD_DrawField@pSize
 33940  0152A6  C1EA  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 33941  0152AA  C1EB  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 33942  0152AE  C1EC  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 33943  0152B2  EC28  F0BC         	call	_LCD_DrawField	;wreg free
 33944                           
 33945                           ;Console.c: 405: }
 33946  0152B6  D017               	goto	l1063
 33947  0152B8                     l1062:
 33948                           
 33949                           ;Console.c: 406: else
 33950                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 33951  0152B8  0E00               	movlw	0
 33952  0152BA  0100               	movlb	0	; () banked
 33953  0152BC  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 33954  0152BE  0E00               	movlw	0
 33955  0152C0  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 33956  0152C2  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 33957  0152C6  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 33958  0152CA  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 33959  0152CE  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 33960  0152D2  C1E9  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 33961  0152D6  C1EA  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 33962  0152DA  C1EB  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 33963  0152DE  C1EC  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 33964  0152E2  EC0F  F0C1         	call	_LCD_FillRectangle	;wreg free
 33965  0152E6                     l1063:
 33966                           
 33967                           ;Console.c: 408: }
 33968                           ;Console.c: 409: lCursor.x += (5 + 1);
 33969  0152E6  0E06               	movlw	6
 33970  0152E8  0100               	movlb	0	; () banked
 33971  0152EA  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 33972  0152EC  0E00               	movlw	0
 33973  0152EE  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 33974                           
 33975                           ; BSR set to: 0
 33976  0152F0  2B8A               	incf	Console_Render@x& (0+255),f,b
 33977  0152F2  D75E               	goto	l15451
 33978  0152F4                     u12930:
 33979                           
 33980                           ; BSR set to: 0
 33981                           ;Console.c: 410: }
 33982                           ;Console.c: 411: lCursor.y += (7 + 1);
 33983                           
 33984                           ; BSR set to: 0
 33985  0152F4  0E08               	movlw	8
 33986  0152F6  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 33987  0152F8  0E00               	movlw	0
 33988  0152FA  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 33989                           
 33990                           ; BSR set to: 0
 33991                           ;Console.c: 412: lCursor.x = 6;
 33992  0152FC  0E00               	movlw	0
 33993  0152FE  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 33994  015300  0E06               	movlw	6
 33995  015302  6F86               	movwf	Console_Render@lCursor& (0+255),b
 33996                           
 33997                           ; BSR set to: 0
 33998  015304  2B8B               	incf	Console_Render@y& (0+255),f,b
 33999  015306                     l1057:
 34000                           
 34001                           ; BSR set to: 0
 34002                           
 34003                           ; BSR set to: 0
 34004  015306  518B               	movf	Console_Render@y& (0+255),w,b
 34005  015308  5DFF               	subwf	_lBufferY& (0+255),w,b
 34006  01530A  B0D8               	btfsc	status,0,c
 34007  01530C  D743               	goto	l1058
 34008                           
 34009                           ; BSR set to: 0
 34010                           ;Console.c: 413: }
 34011                           ;Console.c: 415: if (clearall)
 34012                           
 34013                           ; BSR set to: 0
 34014  01530E  5046               	movf	_clearall,w,c
 34015  015310  B4D8               	btfsc	status,2,c
 34016  015312  0012               	return	
 34017                           
 34018                           ; BSR set to: 0
 34019                           ;Console.c: 416: {
 34020                           ;Console.c: 417: clearall = 0;
 34021  015314  0E00               	movlw	0
 34022  015316  6E46               	movwf	_clearall,c
 34023                           
 34024                           ; BSR set to: 0
 34025                           ;Console.c: 418: lBufferY = temp;
 34026  015318  C085  F0FF         	movff	Console_Render@temp,_lBufferY
 34027                           
 34028                           ; BSR set to: 0
 34029  01531C  0012               	return	
 34030  01531E                     __end_of_Console_Render:
 34031                           	opt stack 0
 34032                           tosu	equ	0xFFF
 34033                           tosh	equ	0xFFE
 34034                           tosl	equ	0xFFD
 34035                           pclath	equ	0xFFA
 34036                           tblptru	equ	0xFF8
 34037                           tblptrh	equ	0xFF7
 34038                           tblptrl	equ	0xFF6
 34039                           tablat	equ	0xFF5
 34040                           prodh	equ	0xFF4
 34041                           prodl	equ	0xFF3
 34042                           intcon	equ	0xFF2
 34043                           indf0	equ	0xFEF
 34044                           postinc0	equ	0xFEE
 34045                           fsr0h	equ	0xFEA
 34046                           fsr0l	equ	0xFE9
 34047                           wreg	equ	0xFE8
 34048                           indf1	equ	0xFE7
 34049                           postdec1	equ	0xFE5
 34050                           fsr1h	equ	0xFE2
 34051                           fsr1l	equ	0xFE1
 34052                           indf2	equ	0xFDF
 34053                           postinc2	equ	0xFDE
 34054                           postdec2	equ	0xFDD
 34055                           plusw2	equ	0xFDB
 34056                           fsr2h	equ	0xFDA
 34057                           fsr2l	equ	0xFD9
 34058                           status	equ	0xFD8
 34059                           
 34060 ;; *************** function _LCD_FillRectangle *****************
 34061 ;; Defined at:
 34062 ;;		line 318 in file "Library/LCD.c"
 34063 ;; Parameters:    Size  Location     Type
 34064 ;;  pColour         2    9[BANK0 ] unsigned short 
 34065 ;;  pPoint          4   11[BANK0 ] struct Point
 34066 ;;  pSize           4   15[BANK0 ] struct Point
 34067 ;; Auto vars:     Size  Location     Type
 34068 ;;  j               1   22[BANK0 ] unsigned char 
 34069 ;;  i               1   21[BANK0 ] unsigned char 
 34070 ;; Return value:  Size  Location     Type
 34071 ;;                  1    wreg      void 
 34072 ;; Registers used:
 34073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 34074 ;; Tracked objects:
 34075 ;;		On entry : 0/0
 34076 ;;		On exit  : 0/0
 34077 ;;		Unchanged: 0/0
 34078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34079 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34080 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34081 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34082 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34083 ;;Total ram usage:       14 bytes
 34084 ;; Hardware stack levels used:    1
 34085 ;; Hardware stack levels required when called:   10
 34086 ;; This function calls:
 34087 ;;		_LCD_Word_Write
 34088 ;;		_Set_Addr_Window
 34089 ;; This function is called by:
 34090 ;;		_Console_Render
 34091 ;;		_Console_ClearLine
 34092 ;; This function uses a non-reentrant model
 34093 ;;
 34094                           
 34095                           	psect	text145
 34096  01821E                     __ptext145:
 34097                           	opt stack 0
 34098  01821E                     _LCD_FillRectangle:
 34099                           	opt stack 18
 34100                           
 34101                           ;LCD.c: 320: UINT8 i = 0x00;
 34102                           
 34103                           ;incstack = 0
 34104  01821E  0E00               	movlw	0
 34105  018220  0100               	movlb	0	; () banked
 34106  018222  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 34107                           
 34108                           ;LCD.c: 321: UINT8 j = 0x00;
 34109  018224  0E00               	movlw	0
 34110  018226  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 34111                           
 34112                           ; BSR set to: 0
 34113                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 34114  018228  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 34115  01822C  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 34116  01822E  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 34117  018230  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 34118  018232  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 34119  018234  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 34120  018236  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 34121  018238  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 34122  01823A  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 34123  01823C  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 34124  01823E  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 34125  018240  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 34126  018242  EC67  F0B9         	call	_Set_Addr_Window
 34127                           
 34128                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 34129  018246  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 34130  01824A  0100               	movlb	0	; () banked
 34131  01824C  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 34132  01824E  B4D8               	btfsc	status,2,c
 34133  018250  0012               	return	
 34134                           
 34135                           ; BSR set to: 0
 34136                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 34137                           
 34138                           ; BSR set to: 0
 34139  018252  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 34140  018256                     l15129:
 34141                           
 34142                           ; BSR set to: 0
 34143  018256  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 34144  018258  B4D8               	btfsc	status,2,c
 34145  01825A  D009               	goto	u12490
 34146                           
 34147                           ; BSR set to: 0
 34148                           ;LCD.c: 333: LCD_Word_Write(pColour);
 34149                           
 34150                           ; BSR set to: 0
 34151                           
 34152                           ; BSR set to: 0
 34153  01825C  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 34154  018260  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 34155  018264  ECBF  F0C6         	call	_LCD_Word_Write	;wreg free
 34156  018268  0100               	movlb	0	; () banked
 34157  01826A  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 34158  01826C  D7F4               	goto	l15129
 34159  01826E                     u12490:
 34160                           
 34161                           ; BSR set to: 0
 34162                           
 34163                           ; BSR set to: 0
 34164  01826E  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 34165  018270  D7ED               	goto	L25
 34166  018272                     __end_of_LCD_FillRectangle:
 34167                           	opt stack 0
 34168                           tosu	equ	0xFFF
 34169                           tosh	equ	0xFFE
 34170                           tosl	equ	0xFFD
 34171                           pclath	equ	0xFFA
 34172                           tblptru	equ	0xFF8
 34173                           tblptrh	equ	0xFF7
 34174                           tblptrl	equ	0xFF6
 34175                           tablat	equ	0xFF5
 34176                           prodh	equ	0xFF4
 34177                           prodl	equ	0xFF3
 34178                           intcon	equ	0xFF2
 34179                           indf0	equ	0xFEF
 34180                           postinc0	equ	0xFEE
 34181                           fsr0h	equ	0xFEA
 34182                           fsr0l	equ	0xFE9
 34183                           wreg	equ	0xFE8
 34184                           indf1	equ	0xFE7
 34185                           postdec1	equ	0xFE5
 34186                           fsr1h	equ	0xFE2
 34187                           fsr1l	equ	0xFE1
 34188                           indf2	equ	0xFDF
 34189                           postinc2	equ	0xFDE
 34190                           postdec2	equ	0xFDD
 34191                           plusw2	equ	0xFDB
 34192                           fsr2h	equ	0xFDA
 34193                           fsr2l	equ	0xFD9
 34194                           status	equ	0xFD8
 34195                           
 34196 ;; *************** function _LCD_DrawField *****************
 34197 ;; Defined at:
 34198 ;;		line 393 in file "Library/LCD.c"
 34199 ;; Parameters:    Size  Location     Type
 34200 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 34201 ;;		 -> Console_MakeField@Fill(70), 
 34202 ;;  pPoint          4   20[BANK0 ] struct Point
 34203 ;;  pSize           4   24[BANK0 ] struct Point
 34204 ;; Auto vars:     Size  Location     Type
 34205 ;;  count           2   30[BANK0 ] unsigned short 
 34206 ;;  i               1   34[BANK0 ] unsigned char 
 34207 ;;  ymax            1   33[BANK0 ] unsigned char 
 34208 ;;  xmax            1   32[BANK0 ] unsigned char 
 34209 ;; Return value:  Size  Location     Type
 34210 ;;                  1    wreg      void 
 34211 ;; Registers used:
 34212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34213 ;; Tracked objects:
 34214 ;;		On entry : 0/0
 34215 ;;		On exit  : 0/0
 34216 ;;		Unchanged: 0/0
 34217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34218 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34219 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34220 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34221 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34222 ;;Total ram usage:       17 bytes
 34223 ;; Hardware stack levels used:    1
 34224 ;; Hardware stack levels required when called:   10
 34225 ;; This function calls:
 34226 ;;		_LCD_Word_Write
 34227 ;;		_Set_Addr_Window
 34228 ;;		___wmul
 34229 ;; This function is called by:
 34230 ;;		_Console_Render
 34231 ;; This function uses a non-reentrant model
 34232 ;;
 34233                           
 34234                           	psect	text146
 34235  017850                     __ptext146:
 34236                           	opt stack 0
 34237  017850                     _LCD_DrawField:
 34238                           	opt stack 18
 34239                           
 34240                           ;LCD.c: 396: UINT8 i = 0x00;
 34241                           
 34242                           ; BSR set to: 0
 34243                           ;incstack = 0
 34244  017850  0E00               	movlw	0
 34245  017852  0100               	movlb	0	; () banked
 34246  017854  6F82               	movwf	LCD_DrawField@i& (0+255),b
 34247                           
 34248                           ; BSR set to: 0
 34249                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 34250  017856  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 34251  017858  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 34252  01785A  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 34253                           
 34254                           ; BSR set to: 0
 34255                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 34256  01785C  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 34257  01785E  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 34258  017860  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 34259                           
 34260                           ; BSR set to: 0
 34261                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 34262  017862  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 34263  017866  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 34264  01786A  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 34265  01786E  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 34266  017872  ECE4  F0C5         	call	___wmul	;wreg free
 34267  017876  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 34268  01787A  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 34269                           
 34270                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 34271  01787E  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 34272  017882  0100               	movlb	0	; () banked
 34273  017884  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 34274  017886  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 34275  017888  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 34276  01788A  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 34277  01788C  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 34278  01788E  EC67  F0B9         	call	_Set_Addr_Window
 34279                           
 34280                           ;LCD.c: 403: for(i = 0; i < count; i++)
 34281  017892  0E00               	movlw	0
 34282  017894  0100               	movlb	0	; () banked
 34283  017896  6F82               	movwf	LCD_DrawField@i& (0+255),b
 34284  017898  D010               	goto	l183
 34285  01789A                     
 34286                           ; BSR set to: 0
 34287                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 34288                           
 34289                           ; BSR set to: 0
 34290  01789A  5182               	movf	LCD_DrawField@i& (0+255),w,b
 34291  01789C  0D02               	mullw	2
 34292  01789E  50F3               	movf	prodl,w,c
 34293  0178A0  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 34294  0178A2  6ED9               	movwf	fsr2l,c
 34295  0178A4  50F4               	movf	prodh,w,c
 34296  0178A6  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 34297  0178A8  6EDA               	movwf	fsr2h,c
 34298  0178AA  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 34299  0178AE  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 34300  0178B2  ECBF  F0C6         	call	_LCD_Word_Write	;wreg free
 34301  0178B6  0100               	movlb	0	; () banked
 34302  0178B8  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 34303  0178BA                     l183:
 34304                           
 34305                           ; BSR set to: 0
 34306                           
 34307                           ; BSR set to: 0
 34308  0178BA  5182               	movf	LCD_DrawField@i& (0+255),w,b
 34309  0178BC  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 34310  0178BE  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 34311  0178C0  517E               	movf	LCD_DrawField@count& (0+255),w,b
 34312  0178C2  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 34313  0178C4  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 34314  0178C6  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 34315  0178C8  B0D8               	btfsc	status,0,c
 34316  0178CA  0012               	return	
 34317  0178CC  D7E6               	goto	l184
 34318  0178CE                     __end_of_LCD_DrawField:
 34319                           	opt stack 0
 34320                           tosu	equ	0xFFF
 34321                           tosh	equ	0xFFE
 34322                           tosl	equ	0xFFD
 34323                           pclath	equ	0xFFA
 34324                           tblptru	equ	0xFF8
 34325                           tblptrh	equ	0xFF7
 34326                           tblptrl	equ	0xFF6
 34327                           tablat	equ	0xFF5
 34328                           prodh	equ	0xFF4
 34329                           prodl	equ	0xFF3
 34330                           intcon	equ	0xFF2
 34331                           indf0	equ	0xFEF
 34332                           postinc0	equ	0xFEE
 34333                           fsr0h	equ	0xFEA
 34334                           fsr0l	equ	0xFE9
 34335                           wreg	equ	0xFE8
 34336                           indf1	equ	0xFE7
 34337                           postdec1	equ	0xFE5
 34338                           fsr1h	equ	0xFE2
 34339                           fsr1l	equ	0xFE1
 34340                           indf2	equ	0xFDF
 34341                           postinc2	equ	0xFDE
 34342                           postdec2	equ	0xFDD
 34343                           plusw2	equ	0xFDB
 34344                           fsr2h	equ	0xFDA
 34345                           fsr2l	equ	0xFD9
 34346                           status	equ	0xFD8
 34347                           
 34348 ;; *************** function ___wmul *****************
 34349 ;; Defined at:
 34350 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 34351 ;; Parameters:    Size  Location     Type
 34352 ;;  multiplier      2    0[BANK0 ] unsigned int 
 34353 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 34354 ;; Auto vars:     Size  Location     Type
 34355 ;;  product         2    4[BANK0 ] unsigned int 
 34356 ;; Return value:  Size  Location     Type
 34357 ;;                  2    0[BANK0 ] unsigned int 
 34358 ;; Registers used:
 34359 ;;		wreg, status,2, status,0, prodl, prodh
 34360 ;; Tracked objects:
 34361 ;;		On entry : 0/0
 34362 ;;		On exit  : 0/0
 34363 ;;		Unchanged: 0/0
 34364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34365 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34366 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34368 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34369 ;;Total ram usage:        6 bytes
 34370 ;; Hardware stack levels used:    1
 34371 ;; Hardware stack levels required when called:    7
 34372 ;; This function calls:
 34373 ;;		Nothing
 34374 ;; This function is called by:
 34375 ;;		_LCD_DrawField
 34376 ;;		_main
 34377 ;;		_Create_Maze
 34378 ;;		_Travel
 34379 ;;		_Go_Backward
 34380 ;;		_Navigate_Maze
 34381 ;; This function uses a non-reentrant model
 34382 ;;
 34383                           
 34384                           	psect	text147
 34385  018BC8                     __ptext147:
 34386                           	opt stack 0
 34387  018BC8                     ___wmul:
 34388                           	opt stack 23
 34389                           
 34390                           ; BSR set to: 0
 34391                           ;incstack = 0
 34392  018BC8  0100               	movlb	0	; () banked
 34393  018BCA  5160               	movf	___wmul@multiplier& (0+255),w,b
 34394  018BCC  0362               	mulwf	___wmul@multiplicand& (0+255),b
 34395  018BCE  CFF3 F064          	movff	prodl,___wmul@product
 34396  018BD2  CFF4 F065          	movff	prodh,___wmul@product+1
 34397  018BD6  5160               	movf	___wmul@multiplier& (0+255),w,b
 34398  018BD8  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 34399  018BDA  50F3               	movf	prodl,w,c
 34400  018BDC  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 34401  018BDE  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 34402  018BE0  0362               	mulwf	___wmul@multiplicand& (0+255),b
 34403  018BE2  50F3               	movf	prodl,w,c
 34404  018BE4  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 34405                           
 34406                           ; BSR set to: 0
 34407  018BE6  C064  F060         	movff	___wmul@product,?___wmul
 34408  018BEA  C065  F061         	movff	___wmul@product+1,?___wmul+1
 34409  018BEE  0012               	return	
 34410  018BF0                     __end_of___wmul:
 34411                           	opt stack 0
 34412                           tosu	equ	0xFFF
 34413                           tosh	equ	0xFFE
 34414                           tosl	equ	0xFFD
 34415                           pclath	equ	0xFFA
 34416                           tblptru	equ	0xFF8
 34417                           tblptrh	equ	0xFF7
 34418                           tblptrl	equ	0xFF6
 34419                           tablat	equ	0xFF5
 34420                           prodh	equ	0xFF4
 34421                           prodl	equ	0xFF3
 34422                           intcon	equ	0xFF2
 34423                           indf0	equ	0xFEF
 34424                           postinc0	equ	0xFEE
 34425                           fsr0h	equ	0xFEA
 34426                           fsr0l	equ	0xFE9
 34427                           wreg	equ	0xFE8
 34428                           indf1	equ	0xFE7
 34429                           postdec1	equ	0xFE5
 34430                           fsr1h	equ	0xFE2
 34431                           fsr1l	equ	0xFE1
 34432                           indf2	equ	0xFDF
 34433                           postinc2	equ	0xFDE
 34434                           postdec2	equ	0xFDD
 34435                           plusw2	equ	0xFDB
 34436                           fsr2h	equ	0xFDA
 34437                           fsr2l	equ	0xFD9
 34438                           status	equ	0xFD8
 34439                           
 34440 ;; *************** function _Set_Addr_Window *****************
 34441 ;; Defined at:
 34442 ;;		line 214 in file "Library/LCD.c"
 34443 ;; Parameters:    Size  Location     Type
 34444 ;;  xs              1    wreg     unsigned char 
 34445 ;;  ys              1    5[BANK0 ] unsigned char 
 34446 ;;  xe              1    6[BANK0 ] unsigned char 
 34447 ;;  ye              1    7[BANK0 ] unsigned char 
 34448 ;; Auto vars:     Size  Location     Type
 34449 ;;  xs              1    8[BANK0 ] unsigned char 
 34450 ;; Return value:  Size  Location     Type
 34451 ;;                  1    wreg      void 
 34452 ;; Registers used:
 34453 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 34454 ;; Tracked objects:
 34455 ;;		On entry : 0/0
 34456 ;;		On exit  : 0/0
 34457 ;;		Unchanged: 0/0
 34458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34459 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34462 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34463 ;;Total ram usage:        4 bytes
 34464 ;; Hardware stack levels used:    1
 34465 ;; Hardware stack levels required when called:    9
 34466 ;; This function calls:
 34467 ;;		_LCD_Write
 34468 ;; This function is called by:
 34469 ;;		_LCD_Fill
 34470 ;;		_LCD_FillRectangle
 34471 ;;		_LCD_DrawField
 34472 ;;		_RAM_Address_Set
 34473 ;;		_LCD_DrawPixel
 34474 ;; This function uses a non-reentrant model
 34475 ;;
 34476                           
 34477                           	psect	text148
 34478  0172CE                     __ptext148:
 34479                           	opt stack 0
 34480  0172CE                     _Set_Addr_Window:
 34481                           	opt stack 18
 34482                           
 34483                           ; BSR set to: 0
 34484                           ;incstack = 0
 34485                           ;Set_Addr_Window@xs stored from wreg
 34486  0172CE  0100               	movlb	0	; () banked
 34487  0172D0  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 34488                           
 34489                           ;LCD.c: 216: ys+=2;
 34490  0172D2  0E02               	movlw	2
 34491  0172D4  0100               	movlb	0	; () banked
 34492  0172D6  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 34493                           
 34494                           ;LCD.c: 217: ye+=2;
 34495  0172D8  0E02               	movlw	2
 34496  0172DA  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 34497                           
 34498                           ;LCD.c: 218: xs+=3;
 34499  0172DC  0E03               	movlw	3
 34500  0172DE  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 34501                           
 34502                           ;LCD.c: 219: xe+=3;
 34503  0172E0  0E03               	movlw	3
 34504  0172E2  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 34505                           
 34506                           ; BSR set to: 0
 34507                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 34508  0172E4  0E00               	movlw	0
 34509  0172E6  6F63               	movwf	LCD_Write@mode& (0+255),b
 34510  0172E8  0E2A               	movlw	42
 34511  0172EA  EC74  F0C6         	call	_LCD_Write
 34512                           
 34513                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 34514  0172EE  0E01               	movlw	1
 34515  0172F0  0100               	movlb	0	; () banked
 34516  0172F2  6F63               	movwf	LCD_Write@mode& (0+255),b
 34517  0172F4  0E00               	movlw	0
 34518  0172F6  EC74  F0C6         	call	_LCD_Write
 34519                           
 34520                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 34521  0172FA  0E01               	movlw	1
 34522  0172FC  0100               	movlb	0	; () banked
 34523  0172FE  6F63               	movwf	LCD_Write@mode& (0+255),b
 34524  017300  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 34525  017302  EC74  F0C6         	call	_LCD_Write
 34526                           
 34527                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 34528  017306  0E01               	movlw	1
 34529  017308  0100               	movlb	0	; () banked
 34530  01730A  6F63               	movwf	LCD_Write@mode& (0+255),b
 34531  01730C  0E00               	movlw	0
 34532  01730E  EC74  F0C6         	call	_LCD_Write
 34533                           
 34534                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 34535  017312  0E01               	movlw	1
 34536  017314  0100               	movlb	0	; () banked
 34537  017316  6F63               	movwf	LCD_Write@mode& (0+255),b
 34538  017318  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 34539  01731A  EC74  F0C6         	call	_LCD_Write
 34540                           
 34541                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 34542  01731E  0E00               	movlw	0
 34543  017320  0100               	movlb	0	; () banked
 34544  017322  6F63               	movwf	LCD_Write@mode& (0+255),b
 34545  017324  0E2B               	movlw	43
 34546  017326  EC74  F0C6         	call	_LCD_Write
 34547                           
 34548                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 34549  01732A  0E01               	movlw	1
 34550  01732C  0100               	movlb	0	; () banked
 34551  01732E  6F63               	movwf	LCD_Write@mode& (0+255),b
 34552  017330  0E00               	movlw	0
 34553  017332  EC74  F0C6         	call	_LCD_Write
 34554                           
 34555                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 34556  017336  0E01               	movlw	1
 34557  017338  0100               	movlb	0	; () banked
 34558  01733A  6F63               	movwf	LCD_Write@mode& (0+255),b
 34559  01733C  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 34560  01733E  EC74  F0C6         	call	_LCD_Write
 34561                           
 34562                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 34563  017342  0E01               	movlw	1
 34564  017344  0100               	movlb	0	; () banked
 34565  017346  6F63               	movwf	LCD_Write@mode& (0+255),b
 34566  017348  0E00               	movlw	0
 34567  01734A  EC74  F0C6         	call	_LCD_Write
 34568                           
 34569                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 34570  01734E  0E01               	movlw	1
 34571  017350  0100               	movlb	0	; () banked
 34572  017352  6F63               	movwf	LCD_Write@mode& (0+255),b
 34573  017354  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 34574  017356  EC74  F0C6         	call	_LCD_Write
 34575                           
 34576                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 34577  01735A  0E00               	movlw	0
 34578  01735C  0100               	movlb	0	; () banked
 34579  01735E  6F63               	movwf	LCD_Write@mode& (0+255),b
 34580  017360  0E2C               	movlw	44
 34581  017362  EC74  F0C6         	call	_LCD_Write
 34582  017366  0012               	return		;funcret
 34583  017368                     __end_of_Set_Addr_Window:
 34584                           	opt stack 0
 34585                           tosu	equ	0xFFF
 34586                           tosh	equ	0xFFE
 34587                           tosl	equ	0xFFD
 34588                           pclath	equ	0xFFA
 34589                           tblptru	equ	0xFF8
 34590                           tblptrh	equ	0xFF7
 34591                           tblptrl	equ	0xFF6
 34592                           tablat	equ	0xFF5
 34593                           prodh	equ	0xFF4
 34594                           prodl	equ	0xFF3
 34595                           intcon	equ	0xFF2
 34596                           indf0	equ	0xFEF
 34597                           postinc0	equ	0xFEE
 34598                           fsr0h	equ	0xFEA
 34599                           fsr0l	equ	0xFE9
 34600                           wreg	equ	0xFE8
 34601                           indf1	equ	0xFE7
 34602                           postdec1	equ	0xFE5
 34603                           fsr1h	equ	0xFE2
 34604                           fsr1l	equ	0xFE1
 34605                           indf2	equ	0xFDF
 34606                           postinc2	equ	0xFDE
 34607                           postdec2	equ	0xFDD
 34608                           plusw2	equ	0xFDB
 34609                           fsr2h	equ	0xFDA
 34610                           fsr2l	equ	0xFD9
 34611                           status	equ	0xFD8
 34612                           
 34613 ;; *************** function _LCD_Word_Write *****************
 34614 ;; Defined at:
 34615 ;;		line 198 in file "Library/LCD.c"
 34616 ;; Parameters:    Size  Location     Type
 34617 ;;  value           2    5[BANK0 ] unsigned short 
 34618 ;; Auto vars:     Size  Location     Type
 34619 ;;		None
 34620 ;; Return value:  Size  Location     Type
 34621 ;;                  1    wreg      void 
 34622 ;; Registers used:
 34623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 34624 ;; Tracked objects:
 34625 ;;		On entry : 0/0
 34626 ;;		On exit  : 0/0
 34627 ;;		Unchanged: 0/0
 34628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34629 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34632 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34633 ;;Total ram usage:        2 bytes
 34634 ;; Hardware stack levels used:    1
 34635 ;; Hardware stack levels required when called:    9
 34636 ;; This function calls:
 34637 ;;		_LCD_Write
 34638 ;; This function is called by:
 34639 ;;		_LCD_Fill
 34640 ;;		_LCD_FillRectangle
 34641 ;;		_LCD_DrawField
 34642 ;;		_LCD_DrawPixel
 34643 ;; This function uses a non-reentrant model
 34644 ;;
 34645                           
 34646                           	psect	text149
 34647  018D7E                     __ptext149:
 34648                           	opt stack 0
 34649  018D7E                     _LCD_Word_Write:
 34650                           	opt stack 18
 34651                           
 34652                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 34653                           
 34654                           ;incstack = 0
 34655  018D7E  0E01               	movlw	1
 34656  018D80  0100               	movlb	0	; () banked
 34657  018D82  6F63               	movwf	LCD_Write@mode& (0+255),b
 34658  018D84  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 34659  018D86  EC74  F0C6         	call	_LCD_Write
 34660                           
 34661                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 34662  018D8A  0E01               	movlw	1
 34663  018D8C  0100               	movlb	0	; () banked
 34664  018D8E  6F63               	movwf	LCD_Write@mode& (0+255),b
 34665  018D90  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 34666  018D92  EC74  F0C6         	call	_LCD_Write
 34667  018D96  0012               	return		;funcret
 34668  018D98                     __end_of_LCD_Word_Write:
 34669                           	opt stack 0
 34670                           tosu	equ	0xFFF
 34671                           tosh	equ	0xFFE
 34672                           tosl	equ	0xFFD
 34673                           pclath	equ	0xFFA
 34674                           tblptru	equ	0xFF8
 34675                           tblptrh	equ	0xFF7
 34676                           tblptrl	equ	0xFF6
 34677                           tablat	equ	0xFF5
 34678                           prodh	equ	0xFF4
 34679                           prodl	equ	0xFF3
 34680                           intcon	equ	0xFF2
 34681                           indf0	equ	0xFEF
 34682                           postinc0	equ	0xFEE
 34683                           fsr0h	equ	0xFEA
 34684                           fsr0l	equ	0xFE9
 34685                           wreg	equ	0xFE8
 34686                           indf1	equ	0xFE7
 34687                           postdec1	equ	0xFE5
 34688                           fsr1h	equ	0xFE2
 34689                           fsr1l	equ	0xFE1
 34690                           indf2	equ	0xFDF
 34691                           postinc2	equ	0xFDE
 34692                           postdec2	equ	0xFDD
 34693                           plusw2	equ	0xFDB
 34694                           fsr2h	equ	0xFDA
 34695                           fsr2l	equ	0xFD9
 34696                           status	equ	0xFD8
 34697                           
 34698 ;; *************** function _LCD_Write *****************
 34699 ;; Defined at:
 34700 ;;		line 67 in file "Library/LCD.c"
 34701 ;; Parameters:    Size  Location     Type
 34702 ;;  value           1    wreg     unsigned char 
 34703 ;;  mode            1    3[BANK0 ] enum E6761
 34704 ;; Auto vars:     Size  Location     Type
 34705 ;;  value           1    4[BANK0 ] unsigned char 
 34706 ;; Return value:  Size  Location     Type
 34707 ;;                  1    wreg      void 
 34708 ;; Registers used:
 34709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 34710 ;; Tracked objects:
 34711 ;;		On entry : 0/0
 34712 ;;		On exit  : 0/0
 34713 ;;		Unchanged: 0/0
 34714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34715 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34716 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34718 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34719 ;;Total ram usage:        2 bytes
 34720 ;; Hardware stack levels used:    1
 34721 ;; Hardware stack levels required when called:    8
 34722 ;; This function calls:
 34723 ;;		_Mode_Set
 34724 ;;		_SPI_Send
 34725 ;; This function is called by:
 34726 ;;		_LCD_Init
 34727 ;;		_LCD_Word_Write
 34728 ;;		_Set_Addr_Window
 34729 ;;		_Set_Rotation
 34730 ;;		_LCD_WriteCMD
 34731 ;;		_LCD_WriteData
 34732 ;;		_LCD_Data_Write
 34733 ;;		_LCD_Data_Write_4k
 34734 ;;		_Invert_Display
 34735 ;; This function uses a non-reentrant model
 34736 ;;
 34737                           
 34738                           	psect	text150
 34739  018CE8                     __ptext150:
 34740                           	opt stack 0
 34741  018CE8                     _LCD_Write:
 34742                           	opt stack 18
 34743                           
 34744                           ;incstack = 0
 34745                           ;LCD_Write@value stored from wreg
 34746  018CE8  0100               	movlb	0	; () banked
 34747  018CEA  6F64               	movwf	LCD_Write@value& (0+255),b
 34748                           
 34749                           ;LCD.c: 89: Mode_Set(mode);
 34750  018CEC  0100               	movlb	0	; () banked
 34751  018CEE  5163               	movf	LCD_Write@mode& (0+255),w,b
 34752  018CF0  ECAB  F0C7         	call	_Mode_Set
 34753                           
 34754                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 34755  018CF4  0ED3               	movlw	low _SPI2
 34756  018CF6  0100               	movlb	0	; () banked
 34757  018CF8  6F60               	movwf	SPI_Send@pInput& (0+255),b
 34758  018CFA  0E02               	movlw	high _SPI2
 34759  018CFC  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 34760  018CFE  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 34761  018D02  EC3D  F0BE         	call	_SPI_Send	;wreg free
 34762  018D06  0012               	return		;funcret
 34763  018D08                     __end_of_LCD_Write:
 34764                           	opt stack 0
 34765                           tosu	equ	0xFFF
 34766                           tosh	equ	0xFFE
 34767                           tosl	equ	0xFFD
 34768                           pclath	equ	0xFFA
 34769                           tblptru	equ	0xFF8
 34770                           tblptrh	equ	0xFF7
 34771                           tblptrl	equ	0xFF6
 34772                           tablat	equ	0xFF5
 34773                           prodh	equ	0xFF4
 34774                           prodl	equ	0xFF3
 34775                           intcon	equ	0xFF2
 34776                           indf0	equ	0xFEF
 34777                           postinc0	equ	0xFEE
 34778                           fsr0h	equ	0xFEA
 34779                           fsr0l	equ	0xFE9
 34780                           wreg	equ	0xFE8
 34781                           indf1	equ	0xFE7
 34782                           postdec1	equ	0xFE5
 34783                           fsr1h	equ	0xFE2
 34784                           fsr1l	equ	0xFE1
 34785                           indf2	equ	0xFDF
 34786                           postinc2	equ	0xFDE
 34787                           postdec2	equ	0xFDD
 34788                           plusw2	equ	0xFDB
 34789                           fsr2h	equ	0xFDA
 34790                           fsr2l	equ	0xFD9
 34791                           status	equ	0xFD8
 34792                           
 34793 ;; *************** function _SPI_Send *****************
 34794 ;; Defined at:
 34795 ;;		line 226 in file "Library/SPI.c"
 34796 ;; Parameters:    Size  Location     Type
 34797 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 34798 ;;		 -> SPI1(11), SPI2(11), 
 34799 ;;  pData           1    2[BANK0 ] unsigned char 
 34800 ;; Auto vars:     Size  Location     Type
 34801 ;;		None
 34802 ;; Return value:  Size  Location     Type
 34803 ;;                  1    wreg      unsigned char 
 34804 ;; Registers used:
 34805 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 34806 ;; Tracked objects:
 34807 ;;		On entry : 0/0
 34808 ;;		On exit  : 0/0
 34809 ;;		Unchanged: 0/0
 34810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34811 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34814 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34815 ;;Total ram usage:        3 bytes
 34816 ;; Hardware stack levels used:    1
 34817 ;; Hardware stack levels required when called:    7
 34818 ;; This function calls:
 34819 ;;		Nothing
 34820 ;; This function is called by:
 34821 ;;		_LCD_Write
 34822 ;;		_OutSeg
 34823 ;; This function uses a non-reentrant model
 34824 ;;
 34825                           
 34826                           	psect	text151
 34827  017C7A                     __ptext151:
 34828                           	opt stack 0
 34829  017C7A                     _SPI_Send:
 34830                           	opt stack 18
 34831                           
 34832                           ;SPI.c: 253: switch (pInput->mChannel)
 34833                           
 34834                           ;incstack = 0
 34835  017C7A  D026               	goto	l678
 34836  017C7C                     
 34837                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 34838  017C7C  C17D  FFD9         	movff	_PortC+4,fsr2l
 34839  017C80  C17E  FFDA         	movff	_PortC+5,fsr2h
 34840  017C84  0101               	movlb	1	; () banked
 34841  017C86  94DF               	bcf	indf2,2,c
 34842                           
 34843                           ; BSR set to: 1
 34844                           ;SPI.c: 257: SSP1BUF = pData;
 34845  017C88  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 34846  017C8C                     
 34847                           ; BSR set to: 1
 34848  017C8C  A0C7               	btfss	4039,0,c	;volatile
 34849  017C8E  D7FE               	goto	l681
 34850                           
 34851                           ;SPI.c: 259: pData = SSP1BUF;
 34852  017C90  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 34853                           
 34854                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 34855  017C94  C17D  FFD9         	movff	_PortC+4,fsr2l
 34856  017C98  C17E  FFDA         	movff	_PortC+5,fsr2h
 34857  017C9C  0101               	movlb	1	; () banked
 34858  017C9E  84DF               	bsf	indf2,2,c
 34859                           
 34860                           ; BSR set to: 1
 34861                           ;SPI.c: 261: return pData;
 34862                           ;	Return value of _SPI_Send is never used
 34863  017CA0  0012               	return	
 34864  017CA2                     
 34865                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 34866                           
 34867                           ; BSR set to: 1
 34868  017CA2  C173  FFD9         	movff	_PortD+4,fsr2l
 34869  017CA6  C174  FFDA         	movff	_PortD+5,fsr2h
 34870  017CAA  0101               	movlb	1	; () banked
 34871  017CAC  9EDF               	bcf	indf2,7,c
 34872                           
 34873                           ; BSR set to: 1
 34874                           ;SPI.c: 264: SSP2BUF = pData;
 34875  017CAE  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 34876  017CB2                     
 34877                           ; BSR set to: 1
 34878  017CB2  A06D               	btfss	3949,0,c	;volatile
 34879  017CB4  D7FE               	goto	l686
 34880                           
 34881                           ;SPI.c: 266: pData = SSP2BUF;
 34882  017CB6  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 34883                           
 34884                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 34885  017CBA  C173  FFD9         	movff	_PortD+4,fsr2l
 34886  017CBE  C174  FFDA         	movff	_PortD+5,fsr2h
 34887  017CC2  0101               	movlb	1	; () banked
 34888  017CC4  8EDF               	bsf	indf2,7,c
 34889                           
 34890                           ; BSR set to: 1
 34891                           ;SPI.c: 269: };
 34892                           
 34893                           ; BSR set to: 1
 34894                           ;SPI.c: 268: return pData;
 34895                           ;	Return value of _SPI_Send is never used
 34896  017CC6  0012               	return	
 34897  017CC8                     l678:
 34898                           
 34899                           ; BSR set to: 1
 34900  017CC8  0100               	movlb	0	; () banked
 34901  017CCA  EE20 F002          	lfsr	2,2
 34902  017CCE  5160               	movf	SPI_Send@pInput& (0+255),w,b
 34903  017CD0  26D9               	addwf	fsr2l,f,c
 34904  017CD2  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 34905  017CD4  22DA               	addwfc	fsr2h,f,c
 34906  017CD6  50DF               	movf	indf2,w,c
 34907                           
 34908                           ; Switch size 1, requested type "space"
 34909                           ; Number of cases is 2, Range of values is 0 to 1
 34910                           ; switch strategies available:
 34911                           ; Name         Instructions Cycles
 34912                           ; simple_byte            7     4 (average)
 34913                           ;	Chosen strategy is simple_byte
 34914  017CD8  0A00               	xorlw	0	; case 0
 34915  017CDA  B4D8               	btfsc	status,2,c
 34916  017CDC  D7CF               	goto	l679
 34917  017CDE  0A01               	xorlw	1	; case 1
 34918  017CE0  A4D8               	btfss	status,2,c
 34919  017CE2  0012               	return	
 34920  017CE4  D7DE               	goto	l684
 34921  017CE6                     __end_of_SPI_Send:
 34922                           	opt stack 0
 34923                           tosu	equ	0xFFF
 34924                           tosh	equ	0xFFE
 34925                           tosl	equ	0xFFD
 34926                           pclath	equ	0xFFA
 34927                           tblptru	equ	0xFF8
 34928                           tblptrh	equ	0xFF7
 34929                           tblptrl	equ	0xFF6
 34930                           tablat	equ	0xFF5
 34931                           prodh	equ	0xFF4
 34932                           prodl	equ	0xFF3
 34933                           intcon	equ	0xFF2
 34934                           indf0	equ	0xFEF
 34935                           postinc0	equ	0xFEE
 34936                           fsr0h	equ	0xFEA
 34937                           fsr0l	equ	0xFE9
 34938                           wreg	equ	0xFE8
 34939                           indf1	equ	0xFE7
 34940                           postdec1	equ	0xFE5
 34941                           fsr1h	equ	0xFE2
 34942                           fsr1l	equ	0xFE1
 34943                           indf2	equ	0xFDF
 34944                           postinc2	equ	0xFDE
 34945                           postdec2	equ	0xFDD
 34946                           plusw2	equ	0xFDB
 34947                           fsr2h	equ	0xFDA
 34948                           fsr2l	equ	0xFD9
 34949                           status	equ	0xFD8
 34950                           
 34951 ;; *************** function _Mode_Set *****************
 34952 ;; Defined at:
 34953 ;;		line 40 in file "Library/LCD.c"
 34954 ;; Parameters:    Size  Location     Type
 34955 ;;  pMode           1    wreg     enum E6761
 34956 ;; Auto vars:     Size  Location     Type
 34957 ;;  pMode           1    0[BANK0 ] enum E6761
 34958 ;; Return value:  Size  Location     Type
 34959 ;;                  1    wreg      void 
 34960 ;; Registers used:
 34961 ;;		wreg
 34962 ;; Tracked objects:
 34963 ;;		On entry : 0/0
 34964 ;;		On exit  : 0/0
 34965 ;;		Unchanged: 0/0
 34966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34970 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34971 ;;Total ram usage:        1 bytes
 34972 ;; Hardware stack levels used:    1
 34973 ;; Hardware stack levels required when called:    7
 34974 ;; This function calls:
 34975 ;;		Nothing
 34976 ;; This function is called by:
 34977 ;;		_LCD_Write
 34978 ;; This function uses a non-reentrant model
 34979 ;;
 34980                           
 34981                           	psect	text152
 34982  018F56                     __ptext152:
 34983                           	opt stack 0
 34984  018F56                     _Mode_Set:
 34985                           	opt stack 18
 34986                           
 34987                           ;incstack = 0
 34988                           ;Mode_Set@pMode stored from wreg
 34989  018F56  0100               	movlb	0	; () banked
 34990  018F58  6F60               	movwf	Mode_Set@pMode& (0+255),b
 34991                           
 34992                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 34993  018F5A  0100               	movlb	0	; () banked
 34994  018F5C  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 34995  018F5E  D002               	bra	u10995
 34996  018F60  9E85               	bcf	3973,7,c	;volatile
 34997  018F62  D001               	bra	u10996
 34998  018F64                     u10995:
 34999  018F64  8E85               	bsf	3973,7,c	;volatile
 35000  018F66                     u10996:
 35001  018F66  0012               	return		;funcret
 35002  018F68                     __end_of_Mode_Set:
 35003                           	opt stack 0
 35004                           tosu	equ	0xFFF
 35005                           tosh	equ	0xFFE
 35006                           tosl	equ	0xFFD
 35007                           pclath	equ	0xFFA
 35008                           tblptru	equ	0xFF8
 35009                           tblptrh	equ	0xFF7
 35010                           tblptrl	equ	0xFF6
 35011                           tablat	equ	0xFF5
 35012                           prodh	equ	0xFF4
 35013                           prodl	equ	0xFF3
 35014                           intcon	equ	0xFF2
 35015                           indf0	equ	0xFEF
 35016                           postinc0	equ	0xFEE
 35017                           fsr0h	equ	0xFEA
 35018                           fsr0l	equ	0xFE9
 35019                           wreg	equ	0xFE8
 35020                           indf1	equ	0xFE7
 35021                           postdec1	equ	0xFE5
 35022                           fsr1h	equ	0xFE2
 35023                           fsr1l	equ	0xFE1
 35024                           indf2	equ	0xFDF
 35025                           postinc2	equ	0xFDE
 35026                           postdec2	equ	0xFDD
 35027                           plusw2	equ	0xFDB
 35028                           fsr2h	equ	0xFDA
 35029                           fsr2l	equ	0xFD9
 35030                           status	equ	0xFD8
 35031                           
 35032 ;; *************** function _Console_MakeField *****************
 35033 ;; Defined at:
 35034 ;;		line 435 in file "Library/Console.c"
 35035 ;; Parameters:    Size  Location     Type
 35036 ;;  pInput          1    wreg     unsigned char 
 35037 ;; Auto vars:     Size  Location     Type
 35038 ;;  pInput          1   11[BANK0 ] unsigned char 
 35039 ;;  y               1   17[BANK0 ] unsigned char 
 35040 ;;  x               1   16[BANK0 ] unsigned char 
 35041 ;;  Column          2   12[BANK0 ] PTR struct Byte
 35042 ;;		 -> Font5x7(480), 
 35043 ;;  Index           2    9[BANK0 ] unsigned short 
 35044 ;; Return value:  Size  Location     Type
 35045 ;;                  2    5[BANK0 ] PTR unsigned short 
 35046 ;; Registers used:
 35047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35048 ;; Tracked objects:
 35049 ;;		On entry : 0/0
 35050 ;;		On exit  : 0/0
 35051 ;;		Unchanged: 0/0
 35052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35053 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35054 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35055 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35056 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35057 ;;Total ram usage:       13 bytes
 35058 ;; Hardware stack levels used:    1
 35059 ;; Hardware stack levels required when called:    8
 35060 ;; This function calls:
 35061 ;;		_Byte_GetBit
 35062 ;; This function is called by:
 35063 ;;		_Console_Render
 35064 ;; This function uses a non-reentrant model
 35065 ;;
 35066                           
 35067                           	psect	text153
 35068  0170EE                     __ptext153:
 35069                           	opt stack 0
 35070  0170EE                     _Console_MakeField:
 35071                           	opt stack 20
 35072                           
 35073                           ;incstack = 0
 35074                           ;Console_MakeField@pInput stored from wreg
 35075  0170EE  0100               	movlb	0	; () banked
 35076  0170F0  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 35077                           
 35078                           ;Console.c: 437: static Colour Fill[7][5];
 35079                           ;Console.c: 438: pInput -= 32;
 35080  0170F2  0E20               	movlw	32
 35081  0170F4  0100               	movlb	0	; () banked
 35082  0170F6  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 35083                           
 35084                           ; BSR set to: 0
 35085                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 35086  0170F8  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 35087  0170FA  0D05               	mullw	5
 35088  0170FC  CFF3 F069          	movff	prodl,Console_MakeField@Index
 35089  017100  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 35090                           
 35091                           ; BSR set to: 0
 35092                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 35093  017104  0E27               	movlw	low _Font5x7
 35094  017106  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 35095  017108  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 35096  01710A  0EFC               	movlw	high _Font5x7
 35097  01710C  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 35098  01710E  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 35099                           
 35100                           ; BSR set to: 0
 35101                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 35102  017110  0E00               	movlw	0
 35103  017112  6F70               	movwf	Console_MakeField@x& (0+255),b
 35104  017114                     l15239:
 35105                           
 35106                           ; BSR set to: 0
 35107  017114  0E04               	movlw	4
 35108  017116  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 35109  017118  D001               	goto	l1077
 35110  01711A  D037               	goto	u12670
 35111  01711C                     l1077:
 35112                           
 35113                           ; BSR set to: 0
 35114                           ;Console.c: 444: {
 35115                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 35116                           
 35117                           ; BSR set to: 0
 35118  01711C  0E00               	movlw	0
 35119  01711E  6F71               	movwf	Console_MakeField@y& (0+255),b
 35120  017120                     l15245:
 35121                           
 35122                           ; BSR set to: 0
 35123  017120  0E06               	movlw	6
 35124  017122  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 35125  017124  D001               	goto	l1079
 35126  017126  D02D               	goto	u12660
 35127  017128                     l1079:
 35128                           
 35129                           ; BSR set to: 0
 35130                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 35131                           
 35132                           ; BSR set to: 0
 35133  017128  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 35134  01712C  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 35135  017130  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 35136  017134  ECBA  F0C5         	call	_Byte_GetBit	;wreg free
 35137  017138  0900               	iorlw	0
 35138  01713A  A4D8               	btfss	status,2,c
 35139  01713C  D005               	goto	l1082
 35140  01713E  C158  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 35141  017142  C159  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 35142  017146  D004               	goto	l1084
 35143  017148                     l1082:
 35144  017148  C1FB  F06E         	movff	_gForecolour,_Console_MakeField$10974
 35145  01714C  C1FC  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 35146  017150                     l1084:
 35147  017150  0100               	movlb	0	; () banked
 35148  017152  5171               	movf	Console_MakeField@y& (0+255),w,b
 35149  017154  0D0A               	mullw	10
 35150  017156  0E5A               	movlw	low Console_MakeField@Fill
 35151  017158  6F67               	movwf	??_Console_MakeField& (0+255),b
 35152  01715A  0E03               	movlw	high Console_MakeField@Fill
 35153  01715C  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 35154  01715E  50F3               	movf	prodl,w,c
 35155  017160  2767               	addwf	??_Console_MakeField& (0+255),f,b
 35156  017162  50F4               	movf	prodh,w,c
 35157  017164  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 35158  017166  5170               	movf	Console_MakeField@x& (0+255),w,b
 35159  017168  0D02               	mullw	2
 35160  01716A  50F3               	movf	prodl,w,c
 35161  01716C  2567               	addwf	??_Console_MakeField& (0+255),w,b
 35162  01716E  6ED9               	movwf	fsr2l,c
 35163  017170  50F4               	movf	prodh,w,c
 35164  017172  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 35165  017174  6EDA               	movwf	fsr2h,c
 35166  017176  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 35167  01717A  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 35168                           
 35169                           ; BSR set to: 0
 35170  01717E  2B71               	incf	Console_MakeField@y& (0+255),f,b
 35171  017180  D7CF               	goto	l15245
 35172  017182                     u12660:
 35173                           
 35174                           ; BSR set to: 0
 35175                           ;Console.c: 447: Column += 1;
 35176                           
 35177                           ; BSR set to: 0
 35178  017182  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 35179  017184  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 35180  017186  2B70               	incf	Console_MakeField@x& (0+255),f,b
 35181  017188  D7C5               	goto	l15239
 35182  01718A                     u12670:
 35183                           
 35184                           ; BSR set to: 0
 35185                           ;Console.c: 448: }
 35186                           ;Console.c: 449: return (ColourPtr)Fill;
 35187                           
 35188                           ; BSR set to: 0
 35189  01718A  0E5A               	movlw	low Console_MakeField@Fill
 35190  01718C  6F65               	movwf	?_Console_MakeField& (0+255),b
 35191  01718E  0E03               	movlw	high Console_MakeField@Fill
 35192  017190  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 35193  017192  0012               	return	
 35194  017194                     __end_of_Console_MakeField:
 35195                           	opt stack 0
 35196                           tosu	equ	0xFFF
 35197                           tosh	equ	0xFFE
 35198                           tosl	equ	0xFFD
 35199                           pclath	equ	0xFFA
 35200                           tblptru	equ	0xFF8
 35201                           tblptrh	equ	0xFF7
 35202                           tblptrl	equ	0xFF6
 35203                           tablat	equ	0xFF5
 35204                           prodh	equ	0xFF4
 35205                           prodl	equ	0xFF3
 35206                           intcon	equ	0xFF2
 35207                           indf0	equ	0xFEF
 35208                           postinc0	equ	0xFEE
 35209                           fsr0h	equ	0xFEA
 35210                           fsr0l	equ	0xFE9
 35211                           wreg	equ	0xFE8
 35212                           indf1	equ	0xFE7
 35213                           postdec1	equ	0xFE5
 35214                           fsr1h	equ	0xFE2
 35215                           fsr1l	equ	0xFE1
 35216                           indf2	equ	0xFDF
 35217                           postinc2	equ	0xFDE
 35218                           postdec2	equ	0xFDD
 35219                           plusw2	equ	0xFDB
 35220                           fsr2h	equ	0xFDA
 35221                           fsr2l	equ	0xFD9
 35222                           status	equ	0xFD8
 35223                           
 35224 ;; *************** function _Byte_GetBit *****************
 35225 ;; Defined at:
 35226 ;;		line 38 in file "Library/Types.c"
 35227 ;; Parameters:    Size  Location     Type
 35228 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 35229 ;;		 -> Font5x7(480), 
 35230 ;;  pBit            1    2[BANK0 ] unsigned char 
 35231 ;; Auto vars:     Size  Location     Type
 35232 ;;  Output          1    4[BANK0 ] unsigned char 
 35233 ;; Return value:  Size  Location     Type
 35234 ;;                  1    wreg      unsigned char 
 35235 ;; Registers used:
 35236 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 35237 ;; Tracked objects:
 35238 ;;		On entry : 0/0
 35239 ;;		On exit  : 0/0
 35240 ;;		Unchanged: 0/0
 35241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35242 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35244 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35245 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35246 ;;Total ram usage:        5 bytes
 35247 ;; Hardware stack levels used:    1
 35248 ;; Hardware stack levels required when called:    7
 35249 ;; This function calls:
 35250 ;;		Nothing
 35251 ;; This function is called by:
 35252 ;;		_Console_MakeField
 35253 ;;		_Word_GetBit
 35254 ;; This function uses a non-reentrant model
 35255 ;;
 35256                           
 35257                           	psect	text154
 35258  018B74                     __ptext154:
 35259                           	opt stack 0
 35260  018B74                     _Byte_GetBit:
 35261                           	opt stack 20
 35262                           
 35263                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 35264                           
 35265                           ; BSR set to: 0
 35266                           ;incstack = 0
 35267  018B74  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 35268  018B78  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 35269  018B7C                     	if	0	;tblptru may be non-zero
 35270  018B7C                     	endif
 35271  018B7C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 35272  018B7C  0E00               	movlw	low (__mediumconst shr (0+16))
 35273  018B7E  6EF8               	movwf	tblptru,c
 35274  018B80                     	endif
 35275  018B80  0008               	tblrd		*
 35276  018B82  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 35277                           
 35278                           ;Types.c: 42: Output >>= pBit;
 35279  018B86  0100               	movlb	0	; () banked
 35280  018B88  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 35281  018B8A  6F63               	movwf	??_Byte_GetBit& (0+255),b
 35282  018B8C  D002               	goto	u11990
 35283  018B8E                     u11995:
 35284  018B8E  90D8               	bcf	status,0,c
 35285  018B90  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 35286  018B92                     u11990:
 35287  018B92  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 35288  018B94  D7FC               	goto	u11995
 35289                           
 35290                           ;Types.c: 43: Output &= 1;
 35291  018B96  0E01               	movlw	1
 35292  018B98  0100               	movlb	0	; () banked
 35293  018B9A  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 35294                           
 35295                           ; BSR set to: 0
 35296                           ;Types.c: 44: return Output;
 35297  018B9C  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 35298  018B9E  0012               	return	
 35299  018BA0                     __end_of_Byte_GetBit:
 35300                           	opt stack 0
 35301                           tosu	equ	0xFFF
 35302                           tosh	equ	0xFFE
 35303                           tosl	equ	0xFFD
 35304                           pclath	equ	0xFFA
 35305                           tblptru	equ	0xFF8
 35306                           tblptrh	equ	0xFF7
 35307                           tblptrl	equ	0xFF6
 35308                           tablat	equ	0xFF5
 35309                           prodh	equ	0xFF4
 35310                           prodl	equ	0xFF3
 35311                           intcon	equ	0xFF2
 35312                           indf0	equ	0xFEF
 35313                           postinc0	equ	0xFEE
 35314                           fsr0h	equ	0xFEA
 35315                           fsr0l	equ	0xFE9
 35316                           wreg	equ	0xFE8
 35317                           indf1	equ	0xFE7
 35318                           postdec1	equ	0xFE5
 35319                           fsr1h	equ	0xFE2
 35320                           fsr1l	equ	0xFE1
 35321                           indf2	equ	0xFDF
 35322                           postinc2	equ	0xFDE
 35323                           postdec2	equ	0xFDD
 35324                           plusw2	equ	0xFDB
 35325                           fsr2h	equ	0xFDA
 35326                           fsr2l	equ	0xFD9
 35327                           status	equ	0xFD8
 35328                           
 35329 ;; *************** function _Get_Sensor_State *****************
 35330 ;; Defined at:
 35331 ;;		line 102 in file "main.c"
 35332 ;; Parameters:    Size  Location     Type
 35333 ;;		None
 35334 ;; Auto vars:     Size  Location     Type
 35335 ;;		None
 35336 ;; Return value:  Size  Location     Type
 35337 ;;                  2  2156[None  ] int 
 35338 ;; Registers used:
 35339 ;;		wreg, cstack
 35340 ;; Tracked objects:
 35341 ;;		On entry : 0/0
 35342 ;;		On exit  : 0/0
 35343 ;;		Unchanged: 0/0
 35344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35349 ;;Total ram usage:        0 bytes
 35350 ;; Hardware stack levels used:    1
 35351 ;; Hardware stack levels required when called:    8
 35352 ;; This function calls:
 35353 ;;		_eusartSend
 35354 ;; This function is called by:
 35355 ;;		_Bump_Wall
 35356 ;; This function uses a non-reentrant model
 35357 ;;
 35358                           
 35359                           	psect	text155
 35360  017EEE                     __ptext155:
 35361                           	opt stack 0
 35362  017EEE                     _Get_Sensor_State:
 35363                           	opt stack 21
 35364                           
 35365                           ;main.c: 104: eusartSend(142);
 35366                           
 35367                           ; BSR set to: 0
 35368                           ;incstack = 0
 35369  017EEE  0E8E               	movlw	142
 35370  017EF0  ECC9  F0C7         	call	_eusartSend
 35371                           
 35372                           ;main.c: 105: eusartSend(7);
 35373  017EF4  0E07               	movlw	7
 35374  017EF6  ECC9  F0C7         	call	_eusartSend
 35375  017EFA  AA9E               	btfss	3998,5,c	;volatile
 35376  017EFC  D7FE               	goto	l2158
 35377                           
 35378                           ;main.c: 107: BumpSensor = RCREG1;
 35379  017EFE  CFAF F03A          	movff	4015,_BumpSensor	;volatile
 35380                           
 35381                           ;main.c: 109: eusartSend(142);
 35382  017F02  0E8E               	movlw	142
 35383  017F04  ECC9  F0C7         	call	_eusartSend
 35384                           
 35385                           ;main.c: 110: eusartSend(9);
 35386  017F08  0E09               	movlw	9
 35387  017F0A  ECC9  F0C7         	call	_eusartSend
 35388  017F0E  AA9E               	btfss	3998,5,c	;volatile
 35389  017F10  D7FE               	goto	l2161
 35390                           
 35391                           ;main.c: 112: Cliff_Left = RCREG1;
 35392  017F12  CFAF F15C          	movff	4015,_Cliff_Left	;volatile
 35393                           
 35394                           ;main.c: 114: eusartSend(142);
 35395  017F16  0E8E               	movlw	142
 35396  017F18  ECC9  F0C7         	call	_eusartSend
 35397                           
 35398                           ;main.c: 115: eusartSend(10);
 35399  017F1C  0E0A               	movlw	10
 35400  017F1E  ECC9  F0C7         	call	_eusartSend
 35401  017F22  AA9E               	btfss	3998,5,c	;volatile
 35402  017F24  D7FE               	goto	l2164
 35403                           
 35404                           ;main.c: 117: Cliff_FLeft = RCREG1;
 35405  017F26  CFAF F15E          	movff	4015,_Cliff_FLeft	;volatile
 35406                           
 35407                           ;main.c: 119: eusartSend(142);
 35408  017F2A  0E8E               	movlw	142
 35409  017F2C  ECC9  F0C7         	call	_eusartSend
 35410                           
 35411                           ;main.c: 120: eusartSend(11);
 35412  017F30  0E0B               	movlw	11
 35413  017F32  ECC9  F0C7         	call	_eusartSend
 35414  017F36  AA9E               	btfss	3998,5,c	;volatile
 35415  017F38  D7FE               	goto	l2167
 35416                           
 35417                           ;main.c: 122: Cliff_FRight = RCREG1;
 35418  017F3A  CFAF F15F          	movff	4015,_Cliff_FRight	;volatile
 35419                           
 35420                           ;main.c: 124: eusartSend(142);
 35421  017F3E  0E8E               	movlw	142
 35422  017F40  ECC9  F0C7         	call	_eusartSend
 35423                           
 35424                           ;main.c: 125: eusartSend(12);
 35425  017F44  0E0C               	movlw	12
 35426  017F46  ECC9  F0C7         	call	_eusartSend
 35427  017F4A  AA9E               	btfss	3998,5,c	;volatile
 35428  017F4C  D7FE               	goto	l2170
 35429                           
 35430                           ;main.c: 127: Cliff_Right = RCREG1;
 35431  017F4E  CFAF F15D          	movff	4015,_Cliff_Right	;volatile
 35432                           
 35433                           ;main.c: 129: return 1;
 35434                           ;	Return value of _Get_Sensor_State is never used
 35435  017F52  0012               	return		;funcret
 35436  017F54                     __end_of_Get_Sensor_State:
 35437                           	opt stack 0
 35438                           tosu	equ	0xFFF
 35439                           tosh	equ	0xFFE
 35440                           tosl	equ	0xFFD
 35441                           pclath	equ	0xFFA
 35442                           tblptru	equ	0xFF8
 35443                           tblptrh	equ	0xFF7
 35444                           tblptrl	equ	0xFF6
 35445                           tablat	equ	0xFF5
 35446                           prodh	equ	0xFF4
 35447                           prodl	equ	0xFF3
 35448                           intcon	equ	0xFF2
 35449                           indf0	equ	0xFEF
 35450                           postinc0	equ	0xFEE
 35451                           fsr0h	equ	0xFEA
 35452                           fsr0l	equ	0xFE9
 35453                           wreg	equ	0xFE8
 35454                           indf1	equ	0xFE7
 35455                           postdec1	equ	0xFE5
 35456                           fsr1h	equ	0xFE2
 35457                           fsr1l	equ	0xFE1
 35458                           indf2	equ	0xFDF
 35459                           postinc2	equ	0xFDE
 35460                           postdec2	equ	0xFDD
 35461                           plusw2	equ	0xFDB
 35462                           fsr2h	equ	0xFDA
 35463                           fsr2l	equ	0xFD9
 35464                           status	equ	0xFD8
 35465                           
 35466 ;; *************** function _Drive *****************
 35467 ;; Defined at:
 35468 ;;		line 278 in file "dans.c"
 35469 ;; Parameters:    Size  Location     Type
 35470 ;;  SpeedL          2    1[BANK0 ] int 
 35471 ;;  SpeedR          2    3[BANK0 ] int 
 35472 ;; Auto vars:     Size  Location     Type
 35473 ;;		None
 35474 ;; Return value:  Size  Location     Type
 35475 ;;                  1    wreg      void 
 35476 ;; Registers used:
 35477 ;;		wreg, status,2, status,0, cstack
 35478 ;; Tracked objects:
 35479 ;;		On entry : 0/0
 35480 ;;		On exit  : 0/0
 35481 ;;		Unchanged: 0/0
 35482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35483 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35486 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35487 ;;Total ram usage:        4 bytes
 35488 ;; Hardware stack levels used:    1
 35489 ;; Hardware stack levels required when called:    8
 35490 ;; This function calls:
 35491 ;;		_eusartSend
 35492 ;; This function is called by:
 35493 ;;		_Travel
 35494 ;;		_Fix_Error
 35495 ;;		_Bump_Wall
 35496 ;; This function uses a non-reentrant model
 35497 ;;
 35498                           
 35499                           	psect	text156
 35500  018576                     __ptext156:
 35501                           	opt stack 0
 35502  018576                     _Drive:
 35503                           	opt stack 19
 35504                           
 35505                           ;dans.c: 279: if (SpeedL < 0) {
 35506                           
 35507                           ;incstack = 0
 35508  018576  0100               	movlb	0	; () banked
 35509  018578  AF62               	btfss	(Drive@SpeedL+1)& (0+255),7,b
 35510  01857A  D006               	goto	l2421
 35511                           
 35512                           ; BSR set to: 0
 35513                           ;dans.c: 280: SpeedL = -1 * SpeedL;
 35514  01857C  6D61               	negf	Drive@SpeedL& (0+255),b
 35515  01857E  1F62               	comf	(Drive@SpeedL+1)& (0+255),f,b
 35516  018580  B0D8               	btfsc	status,0,c
 35517  018582  2B62               	incf	(Drive@SpeedL+1)& (0+255),f,b
 35518                           
 35519                           ;dans.c: 281: SpeedL = ~SpeedL;
 35520  018584  1F61               	comf	Drive@SpeedL& (0+255),f,b
 35521  018586  1F62               	comf	(Drive@SpeedL+1)& (0+255),f,b
 35522  018588                     l2421:
 35523                           
 35524                           ; BSR set to: 0
 35525                           ;dans.c: 282: }
 35526                           ;dans.c: 283: if (SpeedR < 0) {
 35527                           
 35528                           ; BSR set to: 0
 35529  018588  AF64               	btfss	(Drive@SpeedR+1)& (0+255),7,b
 35530  01858A  D006               	goto	l2422
 35531                           
 35532                           ; BSR set to: 0
 35533                           ;dans.c: 284: SpeedR = -1 * SpeedR;
 35534  01858C  6D63               	negf	Drive@SpeedR& (0+255),b
 35535  01858E  1F64               	comf	(Drive@SpeedR+1)& (0+255),f,b
 35536  018590  B0D8               	btfsc	status,0,c
 35537  018592  2B64               	incf	(Drive@SpeedR+1)& (0+255),f,b
 35538                           
 35539                           ;dans.c: 285: SpeedR = ~SpeedR;
 35540  018594  1F63               	comf	Drive@SpeedR& (0+255),f,b
 35541  018596  1F64               	comf	(Drive@SpeedR+1)& (0+255),f,b
 35542  018598                     l2422:
 35543                           
 35544                           ; BSR set to: 0
 35545                           ;dans.c: 286: }
 35546                           ;dans.c: 288: eusartSend(145);
 35547                           
 35548                           ; BSR set to: 0
 35549  018598  0E91               	movlw	145
 35550  01859A  ECC9  F0C7         	call	_eusartSend
 35551                           
 35552                           ;dans.c: 289: eusartSend(((unsigned char)(((SpeedL)>>8)&0xFF)));
 35553  01859E  0100               	movlb	0	; () banked
 35554  0185A0  5162               	movf	(Drive@SpeedL+1)& (0+255),w,b
 35555  0185A2  ECC9  F0C7         	call	_eusartSend
 35556                           
 35557                           ;dans.c: 290: eusartSend(((unsigned char)((SpeedL)&0xFF)));
 35558  0185A6  0100               	movlb	0	; () banked
 35559  0185A8  5161               	movf	Drive@SpeedL& (0+255),w,b
 35560  0185AA  ECC9  F0C7         	call	_eusartSend
 35561                           
 35562                           ;dans.c: 291: eusartSend(((unsigned char)(((SpeedR)>>8)&0xFF)));
 35563  0185AE  0100               	movlb	0	; () banked
 35564  0185B0  5164               	movf	(Drive@SpeedR+1)& (0+255),w,b
 35565  0185B2  ECC9  F0C7         	call	_eusartSend
 35566                           
 35567                           ;dans.c: 292: eusartSend(((unsigned char)((SpeedR)&0xFF)));
 35568  0185B6  0100               	movlb	0	; () banked
 35569  0185B8  5163               	movf	Drive@SpeedR& (0+255),w,b
 35570  0185BA  ECC9  F0C7         	call	_eusartSend
 35571  0185BE  0012               	return		;funcret
 35572  0185C0                     __end_of_Drive:
 35573                           	opt stack 0
 35574                           tosu	equ	0xFFF
 35575                           tosh	equ	0xFFE
 35576                           tosl	equ	0xFFD
 35577                           pclath	equ	0xFFA
 35578                           tblptru	equ	0xFF8
 35579                           tblptrh	equ	0xFF7
 35580                           tblptrl	equ	0xFF6
 35581                           tablat	equ	0xFF5
 35582                           prodh	equ	0xFF4
 35583                           prodl	equ	0xFF3
 35584                           intcon	equ	0xFF2
 35585                           indf0	equ	0xFEF
 35586                           postinc0	equ	0xFEE
 35587                           fsr0h	equ	0xFEA
 35588                           fsr0l	equ	0xFE9
 35589                           wreg	equ	0xFE8
 35590                           indf1	equ	0xFE7
 35591                           postdec1	equ	0xFE5
 35592                           fsr1h	equ	0xFE2
 35593                           fsr1l	equ	0xFE1
 35594                           indf2	equ	0xFDF
 35595                           postinc2	equ	0xFDE
 35596                           postdec2	equ	0xFDD
 35597                           plusw2	equ	0xFDB
 35598                           fsr2h	equ	0xFDA
 35599                           fsr2l	equ	0xFD9
 35600                           status	equ	0xFD8
 35601                           
 35602 ;; *************** function _eusartSend *****************
 35603 ;; Defined at:
 35604 ;;		line 223 in file "dans.c"
 35605 ;; Parameters:    Size  Location     Type
 35606 ;;  sendChar        1    wreg     unsigned char 
 35607 ;; Auto vars:     Size  Location     Type
 35608 ;;  sendChar        1    0[BANK0 ] unsigned char 
 35609 ;; Return value:  Size  Location     Type
 35610 ;;                  1    wreg      void 
 35611 ;; Registers used:
 35612 ;;		wreg
 35613 ;; Tracked objects:
 35614 ;;		On entry : 0/0
 35615 ;;		On exit  : 0/0
 35616 ;;		Unchanged: 0/0
 35617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35619 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35621 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35622 ;;Total ram usage:        1 bytes
 35623 ;; Hardware stack levels used:    1
 35624 ;; Hardware stack levels required when called:    7
 35625 ;; This function calls:
 35626 ;;		Nothing
 35627 ;; This function is called by:
 35628 ;;		_Get_Sensor_State
 35629 ;;		_Robot_Init
 35630 ;;		_Drive
 35631 ;;		_UpdateDistance
 35632 ;;		_Robot_Stop
 35633 ;;		_Get_VirtualWall_State
 35634 ;;		_Detect_Victim
 35635 ;;		_Turn
 35636 ;;		_BangBang
 35637 ;;		_LEDOn
 35638 ;;		_LEDOff
 35639 ;;		_Get_BumpSensor_State
 35640 ;; This function uses a non-reentrant model
 35641 ;;
 35642                           
 35643                           	psect	text157
 35644  018F92                     __ptext157:
 35645                           	opt stack 0
 35646  018F92                     _eusartSend:
 35647                           	opt stack 22
 35648                           
 35649                           ;incstack = 0
 35650                           ;eusartSend@sendChar stored from wreg
 35651  018F92  0100               	movlb	0	; () banked
 35652  018F94  6F60               	movwf	eusartSend@sendChar& (0+255),b
 35653  018F96                     
 35654                           ;dans.c: 224: while (!TXSTA1bits.TRMT) {
 35655  018F96  A2AD               	btfss	4013,1,c	;volatile
 35656  018F98  D7FE               	goto	l15499
 35657                           
 35658                           ;dans.c: 225: };
 35659                           ;dans.c: 226: TXREG1 = sendChar;
 35660  018F9A  C060  FFAE         	movff	eusartSend@sendChar,4014	;volatile
 35661  018F9E  0012               	return		;funcret
 35662  018FA0                     __end_of_eusartSend:
 35663                           	opt stack 0
 35664                           tosu	equ	0xFFF
 35665                           tosh	equ	0xFFE
 35666                           tosl	equ	0xFFD
 35667                           pclath	equ	0xFFA
 35668                           tblptru	equ	0xFF8
 35669                           tblptrh	equ	0xFF7
 35670                           tblptrl	equ	0xFF6
 35671                           tablat	equ	0xFF5
 35672                           prodh	equ	0xFF4
 35673                           prodl	equ	0xFF3
 35674                           intcon	equ	0xFF2
 35675                           indf0	equ	0xFEF
 35676                           postinc0	equ	0xFEE
 35677                           fsr0h	equ	0xFEA
 35678                           fsr0l	equ	0xFE9
 35679                           wreg	equ	0xFE8
 35680                           indf1	equ	0xFE7
 35681                           postdec1	equ	0xFE5
 35682                           fsr1h	equ	0xFE2
 35683                           fsr1l	equ	0xFE1
 35684                           indf2	equ	0xFDF
 35685                           postinc2	equ	0xFDE
 35686                           postdec2	equ	0xFDD
 35687                           plusw2	equ	0xFDB
 35688                           fsr2h	equ	0xFDA
 35689                           fsr2l	equ	0xFD9
 35690                           status	equ	0xFD8
 35691                           
 35692 ;; *************** function _ISR_Function *****************
 35693 ;; Defined at:
 35694 ;;		line 38 in file "Library/ISR.c"
 35695 ;; Parameters:    Size  Location     Type
 35696 ;;		None
 35697 ;; Auto vars:     Size  Location     Type
 35698 ;;		None
 35699 ;; Return value:  Size  Location     Type
 35700 ;;                  1    wreg      void 
 35701 ;; Registers used:
 35702 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35703 ;; Tracked objects:
 35704 ;;		On entry : 0/0
 35705 ;;		On exit  : 0/0
 35706 ;;		Unchanged: 0/0
 35707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35710 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35711 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35712 ;;Total ram usage:       18 bytes
 35713 ;; Hardware stack levels used:    1
 35714 ;; Hardware stack levels required when called:    6
 35715 ;; This function calls:
 35716 ;;		_Timer0_ISR
 35717 ;; This function is called by:
 35718 ;;		Interrupt level 2
 35719 ;; This function uses a non-reentrant model
 35720 ;;
 35721                           
 35722                           	psect	intcode
 35723  001408                     __pintcode:
 35724                           	opt stack 0
 35725  001408                     _ISR_Function:
 35726                           	opt stack 13
 35727                           
 35728                           ;incstack = 0
 35729  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 35730  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 35731  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 35732  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 35733  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 35734  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 35735  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 35736  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 35737  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 35738  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 35739  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 35740  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 35741  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 35742  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 35743  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 35744  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 35745  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 35746  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 35747  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 35748                           
 35749                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 35750  001452  92F2               	bcf	intcon,1,c	;volatile
 35751                           
 35752                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 35753  001454  B4F2               	btfsc	intcon,2,c	;volatile
 35754  001456  AAF2               	btfss	intcon,5,c	;volatile
 35755  001458  D002               	goto	i2l1590
 35756                           
 35757                           ;ISR.c: 68: Timer0_ISR();
 35758  00145A  ECF8  F0C5         	call	_Timer0_ISR	;wreg free
 35759  00145E                     i2l1590:
 35760  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 35761  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 35762  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 35763  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 35764  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 35765  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 35766  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 35767  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 35768  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 35769  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 35770  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 35771  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 35772  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 35773  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 35774  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 35775  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 35776  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 35777  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 35778  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 35779  0014A8  0011               	retfie		f
 35780  0014AA                     __end_of_ISR_Function:
 35781                           	opt stack 0
 35782                           tosu	equ	0xFFF
 35783                           tosh	equ	0xFFE
 35784                           tosl	equ	0xFFD
 35785                           pclatu	equ	0xFFB
 35786                           pclath	equ	0xFFA
 35787                           tblptru	equ	0xFF8
 35788                           tblptrh	equ	0xFF7
 35789                           tblptrl	equ	0xFF6
 35790                           tablat	equ	0xFF5
 35791                           prodh	equ	0xFF4
 35792                           prodl	equ	0xFF3
 35793                           intcon	equ	0xFF2
 35794                           indf0	equ	0xFEF
 35795                           postinc0	equ	0xFEE
 35796                           fsr0h	equ	0xFEA
 35797                           fsr0l	equ	0xFE9
 35798                           wreg	equ	0xFE8
 35799                           indf1	equ	0xFE7
 35800                           postdec1	equ	0xFE5
 35801                           fsr1h	equ	0xFE2
 35802                           fsr1l	equ	0xFE1
 35803                           indf2	equ	0xFDF
 35804                           postinc2	equ	0xFDE
 35805                           postdec2	equ	0xFDD
 35806                           plusw2	equ	0xFDB
 35807                           fsr2h	equ	0xFDA
 35808                           fsr2l	equ	0xFD9
 35809                           status	equ	0xFD8
 35810                           
 35811 ;; *************** function _Timer0_ISR *****************
 35812 ;; Defined at:
 35813 ;;		line 94 in file "Library/Timer0.c"
 35814 ;; Parameters:    Size  Location     Type
 35815 ;;		None
 35816 ;; Auto vars:     Size  Location     Type
 35817 ;;		None
 35818 ;; Return value:  Size  Location     Type
 35819 ;;                  1    wreg      void 
 35820 ;; Registers used:
 35821 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35822 ;; Tracked objects:
 35823 ;;		On entry : 0/0
 35824 ;;		On exit  : 0/0
 35825 ;;		Unchanged: 0/0
 35826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35831 ;;Total ram usage:        0 bytes
 35832 ;; Hardware stack levels used:    1
 35833 ;; Hardware stack levels required when called:    5
 35834 ;; This function calls:
 35835 ;;		Absolute function
 35836 ;;		i2_Motor_Step
 35837 ;;		i2_Timer0_Stop
 35838 ;; This function is called by:
 35839 ;;		_ISR_Function
 35840 ;; This function uses a non-reentrant model
 35841 ;;
 35842                           
 35843                           	psect	text159
 35844  018BF0                     __ptext159:
 35845                           	opt stack 0
 35846  018BF0                     _Timer0_ISR:
 35847                           	opt stack 13
 35848                           
 35849                           ;Timer0.c: 96: Timer0_Stop();
 35850                           
 35851                           ;incstack = 0
 35852  018BF0  EC03  F0C8         	call	i2_Timer0_Stop	;wreg free
 35853                           
 35854                           ;Timer0.c: 99: if (gISR != 0)
 35855  018BF4  0101               	movlb	1	; () banked
 35856  018BF6  5108               	movf	_gISR& (0+255),w,b
 35857  018BF8  1109               	iorwf	(_gISR+1)& (0+255),w,b
 35858  018BFA  110A               	iorwf	(_gISR+2)& (0+255),w,b
 35859  018BFC  B4D8               	btfsc	status,2,c
 35860  018BFE  0012               	return	
 35861                           
 35862                           ; BSR set to: 1
 35863                           ;Timer0.c: 100: gISR();
 35864  018C00  D801               	call	i2u1616_48
 35865  018C02  0012               	return	
 35866  018C04                     i2u1616_48:
 35867  018C04  0005               	push	
 35868  018C06  6EFA               	movwf	pclath,c
 35869  018C08  5108               	movf	_gISR& (0+255),w,b
 35870  018C0A  6EFD               	movwf	tosl,c
 35871  018C0C  5109               	movf	(_gISR+1)& (0+255),w,b
 35872  018C0E  6EFE               	movwf	tosh,c
 35873  018C10  510A               	movf	(_gISR+2)& (0+255),w,b
 35874  018C12  6EFF               	movwf	tosu,c
 35875  018C14  50FA               	movf	pclath,w,c
 35876  018C16  0012               	return		;indir
 35877  018C18                     __end_of_Timer0_ISR:
 35878                           	opt stack 0
 35879                           tosu	equ	0xFFF
 35880                           tosh	equ	0xFFE
 35881                           tosl	equ	0xFFD
 35882                           pclatu	equ	0xFFB
 35883                           pclath	equ	0xFFA
 35884                           tblptru	equ	0xFF8
 35885                           tblptrh	equ	0xFF7
 35886                           tblptrl	equ	0xFF6
 35887                           tablat	equ	0xFF5
 35888                           prodh	equ	0xFF4
 35889                           prodl	equ	0xFF3
 35890                           intcon	equ	0xFF2
 35891                           indf0	equ	0xFEF
 35892                           postinc0	equ	0xFEE
 35893                           fsr0h	equ	0xFEA
 35894                           fsr0l	equ	0xFE9
 35895                           wreg	equ	0xFE8
 35896                           indf1	equ	0xFE7
 35897                           postdec1	equ	0xFE5
 35898                           fsr1h	equ	0xFE2
 35899                           fsr1l	equ	0xFE1
 35900                           indf2	equ	0xFDF
 35901                           postinc2	equ	0xFDE
 35902                           postdec2	equ	0xFDD
 35903                           plusw2	equ	0xFDB
 35904                           fsr2h	equ	0xFDA
 35905                           fsr2l	equ	0xFD9
 35906                           status	equ	0xFD8
 35907                           
 35908 ;; *************** function i2_Motor_Step *****************
 35909 ;; Defined at:
 35910 ;;		line 75 in file "Library/Motor.c"
 35911 ;; Parameters:    Size  Location     Type
 35912 ;;		None
 35913 ;; Auto vars:     Size  Location     Type
 35914 ;;		None
 35915 ;; Return value:  Size  Location     Type
 35916 ;;                  1    wreg      void 
 35917 ;; Registers used:
 35918 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35919 ;; Tracked objects:
 35920 ;;		On entry : 0/0
 35921 ;;		On exit  : 0/0
 35922 ;;		Unchanged: 0/0
 35923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35926 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35927 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35928 ;;Total ram usage:        2 bytes
 35929 ;; Hardware stack levels used:    1
 35930 ;; Hardware stack levels required when called:    4
 35931 ;; This function calls:
 35932 ;;		i2_MXK_Queue
 35933 ;;		i2_MXK_Release
 35934 ;;		i2_MXK_SwitchTo
 35935 ;;		i2_Port_SetPin
 35936 ;;		i2_Timer0_Restart
 35937 ;;		i2_Timer0_Stop
 35938 ;; This function is called by:
 35939 ;; This function uses a non-reentrant model
 35940 ;;
 35941                           
 35942                           	psect	text160
 35943  016906                     __ptext160:
 35944                           	opt stack 0
 35945  016906                     i2_Motor_Step:
 35946                           	opt stack 13
 35947                           
 35948                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 35949                           
 35950                           ;incstack = 0
 35951  016906  EE20 F004          	lfsr	2,4
 35952  01690A  5036               	movf	_lMotor,w,c
 35953  01690C  26D9               	addwf	fsr2l,f,c
 35954  01690E  5037               	movf	_lMotor+1,w,c
 35955  016910  22DA               	addwfc	fsr2h,f,c
 35956  016912  50DF               	movf	indf2,w,c
 35957  016914  ECDD  F0C4         	call	i2_MXK_SwitchTo
 35958  016918  0900               	iorlw	0
 35959  01691A  B4D8               	btfsc	status,2,c
 35960  01691C  D06A               	goto	i2l1627
 35961                           
 35962                           ;Motor.c: 78: {
 35963                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 35964  01691E  C036  FFD9         	movff	_lMotor,fsr2l
 35965  016922  C037  FFDA         	movff	_lMotor+1,fsr2h
 35966  016926  50DE               	movf	postinc2,w,c
 35967  016928  10DE               	iorwf	postinc2,w,c
 35968  01692A  B4D8               	btfsc	status,2,c
 35969  01692C  D05D               	goto	i2l1628
 35970                           
 35971                           ;Motor.c: 80: {
 35972                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 35973  01692E  C036  FFD9         	movff	_lMotor,fsr2l
 35974  016932  C037  FFDA         	movff	_lMotor+1,fsr2h
 35975  016936  0E01               	movlw	1
 35976  016938  BEDB               	btfsc	plusw2,7,c
 35977  01693A  D022               	goto	i2l1629
 35978  01693C  0E01               	movlw	1
 35979  01693E  50DB               	movf	plusw2,w,c
 35980  016940  E103               	bnz	i2u931_40
 35981  016942  04DE               	decf	postinc2,w,c
 35982  016944  A0D8               	btfss	status,0,c
 35983  016946  D01C               	goto	i2l1629
 35984  016948                     i2u931_40:
 35985                           
 35986                           ;Motor.c: 83: {
 35987                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 35988  016948  C036  FFD9         	movff	_lMotor,fsr2l
 35989  01694C  C037  FFDA         	movff	_lMotor+1,fsr2h
 35990  016950  28DE               	incf	postinc2,w,c
 35991  016952  E104               	bnz	i2u932_40
 35992  016954  0E7F               	movlw	127
 35993  016956  18DE               	xorwf	postinc2,w,c
 35994  016958  B4D8               	btfsc	status,2,c
 35995  01695A  D007               	goto	i2l1630
 35996  01695C                     i2u932_40:
 35997                           
 35998                           ;Motor.c: 85: lMotor->mDelta --;
 35999  01695C  C036  FFD9         	movff	_lMotor,fsr2l
 36000  016960  C037  FFDA         	movff	_lMotor+1,fsr2h
 36001  016964  06DE               	decf	postinc2,f,c
 36002  016966  0E00               	movlw	0
 36003  016968  5ADD               	subwfb	postdec2,f,c
 36004  01696A                     i2l1630:
 36005                           
 36006                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 36007  01696A  0E65               	movlw	low _PortE
 36008  01696C  6E10               	movwf	i2Port_SetPin@pInput,c
 36009  01696E  0E01               	movlw	high _PortE
 36010  016970  6E11               	movwf	i2Port_SetPin@pInput+1,c
 36011  016972  0E00               	movlw	0
 36012  016974  6E12               	movwf	i2Port_SetPin@pPin,c
 36013  016976  0E01               	movlw	1
 36014  016978  6E13               	movwf	i2Port_SetPin@pValue,c
 36015  01697A  EC22  F0B8         	call	i2_Port_SetPin	;wreg free
 36016                           
 36017                           ;Motor.c: 88: }
 36018  01697E  D01B               	goto	i2l1631
 36019  016980                     i2l1629:
 36020                           
 36021                           ;Motor.c: 89: else
 36022                           ;Motor.c: 90: {
 36023                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 36024  016980  C036  FFD9         	movff	_lMotor,fsr2l
 36025  016984  C037  FFDA         	movff	_lMotor+1,fsr2h
 36026  016988  04DE               	decf	postinc2,w,c
 36027  01698A  E104               	bnz	i2u933_40
 36028  01698C  0E80               	movlw	128
 36029  01698E  18DE               	xorwf	postinc2,w,c
 36030  016990  B4D8               	btfsc	status,2,c
 36031  016992  D007               	goto	i2l1632
 36032  016994                     i2u933_40:
 36033                           
 36034                           ;Motor.c: 92: lMotor->mDelta ++;
 36035  016994  C036  FFD9         	movff	_lMotor,fsr2l
 36036  016998  C037  FFDA         	movff	_lMotor+1,fsr2h
 36037  01699C  2ADE               	incf	postinc2,f,c
 36038  01699E  0E00               	movlw	0
 36039  0169A0  22DD               	addwfc	postdec2,f,c
 36040  0169A2                     i2l1632:
 36041                           
 36042                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 36043  0169A2  0E65               	movlw	low _PortE
 36044  0169A4  6E10               	movwf	i2Port_SetPin@pInput,c
 36045  0169A6  0E01               	movlw	high _PortE
 36046  0169A8  6E11               	movwf	i2Port_SetPin@pInput+1,c
 36047  0169AA  0E00               	movlw	0
 36048  0169AC  6E12               	movwf	i2Port_SetPin@pPin,c
 36049  0169AE  0E00               	movlw	0
 36050  0169B0  6E13               	movwf	i2Port_SetPin@pValue,c
 36051  0169B2  EC22  F0B8         	call	i2_Port_SetPin	;wreg free
 36052  0169B6                     i2l1631:
 36053                           
 36054                           ;Motor.c: 95: }
 36055                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 36056  0169B6  0E65               	movlw	low _PortE
 36057  0169B8  6E10               	movwf	i2Port_SetPin@pInput,c
 36058  0169BA  0E01               	movlw	high _PortE
 36059  0169BC  6E11               	movwf	i2Port_SetPin@pInput+1,c
 36060  0169BE  0E01               	movlw	1
 36061  0169C0  6E12               	movwf	i2Port_SetPin@pPin,c
 36062  0169C2  0E01               	movlw	1
 36063  0169C4  6E13               	movwf	i2Port_SetPin@pValue,c
 36064  0169C6  EC22  F0B8         	call	i2_Port_SetPin	;wreg free
 36065                           
 36066                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 36067  0169CA  0E65               	movlw	low _PortE
 36068  0169CC  6E10               	movwf	i2Port_SetPin@pInput,c
 36069  0169CE  0E01               	movlw	high _PortE
 36070  0169D0  6E11               	movwf	i2Port_SetPin@pInput+1,c
 36071  0169D2  0E01               	movlw	1
 36072  0169D4  6E12               	movwf	i2Port_SetPin@pPin,c
 36073  0169D6  0E00               	movlw	0
 36074  0169D8  6E13               	movwf	i2Port_SetPin@pValue,c
 36075  0169DA  EC22  F0B8         	call	i2_Port_SetPin	;wreg free
 36076                           
 36077                           ;Motor.c: 101: MXK_Release();
 36078  0169DE  EC06  F0C8         	call	i2_MXK_Release	;wreg free
 36079                           
 36080                           ;Motor.c: 102: Timer0_Restart();
 36081  0169E2  ECDD  F0C7         	call	i2_Timer0_Restart	;wreg free
 36082                           
 36083                           ;Motor.c: 103: return;
 36084  0169E6  0012               	return	
 36085  0169E8                     i2l1628:
 36086                           
 36087                           ;Motor.c: 104: }
 36088                           ;Motor.c: 105: MXK_Release();
 36089  0169E8  EC06  F0C8         	call	i2_MXK_Release	;wreg free
 36090                           
 36091                           ;Motor.c: 106: Timer0_Stop();
 36092  0169EC  EC03  F0C8         	call	i2_Timer0_Stop	;wreg free
 36093                           
 36094                           ;Motor.c: 107: return;
 36095  0169F0  0012               	return	
 36096  0169F2                     i2l1627:
 36097                           
 36098                           ;Motor.c: 108: }
 36099                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 36100  0169F2  C10B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 36101  0169F6  C10C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 36102  0169FA  C10D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 36103  0169FE  ECD0  F0C7         	call	i2_MXK_Queue	;wreg free
 36104  016A02  0012               	return		;funcret
 36105  016A04                     __end_ofi2_Motor_Step:
 36106                           	opt stack 0
 36107                           tosu	equ	0xFFF
 36108                           tosh	equ	0xFFE
 36109                           tosl	equ	0xFFD
 36110                           pclatu	equ	0xFFB
 36111                           pclath	equ	0xFFA
 36112                           tblptru	equ	0xFF8
 36113                           tblptrh	equ	0xFF7
 36114                           tblptrl	equ	0xFF6
 36115                           tablat	equ	0xFF5
 36116                           prodh	equ	0xFF4
 36117                           prodl	equ	0xFF3
 36118                           intcon	equ	0xFF2
 36119                           indf0	equ	0xFEF
 36120                           postinc0	equ	0xFEE
 36121                           fsr0h	equ	0xFEA
 36122                           fsr0l	equ	0xFE9
 36123                           wreg	equ	0xFE8
 36124                           indf1	equ	0xFE7
 36125                           postdec1	equ	0xFE5
 36126                           fsr1h	equ	0xFE2
 36127                           fsr1l	equ	0xFE1
 36128                           indf2	equ	0xFDF
 36129                           postinc2	equ	0xFDE
 36130                           postdec2	equ	0xFDD
 36131                           plusw2	equ	0xFDB
 36132                           fsr2h	equ	0xFDA
 36133                           fsr2l	equ	0xFD9
 36134                           status	equ	0xFD8
 36135                           
 36136 ;; *************** function i2_Timer0_Stop *****************
 36137 ;; Defined at:
 36138 ;;		line 89 in file "Library/Timer0.c"
 36139 ;; Parameters:    Size  Location     Type
 36140 ;;		None
 36141 ;; Auto vars:     Size  Location     Type
 36142 ;;		None
 36143 ;; Return value:  Size  Location     Type
 36144 ;;                  1    wreg      void 
 36145 ;; Registers used:
 36146 ;;		None
 36147 ;; Tracked objects:
 36148 ;;		On entry : 0/0
 36149 ;;		On exit  : 0/0
 36150 ;;		Unchanged: 0/0
 36151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36156 ;;Total ram usage:        0 bytes
 36157 ;; Hardware stack levels used:    1
 36158 ;; This function calls:
 36159 ;;		Nothing
 36160 ;; This function is called by:
 36161 ;;		_Timer0_ISR
 36162 ;;		i2_Motor_Step
 36163 ;; This function uses a non-reentrant model
 36164 ;;
 36165                           
 36166                           	psect	text161
 36167  019006                     __ptext161:
 36168                           	opt stack 0
 36169  019006                     i2_Timer0_Stop:
 36170                           	opt stack 17
 36171                           
 36172                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 36173                           
 36174                           ;incstack = 0
 36175  019006  9AF2               	bcf	intcon,5,c	;volatile
 36176                           
 36177                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 36178  019008  94F2               	bcf	intcon,2,c	;volatile
 36179  01900A  0012               	return		;funcret
 36180  01900C                     __end_ofi2_Timer0_Stop:
 36181                           	opt stack 0
 36182                           tosu	equ	0xFFF
 36183                           tosh	equ	0xFFE
 36184                           tosl	equ	0xFFD
 36185                           pclatu	equ	0xFFB
 36186                           pclath	equ	0xFFA
 36187                           tblptru	equ	0xFF8
 36188                           tblptrh	equ	0xFF7
 36189                           tblptrl	equ	0xFF6
 36190                           tablat	equ	0xFF5
 36191                           prodh	equ	0xFF4
 36192                           prodl	equ	0xFF3
 36193                           intcon	equ	0xFF2
 36194                           indf0	equ	0xFEF
 36195                           postinc0	equ	0xFEE
 36196                           fsr0h	equ	0xFEA
 36197                           fsr0l	equ	0xFE9
 36198                           wreg	equ	0xFE8
 36199                           indf1	equ	0xFE7
 36200                           postdec1	equ	0xFE5
 36201                           fsr1h	equ	0xFE2
 36202                           fsr1l	equ	0xFE1
 36203                           indf2	equ	0xFDF
 36204                           postinc2	equ	0xFDE
 36205                           postdec2	equ	0xFDD
 36206                           plusw2	equ	0xFDB
 36207                           fsr2h	equ	0xFDA
 36208                           fsr2l	equ	0xFD9
 36209                           status	equ	0xFD8
 36210                           
 36211 ;; *************** function i2_Timer0_Restart *****************
 36212 ;; Defined at:
 36213 ;;		line 83 in file "Library/Timer0.c"
 36214 ;; Parameters:    Size  Location     Type
 36215 ;;		None
 36216 ;; Auto vars:     Size  Location     Type
 36217 ;;		None
 36218 ;; Return value:  Size  Location     Type
 36219 ;;                  1    wreg      void 
 36220 ;; Registers used:
 36221 ;;		None
 36222 ;; Tracked objects:
 36223 ;;		On entry : 0/0
 36224 ;;		On exit  : 0/0
 36225 ;;		Unchanged: 0/0
 36226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36231 ;;Total ram usage:        0 bytes
 36232 ;; Hardware stack levels used:    1
 36233 ;; This function calls:
 36234 ;;		Nothing
 36235 ;; This function is called by:
 36236 ;;		i2_Motor_Step
 36237 ;; This function uses a non-reentrant model
 36238 ;;
 36239                           
 36240                           	psect	text162
 36241  018FBA                     __ptext162:
 36242                           	opt stack 0
 36243  018FBA                     i2_Timer0_Restart:
 36244                           	opt stack 16
 36245                           
 36246                           ;Timer0.c: 85: TMR0 = COUNTER;
 36247                           
 36248                           ;incstack = 0
 36249  018FBA  C034  FFD6         	movff	_COUNTER,4054	;volatile
 36250  018FBE  C035  FFD7         	movff	_COUNTER+1,4055	;volatile
 36251                           
 36252                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 36253  018FC2  8AF2               	bsf	intcon,5,c	;volatile
 36254  018FC4  0012               	return		;funcret
 36255  018FC6                     __end_ofi2_Timer0_Restart:
 36256                           	opt stack 0
 36257                           tosu	equ	0xFFF
 36258                           tosh	equ	0xFFE
 36259                           tosl	equ	0xFFD
 36260                           pclatu	equ	0xFFB
 36261                           pclath	equ	0xFFA
 36262                           tblptru	equ	0xFF8
 36263                           tblptrh	equ	0xFF7
 36264                           tblptrl	equ	0xFF6
 36265                           tablat	equ	0xFF5
 36266                           prodh	equ	0xFF4
 36267                           prodl	equ	0xFF3
 36268                           intcon	equ	0xFF2
 36269                           indf0	equ	0xFEF
 36270                           postinc0	equ	0xFEE
 36271                           fsr0h	equ	0xFEA
 36272                           fsr0l	equ	0xFE9
 36273                           wreg	equ	0xFE8
 36274                           indf1	equ	0xFE7
 36275                           postdec1	equ	0xFE5
 36276                           fsr1h	equ	0xFE2
 36277                           fsr1l	equ	0xFE1
 36278                           indf2	equ	0xFDF
 36279                           postinc2	equ	0xFDE
 36280                           postdec2	equ	0xFDD
 36281                           plusw2	equ	0xFDB
 36282                           fsr2h	equ	0xFDA
 36283                           fsr2l	equ	0xFD9
 36284                           status	equ	0xFD8
 36285                           
 36286 ;; *************** function i2_Port_SetPin *****************
 36287 ;; Defined at:
 36288 ;;		line 247 in file "Library/Port.c"
 36289 ;; Parameters:    Size  Location     Type
 36290 ;;  pInput          2   15[COMRAM] const PTR struct Port
 36291 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 36292 ;;  pPin            1   17[COMRAM] enum E6750
 36293 ;;  pValue          1   18[COMRAM] unsigned char 
 36294 ;; Auto vars:     Size  Location     Type
 36295 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 36296 ;; Return value:  Size  Location     Type
 36297 ;;                  1    wreg      void 
 36298 ;; Registers used:
 36299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 36300 ;; Tracked objects:
 36301 ;;		On entry : 0/0
 36302 ;;		On exit  : 0/0
 36303 ;;		Unchanged: 0/0
 36304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36305 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36306 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36308 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36309 ;;Total ram usage:        5 bytes
 36310 ;; Hardware stack levels used:    1
 36311 ;; Hardware stack levels required when called:    3
 36312 ;; This function calls:
 36313 ;;		i2_Byte_SetBit
 36314 ;;		i2_Word_GetPair
 36315 ;; This function is called by:
 36316 ;;		i2_Motor_Step
 36317 ;; This function uses a non-reentrant model
 36318 ;;
 36319                           
 36320                           	psect	text163
 36321  017044                     __ptext163:
 36322                           	opt stack 0
 36323  017044                     i2_Port_SetPin:
 36324                           	opt stack 13
 36325                           
 36326                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 36327                           
 36328                           ;incstack = 0
 36329  017044  0E08               	movlw	8
 36330  017046  2410               	addwf	i2Port_SetPin@pInput,w,c
 36331  017048  6E0D               	movwf	i2Word_GetPair@pInput,c
 36332  01704A  0E00               	movlw	0
 36333  01704C  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 36334  01704E  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 36335  017050  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 36336  017054  EC8B  F0C5         	call	i2_Word_GetPair	;wreg free
 36337  017058  6E14               	movwf	i2Port_SetPin@Type,c
 36338                           
 36339                           ;Port.c: 250: switch (Type)
 36340  01705A  D03B               	goto	i2l427
 36341  01705C                     
 36342                           ;Port.c: 256: pValue &= 1;
 36343  01705C  0E01               	movlw	1
 36344  01705E  1613               	andwf	i2Port_SetPin@pValue,f,c
 36345                           
 36346                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 36347  017060  EE20 F002          	lfsr	2,2
 36348  017064  5010               	movf	i2Port_SetPin@pInput,w,c
 36349  017066  26D9               	addwf	fsr2l,f,c
 36350  017068  5011               	movf	i2Port_SetPin@pInput+1,w,c
 36351  01706A  22DA               	addwfc	fsr2h,f,c
 36352  01706C  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 36353  017070  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 36354  017074  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 36355  017078  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 36356  01707C  EC26  F0C2         	call	i2_Byte_SetBit	;wreg free
 36357                           
 36358                           ;Port.c: 258: break;
 36359  017080  0012               	return	
 36360  017082                     
 36361                           ;Port.c: 261: pValue &= 1;
 36362  017082  0E01               	movlw	1
 36363  017084  1613               	andwf	i2Port_SetPin@pValue,f,c
 36364                           
 36365                           ;Port.c: 262: pValue ^= 1;
 36366  017086  0E01               	movlw	1
 36367  017088  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 36368                           
 36369                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 36370  01708A  EE20 F002          	lfsr	2,2
 36371  01708E  5010               	movf	i2Port_SetPin@pInput,w,c
 36372  017090  26D9               	addwf	fsr2l,f,c
 36373  017092  5011               	movf	i2Port_SetPin@pInput+1,w,c
 36374  017094  22DA               	addwfc	fsr2h,f,c
 36375  017096  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 36376  01709A  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 36377  01709E  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 36378  0170A2  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 36379  0170A6  EC26  F0C2         	call	i2_Byte_SetBit	;wreg free
 36380                           
 36381                           ;Port.c: 264: break;
 36382  0170AA  0012               	return	
 36383  0170AC                     
 36384                           ;Port.c: 266: pValue &= 1;
 36385  0170AC  0E01               	movlw	1
 36386  0170AE  1613               	andwf	i2Port_SetPin@pValue,f,c
 36387                           
 36388                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 36389  0170B0  EE20 F004          	lfsr	2,4
 36390  0170B4  5010               	movf	i2Port_SetPin@pInput,w,c
 36391  0170B6  26D9               	addwf	fsr2l,f,c
 36392  0170B8  5011               	movf	i2Port_SetPin@pInput+1,w,c
 36393  0170BA  22DA               	addwfc	fsr2h,f,c
 36394  0170BC  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 36395  0170C0  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 36396  0170C4  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 36397  0170C8  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 36398  0170CC  EC26  F0C2         	call	i2_Byte_SetBit	;wreg free
 36399                           
 36400                           ;Port.c: 269: }
 36401                           
 36402                           ;Port.c: 268: break;
 36403  0170D0  0012               	return	
 36404  0170D2                     i2l427:
 36405  0170D2  5014               	movf	i2Port_SetPin@Type,w,c
 36406                           
 36407                           ; Switch size 1, requested type "space"
 36408                           ; Number of cases is 4, Range of values is 0 to 3
 36409                           ; switch strategies available:
 36410                           ; Name         Instructions Cycles
 36411                           ; simple_byte           13     7 (average)
 36412                           ;	Chosen strategy is simple_byte
 36413  0170D4  0A00               	xorlw	0	; case 0
 36414  0170D6  B4D8               	btfsc	status,2,c
 36415  0170D8  0012               	return	
 36416  0170DA  0A01               	xorlw	1	; case 1
 36417  0170DC  B4D8               	btfsc	status,2,c
 36418  0170DE  D7BE               	goto	i2l430
 36419  0170E0  0A03               	xorlw	3	; case 2
 36420  0170E2  B4D8               	btfsc	status,2,c
 36421  0170E4  D7CE               	goto	i2l432
 36422  0170E6  0A01               	xorlw	1	; case 3
 36423  0170E8  A4D8               	btfss	status,2,c
 36424  0170EA  0012               	return	
 36425  0170EC  D7DF               	goto	i2l433
 36426  0170EE                     __end_ofi2_Port_SetPin:
 36427                           	opt stack 0
 36428                           tosu	equ	0xFFF
 36429                           tosh	equ	0xFFE
 36430                           tosl	equ	0xFFD
 36431                           pclatu	equ	0xFFB
 36432                           pclath	equ	0xFFA
 36433                           tblptru	equ	0xFF8
 36434                           tblptrh	equ	0xFF7
 36435                           tblptrl	equ	0xFF6
 36436                           tablat	equ	0xFF5
 36437                           prodh	equ	0xFF4
 36438                           prodl	equ	0xFF3
 36439                           intcon	equ	0xFF2
 36440                           indf0	equ	0xFEF
 36441                           postinc0	equ	0xFEE
 36442                           fsr0h	equ	0xFEA
 36443                           fsr0l	equ	0xFE9
 36444                           wreg	equ	0xFE8
 36445                           indf1	equ	0xFE7
 36446                           postdec1	equ	0xFE5
 36447                           fsr1h	equ	0xFE2
 36448                           fsr1l	equ	0xFE1
 36449                           indf2	equ	0xFDF
 36450                           postinc2	equ	0xFDE
 36451                           postdec2	equ	0xFDD
 36452                           plusw2	equ	0xFDB
 36453                           fsr2h	equ	0xFDA
 36454                           fsr2l	equ	0xFD9
 36455                           status	equ	0xFD8
 36456                           
 36457 ;; *************** function i2_Word_GetPair *****************
 36458 ;; Defined at:
 36459 ;;		line 156 in file "Library/Types.c"
 36460 ;; Parameters:    Size  Location     Type
 36461 ;;  pInput          2   12[COMRAM] PTR struct Word
 36462 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 36463 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 36464 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 36465 ;;		 -> PortC(10), PortF(10), NULL(0), 
 36466 ;;  pPair           1   14[COMRAM] unsigned char 
 36467 ;; Auto vars:     Size  Location     Type
 36468 ;;		None
 36469 ;; Return value:  Size  Location     Type
 36470 ;;                  1    wreg      unsigned char 
 36471 ;; Registers used:
 36472 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 36473 ;; Tracked objects:
 36474 ;;		On entry : 0/0
 36475 ;;		On exit  : 0/0
 36476 ;;		Unchanged: 0/0
 36477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36478 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36481 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36482 ;;Total ram usage:        3 bytes
 36483 ;; Hardware stack levels used:    1
 36484 ;; Hardware stack levels required when called:    2
 36485 ;; This function calls:
 36486 ;;		i2_Byte_GetPair
 36487 ;; This function is called by:
 36488 ;;		i2_Port_SetPin
 36489 ;; This function uses a non-reentrant model
 36490 ;;
 36491                           
 36492                           	psect	text164
 36493  018B16                     __ptext164:
 36494                           	opt stack 0
 36495  018B16                     i2_Word_GetPair:
 36496                           	opt stack 13
 36497                           
 36498                           ;Types.c: 158: if (pPair >= 4)
 36499                           
 36500                           ;incstack = 0
 36501  018B16  0E03               	movlw	3
 36502  018B18  640F               	cpfsgt	i2Word_GetPair@pPair,c
 36503  018B1A  D00C               	goto	i2l781
 36504                           
 36505                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 36506  018B1C  0E01               	movlw	1
 36507  018B1E  240D               	addwf	i2Word_GetPair@pInput,w,c
 36508  018B20  6E0A               	movwf	i2Byte_GetPair@pInput,c
 36509  018B22  0E00               	movlw	0
 36510  018B24  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 36511  018B26  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 36512  018B28  500F               	movf	i2Word_GetPair@pPair,w,c
 36513  018B2A  0FFC               	addlw	252
 36514  018B2C  6E0C               	movwf	i2Byte_GetPair@pPair,c
 36515  018B2E  ECCC  F0C6         	call	i2_Byte_GetPair	;wreg free
 36516  018B32  0012               	return	
 36517  018B34                     i2l781:
 36518                           
 36519                           ;Types.c: 160: else
 36520                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 36521  018B34  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 36522  018B38  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 36523  018B3C  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 36524  018B40  ECCC  F0C6         	call	i2_Byte_GetPair	;wreg free
 36525  018B44  0012               	return	
 36526  018B46                     __end_ofi2_Word_GetPair:
 36527                           	opt stack 0
 36528                           tosu	equ	0xFFF
 36529                           tosh	equ	0xFFE
 36530                           tosl	equ	0xFFD
 36531                           pclatu	equ	0xFFB
 36532                           pclath	equ	0xFFA
 36533                           tblptru	equ	0xFF8
 36534                           tblptrh	equ	0xFF7
 36535                           tblptrl	equ	0xFF6
 36536                           tablat	equ	0xFF5
 36537                           prodh	equ	0xFF4
 36538                           prodl	equ	0xFF3
 36539                           intcon	equ	0xFF2
 36540                           indf0	equ	0xFEF
 36541                           postinc0	equ	0xFEE
 36542                           fsr0h	equ	0xFEA
 36543                           fsr0l	equ	0xFE9
 36544                           wreg	equ	0xFE8
 36545                           indf1	equ	0xFE7
 36546                           postdec1	equ	0xFE5
 36547                           fsr1h	equ	0xFE2
 36548                           fsr1l	equ	0xFE1
 36549                           indf2	equ	0xFDF
 36550                           postinc2	equ	0xFDE
 36551                           postdec2	equ	0xFDD
 36552                           plusw2	equ	0xFDB
 36553                           fsr2h	equ	0xFDA
 36554                           fsr2l	equ	0xFD9
 36555                           status	equ	0xFD8
 36556                           
 36557 ;; *************** function i2_Byte_GetPair *****************
 36558 ;; Defined at:
 36559 ;;		line 87 in file "Library/Types.c"
 36560 ;; Parameters:    Size  Location     Type
 36561 ;;  pInput          2    9[COMRAM] PTR struct Byte
 36562 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 36563 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 36564 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 36565 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 36566 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 36567 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 36568 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 36569 ;;		 -> NULL(0), 
 36570 ;;  pPair           1   11[COMRAM] unsigned char 
 36571 ;; Auto vars:     Size  Location     Type
 36572 ;;		None
 36573 ;; Return value:  Size  Location     Type
 36574 ;;                  1    wreg      unsigned char 
 36575 ;; Registers used:
 36576 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 36577 ;; Tracked objects:
 36578 ;;		On entry : 0/0
 36579 ;;		On exit  : 0/0
 36580 ;;		Unchanged: 0/0
 36581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36582 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36585 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36586 ;;Total ram usage:        3 bytes
 36587 ;; Hardware stack levels used:    1
 36588 ;; Hardware stack levels required when called:    1
 36589 ;; This function calls:
 36590 ;;		i2_Byte_GetZone
 36591 ;; This function is called by:
 36592 ;;		i2_Word_GetPair
 36593 ;; This function uses a non-reentrant model
 36594 ;;
 36595                           
 36596                           	psect	text165
 36597  018D98                     __ptext165:
 36598                           	opt stack 0
 36599  018D98                     i2_Byte_GetPair:
 36600                           	opt stack 13
 36601                           
 36602                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 36603                           
 36604                           ;incstack = 0
 36605  018D98  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 36606  018D9C  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 36607  018DA0  0E04               	movlw	4
 36608  018DA2  6E03               	movwf	i2Byte_GetZone@pMax,c
 36609  018DA4  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 36610  018DA8  0E02               	movlw	2
 36611  018DAA  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 36612  018DAC  EC95  F0BD         	call	i2_Byte_GetZone	;wreg free
 36613  018DB0  0012               	return	
 36614  018DB2                     __end_ofi2_Byte_GetPair:
 36615                           	opt stack 0
 36616                           tosu	equ	0xFFF
 36617                           tosh	equ	0xFFE
 36618                           tosl	equ	0xFFD
 36619                           pclatu	equ	0xFFB
 36620                           pclath	equ	0xFFA
 36621                           tblptru	equ	0xFF8
 36622                           tblptrh	equ	0xFF7
 36623                           tblptrl	equ	0xFF6
 36624                           tablat	equ	0xFF5
 36625                           prodh	equ	0xFF4
 36626                           prodl	equ	0xFF3
 36627                           intcon	equ	0xFF2
 36628                           indf0	equ	0xFEF
 36629                           postinc0	equ	0xFEE
 36630                           fsr0h	equ	0xFEA
 36631                           fsr0l	equ	0xFE9
 36632                           wreg	equ	0xFE8
 36633                           indf1	equ	0xFE7
 36634                           postdec1	equ	0xFE5
 36635                           fsr1h	equ	0xFE2
 36636                           fsr1l	equ	0xFE1
 36637                           indf2	equ	0xFDF
 36638                           postinc2	equ	0xFDE
 36639                           postdec2	equ	0xFDD
 36640                           plusw2	equ	0xFDB
 36641                           fsr2h	equ	0xFDA
 36642                           fsr2l	equ	0xFD9
 36643                           status	equ	0xFD8
 36644                           
 36645 ;; *************** function i2_Byte_GetZone *****************
 36646 ;; Defined at:
 36647 ;;		line 64 in file "Library/Types.c"
 36648 ;; Parameters:    Size  Location     Type
 36649 ;;  pInput          2    0[COMRAM] PTR struct Byte
 36650 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 36651 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 36652 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 36653 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 36654 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 36655 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 36656 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 36657 ;;		 -> NULL(0), 
 36658 ;;  pMax            1    2[COMRAM] unsigned char 
 36659 ;;  pChunk          1    3[COMRAM] unsigned char 
 36660 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 36661 ;; Auto vars:     Size  Location     Type
 36662 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 36663 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 36664 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 36665 ;; Return value:  Size  Location     Type
 36666 ;;                  1    wreg      unsigned char 
 36667 ;; Registers used:
 36668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 36669 ;; Tracked objects:
 36670 ;;		On entry : 0/0
 36671 ;;		On exit  : 0/0
 36672 ;;		Unchanged: 0/0
 36673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36674 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36675 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36676 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36677 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36678 ;;Total ram usage:        9 bytes
 36679 ;; Hardware stack levels used:    1
 36680 ;; This function calls:
 36681 ;;		Nothing
 36682 ;; This function is called by:
 36683 ;;		i2_Byte_GetPair
 36684 ;; This function uses a non-reentrant model
 36685 ;;
 36686                           
 36687                           	psect	text166
 36688  017B2A                     __ptext166:
 36689                           	opt stack 0
 36690  017B2A                     i2_Byte_GetZone:
 36691                           	opt stack 13
 36692                           
 36693                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 36694                           
 36695                           ;incstack = 0
 36696  017B2A  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 36697  017B2E  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 36698  017B32  0E00               	movlw	low (__mediumconst shr (0+16))
 36699  017B34  6EF8               	movwf	tblptru,c
 36700  017B36  0E0F               	movlw	(high __ramtop+-1)
 36701  017B38  64F7               	cpfsgt	tblptrh,c
 36702  017B3A  D003               	bra	i2u773_47
 36703  017B3C  0008               	tblrd		*
 36704  017B3E  50F5               	movf	tablat,w,c
 36705  017B40  D005               	bra	i2u773_40
 36706  017B42                     i2u773_47:
 36707  017B42  CFF6 FFE9          	movff	tblptrl,fsr0l
 36708  017B46  CFF7 FFEA          	movff	tblptrh,fsr0h
 36709  017B4A  50EF               	movf	indf0,w,c
 36710  017B4C                     i2u773_40:
 36711  017B4C  6E09               	movwf	i2Byte_GetZone@Output,c
 36712                           
 36713                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 36714  017B4E  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 36715  017B50  0D01               	mullw	1
 36716  017B52  0E17               	movlw	low _MASKS
 36717  017B54  24F3               	addwf	prodl,w,c
 36718  017B56  6EF6               	movwf	tblptrl,c
 36719  017B58  0EFC               	movlw	high _MASKS
 36720  017B5A  20F4               	addwfc	prodh,w,c
 36721  017B5C  6EF7               	movwf	tblptrh,c
 36722  017B5E                     	if	1	;There are 3 active tblptr bytes
 36723  017B5E  6AF8               	clrf	tblptru,c
 36724  017B60  0E00               	movlw	low (__mediumconst shr (0+16))
 36725  017B62  22F8               	addwfc	tblptru,f,c
 36726  017B64                     	endif
 36727  017B64  0008               	tblrd		*
 36728  017B66  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 36729                           
 36730                           ;Types.c: 68: UINT8 Offset = 0;
 36731  017B6A  0E00               	movlw	0
 36732  017B6C  6E08               	movwf	i2Byte_GetZone@Offset,c
 36733                           
 36734                           ;Types.c: 70: while (pChunk >= pMax)
 36735  017B6E  D003               	goto	i2l732
 36736  017B70                     
 36737                           ;Types.c: 71: {
 36738                           ;Types.c: 72: pChunk -= pMax;
 36739  017B70  5003               	movf	i2Byte_GetZone@pMax,w,c
 36740  017B72  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 36741                           
 36742                           ;Types.c: 73: Offset += 1;
 36743  017B74  2A08               	incf	i2Byte_GetZone@Offset,f,c
 36744  017B76                     i2l732:
 36745  017B76  5003               	movf	i2Byte_GetZone@pMax,w,c
 36746  017B78  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 36747  017B7A  B0D8               	btfsc	status,0,c
 36748  017B7C  D7F9               	goto	i2l733
 36749                           
 36750                           ;Types.c: 74: }
 36751                           ;Types.c: 75: pChunk *= pChunkSize;
 36752  017B7E  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 36753  017B80  0204               	mulwf	i2Byte_GetZone@pChunk,c
 36754  017B82  50F3               	movf	prodl,w,c
 36755  017B84  6E04               	movwf	i2Byte_GetZone@pChunk,c
 36756                           
 36757                           ;Types.c: 76: pChunk += Offset;
 36758  017B86  5008               	movf	i2Byte_GetZone@Offset,w,c
 36759  017B88  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 36760                           
 36761                           ;Types.c: 78: Output >>= pChunk;
 36762  017B8A  2804               	incf	i2Byte_GetZone@pChunk,w,c
 36763  017B8C  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 36764  017B8E  D002               	goto	i2u775_40
 36765  017B90                     i2u775_45:
 36766  017B90  90D8               	bcf	status,0,c
 36767  017B92  3209               	rrcf	i2Byte_GetZone@Output,f,c
 36768  017B94                     i2u775_40:
 36769  017B94  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 36770  017B96  D7FC               	goto	i2u775_45
 36771                           
 36772                           ;Types.c: 79: Output &= MASK;
 36773  017B98  5007               	movf	i2Byte_GetZone@MASK,w,c
 36774  017B9A  1609               	andwf	i2Byte_GetZone@Output,f,c
 36775                           
 36776                           ;Types.c: 80: return Output;
 36777  017B9C  5009               	movf	i2Byte_GetZone@Output,w,c
 36778  017B9E  0012               	return	
 36779  017BA0                     __end_ofi2_Byte_GetZone:
 36780                           	opt stack 0
 36781                           tosu	equ	0xFFF
 36782                           tosh	equ	0xFFE
 36783                           tosl	equ	0xFFD
 36784                           pclatu	equ	0xFFB
 36785                           pclath	equ	0xFFA
 36786                           tblptru	equ	0xFF8
 36787                           tblptrh	equ	0xFF7
 36788                           tblptrl	equ	0xFF6
 36789                           tablat	equ	0xFF5
 36790                           prodh	equ	0xFF4
 36791                           prodl	equ	0xFF3
 36792                           intcon	equ	0xFF2
 36793                           indf0	equ	0xFEF
 36794                           postinc0	equ	0xFEE
 36795                           fsr0h	equ	0xFEA
 36796                           fsr0l	equ	0xFE9
 36797                           wreg	equ	0xFE8
 36798                           indf1	equ	0xFE7
 36799                           postdec1	equ	0xFE5
 36800                           fsr1h	equ	0xFE2
 36801                           fsr1l	equ	0xFE1
 36802                           indf2	equ	0xFDF
 36803                           postinc2	equ	0xFDE
 36804                           postdec2	equ	0xFDD
 36805                           plusw2	equ	0xFDB
 36806                           fsr2h	equ	0xFDA
 36807                           fsr2l	equ	0xFD9
 36808                           status	equ	0xFD8
 36809                           
 36810 ;; *************** function i2_Byte_SetBit *****************
 36811 ;; Defined at:
 36812 ;;		line 32 in file "Library/Types.c"
 36813 ;; Parameters:    Size  Location     Type
 36814 ;;  pInput          2    0[COMRAM] PTR struct Byte
 36815 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 36816 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 36817 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 36818 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 36819 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 36820 ;;		 -> NULL(0), 
 36821 ;;  pBit            1    2[COMRAM] unsigned char 
 36822 ;;  pValue          1    3[COMRAM] unsigned char 
 36823 ;; Auto vars:     Size  Location     Type
 36824 ;;		None
 36825 ;; Return value:  Size  Location     Type
 36826 ;;                  1    wreg      void 
 36827 ;; Registers used:
 36828 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 36829 ;; Tracked objects:
 36830 ;;		On entry : 0/0
 36831 ;;		On exit  : 0/0
 36832 ;;		Unchanged: 0/0
 36833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36834 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36836 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36837 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36838 ;;Total ram usage:        7 bytes
 36839 ;; Hardware stack levels used:    1
 36840 ;; This function calls:
 36841 ;;		Nothing
 36842 ;; This function is called by:
 36843 ;;		i2_Port_SetPin
 36844 ;; This function uses a non-reentrant model
 36845 ;;
 36846                           
 36847                           	psect	text167
 36848  01844C                     __ptext167:
 36849                           	opt stack 0
 36850  01844C                     i2_Byte_SetBit:
 36851                           	opt stack 15
 36852                           
 36853                           ;Types.c: 34: pValue &= 1;
 36854                           
 36855                           ;incstack = 0
 36856  01844C  0E01               	movlw	1
 36857  01844E  1604               	andwf	i2Byte_SetBit@pValue,f,c
 36858                           
 36859                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 36860  018450  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 36861  018454  0E01               	movlw	1
 36862  018456  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 36863  018458  2A05               	incf	??i2_Byte_SetBit,f,c
 36864  01845A  D002               	goto	i2u831_44
 36865  01845C                     i2u831_45:
 36866  01845C  90D8               	bcf	status,0,c
 36867  01845E  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 36868  018460                     i2u831_44:
 36869  018460  2E05               	decfsz	??i2_Byte_SetBit,f,c
 36870  018462  D7FC               	goto	i2u831_45
 36871  018464  5006               	movf	??i2_Byte_SetBit+1,w,c
 36872  018466  0AFF               	xorlw	255
 36873  018468  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 36874  01846A  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 36875  01846E  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 36876  018472  5007               	movf	??i2_Byte_SetBit+2,w,c
 36877  018474  16DF               	andwf	indf2,f,c
 36878                           
 36879                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 36880  018476  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 36881  01847A  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 36882  01847E  2A05               	incf	??i2_Byte_SetBit,f,c
 36883  018480  D002               	goto	i2u832_44
 36884  018482                     i2u832_45:
 36885  018482  90D8               	bcf	status,0,c
 36886  018484  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 36887  018486                     i2u832_44:
 36888  018486  2E05               	decfsz	??i2_Byte_SetBit,f,c
 36889  018488  D7FC               	goto	i2u832_45
 36890  01848A  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 36891  01848E  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 36892  018492  5006               	movf	??i2_Byte_SetBit+1,w,c
 36893  018494  12DF               	iorwf	indf2,f,c
 36894  018496  0012               	return		;funcret
 36895  018498                     __end_ofi2_Byte_SetBit:
 36896                           	opt stack 0
 36897                           tosu	equ	0xFFF
 36898                           tosh	equ	0xFFE
 36899                           tosl	equ	0xFFD
 36900                           pclatu	equ	0xFFB
 36901                           pclath	equ	0xFFA
 36902                           tblptru	equ	0xFF8
 36903                           tblptrh	equ	0xFF7
 36904                           tblptrl	equ	0xFF6
 36905                           tablat	equ	0xFF5
 36906                           prodh	equ	0xFF4
 36907                           prodl	equ	0xFF3
 36908                           intcon	equ	0xFF2
 36909                           indf0	equ	0xFEF
 36910                           postinc0	equ	0xFEE
 36911                           fsr0h	equ	0xFEA
 36912                           fsr0l	equ	0xFE9
 36913                           wreg	equ	0xFE8
 36914                           indf1	equ	0xFE7
 36915                           postdec1	equ	0xFE5
 36916                           fsr1h	equ	0xFE2
 36917                           fsr1l	equ	0xFE1
 36918                           indf2	equ	0xFDF
 36919                           postinc2	equ	0xFDE
 36920                           postdec2	equ	0xFDD
 36921                           plusw2	equ	0xFDB
 36922                           fsr2h	equ	0xFDA
 36923                           fsr2l	equ	0xFD9
 36924                           status	equ	0xFD8
 36925                           
 36926 ;; *************** function i2_MXK_SwitchTo *****************
 36927 ;; Defined at:
 36928 ;;		line 105 in file "Library/MXK.c"
 36929 ;; Parameters:    Size  Location     Type
 36930 ;;  pModule         1    wreg     enum E6927
 36931 ;; Auto vars:     Size  Location     Type
 36932 ;;  pModule         1    7[COMRAM] enum E6927
 36933 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 36934 ;; Return value:  Size  Location     Type
 36935 ;;                  1    wreg      unsigned char 
 36936 ;; Registers used:
 36937 ;;		wreg, status,2, status,0, cstack
 36938 ;; Tracked objects:
 36939 ;;		On entry : 0/0
 36940 ;;		On exit  : 0/0
 36941 ;;		Unchanged: 0/0
 36942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36944 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36946 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36947 ;;Total ram usage:        2 bytes
 36948 ;; Hardware stack levels used:    1
 36949 ;; Hardware stack levels required when called:    1
 36950 ;; This function calls:
 36951 ;;		i2_delay_us
 36952 ;; This function is called by:
 36953 ;;		i2_Motor_Step
 36954 ;; This function uses a non-reentrant model
 36955 ;;
 36956                           
 36957                           	psect	text168
 36958  0189BA                     __ptext168:
 36959                           	opt stack 0
 36960  0189BA                     i2_MXK_SwitchTo:
 36961                           	opt stack 15
 36962                           
 36963                           ;incstack = 0
 36964                           ;i2MXK_SwitchTo@pModule stored from wreg
 36965  0189BA  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 36966                           
 36967                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 36968  0189BC  5086               	movf	3974,w,c	;volatile
 36969  0189BE  0B0F               	andlw	15
 36970  0189C0  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 36971                           
 36972                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 36973  0189C2  504D               	movf	_Bus_State,w,c
 36974  0189C4  A4D8               	btfss	status,2,c
 36975  0189C6  D002               	goto	i2l1730
 36976                           
 36977                           ;MXK.c: 110: return 0;
 36978  0189C8  0E00               	movlw	0
 36979  0189CA  0012               	return	
 36980  0189CC                     i2l1730:
 36981                           
 36982                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 36983  0189CC  0E00               	movlw	0
 36984  0189CE  6E4D               	movwf	_Bus_State,c
 36985                           
 36986                           ;MXK.c: 114: if (CUR != pModule)
 36987  0189D0  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 36988  0189D2  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 36989  0189D4  B4D8               	btfsc	status,2,c
 36990  0189D6  D00A               	goto	i2l1732
 36991                           
 36992                           ;MXK.c: 115: {
 36993                           ;MXK.c: 116: PORTG &= ~(0xF);
 36994  0189D8  0EF0               	movlw	240
 36995  0189DA  1686               	andwf	3974,f,c	;volatile
 36996                           
 36997                           ;MXK.c: 117: PORTG |= pModule;
 36998  0189DC  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 36999  0189DE  1286               	iorwf	3974,f,c	;volatile
 37000                           
 37001                           ;MXK.c: 120: delay_us(10);
 37002  0189E0  0E00               	movlw	0
 37003  0189E2  6E02               	movwf	i2delay_us@us+1,c
 37004  0189E4  0E0A               	movlw	10
 37005  0189E6  6E01               	movwf	i2delay_us@us,c
 37006  0189E8  ECF2  F0C3         	call	i2_delay_us	;wreg free
 37007  0189EC                     i2l1732:
 37008                           
 37009                           ;MXK.c: 121: }
 37010                           ;MXK.c: 122: return 1;
 37011  0189EC  0E01               	movlw	1
 37012  0189EE  0012               	return	
 37013  0189F0                     __end_ofi2_MXK_SwitchTo:
 37014                           	opt stack 0
 37015                           tosu	equ	0xFFF
 37016                           tosh	equ	0xFFE
 37017                           tosl	equ	0xFFD
 37018                           pclatu	equ	0xFFB
 37019                           pclath	equ	0xFFA
 37020                           tblptru	equ	0xFF8
 37021                           tblptrh	equ	0xFF7
 37022                           tblptrl	equ	0xFF6
 37023                           tablat	equ	0xFF5
 37024                           prodh	equ	0xFF4
 37025                           prodl	equ	0xFF3
 37026                           intcon	equ	0xFF2
 37027                           indf0	equ	0xFEF
 37028                           postinc0	equ	0xFEE
 37029                           fsr0h	equ	0xFEA
 37030                           fsr0l	equ	0xFE9
 37031                           wreg	equ	0xFE8
 37032                           indf1	equ	0xFE7
 37033                           postdec1	equ	0xFE5
 37034                           fsr1h	equ	0xFE2
 37035                           fsr1l	equ	0xFE1
 37036                           indf2	equ	0xFDF
 37037                           postinc2	equ	0xFDE
 37038                           postdec2	equ	0xFDD
 37039                           plusw2	equ	0xFDB
 37040                           fsr2h	equ	0xFDA
 37041                           fsr2l	equ	0xFD9
 37042                           status	equ	0xFD8
 37043                           
 37044 ;; *************** function i2_delay_us *****************
 37045 ;; Defined at:
 37046 ;;		line 255 in file "Library/Types.c"
 37047 ;; Parameters:    Size  Location     Type
 37048 ;;  us              2    0[COMRAM] unsigned short 
 37049 ;; Auto vars:     Size  Location     Type
 37050 ;;  delay_us        4    2[COMRAM] unsigned long 
 37051 ;; Return value:  Size  Location     Type
 37052 ;;                  1    wreg      void 
 37053 ;; Registers used:
 37054 ;;		wreg, status,2, status,0
 37055 ;; Tracked objects:
 37056 ;;		On entry : 0/0
 37057 ;;		On exit  : 0/0
 37058 ;;		Unchanged: 0/0
 37059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37060 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37061 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37063 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37064 ;;Total ram usage:        6 bytes
 37065 ;; Hardware stack levels used:    1
 37066 ;; This function calls:
 37067 ;;		Nothing
 37068 ;; This function is called by:
 37069 ;;		i2_MXK_SwitchTo
 37070 ;; This function uses a non-reentrant model
 37071 ;;
 37072                           
 37073                           	psect	text169
 37074  0187E4                     __ptext169:
 37075                           	opt stack 0
 37076  0187E4                     i2_delay_us:
 37077                           	opt stack 15
 37078                           
 37079                           ;Types.c: 256: unsigned long u;
 37080                           ;Types.c: 257: while (us--) {
 37081                           
 37082                           ;incstack = 0
 37083  0187E4  D016               	goto	i2u835_40
 37084  0187E6                     i2l11067:
 37085                           
 37086                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 37087  0187E6  0E00               	movlw	0
 37088  0187E8  6E03               	movwf	i2delay_us@u,c
 37089  0187EA  0E00               	movlw	0
 37090  0187EC  6E04               	movwf	i2delay_us@u+1,c
 37091  0187EE  0E00               	movlw	0
 37092  0187F0  6E05               	movwf	i2delay_us@u+2,c
 37093  0187F2  0E00               	movlw	0
 37094  0187F4  6E06               	movwf	i2delay_us@u+3,c
 37095  0187F6                     i2l11069:
 37096  0187F6  5003               	movf	i2delay_us@u,w,c
 37097  0187F8  1004               	iorwf	i2delay_us@u+1,w,c
 37098  0187FA  1005               	iorwf	i2delay_us@u+2,w,c
 37099  0187FC  1006               	iorwf	i2delay_us@u+3,w,c
 37100  0187FE  A4D8               	btfss	status,2,c
 37101  018800  D008               	goto	i2u835_40
 37102  018802  F000               	nop		; ;# 
 37103  018804  0E01               	movlw	1
 37104  018806  2603               	addwf	i2delay_us@u,f,c
 37105  018808  0E00               	movlw	0
 37106  01880A  2204               	addwfc	i2delay_us@u+1,f,c
 37107  01880C  2205               	addwfc	i2delay_us@u+2,f,c
 37108  01880E  2206               	addwfc	i2delay_us@u+3,f,c
 37109  018810  D7F2               	goto	i2l11069
 37110  018812                     i2u835_40:
 37111  018812  0601               	decf	i2delay_us@us,f,c
 37112  018814  A0D8               	btfss	status,0,c
 37113  018816  0602               	decf	i2delay_us@us+1,f,c
 37114  018818  2801               	incf	i2delay_us@us,w,c
 37115  01881A  E1E5               	bnz	i2l11067
 37116  01881C  2802               	incf	i2delay_us@us+1,w,c
 37117  01881E  B4D8               	btfsc	status,2,c
 37118  018820  0012               	return	
 37119  018822  D7E1               	goto	i2l832
 37120  018824                     __end_ofi2_delay_us:
 37121                           	opt stack 0
 37122                           tosu	equ	0xFFF
 37123                           tosh	equ	0xFFE
 37124                           tosl	equ	0xFFD
 37125                           pclatu	equ	0xFFB
 37126                           pclath	equ	0xFFA
 37127                           tblptru	equ	0xFF8
 37128                           tblptrh	equ	0xFF7
 37129                           tblptrl	equ	0xFF6
 37130                           tablat	equ	0xFF5
 37131                           prodh	equ	0xFF4
 37132                           prodl	equ	0xFF3
 37133                           intcon	equ	0xFF2
 37134                           indf0	equ	0xFEF
 37135                           postinc0	equ	0xFEE
 37136                           fsr0h	equ	0xFEA
 37137                           fsr0l	equ	0xFE9
 37138                           wreg	equ	0xFE8
 37139                           indf1	equ	0xFE7
 37140                           postdec1	equ	0xFE5
 37141                           fsr1h	equ	0xFE2
 37142                           fsr1l	equ	0xFE1
 37143                           indf2	equ	0xFDF
 37144                           postinc2	equ	0xFDE
 37145                           postdec2	equ	0xFDD
 37146                           plusw2	equ	0xFDB
 37147                           fsr2h	equ	0xFDA
 37148                           fsr2l	equ	0xFD9
 37149                           status	equ	0xFD8
 37150                           
 37151 ;; *************** function i2_MXK_Release *****************
 37152 ;; Defined at:
 37153 ;;		line 130 in file "Library/MXK.c"
 37154 ;; Parameters:    Size  Location     Type
 37155 ;;		None
 37156 ;; Auto vars:     Size  Location     Type
 37157 ;;		None
 37158 ;; Return value:  Size  Location     Type
 37159 ;;                  1    wreg      unsigned char 
 37160 ;; Registers used:
 37161 ;;		wreg, status,2, status,0
 37162 ;; Tracked objects:
 37163 ;;		On entry : 0/0
 37164 ;;		On exit  : 0/0
 37165 ;;		Unchanged: 0/0
 37166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37171 ;;Total ram usage:        0 bytes
 37172 ;; Hardware stack levels used:    1
 37173 ;; This function calls:
 37174 ;;		Nothing
 37175 ;; This function is called by:
 37176 ;;		i2_Motor_Step
 37177 ;; This function uses a non-reentrant model
 37178 ;;
 37179                           
 37180                           	psect	text170
 37181  01900C                     __ptext170:
 37182                           	opt stack 0
 37183  01900C                     i2_MXK_Release:
 37184                           	opt stack 16
 37185                           
 37186                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 37187                           
 37188                           ;incstack = 0
 37189  01900C  0E01               	movlw	1
 37190  01900E  6E4D               	movwf	_Bus_State,c
 37191                           
 37192                           ;MXK.c: 135: return 1;
 37193                           ;	Return value of i2_MXK_Release is never used
 37194  019010  0012               	return	
 37195  019012                     __end_ofi2_MXK_Release:
 37196                           	opt stack 0
 37197                           tosu	equ	0xFFF
 37198                           tosh	equ	0xFFE
 37199                           tosl	equ	0xFFD
 37200                           pclatu	equ	0xFFB
 37201                           pclath	equ	0xFFA
 37202                           tblptru	equ	0xFF8
 37203                           tblptrh	equ	0xFF7
 37204                           tblptrl	equ	0xFF6
 37205                           tablat	equ	0xFF5
 37206                           prodh	equ	0xFF4
 37207                           prodl	equ	0xFF3
 37208                           intcon	equ	0xFF2
 37209                           indf0	equ	0xFEF
 37210                           postinc0	equ	0xFEE
 37211                           fsr0h	equ	0xFEA
 37212                           fsr0l	equ	0xFE9
 37213                           wreg	equ	0xFE8
 37214                           indf1	equ	0xFE7
 37215                           postdec1	equ	0xFE5
 37216                           fsr1h	equ	0xFE2
 37217                           fsr1l	equ	0xFE1
 37218                           indf2	equ	0xFDF
 37219                           postinc2	equ	0xFDE
 37220                           postdec2	equ	0xFDD
 37221                           plusw2	equ	0xFDB
 37222                           fsr2h	equ	0xFDA
 37223                           fsr2l	equ	0xFD9
 37224                           status	equ	0xFD8
 37225                           
 37226 ;; *************** function i2_MXK_Queue *****************
 37227 ;; Defined at:
 37228 ;;		line 144 in file "Library/MXK.c"
 37229 ;; Parameters:    Size  Location     Type
 37230 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 37231 ;;		 -> Absolute function(1), Motor_Step(1), 
 37232 ;; Auto vars:     Size  Location     Type
 37233 ;;		None
 37234 ;; Return value:  Size  Location     Type
 37235 ;;                  1    wreg      void 
 37236 ;; Registers used:
 37237 ;;		wreg, status,2, status,0
 37238 ;; Tracked objects:
 37239 ;;		On entry : 0/0
 37240 ;;		On exit  : 0/0
 37241 ;;		Unchanged: 0/0
 37242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37243 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37246 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37247 ;;Total ram usage:        3 bytes
 37248 ;; Hardware stack levels used:    1
 37249 ;; This function calls:
 37250 ;;		Nothing
 37251 ;; This function is called by:
 37252 ;;		i2_Motor_Step
 37253 ;; This function uses a non-reentrant model
 37254 ;;
 37255                           
 37256                           	psect	text171
 37257  018FA0                     __ptext171:
 37258                           	opt stack 0
 37259  018FA0                     i2_MXK_Queue:
 37260                           	opt stack 16
 37261                           
 37262                           ;MXK.c: 146: lQueue = pCallback;
 37263                           
 37264                           ;incstack = 0
 37265  018FA0  C001  F029         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 37266  018FA4  C002  F02A         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 37267  018FA8  C003  F02B         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 37268  018FAC  0012               	return		;funcret
 37269  018FAE                     __end_ofi2_MXK_Queue:
 37270                           	opt stack 0
 37271                           tosu	equ	0xFFF
 37272                           tosh	equ	0xFFE
 37273                           tosl	equ	0xFFD
 37274                           pclatu	equ	0xFFB
 37275                           pclath	equ	0xFFA
 37276                           tblptru	equ	0xFF8
 37277                           tblptrh	equ	0xFF7
 37278                           tblptrl	equ	0xFF6
 37279                           tablat	equ	0xFF5
 37280                           prodh	equ	0xFF4
 37281                           prodl	equ	0xFF3
 37282                           intcon	equ	0xFF2
 37283                           indf0	equ	0xFEF
 37284                           postinc0	equ	0xFEE
 37285                           fsr0h	equ	0xFEA
 37286                           fsr0l	equ	0xFE9
 37287                           wreg	equ	0xFE8
 37288                           indf1	equ	0xFE7
 37289                           postdec1	equ	0xFE5
 37290                           fsr1h	equ	0xFE2
 37291                           fsr1l	equ	0xFE1
 37292                           indf2	equ	0xFDF
 37293                           postinc2	equ	0xFDE
 37294                           postdec2	equ	0xFDD
 37295                           plusw2	equ	0xFDB
 37296                           fsr2h	equ	0xFDA
 37297                           fsr2l	equ	0xFD9
 37298                           status	equ	0xFD8
 37299                           tosu	equ	0xFFF
 37300                           tosh	equ	0xFFE
 37301                           tosl	equ	0xFFD
 37302                           pclatu	equ	0xFFB
 37303                           pclath	equ	0xFFA
 37304                           tblptru	equ	0xFF8
 37305                           tblptrh	equ	0xFF7
 37306                           tblptrl	equ	0xFF6
 37307                           tablat	equ	0xFF5
 37308                           prodh	equ	0xFF4
 37309                           prodl	equ	0xFF3
 37310                           intcon	equ	0xFF2
 37311                           indf0	equ	0xFEF
 37312                           postinc0	equ	0xFEE
 37313                           fsr0h	equ	0xFEA
 37314                           fsr0l	equ	0xFE9
 37315                           wreg	equ	0xFE8
 37316                           indf1	equ	0xFE7
 37317                           postdec1	equ	0xFE5
 37318                           fsr1h	equ	0xFE2
 37319                           fsr1l	equ	0xFE1
 37320                           indf2	equ	0xFDF
 37321                           postinc2	equ	0xFDE
 37322                           postdec2	equ	0xFDD
 37323                           plusw2	equ	0xFDB
 37324                           fsr2h	equ	0xFDA
 37325                           fsr2l	equ	0xFD9
 37326                           status	equ	0xFD8
 37327                           
 37328                           	psect	text172
 37329  000000                     __ptext172:
 37330                           	opt stack 0
 37331                           tosu	equ	0xFFF
 37332                           tosh	equ	0xFFE
 37333                           tosl	equ	0xFFD
 37334                           pclatu	equ	0xFFB
 37335                           pclath	equ	0xFFA
 37336                           tblptru	equ	0xFF8
 37337                           tblptrh	equ	0xFF7
 37338                           tblptrl	equ	0xFF6
 37339                           tablat	equ	0xFF5
 37340                           prodh	equ	0xFF4
 37341                           prodl	equ	0xFF3
 37342                           intcon	equ	0xFF2
 37343                           indf0	equ	0xFEF
 37344                           postinc0	equ	0xFEE
 37345                           fsr0h	equ	0xFEA
 37346                           fsr0l	equ	0xFE9
 37347                           wreg	equ	0xFE8
 37348                           indf1	equ	0xFE7
 37349                           postdec1	equ	0xFE5
 37350                           fsr1h	equ	0xFE2
 37351                           fsr1l	equ	0xFE1
 37352                           indf2	equ	0xFDF
 37353                           postinc2	equ	0xFDE
 37354                           postdec2	equ	0xFDD
 37355                           plusw2	equ	0xFDB
 37356                           fsr2h	equ	0xFDA
 37357                           fsr2l	equ	0xFD9
 37358                           status	equ	0xFD8
 37359                           
 37360                           	psect	rparam
 37361  0000                     tosu	equ	0xFFF
 37362                           tosh	equ	0xFFE
 37363                           tosl	equ	0xFFD
 37364                           pclatu	equ	0xFFB
 37365                           pclath	equ	0xFFA
 37366                           tblptru	equ	0xFF8
 37367                           tblptrh	equ	0xFF7
 37368                           tblptrl	equ	0xFF6
 37369                           tablat	equ	0xFF5
 37370                           prodh	equ	0xFF4
 37371                           prodl	equ	0xFF3
 37372                           intcon	equ	0xFF2
 37373                           indf0	equ	0xFEF
 37374                           postinc0	equ	0xFEE
 37375                           fsr0h	equ	0xFEA
 37376                           fsr0l	equ	0xFE9
 37377                           wreg	equ	0xFE8
 37378                           indf1	equ	0xFE7
 37379                           postdec1	equ	0xFE5
 37380                           fsr1h	equ	0xFE2
 37381                           fsr1l	equ	0xFE1
 37382                           indf2	equ	0xFDF
 37383                           postinc2	equ	0xFDE
 37384                           postdec2	equ	0xFDD
 37385                           plusw2	equ	0xFDB
 37386                           fsr2h	equ	0xFDA
 37387                           fsr2l	equ	0xFD9
 37388                           status	equ	0xFD8
 37389                           
 37390                           	psect	temp
 37391  000051                     btemp:
 37392                           	opt stack 0
 37393  000051                     	ds	1
 37394  0000                     int$flags	set	btemp
 37395  0000                     wtemp6	set	btemp+1
 37396                           tosu	equ	0xFFF
 37397                           tosh	equ	0xFFE
 37398                           tosl	equ	0xFFD
 37399                           pclatu	equ	0xFFB
 37400                           pclath	equ	0xFFA
 37401                           tblptru	equ	0xFF8
 37402                           tblptrh	equ	0xFF7
 37403                           tblptrl	equ	0xFF6
 37404                           tablat	equ	0xFF5
 37405                           prodh	equ	0xFF4
 37406                           prodl	equ	0xFF3
 37407                           intcon	equ	0xFF2
 37408                           indf0	equ	0xFEF
 37409                           postinc0	equ	0xFEE
 37410                           fsr0h	equ	0xFEA
 37411                           fsr0l	equ	0xFE9
 37412                           wreg	equ	0xFE8
 37413                           indf1	equ	0xFE7
 37414                           postdec1	equ	0xFE5
 37415                           fsr1h	equ	0xFE2
 37416                           fsr1l	equ	0xFE1
 37417                           indf2	equ	0xFDF
 37418                           postinc2	equ	0xFDE
 37419                           postdec2	equ	0xFDD
 37420                           plusw2	equ	0xFDB
 37421                           fsr2h	equ	0xFDA
 37422                           fsr2l	equ	0xFD9
 37423                           status	equ	0xFD8


Data Sizes:
    Strings     413
    Constant    806
    Data        41
    BSS         1004
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160    159     160
    BANK1           256     42     256
    BANK2           256      4     256
    BANK3           256      4     242
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(BANK1[7]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_37(CODE[15]), STR_36(CODE[3]), STR_35(CODE[12]), STR_34(CODE[7]), 
		 -> STR_33(CODE[12]), STR_32(CODE[9]), STR_31(CODE[10]), STR_30(CODE[3]), 
		 -> STR_29(CODE[24]), STR_28(CODE[3]), STR_27(CODE[16]), STR_26(CODE[3]), 
		 -> STR_25(CODE[12]), STR_24(CODE[39]), STR_23(CODE[42]), STR_22(CODE[9]), 
		 -> STR_21(CODE[11]), STR_20(CODE[10]), STR_19(CODE[3]), STR_18(CODE[22]), 
		 -> STR_17(CODE[8]), STR_16(CODE[10]), STR_15(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[16]), STR_12(CODE[3]), STR_11(CODE[21]), STR_10(CODE[3]), 
		 -> STR_9(CODE[19]), STR_8(CODE[28]), STR_7(CODE[20]), STR_6(CODE[3]), 
		 -> STR_5(CODE[17]), STR_4(CODE[12]), STR_3(CODE[3]), STR_2(CODE[19]), 
		 -> STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK3[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK3[10]), PortB(BANK2[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK3[10]), PortB(BANK2[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK3[10]), PortB(BANK2[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK2[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK3[10]), 
		 -> PortB(BANK2[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK2[2]), PortA..(BANK3[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK3[10]), PortB(BANK2[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK2[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK3[10]), 
		 -> PortB(BANK2[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK2[2]), PortA..(BANK3[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK3[10]), PortB(BANK2[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK2[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK2[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK2[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK2[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK2[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK3[10]), PortB(BANK2[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK3[10]), PortB(BANK2[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK2[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK1[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK2[10]), PortE(BANK1[10]), PortC(BANK1[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortE(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK3[10]), PortB(BANK2[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK3[10]), PortB(BANK2[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK3[10]), PortB(BANK2[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK3[10]), PortB(BANK2[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK3[10]), PortB(BANK2[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK3[10]), PortB(BANK2[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK3[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK2[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK2[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_Go_Backward
    _Sensor_Observe->_ADCAverage
    _Robot_Init->_UpdateDistance
    _Navigate_Maze->_Go_Backward
    _pop->_printf
    _Go_Backward->_Travel
    _Travel->_Fix_Error
    _push->_printf
    _Turn->_eusartSend
    _Get_VirtualWall_State->_eusartSend
    _Fix_Error->_ADCAverage
    _Detect_Victim->_eusartSend
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _Create_Maze->___wmul
    _Closest_Object->_ADCAverage
    _ADCAverage->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fltol
    _eval_poly->___fladd
    ___flsub->___fladd
    ___flneg->___flmul
    _HMI_SetNumber->_itos
    _itos->___lwmod
    _HMI_SetSegments->_ToSegment
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Bump_Wall->_Move_ADC_To
    _UpdateDistance->_eusartSend
    _Robot_Stop->_eusartSend
    _Move_ADC_To->___fltol
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___lwmod->___lwdiv
    ___fltol->___fladd
    ___flmul->___xxtofl
    ___fladd->___flneg
    _SteppingCW->_delay_ms
    _SteppingCCW->_delay_ms
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit
    _Get_Sensor_State->_eusartSend
    _Drive->_eusartSend

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Navigate_Maze
    _Navigate_Maze->_Go_Backward
    _Go_Backward->_Travel
    _Travel->_Fix_Error

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0 5249881
                                              0 BANK2      4     4      0
                                              0 BANK3      4     4      0
                         _ADCAverage
                          _Bump_Wall
                     _Closest_Object
                       _Console_Init
                     _Console_Render
                        _Create_Maze
                      _Detect_Victim
                    _FunctInitButton
                        _Go_Backward
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                         _HMI_Render
                    _HMI_RightSwitch *
                      _HMI_SetNumber
                       _HMI_UpSwitch *
                         _ISR_Enable
                            _InitADC
            _InitSerialCommunication
                        _Init_Timer0
                           _LCD_Init
                           _LED_Init
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                     _MXK_TestButton *
                        _Move_ADC_To
                      _Navigate_Maze
                         _Robot_Init
                     _Sensor_Observe
                             ___wmul
                           _delay_ms
                                _pop
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Sensor_Observe                                       6     6      0  232762
                                            145 BANK0      6     6      0
                         _ADCAverage
                     _Console_Render
                         _SteppingCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Robot_Init                                           0     0      0      93
                         _Robot_Stop
                     _UpdateDistance
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Navigate_Maze                                        8     8      0 1983658
                                             36 BANK1      6     6      0
                     _Console_Render
                          _Fix_Error
                        _Go_Backward
                             _Travel
                             ___wmul
                                _pop
                             _printf
 ---------------------------------------------------------------------------------
 (1) _pop                                                  4     2      2   10254
                                             35 BANK0      4     2      2
                            _isempty
                             _printf
 ---------------------------------------------------------------------------------
 (2) _isempty                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Go_Backward                                          6     2      4  797623
                                            157 BANK0      2     2      0
                                             32 BANK1      4     0      4
                             _Travel
                             ___wmul
                                _pop (ARG)
 ---------------------------------------------------------------------------------
 (2) _Travel                                              28    18     10  723929
                                            153 BANK0      4     4      0
                                              8 BANK1     24    14     10
                         _ADCAverage
                     _Console_Render
                      _Detect_Victim
                              _Drive
                          _Fix_Error
              _Get_VirtualWall_State
                        _Move_ADC_To
                         _Robot_Stop
                               _Turn
                     _UpdateDistance
                             ___wmul
                             _printf
                               _push
 ---------------------------------------------------------------------------------
 (3) _push                                                 2     0      2   10403
                                             35 BANK0      2     0      2
                             _isfull
                             _printf
 ---------------------------------------------------------------------------------
 (4) _isfull                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Turn                                                10     4      6     778
                                              1 BANK0     10     4      6
                         _Robot_Stop
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _Get_VirtualWall_State                                5     3      2      65
                                              1 BANK0      5     3      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _Fix_Error                                           16    12      4  261630
                                            145 BANK0      8     4      4
                                              0 BANK1      8     8      0
                         _ADCAverage
                              _Drive
                        _Move_ADC_To
                         _Robot_Stop
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Detect_Victim                                        5     3      2     127
                                              1 BANK0      5     3      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  364136
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  294468
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  263637
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   96261
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _Init_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSerialCommunication                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0   84709
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84709
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   37341
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Create_Maze                                         10    10      0   79258
                                              6 BANK0     10    10      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Closest_Object                                       0     0      0  232688
                         _ADCAverage
                     _Console_Render
                        _SteppingCCW
                             _printf
 ---------------------------------------------------------------------------------
 (2) _ADCAverage                                          26    26      0  111951
                                            119 BANK0     26    26      0
                       _FunctReadADC
                         _HMI_Render
                      _HMI_SetNumber
                            ___awdiv
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   88412
                                             98 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   28640
                                             79 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   47182
                                             87 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     663
                                             79 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   12119
                                             73 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (6) ___flge                                              12     4      8    1482
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   13173
                                             63 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    6575
                                             63 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     673
                                             39 BANK0      4     0      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (3) _HMI_SetNumber                                        2     0      2    4246
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (4) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (5) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (5) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (3) _FunctReadADC                                         2     0      2     214
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Bump_Wall                                            7     7      0  266263
                                             75 BANK0      7     7      0
                     _Console_Render
                              _Drive
                   _Get_Sensor_State
                        _Move_ADC_To
                         _Robot_Stop
                     _UpdateDistance
                           _delay_ms
                             _printf
 ---------------------------------------------------------------------------------
 (2) _UpdateDistance                                       6     4      2      31
                                              1 BANK0      6     4      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _eusartRec                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Robot_Stop                                           0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _Move_ADC_To                                          2     0      2  140713
                                             73 BANK0      2     0      2
                     _Console_Render
                        _SteppingCCW
                         _SteppingCW
                            ___fladd
                            ___flmul
                            ___fltol
                           ___xxtofl
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              23    17      6   10220
                                             21 BANK0     14     8      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) ___xxtofl                                            14    10      4    1996
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (6) ___fltol                                             10     6      4    1249
                                             63 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___flmul                                             25    17      8    6065
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             20    12      8    5942
                                             43 BANK0     20    12      8
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) _SteppingCW                                           0     0      0    3142
                               _STP1
                               _STP2
                               _STP3
                               _STP4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _SteppingCCW                                          0     0      0    3142
                               _STP1
                               _STP2
                               _STP3
                               _STP4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             6     4      2    3142
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _STP4                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _STP3                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _STP2                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _STP1                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0  107375
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   88568
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4   72584
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (6) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _Get_Sensor_State                                     0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (4) _Drive                                                4     0      4    4609
                                              1 BANK0      4     0      4
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _eusartSend                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCAverage
     _FunctReadADC
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     ___awdiv
     ___fladd
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flmul
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flneg
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _pow
       ___flge
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _exp
         ___fldiv
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _floor
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flge
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
       _log
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _frexp
   _Bump_Wall
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _Drive
       _eusartSend
     _Get_Sensor_State
       _eusartSend
     _Move_ADC_To
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _SteppingCCW
         _STP1
         _STP2
         _STP3
         _STP4
         _delay_ms
       _SteppingCW
         _STP1
         _STP2
         _STP3
         _STP4
         _delay_ms
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _Robot_Stop
       _eusartSend
     _UpdateDistance
       _eusartRec
       _eusartSend
     _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Closest_Object
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCCW
       _STP1
       _STP2
       _STP3
       _STP4
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _Create_Maze
     ___wmul
   _Detect_Victim
     _eusartRec
     _eusartSend
   _FunctInitButton
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
   _Go_Backward
     _Travel
       _ADCAverage
         _FunctReadADC
         _HMI_Render
           _OutSeg
             _SPI_Send
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         ___awdiv
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _pow
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _exp
             ___fldiv
             ___flge
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___flsub
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _eval_poly
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
             _floor
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flge
               ___fltol
                 ___fladd (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
           _log
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl
             _eval_poly
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
             _frexp
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _Detect_Victim
         _eusartRec
         _eusartSend
       _Drive
         _eusartSend
       _Fix_Error
         _ADCAverage
           _FunctReadADC
           _HMI_Render
             _OutSeg
               _SPI_Send
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           ___awdiv
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _pow
             ___flge
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _exp
               ___fldiv
               ___flge
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _eval_poly
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
               _floor
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flge
                 ___fltol
                   ___fladd (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___fladd
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___xxtofl (ARG)
                     _frexp (ARG)
             _log
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl
               _eval_poly
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
               _frexp
         _Drive
           _eusartSend
         _Move_ADC_To
           _Console_Render
             _Console_MakeField
               _Byte_GetBit
             _LCD_DrawField
               _Console_MakeField (ARG)
                 _Byte_GetBit
               _LCD_Word_Write (ARG)
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               _Set_Addr_Window (ARG)
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               ___wmul (ARG)
             _LCD_FillRectangle
               _LCD_Word_Write
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               _Set_Addr_Window
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
           _SteppingCCW
             _STP1
             _STP2
             _STP3
             _STP4
             _delay_ms
           _SteppingCW
             _STP1
             _STP2
             _STP3
             _STP4
             _delay_ms
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _Robot_Stop
           _eusartSend
         _delay_ms
       _Get_VirtualWall_State
         _eusartRec
         _eusartSend
       _Move_ADC_To
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _SteppingCCW
           _STP1
           _STP2
           _STP3
           _STP4
           _delay_ms
         _SteppingCW
           _STP1
           _STP2
           _STP3
           _STP4
           _delay_ms
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
       _Robot_Stop
         _eusartSend
       _Turn
         _Robot_Stop
           _eusartSend
         _eusartRec
         _eusartSend
       _UpdateDistance
         _eusartRec
         _eusartSend
       ___wmul
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
       _push
         _isfull
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
     ___wmul
     _pop (ARG)
       _isempty
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_Render *
     _OutSeg
       _SPI_Send
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_SetNumber *
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _HMI_UpSwitch *
     _Port_GetPin
   _ISR_Enable *
   _InitADC *
   _InitSerialCommunication *
   _Init_Timer0 *
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _LED_Init *
     _LED_Set
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_TestButton *
     _Port_GetPin
   _Move_ADC_To *
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCCW
       _STP1
       _STP2
       _STP3
       _STP4
       _delay_ms
     _SteppingCW
       _STP1
       _STP2
       _STP3
       _STP4
       _delay_ms
     ___fladd
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flmul
       ___xxtofl (ARG)
       _frexp (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Navigate_Maze *
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _Fix_Error
       _ADCAverage
         _FunctReadADC
         _HMI_Render
           _OutSeg
             _SPI_Send
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         ___awdiv
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _pow
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _exp
             ___fldiv
             ___flge
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___flsub
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _eval_poly
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
             _floor
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flge
               ___fltol
                 ___fladd (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
           _log
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl
             _eval_poly
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
             _frexp
       _Drive
         _eusartSend
       _Move_ADC_To
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _SteppingCCW
           _STP1
           _STP2
           _STP3
           _STP4
           _delay_ms
         _SteppingCW
           _STP1
           _STP2
           _STP3
           _STP4
           _delay_ms
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
       _Robot_Stop
         _eusartSend
       _delay_ms
     _Go_Backward
       _Travel
         _ADCAverage
           _FunctReadADC
           _HMI_Render
             _OutSeg
               _SPI_Send
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           ___awdiv
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _pow
             ___flge
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _exp
               ___fldiv
               ___flge
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _eval_poly
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
               _floor
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flge
                 ___fltol
                   ___fladd (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___fladd
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___xxtofl (ARG)
                     _frexp (ARG)
             _log
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl
               _eval_poly
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
               _frexp
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _Detect_Victim
           _eusartRec
           _eusartSend
         _Drive
           _eusartSend
         _Fix_Error
           _ADCAverage
             _FunctReadADC
             _HMI_Render
               _OutSeg
                 _SPI_Send
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             ___awdiv
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _pow
               ___flge
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _exp
                 ___fldiv
                 ___flge
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___flsub
                   ___fladd
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _eval_poly
                   ___fladd
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___xxtofl (ARG)
                     _frexp (ARG)
                 _floor
                   ___fladd
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flge
                   ___fltol
                     ___fladd (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___flneg (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                           _frexp (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___fladd
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___flneg (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                           _frexp (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flmul
                       ___xxtofl (ARG)
                       _frexp (ARG)
               _log
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl
                 _eval_poly
                   ___fladd
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___xxtofl (ARG)
                     _frexp (ARG)
                 _frexp
           _Drive
             _eusartSend
           _Move_ADC_To
             _Console_Render
               _Console_MakeField
                 _Byte_GetBit
               _LCD_DrawField
                 _Console_MakeField (ARG)
                   _Byte_GetBit
                 _LCD_Word_Write (ARG)
                   _LCD_Write
                     _Mode_Set
                     _SPI_Send
                 _Set_Addr_Window (ARG)
                   _LCD_Write
                     _Mode_Set
                     _SPI_Send
                 ___wmul (ARG)
               _LCD_FillRectangle
                 _LCD_Word_Write
                   _LCD_Write
                     _Mode_Set
                     _SPI_Send
                 _Set_Addr_Window
                   _LCD_Write
                     _Mode_Set
                     _SPI_Send
             _SteppingCCW
               _STP1
               _STP2
               _STP3
               _STP4
               _delay_ms
             _SteppingCW
               _STP1
               _STP2
               _STP3
               _STP4
               _delay_ms
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
                 _Console_PrintChar
                   _Console_Backspace
                     _Console_ClearCursor
                   _Console_FormFeed
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   _Console_NewLine
                   _Console_ResetCursor
                   _Console_Tab
                     _Console_ClearCursor
                     _Console_IncrementCursor
                       _Console_FormFeed
                       _Console_NewLine
                     ___awdiv
           _Robot_Stop
             _eusartSend
           _delay_ms
         _Get_VirtualWall_State
           _eusartRec
           _eusartSend
         _Move_ADC_To
           _Console_Render
             _Console_MakeField
               _Byte_GetBit
             _LCD_DrawField
               _Console_MakeField (ARG)
                 _Byte_GetBit
               _LCD_Word_Write (ARG)
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               _Set_Addr_Window (ARG)
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               ___wmul (ARG)
             _LCD_FillRectangle
               _LCD_Word_Write
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               _Set_Addr_Window
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
           _SteppingCCW
             _STP1
             _STP2
             _STP3
             _STP4
             _delay_ms
           _SteppingCW
             _STP1
             _STP2
             _STP3
             _STP4
             _delay_ms
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _Robot_Stop
           _eusartSend
         _Turn
           _Robot_Stop
             _eusartSend
           _eusartRec
           _eusartSend
         _UpdateDistance
           _eusartRec
           _eusartSend
         ___wmul
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
         _push
           _isfull
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
       ___wmul
       _pop (ARG)
         _isempty
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
     _Travel
       _ADCAverage
         _FunctReadADC
         _HMI_Render
           _OutSeg
             _SPI_Send
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         ___awdiv
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _pow
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _exp
             ___fldiv
             ___flge
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___flsub
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _eval_poly
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
             _floor
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flge
               ___fltol
                 ___fladd (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
           _log
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl
             _eval_poly
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
             _frexp
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _Detect_Victim
         _eusartRec
         _eusartSend
       _Drive
         _eusartSend
       _Fix_Error
         _ADCAverage
           _FunctReadADC
           _HMI_Render
             _OutSeg
               _SPI_Send
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           ___awdiv
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _pow
             ___flge
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _exp
               ___fldiv
               ___flge
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _eval_poly
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
               _floor
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flge
                 ___fltol
                   ___fladd (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___fladd
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___xxtofl (ARG)
                     _frexp (ARG)
             _log
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl
               _eval_poly
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
               _frexp
         _Drive
           _eusartSend
         _Move_ADC_To
           _Console_Render
             _Console_MakeField
               _Byte_GetBit
             _LCD_DrawField
               _Console_MakeField (ARG)
                 _Byte_GetBit
               _LCD_Word_Write (ARG)
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               _Set_Addr_Window (ARG)
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               ___wmul (ARG)
             _LCD_FillRectangle
               _LCD_Word_Write
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               _Set_Addr_Window
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
           _SteppingCCW
             _STP1
             _STP2
             _STP3
             _STP4
             _delay_ms
           _SteppingCW
             _STP1
             _STP2
             _STP3
             _STP4
             _delay_ms
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _Robot_Stop
           _eusartSend
         _delay_ms
       _Get_VirtualWall_State
         _eusartRec
         _eusartSend
       _Move_ADC_To
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _SteppingCCW
           _STP1
           _STP2
           _STP3
           _STP4
           _delay_ms
         _SteppingCW
           _STP1
           _STP2
           _STP3
           _STP4
           _delay_ms
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
       _Robot_Stop
         _eusartSend
       _Turn
         _Robot_Stop
           _eusartSend
         _eusartRec
         _eusartSend
       _UpdateDistance
         _eusartRec
         _eusartSend
       ___wmul
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
       _push
         _isfull
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
     ___wmul
     _pop
       _isempty
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Robot_Init *
     _Robot_Stop
       _eusartSend
     _UpdateDistance
       _eusartRec
       _eusartSend
     _eusartSend
   _Sensor_Observe *
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCW
       _STP1
       _STP2
       _STP3
       _STP4
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   ___wmul *
   _delay_ms *
   _pop *
     _isempty
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _printf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      4      F2      11       94.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      4     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     2A     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3E2      12        0.0%
DATA                 0      0     50E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu May 24 14:49:43 2018

                          i2_Timer0_Stop 9006                         SPI_Init@pChannel 0091  
             __size_of_MXK_BlockSwitchTo 0038                 Sensor_Observe@Low_Sensor 00F5  
                           i2_Motor_Step 6906                                        _A 01FD  
                                      l8 6F22                             ___fldiv@aexp 0078  
                           ___fldiv@bexp 0077                                        _a 01FE  
                                      _i 0163                                        _j 0162  
                                      _k 013C                                        _l 004F  
                                      _u 0161                                        _w 0050  
                                      _x 0142                             ___fldiv@sign 006C  
                                     l11 6406                                       l12 63F4  
                                     l90 5F8A                                       l87 5F04  
                    __size_of_ADCAverage 02F0                                       l89 5F64  
                       ??_UpdateDistance 0063                             ___awdiv@sign 0065  
                    ___wmul@multiplicand 0062                            Travel@Req_Dir 01D3  
                          _HMI_DIPSwitch 8E6A                       LCD_DrawField@pSize 0078  
                     LCD_DrawField@count 007E                        ?_Event_TestButton 0001  
                       i2_Timer0_Restart 8FBA                                      l120 74C0  
                                    l121 74D6                                      l122 74EC  
                                    l220 8104                                      l117 7502  
                                    l221 80D4                                      l118 74AC  
                                    l230 85DE                                      l222 8114  
                                    l223 80EC                              ?_LED_Toggle 0001  
                                    l234 87D2                                      l235 87AA  
                                    l227 85F6                                      l403 5764  
                                    l412 5484                                      l228 85C6  
                                    l340 7648                                      l404 5704  
                                    l421 5420                                      l413 5336  
                                    l237 87BE                                      l341 7652  
                                    l405 5794                            ??_Console_Tab 0068  
                                    l414 54A0                                      l430 6E52  
                                    l350 7716                                      l342 765C  
                                    l510 4FA0                                      l406 571C  
                                    l183 78BA                                      l415 5358  
                                    l351 76C4                                      l343 7666  
                                    l511 5096                                      l407 5734  
                                    l184 789A                                      l600 31F0  
                                    l432 6E78                                      l344 7670  
                                    l512 4FC0                                      l408 574C  
                                    l417 53BC                                      l601 3342  
                                    l433 6EA4                                      l353 76D0  
                                    l337 768E                                      l345 767A  
                                    l610 33BA                                      l602 321C  
                                    l354 76DA                                      l346 7684  
                                    l338 763C                                      l370 75E8  
                                    l611 3400                                      l603 3352  
                                    l427 6ECC                                      l355 76E4  
                                    l363 7606                                      l371 75F2  
                                    l531 4406                              ?_HMI_GetBar 0001  
                                    l612 3446                                      l604 32AC  
                                    l356 76EE                                      l372 75FC  
                                    l364 75B4                                      l532 4428  
                                    l516 5000                                      l357 76F8  
                                    l509 507C                                      l614 3518  
                                    l358 7702                                      l366 75C0  
                                    l526 4448                                      l615 3510  
                                    l607 348C                                      l359 770C  
                                    l367 75CA                                      l519 5040  
                                    l616 352A                                      l608 3374  
                                    l368 75D4                                      l528 4466  
                                    l393 8360                                      l617 3514  
                                    l609 34AA                                      l369 75DE  
                                    l529 43E8                                      l483 4C60  
                                    l900 4522                                      l732 7A12  
                                    l476 4D28                                      l901 4526  
                                    l733 7A0C                                      l389 8010  
                                    l477 4BB8                                      l397 87A0  
                                    l910 454A                                      l902 452A  
                                    l726 754A                                      l478 4D44  
                                    l486 4CC4                                      l654 8BAA  
                                    l911 454E                                      l903 452E  
                                    l727 7544                                      l479 4BFC  
                                    l655 8BA2                                      l824 8074  
                                    l912 4552                                      l904 4532  
                                    l832 869A                                      l681 7C8C  
                                    l913 4556                                      l905 4536  
                                    l921 8162                                      l673 8AA8  
                                    l657 8BA6                                      l914 455A  
                                    l906 453A                                      l922 8132  
                                    l930 6DB0                                      l915 455E  
                                    l907 453E                                      l819 7E84  
                                    l684 7CA2                                      l916 4562  
                                    l908 4542                                      l860 4482  
                                    l853 456A                                      l917 4566  
                                    l909 4546                                      l861 4486  
                                    l781 8A44                                      l597 31FA  
                                    l678 7CC8                                      l686 7CB2  
                                    l870 44AA                                      l862 448A  
                                    l854 446E                                      l598 31E6  
                                    l679 7C7C                                      l871 44AE  
                                    l863 448E                                      l599 320A  
                                    l880 44D2                                      l872 44B2  
                                    l864 4492                                      l856 4472  
                                    l928 6E22                                      l776 8936  
                                    l881 44D6                                      l873 44B6  
                                    l865 4496                                      l857 4476  
                                    l929 6DFA                                      l890 44FA  
                                    l882 44DA                                      l874 44BA  
                                    l866 449A                                      l858 447A  
                                    l891 44FE                                      l883 44DE  
                                    l875 44BE                                      l867 449E  
                                    l859 447E                                      l892 4502  
                                    l884 44E2                                      l876 44C2  
                                    l868 44A2                                      l893 4506  
                                    l885 44E6                                      l877 44C6  
                                    l869 44A6                                      l990 7C24  
                                    l894 450A                                      l886 44EA  
                                    l878 44CA                                      l983 792A  
                                    l895 450E                                      l887 44EE  
                                    l879 44CE                                      l992 7C30  
                                    l984 78D0                                      l896 4512  
                                    l888 44F2                                      l976 7CFC  
                                    l985 7928                                      l897 4516  
                                    l889 44F6                                      l898 451A  
                                    l978 7D08                                      l899 451E  
                                    l997 8376                                      l999 8396  
                                    _RA2 007C02                                      _RA3 007C03  
                                    _RD5 007C1D                                      _RD7 007C1F  
                                    _PR2 000FCB                                      _Spd 01F5  
                                    _exp 46EC                                      _log 57AC  
                                    _mod 012E                                      _val 0154  
                                    _pop 8498                                      _pow 4DC2  
                                    _top 004B                              ?_HMI_SetBar 0001  
                     ??_Event_TestButton 0079                             _Word_GetPair 8A24  
                                    prod 000FF3                              ?_HMI_Render 0001  
                    MXK_SwitchTo@pModule 0067                                      tosl 000FFD  
                                    wreg 000FE8                       Console_MakeField@x 0070  
                     Console_MakeField@y 0071                               _TXSTA1bits 000FAD  
                           Console_Tab@c 006F                             Console_Tab@i 006E  
                    LCD_DrawField@pField 0072                             Console_Tab@t 006D  
                           ___flmul@aexp 007B                             ___flmul@bexp 0080  
                             i2_delay_us 87E4                     Port_Set@TypeRequired 0082  
                           ___flmul@sign 007A                             ___flmul@temp 0085  
                           ___flmul@prod 0081                        Console_FormFeed@x 0062  
                      Console_FormFeed@y 0063                      LCD_DrawField@pPoint 0074  
                         ?_LCD_DrawField 0072                    Port_SetPinType@Output 008A  
                        Port_SetPin@Type 0073                          Port_SetPin@pPin 0071  
                          ?_Byte_GetPair 0069                          __end_of_LED_Set 8608  
                __size_ofi2_Word_GetPair 0030                            i2_Port_SetPin 7044  
                           ___fltol@exp1 00A8                             _Word_SetPair 8912  
                                   l1000 83AE                                     l1010 73AA  
                                   l1004 81A0                            ?_Byte_GetZone 0060  
                                   l1005 81C6                                     l1040 5D46  
                                   l1200 723E                                     l1009 73B6  
                                   l1041 5D4C                                     l1201 7286  
                                   l1042 5D52                                     l1202 729A  
                                   l1043 5D58                                     l1036 5E54  
                                   l1044 5D5E                                     l1204 72BE  
                                   l1045 5D64                                     l1037 5D40  
                                   l1205 72AA                                     l1062 52B8  
                                   l1063 52E6                                     l1047 5DE2  
                                   l1207 72CC                                     l1056 518C  
                                   l1057 5306                                     l1153 5636  
                                   l1082 7148                                     l1058 5194  
                                   l1146 7BBC                                     l1059 51B8  
                                   l1084 7150                                     l3100 3B86  
                                   l3020 81EA                                     l1077 711C  
                                   l3021 81E2                                     l2205 61F4  
                                   l3030 86F6                                     l1158 89B8  
                                   l2214 7030                                     l2206 6152  
                                   l2230 2F3E                                     l1079 7128  
                                   l3103 3BCC                                     l3031 86EE  
                                   l2215 6FF0                                     l2207 61B4  
                                   l2231 2F50                                     l3024 820A  
                                   l2240 3126                                     l2161 7F0E  
                                   l3025 8214                                     l3121 3F7A  
                                   l2209 61F0                                     l2233 2F8E  
                                   l2170 7F4A                                     l3034 870E  
                                   l3122 3F76                                     l3210 470C  
                                   l3050 4E1C                                     l2242 31BC  
                                   l2226 2E72                                     l3107 3BF2  
                                   l3035 8718                                     l3131 4094  
                                   l3051 4E08                                     l2403 8F52  
                                   l2411 84D2                                     l2235 3112  
                                   l2164 7F22                                     l3108 3BFA  
                                   l3060 390C                                     l3124 3FC0  
                                   l3212 4754                                     l2244 31BE  
                                   l2236 2FC8                                     l2228 2F1A  
                                   l2421 8588                                     l3109 3BFC  
                                   l3061 3908                                     l3141 4102  
                                   l3117 3F3A                                     l3221 6630  
                                   l3213 479C                                     l3053 4E3A  
                                   l2237 310E                                     l2229 2F2C  
                                   l2422 8598                                     l2158 7EFA  
                                   l2510 5BD6                                     l3134 40CA  
                                   l3126 3FE8                                     l3118 3F36  
                                   l3230 71C4                                     l3222 661E  
                                   l3214 47D2                                     l3054 4EDC  
                                   l1630 6764                                     l2246 31CE  
                                   l2167 7F36                                     l3151 35BA  
                                   l2503 5B18                                     l3143 4146  
                                   l3135 40AC                                     l3127 4096  
                                   l3215 494E                                     l3055 4EB2  
                                   l1631 67B4                                     l2239 3176  
                                   l3072 3A2C                                     l3152 35B6  
                                   l3144 416A                                     l3128 4046  
                                   l3224 664E                                     l3216 4918  
                                   l3056 4F86                                     l2360 0032  
                                   l1632 679E                                     l2416 8754  
                                   l2248 31D0                                     l3073 3A0A  
                                   l3065 3954                                     l3153 35CA  
                                   l2505 5B7A                                     l3145 4194  
                                   l3129 406E                                     l3225 66E8  
                                   l2441 7A58                                     l2521 6CEC  
                                   l3082 3A74                                     l3074 3A18  
                                   l3066 3950                                     l3162 37E8  
                                   l2506 5BCE                                     l3146 41A0  
                                   l3234 6A24                                     l2362 006A  
                                   l2370 8410                                     l1730 88B4  
                                   l2450 2414                                     l2530 2C4E  
                                   l3091 3B46                                     l3083 3A78  
                                   l3075 3A1C                                     l3171 3864  
                                   l3163 37CA                                     l3155 35FA  
                                   l2611 5A04                                     l2507 5BC2  
                                   l3147 41A2                                     l2363 0142  
                                   l1627 67F4                                     l2435 83F6  
                                   l2451 2450                                     l2515 6CB8  
                                   l3068 39B0                                     l3172 3882  
                                   l3156 35F6                                     l3180 5C38  
                                   l2612 5A5E                                     l2604 5992  
                                   l3260 68EA                                     l3236 6A72  
                                   l3252 57D0                                     l2364 0082  
                                   l1724 8958                                     l1732 88D4  
                                   l1628 67EA                                     l2460 25A4  
                                   l2532 2D3C                                     l3093 3B5C  
                                   l3069 3974                                     l3157 360A  
                                   l3181 5C56                                     l2613 5A0A  
                                   l2605 5944                                     l2509 5BDE  
                                   l3261 6852                                     l1629 677C  
                                   l2453 247A                                     l2517 6CCA  
                                   l2525 2DE6                                     l3086 3B12  
                                   l3078 3A8A                                     l3174 38A6  
                                   l3158 3628                                     l3190 5CCC  
                                   l2606 5958                                     l3238 6AAC  
                                   l3254 57FA                                     l2382 3CD2  
                                   l1726 8980                                     l2454 2474  
                                   l2446 243A                                     l2534 2D4E  
                                   l2526 2A76                                     l3095 3B66  
                                   l3079 3A50                                     l3175 38C4  
                                   l3183 5C68                                     l2607 59BC  
                                   l2375 887E                                     l3239 6A9C  
                                   l1735 8E52                                     l2471 262A  
                                   l2455 24A4                                     l2447 23B0  
                                   l2519 6CDA                                     l3088 3B22  
                                   l3184 5C5C                                     l2552 49D6  
                                   l2472 2670                                     l2464 25F0  
                                   l2456 249E                                     l2536 2D50  
                                   l2528 2B62                                     l3169 3820  
                                   l2369 8430                                     l2561 4A5C  
                                   l2537 2E12                                     l3194 5CF6  
                                   l3186 5CA6                                     l2378 888E  
                                   l2482 2844                                     l2466 260E  
                                   l2458 24D8                                     l3195 5D28  
                                   l3187 5C8E                                     l3179 5C28  
                                   l1827 6036                                     l2555 4A18  
                                   l2459 2690                                     l2475 26A4  
                                   l2580 6B1E                                     l1828 6052  
                                   l2572 4B60                                     l2564 4ADA  
                                   l2556 49FE                                     l2484 2852  
                                   l2476 2816                                     l3189 5CD8  
                                   l2477 27E6                                     l2582 6BB0  
                                   l2486 2862                                     l2478 2796  
                                   l2398 8F40                                     l2583 6B74  
                                   l2823 8AD4                                     l2567 4B1C  
                                   l2559 4AAC                                     l2816 64F8  
                                   l2568 4B02                                     l2488 2872  
                                   l2817 652C                                     l1873 8A1C  
                                   l2818 656A                                     l2579 6B48  
                                   l2819 65A8                                     l2597 592C  
                                   l2854 6C78                                     l2846 6BE8  
                                   l2598 593C                                     l2855 6C6C  
                                   l2791 77AA                                     l2599 5960  
                                   l2848 6C54                                     l2792 77B4  
                                   l2784 775C                                     l2857 6C94  
                                   l2849 6C44                                     l2793 77C2  
                                   l2785 776C                                     l2787 778A  
                                   l2971 7830                                     l2788 7782  
                                   l2972 783E                                     l2967 77FC  
                                   l2968 77F0                                     ?_exp 00B7  
                                   ?_log 00AF                           ??_Console_Init 0060  
                                   _ADON 007E10                                     ?_pop 0083  
                  Port_SetPinType@pInput 0086                                     ?_pow 00C2  
                         Travel@Test_ADC 01C3                                     STR_1 FFFB  
                                   STR_2 FF25                                     STR_3 FFFB  
                                   STR_4 FFAF                                     STR_5 FF4B  
                                   STR_6 FFFB                                     STR_7 FF11  
                                   STR_8 FEB2                                     STR_9 FF38  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     _LATD 000F8C  
                                   _LATE 000F8D                                     _LATF 000F8E  
            __size_of_MXK_InitTestButton 0018                                     _LATG 000F8F  
                    __end_of_GetPortPORT 7746                                     _PIR1 000F9E  
                                   _PIR2 000FA1                                     _PIR3 000FA4  
                    __end_of_GetPortTRIS 7636                                     _SPI1 02C8  
                                   _SPI2 02D3                                     _TMR0 000FD6  
                                   _STP1 8F1E                                     _STP2 8F0A  
                                   _STP3 8EF6                                     _STP4 8EE2  
                                   _gISR 0108                       Event_DIPSwitch@Bar 007A  
                          ??_Byte_GetBit 0063                                     _Turn 7A3E  
                     SPI_MaxSpeed@pInput 006F                                     _flag 0138  
                          ?_Byte_SetByte 0060                            ?_Byte_SetPair 006B  
                        __end_of_SPI_DCS 8AB6                                     _main 2E28  
                                   _maze 0200                                     _mode 014C  
                        ??i2_Byte_SetBit 0005                            ?_Byte_SetQuad 006B  
                                   _itos 6D78                                     _test 011C  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   indf0 000FEF                                     fsr2h 000FDA  
                                   fsr0l 000FE9                                     indf1 000FE7  
                                   indf2 000FDF                                     fsr1l 000FE1  
                                   fsr2l 000FD9                                     _push 8722  
                          ?_Byte_SetZone 0060                                     btemp 0051  
                                   _zero 01FF                      __end_of_Create_Maze 22EC  
                                   exp@x 00B7                                     log@x 00AF  
                          ??_Byte_SetBit 0064                                     pow@x 00C2  
                                   pow@y 00C6                       __size_of_LCD_Reset 0050  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 14AA                       __size_of_LCD_Write 0020  
                          __CFG_IESO$OFF 000000                          ___fldiv@new_exp 0071  
                        ?_SPI_DisableISR 0060                      HMI_SetButton@pValue 0066  
                   Fix_Error@close_error 01BB                               _Cliff_Left 015C  
                          Console_Init@x 0062                            Console_Init@y 0063  
                         ?i2_Timer0_Stop 0001                        i2Byte_SetBit@pBit 0003  
                           ___param_bank 000000                          __end_of_Font5x7 FE07  
                        __end_of_InitADC 844C                     Set_Rotation@rotation 0066  
              __size_of_Get_Sensor_State 0066                            ??_Init_Timer0 0060  
                 __size_of_HMI_SetButton 007A                   __size_of_HMI_SetNumber 0026  
                            ?_ISR_Enable 0001                                    ??_exp 00BB  
                                  ??_log 00B3                                    ??_pop 0085  
                                  ??_pow 00CA             __size_of_Console_ClearCursor 0030  
                       __end_of_LCD_Fill 8650                         __end_of_LCD_Init 5FD2  
                                  ?_STP1 0001                                    ?_STP2 0001  
                                  ?_STP3 0001                                    ?_STP4 0001  
                         ?_HMI_DIPSwitch 0001                            __CFG_PLLDIV$3 000000  
                         Bump_Wall@temp2 00B0                         __end_of_LED_Init 8122  
                           _BAUDCON1bits 000F7E                            ??_Button_Init 00A8  
                GetPortProperties@pInput 0062                            ??_Button_Poll 007E  
                       __end_of_HMI_Init 5638                   __size_of_Navigate_Maze 0534  
                                  l15107 8074                                    l15115 80AA  
                                  l15109 8086                                    ?_Turn 0061  
                                  l15129 8256                                    l15313 72BE  
                                  l16105 4ACA                                    l15227 6E0E  
                                  l16115 4AE6                                    l15245 7120  
                                  l15239 7114                                    l13807 65E0  
                                  l16135 4B60                                    l16119 4B02  
                                  l16071 49FE                                    l13833 7C1C  
                                  l17121 7D00                                    l16057 49C6  
                                  l15451 51B0                                    l15275 7BB4  
                                  l17115 7CF4                                    l16067 49E2  
                                  l15533 59C0                         __end_of_HMI_Poll 7FB4  
                                  l13839 7C28                                    l17143 5614  
                                  l16087 4A5C                                    l15387 4918  
                                  l16603 25A4                                    l16515 8F40  
                                  l15487 898E                                    l16527 2310  
                                  l15499 8F96                                    l14971 4194  
                                  l17339 0022                                    l17357 0072  
                                  l17373 0142                                    l17349 0052  
                                  l15927 869A                                    l17369 0134  
                                  l15929 86AC                                    l16835 56FC  
                                  l15889 6036                                    _I2C1T 0194  
                                  _I2C2T 018D                                    l16797 8634  
                                  l16959 5F04                                    l16969 5F96  
                                  l18595 3176                            ___fltol@sign1 00A7  
                        __end_of___fladd 3C18                                    ?_main 0001  
                        __end_of___fldiv 41BE                          __end_of___awdiv 77CC  
                        __end_of___flneg 8AE6                                    _ADRES 000FC3  
                                  ?_itos 006C                                    STR_10 FFFB  
                                  STR_11 FEFC                                    STR_20 FFD0  
                                  STR_12 FFFB                                    STR_21 FFBB  
                                  STR_13 FF6C                                    STR_30 FFFB  
                                  STR_14 FFFB                                    STR_22 FFE3  
                                  STR_15 FFFB                                    STR_31 FFC6  
                                  STR_23 FE61                                    STR_32 FFDA  
                                  STR_16 FFD0                                    STR_24 FE8B  
                                  STR_17 FFEC                                    STR_33 FF97  
                                  STR_25 FF8B                                    STR_26 FFFB  
                                  STR_34 FFF4                                    STR_18 FEE6  
                                  STR_19 FFFB                                    STR_35 FFA3  
                                  STR_27 FF5C                                    STR_36 FFFB  
                                  STR_37 FF7C                                    STR_29 FECE  
                        __end_of___flmul 38DA                          __end_of___flsub 8698  
                        __end_of___fltol 6CA6                                    ?_push 0083  
                        _Event_DIPSwitch 8C18                          __end_of___lldiv 7850  
                                  u11100 778E                                    u11020 79E6  
                                  u11040 7A30                                    u11050 819C  
                                  u11027 79DC                                    u11300 3A34  
                                  u11060 81BE                                    u11045 7A2C  
                                  u11250 39E0                                    u12210 40FE  
                                  u11260 39F0                  __size_of_HMI_LeftSwitch 0014  
                        ___awdiv@divisor 0062                                    u11510 3BD8  
                                  u11430 3B6A                                    u11270 39F2  
                                  u13030 59F2                   Navigate_Maze@Direction 01DF  
                                  u12320 86FA                                    u12240 4154  
                                  u12400 6A44                                    u14000 255A  
                                  u13050 5A68                                    u12250 4178  
                                  u13130 4E94                                    u14010 2590  
                                  u11460 3B82                                    u11620 3616  
                                  u11710 3872                                    u11630 378C  
                                  u13070 8874                                    u11720 3890  
                                  u11800 6C06                                    u12360 663C  
                                  u12408 6A48                                    u12520 7E32  
                                  u12450 80AA                                    u12290 81EE  
                                  u14050 261E                                    u15010 2B5A  
                                  u11635 3782                                    u12620 6E0E  
                                  u13420 86CA                                    u11805 6BFC  
                                  u12710 7BFA                                    u13270 7800  
                                  u14310 864C                                    u13510 4986  
                                  u15030 2C46                                    u11680 381C  
                                  u11840 6C7E                                    u11920 5CE2  
                                  u13360 8854                                    u13600 4A40  
                                  u12705 7BCA                                    u12490 826E  
                                  u10970 7C60                                    u12810 47A4  
                                  u12554 8288                                    u13530 499A  
                                  u15050 2D32                                    u12555 8284  
                                  u12660 7182                                    u10980 7C64  
                                  u12820 47A6                                    u12564 82B0  
                                  u14228 6F86                                    u13444 799C  
                                  u14340 579A                                    u12565 82AC  
                                  u13445 7998                                    u13365 8850  
                                  u12670 718A                                    u13390 6098  
                                  u14238 63A6                                    u13470 83EC  
                                  u13550 49AA                                    u13375 5FF2  
                                  u14239 63BA                                    u12584 7572  
                                  u12585 756E                                    u12930 52F4  
                                  u11970 71EC                                    u12594 759A  
                                  u14370 6742                                    u13650 4AE6  
                                  u10995 8F64                                    u12595 7596  
                                  u10996 8F66                                    u14540 5F96  
                                  u14380 6756                                    u13580 49E2  
                                  u13900 23E8                                    u13805 43C6  
                                  u11990 8B92                                    u12870 8904  
                                  u14390 6790                                    u13670 4B44  
                                  u13735 41E0                                    u14288 64AC  
                                  u13745 41F2                                    u11978 71F0  
                                  u11995 8B8E                                    u12875 8900  
                                  u13755 4204                                    u13765 421C  
                                  u16238 2E92                                    u13775 4316  
                                  u16239 2EA6                                    u14760 7D4C  
                                  u14920 0052                                    u16248 2EB2  
                                  u13785 436A                                    u16249 2EC6  
                                  u13890 2384                                    u16258 2ED2  
                                  u13795 4398                                    u16259 2EE6  
                                  u16188 8A64                                    u16268 2EF2  
                                  u16189 8A78                                    u16269 2F06  
                                  u14950 0134                                    u13990 2530  
                                  u13991 252E                                    u14960 0142  
                                  u14970 298A                                    _INDEX 0040  
                                  u14990 2A6E                          __end_of___lwdiv 821E  
                                  _MASKS FC17                          __end_of___lwmod 8722  
                                  i2l430 705C                                    i2l432 7082  
                                  i2l433 70AC                                    i2l427 70D2  
                                  i2l732 7B76                                    i2l733 7B70  
                                  i2l832 87E6                                    i2l781 8B34  
                        ___awdiv@counter 0064                                    _PORTA 000F80  
                                  _PORTB 000F81                                    _PORTC 000F82  
                                  _PORTD 000F83                                    _PORTE 000F84  
                                  _PORTF 000F85                                    _PORTG 000F86  
                __size_of_HMI_DownSwitch 0014                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _TRISF 000F97                                    _TRISG 000F98  
                                  _T_VAR 0132                         ??i2_Byte_GetPair 000D  
                                  _Drive 8576                            ?_FunctReadADC 0060  
                       ??i2_Byte_GetZone 0006                       Port_TogglePin@pPin 0076  
                                  _X_Pos 0140                  __size_of_Sensor_Observe 0140  
                                  _Y_Pos 013E                           __CFG_FCMEN$OFF 000000  
                                  _PortA 03E4                                    _PortB 02F2  
                                  _PortC 0179                                    _PortD 016F  
                                  _PortE 0165                                    _PortF 0183  
                                  _PortG 02E8                  __end_of_Port_SetPinType 54BC  
                                  _Steps 0148                          _ADC_Initialised 0164  
                  __end_of_Detect_Victim 8400                           ??_Byte_GetPair 006C  
                         ?i2_Port_SetPin 0010                              LED_Set@pLED 0075  
                         Travel@rev_Dist 01CF                          __end_of_dpowers FC17  
                         ??_Byte_GetZone 0065                                    _count 0126  
                                  _floor 65E4                                    _ldexp 6A04  
                         Button_Poll@Pin 0083                                    _frexp 7194  
                                  _errno 011A                 __size_of_Set_Addr_Window 009A  
                    __end_of_Console_Tab 73FC                         __end_of_MXK_Init 6394  
                        __end_of_isempty 8F44                                    _stack 0300  
                   i2Byte_GetPair@pInput 000A                                    _putch 8F84  
                                  _total 0144                         __end_of_SPI_Init 3588  
                       __end_of_SPI_Send 7CE6                               _BumpSensor 003A  
                            _Go_Backward 6CA6                    __end_ofi2_MXK_Release 9012  
                                  pclath 000FFA                                    tablat 000FF5  
                        __end_of_reverse 8176                       __size_of_MXK_Queue 000E  
                         ??_Byte_SetByte 0063                           ??_Byte_SetPair 006F  
                                  pow@yi 00D3                           ??_Byte_SetQuad 006F  
                                  plusw2 000FDB                           ??_Byte_SetZone 0066  
                                  status 000FD8                                    wtemp6 0052  
                        _Configure_GPIOs 8014                     i2MXK_Queue@pCallback 0001  
                            i2delay_us@u 0003                           _LCD_Word_Write 8D7E  
                            _Cliff_FLeft 015E                      __size_of_LED_Toggle 0040  
                    __size_of_HMI_GetBar 0006                            ?_HMI_UpSwitch 0001  
                            exp@exponent 00BF                               _Event_NULL 1404  
            __size_of_Port_CheckPairType 0060                              ldexp@newexp 00B3  
                           __end_of_STP1 8F32                             __end_of_STP2 8F1E  
                           __end_of_STP3 8F0A                             __end_of_STP4 8EF6  
                            _Cliff_Right 015D                      __size_of_HMI_SetBar 000A  
                        __initialization 73FC                      __size_of_HMI_Render 0036  
                             _Found_Flag 0030                              log@exponent 00B3  
                          _Current_Angle 0136                      __end_of_Byte_GetBit 8BA0  
                          _Current_Dist1 0150                            _Current_Dist2 014E  
                           __end_of_Turn 7AB4                             __end_of_main 31E4  
                           __end_of_itos 6E36                     HMI_SetButton@reindex 0062  
                           SPI_Send9@dat 015A                             __end_of_push 8764  
                    __end_of_Byte_SetBit 82C4                     Travel@Dist_Travelled 01D1  
                          ??_Move_ADC_To 00AB                         __end_of_InitList FBED  
            __size_of_Port_CheckQuadType 0050                                   ??_STP1 0060  
                                 ??_STP2 0060                                   ??_STP3 0060  
                                 ??_STP4 0060                         __end_of_Mode_Set 8F68  
            __size_of_Port_CheckPortType 0040                                   ??_Turn 0067  
                            HMI_Render@a 0068                                   ??_main 02FC  
                                 ??_itos 0070                                   ??_push 0085  
                    __end_of_Init_Timer0 8DFA                 __size_of_FunctInitButton 0076  
                _Console_MakeField$10974 006E                            __activetblptr 000003  
                      Port_SetPin@pInput 006F                        __end_of_LCD_Reset 8314  
                      Port_SetPin@pValue 0072                                ??_LED_Set 0075  
                      _MXK_InitDIPSwitch 8DFA                           ??_FunctReadADC 0062  
                      GetPortPORT@pInput 0062                   Port_CheckPairType@Pin1 008A  
                 Port_CheckPairType@Pin2 008B                        __end_of_LCD_Write 8D08  
                            _GetPortPORT 76BE                             ?i2_MXK_Queue 0001  
                            _GetPortTRIS 75AE                          ??_LCD_DrawField 007C  
                                 ?_Drive 0061               __end_of_PortProperty_Valid 7E88  
                       __end_of_Port_Set 4468                              ?i2_delay_us 0001  
       __size_of_Console_IncrementCursor 0054                       __size_of_Fix_Error 0250  
                        Travel@direction 01BF                      __end_of_Button_Init 6F9A  
                    __end_of_Button_Poll 64C2                        Word_GetPair@pPair 006E  
                LCD_FillRectangle@pPoint 006B                       ?_MXK_InitDIPSwitch 0001  
                          _HMI_SetButton 794A                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                             ??_ADCAverage 00D7  
                              ??_SPI_DCS 0062                                   ?_floor 00A9  
                                 ?_ldexp 00AF                                   ?_frexp 0060  
                            _Create_Maze 0000                               _Low_Sensor 01F1  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                     __size_of_Bump_Wall 00E0                            _HMI_SetNumber 8C3E  
                 Port_SetQuadType@Output 009A                                   _ANCON0 000FC1  
                       ___awdiv@dividend 0060                                   ?_putch 0001  
                       ??_Console_Render 0083                            ToSegment@pCHR 0060  
                                 _GODONE 007E11                         _Console_FormFeed 7C0E  
                 Port_SetQuadType@pInput 0096                                   i2l1630 696A  
                                 i2l1631 69B6                                   i2l1632 69A2  
                                 i2l1730 89CC                                   i2l1627 69F2  
                                 i2l1732 89EC                                   i2l1628 69E8  
                                 i2l1629 6980                                   i2l1590 145E  
                         __CFG_WDTEN$OFF 000000                      __size_of_ISR_Enable 000A  
                                 _RCREG1 000FAF                                   _RCSTA1 000FAC  
                 __end_of_LCD_Word_Write 8D98                            _Navigate_Maze 28F4  
                         _Timer0_Restart 8FAE                                   _SPBRG1 000FB0  
                    ??_MXK_InitDIPSwitch 009B                        _Current_Direction 01F9  
                                 _TRISA2 007C92                                   _TRISA3 007C93  
                                 _TRISD5 007CAD                                   _TRISD7 007CAF  
                                 _TXREG1 000FAE                         __end_of___xxtofl 5D3A  
                              ??_InitADC 0060                           i2_MXK_SwitchTo 89BA  
                                 _TXSTA1 000FAD                          Byte_GetBit@pBit 0062  
                             _Reset_High 8DCA                       Console_Render@temp 0085  
                         ??_HMI_UpSwitch 0066                           OutSeg@pSegment 0063  
                        ??i2_Timer0_Stop 0001                      Port_TogglePin@Value 0077  
                       __end_of_delay_ms 80CE                             LED_Init@pLED 008D  
                       __end_of_delay_us 86DE                            ??_Timer2_Init 0071  
                          ??_Timer0_Stop 0060                               _Timer0_ISR 8BF0  
               __size_of_Console_NewLine 007C                        Timer2_Init@DIVIDE 007A  
                         __CFG_XINST$OFF 000000                                   _OutSeg 7BA0  
               __size_of_HMI_InitButtons 0006                               _Prev_Angle 0160  
                                 _Travel 22EC                                   ___flge 64C2  
                             _Motor_Step 66FA                  __end_of_Event_DIPSwitch 8C3E  
                              ??___fladd 0093                                   ___wmul 8BC8  
                        ??_HMI_DIPSwitch 0066                                ??___fldiv 0068  
                              ??___awdiv 0064                                ??___flneg 008B  
                         __CFG_STVREN$ON 000000                               _Robot_Init 8E2A  
                                 _change 004E                                ??___flmul 0076  
                                 _lMotor 0036                                ??___flsub 00A7  
                              ??___fltol 00A3                                ??___lldiv 0068  
                                 _lQueue 0029                               _TestButton 02DE  
                             _Robot_Stop 8CC8                                ??___lwdiv 0064  
                     __size_of_ToSegment 0284                                ??___lwmod 006B  
               __end_of_Port_SetQuadType 4DC2                 i2Byte_GetZone@pChunkSize 0005  
                           HMI_GRender@a 0156                     __end_of_Console_Init 7D50  
                      GetPortTRIS@pInput 0062                       __size_of_Reset_Low 0018  
                                 clear_0 7444                                   clear_1 7456  
                                 clear_2 7462                                   clear_3 746E  
                                 clear_4 747E                                   _isfull 8F44  
                     __end_of_ADCAverage 3F08                         ___awdiv@quotient 0066  
                             Port_Init@i 00A5                        __end_of_MXK_Queue 8F84  
             __end_ofHMI_SetButton@F7213 FC24                                   _printf 5920  
              __end_of_MXK_InitDIPSwitch 8E12                                   main@up 03F0  
                         HMI_SetButton@v 0067                                   floor@i 00AD  
                                 floor@x 00A9                   HMI_SetSegments@pString 0061  
                            _Console_Tab 7368                      LCD_Word_Write@value 0065  
                           __pdataCOMRAM 0047                         Create_Maze@count 0068  
                     __size_of_Port_Init 0174                            ??_Port_GetPin 0063  
               Port_CheckPortType@Output 0099                                ??_isempty 0060  
                    __end_of_Move_ADC_To 5BE6                          ??i2_Port_SetPin 0014  
                           __mediumconst FB3A              __end_ofTimer2_Init@PRESCALE FC27  
               Port_CheckPortType@pDrive 0098                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                           ?_MXK_Dequeue 0001                           ?_HMI_SetButton 0001  
               Port_CheckPortType@pInput 0096                            ??_Port_SetPin 0073  
                              ??_reverse 0064                    Console_MakeField@Fill 035A  
                       ?_Port_SetPinType 0086                                   putch@c 0074  
                         ?_HMI_SetNumber 0076                           i2_Word_GetPair 8B16  
                __end_of_Configure_GPIOs 8072                         ??_MXK_TestButton 0066  
                 __end_of_Timer0_Restart 8FBA                            Set_Rotation@m 0065  
                           ?_MXK_Release 0001                           ?_Navigate_Maze 0001  
                             ___flge@ff1 0060                               ___flge@ff2 0064  
                             _SteppingCW 84E2                          __CFG_FOSC$HSPLL 000000  
                 __end_ofi2_MXK_SwitchTo 89F0                             ___xxtofl@arg 006A  
                       __end_ofexp@coeff FE2F                             i2delay_us@us 0001  
                           ___xxtofl@exp 0069                             ___xxtofl@val 0060  
                       __end_oflog@coeff FE53                          ?_LCD_Word_Write 0065  
                             __accesstop 0060                  __end_of__initialization 7484  
                     Fix_Error@far_error 01BD                               Travel@Dist 01C1  
                              ?_LCD_Fill 0069                                ?_LCD_Init 0001  
                           _Cliff_FRight 015F                            SPI_Init@pMode 0092  
                             Travel@Wall 01C7                               ___flneg@f1 0087  
                            _Byte_GetBit 8B74                                ?_LED_Init 0001  
               __end_ofi2_Timer0_Restart 8FC6                               Travel@spd1 01CB  
                             Travel@spd2 01CD                                ?_HMI_Init 0001  
                      ??_Set_Addr_Window 0068                                ?_HMI_Poll 0001  
                           eval_poly@res 00AB                            ___rparam_used 000001  
                             ___fltol@f1 009F                              _Byte_SetBit 8272  
                          __end_of_MASKS FC20                           _PortA_Property FE5F  
                            ?_Event_NULL 0001                                LCD_Fill@i 006B  
                              LCD_Fill@j 006C                                LCD_Init@i 0097  
                          __end_of_Drive 85C0                    _Get_VirtualWall_State 8C64  
                      __end_of_Fix_Error 4BB0                           __pcstackCOMRAM 0001  
                       _Get_Sensor_State 7EEE                           _PortB_Property FE5D  
                    __size_ofi2_delay_us 0040                             __pidataBANK1 8D08  
                            _Init_Timer0 8DE2                      i2Byte_SetBit@pInput 0001  
                   __end_of_Byte_GetPair 8D62                          Console_Render@x 008A  
                        Console_Render@y 008B                      i2Byte_SetBit@pValue 0004  
                          ?_Set_Rotation 0001                      Timer0_Init@PRESCALE FBED  
                   __end_of_Byte_GetZone 7A3E                            __end_of_floor 66FA  
                      __end_of_Bump_Wall 6BC8                            __end_of_ldexp 6AE8  
                          __end_of_frexp 7232                      FunctReadADC@channel 0060  
                         _PortC_Property FE5B                            __end_of_putch 8F92  
                              ?_MXK_Init 0001                      __end_of_Timer2_Init 6118  
                    __end_of_Timer0_Stop 8FFA                                ?_SPI_Init 008D  
                              ?_SPI_Send 0060                              _Button_Init 6EEA  
                       Fix_Error@i_14198 01B9                        Port_SetType@pType 009C  
                            _Button_Poll 6394                     __end_of_Byte_SetByte 8F76  
                   __end_of_Byte_SetPair 8CA8                           _HMI_LeftSwitch 8EBA  
                         _PortD_Property FE59                     __end_of_Byte_SetQuad 8CC8  
                           ??_LED_Toggle 0078                             ??_HMI_GetBar 0060  
                   __end_of_Byte_SetZone 75AE                           _HMI_DownSwitch 8E7E  
                          SPI_Send@pData 0062                            ??_SteppingCCW 0066  
                  __end_of_MXK_DIPSwitch 8E6A                             ??_HMI_SetBar 0060  
                           ??_HMI_Render 0068                           _PortE_Property FE57  
                         _Sensor_Observe 6118                 __size_of_HMI_SetSegments 009C  
                 __end_ofi2_Word_GetPair 8B46                                  ??_Drive 0065  
                         _PortF_Property FE55                  Port_CheckQuadType@Pair1 0093  
                Port_CheckQuadType@Pair2 0094                 MXK_BlockSwitchTo@pModule 0067  
                                ??_floor 00AD                                  ??_ldexp 00B5  
                                ??_frexp 0066                        ??_FunctInitButton 00A8  
                      _Console_Backspace 8364                          ?_Timer0_Restart 0001  
                                ??_putch 0074                         Move_ADC_To@Angle 00A9  
               __size_of_HMI_RightSwitch 0014                      _Console_ClearCursor 8AE6  
                      __end_of_ToSegment 46EC                           _PortG_Property FE53  
                             __pbssBANK0 00FF                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                    __end_of_Port_GetPin 8912                  Port_CheckQuadType@pQuad 0091  
                        reverse@iterator 0065                       __size_of_eval_poly 0100  
                       ??_SPI_DisableISR 0062                          ?i2_MXK_SwitchTo 0001  
                     ?_Console_Backspace 0001                        __end_of_Reset_Low 8DCA  
              __size_of_Event_TestButton 0034                  __size_of_Port_TogglePin 002E  
                             ??_LCD_Fill 006B                               ??_LCD_Init 0095  
                    __end_of_Port_SetPin 6EEA                   __end_of_PortA_Property FE61  
                              ?_Mode_Set 0001                       Byte_SetByte@pInput 0060  
                             ??_LED_Init 008D                       Byte_SetByte@pValue 0062  
                          ?_ISR_Function 0001                              ?_Reset_High 0001  
                       Bump_Wall@revDist 00AC                               ??_HMI_Init 00A8  
                             ??_HMI_Poll 0084                            ?_Timer2_Clear 0001  
                         Go_Backward@spd 01D9                  Port_CheckPairType@Props 008D  
                 __end_of_PortB_Property FE5F                       __size_of_eusartRec 0008  
                      __end_of_Port_Init 57AC                              ?_Timer0_ISR 0001  
                Port_CheckPairType@pPair 0088                       __end_of_LED_Toggle 87E4  
                     __end_of_HMI_GetBar 9000                 LCD_FillRectangle@pColour 0069  
                   __end_of_FunctReadADC 889E                      ??_Console_Backspace 0062  
                      Set_Addr_Window@xe 0066                        Set_Addr_Window@ye 0067  
                      Set_Addr_Window@xs 0068                        Set_Addr_Window@ys 0065  
                                ?_OutSeg 0063                       Byte_SetPair@pInput 006B  
                                ?_Travel 01BF                              ?_Motor_Step 0001  
                     Byte_SetPair@pValue 006E                                  ?___flge 0060  
                     __end_of_HMI_SetBar 8FE4                   __end_of_PortC_Property FE5D  
                     Word_GetPair@pInput 006C                       __end_of_HMI_Render 89BA  
                         ??_Set_Rotation 0065                                ?_Port_Set 006F  
                                ?___wmul 0060                              ?_Robot_Init 0001  
                       ?_Event_DIPSwitch 0001                        Port_GetPin@Output 0065  
                           ??_ISR_Enable 0060                              ?_Robot_Stop 0001  
           __size_of_Console_ResetCursor 001C                     ?_Console_ClearCursor 0001  
                 __end_of_HMI_LeftSwitch 8ECE                   __end_of_PortD_Property FE5B  
                                _ADC_AN0 01AA                                  _ADC_AN1 01A5  
                                _ADC_AN2 01A0                                  _ADC_AN3 019B  
                             ??_MXK_Init 00A6                              _Move_ADC_To 5A88  
                      Port_GetPin@pInput 0060                        _Console_MakeField 70EE  
                                ?_isfull 0001                        ??_Console_NewLine 0060  
                 __end_of_HMI_DownSwitch 8E92                               ??_SPI_Init 0093  
                 Event_TestButton@pState 0079                               ??_SPI_Send 0063  
                                ?_printf 0075                        ??_HMI_InitButtons 0060  
             __size_of_MXK_InitDIPSwitch 0018                   __end_of_PortE_Property FE59  
                    Console_Render@F6956 01E1                   __end_of_Sensor_Observe 6258  
                     ?_Console_MakeField 0065                                  _COUNTER 0034  
                                i2l11067 87E6                                  i2l11069 87F6  
                        ??_HMI_SetButton 0060                     __end_of_HMI_UpSwitch 8EA6  
                                _LED_Set 85C0                  _Console_IncrementCursor 8176  
                              ?___xxtofl 0060                   __end_of_PortF_Property FE57  
                            _gBackcolour 0158                          ??_HMI_SetNumber 0078  
                              _I2C1_Done 0117                          ?i2_Word_GetPair 000D  
                              _I2C2_Done 0114                                _I2C1_More 0111  
                              _I2C2_More 010E                                ?_delay_ms 0060  
              __end_of_Console_Backspace 83B4                                ?_delay_us 0060  
                    __size_of_Event_NULL 0002               __end_of_MXK_InitTestButton 8E2A  
                                _SSP1ADD 000FC8                                  _SSP1BUF 000FC9  
                                _SSP2BUF 000F6F                   __end_of_PortG_Property FE55  
                    ??_Console_MakeField 0067                          ??_Navigate_Maze 01DB  
                                _SPI_DCS 8A86                     __size_ofi2_MXK_Queue 000E  
                       ?_Configure_GPIOs 0001                 ?_InitSerialCommunication 0001  
                    __end_of_SteppingCCW 8576                             ?_Go_Backward 01D7  
                     eusartSend@sendChar 0060                     i2Byte_GetZone@Offset 0008  
                            ?_SteppingCW 0001                       __end_of_ISR_Enable 8FDA  
                         ??_ISR_Function 0017                     i2Byte_GetZone@Output 0009  
                      Event_TestButton@j 003C                               ??_Mode_Set 0060  
                         ??_Timer2_Clear 0060                                  _Font5x7 FC27  
                   i2Byte_GetZone@pChunk 0004                                  _InitADC 8400  
                   i2Byte_GetZone@pInput 0001                     SPI_DisableISR@pInput 0060  
                          ?_Port_GetQuad 0060                          Byte_SetBit@pBit 0062  
                   Port_TogglePin@pInput 0074                    __end_ofi2_Byte_SetBit 8498  
                 ?_Get_VirtualWall_State 0061                                  __Hparam 0000  
                      Port_GetQuad@pQuad 0062                              _Timer2_Init 5FD2  
                                __Lparam 0000                              _Timer0_Stop 8FF4  
                  __size_of_Console_Init 006A                                  OutSeg@a 0042  
        __end_ofPortProperty_Valid@F6830 FC0D                            LCD_Write@mode 0063  
                        __size_of_OutSeg 006E                              _Motor_Count 014A  
                             ??_Port_Set 0072                          __size_of_Travel 0608  
                        __size_of___flge 0122                __end_of_Console_MakeField 7194  
                      _Console_PrintChar 5D3A                  __size_of_Closest_Object 00AA  
                                ___fladd 38DA                            ?_Port_SetType 009A  
                                _gCursor 0047                                  ___fldiv 3F08  
                                ___awdiv 7746                                  ___flneg 8AB6  
                  ??_Console_ClearCursor 0060                                  ___flmul 3588  
                                ___flsub 8650                                  ___fltol 6BC8  
                                _lBuffer 03F2                                  ___lldiv 77CC  
                        __size_of___wmul 0028                                  ___lwdiv 81CA  
                                ___lwmod 86DE                                  Turn@Dir 0065  
                                Turn@Rad 0069                          ?_HMI_LeftSwitch 0001  
               __end_of_Console_FormFeed 7C7A                       ?_Console_PrintChar 0001  
                                __pcinit 73FC                        __end_of_eval_poly 6906  
                        ?_HMI_DownSwitch 0001                                  __ramtop 1000  
                        __size_of_isfull 0012                                _CCW_Count 0124  
                                __ptext0 2E28                                  __ptext1 6118  
                                __ptext2 8E2A                                  __ptext3 28F4  
                                __ptext4 8498                                  __ptext5 8F32  
                                __ptext6 6CA6                                  __ptext7 22EC  
                                __ptext8 8722                                  __ptext9 8F44  
                             _eusartSend 8F92                          __size_of_printf 0168  
                                _average 002C                                _T0CONbits 000FD5  
                        ?_Sensor_Observe 0001                        i2MXK_SwitchTo@CUR 0007  
                                _countOn 01EF                                  _dpowers FC0D  
                              _T2CONbits 000FCA                            LED_Set@pValue 0074  
                           __size_of_exp 0274                             __size_of_log 0174  
                    __size_of_Reset_High 0018                    Event_DIPSwitch@pState 0079  
                           __size_of_pop 004A                             __size_of_pow 01D6  
                             ??___xxtofl 0064                             ?_GetPortPORT 0060  
                                _isempty 8F32                             ?_GetPortTRIS 0060  
                    ??_Console_PrintChar 0070                        __end_of_eusartRec 8FF4  
                            _Port_GetPin 88D8                        __CFG_MSSPMSK$MSK5 000000  
                    LCD_DrawRectangle@p2 01B3                      LCD_DrawRectangle@p4 01AF  
                           ??i2_delay_us 0003                               ??_delay_ms 0062  
                             ??_delay_us 0062                                  _reverse 8122  
              Sensor_Observe@High_Sensor 00F3                                _DIPSwitch 03DA  
                    __size_of_Timer0_ISR 0028                              _Port_SetPin 6E36  
                __size_of_UpdateDistance 0066                           LCD_DrawField@i 0082  
                           ?_Create_Maze 0001                                _LCD_Reset 82C4  
                    __size_of_Motor_Step 010C                              _VictimCount 0134  
                              _LCD_Write 8CE8                     __size_of_MXK_Dequeue 0030  
                             delay_ms@ms 0060                     end_of_initialization 7484  
                    __size_of_Robot_Init 0016                                  exp@sign 00C1  
                             delay_us@us 0060                      __size_of_Robot_Stop 0020  
                      ??_HMI_SetSegments 0063                  Console_PrintChar@pInput 0073  
                           _Console_Init 7CE6                     __size_of_MXK_Release 0016  
             __end_of_Port_CheckPairType 8014                                  itos@Out 0074  
                         ??_Port_GetQuad 0063                       _PortProperty_Valid 7E20  
                                pop@data 0085                       Byte_SetQuad@pInput 006B  
                     SPI_MinSpeed@pInput 006F                                i2u1616_48 8C04  
                     Byte_SetQuad@pValue 006E                    __size_of_Byte_GetPair 001C  
                        ___lldiv@divisor 0064                    __size_of_Byte_GetZone 007A  
                      ??_HMI_RightSwitch 0066                                  pow@sign 00D2  
                        ___lldiv@counter 006C                __end_of_Console_PrintChar 5E8A  
                         ??_Port_SetType 009D               __end_of_Port_CheckQuadType 8364  
                                printf@c 0082                                  printf@f 0075  
                         Port_Init@pPort 00A2                                  postdec1 000FE5  
                                postdec2 000FDD                    __size_of_Byte_SetByte 000E  
                  __size_of_Byte_SetPair 0020                   Console_MakeField@Index 0069  
                       _ADCAverage$15870 00E9                         _ADCAverage$15871 00ED  
                       _ADCAverage$15866 00D9                         _ADCAverage$15867 00DD  
                       _ADCAverage$15868 00E1                         _ADCAverage$15869 00E5  
                                postinc0 000FEE                                  postinc2 000FDE  
                    ?_PortProperty_Valid 006F                    __size_of_Byte_SetQuad 0020  
             __end_of_Port_CheckPortType 87A4                    __size_of_Byte_SetZone 008E  
                 __size_of_Detect_Victim 004C                       __end_ofi2_delay_us 8824  
                     Button_Init@pInitIO 009F                        ?_Port_SetQuadType 0096  
                            _gForecolour 01FB                ??_Console_IncrementCursor 0064  
                 __size_ofi2_MXK_Release 0006                      __size_of_SteppingCW 004A  
                              _PORTFbits 000F85                               _timercount 011E  
                     ??_Port_SetQuadType 009A                             ?_Console_Tab 0001  
                       Byte_GetZone@MASK 0066                              ___fladd@grs 009E  
                  Console_Render@lCursor 0086                              _SteppingCCW 852C  
        __end_of_InitSerialCommunication 8D46                                _MXK_Queue 8F76  
                       __CFG_CPUDIV$OSC1 000000                            ___xxtofl@sign 0068  
                       Byte_GetZone@pMax 0062               __size_of_Console_Backspace 0050  
                              _TRISCbits 000F94                              _Square_Dist 0130  
                        _Set_Addr_Window 72CE                           SPI_Init@pClock 008D  
                       ??_LCD_Word_Write 0067                 __end_of_Get_Sensor_State 7F54  
                            ___fldiv@grs 0073                              ___fldiv@rem 006D  
                  __end_of_LCD_DrawField 78CE                           Port_Set@pInput 006F  
                         SPI_Init@pInput 0093                     ??_PortProperty_Valid 0073  
                         Port_Set@pValue 0071                               ?_LCD_Reset 0001  
                   __end_of_Set_Rotation 7520                               ?_LCD_Write 0063  
                           _Byte_GetPair 8D46                       HMI_SetButton@F7213 FC20  
                           _Byte_GetZone 79C4                            ?_MXK_SwitchTo 0001  
                      LCD_DrawField@xmax 0080                        LCD_DrawField@ymax 0081  
                            Travel@error 01D5  Get_VirtualWall_State@Vitual_Wall_Sensor 0064  
                         _Port_TogglePin 8B46                         _Event_TestButton 89F0  
                            ___flmul@grs 007C                    __size_of_FunctReadADC 003C  
                   Port_SetPinType@Props 008B                             ?_Byte_GetBit 0060  
                __size_ofi2_Byte_GetPair 001A                             _Byte_SetByte 8F68  
                           _Byte_SetPair 8C88                             _Byte_SetQuad 8CA8  
                         _Previous_Angle 013A                  __size_ofi2_Byte_GetZone 0076  
                           _Byte_SetZone 7520                     Port_SetPinType@pType 0089  
                      ?i2_Timer0_Restart 0001                             ?_Byte_SetBit 0060  
                          ?_SPI_MaxSpeed 006F                        __size_of_LCD_Fill 0048  
                           ??_Event_NULL 0060                        __size_of_LCD_Init 0148  
                      __size_of_LED_Init 0054                            ?_SPI_MinSpeed 006F  
                  __end_ofi2_Timer0_Stop 900C                       ??i2_Timer0_Restart 0001  
                      __size_of_HMI_Init 017C                        __size_of_HMI_Poll 0060  
                          ?i2_Motor_Step 0001                             ?_Init_Timer0 0001  
             __size_of_Console_MakeField 00A6                           __end_of_OutSeg 7C0E  
                         __end_of_Travel 28F4                           __end_of___flge 65E4  
                  __size_of_HMI_UpSwitch 0014                                _Close_Pos 0128  
                         __end_of___wmul 8BF0                    __end_of_HMI_DIPSwitch 8E7E  
                              _Fix_Error 4960                            __pidataCOMRAM 8FC6  
                           ?_Button_Init 009B                          _FunctInitButton 7AB4  
                           ?_Button_Poll 007B                              ?_eusartSend 0001  
                              _Bus_State 004D                      i2Byte_GetPair@pPair 000C  
                         __end_of_isfull 8F56                     __end_of_ISR_Function 14AA  
                              _Bump_Wall 6AE8                        __size_of_MXK_Init 013C  
                              _BumpState 012C                              Turn@C_Angle 0067  
                             floor@expon 00B1                     __end_of_Timer2_Clear 8FEC  
                         __end_of_printf 5A88                        __size_of_SPI_Init 03A4  
                      __size_of_SPI_Send 006C                            ?_Word_GetPair 006C  
                       ??_Timer0_Restart 0060                       Port_SetType@Output 009F  
                    start_initialization 73FC                               ?_MXK_Queue 0060  
                             eval_poly@d 00A3                               eval_poly@n 00A5  
                             eval_poly@x 009F                               ldexp@value 00AF  
                           _FunctReadADC 8862                 PortProperty_Valid@Errors 0075  
                       ??i2_MXK_SwitchTo 0007                        _LCD_FillRectangle 821E  
                     Port_SetType@pInput 009A                             _Current_Dist 0152  
                            __end_of_exp 4960                              __end_of_log 5920  
                            _ADC_Reading 012A                              __end_of_pop 84E2  
                            __end_of_pow 4F98                               HMI_Init@in 00A8  
                    HMI_SetNumber@pInput 0076                    __end_ofi2_Port_SetPin 70EE  
                     __end_of_Event_NULL 1406                           Fix_Error@X_Pos 00F1  
                         Fix_Error@Y_Pos 00F3                            _Detect_Victim 83B4  
                 __end_of_Port_TogglePin 8B74                            ?_Word_SetPair 006F  
                      Byte_SetBit@pInput 0060                           ??_MXK_SwitchTo 0066  
                      Byte_SetBit@pValue 0063                       ?_LCD_FillRectangle 0069  
                    _Console_ResetCursor 8D62              PortProperty_Valid@pPinDrive 0071  
                   MXK_BlockSwitchTo@CUR 0066                 PortProperty_Valid@pInput 006F  
                          i2_MXK_Release 900C                               frexp@value 0060  
                 LCD_FillRectangle@pSize 006F                           SPI_Send@pInput 0060  
                   __size_of_Go_Backward 00D2                             ??_Reset_High 0074  
               __size_of_Port_SetPinType 019E                           ??_SPI_MaxSpeed 0071  
                  Port_SetQuadType@pQuad 0098                                _ToSegment 4468  
                    ??_LCD_FillRectangle 0073                    Port_SetQuadType@pType 0099  
                        _Console_NewLine 78CE                           ??_SPI_MinSpeed 0071  
                           _HMI_UpSwitch 8E92                                _Reset_Low 8DB2  
                           ??_Timer0_ISR 0017                          _HMI_InitButtons 9000  
                      __size_of_Mode_Set 0012               __size_of_Console_PrintChar 0150  
                              _gCharSize 01E9                         Timer2_Init@INDEX 003E  
                              OutSeg@cur 0044                           ??i2_Motor_Step 0015  
                               ??_OutSeg 0064                                OutSeg@out 0067  
                __size_of_Console_Render 01B8                             ??_Motor_Step 0074  
                               ??_Travel 00F9                           _Closest_Object 6F9A  
                               ??___flge 0068                       Byte_SetZone@Offset 0069  
                           ??_Robot_Init 0067                                 ??___wmul 0064  
                           ??_Robot_Stop 0061                     ?_Console_ResetCursor 0001  
                              _Port_Init 5638                              __pdataBANK1 01E1  
                           ?_Move_ADC_To 00A9                        __size_of_Port_Set 02AA  
                     Byte_SetZone@pChunk 0063                               ?_Fix_Error 00F1  
                               ??_isfull 0060                         ??i2_Word_GetPair 0010  
                     Byte_SetZone@pInput 0060                       Byte_SetZone@pValue 0065  
                          Mode_Set@pMode 0060                                 ??_printf 007B  
                __end_of_Set_Addr_Window 7368                 Port_CheckQuadType@Output 0095  
                             ?_Bump_Wall 0001                                _gLineSize 01E5  
               Port_CheckQuadType@pDrive 0092                                ___fladd@a 008F  
                              ___fladd@b 008B                           ??_Word_GetPair 006F  
               Port_CheckQuadType@pInput 008F                            _Desired_Level 01F3  
                              Travel@Dir 01C9                     __end_of_Port_GetQuad 8862  
                              ___fldiv@a 0064                                ___fldiv@b 0060  
              __end_of_LCD_FillRectangle 8272                              __pbssBIGRAM 03F2  
                              Travel@Spd 01C5                                 ?_LED_Set 0074  
                      Bump_Wall@distTrav 00AE                                ___flmul@a 0072  
                              ___flmul@b 006E                              __pbssCOMRAM 0029  
                              ___flsub@a 00A3                                ___flsub@b 009F  
                     __end_of_Reset_High 8DE2                            __pcstackBANK0 0060  
                          __pcstackBANK1 01B7                            __pcstackBANK2 02FC  
                          __pcstackBANK3 03EE                           _UpdateDistance 7E88  
                             itos@Length 0072                           ?_Detect_Victim 0061  
                         ??_Word_SetPair 0073                        __size_of___xxtofl 0154  
                     __end_of_Timer0_ISR 8C18                     __size_of_GetPortPORT 0088  
                            ??_LCD_Reset 0079                     __size_of_GetPortTRIS 0088  
                   __end_of_Port_SetType 5166                                 ?_SPI_DCS 0060  
                        ?_Port_TogglePin 0074                              ??_LCD_Write 0064  
                      __size_of_delay_ms 005C                        __size_of_delay_us 0046  
                              Turn@Angle 0061                      __CFG_CCP2MX$DEFAULT 000000  
                     __end_of_Motor_Step 6806                    Timer2_Init@pFrequency 006D  
                           ??_SteppingCW 0066                           ?i2_MXK_Release 0001  
                              Turn@Speed 0063                       __end_of_Robot_Init 8E40  
                   __size_of_Create_Maze 22EC                       __end_of_Robot_Stop 8CE8  
                              _exp$15874 00BB                  ??_Get_VirtualWall_State 0063  
                               ?_InitADC 0001                 Port_CheckPairType@Output 008C  
                    __size_of_eusartSend 000E                               ?_ToSegment 0001  
               Port_CheckPairType@pDrive 0089                 Port_CheckPairType@pInput 0086  
                         reverse@tempVar 0064                   __end_of_Closest_Object 7044  
                     _MXK_InitTestButton 8E12                               ?_Reset_Low 0001  
                 __size_of_MXK_DIPSwitch 0014                             ?_Timer2_Init 006D  
                       ??_HMI_LeftSwitch 0066                             ?_Timer0_Stop 0001  
                       ___lwdiv@dividend 0060                            _lStepFunction 010B  
                __size_of_MXK_TestButton 0014                        Byte_SetPair@pPair 006D  
                __end_of_FunctInitButton 7B2A                         ??_HMI_DownSwitch 0066  
       __size_of_InitSerialCommunication 001E                                __pintcode 1408  
                          __pmediumconst FB3A                    ??_Console_ResetCursor 0060  
                               ?___fladd 008B                                 ?___fldiv 0060  
                               ?___awdiv 0060                                __ptext100 65E4  
                              __ptext101 7194                                __ptext110 7232  
                              __ptext102 64C2                                 ?___flneg 0087  
                              __ptext111 4468                                __ptext103 6806  
                              __ptext120 5920                                __ptext112 8984  
                              __ptext104 8650                                __ptext121 8F84  
                              __ptext113 7BA0                                __ptext105 8AB6  
                              __ptext130 8AE6                                __ptext122 5D3A  
                              __ptext114 8862                                __ptext106 3F08  
                              __ptext131 86DE                                __ptext123 7368  
                              __ptext115 6AE8                                __ptext107 8C3E  
                              __ptext140 8EE2                                __ptext132 81CA  
                              __ptext124 7746                                __ptext116 7E88  
                              __ptext108 6D78                                __ptext141 8EF6  
                              __ptext133 5BE6                                __ptext125 8176  
                              __ptext117 8FEC                                __ptext109 8122  
                              __ptext150 8CE8                                __ptext142 8F0A  
                              __ptext134 6BC8                                __ptext126 78CE  
                              __ptext118 8CC8                                __ptext151 7C7A  
                              __ptext143 8F1E                                __ptext135 3588  
                              __ptext127 7C0E                                __ptext119 5A88  
                              __ptext160 6906                                __ptext152 8F56  
                              __ptext144 5166                                __ptext136 38DA  
                              __ptext128 8D62                                __ptext161 9006  
                              __ptext153 70EE                                __ptext145 821E  
                              __ptext137 84E2                                __ptext129 8364  
                              __ptext170 900C                                __ptext162 8FBA  
                              __ptext154 8B74                                __ptext146 7850  
                              __ptext138 852C                                __ptext171 8FA0  
                              __ptext163 7044                                __ptext155 7EEE  
                              __ptext147 8BC8                                __ptext139 8072  
                              __ptext172 0000                                __ptext164 8B16  
                              __ptext156 8576                                __ptext148 72CE  
                              __ptext165 8D98                                __ptext157 8F92  
                              __ptext149 8D7E                                __ptext166 7B2A  
                              _pShiftVal 0032                                __ptext167 844C  
                              __ptext159 8BF0                                __ptext168 89BA  
                              __ptext169 87E4                                 ?___flmul 006E  
                       ??_Sensor_Observe 00F1                                 ?___flsub 009F  
                               ?___fltol 009F                                 ?___lldiv 0060  
                             ?_Port_Init 00A0                                 ?___lwdiv 0060  
                               ?___lwmod 0067                      ?_MXK_InitTestButton 0001  
                      ?_Console_FormFeed 0001                        _GetPortProperties 7636  
                              _pow$15872 00CA                                _pow$15873 00CE  
                     __end_of_SteppingCW 852C              __end_ofTimer0_Init@PRESCALE FBFD  
                     ??_Console_FormFeed 0060                          _HMI_SetSegments 7232  
                     ?_GetPortProperties 0060                         Event_NULL@pState 0001  
                 __end_of_UpdateDistance 7EEE                 __size_of_Event_DIPSwitch 0026  
                  __size_of_Set_Rotation 0092                            ??i2_MXK_Queue 0004  
                              _eval_poly 6806                                 ?_isempty 0001  
                            ??_MXK_Queue 0063                             ?_Port_GetPin 0060  
                         __size_of_Drive 004A                    __end_of_HMI_SetButton 79C4  
                   __size_of_Console_Tab 0094                                 ?_reverse 0060  
                           ?_Port_SetPin 006F                                _readIndex 002E  
                  __end_of_HMI_SetNumber 8C64                         ___lwdiv@quotient 0065  
                        _HMI_RightSwitch 8EA6                           __size_of_floor 0116  
                         __size_of_ldexp 00E4                           __size_of_frexp 009E  
                    ??_GetPortProperties 0062                  __end_of_Console_NewLine 794A  
                              _eusartRec 8FEC                     ??_MXK_InitTestButton 008D  
                     Byte_GetPair@pInput 0069                           __size_of_putch 000E  
                  __end_of_Navigate_Maze 2E28                  __end_of_HMI_InitButtons 9006  
                      i2Port_SetPin@Type 0014                        i2Port_SetPin@pPin 0012  
                         i2_Byte_GetPair 8D98                                 _LCD_Fill 8608  
                               _LCD_Init 5E8A                           ___wmul@product 0064  
                               _HMIBoard 03A0                           i2_Byte_GetZone 7B2A  
                               _LED_Init 80CE                                delay_ms@u 0062  
                     Button_Poll@pButton 007B                                delay_us@u 0062  
                               _HMI_Init 54BC                                 _HMI_Poll 7F54  
                     MXK_Queue@pCallback 0060                                 _IPR1bits 000F9F  
                               _IPR3bits 000FA5                                 _PIE1bits 000F9D  
                               _PIE3bits 000FA3              __end_of_Console_ClearCursor 8B16  
               __size_of_Configure_GPIOs 005E                     __size_of_Byte_GetBit 002C  
                        ?_Closest_Object 0001                        Byte_SetQuad@pQuad 006D  
                               _PIR1bits 000F9E                                 _PIR3bits 000FA4  
                               _CW_Count 0122                                 i2u831_44 8460  
                               i2u831_45 845C                                 i2u832_44 8486  
                               i2u832_45 8482                                 i2u835_40 8812  
                               i2u931_40 6948                                 i2u932_40 695C  
                               i2u773_40 7B4C                                 i2u933_40 6994  
                               i2u773_47 7B42                                 i2u775_40 7B94  
                               i2u775_45 7B90                     __size_of_Byte_SetBit 0052  
                               _RCONbits 000FD0                     i2Word_GetPair@pInput 000D  
                     _Sensor_Observe_Fin 0120                         __CFG_WDTPS$32768 000000  
                       HMI_SetBar@pValue 0060                        Button_Init@pInput 009B  
                __size_of_SPI_DisableISR 0028                                 _SSP1CON1 000FC6  
                      ??_Port_SetPinType 008A                                 _SSP1CON2 000FC5  
                               _SSP2CON1 000F6C                                 _SSP2CON2 000F6B  
                  __size_of_ISR_Function 00A2                                 _SSP1STAT 000FC7  
              __end_of_GetPortProperties 76BE                                 _SSP2STAT 000F6D  
                           _Set_Rotation 748E                    __size_of_Timer2_Clear 0008  
                   __end_of_MXK_SwitchTo 88D8                       _Port_CheckPairType 7FB4  
                               _MXK_Init 6258                              ??_Fix_Error 00F5  
                   __size_of_Init_Timer0 0018                          MXK_SwitchTo@CUR 0066  
                               _SPI_Init 31E4                 __end_of_Event_TestButton 8A24  
                               _SPI_Send 7C7A                               _ADCON0bits 000FC2  
                             _ADCON1bits 000FC1                         ?_Set_Addr_Window 0065  
                      ___wmul@multiplier 0060                              ??_Bump_Wall 00AB  
                      Byte_GetBit@Output 0064                     Go_Backward@direction 01D7  
                             printf@flag 007C                     Timer2_Init@pCPUClock 0076  
             __size_of_LCD_FillRectangle 0054                             ?_SteppingCCW 0001  
                   __size_of_Button_Init 00B0                          ?_UpdateDistance 0061  
                   __end_of_SPI_MaxSpeed 7DB8                               printf@prec 007D  
                      Byte_GetBit@pInput 0060                      Port_SetPinType@pPin 0088  
                   __size_of_Button_Poll 012E                               ?_eval_poly 009F  
                        ??_Detect_Victim 0063                       _Port_CheckQuadType 8314  
                          _MXK_DIPSwitch 8E56                      ?_Port_CheckPairType 0086  
                              main@right 03EF                     __end_of_SPI_MinSpeed 7E20  
                          ??_MXK_Dequeue 0076                         __size_of_LED_Set 0048  
                 __size_ofi2_Byte_SetBit 004C                       _Port_CheckPortType 8764  
                  Button_Poll@pIncrement 007D                  PortProperty_Valid@F6830 FBFD  
                   __end_ofi2_Motor_Step 6A04                          ??i2_MXK_Release 0001  
                      ?_Get_Sensor_State 0001                               _ADCAverage 3C18  
                              copy_data0 7410                                copy_data1 7430  
                          ??_MXK_Release 0060                               ?_eusartRec 0001  
                 __end_ofi2_Byte_GetPair 8DB2                __size_of_Port_SetQuadType 0212  
                       __size_of_SPI_DCS 0030                      ?_Port_CheckQuadType 008F  
                 __end_ofi2_Byte_GetZone 7BA0                      __end_ofi2_MXK_Queue 8FAE  
                     ??_Get_Sensor_State 0061                      ?_Port_CheckPortType 0096  
                        itos@destination 006E                                 _InitList FB3B  
                   _Motor_Step$intlevel0 6700                                 _Mode_Set 8F56  
                     Port_GetQuad@Output 0065                              ??_ToSegment 0060  
                           _ISR_Function 1408                                frexp@eptr 0064  
                     Port_GetQuad@pInput 0060                             _Timer2_Clear 8FE4  
                       __size_of_InitADC 004C                     __end_of_Word_GetPair 8A56  
                               _lCBuffer 0328                     ??_Port_CheckPairType 008A  
                            ??_Reset_Low 0074                                 __Hrparam 0000  
                           OutSeg@pInput 0066                                 _WallFlag 003B  
                         _Console_Render 5166                                 __Lrparam 0000  
                        Timer2_Init@RDIV 0072                         ?_FunctInitButton 0001  
                         LCD_Write@value 0064                                 _Port_Set 41BE  
                           OutSeg@segset 0043                                rand@screw 0041  
                   __end_of_Word_SetPair 894C                              ??_Port_Init 00A3  
                __end_of_HMI_SetSegments 72CE                     ??_Port_CheckQuadType 0093  
                       __size_of___fladd 033E                         __size_of___fldiv 02B6  
                  __size_of_Port_GetQuad 003E                         __size_of___awdiv 0086  
                       __size_of___flneg 0030                         __size_of___flmul 0352  
                       __size_of___flsub 0048                         __size_of___fltol 00DE  
                       __size_of___lldiv 0084                        _MXK_BlockSwitchTo 894C  
                       __size_of___lwdiv 0054                     ??_Port_CheckPortType 0099  
                       __size_of___lwmod 0044                                 _lBufferX 0045  
                               _lBufferY 00FF                      Timer2_Init@PRESCALE FC24  
                           ??_eusartSend 0060                          LCD_Fill@pColour 0069  
                     ?_MXK_BlockSwitchTo 0001                __size_ofi2_Timer0_Restart 000C  
                   __size_of_Move_ADC_To 015E                                 _lCurrent 0038  
                __end_of_HMI_RightSwitch 8EBA                   Byte_GetZone@pChunkSize 0064  
                         ?_MXK_DIPSwitch 0001                   Byte_SetZone@pChunkSize 0064  
                  __size_of_Port_SetType 01CE                            reverse@length 0062  
                           Create_Maze@p 006A                             Create_Maze@x 006C  
                           Create_Maze@y 006E                                itos@input 006C  
                  i2MXK_SwitchTo@pModule 0008                                 ___xxtofl 5BE6  
                               _delay_ms 8072                                 _delay_us 8698  
                               _clearall 0046                         __size_of_isempty 0012  
                        ___lwdiv@divisor 0062                          ___lwdiv@counter 0064  
                        Port_GetPin@pPin 0062                                 __ptext10 7A3E  
                               __ptext11 8C64                                 __ptext20 75AE  
                               __ptext12 4960                                 __ptext21 7636  
                               __ptext13 83B4                                 __ptext30 8E40  
                               __ptext22 76BE                                 __ptext14 6258  
                               __ptext31 8F76                                 __ptext23 80CE  
                               __ptext15 5638                                 __ptext40 8DB2  
                               __ptext32 894C                                 __ptext24 85C0  
                               __ptext16 4F98                                 __ptext41 8DCA  
                               __ptext33 8698                                 __ptext25 8A56  
                               __ptext17 8764                                 __ptext50 8E7E  
                               __ptext42 8DE2                                 __ptext34 5E8A  
                               __ptext26 66FA                                 __ptext18 41BE  
                               __ptext51 8E92                                 __ptext43 8D28  
                               __ptext35 748E                                 __ptext27 8FF4  
                               __ptext19 8F68                                 __ptext60 87A4  
                               __ptext52 8EA6                                 __ptext44 8400  
                               __ptext36 8608                                 __ptext28 8FAE  
                               __ptext61 8B46                                 __ptext53 8EBA  
                               __ptext45 8FD0                                 __ptext37 8014  
                               __ptext29 889E                                 __ptext70 77CC  
                               __ptext62 6E36                                 __ptext54 8ECE  
                               __ptext46 7F54                                 __ptext38 7D50  
                               __ptext71 8FE4                                 __ptext63 88D8  
                               __ptext55 8824                                 __ptext47 6394  
                               __ptext39 82C4                      ??_MXK_BlockSwitchTo 0066  
                               __ptext80 8272                                 __ptext72 8BA0  
                               __ptext64 8FDA                                 __ptext56 8C18  
                               __ptext48 8E56                                 __ptext81 4BB0  
                               __ptext73 8A86                                 __ptext65 8FFA  
                               __ptext57 1404                                 __ptext49 8E6A  
                               __ptext90 8CA8                                 __ptext82 8912  
                               __ptext74 7AB4                                 __ptext66 54BC  
                               __ptext58 89F0                                 __ptext91 7520  
                               __ptext83 8C88                                 __ptext75 6EEA  
                               __ptext67 7DB8                                 __ptext59 794A  
                               __ptext92 0000                                 __ptext84 8314  
                               __ptext76 8DFA                                 __ptext68 31E4  
                               __ptext93 7CE6                                 __ptext85 7FB4  
                               __ptext77 9000                                 __ptext69 5FD2  
                               __ptext94 6F9A                                 __ptext86 7E20  
                               __ptext78 8E12                                 __ptext95 3C18  
                               __ptext87 8A24                                 __ptext79 531E  
                               __ptext96 4DC2                                 __ptext88 8D46  
                               __ptext97 57AC                                 __ptext89 79C4  
                               __ptext98 46EC                                 __ptext99 6A04  
                           _SSP1CON1bits 000FC6                         __size_of_reverse 0054  
                           _SSP1CON2bits 000FC5              __size_of_PortProperty_Valid 0068  
                     i2Byte_GetZone@MASK 0007                             _SSP2CON1bits 000F6C  
                           _SSP2CON2bits 000F6B                          ?i2_Byte_GetPair 000A  
                       ?_Console_NewLine 0001                        ??_Event_DIPSwitch 0079  
                        ?i2_Byte_GetZone 0001                                 _countOff 01ED  
                          __size_of_STP1 0014                            __size_of_STP2 0014  
                          __size_of_STP3 0014                            __size_of_STP4 0014  
                     i2Byte_GetZone@pMax 0003                         ?_HMI_InitButtons 0001  
                    __end_of_MXK_Dequeue 8A86                        HMI_SetSegments@in 0064  
                  Button_Init@pThreshold 009D                            __size_of_Turn 0076  
                          __size_of_main 03BC                            __size_of_itos 00BE  
                      Byte_GetPair@pPair 006B                            __size_of_push 0042  
                               _readings 0346                   __end_of_Console_Render 531E  
                    i2Port_SetPin@pInput 0010                      i2Port_SetPin@pValue 0013  
                     __end_of_eusartSend 8FA0                             _Port_GetQuad 8824  
                    __end_of_MXK_Release 8E56                           _MXK_TestButton 8ECE  
                _InitSerialCommunication 8D28                            i2_Byte_SetBit 844C  
                    i2Word_GetPair@pPair 000F                __end_of_MXK_BlockSwitchTo 8984  
               ?_Console_IncrementCursor 0001                     __size_of_Timer2_Init 0146  
                               int$flags 0051                     __size_of_Timer0_Stop 0006  
                           _Port_SetType 4F98                             Port_Set@Type 0086  
             __size_of_GetPortProperties 0088                   __size_of_LCD_DrawField 007E  
                      ??_Configure_GPIOs 0095                                printf@val 0080  
                           _SSP1STATbits 000FC7                                 main@left 03F1  
                               main@down 03EE                           Timer0_Init@DIV 0104  
                         Timer0_Init@PRE 003F                             _SSP2STATbits 000F6D  
                               exp@coeff FE07                               _LED_Toggle 87A4  
                               log@coeff FE2F                               _HMI_GetBar 8FFA  
                   Button_Init@pGetState 00A2                   PortProperty_Valid@Pair 0085  
                       ??_Port_TogglePin 0077                              _OSCTUNEbits 000F9B  
                             _INTCONbits 000FF2                   PortProperty_Valid@pPin 0072  
                            ??_eval_poly 00A7                               _HMI_SetBar 8FDA  
                             _HMI_Render 8984                         Byte_SetZone@MASK 006A  
                            i2_MXK_Queue 8FA0                           Timer2_Init@DIV 0100  
                         Timer2_Init@PRE 003D                         Byte_SetZone@pMax 0062  
                 __size_ofi2_Timer0_Stop 0006                     __size_of_Port_GetPin 003A  
                            ?_ADCAverage 0001                     Button_Init@pFunction 00A5  
                               itos@Data 0070                              ??_eusartRec 0060  
                          ??_Go_Backward 00FD                       LCD_FillRectangle@i 0075  
                     LCD_FillRectangle@j 0076                     __size_of_Port_SetPin 00B4  
                               intlevel2 0000                             reverse@input 0060  
                            _numReadings 01F7                   __size_of_HMI_DIPSwitch 0014  
                       ___lwmod@dividend 0067                         ___lldiv@dividend 0060  
                 __end_of_MXK_TestButton 8EE2           __size_of_Get_VirtualWall_State 0024  
                        ?_Console_Render 0001            __end_of_Get_VirtualWall_State 8C88  
                __size_of_LCD_Word_Write 001A                           ?i2_Byte_SetBit 0001  
                  __size_of_MXK_SwitchTo 003A                           _SPI_DisableISR 8BA0  
                        Port_Init@pInput 00A0                                 printf@ap 007E  
                            _thisReading 0146                                 push@data 0083  
                 __size_ofi2_Port_SetPin 00AA                               _ISR_Enable 8FD0  
                       ?_HMI_SetSegments 0061                  Console_MakeField@Column 006C  
                  __size_of_SPI_MaxSpeed 0068                            SPI_DCS@pInput 0060  
                  __size_of_SPI_MinSpeed 0068             Detect_Victim@Home_Base_State 0064  
                        ??_MXK_DIPSwitch 0066                    __size_ofi2_Motor_Step 00FE  
                Console_MakeField@pInput 006B                         ?_HMI_RightSwitch 0001  
                       ___lldiv@quotient 0068                            ??_GetPortPORT 0062  
                        ___lwmod@divisor 0069                            ??_GetPortTRIS 0062  
                     Word_SetPair@pInput 006F                          ___lwmod@counter 006B  
                     Word_SetPair@pValue 0072                              _MXK_Dequeue 8A56  
                   __size_of_SteppingCCW 004A                            ??_Create_Maze 0066  
                         LED_Toggle@pLED 0078                               Fix_Error@i 01B7  
                          ___fladd@signs 009B                            _LCD_DrawField 7850  
                       _Port_SetQuadType 4BB0                              _MXK_Release 8E40  
              __size_of_Console_FormFeed 006C                             _MXK_SwitchTo 889E  
                  __size_of_Word_GetPair 0032                       Byte_GetZone@Offset 0067  
                          ?_Console_Init 0001                        Word_SetPair@pPair 0071  
                       ??_Closest_Object 00F1                          _Port_SetPinType 531E  
                           ___fladd@aexp 009C                             ___fladd@bexp 009D  
                __size_of_Timer0_Restart 000C                       Byte_GetZone@Output 0068  
              ??_InitSerialCommunication 0060                       Byte_GetZone@pChunk 0063  
                        ?_MXK_TestButton 0001              __end_of_Console_ResetCursor 8D7E  
                     Byte_GetZone@pInput 0060                  __size_ofi2_MXK_SwitchTo 0036  
        __end_of_Console_IncrementCursor 81CA                    __size_of_Word_SetPair 003A  
                    __end_of_Go_Backward 6D78                   __end_of_SPI_DisableISR 8BC8  
                           _SPI_MaxSpeed 7D50                             _SPI_MinSpeed 7DB8  
                     Port_Set@TypeActual 0084                              Drive@SpeedL 0061  
                            Drive@SpeedR 0063  
